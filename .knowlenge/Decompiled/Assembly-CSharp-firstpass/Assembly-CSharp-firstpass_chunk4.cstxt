using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal static class OnJoinGameAcceptedCallbackInternalImplementation
{
	private static OnJoinGameAcceptedCallbackInternal s_Delegate;

	public static OnJoinGameAcceptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinGameAcceptedCallbackInternal))]
	public static void EntryPoint(ref JoinGameAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<JoinGameAcceptedCallbackInfoInternal, OnJoinGameAcceptedCallback, JoinGameAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Presence;

public delegate void OnPresenceChangedCallback(ref PresenceChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPresenceChangedCallbackInternal(ref PresenceChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal static class OnPresenceChangedCallbackInternalImplementation
{
	private static OnPresenceChangedCallbackInternal s_Delegate;

	public static OnPresenceChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPresenceChangedCallbackInternal))]
	public static void EntryPoint(ref PresenceChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<PresenceChangedCallbackInfoInternal, OnPresenceChangedCallback, PresenceChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Presence;

public delegate void OnQueryPresenceCompleteCallback(ref QueryPresenceCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPresenceCompleteCallbackInternal(ref QueryPresenceCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal static class OnQueryPresenceCompleteCallbackInternalImplementation
{
	private static OnQueryPresenceCompleteCallbackInternal s_Delegate;

	public static OnQueryPresenceCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPresenceCompleteCallbackInternal))]
	public static void EntryPoint(ref QueryPresenceCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryPresenceCallbackInfoInternal, OnQueryPresenceCompleteCallback, QueryPresenceCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct PresenceChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId PresenceUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<PresenceChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PresenceUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out PresenceChangedCallbackInfo other)
	{
		other = default(PresenceChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_PresenceUserId, out EpicAccountId to3);
		other.PresenceUserId = to3;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public sealed class PresenceInterface : Handle
{
	public const int ADDNOTIFYJOINGAMEACCEPTED_API_LATEST = 2;

	public const int ADDNOTIFYONPRESENCECHANGED_API_LATEST = 1;

	public const int COPYPRESENCE_API_LATEST = 3;

	public const int CREATEPRESENCEMODIFICATION_API_LATEST = 1;

	public const int DATARECORD_API_LATEST = 1;

	public const int DATA_MAX_KEYS = 32;

	public const int DATA_MAX_KEY_LENGTH = 64;

	public const int DATA_MAX_VALUE_LENGTH = 255;

	public const int DELETEDATA_API_LATEST = 1;

	public const int GETJOININFO_API_LATEST = 1;

	public const int HASPRESENCE_API_LATEST = 1;

	public const int INFO_API_LATEST = 3;

	public static readonly Utf8String KEY_PLATFORM_PRESENCE = "EOS_PlatformPresence";

	public const int PRESENCEMODIFICATION_DATARECORDID_API_LATEST = 1;

	public const int PRESENCEMODIFICATION_DELETEDATA_API_LATEST = 1;

	public const int PRESENCEMODIFICATION_JOININFO_MAX_LENGTH = 255;

	public const int PRESENCEMODIFICATION_SETDATA_API_LATEST = 1;

	public const int PRESENCEMODIFICATION_SETJOININFO_API_LATEST = 1;

	public const int PRESENCEMODIFICATION_SETRAWRICHTEXT_API_LATEST = 1;

	public const int PRESENCEMODIFICATION_SETSTATUS_API_LATEST = 1;

	public const int QUERYPRESENCE_API_LATEST = 1;

	public const int RICH_TEXT_MAX_VALUE_LENGTH = 255;

	public const int SETDATA_API_LATEST = 1;

	public const int SETPRESENCE_API_LATEST = 1;

	public const int SETRAWRICHTEXT_API_LATEST = 1;

	public const int SETSTATUS_API_LATEST = 1;

	public PresenceInterface()
	{
	}

	public PresenceInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyJoinGameAccepted(ref AddNotifyJoinGameAcceptedOptions options, object clientData, OnJoinGameAcceptedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyJoinGameAcceptedOptionsInternal options2 = default(AddNotifyJoinGameAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Presence_AddNotifyJoinGameAccepted(base.InnerHandle, ref options2, clientDataPointer, OnJoinGameAcceptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyOnPresenceChanged(ref AddNotifyOnPresenceChangedOptions options, object clientData, OnPresenceChangedCallback notificationHandler)
	{
		if (notificationHandler == null)
		{
			throw new ArgumentNullException("notificationHandler");
		}
		AddNotifyOnPresenceChangedOptionsInternal options2 = default(AddNotifyOnPresenceChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationHandler);
		ulong num = Bindings.EOS_Presence_AddNotifyOnPresenceChanged(base.InnerHandle, ref options2, clientDataPointer, OnPresenceChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyPresence(ref CopyPresenceOptions options, out Info? outPresence)
	{
		CopyPresenceOptionsInternal options2 = default(CopyPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr outPresence2 = IntPtr.Zero;
		Result result = Bindings.EOS_Presence_CopyPresence(base.InnerHandle, ref options2, out outPresence2);
		Helper.Dispose(ref options2);
		Helper.Get<InfoInternal, Info>(outPresence2, out outPresence);
		if (outPresence2 != IntPtr.Zero)
		{
			Bindings.EOS_Presence_Info_Release(outPresence2);
		}
		return result;
	}

	public Result CreatePresenceModification(ref CreatePresenceModificationOptions options, out PresenceModification outPresenceModificationHandle)
	{
		CreatePresenceModificationOptionsInternal options2 = default(CreatePresenceModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outPresenceModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Presence_CreatePresenceModification(base.InnerHandle, ref options2, out outPresenceModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outPresenceModificationHandle2, out outPresenceModificationHandle);
		return result;
	}

	public Result GetJoinInfo(ref GetJoinInfoOptions options, out Utf8String outBuffer)
	{
		GetJoinInfoOptionsInternal options2 = default(GetJoinInfoOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 256;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Presence_GetJoinInfo(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public bool HasPresence(ref HasPresenceOptions options)
	{
		HasPresenceOptionsInternal options2 = default(HasPresenceOptionsInternal);
		options2.Set(ref options);
		int from = Bindings.EOS_Presence_HasPresence(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out bool to);
		return to;
	}

	public void QueryPresence(ref QueryPresenceOptions options, object clientData, OnQueryPresenceCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryPresenceOptionsInternal options2 = default(QueryPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Presence_QueryPresence(base.InnerHandle, ref options2, clientDataPointer, OnQueryPresenceCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyJoinGameAccepted(ulong inId)
	{
		Bindings.EOS_Presence_RemoveNotifyJoinGameAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyOnPresenceChanged(ulong notificationId)
	{
		Bindings.EOS_Presence_RemoveNotifyOnPresenceChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void SetPresence(ref SetPresenceOptions options, object clientData, SetPresenceCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		SetPresenceOptionsInternal options2 = default(SetPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Presence_SetPresence(base.InnerHandle, ref options2, clientDataPointer, SetPresenceCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public sealed class PresenceModification : Handle
{
	public PresenceModification()
	{
	}

	public PresenceModification(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result DeleteData(ref PresenceModificationDeleteDataOptions options)
	{
		PresenceModificationDeleteDataOptionsInternal options2 = default(PresenceModificationDeleteDataOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_DeleteData(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_PresenceModification_Release(base.InnerHandle);
	}

	public Result SetData(ref PresenceModificationSetDataOptions options)
	{
		PresenceModificationSetDataOptionsInternal options2 = default(PresenceModificationSetDataOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetData(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetJoinInfo(ref PresenceModificationSetJoinInfoOptions options)
	{
		PresenceModificationSetJoinInfoOptionsInternal options2 = default(PresenceModificationSetJoinInfoOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetJoinInfo(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetRawRichText(ref PresenceModificationSetRawRichTextOptions options)
	{
		PresenceModificationSetRawRichTextOptionsInternal options2 = default(PresenceModificationSetRawRichTextOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetRawRichText(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetStatus(ref PresenceModificationSetStatusOptions options)
	{
		PresenceModificationSetStatusOptionsInternal options2 = default(PresenceModificationSetStatusOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices;

public struct PresenceModificationDataRecordId
{
	public Utf8String Key { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationDataRecordIdInternal : ISettable<PresenceModificationDataRecordId>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public void Set(ref PresenceModificationDataRecordId other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Key, ref m_Key);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationDeleteDataOptions
{
	public PresenceModificationDataRecordId[] Records { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationDeleteDataOptionsInternal : ISettable<PresenceModificationDeleteDataOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_RecordsCount;

	private IntPtr m_Records;

	public void Set(ref PresenceModificationDeleteDataOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<PresenceModificationDataRecordId, PresenceModificationDataRecordIdInternal>(other.Records, ref m_Records, out m_RecordsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Records);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationSetDataOptions
{
	public DataRecord[] Records { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationSetDataOptionsInternal : ISettable<PresenceModificationSetDataOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_RecordsCount;

	private IntPtr m_Records;

	public void Set(ref PresenceModificationSetDataOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<DataRecord, DataRecordInternal>(other.Records, ref m_Records, out m_RecordsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Records);
	}
}


using Epic.OnlineServices;

public struct PresenceModificationSetJoinInfoOptions
{
	public Utf8String JoinInfo { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationSetJoinInfoOptionsInternal : ISettable<PresenceModificationSetJoinInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_JoinInfo;

	public void Set(ref PresenceModificationSetJoinInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.JoinInfo, ref m_JoinInfo);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_JoinInfo);
	}
}


using Epic.OnlineServices;

public struct PresenceModificationSetRawRichTextOptions
{
	public Utf8String RichText { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationSetRawRichTextOptionsInternal : ISettable<PresenceModificationSetRawRichTextOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RichText;

	public void Set(ref PresenceModificationSetRawRichTextOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.RichText, ref m_RichText);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RichText);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationSetStatusOptions
{
	public Status Status { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct PresenceModificationSetStatusOptionsInternal : ISettable<PresenceModificationSetStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private Status m_Status;

	public void Set(ref PresenceModificationSetStatusOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_Status = other.Status;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct QueryPresenceCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct QueryPresenceCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryPresenceCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryPresenceCallbackInfo other)
	{
		other = default(QueryPresenceCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct QueryPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct QueryPresenceOptionsInternal : ISettable<QueryPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref QueryPresenceOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct SetPresenceCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result RichPresenceResultCode { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct SetPresenceCallbackInfoInternal : ICallbackInfoInternal, IGettable<SetPresenceCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private Result m_RichPresenceResultCode;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SetPresenceCallbackInfo other)
	{
		other = default(SetPresenceCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		other.RichPresenceResultCode = m_RichPresenceResultCode;
	}
}


using Epic.OnlineServices.Presence;

public delegate void SetPresenceCompleteCallback(ref SetPresenceCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void SetPresenceCompleteCallbackInternal(ref SetPresenceCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal static class SetPresenceCompleteCallbackInternalImplementation
{
	private static SetPresenceCompleteCallbackInternal s_Delegate;

	public static SetPresenceCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(SetPresenceCompleteCallbackInternal))]
	public static void EntryPoint(ref SetPresenceCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SetPresenceCallbackInfoInternal, SetPresenceCompleteCallback, SetPresenceCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct SetPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public PresenceModification PresenceModificationHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

internal struct SetPresenceOptionsInternal : ISettable<SetPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_PresenceModificationHandle;

	public void Set(ref SetPresenceOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.PresenceModificationHandle, ref m_PresenceModificationHandle);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PresenceModificationHandle);
	}
}


public enum Status
{
	Offline,
	Online,
	Away,
	ExtendedAway,
	DoNotDisturb
}


using Epic.OnlineServices;

public struct CopyFileMetadataAtIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct CopyFileMetadataAtIndexOptionsInternal : ISettable<CopyFileMetadataAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public void Set(ref CopyFileMetadataAtIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyFileMetadataByFilenameOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct CopyFileMetadataByFilenameOptionsInternal : ISettable<CopyFileMetadataByFilenameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public void Set(ref CopyFileMetadataByFilenameOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Filename, ref m_Filename);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;

public struct DeleteCacheCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DeleteCacheCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteCacheCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DeleteCacheCallbackInfo other)
	{
		other = default(DeleteCacheCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct DeleteCacheOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DeleteCacheOptionsInternal : ISettable<DeleteCacheOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref DeleteCacheOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct DeleteFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DeleteFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteFileCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DeleteFileCallbackInfo other)
	{
		other = default(DeleteFileCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct DeleteFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DeleteFileOptionsInternal : ISettable<DeleteFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public void Set(ref DeleteFileOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Filename, ref m_Filename);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;

public struct DuplicateFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DuplicateFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<DuplicateFileCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DuplicateFileCallbackInfo other)
	{
		other = default(DuplicateFileCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct DuplicateFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String SourceFilename { get; set; }

	public Utf8String DestinationFilename { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct DuplicateFileOptionsInternal : ISettable<DuplicateFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SourceFilename;

	private IntPtr m_DestinationFilename;

	public void Set(ref DuplicateFileOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.SourceFilename, ref m_SourceFilename);
		Helper.Set(other.DestinationFilename, ref m_DestinationFilename);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SourceFilename);
		Helper.Dispose(ref m_DestinationFilename);
	}
}


using System;
using Epic.OnlineServices;

public struct FileMetadata
{
	public uint FileSizeBytes { get; set; }

	public Utf8String MD5Hash { get; set; }

	public Utf8String Filename { get; set; }

	public DateTimeOffset? LastModifiedTime { get; set; }

	public uint UnencryptedDataSizeBytes { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct FileMetadataInternal : IGettable<FileMetadata>
{
	private int m_ApiVersion;

	private uint m_FileSizeBytes;

	private IntPtr m_MD5Hash;

	private IntPtr m_Filename;

	private long m_LastModifiedTime;

	private uint m_UnencryptedDataSizeBytes;

	public void Get(out FileMetadata other)
	{
		other = default(FileMetadata);
		other.FileSizeBytes = m_FileSizeBytes;
		Helper.Get(m_MD5Hash, out Utf8String to);
		other.MD5Hash = to;
		Helper.Get(m_Filename, out Utf8String to2);
		other.Filename = to2;
		Helper.Get(m_LastModifiedTime, out DateTimeOffset? to3);
		other.LastModifiedTime = to3;
		other.UnencryptedDataSizeBytes = m_UnencryptedDataSizeBytes;
	}
}


using Epic.OnlineServices;

public struct FileTransferProgressCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint BytesTransferred { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct FileTransferProgressCallbackInfoInternal : ICallbackInfoInternal, IGettable<FileTransferProgressCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_BytesTransferred;

	private uint m_TotalFileSizeBytes;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out FileTransferProgressCallbackInfo other)
	{
		other = default(FileTransferProgressCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_Filename, out Utf8String to3);
		other.Filename = to3;
		other.BytesTransferred = m_BytesTransferred;
		other.TotalFileSizeBytes = m_TotalFileSizeBytes;
	}
}


using Epic.OnlineServices;

public struct GetFileMetadataCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct GetFileMetadataCountOptionsInternal : ISettable<GetFileMetadataCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetFileMetadataCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDeleteCacheCompleteCallback(ref DeleteCacheCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteCacheCompleteCallbackInternal(ref DeleteCacheCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnDeleteCacheCompleteCallbackInternalImplementation
{
	private static OnDeleteCacheCompleteCallbackInternal s_Delegate;

	public static OnDeleteCacheCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDeleteCacheCompleteCallbackInternal))]
	public static void EntryPoint(ref DeleteCacheCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteCacheCallbackInfoInternal, OnDeleteCacheCompleteCallback, DeleteCacheCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDeleteFileCompleteCallback(ref DeleteFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteFileCompleteCallbackInternal(ref DeleteFileCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnDeleteFileCompleteCallbackInternalImplementation
{
	private static OnDeleteFileCompleteCallbackInternal s_Delegate;

	public static OnDeleteFileCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDeleteFileCompleteCallbackInternal))]
	public static void EntryPoint(ref DeleteFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteFileCallbackInfoInternal, OnDeleteFileCompleteCallback, DeleteFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDuplicateFileCompleteCallback(ref DuplicateFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDuplicateFileCompleteCallbackInternal(ref DuplicateFileCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnDuplicateFileCompleteCallbackInternalImplementation
{
	private static OnDuplicateFileCompleteCallbackInternal s_Delegate;

	public static OnDuplicateFileCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDuplicateFileCompleteCallbackInternal))]
	public static void EntryPoint(ref DuplicateFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DuplicateFileCallbackInfoInternal, OnDuplicateFileCompleteCallback, DuplicateFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnFileTransferProgressCallback(ref FileTransferProgressCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnFileTransferProgressCallbackInternal(ref FileTransferProgressCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnFileTransferProgressCallbackInternalImplementation
{
	private static OnFileTransferProgressCallbackInternal s_Delegate;

	public static OnFileTransferProgressCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnFileTransferProgressCallbackInternal))]
	public static void EntryPoint(ref FileTransferProgressCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<FileTransferProgressCallbackInfoInternal, OnFileTransferProgressCallback, FileTransferProgressCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnQueryFileCompleteCallback(ref QueryFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileCompleteCallbackInternal(ref QueryFileCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnQueryFileCompleteCallbackInternalImplementation
{
	private static OnQueryFileCompleteCallbackInternal s_Delegate;

	public static OnQueryFileCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileCompleteCallbackInternal))]
	public static void EntryPoint(ref QueryFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileCallbackInfoInternal, OnQueryFileCompleteCallback, QueryFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnQueryFileListCompleteCallback(ref QueryFileListCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileListCompleteCallbackInternal(ref QueryFileListCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnQueryFileListCompleteCallbackInternalImplementation
{
	private static OnQueryFileListCompleteCallbackInternal s_Delegate;

	public static OnQueryFileListCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileListCompleteCallbackInternal))]
	public static void EntryPoint(ref QueryFileListCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileListCallbackInfoInternal, OnQueryFileListCompleteCallback, QueryFileListCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnReadFileCompleteCallback(ref ReadFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnReadFileCompleteCallbackInternal(ref ReadFileCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnReadFileCompleteCallbackInternalImplementation
{
	private static OnReadFileCompleteCallbackInternal s_Delegate;

	public static OnReadFileCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileCompleteCallbackInternal))]
	public static void EntryPoint(ref ReadFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<ReadFileCallbackInfoInternal, OnReadFileCompleteCallback, ReadFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate ReadResult OnReadFileDataCallback(ref ReadFileDataCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate ReadResult OnReadFileDataCallbackInternal(ref ReadFileDataCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnReadFileDataCallbackInternalImplementation
{
	private static OnReadFileDataCallbackInternal s_Delegate;

	public static OnReadFileDataCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileDataCallbackInternal))]
	public static ReadResult EntryPoint(ref ReadFileDataCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<ReadFileDataCallbackInfoInternal, OnReadFileDataCallback, ReadFileDataCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			return callback(ref callbackInfo);
		}
		return (ReadResult)0;
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnWriteFileCompleteCallback(ref WriteFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnWriteFileCompleteCallbackInternal(ref WriteFileCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnWriteFileCompleteCallbackInternalImplementation
{
	private static OnWriteFileCompleteCallbackInternal s_Delegate;

	public static OnWriteFileCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnWriteFileCompleteCallbackInternal))]
	public static void EntryPoint(ref WriteFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<WriteFileCallbackInfoInternal, OnWriteFileCompleteCallback, WriteFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;
using Epic.OnlineServices.PlayerDataStorage;

public delegate WriteResult OnWriteFileDataCallback(ref WriteFileDataCallbackInfo data, out ArraySegment<byte> outDataBuffer);


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate WriteResult OnWriteFileDataCallbackInternal(ref WriteFileDataCallbackInfoInternal data, IntPtr outDataBuffer, out uint outDataWritten);


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal static class OnWriteFileDataCallbackInternalImplementation
{
	private static OnWriteFileDataCallbackInternal s_Delegate;

	public static OnWriteFileDataCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnWriteFileDataCallbackInternal))]
	public static WriteResult EntryPoint(ref WriteFileDataCallbackInfoInternal data, IntPtr outDataBuffer, out uint outDataWritten)
	{
		if (Helper.TryGetStructCallback<WriteFileDataCallbackInfoInternal, OnWriteFileDataCallback, WriteFileDataCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			ArraySegment<byte> outDataBuffer2 = default(ArraySegment<byte>);
			WriteResult result = callback(ref callbackInfo, out outDataBuffer2);
			Helper.Get(outDataBuffer2, out outDataWritten);
			Helper.Copy(outDataBuffer2, outDataBuffer);
			return result;
		}
		outDataWritten = 0u;
		return (WriteResult)0;
	}
}


using System;
using Epic.OnlineServices;

public sealed class PlayerDataStorageFileTransferRequest : Handle
{
	public PlayerDataStorageFileTransferRequest()
	{
	}

	public PlayerDataStorageFileTransferRequest(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CancelRequest()
	{
		return Bindings.EOS_PlayerDataStorageFileTransferRequest_CancelRequest(base.InnerHandle);
	}

	public Result GetFileRequestState()
	{
		return Bindings.EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState(base.InnerHandle);
	}

	public Result GetFilename(out Utf8String outStringBuffer)
	{
		int outStringLength = 64;
		IntPtr value = Helper.AddAllocation(outStringLength);
		Result result = Bindings.EOS_PlayerDataStorageFileTransferRequest_GetFilename(base.InnerHandle, (uint)outStringLength, value, out outStringLength);
		Helper.Get(value, out outStringBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_PlayerDataStorageFileTransferRequest_Release(base.InnerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public sealed class PlayerDataStorageInterface : Handle
{
	public const int COPYFILEMETADATAATINDEXOPTIONS_API_LATEST = 1;

	public const int COPYFILEMETADATAATINDEX_API_LATEST = 1;

	public const int COPYFILEMETADATABYFILENAMEOPTIONS_API_LATEST = 1;

	public const int COPYFILEMETADATABYFILENAME_API_LATEST = 1;

	public const int DELETECACHEOPTIONS_API_LATEST = 1;

	public const int DELETECACHE_API_LATEST = 1;

	public const int DELETEFILEOPTIONS_API_LATEST = 1;

	public const int DELETEFILE_API_LATEST = 1;

	public const int DUPLICATEFILEOPTIONS_API_LATEST = 1;

	public const int DUPLICATEFILE_API_LATEST = 1;

	public const int FILEMETADATA_API_LATEST = 3;

	public const int FILENAME_MAX_LENGTH_BYTES = 64;

	public const int GETFILEMETADATACOUNTOPTIONS_API_LATEST = 1;

	public const int GETFILEMETADATACOUNT_API_LATEST = 1;

	public const int QUERYFILELISTOPTIONS_API_LATEST = 2;

	public const int QUERYFILELIST_API_LATEST = 2;

	public const int QUERYFILEOPTIONS_API_LATEST = 1;

	public const int QUERYFILE_API_LATEST = 1;

	public const int READFILEOPTIONS_API_LATEST = 2;

	public const int READFILE_API_LATEST = 2;

	public const int TIME_UNDEFINED = -1;

	public const int WRITEFILEOPTIONS_API_LATEST = 2;

	public const int WRITEFILE_API_LATEST = 2;

	public PlayerDataStorageInterface()
	{
	}

	public PlayerDataStorageInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyFileMetadataAtIndex(ref CopyFileMetadataAtIndexOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
	{
		CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptions2 = default(CopyFileMetadataAtIndexOptionsInternal);
		copyFileMetadataOptions2.Set(ref copyFileMetadataOptions);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_PlayerDataStorage_CopyFileMetadataAtIndex(base.InnerHandle, ref copyFileMetadataOptions2, out outMetadata2);
		Helper.Dispose(ref copyFileMetadataOptions2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata2 != IntPtr.Zero)
		{
			Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result CopyFileMetadataByFilename(ref CopyFileMetadataByFilenameOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
	{
		CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptions2 = default(CopyFileMetadataByFilenameOptionsInternal);
		copyFileMetadataOptions2.Set(ref copyFileMetadataOptions);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_PlayerDataStorage_CopyFileMetadataByFilename(base.InnerHandle, ref copyFileMetadataOptions2, out outMetadata2);
		Helper.Dispose(ref copyFileMetadataOptions2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata2 != IntPtr.Zero)
		{
			Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result DeleteCache(ref DeleteCacheOptions options, object clientData, OnDeleteCacheCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		DeleteCacheOptionsInternal options2 = default(DeleteCacheOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Result result = Bindings.EOS_PlayerDataStorage_DeleteCache(base.InnerHandle, ref options2, clientDataPointer, OnDeleteCacheCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		return result;
	}

	public void DeleteFile(ref DeleteFileOptions deleteOptions, object clientData, OnDeleteFileCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		DeleteFileOptionsInternal deleteOptions2 = default(DeleteFileOptionsInternal);
		deleteOptions2.Set(ref deleteOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Bindings.EOS_PlayerDataStorage_DeleteFile(base.InnerHandle, ref deleteOptions2, clientDataPointer, OnDeleteFileCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref deleteOptions2);
	}

	public void DuplicateFile(ref DuplicateFileOptions duplicateOptions, object clientData, OnDuplicateFileCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		DuplicateFileOptionsInternal duplicateOptions2 = default(DuplicateFileOptionsInternal);
		duplicateOptions2.Set(ref duplicateOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Bindings.EOS_PlayerDataStorage_DuplicateFile(base.InnerHandle, ref duplicateOptions2, clientDataPointer, OnDuplicateFileCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref duplicateOptions2);
	}

	public Result GetFileMetadataCount(ref GetFileMetadataCountOptions getFileMetadataCountOptions, out int outFileMetadataCount)
	{
		GetFileMetadataCountOptionsInternal getFileMetadataCountOptions2 = default(GetFileMetadataCountOptionsInternal);
		getFileMetadataCountOptions2.Set(ref getFileMetadataCountOptions);
		Result result = Bindings.EOS_PlayerDataStorage_GetFileMetadataCount(base.InnerHandle, ref getFileMetadataCountOptions2, out outFileMetadataCount);
		Helper.Dispose(ref getFileMetadataCountOptions2);
		return result;
	}

	public void QueryFile(ref QueryFileOptions queryFileOptions, object clientData, OnQueryFileCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		QueryFileOptionsInternal queryFileOptions2 = default(QueryFileOptionsInternal);
		queryFileOptions2.Set(ref queryFileOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Bindings.EOS_PlayerDataStorage_QueryFile(base.InnerHandle, ref queryFileOptions2, clientDataPointer, OnQueryFileCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref queryFileOptions2);
	}

	public void QueryFileList(ref QueryFileListOptions queryFileListOptions, object clientData, OnQueryFileListCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		QueryFileListOptionsInternal queryFileListOptions2 = default(QueryFileListOptionsInternal);
		queryFileListOptions2.Set(ref queryFileListOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Bindings.EOS_PlayerDataStorage_QueryFileList(base.InnerHandle, ref queryFileListOptions2, clientDataPointer, OnQueryFileListCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref queryFileListOptions2);
	}

	public PlayerDataStorageFileTransferRequest ReadFile(ref ReadFileOptions readOptions, object clientData, OnReadFileCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		ReadFileOptionsInternal readOptions2 = default(ReadFileOptionsInternal);
		readOptions2.Set(ref readOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Helper.AddCallback(clientDataPointer, readOptions.ReadFileDataCallback);
		Helper.AddCallback(clientDataPointer, readOptions.FileTransferProgressCallback);
		IntPtr from = Bindings.EOS_PlayerDataStorage_ReadFile(base.InnerHandle, ref readOptions2, clientDataPointer, OnReadFileCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref readOptions2);
		Helper.Get(from, out PlayerDataStorageFileTransferRequest to);
		return to;
	}

	public PlayerDataStorageFileTransferRequest WriteFile(ref WriteFileOptions writeOptions, object clientData, OnWriteFileCompleteCallback completionCallback)
	{
		if (completionCallback == null)
		{
			throw new ArgumentNullException("completionCallback");
		}
		WriteFileOptionsInternal writeOptions2 = default(WriteFileOptionsInternal);
		writeOptions2.Set(ref writeOptions);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionCallback);
		Helper.AddCallback(clientDataPointer, writeOptions.WriteFileDataCallback);
		Helper.AddCallback(clientDataPointer, writeOptions.FileTransferProgressCallback);
		IntPtr from = Bindings.EOS_PlayerDataStorage_WriteFile(base.InnerHandle, ref writeOptions2, clientDataPointer, OnWriteFileCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref writeOptions2);
		Helper.Get(from, out PlayerDataStorageFileTransferRequest to);
		return to;
	}
}


using Epic.OnlineServices;

public struct QueryFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct QueryFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryFileCallbackInfo other)
	{
		other = default(QueryFileCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryFileListCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public uint FileCount { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct QueryFileListCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileListCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private uint m_FileCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryFileListCallbackInfo other)
	{
		other = default(QueryFileListCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		other.FileCount = m_FileCount;
	}
}


using Epic.OnlineServices;

public struct QueryFileListOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct QueryFileListOptionsInternal : ISettable<QueryFileListOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryFileListOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct QueryFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct QueryFileOptionsInternal : ISettable<QueryFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public void Set(ref QueryFileOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Filename, ref m_Filename);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;

public struct ReadFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct ReadFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out ReadFileCallbackInfo other)
	{
		other = default(ReadFileCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_Filename, out Utf8String to3);
		other.Filename = to3;
	}
}


using System;
using Epic.OnlineServices;

public struct ReadFileDataCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public bool IsLastChunk { get; set; }

	public ArraySegment<byte> DataChunk { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct ReadFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileDataCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_TotalFileSizeBytes;

	private int m_IsLastChunk;

	private uint m_DataChunkLengthBytes;

	private IntPtr m_DataChunk;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out ReadFileDataCallbackInfo other)
	{
		other = default(ReadFileDataCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_Filename, out Utf8String to3);
		other.Filename = to3;
		other.TotalFileSizeBytes = m_TotalFileSizeBytes;
		Helper.Get(m_IsLastChunk, out bool to4);
		other.IsLastChunk = to4;
		Helper.Get(m_DataChunk, out ArraySegment<byte> to5, m_DataChunkLengthBytes);
		other.DataChunk = to5;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct ReadFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint ReadChunkLengthBytes { get; set; }

	public OnReadFileDataCallback ReadFileDataCallback { get; set; }

	public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct ReadFileOptionsInternal : ISettable<ReadFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_ReadChunkLengthBytes;

	private IntPtr m_ReadFileDataCallback;

	private IntPtr m_FileTransferProgressCallback;

	public void Set(ref ReadFileOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Filename, ref m_Filename);
		m_ReadChunkLengthBytes = other.ReadChunkLengthBytes;
		m_ReadFileDataCallback = ((other.ReadFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(OnReadFileDataCallbackInternalImplementation.Delegate) : IntPtr.Zero);
		m_FileTransferProgressCallback = ((other.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(OnFileTransferProgressCallbackInternalImplementation.Delegate) : IntPtr.Zero);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


public enum ReadResult
{
	ContinueReading = 1,
	FailRequest,
	CancelRequest
}


using Epic.OnlineServices;

public struct WriteFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct WriteFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<WriteFileCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out WriteFileCallbackInfo other)
	{
		other = default(WriteFileCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_Filename, out Utf8String to3);
		other.Filename = to3;
	}
}


using Epic.OnlineServices;

public struct WriteFileDataCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint DataBufferLengthBytes { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct WriteFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<WriteFileDataCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_DataBufferLengthBytes;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out WriteFileDataCallbackInfo other)
	{
		other = default(WriteFileDataCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_Filename, out Utf8String to3);
		other.Filename = to3;
		other.DataBufferLengthBytes = m_DataBufferLengthBytes;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct WriteFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint ChunkLengthBytes { get; set; }

	public OnWriteFileDataCallback WriteFileDataCallback { get; set; }

	public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

internal struct WriteFileOptionsInternal : ISettable<WriteFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_ChunkLengthBytes;

	private IntPtr m_WriteFileDataCallback;

	private IntPtr m_FileTransferProgressCallback;

	public void Set(ref WriteFileOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Filename, ref m_Filename);
		m_ChunkLengthBytes = other.ChunkLengthBytes;
		m_WriteFileDataCallback = ((other.WriteFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(OnWriteFileDataCallbackInternalImplementation.Delegate) : IntPtr.Zero);
		m_FileTransferProgressCallback = ((other.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(OnFileTransferProgressCallbackInternalImplementation.Delegate) : IntPtr.Zero);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


public enum WriteResult
{
	ContinueWriting = 1,
	CompleteRequest,
	FailRequest,
	CancelRequest
}


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr AllocateMemoryFunc(UIntPtr sizeInBytes, UIntPtr alignment);


public enum ApplicationStatus
{
	BackgroundConstrained,
	BackgroundUnconstrained,
	BackgroundSuspended,
	Foreground
}


using Epic.OnlineServices;

public struct ClientCredentials
{
	public Utf8String ClientId { get; set; }

	public Utf8String ClientSecret { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct ClientCredentialsInternal : ISettable<ClientCredentials>, IDisposable
{
	private IntPtr m_ClientId;

	private IntPtr m_ClientSecret;

	public void Set(ref ClientCredentials other)
	{
		Dispose();
		Helper.Set(other.ClientId, ref m_ClientId);
		Helper.Set(other.ClientSecret, ref m_ClientSecret);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_ClientSecret);
	}
}


public enum DesktopCrossplayStatus
{
	Ok,
	ApplicationNotBootstrapped,
	ServiceNotInstalled,
	ServiceStartFailed,
	ServiceNotRunning,
	OverlayDisabled,
	OverlayNotInstalled,
	OverlayTrustCheckFailed,
	OverlayLoadFailed
}


using Epic.OnlineServices.Platform;

public struct DesktopCrossplayStatusInfo
{
	public DesktopCrossplayStatus Status { get; set; }

	public int ServiceInitResult { get; set; }
}


using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct DesktopCrossplayStatusInfoInternal : IGettable<DesktopCrossplayStatusInfo>
{
	private DesktopCrossplayStatus m_Status;

	private int m_ServiceInitResult;

	public void Get(out DesktopCrossplayStatusInfo other)
	{
		other = default(DesktopCrossplayStatusInfo);
		other.Status = m_Status;
		other.ServiceInitResult = m_ServiceInitResult;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetDesktopCrossplayStatusOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct GetDesktopCrossplayStatusOptionsInternal : ISettable<GetDesktopCrossplayStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetDesktopCrossplayStatusOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct InitializeOptions
{
	public IntPtr AllocateMemoryFunction { get; set; }

	public IntPtr ReallocateMemoryFunction { get; set; }

	public IntPtr ReleaseMemoryFunction { get; set; }

	public Utf8String ProductName { get; set; }

	public Utf8String ProductVersion { get; set; }

	public IntPtr Reserved { get; set; }

	public IntPtr SystemInitializeOptions { get; set; }

	public InitializeThreadAffinity? OverrideThreadAffinity { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct InitializeOptionsInternal : ISettable<InitializeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllocateMemoryFunction;

	private IntPtr m_ReallocateMemoryFunction;

	private IntPtr m_ReleaseMemoryFunction;

	private IntPtr m_ProductName;

	private IntPtr m_ProductVersion;

	private IntPtr m_Reserved;

	private IntPtr m_SystemInitializeOptions;

	private IntPtr m_OverrideThreadAffinity;

	public void Set(ref InitializeOptions other)
	{
		Dispose();
		m_ApiVersion = 4;
		m_AllocateMemoryFunction = other.AllocateMemoryFunction;
		m_ReallocateMemoryFunction = other.ReallocateMemoryFunction;
		m_ReleaseMemoryFunction = other.ReleaseMemoryFunction;
		Helper.Set(other.ProductName, ref m_ProductName);
		Helper.Set(other.ProductVersion, ref m_ProductVersion);
		m_Reserved = other.Reserved;
		if (m_Reserved == IntPtr.Zero)
		{
			Helper.Set(new int[2] { 1, 1 }, ref m_Reserved, isArrayItemAllocated: false);
		}
		m_SystemInitializeOptions = other.SystemInitializeOptions;
		Helper.Set<InitializeThreadAffinity, InitializeThreadAffinityInternal>(other.OverrideThreadAffinity, ref m_OverrideThreadAffinity);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ProductName);
		Helper.Dispose(ref m_ProductVersion);
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_SystemInitializeOptions);
		Helper.Dispose(ref m_OverrideThreadAffinity);
	}
}


public struct InitializeThreadAffinity
{
	public ulong NetworkWork { get; set; }

	public ulong StorageIo { get; set; }

	public ulong WebSocketIo { get; set; }

	public ulong P2PIo { get; set; }

	public ulong HttpRequestIo { get; set; }

	public ulong RTCIo { get; set; }

	public ulong EmbeddedOverlayMainThread { get; set; }

	public ulong EmbeddedOverlayWorkerThreads { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct InitializeThreadAffinityInternal : ISettable<InitializeThreadAffinity>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_NetworkWork;

	private ulong m_StorageIo;

	private ulong m_WebSocketIo;

	private ulong m_P2PIo;

	private ulong m_HttpRequestIo;

	private ulong m_RTCIo;

	private ulong m_EmbeddedOverlayMainThread;

	private ulong m_EmbeddedOverlayWorkerThreads;

	public void Set(ref InitializeThreadAffinity other)
	{
		Dispose();
		m_ApiVersion = 3;
		m_NetworkWork = other.NetworkWork;
		m_StorageIo = other.StorageIo;
		m_WebSocketIo = other.WebSocketIo;
		m_P2PIo = other.P2PIo;
		m_HttpRequestIo = other.HttpRequestIo;
		m_RTCIo = other.RTCIo;
		m_EmbeddedOverlayMainThread = other.EmbeddedOverlayMainThread;
		m_EmbeddedOverlayWorkerThreads = other.EmbeddedOverlayWorkerThreads;
	}

	public void Dispose()
	{
	}
}


public enum NetworkStatus
{
	Disabled,
	Offline,
	Online
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.Platform;

public struct Options
{
	public IntPtr Reserved { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public ClientCredentials ClientCredentials { get; set; }

	public bool IsServer { get; set; }

	public Utf8String EncryptionKey { get; set; }

	public Utf8String OverrideCountryCode { get; set; }

	public Utf8String OverrideLocaleCode { get; set; }

	public Utf8String DeploymentId { get; set; }

	public PlatformFlags Flags { get; set; }

	public Utf8String CacheDirectory { get; set; }

	public uint TickBudgetInMilliseconds { get; set; }

	public RTCOptions? RTCOptions { get; set; }

	public IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle { get; set; }

	public IntPtr SystemSpecificOptions { get; set; }

	public double? TaskNetworkTimeoutSeconds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct OptionsInternal : ISettable<Options>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Reserved;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private ClientCredentialsInternal m_ClientCredentials;

	private int m_IsServer;

	private IntPtr m_EncryptionKey;

	private IntPtr m_OverrideCountryCode;

	private IntPtr m_OverrideLocaleCode;

	private IntPtr m_DeploymentId;

	private PlatformFlags m_Flags;

	private IntPtr m_CacheDirectory;

	private uint m_TickBudgetInMilliseconds;

	private IntPtr m_RTCOptions;

	private IntPtr m_IntegratedPlatformOptionsContainerHandle;

	private IntPtr m_SystemSpecificOptions;

	private IntPtr m_TaskNetworkTimeoutSeconds;

	public void Set(ref Options other)
	{
		Dispose();
		m_ApiVersion = 14;
		m_Reserved = other.Reserved;
		Helper.Set(other.ProductId, ref m_ProductId);
		Helper.Set(other.SandboxId, ref m_SandboxId);
		Helper.Set<ClientCredentials, ClientCredentialsInternal>(other.ClientCredentials, ref m_ClientCredentials);
		Helper.Set(other.IsServer, ref m_IsServer);
		Helper.Set(other.EncryptionKey, ref m_EncryptionKey);
		Helper.Set(other.OverrideCountryCode, ref m_OverrideCountryCode);
		Helper.Set(other.OverrideLocaleCode, ref m_OverrideLocaleCode);
		Helper.Set(other.DeploymentId, ref m_DeploymentId);
		m_Flags = other.Flags;
		Helper.Set(other.CacheDirectory, ref m_CacheDirectory);
		m_TickBudgetInMilliseconds = other.TickBudgetInMilliseconds;
		Helper.Set<RTCOptions, RTCOptionsInternal>(other.RTCOptions, ref m_RTCOptions);
		Helper.Set((Handle)other.IntegratedPlatformOptionsContainerHandle, ref m_IntegratedPlatformOptionsContainerHandle);
		m_SystemSpecificOptions = other.SystemSpecificOptions;
		Helper.Set(other.TaskNetworkTimeoutSeconds, ref m_TaskNetworkTimeoutSeconds);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_ClientCredentials);
		Helper.Dispose(ref m_EncryptionKey);
		Helper.Dispose(ref m_OverrideCountryCode);
		Helper.Dispose(ref m_OverrideLocaleCode);
		Helper.Dispose(ref m_DeploymentId);
		Helper.Dispose(ref m_CacheDirectory);
		Helper.Dispose(ref m_RTCOptions);
		Helper.Dispose(ref m_IntegratedPlatformOptionsContainerHandle);
		Helper.Dispose(ref m_SystemSpecificOptions);
		Helper.Dispose(ref m_TaskNetworkTimeoutSeconds);
	}
}


using System;

[Flags]
public enum PlatformFlags : ulong
{
	None = 0uL,
	LoadingInEditor = 1uL,
	DisableOverlay = 2uL,
	DisableSocialOverlay = 4uL,
	Reserved1 = 8uL,
	WindowsEnableOverlayD3D9 = 0x10uL,
	WindowsEnableOverlayD3D10 = 0x20uL,
	WindowsEnableOverlayOpengl = 0x40uL,
	ConsoleEnableOverlayAutomaticUnloading = 0x80uL
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatServer;
using Epic.OnlineServices.Auth;
using Epic.OnlineServices.Connect;
using Epic.OnlineServices.CustomInvites;
using Epic.OnlineServices.Ecom;
using Epic.OnlineServices.Friends;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.KWS;
using Epic.OnlineServices.Leaderboards;
using Epic.OnlineServices.Lobby;
using Epic.OnlineServices.Metrics;
using Epic.OnlineServices.Mods;
using Epic.OnlineServices.P2P;
using Epic.OnlineServices.Platform;
using Epic.OnlineServices.PlayerDataStorage;
using Epic.OnlineServices.Presence;
using Epic.OnlineServices.ProgressionSnapshot;
using Epic.OnlineServices.Reports;
using Epic.OnlineServices.RTC;
using Epic.OnlineServices.RTCAdmin;
using Epic.OnlineServices.Sanctions;
using Epic.OnlineServices.Sessions;
using Epic.OnlineServices.Stats;
using Epic.OnlineServices.TitleStorage;
using Epic.OnlineServices.UI;
using Epic.OnlineServices.UserInfo;

public sealed class PlatformInterface : Handle
{
	public static readonly Utf8String CHECKFORLAUNCHERANDRESTART_ENV_VAR = "EOS_LAUNCHED_BY_EPIC";

	public const int CLIENTCREDENTIALS_CLIENTID_MAX_LENGTH = 64;

	public const int CLIENTCREDENTIALS_CLIENTSECRET_MAX_LENGTH = 64;

	public const int COUNTRYCODE_MAX_BUFFER_LEN = 5;

	public const int COUNTRYCODE_MAX_LENGTH = 4;

	public const int GETDESKTOPCROSSPLAYSTATUS_API_LATEST = 1;

	public const int INITIALIZEOPTIONS_PRODUCTNAME_MAX_LENGTH = 64;

	public const int INITIALIZEOPTIONS_PRODUCTVERSION_MAX_LENGTH = 64;

	public const int INITIALIZE_API_LATEST = 4;

	public const int INITIALIZE_THREADAFFINITY_API_LATEST = 3;

	public const int LOCALECODE_MAX_BUFFER_LEN = 10;

	public const int LOCALECODE_MAX_LENGTH = 9;

	public const int OPTIONS_API_LATEST = 14;

	public const int OPTIONS_DEPLOYMENTID_MAX_LENGTH = 64;

	public const int OPTIONS_ENCRYPTIONKEY_LENGTH = 64;

	public const int OPTIONS_PRODUCTID_MAX_LENGTH = 64;

	public const int OPTIONS_SANDBOXID_MAX_LENGTH = 64;

	public const int RTCOPTIONS_API_LATEST = 2;

	public PlatformInterface()
	{
	}

	public PlatformInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public static Utf8String ToString(ApplicationStatus applicationStatus)
	{
		Helper.Get(Bindings.EOS_EApplicationStatus_ToString(applicationStatus), out Utf8String to);
		return to;
	}

	public static Utf8String ToString(NetworkStatus networkStatus)
	{
		Helper.Get(Bindings.EOS_ENetworkStatus_ToString(networkStatus), out Utf8String to);
		return to;
	}

	public static Result Initialize(ref InitializeOptions options)
	{
		InitializeOptionsInternal options2 = default(InitializeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Initialize(ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result CheckForLauncherAndRestart()
	{
		return Bindings.EOS_Platform_CheckForLauncherAndRestart(base.InnerHandle);
	}

	public static PlatformInterface Create(ref Epic.OnlineServices.Platform.Options options)
	{
		Epic.OnlineServices.Platform.OptionsInternal options2 = default(Epic.OnlineServices.Platform.OptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Platform_Create(ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out PlatformInterface to);
		return to;
	}

	public AchievementsInterface GetAchievementsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAchievementsInterface(base.InnerHandle), out AchievementsInterface to);
		return to;
	}

	public Result GetActiveCountryCode(EpicAccountId localUserId, out Utf8String outBuffer)
	{
		int inOutBufferLength = 5;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetActiveCountryCode(base.InnerHandle, localUserId.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetActiveLocaleCode(EpicAccountId localUserId, out Utf8String outBuffer)
	{
		int inOutBufferLength = 10;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetActiveLocaleCode(base.InnerHandle, localUserId.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public AntiCheatClientInterface GetAntiCheatClientInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAntiCheatClientInterface(base.InnerHandle), out AntiCheatClientInterface to);
		return to;
	}

	public AntiCheatServerInterface GetAntiCheatServerInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAntiCheatServerInterface(base.InnerHandle), out AntiCheatServerInterface to);
		return to;
	}

	public ApplicationStatus GetApplicationStatus()
	{
		return Bindings.EOS_Platform_GetApplicationStatus(base.InnerHandle);
	}

	public AuthInterface GetAuthInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAuthInterface(base.InnerHandle), out AuthInterface to);
		return to;
	}

	public ConnectInterface GetConnectInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetConnectInterface(base.InnerHandle), out ConnectInterface to);
		return to;
	}

	public CustomInvitesInterface GetCustomInvitesInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetCustomInvitesInterface(base.InnerHandle), out CustomInvitesInterface to);
		return to;
	}

	public Result GetDesktopCrossplayStatus(ref GetDesktopCrossplayStatusOptions options, out DesktopCrossplayStatusInfo outDesktopCrossplayStatusInfo)
	{
		GetDesktopCrossplayStatusOptionsInternal options2 = default(GetDesktopCrossplayStatusOptionsInternal);
		options2.Set(ref options);
		DesktopCrossplayStatusInfoInternal outDesktopCrossplayStatusInfo2 = default(DesktopCrossplayStatusInfoInternal);
		Result result = Bindings.EOS_Platform_GetDesktopCrossplayStatus(base.InnerHandle, ref options2, out outDesktopCrossplayStatusInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<DesktopCrossplayStatusInfoInternal, DesktopCrossplayStatusInfo>(ref outDesktopCrossplayStatusInfo2, out outDesktopCrossplayStatusInfo);
		return result;
	}

	public EcomInterface GetEcomInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetEcomInterface(base.InnerHandle), out EcomInterface to);
		return to;
	}

	public FriendsInterface GetFriendsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetFriendsInterface(base.InnerHandle), out FriendsInterface to);
		return to;
	}

	public IntegratedPlatformInterface GetIntegratedPlatformInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetIntegratedPlatformInterface(base.InnerHandle), out IntegratedPlatformInterface to);
		return to;
	}

	public KWSInterface GetKWSInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetKWSInterface(base.InnerHandle), out KWSInterface to);
		return to;
	}

	public LeaderboardsInterface GetLeaderboardsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetLeaderboardsInterface(base.InnerHandle), out LeaderboardsInterface to);
		return to;
	}

	public LobbyInterface GetLobbyInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetLobbyInterface(base.InnerHandle), out LobbyInterface to);
		return to;
	}

	public MetricsInterface GetMetricsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetMetricsInterface(base.InnerHandle), out MetricsInterface to);
		return to;
	}

	public ModsInterface GetModsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetModsInterface(base.InnerHandle), out ModsInterface to);
		return to;
	}

	public NetworkStatus GetNetworkStatus()
	{
		return Bindings.EOS_Platform_GetNetworkStatus(base.InnerHandle);
	}

	public Result GetOverrideCountryCode(out Utf8String outBuffer)
	{
		int inOutBufferLength = 5;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetOverrideCountryCode(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetOverrideLocaleCode(out Utf8String outBuffer)
	{
		int inOutBufferLength = 10;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetOverrideLocaleCode(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public P2PInterface GetP2PInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetP2PInterface(base.InnerHandle), out P2PInterface to);
		return to;
	}

	public PlayerDataStorageInterface GetPlayerDataStorageInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetPlayerDataStorageInterface(base.InnerHandle), out PlayerDataStorageInterface to);
		return to;
	}

	public PresenceInterface GetPresenceInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetPresenceInterface(base.InnerHandle), out PresenceInterface to);
		return to;
	}

	public ProgressionSnapshotInterface GetProgressionSnapshotInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetProgressionSnapshotInterface(base.InnerHandle), out ProgressionSnapshotInterface to);
		return to;
	}

	public RTCAdminInterface GetRTCAdminInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetRTCAdminInterface(base.InnerHandle), out RTCAdminInterface to);
		return to;
	}

	public RTCInterface GetRTCInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetRTCInterface(base.InnerHandle), out RTCInterface to);
		return to;
	}

	public ReportsInterface GetReportsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetReportsInterface(base.InnerHandle), out ReportsInterface to);
		return to;
	}

	public SanctionsInterface GetSanctionsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetSanctionsInterface(base.InnerHandle), out SanctionsInterface to);
		return to;
	}

	public SessionsInterface GetSessionsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetSessionsInterface(base.InnerHandle), out SessionsInterface to);
		return to;
	}

	public StatsInterface GetStatsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetStatsInterface(base.InnerHandle), out StatsInterface to);
		return to;
	}

	public TitleStorageInterface GetTitleStorageInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetTitleStorageInterface(base.InnerHandle), out TitleStorageInterface to);
		return to;
	}

	public UIInterface GetUIInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetUIInterface(base.InnerHandle), out UIInterface to);
		return to;
	}

	public UserInfoInterface GetUserInfoInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetUserInfoInterface(base.InnerHandle), out UserInfoInterface to);
		return to;
	}

	public void Release()
	{
		Bindings.EOS_Platform_Release(base.InnerHandle);
	}

	public Result SetApplicationStatus(ApplicationStatus newStatus)
	{
		return Bindings.EOS_Platform_SetApplicationStatus(base.InnerHandle, newStatus);
	}

	public Result SetNetworkStatus(NetworkStatus newStatus)
	{
		return Bindings.EOS_Platform_SetNetworkStatus(base.InnerHandle, newStatus);
	}

	public Result SetOverrideCountryCode(Utf8String newCountryCode)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(newCountryCode, ref to);
		Result result = Bindings.EOS_Platform_SetOverrideCountryCode(base.InnerHandle, to);
		Helper.Dispose(ref to);
		return result;
	}

	public Result SetOverrideLocaleCode(Utf8String newLocaleCode)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(newLocaleCode, ref to);
		Result result = Bindings.EOS_Platform_SetOverrideLocaleCode(base.InnerHandle, to);
		Helper.Dispose(ref to);
		return result;
	}

	public void Tick()
	{
		Bindings.EOS_Platform_Tick(base.InnerHandle);
	}

	public static Result Shutdown()
	{
		return Bindings.EOS_Shutdown();
	}
}


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr ReallocateMemoryFunc(IntPtr pointer, UIntPtr sizeInBytes, UIntPtr alignment);


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void ReleaseMemoryFunc(IntPtr pointer);


public enum RTCBackgroundMode
{
	LeaveRooms,
	KeepRoomsAlive
}


using System;
using Epic.OnlineServices.Platform;

public struct RTCOptions
{
	public IntPtr PlatformSpecificOptions { get; set; }

	public RTCBackgroundMode BackgroundMode { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

internal struct RTCOptionsInternal : ISettable<RTCOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformSpecificOptions;

	private RTCBackgroundMode m_BackgroundMode;

	public void Set(ref RTCOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		m_PlatformSpecificOptions = other.PlatformSpecificOptions;
		m_BackgroundMode = other.BackgroundMode;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformSpecificOptions);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct CopyModInfoOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModEnumerationType Type { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct CopyModInfoOptionsInternal : ISettable<CopyModInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ModEnumerationType m_Type;

	public void Set(ref CopyModInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Type = other.Type;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct EnumerateModsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModEnumerationType Type { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct EnumerateModsCallbackInfoInternal : ICallbackInfoInternal, IGettable<EnumerateModsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private ModEnumerationType m_Type;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out EnumerateModsCallbackInfo other)
	{
		other = default(EnumerateModsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_LocalUserId, out EpicAccountId to);
		other.LocalUserId = to;
		Helper.Get(m_ClientData, out object to2);
		other.ClientData = to2;
		other.Type = m_Type;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct EnumerateModsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModEnumerationType Type { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct EnumerateModsOptionsInternal : ISettable<EnumerateModsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ModEnumerationType m_Type;

	public void Set(ref EnumerateModsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Type = other.Type;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct InstallModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct InstallModCallbackInfoInternal : ICallbackInfoInternal, IGettable<InstallModCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out InstallModCallbackInfo other)
	{
		other = default(InstallModCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_LocalUserId, out EpicAccountId to);
		other.LocalUserId = to;
		Helper.Get(m_ClientData, out object to2);
		other.ClientData = to2;
		Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to3);
		other.Mod = to3;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct InstallModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }

	public bool RemoveAfterExit { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct InstallModOptionsInternal : ISettable<InstallModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	private int m_RemoveAfterExit;

	public void Set(ref InstallModOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<ModIdentifier, ModIdentifierInternal>(other.Mod, ref m_Mod);
		Helper.Set(other.RemoveAfterExit, ref m_RemoveAfterExit);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


public enum ModEnumerationType
{
	Installed,
	AllAvailable
}


using Epic.OnlineServices;

public struct ModIdentifier
{
	public Utf8String NamespaceId { get; set; }

	public Utf8String ItemId { get; set; }

	public Utf8String ArtifactId { get; set; }

	public Utf8String Title { get; set; }

	public Utf8String Version { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct ModIdentifierInternal : IGettable<ModIdentifier>, ISettable<ModIdentifier>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_NamespaceId;

	private IntPtr m_ItemId;

	private IntPtr m_ArtifactId;

	private IntPtr m_Title;

	private IntPtr m_Version;

	public void Get(out ModIdentifier other)
	{
		other = default(ModIdentifier);
		Helper.Get(m_NamespaceId, out Utf8String to);
		other.NamespaceId = to;
		Helper.Get(m_ItemId, out Utf8String to2);
		other.ItemId = to2;
		Helper.Get(m_ArtifactId, out Utf8String to3);
		other.ArtifactId = to3;
		Helper.Get(m_Title, out Utf8String to4);
		other.Title = to4;
		Helper.Get(m_Version, out Utf8String to5);
		other.Version = to5;
	}

	public void Set(ref ModIdentifier other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.NamespaceId, ref m_NamespaceId);
		Helper.Set(other.ItemId, ref m_ItemId);
		Helper.Set(other.ArtifactId, ref m_ArtifactId);
		Helper.Set(other.Title, ref m_Title);
		Helper.Set(other.Version, ref m_Version);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_NamespaceId);
		Helper.Dispose(ref m_ItemId);
		Helper.Dispose(ref m_ArtifactId);
		Helper.Dispose(ref m_Title);
		Helper.Dispose(ref m_Version);
	}
}


using Epic.OnlineServices.Mods;

public struct ModInfo
{
	public ModIdentifier[] Mods { get; set; }

	public ModEnumerationType Type { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct ModInfoInternal : IGettable<ModInfo>
{
	private int m_ApiVersion;

	private int m_ModsCount;

	private IntPtr m_Mods;

	private ModEnumerationType m_Type;

	public void Get(out ModInfo other)
	{
		other = default(ModInfo);
		Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mods, out var to, m_ModsCount, isArrayItemAllocated: false);
		other.Mods = to;
		other.Type = m_Type;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public sealed class ModsInterface : Handle
{
	public const int COPYMODINFO_API_LATEST = 1;

	public const int ENUMERATEMODS_API_LATEST = 1;

	public const int INSTALLMOD_API_LATEST = 1;

	public const int MODINFO_API_LATEST = 1;

	public const int MOD_IDENTIFIER_API_LATEST = 1;

	public const int UNINSTALLMOD_API_LATEST = 1;

	public const int UPDATEMOD_API_LATEST = 1;

	public ModsInterface()
	{
	}

	public ModsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyModInfo(ref CopyModInfoOptions options, out ModInfo? outEnumeratedMods)
	{
		CopyModInfoOptionsInternal options2 = default(CopyModInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outEnumeratedMods2 = IntPtr.Zero;
		Result result = Bindings.EOS_Mods_CopyModInfo(base.InnerHandle, ref options2, out outEnumeratedMods2);
		Helper.Dispose(ref options2);
		Helper.Get<ModInfoInternal, ModInfo>(outEnumeratedMods2, out outEnumeratedMods);
		if (outEnumeratedMods2 != IntPtr.Zero)
		{
			Bindings.EOS_Mods_ModInfo_Release(outEnumeratedMods2);
		}
		return result;
	}

	public void EnumerateMods(ref EnumerateModsOptions options, object clientData, OnEnumerateModsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		EnumerateModsOptionsInternal options2 = default(EnumerateModsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Mods_EnumerateMods(base.InnerHandle, ref options2, clientDataPointer, OnEnumerateModsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void InstallMod(ref InstallModOptions options, object clientData, OnInstallModCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		InstallModOptionsInternal options2 = default(InstallModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Mods_InstallMod(base.InnerHandle, ref options2, clientDataPointer, OnInstallModCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void UninstallMod(ref UninstallModOptions options, object clientData, OnUninstallModCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UninstallModOptionsInternal options2 = default(UninstallModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Mods_UninstallMod(base.InnerHandle, ref options2, clientDataPointer, OnUninstallModCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void UpdateMod(ref UpdateModOptions options, object clientData, OnUpdateModCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UpdateModOptionsInternal options2 = default(UpdateModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Mods_UpdateMod(base.InnerHandle, ref options2, clientDataPointer, OnUpdateModCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using Epic.OnlineServices.Mods;

public delegate void OnEnumerateModsCallback(ref EnumerateModsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnEnumerateModsCallbackInternal(ref EnumerateModsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal static class OnEnumerateModsCallbackInternalImplementation
{
	private static OnEnumerateModsCallbackInternal s_Delegate;

	public static OnEnumerateModsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnEnumerateModsCallbackInternal))]
	public static void EntryPoint(ref EnumerateModsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<EnumerateModsCallbackInfoInternal, OnEnumerateModsCallback, EnumerateModsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Mods;

public delegate void OnInstallModCallback(ref InstallModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnInstallModCallbackInternal(ref InstallModCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal static class OnInstallModCallbackInternalImplementation
{
	private static OnInstallModCallbackInternal s_Delegate;

	public static OnInstallModCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnInstallModCallbackInternal))]
	public static void EntryPoint(ref InstallModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<InstallModCallbackInfoInternal, OnInstallModCallback, InstallModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Mods;

public delegate void OnUninstallModCallback(ref UninstallModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUninstallModCallbackInternal(ref UninstallModCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal static class OnUninstallModCallbackInternalImplementation
{
	private static OnUninstallModCallbackInternal s_Delegate;

	public static OnUninstallModCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUninstallModCallbackInternal))]
	public static void EntryPoint(ref UninstallModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UninstallModCallbackInfoInternal, OnUninstallModCallback, UninstallModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Mods;

public delegate void OnUpdateModCallback(ref UpdateModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateModCallbackInternal(ref UpdateModCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal static class OnUpdateModCallbackInternalImplementation
{
	private static OnUpdateModCallbackInternal s_Delegate;

	public static OnUpdateModCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateModCallbackInternal))]
	public static void EntryPoint(ref UpdateModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateModCallbackInfoInternal, OnUpdateModCallback, UpdateModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UninstallModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct UninstallModCallbackInfoInternal : ICallbackInfoInternal, IGettable<UninstallModCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UninstallModCallbackInfo other)
	{
		other = default(UninstallModCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_LocalUserId, out EpicAccountId to);
		other.LocalUserId = to;
		Helper.Get(m_ClientData, out object to2);
		other.ClientData = to2;
		Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to3);
		other.Mod = to3;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UninstallModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct UninstallModOptionsInternal : ISettable<UninstallModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	public void Set(ref UninstallModOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<ModIdentifier, ModIdentifierInternal>(other.Mod, ref m_Mod);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UpdateModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct UpdateModCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateModCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UpdateModCallbackInfo other)
	{
		other = default(UpdateModCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_LocalUserId, out EpicAccountId to);
		other.LocalUserId = to;
		Helper.Get(m_ClientData, out object to2);
		other.ClientData = to2;
		Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to3);
		other.Mod = to3;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UpdateModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

internal struct UpdateModOptionsInternal : ISettable<UpdateModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	public void Set(ref UpdateModOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<ModIdentifier, ModIdentifierInternal>(other.Mod, ref m_Mod);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct BeginPlayerSessionOptions
{
	public BeginPlayerSessionOptionsAccountId AccountId { get; set; }

	public Utf8String DisplayName { get; set; }

	public UserControllerType ControllerType { get; set; }

	public Utf8String ServerIp { get; set; }

	public Utf8String GameSessionId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

internal struct BeginPlayerSessionOptionsInternal : ISettable<BeginPlayerSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private MetricsAccountIdType m_AccountIdType;

	private BeginPlayerSessionOptionsAccountIdInternal m_AccountId;

	private IntPtr m_DisplayName;

	private UserControllerType m_ControllerType;

	private IntPtr m_ServerIp;

	private IntPtr m_GameSessionId;

	public void Set(ref BeginPlayerSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<BeginPlayerSessionOptionsAccountId, BeginPlayerSessionOptionsAccountIdInternal>(other.AccountId, ref m_AccountId);
		m_AccountIdType = other.AccountId.AccountIdType;
		Helper.Set(other.DisplayName, ref m_DisplayName);
		m_ControllerType = other.ControllerType;
		Helper.Set(other.ServerIp, ref m_ServerIp);
		Helper.Set(other.GameSessionId, ref m_GameSessionId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_ServerIp);
		Helper.Dispose(ref m_GameSessionId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct BeginPlayerSessionOptionsAccountId
{
	private EpicAccountId m_Epic;

	private Utf8String m_External;

	private MetricsAccountIdType m_AccountIdType;

	public EpicAccountId Epic
	{
		get
		{
			if (m_AccountIdType == MetricsAccountIdType.Epic)
			{
				return m_Epic;
			}
			return null;
		}
		set
		{
			m_Epic = value;
			m_AccountIdType = MetricsAccountIdType.Epic;
		}
	}

	public Utf8String External
	{
		get
		{
			if (m_AccountIdType == MetricsAccountIdType.External)
			{
				return m_External;
			}
			return null;
		}
		set
		{
			m_External = value;
			m_AccountIdType = MetricsAccountIdType.External;
		}
	}

	public MetricsAccountIdType AccountIdType => m_AccountIdType;

	public static implicit operator BeginPlayerSessionOptionsAccountId(EpicAccountId value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.Epic = value;
		return result;
	}

	public static implicit operator BeginPlayerSessionOptionsAccountId(Utf8String value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	public static implicit operator BeginPlayerSessionOptionsAccountId(string value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Explicit)]
internal struct BeginPlayerSessionOptionsAccountIdInternal : ISettable<BeginPlayerSessionOptionsAccountId>, IDisposable
{
	[FieldOffset(0)]
	private IntPtr m_Epic;

	[FieldOffset(0)]
	private IntPtr m_External;

	public void Set(ref BeginPlayerSessionOptionsAccountId other)
	{
		Dispose();
		if (other.AccountIdType == MetricsAccountIdType.Epic)
		{
			Helper.Set((Handle)other.Epic, ref m_Epic);
		}
		if (other.AccountIdType == MetricsAccountIdType.External)
		{
			Helper.Set(other.External, ref m_External);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Epic);
		Helper.Dispose(ref m_External);
	}
}


using Epic.OnlineServices.Metrics;

public struct EndPlayerSessionOptions
{
	public EndPlayerSessionOptionsAccountId AccountId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

internal struct EndPlayerSessionOptionsInternal : ISettable<EndPlayerSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private MetricsAccountIdType m_AccountIdType;

	private EndPlayerSessionOptionsAccountIdInternal m_AccountId;

	public void Set(ref EndPlayerSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<EndPlayerSessionOptionsAccountId, EndPlayerSessionOptionsAccountIdInternal>(other.AccountId, ref m_AccountId);
		m_AccountIdType = other.AccountId.AccountIdType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct EndPlayerSessionOptionsAccountId
{
	private EpicAccountId m_Epic;

	private Utf8String m_External;

	private MetricsAccountIdType m_AccountIdType;

	public EpicAccountId Epic
	{
		get
		{
			if (m_AccountIdType == MetricsAccountIdType.Epic)
			{
				return m_Epic;
			}
			return null;
		}
		set
		{
			m_Epic = value;
			m_AccountIdType = MetricsAccountIdType.Epic;
		}
	}

	public Utf8String External
	{
		get
		{
			if (m_AccountIdType == MetricsAccountIdType.External)
			{
				return m_External;
			}
			return null;
		}
		set
		{
			m_External = value;
			m_AccountIdType = MetricsAccountIdType.External;
		}
	}

	public MetricsAccountIdType AccountIdType => m_AccountIdType;

	public static implicit operator EndPlayerSessionOptionsAccountId(EpicAccountId value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.Epic = value;
		return result;
	}

	public static implicit operator EndPlayerSessionOptionsAccountId(Utf8String value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	public static implicit operator EndPlayerSessionOptionsAccountId(string value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Explicit)]
internal struct EndPlayerSessionOptionsAccountIdInternal : ISettable<EndPlayerSessionOptionsAccountId>, IDisposable
{
	[FieldOffset(0)]
	private IntPtr m_Epic;

	[FieldOffset(0)]
	private IntPtr m_External;

	public void Set(ref EndPlayerSessionOptionsAccountId other)
	{
		Dispose();
		if (other.AccountIdType == MetricsAccountIdType.Epic)
		{
			Helper.Set((Handle)other.Epic, ref m_Epic);
		}
		if (other.AccountIdType == MetricsAccountIdType.External)
		{
			Helper.Set(other.External, ref m_External);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Epic);
		Helper.Dispose(ref m_External);
	}
}


public enum MetricsAccountIdType
{
	Epic,
	External
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public sealed class MetricsInterface : Handle
{
	public const int BEGINPLAYERSESSION_API_LATEST = 1;

	public const int ENDPLAYERSESSION_API_LATEST = 1;

	public MetricsInterface()
	{
	}

	public MetricsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result BeginPlayerSession(ref BeginPlayerSessionOptions options)
	{
		BeginPlayerSessionOptionsInternal options2 = default(BeginPlayerSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Metrics_BeginPlayerSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndPlayerSession(ref EndPlayerSessionOptions options)
	{
		EndPlayerSessionOptionsInternal options2 = default(EndPlayerSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Metrics_EndPlayerSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


public enum UserControllerType
{
	Unknown,
	MouseKeyboard,
	GamepadControl,
	TouchControl
}


public enum LogCategory
{
	Core = 0,
	Auth = 1,
	Friends = 2,
	Presence = 3,
	UserInfo = 4,
	HttpSerialization = 5,
	Ecom = 6,
	P2P = 7,
	Sessions = 8,
	RateLimiter = 9,
	PlayerDataStorage = 10,
	Analytics = 11,
	Messaging = 12,
	Connect = 13,
	Overlay = 14,
	Achievements = 15,
	Stats = 16,
	Ui = 17,
	Lobby = 18,
	Leaderboards = 19,
	Keychain = 20,
	IntegratedPlatform = 21,
	TitleStorage = 22,
	Mods = 23,
	AntiCheat = 24,
	Reports = 25,
	Sanctions = 26,
	ProgressionSnapshots = 27,
	Kws = 28,
	Rtc = 29,
	RTCAdmin = 30,
	CustomInvites = 31,
	Http = 41,
	AllCategories = int.MaxValue
}


using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

public sealed class LoggingInterface
{
	public static Result SetCallback(LogMessageFunc callback)
	{
		Helper.AddStaticCallback("Logging.LogMessageFunc", callback);
		return Bindings.EOS_Logging_SetCallback(LogMessageFuncInternalImplementation.Delegate);
	}

	public static Result SetLogLevel(LogCategory logCategory, LogLevel logLevel)
	{
		return Bindings.EOS_Logging_SetLogLevel(logCategory, logLevel);
	}
}


public enum LogLevel
{
	Off = 0,
	Fatal = 100,
	Error = 200,
	Warning = 300,
	Info = 400,
	Verbose = 500,
	VeryVerbose = 600
}


using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

public struct LogMessage
{
	public Utf8String Category { get; set; }

	public Utf8String Message { get; set; }

	public LogLevel Level { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

internal struct LogMessageInternal : IGettable<LogMessage>
{
	private IntPtr m_Category;

	private IntPtr m_Message;

	private LogLevel m_Level;

	public void Get(out LogMessage other)
	{
		other = default(LogMessage);
		Helper.Get(m_Category, out Utf8String to);
		other.Category = to;
		Helper.Get(m_Message, out Utf8String to2);
		other.Message = to2;
		other.Level = m_Level;
	}
}


using Epic.OnlineServices.Logging;

public delegate void LogMessageFunc(ref LogMessage message);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Logging;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void LogMessageFuncInternal(ref LogMessageInternal message);


using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

internal static class LogMessageFuncInternalImplementation
{
	private static LogMessageFuncInternal s_Delegate;

	public static LogMessageFuncInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(LogMessageFuncInternal))]
	public static void EntryPoint(ref LogMessageInternal message)
	{
		if (Helper.TryGetStaticCallback<LogMessageFunc>("Logging.LogMessageFunc", out var callback))
		{
			Helper.Get<LogMessageInternal, LogMessage>(ref message, out LogMessage to);
			callback(ref to);
		}
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyJoinLobbyAcceptedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyJoinLobbyAcceptedOptionsInternal : ISettable<AddNotifyJoinLobbyAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyJoinLobbyAcceptedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLeaveLobbyRequestedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLeaveLobbyRequestedOptionsInternal : ISettable<AddNotifyLeaveLobbyRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLeaveLobbyRequestedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteAcceptedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyInviteAcceptedOptionsInternal : ISettable<AddNotifyLobbyInviteAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteAcceptedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyInviteReceivedOptionsInternal : ISettable<AddNotifyLobbyInviteReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteRejectedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyInviteRejectedOptionsInternal : ISettable<AddNotifyLobbyInviteRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteRejectedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyMemberStatusReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyMemberStatusReceivedOptionsInternal : ISettable<AddNotifyLobbyMemberStatusReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyMemberStatusReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyMemberUpdateReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyMemberUpdateReceivedOptionsInternal : ISettable<AddNotifyLobbyMemberUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyMemberUpdateReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyUpdateReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyLobbyUpdateReceivedOptionsInternal : ISettable<AddNotifyLobbyUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyUpdateReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AddNotifyRTCRoomConnectionChangedOptions
{
	public Utf8String LobbyId_DEPRECATED { get; set; }

	public ProductUserId LocalUserId_DEPRECATED { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifyRTCRoomConnectionChangedOptionsInternal : ISettable<AddNotifyRTCRoomConnectionChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId_DEPRECATED;

	private IntPtr m_LocalUserId_DEPRECATED;

	public void Set(ref AddNotifyRTCRoomConnectionChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.LobbyId_DEPRECATED, ref m_LobbyId_DEPRECATED);
		Helper.Set((Handle)other.LocalUserId_DEPRECATED, ref m_LocalUserId_DEPRECATED);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId_DEPRECATED);
		Helper.Dispose(ref m_LocalUserId_DEPRECATED);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySendLobbyNativeInviteRequestedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AddNotifySendLobbyNativeInviteRequestedOptionsInternal : ISettable<AddNotifySendLobbyNativeInviteRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySendLobbyNativeInviteRequestedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public struct Attribute
{
	public AttributeData? Data { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AttributeInternal : IGettable<Epic.OnlineServices.Lobby.Attribute>
{
	private int m_ApiVersion;

	private IntPtr m_Data;

	private LobbyAttributeVisibility m_Visibility;

	public void Get(out Epic.OnlineServices.Lobby.Attribute other)
	{
		other = default(Epic.OnlineServices.Lobby.Attribute);
		Helper.Get<AttributeDataInternal, AttributeData>(m_Data, out AttributeData? to);
		other.Data = to;
		other.Visibility = m_Visibility;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct AttributeData
{
	public Utf8String Key { get; set; }

	public AttributeDataValue Value { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct AttributeDataInternal : IGettable<AttributeData>, ISettable<AttributeData>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private AttributeDataValueInternal m_Value;

	private AttributeType m_ValueType;

	public void Get(out AttributeData other)
	{
		other = default(AttributeData);
		Helper.Get(m_Key, out Utf8String to);
		other.Key = to;
		m_Value.Get(out var other2, m_ValueType, null);
		other.Value = other2;
	}

	public void Set(ref AttributeData other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Key, ref m_Key);
		Helper.Set<AttributeDataValue, AttributeDataValueInternal>(other.Value, ref m_Value);
		m_ValueType = other.Value.ValueType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct AttributeDataValue
{
	private long? m_AsInt64;

	private double? m_AsDouble;

	private bool? m_AsBool;

	private Utf8String m_AsUtf8;

	private AttributeType m_ValueType;

	public long? AsInt64
	{
		get
		{
			if (m_ValueType == AttributeType.Int64)
			{
				return m_AsInt64;
			}
			return null;
		}
		set
		{
			m_AsInt64 = value;
			m_ValueType = AttributeType.Int64;
		}
	}

	public double? AsDouble
	{
		get
		{
			if (m_ValueType == AttributeType.Double)
			{
				return m_AsDouble;
			}
			return null;
		}
		set
		{
			m_AsDouble = value;
			m_ValueType = AttributeType.Double;
		}
	}

	public bool? AsBool
	{
		get
		{
			if (m_ValueType == AttributeType.Boolean)
			{
				return m_AsBool;
			}
			return null;
		}
		set
		{
			m_AsBool = value;
			m_ValueType = AttributeType.Boolean;
		}
	}

	public Utf8String AsUtf8
	{
		get
		{
			if (m_ValueType == AttributeType.String)
			{
				return m_AsUtf8;
			}
			return null;
		}
		set
		{
			m_AsUtf8 = value;
			m_ValueType = AttributeType.String;
		}
	}

	public AttributeType ValueType => m_ValueType;

	public static implicit operator AttributeDataValue(long? value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsInt64 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(double? value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsDouble = value;
		return result;
	}

	public static implicit operator AttributeDataValue(bool? value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsBool = value;
		return result;
	}

	public static implicit operator AttributeDataValue(Utf8String value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(string value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Explicit)]
internal struct AttributeDataValueInternal : IGettable<AttributeDataValue, AttributeType>, ISettable<AttributeDataValue>, IDisposable
{
	[FieldOffset(0)]
	private long m_AsInt64;

	[FieldOffset(0)]
	private double m_AsDouble;

	[FieldOffset(0)]
	private int m_AsBool;

	[FieldOffset(0)]
	private IntPtr m_AsUtf8;

	public void Get(out AttributeDataValue other, AttributeType enumValue, int? arrayLength)
	{
		other = default(AttributeDataValue);
		if (enumValue == AttributeType.Int64)
		{
			Helper.Get(m_AsInt64, out long? to);
			other.AsInt64 = to;
		}
		if (enumValue == AttributeType.Double)
		{
			Helper.Get(m_AsDouble, out var to2);
			other.AsDouble = to2;
		}
		if (enumValue == AttributeType.Boolean)
		{
			Helper.Get(m_AsBool, out bool? to3);
			other.AsBool = to3;
		}
		if (enumValue == AttributeType.String)
		{
			Helper.Get(m_AsUtf8, out Utf8String to4);
			other.AsUtf8 = to4;
		}
	}

	public void Set(ref AttributeDataValue other)
	{
		Dispose();
		if (other.ValueType == AttributeType.Int64)
		{
			Helper.Set<long>(other.AsInt64, ref m_AsInt64);
		}
		if (other.ValueType == AttributeType.Double)
		{
			Helper.Set<double>(other.AsDouble, ref m_AsDouble);
		}
		if (other.ValueType == AttributeType.Boolean)
		{
			Helper.Set(other.AsBool, ref m_AsBool);
		}
		if (other.ValueType == AttributeType.String)
		{
			Helper.Set(other.AsUtf8, ref m_AsUtf8);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AsUtf8);
	}
}


using Epic.OnlineServices;

public struct CopyLobbyDetailsHandleByInviteIdOptions
{
	public Utf8String InviteId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CopyLobbyDetailsHandleByInviteIdOptionsInternal : ISettable<CopyLobbyDetailsHandleByInviteIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_InviteId;

	public void Set(ref CopyLobbyDetailsHandleByInviteIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.InviteId, ref m_InviteId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_InviteId);
	}
}


public struct CopyLobbyDetailsHandleByUiEventIdOptions
{
	public ulong UiEventId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CopyLobbyDetailsHandleByUiEventIdOptionsInternal : ISettable<CopyLobbyDetailsHandleByUiEventIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_UiEventId;

	public void Set(ref CopyLobbyDetailsHandleByUiEventIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_UiEventId = other.UiEventId;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLobbyDetailsHandleOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CopyLobbyDetailsHandleOptionsInternal : ISettable<CopyLobbyDetailsHandleOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public void Set(ref CopyLobbyDetailsHandleOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CreateLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CreateLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateLobbyCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CreateLobbyCallbackInfo other)
	{
		other = default(CreateLobbyCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct CreateLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint MaxLobbyMembers { get; set; }

	public LobbyPermissionLevel PermissionLevel { get; set; }

	public bool PresenceEnabled { get; set; }

	public bool AllowInvites { get; set; }

	public Utf8String BucketId { get; set; }

	public bool DisableHostMigration { get; set; }

	public bool EnableRTCRoom { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public Utf8String LobbyId { get; set; }

	public bool EnableJoinById { get; set; }

	public bool RejoinAfterKickRequiresInvite { get; set; }

	public uint[] AllowedPlatformIds { get; set; }

	public bool CrossplayOptOut { get; set; }

	public LobbyRTCRoomJoinActionType RTCRoomJoinActionType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CreateLobbyOptionsInternal : ISettable<CreateLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_MaxLobbyMembers;

	private LobbyPermissionLevel m_PermissionLevel;

	private int m_PresenceEnabled;

	private int m_AllowInvites;

	private IntPtr m_BucketId;

	private int m_DisableHostMigration;

	private int m_EnableRTCRoom;

	private IntPtr m_LocalRTCOptions;

	private IntPtr m_LobbyId;

	private int m_EnableJoinById;

	private int m_RejoinAfterKickRequiresInvite;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	private int m_CrossplayOptOut;

	private LobbyRTCRoomJoinActionType m_RTCRoomJoinActionType;

	public void Set(ref CreateLobbyOptions other)
	{
		Dispose();
		m_ApiVersion = 10;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_MaxLobbyMembers = other.MaxLobbyMembers;
		m_PermissionLevel = other.PermissionLevel;
		Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
		Helper.Set(other.AllowInvites, ref m_AllowInvites);
		Helper.Set(other.BucketId, ref m_BucketId);
		Helper.Set(other.DisableHostMigration, ref m_DisableHostMigration);
		Helper.Set(other.EnableRTCRoom, ref m_EnableRTCRoom);
		Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set(other.EnableJoinById, ref m_EnableJoinById);
		Helper.Set(other.RejoinAfterKickRequiresInvite, ref m_RejoinAfterKickRequiresInvite);
		Helper.Set(other.AllowedPlatformIds, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount, isArrayItemAllocated: false);
		Helper.Set(other.CrossplayOptOut, ref m_CrossplayOptOut);
		m_RTCRoomJoinActionType = other.RTCRoomJoinActionType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_BucketId);
		Helper.Dispose(ref m_LocalRTCOptions);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


public struct CreateLobbySearchOptions
{
	public uint MaxResults { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct CreateLobbySearchOptionsInternal : ISettable<CreateLobbySearchOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxResults;

	public void Set(ref CreateLobbySearchOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_MaxResults = other.MaxResults;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct DestroyLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct DestroyLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<DestroyLobbyCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DestroyLobbyCallbackInfo other)
	{
		other = default(DestroyLobbyCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct DestroyLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct DestroyLobbyOptionsInternal : ISettable<DestroyLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public void Set(ref DestroyLobbyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.LobbyId, ref m_LobbyId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;

public struct GetConnectStringOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct GetConnectStringOptionsInternal : ISettable<GetConnectStringOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public void Set(ref GetConnectStringOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.LobbyId, ref m_LobbyId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;

public struct GetInviteCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct GetInviteCountOptionsInternal : ISettable<GetInviteCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetInviteCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetInviteIdByIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct GetInviteIdByIndexOptionsInternal : ISettable<GetInviteIdByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public void Set(ref GetInviteIdByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetRTCRoomNameOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct GetRTCRoomNameOptionsInternal : ISettable<GetRTCRoomNameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public void Set(ref GetRTCRoomNameOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct HardMuteMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct HardMuteMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<HardMuteMemberCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out HardMuteMemberCallbackInfo other)
	{
		other = default(HardMuteMemberCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct HardMuteMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public bool HardMute { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct HardMuteMemberOptionsInternal : ISettable<HardMuteMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private int m_HardMute;

	public void Set(ref HardMuteMemberOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set(other.HardMute, ref m_HardMute);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct IsRTCRoomConnectedOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct IsRTCRoomConnectedOptionsInternal : ISettable<IsRTCRoomConnectedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public void Set(ref IsRTCRoomConnectedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct JoinLobbyAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ulong UiEventId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinLobbyAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyAcceptedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private ulong m_UiEventId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out JoinLobbyAcceptedCallbackInfo other)
	{
		other = default(JoinLobbyAcceptedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		other.UiEventId = m_UiEventId;
	}
}


using Epic.OnlineServices;

public struct JoinLobbyByIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinLobbyByIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyByIdCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out JoinLobbyByIdCallbackInfo other)
	{
		other = default(JoinLobbyByIdCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyByIdOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public bool CrossplayOptOut { get; set; }

	public LobbyRTCRoomJoinActionType RTCRoomJoinActionType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinLobbyByIdOptionsInternal : ISettable<JoinLobbyByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	private IntPtr m_LocalRTCOptions;

	private int m_CrossplayOptOut;

	private LobbyRTCRoomJoinActionType m_RTCRoomJoinActionType;

	public void Set(ref JoinLobbyByIdOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
		Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
		Helper.Set(other.CrossplayOptOut, ref m_CrossplayOptOut);
		m_RTCRoomJoinActionType = other.RTCRoomJoinActionType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LocalRTCOptions);
	}
}


using Epic.OnlineServices;

public struct JoinLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out JoinLobbyCallbackInfo other)
	{
		other = default(JoinLobbyCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyOptions
{
	public LobbyDetails LobbyDetailsHandle { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public bool CrossplayOptOut { get; set; }

	public LobbyRTCRoomJoinActionType RTCRoomJoinActionType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinLobbyOptionsInternal : ISettable<JoinLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyDetailsHandle;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	private IntPtr m_LocalRTCOptions;

	private int m_CrossplayOptOut;

	private LobbyRTCRoomJoinActionType m_RTCRoomJoinActionType;

	public void Set(ref JoinLobbyOptions other)
	{
		Dispose();
		m_ApiVersion = 5;
		Helper.Set((Handle)other.LobbyDetailsHandle, ref m_LobbyDetailsHandle);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
		Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
		Helper.Set(other.CrossplayOptOut, ref m_CrossplayOptOut);
		m_RTCRoomJoinActionType = other.RTCRoomJoinActionType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyDetailsHandle);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LocalRTCOptions);
	}
}


using Epic.OnlineServices;

public struct JoinRTCRoomCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinRTCRoomCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinRTCRoomCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out JoinRTCRoomCallbackInfo other)
	{
		other = default(JoinRTCRoomCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinRTCRoomOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct JoinRTCRoomOptionsInternal : ISettable<JoinRTCRoomOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_LocalRTCOptions;

	public void Set(ref JoinRTCRoomOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LocalRTCOptions);
	}
}


using Epic.OnlineServices;

public struct KickMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct KickMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<KickMemberCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out KickMemberCallbackInfo other)
	{
		other = default(KickMemberCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct KickMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct KickMemberOptionsInternal : ISettable<KickMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref KickMemberOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct LeaveLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LeaveLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveLobbyCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LeaveLobbyCallbackInfo other)
	{
		other = default(LeaveLobbyCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct LeaveLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LeaveLobbyOptionsInternal : ISettable<LeaveLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public void Set(ref LeaveLobbyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.LobbyId, ref m_LobbyId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;

public struct LeaveLobbyRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LeaveLobbyRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveLobbyRequestedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LeaveLobbyRequestedCallbackInfo other)
	{
		other = default(LeaveLobbyRequestedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_LobbyId, out Utf8String to3);
		other.LobbyId = to3;
	}
}


using Epic.OnlineServices;

public struct LeaveRTCRoomCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LeaveRTCRoomCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveRTCRoomCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LeaveRTCRoomCallbackInfo other)
	{
		other = default(LeaveRTCRoomCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct LeaveRTCRoomOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LeaveRTCRoomOptionsInternal : ISettable<LeaveRTCRoomOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public void Set(ref LeaveRTCRoomOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


public enum LobbyAttributeVisibility
{
	Public,
	Private
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyDetails : Handle
{
	public LobbyDetails()
	{
	}

	public LobbyDetails(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyAttributeByIndex(ref LobbyDetailsCopyAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyAttributeByIndexOptionsInternal options2 = default(LobbyDetailsCopyAttributeByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyAttributeByIndex(base.InnerHandle, ref options2, out outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute2 != IntPtr.Zero)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyAttributeByKey(ref LobbyDetailsCopyAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyAttributeByKeyOptionsInternal options2 = default(LobbyDetailsCopyAttributeByKeyOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyAttributeByKey(base.InnerHandle, ref options2, out outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute2 != IntPtr.Zero)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyInfo(ref LobbyDetailsCopyInfoOptions options, out LobbyDetailsInfo? outLobbyDetailsInfo)
	{
		LobbyDetailsCopyInfoOptionsInternal options2 = default(LobbyDetailsCopyInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyInfo(base.InnerHandle, ref options2, out outLobbyDetailsInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<LobbyDetailsInfoInternal, LobbyDetailsInfo>(outLobbyDetailsInfo2, out outLobbyDetailsInfo);
		if (outLobbyDetailsInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_LobbyDetails_Info_Release(outLobbyDetailsInfo2);
		}
		return result;
	}

	public Result CopyMemberAttributeByIndex(ref LobbyDetailsCopyMemberAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options2 = default(LobbyDetailsCopyMemberAttributeByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberAttributeByIndex(base.InnerHandle, ref options2, out outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute2 != IntPtr.Zero)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyMemberAttributeByKey(ref LobbyDetailsCopyMemberAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options2 = default(LobbyDetailsCopyMemberAttributeByKeyOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberAttributeByKey(base.InnerHandle, ref options2, out outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute2 != IntPtr.Zero)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyMemberInfo(ref LobbyDetailsCopyMemberInfoOptions options, out LobbyDetailsMemberInfo? outLobbyDetailsMemberInfo)
	{
		LobbyDetailsCopyMemberInfoOptionsInternal options2 = default(LobbyDetailsCopyMemberInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsMemberInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberInfo(base.InnerHandle, ref options2, out outLobbyDetailsMemberInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<LobbyDetailsMemberInfoInternal, LobbyDetailsMemberInfo>(outLobbyDetailsMemberInfo2, out outLobbyDetailsMemberInfo);
		if (outLobbyDetailsMemberInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_LobbyDetails_MemberInfo_Release(outLobbyDetailsMemberInfo2);
		}
		return result;
	}

	public uint GetAttributeCount(ref LobbyDetailsGetAttributeCountOptions options)
	{
		LobbyDetailsGetAttributeCountOptionsInternal options2 = default(LobbyDetailsGetAttributeCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetAttributeCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ProductUserId GetLobbyOwner(ref LobbyDetailsGetLobbyOwnerOptions options)
	{
		LobbyDetailsGetLobbyOwnerOptionsInternal options2 = default(LobbyDetailsGetLobbyOwnerOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_LobbyDetails_GetLobbyOwner(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public uint GetMemberAttributeCount(ref LobbyDetailsGetMemberAttributeCountOptions options)
	{
		LobbyDetailsGetMemberAttributeCountOptionsInternal options2 = default(LobbyDetailsGetMemberAttributeCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetMemberAttributeCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ProductUserId GetMemberByIndex(ref LobbyDetailsGetMemberByIndexOptions options)
	{
		LobbyDetailsGetMemberByIndexOptionsInternal options2 = default(LobbyDetailsGetMemberByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_LobbyDetails_GetMemberByIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public uint GetMemberCount(ref LobbyDetailsGetMemberCountOptions options)
	{
		LobbyDetailsGetMemberCountOptionsInternal options2 = default(LobbyDetailsGetMemberCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetMemberCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbyDetails_Release(base.InnerHandle);
	}
}


public struct LobbyDetailsCopyAttributeByIndexOptions
{
	public uint AttrIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyAttributeByIndexOptionsInternal : ISettable<LobbyDetailsCopyAttributeByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AttrIndex;

	public void Set(ref LobbyDetailsCopyAttributeByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_AttrIndex = other.AttrIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyAttributeByKeyOptions
{
	public Utf8String AttrKey { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyAttributeByKeyOptionsInternal : ISettable<LobbyDetailsCopyAttributeByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AttrKey;

	public void Set(ref LobbyDetailsCopyAttributeByKeyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.AttrKey, ref m_AttrKey);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AttrKey);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsCopyInfoOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyInfoOptionsInternal : ISettable<LobbyDetailsCopyInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsCopyInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberAttributeByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint AttrIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyMemberAttributeByIndexOptionsInternal : ISettable<LobbyDetailsCopyMemberAttributeByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_AttrIndex;

	public void Set(ref LobbyDetailsCopyMemberAttributeByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		m_AttrIndex = other.AttrIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberAttributeByKeyOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AttrKey { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyMemberAttributeByKeyOptionsInternal : ISettable<LobbyDetailsCopyMemberAttributeByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AttrKey;

	public void Set(ref LobbyDetailsCopyMemberAttributeByKeyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set(other.AttrKey, ref m_AttrKey);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AttrKey);
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberInfoOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsCopyMemberInfoOptionsInternal : ISettable<LobbyDetailsCopyMemberInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public void Set(ref LobbyDetailsCopyMemberInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetAttributeCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsGetAttributeCountOptionsInternal : ISettable<LobbyDetailsGetAttributeCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetAttributeCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetLobbyOwnerOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsGetLobbyOwnerOptionsInternal : ISettable<LobbyDetailsGetLobbyOwnerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetLobbyOwnerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsGetMemberAttributeCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsGetMemberAttributeCountOptionsInternal : ISettable<LobbyDetailsGetMemberAttributeCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public void Set(ref LobbyDetailsGetMemberAttributeCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


public struct LobbyDetailsGetMemberByIndexOptions
{
	public uint MemberIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsGetMemberByIndexOptionsInternal : ISettable<LobbyDetailsGetMemberByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MemberIndex;

	public void Set(ref LobbyDetailsGetMemberByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_MemberIndex = other.MemberIndex;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetMemberCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsGetMemberCountOptionsInternal : ISettable<LobbyDetailsGetMemberCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetMemberCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyDetailsInfo
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LobbyOwnerUserId { get; set; }

	public LobbyPermissionLevel PermissionLevel { get; set; }

	public uint AvailableSlots { get; set; }

	public uint MaxMembers { get; set; }

	public bool AllowInvites { get; set; }

	public Utf8String BucketId { get; set; }

	public bool AllowHostMigration { get; set; }

	public bool RTCRoomEnabled { get; set; }

	public bool AllowJoinById { get; set; }

	public bool RejoinAfterKickRequiresInvite { get; set; }

	public bool PresenceEnabled { get; set; }

	public uint[] AllowedPlatformIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsInfoInternal : IGettable<LobbyDetailsInfo>
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LobbyOwnerUserId;

	private LobbyPermissionLevel m_PermissionLevel;

	private uint m_AvailableSlots;

	private uint m_MaxMembers;

	private int m_AllowInvites;

	private IntPtr m_BucketId;

	private int m_AllowHostMigration;

	private int m_RTCRoomEnabled;

	private int m_AllowJoinById;

	private int m_RejoinAfterKickRequiresInvite;

	private int m_PresenceEnabled;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public void Get(out LobbyDetailsInfo other)
	{
		other = default(LobbyDetailsInfo);
		Helper.Get(m_LobbyId, out Utf8String to);
		other.LobbyId = to;
		Helper.Get(m_LobbyOwnerUserId, out ProductUserId to2);
		other.LobbyOwnerUserId = to2;
		other.PermissionLevel = m_PermissionLevel;
		other.AvailableSlots = m_AvailableSlots;
		other.MaxMembers = m_MaxMembers;
		Helper.Get(m_AllowInvites, out bool to3);
		other.AllowInvites = to3;
		Helper.Get(m_BucketId, out Utf8String to4);
		other.BucketId = to4;
		Helper.Get(m_AllowHostMigration, out bool to5);
		other.AllowHostMigration = to5;
		Helper.Get(m_RTCRoomEnabled, out bool to6);
		other.RTCRoomEnabled = to6;
		Helper.Get(m_AllowJoinById, out bool to7);
		other.AllowJoinById = to7;
		Helper.Get(m_RejoinAfterKickRequiresInvite, out bool to8);
		other.RejoinAfterKickRequiresInvite = to8;
		Helper.Get(m_PresenceEnabled, out bool to9);
		other.PresenceEnabled = to9;
		Helper.Get(m_AllowedPlatformIds, out uint[] to10, m_AllowedPlatformIdsCount, isArrayItemAllocated: false);
		other.AllowedPlatformIds = to10;
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsMemberInfo
{
	public ProductUserId UserId { get; set; }

	public uint Platform { get; set; }

	public bool AllowsCrossplay { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyDetailsMemberInfoInternal : IGettable<LobbyDetailsMemberInfo>
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_Platform;

	private int m_AllowsCrossplay;

	public void Get(out LobbyDetailsMemberInfo other)
	{
		other = default(LobbyDetailsMemberInfo);
		Helper.Get(m_UserId, out ProductUserId to);
		other.UserId = to;
		other.Platform = m_Platform;
		Helper.Get(m_AllowsCrossplay, out bool to2);
		other.AllowsCrossplay = to2;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyInterface : Handle
{
	public const int ADDNOTIFYJOINLOBBYACCEPTED_API_LATEST = 1;

	public const int ADDNOTIFYLEAVELOBBYREQUESTED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYINVITEACCEPTED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYINVITERECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYINVITEREJECTED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYMEMBERSTATUSRECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYMEMBERUPDATERECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYLOBBYUPDATERECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYRTCROOMCONNECTIONCHANGED_API_LATEST = 2;

	public const int ADDNOTIFYSENDLOBBYNATIVEINVITEREQUESTED_API_LATEST = 1;

	public const int ATTRIBUTEDATA_API_LATEST = 1;

	public const int ATTRIBUTE_API_LATEST = 1;

	public const int COPYLOBBYDETAILSHANDLEBYINVITEID_API_LATEST = 1;

	public const int COPYLOBBYDETAILSHANDLEBYUIEVENTID_API_LATEST = 1;

	public const int COPYLOBBYDETAILSHANDLE_API_LATEST = 1;

	public const int CREATELOBBYSEARCH_API_LATEST = 1;

	public const int CREATELOBBY_API_LATEST = 10;

	public const int DESTROYLOBBY_API_LATEST = 1;

	public const int GETCONNECTSTRING_API_LATEST = 1;

	public const int GETCONNECTSTRING_BUFFER_SIZE = 256;

	public const int GETINVITECOUNT_API_LATEST = 1;

	public const int GETINVITEIDBYINDEX_API_LATEST = 1;

	public const int GETRTCROOMNAME_API_LATEST = 1;

	public const int HARDMUTEMEMBER_API_LATEST = 1;

	public const int INVITEID_MAX_LENGTH = 64;

	public const int ISRTCROOMCONNECTED_API_LATEST = 1;

	public const int JOINLOBBYBYID_API_LATEST = 3;

	public const int JOINLOBBY_API_LATEST = 5;

	public const int JOINRTCROOM_API_LATEST = 1;

	public const int KICKMEMBER_API_LATEST = 1;

	public const int LEAVELOBBY_API_LATEST = 1;

	public const int LEAVERTCROOM_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYATTRIBUTEBYINDEX_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYATTRIBUTEBYKEY_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYINFO_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYMEMBERATTRIBUTEBYINDEX_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYMEMBERATTRIBUTEBYKEY_API_LATEST = 1;

	public const int LOBBYDETAILS_COPYMEMBERINFO_API_LATEST = 1;

	public const int LOBBYDETAILS_GETATTRIBUTECOUNT_API_LATEST = 1;

	public const int LOBBYDETAILS_GETLOBBYOWNER_API_LATEST = 1;

	public const int LOBBYDETAILS_GETMEMBERATTRIBUTECOUNT_API_LATEST = 1;

	public const int LOBBYDETAILS_GETMEMBERBYINDEX_API_LATEST = 1;

	public const int LOBBYDETAILS_GETMEMBERCOUNT_API_LATEST = 1;

	public const int LOBBYDETAILS_INFO_API_LATEST = 3;

	public const int LOBBYDETAILS_MEMBERINFO_API_LATEST = 1;

	public const int LOBBYMODIFICATION_ADDATTRIBUTE_API_LATEST = 2;

	public const int LOBBYMODIFICATION_ADDMEMBERATTRIBUTE_API_LATEST = 2;

	public const int LOBBYMODIFICATION_MAX_ATTRIBUTES = 64;

	public const int LOBBYMODIFICATION_MAX_ATTRIBUTE_LENGTH = 64;

	public const int LOBBYMODIFICATION_REMOVEATTRIBUTE_API_LATEST = 1;

	public const int LOBBYMODIFICATION_REMOVEMEMBERATTRIBUTE_API_LATEST = 1;

	public const int LOBBYMODIFICATION_SETALLOWEDPLATFORMIDS_API_LATEST = 1;

	public const int LOBBYMODIFICATION_SETBUCKETID_API_LATEST = 1;

	public const int LOBBYMODIFICATION_SETINVITESALLOWED_API_LATEST = 1;

	public const int LOBBYMODIFICATION_SETMAXMEMBERS_API_LATEST = 1;

	public const int LOBBYMODIFICATION_SETPERMISSIONLEVEL_API_LATEST = 1;

	public const int LOBBYSEARCH_COPYSEARCHRESULTBYINDEX_API_LATEST = 1;

	public const int LOBBYSEARCH_FIND_API_LATEST = 1;

	public const int LOBBYSEARCH_GETSEARCHRESULTCOUNT_API_LATEST = 1;

	public const int LOBBYSEARCH_REMOVEPARAMETER_API_LATEST = 1;

	public const int LOBBYSEARCH_SETLOBBYID_API_LATEST = 1;

	public const int LOBBYSEARCH_SETMAXRESULTS_API_LATEST = 1;

	public const int LOBBYSEARCH_SETPARAMETER_API_LATEST = 1;

	public const int LOBBYSEARCH_SETTARGETUSERID_API_LATEST = 1;

	public const int LOCALRTCOPTIONS_API_LATEST = 2;

	public const int MAX_LOBBIES = 16;

	public const int MAX_LOBBYIDOVERRIDE_LENGTH = 60;

	public const int MAX_LOBBY_MEMBERS = 64;

	public const int MAX_SEARCH_RESULTS = 200;

	public const int MIN_LOBBYIDOVERRIDE_LENGTH = 4;

	public const int PARSECONNECTSTRING_API_LATEST = 1;

	public const int PARSECONNECTSTRING_BUFFER_SIZE = 256;

	public const int PROMOTEMEMBER_API_LATEST = 1;

	public const int QUERYINVITES_API_LATEST = 1;

	public const int REJECTINVITE_API_LATEST = 1;

	public static readonly Utf8String SEARCH_BUCKET_ID = "bucket";

	public static readonly Utf8String SEARCH_MINCURRENTMEMBERS = "mincurrentmembers";

	public static readonly Utf8String SEARCH_MINSLOTSAVAILABLE = "minslotsavailable";

	public const int SENDINVITE_API_LATEST = 1;

	public const int UPDATELOBBYMODIFICATION_API_LATEST = 1;

	public const int UPDATELOBBY_API_LATEST = 1;

	public LobbyInterface()
	{
	}

	public LobbyInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyJoinLobbyAccepted(ref AddNotifyJoinLobbyAcceptedOptions options, object clientData, OnJoinLobbyAcceptedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyJoinLobbyAcceptedOptionsInternal options2 = default(AddNotifyJoinLobbyAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyJoinLobbyAccepted(base.InnerHandle, ref options2, clientDataPointer, OnJoinLobbyAcceptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLeaveLobbyRequested(ref AddNotifyLeaveLobbyRequestedOptions options, object clientData, OnLeaveLobbyRequestedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLeaveLobbyRequestedOptionsInternal options2 = default(AddNotifyLeaveLobbyRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLeaveLobbyRequested(base.InnerHandle, ref options2, clientDataPointer, OnLeaveLobbyRequestedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteAccepted(ref AddNotifyLobbyInviteAcceptedOptions options, object clientData, OnLobbyInviteAcceptedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyInviteAcceptedOptionsInternal options2 = default(AddNotifyLobbyInviteAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteAccepted(base.InnerHandle, ref options2, clientDataPointer, OnLobbyInviteAcceptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteReceived(ref AddNotifyLobbyInviteReceivedOptions options, object clientData, OnLobbyInviteReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyInviteReceivedOptionsInternal options2 = default(AddNotifyLobbyInviteReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteReceived(base.InnerHandle, ref options2, clientDataPointer, OnLobbyInviteReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteRejected(ref AddNotifyLobbyInviteRejectedOptions options, object clientData, OnLobbyInviteRejectedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyInviteRejectedOptionsInternal options2 = default(AddNotifyLobbyInviteRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteRejected(base.InnerHandle, ref options2, clientDataPointer, OnLobbyInviteRejectedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyMemberStatusReceived(ref AddNotifyLobbyMemberStatusReceivedOptions options, object clientData, OnLobbyMemberStatusReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyMemberStatusReceivedOptionsInternal options2 = default(AddNotifyLobbyMemberStatusReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyMemberStatusReceived(base.InnerHandle, ref options2, clientDataPointer, OnLobbyMemberStatusReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyMemberUpdateReceived(ref AddNotifyLobbyMemberUpdateReceivedOptions options, object clientData, OnLobbyMemberUpdateReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyMemberUpdateReceivedOptionsInternal options2 = default(AddNotifyLobbyMemberUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(base.InnerHandle, ref options2, clientDataPointer, OnLobbyMemberUpdateReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLobbyUpdateReceived(ref AddNotifyLobbyUpdateReceivedOptions options, object clientData, OnLobbyUpdateReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyLobbyUpdateReceivedOptionsInternal options2 = default(AddNotifyLobbyUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyUpdateReceived(base.InnerHandle, ref options2, clientDataPointer, OnLobbyUpdateReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyRTCRoomConnectionChanged(ref AddNotifyRTCRoomConnectionChangedOptions options, object clientData, OnRTCRoomConnectionChangedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyRTCRoomConnectionChangedOptionsInternal options2 = default(AddNotifyRTCRoomConnectionChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifyRTCRoomConnectionChanged(base.InnerHandle, ref options2, clientDataPointer, OnRTCRoomConnectionChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifySendLobbyNativeInviteRequested(ref AddNotifySendLobbyNativeInviteRequestedOptions options, object clientData, OnSendLobbyNativeInviteRequestedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifySendLobbyNativeInviteRequestedOptionsInternal options2 = default(AddNotifySendLobbyNativeInviteRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Lobby_AddNotifySendLobbyNativeInviteRequested(base.InnerHandle, ref options2, clientDataPointer, OnSendLobbyNativeInviteRequestedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyLobbyDetailsHandle(ref CopyLobbyDetailsHandleOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleOptionsInternal options2 = default(CopyLobbyDetailsHandleOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandle(base.InnerHandle, ref options2, out outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public Result CopyLobbyDetailsHandleByInviteId(ref CopyLobbyDetailsHandleByInviteIdOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleByInviteIdOptionsInternal options2 = default(CopyLobbyDetailsHandleByInviteIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandleByInviteId(base.InnerHandle, ref options2, out outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public Result CopyLobbyDetailsHandleByUiEventId(ref CopyLobbyDetailsHandleByUiEventIdOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleByUiEventIdOptionsInternal options2 = default(CopyLobbyDetailsHandleByUiEventIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(base.InnerHandle, ref options2, out outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public void CreateLobby(ref CreateLobbyOptions options, object clientData, OnCreateLobbyCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		CreateLobbyOptionsInternal options2 = default(CreateLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_CreateLobby(base.InnerHandle, ref options2, clientDataPointer, OnCreateLobbyCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result CreateLobbySearch(ref CreateLobbySearchOptions options, out LobbySearch outLobbySearchHandle)
	{
		CreateLobbySearchOptionsInternal options2 = default(CreateLobbySearchOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbySearchHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CreateLobbySearch(base.InnerHandle, ref options2, out outLobbySearchHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbySearchHandle2, out outLobbySearchHandle);
		return result;
	}

	public void DestroyLobby(ref DestroyLobbyOptions options, object clientData, OnDestroyLobbyCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		DestroyLobbyOptionsInternal options2 = default(DestroyLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_DestroyLobby(base.InnerHandle, ref options2, clientDataPointer, OnDestroyLobbyCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result GetConnectString(ref GetConnectStringOptions options, out Utf8String outBuffer)
	{
		GetConnectStringOptionsInternal options2 = default(GetConnectStringOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetConnectString(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public uint GetInviteCount(ref GetInviteCountOptions options)
	{
		GetInviteCountOptionsInternal options2 = default(GetInviteCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Lobby_GetInviteCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetInviteIdByIndex(ref GetInviteIdByIndexOptions options, out Utf8String outBuffer)
	{
		GetInviteIdByIndexOptionsInternal options2 = default(GetInviteIdByIndexOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 65;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetInviteIdByIndex(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetRTCRoomName(ref GetRTCRoomNameOptions options, out Utf8String outBuffer)
	{
		GetRTCRoomNameOptionsInternal options2 = default(GetRTCRoomNameOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetRTCRoomName(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void HardMuteMember(ref HardMuteMemberOptions options, object clientData, OnHardMuteMemberCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		HardMuteMemberOptionsInternal options2 = default(HardMuteMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_HardMuteMember(base.InnerHandle, ref options2, clientDataPointer, OnHardMuteMemberCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result IsRTCRoomConnected(ref IsRTCRoomConnectedOptions options, out bool outIsConnected)
	{
		IsRTCRoomConnectedOptionsInternal options2 = default(IsRTCRoomConnectedOptionsInternal);
		options2.Set(ref options);
		int outIsConnected2 = 0;
		Result result = Bindings.EOS_Lobby_IsRTCRoomConnected(base.InnerHandle, ref options2, out outIsConnected2);
		Helper.Dispose(ref options2);
		Helper.Get(outIsConnected2, out outIsConnected);
		return result;
	}

	public void JoinLobby(ref JoinLobbyOptions options, object clientData, OnJoinLobbyCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		JoinLobbyOptionsInternal options2 = default(JoinLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_JoinLobby(base.InnerHandle, ref options2, clientDataPointer, OnJoinLobbyCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void JoinLobbyById(ref JoinLobbyByIdOptions options, object clientData, OnJoinLobbyByIdCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		JoinLobbyByIdOptionsInternal options2 = default(JoinLobbyByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_JoinLobbyById(base.InnerHandle, ref options2, clientDataPointer, OnJoinLobbyByIdCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void JoinRTCRoom(ref JoinRTCRoomOptions options, object clientData, OnJoinRTCRoomCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		JoinRTCRoomOptionsInternal options2 = default(JoinRTCRoomOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_JoinRTCRoom(base.InnerHandle, ref options2, clientDataPointer, OnJoinRTCRoomCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void KickMember(ref KickMemberOptions options, object clientData, OnKickMemberCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		KickMemberOptionsInternal options2 = default(KickMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_KickMember(base.InnerHandle, ref options2, clientDataPointer, OnKickMemberCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void LeaveLobby(ref LeaveLobbyOptions options, object clientData, OnLeaveLobbyCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LeaveLobbyOptionsInternal options2 = default(LeaveLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_LeaveLobby(base.InnerHandle, ref options2, clientDataPointer, OnLeaveLobbyCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void LeaveRTCRoom(ref LeaveRTCRoomOptions options, object clientData, OnLeaveRTCRoomCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LeaveRTCRoomOptionsInternal options2 = default(LeaveRTCRoomOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_LeaveRTCRoom(base.InnerHandle, ref options2, clientDataPointer, OnLeaveRTCRoomCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result ParseConnectString(ref ParseConnectStringOptions options, out Utf8String outBuffer)
	{
		ParseConnectStringOptionsInternal options2 = default(ParseConnectStringOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_ParseConnectString(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void PromoteMember(ref PromoteMemberOptions options, object clientData, OnPromoteMemberCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		PromoteMemberOptionsInternal options2 = default(PromoteMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_PromoteMember(base.InnerHandle, ref options2, clientDataPointer, OnPromoteMemberCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryInvites(ref QueryInvitesOptions options, object clientData, OnQueryInvitesCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryInvitesOptionsInternal options2 = default(QueryInvitesOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_QueryInvites(base.InnerHandle, ref options2, clientDataPointer, OnQueryInvitesCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		RejectInviteOptionsInternal options2 = default(RejectInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_RejectInvite(base.InnerHandle, ref options2, clientDataPointer, OnRejectInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyJoinLobbyAccepted(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyJoinLobbyAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLeaveLobbyRequested(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLeaveLobbyRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteAccepted(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteRejected(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyMemberStatusReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyMemberUpdateReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyUpdateReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRTCRoomConnectionChanged(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySendLobbyNativeInviteRequested(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		SendInviteOptionsInternal options2 = default(SendInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_SendInvite(base.InnerHandle, ref options2, clientDataPointer, OnSendInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void UpdateLobby(ref UpdateLobbyOptions options, object clientData, OnUpdateLobbyCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UpdateLobbyOptionsInternal options2 = default(UpdateLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Lobby_UpdateLobby(base.InnerHandle, ref options2, clientDataPointer, OnUpdateLobbyCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result UpdateLobbyModification(ref UpdateLobbyModificationOptions options, out LobbyModification outLobbyModificationHandle)
	{
		UpdateLobbyModificationOptionsInternal options2 = default(UpdateLobbyModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_UpdateLobbyModification(base.InnerHandle, ref options2, out outLobbyModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyModificationHandle2, out outLobbyModificationHandle);
		return result;
	}
}


using Epic.OnlineServices;

public struct LobbyInviteAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyInviteAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteAcceptedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyInviteAcceptedCallbackInfo other)
	{
		other = default(LobbyInviteAcceptedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_InviteId, out Utf8String to2);
		other.InviteId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_TargetUserId, out ProductUserId to4);
		other.TargetUserId = to4;
		Helper.Get(m_LobbyId, out Utf8String to5);
		other.LobbyId = to5;
	}
}


using Epic.OnlineServices;

public struct LobbyInviteReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyInviteReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyInviteReceivedCallbackInfo other)
	{
		other = default(LobbyInviteReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_InviteId, out Utf8String to2);
		other.InviteId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_TargetUserId, out ProductUserId to4);
		other.TargetUserId = to4;
	}
}


using Epic.OnlineServices;

public struct LobbyInviteRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyInviteRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteRejectedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyInviteRejectedCallbackInfo other)
	{
		other = default(LobbyInviteRejectedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_InviteId, out Utf8String to2);
		other.InviteId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_TargetUserId, out ProductUserId to4);
		other.TargetUserId = to4;
		Helper.Get(m_LobbyId, out Utf8String to5);
		other.LobbyId = to5;
	}
}


public enum LobbyMemberStatus
{
	Joined,
	Left,
	Disconnected,
	Kicked,
	Promoted,
	Closed
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyMemberStatusReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public LobbyMemberStatus CurrentStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyMemberStatusReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyMemberStatusReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	private LobbyMemberStatus m_CurrentStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyMemberStatusReceivedCallbackInfo other)
	{
		other = default(LobbyMemberStatusReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
		other.CurrentStatus = m_CurrentStatus;
	}
}


using Epic.OnlineServices;

public struct LobbyMemberUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyMemberUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyMemberUpdateReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyMemberUpdateReceivedCallbackInfo other)
	{
		other = default(LobbyMemberUpdateReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyModification : Handle
{
	public LobbyModification()
	{
	}

	public LobbyModification(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddAttribute(ref LobbyModificationAddAttributeOptions options)
	{
		LobbyModificationAddAttributeOptionsInternal options2 = default(LobbyModificationAddAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_AddAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result AddMemberAttribute(ref LobbyModificationAddMemberAttributeOptions options)
	{
		LobbyModificationAddMemberAttributeOptionsInternal options2 = default(LobbyModificationAddMemberAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_AddMemberAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbyModification_Release(base.InnerHandle);
	}

	public Result RemoveAttribute(ref LobbyModificationRemoveAttributeOptions options)
	{
		LobbyModificationRemoveAttributeOptionsInternal options2 = default(LobbyModificationRemoveAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_RemoveAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RemoveMemberAttribute(ref LobbyModificationRemoveMemberAttributeOptions options)
	{
		LobbyModificationRemoveMemberAttributeOptionsInternal options2 = default(LobbyModificationRemoveMemberAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_RemoveMemberAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetAllowedPlatformIds(ref LobbyModificationSetAllowedPlatformIdsOptions options)
	{
		LobbyModificationSetAllowedPlatformIdsOptionsInternal options2 = default(LobbyModificationSetAllowedPlatformIdsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetAllowedPlatformIds(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetBucketId(ref LobbyModificationSetBucketIdOptions options)
	{
		LobbyModificationSetBucketIdOptionsInternal options2 = default(LobbyModificationSetBucketIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetBucketId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetInvitesAllowed(ref LobbyModificationSetInvitesAllowedOptions options)
	{
		LobbyModificationSetInvitesAllowedOptionsInternal options2 = default(LobbyModificationSetInvitesAllowedOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetInvitesAllowed(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxMembers(ref LobbyModificationSetMaxMembersOptions options)
	{
		LobbyModificationSetMaxMembersOptionsInternal options2 = default(LobbyModificationSetMaxMembersOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetMaxMembers(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPermissionLevel(ref LobbyModificationSetPermissionLevelOptions options)
	{
		LobbyModificationSetPermissionLevelOptionsInternal options2 = default(LobbyModificationSetPermissionLevelOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetPermissionLevel(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationAddAttributeOptions
{
	public AttributeData? Attribute { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationAddAttributeOptionsInternal : ISettable<LobbyModificationAddAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Attribute;

	private LobbyAttributeVisibility m_Visibility;

	public void Set(ref LobbyModificationAddAttributeOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set<AttributeData, AttributeDataInternal>(other.Attribute, ref m_Attribute);
		m_Visibility = other.Visibility;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Attribute);
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationAddMemberAttributeOptions
{
	public AttributeData? Attribute { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationAddMemberAttributeOptionsInternal : ISettable<LobbyModificationAddMemberAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Attribute;

	private LobbyAttributeVisibility m_Visibility;

	public void Set(ref LobbyModificationAddMemberAttributeOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set<AttributeData, AttributeDataInternal>(other.Attribute, ref m_Attribute);
		m_Visibility = other.Visibility;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Attribute);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationRemoveAttributeOptions
{
	public Utf8String Key { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationRemoveAttributeOptionsInternal : ISettable<LobbyModificationRemoveAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public void Set(ref LobbyModificationRemoveAttributeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Key, ref m_Key);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationRemoveMemberAttributeOptions
{
	public Utf8String Key { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationRemoveMemberAttributeOptionsInternal : ISettable<LobbyModificationRemoveMemberAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public void Set(ref LobbyModificationRemoveMemberAttributeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Key, ref m_Key);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


public struct LobbyModificationSetAllowedPlatformIdsOptions
{
	public uint[] AllowedPlatformIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationSetAllowedPlatformIdsOptionsInternal : ISettable<LobbyModificationSetAllowedPlatformIdsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public void Set(ref LobbyModificationSetAllowedPlatformIdsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.AllowedPlatformIds, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationSetBucketIdOptions
{
	public Utf8String BucketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationSetBucketIdOptionsInternal : ISettable<LobbyModificationSetBucketIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_BucketId;

	public void Set(ref LobbyModificationSetBucketIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.BucketId, ref m_BucketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_BucketId);
	}
}


public struct LobbyModificationSetInvitesAllowedOptions
{
	public bool InvitesAllowed { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationSetInvitesAllowedOptionsInternal : ISettable<LobbyModificationSetInvitesAllowedOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_InvitesAllowed;

	public void Set(ref LobbyModificationSetInvitesAllowedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.InvitesAllowed, ref m_InvitesAllowed);
	}

	public void Dispose()
	{
	}
}


public struct LobbyModificationSetMaxMembersOptions
{
	public uint MaxMembers { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationSetMaxMembersOptionsInternal : ISettable<LobbyModificationSetMaxMembersOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxMembers;

	public void Set(ref LobbyModificationSetMaxMembersOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_MaxMembers = other.MaxMembers;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationSetPermissionLevelOptions
{
	public LobbyPermissionLevel PermissionLevel { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyModificationSetPermissionLevelOptionsInternal : ISettable<LobbyModificationSetPermissionLevelOptions>, IDisposable
{
	private int m_ApiVersion;

	private LobbyPermissionLevel m_PermissionLevel;

	public void Set(ref LobbyModificationSetPermissionLevelOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_PermissionLevel = other.PermissionLevel;
	}

	public void Dispose()
	{
	}
}


public enum LobbyPermissionLevel
{
	Publicadvertised,
	Joinviapresence,
	Inviteonly
}


public enum LobbyRTCRoomJoinActionType
{
	AutomaticJoin,
	ManualJoin
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbySearch : Handle
{
	public LobbySearch()
	{
	}

	public LobbySearch(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopySearchResultByIndex(ref LobbySearchCopySearchResultByIndexOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		LobbySearchCopySearchResultByIndexOptionsInternal options2 = default(LobbySearchCopySearchResultByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbySearch_CopySearchResultByIndex(base.InnerHandle, ref options2, out outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public void Find(ref LobbySearchFindOptions options, object clientData, LobbySearchOnFindCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LobbySearchFindOptionsInternal options2 = default(LobbySearchFindOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_LobbySearch_Find(base.InnerHandle, ref options2, clientDataPointer, LobbySearchOnFindCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public uint GetSearchResultCount(ref LobbySearchGetSearchResultCountOptions options)
	{
		LobbySearchGetSearchResultCountOptionsInternal options2 = default(LobbySearchGetSearchResultCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbySearch_GetSearchResultCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbySearch_Release(base.InnerHandle);
	}

	public Result RemoveParameter(ref LobbySearchRemoveParameterOptions options)
	{
		LobbySearchRemoveParameterOptionsInternal options2 = default(LobbySearchRemoveParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_RemoveParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetLobbyId(ref LobbySearchSetLobbyIdOptions options)
	{
		LobbySearchSetLobbyIdOptionsInternal options2 = default(LobbySearchSetLobbyIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetLobbyId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxResults(ref LobbySearchSetMaxResultsOptions options)
	{
		LobbySearchSetMaxResultsOptionsInternal options2 = default(LobbySearchSetMaxResultsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetMaxResults(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetParameter(ref LobbySearchSetParameterOptions options)
	{
		LobbySearchSetParameterOptionsInternal options2 = default(LobbySearchSetParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetTargetUserId(ref LobbySearchSetTargetUserIdOptions options)
	{
		LobbySearchSetTargetUserIdOptionsInternal options2 = default(LobbySearchSetTargetUserIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetTargetUserId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


public struct LobbySearchCopySearchResultByIndexOptions
{
	public uint LobbyIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchCopySearchResultByIndexOptionsInternal : ISettable<LobbySearchCopySearchResultByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LobbyIndex;

	public void Set(ref LobbySearchCopySearchResultByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_LobbyIndex = other.LobbyIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbySearchFindCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchFindCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbySearchFindCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbySearchFindCallbackInfo other)
	{
		other = default(LobbySearchFindCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices;

public struct LobbySearchFindOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchFindOptionsInternal : ISettable<LobbySearchFindOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref LobbySearchFindOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbySearchGetSearchResultCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchGetSearchResultCountOptionsInternal : ISettable<LobbySearchGetSearchResultCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbySearchGetSearchResultCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public delegate void LobbySearchOnFindCallback(ref LobbySearchFindCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void LobbySearchOnFindCallbackInternal(ref LobbySearchFindCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class LobbySearchOnFindCallbackInternalImplementation
{
	private static LobbySearchOnFindCallbackInternal s_Delegate;

	public static LobbySearchOnFindCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(LobbySearchOnFindCallbackInternal))]
	public static void EntryPoint(ref LobbySearchFindCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LobbySearchFindCallbackInfoInternal, LobbySearchOnFindCallback, LobbySearchFindCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct LobbySearchRemoveParameterOptions
{
	public Utf8String Key { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchRemoveParameterOptionsInternal : ISettable<LobbySearchRemoveParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private ComparisonOp m_ComparisonOp;

	public void Set(ref LobbySearchRemoveParameterOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Key, ref m_Key);
		m_ComparisonOp = other.ComparisonOp;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct LobbySearchSetLobbyIdOptions
{
	public Utf8String LobbyId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchSetLobbyIdOptionsInternal : ISettable<LobbySearchSetLobbyIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	public void Set(ref LobbySearchSetLobbyIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
	}
}


public struct LobbySearchSetMaxResultsOptions
{
	public uint MaxResults { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchSetMaxResultsOptionsInternal : ISettable<LobbySearchSetMaxResultsOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxResults;

	public void Set(ref LobbySearchSetMaxResultsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_MaxResults = other.MaxResults;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbySearchSetParameterOptions
{
	public AttributeData? Parameter { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchSetParameterOptionsInternal : ISettable<LobbySearchSetParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Parameter;

	private ComparisonOp m_ComparisonOp;

	public void Set(ref LobbySearchSetParameterOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<AttributeData, AttributeDataInternal>(other.Parameter, ref m_Parameter);
		m_ComparisonOp = other.ComparisonOp;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Parameter);
	}
}


using Epic.OnlineServices;

public struct LobbySearchSetTargetUserIdOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbySearchSetTargetUserIdOptionsInternal : ISettable<LobbySearchSetTargetUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public void Set(ref LobbySearchSetTargetUserIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct LobbyUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LobbyUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyUpdateReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LobbyUpdateReceivedCallbackInfo other)
	{
		other = default(LobbyUpdateReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using System;

public struct LocalRTCOptions
{
	public uint Flags { get; set; }

	public bool UseManualAudioInput { get; set; }

	public bool UseManualAudioOutput { get; set; }

	public bool LocalAudioDeviceInputStartsMuted { get; set; }

	public IntPtr Reserved { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct LocalRTCOptionsInternal : ISettable<LocalRTCOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_Flags;

	private int m_UseManualAudioInput;

	private int m_UseManualAudioOutput;

	private int m_LocalAudioDeviceInputStartsMuted;

	private IntPtr m_Reserved;

	public void Set(ref LocalRTCOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		m_Flags = other.Flags;
		Helper.Set(other.UseManualAudioInput, ref m_UseManualAudioInput);
		Helper.Set(other.UseManualAudioOutput, ref m_UseManualAudioOutput);
		Helper.Set(other.LocalAudioDeviceInputStartsMuted, ref m_LocalAudioDeviceInputStartsMuted);
		m_Reserved = other.Reserved;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Reserved);
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnCreateLobbyCallback(ref CreateLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateLobbyCallbackInternal(ref CreateLobbyCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnCreateLobbyCallbackInternalImplementation
{
	private static OnCreateLobbyCallbackInternal s_Delegate;

	public static OnCreateLobbyCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateLobbyCallbackInternal))]
	public static void EntryPoint(ref CreateLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateLobbyCallbackInfoInternal, OnCreateLobbyCallback, CreateLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnDestroyLobbyCallback(ref DestroyLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDestroyLobbyCallbackInternal(ref DestroyLobbyCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnDestroyLobbyCallbackInternalImplementation
{
	private static OnDestroyLobbyCallbackInternal s_Delegate;

	public static OnDestroyLobbyCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDestroyLobbyCallbackInternal))]
	public static void EntryPoint(ref DestroyLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DestroyLobbyCallbackInfoInternal, OnDestroyLobbyCallback, DestroyLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnHardMuteMemberCallback(ref HardMuteMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnHardMuteMemberCallbackInternal(ref HardMuteMemberCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnHardMuteMemberCallbackInternalImplementation
{
	private static OnHardMuteMemberCallbackInternal s_Delegate;

	public static OnHardMuteMemberCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnHardMuteMemberCallbackInternal))]
	public static void EntryPoint(ref HardMuteMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<HardMuteMemberCallbackInfoInternal, OnHardMuteMemberCallback, HardMuteMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyAcceptedCallback(ref JoinLobbyAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyAcceptedCallbackInternal(ref JoinLobbyAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnJoinLobbyAcceptedCallbackInternalImplementation
{
	private static OnJoinLobbyAcceptedCallbackInternal s_Delegate;

	public static OnJoinLobbyAcceptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyAcceptedCallbackInternal))]
	public static void EntryPoint(ref JoinLobbyAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<JoinLobbyAcceptedCallbackInfoInternal, OnJoinLobbyAcceptedCallback, JoinLobbyAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyByIdCallback(ref JoinLobbyByIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyByIdCallbackInternal(ref JoinLobbyByIdCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnJoinLobbyByIdCallbackInternalImplementation
{
	private static OnJoinLobbyByIdCallbackInternal s_Delegate;

	public static OnJoinLobbyByIdCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyByIdCallbackInternal))]
	public static void EntryPoint(ref JoinLobbyByIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinLobbyByIdCallbackInfoInternal, OnJoinLobbyByIdCallback, JoinLobbyByIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyCallback(ref JoinLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyCallbackInternal(ref JoinLobbyCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnJoinLobbyCallbackInternalImplementation
{
	private static OnJoinLobbyCallbackInternal s_Delegate;

	public static OnJoinLobbyCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyCallbackInternal))]
	public static void EntryPoint(ref JoinLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinLobbyCallbackInfoInternal, OnJoinLobbyCallback, JoinLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnJoinRTCRoomCallback(ref JoinRTCRoomCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinRTCRoomCallbackInternal(ref JoinRTCRoomCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnJoinRTCRoomCallbackInternalImplementation
{
	private static OnJoinRTCRoomCallbackInternal s_Delegate;

	public static OnJoinRTCRoomCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinRTCRoomCallbackInternal))]
	public static void EntryPoint(ref JoinRTCRoomCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinRTCRoomCallbackInfoInternal, OnJoinRTCRoomCallback, JoinRTCRoomCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnKickMemberCallback(ref KickMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnKickMemberCallbackInternal(ref KickMemberCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnKickMemberCallbackInternalImplementation
{
	private static OnKickMemberCallbackInternal s_Delegate;

	public static OnKickMemberCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnKickMemberCallbackInternal))]
	public static void EntryPoint(ref KickMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<KickMemberCallbackInfoInternal, OnKickMemberCallback, KickMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLeaveLobbyCallback(ref LeaveLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveLobbyCallbackInternal(ref LeaveLobbyCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLeaveLobbyCallbackInternalImplementation
{
	private static OnLeaveLobbyCallbackInternal s_Delegate;

	public static OnLeaveLobbyCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveLobbyCallbackInternal))]
	public static void EntryPoint(ref LeaveLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LeaveLobbyCallbackInfoInternal, OnLeaveLobbyCallback, LeaveLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLeaveLobbyRequestedCallback(ref LeaveLobbyRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveLobbyRequestedCallbackInternal(ref LeaveLobbyRequestedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLeaveLobbyRequestedCallbackInternalImplementation
{
	private static OnLeaveLobbyRequestedCallbackInternal s_Delegate;

	public static OnLeaveLobbyRequestedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveLobbyRequestedCallbackInternal))]
	public static void EntryPoint(ref LeaveLobbyRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LeaveLobbyRequestedCallbackInfoInternal, OnLeaveLobbyRequestedCallback, LeaveLobbyRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLeaveRTCRoomCallback(ref LeaveRTCRoomCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveRTCRoomCallbackInternal(ref LeaveRTCRoomCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLeaveRTCRoomCallbackInternalImplementation
{
	private static OnLeaveRTCRoomCallbackInternal s_Delegate;

	public static OnLeaveRTCRoomCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveRTCRoomCallbackInternal))]
	public static void EntryPoint(ref LeaveRTCRoomCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LeaveRTCRoomCallbackInfoInternal, OnLeaveRTCRoomCallback, LeaveRTCRoomCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteAcceptedCallback(ref LobbyInviteAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteAcceptedCallbackInternal(ref LobbyInviteAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyInviteAcceptedCallbackInternalImplementation
{
	private static OnLobbyInviteAcceptedCallbackInternal s_Delegate;

	public static OnLobbyInviteAcceptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteAcceptedCallbackInternal))]
	public static void EntryPoint(ref LobbyInviteAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteAcceptedCallbackInfoInternal, OnLobbyInviteAcceptedCallback, LobbyInviteAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteReceivedCallback(ref LobbyInviteReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteReceivedCallbackInternal(ref LobbyInviteReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyInviteReceivedCallbackInternalImplementation
{
	private static OnLobbyInviteReceivedCallbackInternal s_Delegate;

	public static OnLobbyInviteReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteReceivedCallbackInternal))]
	public static void EntryPoint(ref LobbyInviteReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteReceivedCallbackInfoInternal, OnLobbyInviteReceivedCallback, LobbyInviteReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteRejectedCallback(ref LobbyInviteRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteRejectedCallbackInternal(ref LobbyInviteRejectedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyInviteRejectedCallbackInternalImplementation
{
	private static OnLobbyInviteRejectedCallbackInternal s_Delegate;

	public static OnLobbyInviteRejectedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteRejectedCallbackInternal))]
	public static void EntryPoint(ref LobbyInviteRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteRejectedCallbackInfoInternal, OnLobbyInviteRejectedCallback, LobbyInviteRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyMemberStatusReceivedCallback(ref LobbyMemberStatusReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyMemberStatusReceivedCallbackInternal(ref LobbyMemberStatusReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyMemberStatusReceivedCallbackInternalImplementation
{
	private static OnLobbyMemberStatusReceivedCallbackInternal s_Delegate;

	public static OnLobbyMemberStatusReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyMemberStatusReceivedCallbackInternal))]
	public static void EntryPoint(ref LobbyMemberStatusReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyMemberStatusReceivedCallbackInfoInternal, OnLobbyMemberStatusReceivedCallback, LobbyMemberStatusReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyMemberUpdateReceivedCallback(ref LobbyMemberUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyMemberUpdateReceivedCallbackInternal(ref LobbyMemberUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyMemberUpdateReceivedCallbackInternalImplementation
{
	private static OnLobbyMemberUpdateReceivedCallbackInternal s_Delegate;

	public static OnLobbyMemberUpdateReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyMemberUpdateReceivedCallbackInternal))]
	public static void EntryPoint(ref LobbyMemberUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyMemberUpdateReceivedCallbackInfoInternal, OnLobbyMemberUpdateReceivedCallback, LobbyMemberUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyUpdateReceivedCallback(ref LobbyUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyUpdateReceivedCallbackInternal(ref LobbyUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnLobbyUpdateReceivedCallbackInternalImplementation
{
	private static OnLobbyUpdateReceivedCallbackInternal s_Delegate;

	public static OnLobbyUpdateReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyUpdateReceivedCallbackInternal))]
	public static void EntryPoint(ref LobbyUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyUpdateReceivedCallbackInfoInternal, OnLobbyUpdateReceivedCallback, LobbyUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnPromoteMemberCallback(ref PromoteMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPromoteMemberCallbackInternal(ref PromoteMemberCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnPromoteMemberCallbackInternalImplementation
{
	private static OnPromoteMemberCallbackInternal s_Delegate;

	public static OnPromoteMemberCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPromoteMemberCallbackInternal))]
	public static void EntryPoint(ref PromoteMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<PromoteMemberCallbackInfoInternal, OnPromoteMemberCallback, PromoteMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnQueryInvitesCallback(ref QueryInvitesCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryInvitesCallbackInternal(ref QueryInvitesCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnQueryInvitesCallbackInternalImplementation
{
	private static OnQueryInvitesCallbackInternal s_Delegate;

	public static OnQueryInvitesCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryInvitesCallbackInternal))]
	public static void EntryPoint(ref QueryInvitesCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryInvitesCallbackInfoInternal, OnQueryInvitesCallback, QueryInvitesCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnRejectInviteCallback(ref RejectInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectInviteCallbackInternal(ref RejectInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnRejectInviteCallbackInternalImplementation
{
	private static OnRejectInviteCallbackInternal s_Delegate;

	public static OnRejectInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectInviteCallbackInternal))]
	public static void EntryPoint(ref RejectInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectInviteCallbackInfoInternal, OnRejectInviteCallback, RejectInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnRTCRoomConnectionChangedCallback(ref RTCRoomConnectionChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRTCRoomConnectionChangedCallbackInternal(ref RTCRoomConnectionChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnRTCRoomConnectionChangedCallbackInternalImplementation
{
	private static OnRTCRoomConnectionChangedCallbackInternal s_Delegate;

	public static OnRTCRoomConnectionChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRTCRoomConnectionChangedCallbackInternal))]
	public static void EntryPoint(ref RTCRoomConnectionChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RTCRoomConnectionChangedCallbackInfoInternal, OnRTCRoomConnectionChangedCallback, RTCRoomConnectionChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnSendInviteCallback(ref SendInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendInviteCallbackInternal(ref SendInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnSendInviteCallbackInternalImplementation
{
	private static OnSendInviteCallbackInternal s_Delegate;

	public static OnSendInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendInviteCallbackInternal))]
	public static void EntryPoint(ref SendInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendInviteCallbackInfoInternal, OnSendInviteCallback, SendInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnSendLobbyNativeInviteRequestedCallback(ref SendLobbyNativeInviteRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendLobbyNativeInviteRequestedCallbackInternal(ref SendLobbyNativeInviteRequestedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnSendLobbyNativeInviteRequestedCallbackInternalImplementation
{
	private static OnSendLobbyNativeInviteRequestedCallbackInternal s_Delegate;

	public static OnSendLobbyNativeInviteRequestedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendLobbyNativeInviteRequestedCallbackInternal))]
	public static void EntryPoint(ref SendLobbyNativeInviteRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SendLobbyNativeInviteRequestedCallbackInfoInternal, OnSendLobbyNativeInviteRequestedCallback, SendLobbyNativeInviteRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnUpdateLobbyCallback(ref UpdateLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateLobbyCallbackInternal(ref UpdateLobbyCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal static class OnUpdateLobbyCallbackInternalImplementation
{
	private static OnUpdateLobbyCallbackInternal s_Delegate;

	public static OnUpdateLobbyCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateLobbyCallbackInternal))]
	public static void EntryPoint(ref UpdateLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateLobbyCallbackInfoInternal, OnUpdateLobbyCallback, UpdateLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct ParseConnectStringOptions
{
	public Utf8String ConnectString { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct ParseConnectStringOptionsInternal : ISettable<ParseConnectStringOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ConnectString;

	public void Set(ref ParseConnectStringOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.ConnectString, ref m_ConnectString);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ConnectString);
	}
}


using Epic.OnlineServices;

public struct PromoteMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct PromoteMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<PromoteMemberCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out PromoteMemberCallbackInfo other)
	{
		other = default(PromoteMemberCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct PromoteMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct PromoteMemberOptionsInternal : ISettable<PromoteMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref PromoteMemberOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct QueryInvitesCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct QueryInvitesCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryInvitesCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryInvitesCallbackInfo other)
	{
		other = default(QueryInvitesCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryInvitesOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct QueryInvitesOptionsInternal : ISettable<QueryInvitesOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryInvitesOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct RejectInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct RejectInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RejectInviteCallbackInfo other)
	{
		other = default(RejectInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_InviteId, out Utf8String to2);
		other.InviteId = to2;
	}
}


using Epic.OnlineServices;

public struct RejectInviteOptions
{
	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct RejectInviteOptionsInternal : ISettable<RejectInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	public void Set(ref RejectInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.InviteId, ref m_InviteId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct RTCRoomConnectionChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool IsConnected { get; set; }

	public Result DisconnectReason { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct RTCRoomConnectionChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RTCRoomConnectionChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private int m_IsConnected;

	private Result m_DisconnectReason;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RTCRoomConnectionChangedCallbackInfo other)
	{
		other = default(RTCRoomConnectionChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_IsConnected, out bool to4);
		other.IsConnected = to4;
		other.DisconnectReason = m_DisconnectReason;
	}
}


using Epic.OnlineServices;

public struct SendInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct SendInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendInviteCallbackInfo other)
	{
		other = default(SendInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct SendInviteOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct SendInviteOptionsInternal : ISettable<SendInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref SendInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LobbyId, ref m_LobbyId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct SendLobbyNativeInviteRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong UiEventId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String TargetNativeAccountType { get; set; }

	public Utf8String TargetUserNativeAccountId { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct SendLobbyNativeInviteRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendLobbyNativeInviteRequestedCallbackInfo>
{
	private IntPtr m_ClientData;

	private ulong m_UiEventId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetNativeAccountType;

	private IntPtr m_TargetUserNativeAccountId;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendLobbyNativeInviteRequestedCallbackInfo other)
	{
		other = default(SendLobbyNativeInviteRequestedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.UiEventId = m_UiEventId;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetNativeAccountType, out Utf8String to3);
		other.TargetNativeAccountType = to3;
		Helper.Get(m_TargetUserNativeAccountId, out Utf8String to4);
		other.TargetUserNativeAccountId = to4;
		Helper.Get(m_LobbyId, out Utf8String to5);
		other.LobbyId = to5;
	}
}


using Epic.OnlineServices;

public struct UpdateLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct UpdateLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateLobbyCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UpdateLobbyCallbackInfo other)
	{
		other = default(UpdateLobbyCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LobbyId, out Utf8String to2);
		other.LobbyId = to2;
	}
}


using Epic.OnlineServices;

public struct UpdateLobbyModificationOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct UpdateLobbyModificationOptionsInternal : ISettable<UpdateLobbyModificationOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public void Set(ref UpdateLobbyModificationOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.LobbyId, ref m_LobbyId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices.Lobby;

public struct UpdateLobbyOptions
{
	public LobbyModification LobbyModificationHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

internal struct UpdateLobbyOptionsInternal : ISettable<UpdateLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyModificationHandle;

	public void Set(ref UpdateLobbyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LobbyModificationHandle, ref m_LobbyModificationHandle);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyModificationHandle);
	}
}


public struct CopyLeaderboardDefinitionByIndexOptions
{
	public uint LeaderboardIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardDefinitionByIndexOptionsInternal : ISettable<CopyLeaderboardDefinitionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardIndex;

	public void Set(ref CopyLeaderboardDefinitionByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_LeaderboardIndex = other.LeaderboardIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardDefinitionByLeaderboardIdOptions
{
	public Utf8String LeaderboardId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal : ISettable<CopyLeaderboardDefinitionByLeaderboardIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	public void Set(ref CopyLeaderboardDefinitionByLeaderboardIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.LeaderboardId, ref m_LeaderboardId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LeaderboardId);
	}
}


public struct CopyLeaderboardRecordByIndexOptions
{
	public uint LeaderboardRecordIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardRecordByIndexOptionsInternal : ISettable<CopyLeaderboardRecordByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardRecordIndex;

	public void Set(ref CopyLeaderboardRecordByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		m_LeaderboardRecordIndex = other.LeaderboardRecordIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardRecordByUserIdOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardRecordByUserIdOptionsInternal : ISettable<CopyLeaderboardRecordByUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public void Set(ref CopyLeaderboardRecordByUserIdOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.UserId, ref m_UserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardUserScoreByIndexOptions
{
	public uint LeaderboardUserScoreIndex { get; set; }

	public Utf8String StatName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardUserScoreByIndexOptionsInternal : ISettable<CopyLeaderboardUserScoreByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardUserScoreIndex;

	private IntPtr m_StatName;

	public void Set(ref CopyLeaderboardUserScoreByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_LeaderboardUserScoreIndex = other.LeaderboardUserScoreIndex;
		Helper.Set(other.StatName, ref m_StatName);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardUserScoreByUserIdOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String StatName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct CopyLeaderboardUserScoreByUserIdOptionsInternal : ISettable<CopyLeaderboardUserScoreByUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_StatName;

	public void Set(ref CopyLeaderboardUserScoreByUserIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
		Helper.Set(other.StatName, ref m_StatName);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_StatName);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct Definition
{
	public Utf8String LeaderboardId { get; set; }

	public Utf8String StatName { get; set; }

	public LeaderboardAggregation Aggregation { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct DefinitionInternal : IGettable<Definition>
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	private IntPtr m_StatName;

	private LeaderboardAggregation m_Aggregation;

	private long m_StartTime;

	private long m_EndTime;

	public void Get(out Definition other)
	{
		other = default(Definition);
		Helper.Get(m_LeaderboardId, out Utf8String to);
		other.LeaderboardId = to;
		Helper.Get(m_StatName, out Utf8String to2);
		other.StatName = to2;
		other.Aggregation = m_Aggregation;
		Helper.Get(m_StartTime, out DateTimeOffset? to3);
		other.StartTime = to3;
		Helper.Get(m_EndTime, out DateTimeOffset? to4);
		other.EndTime = to4;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetLeaderboardDefinitionCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct GetLeaderboardDefinitionCountOptionsInternal : ISettable<GetLeaderboardDefinitionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetLeaderboardDefinitionCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetLeaderboardRecordCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct GetLeaderboardRecordCountOptionsInternal : ISettable<GetLeaderboardRecordCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetLeaderboardRecordCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct GetLeaderboardUserScoreCountOptions
{
	public Utf8String StatName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct GetLeaderboardUserScoreCountOptionsInternal : ISettable<GetLeaderboardUserScoreCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_StatName;

	public void Set(ref GetLeaderboardUserScoreCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.StatName, ref m_StatName);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}
}


public enum LeaderboardAggregation
{
	Min,
	Max,
	Sum,
	Latest
}


using Epic.OnlineServices;

public struct LeaderboardRecord
{
	public ProductUserId UserId { get; set; }

	public uint Rank { get; set; }

	public int Score { get; set; }

	public Utf8String UserDisplayName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct LeaderboardRecordInternal : IGettable<LeaderboardRecord>
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_Rank;

	private int m_Score;

	private IntPtr m_UserDisplayName;

	public void Get(out LeaderboardRecord other)
	{
		other = default(LeaderboardRecord);
		Helper.Get(m_UserId, out ProductUserId to);
		other.UserId = to;
		other.Rank = m_Rank;
		other.Score = m_Score;
		Helper.Get(m_UserDisplayName, out Utf8String to2);
		other.UserDisplayName = to2;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public sealed class LeaderboardsInterface : Handle
{
	public const int COPYLEADERBOARDDEFINITIONBYINDEX_API_LATEST = 1;

	public const int COPYLEADERBOARDDEFINITIONBYLEADERBOARDID_API_LATEST = 1;

	public const int COPYLEADERBOARDRECORDBYINDEX_API_LATEST = 2;

	public const int COPYLEADERBOARDRECORDBYUSERID_API_LATEST = 2;

	public const int COPYLEADERBOARDUSERSCOREBYINDEX_API_LATEST = 1;

	public const int COPYLEADERBOARDUSERSCOREBYUSERID_API_LATEST = 1;

	public const int DEFINITION_API_LATEST = 1;

	public const int GETLEADERBOARDDEFINITIONCOUNT_API_LATEST = 1;

	public const int GETLEADERBOARDRECORDCOUNT_API_LATEST = 1;

	public const int GETLEADERBOARDUSERSCORECOUNT_API_LATEST = 1;

	public const int LEADERBOARDRECORD_API_LATEST = 2;

	public const int LEADERBOARDUSERSCORE_API_LATEST = 1;

	public const int QUERYLEADERBOARDDEFINITIONS_API_LATEST = 2;

	public const int QUERYLEADERBOARDRANKS_API_LATEST = 2;

	public const int QUERYLEADERBOARDUSERSCORES_API_LATEST = 2;

	public const int TIME_UNDEFINED = -1;

	public const int USERSCORESQUERYSTATINFO_API_LATEST = 1;

	public LeaderboardsInterface()
	{
	}

	public LeaderboardsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyLeaderboardDefinitionByIndex(ref CopyLeaderboardDefinitionByIndexOptions options, out Definition? outLeaderboardDefinition)
	{
		CopyLeaderboardDefinitionByIndexOptionsInternal options2 = default(CopyLeaderboardDefinitionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(base.InnerHandle, ref options2, out outLeaderboardDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinition2, out outLeaderboardDefinition);
		if (outLeaderboardDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinition2);
		}
		return result;
	}

	public Result CopyLeaderboardDefinitionByLeaderboardId(ref CopyLeaderboardDefinitionByLeaderboardIdOptions options, out Definition? outLeaderboardDefinition)
	{
		CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options2 = default(CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(base.InnerHandle, ref options2, out outLeaderboardDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinition2, out outLeaderboardDefinition);
		if (outLeaderboardDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinition2);
		}
		return result;
	}

	public Result CopyLeaderboardRecordByIndex(ref CopyLeaderboardRecordByIndexOptions options, out LeaderboardRecord? outLeaderboardRecord)
	{
		CopyLeaderboardRecordByIndexOptionsInternal options2 = default(CopyLeaderboardRecordByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardRecord2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByIndex(base.InnerHandle, ref options2, out outLeaderboardRecord2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecord2, out outLeaderboardRecord);
		if (outLeaderboardRecord2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecord2);
		}
		return result;
	}

	public Result CopyLeaderboardRecordByUserId(ref CopyLeaderboardRecordByUserIdOptions options, out LeaderboardRecord? outLeaderboardRecord)
	{
		CopyLeaderboardRecordByUserIdOptionsInternal options2 = default(CopyLeaderboardRecordByUserIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardRecord2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByUserId(base.InnerHandle, ref options2, out outLeaderboardRecord2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecord2, out outLeaderboardRecord);
		if (outLeaderboardRecord2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecord2);
		}
		return result;
	}

	public Result CopyLeaderboardUserScoreByIndex(ref CopyLeaderboardUserScoreByIndexOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
	{
		CopyLeaderboardUserScoreByIndexOptionsInternal options2 = default(CopyLeaderboardUserScoreByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardUserScore2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(base.InnerHandle, ref options2, out outLeaderboardUserScore2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScore2, out outLeaderboardUserScore);
		if (outLeaderboardUserScore2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScore2);
		}
		return result;
	}

	public Result CopyLeaderboardUserScoreByUserId(ref CopyLeaderboardUserScoreByUserIdOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
	{
		CopyLeaderboardUserScoreByUserIdOptionsInternal options2 = default(CopyLeaderboardUserScoreByUserIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardUserScore2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(base.InnerHandle, ref options2, out outLeaderboardUserScore2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScore2, out outLeaderboardUserScore);
		if (outLeaderboardUserScore2 != IntPtr.Zero)
		{
			Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScore2);
		}
		return result;
	}

	public uint GetLeaderboardDefinitionCount(ref GetLeaderboardDefinitionCountOptions options)
	{
		GetLeaderboardDefinitionCountOptionsInternal options2 = default(GetLeaderboardDefinitionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardDefinitionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLeaderboardRecordCount(ref GetLeaderboardRecordCountOptions options)
	{
		GetLeaderboardRecordCountOptionsInternal options2 = default(GetLeaderboardRecordCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardRecordCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLeaderboardUserScoreCount(ref GetLeaderboardUserScoreCountOptions options)
	{
		GetLeaderboardUserScoreCountOptionsInternal options2 = default(GetLeaderboardUserScoreCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardUserScoreCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryLeaderboardDefinitions(ref QueryLeaderboardDefinitionsOptions options, object clientData, OnQueryLeaderboardDefinitionsCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryLeaderboardDefinitionsOptionsInternal options2 = default(QueryLeaderboardDefinitionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Leaderboards_QueryLeaderboardDefinitions(base.InnerHandle, ref options2, clientDataPointer, OnQueryLeaderboardDefinitionsCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryLeaderboardRanks(ref QueryLeaderboardRanksOptions options, object clientData, OnQueryLeaderboardRanksCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryLeaderboardRanksOptionsInternal options2 = default(QueryLeaderboardRanksOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Leaderboards_QueryLeaderboardRanks(base.InnerHandle, ref options2, clientDataPointer, OnQueryLeaderboardRanksCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryLeaderboardUserScores(ref QueryLeaderboardUserScoresOptions options, object clientData, OnQueryLeaderboardUserScoresCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryLeaderboardUserScoresOptionsInternal options2 = default(QueryLeaderboardUserScoresOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Leaderboards_QueryLeaderboardUserScores(base.InnerHandle, ref options2, clientDataPointer, OnQueryLeaderboardUserScoresCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using Epic.OnlineServices;

public struct LeaderboardUserScore
{
	public ProductUserId UserId { get; set; }

	public int Score { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct LeaderboardUserScoreInternal : IGettable<LeaderboardUserScore>
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private int m_Score;

	public void Get(out LeaderboardUserScore other)
	{
		other = default(LeaderboardUserScore);
		Helper.Get(m_UserId, out ProductUserId to);
		other.UserId = to;
		other.Score = m_Score;
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardDefinitionsCompleteCallback(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardDefinitionsCompleteCallbackInternal(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal static class OnQueryLeaderboardDefinitionsCompleteCallbackInternalImplementation
{
	private static OnQueryLeaderboardDefinitionsCompleteCallbackInternal s_Delegate;

	public static OnQueryLeaderboardDefinitionsCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardDefinitionsCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal, OnQueryLeaderboardDefinitionsCompleteCallback, OnQueryLeaderboardDefinitionsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnQueryLeaderboardDefinitionsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardDefinitionsCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryLeaderboardDefinitionsCompleteCallbackInfo other)
	{
		other = default(OnQueryLeaderboardDefinitionsCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardRanksCompleteCallback(ref OnQueryLeaderboardRanksCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardRanksCompleteCallbackInternal(ref OnQueryLeaderboardRanksCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal static class OnQueryLeaderboardRanksCompleteCallbackInternalImplementation
{
	private static OnQueryLeaderboardRanksCompleteCallbackInternal s_Delegate;

	public static OnQueryLeaderboardRanksCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardRanksCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryLeaderboardRanksCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardRanksCompleteCallbackInfoInternal, OnQueryLeaderboardRanksCompleteCallback, OnQueryLeaderboardRanksCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnQueryLeaderboardRanksCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LeaderboardId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct OnQueryLeaderboardRanksCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardRanksCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LeaderboardId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryLeaderboardRanksCompleteCallbackInfo other)
	{
		other = default(OnQueryLeaderboardRanksCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LeaderboardId, out Utf8String to2);
		other.LeaderboardId = to2;
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardUserScoresCompleteCallback(ref OnQueryLeaderboardUserScoresCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardUserScoresCompleteCallbackInternal(ref OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal static class OnQueryLeaderboardUserScoresCompleteCallbackInternalImplementation
{
	private static OnQueryLeaderboardUserScoresCompleteCallbackInternal s_Delegate;

	public static OnQueryLeaderboardUserScoresCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardUserScoresCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal, OnQueryLeaderboardUserScoresCompleteCallback, OnQueryLeaderboardUserScoresCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnQueryLeaderboardUserScoresCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardUserScoresCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryLeaderboardUserScoresCompleteCallbackInfo other)
	{
		other = default(OnQueryLeaderboardUserScoresCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using System;
using Epic.OnlineServices;

public struct QueryLeaderboardDefinitionsOptions
{
	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct QueryLeaderboardDefinitionsOptionsInternal : ISettable<QueryLeaderboardDefinitionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private long m_StartTime;

	private long m_EndTime;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryLeaderboardDefinitionsOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.StartTime, ref m_StartTime);
		Helper.Set(other.EndTime, ref m_EndTime);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct QueryLeaderboardRanksOptions
{
	public Utf8String LeaderboardId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct QueryLeaderboardRanksOptionsInternal : ISettable<QueryLeaderboardRanksOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryLeaderboardRanksOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.LeaderboardId, ref m_LeaderboardId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LeaderboardId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct QueryLeaderboardUserScoresOptions
{
	public ProductUserId[] UserIds { get; set; }

	public UserScoresQueryStatInfo[] StatInfo { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct QueryLeaderboardUserScoresOptionsInternal : ISettable<QueryLeaderboardUserScoresOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserIds;

	private uint m_UserIdsCount;

	private IntPtr m_StatInfo;

	private uint m_StatInfoCount;

	private long m_StartTime;

	private long m_EndTime;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryLeaderboardUserScoresOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.UserIds, ref m_UserIds, out m_UserIdsCount, isArrayItemAllocated: false);
		Helper.Set<UserScoresQueryStatInfo, UserScoresQueryStatInfoInternal>(other.StatInfo, ref m_StatInfo, out m_StatInfoCount, isArrayItemAllocated: false);
		Helper.Set(other.StartTime, ref m_StartTime);
		Helper.Set(other.EndTime, ref m_EndTime);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserIds);
		Helper.Dispose(ref m_StatInfo);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct UserScoresQueryStatInfo
{
	public Utf8String StatName { get; set; }

	public LeaderboardAggregation Aggregation { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

internal struct UserScoresQueryStatInfoInternal : ISettable<UserScoresQueryStatInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_StatName;

	private LeaderboardAggregation m_Aggregation;

	public void Set(ref UserScoresQueryStatInfo other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.StatName, ref m_StatName);
		m_Aggregation = other.Aggregation;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPermissionsUpdateReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct AddNotifyPermissionsUpdateReceivedOptionsInternal : ISettable<AddNotifyPermissionsUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPermissionsUpdateReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyPermissionByIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct CopyPermissionByIndexOptionsInternal : ISettable<CopyPermissionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public void Set(ref CopyPermissionByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CreateUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public bool IsMinor { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct CreateUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateUserCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private int m_IsMinor;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CreateUserCallbackInfo other)
	{
		other = default(CreateUserCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_KWSUserId, out Utf8String to3);
		other.KWSUserId = to3;
		Helper.Get(m_IsMinor, out bool to4);
		other.IsMinor = to4;
	}
}


using Epic.OnlineServices;

public struct CreateUserOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public Utf8String ParentEmail { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct CreateUserOptionsInternal : ISettable<CreateUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_DateOfBirth;

	private IntPtr m_ParentEmail;

	public void Set(ref CreateUserOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.DateOfBirth, ref m_DateOfBirth);
		Helper.Set(other.ParentEmail, ref m_ParentEmail);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_DateOfBirth);
		Helper.Dispose(ref m_ParentEmail);
	}
}


using Epic.OnlineServices;

public struct GetPermissionByKeyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Key { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct GetPermissionByKeyOptionsInternal : ISettable<GetPermissionByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Key;

	public void Set(ref GetPermissionByKeyOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Key, ref m_Key);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct GetPermissionsCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct GetPermissionsCountOptionsInternal : ISettable<GetPermissionsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetPermissionsCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public sealed class KWSInterface : Handle
{
	public const int ADDNOTIFYPERMISSIONSUPDATERECEIVED_API_LATEST = 1;

	public const int COPYPERMISSIONBYINDEX_API_LATEST = 1;

	public const int CREATEUSER_API_LATEST = 1;

	public const int GETPERMISSIONBYKEY_API_LATEST = 1;

	public const int GETPERMISSIONSCOUNT_API_LATEST = 1;

	public const int MAX_PERMISSIONS = 16;

	public const int MAX_PERMISSION_LENGTH = 32;

	public const int PERMISSIONSTATUS_API_LATEST = 1;

	public const int QUERYAGEGATE_API_LATEST = 1;

	public const int QUERYPERMISSIONS_API_LATEST = 1;

	public const int REQUESTPERMISSIONS_API_LATEST = 1;

	public const int UPDATEPARENTEMAIL_API_LATEST = 1;

	public KWSInterface()
	{
	}

	public KWSInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyPermissionsUpdateReceived(ref AddNotifyPermissionsUpdateReceivedOptions options, object clientData, OnPermissionsUpdateReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyPermissionsUpdateReceivedOptionsInternal options2 = default(AddNotifyPermissionsUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_KWS_AddNotifyPermissionsUpdateReceived(base.InnerHandle, ref options2, clientDataPointer, OnPermissionsUpdateReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyPermissionByIndex(ref CopyPermissionByIndexOptions options, out PermissionStatus? outPermission)
	{
		CopyPermissionByIndexOptionsInternal options2 = default(CopyPermissionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outPermission2 = IntPtr.Zero;
		Result result = Bindings.EOS_KWS_CopyPermissionByIndex(base.InnerHandle, ref options2, out outPermission2);
		Helper.Dispose(ref options2);
		Helper.Get<PermissionStatusInternal, PermissionStatus>(outPermission2, out outPermission);
		if (outPermission2 != IntPtr.Zero)
		{
			Bindings.EOS_KWS_PermissionStatus_Release(outPermission2);
		}
		return result;
	}

	public void CreateUser(ref CreateUserOptions options, object clientData, OnCreateUserCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		CreateUserOptionsInternal options2 = default(CreateUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_KWS_CreateUser(base.InnerHandle, ref options2, clientDataPointer, OnCreateUserCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result GetPermissionByKey(ref GetPermissionByKeyOptions options, out KWSPermissionStatus outPermission)
	{
		GetPermissionByKeyOptionsInternal options2 = default(GetPermissionByKeyOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_KWS_GetPermissionByKey(base.InnerHandle, ref options2, out outPermission);
		Helper.Dispose(ref options2);
		return result;
	}

	public int GetPermissionsCount(ref GetPermissionsCountOptions options)
	{
		GetPermissionsCountOptionsInternal options2 = default(GetPermissionsCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_KWS_GetPermissionsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryAgeGate(ref QueryAgeGateOptions options, object clientData, OnQueryAgeGateCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryAgeGateOptionsInternal options2 = default(QueryAgeGateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_KWS_QueryAgeGate(base.InnerHandle, ref options2, clientDataPointer, OnQueryAgeGateCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryPermissions(ref QueryPermissionsOptions options, object clientData, OnQueryPermissionsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryPermissionsOptionsInternal options2 = default(QueryPermissionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_KWS_QueryPermissions(base.InnerHandle, ref options2, clientDataPointer, OnQueryPermissionsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyPermissionsUpdateReceived(ulong inId)
	{
		Bindings.EOS_KWS_RemoveNotifyPermissionsUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RequestPermissions(ref RequestPermissionsOptions options, object clientData, OnRequestPermissionsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		RequestPermissionsOptionsInternal options2 = default(RequestPermissionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_KWS_RequestPermissions(base.InnerHandle, ref options2, clientDataPointer, OnRequestPermissionsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void UpdateParentEmail(ref UpdateParentEmailOptions options, object clientData, OnUpdateParentEmailCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UpdateParentEmailOptionsInternal options2 = default(UpdateParentEmailOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_KWS_UpdateParentEmail(base.InnerHandle, ref options2, clientDataPointer, OnUpdateParentEmailCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


public enum KWSPermissionStatus
{
	Granted,
	Rejected,
	Pending
}


using Epic.OnlineServices.KWS;

public delegate void OnCreateUserCallback(ref CreateUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateUserCallbackInternal(ref CreateUserCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnCreateUserCallbackInternalImplementation
{
	private static OnCreateUserCallbackInternal s_Delegate;

	public static OnCreateUserCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateUserCallbackInternal))]
	public static void EntryPoint(ref CreateUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateUserCallbackInfoInternal, OnCreateUserCallback, CreateUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.KWS;

public delegate void OnPermissionsUpdateReceivedCallback(ref PermissionsUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPermissionsUpdateReceivedCallbackInternal(ref PermissionsUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnPermissionsUpdateReceivedCallbackInternalImplementation
{
	private static OnPermissionsUpdateReceivedCallbackInternal s_Delegate;

	public static OnPermissionsUpdateReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPermissionsUpdateReceivedCallbackInternal))]
	public static void EntryPoint(ref PermissionsUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<PermissionsUpdateReceivedCallbackInfoInternal, OnPermissionsUpdateReceivedCallback, PermissionsUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.KWS;

public delegate void OnQueryAgeGateCallback(ref QueryAgeGateCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryAgeGateCallbackInternal(ref QueryAgeGateCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnQueryAgeGateCallbackInternalImplementation
{
	private static OnQueryAgeGateCallbackInternal s_Delegate;

	public static OnQueryAgeGateCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryAgeGateCallbackInternal))]
	public static void EntryPoint(ref QueryAgeGateCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryAgeGateCallbackInfoInternal, OnQueryAgeGateCallback, QueryAgeGateCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.KWS;

public delegate void OnQueryPermissionsCallback(ref QueryPermissionsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPermissionsCallbackInternal(ref QueryPermissionsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnQueryPermissionsCallbackInternalImplementation
{
	private static OnQueryPermissionsCallbackInternal s_Delegate;

	public static OnQueryPermissionsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPermissionsCallbackInternal))]
	public static void EntryPoint(ref QueryPermissionsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryPermissionsCallbackInfoInternal, OnQueryPermissionsCallback, QueryPermissionsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.KWS;

public delegate void OnRequestPermissionsCallback(ref RequestPermissionsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestPermissionsCallbackInternal(ref RequestPermissionsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnRequestPermissionsCallbackInternalImplementation
{
	private static OnRequestPermissionsCallbackInternal s_Delegate;

	public static OnRequestPermissionsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestPermissionsCallbackInternal))]
	public static void EntryPoint(ref RequestPermissionsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RequestPermissionsCallbackInfoInternal, OnRequestPermissionsCallback, RequestPermissionsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.KWS;

public delegate void OnUpdateParentEmailCallback(ref UpdateParentEmailCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateParentEmailCallbackInternal(ref UpdateParentEmailCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal static class OnUpdateParentEmailCallbackInternalImplementation
{
	private static OnUpdateParentEmailCallbackInternal s_Delegate;

	public static OnUpdateParentEmailCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateParentEmailCallbackInternal))]
	public static void EntryPoint(ref UpdateParentEmailCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateParentEmailCallbackInfoInternal, OnUpdateParentEmailCallback, UpdateParentEmailCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct PermissionStatus
{
	public Utf8String Name { get; set; }

	public KWSPermissionStatus Status { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct PermissionStatusInternal : IGettable<PermissionStatus>
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private KWSPermissionStatus m_Status;

	public void Get(out PermissionStatus other)
	{
		other = default(PermissionStatus);
		Helper.Get(m_Name, out Utf8String to);
		other.Name = to;
		other.Status = m_Status;
	}
}


using Epic.OnlineServices;

public struct PermissionsUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public bool IsMinor { get; set; }

	public Utf8String ParentEmail { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct PermissionsUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<PermissionsUpdateReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private IntPtr m_DateOfBirth;

	private int m_IsMinor;

	private IntPtr m_ParentEmail;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out PermissionsUpdateReceivedCallbackInfo other)
	{
		other = default(PermissionsUpdateReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_KWSUserId, out Utf8String to3);
		other.KWSUserId = to3;
		Helper.Get(m_DateOfBirth, out Utf8String to4);
		other.DateOfBirth = to4;
		Helper.Get(m_IsMinor, out bool to5);
		other.IsMinor = to5;
		Helper.Get(m_ParentEmail, out Utf8String to6);
		other.ParentEmail = to6;
	}
}


using Epic.OnlineServices;

public struct QueryAgeGateCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String CountryCode { get; set; }

	public uint AgeOfConsent { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct QueryAgeGateCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryAgeGateCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_CountryCode;

	private uint m_AgeOfConsent;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryAgeGateCallbackInfo other)
	{
		other = default(QueryAgeGateCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_CountryCode, out Utf8String to2);
		other.CountryCode = to2;
		other.AgeOfConsent = m_AgeOfConsent;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryAgeGateOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct QueryAgeGateOptionsInternal : ISettable<QueryAgeGateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryAgeGateOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct QueryPermissionsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public bool IsMinor { get; set; }

	public Utf8String ParentEmail { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct QueryPermissionsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryPermissionsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private IntPtr m_DateOfBirth;

	private int m_IsMinor;

	private IntPtr m_ParentEmail;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryPermissionsCallbackInfo other)
	{
		other = default(QueryPermissionsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_KWSUserId, out Utf8String to3);
		other.KWSUserId = to3;
		Helper.Get(m_DateOfBirth, out Utf8String to4);
		other.DateOfBirth = to4;
		Helper.Get(m_IsMinor, out bool to5);
		other.IsMinor = to5;
		Helper.Get(m_ParentEmail, out Utf8String to6);
		other.ParentEmail = to6;
	}
}


using Epic.OnlineServices;

public struct QueryPermissionsOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct QueryPermissionsOptionsInternal : ISettable<QueryPermissionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryPermissionsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct RequestPermissionsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct RequestPermissionsCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestPermissionsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RequestPermissionsCallbackInfo other)
	{
		other = default(RequestPermissionsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct RequestPermissionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String[] PermissionKeys { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct RequestPermissionsOptionsInternal : ISettable<RequestPermissionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_PermissionKeyCount;

	private IntPtr m_PermissionKeys;

	public void Set(ref RequestPermissionsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.PermissionKeys, ref m_PermissionKeys, out m_PermissionKeyCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PermissionKeys);
	}
}


using Epic.OnlineServices;

public struct UpdateParentEmailCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct UpdateParentEmailCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateParentEmailCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UpdateParentEmailCallbackInfo other)
	{
		other = default(UpdateParentEmailCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct UpdateParentEmailOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String ParentEmail { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

internal struct UpdateParentEmailOptionsInternal : ISettable<UpdateParentEmailOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ParentEmail;

	public void Set(ref UpdateParentEmailOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ParentEmail, ref m_ParentEmail);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ParentEmail);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyUserLoginStatusChangedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct AddNotifyUserLoginStatusChangedOptionsInternal : ISettable<AddNotifyUserLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyUserLoginStatusChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct ClearUserPreLogoutCallbackOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct ClearUserPreLogoutCallbackOptionsInternal : ISettable<ClearUserPreLogoutCallbackOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref ClearUserPreLogoutCallbackOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct CreateIntegratedPlatformOptionsContainerOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct CreateIntegratedPlatformOptionsContainerOptionsInternal : ISettable<CreateIntegratedPlatformOptionsContainerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref CreateIntegratedPlatformOptionsContainerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct FinalizeDeferredUserLogoutOptions
{
	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public LoginStatus ExpectedLoginStatus { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct FinalizeDeferredUserLogoutOptionsInternal : ISettable<FinalizeDeferredUserLogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private LoginStatus m_ExpectedLoginStatus;

	public void Set(ref FinalizeDeferredUserLogoutOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.PlatformType, ref m_PlatformType);
		Helper.Set(other.LocalPlatformUserId, ref m_LocalPlatformUserId);
		m_ExpectedLoginStatus = other.ExpectedLoginStatus;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public sealed class IntegratedPlatformInterface : Handle
{
	public const int ADDNOTIFYUSERLOGINSTATUSCHANGED_API_LATEST = 1;

	public const int CLEARUSERPRELOGOUTCALLBACK_API_LATEST = 1;

	public const int CREATEINTEGRATEDPLATFORMOPTIONSCONTAINER_API_LATEST = 1;

	public const int FINALIZEDEFERREDUSERLOGOUT_API_LATEST = 1;

	public const int INTEGRATEDPLATFORMOPTIONSCONTAINER_ADD_API_LATEST = 1;

	public const int OPTIONS_API_LATEST = 1;

	public const int SETUSERLOGINSTATUS_API_LATEST = 1;

	public const int SETUSERPRELOGOUTCALLBACK_API_LATEST = 1;

	public IntegratedPlatformInterface()
	{
	}

	public IntegratedPlatformInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyUserLoginStatusChanged(ref AddNotifyUserLoginStatusChangedOptions options, object clientData, OnUserLoginStatusChangedCallback callbackFunction)
	{
		if (callbackFunction == null)
		{
			throw new ArgumentNullException("callbackFunction");
		}
		AddNotifyUserLoginStatusChangedOptionsInternal options2 = default(AddNotifyUserLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, callbackFunction);
		ulong num = Bindings.EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged(base.InnerHandle, ref options2, clientDataPointer, OnUserLoginStatusChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public void ClearUserPreLogoutCallback(ref ClearUserPreLogoutCallbackOptions options)
	{
		ClearUserPreLogoutCallbackOptionsInternal options2 = default(ClearUserPreLogoutCallbackOptionsInternal);
		options2.Set(ref options);
		Bindings.EOS_IntegratedPlatform_ClearUserPreLogoutCallback(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
	}

	public static Result CreateIntegratedPlatformOptionsContainer(ref CreateIntegratedPlatformOptionsContainerOptions options, out IntegratedPlatformOptionsContainer outIntegratedPlatformOptionsContainerHandle)
	{
		CreateIntegratedPlatformOptionsContainerOptionsInternal options2 = default(CreateIntegratedPlatformOptionsContainerOptionsInternal);
		options2.Set(ref options);
		IntPtr outIntegratedPlatformOptionsContainerHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer(ref options2, out outIntegratedPlatformOptionsContainerHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outIntegratedPlatformOptionsContainerHandle2, out outIntegratedPlatformOptionsContainerHandle);
		return result;
	}

	public Result FinalizeDeferredUserLogout(ref FinalizeDeferredUserLogoutOptions options)
	{
		FinalizeDeferredUserLogoutOptionsInternal options2 = default(FinalizeDeferredUserLogoutOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_IntegratedPlatform_FinalizeDeferredUserLogout(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyUserLoginStatusChanged(ulong notificationId)
	{
		Bindings.EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SetUserLoginStatus(ref SetUserLoginStatusOptions options)
	{
		SetUserLoginStatusOptionsInternal options2 = default(SetUserLoginStatusOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_IntegratedPlatform_SetUserLoginStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetUserPreLogoutCallback(ref SetUserPreLogoutCallbackOptions options, object clientData, OnUserPreLogoutCallback callbackFunction)
	{
		if (callbackFunction == null)
		{
			throw new ArgumentNullException("callbackFunction");
		}
		SetUserPreLogoutCallbackOptionsInternal options2 = default(SetUserPreLogoutCallbackOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, callbackFunction);
		Result result = Bindings.EOS_IntegratedPlatform_SetUserPreLogoutCallback(base.InnerHandle, ref options2, clientDataPointer, OnUserPreLogoutCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		return result;
	}
}


using System;

[Flags]
public enum IntegratedPlatformManagementFlags
{
	Disabled = 1,
	LibraryManagedByApplication = 2,
	LibraryManagedBySDK = 4,
	DisablePresenceMirroring = 8,
	DisableSDKManagedSessions = 0x10,
	PreferEOSIdentity = 0x20,
	PreferIntegratedIdentity = 0x40,
	ApplicationManagedIdentityLogin = 0x80
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public sealed class IntegratedPlatformOptionsContainer : Handle
{
	public IntegratedPlatformOptionsContainer()
	{
	}

	public IntegratedPlatformOptionsContainer(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result Add(ref IntegratedPlatformOptionsContainerAddOptions inOptions)
	{
		IntegratedPlatformOptionsContainerAddOptionsInternal inOptions2 = default(IntegratedPlatformOptionsContainerAddOptionsInternal);
		inOptions2.Set(ref inOptions);
		Result result = Bindings.EOS_IntegratedPlatformOptionsContainer_Add(base.InnerHandle, ref inOptions2);
		Helper.Dispose(ref inOptions2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_IntegratedPlatformOptionsContainer_Release(base.InnerHandle);
	}
}


using Epic.OnlineServices.IntegratedPlatform;

public struct IntegratedPlatformOptionsContainerAddOptions
{
	public Options? Options { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct IntegratedPlatformOptionsContainerAddOptionsInternal : ISettable<IntegratedPlatformOptionsContainerAddOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Options;

	public void Set(ref IntegratedPlatformOptionsContainerAddOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<Options, OptionsInternal>(other.Options, ref m_Options);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Options);
	}
}


public enum IntegratedPlatformPreLogoutAction
{
	ProcessLogoutImmediately,
	DeferLogout
}


using Epic.OnlineServices.IntegratedPlatform;

public delegate void OnUserLoginStatusChangedCallback(ref UserLoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.IntegratedPlatform;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUserLoginStatusChangedCallbackInternal(ref UserLoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal static class OnUserLoginStatusChangedCallbackInternalImplementation
{
	private static OnUserLoginStatusChangedCallbackInternal s_Delegate;

	public static OnUserLoginStatusChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUserLoginStatusChangedCallbackInternal))]
	public static void EntryPoint(ref UserLoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<UserLoginStatusChangedCallbackInfoInternal, OnUserLoginStatusChangedCallback, UserLoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.IntegratedPlatform;

public delegate IntegratedPlatformPreLogoutAction OnUserPreLogoutCallback(ref UserPreLogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.IntegratedPlatform;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate IntegratedPlatformPreLogoutAction OnUserPreLogoutCallbackInternal(ref UserPreLogoutCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal static class OnUserPreLogoutCallbackInternalImplementation
{
	private static OnUserPreLogoutCallbackInternal s_Delegate;

	public static OnUserPreLogoutCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUserPreLogoutCallbackInternal))]
	public static IntegratedPlatformPreLogoutAction EntryPoint(ref UserPreLogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UserPreLogoutCallbackInfoInternal, OnUserPreLogoutCallback, UserPreLogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			return callback(ref callbackInfo);
		}
		return IntegratedPlatformPreLogoutAction.ProcessLogoutImmediately;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public struct Options
{
	public Utf8String Type { get; set; }

	public IntegratedPlatformManagementFlags Flags { get; set; }

	public IntPtr InitOptions { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct OptionsInternal : ISettable<Options>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Type;

	private IntegratedPlatformManagementFlags m_Flags;

	private IntPtr m_InitOptions;

	public void Set(ref Options other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Type, ref m_Type);
		m_Flags = other.Flags;
		m_InitOptions = other.InitOptions;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Type);
		Helper.Dispose(ref m_InitOptions);
	}
}


using Epic.OnlineServices;

public struct SetUserLoginStatusOptions
{
	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public LoginStatus CurrentLoginStatus { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct SetUserLoginStatusOptionsInternal : ISettable<SetUserLoginStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private LoginStatus m_CurrentLoginStatus;

	public void Set(ref SetUserLoginStatusOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.PlatformType, ref m_PlatformType);
		Helper.Set(other.LocalPlatformUserId, ref m_LocalPlatformUserId);
		m_CurrentLoginStatus = other.CurrentLoginStatus;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct SetUserPreLogoutCallbackOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct SetUserPreLogoutCallbackOptionsInternal : ISettable<SetUserPreLogoutCallbackOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref SetUserPreLogoutCallbackOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct UserLoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public LoginStatus PreviousLoginStatus { get; set; }

	public LoginStatus CurrentLoginStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct UserLoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<UserLoginStatusChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private IntPtr m_AccountId;

	private IntPtr m_ProductUserId;

	private LoginStatus m_PreviousLoginStatus;

	private LoginStatus m_CurrentLoginStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UserLoginStatusChangedCallbackInfo other)
	{
		other = default(UserLoginStatusChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_PlatformType, out Utf8String to2);
		other.PlatformType = to2;
		Helper.Get(m_LocalPlatformUserId, out Utf8String to3);
		other.LocalPlatformUserId = to3;
		Helper.Get(m_AccountId, out EpicAccountId to4);
		other.AccountId = to4;
		Helper.Get(m_ProductUserId, out ProductUserId to5);
		other.ProductUserId = to5;
		other.PreviousLoginStatus = m_PreviousLoginStatus;
		other.CurrentLoginStatus = m_CurrentLoginStatus;
	}
}


using Epic.OnlineServices;

public struct UserPreLogoutCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

internal struct UserPreLogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<UserPreLogoutCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private IntPtr m_AccountId;

	private IntPtr m_ProductUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UserPreLogoutCallbackInfo other)
	{
		other = default(UserPreLogoutCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_PlatformType, out Utf8String to2);
		other.PlatformType = to2;
		Helper.Get(m_LocalPlatformUserId, out Utf8String to3);
		other.LocalPlatformUserId = to3;
		Helper.Get(m_AccountId, out EpicAccountId to4);
		other.AccountId = to4;
		Helper.Get(m_ProductUserId, out ProductUserId to5);
		other.ProductUserId = to5;
	}
}


using Epic.OnlineServices;

public struct AcceptInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct AcceptInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<AcceptInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out AcceptInviteCallbackInfo other)
	{
		other = default(AcceptInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct AcceptInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct AcceptInviteOptionsInternal : ISettable<AcceptInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref AcceptInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyBlockedUsersUpdateOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct AddNotifyBlockedUsersUpdateOptionsInternal : ISettable<AddNotifyBlockedUsersUpdateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyBlockedUsersUpdateOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyFriendsUpdateOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct AddNotifyFriendsUpdateOptionsInternal : ISettable<AddNotifyFriendsUpdateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyFriendsUpdateOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public sealed class FriendsInterface : Handle
{
	public const int ACCEPTINVITE_API_LATEST = 1;

	public const int ADDNOTIFYBLOCKEDUSERSUPDATE_API_LATEST = 1;

	public const int ADDNOTIFYFRIENDSUPDATE_API_LATEST = 1;

	public const int GETBLOCKEDUSERATINDEX_API_LATEST = 1;

	public const int GETBLOCKEDUSERSCOUNT_API_LATEST = 1;

	public const int GETFRIENDATINDEX_API_LATEST = 1;

	public const int GETFRIENDSCOUNT_API_LATEST = 1;

	public const int GETSTATUS_API_LATEST = 1;

	public const int QUERYFRIENDS_API_LATEST = 1;

	public const int REJECTINVITE_API_LATEST = 1;

	public const int SENDINVITE_API_LATEST = 1;

	public FriendsInterface()
	{
	}

	public FriendsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void AcceptInvite(ref AcceptInviteOptions options, object clientData, OnAcceptInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		AcceptInviteOptionsInternal options2 = default(AcceptInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Friends_AcceptInvite(base.InnerHandle, ref options2, clientDataPointer, OnAcceptInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public ulong AddNotifyBlockedUsersUpdate(ref AddNotifyBlockedUsersUpdateOptions options, object clientData, OnBlockedUsersUpdateCallback blockedUsersUpdateHandler)
	{
		if (blockedUsersUpdateHandler == null)
		{
			throw new ArgumentNullException("blockedUsersUpdateHandler");
		}
		AddNotifyBlockedUsersUpdateOptionsInternal options2 = default(AddNotifyBlockedUsersUpdateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, blockedUsersUpdateHandler);
		ulong num = Bindings.EOS_Friends_AddNotifyBlockedUsersUpdate(base.InnerHandle, ref options2, clientDataPointer, OnBlockedUsersUpdateCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyFriendsUpdate(ref AddNotifyFriendsUpdateOptions options, object clientData, OnFriendsUpdateCallback friendsUpdateHandler)
	{
		if (friendsUpdateHandler == null)
		{
			throw new ArgumentNullException("friendsUpdateHandler");
		}
		AddNotifyFriendsUpdateOptionsInternal options2 = default(AddNotifyFriendsUpdateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, friendsUpdateHandler);
		ulong num = Bindings.EOS_Friends_AddNotifyFriendsUpdate(base.InnerHandle, ref options2, clientDataPointer, OnFriendsUpdateCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public EpicAccountId GetBlockedUserAtIndex(ref GetBlockedUserAtIndexOptions options)
	{
		GetBlockedUserAtIndexOptionsInternal options2 = default(GetBlockedUserAtIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Friends_GetBlockedUserAtIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out EpicAccountId to);
		return to;
	}

	public int GetBlockedUsersCount(ref GetBlockedUsersCountOptions options)
	{
		GetBlockedUsersCountOptionsInternal options2 = default(GetBlockedUsersCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_Friends_GetBlockedUsersCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public EpicAccountId GetFriendAtIndex(ref GetFriendAtIndexOptions options)
	{
		GetFriendAtIndexOptionsInternal options2 = default(GetFriendAtIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Friends_GetFriendAtIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out EpicAccountId to);
		return to;
	}

	public int GetFriendsCount(ref GetFriendsCountOptions options)
	{
		GetFriendsCountOptionsInternal options2 = default(GetFriendsCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_Friends_GetFriendsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public FriendsStatus GetStatus(ref GetStatusOptions options)
	{
		GetStatusOptionsInternal options2 = default(GetStatusOptionsInternal);
		options2.Set(ref options);
		FriendsStatus result = Bindings.EOS_Friends_GetStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryFriends(ref QueryFriendsOptions options, object clientData, OnQueryFriendsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryFriendsOptionsInternal options2 = default(QueryFriendsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Friends_QueryFriends(base.InnerHandle, ref options2, clientDataPointer, OnQueryFriendsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		RejectInviteOptionsInternal options2 = default(RejectInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Friends_RejectInvite(base.InnerHandle, ref options2, clientDataPointer, OnRejectInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyBlockedUsersUpdate(ulong notificationId)
	{
		Bindings.EOS_Friends_RemoveNotifyBlockedUsersUpdate(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyFriendsUpdate(ulong notificationId)
	{
		Bindings.EOS_Friends_RemoveNotifyFriendsUpdate(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		SendInviteOptionsInternal options2 = default(SendInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Friends_SendInvite(base.InnerHandle, ref options2, clientDataPointer, OnSendInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


public enum FriendsStatus
{
	NotFriends,
	InviteSent,
	InviteReceived,
	Friends
}


using Epic.OnlineServices;

public struct GetBlockedUserAtIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public int Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct GetBlockedUserAtIndexOptionsInternal : ISettable<GetBlockedUserAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private int m_Index;

	public void Set(ref GetBlockedUserAtIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetBlockedUsersCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct GetBlockedUsersCountOptionsInternal : ISettable<GetBlockedUsersCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetBlockedUsersCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetFriendAtIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public int Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct GetFriendAtIndexOptionsInternal : ISettable<GetFriendAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private int m_Index;

	public void Set(ref GetFriendAtIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetFriendsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct GetFriendsCountOptionsInternal : ISettable<GetFriendsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetFriendsCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetStatusOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct GetStatusOptionsInternal : ISettable<GetStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref GetStatusOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnAcceptInviteCallback(ref AcceptInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAcceptInviteCallbackInternal(ref AcceptInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnAcceptInviteCallbackInternalImplementation
{
	private static OnAcceptInviteCallbackInternal s_Delegate;

	public static OnAcceptInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnAcceptInviteCallbackInternal))]
	public static void EntryPoint(ref AcceptInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<AcceptInviteCallbackInfoInternal, OnAcceptInviteCallback, AcceptInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnBlockedUsersUpdateCallback(ref OnBlockedUsersUpdateInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnBlockedUsersUpdateCallbackInternal(ref OnBlockedUsersUpdateInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnBlockedUsersUpdateCallbackInternalImplementation
{
	private static OnBlockedUsersUpdateCallbackInternal s_Delegate;

	public static OnBlockedUsersUpdateCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnBlockedUsersUpdateCallbackInternal))]
	public static void EntryPoint(ref OnBlockedUsersUpdateInfoInternal data)
	{
		if (Helper.TryGetCallback<OnBlockedUsersUpdateInfoInternal, OnBlockedUsersUpdateCallback, OnBlockedUsersUpdateInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnBlockedUsersUpdateInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public bool Blocked { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct OnBlockedUsersUpdateInfoInternal : ICallbackInfoInternal, IGettable<OnBlockedUsersUpdateInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private int m_Blocked;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnBlockedUsersUpdateInfo other)
	{
		other = default(OnBlockedUsersUpdateInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
		Helper.Get(m_Blocked, out bool to4);
		other.Blocked = to4;
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnFriendsUpdateCallback(ref OnFriendsUpdateInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnFriendsUpdateCallbackInternal(ref OnFriendsUpdateInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnFriendsUpdateCallbackInternalImplementation
{
	private static OnFriendsUpdateCallbackInternal s_Delegate;

	public static OnFriendsUpdateCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnFriendsUpdateCallbackInternal))]
	public static void EntryPoint(ref OnFriendsUpdateInfoInternal data)
	{
		if (Helper.TryGetCallback<OnFriendsUpdateInfoInternal, OnFriendsUpdateCallback, OnFriendsUpdateInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct OnFriendsUpdateInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public FriendsStatus PreviousStatus { get; set; }

	public FriendsStatus CurrentStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct OnFriendsUpdateInfoInternal : ICallbackInfoInternal, IGettable<OnFriendsUpdateInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private FriendsStatus m_PreviousStatus;

	private FriendsStatus m_CurrentStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnFriendsUpdateInfo other)
	{
		other = default(OnFriendsUpdateInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
		other.PreviousStatus = m_PreviousStatus;
		other.CurrentStatus = m_CurrentStatus;
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnQueryFriendsCallback(ref QueryFriendsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFriendsCallbackInternal(ref QueryFriendsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnQueryFriendsCallbackInternalImplementation
{
	private static OnQueryFriendsCallbackInternal s_Delegate;

	public static OnQueryFriendsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFriendsCallbackInternal))]
	public static void EntryPoint(ref QueryFriendsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFriendsCallbackInfoInternal, OnQueryFriendsCallback, QueryFriendsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnRejectInviteCallback(ref RejectInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectInviteCallbackInternal(ref RejectInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnRejectInviteCallbackInternalImplementation
{
	private static OnRejectInviteCallbackInternal s_Delegate;

	public static OnRejectInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectInviteCallbackInternal))]
	public static void EntryPoint(ref RejectInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectInviteCallbackInfoInternal, OnRejectInviteCallback, RejectInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnSendInviteCallback(ref SendInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendInviteCallbackInternal(ref SendInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal static class OnSendInviteCallbackInternalImplementation
{
	private static OnSendInviteCallbackInternal s_Delegate;

	public static OnSendInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendInviteCallbackInternal))]
	public static void EntryPoint(ref SendInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendInviteCallbackInfoInternal, OnSendInviteCallback, SendInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct QueryFriendsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct QueryFriendsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFriendsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryFriendsCallbackInfo other)
	{
		other = default(QueryFriendsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryFriendsOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct QueryFriendsOptionsInternal : ISettable<QueryFriendsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryFriendsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct RejectInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct RejectInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RejectInviteCallbackInfo other)
	{
		other = default(RejectInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct RejectInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct RejectInviteOptionsInternal : ISettable<RejectInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref RejectInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct SendInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct SendInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendInviteCallbackInfo other)
	{
		other = default(SendInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out EpicAccountId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct SendInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

internal struct SendInviteOptionsInternal : ISettable<SendInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref SendInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CatalogItem
{
	public Utf8String CatalogNamespace { get; set; }

	public Utf8String Id { get; set; }

	public Utf8String EntitlementName { get; set; }

	public Utf8String TitleText { get; set; }

	public Utf8String DescriptionText { get; set; }

	public Utf8String LongDescriptionText { get; set; }

	public Utf8String TechnicalDetailsText { get; set; }

	public Utf8String DeveloperText { get; set; }

	public EcomItemType ItemType { get; set; }

	public long EntitlementEndTimestamp { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CatalogItemInternal : IGettable<CatalogItem>
{
	private int m_ApiVersion;

	private IntPtr m_CatalogNamespace;

	private IntPtr m_Id;

	private IntPtr m_EntitlementName;

	private IntPtr m_TitleText;

	private IntPtr m_DescriptionText;

	private IntPtr m_LongDescriptionText;

	private IntPtr m_TechnicalDetailsText;

	private IntPtr m_DeveloperText;

	private EcomItemType m_ItemType;

	private long m_EntitlementEndTimestamp;

	public void Get(out CatalogItem other)
	{
		other = default(CatalogItem);
		Helper.Get(m_CatalogNamespace, out Utf8String to);
		other.CatalogNamespace = to;
		Helper.Get(m_Id, out Utf8String to2);
		other.Id = to2;
		Helper.Get(m_EntitlementName, out Utf8String to3);
		other.EntitlementName = to3;
		Helper.Get(m_TitleText, out Utf8String to4);
		other.TitleText = to4;
		Helper.Get(m_DescriptionText, out Utf8String to5);
		other.DescriptionText = to5;
		Helper.Get(m_LongDescriptionText, out Utf8String to6);
		other.LongDescriptionText = to6;
		Helper.Get(m_TechnicalDetailsText, out Utf8String to7);
		other.TechnicalDetailsText = to7;
		Helper.Get(m_DeveloperText, out Utf8String to8);
		other.DeveloperText = to8;
		other.ItemType = m_ItemType;
		other.EntitlementEndTimestamp = m_EntitlementEndTimestamp;
	}
}


using Epic.OnlineServices;

public struct CatalogOffer
{
	public int ServerIndex { get; set; }

	public Utf8String CatalogNamespace { get; set; }

	public Utf8String Id { get; set; }

	public Utf8String TitleText { get; set; }

	public Utf8String DescriptionText { get; set; }

	public Utf8String LongDescriptionText { get; set; }

	public Utf8String TechnicalDetailsText_DEPRECATED { get; set; }

	public Utf8String CurrencyCode { get; set; }

	public Result PriceResult { get; set; }

	public uint OriginalPrice_DEPRECATED { get; set; }

	public uint CurrentPrice_DEPRECATED { get; set; }

	public byte DiscountPercentage { get; set; }

	public long ExpirationTimestamp { get; set; }

	public uint PurchasedCount_DEPRECATED { get; set; }

	public int PurchaseLimit { get; set; }

	public bool AvailableForPurchase { get; set; }

	public ulong OriginalPrice64 { get; set; }

	public ulong CurrentPrice64 { get; set; }

	public uint DecimalPoint { get; set; }

	public long ReleaseDateTimestamp { get; set; }

	public long EffectiveDateTimestamp { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CatalogOfferInternal : IGettable<CatalogOffer>
{
	private int m_ApiVersion;

	private int m_ServerIndex;

	private IntPtr m_CatalogNamespace;

	private IntPtr m_Id;

	private IntPtr m_TitleText;

	private IntPtr m_DescriptionText;

	private IntPtr m_LongDescriptionText;

	private IntPtr m_TechnicalDetailsText_DEPRECATED;

	private IntPtr m_CurrencyCode;

	private Result m_PriceResult;

	private uint m_OriginalPrice_DEPRECATED;

	private uint m_CurrentPrice_DEPRECATED;

	private byte m_DiscountPercentage;

	private long m_ExpirationTimestamp;

	private uint m_PurchasedCount_DEPRECATED;

	private int m_PurchaseLimit;

	private int m_AvailableForPurchase;

	private ulong m_OriginalPrice64;

	private ulong m_CurrentPrice64;

	private uint m_DecimalPoint;

	private long m_ReleaseDateTimestamp;

	private long m_EffectiveDateTimestamp;

	public void Get(out CatalogOffer other)
	{
		other = default(CatalogOffer);
		other.ServerIndex = m_ServerIndex;
		Helper.Get(m_CatalogNamespace, out Utf8String to);
		other.CatalogNamespace = to;
		Helper.Get(m_Id, out Utf8String to2);
		other.Id = to2;
		Helper.Get(m_TitleText, out Utf8String to3);
		other.TitleText = to3;
		Helper.Get(m_DescriptionText, out Utf8String to4);
		other.DescriptionText = to4;
		Helper.Get(m_LongDescriptionText, out Utf8String to5);
		other.LongDescriptionText = to5;
		Helper.Get(m_TechnicalDetailsText_DEPRECATED, out Utf8String to6);
		other.TechnicalDetailsText_DEPRECATED = to6;
		Helper.Get(m_CurrencyCode, out Utf8String to7);
		other.CurrencyCode = to7;
		other.PriceResult = m_PriceResult;
		other.OriginalPrice_DEPRECATED = m_OriginalPrice_DEPRECATED;
		other.CurrentPrice_DEPRECATED = m_CurrentPrice_DEPRECATED;
		other.DiscountPercentage = m_DiscountPercentage;
		other.ExpirationTimestamp = m_ExpirationTimestamp;
		other.PurchasedCount_DEPRECATED = m_PurchasedCount_DEPRECATED;
		other.PurchaseLimit = m_PurchaseLimit;
		Helper.Get(m_AvailableForPurchase, out bool to8);
		other.AvailableForPurchase = to8;
		other.OriginalPrice64 = m_OriginalPrice64;
		other.CurrentPrice64 = m_CurrentPrice64;
		other.DecimalPoint = m_DecimalPoint;
		other.ReleaseDateTimestamp = m_ReleaseDateTimestamp;
		other.EffectiveDateTimestamp = m_EffectiveDateTimestamp;
	}
}


using Epic.OnlineServices;

public struct CatalogRelease
{
	public Utf8String[] CompatibleAppIds { get; set; }

	public Utf8String[] CompatiblePlatforms { get; set; }

	public Utf8String ReleaseNote { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CatalogReleaseInternal : IGettable<CatalogRelease>
{
	private int m_ApiVersion;

	private uint m_CompatibleAppIdCount;

	private IntPtr m_CompatibleAppIds;

	private uint m_CompatiblePlatformCount;

	private IntPtr m_CompatiblePlatforms;

	private IntPtr m_ReleaseNote;

	public void Get(out CatalogRelease other)
	{
		other = default(CatalogRelease);
		Helper.Get(m_CompatibleAppIds, out var to, m_CompatibleAppIdCount, isArrayItemAllocated: true);
		other.CompatibleAppIds = to;
		Helper.Get(m_CompatiblePlatforms, out var to2, m_CompatiblePlatformCount, isArrayItemAllocated: true);
		other.CompatiblePlatforms = to2;
		Helper.Get(m_ReleaseNote, out Utf8String to3);
		other.ReleaseNote = to3;
	}
}


using Epic.OnlineServices;

public struct CheckoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String TransactionId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CheckoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<CheckoutCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TransactionId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CheckoutCallbackInfo other)
	{
		other = default(CheckoutCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TransactionId, out Utf8String to3);
		other.TransactionId = to3;
	}
}


using Epic.OnlineServices;

public struct CheckoutEntry
{
	public Utf8String OfferId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CheckoutEntryInternal : ISettable<CheckoutEntry>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_OfferId;

	public void Set(ref CheckoutEntry other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.OfferId, ref m_OfferId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CheckoutOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OverrideCatalogNamespace { get; set; }

	public CheckoutEntry[] Entries { get; set; }

	public CheckoutOrientation PreferredOrientation { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CheckoutOptionsInternal : ISettable<CheckoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OverrideCatalogNamespace;

	private uint m_EntryCount;

	private IntPtr m_Entries;

	private CheckoutOrientation m_PreferredOrientation;

	public void Set(ref CheckoutOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OverrideCatalogNamespace, ref m_OverrideCatalogNamespace);
		Helper.Set<CheckoutEntry, CheckoutEntryInternal>(other.Entries, ref m_Entries, out m_EntryCount, isArrayItemAllocated: false);
		m_PreferredOrientation = other.PreferredOrientation;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OverrideCatalogNamespace);
		Helper.Dispose(ref m_Entries);
	}
}


public enum CheckoutOrientation
{
	Default,
	Portrait,
	Landscape
}


using Epic.OnlineServices;

public struct CopyEntitlementByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyEntitlementByIdOptionsInternal : ISettable<CopyEntitlementByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementId;

	public void Set(ref CopyEntitlementByIdOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementId, ref m_EntitlementId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementId);
	}
}


using Epic.OnlineServices;

public struct CopyEntitlementByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint EntitlementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyEntitlementByIndexOptionsInternal : ISettable<CopyEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_EntitlementIndex;

	public void Set(ref CopyEntitlementByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_EntitlementIndex = other.EntitlementIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyEntitlementByNameAndIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementName { get; set; }

	public uint Index { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyEntitlementByNameAndIndexOptionsInternal : ISettable<CopyEntitlementByNameAndIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementName;

	private uint m_Index;

	public void Set(ref CopyEntitlementByNameAndIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementName, ref m_EntitlementName);
		m_Index = other.Index;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementName);
	}
}


using Epic.OnlineServices;

public struct CopyItemByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyItemByIdOptionsInternal : ISettable<CopyItemByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public void Set(ref CopyItemByIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ItemId, ref m_ItemId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyItemImageInfoByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }

	public uint ImageInfoIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyItemImageInfoByIndexOptionsInternal : ISettable<CopyItemImageInfoByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	private uint m_ImageInfoIndex;

	public void Set(ref CopyItemImageInfoByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ItemId, ref m_ItemId);
		m_ImageInfoIndex = other.ImageInfoIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyItemReleaseByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }

	public uint ReleaseIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyItemReleaseByIndexOptionsInternal : ISettable<CopyItemReleaseByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	private uint m_ReleaseIndex;

	public void Set(ref CopyItemReleaseByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ItemId, ref m_ItemId);
		m_ReleaseIndex = other.ReleaseIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyLastRedeemedEntitlementByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint RedeemedEntitlementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyLastRedeemedEntitlementByIndexOptionsInternal : ISettable<CopyLastRedeemedEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_RedeemedEntitlementIndex;

	public void Set(ref CopyLastRedeemedEntitlementByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_RedeemedEntitlementIndex = other.RedeemedEntitlementIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyOfferByIdOptionsInternal : ISettable<CopyOfferByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public void Set(ref CopyOfferByIdOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OfferId, ref m_OfferId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint OfferIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyOfferByIndexOptionsInternal : ISettable<CopyOfferByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_OfferIndex;

	public void Set(ref CopyOfferByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_OfferIndex = other.OfferIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferImageInfoByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }

	public uint ImageInfoIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyOfferImageInfoByIndexOptionsInternal : ISettable<CopyOfferImageInfoByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	private uint m_ImageInfoIndex;

	public void Set(ref CopyOfferImageInfoByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OfferId, ref m_OfferId);
		m_ImageInfoIndex = other.ImageInfoIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferItemByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }

	public uint ItemIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyOfferItemByIndexOptionsInternal : ISettable<CopyOfferItemByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	private uint m_ItemIndex;

	public void Set(ref CopyOfferItemByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OfferId, ref m_OfferId);
		m_ItemIndex = other.ItemIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyTransactionByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String TransactionId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyTransactionByIdOptionsInternal : ISettable<CopyTransactionByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TransactionId;

	public void Set(ref CopyTransactionByIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.TransactionId, ref m_TransactionId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TransactionId);
	}
}


using Epic.OnlineServices;

public struct CopyTransactionByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint TransactionIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct CopyTransactionByIndexOptionsInternal : ISettable<CopyTransactionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_TransactionIndex;

	public void Set(ref CopyTransactionByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_TransactionIndex = other.TransactionIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public sealed class EcomInterface : Handle
{
	public const int CATALOGITEM_API_LATEST = 1;

	public const int CATALOGITEM_ENTITLEMENTENDTIMESTAMP_UNDEFINED = -1;

	public const int CATALOGOFFER_API_LATEST = 5;

	public const int CATALOGOFFER_EFFECTIVEDATETIMESTAMP_UNDEFINED = -1;

	public const int CATALOGOFFER_EXPIRATIONTIMESTAMP_UNDEFINED = -1;

	public const int CATALOGOFFER_RELEASEDATETIMESTAMP_UNDEFINED = -1;

	public const int CATALOGRELEASE_API_LATEST = 1;

	public const int CHECKOUTENTRY_API_LATEST = 1;

	public const int CHECKOUT_API_LATEST = 2;

	public const int CHECKOUT_MAX_ENTRIES = 10;

	public const int COPYENTITLEMENTBYID_API_LATEST = 2;

	public const int COPYENTITLEMENTBYINDEX_API_LATEST = 1;

	public const int COPYENTITLEMENTBYNAMEANDINDEX_API_LATEST = 1;

	public const int COPYITEMBYID_API_LATEST = 1;

	public const int COPYITEMIMAGEINFOBYINDEX_API_LATEST = 1;

	public const int COPYITEMRELEASEBYINDEX_API_LATEST = 1;

	public const int COPYLASTREDEEMEDENTITLEMENTBYINDEX_API_LATEST = 1;

	public const int COPYOFFERBYID_API_LATEST = 3;

	public const int COPYOFFERBYINDEX_API_LATEST = 3;

	public const int COPYOFFERIMAGEINFOBYINDEX_API_LATEST = 1;

	public const int COPYOFFERITEMBYINDEX_API_LATEST = 1;

	public const int COPYTRANSACTIONBYID_API_LATEST = 1;

	public const int COPYTRANSACTIONBYINDEX_API_LATEST = 1;

	public const int ENTITLEMENTID_MAX_LENGTH = 32;

	public const int ENTITLEMENT_API_LATEST = 2;

	public const int ENTITLEMENT_ENDTIMESTAMP_UNDEFINED = -1;

	public const int GETENTITLEMENTSBYNAMECOUNT_API_LATEST = 1;

	public const int GETENTITLEMENTSCOUNT_API_LATEST = 1;

	public const int GETITEMIMAGEINFOCOUNT_API_LATEST = 1;

	public const int GETITEMRELEASECOUNT_API_LATEST = 1;

	public const int GETLASTREDEEMEDENTITLEMENTSCOUNT_API_LATEST = 1;

	public const int GETOFFERCOUNT_API_LATEST = 1;

	public const int GETOFFERIMAGEINFOCOUNT_API_LATEST = 1;

	public const int GETOFFERITEMCOUNT_API_LATEST = 1;

	public const int GETTRANSACTIONCOUNT_API_LATEST = 1;

	public const int ITEMOWNERSHIP_API_LATEST = 1;

	public const int KEYIMAGEINFO_API_LATEST = 1;

	public const int QUERYENTITLEMENTS_API_LATEST = 3;

	public const int QUERYENTITLEMENTS_MAX_ENTITLEMENT_IDS = 256;

	public const int QUERYENTITLEMENTTOKEN_API_LATEST = 1;

	public const int QUERYENTITLEMENTTOKEN_MAX_ENTITLEMENT_IDS = 32;

	public const int QUERYOFFERS_API_LATEST = 1;

	public const int QUERYOWNERSHIPBYSANDBOXIDSOPTIONS_API_LATEST = 1;

	public const int QUERYOWNERSHIPTOKEN_API_LATEST = 2;

	public const int QUERYOWNERSHIPTOKEN_MAX_CATALOGITEM_IDS = 32;

	public const int QUERYOWNERSHIP_API_LATEST = 2;

	public const int QUERYOWNERSHIP_MAX_CATALOG_IDS = 400;

	public const int QUERYOWNERSHIP_MAX_SANDBOX_IDS = 10;

	public const int REDEEMENTITLEMENTS_API_LATEST = 2;

	public const int REDEEMENTITLEMENTS_MAX_IDS = 32;

	public const int TRANSACTIONID_MAXIMUM_LENGTH = 64;

	public const int TRANSACTION_COPYENTITLEMENTBYINDEX_API_LATEST = 1;

	public const int TRANSACTION_GETENTITLEMENTSCOUNT_API_LATEST = 1;

	public EcomInterface()
	{
	}

	public EcomInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void Checkout(ref CheckoutOptions options, object clientData, OnCheckoutCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		CheckoutOptionsInternal options2 = default(CheckoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_Checkout(base.InnerHandle, ref options2, clientDataPointer, OnCheckoutCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result CopyEntitlementById(ref CopyEntitlementByIdOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByIdOptionsInternal options2 = default(CopyEntitlementByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementById(base.InnerHandle, ref options2, out outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyEntitlementByIndex(ref CopyEntitlementByIndexOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByIndexOptionsInternal options2 = default(CopyEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementByIndex(base.InnerHandle, ref options2, out outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyEntitlementByNameAndIndex(ref CopyEntitlementByNameAndIndexOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByNameAndIndexOptionsInternal options2 = default(CopyEntitlementByNameAndIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementByNameAndIndex(base.InnerHandle, ref options2, out outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyItemById(ref CopyItemByIdOptions options, out CatalogItem? outItem)
	{
		CopyItemByIdOptionsInternal options2 = default(CopyItemByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outItem2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemById(base.InnerHandle, ref options2, out outItem2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogItemInternal, CatalogItem>(outItem2, out outItem);
		if (outItem2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_CatalogItem_Release(outItem2);
		}
		return result;
	}

	public Result CopyItemImageInfoByIndex(ref CopyItemImageInfoByIndexOptions options, out KeyImageInfo? outImageInfo)
	{
		CopyItemImageInfoByIndexOptionsInternal options2 = default(CopyItemImageInfoByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outImageInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemImageInfoByIndex(base.InnerHandle, ref options2, out outImageInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<KeyImageInfoInternal, KeyImageInfo>(outImageInfo2, out outImageInfo);
		if (outImageInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_KeyImageInfo_Release(outImageInfo2);
		}
		return result;
	}

	public Result CopyItemReleaseByIndex(ref CopyItemReleaseByIndexOptions options, out CatalogRelease? outRelease)
	{
		CopyItemReleaseByIndexOptionsInternal options2 = default(CopyItemReleaseByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outRelease2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemReleaseByIndex(base.InnerHandle, ref options2, out outRelease2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogReleaseInternal, CatalogRelease>(outRelease2, out outRelease);
		if (outRelease2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_CatalogRelease_Release(outRelease2);
		}
		return result;
	}

	public Result CopyLastRedeemedEntitlementByIndex(ref CopyLastRedeemedEntitlementByIndexOptions options, out Utf8String outRedeemedEntitlementId)
	{
		CopyLastRedeemedEntitlementByIndexOptionsInternal options2 = default(CopyLastRedeemedEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		int inOutRedeemedEntitlementIdLength = 33;
		IntPtr value = Helper.AddAllocation(inOutRedeemedEntitlementIdLength);
		Result result = Bindings.EOS_Ecom_CopyLastRedeemedEntitlementByIndex(base.InnerHandle, ref options2, value, ref inOutRedeemedEntitlementIdLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outRedeemedEntitlementId);
		Helper.Dispose(ref value);
		return result;
	}

	public Result CopyOfferById(ref CopyOfferByIdOptions options, out CatalogOffer? outOffer)
	{
		CopyOfferByIdOptionsInternal options2 = default(CopyOfferByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outOffer2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferById(base.InnerHandle, ref options2, out outOffer2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogOfferInternal, CatalogOffer>(outOffer2, out outOffer);
		if (outOffer2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_CatalogOffer_Release(outOffer2);
		}
		return result;
	}

	public Result CopyOfferByIndex(ref CopyOfferByIndexOptions options, out CatalogOffer? outOffer)
	{
		CopyOfferByIndexOptionsInternal options2 = default(CopyOfferByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outOffer2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferByIndex(base.InnerHandle, ref options2, out outOffer2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogOfferInternal, CatalogOffer>(outOffer2, out outOffer);
		if (outOffer2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_CatalogOffer_Release(outOffer2);
		}
		return result;
	}

	public Result CopyOfferImageInfoByIndex(ref CopyOfferImageInfoByIndexOptions options, out KeyImageInfo? outImageInfo)
	{
		CopyOfferImageInfoByIndexOptionsInternal options2 = default(CopyOfferImageInfoByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outImageInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferImageInfoByIndex(base.InnerHandle, ref options2, out outImageInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<KeyImageInfoInternal, KeyImageInfo>(outImageInfo2, out outImageInfo);
		if (outImageInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_KeyImageInfo_Release(outImageInfo2);
		}
		return result;
	}

	public Result CopyOfferItemByIndex(ref CopyOfferItemByIndexOptions options, out CatalogItem? outItem)
	{
		CopyOfferItemByIndexOptionsInternal options2 = default(CopyOfferItemByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outItem2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferItemByIndex(base.InnerHandle, ref options2, out outItem2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogItemInternal, CatalogItem>(outItem2, out outItem);
		if (outItem2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_CatalogItem_Release(outItem2);
		}
		return result;
	}

	public Result CopyTransactionById(ref CopyTransactionByIdOptions options, out Transaction outTransaction)
	{
		CopyTransactionByIdOptionsInternal options2 = default(CopyTransactionByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outTransaction2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyTransactionById(base.InnerHandle, ref options2, out outTransaction2);
		Helper.Dispose(ref options2);
		Helper.Get(outTransaction2, out outTransaction);
		return result;
	}

	public Result CopyTransactionByIndex(ref CopyTransactionByIndexOptions options, out Transaction outTransaction)
	{
		CopyTransactionByIndexOptionsInternal options2 = default(CopyTransactionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outTransaction2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyTransactionByIndex(base.InnerHandle, ref options2, out outTransaction2);
		Helper.Dispose(ref options2);
		Helper.Get(outTransaction2, out outTransaction);
		return result;
	}

	public uint GetEntitlementsByNameCount(ref GetEntitlementsByNameCountOptions options)
	{
		GetEntitlementsByNameCountOptionsInternal options2 = default(GetEntitlementsByNameCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetEntitlementsByNameCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetEntitlementsCount(ref GetEntitlementsCountOptions options)
	{
		GetEntitlementsCountOptionsInternal options2 = default(GetEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetItemImageInfoCount(ref GetItemImageInfoCountOptions options)
	{
		GetItemImageInfoCountOptionsInternal options2 = default(GetItemImageInfoCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetItemImageInfoCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetItemReleaseCount(ref GetItemReleaseCountOptions options)
	{
		GetItemReleaseCountOptionsInternal options2 = default(GetItemReleaseCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetItemReleaseCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLastRedeemedEntitlementsCount(ref GetLastRedeemedEntitlementsCountOptions options)
	{
		GetLastRedeemedEntitlementsCountOptionsInternal options2 = default(GetLastRedeemedEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetLastRedeemedEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferCount(ref GetOfferCountOptions options)
	{
		GetOfferCountOptionsInternal options2 = default(GetOfferCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferImageInfoCount(ref GetOfferImageInfoCountOptions options)
	{
		GetOfferImageInfoCountOptionsInternal options2 = default(GetOfferImageInfoCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferImageInfoCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferItemCount(ref GetOfferItemCountOptions options)
	{
		GetOfferItemCountOptionsInternal options2 = default(GetOfferItemCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferItemCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetTransactionCount(ref GetTransactionCountOptions options)
	{
		GetTransactionCountOptionsInternal options2 = default(GetTransactionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetTransactionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryEntitlementToken(ref QueryEntitlementTokenOptions options, object clientData, OnQueryEntitlementTokenCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryEntitlementTokenOptionsInternal options2 = default(QueryEntitlementTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryEntitlementToken(base.InnerHandle, ref options2, clientDataPointer, OnQueryEntitlementTokenCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryEntitlements(ref QueryEntitlementsOptions options, object clientData, OnQueryEntitlementsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryEntitlementsOptionsInternal options2 = default(QueryEntitlementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryEntitlements(base.InnerHandle, ref options2, clientDataPointer, OnQueryEntitlementsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryOffers(ref QueryOffersOptions options, object clientData, OnQueryOffersCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryOffersOptionsInternal options2 = default(QueryOffersOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryOffers(base.InnerHandle, ref options2, clientDataPointer, OnQueryOffersCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnership(ref QueryOwnershipOptions options, object clientData, OnQueryOwnershipCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryOwnershipOptionsInternal options2 = default(QueryOwnershipOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryOwnership(base.InnerHandle, ref options2, clientDataPointer, OnQueryOwnershipCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnershipBySandboxIds(ref QueryOwnershipBySandboxIdsOptions options, object clientData, OnQueryOwnershipBySandboxIdsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryOwnershipBySandboxIdsOptionsInternal options2 = default(QueryOwnershipBySandboxIdsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryOwnershipBySandboxIds(base.InnerHandle, ref options2, clientDataPointer, OnQueryOwnershipBySandboxIdsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnershipToken(ref QueryOwnershipTokenOptions options, object clientData, OnQueryOwnershipTokenCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryOwnershipTokenOptionsInternal options2 = default(QueryOwnershipTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_QueryOwnershipToken(base.InnerHandle, ref options2, clientDataPointer, OnQueryOwnershipTokenCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RedeemEntitlements(ref RedeemEntitlementsOptions options, object clientData, OnRedeemEntitlementsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		RedeemEntitlementsOptionsInternal options2 = default(RedeemEntitlementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Ecom_RedeemEntitlements(base.InnerHandle, ref options2, clientDataPointer, OnRedeemEntitlementsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


public enum EcomItemType
{
	Durable,
	Consumable,
	Other
}


using Epic.OnlineServices;

public struct Entitlement
{
	public Utf8String EntitlementName { get; set; }

	public Utf8String EntitlementId { get; set; }

	public Utf8String CatalogItemId { get; set; }

	public int ServerIndex { get; set; }

	public bool Redeemed { get; set; }

	public long EndTimestamp { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct EntitlementInternal : IGettable<Entitlement>
{
	private int m_ApiVersion;

	private IntPtr m_EntitlementName;

	private IntPtr m_EntitlementId;

	private IntPtr m_CatalogItemId;

	private int m_ServerIndex;

	private int m_Redeemed;

	private long m_EndTimestamp;

	public void Get(out Entitlement other)
	{
		other = default(Entitlement);
		Helper.Get(m_EntitlementName, out Utf8String to);
		other.EntitlementName = to;
		Helper.Get(m_EntitlementId, out Utf8String to2);
		other.EntitlementId = to2;
		Helper.Get(m_CatalogItemId, out Utf8String to3);
		other.CatalogItemId = to3;
		other.ServerIndex = m_ServerIndex;
		Helper.Get(m_Redeemed, out bool to4);
		other.Redeemed = to4;
		other.EndTimestamp = m_EndTimestamp;
	}
}


using Epic.OnlineServices;

public struct GetEntitlementsByNameCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetEntitlementsByNameCountOptionsInternal : ISettable<GetEntitlementsByNameCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementName;

	public void Set(ref GetEntitlementsByNameCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementName, ref m_EntitlementName);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementName);
	}
}


using Epic.OnlineServices;

public struct GetEntitlementsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetEntitlementsCountOptionsInternal : ISettable<GetEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetEntitlementsCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetItemImageInfoCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetItemImageInfoCountOptionsInternal : ISettable<GetItemImageInfoCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public void Set(ref GetItemImageInfoCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ItemId, ref m_ItemId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct GetItemReleaseCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetItemReleaseCountOptionsInternal : ISettable<GetItemReleaseCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public void Set(ref GetItemReleaseCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.ItemId, ref m_ItemId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct GetLastRedeemedEntitlementsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetLastRedeemedEntitlementsCountOptionsInternal : ISettable<GetLastRedeemedEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetLastRedeemedEntitlementsCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetOfferCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetOfferCountOptionsInternal : ISettable<GetOfferCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetOfferCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetOfferImageInfoCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetOfferImageInfoCountOptionsInternal : ISettable<GetOfferImageInfoCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public void Set(ref GetOfferImageInfoCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OfferId, ref m_OfferId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct GetOfferItemCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetOfferItemCountOptionsInternal : ISettable<GetOfferItemCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public void Set(ref GetOfferItemCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OfferId, ref m_OfferId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct GetTransactionCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct GetTransactionCountOptionsInternal : ISettable<GetTransactionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref GetTransactionCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct ItemOwnership
{
	public Utf8String Id { get; set; }

	public OwnershipStatus OwnershipStatus { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct ItemOwnershipInternal : IGettable<ItemOwnership>
{
	private int m_ApiVersion;

	private IntPtr m_Id;

	private OwnershipStatus m_OwnershipStatus;

	public void Get(out ItemOwnership other)
	{
		other = default(ItemOwnership);
		Helper.Get(m_Id, out Utf8String to);
		other.Id = to;
		other.OwnershipStatus = m_OwnershipStatus;
	}
}


using Epic.OnlineServices;

public struct KeyImageInfo
{
	public Utf8String Type { get; set; }

	public Utf8String Url { get; set; }

	public uint Width { get; set; }

	public uint Height { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct KeyImageInfoInternal : IGettable<KeyImageInfo>
{
	private int m_ApiVersion;

	private IntPtr m_Type;

	private IntPtr m_Url;

	private uint m_Width;

	private uint m_Height;

	public void Get(out KeyImageInfo other)
	{
		other = default(KeyImageInfo);
		Helper.Get(m_Type, out Utf8String to);
		other.Type = to;
		Helper.Get(m_Url, out Utf8String to2);
		other.Url = to2;
		other.Width = m_Width;
		other.Height = m_Height;
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnCheckoutCallback(ref CheckoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCheckoutCallbackInternal(ref CheckoutCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnCheckoutCallbackInternalImplementation
{
	private static OnCheckoutCallbackInternal s_Delegate;

	public static OnCheckoutCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCheckoutCallbackInternal))]
	public static void EntryPoint(ref CheckoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CheckoutCallbackInfoInternal, OnCheckoutCallback, CheckoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryEntitlementsCallback(ref QueryEntitlementsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryEntitlementsCallbackInternal(ref QueryEntitlementsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryEntitlementsCallbackInternalImplementation
{
	private static OnQueryEntitlementsCallbackInternal s_Delegate;

	public static OnQueryEntitlementsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryEntitlementsCallbackInternal))]
	public static void EntryPoint(ref QueryEntitlementsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryEntitlementsCallbackInfoInternal, OnQueryEntitlementsCallback, QueryEntitlementsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryEntitlementTokenCallback(ref QueryEntitlementTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryEntitlementTokenCallbackInternal(ref QueryEntitlementTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryEntitlementTokenCallbackInternalImplementation
{
	private static OnQueryEntitlementTokenCallbackInternal s_Delegate;

	public static OnQueryEntitlementTokenCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryEntitlementTokenCallbackInternal))]
	public static void EntryPoint(ref QueryEntitlementTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryEntitlementTokenCallbackInfoInternal, OnQueryEntitlementTokenCallback, QueryEntitlementTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOffersCallback(ref QueryOffersCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOffersCallbackInternal(ref QueryOffersCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryOffersCallbackInternalImplementation
{
	private static OnQueryOffersCallbackInternal s_Delegate;

	public static OnQueryOffersCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOffersCallbackInternal))]
	public static void EntryPoint(ref QueryOffersCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOffersCallbackInfoInternal, OnQueryOffersCallback, QueryOffersCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipBySandboxIdsCallback(ref QueryOwnershipBySandboxIdsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipBySandboxIdsCallbackInternal(ref QueryOwnershipBySandboxIdsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryOwnershipBySandboxIdsCallbackInternalImplementation
{
	private static OnQueryOwnershipBySandboxIdsCallbackInternal s_Delegate;

	public static OnQueryOwnershipBySandboxIdsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipBySandboxIdsCallbackInternal))]
	public static void EntryPoint(ref QueryOwnershipBySandboxIdsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipBySandboxIdsCallbackInfoInternal, OnQueryOwnershipBySandboxIdsCallback, QueryOwnershipBySandboxIdsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipCallback(ref QueryOwnershipCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipCallbackInternal(ref QueryOwnershipCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryOwnershipCallbackInternalImplementation
{
	private static OnQueryOwnershipCallbackInternal s_Delegate;

	public static OnQueryOwnershipCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipCallbackInternal))]
	public static void EntryPoint(ref QueryOwnershipCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipCallbackInfoInternal, OnQueryOwnershipCallback, QueryOwnershipCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipTokenCallback(ref QueryOwnershipTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipTokenCallbackInternal(ref QueryOwnershipTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnQueryOwnershipTokenCallbackInternalImplementation
{
	private static OnQueryOwnershipTokenCallbackInternal s_Delegate;

	public static OnQueryOwnershipTokenCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipTokenCallbackInternal))]
	public static void EntryPoint(ref QueryOwnershipTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipTokenCallbackInfoInternal, OnQueryOwnershipTokenCallback, QueryOwnershipTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnRedeemEntitlementsCallback(ref RedeemEntitlementsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRedeemEntitlementsCallbackInternal(ref RedeemEntitlementsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal static class OnRedeemEntitlementsCallbackInternalImplementation
{
	private static OnRedeemEntitlementsCallbackInternal s_Delegate;

	public static OnRedeemEntitlementsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRedeemEntitlementsCallbackInternal))]
	public static void EntryPoint(ref RedeemEntitlementsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RedeemEntitlementsCallbackInfoInternal, OnRedeemEntitlementsCallback, RedeemEntitlementsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum OwnershipStatus
{
	NotOwned,
	Owned
}


using Epic.OnlineServices;

public struct QueryEntitlementsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryEntitlementsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryEntitlementsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryEntitlementsCallbackInfo other)
	{
		other = default(QueryEntitlementsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryEntitlementsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementNames { get; set; }

	public bool IncludeRedeemed { get; set; }

	public Utf8String OverrideCatalogNamespace { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryEntitlementsOptionsInternal : ISettable<QueryEntitlementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementNames;

	private uint m_EntitlementNameCount;

	private int m_IncludeRedeemed;

	private IntPtr m_OverrideCatalogNamespace;

	public void Set(ref QueryEntitlementsOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementNames, ref m_EntitlementNames, out m_EntitlementNameCount, isArrayItemAllocated: true);
		Helper.Set(other.IncludeRedeemed, ref m_IncludeRedeemed);
		Helper.Set(other.OverrideCatalogNamespace, ref m_OverrideCatalogNamespace);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementNames);
		Helper.Dispose(ref m_OverrideCatalogNamespace);
	}
}


using Epic.OnlineServices;

public struct QueryEntitlementTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementToken { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryEntitlementTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryEntitlementTokenCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementToken;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryEntitlementTokenCallbackInfo other)
	{
		other = default(QueryEntitlementTokenCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_EntitlementToken, out Utf8String to3);
		other.EntitlementToken = to3;
	}
}


using Epic.OnlineServices;

public struct QueryEntitlementTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementNames { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryEntitlementTokenOptionsInternal : ISettable<QueryEntitlementTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementNames;

	private uint m_EntitlementNameCount;

	public void Set(ref QueryEntitlementTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementNames, ref m_EntitlementNames, out m_EntitlementNameCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementNames);
	}
}


using Epic.OnlineServices;

public struct QueryOffersCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOffersCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOffersCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryOffersCallbackInfo other)
	{
		other = default(QueryOffersCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryOffersOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OverrideCatalogNamespace { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOffersOptionsInternal : ISettable<QueryOffersOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OverrideCatalogNamespace;

	public void Set(ref QueryOffersOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.OverrideCatalogNamespace, ref m_OverrideCatalogNamespace);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OverrideCatalogNamespace);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOwnershipBySandboxIdsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public SandboxIdItemOwnership[] SandboxIdItemOwnerships { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipBySandboxIdsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipBySandboxIdsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_SandboxIdItemOwnerships;

	private uint m_SandboxIdItemOwnershipsCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryOwnershipBySandboxIdsCallbackInfo other)
	{
		other = default(QueryOwnershipBySandboxIdsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get<SandboxIdItemOwnershipInternal, SandboxIdItemOwnership>(m_SandboxIdItemOwnerships, out var to3, m_SandboxIdItemOwnershipsCount, isArrayItemAllocated: false);
		other.SandboxIdItemOwnerships = to3;
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipBySandboxIdsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] SandboxIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipBySandboxIdsOptionsInternal : ISettable<QueryOwnershipBySandboxIdsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SandboxIds;

	private uint m_SandboxIdsCount;

	public void Set(ref QueryOwnershipBySandboxIdsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.SandboxIds, ref m_SandboxIds, out m_SandboxIdsCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SandboxIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOwnershipCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public ItemOwnership[] ItemOwnership { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemOwnership;

	private uint m_ItemOwnershipCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryOwnershipCallbackInfo other)
	{
		other = default(QueryOwnershipCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get<ItemOwnershipInternal, ItemOwnership>(m_ItemOwnership, out var to3, m_ItemOwnershipCount, isArrayItemAllocated: false);
		other.ItemOwnership = to3;
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] CatalogItemIds { get; set; }

	public Utf8String CatalogNamespace { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipOptionsInternal : ISettable<QueryOwnershipOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_CatalogItemIds;

	private uint m_CatalogItemIdCount;

	private IntPtr m_CatalogNamespace;

	public void Set(ref QueryOwnershipOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.CatalogItemIds, ref m_CatalogItemIds, out m_CatalogItemIdCount, isArrayItemAllocated: true);
		Helper.Set(other.CatalogNamespace, ref m_CatalogNamespace);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CatalogItemIds);
		Helper.Dispose(ref m_CatalogNamespace);
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OwnershipToken { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipTokenCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_OwnershipToken;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryOwnershipTokenCallbackInfo other)
	{
		other = default(QueryOwnershipTokenCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_OwnershipToken, out Utf8String to3);
		other.OwnershipToken = to3;
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] CatalogItemIds { get; set; }

	public Utf8String CatalogNamespace { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct QueryOwnershipTokenOptionsInternal : ISettable<QueryOwnershipTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_CatalogItemIds;

	private uint m_CatalogItemIdCount;

	private IntPtr m_CatalogNamespace;

	public void Set(ref QueryOwnershipTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.CatalogItemIds, ref m_CatalogItemIds, out m_CatalogItemIdCount, isArrayItemAllocated: true);
		Helper.Set(other.CatalogNamespace, ref m_CatalogNamespace);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CatalogItemIds);
		Helper.Dispose(ref m_CatalogNamespace);
	}
}


using Epic.OnlineServices;

public struct RedeemEntitlementsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public uint RedeemedEntitlementIdsCount { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct RedeemEntitlementsCallbackInfoInternal : ICallbackInfoInternal, IGettable<RedeemEntitlementsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private uint m_RedeemedEntitlementIdsCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RedeemEntitlementsCallbackInfo other)
	{
		other = default(RedeemEntitlementsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		other.RedeemedEntitlementIdsCount = m_RedeemedEntitlementIdsCount;
	}
}


using Epic.OnlineServices;

public struct RedeemEntitlementsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct RedeemEntitlementsOptionsInternal : ISettable<RedeemEntitlementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_EntitlementIdCount;

	private IntPtr m_EntitlementIds;

	public void Set(ref RedeemEntitlementsOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.EntitlementIds, ref m_EntitlementIds, out m_EntitlementIdCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementIds);
	}
}


using Epic.OnlineServices;

public struct SandboxIdItemOwnership
{
	public Utf8String SandboxId { get; set; }

	public Utf8String[] OwnedCatalogItemIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct SandboxIdItemOwnershipInternal : IGettable<SandboxIdItemOwnership>
{
	private IntPtr m_SandboxId;

	private IntPtr m_OwnedCatalogItemIds;

	private uint m_OwnedCatalogItemIdsCount;

	public void Get(out SandboxIdItemOwnership other)
	{
		other = default(SandboxIdItemOwnership);
		Helper.Get(m_SandboxId, out Utf8String to);
		other.SandboxId = to;
		Helper.Get(m_OwnedCatalogItemIds, out var to2, m_OwnedCatalogItemIdsCount, isArrayItemAllocated: true);
		other.OwnedCatalogItemIds = to2;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public sealed class Transaction : Handle
{
	public Transaction()
	{
	}

	public Transaction(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyEntitlementByIndex(ref TransactionCopyEntitlementByIndexOptions options, out Entitlement? outEntitlement)
	{
		TransactionCopyEntitlementByIndexOptionsInternal options2 = default(TransactionCopyEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_Transaction_CopyEntitlementByIndex(base.InnerHandle, ref options2, out outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement2 != IntPtr.Zero)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public uint GetEntitlementsCount(ref TransactionGetEntitlementsCountOptions options)
	{
		TransactionGetEntitlementsCountOptionsInternal options2 = default(TransactionGetEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_Transaction_GetEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetTransactionId(out Utf8String outBuffer)
	{
		int inOutBufferLength = 65;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Ecom_Transaction_GetTransactionId(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_Ecom_Transaction_Release(base.InnerHandle);
	}
}


public struct TransactionCopyEntitlementByIndexOptions
{
	public uint EntitlementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct TransactionCopyEntitlementByIndexOptionsInternal : ISettable<TransactionCopyEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_EntitlementIndex;

	public void Set(ref TransactionCopyEntitlementByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_EntitlementIndex = other.EntitlementIndex;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct TransactionGetEntitlementsCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

internal struct TransactionGetEntitlementsCountOptionsInternal : ISettable<TransactionGetEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref TransactionGetEntitlementsCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AcceptRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AcceptRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<AcceptRequestToJoinCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out AcceptRequestToJoinCallbackInfo other)
	{
		other = default(AcceptRequestToJoinCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct AcceptRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AcceptRequestToJoinOptionsInternal : ISettable<AcceptRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref AcceptRequestToJoinOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteAcceptedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyCustomInviteAcceptedOptionsInternal : ISettable<AddNotifyCustomInviteAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteAcceptedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyCustomInviteReceivedOptionsInternal : ISettable<AddNotifyCustomInviteReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteRejectedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyCustomInviteRejectedOptionsInternal : ISettable<AddNotifyCustomInviteRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteRejectedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinAcceptedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyRequestToJoinAcceptedOptionsInternal : ISettable<AddNotifyRequestToJoinAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinAcceptedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyRequestToJoinReceivedOptionsInternal : ISettable<AddNotifyRequestToJoinReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinRejectedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyRequestToJoinRejectedOptionsInternal : ISettable<AddNotifyRequestToJoinRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinRejectedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinResponseReceivedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifyRequestToJoinResponseReceivedOptionsInternal : ISettable<AddNotifyRequestToJoinResponseReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinResponseReceivedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySendCustomNativeInviteRequestedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct AddNotifySendCustomNativeInviteRequestedOptionsInternal : ISettable<AddNotifySendCustomNativeInviteRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySendCustomNativeInviteRequestedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CustomInviteRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct CustomInviteRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<CustomInviteRejectedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CustomInviteRejectedCallbackInfo other)
	{
		other = default(CustomInviteRejectedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_CustomInviteId, out Utf8String to4);
		other.CustomInviteId = to4;
		Helper.Get(m_Payload, out Utf8String to5);
		other.Payload = to5;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public sealed class CustomInvitesInterface : Handle
{
	public const int ACCEPTREQUESTTOJOIN_API_LATEST = 1;

	public const int ADDNOTIFYCUSTOMINVITEACCEPTED_API_LATEST = 1;

	public const int ADDNOTIFYCUSTOMINVITERECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYCUSTOMINVITEREJECTED_API_LATEST = 1;

	public const int ADDNOTIFYREQUESTTOJOINACCEPTED_API_LATEST = 1;

	public const int ADDNOTIFYREQUESTTOJOINRECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYREQUESTTOJOINREJECTED_API_LATEST = 1;

	public const int ADDNOTIFYREQUESTTOJOINRESPONSERECEIVED_API_LATEST = 1;

	public const int ADDNOTIFYSENDCUSTOMNATIVEINVITEREQUESTED_API_LATEST = 1;

	public const int FINALIZEINVITE_API_LATEST = 1;

	public const int MAX_PAYLOAD_LENGTH = 500;

	public const int REJECTREQUESTTOJOIN_API_LATEST = 1;

	public const int SENDCUSTOMINVITE_API_LATEST = 1;

	public const int SENDREQUESTTOJOIN_API_LATEST = 1;

	public const int SETCUSTOMINVITE_API_LATEST = 1;

	public CustomInvitesInterface()
	{
	}

	public CustomInvitesInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void AcceptRequestToJoin(ref AcceptRequestToJoinOptions options, object clientData, OnAcceptRequestToJoinCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		AcceptRequestToJoinOptionsInternal options2 = default(AcceptRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_CustomInvites_AcceptRequestToJoin(base.InnerHandle, ref options2, clientDataPointer, OnAcceptRequestToJoinCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public ulong AddNotifyCustomInviteAccepted(ref AddNotifyCustomInviteAcceptedOptions options, object clientData, OnCustomInviteAcceptedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyCustomInviteAcceptedOptionsInternal options2 = default(AddNotifyCustomInviteAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteAccepted(base.InnerHandle, ref options2, clientDataPointer, OnCustomInviteAcceptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyCustomInviteReceived(ref AddNotifyCustomInviteReceivedOptions options, object clientData, OnCustomInviteReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyCustomInviteReceivedOptionsInternal options2 = default(AddNotifyCustomInviteReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteReceived(base.InnerHandle, ref options2, clientDataPointer, OnCustomInviteReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyCustomInviteRejected(ref AddNotifyCustomInviteRejectedOptions options, object clientData, OnCustomInviteRejectedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyCustomInviteRejectedOptionsInternal options2 = default(AddNotifyCustomInviteRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteRejected(base.InnerHandle, ref options2, clientDataPointer, OnCustomInviteRejectedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinAccepted(ref AddNotifyRequestToJoinAcceptedOptions options, object clientData, OnRequestToJoinAcceptedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyRequestToJoinAcceptedOptionsInternal options2 = default(AddNotifyRequestToJoinAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinAccepted(base.InnerHandle, ref options2, clientDataPointer, OnRequestToJoinAcceptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinReceived(ref AddNotifyRequestToJoinReceivedOptions options, object clientData, OnRequestToJoinReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyRequestToJoinReceivedOptionsInternal options2 = default(AddNotifyRequestToJoinReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinReceived(base.InnerHandle, ref options2, clientDataPointer, OnRequestToJoinReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinRejected(ref AddNotifyRequestToJoinRejectedOptions options, object clientData, OnRequestToJoinRejectedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyRequestToJoinRejectedOptionsInternal options2 = default(AddNotifyRequestToJoinRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinRejected(base.InnerHandle, ref options2, clientDataPointer, OnRequestToJoinRejectedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinResponseReceived(ref AddNotifyRequestToJoinResponseReceivedOptions options, object clientData, OnRequestToJoinResponseReceivedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyRequestToJoinResponseReceivedOptionsInternal options2 = default(AddNotifyRequestToJoinResponseReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived(base.InnerHandle, ref options2, clientDataPointer, OnRequestToJoinResponseReceivedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifySendCustomNativeInviteRequested(ref AddNotifySendCustomNativeInviteRequestedOptions options, object clientData, OnSendCustomNativeInviteRequestedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifySendCustomNativeInviteRequestedOptionsInternal options2 = default(AddNotifySendCustomNativeInviteRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested(base.InnerHandle, ref options2, clientDataPointer, OnSendCustomNativeInviteRequestedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result FinalizeInvite(ref FinalizeInviteOptions options)
	{
		FinalizeInviteOptionsInternal options2 = default(FinalizeInviteOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_CustomInvites_FinalizeInvite(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RejectRequestToJoin(ref RejectRequestToJoinOptions options, object clientData, OnRejectRequestToJoinCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		RejectRequestToJoinOptionsInternal options2 = default(RejectRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_CustomInvites_RejectRequestToJoin(base.InnerHandle, ref options2, clientDataPointer, OnRejectRequestToJoinCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyCustomInviteAccepted(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyCustomInviteReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyCustomInviteRejected(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinAccepted(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinRejected(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinResponseReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySendCustomNativeInviteRequested(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void SendCustomInvite(ref SendCustomInviteOptions options, object clientData, OnSendCustomInviteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		SendCustomInviteOptionsInternal options2 = default(SendCustomInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_CustomInvites_SendCustomInvite(base.InnerHandle, ref options2, clientDataPointer, OnSendCustomInviteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void SendRequestToJoin(ref SendRequestToJoinOptions options, object clientData, OnSendRequestToJoinCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		SendRequestToJoinOptionsInternal options2 = default(SendRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_CustomInvites_SendRequestToJoin(base.InnerHandle, ref options2, clientDataPointer, OnSendRequestToJoinCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public Result SetCustomInvite(ref SetCustomInviteOptions options)
	{
		SetCustomInviteOptionsInternal options2 = default(SetCustomInviteOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_CustomInvites_SetCustomInvite(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices;

public struct FinalizeInviteOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Result ProcessingResult { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct FinalizeInviteOptionsInternal : ISettable<FinalizeInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private Result m_ProcessingResult;

	public void Set(ref FinalizeInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.CustomInviteId, ref m_CustomInviteId);
		m_ProcessingResult = other.ProcessingResult;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CustomInviteId);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnAcceptRequestToJoinCallback(ref AcceptRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAcceptRequestToJoinCallbackInternal(ref AcceptRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnAcceptRequestToJoinCallbackInternalImplementation
{
	private static OnAcceptRequestToJoinCallbackInternal s_Delegate;

	public static OnAcceptRequestToJoinCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnAcceptRequestToJoinCallbackInternal))]
	public static void EntryPoint(ref AcceptRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<AcceptRequestToJoinCallbackInfoInternal, OnAcceptRequestToJoinCallback, AcceptRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteAcceptedCallback(ref OnCustomInviteAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteAcceptedCallbackInternal(ref OnCustomInviteAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnCustomInviteAcceptedCallbackInternalImplementation
{
	private static OnCustomInviteAcceptedCallbackInternal s_Delegate;

	public static OnCustomInviteAcceptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteAcceptedCallbackInternal))]
	public static void EntryPoint(ref OnCustomInviteAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnCustomInviteAcceptedCallbackInfoInternal, OnCustomInviteAcceptedCallback, OnCustomInviteAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnCustomInviteAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct OnCustomInviteAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnCustomInviteAcceptedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnCustomInviteAcceptedCallbackInfo other)
	{
		other = default(OnCustomInviteAcceptedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_CustomInviteId, out Utf8String to4);
		other.CustomInviteId = to4;
		Helper.Get(m_Payload, out Utf8String to5);
		other.Payload = to5;
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteReceivedCallback(ref OnCustomInviteReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteReceivedCallbackInternal(ref OnCustomInviteReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnCustomInviteReceivedCallbackInternalImplementation
{
	private static OnCustomInviteReceivedCallbackInternal s_Delegate;

	public static OnCustomInviteReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteReceivedCallbackInternal))]
	public static void EntryPoint(ref OnCustomInviteReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnCustomInviteReceivedCallbackInfoInternal, OnCustomInviteReceivedCallback, OnCustomInviteReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnCustomInviteReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct OnCustomInviteReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnCustomInviteReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnCustomInviteReceivedCallbackInfo other)
	{
		other = default(OnCustomInviteReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
		Helper.Get(m_CustomInviteId, out Utf8String to4);
		other.CustomInviteId = to4;
		Helper.Get(m_Payload, out Utf8String to5);
		other.Payload = to5;
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteRejectedCallback(ref CustomInviteRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteRejectedCallbackInternal(ref CustomInviteRejectedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnCustomInviteRejectedCallbackInternalImplementation
{
	private static OnCustomInviteRejectedCallbackInternal s_Delegate;

	public static OnCustomInviteRejectedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteRejectedCallbackInternal))]
	public static void EntryPoint(ref CustomInviteRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<CustomInviteRejectedCallbackInfoInternal, OnCustomInviteRejectedCallback, CustomInviteRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRejectRequestToJoinCallback(ref RejectRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectRequestToJoinCallbackInternal(ref RejectRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnRejectRequestToJoinCallbackInternalImplementation
{
	private static OnRejectRequestToJoinCallbackInternal s_Delegate;

	public static OnRejectRequestToJoinCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectRequestToJoinCallbackInternal))]
	public static void EntryPoint(ref RejectRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectRequestToJoinCallbackInfoInternal, OnRejectRequestToJoinCallback, RejectRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinAcceptedCallback(ref OnRequestToJoinAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinAcceptedCallbackInternal(ref OnRequestToJoinAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnRequestToJoinAcceptedCallbackInternalImplementation
{
	private static OnRequestToJoinAcceptedCallbackInternal s_Delegate;

	public static OnRequestToJoinAcceptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinAcceptedCallbackInternal))]
	public static void EntryPoint(ref OnRequestToJoinAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRequestToJoinAcceptedCallbackInfoInternal, OnRequestToJoinAcceptedCallback, OnRequestToJoinAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnRequestToJoinAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct OnRequestToJoinAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnRequestToJoinAcceptedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnRequestToJoinAcceptedCallbackInfo other)
	{
		other = default(OnRequestToJoinAcceptedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinReceivedCallback(ref RequestToJoinReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinReceivedCallbackInternal(ref RequestToJoinReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnRequestToJoinReceivedCallbackInternalImplementation
{
	private static OnRequestToJoinReceivedCallbackInternal s_Delegate;

	public static OnRequestToJoinReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinReceivedCallbackInternal))]
	public static void EntryPoint(ref RequestToJoinReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RequestToJoinReceivedCallbackInfoInternal, OnRequestToJoinReceivedCallback, RequestToJoinReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinRejectedCallback(ref OnRequestToJoinRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinRejectedCallbackInternal(ref OnRequestToJoinRejectedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnRequestToJoinRejectedCallbackInternalImplementation
{
	private static OnRequestToJoinRejectedCallbackInternal s_Delegate;

	public static OnRequestToJoinRejectedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinRejectedCallbackInternal))]
	public static void EntryPoint(ref OnRequestToJoinRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRequestToJoinRejectedCallbackInfoInternal, OnRequestToJoinRejectedCallback, OnRequestToJoinRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnRequestToJoinRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct OnRequestToJoinRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnRequestToJoinRejectedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnRequestToJoinRejectedCallbackInfo other)
	{
		other = default(OnRequestToJoinRejectedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinResponseReceivedCallback(ref RequestToJoinResponseReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinResponseReceivedCallbackInternal(ref RequestToJoinResponseReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnRequestToJoinResponseReceivedCallbackInternalImplementation
{
	private static OnRequestToJoinResponseReceivedCallbackInternal s_Delegate;

	public static OnRequestToJoinResponseReceivedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinResponseReceivedCallbackInternal))]
	public static void EntryPoint(ref RequestToJoinResponseReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RequestToJoinResponseReceivedCallbackInfoInternal, OnRequestToJoinResponseReceivedCallback, RequestToJoinResponseReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendCustomInviteCallback(ref SendCustomInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendCustomInviteCallbackInternal(ref SendCustomInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnSendCustomInviteCallbackInternalImplementation
{
	private static OnSendCustomInviteCallbackInternal s_Delegate;

	public static OnSendCustomInviteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendCustomInviteCallbackInternal))]
	public static void EntryPoint(ref SendCustomInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendCustomInviteCallbackInfoInternal, OnSendCustomInviteCallback, SendCustomInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendCustomNativeInviteRequestedCallback(ref SendCustomNativeInviteRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendCustomNativeInviteRequestedCallbackInternal(ref SendCustomNativeInviteRequestedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnSendCustomNativeInviteRequestedCallbackInternalImplementation
{
	private static OnSendCustomNativeInviteRequestedCallbackInternal s_Delegate;

	public static OnSendCustomNativeInviteRequestedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendCustomNativeInviteRequestedCallbackInternal))]
	public static void EntryPoint(ref SendCustomNativeInviteRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SendCustomNativeInviteRequestedCallbackInfoInternal, OnSendCustomNativeInviteRequestedCallback, SendCustomNativeInviteRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendRequestToJoinCallback(ref SendRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendRequestToJoinCallbackInternal(ref SendRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal static class OnSendRequestToJoinCallbackInternalImplementation
{
	private static OnSendRequestToJoinCallbackInternal s_Delegate;

	public static OnSendRequestToJoinCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnSendRequestToJoinCallbackInternal))]
	public static void EntryPoint(ref SendRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendRequestToJoinCallbackInfoInternal, OnSendRequestToJoinCallback, SendRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct RejectRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct RejectRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectRequestToJoinCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RejectRequestToJoinCallbackInfo other)
	{
		other = default(RejectRequestToJoinCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct RejectRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct RejectRequestToJoinOptionsInternal : ISettable<RejectRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref RejectRequestToJoinOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct RequestToJoinReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId FromUserId { get; set; }

	public ProductUserId ToUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct RequestToJoinReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestToJoinReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_FromUserId;

	private IntPtr m_ToUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RequestToJoinReceivedCallbackInfo other)
	{
		other = default(RequestToJoinReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_FromUserId, out ProductUserId to2);
		other.FromUserId = to2;
		Helper.Get(m_ToUserId, out ProductUserId to3);
		other.ToUserId = to3;
	}
}


public enum RequestToJoinResponse
{
	Accepted,
	Rejected
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct RequestToJoinResponseReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId FromUserId { get; set; }

	public ProductUserId ToUserId { get; set; }

	public RequestToJoinResponse Response { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct RequestToJoinResponseReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestToJoinResponseReceivedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_FromUserId;

	private IntPtr m_ToUserId;

	private RequestToJoinResponse m_Response;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out RequestToJoinResponseReceivedCallbackInfo other)
	{
		other = default(RequestToJoinResponseReceivedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_FromUserId, out ProductUserId to2);
		other.FromUserId = to2;
		Helper.Get(m_ToUserId, out ProductUserId to3);
		other.ToUserId = to3;
		other.Response = m_Response;
	}
}


using Epic.OnlineServices;

public struct SendCustomInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId[] TargetUserIds { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SendCustomInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendCustomInviteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserIds;

	private uint m_TargetUserIdsCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendCustomInviteCallbackInfo other)
	{
		other = default(SendCustomInviteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserIds, out ProductUserId[] to3, m_TargetUserIdsCount);
		other.TargetUserIds = to3;
	}
}


using Epic.OnlineServices;

public struct SendCustomInviteOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId[] TargetUserIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SendCustomInviteOptionsInternal : ISettable<SendCustomInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserIds;

	private uint m_TargetUserIdsCount;

	public void Set(ref SendCustomInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.TargetUserIds, ref m_TargetUserIds, out m_TargetUserIdsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserIds);
	}
}


using Epic.OnlineServices;

public struct SendCustomNativeInviteRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong UiEventId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String TargetNativeAccountType { get; set; }

	public Utf8String TargetUserNativeAccountId { get; set; }

	public Utf8String InviteId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SendCustomNativeInviteRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendCustomNativeInviteRequestedCallbackInfo>
{
	private IntPtr m_ClientData;

	private ulong m_UiEventId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetNativeAccountType;

	private IntPtr m_TargetUserNativeAccountId;

	private IntPtr m_InviteId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendCustomNativeInviteRequestedCallbackInfo other)
	{
		other = default(SendCustomNativeInviteRequestedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.UiEventId = m_UiEventId;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetNativeAccountType, out Utf8String to3);
		other.TargetNativeAccountType = to3;
		Helper.Get(m_TargetUserNativeAccountId, out Utf8String to4);
		other.TargetUserNativeAccountId = to4;
		Helper.Get(m_InviteId, out Utf8String to5);
		other.InviteId = to5;
	}
}


using Epic.OnlineServices;

public struct SendRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SendRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendRequestToJoinCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out SendRequestToJoinCallbackInfo other)
	{
		other = default(SendRequestToJoinCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetUserId, out ProductUserId to3);
		other.TargetUserId = to3;
	}
}


using Epic.OnlineServices;

public struct SendRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SendRequestToJoinOptionsInternal : ISettable<SendRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public void Set(ref SendRequestToJoinOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct SetCustomInviteOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Payload { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

internal struct SetCustomInviteOptionsInternal : ISettable<SetCustomInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Payload;

	public void Set(ref SetCustomInviteOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set(other.Payload, ref m_Payload);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Payload);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAuthExpirationOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct AddNotifyAuthExpirationOptionsInternal : ISettable<AddNotifyAuthExpirationOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAuthExpirationOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLoginStatusChangedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct AddNotifyLoginStatusChangedOptionsInternal : ISettable<AddNotifyLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLoginStatusChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AuthExpirationCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct AuthExpirationCallbackInfoInternal : ICallbackInfoInternal, IGettable<AuthExpirationCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out AuthExpirationCallbackInfo other)
	{
		other = default(AuthExpirationCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public sealed class ConnectInterface : Handle
{
	public const int ADDNOTIFYAUTHEXPIRATION_API_LATEST = 1;

	public const int ADDNOTIFYLOGINSTATUSCHANGED_API_LATEST = 1;

	public const int COPYIDTOKEN_API_LATEST = 1;

	public const int COPYPRODUCTUSEREXTERNALACCOUNTBYACCOUNTID_API_LATEST = 1;

	public const int COPYPRODUCTUSEREXTERNALACCOUNTBYACCOUNTTYPE_API_LATEST = 1;

	public const int COPYPRODUCTUSEREXTERNALACCOUNTBYINDEX_API_LATEST = 1;

	public const int COPYPRODUCTUSERINFO_API_LATEST = 1;

	public const int CREATEDEVICEID_API_LATEST = 1;

	public const int CREATEDEVICEID_DEVICEMODEL_MAX_LENGTH = 64;

	public const int CREATEUSER_API_LATEST = 1;

	public const int CREDENTIALS_API_LATEST = 1;

	public const int DELETEDEVICEID_API_LATEST = 1;

	public const int EXTERNALACCOUNTINFO_API_LATEST = 1;

	public const int EXTERNAL_ACCOUNT_ID_MAX_LENGTH = 256;

	public const int GETEXTERNALACCOUNTMAPPINGS_API_LATEST = 1;

	public const int GETEXTERNALACCOUNTMAPPING_API_LATEST = 1;

	public const int GETPRODUCTUSEREXTERNALACCOUNTCOUNT_API_LATEST = 1;

	public const int GETPRODUCTUSERIDMAPPING_API_LATEST = 1;

	public const int IDTOKEN_API_LATEST = 1;

	public const int LINKACCOUNT_API_LATEST = 1;

	public const int LOGIN_API_LATEST = 2;

	public const int LOGOUT_API_LATEST = 1;

	public const int ONAUTHEXPIRATIONCALLBACK_API_LATEST = 1;

	public const int QUERYEXTERNALACCOUNTMAPPINGS_API_LATEST = 1;

	public const int QUERYEXTERNALACCOUNTMAPPINGS_MAX_ACCOUNT_IDS = 128;

	public const int QUERYPRODUCTUSERIDMAPPINGS_API_LATEST = 2;

	public const int TIME_UNDEFINED = -1;

	public const int TRANSFERDEVICEIDACCOUNT_API_LATEST = 1;

	public const int UNLINKACCOUNT_API_LATEST = 1;

	public const int USERLOGININFO_API_LATEST = 2;

	public const int USERLOGININFO_DISPLAYNAME_MAX_LENGTH = 32;

	public const int VERIFYIDTOKEN_API_LATEST = 1;

	public ConnectInterface()
	{
	}

	public ConnectInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyAuthExpiration(ref AddNotifyAuthExpirationOptions options, object clientData, OnAuthExpirationCallback notification)
	{
		if (notification == null)
		{
			throw new ArgumentNullException("notification");
		}
		AddNotifyAuthExpirationOptionsInternal options2 = default(AddNotifyAuthExpirationOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notification);
		ulong num = Bindings.EOS_Connect_AddNotifyAuthExpiration(base.InnerHandle, ref options2, clientDataPointer, OnAuthExpirationCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyLoginStatusChanged(ref AddNotifyLoginStatusChangedOptions options, object clientData, OnLoginStatusChangedCallback notification)
	{
		if (notification == null)
		{
			throw new ArgumentNullException("notification");
		}
		AddNotifyLoginStatusChangedOptionsInternal options2 = default(AddNotifyLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notification);
		ulong num = Bindings.EOS_Connect_AddNotifyLoginStatusChanged(base.InnerHandle, ref options2, clientDataPointer, OnLoginStatusChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyIdToken(ref CopyIdTokenOptions options, out IdToken? outIdToken)
	{
		CopyIdTokenOptionsInternal options2 = default(CopyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr outIdToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyIdToken(base.InnerHandle, ref options2, out outIdToken2);
		Helper.Dispose(ref options2);
		Helper.Get<IdTokenInternal, IdToken>(outIdToken2, out outIdToken);
		if (outIdToken2 != IntPtr.Zero)
		{
			Bindings.EOS_Connect_IdToken_Release(outIdToken2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByAccountId(ref CopyProductUserExternalAccountByAccountIdOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByAccountIdOptionsInternal options2 = default(CopyProductUserExternalAccountByAccountIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByAccountId(base.InnerHandle, ref options2, out outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByAccountType(ref CopyProductUserExternalAccountByAccountTypeOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByAccountTypeOptionsInternal options2 = default(CopyProductUserExternalAccountByAccountTypeOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByAccountType(base.InnerHandle, ref options2, out outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByIndex(ref CopyProductUserExternalAccountByIndexOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByIndexOptionsInternal options2 = default(CopyProductUserExternalAccountByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByIndex(base.InnerHandle, ref options2, out outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserInfo(ref CopyProductUserInfoOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserInfoOptionsInternal options2 = default(CopyProductUserInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserInfo(base.InnerHandle, ref options2, out outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo2 != IntPtr.Zero)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public void CreateDeviceId(ref CreateDeviceIdOptions options, object clientData, OnCreateDeviceIdCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		CreateDeviceIdOptionsInternal options2 = default(CreateDeviceIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_CreateDeviceId(base.InnerHandle, ref options2, clientDataPointer, OnCreateDeviceIdCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void CreateUser(ref CreateUserOptions options, object clientData, OnCreateUserCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		CreateUserOptionsInternal options2 = default(CreateUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_CreateUser(base.InnerHandle, ref options2, clientDataPointer, OnCreateUserCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void DeleteDeviceId(ref DeleteDeviceIdOptions options, object clientData, OnDeleteDeviceIdCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		DeleteDeviceIdOptionsInternal options2 = default(DeleteDeviceIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_DeleteDeviceId(base.InnerHandle, ref options2, clientDataPointer, OnDeleteDeviceIdCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public ProductUserId GetExternalAccountMapping(ref GetExternalAccountMappingsOptions options)
	{
		GetExternalAccountMappingsOptionsInternal options2 = default(GetExternalAccountMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Connect_GetExternalAccountMapping(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public ProductUserId GetLoggedInUserByIndex(int index)
	{
		Helper.Get(Bindings.EOS_Connect_GetLoggedInUserByIndex(base.InnerHandle, index), out ProductUserId to);
		return to;
	}

	public int GetLoggedInUsersCount()
	{
		return Bindings.EOS_Connect_GetLoggedInUsersCount(base.InnerHandle);
	}

	public LoginStatus GetLoginStatus(ProductUserId localUserId)
	{
		return Bindings.EOS_Connect_GetLoginStatus(base.InnerHandle, localUserId.InnerHandle);
	}

	public uint GetProductUserExternalAccountCount(ref GetProductUserExternalAccountCountOptions options)
	{
		GetProductUserExternalAccountCountOptionsInternal options2 = default(GetProductUserExternalAccountCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Connect_GetProductUserExternalAccountCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProductUserIdMapping(ref GetProductUserIdMappingOptions options, out Utf8String outBuffer)
	{
		GetProductUserIdMappingOptionsInternal options2 = default(GetProductUserIdMappingOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 257;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Connect_GetProductUserIdMapping(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void LinkAccount(ref LinkAccountOptions options, object clientData, OnLinkAccountCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LinkAccountOptionsInternal options2 = default(LinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_LinkAccount(base.InnerHandle, ref options2, clientDataPointer, OnLinkAccountCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void Login(ref LoginOptions options, object clientData, OnLoginCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LoginOptionsInternal options2 = default(LoginOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_Login(base.InnerHandle, ref options2, clientDataPointer, OnLoginCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void Logout(ref LogoutOptions options, object clientData, OnLogoutCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LogoutOptionsInternal options2 = default(LogoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_Logout(base.InnerHandle, ref options2, clientDataPointer, OnLogoutCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryExternalAccountMappings(ref QueryExternalAccountMappingsOptions options, object clientData, OnQueryExternalAccountMappingsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryExternalAccountMappingsOptionsInternal options2 = default(QueryExternalAccountMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_QueryExternalAccountMappings(base.InnerHandle, ref options2, clientDataPointer, OnQueryExternalAccountMappingsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryProductUserIdMappings(ref QueryProductUserIdMappingsOptions options, object clientData, OnQueryProductUserIdMappingsCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryProductUserIdMappingsOptionsInternal options2 = default(QueryProductUserIdMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_QueryProductUserIdMappings(base.InnerHandle, ref options2, clientDataPointer, OnQueryProductUserIdMappingsCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyAuthExpiration(ulong inId)
	{
		Bindings.EOS_Connect_RemoveNotifyAuthExpiration(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLoginStatusChanged(ulong inId)
	{
		Bindings.EOS_Connect_RemoveNotifyLoginStatusChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void TransferDeviceIdAccount(ref TransferDeviceIdAccountOptions options, object clientData, OnTransferDeviceIdAccountCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		TransferDeviceIdAccountOptionsInternal options2 = default(TransferDeviceIdAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_TransferDeviceIdAccount(base.InnerHandle, ref options2, clientDataPointer, OnTransferDeviceIdAccountCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void UnlinkAccount(ref UnlinkAccountOptions options, object clientData, OnUnlinkAccountCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UnlinkAccountOptionsInternal options2 = default(UnlinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_UnlinkAccount(base.InnerHandle, ref options2, clientDataPointer, OnUnlinkAccountCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void VerifyIdToken(ref VerifyIdTokenOptions options, object clientData, OnVerifyIdTokenCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		VerifyIdTokenOptionsInternal options2 = default(VerifyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Connect_VerifyIdToken(base.InnerHandle, ref options2, clientDataPointer, OnVerifyIdTokenCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using Epic.OnlineServices;

public struct CopyIdTokenOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CopyIdTokenOptionsInternal : ISettable<CopyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref CopyIdTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByAccountIdOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AccountId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CopyProductUserExternalAccountByAccountIdOptionsInternal : ISettable<CopyProductUserExternalAccountByAccountIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AccountId;

	public void Set(ref CopyProductUserExternalAccountByAccountIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set(other.AccountId, ref m_AccountId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AccountId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByAccountTypeOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CopyProductUserExternalAccountByAccountTypeOptionsInternal : ISettable<CopyProductUserExternalAccountByAccountTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private ExternalAccountType m_AccountIdType;

	public void Set(ref CopyProductUserExternalAccountByAccountTypeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		m_AccountIdType = other.AccountIdType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint ExternalAccountInfoIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CopyProductUserExternalAccountByIndexOptionsInternal : ISettable<CopyProductUserExternalAccountByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_ExternalAccountInfoIndex;

	public void Set(ref CopyProductUserExternalAccountByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		m_ExternalAccountInfoIndex = other.ExternalAccountInfoIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserInfoOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CopyProductUserInfoOptionsInternal : ISettable<CopyProductUserInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public void Set(ref CopyProductUserInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CreateDeviceIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CreateDeviceIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateDeviceIdCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CreateDeviceIdCallbackInfo other)
	{
		other = default(CreateDeviceIdCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices;

public struct CreateDeviceIdOptions
{
	public Utf8String DeviceModel { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CreateDeviceIdOptionsInternal : ISettable<CreateDeviceIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DeviceModel;

	public void Set(ref CreateDeviceIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.DeviceModel, ref m_DeviceModel);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceModel);
	}
}


using Epic.OnlineServices;

public struct CreateUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CreateUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateUserCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out CreateUserCallbackInfo other)
	{
		other = default(CreateUserCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct CreateUserOptions
{
	public ContinuanceToken ContinuanceToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CreateUserOptionsInternal : ISettable<CreateUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ContinuanceToken;

	public void Set(ref CreateUserOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.ContinuanceToken, ref m_ContinuanceToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ContinuanceToken);
	}
}


using Epic.OnlineServices;

public struct Credentials
{
	public Utf8String Token { get; set; }

	public ExternalCredentialType Type { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct CredentialsInternal : ISettable<Credentials>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Token;

	private ExternalCredentialType m_Type;

	public void Set(ref Credentials other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Token, ref m_Token);
		m_Type = other.Type;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Token);
	}
}


using Epic.OnlineServices;

public struct DeleteDeviceIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct DeleteDeviceIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteDeviceIdCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DeleteDeviceIdCallbackInfo other)
	{
		other = default(DeleteDeviceIdCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct DeleteDeviceIdOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct DeleteDeviceIdOptionsInternal : ISettable<DeleteDeviceIdOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref DeleteDeviceIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;

public struct ExternalAccountInfo
{
	public ProductUserId ProductUserId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String AccountId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public DateTimeOffset? LastLoginTime { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct ExternalAccountInfoInternal : IGettable<ExternalAccountInfo>
{
	private int m_ApiVersion;

	private IntPtr m_ProductUserId;

	private IntPtr m_DisplayName;

	private IntPtr m_AccountId;

	private ExternalAccountType m_AccountIdType;

	private long m_LastLoginTime;

	public void Get(out ExternalAccountInfo other)
	{
		other = default(ExternalAccountInfo);
		Helper.Get(m_ProductUserId, out ProductUserId to);
		other.ProductUserId = to;
		Helper.Get(m_DisplayName, out Utf8String to2);
		other.DisplayName = to2;
		Helper.Get(m_AccountId, out Utf8String to3);
		other.AccountId = to3;
		other.AccountIdType = m_AccountIdType;
		Helper.Get(m_LastLoginTime, out DateTimeOffset? to4);
		other.LastLoginTime = to4;
	}
}


using Epic.OnlineServices;

public struct GetExternalAccountMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String TargetExternalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct GetExternalAccountMappingsOptionsInternal : ISettable<GetExternalAccountMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_TargetExternalUserId;

	public void Set(ref GetExternalAccountMappingsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_AccountIdType = other.AccountIdType;
		Helper.Set(other.TargetExternalUserId, ref m_TargetExternalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetExternalUserId);
	}
}


using Epic.OnlineServices;

public struct GetProductUserExternalAccountCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct GetProductUserExternalAccountCountOptionsInternal : ISettable<GetProductUserExternalAccountCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public void Set(ref GetProductUserExternalAccountCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct GetProductUserIdMappingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public ProductUserId TargetProductUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct GetProductUserIdMappingOptionsInternal : ISettable<GetProductUserIdMappingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_TargetProductUserId;

	public void Set(ref GetProductUserIdMappingOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_AccountIdType = other.AccountIdType;
		Helper.Set((Handle)other.TargetProductUserId, ref m_TargetProductUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetProductUserId);
	}
}


using Epic.OnlineServices;

public struct IdToken
{
	public ProductUserId ProductUserId { get; set; }

	public Utf8String JsonWebToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct IdTokenInternal : IGettable<IdToken>, ISettable<IdToken>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ProductUserId;

	private IntPtr m_JsonWebToken;

	public void Get(out IdToken other)
	{
		other = default(IdToken);
		Helper.Get(m_ProductUserId, out ProductUserId to);
		other.ProductUserId = to;
		Helper.Get(m_JsonWebToken, out Utf8String to2);
		other.JsonWebToken = to2;
	}

	public void Set(ref IdToken other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.ProductUserId, ref m_ProductUserId);
		Helper.Set(other.JsonWebToken, ref m_JsonWebToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ProductUserId);
		Helper.Dispose(ref m_JsonWebToken);
	}
}


using Epic.OnlineServices;

public struct LinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<LinkAccountCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LinkAccountCallbackInfo other)
	{
		other = default(LinkAccountCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct LinkAccountOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LinkAccountOptionsInternal : ISettable<LinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ContinuanceToken;

	public void Set(ref LinkAccountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.ContinuanceToken, ref m_ContinuanceToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ContinuanceToken);
	}
}


using Epic.OnlineServices;

public struct LoginCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LoginCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_ContinuanceToken;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LoginCallbackInfo other)
	{
		other = default(LoginCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_ContinuanceToken, out ContinuanceToken to3);
		other.ContinuanceToken = to3;
	}
}


using Epic.OnlineServices.Connect;

public struct LoginOptions
{
	public Credentials? Credentials { get; set; }

	public UserLoginInfo? UserLoginInfo { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LoginOptionsInternal : ISettable<LoginOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Credentials;

	private IntPtr m_UserLoginInfo;

	public void Set(ref LoginOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set<Credentials, CredentialsInternal>(other.Credentials, ref m_Credentials);
		Helper.Set<UserLoginInfo, UserLoginInfoInternal>(other.UserLoginInfo, ref m_UserLoginInfo);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Credentials);
		Helper.Dispose(ref m_UserLoginInfo);
	}
}


using Epic.OnlineServices;

public struct LoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public LoginStatus PreviousStatus { get; set; }

	public LoginStatus CurrentStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginStatusChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private LoginStatus m_PreviousStatus;

	private LoginStatus m_CurrentStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LoginStatusChangedCallbackInfo other)
	{
		other = default(LoginStatusChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		other.PreviousStatus = m_PreviousStatus;
		other.CurrentStatus = m_CurrentStatus;
	}
}


using Epic.OnlineServices;

public struct LogoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<LogoutCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LogoutCallbackInfo other)
	{
		other = default(LogoutCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct LogoutOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct LogoutOptionsInternal : ISettable<LogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref LogoutOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnAuthExpirationCallback(ref AuthExpirationCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAuthExpirationCallbackInternal(ref AuthExpirationCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnAuthExpirationCallbackInternalImplementation
{
	private static OnAuthExpirationCallbackInternal s_Delegate;

	public static OnAuthExpirationCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnAuthExpirationCallbackInternal))]
	public static void EntryPoint(ref AuthExpirationCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AuthExpirationCallbackInfoInternal, OnAuthExpirationCallback, AuthExpirationCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnCreateDeviceIdCallback(ref CreateDeviceIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateDeviceIdCallbackInternal(ref CreateDeviceIdCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnCreateDeviceIdCallbackInternalImplementation
{
	private static OnCreateDeviceIdCallbackInternal s_Delegate;

	public static OnCreateDeviceIdCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateDeviceIdCallbackInternal))]
	public static void EntryPoint(ref CreateDeviceIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateDeviceIdCallbackInfoInternal, OnCreateDeviceIdCallback, CreateDeviceIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnCreateUserCallback(ref CreateUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateUserCallbackInternal(ref CreateUserCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnCreateUserCallbackInternalImplementation
{
	private static OnCreateUserCallbackInternal s_Delegate;

	public static OnCreateUserCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateUserCallbackInternal))]
	public static void EntryPoint(ref CreateUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateUserCallbackInfoInternal, OnCreateUserCallback, CreateUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnDeleteDeviceIdCallback(ref DeleteDeviceIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteDeviceIdCallbackInternal(ref DeleteDeviceIdCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnDeleteDeviceIdCallbackInternalImplementation
{
	private static OnDeleteDeviceIdCallbackInternal s_Delegate;

	public static OnDeleteDeviceIdCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDeleteDeviceIdCallbackInternal))]
	public static void EntryPoint(ref DeleteDeviceIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteDeviceIdCallbackInfoInternal, OnDeleteDeviceIdCallback, DeleteDeviceIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnLinkAccountCallback(ref LinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLinkAccountCallbackInternal(ref LinkAccountCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnLinkAccountCallbackInternalImplementation
{
	private static OnLinkAccountCallbackInternal s_Delegate;

	public static OnLinkAccountCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLinkAccountCallbackInternal))]
	public static void EntryPoint(ref LinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LinkAccountCallbackInfoInternal, OnLinkAccountCallback, LinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnLoginCallback(ref LoginCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginCallbackInternal(ref LoginCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnLoginCallbackInternalImplementation
{
	private static OnLoginCallbackInternal s_Delegate;

	public static OnLoginCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginCallbackInternal))]
	public static void EntryPoint(ref LoginCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LoginCallbackInfoInternal, OnLoginCallback, LoginCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnLoginStatusChangedCallback(ref LoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginStatusChangedCallbackInternal(ref LoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnLoginStatusChangedCallbackInternalImplementation
{
	private static OnLoginStatusChangedCallbackInternal s_Delegate;

	public static OnLoginStatusChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginStatusChangedCallbackInternal))]
	public static void EntryPoint(ref LoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LoginStatusChangedCallbackInfoInternal, OnLoginStatusChangedCallback, LoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnLogoutCallback(ref LogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLogoutCallbackInternal(ref LogoutCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnLogoutCallbackInternalImplementation
{
	private static OnLogoutCallbackInternal s_Delegate;

	public static OnLogoutCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLogoutCallbackInternal))]
	public static void EntryPoint(ref LogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LogoutCallbackInfoInternal, OnLogoutCallback, LogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnQueryExternalAccountMappingsCallback(ref QueryExternalAccountMappingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryExternalAccountMappingsCallbackInternal(ref QueryExternalAccountMappingsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnQueryExternalAccountMappingsCallbackInternalImplementation
{
	private static OnQueryExternalAccountMappingsCallbackInternal s_Delegate;

	public static OnQueryExternalAccountMappingsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryExternalAccountMappingsCallbackInternal))]
	public static void EntryPoint(ref QueryExternalAccountMappingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryExternalAccountMappingsCallbackInfoInternal, OnQueryExternalAccountMappingsCallback, QueryExternalAccountMappingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnQueryProductUserIdMappingsCallback(ref QueryProductUserIdMappingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryProductUserIdMappingsCallbackInternal(ref QueryProductUserIdMappingsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnQueryProductUserIdMappingsCallbackInternalImplementation
{
	private static OnQueryProductUserIdMappingsCallbackInternal s_Delegate;

	public static OnQueryProductUserIdMappingsCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryProductUserIdMappingsCallbackInternal))]
	public static void EntryPoint(ref QueryProductUserIdMappingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryProductUserIdMappingsCallbackInfoInternal, OnQueryProductUserIdMappingsCallback, QueryProductUserIdMappingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnTransferDeviceIdAccountCallback(ref TransferDeviceIdAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnTransferDeviceIdAccountCallbackInternal(ref TransferDeviceIdAccountCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnTransferDeviceIdAccountCallbackInternalImplementation
{
	private static OnTransferDeviceIdAccountCallbackInternal s_Delegate;

	public static OnTransferDeviceIdAccountCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnTransferDeviceIdAccountCallbackInternal))]
	public static void EntryPoint(ref TransferDeviceIdAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<TransferDeviceIdAccountCallbackInfoInternal, OnTransferDeviceIdAccountCallback, TransferDeviceIdAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnUnlinkAccountCallback(ref UnlinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnlinkAccountCallbackInternal(ref UnlinkAccountCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnUnlinkAccountCallbackInternalImplementation
{
	private static OnUnlinkAccountCallbackInternal s_Delegate;

	public static OnUnlinkAccountCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUnlinkAccountCallbackInternal))]
	public static void EntryPoint(ref UnlinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UnlinkAccountCallbackInfoInternal, OnUnlinkAccountCallback, UnlinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnVerifyIdTokenCallback(ref VerifyIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyIdTokenCallbackInternal(ref VerifyIdTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal static class OnVerifyIdTokenCallbackInternalImplementation
{
	private static OnVerifyIdTokenCallbackInternal s_Delegate;

	public static OnVerifyIdTokenCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyIdTokenCallbackInternal))]
	public static void EntryPoint(ref VerifyIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyIdTokenCallbackInfoInternal, OnVerifyIdTokenCallback, VerifyIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct QueryExternalAccountMappingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct QueryExternalAccountMappingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryExternalAccountMappingsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryExternalAccountMappingsCallbackInfo other)
	{
		other = default(QueryExternalAccountMappingsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryExternalAccountMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String[] ExternalAccountIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct QueryExternalAccountMappingsOptionsInternal : ISettable<QueryExternalAccountMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_ExternalAccountIds;

	private uint m_ExternalAccountIdCount;

	public void Set(ref QueryExternalAccountMappingsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_AccountIdType = other.AccountIdType;
		Helper.Set(other.ExternalAccountIds, ref m_ExternalAccountIds, out m_ExternalAccountIdCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ExternalAccountIds);
	}
}


using Epic.OnlineServices;

public struct QueryProductUserIdMappingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct QueryProductUserIdMappingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryProductUserIdMappingsCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryProductUserIdMappingsCallbackInfo other)
	{
		other = default(QueryProductUserIdMappingsCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct QueryProductUserIdMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType_DEPRECATED { get; set; }

	public ProductUserId[] ProductUserIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct QueryProductUserIdMappingsOptionsInternal : ISettable<QueryProductUserIdMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType_DEPRECATED;

	private IntPtr m_ProductUserIds;

	private uint m_ProductUserIdCount;

	public void Set(ref QueryProductUserIdMappingsOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_AccountIdType_DEPRECATED = other.AccountIdType_DEPRECATED;
		Helper.Set(other.ProductUserIds, ref m_ProductUserIds, out m_ProductUserIdCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ProductUserIds);
	}
}


using Epic.OnlineServices;

public struct TransferDeviceIdAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct TransferDeviceIdAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<TransferDeviceIdAccountCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out TransferDeviceIdAccountCallbackInfo other)
	{
		other = default(TransferDeviceIdAccountCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct TransferDeviceIdAccountOptions
{
	public ProductUserId PrimaryLocalUserId { get; set; }

	public ProductUserId LocalDeviceUserId { get; set; }

	public ProductUserId ProductUserIdToPreserve { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct TransferDeviceIdAccountOptionsInternal : ISettable<TransferDeviceIdAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PrimaryLocalUserId;

	private IntPtr m_LocalDeviceUserId;

	private IntPtr m_ProductUserIdToPreserve;

	public void Set(ref TransferDeviceIdAccountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.PrimaryLocalUserId, ref m_PrimaryLocalUserId);
		Helper.Set((Handle)other.LocalDeviceUserId, ref m_LocalDeviceUserId);
		Helper.Set((Handle)other.ProductUserIdToPreserve, ref m_ProductUserIdToPreserve);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PrimaryLocalUserId);
		Helper.Dispose(ref m_LocalDeviceUserId);
		Helper.Dispose(ref m_ProductUserIdToPreserve);
	}
}


using Epic.OnlineServices;

public struct UnlinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct UnlinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<UnlinkAccountCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out UnlinkAccountCallbackInfo other)
	{
		other = default(UnlinkAccountCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct UnlinkAccountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct UnlinkAccountOptionsInternal : ISettable<UnlinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref UnlinkAccountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct UserLoginInfo
{
	public Utf8String DisplayName { get; set; }

	public Utf8String NsaIdToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct UserLoginInfoInternal : ISettable<UserLoginInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DisplayName;

	private IntPtr m_NsaIdToken;

	public void Set(ref UserLoginInfo other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.DisplayName, ref m_DisplayName);
		Helper.Set(other.NsaIdToken, ref m_NsaIdToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_NsaIdToken);
	}
}


using Epic.OnlineServices;

public struct VerifyIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public bool IsAccountInfoPresent { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String AccountId { get; set; }

	public Utf8String Platform { get; set; }

	public Utf8String DeviceType { get; set; }

	public Utf8String ClientId { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public Utf8String DeploymentId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_ProductUserId;

	private int m_IsAccountInfoPresent;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_AccountId;

	private IntPtr m_Platform;

	private IntPtr m_DeviceType;

	private IntPtr m_ClientId;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private IntPtr m_DeploymentId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out VerifyIdTokenCallbackInfo other)
	{
		other = default(VerifyIdTokenCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_ProductUserId, out ProductUserId to2);
		other.ProductUserId = to2;
		Helper.Get(m_IsAccountInfoPresent, out bool to3);
		other.IsAccountInfoPresent = to3;
		other.AccountIdType = m_AccountIdType;
		Helper.Get(m_AccountId, out Utf8String to4);
		other.AccountId = to4;
		Helper.Get(m_Platform, out Utf8String to5);
		other.Platform = to5;
		Helper.Get(m_DeviceType, out Utf8String to6);
		other.DeviceType = to6;
		Helper.Get(m_ClientId, out Utf8String to7);
		other.ClientId = to7;
		Helper.Get(m_ProductId, out Utf8String to8);
		other.ProductId = to8;
		Helper.Get(m_SandboxId, out Utf8String to9);
		other.SandboxId = to9;
		Helper.Get(m_DeploymentId, out Utf8String to10);
		other.DeploymentId = to10;
	}
}


using Epic.OnlineServices.Connect;

public struct VerifyIdTokenOptions
{
	public IdToken? IdToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

internal struct VerifyIdTokenOptionsInternal : ISettable<VerifyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_IdToken;

	public void Set(ref VerifyIdTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<IdToken, IdTokenInternal>(other.IdToken, ref m_IdToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_IdToken);
	}
}


using Epic.OnlineServices;

public struct AccountFeatureRestrictedInfo
{
	public Utf8String VerificationURI { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct AccountFeatureRestrictedInfoInternal : IGettable<AccountFeatureRestrictedInfo>
{
	private int m_ApiVersion;

	private IntPtr m_VerificationURI;

	public void Get(out AccountFeatureRestrictedInfo other)
	{
		other = default(AccountFeatureRestrictedInfo);
		Helper.Get(m_VerificationURI, out Utf8String to);
		other.VerificationURI = to;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLoginStatusChangedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct AddNotifyLoginStatusChangedOptionsInternal : ISettable<AddNotifyLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLoginStatusChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public sealed class AuthInterface : Handle
{
	public const int ACCOUNTFEATURERESTRICTEDINFO_API_LATEST = 1;

	public const int ADDNOTIFYLOGINSTATUSCHANGED_API_LATEST = 1;

	public const int COPYIDTOKEN_API_LATEST = 1;

	public const int COPYUSERAUTHTOKEN_API_LATEST = 1;

	public const int CREDENTIALS_API_LATEST = 4;

	public const int DELETEPERSISTENTAUTH_API_LATEST = 2;

	public const int IDTOKEN_API_LATEST = 1;

	public const int LINKACCOUNT_API_LATEST = 1;

	public const int LOGIN_API_LATEST = 3;

	public const int LOGOUT_API_LATEST = 1;

	public const int PINGRANTINFO_API_LATEST = 2;

	public const int QUERYIDTOKEN_API_LATEST = 1;

	public const int TOKEN_API_LATEST = 2;

	public const int VERIFYIDTOKEN_API_LATEST = 1;

	public const int VERIFYUSERAUTH_API_LATEST = 1;

	public AuthInterface()
	{
	}

	public AuthInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyLoginStatusChanged(ref AddNotifyLoginStatusChangedOptions options, object clientData, OnLoginStatusChangedCallback notification)
	{
		if (notification == null)
		{
			throw new ArgumentNullException("notification");
		}
		AddNotifyLoginStatusChangedOptionsInternal options2 = default(AddNotifyLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notification);
		ulong num = Bindings.EOS_Auth_AddNotifyLoginStatusChanged(base.InnerHandle, ref options2, clientDataPointer, OnLoginStatusChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyIdToken(ref CopyIdTokenOptions options, out IdToken? outIdToken)
	{
		CopyIdTokenOptionsInternal options2 = default(CopyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr outIdToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_CopyIdToken(base.InnerHandle, ref options2, out outIdToken2);
		Helper.Dispose(ref options2);
		Helper.Get<IdTokenInternal, IdToken>(outIdToken2, out outIdToken);
		if (outIdToken2 != IntPtr.Zero)
		{
			Bindings.EOS_Auth_IdToken_Release(outIdToken2);
		}
		return result;
	}

	public Result CopyUserAuthToken(ref CopyUserAuthTokenOptions options, EpicAccountId localUserId, out Token? outUserAuthToken)
	{
		CopyUserAuthTokenOptionsInternal options2 = default(CopyUserAuthTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr outUserAuthToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_CopyUserAuthToken(base.InnerHandle, ref options2, localUserId.InnerHandle, out outUserAuthToken2);
		Helper.Dispose(ref options2);
		Helper.Get<TokenInternal, Token>(outUserAuthToken2, out outUserAuthToken);
		if (outUserAuthToken2 != IntPtr.Zero)
		{
			Bindings.EOS_Auth_Token_Release(outUserAuthToken2);
		}
		return result;
	}

	public void DeletePersistentAuth(ref DeletePersistentAuthOptions options, object clientData, OnDeletePersistentAuthCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		DeletePersistentAuthOptionsInternal options2 = default(DeletePersistentAuthOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_DeletePersistentAuth(base.InnerHandle, ref options2, clientDataPointer, OnDeletePersistentAuthCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public EpicAccountId GetLoggedInAccountByIndex(int index)
	{
		Helper.Get(Bindings.EOS_Auth_GetLoggedInAccountByIndex(base.InnerHandle, index), out EpicAccountId to);
		return to;
	}

	public int GetLoggedInAccountsCount()
	{
		return Bindings.EOS_Auth_GetLoggedInAccountsCount(base.InnerHandle);
	}

	public LoginStatus GetLoginStatus(EpicAccountId localUserId)
	{
		return Bindings.EOS_Auth_GetLoginStatus(base.InnerHandle, localUserId.InnerHandle);
	}

	public EpicAccountId GetMergedAccountByIndex(EpicAccountId localUserId, uint index)
	{
		Helper.Get(Bindings.EOS_Auth_GetMergedAccountByIndex(base.InnerHandle, localUserId.InnerHandle, index), out EpicAccountId to);
		return to;
	}

	public uint GetMergedAccountsCount(EpicAccountId localUserId)
	{
		return Bindings.EOS_Auth_GetMergedAccountsCount(base.InnerHandle, localUserId.InnerHandle);
	}

	public Result GetSelectedAccountId(EpicAccountId localUserId, out EpicAccountId outSelectedAccountId)
	{
		IntPtr outSelectedAccountId2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_GetSelectedAccountId(base.InnerHandle, localUserId.InnerHandle, out outSelectedAccountId2);
		Helper.Get(outSelectedAccountId2, out outSelectedAccountId);
		return result;
	}

	public void LinkAccount(ref LinkAccountOptions options, object clientData, OnLinkAccountCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LinkAccountOptionsInternal options2 = default(LinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_LinkAccount(base.InnerHandle, ref options2, clientDataPointer, OnLinkAccountCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void Login(ref LoginOptions options, object clientData, OnLoginCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LoginOptionsInternal options2 = default(LoginOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_Login(base.InnerHandle, ref options2, clientDataPointer, OnLoginCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void Logout(ref LogoutOptions options, object clientData, OnLogoutCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		LogoutOptionsInternal options2 = default(LogoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_Logout(base.InnerHandle, ref options2, clientDataPointer, OnLogoutCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryIdToken(ref QueryIdTokenOptions options, object clientData, OnQueryIdTokenCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryIdTokenOptionsInternal options2 = default(QueryIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_QueryIdToken(base.InnerHandle, ref options2, clientDataPointer, OnQueryIdTokenCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyLoginStatusChanged(ulong inId)
	{
		Bindings.EOS_Auth_RemoveNotifyLoginStatusChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void VerifyIdToken(ref VerifyIdTokenOptions options, object clientData, OnVerifyIdTokenCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		VerifyIdTokenOptionsInternal options2 = default(VerifyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_VerifyIdToken(base.InnerHandle, ref options2, clientDataPointer, OnVerifyIdTokenCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void VerifyUserAuth(ref VerifyUserAuthOptions options, object clientData, OnVerifyUserAuthCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		VerifyUserAuthOptionsInternal options2 = default(VerifyUserAuthOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Auth_VerifyUserAuth(base.InnerHandle, ref options2, clientDataPointer, OnVerifyUserAuthCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using System;

[Flags]
public enum AuthScopeFlags
{
	NoFlags = 0,
	BasicProfile = 1,
	FriendsList = 2,
	Presence = 4,
	FriendsManagement = 8,
	Email = 0x10,
	Country = 0x20
}


public enum AuthTokenType
{
	Client,
	User
}


using Epic.OnlineServices;

public struct CopyIdTokenOptions
{
	public EpicAccountId AccountId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct CopyIdTokenOptionsInternal : ISettable<CopyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AccountId;

	public void Set(ref CopyIdTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.AccountId, ref m_AccountId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct CopyUserAuthTokenOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct CopyUserAuthTokenOptionsInternal : ISettable<CopyUserAuthTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref CopyUserAuthTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct Credentials
{
	public Utf8String Id { get; set; }

	public Utf8String Token { get; set; }

	public LoginCredentialType Type { get; set; }

	public IntPtr SystemAuthCredentialsOptions { get; set; }

	public ExternalCredentialType ExternalType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct CredentialsInternal : ISettable<Credentials>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Id;

	private IntPtr m_Token;

	private LoginCredentialType m_Type;

	private IntPtr m_SystemAuthCredentialsOptions;

	private ExternalCredentialType m_ExternalType;

	public void Set(ref Credentials other)
	{
		Dispose();
		m_ApiVersion = 4;
		Helper.Set(other.Id, ref m_Id);
		Helper.Set(other.Token, ref m_Token);
		m_Type = other.Type;
		m_SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
		m_ExternalType = other.ExternalType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Id);
		Helper.Dispose(ref m_Token);
		Helper.Dispose(ref m_SystemAuthCredentialsOptions);
	}
}


using Epic.OnlineServices;

public struct DeletePersistentAuthCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct DeletePersistentAuthCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeletePersistentAuthCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out DeletePersistentAuthCallbackInfo other)
	{
		other = default(DeletePersistentAuthCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices;

public struct DeletePersistentAuthOptions
{
	public Utf8String RefreshToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct DeletePersistentAuthOptionsInternal : ISettable<DeletePersistentAuthOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RefreshToken;

	public void Set(ref DeletePersistentAuthOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.RefreshToken, ref m_RefreshToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RefreshToken);
	}
}


using Epic.OnlineServices;

public struct IdToken
{
	public EpicAccountId AccountId { get; set; }

	public Utf8String JsonWebToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct IdTokenInternal : IGettable<IdToken>, ISettable<IdToken>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AccountId;

	private IntPtr m_JsonWebToken;

	public void Get(out IdToken other)
	{
		other = default(IdToken);
		Helper.Get(m_AccountId, out EpicAccountId to);
		other.AccountId = to;
		Helper.Get(m_JsonWebToken, out Utf8String to2);
		other.JsonWebToken = to2;
	}

	public void Set(ref IdToken other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.AccountId, ref m_AccountId);
		Helper.Set(other.JsonWebToken, ref m_JsonWebToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_JsonWebToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public PinGrantInfo? PinGrantInfo { get; set; }

	public EpicAccountId SelectedAccountId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<LinkAccountCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PinGrantInfo;

	private IntPtr m_SelectedAccountId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LinkAccountCallbackInfo other)
	{
		other = default(LinkAccountCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get<PinGrantInfoInternal, PinGrantInfo>(m_PinGrantInfo, out PinGrantInfo? to3);
		other.PinGrantInfo = to3;
		Helper.Get(m_SelectedAccountId, out EpicAccountId to4);
		other.SelectedAccountId = to4;
	}
}


using System;

[Flags]
public enum LinkAccountFlags
{
	NoFlags = 0,
	NintendoNsaId = 1
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LinkAccountOptions
{
	public LinkAccountFlags LinkAccountFlags { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LinkAccountOptionsInternal : ISettable<LinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private LinkAccountFlags m_LinkAccountFlags;

	private IntPtr m_ContinuanceToken;

	private IntPtr m_LocalUserId;

	public void Set(ref LinkAccountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_LinkAccountFlags = other.LinkAccountFlags;
		Helper.Set((Handle)other.ContinuanceToken, ref m_ContinuanceToken);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ContinuanceToken);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LoginCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public PinGrantInfo? PinGrantInfo { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	public AccountFeatureRestrictedInfo? AccountFeatureRestrictedInfo_DEPRECATED { get; set; }

	public EpicAccountId SelectedAccountId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LoginCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PinGrantInfo;

	private IntPtr m_ContinuanceToken;

	private IntPtr m_AccountFeatureRestrictedInfo_DEPRECATED;

	private IntPtr m_SelectedAccountId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LoginCallbackInfo other)
	{
		other = default(LoginCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get<PinGrantInfoInternal, PinGrantInfo>(m_PinGrantInfo, out PinGrantInfo? to3);
		other.PinGrantInfo = to3;
		Helper.Get(m_ContinuanceToken, out ContinuanceToken to4);
		other.ContinuanceToken = to4;
		Helper.Get<AccountFeatureRestrictedInfoInternal, AccountFeatureRestrictedInfo>(m_AccountFeatureRestrictedInfo_DEPRECATED, out AccountFeatureRestrictedInfo? to5);
		other.AccountFeatureRestrictedInfo_DEPRECATED = to5;
		Helper.Get(m_SelectedAccountId, out EpicAccountId to6);
		other.SelectedAccountId = to6;
	}
}


public enum LoginCredentialType
{
	Password,
	ExchangeCode,
	PersistentAuth,
	DeviceCode,
	Developer,
	RefreshToken,
	AccountPortal,
	ExternalAuth
}


using System;

[Flags]
public enum LoginFlags : ulong
{
	None = 0uL,
	NoUserInterface = 1uL
}


using Epic.OnlineServices.Auth;

public struct LoginOptions
{
	public Credentials? Credentials { get; set; }

	public AuthScopeFlags ScopeFlags { get; set; }

	public LoginFlags LoginFlags { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LoginOptionsInternal : ISettable<LoginOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Credentials;

	private AuthScopeFlags m_ScopeFlags;

	private LoginFlags m_LoginFlags;

	public void Set(ref LoginOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set<Credentials, CredentialsInternal>(other.Credentials, ref m_Credentials);
		m_ScopeFlags = other.ScopeFlags;
		m_LoginFlags = other.LoginFlags;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Credentials);
	}
}


using Epic.OnlineServices;

public struct LoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public LoginStatus PrevStatus { get; set; }

	public LoginStatus CurrentStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginStatusChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private LoginStatus m_PrevStatus;

	private LoginStatus m_CurrentStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LoginStatusChangedCallbackInfo other)
	{
		other = default(LoginStatusChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		other.PrevStatus = m_PrevStatus;
		other.CurrentStatus = m_CurrentStatus;
	}
}


using Epic.OnlineServices;

public struct LogoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<LogoutCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out LogoutCallbackInfo other)
	{
		other = default(LogoutCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
	}
}


using Epic.OnlineServices;

public struct LogoutOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct LogoutOptionsInternal : ISettable<LogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public void Set(ref LogoutOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnDeletePersistentAuthCallback(ref DeletePersistentAuthCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeletePersistentAuthCallbackInternal(ref DeletePersistentAuthCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnDeletePersistentAuthCallbackInternalImplementation
{
	private static OnDeletePersistentAuthCallbackInternal s_Delegate;

	public static OnDeletePersistentAuthCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnDeletePersistentAuthCallbackInternal))]
	public static void EntryPoint(ref DeletePersistentAuthCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeletePersistentAuthCallbackInfoInternal, OnDeletePersistentAuthCallback, DeletePersistentAuthCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnLinkAccountCallback(ref LinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLinkAccountCallbackInternal(ref LinkAccountCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnLinkAccountCallbackInternalImplementation
{
	private static OnLinkAccountCallbackInternal s_Delegate;

	public static OnLinkAccountCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLinkAccountCallbackInternal))]
	public static void EntryPoint(ref LinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LinkAccountCallbackInfoInternal, OnLinkAccountCallback, LinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnLoginCallback(ref LoginCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginCallbackInternal(ref LoginCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnLoginCallbackInternalImplementation
{
	private static OnLoginCallbackInternal s_Delegate;

	public static OnLoginCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginCallbackInternal))]
	public static void EntryPoint(ref LoginCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LoginCallbackInfoInternal, OnLoginCallback, LoginCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnLoginStatusChangedCallback(ref LoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginStatusChangedCallbackInternal(ref LoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnLoginStatusChangedCallbackInternalImplementation
{
	private static OnLoginStatusChangedCallbackInternal s_Delegate;

	public static OnLoginStatusChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginStatusChangedCallbackInternal))]
	public static void EntryPoint(ref LoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LoginStatusChangedCallbackInfoInternal, OnLoginStatusChangedCallback, LoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnLogoutCallback(ref LogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLogoutCallbackInternal(ref LogoutCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnLogoutCallbackInternalImplementation
{
	private static OnLogoutCallbackInternal s_Delegate;

	public static OnLogoutCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnLogoutCallbackInternal))]
	public static void EntryPoint(ref LogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LogoutCallbackInfoInternal, OnLogoutCallback, LogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnQueryIdTokenCallback(ref QueryIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryIdTokenCallbackInternal(ref QueryIdTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnQueryIdTokenCallbackInternalImplementation
{
	private static OnQueryIdTokenCallbackInternal s_Delegate;

	public static OnQueryIdTokenCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryIdTokenCallbackInternal))]
	public static void EntryPoint(ref QueryIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryIdTokenCallbackInfoInternal, OnQueryIdTokenCallback, QueryIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnVerifyIdTokenCallback(ref VerifyIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyIdTokenCallbackInternal(ref VerifyIdTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnVerifyIdTokenCallbackInternalImplementation
{
	private static OnVerifyIdTokenCallbackInternal s_Delegate;

	public static OnVerifyIdTokenCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyIdTokenCallbackInternal))]
	public static void EntryPoint(ref VerifyIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyIdTokenCallbackInfoInternal, OnVerifyIdTokenCallback, VerifyIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnVerifyUserAuthCallback(ref VerifyUserAuthCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyUserAuthCallbackInternal(ref VerifyUserAuthCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal static class OnVerifyUserAuthCallbackInternalImplementation
{
	private static OnVerifyUserAuthCallbackInternal s_Delegate;

	public static OnVerifyUserAuthCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyUserAuthCallbackInternal))]
	public static void EntryPoint(ref VerifyUserAuthCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyUserAuthCallbackInfoInternal, OnVerifyUserAuthCallback, VerifyUserAuthCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct PinGrantInfo
{
	public Utf8String UserCode { get; set; }

	public Utf8String VerificationURI { get; set; }

	public int ExpiresIn { get; set; }

	public Utf8String VerificationURIComplete { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct PinGrantInfoInternal : IGettable<PinGrantInfo>
{
	private int m_ApiVersion;

	private IntPtr m_UserCode;

	private IntPtr m_VerificationURI;

	private int m_ExpiresIn;

	private IntPtr m_VerificationURIComplete;

	public void Get(out PinGrantInfo other)
	{
		other = default(PinGrantInfo);
		Helper.Get(m_UserCode, out Utf8String to);
		other.UserCode = to;
		Helper.Get(m_VerificationURI, out Utf8String to2);
		other.VerificationURI = to2;
		other.ExpiresIn = m_ExpiresIn;
		Helper.Get(m_VerificationURIComplete, out Utf8String to3);
		other.VerificationURIComplete = to3;
	}
}


using Epic.OnlineServices;

public struct QueryIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetAccountId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct QueryIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryIdTokenCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetAccountId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out QueryIdTokenCallbackInfo other)
	{
		other = default(QueryIdTokenCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out EpicAccountId to2);
		other.LocalUserId = to2;
		Helper.Get(m_TargetAccountId, out EpicAccountId to3);
		other.TargetAccountId = to3;
	}
}


using Epic.OnlineServices;

public struct QueryIdTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetAccountId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct QueryIdTokenOptionsInternal : ISettable<QueryIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetAccountId;

	public void Set(ref QueryIdTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.TargetAccountId, ref m_TargetAccountId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetAccountId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct Token
{
	public Utf8String App { get; set; }

	public Utf8String ClientId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public Utf8String AccessToken { get; set; }

	public double ExpiresIn { get; set; }

	public Utf8String ExpiresAt { get; set; }

	public AuthTokenType AuthType { get; set; }

	public Utf8String RefreshToken { get; set; }

	public double RefreshExpiresIn { get; set; }

	public Utf8String RefreshExpiresAt { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct TokenInternal : IGettable<Token>, ISettable<Token>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_App;

	private IntPtr m_ClientId;

	private IntPtr m_AccountId;

	private IntPtr m_AccessToken;

	private double m_ExpiresIn;

	private IntPtr m_ExpiresAt;

	private AuthTokenType m_AuthType;

	private IntPtr m_RefreshToken;

	private double m_RefreshExpiresIn;

	private IntPtr m_RefreshExpiresAt;

	public void Get(out Token other)
	{
		other = default(Token);
		Helper.Get(m_App, out Utf8String to);
		other.App = to;
		Helper.Get(m_ClientId, out Utf8String to2);
		other.ClientId = to2;
		Helper.Get(m_AccountId, out EpicAccountId to3);
		other.AccountId = to3;
		Helper.Get(m_AccessToken, out Utf8String to4);
		other.AccessToken = to4;
		other.ExpiresIn = m_ExpiresIn;
		Helper.Get(m_ExpiresAt, out Utf8String to5);
		other.ExpiresAt = to5;
		other.AuthType = m_AuthType;
		Helper.Get(m_RefreshToken, out Utf8String to6);
		other.RefreshToken = to6;
		other.RefreshExpiresIn = m_RefreshExpiresIn;
		Helper.Get(m_RefreshExpiresAt, out Utf8String to7);
		other.RefreshExpiresAt = to7;
	}

	public void Set(ref Token other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.App, ref m_App);
		Helper.Set(other.ClientId, ref m_ClientId);
		Helper.Set((Handle)other.AccountId, ref m_AccountId);
		Helper.Set(other.AccessToken, ref m_AccessToken);
		m_ExpiresIn = other.ExpiresIn;
		Helper.Set(other.ExpiresAt, ref m_ExpiresAt);
		m_AuthType = other.AuthType;
		Helper.Set(other.RefreshToken, ref m_RefreshToken);
		m_RefreshExpiresIn = other.RefreshExpiresIn;
		Helper.Set(other.RefreshExpiresAt, ref m_RefreshExpiresAt);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_App);
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_AccessToken);
		Helper.Dispose(ref m_ExpiresAt);
		Helper.Dispose(ref m_RefreshToken);
		Helper.Dispose(ref m_RefreshExpiresAt);
	}
}


using Epic.OnlineServices;

public struct VerifyIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String ApplicationId { get; set; }

	public Utf8String ClientId { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public Utf8String DeploymentId { get; set; }

	public Utf8String DisplayName { get; set; }

	public bool IsExternalAccountInfoPresent { get; set; }

	public ExternalAccountType ExternalAccountIdType { get; set; }

	public Utf8String ExternalAccountId { get; set; }

	public Utf8String ExternalAccountDisplayName { get; set; }

	public Utf8String Platform { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_ApplicationId;

	private IntPtr m_ClientId;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private IntPtr m_DeploymentId;

	private IntPtr m_DisplayName;

	private int m_IsExternalAccountInfoPresent;

	private ExternalAccountType m_ExternalAccountIdType;

	private IntPtr m_ExternalAccountId;

	private IntPtr m_ExternalAccountDisplayName;

	private IntPtr m_Platform;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out VerifyIdTokenCallbackInfo other)
	{
		other = default(VerifyIdTokenCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_ApplicationId, out Utf8String to2);
		other.ApplicationId = to2;
		Helper.Get(m_ClientId, out Utf8String to3);
		other.ClientId = to3;
		Helper.Get(m_ProductId, out Utf8String to4);
		other.ProductId = to4;
		Helper.Get(m_SandboxId, out Utf8String to5);
		other.SandboxId = to5;
		Helper.Get(m_DeploymentId, out Utf8String to6);
		other.DeploymentId = to6;
		Helper.Get(m_DisplayName, out Utf8String to7);
		other.DisplayName = to7;
		Helper.Get(m_IsExternalAccountInfoPresent, out bool to8);
		other.IsExternalAccountInfoPresent = to8;
		other.ExternalAccountIdType = m_ExternalAccountIdType;
		Helper.Get(m_ExternalAccountId, out Utf8String to9);
		other.ExternalAccountId = to9;
		Helper.Get(m_ExternalAccountDisplayName, out Utf8String to10);
		other.ExternalAccountDisplayName = to10;
		Helper.Get(m_Platform, out Utf8String to11);
		other.Platform = to11;
	}
}


using Epic.OnlineServices.Auth;

public struct VerifyIdTokenOptions
{
	public IdToken? IdToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct VerifyIdTokenOptionsInternal : ISettable<VerifyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_IdToken;

	public void Set(ref VerifyIdTokenOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<IdToken, IdTokenInternal>(other.IdToken, ref m_IdToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_IdToken);
	}
}


using Epic.OnlineServices;

public struct VerifyUserAuthCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct VerifyUserAuthCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyUserAuthCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out VerifyUserAuthCallbackInfo other)
	{
		other = default(VerifyUserAuthCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices.Auth;

public struct VerifyUserAuthOptions
{
	public Token? AuthToken { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

internal struct VerifyUserAuthOptionsInternal : ISettable<VerifyUserAuthOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AuthToken;

	public void Set(ref VerifyUserAuthOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set<Token, TokenInternal>(other.AuthToken, ref m_AuthToken);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AuthToken);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientActionRequiredOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct AddNotifyClientActionRequiredOptionsInternal : ISettable<AddNotifyClientActionRequiredOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientActionRequiredOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientAuthStatusChangedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct AddNotifyClientAuthStatusChangedOptionsInternal : ISettable<AddNotifyClientAuthStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientAuthStatusChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToClientOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct AddNotifyMessageToClientOptionsInternal : ISettable<AddNotifyMessageToClientOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToClientOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

public sealed class AntiCheatServerInterface : Handle
{
	public const int ADDNOTIFYCLIENTACTIONREQUIRED_API_LATEST = 1;

	public const int ADDNOTIFYCLIENTAUTHSTATUSCHANGED_API_LATEST = 1;

	public const int ADDNOTIFYMESSAGETOCLIENT_API_LATEST = 1;

	public const int BEGINSESSION_API_LATEST = 3;

	public const int BEGINSESSION_MAX_REGISTERTIMEOUT = 120;

	public const int BEGINSESSION_MIN_REGISTERTIMEOUT = 10;

	public const int ENDSESSION_API_LATEST = 1;

	public const int GETPROTECTMESSAGEOUTPUTLENGTH_API_LATEST = 1;

	public const int ONMESSAGETOCLIENTCALLBACK_MAX_MESSAGE_SIZE = 512;

	public const int PROTECTMESSAGE_API_LATEST = 1;

	public const int RECEIVEMESSAGEFROMCLIENT_API_LATEST = 1;

	public const int REGISTERCLIENT_API_LATEST = 3;

	public const int SETCLIENTNETWORKSTATE_API_LATEST = 1;

	public const int UNPROTECTMESSAGE_API_LATEST = 1;

	public const int UNREGISTERCLIENT_API_LATEST = 1;

	public AntiCheatServerInterface()
	{
	}

	public AntiCheatServerInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyClientActionRequired(ref AddNotifyClientActionRequiredOptions options, object clientData, OnClientActionRequiredCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyClientActionRequiredOptionsInternal options2 = default(AddNotifyClientActionRequiredOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyClientActionRequired(base.InnerHandle, ref options2, clientDataPointer, OnClientActionRequiredCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyClientAuthStatusChanged(ref AddNotifyClientAuthStatusChangedOptions options, object clientData, OnClientAuthStatusChangedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyClientAuthStatusChangedOptionsInternal options2 = default(AddNotifyClientAuthStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(base.InnerHandle, ref options2, clientDataPointer, OnClientAuthStatusChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyMessageToClient(ref AddNotifyMessageToClientOptions options, object clientData, OnMessageToClientCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyMessageToClientOptionsInternal options2 = default(AddNotifyMessageToClientOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyMessageToClient(base.InnerHandle, ref options2, clientDataPointer, OnMessageToClientCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result BeginSession(ref BeginSessionOptions options)
	{
		BeginSessionOptionsInternal options2 = default(BeginSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_BeginSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndSession(ref EndSessionOptions options)
	{
		EndSessionOptionsInternal options2 = default(EndSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_EndSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProtectMessageOutputLength(ref GetProtectMessageOutputLengthOptions options, out uint outBufferSizeBytes)
	{
		GetProtectMessageOutputLengthOptionsInternal options2 = default(GetProtectMessageOutputLengthOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_GetProtectMessageOutputLength(base.InnerHandle, ref options2, out outBufferSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogEvent(ref LogEventOptions options)
	{
		LogEventOptionsInternal options2 = default(LogEventOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogEvent(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogGameRoundEnd(ref LogGameRoundEndOptions options)
	{
		LogGameRoundEndOptionsInternal options2 = default(LogGameRoundEndOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogGameRoundEnd(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogGameRoundStart(ref LogGameRoundStartOptions options)
	{
		LogGameRoundStartOptionsInternal options2 = default(LogGameRoundStartOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogGameRoundStart(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerDespawn(ref LogPlayerDespawnOptions options)
	{
		LogPlayerDespawnOptionsInternal options2 = default(LogPlayerDespawnOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerDespawn(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerRevive(ref LogPlayerReviveOptions options)
	{
		LogPlayerReviveOptionsInternal options2 = default(LogPlayerReviveOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerRevive(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerSpawn(ref LogPlayerSpawnOptions options)
	{
		LogPlayerSpawnOptionsInternal options2 = default(LogPlayerSpawnOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerSpawn(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerTakeDamage(ref LogPlayerTakeDamageOptions options)
	{
		LogPlayerTakeDamageOptionsInternal options2 = default(LogPlayerTakeDamageOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerTakeDamage(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result LogPlayerTick(ref LogPlayerTickOptions options)
	{
		LogPlayerTickOptionsInternal options2 = default(LogPlayerTickOptionsInternal);
		options2.m_ApiVersion = 3;
		options2.m_PlayerHandle = options.PlayerHandle;
		Helper.Set(options.IsPlayerViewZoomed, ref options2.m_IsPlayerViewZoomed);
		options2.m_PlayerHealth = options.PlayerHealth;
		options2.m_PlayerMovementState = options.PlayerMovementState;
		if (options.PlayerPosition.HasValue)
		{
			Vec3f value = options.PlayerPosition.Value;
			options2.m_PlayerPosition = new IntPtr(&value);
		}
		if (options.PlayerViewRotation.HasValue)
		{
			Quat value2 = options.PlayerViewRotation.Value;
			options2.m_PlayerViewRotation = new IntPtr(&value2);
		}
		if (options.PlayerViewPosition.HasValue)
		{
			Vec3f value3 = options.PlayerViewPosition.Value;
			options2.m_playerViewPosition = new IntPtr(&value3);
		}
		return Bindings.EOS_AntiCheatServer_LogPlayerTick(base.InnerHandle, ref options2);
	}

	public Result LogPlayerUseAbility(ref LogPlayerUseAbilityOptions options)
	{
		LogPlayerUseAbilityOptionsInternal options2 = default(LogPlayerUseAbilityOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerUseAbility(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerUseWeapon(ref LogPlayerUseWeaponOptions options)
	{
		LogPlayerUseWeaponOptionsInternal options2 = default(LogPlayerUseWeaponOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerUseWeapon(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result ProtectMessage(ref ProtectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		outBytesWritten = 0u;
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			ProtectMessageOptionsInternal options2 = default(ProtectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_ClientHandle = options.ClientHandle;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatServer_ProtectMessage(base.InnerHandle, ref options2, outBuffer2, out outBytesWritten);
			}
		}
		return result;
	}

	public Result ReceiveMessageFromClient(ref ReceiveMessageFromClientOptions options)
	{
		ReceiveMessageFromClientOptionsInternal options2 = default(ReceiveMessageFromClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_ReceiveMessageFromClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterClient(ref RegisterClientOptions options)
	{
		RegisterClientOptionsInternal options2 = default(RegisterClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_RegisterClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterEvent(ref RegisterEventOptions options)
	{
		RegisterEventOptionsInternal options2 = default(RegisterEventOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_RegisterEvent(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyClientActionRequired(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyClientActionRequired(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyClientAuthStatusChanged(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToClient(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyMessageToClient(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SetClientDetails(ref SetClientDetailsOptions options)
	{
		SetClientDetailsOptionsInternal options2 = default(SetClientDetailsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetClientDetails(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetClientNetworkState(ref SetClientNetworkStateOptions options)
	{
		SetClientNetworkStateOptionsInternal options2 = default(SetClientNetworkStateOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetClientNetworkState(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetGameSessionId(ref SetGameSessionIdOptions options)
	{
		SetGameSessionIdOptionsInternal options2 = default(SetGameSessionIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetGameSessionId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result UnprotectMessage(ref UnprotectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		outBytesWritten = 0u;
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			UnprotectMessageOptionsInternal options2 = default(UnprotectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_ClientHandle = options.ClientHandle;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatServer_UnprotectMessage(base.InnerHandle, ref options2, outBuffer2, out outBytesWritten);
			}
		}
		return result;
	}

	public Result UnregisterClient(ref UnregisterClientOptions options)
	{
		UnregisterClientOptionsInternal options2 = default(UnregisterClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_UnregisterClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices;

public struct BeginSessionOptions
{
	public uint RegisterTimeoutSeconds { get; set; }

	public Utf8String ServerName { get; set; }

	public bool EnableGameplayData { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct BeginSessionOptionsInternal : ISettable<BeginSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_RegisterTimeoutSeconds;

	private IntPtr m_ServerName;

	private int m_EnableGameplayData;

	private IntPtr m_LocalUserId;

	public void Set(ref BeginSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		m_RegisterTimeoutSeconds = other.RegisterTimeoutSeconds;
		Helper.Set(other.ServerName, ref m_ServerName);
		Helper.Set(other.EnableGameplayData, ref m_EnableGameplayData);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ServerName);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct EndSessionOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct EndSessionOptionsInternal : ISettable<EndSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref EndSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


public struct GetProtectMessageOutputLengthOptions
{
	public uint DataLengthBytes { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct GetProtectMessageOutputLengthOptionsInternal : ISettable<GetProtectMessageOutputLengthOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	public void Set(ref GetProtectMessageOutputLengthOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_DataLengthBytes = other.DataLengthBytes;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnClientActionRequiredCallback(ref OnClientActionRequiredCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientActionRequiredCallbackInternal(ref OnClientActionRequiredCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

internal static class OnClientActionRequiredCallbackInternalImplementation
{
	private static OnClientActionRequiredCallbackInternal s_Delegate;

	public static OnClientActionRequiredCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnClientActionRequiredCallbackInternal))]
	public static void EntryPoint(ref OnClientActionRequiredCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientActionRequiredCallbackInfoInternal, OnClientActionRequiredCallback, OnClientActionRequiredCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnClientAuthStatusChangedCallback(ref OnClientAuthStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientAuthStatusChangedCallbackInternal(ref OnClientAuthStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

internal static class OnClientAuthStatusChangedCallbackInternalImplementation
{
	private static OnClientAuthStatusChangedCallbackInternal s_Delegate;

	public static OnClientAuthStatusChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnClientAuthStatusChangedCallbackInternal))]
	public static void EntryPoint(ref OnClientAuthStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientAuthStatusChangedCallbackInfoInternal, OnClientAuthStatusChangedCallback, OnClientAuthStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnMessageToClientCallback(ref OnMessageToClientCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToClientCallbackInternal(ref OnMessageToClientCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

internal static class OnMessageToClientCallbackInternalImplementation
{
	private static OnMessageToClientCallbackInternal s_Delegate;

	public static OnMessageToClientCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToClientCallbackInternal))]
	public static void EntryPoint(ref OnMessageToClientCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToClientCallbackInfoInternal, OnMessageToClientCallback, OnMessageToClientCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;

public struct ProtectMessageOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;

internal struct ProtectMessageOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_ClientHandle;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct ReceiveMessageFromClientOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct ReceiveMessageFromClientOptionsInternal : ISettable<ReceiveMessageFromClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public void Set(ref ReceiveMessageFromClientOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_ClientHandle = other.ClientHandle;
		Helper.Set(other.Data, ref m_Data, out m_DataLengthBytes);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_Data);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterClientOptions
{
	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientType ClientType { get; set; }

	public AntiCheatCommonClientPlatform ClientPlatform { get; set; }

	public Utf8String AccountId_DEPRECATED { get; set; }

	public Utf8String IpAddress { get; set; }

	public ProductUserId UserId { get; set; }

	public int Reserved01 { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

internal struct RegisterClientOptionsInternal : ISettable<RegisterClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientType m_ClientType;

	private AntiCheatCommonClientPlatform m_ClientPlatform;

	private IntPtr m_AccountId_DEPRECATED;

	private IntPtr m_IpAddress;

	private IntPtr m_UserId;

	private int m_Reserved01;

	public void Set(ref RegisterClientOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		m_ClientHandle = other.ClientHandle;
		m_ClientType = other.ClientType;
		m_ClientPlatform = other.ClientPlatform;
		Helper.Set(other.AccountId_DEPRECATED, ref m_AccountId_DEPRECATED);
		Helper.Set(other.IpAddress, ref m_IpAddress);
		Helper.Set((Handle)other.UserId, ref m_UserId);
		m_Reserved01 = other.Reserved01;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_AccountId_DEPRECATED);
		Helper.Dispose(ref m_IpAddress);
		Helper.Dispose(ref m_UserId);
	}
}


using System;

public struct SetClientNetworkStateOptions
{
	public IntPtr ClientHandle { get; set; }

	public bool IsNetworkActive { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct SetClientNetworkStateOptionsInternal : ISettable<SetClientNetworkStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private int m_IsNetworkActive;

	public void Set(ref SetClientNetworkStateOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_ClientHandle = other.ClientHandle;
		Helper.Set(other.IsNetworkActive, ref m_IsNetworkActive);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


using System;

public struct UnprotectMessageOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;

internal struct UnprotectMessageOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_ClientHandle;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct UnregisterClientOptions
{
	public IntPtr ClientHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

internal struct UnregisterClientOptionsInternal : ISettable<UnregisterClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	public void Set(ref UnregisterClientOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_ClientHandle = other.ClientHandle;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


public enum AntiCheatCommonClientAction
{
	Invalid,
	RemovePlayer
}


public enum AntiCheatCommonClientActionReason
{
	Invalid,
	InternalError,
	InvalidMessage,
	AuthenticationFailed,
	NullClient,
	HeartbeatTimeout,
	ClientViolation,
	BackendViolation,
	TemporaryCooldown,
	TemporaryBanned,
	PermanentBanned
}


public enum AntiCheatCommonClientAuthStatus
{
	Invalid,
	LocalAuthComplete,
	RemoteAuthComplete
}


using System;

[Flags]
public enum AntiCheatCommonClientFlags
{
	None = 0,
	Admin = 1
}


public enum AntiCheatCommonClientInput
{
	Unknown,
	MouseKeyboard,
	Gamepad,
	TouchInput
}


public enum AntiCheatCommonClientPlatform
{
	Unknown,
	Windows,
	Mac,
	Linux,
	Xbox,
	PlayStation,
	Nintendo,
	iOS,
	Android
}


public enum AntiCheatCommonClientType
{
	ProtectedClient,
	UnprotectedClient,
	AIBot
}


public enum AntiCheatCommonEventParamType
{
	Invalid,
	ClientHandle,
	String,
	UInt32,
	Int32,
	UInt64,
	Int64,
	Vector3f,
	Quat,
	Float
}


public enum AntiCheatCommonEventType
{
	Invalid,
	GameEvent,
	PlayerEvent
}


public enum AntiCheatCommonGameRoundCompetitionType
{
	None,
	Casual,
	Ranked,
	Competitive
}


public sealed class AntiCheatCommonInterface
{
	public const int LOGEVENT_API_LATEST = 1;

	public const int LOGEVENT_STRING_MAX_LENGTH = 39;

	public const int LOGGAMEROUNDEND_API_LATEST = 1;

	public const int LOGGAMEROUNDSTART_API_LATEST = 2;

	public const int LOGPLAYERDESPAWN_API_LATEST = 1;

	public const int LOGPLAYERREVIVE_API_LATEST = 1;

	public const int LOGPLAYERSPAWN_API_LATEST = 1;

	public const int LOGPLAYERTAKEDAMAGE_API_LATEST = 4;

	public const int LOGPLAYERTICK_API_LATEST = 3;

	public const int LOGPLAYERUSEABILITY_API_LATEST = 1;

	public const int LOGPLAYERUSEWEAPON_API_LATEST = 2;

	public const int LOGPLAYERUSEWEAPON_WEAPONNAME_MAX_LENGTH = 32;

	public const int REGISTEREVENT_API_LATEST = 1;

	public const int REGISTEREVENT_CUSTOMEVENTBASE = 268435456;

	public const int REGISTEREVENT_MAX_PARAMDEFSCOUNT = 12;

	public const int SETCLIENTDETAILS_API_LATEST = 1;

	public const int SETGAMESESSIONID_API_LATEST = 1;
}


public enum AntiCheatCommonPlayerMovementState
{
	None,
	Crouching,
	Prone,
	Mounted,
	Swimming,
	Falling,
	Flying,
	OnLadder
}


public enum AntiCheatCommonPlayerTakeDamageResult
{
	None,
	DownedDeprecated,
	EliminatedDeprecated,
	NormalToDowned,
	NormalToEliminated,
	DownedToEliminated
}


public enum AntiCheatCommonPlayerTakeDamageSource
{
	None,
	Player,
	NonPlayerCharacter,
	World
}


public enum AntiCheatCommonPlayerTakeDamageType
{
	None,
	PointDamage,
	RadialDamage,
	DamageOverTime
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventOptions
{
	public IntPtr ClientHandle { get; set; }

	public uint EventId { get; set; }

	public LogEventParamPair[] Params { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogEventOptionsInternal : ISettable<LogEventOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private uint m_EventId;

	private uint m_ParamsCount;

	private IntPtr m_Params;

	public void Set(ref LogEventOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_ClientHandle = other.ClientHandle;
		m_EventId = other.EventId;
		Helper.Set<LogEventParamPair, LogEventParamPairInternal>(other.Params, ref m_Params, out m_ParamsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_Params);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventParamPair
{
	public LogEventParamPairParamValue ParamValue { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogEventParamPairInternal : ISettable<LogEventParamPair>, IDisposable
{
	private AntiCheatCommonEventParamType m_ParamValueType;

	private LogEventParamPairParamValueInternal m_ParamValue;

	public void Set(ref LogEventParamPair other)
	{
		Dispose();
		Helper.Set<LogEventParamPairParamValue, LogEventParamPairParamValueInternal>(other.ParamValue, ref m_ParamValue);
		m_ParamValueType = other.ParamValue.ParamValueType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ParamValue);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventParamPairParamValue
{
	private IntPtr? m_ClientHandle;

	private Utf8String m_String;

	private uint? m_UInt32;

	private int? m_Int32;

	private ulong? m_UInt64;

	private long? m_Int64;

	private Vec3f? m_Vec3f;

	private Quat? m_Quat;

	private float? m_Float;

	private AntiCheatCommonEventParamType m_ParamValueType;

	public IntPtr? ClientHandle
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.ClientHandle)
			{
				return m_ClientHandle;
			}
			return null;
		}
		set
		{
			m_ClientHandle = value;
			m_ParamValueType = AntiCheatCommonEventParamType.ClientHandle;
		}
	}

	public Utf8String String
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.String)
			{
				return m_String;
			}
			return null;
		}
		set
		{
			m_String = value;
			m_ParamValueType = AntiCheatCommonEventParamType.String;
		}
	}

	public uint? UInt32
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.UInt32)
			{
				return m_UInt32;
			}
			return null;
		}
		set
		{
			m_UInt32 = value;
			m_ParamValueType = AntiCheatCommonEventParamType.UInt32;
		}
	}

	public int? Int32
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.Int32)
			{
				return m_Int32;
			}
			return null;
		}
		set
		{
			m_Int32 = value;
			m_ParamValueType = AntiCheatCommonEventParamType.Int32;
		}
	}

	public ulong? UInt64
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.UInt64)
			{
				return m_UInt64;
			}
			return null;
		}
		set
		{
			m_UInt64 = value;
			m_ParamValueType = AntiCheatCommonEventParamType.UInt64;
		}
	}

	public long? Int64
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.Int64)
			{
				return m_Int64;
			}
			return null;
		}
		set
		{
			m_Int64 = value;
			m_ParamValueType = AntiCheatCommonEventParamType.Int64;
		}
	}

	public Vec3f? Vec3f
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.Vector3f)
			{
				return m_Vec3f;
			}
			return null;
		}
		set
		{
			m_Vec3f = value;
			m_ParamValueType = AntiCheatCommonEventParamType.Vector3f;
		}
	}

	public Quat? Quat
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.Quat)
			{
				return m_Quat;
			}
			return null;
		}
		set
		{
			m_Quat = value;
			m_ParamValueType = AntiCheatCommonEventParamType.Quat;
		}
	}

	public float? Float
	{
		get
		{
			if (m_ParamValueType == AntiCheatCommonEventParamType.Float)
			{
				return m_Float;
			}
			return null;
		}
		set
		{
			m_Float = value;
			m_ParamValueType = AntiCheatCommonEventParamType.Float;
		}
	}

	public AntiCheatCommonEventParamType ParamValueType => m_ParamValueType;

	public static implicit operator LogEventParamPairParamValue(IntPtr? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.ClientHandle = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Utf8String value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.String = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(string value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.String = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(uint? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.UInt32 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(int? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Int32 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(ulong? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.UInt64 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(long? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Int64 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Vec3f? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Vec3f = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Quat? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Quat = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(float? value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Float = value;
		return result;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Explicit)]
internal struct LogEventParamPairParamValueInternal : ISettable<LogEventParamPairParamValue>, IDisposable
{
	[FieldOffset(0)]
	private IntPtr m_ClientHandle;

	[FieldOffset(0)]
	private IntPtr m_String;

	[FieldOffset(0)]
	private uint m_UInt32;

	[FieldOffset(0)]
	private int m_Int32;

	[FieldOffset(0)]
	private ulong m_UInt64;

	[FieldOffset(0)]
	private long m_Int64;

	[FieldOffset(0)]
	private Vec3fInternal m_Vec3f;

	[FieldOffset(0)]
	private QuatInternal m_Quat;

	[FieldOffset(0)]
	private float m_Float;

	public void Set(ref LogEventParamPairParamValue other)
	{
		Dispose();
		if (other.ParamValueType == AntiCheatCommonEventParamType.ClientHandle)
		{
			Helper.Set(other.ClientHandle, ref m_ClientHandle);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.String)
		{
			Helper.Set(other.String, ref m_String);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.UInt32)
		{
			Helper.Set<uint>(other.UInt32, ref m_UInt32);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.Int32)
		{
			Helper.Set<int>(other.Int32, ref m_Int32);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.UInt64)
		{
			Helper.Set<ulong>(other.UInt64, ref m_UInt64);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.Int64)
		{
			Helper.Set<long>(other.Int64, ref m_Int64);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.Vector3f)
		{
			Helper.Set(other.Vec3f, ref m_Vec3f);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.Quat)
		{
			Helper.Set(other.Quat, ref m_Quat);
		}
		if (other.ParamValueType == AntiCheatCommonEventParamType.Float)
		{
			Helper.Set<float>(other.Float, ref m_Float);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_String);
		Helper.Dispose(ref m_Vec3f);
		Helper.Dispose(ref m_Quat);
	}
}


public struct LogGameRoundEndOptions
{
	public uint WinningTeamId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogGameRoundEndOptionsInternal : ISettable<LogGameRoundEndOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_WinningTeamId;

	public void Set(ref LogGameRoundEndOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_WinningTeamId = other.WinningTeamId;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogGameRoundStartOptions
{
	public Utf8String SessionIdentifier { get; set; }

	public Utf8String LevelName { get; set; }

	public Utf8String ModeName { get; set; }

	public uint RoundTimeSeconds { get; set; }

	public AntiCheatCommonGameRoundCompetitionType CompetitionType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogGameRoundStartOptionsInternal : ISettable<LogGameRoundStartOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionIdentifier;

	private IntPtr m_LevelName;

	private IntPtr m_ModeName;

	private uint m_RoundTimeSeconds;

	private AntiCheatCommonGameRoundCompetitionType m_CompetitionType;

	public void Set(ref LogGameRoundStartOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.SessionIdentifier, ref m_SessionIdentifier);
		Helper.Set(other.LevelName, ref m_LevelName);
		Helper.Set(other.ModeName, ref m_ModeName);
		m_RoundTimeSeconds = other.RoundTimeSeconds;
		m_CompetitionType = other.CompetitionType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionIdentifier);
		Helper.Dispose(ref m_LevelName);
		Helper.Dispose(ref m_ModeName);
	}
}


using System;

public struct LogPlayerDespawnOptions
{
	public IntPtr DespawnedPlayerHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerDespawnOptionsInternal : ISettable<LogPlayerDespawnOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DespawnedPlayerHandle;

	public void Set(ref LogPlayerDespawnOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_DespawnedPlayerHandle = other.DespawnedPlayerHandle;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DespawnedPlayerHandle);
	}
}


using System;

public struct LogPlayerReviveOptions
{
	public IntPtr RevivedPlayerHandle { get; set; }

	public IntPtr ReviverPlayerHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerReviveOptionsInternal : ISettable<LogPlayerReviveOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RevivedPlayerHandle;

	private IntPtr m_ReviverPlayerHandle;

	public void Set(ref LogPlayerReviveOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_RevivedPlayerHandle = other.RevivedPlayerHandle;
		m_ReviverPlayerHandle = other.ReviverPlayerHandle;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RevivedPlayerHandle);
		Helper.Dispose(ref m_ReviverPlayerHandle);
	}
}


using System;

public struct LogPlayerSpawnOptions
{
	public IntPtr SpawnedPlayerHandle { get; set; }

	public uint TeamId { get; set; }

	public uint CharacterId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerSpawnOptionsInternal : ISettable<LogPlayerSpawnOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SpawnedPlayerHandle;

	private uint m_TeamId;

	private uint m_CharacterId;

	public void Set(ref LogPlayerSpawnOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_SpawnedPlayerHandle = other.SpawnedPlayerHandle;
		m_TeamId = other.TeamId;
		m_CharacterId = other.CharacterId;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SpawnedPlayerHandle);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerTakeDamageOptions
{
	public IntPtr VictimPlayerHandle { get; set; }

	public Vec3f? VictimPlayerPosition { get; set; }

	public Quat? VictimPlayerViewRotation { get; set; }

	public IntPtr AttackerPlayerHandle { get; set; }

	public Vec3f? AttackerPlayerPosition { get; set; }

	public Quat? AttackerPlayerViewRotation { get; set; }

	public bool IsHitscanAttack { get; set; }

	public bool HasLineOfSight { get; set; }

	public bool IsCriticalHit { get; set; }

	public uint HitBoneId_DEPRECATED { get; set; }

	public float DamageTaken { get; set; }

	public float HealthRemaining { get; set; }

	public AntiCheatCommonPlayerTakeDamageSource DamageSource { get; set; }

	public AntiCheatCommonPlayerTakeDamageType DamageType { get; set; }

	public AntiCheatCommonPlayerTakeDamageResult DamageResult { get; set; }

	public LogPlayerUseWeaponData? PlayerUseWeaponData { get; set; }

	public uint TimeSincePlayerUseWeaponMs { get; set; }

	public Vec3f? DamagePosition { get; set; }

	public Vec3f? AttackerPlayerViewPosition { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerTakeDamageOptionsInternal : ISettable<LogPlayerTakeDamageOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_VictimPlayerHandle;

	private IntPtr m_VictimPlayerPosition;

	private IntPtr m_VictimPlayerViewRotation;

	private IntPtr m_AttackerPlayerHandle;

	private IntPtr m_AttackerPlayerPosition;

	private IntPtr m_AttackerPlayerViewRotation;

	private int m_IsHitscanAttack;

	private int m_HasLineOfSight;

	private int m_IsCriticalHit;

	private uint m_HitBoneId_DEPRECATED;

	private float m_DamageTaken;

	private float m_HealthRemaining;

	private AntiCheatCommonPlayerTakeDamageSource m_DamageSource;

	private AntiCheatCommonPlayerTakeDamageType m_DamageType;

	private AntiCheatCommonPlayerTakeDamageResult m_DamageResult;

	private IntPtr m_PlayerUseWeaponData;

	private uint m_TimeSincePlayerUseWeaponMs;

	private IntPtr m_DamagePosition;

	private IntPtr m_AttackerPlayerViewPosition;

	public void Set(ref LogPlayerTakeDamageOptions other)
	{
		Dispose();
		m_ApiVersion = 4;
		m_VictimPlayerHandle = other.VictimPlayerHandle;
		Helper.Set<Vec3f, Vec3fInternal>(other.VictimPlayerPosition, ref m_VictimPlayerPosition);
		Helper.Set<Quat, QuatInternal>(other.VictimPlayerViewRotation, ref m_VictimPlayerViewRotation);
		m_AttackerPlayerHandle = other.AttackerPlayerHandle;
		Helper.Set<Vec3f, Vec3fInternal>(other.AttackerPlayerPosition, ref m_AttackerPlayerPosition);
		Helper.Set<Quat, QuatInternal>(other.AttackerPlayerViewRotation, ref m_AttackerPlayerViewRotation);
		Helper.Set(other.IsHitscanAttack, ref m_IsHitscanAttack);
		Helper.Set(other.HasLineOfSight, ref m_HasLineOfSight);
		Helper.Set(other.IsCriticalHit, ref m_IsCriticalHit);
		m_HitBoneId_DEPRECATED = other.HitBoneId_DEPRECATED;
		m_DamageTaken = other.DamageTaken;
		m_HealthRemaining = other.HealthRemaining;
		m_DamageSource = other.DamageSource;
		m_DamageType = other.DamageType;
		m_DamageResult = other.DamageResult;
		Helper.Set<LogPlayerUseWeaponData, LogPlayerUseWeaponDataInternal>(other.PlayerUseWeaponData, ref m_PlayerUseWeaponData);
		m_TimeSincePlayerUseWeaponMs = other.TimeSincePlayerUseWeaponMs;
		Helper.Set<Vec3f, Vec3fInternal>(other.DamagePosition, ref m_DamagePosition);
		Helper.Set<Vec3f, Vec3fInternal>(other.AttackerPlayerViewPosition, ref m_AttackerPlayerViewPosition);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_VictimPlayerHandle);
		Helper.Dispose(ref m_VictimPlayerPosition);
		Helper.Dispose(ref m_VictimPlayerViewRotation);
		Helper.Dispose(ref m_AttackerPlayerHandle);
		Helper.Dispose(ref m_AttackerPlayerPosition);
		Helper.Dispose(ref m_AttackerPlayerViewRotation);
		Helper.Dispose(ref m_PlayerUseWeaponData);
		Helper.Dispose(ref m_DamagePosition);
		Helper.Dispose(ref m_AttackerPlayerViewPosition);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerTickOptions
{
	public IntPtr PlayerHandle { get; set; }

	public Vec3f? PlayerPosition { get; set; }

	public Quat? PlayerViewRotation { get; set; }

	public bool IsPlayerViewZoomed { get; set; }

	public float PlayerHealth { get; set; }

	public AntiCheatCommonPlayerMovementState PlayerMovementState { get; set; }

	public Vec3f? PlayerViewPosition { get; set; }
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerTickOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_PlayerHandle;

	public IntPtr m_PlayerPosition;

	public IntPtr m_PlayerViewRotation;

	public int m_IsPlayerViewZoomed;

	public float m_PlayerHealth;

	public AntiCheatCommonPlayerMovementState m_PlayerMovementState;

	public IntPtr m_playerViewPosition;
}


using System;

public struct LogPlayerUseAbilityOptions
{
	public IntPtr PlayerHandle { get; set; }

	public uint AbilityId { get; set; }

	public uint AbilityDurationMs { get; set; }

	public uint AbilityCooldownMs { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerUseAbilityOptionsInternal : ISettable<LogPlayerUseAbilityOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlayerHandle;

	private uint m_AbilityId;

	private uint m_AbilityDurationMs;

	private uint m_AbilityCooldownMs;

	public void Set(ref LogPlayerUseAbilityOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_PlayerHandle = other.PlayerHandle;
		m_AbilityId = other.AbilityId;
		m_AbilityDurationMs = other.AbilityDurationMs;
		m_AbilityCooldownMs = other.AbilityCooldownMs;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlayerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerUseWeaponData
{
	public IntPtr PlayerHandle { get; set; }

	public Vec3f? PlayerPosition { get; set; }

	public Quat? PlayerViewRotation { get; set; }

	public bool IsPlayerViewZoomed { get; set; }

	public bool IsMeleeAttack { get; set; }

	public Utf8String WeaponName { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerUseWeaponDataInternal : ISettable<LogPlayerUseWeaponData>, IDisposable
{
	private IntPtr m_PlayerHandle;

	private IntPtr m_PlayerPosition;

	private IntPtr m_PlayerViewRotation;

	private int m_IsPlayerViewZoomed;

	private int m_IsMeleeAttack;

	private IntPtr m_WeaponName;

	public void Set(ref LogPlayerUseWeaponData other)
	{
		Dispose();
		m_PlayerHandle = other.PlayerHandle;
		Helper.Set<Vec3f, Vec3fInternal>(other.PlayerPosition, ref m_PlayerPosition);
		Helper.Set<Quat, QuatInternal>(other.PlayerViewRotation, ref m_PlayerViewRotation);
		Helper.Set(other.IsPlayerViewZoomed, ref m_IsPlayerViewZoomed);
		Helper.Set(other.IsMeleeAttack, ref m_IsMeleeAttack);
		Helper.Set(other.WeaponName, ref m_WeaponName);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlayerHandle);
		Helper.Dispose(ref m_PlayerPosition);
		Helper.Dispose(ref m_PlayerViewRotation);
		Helper.Dispose(ref m_WeaponName);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerUseWeaponOptions
{
	public LogPlayerUseWeaponData? UseWeaponData { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct LogPlayerUseWeaponOptionsInternal : ISettable<LogPlayerUseWeaponOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UseWeaponData;

	public void Set(ref LogPlayerUseWeaponOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set<LogPlayerUseWeaponData, LogPlayerUseWeaponDataInternal>(other.UseWeaponData, ref m_UseWeaponData);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UseWeaponData);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct OnClientActionRequiredCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientAction ClientAction { get; set; }

	public AntiCheatCommonClientActionReason ActionReasonCode { get; set; }

	public Utf8String ActionReasonDetailsString { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct OnClientActionRequiredCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientActionRequiredCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientAction m_ClientAction;

	private AntiCheatCommonClientActionReason m_ActionReasonCode;

	private IntPtr m_ActionReasonDetailsString;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnClientActionRequiredCallbackInfo other)
	{
		other = default(OnClientActionRequiredCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.ClientHandle = m_ClientHandle;
		other.ClientAction = m_ClientAction;
		other.ActionReasonCode = m_ActionReasonCode;
		Helper.Get(m_ActionReasonDetailsString, out Utf8String to2);
		other.ActionReasonDetailsString = to2;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct OnClientAuthStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientAuthStatus ClientAuthStatus { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct OnClientAuthStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientAuthStatusChangedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientAuthStatus m_ClientAuthStatus;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnClientAuthStatusChangedCallbackInfo other)
	{
		other = default(OnClientAuthStatusChangedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.ClientHandle = m_ClientHandle;
		other.ClientAuthStatus = m_ClientAuthStatus;
	}
}


using System;
using Epic.OnlineServices;

public struct OnMessageToClientCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> MessageData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct OnMessageToClientCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnMessageToClientCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private IntPtr m_MessageData;

	private uint m_MessageDataSizeBytes;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnMessageToClientCallbackInfo other)
	{
		other = default(OnMessageToClientCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.ClientHandle = m_ClientHandle;
		Helper.Get(m_MessageData, out ArraySegment<byte> to2, m_MessageDataSizeBytes);
		other.MessageData = to2;
	}
}


public struct Quat
{
	public float w { get; set; }

	public float x { get; set; }

	public float y { get; set; }

	public float z { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct QuatInternal : ISettable<Quat>, IDisposable
{
	private float m_w;

	private float m_x;

	private float m_y;

	private float m_z;

	public void Set(ref Quat other)
	{
		Dispose();
		m_w = other.w;
		m_x = other.x;
		m_y = other.y;
		m_z = other.z;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterEventOptions
{
	public uint EventId { get; set; }

	public Utf8String EventName { get; set; }

	public AntiCheatCommonEventType EventType { get; set; }

	public RegisterEventParamDef[] ParamDefs { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct RegisterEventOptionsInternal : ISettable<RegisterEventOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_EventId;

	private IntPtr m_EventName;

	private AntiCheatCommonEventType m_EventType;

	private uint m_ParamDefsCount;

	private IntPtr m_ParamDefs;

	public void Set(ref RegisterEventOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_EventId = other.EventId;
		Helper.Set(other.EventName, ref m_EventName);
		m_EventType = other.EventType;
		Helper.Set<RegisterEventParamDef, RegisterEventParamDefInternal>(other.ParamDefs, ref m_ParamDefs, out m_ParamDefsCount, isArrayItemAllocated: false);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_EventName);
		Helper.Dispose(ref m_ParamDefs);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterEventParamDef
{
	public Utf8String ParamName { get; set; }

	public AntiCheatCommonEventParamType ParamType { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct RegisterEventParamDefInternal : ISettable<RegisterEventParamDef>, IDisposable
{
	private IntPtr m_ParamName;

	private AntiCheatCommonEventParamType m_ParamType;

	public void Set(ref RegisterEventParamDef other)
	{
		Dispose();
		Helper.Set(other.ParamName, ref m_ParamName);
		m_ParamType = other.ParamType;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ParamName);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct SetClientDetailsOptions
{
	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientFlags ClientFlags { get; set; }

	public AntiCheatCommonClientInput ClientInputMethod { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct SetClientDetailsOptionsInternal : ISettable<SetClientDetailsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientFlags m_ClientFlags;

	private AntiCheatCommonClientInput m_ClientInputMethod;

	public void Set(ref SetClientDetailsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_ClientHandle = other.ClientHandle;
		m_ClientFlags = other.ClientFlags;
		m_ClientInputMethod = other.ClientInputMethod;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


using Epic.OnlineServices;

public struct SetGameSessionIdOptions
{
	public Utf8String GameSessionId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct SetGameSessionIdOptionsInternal : ISettable<SetGameSessionIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_GameSessionId;

	public void Set(ref SetGameSessionIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.GameSessionId, ref m_GameSessionId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_GameSessionId);
	}
}


public struct Vec3f
{
	public float x { get; set; }

	public float y { get; set; }

	public float z { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

internal struct Vec3fInternal : ISettable<Vec3f>, IDisposable
{
	private float m_x;

	private float m_y;

	private float m_z;

	public void Set(ref Vec3f other)
	{
		Dispose();
		m_x = other.x;
		m_y = other.y;
		m_z = other.z;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AddExternalIntegrityCatalogOptions
{
	public Utf8String PathToBinFile { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddExternalIntegrityCatalogOptionsInternal : ISettable<AddExternalIntegrityCatalogOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PathToBinFile;

	public void Set(ref AddExternalIntegrityCatalogOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.PathToBinFile, ref m_PathToBinFile);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PathToBinFile);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientIntegrityViolatedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddNotifyClientIntegrityViolatedOptionsInternal : ISettable<AddNotifyClientIntegrityViolatedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientIntegrityViolatedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToPeerOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddNotifyMessageToPeerOptionsInternal : ISettable<AddNotifyMessageToPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToPeerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToServerOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddNotifyMessageToServerOptionsInternal : ISettable<AddNotifyMessageToServerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToServerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPeerActionRequiredOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddNotifyPeerActionRequiredOptionsInternal : ISettable<AddNotifyPeerActionRequiredOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPeerActionRequiredOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPeerAuthStatusChangedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct AddNotifyPeerAuthStatusChangedOptionsInternal : ISettable<AddNotifyPeerAuthStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPeerAuthStatusChangedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public sealed class AntiCheatClientInterface : Handle
{
	private static byte[] PollStatusStaticBuffer = new byte[256];

	public const int ADDEXTERNALINTEGRITYCATALOG_API_LATEST = 1;

	public const int ADDNOTIFYCLIENTINTEGRITYVIOLATED_API_LATEST = 1;

	public const int ADDNOTIFYMESSAGETOPEER_API_LATEST = 1;

	public const int ADDNOTIFYMESSAGETOSERVER_API_LATEST = 1;

	public const int ADDNOTIFYPEERACTIONREQUIRED_API_LATEST = 1;

	public const int ADDNOTIFYPEERAUTHSTATUSCHANGED_API_LATEST = 1;

	public const int BEGINSESSION_API_LATEST = 3;

	public const int ENDSESSION_API_LATEST = 1;

	public const int GETPROTECTMESSAGEOUTPUTLENGTH_API_LATEST = 1;

	public const int ONMESSAGETOPEERCALLBACK_MAX_MESSAGE_SIZE = 512;

	public const int ONMESSAGETOSERVERCALLBACK_MAX_MESSAGE_SIZE = 512;

	public static readonly IntPtr PEER_SELF = (IntPtr)(-1);

	public const int POLLSTATUS_API_LATEST = 1;

	public const int PROTECTMESSAGE_API_LATEST = 1;

	public const int RECEIVEMESSAGEFROMPEER_API_LATEST = 1;

	public const int RECEIVEMESSAGEFROMSERVER_API_LATEST = 1;

	public const int REGISTERPEER_API_LATEST = 3;

	public const int REGISTERPEER_MAX_AUTHENTICATIONTIMEOUT = 120;

	public const int REGISTERPEER_MIN_AUTHENTICATIONTIMEOUT = 40;

	public const int RESERVED01_API_LATEST = 1;

	public const int UNPROTECTMESSAGE_API_LATEST = 1;

	public const int UNREGISTERPEER_API_LATEST = 1;

	public AntiCheatClientInterface()
	{
	}

	public AntiCheatClientInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddExternalIntegrityCatalog(ref AddExternalIntegrityCatalogOptions options)
	{
		AddExternalIntegrityCatalogOptionsInternal options2 = default(AddExternalIntegrityCatalogOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_AddExternalIntegrityCatalog(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ulong AddNotifyClientIntegrityViolated(ref AddNotifyClientIntegrityViolatedOptions options, object clientData, OnClientIntegrityViolatedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyClientIntegrityViolatedOptionsInternal options2 = default(AddNotifyClientIntegrityViolatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(base.InnerHandle, ref options2, clientDataPointer, OnClientIntegrityViolatedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyMessageToPeer(ref AddNotifyMessageToPeerOptions options, object clientData, OnMessageToPeerCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyMessageToPeerOptionsInternal options2 = default(AddNotifyMessageToPeerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyMessageToPeer(base.InnerHandle, ref options2, clientDataPointer, OnMessageToPeerCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyMessageToServer(ref AddNotifyMessageToServerOptions options, object clientData, OnMessageToServerCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyMessageToServerOptionsInternal options2 = default(AddNotifyMessageToServerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyMessageToServer(base.InnerHandle, ref options2, clientDataPointer, OnMessageToServerCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerActionRequired(ref AddNotifyPeerActionRequiredOptions options, object clientData, OnPeerActionRequiredCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyPeerActionRequiredOptionsInternal options2 = default(AddNotifyPeerActionRequiredOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyPeerActionRequired(base.InnerHandle, ref options2, clientDataPointer, OnPeerActionRequiredCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerAuthStatusChanged(ref AddNotifyPeerAuthStatusChangedOptions options, object clientData, OnPeerAuthStatusChangedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyPeerAuthStatusChangedOptionsInternal options2 = default(AddNotifyPeerAuthStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(base.InnerHandle, ref options2, clientDataPointer, OnPeerAuthStatusChangedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result BeginSession(ref BeginSessionOptions options)
	{
		BeginSessionOptionsInternal options2 = default(BeginSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_BeginSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndSession(ref EndSessionOptions options)
	{
		EndSessionOptionsInternal options2 = default(EndSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_EndSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProtectMessageOutputLength(ref GetProtectMessageOutputLengthOptions options, out uint outBufferSizeBytes)
	{
		GetProtectMessageOutputLengthOptionsInternal options2 = default(GetProtectMessageOutputLengthOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_GetProtectMessageOutputLength(base.InnerHandle, ref options2, out outBufferSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result PollStatus(ref PollStatusOptions options, out AntiCheatClientViolationType outViolationType, out Utf8String outMessage)
	{
		outViolationType = AntiCheatClientViolationType.Invalid;
		outMessage = Utf8String.EmptyString;
		PollStatusOptionsInternal disposable = default(PollStatusOptionsInternal);
		disposable.Set(ref options);
		Result num;
		fixed (byte* pollStatusStaticBuffer = PollStatusStaticBuffer)
		{
			num = Bindings.EOS_AntiCheatClient_PollStatus(outMessage: new IntPtr(pollStatusStaticBuffer), handle: base.InnerHandle, options: ref disposable, outViolationType: out outViolationType);
			if (num == Result.Success)
			{
				outMessage = new Utf8String(PollStatusStaticBuffer);
			}
		}
		Helper.Dispose(ref disposable);
		return num;
	}

	public unsafe Result ProtectMessage(ref ProtectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		outBytesWritten = 0u;
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			ProtectMessageOptionsInternal options2 = default(ProtectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatClient_ProtectMessage(base.InnerHandle, ref options2, outBuffer2, out outBytesWritten);
			}
		}
		return result;
	}

	public Result ReceiveMessageFromPeer(ref ReceiveMessageFromPeerOptions options)
	{
		ReceiveMessageFromPeerOptionsInternal options2 = default(ReceiveMessageFromPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_ReceiveMessageFromPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result ReceiveMessageFromServer(ref ReceiveMessageFromServerOptions options)
	{
		ReceiveMessageFromServerOptionsInternal options2 = default(ReceiveMessageFromServerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_ReceiveMessageFromServer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterPeer(ref RegisterPeerOptions options)
	{
		RegisterPeerOptionsInternal options2 = default(RegisterPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_RegisterPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyClientIntegrityViolated(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToPeer(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyMessageToPeer(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToServer(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyMessageToServer(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerActionRequired(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerAuthStatusChanged(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result Reserved01(ref Reserved01Options options, out int outValue)
	{
		Reserved01OptionsInternal options2 = default(Reserved01OptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_Reserved01(base.InnerHandle, ref options2, out outValue);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result UnprotectMessage(ref UnprotectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		outBytesWritten = 0u;
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			UnprotectMessageOptionsInternal options2 = default(UnprotectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatClient_UnprotectMessage(base.InnerHandle, ref options2, outBuffer2, out outBytesWritten);
			}
		}
		return result;
	}

	public Result UnregisterPeer(ref UnregisterPeerOptions options)
	{
		UnregisterPeerOptionsInternal options2 = default(UnregisterPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_UnregisterPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


public enum AntiCheatClientMode
{
	Invalid,
	ClientServer,
	PeerToPeer
}


public enum AntiCheatClientViolationType
{
	Invalid,
	IntegrityCatalogNotFound,
	IntegrityCatalogError,
	IntegrityCatalogCertificateRevoked,
	IntegrityCatalogMissingMainExecutable,
	GameFileMismatch,
	RequiredGameFileNotFound,
	UnknownGameFileForbidden,
	SystemFileUntrusted,
	ForbiddenModuleLoaded,
	CorruptedMemory,
	ForbiddenToolDetected,
	InternalAntiCheatViolation,
	CorruptedNetworkMessageFlow,
	VirtualMachineNotAllowed,
	ForbiddenSystemConfiguration
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public struct BeginSessionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public AntiCheatClientMode Mode { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct BeginSessionOptionsInternal : ISettable<BeginSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private AntiCheatClientMode m_Mode;

	public void Set(ref BeginSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		m_Mode = other.Mode;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct EndSessionOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct EndSessionOptionsInternal : ISettable<EndSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref EndSessionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


public struct GetProtectMessageOutputLengthOptions
{
	public uint DataLengthBytes { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct GetProtectMessageOutputLengthOptionsInternal : ISettable<GetProtectMessageOutputLengthOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	public void Set(ref GetProtectMessageOutputLengthOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_DataLengthBytes = other.DataLengthBytes;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.AntiCheatClient;

public delegate void OnClientIntegrityViolatedCallback(ref OnClientIntegrityViolatedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatClient;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientIntegrityViolatedCallbackInternal(ref OnClientIntegrityViolatedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal static class OnClientIntegrityViolatedCallbackInternalImplementation
{
	private static OnClientIntegrityViolatedCallbackInternal s_Delegate;

	public static OnClientIntegrityViolatedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnClientIntegrityViolatedCallbackInternal))]
	public static void EntryPoint(ref OnClientIntegrityViolatedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientIntegrityViolatedCallbackInfoInternal, OnClientIntegrityViolatedCallback, OnClientIntegrityViolatedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public struct OnClientIntegrityViolatedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public AntiCheatClientViolationType ViolationType { get; set; }

	public Utf8String ViolationMessage { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct OnClientIntegrityViolatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientIntegrityViolatedCallbackInfo>
{
	private IntPtr m_ClientData;

	private AntiCheatClientViolationType m_ViolationType;

	private IntPtr m_ViolationMessage;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnClientIntegrityViolatedCallbackInfo other)
	{
		other = default(OnClientIntegrityViolatedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.ViolationType = m_ViolationType;
		Helper.Get(m_ViolationMessage, out Utf8String to2);
		other.ViolationMessage = to2;
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnMessageToPeerCallback(ref OnMessageToClientCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToPeerCallbackInternal(ref OnMessageToClientCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

internal static class OnMessageToPeerCallbackInternalImplementation
{
	private static OnMessageToPeerCallbackInternal s_Delegate;

	public static OnMessageToPeerCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToPeerCallbackInternal))]
	public static void EntryPoint(ref OnMessageToClientCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToClientCallbackInfoInternal, OnMessageToPeerCallback, OnMessageToClientCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.AntiCheatClient;

public delegate void OnMessageToServerCallback(ref OnMessageToServerCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatClient;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToServerCallbackInternal(ref OnMessageToServerCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal static class OnMessageToServerCallbackInternalImplementation
{
	private static OnMessageToServerCallbackInternal s_Delegate;

	public static OnMessageToServerCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToServerCallbackInternal))]
	public static void EntryPoint(ref OnMessageToServerCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToServerCallbackInfoInternal, OnMessageToServerCallback, OnMessageToServerCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;
using Epic.OnlineServices;

public struct OnMessageToServerCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ArraySegment<byte> MessageData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct OnMessageToServerCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnMessageToServerCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_MessageData;

	private uint m_MessageDataSizeBytes;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnMessageToServerCallbackInfo other)
	{
		other = default(OnMessageToServerCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_MessageData, out ArraySegment<byte> to2, m_MessageDataSizeBytes);
		other.MessageData = to2;
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnPeerActionRequiredCallback(ref OnClientActionRequiredCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerActionRequiredCallbackInternal(ref OnClientActionRequiredCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

internal static class OnPeerActionRequiredCallbackInternalImplementation
{
	private static OnPeerActionRequiredCallbackInternal s_Delegate;

	public static OnPeerActionRequiredCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerActionRequiredCallbackInternal))]
	public static void EntryPoint(ref OnClientActionRequiredCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientActionRequiredCallbackInfoInternal, OnPeerActionRequiredCallback, OnClientActionRequiredCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnPeerAuthStatusChangedCallback(ref OnClientAuthStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerAuthStatusChangedCallbackInternal(ref OnClientAuthStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

internal static class OnPeerAuthStatusChangedCallbackInternalImplementation
{
	private static OnPeerAuthStatusChangedCallbackInternal s_Delegate;

	public static OnPeerAuthStatusChangedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerAuthStatusChangedCallbackInternal))]
	public static void EntryPoint(ref OnClientAuthStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientAuthStatusChangedCallbackInfoInternal, OnPeerAuthStatusChangedCallback, OnClientAuthStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public struct PollStatusOptions
{
	public uint OutMessageLength { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct PollStatusOptionsInternal : ISettable<PollStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_OutMessageLength;

	public void Set(ref PollStatusOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_OutMessageLength = other.OutMessageLength;
	}

	public void Dispose()
	{
	}
}


using System;

public struct ProtectMessageOptions
{
	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;

internal struct ProtectMessageOptionsInternal
{
	public int m_ApiVersion;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct ReceiveMessageFromPeerOptions
{
	public IntPtr PeerHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct ReceiveMessageFromPeerOptionsInternal : ISettable<ReceiveMessageFromPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public void Set(ref ReceiveMessageFromPeerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_PeerHandle = other.PeerHandle;
		Helper.Set(other.Data, ref m_Data, out m_DataLengthBytes);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
		Helper.Dispose(ref m_Data);
	}
}


using System;

public struct ReceiveMessageFromServerOptions
{
	public ArraySegment<byte> Data { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct ReceiveMessageFromServerOptionsInternal : ISettable<ReceiveMessageFromServerOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public void Set(ref ReceiveMessageFromServerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.Data, ref m_Data, out m_DataLengthBytes);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Data);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterPeerOptions
{
	public IntPtr PeerHandle { get; set; }

	public AntiCheatCommonClientType ClientType { get; set; }

	public AntiCheatCommonClientPlatform ClientPlatform { get; set; }

	public uint AuthenticationTimeout { get; set; }

	public Utf8String AccountId_DEPRECATED { get; set; }

	public Utf8String IpAddress { get; set; }

	public ProductUserId PeerProductUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

internal struct RegisterPeerOptionsInternal : ISettable<RegisterPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	private AntiCheatCommonClientType m_ClientType;

	private AntiCheatCommonClientPlatform m_ClientPlatform;

	private uint m_AuthenticationTimeout;

	private IntPtr m_AccountId_DEPRECATED;

	private IntPtr m_IpAddress;

	private IntPtr m_PeerProductUserId;

	public void Set(ref RegisterPeerOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		m_PeerHandle = other.PeerHandle;
		m_ClientType = other.ClientType;
		m_ClientPlatform = other.ClientPlatform;
		m_AuthenticationTimeout = other.AuthenticationTimeout;
		Helper.Set(other.AccountId_DEPRECATED, ref m_AccountId_DEPRECATED);
		Helper.Set(other.IpAddress, ref m_IpAddress);
		Helper.Set((Handle)other.PeerProductUserId, ref m_PeerProductUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
		Helper.Dispose(ref m_AccountId_DEPRECATED);
		Helper.Dispose(ref m_IpAddress);
		Helper.Dispose(ref m_PeerProductUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct Reserved01Options
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct Reserved01OptionsInternal : ISettable<Reserved01Options>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref Reserved01Options other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System;

public struct UnprotectMessageOptions
{
	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;

internal struct UnprotectMessageOptionsInternal
{
	public int m_ApiVersion;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct UnregisterPeerOptions
{
	public IntPtr PeerHandle { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

internal struct UnregisterPeerOptionsInternal : ISettable<UnregisterPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	public void Set(ref UnregisterPeerOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_PeerHandle = other.PeerHandle;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public sealed class AchievementsInterface : Handle
{
	public const int ACHIEVEMENT_UNLOCKTIME_UNDEFINED = -1;

	public const int ADDNOTIFYACHIEVEMENTSUNLOCKEDV2_API_LATEST = 2;

	public const int ADDNOTIFYACHIEVEMENTSUNLOCKED_API_LATEST = 1;

	public const int COPYACHIEVEMENTDEFINITIONV2BYACHIEVEMENTID_API_LATEST = 2;

	public const int COPYACHIEVEMENTDEFINITIONV2BYINDEX_API_LATEST = 2;

	public const int COPYDEFINITIONBYACHIEVEMENTID_API_LATEST = 1;

	public const int COPYDEFINITIONBYINDEX_API_LATEST = 1;

	public const int COPYDEFINITIONV2BYACHIEVEMENTID_API_LATEST = 2;

	public const int COPYDEFINITIONV2BYINDEX_API_LATEST = 2;

	public const int COPYPLAYERACHIEVEMENTBYACHIEVEMENTID_API_LATEST = 2;

	public const int COPYPLAYERACHIEVEMENTBYINDEX_API_LATEST = 2;

	public const int COPYUNLOCKEDACHIEVEMENTBYACHIEVEMENTID_API_LATEST = 1;

	public const int COPYUNLOCKEDACHIEVEMENTBYINDEX_API_LATEST = 1;

	public const int DEFINITIONV2_API_LATEST = 2;

	public const int DEFINITION_API_LATEST = 1;

	public const int GETACHIEVEMENTDEFINITIONCOUNT_API_LATEST = 1;

	public const int GETPLAYERACHIEVEMENTCOUNT_API_LATEST = 1;

	public const int GETUNLOCKEDACHIEVEMENTCOUNT_API_LATEST = 1;

	public const int PLAYERACHIEVEMENT_API_LATEST = 2;

	public const int PLAYERSTATINFO_API_LATEST = 1;

	public const int QUERYDEFINITIONS_API_LATEST = 3;

	public const int QUERYPLAYERACHIEVEMENTS_API_LATEST = 2;

	public const int STATTHRESHOLDS_API_LATEST = 1;

	public const int STATTHRESHOLD_API_LATEST = 1;

	public const int UNLOCKACHIEVEMENTS_API_LATEST = 1;

	public const int UNLOCKEDACHIEVEMENT_API_LATEST = 1;

	public AchievementsInterface()
	{
	}

	public AchievementsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyAchievementsUnlocked(ref AddNotifyAchievementsUnlockedOptions options, object clientData, OnAchievementsUnlockedCallback notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyAchievementsUnlockedOptionsInternal options2 = default(AddNotifyAchievementsUnlockedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Achievements_AddNotifyAchievementsUnlocked(base.InnerHandle, ref options2, clientDataPointer, OnAchievementsUnlockedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyAchievementsUnlockedV2(ref AddNotifyAchievementsUnlockedV2Options options, object clientData, OnAchievementsUnlockedCallbackV2 notificationFn)
	{
		if (notificationFn == null)
		{
			throw new ArgumentNullException("notificationFn");
		}
		AddNotifyAchievementsUnlockedV2OptionsInternal options2 = default(AddNotifyAchievementsUnlockedV2OptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, notificationFn);
		ulong num = Bindings.EOS_Achievements_AddNotifyAchievementsUnlockedV2(base.InnerHandle, ref options2, clientDataPointer, OnAchievementsUnlockedCallbackV2InternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result CopyAchievementDefinitionByAchievementId(ref CopyAchievementDefinitionByAchievementIdOptions options, out Definition? outDefinition)
	{
		CopyAchievementDefinitionByAchievementIdOptionsInternal options2 = default(CopyAchievementDefinitionByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionByAchievementId(base.InnerHandle, ref options2, out outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outDefinition2, out outDefinition);
		if (outDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_Definition_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionByIndex(ref CopyAchievementDefinitionByIndexOptions options, out Definition? outDefinition)
	{
		CopyAchievementDefinitionByIndexOptionsInternal options2 = default(CopyAchievementDefinitionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionByIndex(base.InnerHandle, ref options2, out outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outDefinition2, out outDefinition);
		if (outDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_Definition_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionV2ByAchievementId(ref CopyAchievementDefinitionV2ByAchievementIdOptions options, out DefinitionV2? outDefinition)
	{
		CopyAchievementDefinitionV2ByAchievementIdOptionsInternal options2 = default(CopyAchievementDefinitionV2ByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(base.InnerHandle, ref options2, out outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionV2Internal, DefinitionV2>(outDefinition2, out outDefinition);
		if (outDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_DefinitionV2_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionV2ByIndex(ref CopyAchievementDefinitionV2ByIndexOptions options, out DefinitionV2? outDefinition)
	{
		CopyAchievementDefinitionV2ByIndexOptionsInternal options2 = default(CopyAchievementDefinitionV2ByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionV2ByIndex(base.InnerHandle, ref options2, out outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionV2Internal, DefinitionV2>(outDefinition2, out outDefinition);
		if (outDefinition2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_DefinitionV2_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyPlayerAchievementByAchievementId(ref CopyPlayerAchievementByAchievementIdOptions options, out PlayerAchievement? outAchievement)
	{
		CopyPlayerAchievementByAchievementIdOptionsInternal options2 = default(CopyPlayerAchievementByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyPlayerAchievementByAchievementId(base.InnerHandle, ref options2, out outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<PlayerAchievementInternal, PlayerAchievement>(outAchievement2, out outAchievement);
		if (outAchievement2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_PlayerAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyPlayerAchievementByIndex(ref CopyPlayerAchievementByIndexOptions options, out PlayerAchievement? outAchievement)
	{
		CopyPlayerAchievementByIndexOptionsInternal options2 = default(CopyPlayerAchievementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyPlayerAchievementByIndex(base.InnerHandle, ref options2, out outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<PlayerAchievementInternal, PlayerAchievement>(outAchievement2, out outAchievement);
		if (outAchievement2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_PlayerAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyUnlockedAchievementByAchievementId(ref CopyUnlockedAchievementByAchievementIdOptions options, out UnlockedAchievement? outAchievement)
	{
		CopyUnlockedAchievementByAchievementIdOptionsInternal options2 = default(CopyUnlockedAchievementByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyUnlockedAchievementByAchievementId(base.InnerHandle, ref options2, out outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<UnlockedAchievementInternal, UnlockedAchievement>(outAchievement2, out outAchievement);
		if (outAchievement2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_UnlockedAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyUnlockedAchievementByIndex(ref CopyUnlockedAchievementByIndexOptions options, out UnlockedAchievement? outAchievement)
	{
		CopyUnlockedAchievementByIndexOptionsInternal options2 = default(CopyUnlockedAchievementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyUnlockedAchievementByIndex(base.InnerHandle, ref options2, out outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<UnlockedAchievementInternal, UnlockedAchievement>(outAchievement2, out outAchievement);
		if (outAchievement2 != IntPtr.Zero)
		{
			Bindings.EOS_Achievements_UnlockedAchievement_Release(outAchievement2);
		}
		return result;
	}

	public uint GetAchievementDefinitionCount(ref GetAchievementDefinitionCountOptions options)
	{
		GetAchievementDefinitionCountOptionsInternal options2 = default(GetAchievementDefinitionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetAchievementDefinitionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetPlayerAchievementCount(ref GetPlayerAchievementCountOptions options)
	{
		GetPlayerAchievementCountOptionsInternal options2 = default(GetPlayerAchievementCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetPlayerAchievementCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetUnlockedAchievementCount(ref GetUnlockedAchievementCountOptions options)
	{
		GetUnlockedAchievementCountOptionsInternal options2 = default(GetUnlockedAchievementCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetUnlockedAchievementCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryDefinitions(ref QueryDefinitionsOptions options, object clientData, OnQueryDefinitionsCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryDefinitionsOptionsInternal options2 = default(QueryDefinitionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Achievements_QueryDefinitions(base.InnerHandle, ref options2, clientDataPointer, OnQueryDefinitionsCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void QueryPlayerAchievements(ref QueryPlayerAchievementsOptions options, object clientData, OnQueryPlayerAchievementsCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryPlayerAchievementsOptionsInternal options2 = default(QueryPlayerAchievementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Achievements_QueryPlayerAchievements(base.InnerHandle, ref options2, clientDataPointer, OnQueryPlayerAchievementsCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyAchievementsUnlocked(ulong inId)
	{
		Bindings.EOS_Achievements_RemoveNotifyAchievementsUnlocked(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void UnlockAchievements(ref UnlockAchievementsOptions options, object clientData, OnUnlockAchievementsCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		UnlockAchievementsOptionsInternal options2 = default(UnlockAchievementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_Achievements_UnlockAchievements(base.InnerHandle, ref options2, clientDataPointer, OnUnlockAchievementsCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAchievementsUnlockedOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct AddNotifyAchievementsUnlockedOptionsInternal : ISettable<AddNotifyAchievementsUnlockedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAchievementsUnlockedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAchievementsUnlockedV2Options
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct AddNotifyAchievementsUnlockedV2OptionsInternal : ISettable<AddNotifyAchievementsUnlockedV2Options>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAchievementsUnlockedV2Options other)
	{
		Dispose();
		m_ApiVersion = 2;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyAchievementDefinitionByAchievementIdOptions
{
	public Utf8String AchievementId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyAchievementDefinitionByAchievementIdOptionsInternal : ISettable<CopyAchievementDefinitionByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	public void Set(ref CopyAchievementDefinitionByAchievementIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.AchievementId, ref m_AchievementId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
	}
}


public struct CopyAchievementDefinitionByIndexOptions
{
	public uint AchievementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyAchievementDefinitionByIndexOptionsInternal : ISettable<CopyAchievementDefinitionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AchievementIndex;

	public void Set(ref CopyAchievementDefinitionByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_AchievementIndex = other.AchievementIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyAchievementDefinitionV2ByAchievementIdOptions
{
	public Utf8String AchievementId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyAchievementDefinitionV2ByAchievementIdOptionsInternal : ISettable<CopyAchievementDefinitionV2ByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	public void Set(ref CopyAchievementDefinitionV2ByAchievementIdOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set(other.AchievementId, ref m_AchievementId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
	}
}


public struct CopyAchievementDefinitionV2ByIndexOptions
{
	public uint AchievementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyAchievementDefinitionV2ByIndexOptionsInternal : ISettable<CopyAchievementDefinitionV2ByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AchievementIndex;

	public void Set(ref CopyAchievementDefinitionV2ByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		m_AchievementIndex = other.AchievementIndex;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyPlayerAchievementByAchievementIdOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AchievementId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyPlayerAchievementByAchievementIdOptionsInternal : ISettable<CopyPlayerAchievementByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AchievementId;

	private IntPtr m_LocalUserId;

	public void Set(ref CopyPlayerAchievementByAchievementIdOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set(other.AchievementId, ref m_AchievementId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AchievementId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyPlayerAchievementByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint AchievementIndex { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyPlayerAchievementByIndexOptionsInternal : ISettable<CopyPlayerAchievementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_AchievementIndex;

	private IntPtr m_LocalUserId;

	public void Set(ref CopyPlayerAchievementByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		m_AchievementIndex = other.AchievementIndex;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyUnlockedAchievementByAchievementIdOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String AchievementId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyUnlockedAchievementByAchievementIdOptionsInternal : ISettable<CopyUnlockedAchievementByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_AchievementId;

	public void Set(ref CopyUnlockedAchievementByAchievementIdOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
		Helper.Set(other.AchievementId, ref m_AchievementId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementId);
	}
}


using Epic.OnlineServices;

public struct CopyUnlockedAchievementByIndexOptions
{
	public ProductUserId UserId { get; set; }

	public uint AchievementIndex { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct CopyUnlockedAchievementByIndexOptionsInternal : ISettable<CopyUnlockedAchievementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_AchievementIndex;

	public void Set(ref CopyUnlockedAchievementByIndexOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
		m_AchievementIndex = other.AchievementIndex;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct Definition
{
	public Utf8String AchievementId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String Description { get; set; }

	public Utf8String LockedDisplayName { get; set; }

	public Utf8String LockedDescription { get; set; }

	public Utf8String HiddenDescription { get; set; }

	public Utf8String CompletionDescription { get; set; }

	public Utf8String UnlockedIconId { get; set; }

	public Utf8String LockedIconId { get; set; }

	public bool IsHidden { get; set; }

	public StatThresholds[] StatThresholds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct DefinitionInternal : IGettable<Definition>
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private IntPtr m_DisplayName;

	private IntPtr m_Description;

	private IntPtr m_LockedDisplayName;

	private IntPtr m_LockedDescription;

	private IntPtr m_HiddenDescription;

	private IntPtr m_CompletionDescription;

	private IntPtr m_UnlockedIconId;

	private IntPtr m_LockedIconId;

	private int m_IsHidden;

	private int m_StatThresholdsCount;

	private IntPtr m_StatThresholds;

	public void Get(out Definition other)
	{
		other = default(Definition);
		Helper.Get(m_AchievementId, out Utf8String to);
		other.AchievementId = to;
		Helper.Get(m_DisplayName, out Utf8String to2);
		other.DisplayName = to2;
		Helper.Get(m_Description, out Utf8String to3);
		other.Description = to3;
		Helper.Get(m_LockedDisplayName, out Utf8String to4);
		other.LockedDisplayName = to4;
		Helper.Get(m_LockedDescription, out Utf8String to5);
		other.LockedDescription = to5;
		Helper.Get(m_HiddenDescription, out Utf8String to6);
		other.HiddenDescription = to6;
		Helper.Get(m_CompletionDescription, out Utf8String to7);
		other.CompletionDescription = to7;
		Helper.Get(m_UnlockedIconId, out Utf8String to8);
		other.UnlockedIconId = to8;
		Helper.Get(m_LockedIconId, out Utf8String to9);
		other.LockedIconId = to9;
		Helper.Get(m_IsHidden, out bool to10);
		other.IsHidden = to10;
		Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out var to11, m_StatThresholdsCount, isArrayItemAllocated: false);
		other.StatThresholds = to11;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct DefinitionV2
{
	public Utf8String AchievementId { get; set; }

	public Utf8String UnlockedDisplayName { get; set; }

	public Utf8String UnlockedDescription { get; set; }

	public Utf8String LockedDisplayName { get; set; }

	public Utf8String LockedDescription { get; set; }

	public Utf8String FlavorText { get; set; }

	public Utf8String UnlockedIconURL { get; set; }

	public Utf8String LockedIconURL { get; set; }

	public bool IsHidden { get; set; }

	public StatThresholds[] StatThresholds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct DefinitionV2Internal : IGettable<DefinitionV2>
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private IntPtr m_UnlockedDisplayName;

	private IntPtr m_UnlockedDescription;

	private IntPtr m_LockedDisplayName;

	private IntPtr m_LockedDescription;

	private IntPtr m_FlavorText;

	private IntPtr m_UnlockedIconURL;

	private IntPtr m_LockedIconURL;

	private int m_IsHidden;

	private uint m_StatThresholdsCount;

	private IntPtr m_StatThresholds;

	public void Get(out DefinitionV2 other)
	{
		other = default(DefinitionV2);
		Helper.Get(m_AchievementId, out Utf8String to);
		other.AchievementId = to;
		Helper.Get(m_UnlockedDisplayName, out Utf8String to2);
		other.UnlockedDisplayName = to2;
		Helper.Get(m_UnlockedDescription, out Utf8String to3);
		other.UnlockedDescription = to3;
		Helper.Get(m_LockedDisplayName, out Utf8String to4);
		other.LockedDisplayName = to4;
		Helper.Get(m_LockedDescription, out Utf8String to5);
		other.LockedDescription = to5;
		Helper.Get(m_FlavorText, out Utf8String to6);
		other.FlavorText = to6;
		Helper.Get(m_UnlockedIconURL, out Utf8String to7);
		other.UnlockedIconURL = to7;
		Helper.Get(m_LockedIconURL, out Utf8String to8);
		other.LockedIconURL = to8;
		Helper.Get(m_IsHidden, out bool to9);
		other.IsHidden = to9;
		Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out var to10, m_StatThresholdsCount, isArrayItemAllocated: false);
		other.StatThresholds = to10;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetAchievementDefinitionCountOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct GetAchievementDefinitionCountOptionsInternal : ISettable<GetAchievementDefinitionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetAchievementDefinitionCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct GetPlayerAchievementCountOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct GetPlayerAchievementCountOptionsInternal : ISettable<GetPlayerAchievementCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public void Set(ref GetPlayerAchievementCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct GetUnlockedAchievementCountOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct GetUnlockedAchievementCountOptionsInternal : ISettable<GetUnlockedAchievementCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public void Set(ref GetUnlockedAchievementCountOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnAchievementsUnlockedCallback(ref OnAchievementsUnlockedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAchievementsUnlockedCallbackInternal(ref OnAchievementsUnlockedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal static class OnAchievementsUnlockedCallbackInternalImplementation
{
	private static OnAchievementsUnlockedCallbackInternal s_Delegate;

	public static OnAchievementsUnlockedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnAchievementsUnlockedCallbackInternal))]
	public static void EntryPoint(ref OnAchievementsUnlockedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnAchievementsUnlockedCallbackInfoInternal, OnAchievementsUnlockedCallback, OnAchievementsUnlockedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnAchievementsUnlockedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public Utf8String[] AchievementIds { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct OnAchievementsUnlockedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private uint m_AchievementsCount;

	private IntPtr m_AchievementIds;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnAchievementsUnlockedCallbackInfo other)
	{
		other = default(OnAchievementsUnlockedCallbackInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_UserId, out ProductUserId to2);
		other.UserId = to2;
		Helper.Get(m_AchievementIds, out var to3, m_AchievementsCount, isArrayItemAllocated: true);
		other.AchievementIds = to3;
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnAchievementsUnlockedCallbackV2(ref OnAchievementsUnlockedCallbackV2Info data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAchievementsUnlockedCallbackV2Internal(ref OnAchievementsUnlockedCallbackV2InfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal static class OnAchievementsUnlockedCallbackV2InternalImplementation
{
	private static OnAchievementsUnlockedCallbackV2Internal s_Delegate;

	public static OnAchievementsUnlockedCallbackV2Internal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnAchievementsUnlockedCallbackV2Internal))]
	public static void EntryPoint(ref OnAchievementsUnlockedCallbackV2InfoInternal data)
	{
		if (Helper.TryGetCallback<OnAchievementsUnlockedCallbackV2InfoInternal, OnAchievementsUnlockedCallbackV2, OnAchievementsUnlockedCallbackV2Info>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;
using Epic.OnlineServices;

public struct OnAchievementsUnlockedCallbackV2Info : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public Utf8String AchievementId { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct OnAchievementsUnlockedCallbackV2InfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackV2Info>
{
	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private IntPtr m_AchievementId;

	private long m_UnlockTime;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnAchievementsUnlockedCallbackV2Info other)
	{
		other = default(OnAchievementsUnlockedCallbackV2Info);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_UserId, out ProductUserId to2);
		other.UserId = to2;
		Helper.Get(m_AchievementId, out Utf8String to3);
		other.AchievementId = to3;
		Helper.Get(m_UnlockTime, out DateTimeOffset? to4);
		other.UnlockTime = to4;
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnQueryDefinitionsCompleteCallback(ref OnQueryDefinitionsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryDefinitionsCompleteCallbackInternal(ref OnQueryDefinitionsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal static class OnQueryDefinitionsCompleteCallbackInternalImplementation
{
	private static OnQueryDefinitionsCompleteCallbackInternal s_Delegate;

	public static OnQueryDefinitionsCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryDefinitionsCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryDefinitionsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryDefinitionsCompleteCallbackInfoInternal, OnQueryDefinitionsCompleteCallback, OnQueryDefinitionsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnQueryDefinitionsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct OnQueryDefinitionsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryDefinitionsCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryDefinitionsCompleteCallbackInfo other)
	{
		other = default(OnQueryDefinitionsCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnQueryPlayerAchievementsCompleteCallback(ref OnQueryPlayerAchievementsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPlayerAchievementsCompleteCallbackInternal(ref OnQueryPlayerAchievementsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal static class OnQueryPlayerAchievementsCompleteCallbackInternalImplementation
{
	private static OnQueryPlayerAchievementsCompleteCallbackInternal s_Delegate;

	public static OnQueryPlayerAchievementsCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPlayerAchievementsCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryPlayerAchievementsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryPlayerAchievementsCompleteCallbackInfoInternal, OnQueryPlayerAchievementsCompleteCallback, OnQueryPlayerAchievementsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnQueryPlayerAchievementsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct OnQueryPlayerAchievementsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryPlayerAchievementsCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryPlayerAchievementsCompleteCallbackInfo other)
	{
		other = default(OnQueryPlayerAchievementsCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_TargetUserId, out ProductUserId to2);
		other.TargetUserId = to2;
		Helper.Get(m_LocalUserId, out ProductUserId to3);
		other.LocalUserId = to3;
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnUnlockAchievementsCompleteCallback(ref OnUnlockAchievementsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnlockAchievementsCompleteCallbackInternal(ref OnUnlockAchievementsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal static class OnUnlockAchievementsCompleteCallbackInternalImplementation
{
	private static OnUnlockAchievementsCompleteCallbackInternal s_Delegate;

	public static OnUnlockAchievementsCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnUnlockAchievementsCompleteCallbackInternal))]
	public static void EntryPoint(ref OnUnlockAchievementsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnUnlockAchievementsCompleteCallbackInfoInternal, OnUnlockAchievementsCompleteCallback, OnUnlockAchievementsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnUnlockAchievementsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public uint AchievementsCount { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct OnUnlockAchievementsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnUnlockAchievementsCompleteCallbackInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private uint m_AchievementsCount;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnUnlockAchievementsCompleteCallbackInfo other)
	{
		other = default(OnUnlockAchievementsCompleteCallbackInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_UserId, out ProductUserId to2);
		other.UserId = to2;
		other.AchievementsCount = m_AchievementsCount;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct PlayerAchievement
{
	public Utf8String AchievementId { get; set; }

	public double Progress { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }

	public PlayerStatInfo[] StatInfo { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String Description { get; set; }

	public Utf8String IconURL { get; set; }

	public Utf8String FlavorText { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct PlayerAchievementInternal : IGettable<PlayerAchievement>
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private double m_Progress;

	private long m_UnlockTime;

	private int m_StatInfoCount;

	private IntPtr m_StatInfo;

	private IntPtr m_DisplayName;

	private IntPtr m_Description;

	private IntPtr m_IconURL;

	private IntPtr m_FlavorText;

	public void Get(out PlayerAchievement other)
	{
		other = default(PlayerAchievement);
		Helper.Get(m_AchievementId, out Utf8String to);
		other.AchievementId = to;
		other.Progress = m_Progress;
		Helper.Get(m_UnlockTime, out DateTimeOffset? to2);
		other.UnlockTime = to2;
		Helper.Get<PlayerStatInfoInternal, PlayerStatInfo>(m_StatInfo, out var to3, m_StatInfoCount, isArrayItemAllocated: false);
		other.StatInfo = to3;
		Helper.Get(m_DisplayName, out Utf8String to4);
		other.DisplayName = to4;
		Helper.Get(m_Description, out Utf8String to5);
		other.Description = to5;
		Helper.Get(m_IconURL, out Utf8String to6);
		other.IconURL = to6;
		Helper.Get(m_FlavorText, out Utf8String to7);
		other.FlavorText = to7;
	}
}


using Epic.OnlineServices;

public struct PlayerStatInfo
{
	public Utf8String Name { get; set; }

	public int CurrentValue { get; set; }

	public int ThresholdValue { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct PlayerStatInfoInternal : IGettable<PlayerStatInfo>
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private int m_CurrentValue;

	private int m_ThresholdValue;

	public void Get(out PlayerStatInfo other)
	{
		other = default(PlayerStatInfo);
		Helper.Get(m_Name, out Utf8String to);
		other.Name = to;
		other.CurrentValue = m_CurrentValue;
		other.ThresholdValue = m_ThresholdValue;
	}
}


using Epic.OnlineServices;

public struct QueryDefinitionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public EpicAccountId EpicUserId_DEPRECATED { get; set; }

	public Utf8String[] HiddenAchievementIds_DEPRECATED { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct QueryDefinitionsOptionsInternal : ISettable<QueryDefinitionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EpicUserId_DEPRECATED;

	private IntPtr m_HiddenAchievementIds_DEPRECATED;

	private uint m_HiddenAchievementsCount_DEPRECATED;

	public void Set(ref QueryDefinitionsOptions other)
	{
		Dispose();
		m_ApiVersion = 3;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.EpicUserId_DEPRECATED, ref m_EpicUserId_DEPRECATED);
		Helper.Set(other.HiddenAchievementIds_DEPRECATED, ref m_HiddenAchievementIds_DEPRECATED, out m_HiddenAchievementsCount_DEPRECATED, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EpicUserId_DEPRECATED);
		Helper.Dispose(ref m_HiddenAchievementIds_DEPRECATED);
	}
}


using Epic.OnlineServices;

public struct QueryPlayerAchievementsOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct QueryPlayerAchievementsOptionsInternal : ISettable<QueryPlayerAchievementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public void Set(ref QueryPlayerAchievementsOptions other)
	{
		Dispose();
		m_ApiVersion = 2;
		Helper.Set((Handle)other.TargetUserId, ref m_TargetUserId);
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct StatThresholds
{
	public Utf8String Name { get; set; }

	public int Threshold { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct StatThresholdsInternal : IGettable<StatThresholds>
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private int m_Threshold;

	public void Get(out StatThresholds other)
	{
		other = default(StatThresholds);
		Helper.Get(m_Name, out Utf8String to);
		other.Name = to;
		other.Threshold = m_Threshold;
	}
}


using Epic.OnlineServices;

public struct UnlockAchievementsOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String[] AchievementIds { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct UnlockAchievementsOptionsInternal : ISettable<UnlockAchievementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_AchievementIds;

	private uint m_AchievementsCount;

	public void Set(ref UnlockAchievementsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.UserId, ref m_UserId);
		Helper.Set(other.AchievementIds, ref m_AchievementIds, out m_AchievementsCount, isArrayItemAllocated: true);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementIds);
	}
}


using System;
using Epic.OnlineServices;

public struct UnlockedAchievement
{
	public Utf8String AchievementId { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

internal struct UnlockedAchievementInternal : IGettable<UnlockedAchievement>
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private long m_UnlockTime;

	public void Get(out UnlockedAchievement other)
	{
		other = default(UnlockedAchievement);
		Helper.Get(m_AchievementId, out Utf8String to);
		other.AchievementId = to;
		Helper.Get(m_UnlockTime, out DateTimeOffset? to2);
		other.UnlockTime = to2;
	}
}


using Epic.OnlineServices;

public struct GetNextReceivedPacketSizeOptions
{
	internal byte[] m_RequestedChannel;

	public ProductUserId LocalUserId { get; set; }

	public byte? RequestedChannel
	{
		get
		{
			if (m_RequestedChannel == null)
			{
				return null;
			}
			return m_RequestedChannel[0];
		}
		set
		{
			if (value.HasValue)
			{
				if (m_RequestedChannel == null)
				{
					m_RequestedChannel = new byte[1];
				}
				m_RequestedChannel[0] = value.Value;
			}
			else
			{
				m_RequestedChannel = null;
			}
		}
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetNextReceivedPacketSizeOptionsInternal : ISettable<GetNextReceivedPacketSizeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RequestedChannel;

	public void Set(ref GetNextReceivedPacketSizeOptions other)
	{
		m_ApiVersion = 2;
		m_LocalUserId = other.LocalUserId.InnerHandle;
		m_RequestedChannel = IntPtr.Zero;
		if (other.RequestedChannel.HasValue)
		{
			m_RequestedChannel = Helper.AddPinnedBuffer(other.m_RequestedChannel);
		}
	}

	public void Set(ref GetNextReceivedPacketSizeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			m_LocalUserId = other.Value.LocalUserId.InnerHandle;
			m_RequestedChannel = IntPtr.Zero;
			if (other.Value.RequestedChannel.HasValue)
			{
				m_RequestedChannel = Helper.AddPinnedBuffer(other.Value.m_RequestedChannel);
			}
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RequestedChannel);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public sealed class P2PInterface : Handle
{
	public const int ACCEPTCONNECTION_API_LATEST = 1;

	public const int ADDNOTIFYINCOMINGPACKETQUEUEFULL_API_LATEST = 1;

	public const int ADDNOTIFYPEERCONNECTIONCLOSED_API_LATEST = 1;

	public const int ADDNOTIFYPEERCONNECTIONESTABLISHED_API_LATEST = 1;

	public const int ADDNOTIFYPEERCONNECTIONINTERRUPTED_API_LATEST = 1;

	public const int ADDNOTIFYPEERCONNECTIONREQUEST_API_LATEST = 1;

	public const int CLEARPACKETQUEUE_API_LATEST = 1;

	public const int CLOSECONNECTIONS_API_LATEST = 1;

	public const int CLOSECONNECTION_API_LATEST = 1;

	public const int GETNATTYPE_API_LATEST = 1;

	public const int GETNEXTRECEIVEDPACKETSIZE_API_LATEST = 2;

	public const int GETPACKETQUEUEINFO_API_LATEST = 1;

	public const int GETPORTRANGE_API_LATEST = 1;

	public const int GETRELAYCONTROL_API_LATEST = 1;

	public const int MAX_CONNECTIONS = 32;

	public const int MAX_PACKET_SIZE = 1170;

	public const int MAX_QUEUE_SIZE_UNLIMITED = 0;

	public const int QUERYNATTYPE_API_LATEST = 1;

	public const int RECEIVEPACKET_API_LATEST = 2;

	public const int SENDPACKET_API_LATEST = 3;

	public const int SETPACKETQUEUESIZE_API_LATEST = 1;

	public const int SETPORTRANGE_API_LATEST = 1;

	public const int SETRELAYCONTROL_API_LATEST = 1;

	public const int SOCKETID_API_LATEST = 1;

	public const int SOCKETID_SOCKETNAME_SIZE = 33;

	public Result ReceivePacket(ref ReceivePacketOptions options, ref ProductUserId outPeerId, ref SocketId outSocketId, out byte outChannel, ArraySegment<byte> outData, out uint outBytesWritten)
	{
		bool wasCacheValid = outSocketId.PrepareForUpdate();
		IntPtr value = Helper.AddPinnedBuffer(outSocketId.m_AllBytes);
		IntPtr value2 = Helper.AddPinnedBuffer(outData);
		ReceivePacketOptionsInternal options2 = new ReceivePacketOptionsInternal(ref options);
		try
		{
			IntPtr outPeerId2 = IntPtr.Zero;
			outChannel = 0;
			outBytesWritten = 0u;
			Result result = Bindings.EOS_P2P_ReceivePacket(base.InnerHandle, ref options2, out outPeerId2, value, out outChannel, value2, out outBytesWritten);
			if (outPeerId == null)
			{
				Helper.Get(outPeerId2, out outPeerId);
			}
			else if (outPeerId.InnerHandle != outPeerId2)
			{
				outPeerId.InnerHandle = outPeerId2;
			}
			outSocketId.CheckIfChanged(wasCacheValid);
			return result;
		}
		finally
		{
			Helper.Dispose(ref value);
			Helper.Dispose(ref value2);
			options2.Dispose();
		}
	}

	public P2PInterface()
	{
	}

	public P2PInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AcceptConnection(ref AcceptConnectionOptions options)
	{
		AcceptConnectionOptionsInternal options2 = default(AcceptConnectionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_AcceptConnection(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ulong AddNotifyIncomingPacketQueueFull(ref AddNotifyIncomingPacketQueueFullOptions options, object clientData, OnIncomingPacketQueueFullCallback incomingPacketQueueFullHandler)
	{
		if (incomingPacketQueueFullHandler == null)
		{
			throw new ArgumentNullException("incomingPacketQueueFullHandler");
		}
		AddNotifyIncomingPacketQueueFullOptionsInternal options2 = default(AddNotifyIncomingPacketQueueFullOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, incomingPacketQueueFullHandler);
		ulong num = Bindings.EOS_P2P_AddNotifyIncomingPacketQueueFull(base.InnerHandle, ref options2, clientDataPointer, OnIncomingPacketQueueFullCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionClosed(ref AddNotifyPeerConnectionClosedOptions options, object clientData, OnRemoteConnectionClosedCallback connectionClosedHandler)
	{
		if (connectionClosedHandler == null)
		{
			throw new ArgumentNullException("connectionClosedHandler");
		}
		AddNotifyPeerConnectionClosedOptionsInternal options2 = default(AddNotifyPeerConnectionClosedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, connectionClosedHandler);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionClosed(base.InnerHandle, ref options2, clientDataPointer, OnRemoteConnectionClosedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionEstablished(ref AddNotifyPeerConnectionEstablishedOptions options, object clientData, OnPeerConnectionEstablishedCallback connectionEstablishedHandler)
	{
		if (connectionEstablishedHandler == null)
		{
			throw new ArgumentNullException("connectionEstablishedHandler");
		}
		AddNotifyPeerConnectionEstablishedOptionsInternal options2 = default(AddNotifyPeerConnectionEstablishedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, connectionEstablishedHandler);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionEstablished(base.InnerHandle, ref options2, clientDataPointer, OnPeerConnectionEstablishedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionInterrupted(ref AddNotifyPeerConnectionInterruptedOptions options, object clientData, OnPeerConnectionInterruptedCallback connectionInterruptedHandler)
	{
		if (connectionInterruptedHandler == null)
		{
			throw new ArgumentNullException("connectionInterruptedHandler");
		}
		AddNotifyPeerConnectionInterruptedOptionsInternal options2 = default(AddNotifyPeerConnectionInterruptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, connectionInterruptedHandler);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionInterrupted(base.InnerHandle, ref options2, clientDataPointer, OnPeerConnectionInterruptedCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionRequest(ref AddNotifyPeerConnectionRequestOptions options, object clientData, OnIncomingConnectionRequestCallback connectionRequestHandler)
	{
		if (connectionRequestHandler == null)
		{
			throw new ArgumentNullException("connectionRequestHandler");
		}
		AddNotifyPeerConnectionRequestOptionsInternal options2 = default(AddNotifyPeerConnectionRequestOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, connectionRequestHandler);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionRequest(base.InnerHandle, ref options2, clientDataPointer, OnIncomingConnectionRequestCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataPointer, num);
		return num;
	}

	public Result ClearPacketQueue(ref ClearPacketQueueOptions options)
	{
		ClearPacketQueueOptionsInternal options2 = default(ClearPacketQueueOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_ClearPacketQueue(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result CloseConnection(ref CloseConnectionOptions options)
	{
		CloseConnectionOptionsInternal options2 = default(CloseConnectionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_CloseConnection(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result CloseConnections(ref CloseConnectionsOptions options)
	{
		CloseConnectionsOptionsInternal options2 = default(CloseConnectionsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_CloseConnections(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetNATType(ref GetNATTypeOptions options, out NATType outNATType)
	{
		GetNATTypeOptionsInternal options2 = default(GetNATTypeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_GetNATType(base.InnerHandle, ref options2, out outNATType);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetNextReceivedPacketSize(ref GetNextReceivedPacketSizeOptions options, out uint outPacketSizeBytes)
	{
		GetNextReceivedPacketSizeOptionsInternal options2 = default(GetNextReceivedPacketSizeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_GetNextReceivedPacketSize(base.InnerHandle, ref options2, out outPacketSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetPacketQueueInfo(ref GetPacketQueueInfoOptions options, out PacketQueueInfo outPacketQueueInfo)
	{
		GetPacketQueueInfoOptionsInternal options2 = default(GetPacketQueueInfoOptionsInternal);
		options2.Set(ref options);
		PacketQueueInfoInternal outPacketQueueInfo2 = default(PacketQueueInfoInternal);
		Result result = Bindings.EOS_P2P_GetPacketQueueInfo(base.InnerHandle, ref options2, out outPacketQueueInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<PacketQueueInfoInternal, PacketQueueInfo>(ref outPacketQueueInfo2, out outPacketQueueInfo);
		return result;
	}

	public Result GetPortRange(ref GetPortRangeOptions options, out ushort outPort, out ushort outNumAdditionalPortsToTry)
	{
		GetPortRangeOptionsInternal options2 = default(GetPortRangeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_GetPortRange(base.InnerHandle, ref options2, out outPort, out outNumAdditionalPortsToTry);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetRelayControl(ref GetRelayControlOptions options, out RelayControl outRelayControl)
	{
		GetRelayControlOptionsInternal options2 = default(GetRelayControlOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_GetRelayControl(base.InnerHandle, ref options2, out outRelayControl);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryNATType(ref QueryNATTypeOptions options, object clientData, OnQueryNATTypeCompleteCallback completionDelegate)
	{
		if (completionDelegate == null)
		{
			throw new ArgumentNullException("completionDelegate");
		}
		QueryNATTypeOptionsInternal options2 = default(QueryNATTypeOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataPointer = IntPtr.Zero;
		Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);
		Bindings.EOS_P2P_QueryNATType(base.InnerHandle, ref options2, clientDataPointer, OnQueryNATTypeCompleteCallbackInternalImplementation.Delegate);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyIncomingPacketQueueFull(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyIncomingPacketQueueFull(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionClosed(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionClosed(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionEstablished(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionEstablished(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionInterrupted(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionInterrupted(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionRequest(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionRequest(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SendPacket(ref SendPacketOptions options)
	{
		SendPacketOptionsInternal options2 = default(SendPacketOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SendPacket(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPacketQueueSize(ref SetPacketQueueSizeOptions options)
	{
		SetPacketQueueSizeOptionsInternal options2 = default(SetPacketQueueSizeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetPacketQueueSize(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPortRange(ref SetPortRangeOptions options)
	{
		SetPortRangeOptionsInternal options2 = default(SetPortRangeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetPortRange(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetRelayControl(ref SetRelayControlOptions options)
	{
		SetRelayControlOptionsInternal options2 = default(SetRelayControlOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetRelayControl(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using System.Runtime.InteropServices;
using Epic.OnlineServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
public struct ReceivePacketOptions
{
	internal byte[] m_RequestedChannel;

	public ProductUserId LocalUserId { get; set; }

	public uint MaxDataSizeBytes { get; set; }

	public byte? RequestedChannel
	{
		get
		{
			if (m_RequestedChannel == null)
			{
				return null;
			}
			return m_RequestedChannel[0];
		}
		set
		{
			if (value.HasValue)
			{
				if (m_RequestedChannel == null)
				{
					m_RequestedChannel = new byte[1];
				}
				m_RequestedChannel[0] = value.Value;
			}
			else
			{
				m_RequestedChannel = null;
			}
		}
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReceivePacketOptionsInternal : IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_MaxDataSizeBytes;

	public IntPtr m_RequestedChannel;

	public ReceivePacketOptionsInternal(ref ReceivePacketOptions other)
	{
		m_ApiVersion = 2;
		m_RequestedChannel = IntPtr.Zero;
		if (other.RequestedChannel.HasValue)
		{
			m_RequestedChannel = Helper.AddPinnedBuffer(other.m_RequestedChannel);
		}
		m_LocalUserId = other.LocalUserId.InnerHandle;
		m_MaxDataSizeBytes = other.MaxDataSizeBytes;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RequestedChannel);
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendPacketOptionsInternal : ISettable<SendPacketOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	internal IntPtr m_SocketId;

	private byte m_Channel;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	private int m_AllowDelayedDelivery;

	private PacketReliability m_Reliability;

	private int m_DisableAutoAcceptConnection;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set((Handle)value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		set
		{
			Helper.Set((Handle)value, ref m_RemoteUserId);
		}
	}

	public byte Channel
	{
		set
		{
			m_Channel = value;
		}
	}

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public bool AllowDelayedDelivery
	{
		set
		{
			Helper.Set(value, ref m_AllowDelayedDelivery);
		}
	}

	public PacketReliability Reliability
	{
		set
		{
			m_Reliability = value;
		}
	}

	public bool DisableAutoAcceptConnection
	{
		set
		{
			Helper.Set(value, ref m_DisableAutoAcceptConnection);
		}
	}

	public void Set(ref SendPacketOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		m_SocketId = IntPtr.Zero;
		if (other.SocketId.HasValue)
		{
			m_SocketId = Helper.AddPinnedBuffer(other.SocketId.Value.m_AllBytes);
		}
		Channel = other.Channel;
		Data = other.Data;
		AllowDelayedDelivery = other.AllowDelayedDelivery;
		Reliability = other.Reliability;
		DisableAutoAcceptConnection = other.DisableAutoAcceptConnection;
	}

	public void Set(ref SendPacketOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			m_SocketId = IntPtr.Zero;
			if (other.Value.SocketId.HasValue)
			{
				m_SocketId = Helper.AddPinnedBuffer(other.Value.SocketId.Value.m_AllBytes);
			}
			Channel = other.Value.Channel;
			Data = other.Value.Data;
			AllowDelayedDelivery = other.Value.AllowDelayedDelivery;
			Reliability = other.Value.Reliability;
			DisableAutoAcceptConnection = other.Value.DisableAutoAcceptConnection;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
		Helper.Dispose(ref m_Data);
	}
}


using System;
using System.Text;
using Epic.OnlineServices.P2P;

public struct SocketId
{
	public static readonly SocketId Empty;

	private const int MaxSocketNameLength = 32;

	private const int ApiVersionLength = 4;

	private const int NullTerminatorSpace = 1;

	private const int TotalSizeInBytes = 37;

	private bool m_CacheValid;

	private string m_CachedSocketName;

	internal byte[] m_AllBytes;

	internal byte[] m_SwapBuffer;

	public string SocketName
	{
		get
		{
			if (m_CacheValid)
			{
				return m_CachedSocketName;
			}
			if (m_AllBytes == null)
			{
				return null;
			}
			RebuildStringFromBuffer();
			return m_CachedSocketName;
		}
		set
		{
			m_CachedSocketName = value;
			if (value == null)
			{
				m_CacheValid = true;
				return;
			}
			EnsureStorage();
			int num = Math.Min(32, value.Length);
			Encoding.ASCII.GetBytes(value, 0, num, m_AllBytes, 4);
			m_AllBytes[num + 4] = 0;
			m_CacheValid = true;
		}
	}

	internal bool PrepareForUpdate()
	{
		bool cacheValid = m_CacheValid;
		m_CacheValid = false;
		EnsureStorage();
		CopyIdToSwapBuffer();
		return cacheValid;
	}

	internal void CheckIfChanged(bool wasCacheValid)
	{
		if (!wasCacheValid || m_SwapBuffer == null || m_AllBytes == null)
		{
			return;
		}
		bool flag = true;
		for (int i = 0; i < m_SwapBuffer.Length; i++)
		{
			if (m_AllBytes[4 + i] != m_SwapBuffer[i])
			{
				flag = false;
				break;
			}
		}
		if (flag)
		{
			m_CacheValid = true;
		}
	}

	private void RebuildStringFromBuffer()
	{
		EnsureStorage();
		int i;
		for (i = 4; i < m_AllBytes.Length && m_AllBytes[i] != 0; i++)
		{
		}
		m_CachedSocketName = Encoding.ASCII.GetString(m_AllBytes, 4, i - 4);
		m_CacheValid = true;
	}

	private void EnsureStorage()
	{
		if (m_AllBytes == null || m_AllBytes.Length < 37)
		{
			m_AllBytes = new byte[37];
			m_SwapBuffer = new byte[33];
			Array.Copy(BitConverter.GetBytes(1), 0, m_AllBytes, 0, 4);
		}
	}

	private void CopyIdToSwapBuffer()
	{
		Array.Copy(m_AllBytes, 4, m_SwapBuffer, 0, m_SwapBuffer.Length);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AcceptConnectionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AcceptConnectionOptionsInternal : ISettable<AcceptConnectionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public void Set(ref AcceptConnectionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.RemoteUserId, ref m_RemoteUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyIncomingPacketQueueFullOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AddNotifyIncomingPacketQueueFullOptionsInternal : ISettable<AddNotifyIncomingPacketQueueFullOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyIncomingPacketQueueFullOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionClosedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AddNotifyPeerConnectionClosedOptionsInternal : ISettable<AddNotifyPeerConnectionClosedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public void Set(ref AddNotifyPeerConnectionClosedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionEstablishedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AddNotifyPeerConnectionEstablishedOptionsInternal : ISettable<AddNotifyPeerConnectionEstablishedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public void Set(ref AddNotifyPeerConnectionEstablishedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionInterruptedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AddNotifyPeerConnectionInterruptedOptionsInternal : ISettable<AddNotifyPeerConnectionInterruptedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public void Set(ref AddNotifyPeerConnectionInterruptedOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionRequestOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct AddNotifyPeerConnectionRequestOptionsInternal : ISettable<AddNotifyPeerConnectionRequestOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public void Set(ref AddNotifyPeerConnectionRequestOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct ClearPacketQueueOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct ClearPacketQueueOptionsInternal : ISettable<ClearPacketQueueOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public void Set(ref ClearPacketQueueOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.RemoteUserId, ref m_RemoteUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct CloseConnectionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct CloseConnectionOptionsInternal : ISettable<CloseConnectionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public void Set(ref CloseConnectionOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set((Handle)other.RemoteUserId, ref m_RemoteUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct CloseConnectionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct CloseConnectionsOptionsInternal : ISettable<CloseConnectionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public void Set(ref CloseConnectionsOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set((Handle)other.LocalUserId, ref m_LocalUserId);
		Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


public enum ConnectionClosedReason
{
	Unknown,
	ClosedByLocalUser,
	ClosedByPeer,
	TimedOut,
	TooManyConnections,
	InvalidMessage,
	InvalidData,
	ConnectionFailed,
	ConnectionClosed,
	NegotiationFailed,
	UnexpectedError,
	ConnectionIgnored
}


public enum ConnectionEstablishedType
{
	NewConnection,
	Reconnection
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetNATTypeOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct GetNATTypeOptionsInternal : ISettable<GetNATTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetNATTypeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetPacketQueueInfoOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct GetPacketQueueInfoOptionsInternal : ISettable<GetPacketQueueInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetPacketQueueInfoOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetPortRangeOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct GetPortRangeOptionsInternal : ISettable<GetPortRangeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetPortRangeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetRelayControlOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct GetRelayControlOptionsInternal : ISettable<GetRelayControlOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetRelayControlOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


public enum NATType
{
	Unknown,
	Open,
	Moderate,
	Strict
}


public enum NetworkConnectionType
{
	NoConnection,
	DirectConnection,
	RelayedConnection
}


using Epic.OnlineServices.P2P;

public delegate void OnIncomingConnectionRequestCallback(ref OnIncomingConnectionRequestInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnIncomingConnectionRequestCallbackInternal(ref OnIncomingConnectionRequestInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnIncomingConnectionRequestCallbackInternalImplementation
{
	private static OnIncomingConnectionRequestCallbackInternal s_Delegate;

	public static OnIncomingConnectionRequestCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnIncomingConnectionRequestCallbackInternal))]
	public static void EntryPoint(ref OnIncomingConnectionRequestInfoInternal data)
	{
		if (Helper.TryGetCallback<OnIncomingConnectionRequestInfoInternal, OnIncomingConnectionRequestCallback, OnIncomingConnectionRequestInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnIncomingConnectionRequestInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnIncomingConnectionRequestInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingConnectionRequestInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnIncomingConnectionRequestInfo other)
	{
		other = default(OnIncomingConnectionRequestInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_RemoteUserId, out ProductUserId to3);
		other.RemoteUserId = to3;
		Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to4);
		other.SocketId = to4;
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnIncomingPacketQueueFullCallback(ref OnIncomingPacketQueueFullInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnIncomingPacketQueueFullCallbackInternal(ref OnIncomingPacketQueueFullInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnIncomingPacketQueueFullCallbackInternalImplementation
{
	private static OnIncomingPacketQueueFullCallbackInternal s_Delegate;

	public static OnIncomingPacketQueueFullCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnIncomingPacketQueueFullCallbackInternal))]
	public static void EntryPoint(ref OnIncomingPacketQueueFullInfoInternal data)
	{
		if (Helper.TryGetCallback<OnIncomingPacketQueueFullInfoInternal, OnIncomingPacketQueueFullCallback, OnIncomingPacketQueueFullInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct OnIncomingPacketQueueFullInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong PacketQueueMaxSizeBytes { get; set; }

	public ulong PacketQueueCurrentSizeBytes { get; set; }

	public ProductUserId OverflowPacketLocalUserId { get; set; }

	public byte OverflowPacketChannel { get; set; }

	public uint OverflowPacketSizeBytes { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnIncomingPacketQueueFullInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingPacketQueueFullInfo>
{
	private IntPtr m_ClientData;

	private ulong m_PacketQueueMaxSizeBytes;

	private ulong m_PacketQueueCurrentSizeBytes;

	private IntPtr m_OverflowPacketLocalUserId;

	private byte m_OverflowPacketChannel;

	private uint m_OverflowPacketSizeBytes;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnIncomingPacketQueueFullInfo other)
	{
		other = default(OnIncomingPacketQueueFullInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.PacketQueueMaxSizeBytes = m_PacketQueueMaxSizeBytes;
		other.PacketQueueCurrentSizeBytes = m_PacketQueueCurrentSizeBytes;
		Helper.Get(m_OverflowPacketLocalUserId, out ProductUserId to2);
		other.OverflowPacketLocalUserId = to2;
		other.OverflowPacketChannel = m_OverflowPacketChannel;
		other.OverflowPacketSizeBytes = m_OverflowPacketSizeBytes;
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnPeerConnectionEstablishedCallback(ref OnPeerConnectionEstablishedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerConnectionEstablishedCallbackInternal(ref OnPeerConnectionEstablishedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnPeerConnectionEstablishedCallbackInternalImplementation
{
	private static OnPeerConnectionEstablishedCallbackInternal s_Delegate;

	public static OnPeerConnectionEstablishedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerConnectionEstablishedCallbackInternal))]
	public static void EntryPoint(ref OnPeerConnectionEstablishedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnPeerConnectionEstablishedInfoInternal, OnPeerConnectionEstablishedCallback, OnPeerConnectionEstablishedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnPeerConnectionEstablishedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public ConnectionEstablishedType ConnectionType { get; set; }

	public NetworkConnectionType NetworkType { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnPeerConnectionEstablishedInfoInternal : ICallbackInfoInternal, IGettable<OnPeerConnectionEstablishedInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	private ConnectionEstablishedType m_ConnectionType;

	private NetworkConnectionType m_NetworkType;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnPeerConnectionEstablishedInfo other)
	{
		other = default(OnPeerConnectionEstablishedInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_RemoteUserId, out ProductUserId to3);
		other.RemoteUserId = to3;
		Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to4);
		other.SocketId = to4;
		other.ConnectionType = m_ConnectionType;
		other.NetworkType = m_NetworkType;
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnPeerConnectionInterruptedCallback(ref OnPeerConnectionInterruptedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerConnectionInterruptedCallbackInternal(ref OnPeerConnectionInterruptedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnPeerConnectionInterruptedCallbackInternalImplementation
{
	private static OnPeerConnectionInterruptedCallbackInternal s_Delegate;

	public static OnPeerConnectionInterruptedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerConnectionInterruptedCallbackInternal))]
	public static void EntryPoint(ref OnPeerConnectionInterruptedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnPeerConnectionInterruptedInfoInternal, OnPeerConnectionInterruptedCallback, OnPeerConnectionInterruptedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnPeerConnectionInterruptedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnPeerConnectionInterruptedInfoInternal : ICallbackInfoInternal, IGettable<OnPeerConnectionInterruptedInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnPeerConnectionInterruptedInfo other)
	{
		other = default(OnPeerConnectionInterruptedInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_RemoteUserId, out ProductUserId to3);
		other.RemoteUserId = to3;
		Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to4);
		other.SocketId = to4;
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnQueryNATTypeCompleteCallback(ref OnQueryNATTypeCompleteInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryNATTypeCompleteCallbackInternal(ref OnQueryNATTypeCompleteInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnQueryNATTypeCompleteCallbackInternalImplementation
{
	private static OnQueryNATTypeCompleteCallbackInternal s_Delegate;

	public static OnQueryNATTypeCompleteCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryNATTypeCompleteCallbackInternal))]
	public static void EntryPoint(ref OnQueryNATTypeCompleteInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryNATTypeCompleteInfoInternal, OnQueryNATTypeCompleteCallback, OnQueryNATTypeCompleteInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnQueryNATTypeCompleteInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public NATType NATType { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return ResultCode;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnQueryNATTypeCompleteInfoInternal : ICallbackInfoInternal, IGettable<OnQueryNATTypeCompleteInfo>
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private NATType m_NATType;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnQueryNATTypeCompleteInfo other)
	{
		other = default(OnQueryNATTypeCompleteInfo);
		other.ResultCode = m_ResultCode;
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		other.NATType = m_NATType;
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnRemoteConnectionClosedCallback(ref OnRemoteConnectionClosedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRemoteConnectionClosedCallbackInternal(ref OnRemoteConnectionClosedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal static class OnRemoteConnectionClosedCallbackInternalImplementation
{
	private static OnRemoteConnectionClosedCallbackInternal s_Delegate;

	public static OnRemoteConnectionClosedCallbackInternal Delegate
	{
		get
		{
			if (s_Delegate == null)
			{
				s_Delegate = EntryPoint;
			}
			return s_Delegate;
		}
	}

	[MonoPInvokeCallback(typeof(OnRemoteConnectionClosedCallbackInternal))]
	public static void EntryPoint(ref OnRemoteConnectionClosedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRemoteConnectionClosedInfoInternal, OnRemoteConnectionClosedCallback, OnRemoteConnectionClosedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnRemoteConnectionClosedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public ConnectionClosedReason Reason { get; set; }

	public object GetClientData()
	{
		return ClientData;
	}

	public Result? GetResultCode()
	{
		return null;
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct OnRemoteConnectionClosedInfoInternal : ICallbackInfoInternal, IGettable<OnRemoteConnectionClosedInfo>
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	private ConnectionClosedReason m_Reason;

	public IntPtr ClientDataPointer => m_ClientData;

	public void Get(out OnRemoteConnectionClosedInfo other)
	{
		other = default(OnRemoteConnectionClosedInfo);
		Helper.Get(m_ClientData, out object to);
		other.ClientData = to;
		Helper.Get(m_LocalUserId, out ProductUserId to2);
		other.LocalUserId = to2;
		Helper.Get(m_RemoteUserId, out ProductUserId to3);
		other.RemoteUserId = to3;
		Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to4);
		other.SocketId = to4;
		other.Reason = m_Reason;
	}
}


public struct PacketQueueInfo
{
	public ulong IncomingPacketQueueMaxSizeBytes { get; set; }

	public ulong IncomingPacketQueueCurrentSizeBytes { get; set; }

	public ulong IncomingPacketQueueCurrentPacketCount { get; set; }

	public ulong OutgoingPacketQueueMaxSizeBytes { get; set; }

	public ulong OutgoingPacketQueueCurrentSizeBytes { get; set; }

	public ulong OutgoingPacketQueueCurrentPacketCount { get; set; }
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct PacketQueueInfoInternal : IGettable<PacketQueueInfo>
{
	private ulong m_IncomingPacketQueueMaxSizeBytes;

	private ulong m_IncomingPacketQueueCurrentSizeBytes;

	private ulong m_IncomingPacketQueueCurrentPacketCount;

	private ulong m_OutgoingPacketQueueMaxSizeBytes;

	private ulong m_OutgoingPacketQueueCurrentSizeBytes;

	private ulong m_OutgoingPacketQueueCurrentPacketCount;

	public void Get(out PacketQueueInfo other)
	{
		other = default(PacketQueueInfo);
		other.IncomingPacketQueueMaxSizeBytes = m_IncomingPacketQueueMaxSizeBytes;
		other.IncomingPacketQueueCurrentSizeBytes = m_IncomingPacketQueueCurrentSizeBytes;
		other.IncomingPacketQueueCurrentPacketCount = m_IncomingPacketQueueCurrentPacketCount;
		other.OutgoingPacketQueueMaxSizeBytes = m_OutgoingPacketQueueMaxSizeBytes;
		other.OutgoingPacketQueueCurrentSizeBytes = m_OutgoingPacketQueueCurrentSizeBytes;
		other.OutgoingPacketQueueCurrentPacketCount = m_OutgoingPacketQueueCurrentPacketCount;
	}
}


public enum PacketReliability
{
	UnreliableUnordered,
	ReliableUnordered,
	ReliableOrdered
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryNATTypeOptions
{
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct QueryNATTypeOptionsInternal : ISettable<QueryNATTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryNATTypeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
	}

	public void Dispose()
	{
	}
}


public enum RelayControl
{
	NoRelays,
	AllowRelays,
	ForceRelays
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct SendPacketOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public byte Channel { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public bool AllowDelayedDelivery { get; set; }

	public PacketReliability Reliability { get; set; }

	public bool DisableAutoAcceptConnection { get; set; }
}


public struct SetPacketQueueSizeOptions
{
	public ulong IncomingPacketQueueMaxSizeBytes { get; set; }

	public ulong OutgoingPacketQueueMaxSizeBytes { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct SetPacketQueueSizeOptionsInternal : ISettable<SetPacketQueueSizeOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_IncomingPacketQueueMaxSizeBytes;

	private ulong m_OutgoingPacketQueueMaxSizeBytes;

	public void Set(ref SetPacketQueueSizeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_IncomingPacketQueueMaxSizeBytes = other.IncomingPacketQueueMaxSizeBytes;
		m_OutgoingPacketQueueMaxSizeBytes = other.OutgoingPacketQueueMaxSizeBytes;
	}

	public void Dispose()
	{
	}
}


public struct SetPortRangeOptions
{
	public ushort Port { get; set; }

	public ushort MaxAdditionalPortsToTry { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct SetPortRangeOptionsInternal : ISettable<SetPortRangeOptions>, IDisposable
{
	private int m_ApiVersion;

	private ushort m_Port;

	private ushort m_MaxAdditionalPortsToTry;

	public void Set(ref SetPortRangeOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_Port = other.Port;
		m_MaxAdditionalPortsToTry = other.MaxAdditionalPortsToTry;
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.P2P;

public struct SetRelayControlOptions
{
	public RelayControl RelayControl { get; set; }
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct SetRelayControlOptionsInternal : ISettable<SetRelayControlOptions>, IDisposable
{
	private int m_ApiVersion;

	private RelayControl m_RelayControl;

	public void Set(ref SetRelayControlOptions other)
	{
		Dispose();
		m_ApiVersion = 1;
		m_RelayControl = other.RelayControl;
	}

	public void Dispose()
	{
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

internal struct SocketIdInternal : IGettable<SocketId>, ISettable<SocketId>, IDisposable
{
	private int m_ApiVersion;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst = 33)]
	private byte[] m_SocketName;

	public void Get(out SocketId other)
	{
		other = default(SocketId);
		Helper.Get(m_SocketName, out Utf8String to);
		other.SocketName = to;
	}

	public void Set(ref SocketId other)
	{
		Dispose();
		m_ApiVersion = 1;
		Helper.Set(other.SocketName, ref m_SocketName, 33);
	}

	public void Dispose()
	{
	}
}


using System;

[Flags]
public enum BypassOption
{
	Voice = 1,
	Chat = 4,
	Gesture = 8,
	CardGames = 0x10,
	Movement = 0x20,
	Ping = 0x40,
	Inventory = 0x80,
	Crafting = 0x100,
	Clan = 0x200,
	Contacts = 0x400,
	Attack = 0x800,
	Reload = 0x1000,
	Painting = 0x2000,
	Duck = 0x4000,
	Autorun = 0x8000
}


public enum Format
{
	Unknown = -1,
	BMP = 0,
	JPEG = 2,
	PNG = 13,
	TARGA = 17,
	TIFF = 18,
	PSD = 20,
	DDS = 24,
	HDR = 26,
	EXR = 29,
	J2K = 30,
	JP2 = 31,
	WEBP = 35,
	JXR = 36
}


public enum SaveFlags
{
	DEFAULT = 0,
	BMP_SAVE_RLE = 1,
	EXR_FLOAT = 1,
	EXR_NONE = 2,
	EXR_ZIP = 4,
	EXR_PIZ = 8,
	EXR_PXR24 = 16,
	EXR_B44 = 32,
	EXR_LC = 64,
	JPEG_QUALITYSUPERB = 128,
	JPEG_QUALITYGOOD = 256,
	JPEG_QUALITYNORMAL = 512,
	JPEG_QUALITYAVERAGE = 1024,
	JPEG_QUALITYBAD = 2048,
	JPEG_PROGRESSIVE = 8192,
	JPEG_SUBSAMPLING_411 = 4096,
	JPEG_SUBSAMPLING_420 = 16384,
	JPEG_SUBSAMPLING_422 = 32768,
	JPEG_SUBSAMPLING_444 = 65536,
	JPEG_OPTIMIZE = 131072,
	JPEG_BASELINE = 262144,
	PNG_Z_BEST_SPEED = 1,
	PNG_Z_DEFAULT_COMPRESSION = 6,
	PNG_Z_BEST_COMPRESSION = 9,
	PNG_Z_NO_COMPRESSION = 256,
	PNG_INTERLACED = 512,
	PNM_SAVE_ASCII = 1,
	TIFF_CMYK = 1,
	TIFF_PACKBITS = 256,
	TIFF_DEFLATE = 512,
	TIFF_ADOBE_DEFLATE = 1024,
	TIFF_NONE = 2048,
	TIFF_CCITTFAX3 = 4096,
	TIFF_CCITTFAX4 = 8192,
	TIFF_LZW = 16384,
	TIFF_JPEG = 32768
}


public enum LoadFlags
{
	DEFAULT = 0,
	GIF_LOAD256 = 1,
	GIF_PLAYBACK = 2,
	ICO_MAKEALPHA = 1,
	JPEG_FAST = 1,
	JPEG_ACCURATE = 2,
	JPEG_CMYK = 4,
	JPEG_EXIFROTATE = 8,
	PCD_BASE = 1,
	PCD_BASEDIV4 = 2,
	PCD_BASEDIV16 = 3,
	PNG_IGNOREGAMMA = 1,
	TARGA_LOAD_RGB888 = 1,
	TIFF_CMYK = 1,
	RAW_PREVIEW = 1,
	RAW_DISPLAY = 2
}


using System;

[Serializable]
public struct Header
{
	public uint size;

	public int width;

	public int height;

	public ushort planes;

	public ushort bitCount;

	public uint compression;

	public uint sizeImage;

	public int xPelsPerMeter;

	public int yPelsPerMeter;

	public uint clrUsed;

	public uint clrImportant;
}


using System;

[Serializable]
public struct Bitmap
{
	public IntPtr data;

	public static Bitmap Null = new Bitmap
	{
		data = IntPtr.Zero
	};

	public bool IsNull => data == IntPtr.Zero;

	public void Unload()
	{
		FreeImage.Unload(this);
		data = IntPtr.Zero;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit)]
public struct RGBQuad
{
	[FieldOffset(0)]
	public byte rgbBlue;

	[FieldOffset(1)]
	public byte rgbGreen;

	[FieldOffset(2)]
	public byte rgbRed;

	[FieldOffset(3)]
	public byte rgbReserved;

	[FieldOffset(0)]
	public uint uintValue;
}


public enum Filter
{
	Box,
	Bicubic,
	Bilinear,
	Bspline,
	CatmullRom,
	Lanczos3
}


private enum Pass
{
	Threshold,
	Kawase,
	Compose
}


public enum OverlayBlendMode
{
	Additive,
	ScreenBlend,
	Multiply,
	Overlay,
	AlphaBlend
}


public enum ResolutionType
{
	Low,
	Normal,
	High
}


public enum BlendModeType
{
	Screen,
	Add
}


using UnityEngine;

public class ReflectionProbeState
{
	public ReflectionProbe Probe;

	public GameObject ProbeInstance;

	public int ProbeRenderID = -1;

	public void InitializePrimary(Vector3 position, GameObject prefab)
	{
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)ProbeInstance))
		{
			if (!Object.op_Implicit((Object)(object)prefab))
			{
				ProbeInstance = new GameObject();
				((Object)ProbeInstance).name = "Primary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.AddComponent<ReflectionProbe>();
				Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
			}
			else
			{
				ProbeInstance = Object.Instantiate<GameObject>(prefab);
				((Object)ProbeInstance).name = "Primary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.GetComponent<ReflectionProbe>();
				Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
			}
		}
	}

	public void InitializeSecondary(Vector3 position, GameObject prefab)
	{
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)ProbeInstance))
		{
			if (!Object.op_Implicit((Object)(object)prefab))
			{
				ProbeInstance = new GameObject();
				((Object)ProbeInstance).name = "Secondary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.AddComponent<ReflectionProbe>();
				Probe.size = new Vector3(0f, 0f, 0f);
				Probe.importance = 0;
			}
			else
			{
				ProbeInstance = Object.Instantiate<GameObject>(prefab);
				((Object)ProbeInstance).name = "Secondary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.GetComponent<ReflectionProbe>();
				Probe.size = new Vector3(0f, 0f, 0f);
				Probe.importance = 0;
			}
		}
	}
}


public enum RainType
{
	None,
	Light,
	Heavy
}


public enum CloudType
{
	None,
	Few,
	Scattered,
	Broken,
	Overcast
}


public enum AtmosphereType
{
	Clear,
	Storm,
	Dust,
	Fog
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


public enum ExposureMode
{
	Constant,
	DeltaTime
}


public enum SampleCount
{
	Low,
	Medium,
	High,
	Variable
}


private enum DebugMode
{
	Off,
	Velocity,
	NeighborMax,
	Depth
}


public enum LensFlareStyle
{
	Ghosting,
	Anamorphic,
	Combined
}


public enum TweakMode
{
	Basic,
	Complex
}


public enum HDRBloomMode
{
	Auto,
	On,
	Off
}


public enum BloomScreenBlendMode
{
	Screen,
	Add
}


public enum BloomQuality
{
	Cheap,
	High
}


public enum Resolution
{
	Low,
	High
}


public enum BlurType
{
	Standard,
	Sgx
}


public enum BlurType
{
	StandardGauss,
	SgxGauss
}


public enum MotionBlurFilter
{
	CameraMotion,
	LocalBlur,
	Reconstruction,
	ReconstructionDX11,
	ReconstructionDisc
}


public enum ColorCorrectionMode
{
	Simple,
	Advanced
}


public enum BlurType
{
	DiscBlur,
	DX11
}


public enum BlurSampleCount
{
	Low,
	Medium,
	High
}


public enum Dof34QualitySetting
{
	OnlyBackground = 1,
	BackgroundAndForeground
}


public enum DofResolution
{
	High = 2,
	Medium,
	Low
}


public enum DofBlurriness
{
	Low = 1,
	High = 2,
	VeryHigh = 4
}


public enum BokehDestination
{
	Background = 1,
	Foreground,
	BackgroundAndForeground
}


public enum EdgeDetectMode
{
	TriangleDepthNormals,
	RobertsCrossDepthNormals,
	SobelDepth,
	SobelDepthThin,
	TriangleLuminance
}


public enum OverlayBlendMode
{
	Additive,
	ScreenBlend,
	Multiply,
	Overlay,
	AlphaBlend
}


public enum SSAOSamples
{
	Low,
	Medium,
	High
}


public enum SunShaftsResolution
{
	Low,
	Normal,
	High
}


public enum ShaftsScreenBlendMode
{
	Screen,
	Add
}


public enum TiltShiftMode
{
	TiltShiftMode,
	IrisMode
}


public enum TiltShiftQuality
{
	Preview,
	Normal,
	High
}


public enum TonemapperType
{
	SimpleReinhard,
	UserCurve,
	Hable,
	Photographic,
	OptimizedHejiDawson,
	AdaptiveReinhard,
	AdaptiveReinhardAutoWhite
}


public enum AdaptiveTexSize
{
	Square16 = 0x10,
	Square32 = 0x20,
	Square64 = 0x40,
	Square128 = 0x80,
	Square256 = 0x100,
	Square512 = 0x200,
	Square1024 = 0x400
}


public enum AberrationMode
{
	Simple,
	Advanced
}


using System;
using System.Runtime.InteropServices;
using UnityEngine;

public static class BufferReadback
{
	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForTexture")]
	public static extern IntPtr CreateForTexture(IntPtr tex, uint width, uint height, uint format);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForBuffer")]
	public static extern IntPtr CreateForBuffer(IntPtr buf, uint size);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_Destroy")]
	public static extern void Destroy(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_IssueRead")]
	public static extern void IssueRead(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataSize")]
	public static extern uint GetDataSize(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataStride")]
	public static extern uint GetDataStride(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref byte data);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref Color32 data);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref float data);
}


public enum PokerResult
{
	RoyalFlush,
	StraightFlush,
	FourOfAKind,
	FullHouse,
	Flush,
	Straight,
	ThreeOfAKind,
	TwoPair,
	Pair,
	HighCard
}


using System;

[Serializable]
private class DataFile
{
	public string[] RandomUsernames;
}


private struct Allocation
{
	public int Size { get; private set; }

	public object Cache { get; private set; }

	public bool? IsArrayItemAllocated { get; private set; }

	public Allocation(int size, object cache, bool? isArrayItemAllocated = null)
	{
		Size = size;
		Cache = cache;
		IsArrayItemAllocated = isArrayItemAllocated;
	}
}


using System.Runtime.InteropServices;

private struct PinnedBuffer
{
	public GCHandle Handle { get; private set; }

	public int RefCount { get; set; }

	public PinnedBuffer(GCHandle handle)
	{
		Handle = handle;
		RefCount = 1;
	}
}


using System;
using System.Collections.Generic;
using System.Linq;

private class DelegateHolder
{
	public List<Delegate> Delegates { get; private set; } = new List<Delegate>();

	public ulong? NotificationId { get; set; }

	public DelegateHolder(params Delegate[] delegates)
	{
		Delegates.AddRange(delegates.Where((Delegate d) => (object)d != null));
	}
}


