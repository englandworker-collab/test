using UnityEngine;

public static class KeyCodeEx
{
	public static string ToShortname(this KeyCode code, bool lowercase = true)
	{
		string text = ((object)(KeyCode)(ref code)/*cast due to .constrained prefix*/).ToString();
		if (text.StartsWith("Alpha"))
		{
			text = text.Replace("Alpha", "");
		}
		if (!lowercase)
		{
			return text;
		}
		return text.ToLower();
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[149]
		{
			0, 0, 0, 2, 0, 0, 0, 41, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 73, 110, 112, 117, 116, 92,
			66, 117, 116, 116, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 40, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 73, 110, 112, 117, 116, 92, 73,
			110, 112, 117, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 44, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 73, 110, 112, 117, 116, 92, 75, 101, 121,
			67, 111, 100, 101, 69, 120, 46, 99, 115
		};
		result.TypesData = new byte[82]
		{
			1, 0, 0, 0, 15, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 73, 110, 112, 117, 116,
			0, 0, 0, 0, 22, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 73, 110, 112, 117, 116,
			124, 66, 117, 116, 116, 111, 110, 1, 0, 0,
			0, 15, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 124, 73, 110, 112, 117, 116, 0, 0, 0,
			0, 10, 124, 75, 101, 121, 67, 111, 100, 101,
			69, 120
		};
		result.TotalFiles = 3;
		result.TotalTypes = 4;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using UnityEngine;

public static class Input
{
	public class Button
	{
		public string Name;

		public Func<bool> TestFunction;

		public bool CurrentValue;

		public bool LastValue;

		public string[] Binds;

		public bool Transient;

		public bool Cycle;

		public int CycleIndex;

		public KeyCode Code;

		public virtual void Update()
		{
			LastValue = CurrentValue;
			CurrentValue = TestFunction();
			if (CurrentValue && !LastValue)
			{
				RunBinds(pressed: true);
			}
			if (!CurrentValue && LastValue)
			{
				RunBinds(pressed: false);
			}
		}

		private void RunBinds(bool pressed)
		{
			if (Binds == null || Input.RunBind == null)
			{
				return;
			}
			if (Cycle)
			{
				int num = (pressed ? CycleIndex : CycleIndex++);
				if (CycleIndex >= Binds.Length)
				{
					CycleIndex = 0;
				}
				if (num < Binds.Length)
				{
					RunBindImpl(Binds[num], pressed);
				}
			}
			else
			{
				for (int i = 0; i < Binds.Length; i++)
				{
					RunBindImpl(Binds[i], pressed);
				}
			}
		}

		private static void RunBindImpl(string bind, bool pressed)
		{
			if (bind.Length != 0)
			{
				if (bind[0] == '+')
				{
					Input.RunBind(WithoutFirstChar.Get(bind), pressed);
				}
				else if (pressed)
				{
					Input.RunBind(bind, pressed);
				}
			}
		}
	}

	private static readonly Memoized<string, string> WithoutFirstChar = new Memoized<string, string>((Func<string, string>)((string s) => s.Substring(1)));

	private static List<Button> buttons = new List<Button>();

	private static List<Action> frameThinks = new List<Action>();

	private static List<string[]> KeybindRealms = new List<string[]>
	{
		new string[2] { "+prevskin", "+nextskin" },
		new string[1] { "+focusmap" }
	};

	public static event Action<string> OnKeybindChanged;

	public static event Action<string, bool> RunBind;

	public static void Frame()
	{
		for (int i = 0; i < frameThinks.Count; i++)
		{
			frameThinks[i]();
		}
	}

	public static void Update()
	{
		for (int i = 0; i < buttons.Count; i++)
		{
			Button button = buttons[i];
			if (button.Transient && (button.Binds == null || button.Binds.Length == 0))
			{
				buttons.RemoveAt(i);
				i--;
			}
			else
			{
				button.Update();
			}
		}
	}

	public static void AddButton(string name, KeyCode key, Func<bool> TestFunction, Action FrameThink = null, bool transient = false)
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		if (!HasButton(name))
		{
			Button button = new Button();
			button.Name = name.ToLower();
			button.TestFunction = TestFunction;
			button.Transient = transient;
			button.Code = key;
			buttons.Add(button);
			if (FrameThink != null)
			{
				frameThinks.Add(FrameThink);
			}
		}
	}

	public static bool HasButton(string name)
	{
		return GetButton(name) != null;
	}

	private static int FindBindRealm(string bind)
	{
		return KeybindRealms.FindIndex((string[] x) => x.Contains(bind));
	}

	public static void SetBind(string name, string rawBind, bool cycled = false, bool clear = false)
	{
		Button button = GetButton(name);
		if (button == null)
		{
			return;
		}
		if (rawBind == null)
		{
			rawBind = "no_input";
		}
		IGrouping<int, string>[] array = (from x in rawBind.Split(new char[1] { ';' }, StringSplitOptions.RemoveEmptyEntries)
			select x.Trim() into x
			group x by FindBindRealm(x)).ToArray();
		foreach (IGrouping<int, string> grouping in array)
		{
			int bindRealm = FindBindRealm(grouping.First());
			if (button.Binds != null)
			{
				button.Binds = button.Binds.Where((string x) => FindBindRealm(x) != bindRealm).ToArray();
			}
			else
			{
				button.Binds = Array.Empty<string>();
			}
			if (!clear)
			{
				button.Binds = button.Binds.Concat(grouping).ToArray();
			}
			for (int j = 0; j < button.Binds.Length; j++)
			{
				button.Binds[j] = button.Binds[j].Trim();
			}
		}
		button.Cycle = cycled;
		button.CycleIndex = 0;
		Input.OnKeybindChanged?.Invoke(rawBind);
	}

	public static string GetBind(string name)
	{
		Button button = GetButton(name);
		if (button == null)
		{
			return "(button not found)";
		}
		if (button.Binds == null)
		{
			return "(nothing)";
		}
		return string.Join(";", button.Binds);
	}

	public static Button GetButton(string name)
	{
		return buttons.FirstOrDefault((Button x) => x.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase));
	}

	public static void ClearBinds()
	{
		foreach (Button button in buttons)
		{
			button.Binds = null;
		}
	}

	public static Dictionary<string, Button> GetAllBinds()
	{
		return buttons.Where((Button x) => x.Binds != null && x.Binds.Length != 0).ToDictionary((Button x) => x.Name);
	}

	public static string[] GetAllButtons()
	{
		return buttons.Select((Button x) => x.Name).ToArray();
	}

	public static string[] GetPressedButtons()
	{
		return (from x in buttons
			where x.CurrentValue
			select x.Name).ToArray();
	}

	public static string[] GetButtonsWithBind(string bind, bool strict = false)
	{
		return (from x in buttons
			where x.Binds != null && x.Binds.Any((string s) => (!strict) ? s.Contains(bind, StringComparison.OrdinalIgnoreCase) : s.Equals(bind, StringComparison.OrdinalIgnoreCase))
			select x.Name).ToArray();
	}

	public static bool IsBindInUse(string bind)
	{
		return buttons.Exists((Button x) => x.Binds != null && x.Binds.Contains(bind));
	}

	public static bool IsBindPressed(string bind)
	{
		return buttons.Exists((Button x) => x.Binds != null && x.Binds.Any((string b) => b.Contains(bind)) && x.CurrentValue);
	}

	public static string GetButtonWithBind(string bind, bool strict = false)
	{
		string[] buttonsWithBind = GetButtonsWithBind(bind, strict);
		if (buttonsWithBind.Length == 0)
		{
			return "UNSET";
		}
		return buttonsWithBind[0];
	}

	public static string GetButtonWithBindFormatted(string bind)
	{
		string[] buttonsWithBind = GetButtonsWithBind(bind);
		if (buttonsWithBind.Length == 0)
		{
			return "unset";
		}
		string text = buttonsWithBind[0];
		switch (text)
		{
		case "mouse0":
			text = "mouse 1";
			break;
		case "mouse1":
			text = "mouse 2";
			break;
		case "mouse2":
			text = "mouse 3";
			break;
		}
		return text;
	}

	public static Button GetButtonObjectWithBind(string bind)
	{
		return buttons.FirstOrDefault((Button x) => x.Binds != null && x.Binds.Contains(bind));
	}

	public static void GetButtonsWithBind(string bind, List<Button> results)
	{
		foreach (Button button in buttons)
		{
			if (button.Binds != null && button.Binds.Contains(bind))
			{
				results.Add(button);
			}
		}
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using UnityEngine;

public class Button
{
	public string Name;

	public Func<bool> TestFunction;

	public bool CurrentValue;

	public bool LastValue;

	public string[] Binds;

	public bool Transient;

	public bool Cycle;

	public int CycleIndex;

	public KeyCode Code;

	public virtual void Update()
	{
		LastValue = CurrentValue;
		CurrentValue = TestFunction();
		if (CurrentValue && !LastValue)
		{
			RunBinds(pressed: true);
		}
		if (!CurrentValue && LastValue)
		{
			RunBinds(pressed: false);
		}
	}

	private void RunBinds(bool pressed)
	{
		if (Binds == null || Input.RunBind == null)
		{
			return;
		}
		if (Cycle)
		{
			int num = (pressed ? CycleIndex : CycleIndex++);
			if (CycleIndex >= Binds.Length)
			{
				CycleIndex = 0;
			}
			if (num < Binds.Length)
			{
				RunBindImpl(Binds[num], pressed);
			}
		}
		else
		{
			for (int i = 0; i < Binds.Length; i++)
			{
				RunBindImpl(Binds[i], pressed);
			}
		}
	}

	private static void RunBindImpl(string bind, bool pressed)
	{
		if (bind.Length != 0)
		{
			if (bind[0] == '+')
			{
				Input.RunBind(WithoutFirstChar.Get(bind), pressed);
			}
			else if (pressed)
			{
				Input.RunBind(bind, pressed);
			}
		}
	}
}


