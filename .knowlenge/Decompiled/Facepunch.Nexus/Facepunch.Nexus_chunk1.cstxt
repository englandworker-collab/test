using System;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;

internal readonly struct ApiResult : ValueType
{
	[field: CompilerGenerated]
	public HttpStatusCode StatusCode
	{
		[CompilerGenerated]
		get;
	}

	public bool IsSuccess
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_000b: Invalid comparison between Unknown and I4
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Invalid comparison between Unknown and I4
			if ((int)StatusCode >= 200)
			{
				return (int)StatusCode <= 299;
			}
			return false;
		}
	}

	public ApiResult(HttpStatusCode statusCode)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		StatusCode = statusCode;
	}

	public void EnsureSuccessful()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		if (!IsSuccess)
		{
			throw new HttpRequestException(String.Format("API call was not successful: {0}", (object)StatusCode));
		}
	}
}


using System;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;

internal readonly struct ApiResult<T> : ValueType
{
	private readonly T _response;

	private readonly bool _hasResponse;

	public HttpStatusCode StatusCode
	{
		[CompilerGenerated]
		get;
	}

	public bool IsSuccess
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_000b: Invalid comparison between Unknown and I4
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Invalid comparison between Unknown and I4
			if ((int)StatusCode >= 200)
			{
				return (int)StatusCode <= 299;
			}
			return false;
		}
	}

	public T Response
	{
		get
		{
			EnsureSuccessfulWithResponse();
			return _response;
		}
	}

	public ApiResult(HttpStatusCode statusCode, T response)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		StatusCode = statusCode;
		_response = response;
		_hasResponse = true;
	}

	public ApiResult(HttpStatusCode statusCode)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		StatusCode = statusCode;
		_response = default(T);
		_hasResponse = false;
	}

	public void EnsureSuccessful()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		if (!IsSuccess)
		{
			throw new HttpRequestException(String.Format("API call was not successful: {0}", (object)StatusCode));
		}
	}

	public void EnsureSuccessfulWithResponse()
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		EnsureSuccessful();
		if (!_hasResponse)
		{
			throw new HttpRequestException(String.Format("API call did not return a response: {0}", (object)StatusCode));
		}
	}

	public bool TryGetResponse(out T response)
	{
		if (IsSuccess && _hasResponse)
		{
			response = _response;
			return true;
		}
		response = default(T);
		return false;
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public abstract class BaseNexusClient : NexusAnonymousClient, IDisposable
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Start>d__16 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public BaseNexusClient <>4__this;

		private ValueTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00b2: Expected O, but got Unknown
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusClient baseNexusClient = <>4__this;
			try
			{
				ValueTaskAwaiter val;
				if (num != 0)
				{
					if (baseNexusClient._started)
					{
						throw new InvalidOperationException(String.Concat("The ", ((MemberInfo)((Object)baseNexusClient).GetType()).Name, " was already started"));
					}
					val = baseNexusClient.Initialize(baseNexusClient.CancellationToken).GetAwaiter();
					if (!((ValueTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter, <Start>d__16>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ValueTaskAwaiter);
					num = (<>1__state = -1);
				}
				((ValueTaskAwaiter)(ref val)).GetResult();
				baseNexusClient.UpdateLoop(baseNexusClient.CancellationToken);
				baseNexusClient._started = true;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdateLoop>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public BaseNexusClient <>4__this;

		public CancellationToken ct;

		private TaskAwaiter <>u__1;

		private ValueTaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_012b: Expected O, but got Unknown
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_0095: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusClient baseNexusClient = <>4__this;
			try
			{
				if (num != 0)
				{
					if (num == 1)
					{
						goto IL_0081;
					}
					goto IL_0117;
				}
				TaskAwaiter val = <>u__1;
				<>u__1 = default(TaskAwaiter);
				num = (<>1__state = -1);
				goto IL_0079;
				IL_0079:
				((TaskAwaiter)(ref val)).GetResult();
				goto IL_0081;
				IL_0081:
				Exception val3 = default(Exception);
				try
				{
					ValueTaskAwaiter val2;
					if (num != 1)
					{
						val2 = baseNexusClient.Update(ct).GetAwaiter();
						if (!((ValueTaskAwaiter)(ref val2)).IsCompleted)
						{
							num = (<>1__state = 1);
							<>u__2 = val2;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter, <UpdateLoop>d__19>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__2;
						<>u__2 = default(ValueTaskAwaiter);
						num = (<>1__state = -1);
					}
					((ValueTaskAwaiter)(ref val2)).GetResult();
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result);
					if (obj2 == null)
					{
						result = 0;
					}
					else
					{
						val3 = (Exception)obj2;
						result = ((!(val3 is OperationCanceledException)) ? 1 : 0);
					}
					return (byte)result != 0;
				}).Invoke())
				{
					baseNexusClient.DispatchError(val3);
				}
				goto IL_0117;
				IL_0117:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested)
				{
					val = baseNexusClient.Clock.Delay(baseNexusClient._updateInterval).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <UpdateLoop>d__19>(ref val, ref this);
						return;
					}
					goto IL_0079;
				}
			}
			catch (Exception val4)
			{
				Exception exception = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[CompilerGenerated]
	private NexusVariableChangedHandler m_OnVariableChanged;

	[CompilerGenerated]
	private NexusErrorHandler m_OnError;

	protected readonly IClockProvider Clock;

	protected readonly CancellationToken CancellationToken;

	private readonly CancellationTokenSource _cts;

	private readonly double _updateInterval;

	private bool _disposed;

	private bool _started;

	protected virtual bool ShouldUpdateVariables => _started;

	public event NexusVariableChangedHandler OnVariableChanged
	{
		[CompilerGenerated]
		add
		{
			NexusVariableChangedHandler nexusVariableChangedHandler = this.m_OnVariableChanged;
			NexusVariableChangedHandler nexusVariableChangedHandler2;
			do
			{
				nexusVariableChangedHandler2 = nexusVariableChangedHandler;
				NexusVariableChangedHandler nexusVariableChangedHandler3 = (NexusVariableChangedHandler)(object)Delegate.Combine((Delegate)(object)nexusVariableChangedHandler2, (Delegate)(object)value);
				nexusVariableChangedHandler = Interlocked.CompareExchange<NexusVariableChangedHandler>(ref this.m_OnVariableChanged, nexusVariableChangedHandler3, nexusVariableChangedHandler2);
			}
			while (nexusVariableChangedHandler != nexusVariableChangedHandler2);
		}
		[CompilerGenerated]
		remove
		{
			NexusVariableChangedHandler nexusVariableChangedHandler = this.m_OnVariableChanged;
			NexusVariableChangedHandler nexusVariableChangedHandler2;
			do
			{
				nexusVariableChangedHandler2 = nexusVariableChangedHandler;
				NexusVariableChangedHandler nexusVariableChangedHandler3 = (NexusVariableChangedHandler)(object)Delegate.Remove((Delegate)(object)nexusVariableChangedHandler2, (Delegate)(object)value);
				nexusVariableChangedHandler = Interlocked.CompareExchange<NexusVariableChangedHandler>(ref this.m_OnVariableChanged, nexusVariableChangedHandler3, nexusVariableChangedHandler2);
			}
			while (nexusVariableChangedHandler != nexusVariableChangedHandler2);
		}
	}

	public event NexusErrorHandler OnError
	{
		[CompilerGenerated]
		add
		{
			NexusErrorHandler nexusErrorHandler = this.m_OnError;
			NexusErrorHandler nexusErrorHandler2;
			do
			{
				nexusErrorHandler2 = nexusErrorHandler;
				NexusErrorHandler nexusErrorHandler3 = (NexusErrorHandler)(object)Delegate.Combine((Delegate)(object)nexusErrorHandler2, (Delegate)(object)value);
				nexusErrorHandler = Interlocked.CompareExchange<NexusErrorHandler>(ref this.m_OnError, nexusErrorHandler3, nexusErrorHandler2);
			}
			while (nexusErrorHandler != nexusErrorHandler2);
		}
		[CompilerGenerated]
		remove
		{
			NexusErrorHandler nexusErrorHandler = this.m_OnError;
			NexusErrorHandler nexusErrorHandler2;
			do
			{
				nexusErrorHandler2 = nexusErrorHandler;
				NexusErrorHandler nexusErrorHandler3 = (NexusErrorHandler)(object)Delegate.Remove((Delegate)(object)nexusErrorHandler2, (Delegate)(object)value);
				nexusErrorHandler = Interlocked.CompareExchange<NexusErrorHandler>(ref this.m_OnError, nexusErrorHandler3, nexusErrorHandler2);
			}
			while (nexusErrorHandler != nexusErrorHandler2);
		}
	}

	protected BaseNexusClient(INexusConnector connector, IClockProvider clock, double updateInterval)
		: base(connector, clock)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Expected O, but got Unknown
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		_cts = new CancellationTokenSource();
		_updateInterval = updateInterval;
		Clock = clock ?? throw new ArgumentNullException("clock");
		CancellationToken = _cts.Token;
	}

	~BaseNexusClient()
	{
		try
		{
			Dispose(disposing: false);
		}
		finally
		{
			((Object)this).Finalize();
		}
	}

	public void Dispose()
	{
		Dispose(disposing: true);
		GC.SuppressFinalize((object)this);
	}

	protected virtual void Dispose(bool disposing)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		if (_disposed)
		{
			throw new ObjectDisposedException(((MemberInfo)((Object)this).GetType()).Name);
		}
		_disposed = true;
		_cts.Cancel();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Start()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Start>d__16 <Start>d__ = default(<Start>d__16);
		<Start>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Start>d__.<>4__this = this;
		<Start>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Start>d__.<>t__builder)).Start<<Start>d__16>(ref <Start>d__);
		return ((AsyncTaskMethodBuilder)(ref <Start>d__.<>t__builder)).Task;
	}

	protected abstract System.Threading.Tasks.ValueTask Initialize(CancellationToken ct);

	protected abstract System.Threading.Tasks.ValueTask Update(CancellationToken ct);

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task UpdateLoop(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<UpdateLoop>d__19 <UpdateLoop>d__ = default(<UpdateLoop>d__19);
		<UpdateLoop>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<UpdateLoop>d__.<>4__this = this;
		<UpdateLoop>d__.ct = ct;
		<UpdateLoop>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <UpdateLoop>d__.<>t__builder)).Start<<UpdateLoop>d__19>(ref <UpdateLoop>d__);
		return ((AsyncTaskMethodBuilder)(ref <UpdateLoop>d__.<>t__builder)).Task;
	}

	internal void UpdateVariables(VariableContainer container, Dictionary<string, VariableData> updatedData)
	{
		//IL_0061: Expected O, but got Unknown
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		if (container == null)
		{
			throw new ArgumentNullException("container");
		}
		if (updatedData == null || updatedData.Count == 0)
		{
			return;
		}
		NexusVariableChangedHandler nexusVariableChangedHandler = this.OnVariableChanged;
		HashSet<string> val = ((ShouldUpdateVariables && nexusVariableChangedHandler != null) ? new HashSet<string>() : null);
		container.UpdateFromModel(updatedData, val);
		if (nexusVariableChangedHandler == null || val == null)
		{
			return;
		}
		Enumerator<string> enumerator = val.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				string current = enumerator.Current;
				try
				{
					nexusVariableChangedHandler(this, current);
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					DispatchError(exception);
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	internal void DispatchVariableChanged(string key)
	{
		//IL_0016: Expected O, but got Unknown
		try
		{
			this.OnVariableChanged?.Invoke(this, key);
		}
		catch (Exception val)
		{
			Exception exception = val;
			DispatchError(exception);
		}
	}

	internal void DispatchError(Exception exception)
	{
		try
		{
			this.OnError?.Invoke(this, exception);
		}
		catch (Object)
		{
		}
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public abstract class BaseNexusPlayerClient : BaseNexusClient
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SelectNexus>d__23 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<PlayerDetails> <>t__builder;

		public int nexusId;

		public BaseNexusPlayerClient <>4__this;

		private NexusDetails <nexus>5__2;

		private ConfiguredValueTaskAwaiter<NexusDetails> <>u__1;

		private ConfiguredValueTaskAwaiter<PlayerDetails> <>u__2;

		private void MoveNext()
		{
			//IL_01d2: Expected O, but got Unknown
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0116: Unknown result type (might be due to invalid IL or missing references)
			//IL_011b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusPlayerClient baseNexusPlayerClient = <>4__this;
			PlayerDetails result3;
			try
			{
				if ((uint)num > 1u)
				{
					if (nexusId <= 0)
					{
						throw new ArgumentOutOfRangeException("nexusId");
					}
					if (baseNexusPlayerClient.NexusId > 0)
					{
						throw new InvalidOperationException("A nexus has already been selected");
					}
					baseNexusPlayerClient.Reset();
				}
				try
				{
					ConfiguredValueTaskAwaiter<PlayerDetails> val;
					ConfiguredValueTaskAwaiter<NexusDetails> val2;
					if (num != 0)
					{
						if (num == 1)
						{
							val = <>u__2;
							<>u__2 = default(ConfiguredValueTaskAwaiter<PlayerDetails>);
							num = (<>1__state = -1);
							goto IL_0132;
						}
						val2 = baseNexusPlayerClient.GetNexusDetails(nexusId).ConfigureAwait(false).GetAwaiter();
						if (!val2.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val2;
							<>t__builder.AwaitUnsafeOnCompleted<ConfiguredValueTaskAwaiter<NexusDetails>, <SelectNexus>d__23>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__1;
						<>u__1 = default(ConfiguredValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
					}
					NexusDetails result = val2.GetResult();
					<nexus>5__2 = result;
					val = baseNexusPlayerClient.GetPlayerDetails(nexusId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 1);
						<>u__2 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredValueTaskAwaiter<PlayerDetails>, <SelectNexus>d__23>(ref val, ref this);
						return;
					}
					goto IL_0132;
					IL_0132:
					PlayerDetails result2 = val.GetResult();
					NexusZoneDetails nexusZoneDetails = FindZone(<nexus>5__2, result2.ConnectZoneKey);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.NexusVariables, <nexus>5__2.Variables);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.ZoneVariables, nexusZoneDetails?.Variables);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.PlayerVariables, result2.Variables);
					baseNexusPlayerClient.NexusId = nexusId;
					baseNexusPlayerClient.ZoneKey = nexusZoneDetails?.Key;
					baseNexusPlayerClient.Nexus = <nexus>5__2;
					baseNexusPlayerClient.Player = result2;
					result3 = result2;
				}
				catch (Object)
				{
					baseNexusPlayerClient.Reset();
					throw;
				}
			}
			catch (Exception val4)
			{
				Exception exception = val4;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result3);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private protected readonly VariableContainer NexusVariables;

	private protected readonly VariableContainer ZoneVariables;

	private protected readonly VariableContainer PlayerVariables;

	[field: CompilerGenerated]
	public int NexusId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	[field: CompilerGenerated]
	public string ZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	[field: CompilerGenerated]
	public NexusDetails Nexus
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	public NexusZoneDetails Zone => FindZone(Nexus, ZoneKey);

	[field: CompilerGenerated]
	public PlayerDetails Player
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	protected override bool ShouldUpdateVariables
	{
		get
		{
			if (base.ShouldUpdateVariables)
			{
				return NexusId > 0;
			}
			return false;
		}
	}

	internal BaseNexusPlayerClient(INexusConnector connector, IClockProvider clock, double updateInterval)
		: base(connector, clock, updateInterval)
	{
		NexusVariables = new VariableContainer();
		ZoneVariables = new VariableContainer();
		PlayerVariables = new VariableContainer();
	}

	protected internal abstract System.Threading.Tasks.ValueTask<PlayerDetails> GetPlayerDetails(int nexusId);

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<PlayerDetails> SelectNexus(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SelectNexus>d__23 <SelectNexus>d__ = default(<SelectNexus>d__23);
		<SelectNexus>d__.<>t__builder = AsyncValueTaskMethodBuilder<PlayerDetails>.Create();
		<SelectNexus>d__.<>4__this = this;
		<SelectNexus>d__.nexusId = nexusId;
		<SelectNexus>d__.<>1__state = -1;
		<SelectNexus>d__.<>t__builder.Start<<SelectNexus>d__23>(ref <SelectNexus>d__);
		return <SelectNexus>d__.<>t__builder.Task;
	}

	protected override System.Threading.Tasks.ValueTask Initialize(CancellationToken ct)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (NexusId <= 0)
		{
			throw new InvalidOperationException("Must select a nexus before starting the client");
		}
		return default(System.Threading.Tasks.ValueTask);
	}

	protected virtual void Reset()
	{
		NexusId = 0;
		ZoneKey = null;
		Nexus = null;
		Player = null;
		NexusVariables.Clear();
		ZoneVariables.Clear();
		PlayerVariables.Clear();
	}

	public bool TryGetNexusVariable(string key, out Variable variable)
	{
		return NexusVariables.TryGet(key, out variable);
	}

	public bool TryGetZoneVariable(string key, out Variable variable)
	{
		return ZoneVariables.TryGet(key, out variable);
	}

	public bool TryGetPlayerVariable(string key, out Variable variable)
	{
		return PlayerVariables.TryGet(key, out variable);
	}

	protected override void OnNexusDetailsUpdated(int nexusId, NexusDetails details)
	{
		base.OnNexusDetailsUpdated(nexusId, details);
		if (nexusId == NexusId)
		{
			NexusZoneDetails nexusZoneDetails = FindZone(details, ZoneKey);
			UpdateVariables(NexusVariables, details.Variables);
			UpdateVariables(ZoneVariables, nexusZoneDetails?.Variables);
		}
	}

	private static NexusZoneDetails FindZone(NexusDetails nexus, string zoneKey)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		if (nexus == null || String.IsNullOrEmpty(zoneKey))
		{
			return null;
		}
		Enumerator<NexusZoneDetails> enumerator = nexus.Zones.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				NexusZoneDetails current = enumerator.Current;
				if (String.Equals(current.Key, zoneKey, (StringComparison)3))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}
}


using System;
using Facepunch.Nexus.Time;

internal abstract class CachedValue : Object
{
	internal const double CacheExpirySeconds = 30.0;

	protected readonly IClockProvider Clock;

	protected CachedValue(IClockProvider clock)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		Clock = clock ?? throw new ArgumentNullException("clock");
	}
}


using Facepunch.Nexus;
using Facepunch.Nexus.Time;

internal class CachedValue<TValue> : CachedValue
{
	private double _expiryTime;

	private bool _hasValue;

	private TValue _value;

	public CachedValue(IClockProvider clock)
		: base(clock)
	{
	}

	public bool TryGetValue(out TValue value)
	{
		if (!_hasValue || Clock.Timestamp >= _expiryTime)
		{
			value = default(TValue);
			return false;
		}
		value = _value;
		return true;
	}

	public ref readonly TValue Update(in TValue value)
	{
		if (value != null)
		{
			_hasValue = true;
			_value = value;
			_expiryTime = Clock.Timestamp + 30.0;
		}
		else
		{
			Invalidate();
		}
		return ref value;
	}

	public void Invalidate()
	{
		_hasValue = false;
		_value = default(TValue);
		_expiryTime = 0.0;
	}
}


using System;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Time;

internal class CachedValue<TKey, TValue> : CachedValue where TKey : IEquatable<TKey>
{
	private readonly Dictionary<TKey, ValueTuple<TValue, double>> _values = (Dictionary<TKey, ValueTuple<TValue, double>>)(object)new Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>();

	public CachedValue(IClockProvider clock)
		: base(clock)
	{
	}

	public unsafe bool TryGetValue(in TKey key, out TValue value)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		ValueTuple<TValue, double> val = default(ValueTuple<TValue, double>);
		if (!((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values).TryGetValue(key, ref *(ValueTuple<ValueTuple<TValue, double>, double>*)(&val)) || Clock.Timestamp >= val.Item2)
		{
			value = default(TValue);
			return false;
		}
		value = val.Item1;
		return true;
	}

	public ref readonly TValue Update(in TKey key, in TValue value)
	{
		//IL_0039: Expected F8, but got O
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		if (value != null)
		{
			((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values)[key] = (ValueTuple<ValueTuple<TValue, double>, double>)new ValueTuple<double, double>((double)value, Clock.Timestamp + 30.0);
		}
		else
		{
			Invalidate(in key);
		}
		return ref value;
	}

	public void Invalidate(in TKey key)
	{
		((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values).Remove(key);
	}
}


using System;

public enum NexusClanResultCode : Enum
{
	Fail,
	Success,
	NoClan,
	NotFound,
	NoPermission,
	DuplicateName,
	RoleNotEmpty,
	CannotSwapLeader,
	CannotDeleteLeader,
	CannotKickLeader,
	CannotDemoteLeader,
	AlreadyInAClan,
	ClanIsFull
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;

public readonly struct NexusClanResult<T> : ValueType
{
	private readonly T _response;

	private readonly bool _hasResponse;

	public NexusClanResultCode ResultCode
	{
		[CompilerGenerated]
		get;
	}

	public bool IsSuccess => ResultCode == NexusClanResultCode.Success;

	internal NexusClanResult(NexusClanResultCode resultCode)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (resultCode == NexusClanResultCode.Success)
		{
			throw new ArgumentOutOfRangeException("resultCode", "Cannot build a successful NexusClanResult<T> without a response.");
		}
		ResultCode = resultCode;
		_response = default(T);
		_hasResponse = false;
	}

	internal NexusClanResult(T response)
	{
		ResultCode = NexusClanResultCode.Success;
		_response = response;
		_hasResponse = true;
	}

	public bool TryGetResponse(out T response)
	{
		if (IsSuccess && _hasResponse)
		{
			response = _response;
			return true;
		}
		response = default(T);
		return false;
	}
}


using Facepunch.Nexus;

public delegate void NexusInitializedHandler(BaseNexusClient sender);


using Facepunch.Nexus;

public delegate void NexusVariableChangedHandler(BaseNexusClient sender, string variableKey);


using System;
using Facepunch.Nexus;

public delegate void NexusErrorHandler(BaseNexusClient sender, Exception exception);


using Facepunch.Nexus.Models;

public interface INexusClanEventListener
{
	void OnDisbanded(in ClanDisbandedEvent args);

	void OnInvitation(in ClanInvitedEvent args);

	void OnJoined(in ClanJoinedEvent args);

	void OnKicked(in ClanKickedEvent args);

	void OnChanged(in ClanChangedEvent args);

	void OnUnload(in long clanId);
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public class NexusAnonymousClient : Object
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexusDetails>d__6 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusDetails> <>t__builder;

		public int nexusId;

		public NexusAnonymousClient <>4__this;

		private ConfiguredTaskAwaiter<NexusDetails> <>u__1;

		private void MoveNext()
		{
			//IL_00d7: Expected O, but got Unknown
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			//IL_008f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusAnonymousClient nexusAnonymousClient = <>4__this;
			NexusDetails result;
			try
			{
				NexusDetails value;
				ConfiguredTaskAwaiter<NexusDetails> val;
				if (num != 0)
				{
					if (nexusId <= 0)
					{
						throw new ArgumentOutOfRangeException("nexusId");
					}
					if (nexusAnonymousClient._cachedNexusDetails.TryGetValue(in nexusId, out value))
					{
						goto IL_00d1;
					}
					val = nexusAnonymousClient._connector.GetNexus(nexusId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<NexusDetails>, <GetNexusDetails>d__6>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<NexusDetails>);
					num = (<>1__state = -1);
				}
				NexusDetails value2 = val.GetResult();
				value = nexusAnonymousClient._cachedNexusDetails.Update(in nexusId, in value2);
				nexusAnonymousClient.OnNexusDetailsUpdated(nexusId, value);
				goto IL_00d1;
				IL_00d1:
				result = value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexusList>d__5 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<IEnumerable<Nexus>> <>t__builder;

		public NexusAnonymousClient <>4__this;

		public string publicKey;

		public NexusRealm realm;

		private ConfiguredTaskAwaiter<NexusListing> <>u__1;

		private void MoveNext()
		{
			//IL_00b9: Expected O, but got Unknown
			//IL_0076: Unknown result type (might be due to invalid IL or missing references)
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusAnonymousClient nexusAnonymousClient = <>4__this;
			IEnumerable<Nexus> result2;
			try
			{
				List<Nexus> value;
				ConfiguredTaskAwaiter<NexusListing> val;
				if (num != 0)
				{
					if (nexusAnonymousClient._cachedNexusList.TryGetValue(out value))
					{
						goto IL_00b3;
					}
					val = nexusAnonymousClient._connector.ListNexuses(publicKey, realm).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<NexusListing>, <GetNexusList>d__5>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<NexusListing>);
					num = (<>1__state = -1);
				}
				NexusListing result = val.GetResult();
				value = nexusAnonymousClient._cachedNexusList.Update(result.Nexuses);
				goto IL_00b3;
				IL_00b3:
				result2 = (IEnumerable<Nexus>)(object)value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private readonly INexusConnector _connector;

	private readonly CachedValue<List<Nexus>> _cachedNexusList;

	private readonly CachedValue<int, NexusDetails> _cachedNexusDetails;

	public NexusAnonymousClient(INexusLogger logger, IClockProvider clock, string baseUrl)
		: this(new NexusConnector(logger, baseUrl), clock)
	{
	}

	internal NexusAnonymousClient(INexusConnector connector, IClockProvider clock)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		_connector = connector ?? throw new ArgumentNullException("connector");
		_cachedNexusList = new CachedValue<List<Nexus>>(clock);
		_cachedNexusDetails = new CachedValue<int, NexusDetails>(clock);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<IEnumerable<Nexus>> GetNexusList(string publicKey, NexusRealm realm)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexusList>d__5 <GetNexusList>d__ = default(<GetNexusList>d__5);
		<GetNexusList>d__.<>t__builder = AsyncValueTaskMethodBuilder<IEnumerable<Nexus>>.Create();
		<GetNexusList>d__.<>4__this = this;
		<GetNexusList>d__.publicKey = publicKey;
		<GetNexusList>d__.realm = realm;
		<GetNexusList>d__.<>1__state = -1;
		<GetNexusList>d__.<>t__builder.Start<<GetNexusList>d__5>(ref <GetNexusList>d__);
		return <GetNexusList>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusDetails> GetNexusDetails(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexusDetails>d__6 <GetNexusDetails>d__ = default(<GetNexusDetails>d__6);
		<GetNexusDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusDetails>.Create();
		<GetNexusDetails>d__.<>4__this = this;
		<GetNexusDetails>d__.nexusId = nexusId;
		<GetNexusDetails>d__.<>1__state = -1;
		<GetNexusDetails>d__.<>t__builder.Start<<GetNexusDetails>d__6>(ref <GetNexusDetails>d__);
		return <GetNexusDetails>d__.<>t__builder.Task;
	}

	protected virtual void OnNexusDetailsUpdated(int nexusId, NexusDetails details)
	{
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public class NexusClan : Object
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <AcceptInvite>d__56 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_010b: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Invalid comparison between Unknown and I4
			//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00be: Invalid comparison between Unknown and I4
			//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d1: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.AcceptInvite(nexusClan.ClanId, playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <AcceptInvite>d__56>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.AlreadyInAClan;
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = NexusClanResultCode.ClanIsFull;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <AddLog>d__50 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string eventKey;

		public string arg1;

		public string arg2;

		public string arg3;

		public string arg4;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00c4: Expected O, but got Unknown
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Invalid comparison between Unknown and I4
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.AddClanLog(nexusClan.ClanId, eventKey, arg1, arg2, arg3, arg4).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <AddLog>d__50>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				ApiResult result = val.GetResult();
				result2 = (((int)result.StatusCode != 404) ? (result.IsSuccess ? NexusClanResultCode.Success : NexusClanResultCode.Fail) : NexusClanResultCode.NotFound);
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CancelInvite>d__55 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00e8: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.CancelInvite(nexusClan.ClanId, playerId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <CancelInvite>d__55>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CreateRole>d__59 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public ClanRoleParameters parameters;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00fa: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Invalid comparison between Unknown and I4
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c1: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.CreateRole(nexusClan.ClanId, parameters, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <CreateRole>d__59>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.DuplicateName;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <DeleteRole>d__61 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public int roleId;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_010f: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b2: Invalid comparison between Unknown and I4
			//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c4: Invalid comparison between Unknown and I4
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.DeleteRole(nexusClan.ClanId, roleId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <DeleteRole>d__61>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.CannotDeleteLeader;
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = NexusClanResultCode.RoleNotEmpty;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Disband>d__63 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00c9: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.DisbandClan(nexusClan.ClanId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <Disband>d__63>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				ApiResult result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetLogs>d__49 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResult<List<ClanLogEntry>>> <>t__builder;

		public NexusClan <>4__this;

		public string byPlayerId;

		public int limit;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanLogEntry>>> <>u__1;

		private void MoveNext()
		{
			//IL_00e9: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b4: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResult<List<ClanLogEntry>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanLogEntry>>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.GetClanLogs(nexusClan.ClanId, byPlayerId, limit).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanLogEntry>>>, <GetLogs>d__49>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanLogEntry>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanLogEntry>> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = new NexusClanResult<List<ClanLogEntry>>(NexusClanResultCode.NotFound);
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = new NexusClanResult<List<ClanLogEntry>>(NexusClanResultCode.NoPermission);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<List<ClanLogEntry>>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					result2 = new NexusClanResult<List<ClanLogEntry>>(result.Response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetScoreEvents>d__51 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResult<List<ClanScoreEventEntry>>> <>t__builder;

		public NexusClan <>4__this;

		public string byPlayerId;

		public int limit;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanScoreEventEntry>>> <>u__1;

		private void MoveNext()
		{
			//IL_00e9: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b4: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResult<List<ClanScoreEventEntry>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanScoreEventEntry>>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.GetClanScoreEvents(nexusClan.ClanId, byPlayerId, limit).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanScoreEventEntry>>>, <GetScoreEvents>d__51>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanScoreEventEntry>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanScoreEventEntry>> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = new NexusClanResult<List<ClanScoreEventEntry>>(NexusClanResultCode.NotFound);
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = new NexusClanResult<List<ClanScoreEventEntry>>(NexusClanResultCode.NoPermission);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<List<ClanScoreEventEntry>>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					result2 = new NexusClanResult<List<ClanScoreEventEntry>>(result.Response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Invite>d__54 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0111: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b2: Invalid comparison between Unknown and I4
			//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c4: Invalid comparison between Unknown and I4
			//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d7: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.CreateInvite(nexusClan.ClanId, playerId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <Invite>d__54>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.AlreadyInAClan;
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = NexusClanResultCode.ClanIsFull;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Kick>d__57 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00fb: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Invalid comparison between Unknown and I4
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c1: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.Kick(nexusClan.ClanId, playerId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <Kick>d__57>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.CannotKickLeader;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Refresh>d__43 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusClan <>4__this;

		private TaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00ef: Expected O, but got Unknown
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Invalid comparison between Unknown and I4
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			try
			{
				TaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusClan._lastRefreshed = nexusClan._clockProvider.Timestamp;
					val = nexusClan._zoneConnector.GetClan(nexusClan.ClanId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<ClanDetails>>, <Refresh>d__43>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					nexusClan._logger.LogWarn(String.Format("Clan ID {0} was not found during a refresh, removing from cache", (object)nexusClan.ClanId));
					nexusClan._client.RemoveClan(nexusClan.ClanId);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					ClanDetails details = result.Response;
					nexusClan._client.UpsertClan(in details);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <RefreshInBackground>d__42 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncVoidMethodBuilder <>t__builder;

		public NexusClan <>4__this;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_006f: Expected O, but got Unknown
			//IL_0096: Expected O, but got Unknown
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			try
			{
				try
				{
					TaskAwaiter val;
					if (num != 0)
					{
						val = nexusClan.Refresh().GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncVoidMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <RefreshInBackground>d__42>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(TaskAwaiter);
						num = (<>1__state = -1);
					}
					((TaskAwaiter)(ref val)).GetResult();
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					nexusClan._logger.LogError(String.Format("Failed to refresh clan ID {0}", (object)nexusClan.ClanId), exception);
				}
			}
			catch (Exception val3)
			{
				Exception exception2 = val3;
				<>1__state = -2;
				((AsyncVoidMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetPlayerRole>d__58 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		public int newRoleId;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0101: Expected O, but got Unknown
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Invalid comparison between Unknown and I4
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Invalid comparison between Unknown and I4
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.SetPlayerRole(nexusClan.ClanId, playerId, newRoleId, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <SetPlayerRole>d__58>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = NexusClanResultCode.CannotDemoteLeader;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SwapRoleRanks>d__62 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public int roleIdA;

		public int roleIdB;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0100: Expected O, but got Unknown
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Invalid comparison between Unknown and I4
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Invalid comparison between Unknown and I4
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.SwapRoleRanks(nexusClan.ClanId, roleIdA, roleIdB, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <SwapRoleRanks>d__62>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = NexusClanResultCode.CannotSwapLeader;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdateLastSeen>d__53 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00ac: Expected O, but got Unknown
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.UpdateLastSeen(nexusClan.ClanId, playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <UpdateLastSeen>d__53>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				ApiResult result = val.GetResult();
				result2 = (((int)result.StatusCode != 404) ? (result.IsSuccess ? NexusClanResultCode.Success : NexusClanResultCode.Fail) : NexusClanResultCode.NotFound);
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdatePlayerVariables>d__48 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public string playerId;

		public ClanVariablesUpdate update;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00d6: Expected O, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Invalid comparison between Unknown and I4
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.UpdatePlayerClanVariables(nexusClan.ClanId, playerId, update).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <UpdatePlayerVariables>d__48>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdateRole>d__60 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public int roleId;

		public ClanRoleParameters parameters;

		public string byPlayerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0100: Expected O, but got Unknown
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Invalid comparison between Unknown and I4
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Invalid comparison between Unknown and I4
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.UpdateRole(nexusClan.ClanId, roleId, parameters, byPlayerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <UpdateRole>d__60>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if ((int)result.StatusCode == 403)
				{
					result2 = NexusClanResultCode.NoPermission;
				}
				else if ((int)result.StatusCode == 409)
				{
					result2 = NexusClanResultCode.DuplicateName;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdateVariables>d__47 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusClanResultCode> <>t__builder;

		public NexusClan <>4__this;

		public ClanVariablesUpdate update;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00d0: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusClan nexusClan = <>4__this;
			NexusClanResultCode result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					val = nexusClan._zoneConnector.UpdateClanVariables(nexusClan.ClanId, update).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <UpdateVariables>d__47>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = NexusClanResultCode.NotFound;
				}
				else if (!result.IsSuccess)
				{
					result2 = NexusClanResultCode.Fail;
				}
				else
				{
					result.EnsureSuccessful();
					if (result.TryGetResponse(out var response))
					{
						nexusClan._client.UpsertClan(in response);
					}
					result2 = NexusClanResultCode.Success;
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private const double RefreshInterval = 300.0;

	private readonly NexusZoneClient _client;

	private readonly INexusZoneConnector _zoneConnector;

	private readonly IClockProvider _clockProvider;

	private readonly INexusLogger _logger;

	private readonly VariableContainer _variables;

	private double _lastRefreshed;

	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public long Created
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public string Creator
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public long Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public List<NexusClanRole> Roles
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public List<NexusClanMember> Members
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public int MaxMemberCount
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public List<ClanInvite> Invites
	{
		[CompilerGenerated]
		get;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	internal NexusClan(NexusZoneClient client, INexusZoneConnector zoneConnector, IClockProvider clockProvider, INexusLogger logger, long clanId)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		ClanId = clanId;
		Roles = new List<NexusClanRole>();
		Members = new List<NexusClanMember>();
		Invites = new List<ClanInvite>();
		_client = client ?? throw new ArgumentNullException("client");
		_zoneConnector = zoneConnector ?? throw new ArgumentNullException("zoneConnector");
		_clockProvider = clockProvider ?? throw new ArgumentNullException("clockProvider");
		_logger = logger ?? throw new ArgumentNullException("logger");
		_variables = new VariableContainer();
	}

	internal bool UpdateFromModel(in ClanDetails details)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (details.ClanId != ClanId)
		{
			throw new InvalidOperationException("Cannot update NexusClan with details from a different clan ID!");
		}
		lock (this)
		{
			bool changed = false;
			Name = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(Name), in ILSpyHelper_AsRefReadOnly(details.Name), ref changed);
			Created = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(Created), in ILSpyHelper_AsRefReadOnly(details.Created), ref changed);
			Creator = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(Creator), in ILSpyHelper_AsRefReadOnly(details.Creator), ref changed);
			Score = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(Score), in ILSpyHelper_AsRefReadOnly(details.Score), ref changed);
			MaxMemberCount = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(MaxMemberCount), in ILSpyHelper_AsRefReadOnly(details.MaxMemberCount), ref changed);
			changed |= _variables.UpdateFromModel(details.Variables);
			changed |= Roles.Resize<NexusClanRole>(details.Roles.Count);
			for (int i = 0; i < Roles.Count; i++)
			{
				NexusClanRole nexusClanRole = Roles[i];
				if (nexusClanRole != null)
				{
					changed |= nexusClanRole.UpdateFromModel(details.Roles[i]);
					continue;
				}
				Roles[i] = new NexusClanRole(details.Roles[i]);
				changed = true;
			}
			changed |= Members.Resize<NexusClanMember>(details.Members.Count);
			for (int j = 0; j < Members.Count; j++)
			{
				NexusClanMember nexusClanMember = Members[j];
				if (nexusClanMember != null)
				{
					changed |= nexusClanMember.UpdateFromModel(details.Members[j]);
					continue;
				}
				Members[j] = new NexusClanMember(details.Members[j]);
				changed = true;
			}
			changed |= Invites.Resize<ClanInvite>(details.Invites.Count);
			for (int k = 0; k < Invites.Count; k++)
			{
				bool changed2 = false;
				ClanInvite clanInvite = Invites[k];
				ClanInvite clanInvite2 = details.Invites[k];
				clanInvite.PlayerId = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(clanInvite.PlayerId), in ILSpyHelper_AsRefReadOnly(clanInvite2.PlayerId), ref changed2);
				clanInvite.RecruiterPlayerId = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(clanInvite.RecruiterPlayerId), in ILSpyHelper_AsRefReadOnly(clanInvite2.RecruiterPlayerId), ref changed2);
				clanInvite.Created = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(clanInvite.Created), in ILSpyHelper_AsRefReadOnly(clanInvite2.Created), ref changed2);
				if (changed2)
				{
					Invites[k] = clanInvite;
					changed = true;
				}
			}
			_lastRefreshed = _clockProvider.Timestamp;
			return changed;
		}
		static ref readonly T ILSpyHelper_AsRefReadOnly<T>(in T temp)
		{
			//ILSpy generated this function to help ensure overload resolution can pick the overload using 'in'
			return ref temp;
		}
	}

	internal void RefreshIfNeeded()
	{
		if (_clockProvider.Timestamp - _lastRefreshed > 300.0)
		{
			RefreshInBackground();
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal void RefreshInBackground()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<RefreshInBackground>d__42 <RefreshInBackground>d__ = default(<RefreshInBackground>d__42);
		<RefreshInBackground>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
		<RefreshInBackground>d__.<>4__this = this;
		<RefreshInBackground>d__.<>1__state = -1;
		((AsyncVoidMethodBuilder)(ref <RefreshInBackground>d__.<>t__builder)).Start<<RefreshInBackground>d__42>(ref <RefreshInBackground>d__);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Refresh()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Refresh>d__43 <Refresh>d__ = default(<Refresh>d__43);
		<Refresh>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Refresh>d__.<>4__this = this;
		<Refresh>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Refresh>d__.<>t__builder)).Start<<Refresh>d__43>(ref <Refresh>d__);
		return ((AsyncTaskMethodBuilder)(ref <Refresh>d__.<>t__builder)).Task;
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> UpdateVariables(ClanVariablesUpdate update)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<UpdateVariables>d__47 <UpdateVariables>d__ = default(<UpdateVariables>d__47);
		<UpdateVariables>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<UpdateVariables>d__.<>4__this = this;
		<UpdateVariables>d__.update = update;
		<UpdateVariables>d__.<>1__state = -1;
		<UpdateVariables>d__.<>t__builder.Start<<UpdateVariables>d__47>(ref <UpdateVariables>d__);
		return <UpdateVariables>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> UpdatePlayerVariables(string playerId, ClanVariablesUpdate update)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<UpdatePlayerVariables>d__48 <UpdatePlayerVariables>d__ = default(<UpdatePlayerVariables>d__48);
		<UpdatePlayerVariables>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<UpdatePlayerVariables>d__.<>4__this = this;
		<UpdatePlayerVariables>d__.playerId = playerId;
		<UpdatePlayerVariables>d__.update = update;
		<UpdatePlayerVariables>d__.<>1__state = -1;
		<UpdatePlayerVariables>d__.<>t__builder.Start<<UpdatePlayerVariables>d__48>(ref <UpdatePlayerVariables>d__);
		return <UpdatePlayerVariables>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResult<List<ClanLogEntry>>> GetLogs(string byPlayerId, int limit = 100)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetLogs>d__49 <GetLogs>d__ = default(<GetLogs>d__49);
		<GetLogs>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResult<List<ClanLogEntry>>>.Create();
		<GetLogs>d__.<>4__this = this;
		<GetLogs>d__.byPlayerId = byPlayerId;
		<GetLogs>d__.limit = limit;
		<GetLogs>d__.<>1__state = -1;
		<GetLogs>d__.<>t__builder.Start<<GetLogs>d__49>(ref <GetLogs>d__);
		return <GetLogs>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> AddLog(string eventKey, string arg1 = null, string arg2 = null, string arg3 = null, string arg4 = null)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<AddLog>d__50 <AddLog>d__ = default(<AddLog>d__50);
		<AddLog>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<AddLog>d__.<>4__this = this;
		<AddLog>d__.eventKey = eventKey;
		<AddLog>d__.arg1 = arg1;
		<AddLog>d__.arg2 = arg2;
		<AddLog>d__.arg3 = arg3;
		<AddLog>d__.arg4 = arg4;
		<AddLog>d__.<>1__state = -1;
		<AddLog>d__.<>t__builder.Start<<AddLog>d__50>(ref <AddLog>d__);
		return <AddLog>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResult<List<ClanScoreEventEntry>>> GetScoreEvents(string byPlayerId, int limit = 100)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetScoreEvents>d__51 <GetScoreEvents>d__ = default(<GetScoreEvents>d__51);
		<GetScoreEvents>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResult<List<ClanScoreEventEntry>>>.Create();
		<GetScoreEvents>d__.<>4__this = this;
		<GetScoreEvents>d__.byPlayerId = byPlayerId;
		<GetScoreEvents>d__.limit = limit;
		<GetScoreEvents>d__.<>1__state = -1;
		<GetScoreEvents>d__.<>t__builder.Start<<GetScoreEvents>d__51>(ref <GetScoreEvents>d__);
		return <GetScoreEvents>d__.<>t__builder.Task;
	}

	public void AddScoreEvent(NewClanScoreEventEntry entry)
	{
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		NexusZoneClient client = _client;
		NewClanScoreEventBatchEntry entry2 = new NewClanScoreEventBatchEntry
		{
			ClanId = ClanId,
			Type = entry.Type,
			Score = entry.Score,
			Multiplier = entry.Multiplier,
			PlayerId = entry.PlayerId,
			OtherClanId = entry.OtherClanId,
			OtherPlayerId = entry.OtherPlayerId,
			Arg1 = entry.Arg1,
			Arg2 = entry.Arg2
		};
		client.EnqueueClanScoreEvent(in entry2);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> UpdateLastSeen(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<UpdateLastSeen>d__53 <UpdateLastSeen>d__ = default(<UpdateLastSeen>d__53);
		<UpdateLastSeen>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<UpdateLastSeen>d__.<>4__this = this;
		<UpdateLastSeen>d__.playerId = playerId;
		<UpdateLastSeen>d__.<>1__state = -1;
		<UpdateLastSeen>d__.<>t__builder.Start<<UpdateLastSeen>d__53>(ref <UpdateLastSeen>d__);
		return <UpdateLastSeen>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> Invite(string playerId, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Invite>d__54 <Invite>d__ = default(<Invite>d__54);
		<Invite>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<Invite>d__.<>4__this = this;
		<Invite>d__.playerId = playerId;
		<Invite>d__.byPlayerId = byPlayerId;
		<Invite>d__.<>1__state = -1;
		<Invite>d__.<>t__builder.Start<<Invite>d__54>(ref <Invite>d__);
		return <Invite>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> CancelInvite(string playerId, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CancelInvite>d__55 <CancelInvite>d__ = default(<CancelInvite>d__55);
		<CancelInvite>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<CancelInvite>d__.<>4__this = this;
		<CancelInvite>d__.playerId = playerId;
		<CancelInvite>d__.byPlayerId = byPlayerId;
		<CancelInvite>d__.<>1__state = -1;
		<CancelInvite>d__.<>t__builder.Start<<CancelInvite>d__55>(ref <CancelInvite>d__);
		return <CancelInvite>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> AcceptInvite(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<AcceptInvite>d__56 <AcceptInvite>d__ = default(<AcceptInvite>d__56);
		<AcceptInvite>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<AcceptInvite>d__.<>4__this = this;
		<AcceptInvite>d__.playerId = playerId;
		<AcceptInvite>d__.<>1__state = -1;
		<AcceptInvite>d__.<>t__builder.Start<<AcceptInvite>d__56>(ref <AcceptInvite>d__);
		return <AcceptInvite>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> Kick(string playerId, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Kick>d__57 <Kick>d__ = default(<Kick>d__57);
		<Kick>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<Kick>d__.<>4__this = this;
		<Kick>d__.playerId = playerId;
		<Kick>d__.byPlayerId = byPlayerId;
		<Kick>d__.<>1__state = -1;
		<Kick>d__.<>t__builder.Start<<Kick>d__57>(ref <Kick>d__);
		return <Kick>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> SetPlayerRole(string playerId, int newRoleId, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetPlayerRole>d__58 <SetPlayerRole>d__ = default(<SetPlayerRole>d__58);
		<SetPlayerRole>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<SetPlayerRole>d__.<>4__this = this;
		<SetPlayerRole>d__.playerId = playerId;
		<SetPlayerRole>d__.newRoleId = newRoleId;
		<SetPlayerRole>d__.byPlayerId = byPlayerId;
		<SetPlayerRole>d__.<>1__state = -1;
		<SetPlayerRole>d__.<>t__builder.Start<<SetPlayerRole>d__58>(ref <SetPlayerRole>d__);
		return <SetPlayerRole>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> CreateRole(ClanRoleParameters parameters, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CreateRole>d__59 <CreateRole>d__ = default(<CreateRole>d__59);
		<CreateRole>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<CreateRole>d__.<>4__this = this;
		<CreateRole>d__.parameters = parameters;
		<CreateRole>d__.byPlayerId = byPlayerId;
		<CreateRole>d__.<>1__state = -1;
		<CreateRole>d__.<>t__builder.Start<<CreateRole>d__59>(ref <CreateRole>d__);
		return <CreateRole>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> UpdateRole(int roleId, ClanRoleParameters parameters, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<UpdateRole>d__60 <UpdateRole>d__ = default(<UpdateRole>d__60);
		<UpdateRole>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<UpdateRole>d__.<>4__this = this;
		<UpdateRole>d__.roleId = roleId;
		<UpdateRole>d__.parameters = parameters;
		<UpdateRole>d__.byPlayerId = byPlayerId;
		<UpdateRole>d__.<>1__state = -1;
		<UpdateRole>d__.<>t__builder.Start<<UpdateRole>d__60>(ref <UpdateRole>d__);
		return <UpdateRole>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> DeleteRole(int roleId, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<DeleteRole>d__61 <DeleteRole>d__ = default(<DeleteRole>d__61);
		<DeleteRole>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<DeleteRole>d__.<>4__this = this;
		<DeleteRole>d__.roleId = roleId;
		<DeleteRole>d__.byPlayerId = byPlayerId;
		<DeleteRole>d__.<>1__state = -1;
		<DeleteRole>d__.<>t__builder.Start<<DeleteRole>d__61>(ref <DeleteRole>d__);
		return <DeleteRole>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> SwapRoleRanks(int roleIdA, int roleIdB, string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SwapRoleRanks>d__62 <SwapRoleRanks>d__ = default(<SwapRoleRanks>d__62);
		<SwapRoleRanks>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<SwapRoleRanks>d__.<>4__this = this;
		<SwapRoleRanks>d__.roleIdA = roleIdA;
		<SwapRoleRanks>d__.roleIdB = roleIdB;
		<SwapRoleRanks>d__.byPlayerId = byPlayerId;
		<SwapRoleRanks>d__.<>1__state = -1;
		<SwapRoleRanks>d__.<>t__builder.Start<<SwapRoleRanks>d__62>(ref <SwapRoleRanks>d__);
		return <SwapRoleRanks>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusClanResultCode> Disband(string byPlayerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Disband>d__63 <Disband>d__ = default(<Disband>d__63);
		<Disband>d__.<>t__builder = AsyncTaskMethodBuilder<NexusClanResultCode>.Create();
		<Disband>d__.<>4__this = this;
		<Disband>d__.byPlayerId = byPlayerId;
		<Disband>d__.<>1__state = -1;
		<Disband>d__.<>t__builder.Start<<Disband>d__63>(ref <Disband>d__);
		return <Disband>d__.<>t__builder.Task;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class NexusClanMember : Object
{
	private readonly VariableContainer _variables;

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Joined
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastSeen
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	public NexusClanMember(ClanMember details)
	{
		_variables = new VariableContainer();
		UpdateFromModel(details);
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	internal bool UpdateFromModel(ClanMember details)
	{
		bool changed = false;
		PlayerId = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(PlayerId), in ILSpyHelper_AsRefReadOnly(details.PlayerId), ref changed);
		RoleId = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(RoleId), in ILSpyHelper_AsRefReadOnly(details.RoleId), ref changed);
		Joined = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(Joined), in ILSpyHelper_AsRefReadOnly(details.Joined), ref changed);
		LastSeen = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(LastSeen), in ILSpyHelper_AsRefReadOnly(details.LastSeen), ref changed);
		return changed | _variables.UpdateFromModel(details.Variables);
		static ref readonly T ILSpyHelper_AsRefReadOnly<T>(in T temp)
		{
			//ILSpy generated this function to help ensure overload resolution can pick the overload using 'in'
			return ref temp;
		}
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class NexusClanRole : Object
{
	private readonly VariableContainer _variables;

	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Rank
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanInvite
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanKick
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanPromote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanDemote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessLogs
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessScoreEvents
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	public NexusClanRole(ClanRole details)
	{
		_variables = new VariableContainer();
		UpdateFromModel(details);
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	internal bool UpdateFromModel(ClanRole details)
	{
		bool changed = false;
		RoleId = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(RoleId), in ILSpyHelper_AsRefReadOnly(details.RoleId), ref changed);
		Rank = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(Rank), in ILSpyHelper_AsRefReadOnly(details.Rank), ref changed);
		Name = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(Name), in ILSpyHelper_AsRefReadOnly(details.Name), ref changed);
		CanInvite = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanInvite), in ILSpyHelper_AsRefReadOnly(details.CanInvite), ref changed);
		CanKick = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanKick), in ILSpyHelper_AsRefReadOnly(details.CanKick), ref changed);
		CanPromote = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanPromote), in ILSpyHelper_AsRefReadOnly(details.CanPromote), ref changed);
		CanDemote = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanDemote), in ILSpyHelper_AsRefReadOnly(details.CanDemote), ref changed);
		CanAccessLogs = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanAccessLogs), in ILSpyHelper_AsRefReadOnly(details.CanAccessLogs), ref changed);
		CanAccessScoreEvents = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanAccessScoreEvents), in ILSpyHelper_AsRefReadOnly(details.CanAccessScoreEvents), ref changed);
		return changed | _variables.UpdateFromModel(details.Variables);
		static ref readonly T ILSpyHelper_AsRefReadOnly<T>(in T temp)
		{
			//ILSpy generated this function to help ensure overload resolution can pick the overload using 'in'
			return ref temp;
		}
	}
}


using System;
using System.Collections.Generic;
using Facepunch.Nexus.Models;

public readonly struct NexusLoginResult : ValueType
{
	private readonly ZonePlayerLogin _login;

	public string PlayerId => _login.PlayerId;

	public long LastSeen => _login.LastSeen;

	public Dictionary<string, VariableData> Variables => _login.Variables;

	public string AssignedZoneKey => _login.AssignedZoneKey;

	public bool IsRedirect
	{
		get
		{
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			if (_login.RedirectIpAddress == null && !_login.RedirectGamePort.HasValue)
			{
				return _login.RedirectQueryPort.HasValue;
			}
			return true;
		}
	}

	public string RedirectIpAddress
	{
		get
		{
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			return _login.RedirectIpAddress ?? throw new InvalidOperationException("Redirect IP address was not set");
		}
	}

	public int RedirectGamePort
	{
		get
		{
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			Nullable<int> redirectGamePort = _login.RedirectGamePort;
			if (!redirectGamePort.HasValue)
			{
				throw new InvalidOperationException("Redirect game port was not set");
			}
			return redirectGamePort.GetValueOrDefault();
		}
	}

	public int RedirectQueryPort
	{
		get
		{
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			Nullable<int> redirectQueryPort = _login.RedirectQueryPort;
			if (!redirectQueryPort.HasValue)
			{
				throw new InvalidOperationException("Redirect query port was not set");
			}
			return redirectQueryPort.GetValueOrDefault();
		}
	}

	internal NexusLoginResult(ZonePlayerLogin login)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		_login = login ?? throw new ArgumentNullException("login");
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;

public readonly struct NexusMessage : ValueType
{
	private readonly string _stringData;

	private readonly byte[] _binaryData;

	[field: CompilerGenerated]
	internal string MessageId
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public Uuid Id
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public string ContentType
	{
		[CompilerGenerated]
		get;
	}

	public bool IsString => _stringData != null;

	public bool IsBinary => _binaryData != null;

	public string AsString => _stringData ?? throw new InvalidOperationException("Message is not text");

	public byte[] AsBinary => _binaryData ?? throw new InvalidOperationException("Message is not binary");

	internal NexusMessage(string messageId, Guid id, string contentType, string data)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		MessageId = messageId ?? throw new ArgumentNullException("messageId");
		Id = id;
		ContentType = contentType ?? throw new ArgumentNullException("contentType");
		_stringData = data ?? throw new ArgumentNullException("data");
		_binaryData = null;
	}

	internal NexusMessage(string messageId, Guid id, string contentType, byte[] data)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		MessageId = messageId ?? throw new ArgumentNullException("messageId");
		Id = id;
		ContentType = contentType ?? throw new ArgumentNullException("contentType");
		_stringData = null;
		_binaryData = data ?? throw new ArgumentNullException("data");
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public class NexusPlayer : Object
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Refresh>d__21 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusPlayer <>4__this;

		private TaskAwaiter<ZonePlayerDetails> <>u__1;

		private void MoveNext()
		{
			//IL_0091: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayer nexusPlayer = <>4__this;
			try
			{
				TaskAwaiter<ZonePlayerDetails> val;
				if (num != 0)
				{
					val = nexusPlayer._zoneConnector.GetPlayerDetails(nexusPlayer.PlayerId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ZonePlayerDetails>, <Refresh>d__21>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ZonePlayerDetails>);
					num = (<>1__state = -1);
				}
				ZonePlayerDetails result = val.GetResult();
				nexusPlayer.UpdateZone(result.AssignedZoneKey);
				nexusPlayer.UpdateVariables(result.Variables);
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <RefreshInBackground>d__20 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncVoidMethodBuilder <>t__builder;

		public NexusPlayer <>4__this;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_006f: Expected O, but got Unknown
			//IL_0091: Expected O, but got Unknown
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayer nexusPlayer = <>4__this;
			try
			{
				try
				{
					TaskAwaiter val;
					if (num != 0)
					{
						val = nexusPlayer.Refresh().GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncVoidMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <RefreshInBackground>d__20>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(TaskAwaiter);
						num = (<>1__state = -1);
					}
					((TaskAwaiter)(ref val)).GetResult();
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					nexusPlayer._logger.LogError(String.Concat("Failed to refresh player ", nexusPlayer.PlayerId), exception);
				}
			}
			catch (Exception val3)
			{
				Exception exception2 = val3;
				<>1__state = -2;
				((AsyncVoidMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetVariable>d__15 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusPlayer <>4__this;

		public string key;

		public string value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00db: Expected O, but got Unknown
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayer nexusPlayer = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00b8;
				}
				if (!nexusPlayer._variables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusPlayer._zoneConnector.SetPlayerVariable(nexusPlayer.PlayerId, key, value, isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetVariable>d__15>(ref val, ref this);
						return;
					}
					goto IL_00b8;
				}
				goto end_IL_000e;
				IL_00b8:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusPlayer._variables.Set(key, value);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetVariable>d__16 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusPlayer <>4__this;

		public string key;

		public byte[] value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00e0: Expected O, but got Unknown
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayer nexusPlayer = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00bd;
				}
				if (!nexusPlayer._variables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusPlayer._zoneConnector.SetPlayerVariable(nexusPlayer.PlayerId, key, System.Memory<byte>.op_Implicit(value), isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetVariable>d__16>(ref val, ref this);
						return;
					}
					goto IL_00bd;
				}
				goto end_IL_000e;
				IL_00bd:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusPlayer._variables.Set(key, value);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private const double RefreshInterval = 120.0;

	private readonly INexusLogger _logger;

	private readonly INexusZoneConnector _zoneConnector;

	private readonly IClockProvider _clockProvider;

	private readonly VariableContainer _variables;

	private double _lastRefreshed;

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public string AssignedZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	internal NexusPlayer(INexusLogger logger, INexusZoneConnector zoneConnector, IClockProvider clockProvider, string playerId)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		_logger = logger ?? throw new ArgumentNullException("logger");
		_zoneConnector = zoneConnector ?? throw new ArgumentNullException("zoneConnector");
		_clockProvider = clockProvider ?? throw new ArgumentNullException("clockProvider");
		_variables = new VariableContainer();
		_lastRefreshed = _clockProvider.Timestamp;
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		PlayerId = playerId;
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetVariable>d__15 <SetVariable>d__ = default(<SetVariable>d__15);
		<SetVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetVariable>d__.<>4__this = this;
		<SetVariable>d__.key = key;
		<SetVariable>d__.value = value;
		<SetVariable>d__.isTransient = isTransient;
		<SetVariable>d__.isSecret = isSecret;
		<SetVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetVariable>d__.<>t__builder)).Start<<SetVariable>d__15>(ref <SetVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetVariable>d__16 <SetVariable>d__ = default(<SetVariable>d__16);
		<SetVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetVariable>d__.<>4__this = this;
		<SetVariable>d__.key = key;
		<SetVariable>d__.value = value;
		<SetVariable>d__.isTransient = isTransient;
		<SetVariable>d__.isSecret = isSecret;
		<SetVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetVariable>d__.<>t__builder)).Start<<SetVariable>d__16>(ref <SetVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetVariable>d__.<>t__builder)).Task;
	}

	internal void RefreshIfNeeded()
	{
		double timestamp = _clockProvider.Timestamp;
		if (timestamp - _lastRefreshed > 120.0)
		{
			_lastRefreshed = timestamp;
			RefreshInBackground();
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal void RefreshInBackground()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<RefreshInBackground>d__20 <RefreshInBackground>d__ = default(<RefreshInBackground>d__20);
		<RefreshInBackground>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
		<RefreshInBackground>d__.<>4__this = this;
		<RefreshInBackground>d__.<>1__state = -1;
		((AsyncVoidMethodBuilder)(ref <RefreshInBackground>d__.<>t__builder)).Start<<RefreshInBackground>d__20>(ref <RefreshInBackground>d__);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal Task Refresh()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Refresh>d__21 <Refresh>d__ = default(<Refresh>d__21);
		<Refresh>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Refresh>d__.<>4__this = this;
		<Refresh>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Refresh>d__.<>t__builder)).Start<<Refresh>d__21>(ref <Refresh>d__);
		return ((AsyncTaskMethodBuilder)(ref <Refresh>d__.<>t__builder)).Task;
	}

	internal void UpdateZone(string assignedZoneKey)
	{
		AssignedZoneKey = assignedZoneKey;
	}

	internal void UpdateVariables(Dictionary<string, VariableData> variables)
	{
		_variables.UpdateFromModel(variables);
	}
}


using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public sealed class NexusPlayerClient : BaseNexusPlayerClient
{
	public delegate System.Threading.Tasks.ValueTask<string> AuthHandler();

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayerDetails>d__7 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<PlayerDetails> <>t__builder;

		public int nexusId;

		public NexusPlayerClient <>4__this;

		private ValueTaskAwaiter<string> <>u__1;

		private TaskAwaiter<PlayerDetails> <>u__2;

		private void MoveNext()
		{
			//IL_0155: Expected O, but got Unknown
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0095: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
			//IL_0102: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayerClient nexusPlayerClient = <>4__this;
			PlayerDetails result2;
			try
			{
				TaskAwaiter<PlayerDetails> val;
				PlayerDetails value;
				ValueTaskAwaiter<string> val2;
				if (num != 0)
				{
					if (num == 1)
					{
						val = <>u__2;
						<>u__2 = default(TaskAwaiter<PlayerDetails>);
						num = (<>1__state = -1);
						goto IL_0111;
					}
					if (nexusId <= 0)
					{
						throw new ArgumentOutOfRangeException("nexusId");
					}
					if (nexusPlayerClient._cachedPlayerInfo.TryGetValue(in nexusId, out value))
					{
						goto IL_014f;
					}
					val2 = nexusPlayerClient._authHandler().GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						<>t__builder.AwaitUnsafeOnCompleted<ValueTaskAwaiter<string>, <GetPlayerDetails>d__7>(ref val2, ref this);
						return;
					}
				}
				else
				{
					val2 = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<string>);
					num = (<>1__state = -1);
				}
				string result = val2.GetResult();
				val = nexusPlayerClient._connector.GetPlayerDetails(nexusId, result).GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val;
					<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<PlayerDetails>, <GetPlayerDetails>d__7>(ref val, ref this);
					return;
				}
				goto IL_0111;
				IL_0111:
				PlayerDetails value2 = val.GetResult();
				value = nexusPlayerClient._cachedPlayerInfo.Update(in nexusId, in value2);
				if (nexusId == nexusPlayerClient.NexusId)
				{
					nexusPlayerClient.UpdateVariables(nexusPlayerClient.PlayerVariables, value.Variables);
				}
				goto IL_014f;
				IL_014f:
				result2 = value;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Update>d__6 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder <>t__builder;

		public NexusPlayerClient <>4__this;

		private ValueTaskAwaiter<NexusDetails> <>u__1;

		private ValueTaskAwaiter<PlayerDetails> <>u__2;

		private void MoveNext()
		{
			//IL_0104: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayerClient nexusPlayerClient = <>4__this;
			try
			{
				ValueTaskAwaiter<NexusDetails> val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<NexusDetails>);
					num = (<>1__state = -1);
					goto IL_0082;
				}
				ValueTaskAwaiter<PlayerDetails> val2;
				if (num == 1)
				{
					val2 = <>u__2;
					<>u__2 = default(ValueTaskAwaiter<PlayerDetails>);
					num = (<>1__state = -1);
					goto IL_00ef;
				}
				if (nexusPlayerClient.NexusId > 0)
				{
					val = nexusPlayerClient.GetNexusDetails(nexusPlayerClient.NexusId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<NexusDetails>, <Update>d__6>(ref val, ref this);
						return;
					}
					goto IL_0082;
				}
				goto end_IL_000e;
				IL_00ef:
				PlayerDetails result = val2.GetResult();
				nexusPlayerClient.Player = result;
				goto end_IL_000e;
				IL_0082:
				NexusDetails result2 = val.GetResult();
				nexusPlayerClient.Nexus = result2;
				val2 = nexusPlayerClient.GetPlayerDetails(nexusPlayerClient.NexusId).GetAwaiter();
				if (!val2.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val2;
					((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<PlayerDetails>, <Update>d__6>(ref val2, ref this);
					return;
				}
				goto IL_00ef;
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private readonly INexusPlayerConnector _connector;

	private readonly AuthHandler _authHandler;

	private readonly CachedValue<int, PlayerDetails> _cachedPlayerInfo;

	public NexusPlayerClient(INexusLogger logger, string baseUrl, AuthHandler authHandler)
		: this(new NexusPlayerConnector(logger, baseUrl), DefaultClockProvider.Instance, 300.0, authHandler)
	{
	}

	internal NexusPlayerClient(INexusPlayerConnector connector, IClockProvider clock, double updateInterval, AuthHandler authHandler)
		: base(connector, clock, updateInterval)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		_connector = connector ?? throw new ArgumentNullException("connector");
		_authHandler = authHandler ?? throw new ArgumentNullException("authHandler");
		_cachedPlayerInfo = new CachedValue<int, PlayerDetails>(clock);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected override System.Threading.Tasks.ValueTask Update(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Update>d__6 <Update>d__ = default(<Update>d__6);
		<Update>d__.<>t__builder = AsyncValueTaskMethodBuilder.Create();
		<Update>d__.<>4__this = this;
		<Update>d__.<>1__state = -1;
		((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Start<<Update>d__6>(ref <Update>d__);
		return ((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected internal override System.Threading.Tasks.ValueTask<PlayerDetails> GetPlayerDetails(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayerDetails>d__7 <GetPlayerDetails>d__ = default(<GetPlayerDetails>d__7);
		<GetPlayerDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<PlayerDetails>.Create();
		<GetPlayerDetails>d__.<>4__this = this;
		<GetPlayerDetails>d__.nexusId = nexusId;
		<GetPlayerDetails>d__.<>1__state = -1;
		<GetPlayerDetails>d__.<>t__builder.Start<<GetPlayerDetails>d__7>(ref <GetPlayerDetails>d__);
		return <GetPlayerDetails>d__.<>t__builder.Task;
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;
using Newtonsoft.Json;

public sealed class NexusZoneClient : BaseNexusClient
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Assign>d__56 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string playerId;

		public string toZone;

		public NexusZoneClient <>4__this;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00d0: Expected O, but got Unknown
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				TaskAwaiter val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					if (String.IsNullOrWhiteSpace(toZone))
					{
						throw new ArgumentNullException("toZone");
					}
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.Assign(playerId, toZone).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <Assign>d__56>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				if (nexusZoneClient.TryGetPlayer(playerId, out var player))
				{
					player.UpdateZone(toZone);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CreateClan>d__7 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public ClanCreateParameters parameters;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00f2: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.CreateClan(parameters).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <CreateClan>d__7>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 409)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.DuplicateName);
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.AlreadyInAClan);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					NexusClan response = nexusZoneClient.UpsertClan(result.Response);
					result2 = new NexusClanResult<NexusClan>(response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClan>d__4 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public long clanId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0125: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Invalid comparison between Unknown and I4
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					Dictionary<long, NexusClan> clans = nexusZoneClient._clans;
					bool flag = false;
					try
					{
						Monitor.Enter((object)clans, ref flag);
						NexusClan response = default(NexusClan);
						if (!nexusZoneClient._clans.TryGetValue(clanId, ref response))
						{
							goto end_IL_0025;
						}
						result = new NexusClanResult<NexusClan>(response);
						goto end_IL_000e;
						end_IL_0025:;
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)clans);
						}
					}
					val = nexusZoneClient._connector.GetClan(clanId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <GetClan>d__4>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result2 = val.GetResult();
				if ((int)result2.StatusCode == 404)
				{
					result = new NexusClanResult<NexusClan>(NexusClanResultCode.NotFound);
				}
				else if (!result2.IsSuccess)
				{
					result = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result2.EnsureSuccessfulWithResponse();
					NexusClan response2 = nexusZoneClient.UpsertClan(result2.Response);
					result = new NexusClanResult<NexusClan>(response2);
				}
				end_IL_000e:;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClanByMember>d__5 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00da: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.GetClanByMember(playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <GetClanByMember>d__5>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.NoClan);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					NexusClan response = nexusZoneClient.UpsertClan(result.Response);
					result2 = new NexusClanResult<NexusClan>(response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClanLeaderboard>d__9 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanLeaderboardEntry>>> <>t__builder;

		public NexusZoneClient <>4__this;

		public int limit;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>> <>u__1;

		private void MoveNext()
		{
			//IL_00ab: Expected O, but got Unknown
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<List<ClanLeaderboardEntry>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.GetClanLeaderboard(limit).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>>, <GetClanLeaderboard>d__9>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanLeaderboardEntry>> result = val.GetResult();
				result2 = (result.IsSuccess ? new NexusClanResult<List<ClanLeaderboardEntry>>(result.Response) : new NexusClanResult<List<ClanLeaderboardEntry>>(NexusClanResultCode.Fail));
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexusDetails>d__66 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusDetails> <>t__builder;

		public NexusZoneClient <>4__this;

		public int nexusId;

		private TaskAwaiter<NexusDetails> <>u__1;

		private void MoveNext()
		{
			//IL_009d: Expected O, but got Unknown
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusDetails result;
			try
			{
				NexusDetails value;
				TaskAwaiter<NexusDetails> val;
				if (num != 0)
				{
					if (nexusZoneClient._cachedNexusInfo.TryGetValue(out value))
					{
						goto IL_0097;
					}
					val = nexusZoneClient._connector.GetNexus(nexusId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<NexusDetails>, <GetNexusDetails>d__66>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<NexusDetails>);
					num = (<>1__state = -1);
				}
				NexusDetails value2 = val.GetResult();
				value = nexusZoneClient._cachedNexusInfo.Update(in value2);
				goto IL_0097;
				IL_0097:
				result = value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayer>d__54 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusPlayer> <>t__builder;

		public string playerId;

		public NexusZoneClient <>4__this;

		private NexusPlayer <newPlayer>5__2;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_0157: Expected O, but got Unknown
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusPlayer result;
			try
			{
				TaskAwaiter val;
				Dictionary<string, NexusPlayer> players;
				bool flag;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					nexusZoneClient.AssertInitialized();
					players = nexusZoneClient._players;
					flag = false;
					try
					{
						Monitor.Enter((object)players, ref flag);
						NexusPlayer nexusPlayer = default(NexusPlayer);
						if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer))
						{
							goto end_IL_003c;
						}
						result = nexusPlayer;
						goto end_IL_000e;
						end_IL_003c:;
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)players);
						}
					}
					<newPlayer>5__2 = new NexusPlayer(nexusZoneClient._logger, nexusZoneClient._connector, nexusZoneClient._clock, playerId);
					val = <newPlayer>5__2.Refresh().GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter, <GetPlayer>d__54>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				players = nexusZoneClient._players;
				flag = false;
				try
				{
					Monitor.Enter((object)players, ref flag);
					NexusPlayer nexusPlayer2 = default(NexusPlayer);
					if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer2))
					{
						nexusZoneClient._players.Add(playerId, <newPlayer>5__2);
						goto end_IL_0102;
					}
					result = nexusPlayer2;
					goto end_IL_000e;
					end_IL_0102:;
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				result = <newPlayer>5__2;
				end_IL_000e:;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<newPlayer>5__2 = null;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<newPlayer>5__2 = null;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetZoneDetails>d__65 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<ZoneDetails> <>t__builder;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ZoneDetails> <>u__1;

		private void MoveNext()
		{
			//IL_00c1: Expected O, but got Unknown
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			ZoneDetails result;
			try
			{
				ZoneDetails value;
				TaskAwaiter<ZoneDetails> val;
				if (num != 0)
				{
					if (nexusZoneClient._cachedZoneInfo.TryGetValue(out value))
					{
						goto IL_00bb;
					}
					val = nexusZoneClient._connector.GetZoneDetails().GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ZoneDetails>, <GetZoneDetails>d__65>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails value2 = val.GetResult();
				value = nexusZoneClient._cachedZoneInfo.Update(in value2);
				nexusZoneClient.UpdateVariables(nexusZoneClient._nexusVariables, value.NexusVariables);
				nexusZoneClient.UpdateVariables(nexusZoneClient._zoneVariables, value.Variables);
				goto IL_00bb;
				IL_00bb:
				result = value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Initialize>d__42 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private ValueTaskAwaiter<ZoneDetails> <>u__1;

		private ValueTaskAwaiter<NexusDetails> <>u__2;

		private void MoveNext()
		{
			//IL_00f7: Expected O, but got Unknown
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ValueTaskAwaiter<NexusDetails> val;
				ValueTaskAwaiter<ZoneDetails> val2;
				if (num != 0)
				{
					if (num == 1)
					{
						val = <>u__2;
						<>u__2 = default(ValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
						goto IL_00e2;
					}
					val2 = nexusZoneClient.GetZoneDetails().GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<ZoneDetails>, <Initialize>d__42>(ref val2, ref this);
						return;
					}
				}
				else
				{
					val2 = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails result = val2.GetResult();
				nexusZoneClient.Zone = result;
				val = nexusZoneClient.GetNexusDetails(nexusZoneClient.Zone.NexusId).GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val;
					((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<NexusDetails>, <Initialize>d__42>(ref val, ref this);
					return;
				}
				goto IL_00e2;
				IL_00e2:
				NexusDetails result2 = val.GetResult();
				nexusZoneClient.Nexus = result2;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ListClanInvitations>d__8 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanInvitation>>> <>t__builder;

		public NexusZoneClient <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>> <>u__1;

		private void MoveNext()
		{
			//IL_00ab: Expected O, but got Unknown
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<List<ClanInvitation>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.ListInvitations(playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>>, <ListClanInvitations>d__8>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanInvitation>> result = val.GetResult();
				result2 = (result.IsSuccess ? new NexusClanResult<List<ClanInvitation>>(result.Response) : new NexusClanResult<List<ClanInvitation>>(NexusClanResultCode.Fail));
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <PlayerLogin>d__52 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusLoginResult> <>t__builder;

		public string playerId;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ZonePlayerLogin> <>u__1;

		private void MoveNext()
		{
			//IL_0167: Expected O, but got Unknown
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusLoginResult result2;
			try
			{
				TaskAwaiter<ZonePlayerLogin> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.PlayerLogin(playerId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ZonePlayerLogin>, <PlayerLogin>d__52>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ZonePlayerLogin>);
					num = (<>1__state = -1);
				}
				ZonePlayerLogin result = val.GetResult();
				NexusLoginResult nexusLoginResult = new NexusLoginResult(result);
				if (!nexusLoginResult.IsRedirect && nexusLoginResult.AssignedZoneKey != null && nexusLoginResult.AssignedZoneKey != nexusZoneClient.Zone.Key)
				{
					throw new InvalidOperationException("Player is assigned to a different zone");
				}
				Dictionary<string, NexusPlayer> players = nexusZoneClient._players;
				bool flag = false;
				NexusPlayer nexusPlayer = default(NexusPlayer);
				try
				{
					Monitor.Enter((object)players, ref flag);
					if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer))
					{
						nexusPlayer = new NexusPlayer(nexusZoneClient._logger, nexusZoneClient._connector, nexusZoneClient._clock, playerId);
						nexusZoneClient._players.Add(playerId, nexusPlayer);
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				nexusPlayer.UpdateZone(nexusLoginResult.AssignedZoneKey);
				nexusPlayer.UpdateVariables(nexusLoginResult.Variables);
				result2 = nexusLoginResult;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetNexusVariable>d__47 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public string value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00e7: Expected O, but got Unknown
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00b8;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._nexusVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetNexusVariable(key, value, isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetNexusVariable>d__47>(ref val, ref this);
						return;
					}
					goto IL_00b8;
				}
				goto end_IL_000e;
				IL_00b8:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._nexusVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetNexusVariable>d__48 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public byte[] value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00ec: Expected O, but got Unknown
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00bd;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._nexusVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetNexusVariable(key, System.Memory<byte>.op_Implicit(value), isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetNexusVariable>d__48>(ref val, ref this);
						return;
					}
					goto IL_00bd;
				}
				goto end_IL_000e;
				IL_00bd:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._nexusVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetZoneVariable>d__49 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public string value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00e7: Expected O, but got Unknown
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00b8;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._zoneVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetZoneVariable(key, value, isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetZoneVariable>d__49>(ref val, ref this);
						return;
					}
					goto IL_00b8;
				}
				goto end_IL_000e;
				IL_00b8:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._zoneVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetZoneVariable>d__50 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public byte[] value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00ec: Expected O, but got Unknown
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00bd;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._zoneVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetZoneVariable(key, System.Memory<byte>.op_Implicit(value), isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetZoneVariable>d__50>(ref val, ref this);
						return;
					}
					goto IL_00bd;
				}
				goto end_IL_000e;
				IL_00bd:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._zoneVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SubmitClanScoreEventBatch>d__12 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncVoidMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_008e: Expected O, but got Unknown
			//IL_00a9: Expected O, but got Unknown
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				if (num != 0)
				{
					nexusZoneClient._submittingScoreEventsBatch = true;
				}
				try
				{
					TaskAwaiter<ApiResult> val;
					if (num != 0)
					{
						val = nexusZoneClient._connector.AddClanScoreEventBatch(nexusZoneClient._scoreEventBatch).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncVoidMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult>, <SubmitClanScoreEventBatch>d__12>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(TaskAwaiter<ApiResult>);
						num = (<>1__state = -1);
					}
					val.GetResult();
					nexusZoneClient._scoreEventBatch.Clear();
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					nexusZoneClient.DispatchError(exception);
				}
				finally
				{
					if (num < 0)
					{
						nexusZoneClient._submittingScoreEventsBatch = false;
					}
				}
			}
			catch (Exception val3)
			{
				Exception exception2 = val3;
				<>1__state = -2;
				((AsyncVoidMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Update>d__43 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private ValueTaskAwaiter<ZoneDetails> <>u__1;

		private ValueTaskAwaiter<NexusDetails> <>u__2;

		private void MoveNext()
		{
			//IL_0200: Expected O, but got Unknown
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_014f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0154: Unknown result type (might be due to invalid IL or missing references)
			//IL_0126: Unknown result type (might be due to invalid IL or missing references)
			//IL_0130: Expected O, but got Unknown
			//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ValueTaskAwaiter<NexusDetails> val;
				ValueTaskAwaiter<ZoneDetails> val2;
				if (num != 0)
				{
					if (num == 1)
					{
						val = <>u__2;
						<>u__2 = default(ValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
						goto IL_00e5;
					}
					val2 = nexusZoneClient.GetZoneDetails().GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<ZoneDetails>, <Update>d__43>(ref val2, ref this);
						return;
					}
				}
				else
				{
					val2 = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails result = val2.GetResult();
				nexusZoneClient.Zone = result;
				val = nexusZoneClient.GetNexusDetails(nexusZoneClient.Zone.NexusId).GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val;
					((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<NexusDetails>, <Update>d__43>(ref val, ref this);
					return;
				}
				goto IL_00e5;
				IL_00e5:
				NexusDetails result2 = val.GetResult();
				nexusZoneClient.Nexus = result2;
				if (nexusZoneClient._socket.IsStarted && !nexusZoneClient._socket.IsConnected)
				{
					nexusZoneClient.DispatchError(new Exception(String.Concat("Socket is not connected for zone ", nexusZoneClient.Zone.Key)));
				}
				Dictionary<string, NexusPlayer> players = nexusZoneClient._players;
				bool flag = false;
				try
				{
					Monitor.Enter((object)players, ref flag);
					Enumerator<string, NexusPlayer> enumerator = nexusZoneClient._players.Values.GetEnumerator();
					try
					{
						while (enumerator.MoveNext())
						{
							enumerator.Current.RefreshIfNeeded();
						}
					}
					finally
					{
						if (num < 0)
						{
							((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
						}
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				Dictionary<long, NexusClan> clans = nexusZoneClient._clans;
				flag = false;
				try
				{
					Monitor.Enter((object)clans, ref flag);
					Enumerator<long, NexusClan> enumerator2 = nexusZoneClient._clans.Values.GetEnumerator();
					try
					{
						while (enumerator2.MoveNext())
						{
							enumerator2.Current.RefreshIfNeeded();
						}
					}
					finally
					{
						if (num < 0)
						{
							((IDisposable)enumerator2/*cast due to .constrained prefix*/).Dispose();
						}
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)clans);
					}
				}
				nexusZoneClient.UpdateClanScoreEvents();
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private readonly INexusLogger _logger;

	private readonly INexusZoneConnector _connector;

	private readonly INexusSocketConnector _socket;

	private readonly IClockProvider _clock;

	private readonly VariableContainer _nexusVariables;

	private readonly VariableContainer _zoneVariables;

	private readonly CachedValue<ZoneDetails> _cachedZoneInfo;

	private readonly CachedValue<NexusDetails> _cachedNexusInfo;

	private readonly Dictionary<string, NexusPlayer> _players;

	private readonly Dictionary<long, NexusClan> _clans;

	private readonly Queue<NewClanScoreEventBatchEntry> _scoreEventQueue;

	private readonly List<NewClanScoreEventBatchEntry> _scoreEventBatch;

	private bool _submittingScoreEventsBatch;

	[field: CompilerGenerated]
	public INexusClanEventListener ClanEventListener
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public ZoneDetails Zone
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public NexusDetails Nexus
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> GetClan(long clanId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClan>d__4 <GetClan>d__ = default(<GetClan>d__4);
		<GetClan>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<GetClan>d__.<>4__this = this;
		<GetClan>d__.clanId = clanId;
		<GetClan>d__.<>1__state = -1;
		<GetClan>d__.<>t__builder.Start<<GetClan>d__4>(ref <GetClan>d__);
		return <GetClan>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> GetClanByMember(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClanByMember>d__5 <GetClanByMember>d__ = default(<GetClanByMember>d__5);
		<GetClanByMember>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<GetClanByMember>d__.<>4__this = this;
		<GetClanByMember>d__.playerId = playerId;
		<GetClanByMember>d__.<>1__state = -1;
		<GetClanByMember>d__.<>t__builder.Start<<GetClanByMember>d__5>(ref <GetClanByMember>d__);
		return <GetClanByMember>d__.<>t__builder.Task;
	}

	public bool TryGetClan(long clanId, out NexusClan clan)
	{
		AssertInitialized();
		lock (_clans)
		{
			return _clans.TryGetValue(clanId, ref clan);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> CreateClan(ClanCreateParameters parameters)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CreateClan>d__7 <CreateClan>d__ = default(<CreateClan>d__7);
		<CreateClan>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<CreateClan>d__.<>4__this = this;
		<CreateClan>d__.parameters = parameters;
		<CreateClan>d__.<>1__state = -1;
		<CreateClan>d__.<>t__builder.Start<<CreateClan>d__7>(ref <CreateClan>d__);
		return <CreateClan>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<List<ClanInvitation>>> ListClanInvitations(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<ListClanInvitations>d__8 <ListClanInvitations>d__ = default(<ListClanInvitations>d__8);
		<ListClanInvitations>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanInvitation>>>.Create();
		<ListClanInvitations>d__.<>4__this = this;
		<ListClanInvitations>d__.playerId = playerId;
		<ListClanInvitations>d__.<>1__state = -1;
		<ListClanInvitations>d__.<>t__builder.Start<<ListClanInvitations>d__8>(ref <ListClanInvitations>d__);
		return <ListClanInvitations>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<List<ClanLeaderboardEntry>>> GetClanLeaderboard(int limit = 100)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClanLeaderboard>d__9 <GetClanLeaderboard>d__ = default(<GetClanLeaderboard>d__9);
		<GetClanLeaderboard>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanLeaderboardEntry>>>.Create();
		<GetClanLeaderboard>d__.<>4__this = this;
		<GetClanLeaderboard>d__.limit = limit;
		<GetClanLeaderboard>d__.<>1__state = -1;
		<GetClanLeaderboard>d__.<>t__builder.Start<<GetClanLeaderboard>d__9>(ref <GetClanLeaderboard>d__);
		return <GetClanLeaderboard>d__.<>t__builder.Task;
	}

	internal void EnqueueClanScoreEvent(in NewClanScoreEventBatchEntry entry)
	{
		lock (_scoreEventQueue)
		{
			_scoreEventQueue.Enqueue(entry);
		}
	}

	private void UpdateClanScoreEvents()
	{
		if (_submittingScoreEventsBatch)
		{
			return;
		}
		lock (_scoreEventQueue)
		{
			if (_scoreEventQueue.Count == 0)
			{
				return;
			}
			_scoreEventBatch.Clear();
			while (_scoreEventQueue.Count > 0)
			{
				_scoreEventBatch.Add(_scoreEventQueue.Dequeue());
			}
		}
		SubmitClanScoreEventBatch();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private void SubmitClanScoreEventBatch()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SubmitClanScoreEventBatch>d__12 <SubmitClanScoreEventBatch>d__ = default(<SubmitClanScoreEventBatch>d__12);
		<SubmitClanScoreEventBatch>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
		<SubmitClanScoreEventBatch>d__.<>4__this = this;
		<SubmitClanScoreEventBatch>d__.<>1__state = -1;
		((AsyncVoidMethodBuilder)(ref <SubmitClanScoreEventBatch>d__.<>t__builder)).Start<<SubmitClanScoreEventBatch>d__12>(ref <SubmitClanScoreEventBatch>d__);
	}

	private void HandleClanEvent(in NexusMessage message)
	{
		//IL_018e: Expected O, but got Unknown
		try
		{
			if (!message.IsString)
			{
				_logger.LogError(String.Concat("Received clan event type ", message.ContentType, " but the payload is not a string"));
			}
			else if (message.ContentType.EndsWith("-disband"))
			{
				ClanDisbandedEvent args = JsonConvert.DeserializeObject<ClanDisbandedEvent>(message.AsString);
				RemoveClan(args.ClanId);
				ClanEventListener?.OnDisbanded(in args);
			}
			else if (message.ContentType.EndsWith("-invite"))
			{
				ClanInvitedEvent args2 = JsonConvert.DeserializeObject<ClanInvitedEvent>(message.AsString);
				RefreshClan(args2.ClanId);
				ClanEventListener?.OnInvitation(in args2);
			}
			else if (message.ContentType.EndsWith("-join"))
			{
				ClanJoinedEvent args3 = JsonConvert.DeserializeObject<ClanJoinedEvent>(message.AsString);
				RefreshClan(args3.ClanId);
				ClanEventListener?.OnJoined(in args3);
			}
			else if (message.ContentType.EndsWith("-kick"))
			{
				ClanKickedEvent args4 = JsonConvert.DeserializeObject<ClanKickedEvent>(message.AsString);
				RefreshClan(args4.ClanId);
				ClanEventListener?.OnKicked(in args4);
			}
			else if (message.ContentType.EndsWith("-change"))
			{
				RefreshClan(JsonConvert.DeserializeObject<ClanChangedEvent>(message.AsString).ClanId);
			}
			else
			{
				_logger.LogError(String.Concat("Cannot handle clan event: ", message.ContentType));
			}
		}
		catch (Exception val)
		{
			Exception exception = val;
			_logger.LogError(String.Concat("Failed to handle clan event (type=", message.ContentType, "): ", message.AsString), exception);
		}
		AcknowledgeMessage(in message);
	}

	private void RefreshClan(long clanId)
	{
		lock (_clans)
		{
			NexusClan nexusClan = default(NexusClan);
			if (_clans.TryGetValue(clanId, ref nexusClan))
			{
				nexusClan.RefreshInBackground();
			}
		}
	}

	internal NexusClan UpsertClan(in ClanDetails details)
	{
		lock (_clans)
		{
			NexusClan nexusClan = default(NexusClan);
			if (_clans.TryGetValue(details.ClanId, ref nexusClan))
			{
				UpdateClan(nexusClan, in details);
			}
			else
			{
				nexusClan = new NexusClan(this, _connector, _clock, _logger, details.ClanId);
				UpdateClan(nexusClan, in details);
				_clans.Add(details.ClanId, nexusClan);
			}
			return nexusClan;
		}
	}

	private void UpdateClan(NexusClan clan, in ClanDetails details)
	{
		if (clan.UpdateFromModel(in details))
		{
			ClanChangedEvent clanChangedEvent = default(ClanChangedEvent);
			clanChangedEvent.ClanId = clan.ClanId;
			ClanChangedEvent args = clanChangedEvent;
			ClanEventListener?.OnChanged(in args);
		}
	}

	internal void RemoveClan(long clanId)
	{
		//IL_0044: Expected O, but got Unknown
		lock (_clans)
		{
			if (!_clans.Remove(clanId))
			{
				return;
			}
		}
		try
		{
			ClanEventListener?.OnUnload(in clanId);
		}
		catch (Exception val)
		{
			Exception exception = val;
			_logger.LogError("Clan event listener for OnUnload threw an exception", exception);
		}
	}

	public NexusZoneClient(INexusLogger logger, string baseUrl, string secretKey, int lockDuration = 30)
		: this(logger, new NexusZoneConnector(logger, baseUrl, secretKey), new NexusSocketConnector(logger, baseUrl, secretKey, lockDuration), DefaultClockProvider.Instance, 30.0)
	{
	}

	internal NexusZoneClient(INexusLogger logger, INexusZoneConnector connector, INexusSocketConnector socket, IClockProvider clock, double updateInterval)
		: base(connector, clock, updateInterval)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		_logger = logger ?? throw new ArgumentNullException("logger");
		_connector = connector ?? throw new ArgumentNullException("connector");
		_socket = socket ?? throw new ArgumentNullException("socket");
		_clock = clock ?? throw new ArgumentNullException("clock");
		_nexusVariables = new VariableContainer();
		_zoneVariables = new VariableContainer();
		_cachedNexusInfo = new CachedValue<NexusDetails>(clock);
		_cachedZoneInfo = new CachedValue<ZoneDetails>(clock);
		_players = new Dictionary<string, NexusPlayer>();
		_clans = new Dictionary<long, NexusClan>();
		_scoreEventQueue = new Queue<NewClanScoreEventBatchEntry>();
		_scoreEventBatch = new List<NewClanScoreEventBatchEntry>();
	}

	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
		((IDisposable)_socket).Dispose();
		lock (_players)
		{
			_players.Clear();
		}
		lock (_clans)
		{
			_clans.Clear();
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected override System.Threading.Tasks.ValueTask Initialize(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Initialize>d__42 <Initialize>d__ = default(<Initialize>d__42);
		<Initialize>d__.<>t__builder = AsyncValueTaskMethodBuilder.Create();
		<Initialize>d__.<>4__this = this;
		<Initialize>d__.<>1__state = -1;
		((AsyncValueTaskMethodBuilder)(ref <Initialize>d__.<>t__builder)).Start<<Initialize>d__42>(ref <Initialize>d__);
		return ((AsyncValueTaskMethodBuilder)(ref <Initialize>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected override System.Threading.Tasks.ValueTask Update(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Update>d__43 <Update>d__ = default(<Update>d__43);
		<Update>d__.<>t__builder = AsyncValueTaskMethodBuilder.Create();
		<Update>d__.<>4__this = this;
		<Update>d__.<>1__state = -1;
		((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Start<<Update>d__43>(ref <Update>d__);
		return ((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Task;
	}

	public void StartListening()
	{
		_socket.Start();
	}

	public bool TryGetNexusVariable(string key, out Variable variable)
	{
		return _nexusVariables.TryGet(key, out variable);
	}

	public bool TryGetZoneVariable(string key, out Variable variable)
	{
		return _zoneVariables.TryGet(key, out variable);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetNexusVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetNexusVariable>d__47 <SetNexusVariable>d__ = default(<SetNexusVariable>d__47);
		<SetNexusVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetNexusVariable>d__.<>4__this = this;
		<SetNexusVariable>d__.key = key;
		<SetNexusVariable>d__.value = value;
		<SetNexusVariable>d__.isTransient = isTransient;
		<SetNexusVariable>d__.isSecret = isSecret;
		<SetNexusVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Start<<SetNexusVariable>d__47>(ref <SetNexusVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetNexusVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetNexusVariable>d__48 <SetNexusVariable>d__ = default(<SetNexusVariable>d__48);
		<SetNexusVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetNexusVariable>d__.<>4__this = this;
		<SetNexusVariable>d__.key = key;
		<SetNexusVariable>d__.value = value;
		<SetNexusVariable>d__.isTransient = isTransient;
		<SetNexusVariable>d__.isSecret = isSecret;
		<SetNexusVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Start<<SetNexusVariable>d__48>(ref <SetNexusVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetZoneVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetZoneVariable>d__49 <SetZoneVariable>d__ = default(<SetZoneVariable>d__49);
		<SetZoneVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetZoneVariable>d__.<>4__this = this;
		<SetZoneVariable>d__.key = key;
		<SetZoneVariable>d__.value = value;
		<SetZoneVariable>d__.isTransient = isTransient;
		<SetZoneVariable>d__.isSecret = isSecret;
		<SetZoneVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Start<<SetZoneVariable>d__49>(ref <SetZoneVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetZoneVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetZoneVariable>d__50 <SetZoneVariable>d__ = default(<SetZoneVariable>d__50);
		<SetZoneVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetZoneVariable>d__.<>4__this = this;
		<SetZoneVariable>d__.key = key;
		<SetZoneVariable>d__.value = value;
		<SetZoneVariable>d__.isTransient = isTransient;
		<SetZoneVariable>d__.isSecret = isSecret;
		<SetZoneVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Start<<SetZoneVariable>d__50>(ref <SetZoneVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Task;
	}

	public Task<List<string>> FindPlayersWithVariable(string key, string value)
	{
		return _connector.FindPlayersWithVariable(key, value);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusLoginResult> PlayerLogin(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<PlayerLogin>d__52 <PlayerLogin>d__ = default(<PlayerLogin>d__52);
		<PlayerLogin>d__.<>t__builder = AsyncTaskMethodBuilder<NexusLoginResult>.Create();
		<PlayerLogin>d__.<>4__this = this;
		<PlayerLogin>d__.playerId = playerId;
		<PlayerLogin>d__.<>1__state = -1;
		<PlayerLogin>d__.<>t__builder.Start<<PlayerLogin>d__52>(ref <PlayerLogin>d__);
		return <PlayerLogin>d__.<>t__builder.Task;
	}

	public void PlayerLogout(string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		AssertInitialized();
		lock (_players)
		{
			_players.Remove(playerId);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusPlayer> GetPlayer(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayer>d__54 <GetPlayer>d__ = default(<GetPlayer>d__54);
		<GetPlayer>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusPlayer>.Create();
		<GetPlayer>d__.<>4__this = this;
		<GetPlayer>d__.playerId = playerId;
		<GetPlayer>d__.<>1__state = -1;
		<GetPlayer>d__.<>t__builder.Start<<GetPlayer>d__54>(ref <GetPlayer>d__);
		return <GetPlayer>d__.<>t__builder.Task;
	}

	public bool TryGetPlayer(string playerId, out NexusPlayer player)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		AssertInitialized();
		lock (_players)
		{
			return _players.TryGetValue(playerId, ref player);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Assign(string playerId, string toZone)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Assign>d__56 <Assign>d__ = default(<Assign>d__56);
		<Assign>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Assign>d__.<>4__this = this;
		<Assign>d__.playerId = playerId;
		<Assign>d__.toZone = toZone;
		<Assign>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Start<<Assign>d__56>(ref <Assign>d__);
		return ((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Task;
	}

	public Task RegisterTransfers(string toZone, IEnumerable<string> playerIds)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(toZone))
		{
			throw new ArgumentNullException("toZone");
		}
		if (playerIds == null)
		{
			throw new ArgumentNullException("playerIds");
		}
		AssertInitialized();
		return _connector.RegisterTransfers(toZone, playerIds);
	}

	public Task CompleteTransfers(IEnumerable<string> playerIds)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		if (playerIds == null)
		{
			throw new ArgumentNullException("playerIds");
		}
		AssertInitialized();
		return _connector.CompleteTransfers(playerIds);
	}

	public bool TryReceiveMessage(out NexusMessage message)
	{
		AssertInitialized();
		while (true)
		{
			if (!_socket.TryReceive(out message))
			{
				message = default(NexusMessage);
				return false;
			}
			if (!message.ContentType.StartsWith("application/json+clan-"))
			{
				break;
			}
			HandleClanEvent(in message);
		}
		return true;
	}

	public void AcknowledgeMessage(in NexusMessage message)
	{
		AssertInitialized();
		_socket.Acknowledge(message.MessageId);
	}

	public Task SendMessage(string toZone, Uuid id, string message, Nullable<int> ttl = default(Nullable<int>))
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		if (id == Uuid.Empty)
		{
			throw new ArgumentNullException("id");
		}
		if (String.IsNullOrWhiteSpace(message))
		{
			throw new ArgumentNullException("message");
		}
		AssertInitialized();
		return _connector.SendMessage(toZone, id, message, ttl);
	}

	public Task SendMessage(string toZone, Uuid id, System.Memory<byte> message, Nullable<int> ttl = default(Nullable<int>))
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (id == Uuid.Empty)
		{
			throw new ArgumentNullException("id");
		}
		if (message.IsEmpty)
		{
			throw new ArgumentNullException("message");
		}
		AssertInitialized();
		return _connector.SendMessage(toZone, id, message, ttl);
	}

	public Task<ZoneMapCheckResult> CheckUploadedMap()
	{
		AssertInitialized();
		return _connector.CheckUploadedMap();
	}

	public Task UploadMap(string key, byte[] pngMapImage)
	{
		AssertInitialized();
		return _connector.UploadMap(key, pngMapImage);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal System.Threading.Tasks.ValueTask<ZoneDetails> GetZoneDetails()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetZoneDetails>d__65 <GetZoneDetails>d__ = default(<GetZoneDetails>d__65);
		<GetZoneDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<ZoneDetails>.Create();
		<GetZoneDetails>d__.<>4__this = this;
		<GetZoneDetails>d__.<>1__state = -1;
		<GetZoneDetails>d__.<>t__builder.Start<<GetZoneDetails>d__65>(ref <GetZoneDetails>d__);
		return <GetZoneDetails>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal new System.Threading.Tasks.ValueTask<NexusDetails> GetNexusDetails(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexusDetails>d__66 <GetNexusDetails>d__ = default(<GetNexusDetails>d__66);
		<GetNexusDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusDetails>.Create();
		<GetNexusDetails>d__.<>4__this = this;
		<GetNexusDetails>d__.nexusId = nexusId;
		<GetNexusDetails>d__.<>1__state = -1;
		<GetNexusDetails>d__.<>t__builder.Start<<GetNexusDetails>d__66>(ref <GetNexusDetails>d__);
		return <GetNexusDetails>d__.<>t__builder.Task;
	}

	private void AssertInitialized()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (Zone == null)
		{
			throw new InvalidOperationException("Zone is not initialized");
		}
	}
}


using System;
using System.Collections.Generic;

internal static class Util : Object
{
	public static T Update<T>(in T currentValue, in T newValue, ref bool changed) where T : IEquatable<T>
	{
		if (EqualityComparer<T>.Default.Equals(currentValue, newValue))
		{
			return currentValue;
		}
		changed = true;
		return newValue;
	}

	public static bool Resize<T>(this List<T> list, int newCount)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (list == null)
		{
			throw new ArgumentNullException("list");
		}
		if (newCount < 0)
		{
			throw new ArgumentOutOfRangeException("newCount");
		}
		if (list.Count == newCount)
		{
			return false;
		}
		if (list.Count > newCount)
		{
			while (list.Count > newCount)
			{
				list.RemoveAt(list.Count - 1);
			}
		}
		else
		{
			while (list.Count < newCount)
			{
				list.Add(default(T));
			}
		}
		return true;
	}
}


using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Facepunch.Nexus;

public struct Uuid : ValueType, IEquatable<Uuid>
{
	public static readonly Uuid Empty;

	private static readonly object _syncRoot;

	private static readonly int _nodeId;

	private static int _sequence;

	private static ulong _previousTimestamp;

	[field: CompilerGenerated]
	public int NodeId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Sequence
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public ulong Timestamp
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public Uuid(int nodeId, int sequence, ulong timestamp)
	{
		NodeId = nodeId;
		Sequence = sequence;
		Timestamp = timestamp;
	}

	public override string ToString()
	{
		return String.Format("{0:X8}{1:X8}{2:X16}", (object)NodeId, (object)Sequence, (object)Timestamp);
	}

	public static implicit operator Uuid(Guid guid)
	{
		return Unsafe.As<Guid, Uuid>(ref guid);
	}

	public static implicit operator Guid(Uuid uuid)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return Unsafe.As<Uuid, Guid>(ref uuid);
	}

	public bool Equals(Uuid other)
	{
		if (NodeId == other.NodeId && Sequence == other.Sequence)
		{
			return Timestamp == other.Timestamp;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is Uuid other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		int num = ((NodeId * 397) ^ Sequence) * 397;
		ulong timestamp = Timestamp;
		return num ^ ((UInt64)(ref timestamp)).GetHashCode();
	}

	public static bool operator ==(Uuid left, Uuid right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(Uuid left, Uuid right)
	{
		return !left.Equals(right);
	}

	static Uuid()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		if (Marshal.SizeOf<Uuid>() != Marshal.SizeOf<Guid>())
		{
			throw new Exception("sizeof(Uuid) != sizeof(Guid)");
		}
		_syncRoot = (object)new Object();
		_nodeId = ((Object)Environment.MachineName).GetHashCode();
		_sequence = Environment.TickCount;
	}

	public static Uuid Generate()
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		lock (_syncRoot)
		{
			DateTime utcNow = DateTime.UtcNow;
			ulong ticks = (ulong)((DateTime)(ref utcNow)).Ticks;
			if (ticks <= _previousTimestamp)
			{
				_sequence++;
			}
			_previousTimestamp = ticks;
			return new Uuid(_nodeId, _sequence, ticks);
		}
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class Variable : Object
{
	private string _rawValue;

	private byte[] _binaryValue;

	[field: CompilerGenerated]
	public VariableType Type
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public long LastUpdated
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	internal bool Set(string value, long lastUpdated = 0L)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		if (lastUpdated <= 0)
		{
			DateTimeOffset utcNow = DateTimeOffset.UtcNow;
			lastUpdated = ((DateTimeOffset)(ref utcNow)).ToUnixTimeSeconds();
		}
		if (value == null)
		{
			value = "";
		}
		int num;
		if (Type == VariableType.String && LastUpdated == lastUpdated)
		{
			num = ((GetAsString() != value) ? 1 : 0);
			if (num == 0)
			{
				goto IL_005e;
			}
		}
		else
		{
			num = 1;
		}
		Type = VariableType.String;
		LastUpdated = lastUpdated;
		_rawValue = value;
		_binaryValue = null;
		goto IL_005e;
		IL_005e:
		return (byte)num != 0;
	}

	internal bool Set(byte[] value, long lastUpdated = 0L)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		if (lastUpdated <= 0)
		{
			DateTimeOffset utcNow = DateTimeOffset.UtcNow;
			lastUpdated = ((DateTimeOffset)(ref utcNow)).ToUnixTimeSeconds();
		}
		int num;
		if (Type == VariableType.Binary && LastUpdated == lastUpdated && (GetAsBinary() == null || GetAsBinary().Length == 0) == (value == null || value.Length == 0))
		{
			if (value != null)
			{
				num = ((!Enumerable.SequenceEqual<byte>((IEnumerable<byte>)(object)GetAsBinary(), (IEnumerable<byte>)(object)value)) ? 1 : 0);
				if (num != 0)
				{
					goto IL_0062;
				}
			}
			else
			{
				num = 0;
			}
			goto IL_0091;
		}
		num = 1;
		goto IL_0062;
		IL_0091:
		return (byte)num != 0;
		IL_0062:
		Type = VariableType.Binary;
		LastUpdated = lastUpdated;
		_rawValue = "*none*";
		_binaryValue = ((value == null) ? Array.Empty<byte>() : Enumerable.ToArray<byte>((IEnumerable<byte>)(object)value));
		goto IL_0091;
	}

	internal bool UpdateFromModel(VariableData data)
	{
		bool result = data.Type != Type || data.LastUpdated != LastUpdated || data.Value != _rawValue;
		Type = data.Type;
		LastUpdated = data.LastUpdated;
		_rawValue = data.Value;
		_binaryValue = null;
		return result;
	}

	public string GetAsString()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		if (Type != VariableType.String)
		{
			throw new InvalidOperationException("Cannot get string value of binary variable");
		}
		if (_rawValue == null)
		{
			throw new InvalidOperationException("Variable has no value to return");
		}
		return _rawValue;
	}

	public byte[] GetAsBinary()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (Type != 0)
		{
			throw new InvalidOperationException("Cannot get binary value of string variable");
		}
		if (_rawValue == null)
		{
			throw new InvalidOperationException("Variable has no value to return");
		}
		if (_binaryValue == null)
		{
			_binaryValue = Convert.FromBase64String(_rawValue);
		}
		return _binaryValue;
	}

	public static bool operator ==(Variable variable, string value)
	{
		if (variable.Type == VariableType.String)
		{
			return variable.GetAsString() == (value ?? "");
		}
		return false;
	}

	public static bool operator !=(Variable variable, string value)
	{
		return !(variable == value);
	}

	public static bool operator ==(Variable variable, byte[] value)
	{
		if (variable.Type == VariableType.Binary)
		{
			return Enumerable.SequenceEqual<byte>((IEnumerable<byte>)(object)variable.GetAsBinary(), (IEnumerable<byte>)(object)(value ?? Array.Empty<byte>()));
		}
		return false;
	}

	public static bool operator !=(Variable variable, byte[] value)
	{
		return !(variable == value);
	}
}


using System;
using System.Collections;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

internal class VariableContainer : Object, IEnumerable<KeyValuePair<string, Variable>>, IEnumerable
{
	private readonly Dictionary<string, Variable> _variables;

	public int Count => _variables.Count;

	public VariableContainer()
	{
		_variables = new Dictionary<string, Variable>((IEqualityComparer<string>)(object)StringComparer.InvariantCultureIgnoreCase);
	}

	public bool UpdateFromModel(Dictionary<string, VariableData> data, HashSet<string> changedKeys = null)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		if (data == null || data.Count == 0)
		{
			return false;
		}
		bool result = false;
		Enumerator<string, VariableData> enumerator = data.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				KeyValuePair<string, VariableData> current = enumerator.Current;
				if (UpdateFromModel(current.Key, current.Value))
				{
					changedKeys?.Add(current.Key);
					result = true;
				}
			}
			return result;
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public bool UpdateFromModel(string key, VariableData data)
	{
		Variable variable = default(Variable);
		if (_variables.TryGetValue(key, ref variable))
		{
			return variable.UpdateFromModel(data);
		}
		variable = new Variable();
		variable.UpdateFromModel(data);
		_variables.Add(key, variable);
		return true;
	}

	public bool TryGet(string key, out Variable variable)
	{
		return _variables.TryGetValue(key, ref variable);
	}

	public bool Set(string key, string value)
	{
		Variable variable = default(Variable);
		if (!_variables.TryGetValue(key, ref variable))
		{
			variable = new Variable();
			_variables.Add(key, variable);
		}
		return variable.Set(value, 0L);
	}

	public bool Set(string key, byte[] value)
	{
		Variable variable = default(Variable);
		if (!_variables.TryGetValue(key, ref variable))
		{
			variable = new Variable();
			_variables.Add(key, variable);
		}
		return variable.Set(value, 0L);
	}

	public void Remove(string key)
	{
		_variables.Remove(key);
	}

	public void Clear()
	{
		_variables.Clear();
	}

	public Enumerator<string, Variable> GetEnumerator()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return _variables.GetEnumerator();
	}

	IEnumerator<KeyValuePair<string, Variable>> IEnumerable<KeyValuePair<string, Variable>>.GetEnumerator()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator<KeyValuePair<string, Variable>>)(object)_variables.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator)(object)GetEnumerator();
	}
}


using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Facepunch.Nexus.Time;

public class DefaultClockProvider : Object, IClockProvider
{
	[field: CompilerGenerated]
	public static DefaultClockProvider Instance
	{
		[CompilerGenerated]
		get;
	} = new DefaultClockProvider();

	public double Timestamp => (double)Stopwatch.GetTimestamp() / (double)Stopwatch.Frequency;

	public Task Delay(double seconds)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return Task.Delay(TimeSpan.FromSeconds(seconds));
	}
}


using System.Threading.Tasks;

public interface IClockProvider
{
	double Timestamp { get; }

	Task Delay(double seconds);
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanCreateParameters : ValueType
{
	[field: CompilerGenerated]
	public string ClanName
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string ClanNameNormalized
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string LeaderPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string LeaderRoleName
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string MemberRoleName
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<VariableUpdate> ClanVariables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<VariableUpdate> LeaderRoleVariables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<VariableUpdate> MemberRoleVariables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanRole : ValueType
{
	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Rank
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanInvite
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanKick
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanPromote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanDemote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessLogs
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessScoreEvents
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanMember : ValueType
{
	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Joined
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastSeen
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanInvite : ValueType
{
	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string RecruiterPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Created
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanDetails : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Created
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Creator
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<ClanRole> Roles
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<ClanMember> Members
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int MaxMemberCount
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<ClanInvite> Invites
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

public struct ClanDisbandedEvent : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<string> Members
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanInvitedEvent : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanJoinedEvent : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanKickedEvent : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanChangedEvent : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanInvitation : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string RecruiterPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Timestamp
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanLeaderboardEntry : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanLogEntry : ValueType
{
	[field: CompilerGenerated]
	public long Timestamp
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string EventKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg3
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg4
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanRoleParameters : ValueType
{
	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanInvite
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanKick
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanPromote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanDemote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessLogs
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessScoreEvents
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<VariableUpdate> Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct ClanScoreEventEntry : ValueType
{
	[field: CompilerGenerated]
	public long Timestamp
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Type
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Multiplier
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string OtherPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<long> OtherClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct NewClanScoreEventEntry : ValueType
{
	[field: CompilerGenerated]
	public int Type
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Multiplier
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string OtherPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<long> OtherClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public struct NewClanScoreEventBatchEntry : ValueType
{
	[field: CompilerGenerated]
	public long ClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Type
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Score
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Multiplier
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string OtherPlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<long> OtherClanId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct ClanVariablesUpdate : ValueType
{
	[field: CompilerGenerated]
	public List<VariableUpdate> Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string EventKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg3
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg4
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

internal struct CompleteTransfersRequest : ValueType
{
	[field: CompilerGenerated]
	public IEnumerable<string> PlayerIds
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.InteropServices;

[StructLayout(0, Size = 1)]
internal struct CompleteTransfersResponse : ValueType
{
}


using System;
using System.Runtime.CompilerServices;
using Newtonsoft.Json;

internal struct IncomingMessage : ValueType
{
	[JsonProperty("i")]
	[field: CompilerGenerated]
	public string MessageId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[JsonIgnore]
	public Guid Id => Guid.Parse(MessageId);

	[JsonProperty("t")]
	[field: CompilerGenerated]
	public string ContentType
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[JsonProperty("p")]
	[field: CompilerGenerated]
	public byte[] Data
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public class NexusDetails : Object
{
	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastReset
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int MaxPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int OnlinePlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int QueuedPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Build
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Protocol
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public List<NexusZoneDetails> Zones
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public class NexusZoneDetails : Object
{
	[field: CompilerGenerated]
	public int Id
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Key
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public double PositionX
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public double PositionY
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string IpAddress
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int GamePort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int QueryPort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int MaxPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int OnlinePlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int QueuedPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Build
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Protocol
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct NexusListing : ValueType
{
	[field: CompilerGenerated]
	public List<Nexus> Nexuses
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public class Nexus : Object
{
	[field: CompilerGenerated]
	public int NexusId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastReset
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int ZoneCount
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int MaxPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int OnlinePlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int QueuedPlayers
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Build
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Protocol
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Tags
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;

public enum NexusRealm : Enum
{
	Development,
	Staging,
	Production,
	Count
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public class PlayerDetails : Object
{
	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastSeen
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string AssignedZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string ConnectZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string ConnectIpAddress
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<int> ConnectGamePort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<int> ConnectQueryPort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

internal struct RegisterTransfersRequest : ValueType
{
	[field: CompilerGenerated]
	public IEnumerable<string> PlayerIds
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string ToZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.InteropServices;

[StructLayout(0, Size = 1)]
internal struct RegisterTransfersResponse : ValueType
{
}


using System;

public enum VariableType : Enum
{
	Binary,
	String
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public struct VariableData : ValueType
{
	[field: CompilerGenerated]
	public string Value
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableType Type
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastUpdated
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using Facepunch.Nexus.Models;

public class VariableDictionary : Dictionary<string, VariableData>
{
	public VariableDictionary()
		: base((IEqualityComparer<string>)(object)StringComparer.InvariantCultureIgnoreCase)
	{
	}
}


using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public readonly struct VariableUpdate : ValueType
{
	private readonly System.Memory<byte> _binaryValue;

	private readonly string _stringValue;

	[field: CompilerGenerated]
	public string Key
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public VariableType Type
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public Nullable<bool> Transient
	{
		[CompilerGenerated]
		get;
	}

	[field: CompilerGenerated]
	public Nullable<bool> Secret
	{
		[CompilerGenerated]
		get;
	}

	public string Value
	{
		get
		{
			if (Type == VariableType.String)
			{
				return _stringValue;
			}
			byte[] array = ArrayPool<byte>.Shared.Rent(_binaryValue.Length);
			try
			{
				_binaryValue.CopyTo(System.Memory<byte>.op_Implicit(array));
				return Convert.ToBase64String(array, 0, _binaryValue.Length);
			}
			finally
			{
				ArrayPool<byte>.Shared.Return(array, false);
			}
		}
	}

	public VariableUpdate(string key, System.Memory<byte> value, Nullable<bool> transient = default(Nullable<bool>), Nullable<bool> secret = default(Nullable<bool>))
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Key = key ?? throw new ArgumentNullException("key");
		Type = VariableType.Binary;
		_binaryValue = value;
		_stringValue = null;
		Transient = transient;
		Secret = secret;
	}

	public VariableUpdate(string key, string value, Nullable<bool> transient = default(Nullable<bool>), Nullable<bool> secret = default(Nullable<bool>))
	{
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Key = key ?? throw new ArgumentNullException("key");
		Type = VariableType.String;
		_binaryValue = default(System.Memory<byte>);
		_stringValue = value;
		Transient = transient;
		Secret = secret;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public class ZoneDetails : Object
{
	[field: CompilerGenerated]
	public int NexusId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int ZoneId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Key
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public double PositionX
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public double PositionY
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string NexusName
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public VariableDictionary NexusVariables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

public class ZoneMapCheckResult : Object
{
	[field: CompilerGenerated]
	public string Key
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public DateTimeOffset LastUpdated
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

public class ZonePlayerDetails : Object
{
	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastSeen
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Dictionary<string, VariableData> Variables
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string AssignedZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Models;

internal class ZonePlayerLogin : ZonePlayerDetails
{
	[field: CompilerGenerated]
	public string RedirectIpAddress
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<int> RedirectGamePort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public Nullable<int> RedirectQueryPort
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Logging;

public sealed class ConsoleLogger : Object, INexusLogger
{
	[field: CompilerGenerated]
	public static ConsoleLogger Instance
	{
		[CompilerGenerated]
		get;
	} = new ConsoleLogger();

	private ConsoleLogger()
	{
	}

	public void Log(NexusLogLevel level, string message, Exception exception = null)
	{
		Console.WriteLine(String.Format("[{0}] {1}", (object)level, (object)message));
		if (exception != null)
		{
			Console.WriteLine((object)exception);
		}
	}
}


using System;
using Facepunch.Nexus.Logging;

public interface INexusLogger
{
	void Log(NexusLogLevel level, string message, Exception exception = null);
}


using System;
using Facepunch.Nexus.Logging;

public static class NexusLoggerExtensions : Object
{
	public static void LogInfo(this INexusLogger logger, string message)
	{
		logger?.Log(NexusLogLevel.Info, message);
	}

	public static void LogWarn(this INexusLogger logger, string message, Exception exception = null)
	{
		logger?.Log(NexusLogLevel.Warn, message, exception);
	}

	public static void LogError(this INexusLogger logger, string message, Exception exception = null)
	{
		logger?.Log(NexusLogLevel.Error, message, exception);
	}
}


using System;

public enum NexusLogLevel : Enum
{
	Info,
	Warn,
	Error
}


using System;
using System.Runtime.CompilerServices;
using Facepunch.Nexus.Logging;

public sealed class NullLogger : Object, INexusLogger
{
	[field: CompilerGenerated]
	public static NullLogger Instance
	{
		[CompilerGenerated]
		get;
	} = new NullLogger();

	private NullLogger()
	{
	}

	public void Log(NexusLogLevel level, string message, Exception exception = null)
	{
	}
}


using System.Threading.Tasks;
using Facepunch.Nexus.Models;

public interface INexusConnector
{
	Task<NexusListing> ListNexuses(string publicKey, NexusRealm realm);

	Task<NexusDetails> GetNexus(int nexusId);
}


using System;
using System.Diagnostics;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Newtonsoft.Json;

internal class NexusConnector : Object, INexusConnector
{
	private struct Request : ValueType
	{
		[field: CompilerGenerated]
		public HttpMethod Method
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Url
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public HttpContent Content
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexus>d__7 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusDetails> <>t__builder;

		public NexusConnector <>4__this;

		public int nexusId;

		private TaskAwaiter<ApiResult<NexusDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0095: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			NexusDetails response;
			try
			{
				TaskAwaiter<ApiResult<NexusDetails>> val;
				if (num != 0)
				{
					val = nexusConnector.GetRequest<NexusDetails>(String.Format("{0}/{1}", (object)nexusConnector.BaseUrl, (object)nexusId)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<NexusDetails>>, <GetNexus>d__7>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<NexusDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ListNexuses>d__6 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusListing> <>t__builder;

		public string publicKey;

		public NexusConnector <>4__this;

		public NexusRealm realm;

		private TaskAwaiter<ApiResult<NexusListing>> <>u__1;

		private void MoveNext()
		{
			//IL_00b8: Expected O, but got Unknown
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0095: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			NexusListing response;
			try
			{
				TaskAwaiter<ApiResult<NexusListing>> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(publicKey))
					{
						throw new ArgumentNullException("publicKey");
					}
					val = nexusConnector.GetRequest<NexusListing>(String.Format("{0}?publicKey={1}&realm={2}", (object)nexusConnector.BaseUrl, (object)WebUtility.UrlEncode(publicKey), (object)(Int32)realm)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<NexusListing>>, <ListNexuses>d__6>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<NexusListing>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendRequestImpl>d__20<TResponse> : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ApiResult<TResponse>> <>t__builder;

		public string authToken;

		public Request request;

		public NexusConnector <>4__this;

		public Func<HttpResponseMessage, Task<TResponse>> responseReader;

		private AuthenticationHeaderValue <auth>5__2;

		private int <retryCount>5__3;

		private HttpResponseMessage <response>5__4;

		private ConfiguredTaskAwaiter<HttpResponseMessage> <>u__1;

		private ConfiguredTaskAwaiter <>u__2;

		private ConfiguredTaskAwaiter<TResponse> <>u__3;

		private void MoveNext()
		{
			//IL_010d: Expected O, but got Unknown
			//IL_030b: Expected O, but got Unknown
			//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
			//IL_012e: Unknown result type (might be due to invalid IL or missing references)
			//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Expected O, but got Unknown
			//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0176: Unknown result type (might be due to invalid IL or missing references)
			//IL_0181: Unknown result type (might be due to invalid IL or missing references)
			//IL_0186: Unknown result type (might be due to invalid IL or missing references)
			//IL_018a: Unknown result type (might be due to invalid IL or missing references)
			//IL_018f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0228: Unknown result type (might be due to invalid IL or missing references)
			//IL_0232: Invalid comparison between Unknown and I4
			//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_025d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0267: Invalid comparison between Unknown and I4
			//IL_0251: Unknown result type (might be due to invalid IL or missing references)
			//IL_021c: Unknown result type (might be due to invalid IL or missing references)
			//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_027e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0283: Unknown result type (might be due to invalid IL or missing references)
			//IL_0287: Unknown result type (might be due to invalid IL or missing references)
			//IL_028c: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			ApiResult<TResponse> result2;
			try
			{
				HttpRequestMessage val3 = default(HttpRequestMessage);
				ConfiguredTaskAwaiter val2;
				ConfiguredTaskAwaiter<TResponse> val;
				TResponse result;
				HttpRequestMessage val7;
				switch (num)
				{
				default:
					<auth>5__2 = ((authToken == null) ? ((AuthenticationHeaderValue)null) : new AuthenticationHeaderValue("Bearer", authToken));
					<retryCount>5__3 = 0;
					goto IL_0048;
				case 0:
				{
					try
					{
						ConfiguredTaskAwaiter<HttpResponseMessage> val4;
						if (num != 0)
						{
							val4 = nexusConnector.HttpClient.SendAsync(val3).ConfigureAwait(false).GetAwaiter();
							if (!val4.IsCompleted)
							{
								num = (<>1__state = 0);
								<>u__1 = val4;
								System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<HttpResponseMessage>, <SendRequestImpl>d__20<TResponse>>(ref val4, ref this);
								return;
							}
						}
						else
						{
							val4 = <>u__1;
							<>u__1 = default(ConfiguredTaskAwaiter<HttpResponseMessage>);
							num = (<>1__state = -1);
						}
						HttpResponseMessage result3 = val4.GetResult();
						<response>5__4 = result3;
					}
					catch (HttpRequestException val5)
					{
						HttpRequestException exception = val5;
						nexusConnector.Logger.LogWarn("Failed to send HTTP request to Nexus", (Exception)(object)exception);
					}
					HttpResponseMessage obj = <response>5__4;
					int num2 = ((obj != null) ? ((int)obj.StatusCode) : 0);
					if (<response>5__4 == null || (num2 >= 500 && num2 <= 599))
					{
						if (<retryCount>5__3 <= 5)
						{
							ConfiguredTaskAwaitable val6 = Task.Delay(TimeSpan.FromSeconds(Math.Pow(3.0, (double)<retryCount>5__3))).ConfigureAwait(false);
							val2 = ((ConfiguredTaskAwaitable)(ref val6)).GetAwaiter();
							if (!((ConfiguredTaskAwaiter)(ref val2)).IsCompleted)
							{
								num = (<>1__state = 1);
								<>u__2 = val2;
								System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SendRequestImpl>d__20<TResponse>>(ref val2, ref this);
								return;
							}
							goto IL_01db;
						}
						HttpResponseMessage obj2 = <response>5__4;
						if (obj2 != null)
						{
							obj2.EnsureSuccessStatusCode();
						}
						throw new Exception(String.Format("Expected EnsureSuccessStatusCode to throw for status {0}", (object)num2));
					}
					if ((int)<response>5__4.StatusCode == 401)
					{
						<response>5__4.EnsureSuccessStatusCode();
						throw new Exception(String.Format("Expected EnsureSuccessStatusCode to throw for status {0}", (object)num2));
					}
					if ((int)<response>5__4.StatusCode == 200)
					{
						val = ((Func<HttpResponseMessage, Task<HttpResponseMessage>>)(object)responseReader).Invoke(<response>5__4).ConfigureAwait(false).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 2);
							<>u__3 = val;
							System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<TResponse>, <SendRequestImpl>d__20<TResponse>>(ref val, ref this);
							return;
						}
						goto IL_02d8;
					}
					result2 = new ApiResult<TResponse>(<response>5__4.StatusCode);
					break;
				}
				case 1:
					val2 = <>u__2;
					<>u__2 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_01db;
				case 2:
					{
						val = <>u__3;
						<>u__3 = default(ConfiguredTaskAwaiter<TResponse>);
						num = (<>1__state = -1);
						goto IL_02d8;
					}
					IL_02d8:
					result = val.GetResult();
					result2 = new ApiResult<TResponse>(<response>5__4.StatusCode, result);
					break;
					IL_01db:
					((ConfiguredTaskAwaiter)(ref val2)).GetResult();
					<retryCount>5__3++;
					goto IL_0048;
					IL_0048:
					val7 = new HttpRequestMessage(request.Method, request.Url);
					val7.Headers.Authorization = <auth>5__2;
					val7.Content = request.Content;
					val3 = val7;
					<response>5__4 = null;
					goto case 0;
				}
			}
			catch (Exception val8)
			{
				Exception exception2 = val8;
				<>1__state = -2;
				<auth>5__2 = null;
				System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetException(exception2);
				return;
			}
			<>1__state = -2;
			<auth>5__2 = null;
			System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetResult((ApiResult<ApiResult<TResponse>>)result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendRequestWithoutResponse>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ApiResult> <>t__builder;

		public NexusConnector <>4__this;

		public Request request;

		public string authToken;

		private TaskAwaiter<ApiResult<int>> <>u__1;

		private void MoveNext()
		{
			//IL_00a9: Expected O, but got Unknown
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			ApiResult result;
			try
			{
				TaskAwaiter<ApiResult<int>> val;
				if (num != 0)
				{
					val = nexusConnector.SendRequestImpl<int>(request, authToken, (HttpResponseMessage _) => CompletedDummyTask).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<int>>, <SendRequestWithoutResponse>d__19>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<int>>);
					num = (<>1__state = -1);
				}
				result = new ApiResult(val.GetResult().StatusCode);
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private const int MaxRetryCount = 5;

	private const double BaseRetryDelay = 3.0;

	protected readonly INexusLogger Logger;

	protected readonly string BaseUrl;

	protected readonly HttpClient HttpClient;

	private static readonly Task<int> CompletedDummyTask = Task.FromResult<int>(0);

	public NexusConnector(INexusLogger logger, string baseUrl)
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Expected O, but got Unknown
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		Logger = logger ?? NullLogger.Instance;
		BaseUrl = ((baseUrl != null) ? baseUrl.TrimEnd((char[])(object)new Char[1] { (Char)47 }) : null) ?? throw new ArgumentNullException("baseUrl");
		HttpClient = new HttpClient();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusListing> ListNexuses(string publicKey, NexusRealm realm)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<ListNexuses>d__6 <ListNexuses>d__ = default(<ListNexuses>d__6);
		<ListNexuses>d__.<>t__builder = AsyncTaskMethodBuilder<NexusListing>.Create();
		<ListNexuses>d__.<>4__this = this;
		<ListNexuses>d__.publicKey = publicKey;
		<ListNexuses>d__.realm = realm;
		<ListNexuses>d__.<>1__state = -1;
		<ListNexuses>d__.<>t__builder.Start<<ListNexuses>d__6>(ref <ListNexuses>d__);
		return <ListNexuses>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusDetails> GetNexus(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexus>d__7 <GetNexus>d__ = default(<GetNexus>d__7);
		<GetNexus>d__.<>t__builder = AsyncTaskMethodBuilder<NexusDetails>.Create();
		<GetNexus>d__.<>4__this = this;
		<GetNexus>d__.nexusId = nexusId;
		<GetNexus>d__.<>1__state = -1;
		<GetNexus>d__.<>t__builder.Start<<GetNexus>d__7>(ref <GetNexus>d__);
		return <GetNexus>d__.<>t__builder.Task;
	}

	protected Task<ApiResult<TResponse>> GetRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Get,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> PostRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Post,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> PostRequest<TRequest, TResponse>(string url, TRequest requestBody, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		StringContent content = new StringContent(JsonConvert.SerializeObject((object)requestBody), Encoding.UTF8, "application/json");
		Request request = new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)content
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> DeleteRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Delete,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult> PostRequestWithoutResponse<TRequest>(string url, TRequest requestBody, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		StringContent content = new StringContent(JsonConvert.SerializeObject((object)requestBody), Encoding.UTF8, "application/json");
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)content
		}, authToken);
	}

	protected Task<ApiResult> PostRequestWithoutResponse(string url, string authToken = null)
	{
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url
		}, authToken);
	}

	protected Task<ApiResult> PostRequestRawWithoutResponse(string url, string payload, string payloadMimeType, string authToken = null)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Expected O, but got Unknown
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)new StringContent(payload, Encoding.UTF8, payloadMimeType)
		}, authToken);
	}

	protected Task<ApiResult> PostRequestRawWithoutResponse(string url, ArraySegment<byte> payload, string payloadMimeType, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		ByteArrayContent val = new ByteArrayContent(payload.Array, payload.Offset, payload.Count);
		((HttpContent)val).Headers.ContentType = MediaTypeHeaderValue.Parse(payloadMimeType);
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)val
		}, authToken);
	}

	protected Task<ApiResult> DeleteRequestWithoutResponse(string url, string authToken = null)
	{
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Delete,
			Url = url
		}, authToken);
	}

	private unsafe Task<ApiResult<TResponse>> SendRequest<TResponse>(in Request request, string authToken = null)
	{
		return SendRequestImpl<TResponse>(request, authToken, [AsyncStateMachine(/*Could not decode attribute arguments.*/)] (HttpResponseMessage response) =>
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			<>c__17<TResponse>.<<SendRequest>b__17_0>d <<SendRequest>b__17_0>d = default(<>c__17<TResponse>.<<SendRequest>b__17_0>d);
			<<SendRequest>b__17_0>d.<>t__builder = AsyncTaskMethodBuilder<TResponse>.Create();
			<<SendRequest>b__17_0>d.response = response;
			<<SendRequest>b__17_0>d.<>1__state = -1;
			((AsyncTaskMethodBuilder<<>c__17<TResponse>.<<SendRequest>b__17_0>d>*)(&<<SendRequest>b__17_0>d.<>t__builder))->Start<<>c__17<TResponse>.<<SendRequest>b__17_0>d>(ref <<SendRequest>b__17_0>d);
			return <<SendRequest>b__17_0>d.<>t__builder.Task;
		});
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task<ApiResult> SendRequestWithoutResponse(Request request, string authToken = null)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SendRequestWithoutResponse>d__19 <SendRequestWithoutResponse>d__ = default(<SendRequestWithoutResponse>d__19);
		<SendRequestWithoutResponse>d__.<>t__builder = AsyncTaskMethodBuilder<ApiResult>.Create();
		<SendRequestWithoutResponse>d__.<>4__this = this;
		<SendRequestWithoutResponse>d__.request = request;
		<SendRequestWithoutResponse>d__.authToken = authToken;
		<SendRequestWithoutResponse>d__.<>1__state = -1;
		<SendRequestWithoutResponse>d__.<>t__builder.Start<<SendRequestWithoutResponse>d__19>(ref <SendRequestWithoutResponse>d__);
		return <SendRequestWithoutResponse>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private unsafe Task<ApiResult<TResponse>> SendRequestImpl<TResponse>(Request request, string authToken, Func<HttpResponseMessage, Task<TResponse>> responseReader)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SendRequestImpl>d__20<TResponse> <SendRequestImpl>d__ = default(<SendRequestImpl>d__20<TResponse>);
		<SendRequestImpl>d__.<>t__builder = AsyncTaskMethodBuilder<ApiResult<TResponse>>.Create();
		<SendRequestImpl>d__.<>4__this = this;
		<SendRequestImpl>d__.request = request;
		<SendRequestImpl>d__.authToken = authToken;
		<SendRequestImpl>d__.responseReader = responseReader;
		<SendRequestImpl>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder<ApiResult<<SendRequestImpl>d__20<TResponse>>>*)(&<SendRequestImpl>d__.<>t__builder))->Start<<SendRequestImpl>d__20<TResponse>>(ref <SendRequestImpl>d__);
		return <SendRequestImpl>d__.<>t__builder.Task;
	}
}


using System.Threading.Tasks;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;

internal interface INexusPlayerConnector : INexusConnector
{
	Task<PlayerDetails> GetPlayerDetails(int nexusId, string playerAuthToken);
}


using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;

internal class NexusPlayerConnector : NexusConnector, INexusPlayerConnector, INexusConnector
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayerDetails>d__2 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<PlayerDetails> <>t__builder;

		public NexusPlayerConnector <>4__this;

		public int nexusId;

		public string playerAuthToken;

		private TaskAwaiter<ApiResult<PlayerDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0095: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayerConnector nexusPlayerConnector = <>4__this;
			PlayerDetails response;
			try
			{
				TaskAwaiter<ApiResult<PlayerDetails>> val;
				if (num != 0)
				{
					val = nexusPlayerConnector.GetRequest<PlayerDetails>(String.Concat(nexusPlayerConnector._playerInfoEndpoint, ((Int32)(ref nexusId)).ToString()), playerAuthToken).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<PlayerDetails>>, <GetPlayerDetails>d__2>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<PlayerDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private readonly string _playerInfoEndpoint;

	public NexusPlayerConnector(INexusLogger logger, string baseUrl)
		: base(logger, baseUrl)
	{
		_playerInfoEndpoint = String.Concat(BaseUrl, "/player/info?nexusId=");
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<PlayerDetails> GetPlayerDetails(int nexusId, string playerAuthToken)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayerDetails>d__2 <GetPlayerDetails>d__ = default(<GetPlayerDetails>d__2);
		<GetPlayerDetails>d__.<>t__builder = AsyncTaskMethodBuilder<PlayerDetails>.Create();
		<GetPlayerDetails>d__.<>4__this = this;
		<GetPlayerDetails>d__.nexusId = nexusId;
		<GetPlayerDetails>d__.playerAuthToken = playerAuthToken;
		<GetPlayerDetails>d__.<>1__state = -1;
		<GetPlayerDetails>d__.<>t__builder.Start<<GetPlayerDetails>d__2>(ref <GetPlayerDetails>d__);
		return <GetPlayerDetails>d__.<>t__builder.Task;
	}
}


using System;
using Facepunch.Nexus;

internal interface INexusSocketConnector : IDisposable
{
	bool IsStarted { get; }

	bool IsConnected { get; }

	void Start();

	bool TryReceive(out NexusMessage message);

	void Acknowledge(string messageId);
}


using System;
using System.Buffers;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.WebSockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Channels;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Newtonsoft.Json;

internal class NexusSocketConnector : Object, INexusSocketConnector, IDisposable
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Connect>d__21 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ClientWebSocket> <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private ClientWebSocket <socket>5__2;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00d6: Expected O, but got Unknown
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_007e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			ClientWebSocket result;
			try
			{
				TaskAwaiter val;
				if (num != 0)
				{
					<socket>5__2 = new ClientWebSocket();
					<socket>5__2.Options.KeepAliveInterval = TimeSpan.FromSeconds(30.0);
					<socket>5__2.Options.SetRequestHeader("Authorization", String.Concat("Bearer ", nexusSocketConnector._secretKey));
					val = <socket>5__2.ConnectAsync(nexusSocketConnector._socketEndpoint, ct).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter, <Connect>d__21>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				result = <socket>5__2;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<socket>5__2 = null;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<socket>5__2 = null;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <HandleIncoming>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private byte[] <buffer>5__2;

		private int <offset>5__3;

		private TaskAwaiter<WebSocketReceiveResult> <>u__1;

		private TaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_02de: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Invalid comparison between Unknown and I4
			//IL_0126: Unknown result type (might be due to invalid IL or missing references)
			//IL_012b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0133: Unknown result type (might be due to invalid IL or missing references)
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_015e: Unknown result type (might be due to invalid IL or missing references)
			//IL_016d: Unknown result type (might be due to invalid IL or missing references)
			//IL_010b: Unknown result type (might be due to invalid IL or missing references)
			//IL_010d: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0181: Unknown result type (might be due to invalid IL or missing references)
			//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				if ((uint)num <= 1u)
				{
					goto IL_002d;
				}
				goto IL_02b2;
				IL_02b2:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested && nexusSocketConnector.IsConnected)
				{
					<buffer>5__2 = ArrayPool<byte>.Shared.Rent(1048576);
					goto IL_002d;
				}
				nexusSocketConnector._logger.LogInfo("Nexus socket incoming handler terminating");
				goto end_IL_000e;
				IL_002d:
				Exception exception = default(Exception);
				try
				{
					TaskAwaiter val;
					if (num != 0)
					{
						if (num != 1)
						{
							<offset>5__3 = 0;
							goto IL_003e;
						}
						val = <>u__2;
						<>u__2 = default(TaskAwaiter);
						num = (<>1__state = -1);
						goto IL_0142;
					}
					TaskAwaiter<WebSocketReceiveResult> val2 = <>u__1;
					<>u__1 = default(TaskAwaiter<WebSocketReceiveResult>);
					num = (<>1__state = -1);
					goto IL_00c3;
					IL_003e:
					ArraySegment<byte> val3 = default(ArraySegment<byte>);
					val3..ctor(<buffer>5__2, <offset>5__3, <buffer>5__2.Length - <offset>5__3);
					val2 = ((WebSocket)nexusSocketConnector._socket).ReceiveAsync(val3, ct).GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<WebSocketReceiveResult>, <HandleIncoming>d__19>(ref val2, ref this);
						return;
					}
					goto IL_00c3;
					IL_00c3:
					WebSocketReceiveResult result = val2.GetResult();
					if ((int)result.MessageType == 2)
					{
						val = ((WebSocket)nexusSocketConnector._socket).CloseAsync((WebSocketCloseStatus)1000, "Closing", ct).GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 1);
							<>u__2 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <HandleIncoming>d__19>(ref val, ref this);
							return;
						}
						goto IL_0142;
					}
					if ((int)result.MessageType != 0)
					{
						throw new InvalidOperationException(String.Format("Unexpected message type {0}", (object)result.MessageType));
					}
					if (result.Count == 0)
					{
						throw new InvalidOperationException("Received no data");
					}
					<offset>5__3 += result.Count;
					if (<offset>5__3 >= <buffer>5__2.Length)
					{
						if (<buffer>5__2.Length >= 67108864)
						{
							throw new InvalidOperationException("Message too large");
						}
						byte[] array = ArrayPool<byte>.Shared.Rent(<buffer>5__2.Length * 2);
						Buffer.BlockCopy((Array)(object)<buffer>5__2, 0, (Array)(object)array, 0, <buffer>5__2.Length);
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
						<buffer>5__2 = array;
					}
					if (!result.EndOfMessage)
					{
						goto IL_003e;
					}
					NexusMessage nexusMessage = <HandleIncoming>g__ReadMessage|19_0(<buffer>5__2, <offset>5__3);
					Queue<NexusMessage> incoming = nexusSocketConnector._incoming;
					bool flag = false;
					try
					{
						Monitor.Enter((object)incoming, ref flag);
						nexusSocketConnector._incoming.Enqueue(nexusMessage);
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)incoming);
						}
					}
					goto end_IL_002d;
					IL_0142:
					((TaskAwaiter)(ref val)).GetResult();
					goto end_IL_000e;
					end_IL_002d:;
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
					if (obj2 == null)
					{
						result2 = 0;
					}
					else
					{
						exception = (Exception)obj2;
						result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
					}
					return (byte)result2 != 0;
				}).Invoke())
				{
					nexusSocketConnector._logger.LogError("Error handling incoming message", exception);
					throw;
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
					}
				}
				<buffer>5__2 = null;
				goto IL_02b2;
				end_IL_000e:;
			}
			catch (Exception val4)
			{
				Exception exception2 = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <HandleOutgoing>d__20 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private byte[] <buffer>5__2;

		private ValueTaskAwaiter<string> <>u__1;

		private TaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_01c0: Expected O, but got Unknown
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00db: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
			//IL_011a: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0127: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
			//IL_0101: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				if ((uint)num <= 1u)
				{
					goto IL_002a;
				}
				goto IL_0194;
				IL_0194:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested && nexusSocketConnector.IsConnected)
				{
					<buffer>5__2 = ArrayPool<byte>.Shared.Rent(64);
					goto IL_002a;
				}
				nexusSocketConnector._logger.LogInfo("Nexus socket incoming handler terminating");
				goto end_IL_000e;
				IL_002a:
				Exception exception = default(Exception);
				try
				{
					TaskAwaiter val;
					ValueTaskAwaiter<string> val2;
					if (num != 0)
					{
						if (num == 1)
						{
							val = <>u__2;
							<>u__2 = default(TaskAwaiter);
							num = (<>1__state = -1);
							goto IL_0136;
						}
						val2 = nexusSocketConnector._outgoing.Reader.ReadAsync(ct).GetAwaiter();
						if (!val2.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val2;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<string>, <HandleOutgoing>d__20>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__1;
						<>u__1 = default(ValueTaskAwaiter<string>);
						num = (<>1__state = -1);
					}
					string result = val2.GetResult();
					int bytes = Encoding.UTF8.GetBytes(result, 0, result.Length, <buffer>5__2, 0);
					ArraySegment<byte> val3 = default(ArraySegment<byte>);
					val3..ctor(<buffer>5__2, 0, bytes);
					val = ((WebSocket)nexusSocketConnector._socket).SendAsync(val3, (WebSocketMessageType)0, true, ct).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 1);
						<>u__2 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <HandleOutgoing>d__20>(ref val, ref this);
						return;
					}
					goto IL_0136;
					IL_0136:
					((TaskAwaiter)(ref val)).GetResult();
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
					if (obj2 == null)
					{
						result2 = 0;
					}
					else
					{
						exception = (Exception)obj2;
						result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
					}
					return (byte)result2 != 0;
				}).Invoke())
				{
					nexusSocketConnector._logger.LogError("Error handling outgoing message", exception);
					throw;
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
					}
				}
				<buffer>5__2 = null;
				goto IL_0194;
				end_IL_000e:;
			}
			catch (Exception val4)
			{
				Exception exception2 = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ReconnectLoop>d__18 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private int <>7__wrap1;

		private Exception <e>5__3;

		private TaskAwaiter<ClientWebSocket> <>u__1;

		private CancellationTokenSource <connCts>5__4;

		private TaskAwaiter<Task> <>u__2;

		private TaskAwaiter <>u__3;

		private void MoveNext()
		{
			//IL_02c5: Expected O, but got Unknown
			//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cb: Expected O, but got Unknown
			//IL_026b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0270: Unknown result type (might be due to invalid IL or missing references)
			//IL_0278: Unknown result type (might be due to invalid IL or missing references)
			//IL_022c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0236: Unknown result type (might be due to invalid IL or missing references)
			//IL_023b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0250: Unknown result type (might be due to invalid IL or missing references)
			//IL_0252: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_006b: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_014c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0151: Unknown result type (might be due to invalid IL or missing references)
			//IL_0159: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0107: Unknown result type (might be due to invalid IL or missing references)
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_011c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0131: Unknown result type (might be due to invalid IL or missing references)
			//IL_0133: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				_ = 2;
				try
				{
					if ((uint)num <= 1u)
					{
						goto IL_002b;
					}
					if (num != 2)
					{
						goto IL_0295;
					}
					TaskAwaiter val = <>u__3;
					<>u__3 = default(TaskAwaiter);
					num = (<>1__state = -1);
					goto IL_0287;
					IL_002b:
					try
					{
						TaskAwaiter<ClientWebSocket> val2;
						if (num != 0)
						{
							if (num == 1)
							{
								goto IL_00e0;
							}
							nexusSocketConnector._logger.LogInfo("Connecting to nexus socket...");
							val2 = nexusSocketConnector.Connect(ct).GetAwaiter();
							if (!val2.IsCompleted)
							{
								num = (<>1__state = 0);
								<>u__1 = val2;
								((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ClientWebSocket>, <ReconnectLoop>d__18>(ref val2, ref this);
								return;
							}
						}
						else
						{
							val2 = <>u__1;
							<>u__1 = default(TaskAwaiter<ClientWebSocket>);
							num = (<>1__state = -1);
						}
						ClientWebSocket result = val2.GetResult();
						nexusSocketConnector._socket = result;
						nexusSocketConnector._logger.LogInfo("Connected to nexus socket!");
						<connCts>5__4 = CancellationTokenSource.CreateLinkedTokenSource((CancellationToken[])(object)new CancellationToken[1] { ct });
						goto IL_00e0;
						IL_00e0:
						try
						{
							TaskAwaiter<Task> val3;
							if (num != 1)
							{
								val3 = Task.WhenAny((Task[])(object)new Task[2]
								{
									nexusSocketConnector.HandleIncoming(<connCts>5__4.Token),
									nexusSocketConnector.HandleOutgoing(<connCts>5__4.Token)
								}).GetAwaiter();
								if (!val3.IsCompleted)
								{
									num = (<>1__state = 1);
									<>u__2 = val3;
									((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<Task>, <ReconnectLoop>d__18>(ref val3, ref this);
									return;
								}
							}
							else
							{
								val3 = <>u__2;
								<>u__2 = default(TaskAwaiter<Task>);
								num = (<>1__state = -1);
							}
							val3.GetResult();
							<connCts>5__4.Cancel();
						}
						finally
						{
							if (num < 0 && <connCts>5__4 != null)
							{
								((IDisposable)<connCts>5__4).Dispose();
							}
						}
						<connCts>5__4 = null;
						nexusSocketConnector._logger.LogInfo("Nexus socket handlers terminated");
					}
					catch (object obj) when (((Func<bool>)delegate
					{
						// Could not convert BlockContainer to single expression
						object obj2 = ((obj is Exception) ? obj : null);
						System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
						if (obj2 == null)
						{
							result2 = 0;
						}
						else
						{
							<e>5__3 = (Exception)obj2;
							result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
						}
						return (byte)result2 != 0;
					}).Invoke())
					{
						<>7__wrap1 = 1;
					}
					int num2 = <>7__wrap1;
					if (num2 == 1)
					{
						nexusSocketConnector._logger.LogError("Lost connection to Nexus zone socket", <e>5__3);
						ClientWebSocket socket = nexusSocketConnector._socket;
						if (socket != null)
						{
							((WebSocket)socket).Dispose();
						}
						nexusSocketConnector._socket = null;
						val = Task.Delay(5000, ct).GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 2);
							<>u__3 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <ReconnectLoop>d__18>(ref val, ref this);
							return;
						}
						goto IL_0287;
					}
					goto IL_028e;
					IL_0287:
					((TaskAwaiter)(ref val)).GetResult();
					goto IL_028e;
					IL_0295:
					if (!((CancellationToken)(ref ct)).IsCancellationRequested)
					{
						<>7__wrap1 = 0;
						goto IL_002b;
					}
					goto end_IL_0013;
					IL_028e:
					<e>5__3 = null;
					goto IL_0295;
					end_IL_0013:;
				}
				catch (OperationCanceledException)
				{
				}
				finally
				{
					if (num < 0)
					{
						nexusSocketConnector._logger.LogInfo("Nexus socket reconnect loop is exiting");
					}
				}
			}
			catch (Exception val5)
			{
				Exception exception = val5;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private const int MaxMessageIdLength = 64;

	private readonly INexusLogger _logger;

	private readonly CancellationTokenSource _cts;

	private readonly Uri _socketEndpoint;

	private readonly string _secretKey;

	private readonly Queue<NexusMessage> _incoming;

	private readonly Channel<string> _outgoing;

	private bool _started;

	private ClientWebSocket _socket;

	public bool IsStarted => _started;

	public bool IsConnected
	{
		get
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Invalid comparison between Unknown and I4
			if (_started && _socket != null)
			{
				return (int)((WebSocket)_socket).State == 2;
			}
			return false;
		}
	}

	public NexusSocketConnector(INexusLogger logger, string baseUrl, string secretKey, int lockDuration)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Expected O, but got Unknown
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Expected O, but got Unknown
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		_logger = logger ?? NullLogger.Instance;
		baseUrl = ((baseUrl != null) ? baseUrl.TrimEnd((char[])(object)new Char[1] { (Char)47 }) : null) ?? throw new ArgumentNullException("baseUrl");
		if (baseUrl.StartsWith("http://"))
		{
			baseUrl = baseUrl.Replace("http://", "ws://");
		}
		if (baseUrl.StartsWith("https://"))
		{
			baseUrl = baseUrl.Replace("https://", "wss://");
		}
		_cts = new CancellationTokenSource();
		_socketEndpoint = new Uri(String.Format("{0}/zone/socket?lockDuration={1}", (object)baseUrl, (object)lockDuration));
		_secretKey = secretKey ?? throw new ArgumentNullException("secretKey");
		_incoming = new Queue<NexusMessage>();
		_outgoing = Channel.CreateBounded<string>(new BoundedChannelOptions(10)
		{
			SingleReader = true,
			SingleWriter = false
		});
	}

	public void Dispose()
	{
		_outgoing.Writer.Complete((Exception)null);
		_cts.Cancel();
		_cts.Dispose();
		ClientWebSocket socket = _socket;
		if (socket != null)
		{
			((WebSocket)socket).Dispose();
		}
		_socket = null;
	}

	public void Start()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (_started)
		{
			throw new InvalidOperationException("The socket connector was already started.");
		}
		Task.Run((Func<Task>)([CompilerGenerated] () => ReconnectLoop(_cts.Token)));
		_started = true;
	}

	public bool TryReceive(out NexusMessage message)
	{
		lock (_incoming)
		{
			if (_incoming.Count == 0)
			{
				message = default(NexusMessage);
				return false;
			}
			message = _incoming.Dequeue();
			return true;
		}
	}

	public void Acknowledge(string messageId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(messageId))
		{
			throw new ArgumentNullException("messageId");
		}
		if (Encoding.UTF8.GetByteCount(messageId) >= 64)
		{
			throw new ArgumentException(String.Format("{0} cannot exceed {1} bytes", (object)"messageId", (object)64));
		}
		if (!_outgoing.Writer.TryWrite(messageId))
		{
			throw new InvalidOperationException("Failed to enqueue message acknowledgement");
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task ReconnectLoop(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<ReconnectLoop>d__18 <ReconnectLoop>d__ = default(<ReconnectLoop>d__18);
		<ReconnectLoop>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<ReconnectLoop>d__.<>4__this = this;
		<ReconnectLoop>d__.ct = ct;
		<ReconnectLoop>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <ReconnectLoop>d__.<>t__builder)).Start<<ReconnectLoop>d__18>(ref <ReconnectLoop>d__);
		return ((AsyncTaskMethodBuilder)(ref <ReconnectLoop>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task HandleIncoming(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<HandleIncoming>d__19 <HandleIncoming>d__ = default(<HandleIncoming>d__19);
		<HandleIncoming>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<HandleIncoming>d__.<>4__this = this;
		<HandleIncoming>d__.ct = ct;
		<HandleIncoming>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <HandleIncoming>d__.<>t__builder)).Start<<HandleIncoming>d__19>(ref <HandleIncoming>d__);
		return ((AsyncTaskMethodBuilder)(ref <HandleIncoming>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task HandleOutgoing(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<HandleOutgoing>d__20 <HandleOutgoing>d__ = default(<HandleOutgoing>d__20);
		<HandleOutgoing>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<HandleOutgoing>d__.<>4__this = this;
		<HandleOutgoing>d__.ct = ct;
		<HandleOutgoing>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <HandleOutgoing>d__.<>t__builder)).Start<<HandleOutgoing>d__20>(ref <HandleOutgoing>d__);
		return ((AsyncTaskMethodBuilder)(ref <HandleOutgoing>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task<ClientWebSocket> Connect(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<Connect>d__21 <Connect>d__ = default(<Connect>d__21);
		<Connect>d__.<>t__builder = AsyncTaskMethodBuilder<ClientWebSocket>.Create();
		<Connect>d__.<>4__this = this;
		<Connect>d__.ct = ct;
		<Connect>d__.<>1__state = -1;
		<Connect>d__.<>t__builder.Start<<Connect>d__21>(ref <Connect>d__);
		return <Connect>d__.<>t__builder.Task;
	}

	[CompilerGenerated]
	internal static NexusMessage <HandleIncoming>g__ReadMessage|19_0(byte[] buffer, int length)
	{
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		IncomingMessage incomingMessage = JsonConvert.DeserializeObject<IncomingMessage>(Encoding.UTF8.GetString(buffer, 0, length));
		if (incomingMessage.ContentType.StartsWith("text/") || incomingMessage.ContentType.StartsWith("application/json"))
		{
			string @string = Encoding.UTF8.GetString(incomingMessage.Data);
			return new NexusMessage(incomingMessage.MessageId, incomingMessage.Id, incomingMessage.ContentType, @string);
		}
		return new NexusMessage(incomingMessage.MessageId, incomingMessage.Id, incomingMessage.ContentType, incomingMessage.Data);
	}
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;

internal interface INexusZoneConnector : INexusConnector
{
	Task<ZoneDetails> GetZoneDetails();

	Task<ZonePlayerDetails> GetPlayerDetails(string playerId);

	Task<ZonePlayerLogin> PlayerLogin(string playerId);

	Task Assign(string playerId, string toZone);

	Task RegisterTransfers(string toZone, IEnumerable<string> playerIds);

	Task CompleteTransfers(IEnumerable<string> playerIds);

	Task SendMessage(string toZone, Guid id, string message, Nullable<int> ttl, string contentType = "text/plain");

	Task SendMessage(string toZone, Guid id, System.Memory<byte> message, Nullable<int> ttl, string contentType = "application/octet-stream");

	Task SetNexusVariable(string key, string value, bool transient, bool secret);

	Task SetNexusVariable(string key, System.Memory<byte> value, bool transient, bool secret);

	Task SetZoneVariable(string key, string value, bool transient, bool secret);

	Task SetZoneVariable(string key, System.Memory<byte> value, bool transient, bool secret);

	Task SetPlayerVariable(string playerId, string key, string value, bool transient, bool secret);

	Task SetPlayerVariable(string playerId, string key, System.Memory<byte> value, bool transient, bool secret);

	Task<List<string>> FindPlayersWithVariable(string key, string value);

	Task<ZoneMapCheckResult> CheckUploadedMap();

	Task UploadMap(string key, byte[] pngMapImage);

	Task<ApiResult<ClanDetails>> CreateClan(ClanCreateParameters parameters);

	Task<ApiResult<ClanDetails>> GetClan(long clanId);

	Task<ApiResult<ClanDetails>> GetClanByMember(string playerId);

	Task<ApiResult> DisbandClan(long clanId, string byPlayerId);

	Task<ApiResult<ClanDetails>> UpdateClanVariables(long clanId, ClanVariablesUpdate update);

	Task<ApiResult<List<ClanLeaderboardEntry>>> GetClanLeaderboard(int limit = 100);

	Task<ApiResult<ClanDetails>> CreateRole(long clanId, ClanRoleParameters parameters, string byPlayerId);

	Task<ApiResult<ClanDetails>> UpdateRole(long clanId, int roleId, ClanRoleParameters parameters, string byPlayerId);

	Task<ApiResult<ClanDetails>> DeleteRole(long clanId, int roleId, string byPlayerId);

	Task<ApiResult<ClanDetails>> SwapRoleRanks(long clanId, int roleIdA, int roleIdB, string byPlayerId);

	Task<ApiResult<ClanDetails>> CreateInvite(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<ClanDetails>> AcceptInvite(long clanId, string playerId);

	Task<ApiResult<ClanDetails>> CancelInvite(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<ClanDetails>> Kick(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<List<ClanInvitation>>> ListInvitations(string playerId);

	Task<ApiResult> UpdateLastSeen(long clanId, string playerId);

	Task<ApiResult<ClanDetails>> UpdatePlayerClanVariables(long clanId, string playerId, ClanVariablesUpdate update);

	Task<ApiResult<ClanDetails>> SetPlayerRole(long clanId, string playerId, int roleId, string byPlayerId);

	Task<ApiResult<List<ClanLogEntry>>> GetClanLogs(long clanId, string byPlayerId, int limit = 100);

	Task<ApiResult> AddClanLog(long clanId, string eventKey, string arg1 = null, string arg2 = null, string arg3 = null, string arg4 = null);

	Task<ApiResult<List<ClanScoreEventEntry>>> GetClanScoreEvents(long clanId, string byPlayerId, int limit = 100);

	Task<ApiResult> AddClanScoreEvent(long clanId, NewClanScoreEventEntry entry);

	Task<ApiResult> AddClanScoreEventBatch(List<NewClanScoreEventBatchEntry> entries);
}


using System;
using System.Buffers;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;

internal class NexusZoneConnector : NexusConnector, INexusZoneConnector, INexusConnector
{
	private struct NewClanLogEntry : ValueType
	{
		[field: CompilerGenerated]
		public string EventKey
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Arg1
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Arg2
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Arg3
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Arg4
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Assign>d__17 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string playerId;

		public NexusZoneConnector <>4__this;

		public string toZone;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00d1: Expected O, but got Unknown
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				ConfiguredTaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					val = nexusZoneConnector.PostRequestWithoutResponse(String.Concat((string[])(object)new String[5] { nexusZoneConnector._assignEndpoint, "?playerId=", playerId, "&toZone=", toZone })).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <Assign>d__17>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				val.GetResult().EnsureSuccessful();
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CheckUploadedMap>d__31 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ZoneMapCheckResult> <>t__builder;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<ZoneMapCheckResult>> <>u__1;

		private void MoveNext()
		{
			//IL_0080: Expected O, but got Unknown
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			ZoneMapCheckResult response;
			try
			{
				TaskAwaiter<ApiResult<ZoneMapCheckResult>> val;
				if (num != 0)
				{
					val = nexusZoneConnector.GetRequest<ZoneMapCheckResult>(nexusZoneConnector._mapEndpoint).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<ZoneMapCheckResult>>, <CheckUploadedMap>d__31>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<ZoneMapCheckResult>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CompleteTransfers>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public IEnumerable<string> playerIds;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<CompleteTransfersResponse>> <>u__1;

		private void MoveNext()
		{
			//IL_00a6: Expected O, but got Unknown
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				TaskAwaiter<ApiResult<CompleteTransfersResponse>> val;
				if (num != 0)
				{
					if (playerIds == null)
					{
						throw new ArgumentNullException("playerIds");
					}
					val = nexusZoneConnector.PostRequest<CompleteTransfersRequest, CompleteTransfersResponse>(nexusZoneConnector._completeTransferEndpoint, new CompleteTransfersRequest
					{
						PlayerIds = playerIds
					}).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<CompleteTransfersResponse>>, <CompleteTransfers>d__19>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<CompleteTransfersResponse>>);
					num = (<>1__state = -1);
				}
				val.GetResult().EnsureSuccessfulWithResponse();
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <FindPlayersWithVariable>d__30 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<List<string>> <>t__builder;

		public string key;

		public string value;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<List<string>>> <>u__1;

		private void MoveNext()
		{
			//IL_0105: Expected O, but got Unknown
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			List<string> response;
			try
			{
				TaskAwaiter<ApiResult<List<string>>> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(key))
					{
						throw new ArgumentNullException("key");
					}
					if (!key.StartsWith("id."))
					{
						throw new ArgumentException("Key must begin with 'id.'", "key");
					}
					if (String.IsNullOrWhiteSpace(value))
					{
						throw new ArgumentNullException("value");
					}
					val = nexusZoneConnector.GetRequest<List<string>>(String.Concat((string[])(object)new String[5] { nexusZoneConnector._findPlayersWithVariableEndpoint, "?key=", key, "&value=", value })).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<List<string>>>, <FindPlayersWithVariable>d__30>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<List<string>>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayerDetails>d__15 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ZonePlayerDetails> <>t__builder;

		public NexusZoneConnector <>4__this;

		public string playerId;

		private TaskAwaiter<ApiResult<ZonePlayerDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_008b: Expected O, but got Unknown
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			ZonePlayerDetails response;
			try
			{
				TaskAwaiter<ApiResult<ZonePlayerDetails>> val;
				if (num != 0)
				{
					val = nexusZoneConnector.GetRequest<ZonePlayerDetails>(String.Concat(nexusZoneConnector._getPlayerInfoEndpoint, playerId)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<ZonePlayerDetails>>, <GetPlayerDetails>d__15>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<ZonePlayerDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetZoneDetails>d__14 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ZoneDetails> <>t__builder;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<ZoneDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0080: Expected O, but got Unknown
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			ZoneDetails response;
			try
			{
				TaskAwaiter<ApiResult<ZoneDetails>> val;
				if (num != 0)
				{
					val = nexusZoneConnector.GetRequest<ZoneDetails>(nexusZoneConnector._getZoneInfoEndpoint).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<ZoneDetails>>, <GetZoneDetails>d__14>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<ZoneDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <PlayerLogin>d__16 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ZonePlayerLogin> <>t__builder;

		public string playerId;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<ZonePlayerLogin>> <>u__1;

		private void MoveNext()
		{
			//IL_00a3: Expected O, but got Unknown
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			ZonePlayerLogin response;
			try
			{
				TaskAwaiter<ApiResult<ZonePlayerLogin>> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					val = nexusZoneConnector.PostRequest<ZonePlayerLogin>(String.Concat(nexusZoneConnector._playerLoginEndpoint, playerId)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<ZonePlayerLogin>>, <PlayerLogin>d__16>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<ZonePlayerLogin>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <RegisterTransfers>d__18 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string toZone;

		public IEnumerable<string> playerIds;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult<RegisterTransfersResponse>> <>u__1;

		private void MoveNext()
		{
			//IL_00ce: Expected O, but got Unknown
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				TaskAwaiter<ApiResult<RegisterTransfersResponse>> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(toZone))
					{
						throw new ArgumentNullException("toZone");
					}
					if (playerIds == null)
					{
						throw new ArgumentNullException("playerIds");
					}
					val = nexusZoneConnector.PostRequest<RegisterTransfersRequest, RegisterTransfersResponse>(nexusZoneConnector._registerTransferEndpoint, new RegisterTransfersRequest
					{
						PlayerIds = playerIds,
						ToZoneKey = toZone
					}).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<RegisterTransfersResponse>>, <RegisterTransfers>d__18>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<RegisterTransfersResponse>>);
					num = (<>1__state = -1);
				}
				val.GetResult().EnsureSuccessfulWithResponse();
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendMessage>d__20 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public Guid id;

		public string message;

		public NexusZoneConnector <>4__this;

		public string toZone;

		public Nullable<int> ttl;

		public string contentType;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_0102: Expected O, but got Unknown
			//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00be: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				ConfiguredTaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					if (id == Guid.Empty)
					{
						throw new ArgumentNullException("id");
					}
					if (String.IsNullOrWhiteSpace(message))
					{
						throw new ArgumentNullException("message");
					}
					val = nexusZoneConnector.PostRequestRawWithoutResponse(String.Format("{0}?toZone={1}&id={2}&ttl={3}", (object[])(object)new Object[4]
					{
						(Object)nexusZoneConnector._messageEndpoint,
						(Object)toZone,
						(object)id,
						(object)ttl
					}), message, contentType).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <SendMessage>d__20>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				val.GetResult().EnsureSuccessful();
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendMessage>d__21 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public Guid id;

		public System.Memory<byte> message;

		public NexusZoneConnector <>4__this;

		public string toZone;

		public Nullable<int> ttl;

		public string contentType;

		private byte[] <copyBuffer>5__2;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_0164: Expected O, but got Unknown
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_011d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0122: Unknown result type (might be due to invalid IL or missing references)
			//IL_012a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00df: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0102: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				if (num != 0)
				{
					if (id == Guid.Empty)
					{
						throw new ArgumentNullException("id");
					}
					if (message.IsEmpty)
					{
						throw new ArgumentNullException("message");
					}
					<copyBuffer>5__2 = ArrayPool<byte>.Shared.Rent(message.Length);
				}
				try
				{
					ConfiguredTaskAwaiter<ApiResult> val2;
					if (num != 0)
					{
						ArraySegment<byte> val = default(ArraySegment<byte>);
						val..ctor(<copyBuffer>5__2, 0, message.Length);
						message.CopyTo(System.Memory<byte>.op_Implicit(val));
						val2 = nexusZoneConnector.PostRequestRawWithoutResponse(String.Format("{0}?toZone={1}&id={2}&ttl={3}", (object[])(object)new Object[4]
						{
							(Object)nexusZoneConnector._messageEndpoint,
							(Object)toZone,
							(object)id,
							(object)ttl
						}), val, contentType).ConfigureAwait(false).GetAwaiter();
						if (!val2.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val2;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <SendMessage>d__21>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__1;
						<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
						num = (<>1__state = -1);
					}
					val2.GetResult().EnsureSuccessful();
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<byte>.Shared.Return(<copyBuffer>5__2, false);
					}
				}
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				<copyBuffer>5__2 = null;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			<copyBuffer>5__2 = null;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetVariableImpl>d__28 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string key;

		public string value;

		public bool transient;

		public bool secret;

		public NexusZoneConnector <>4__this;

		public string endpoint;

		private VariableUpdate[] <updateArray>5__2;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00ff: Expected O, but got Unknown
			//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				if (num != 0)
				{
					<updateArray>5__2 = ArrayPool<VariableUpdate>.Shared.Rent(1);
				}
				try
				{
					ConfiguredTaskAwaiter<ApiResult> val;
					if (num != 0)
					{
						<updateArray>5__2[0] = new VariableUpdate(key, value, new Nullable<bool>(transient), new Nullable<bool>(secret));
						ArraySegment<VariableUpdate> requestBody = default(ArraySegment<VariableUpdate>);
						requestBody..ctor(<updateArray>5__2, 0, 1);
						val = nexusZoneConnector.PostRequestWithoutResponse<ArraySegment<VariableUpdate>>(endpoint, requestBody).ConfigureAwait(false).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <SetVariableImpl>d__28>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
						num = (<>1__state = -1);
					}
					val.GetResult().EnsureSuccessful();
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<VariableUpdate>.Shared.Return(<updateArray>5__2, false);
					}
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<updateArray>5__2 = null;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			<updateArray>5__2 = null;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetVariableImpl>d__29 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string key;

		public System.Memory<byte> value;

		public bool transient;

		public bool secret;

		public NexusZoneConnector <>4__this;

		public string endpoint;

		private VariableUpdate[] <updateArray>5__2;

		private ConfiguredTaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00ff: Expected O, but got Unknown
			//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				if (num != 0)
				{
					<updateArray>5__2 = ArrayPool<VariableUpdate>.Shared.Rent(1);
				}
				try
				{
					ConfiguredTaskAwaiter<ApiResult> val;
					if (num != 0)
					{
						<updateArray>5__2[0] = new VariableUpdate(key, value, new Nullable<bool>(transient), new Nullable<bool>(secret));
						ArraySegment<VariableUpdate> requestBody = default(ArraySegment<VariableUpdate>);
						requestBody..ctor(<updateArray>5__2, 0, 1);
						val = nexusZoneConnector.PostRequestWithoutResponse<ArraySegment<VariableUpdate>>(endpoint, requestBody).ConfigureAwait(false).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult>, <SetVariableImpl>d__29>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(ConfiguredTaskAwaiter<ApiResult>);
						num = (<>1__state = -1);
					}
					val.GetResult().EnsureSuccessful();
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<VariableUpdate>.Shared.Return(<updateArray>5__2, false);
					}
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<updateArray>5__2 = null;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			<updateArray>5__2 = null;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UploadMap>d__32 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string key;

		public byte[] pngMapImage;

		public NexusZoneConnector <>4__this;

		private TaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_00e9: Expected O, but got Unknown
			//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneConnector nexusZoneConnector = <>4__this;
			try
			{
				TaskAwaiter<ApiResult> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(key))
					{
						throw new ArgumentNullException("key");
					}
					if (pngMapImage == null)
					{
						throw new ArgumentNullException("pngMapImage");
					}
					if (pngMapImage.Length == 0)
					{
						throw new ArgumentException("Image cannot be empty.", "pngMapImage");
					}
					val = nexusZoneConnector.PostRequestRawWithoutResponse(String.Concat(nexusZoneConnector._mapEndpoint, "?key=", WebUtility.UrlEncode(key)), new ArraySegment<byte>(pngMapImage, 0, pngMapImage.Length), "image/png").GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult>, <UploadMap>d__32>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult>);
					num = (<>1__state = -1);
				}
				val.GetResult();
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private readonly string _getZoneInfoEndpoint;

	private readonly string _getPlayerInfoEndpoint;

	private readonly string _playerLoginEndpoint;

	private readonly string _assignEndpoint;

	private readonly string _registerTransferEndpoint;

	private readonly string _completeTransferEndpoint;

	private readonly string _messageEndpoint;

	private readonly string _setNexusVariableEndpoint;

	private readonly string _setZoneVariableEndpoint;

	private readonly string _setPlayerVariableEndpoint;

	private readonly string _findPlayersWithVariableEndpoint;

	private readonly string _mapEndpoint;

	private readonly string _clanEndpoint;

	public NexusZoneConnector(INexusLogger logger, string baseUrl, string secretKey)
		: base(logger, baseUrl)
	{
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Expected O, but got Unknown
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(secretKey))
		{
			throw new ArgumentNullException("secretKey");
		}
		_getZoneInfoEndpoint = String.Concat(BaseUrl, "/zone/info");
		_getPlayerInfoEndpoint = String.Concat(BaseUrl, "/zone/player/info?playerId=");
		_playerLoginEndpoint = String.Concat(BaseUrl, "/zone/login?playerId=");
		_assignEndpoint = String.Concat(BaseUrl, "/zone/assign");
		_registerTransferEndpoint = String.Concat(BaseUrl, "/zone/transfer/register");
		_completeTransferEndpoint = String.Concat(BaseUrl, "/zone/transfer/complete");
		_messageEndpoint = String.Concat(BaseUrl, "/zone/message");
		_setNexusVariableEndpoint = String.Concat(BaseUrl, "/zone/variables/nexus");
		_setZoneVariableEndpoint = String.Concat(BaseUrl, "/zone/variables/zone");
		_setPlayerVariableEndpoint = String.Concat(BaseUrl, "/zone/variables/player");
		_findPlayersWithVariableEndpoint = String.Concat(BaseUrl, "/zone/query");
		_mapEndpoint = String.Concat(BaseUrl, "/zone/map");
		_clanEndpoint = String.Concat(BaseUrl, "/zone/clan");
		HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", secretKey);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<ZoneDetails> GetZoneDetails()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetZoneDetails>d__14 <GetZoneDetails>d__ = default(<GetZoneDetails>d__14);
		<GetZoneDetails>d__.<>t__builder = AsyncTaskMethodBuilder<ZoneDetails>.Create();
		<GetZoneDetails>d__.<>4__this = this;
		<GetZoneDetails>d__.<>1__state = -1;
		<GetZoneDetails>d__.<>t__builder.Start<<GetZoneDetails>d__14>(ref <GetZoneDetails>d__);
		return <GetZoneDetails>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<ZonePlayerDetails> GetPlayerDetails(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayerDetails>d__15 <GetPlayerDetails>d__ = default(<GetPlayerDetails>d__15);
		<GetPlayerDetails>d__.<>t__builder = AsyncTaskMethodBuilder<ZonePlayerDetails>.Create();
		<GetPlayerDetails>d__.<>4__this = this;
		<GetPlayerDetails>d__.playerId = playerId;
		<GetPlayerDetails>d__.<>1__state = -1;
		<GetPlayerDetails>d__.<>t__builder.Start<<GetPlayerDetails>d__15>(ref <GetPlayerDetails>d__);
		return <GetPlayerDetails>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<ZonePlayerLogin> PlayerLogin(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<PlayerLogin>d__16 <PlayerLogin>d__ = default(<PlayerLogin>d__16);
		<PlayerLogin>d__.<>t__builder = AsyncTaskMethodBuilder<ZonePlayerLogin>.Create();
		<PlayerLogin>d__.<>4__this = this;
		<PlayerLogin>d__.playerId = playerId;
		<PlayerLogin>d__.<>1__state = -1;
		<PlayerLogin>d__.<>t__builder.Start<<PlayerLogin>d__16>(ref <PlayerLogin>d__);
		return <PlayerLogin>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Assign(string playerId, string toZone)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Assign>d__17 <Assign>d__ = default(<Assign>d__17);
		<Assign>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Assign>d__.<>4__this = this;
		<Assign>d__.playerId = playerId;
		<Assign>d__.toZone = toZone;
		<Assign>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Start<<Assign>d__17>(ref <Assign>d__);
		return ((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task RegisterTransfers(string toZone, IEnumerable<string> playerIds)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<RegisterTransfers>d__18 <RegisterTransfers>d__ = default(<RegisterTransfers>d__18);
		<RegisterTransfers>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<RegisterTransfers>d__.<>4__this = this;
		<RegisterTransfers>d__.toZone = toZone;
		<RegisterTransfers>d__.playerIds = playerIds;
		<RegisterTransfers>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <RegisterTransfers>d__.<>t__builder)).Start<<RegisterTransfers>d__18>(ref <RegisterTransfers>d__);
		return ((AsyncTaskMethodBuilder)(ref <RegisterTransfers>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task CompleteTransfers(IEnumerable<string> playerIds)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CompleteTransfers>d__19 <CompleteTransfers>d__ = default(<CompleteTransfers>d__19);
		<CompleteTransfers>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<CompleteTransfers>d__.<>4__this = this;
		<CompleteTransfers>d__.playerIds = playerIds;
		<CompleteTransfers>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <CompleteTransfers>d__.<>t__builder)).Start<<CompleteTransfers>d__19>(ref <CompleteTransfers>d__);
		return ((AsyncTaskMethodBuilder)(ref <CompleteTransfers>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SendMessage(string toZone, Guid id, string message, Nullable<int> ttl, string contentType = "text/plain")
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		<SendMessage>d__20 <SendMessage>d__ = default(<SendMessage>d__20);
		<SendMessage>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SendMessage>d__.<>4__this = this;
		<SendMessage>d__.toZone = toZone;
		<SendMessage>d__.id = id;
		<SendMessage>d__.message = message;
		<SendMessage>d__.ttl = ttl;
		<SendMessage>d__.contentType = contentType;
		<SendMessage>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SendMessage>d__.<>t__builder)).Start<<SendMessage>d__20>(ref <SendMessage>d__);
		return ((AsyncTaskMethodBuilder)(ref <SendMessage>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SendMessage(string toZone, Guid id, System.Memory<byte> message, Nullable<int> ttl, string contentType = "application/octet-stream")
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		<SendMessage>d__21 <SendMessage>d__ = default(<SendMessage>d__21);
		<SendMessage>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SendMessage>d__.<>4__this = this;
		<SendMessage>d__.toZone = toZone;
		<SendMessage>d__.id = id;
		<SendMessage>d__.message = message;
		<SendMessage>d__.ttl = ttl;
		<SendMessage>d__.contentType = contentType;
		<SendMessage>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SendMessage>d__.<>t__builder)).Start<<SendMessage>d__21>(ref <SendMessage>d__);
		return ((AsyncTaskMethodBuilder)(ref <SendMessage>d__.<>t__builder)).Task;
	}

	public Task SetNexusVariable(string key, string value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		return SetVariableImpl(_setNexusVariableEndpoint, key, value, transient, secret);
	}

	public Task SetNexusVariable(string key, System.Memory<byte> value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		return SetVariableImpl(_setNexusVariableEndpoint, key, value, transient, secret);
	}

	public Task SetZoneVariable(string key, string value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		return SetVariableImpl(_setZoneVariableEndpoint, key, value, transient, secret);
	}

	public Task SetZoneVariable(string key, System.Memory<byte> value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		return SetVariableImpl(_setZoneVariableEndpoint, key, value, transient, secret);
	}

	public Task SetPlayerVariable(string playerId, string key, string value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		string endpoint = String.Concat(_setPlayerVariableEndpoint, "?playerId=", playerId);
		return SetVariableImpl(endpoint, key, value, transient, secret);
	}

	public Task SetPlayerVariable(string playerId, string key, System.Memory<byte> value, bool transient, bool secret)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(key))
		{
			throw new ArgumentNullException("key");
		}
		string endpoint = String.Concat(_setPlayerVariableEndpoint, "?playerId=", playerId);
		return SetVariableImpl(endpoint, key, value, transient, secret);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task SetVariableImpl(string endpoint, string key, string value, bool transient, bool secret)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetVariableImpl>d__28 <SetVariableImpl>d__ = default(<SetVariableImpl>d__28);
		<SetVariableImpl>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetVariableImpl>d__.<>4__this = this;
		<SetVariableImpl>d__.endpoint = endpoint;
		<SetVariableImpl>d__.key = key;
		<SetVariableImpl>d__.value = value;
		<SetVariableImpl>d__.transient = transient;
		<SetVariableImpl>d__.secret = secret;
		<SetVariableImpl>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetVariableImpl>d__.<>t__builder)).Start<<SetVariableImpl>d__28>(ref <SetVariableImpl>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetVariableImpl>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task SetVariableImpl(string endpoint, string key, System.Memory<byte> value, bool transient, bool secret)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetVariableImpl>d__29 <SetVariableImpl>d__ = default(<SetVariableImpl>d__29);
		<SetVariableImpl>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetVariableImpl>d__.<>4__this = this;
		<SetVariableImpl>d__.endpoint = endpoint;
		<SetVariableImpl>d__.key = key;
		<SetVariableImpl>d__.value = value;
		<SetVariableImpl>d__.transient = transient;
		<SetVariableImpl>d__.secret = secret;
		<SetVariableImpl>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetVariableImpl>d__.<>t__builder)).Start<<SetVariableImpl>d__29>(ref <SetVariableImpl>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetVariableImpl>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<List<string>> FindPlayersWithVariable(string key, string value)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<FindPlayersWithVariable>d__30 <FindPlayersWithVariable>d__ = default(<FindPlayersWithVariable>d__30);
		<FindPlayersWithVariable>d__.<>t__builder = AsyncTaskMethodBuilder<List<string>>.Create();
		<FindPlayersWithVariable>d__.<>4__this = this;
		<FindPlayersWithVariable>d__.key = key;
		<FindPlayersWithVariable>d__.value = value;
		<FindPlayersWithVariable>d__.<>1__state = -1;
		<FindPlayersWithVariable>d__.<>t__builder.Start<<FindPlayersWithVariable>d__30>(ref <FindPlayersWithVariable>d__);
		return <FindPlayersWithVariable>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<ZoneMapCheckResult> CheckUploadedMap()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CheckUploadedMap>d__31 <CheckUploadedMap>d__ = default(<CheckUploadedMap>d__31);
		<CheckUploadedMap>d__.<>t__builder = AsyncTaskMethodBuilder<ZoneMapCheckResult>.Create();
		<CheckUploadedMap>d__.<>4__this = this;
		<CheckUploadedMap>d__.<>1__state = -1;
		<CheckUploadedMap>d__.<>t__builder.Start<<CheckUploadedMap>d__31>(ref <CheckUploadedMap>d__);
		return <CheckUploadedMap>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task UploadMap(string key, byte[] pngMapImage)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<UploadMap>d__32 <UploadMap>d__ = default(<UploadMap>d__32);
		<UploadMap>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<UploadMap>d__.<>4__this = this;
		<UploadMap>d__.key = key;
		<UploadMap>d__.pngMapImage = pngMapImage;
		<UploadMap>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <UploadMap>d__.<>t__builder)).Start<<UploadMap>d__32>(ref <UploadMap>d__);
		return ((AsyncTaskMethodBuilder)(ref <UploadMap>d__.<>t__builder)).Task;
	}

	public Task<ApiResult<ClanDetails>> CreateClan(ClanCreateParameters parameters)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(parameters.ClanName))
		{
			throw new ArgumentException("Clan name must be set.", "parameters");
		}
		if (String.IsNullOrWhiteSpace(parameters.ClanNameNormalized))
		{
			throw new ArgumentException("Normalized clan name must be set.", "parameters");
		}
		if (String.IsNullOrWhiteSpace(parameters.LeaderPlayerId))
		{
			throw new ArgumentException("Leader player ID must be set.", "parameters");
		}
		if (String.IsNullOrWhiteSpace(parameters.LeaderRoleName))
		{
			throw new ArgumentException("Leader role name must be set.", "parameters");
		}
		if (String.IsNullOrWhiteSpace(parameters.MemberRoleName))
		{
			throw new ArgumentException("Member role name must be set.", "parameters");
		}
		return PostRequest<ClanCreateParameters, ClanDetails>(_clanEndpoint, parameters);
	}

	public Task<ApiResult<ClanDetails>> GetClan(long clanId)
	{
		return GetRequest<ClanDetails>(String.Format("{0}/{1}", (object)_clanEndpoint, (object)clanId));
	}

	public Task<ApiResult<ClanDetails>> GetClanByMember(string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		return GetRequest<ClanDetails>(String.Concat(_clanEndpoint, "?playerId=", playerId));
	}

	public Task<ApiResult> DisbandClan(long clanId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return DeleteRequestWithoutResponse(String.Format("{0}/{1}?byPlayerId={2}", (object)_clanEndpoint, (object)clanId, (object)byPlayerId));
	}

	public Task<ApiResult<ClanDetails>> UpdateClanVariables(long clanId, ClanVariablesUpdate update)
	{
		return PostRequest<ClanVariablesUpdate, ClanDetails>(String.Format("{0}/{1}/variables", (object)_clanEndpoint, (object)clanId), update);
	}

	public Task<ApiResult<List<ClanLeaderboardEntry>>> GetClanLeaderboard(int limit = 100)
	{
		return GetRequest<List<ClanLeaderboardEntry>>(String.Format("{0}/leaderboard?limit={1}", (object)_clanEndpoint, (object)limit));
	}

	public Task<ApiResult<ClanDetails>> CreateRole(long clanId, ClanRoleParameters parameters, string byPlayerId)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(parameters.Name))
		{
			throw new ArgumentException("Role name must be set.", "parameters");
		}
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanRoleParameters, ClanDetails>(String.Format("{0}/{1}/roles?byPlayerId={2}", (object)_clanEndpoint, (object)clanId, (object)byPlayerId), parameters);
	}

	public Task<ApiResult<ClanDetails>> UpdateRole(long clanId, int roleId, ClanRoleParameters parameters, string byPlayerId)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanRoleParameters, ClanDetails>(String.Format("{0}/{1}/roles/{2}?byPlayerId={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(object)roleId,
			(Object)byPlayerId
		}), parameters);
	}

	public Task<ApiResult<ClanDetails>> DeleteRole(long clanId, int roleId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return DeleteRequest<ClanDetails>(String.Format("{0}/{1}/roles/{2}?byPlayerId={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(object)roleId,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<ClanDetails>> SwapRoleRanks(long clanId, int roleIdA, int roleIdB, string byPlayerId)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanDetails>(String.Format("{0}/{1}/roles/swap?roleIdA={2}&roleIdB={3}&byPlayerId={4}", (object[])(object)new Object[5]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(object)roleIdA,
			(object)roleIdB,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<ClanDetails>> CreateInvite(long clanId, string playerId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanDetails>(String.Format("{0}/{1}/invite?playerId={2}&byPlayerId={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)playerId,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<ClanDetails>> AcceptInvite(long clanId, string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		return PostRequest<ClanDetails>(String.Format("{0}/{1}/invite/accept?playerId={2}", (object)_clanEndpoint, (object)clanId, (object)playerId));
	}

	public Task<ApiResult<ClanDetails>> CancelInvite(long clanId, string playerId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanDetails>(String.Format("{0}/{1}/invite/cancel?playerId={2}&byPlayerId={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)playerId,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<ClanDetails>> Kick(long clanId, string playerId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return DeleteRequest<ClanDetails>(String.Format("{0}/{1}/player/{2}?byPlayerId={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)playerId,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<List<ClanInvitation>>> ListInvitations(string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		return GetRequest<List<ClanInvitation>>(String.Concat(_clanEndpoint, "/invitations?playerId=", playerId));
	}

	public Task<ApiResult> UpdateLastSeen(long clanId, string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		return PostRequestWithoutResponse(String.Format("{0}/{1}/player/{2}/seen", (object)_clanEndpoint, (object)clanId, (object)playerId));
	}

	public Task<ApiResult<ClanDetails>> UpdatePlayerClanVariables(long clanId, string playerId, ClanVariablesUpdate update)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		return PostRequest<ClanVariablesUpdate, ClanDetails>(String.Format("{0}/{1}/player/{2}/variables", (object)_clanEndpoint, (object)clanId, (object)playerId), update);
	}

	public Task<ApiResult<ClanDetails>> SetPlayerRole(long clanId, string playerId, int roleId, string byPlayerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return PostRequest<ClanDetails>(String.Format("{0}/{1}/player/{2}/role?roleId={3}&byPlayerId={4}", (object[])(object)new Object[5]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)playerId,
			(object)roleId,
			(Object)byPlayerId
		}));
	}

	public Task<ApiResult<List<ClanLogEntry>>> GetClanLogs(long clanId, string byPlayerId, int limit = 100)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return GetRequest<List<ClanLogEntry>>(String.Format("{0}/{1}/logs?byPlayerId={2}&limit={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)byPlayerId,
			(object)limit
		}));
	}

	public Task<ApiResult> AddClanLog(long clanId, string eventKey, string arg1 = null, string arg2 = null, string arg3 = null, string arg4 = null)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(eventKey))
		{
			throw new ArgumentNullException("eventKey");
		}
		return PostRequestWithoutResponse(String.Format("{0}/{1}/logs", (object)_clanEndpoint, (object)clanId), new NewClanLogEntry
		{
			EventKey = eventKey,
			Arg1 = arg1,
			Arg2 = arg2,
			Arg3 = arg3,
			Arg4 = arg4
		});
	}

	public Task<ApiResult<List<ClanScoreEventEntry>>> GetClanScoreEvents(long clanId, string byPlayerId, int limit = 100)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(byPlayerId))
		{
			throw new ArgumentNullException("byPlayerId");
		}
		return GetRequest<List<ClanScoreEventEntry>>(String.Format("{0}/{1}/scoreEvents?byPlayerId={2}&limit={3}", (object[])(object)new Object[4]
		{
			(Object)_clanEndpoint,
			(object)clanId,
			(Object)byPlayerId,
			(object)limit
		}));
	}

	public Task<ApiResult> AddClanScoreEvent(long clanId, NewClanScoreEventEntry entry)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		if (entry.Score == 0)
		{
			throw new ArgumentException("Score cannot be zero.", "entry");
		}
		if (entry.Multiplier == 0)
		{
			throw new ArgumentException("Multiplier cannot be zero.", "entry");
		}
		return PostRequestWithoutResponse(String.Format("{0}/{1}/scoreEvents", (object)_clanEndpoint, (object)clanId), entry);
	}

	public Task<ApiResult> AddClanScoreEventBatch(List<NewClanScoreEventBatchEntry> entries)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		if (entries == null)
		{
			throw new ArgumentNullException("entries");
		}
		if (entries.Count == 0)
		{
			return Task.FromResult<ApiResult>(new ApiResult((HttpStatusCode)204));
		}
		Enumerator<NewClanScoreEventBatchEntry> enumerator = entries.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				NewClanScoreEventBatchEntry current = enumerator.Current;
				if (current.Score == 0)
				{
					throw new ArgumentException("Score cannot be zero.", "entry");
				}
				if (current.Multiplier == 0)
				{
					throw new ArgumentException("Multiplier cannot be zero.", "entry");
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return PostRequestWithoutResponse<List<NewClanScoreEventBatchEntry>>(String.Concat(_clanEndpoint, "/scoreEventsBatch"), entries);
	}
}


using System.Threading.Tasks;

public delegate System.Threading.Tasks.ValueTask<string> AuthHandler();


using System;
using System.Net.Http;
using System.Runtime.CompilerServices;

private struct Request : ValueType
{
	[field: CompilerGenerated]
	public HttpMethod Method
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Url
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public HttpContent Content
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Runtime.CompilerServices;

private struct NewClanLogEntry : ValueType
{
	[field: CompilerGenerated]
	public string EventKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg1
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg2
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg3
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Arg4
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}
}


using System;
using System.Diagnostics;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Newtonsoft.Json;

[StructLayout(3)]
private struct <<SendRequest>b__17_0>d : ValueType, IAsyncStateMachine
{
	public int <>1__state;

	public AsyncTaskMethodBuilder<TResponse> <>t__builder;

	public HttpResponseMessage response;

	private TaskAwaiter<string> <>u__1;

	private void MoveNext()
	{
		//IL_0075: Expected O, but got Unknown
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		int num = <>1__state;
		TResponse result;
		try
		{
			TaskAwaiter<string> val;
			if (num != 0)
			{
				val = response.Content.ReadAsStringAsync().GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 0);
					<>u__1 = val;
					<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<string>, <<SendRequest>b__17_0>d>(ref val, ref this);
					return;
				}
			}
			else
			{
				val = <>u__1;
				<>u__1 = default(TaskAwaiter<string>);
				num = (<>1__state = -1);
			}
			result = JsonConvert.DeserializeObject<TResponse>(val.GetResult());
		}
		catch (Exception val2)
		{
			Exception exception = val2;
			<>1__state = -2;
			<>t__builder.SetException(exception);
			return;
		}
		<>1__state = -2;
		<>t__builder.SetResult(result);
	}

	[DebuggerHidden]
	private void SetStateMachine(IAsyncStateMachine stateMachine)
	{
		<>t__builder.SetStateMachine(stateMachine);
	}
}


