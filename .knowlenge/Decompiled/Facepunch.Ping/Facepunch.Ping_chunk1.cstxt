using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Ping;
using UnityEngine;

internal class PingSample : IComparable<PingSample>
{
	private List<int> _samples = new List<int>();

	public PingAddress Region { get; }

	public IReadOnlyList<int> Samples => _samples;

	public int Value { get; set; }

	internal Ping PingInstance { get; set; }

	internal DateTime Timestamp { get; set; }

	internal bool IsDone()
	{
		if (PingInstance == null || !PingInstance.isDone)
		{
			return DateTime.UtcNow.Subtract(Timestamp) > TimeSpan.FromMilliseconds(Region.Timeout);
		}
		return true;
	}

	public PingSample(PingAddress region)
	{
		Region = region;
		Value = int.MaxValue;
	}

	public void AddSample(int sample)
	{
		_samples.Add(sample);
		Value = _samples.Min();
	}

	public int CompareTo(PingSample other)
	{
		return Value.CompareTo(other.Value);
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[386]
		{
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 80, 105, 110, 103, 92, 73,
			80, 105, 110, 103, 82, 101, 103, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			45, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 80, 105, 110,
			103, 92, 80, 105, 110, 103, 65, 100, 100, 114,
			101, 115, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			80, 105, 110, 103, 92, 80, 105, 110, 103, 69,
			115, 116, 105, 109, 97, 116, 101, 114, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 80, 105, 110, 103, 92,
			80, 105, 110, 103, 69, 115, 116, 105, 109, 97,
			116, 101, 82, 101, 115, 117, 108, 116, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 46,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 80, 105, 110, 103,
			92, 80, 105, 110, 103, 77, 97, 110, 105, 102,
			101, 115, 116, 46, 99, 115, 0, 0, 0, 2,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			80, 105, 110, 103, 92, 80, 105, 110, 103, 82,
			101, 103, 105, 111, 110, 82, 101, 115, 117, 108,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 44, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 80, 105,
			110, 103, 92, 80, 105, 110, 103, 83, 97, 109,
			112, 108, 101, 46, 99, 115
		};
		result.TypesData = new byte[295]
		{
			0, 0, 0, 0, 26, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 80, 105, 110, 103, 124,
			73, 80, 105, 110, 103, 82, 101, 103, 105, 111,
			110, 0, 0, 0, 0, 26, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 80, 105, 110, 103,
			124, 80, 105, 110, 103, 65, 100, 100, 114, 101,
			115, 115, 0, 0, 0, 0, 28, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 80, 105, 110,
			103, 124, 80, 105, 110, 103, 69, 115, 116, 105,
			109, 97, 116, 101, 114, 0, 0, 0, 0, 35,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			80, 105, 110, 103, 124, 73, 80, 105, 110, 103,
			69, 115, 116, 105, 109, 97, 116, 101, 82, 101,
			115, 117, 108, 116, 115, 0, 0, 0, 0, 34,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			80, 105, 110, 103, 124, 80, 105, 110, 103, 69,
			115, 116, 105, 109, 97, 116, 101, 82, 101, 115,
			117, 108, 116, 115, 0, 0, 0, 0, 27, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 80,
			105, 110, 103, 124, 80, 105, 110, 103, 77, 97,
			110, 105, 102, 101, 115, 116, 0, 0, 0, 0,
			32, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 80, 105, 110, 103, 124, 73, 80, 105, 110,
			103, 82, 101, 103, 105, 111, 110, 82, 101, 115,
			117, 108, 116, 0, 0, 0, 0, 31, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 80, 105,
			110, 103, 124, 80, 105, 110, 103, 82, 101, 103,
			105, 111, 110, 82, 101, 115, 117, 108, 116, 0,
			0, 0, 0, 11, 124, 80, 105, 110, 103, 83,
			97, 109, 112, 108, 101
		};
		result.TotalFiles = 7;
		result.TotalTypes = 9;
		result.IsEditorOnly = false;
		return result;
	}
}


public interface IPingRegion
{
	string Location { get; }

	string Shortname { get; }

	string Code { get; }
}


using Facepunch.Ping;
using Newtonsoft.Json;

[JsonModel]
public class PingAddress : IPingRegion
{
	[JsonProperty("ip")]
	public string IP { get; set; }

	[JsonProperty("location")]
	public string Location { get; set; }

	[JsonProperty("shortname")]
	public string Shortname { get; set; }

	[JsonProperty("code")]
	public string Code { get; set; }

	public int Timeout { get; set; } = 2000;
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Ping;
using Newtonsoft.Json;
using UnityEngine;

public static class PingEstimater
{
	private static string json = "{\"addresses\":[{\"ip\":\"20.217.192.56\",\"location\":\"Isreal\",\"shortname\":\"isreal\",\"code\":\"isr\"},{\"ip\":\"168.63.102.56\",\"location\":\"Netherlands\",\"shortname\":\"eu-west\",\"code\":\"eu1\"},{\"ip\":\"20.90.192.172\",\"location\":\"London\",\"shortname\":\"uk-south\",\"code\":\"uk1\"},{\"ip\":\"20.215.67.201\",\"location\":\"Poland\",\"shortname\":\"poland\",\"code\":\"pol\"},{\"ip\":\"20.216.185.89\",\"location\":\"France\",\"shortname\":\"france\",\"code\":\"fra\"},{\"ip\":\"20.91.203.128\",\"location\":\"Sweden\",\"shortname\":\"sweden\",\"code\":\"eu2\"},{\"ip\":\"20.164.44.234\",\"location\":\"Johannesburg\",\"shortname\":\"africa-south\",\"code\":\"af\"},{\"ip\":\"20.226.112.187\",\"location\":\"Brazil\",\"shortname\":\"brazil\",\"code\":\"br\"},{\"ip\":\"4.188.243.219\",\"location\":\"Pune\",\"shortname\":\"india\",\"code\":\"ind\"},{\"ip\":\"20.63.42.137\",\"location\":\"Toronto\",\"shortname\":\"can-central\",\"code\":\"ca1\"},{\"ip\":\"172.203.56.37\",\"location\":\"Virginia\",\"shortname\":\"us-east-2\",\"code\":\"us4\"},{\"ip\":\"20.220.64.24\",\"location\":\"Quebec City\",\"shortname\":\"can-east\",\"code\":\"ca2\"},{\"ip\":\"20.18.241.207\",\"location\":\"Tokyo\",\"shortname\":\"japan-east\",\"code\":\"ja1\"},{\"ip\":\"20.112.98.85\",\"location\":\"Washington\",\"shortname\":\"us-west-2\",\"code\":\"us2\"},{\"ip\":\"20.218.98.161\",\"location\":\"Germany\",\"shortname\":\"germany\",\"code\":\"ger\"},{\"ip\":\"20.24.146.17\",\"location\":\"Singapore\",\"shortname\":\"asia-south\",\"code\":\"as1\"},{\"ip\":\"20.247.59.162\",\"location\":\"Hong Kong\",\"shortname\":\"asia-east\",\"code\":\"as2\"},{\"ip\":\"172.190.181.248\",\"location\":\"Illinois\",\"shortname\":\"us-north\",\"code\":\"us5\"},{\"ip\":\"20.37.4.183\",\"location\":\"Canberra\",\"shortname\":\"au-central\",\"code\":\"au1\"},{\"ip\":\"20.65.248.143\",\"location\":\"Texas\",\"shortname\":\"us-central\",\"code\":\"us1\"},{\"ip\":\"137.135.24.105\",\"location\":\"California\",\"shortname\":\"us-west\",\"code\":\"us3\"}]}";

	private static PingManifest manifest = null;

	private static uint seed = 1234u;

	public static int numSamples = 5;

	public static bool parallel = false;

	public static int refreshIntervalMinutes = 45;

	public static bool AutoRefresh = Environment.OSVersion.Platform != PlatformID.Unix;

	public static bool enabled = true;

	public static bool logging = false;

	private static readonly IPingRegion UnknownRegion = new PingAddress
	{
		Code = "?",
		Location = "Unknown",
		Shortname = "unknown"
	};

	private static Task updateRegionTask;

	private static DateTime _cachedTime;

	private static IPingRegion _cachedRegion = UnknownRegion;

	private static IPingEstimateResults _pingResults;

	public static bool IsEnabled
	{
		get
		{
			if (enabled)
			{
				return refreshIntervalMinutes > 0;
			}
			return false;
		}
	}

	private static List<PingAddress> DownloadRegions()
	{
		if (manifest == null)
		{
			manifest = JsonConvert.DeserializeObject<PingManifest>(json);
		}
		return manifest.Addresses;
	}

	private static void TryRefreshCache()
	{
		if (IsEnabled && (AutoRefresh || _cachedRegion == null) && DateTime.UtcNow - _cachedTime > TimeSpan.FromMinutes(refreshIntervalMinutes))
		{
			_cachedTime = DateTime.UtcNow;
			ForceRefreshCache();
		}
	}

	public static void ForceRefreshCache()
	{
		if (updateRegionTask == null || updateRegionTask.IsCompleted)
		{
			updateRegionTask = CalculateClosestRegion();
		}
	}

	public static IPingRegion GetCachedClosestRegion()
	{
		TryRefreshCache();
		return _cachedRegion;
	}

	public static int? GetCachedPingForRegion(StringView regionCode)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		TryRefreshCache();
		return _pingResults?.GetRegionByCode(regionCode)?.Ping ?? int.MaxValue;
	}

	public static IPingEstimateResults GetEstimateToAllRegions()
	{
		TryRefreshCache();
		return _pingResults;
	}

	private static async Task CalculateClosestRegion()
	{
		List<PingAddress> source = DownloadRegions();
		List<PingSample> samples = source.Select((PingAddress x) => new PingSample(x)).ToList();
		seed = (uint)new Random().Next(0, int.MaxValue);
		for (int sampleCount = 0; sampleCount < numSamples; sampleCount++)
		{
			if (logging)
			{
				Debug.Log((object)$"[PingEstimator] Iteration {sampleCount}");
			}
			ListEx.Shuffle<PingSample>(samples, ref seed);
			foreach (PingSample sample in samples)
			{
				sample.PingInstance = new Ping(sample.Region.IP);
				sample.Timestamp = DateTime.UtcNow;
				if (!parallel)
				{
					while (!sample.IsDone())
					{
						await Task.Delay(80);
					}
					if (sample.PingInstance.time >= 0)
					{
						sample.AddSample(sample.PingInstance.time);
					}
					sample.PingInstance.DestroyPing();
					if (Environment.OSVersion.Platform == PlatformID.Unix)
					{
						await Task.Delay(500);
					}
					if (logging)
					{
						Debug.Log((object)$"[PingEstimator] Region {sample.Region.Shortname} took {sample.PingInstance.time}ms");
					}
				}
			}
			if (parallel)
			{
				bool flag = false;
				while (!flag)
				{
					await Task.Delay(80);
					flag = true;
					foreach (PingSample item in samples)
					{
						if (!item.IsDone())
						{
							if (item.PingInstance.time >= 0)
							{
								item.AddSample(item.PingInstance.time);
							}
							item.PingInstance.DestroyPing();
							flag = false;
							break;
						}
					}
				}
			}
			samples.Sort();
			PingSample pingSample = samples[0];
			_cachedRegion = pingSample.Region;
			_pingResults = new PingEstimateResults(samples);
			if (logging)
			{
				Debug.Log((object)$"[PingEstimator] Closest region is {pingSample.Region.Shortname} with {pingSample.Value}ms");
			}
		}
	}
}


using System.Collections.Generic;
using Facepunch;
using Facepunch.Ping;

public interface IPingEstimateResults
{
	IPingRegionResult GetRegionByCode(StringView code);

	IEnumerable<IPingRegionResult> GetAllRegions();
}


using System.Collections.Generic;
using Facepunch;
using Facepunch.Ping;

internal class PingEstimateResults : IPingEstimateResults
{
	private Dictionary<StringView, PingRegionResult> regions = new Dictionary<StringView, PingRegionResult>();

	public PingEstimateResults(IReadOnlyCollection<PingSample> samples)
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		foreach (PingSample sample in samples)
		{
			regions[StringView.op_Implicit(sample.Region.Code)] = new PingRegionResult
			{
				Ping = sample.Value,
				RegionCode = sample.Region.Code,
				RegionShortname = sample.Region.Shortname
			};
		}
	}

	public IPingRegionResult GetRegionByCode(StringView code)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return regions.GetValueOrDefault(code);
	}

	public IEnumerable<IPingRegionResult> GetAllRegions()
	{
		return regions.Values;
	}
}


using System.Collections.Generic;
using Facepunch.Ping;
using Newtonsoft.Json;

[JsonModel]
public class PingManifest
{
	[JsonProperty("addresses")]
	public List<PingAddress> Addresses { get; set; } = new List<PingAddress>();
}


[JsonModel]
public interface IPingRegionResult
{
	string RegionCode { get; }

	string RegionShortname { get; }

	int Ping { get; }
}


using Facepunch.Ping;

[JsonModel]
internal class PingRegionResult : IPingRegionResult
{
	public string RegionCode { get; set; }

	public string RegionShortname { get; set; }

	public int Ping { get; set; }
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


