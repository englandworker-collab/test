using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[162]
		{
			0, 0, 0, 1, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 83, 113, 108, 105, 116, 101,
			92, 68, 97, 116, 97, 98, 97, 115, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 43,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 83, 113, 108, 105,
			116, 101, 92, 73, 110, 116, 101, 114, 111, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 83, 113, 108,
			105, 116, 101, 92, 83, 113, 108, 105, 116, 101,
			69, 120, 99, 101, 112, 116, 105, 111, 110, 46,
			99, 115
		};
		result.TypesData = new byte[96]
		{
			0, 0, 0, 0, 25, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 83, 113, 108, 105, 116,
			101, 124, 68, 97, 116, 97, 98, 97, 115, 101,
			0, 0, 0, 0, 24, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 83, 113, 108, 105, 116,
			101, 124, 73, 110, 116, 101, 114, 111, 112, 0,
			0, 0, 0, 32, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 83, 113, 108, 105, 116, 101,
			124, 83, 113, 108, 105, 116, 101, 69, 120, 99,
			101, 112, 116, 105, 111, 110
		};
		result.TotalFiles = 3;
		result.TotalTypes = 3;
		result.IsEditorOnly = false;
		return result;
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Facepunch.Sqlite;
using UnityEngine;

public class Database
{
	private IntPtr _connection;

	private readonly Dictionary<string, IntPtr> _preparedStatementCache = new Dictionary<string, IntPtr>();

	private bool IsConnectionOpen { get; set; }

	public int AffectedRows
	{
		get
		{
			if (!IsConnectionOpen)
			{
				return 0;
			}
			return Interop.sqlite3_changes(_connection);
		}
	}

	public long LastInsertRowId
	{
		get
		{
			if (!IsConnectionOpen)
			{
				return 0L;
			}
			return Interop.sqlite3_last_insert_rowid(_connection);
		}
	}

	public void Open(string path, bool fastMode = true)
	{
		if (IsConnectionOpen)
		{
			throw new SqliteException(-1, "There is already an open connection");
		}
		int num = Interop.sqlite3_open(path, out _connection);
		if (num != 0)
		{
			throw new SqliteException(num, $"Could not open database file: {path} (error {num})");
		}
		Interop.sqlite3_extended_result_codes(_connection, 1);
		IsConnectionOpen = true;
		Execute("PRAGMA locking_mode = EXCLUSIVE");
		if (fastMode)
		{
			Execute("PRAGMA journal_mode = WAL");
			Execute("PRAGMA synchronous = NORMAL");
		}
	}

	public bool TableExists(string tableName)
	{
		return Query<int, string>("select count(type) from sqlite_master where type='table' and name=?;", tableName) > 0;
	}

	public bool IndexExists(string tableName, string indexName)
	{
		return Query<int, string, string>("select count(type) from sqlite_master where type='index' and tbl_name=? and name=?;", tableName, indexName) > 0;
	}

	public bool ColumnExists(string tableName, string columnName)
	{
		return Query<int, string, string>("select count(*) from sqlite_master where tbl_name=? and sql like ?;", tableName, "% " + columnName + " %") > 0;
	}

	public void Close()
	{
		if (IsConnectionOpen)
		{
			foreach (IntPtr value in _preparedStatementCache.Values)
			{
				Interop.sqlite3_finalize(value);
			}
			_preparedStatementCache.Clear();
			Interop.sqlite3_close(_connection);
		}
		IsConnectionOpen = false;
	}

	public void Execute(string query)
	{
		IntPtr stmHandle = Prepare(query);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3>(string query, T1 arg1, T2 arg2, T3 arg3)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		ExecuteQuery(stmHandle);
	}

	public TOut Query<TOut>(string query)
	{
		IntPtr stmHandle = Prepare(query);
		return ExecuteAndReadQueryResult<TOut>(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5, T6>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		Bind(stmHandle, 6, arg6);
		ExecuteQuery(stmHandle);
	}

	public TOut Query<TOut, T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		return ExecuteAndReadQueryResult<TOut>(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5, T6, T7>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		Bind(stmHandle, 6, arg6);
		Bind(stmHandle, 7, arg7);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5, T6, T7, T8>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		Bind(stmHandle, 6, arg6);
		Bind(stmHandle, 7, arg7);
		Bind(stmHandle, 8, arg8);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5, T6, T7, T8, T9>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		Bind(stmHandle, 6, arg6);
		Bind(stmHandle, 7, arg7);
		Bind(stmHandle, 8, arg8);
		Bind(stmHandle, 9, arg9);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		Bind(stmHandle, 6, arg6);
		Bind(stmHandle, 7, arg7);
		Bind(stmHandle, 8, arg8);
		Bind(stmHandle, 9, arg9);
		Bind(stmHandle, 10, arg10);
		ExecuteQuery(stmHandle);
	}

	public TOut Query<TOut, T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		return ExecuteAndReadQueryResult<TOut>(stmHandle);
	}

	public TOut Query<TOut, T1, T2, T3, T4>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		return ExecuteAndReadQueryResult<TOut>(stmHandle);
	}

	public TOut Query<TOut, T1, T2, T3>(string query, T1 arg1, T2 arg2, T3 arg3)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		return ExecuteAndReadQueryResult<TOut>(stmHandle);
	}

	public void BeginTransaction()
	{
		Execute("BEGIN TRANSACTION");
	}

	public void Commit()
	{
		Execute("COMMIT");
	}

	public string QueryString<T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		return ExecuteAndReadQueryResult<string>(stmHandle);
	}

	public void Rollback()
	{
		Execute("ROLLBACK");
	}

	protected void ExecuteQuery(IntPtr stmHandle)
	{
		try
		{
			while (true)
			{
				int num = Interop.sqlite3_step(stmHandle);
				switch (num)
				{
				case 5:
				case 100:
					continue;
				case 0:
				case 101:
					return;
				}
				throw ExecuteError(num);
			}
		}
		finally
		{
			Complete(stmHandle);
		}
	}

	protected unsafe static void Bind<T>(IntPtr stmHandle, int index, T value)
	{
		if (typeof(T) == typeof(string))
		{
			string text = GenericsUtil.Cast<T, string>(value);
			if (text != null)
			{
				fixed (char* value2 = text)
				{
					Interop.sqlite3_bind_text16(stmHandle, index, new IntPtr(value2), -1, Interop.SQLITE_TRANSIENT);
				}
			}
			else
			{
				Interop.sqlite3_bind_null(stmHandle, index);
			}
			return;
		}
		if (typeof(T) == typeof(uint))
		{
			uint num = GenericsUtil.Cast<T, uint>(value);
			Interop.sqlite3_bind_int64(stmHandle, index, num);
			return;
		}
		if (typeof(T) == typeof(int))
		{
			int num2 = GenericsUtil.Cast<T, int>(value);
			Interop.sqlite3_bind_int64(stmHandle, index, num2);
			return;
		}
		if (typeof(T) == typeof(long))
		{
			long val = GenericsUtil.Cast<T, long>(value);
			Interop.sqlite3_bind_int64(stmHandle, index, val);
			return;
		}
		if (typeof(T) == typeof(long?))
		{
			long? num3 = GenericsUtil.Cast<T, long?>(value);
			if (num3.HasValue)
			{
				Interop.sqlite3_bind_int64(stmHandle, index, num3.Value);
			}
			else
			{
				Interop.sqlite3_bind_null(stmHandle, index);
			}
			return;
		}
		if (typeof(T) == typeof(ulong))
		{
			ulong val2 = GenericsUtil.Cast<T, ulong>(value);
			Interop.sqlite3_bind_int64(stmHandle, index, (long)val2);
			return;
		}
		if (typeof(T) == typeof(ulong?))
		{
			ulong? num4 = GenericsUtil.Cast<T, ulong?>(value);
			if (num4.HasValue)
			{
				Interop.sqlite3_bind_int64(stmHandle, index, (long)num4.Value);
			}
			else
			{
				Interop.sqlite3_bind_null(stmHandle, index);
			}
			return;
		}
		if (typeof(T) == typeof(float))
		{
			float num5 = GenericsUtil.Cast<T, float>(value);
			Interop.sqlite3_bind_double(stmHandle, index, num5);
			return;
		}
		if (typeof(T) == typeof(double))
		{
			double val3 = GenericsUtil.Cast<T, double>(value);
			Interop.sqlite3_bind_double(stmHandle, index, val3);
			return;
		}
		if (typeof(T) == typeof(bool))
		{
			bool flag = GenericsUtil.Cast<T, bool>(value);
			Interop.sqlite3_bind_int64(stmHandle, index, flag ? 1 : 0);
			return;
		}
		if (typeof(T) == typeof(Guid))
		{
			Guid guid = GenericsUtil.Cast<T, Guid>(value);
			Interop.sqlite3_bind_blob(stmHandle, index, new IntPtr(&guid), sizeof(Guid), Interop.SQLITE_TRANSIENT);
			return;
		}
		if (typeof(T) == typeof(byte[]))
		{
			byte[] array = GenericsUtil.Cast<T, byte[]>(value);
			if (array != null)
			{
				fixed (byte* ptr = array)
				{
					Interop.sqlite3_bind_blob(stmHandle, index, (IntPtr)ptr, array.Length, Interop.SQLITE_TRANSIENT);
				}
			}
			else
			{
				Interop.sqlite3_bind_null(stmHandle, index);
			}
			return;
		}
		throw new SqliteException(-1, "Cannot map type " + typeof(T).FullName + " into SQLite type");
	}

	protected unsafe static T GetColumnValue<T>(IntPtr stmHandle, int i)
	{
		int type = Interop.sqlite3_column_type(stmHandle, i);
		if (type == 5)
		{
			return default(T);
		}
		if (typeof(T) == typeof(uint))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<uint, T>((uint)Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(int))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<int, T>((int)Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(long))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<long, T>(Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(long?))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<long?, T>((long?)Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(ulong))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<ulong, T>((ulong)Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(ulong?))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<ulong?, T>((ulong?)(ulong)Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(string))
		{
			if (type != 3)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<string, T>(Marshal.PtrToStringUni(Interop.sqlite3_column_text16(stmHandle, i)));
		}
		if (typeof(T) == typeof(float))
		{
			if (type != 2)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<float, T>((float)Interop.sqlite3_column_double(stmHandle, i));
		}
		if (typeof(T) == typeof(bool))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<bool, T>(Interop.sqlite3_column_int64(stmHandle, i) != 0);
		}
		if (typeof(T) == typeof(Guid))
		{
			if (type != 4)
			{
				throw TypeError();
			}
			IntPtr intPtr = Interop.sqlite3_column_blob(stmHandle, i);
			if (intPtr == IntPtr.Zero)
			{
				return default(T);
			}
			if (Interop.sqlite3_column_bytes(stmHandle, i) != sizeof(Guid))
			{
				throw new Exception("GUID BLOB is the wrong length");
			}
			Guid* ptr = (Guid*)(void*)intPtr;
			return GenericsUtil.Cast<Guid, T>(*ptr);
		}
		if (typeof(T) == typeof(byte[]))
		{
			if (type != 4)
			{
				throw TypeError();
			}
			IntPtr intPtr2 = Interop.sqlite3_column_blob(stmHandle, i);
			if (intPtr2 == IntPtr.Zero)
			{
				return default(T);
			}
			int num = Interop.sqlite3_column_bytes(stmHandle, i);
			if (num == 0)
			{
				return GenericsUtil.Cast<byte[], T>(Array.Empty<byte>());
			}
			byte[] array = new byte[num];
			Marshal.Copy(intPtr2, array, 0, num);
			return GenericsUtil.Cast<byte[], T>(array);
		}
		throw TypeError();
		Exception TypeError()
		{
			return new SqliteException(-1, "Cannot map SQLite type " + Interop.GetTypeName(type) + " to " + typeof(T).FullName);
		}
	}

	protected T ExecuteAndReadQueryResult<T>(IntPtr stmHandle)
	{
		try
		{
			while (true)
			{
				int num = Interop.sqlite3_step(stmHandle);
				switch (num)
				{
				case 5:
					break;
				case 101:
					goto end_IL_0000;
				default:
					throw ExecuteError(num);
				case 100:
					return GetColumnValue<T>(stmHandle, 0);
				}
				continue;
				end_IL_0000:
				break;
			}
		}
		finally
		{
			Complete(stmHandle);
		}
		return default(T);
	}

	protected T? ExecuteAndReadQueryResult<T>(IntPtr stmHandle, Func<IntPtr, T> rowReader) where T : struct
	{
		try
		{
			while (true)
			{
				int num = Interop.sqlite3_step(stmHandle);
				switch (num)
				{
				case 5:
					break;
				case 101:
					goto end_IL_0000;
				default:
					throw ExecuteError(num);
				case 100:
					return rowReader(stmHandle);
				}
				continue;
				end_IL_0000:
				break;
			}
		}
		finally
		{
			Complete(stmHandle);
		}
		return default(T);
	}

	protected IEnumerable<T> ExecuteAndReadQueryResults<T>(IntPtr stmHandle, Func<IntPtr, T> rowReader)
	{
		try
		{
			while (true)
			{
				int num = Interop.sqlite3_step(stmHandle);
				switch (num)
				{
				case 5:
					break;
				default:
					throw ExecuteError(num);
				case 100:
					yield return rowReader(stmHandle);
					break;
				case 101:
					yield break;
				}
			}
		}
		finally
		{
			Complete(stmHandle);
		}
	}

	protected int ExecuteAndReadQueryResults<T>(IntPtr stmHandle, List<T> results, Func<IntPtr, T> rowReader)
	{
		try
		{
			int num = 0;
			while (true)
			{
				int num2 = Interop.sqlite3_step(stmHandle);
				switch (num2)
				{
				case 5:
					break;
				default:
					throw ExecuteError(num2);
				case 100:
					goto IL_001f;
				case 101:
					return num;
				}
				continue;
				IL_001f:
				results.Add(rowReader(stmHandle));
				num++;
			}
		}
		finally
		{
			Complete(stmHandle);
		}
	}

	private Exception ExecuteError(int result)
	{
		IntPtr ptr = Interop.sqlite3_errmsg(_connection);
		throw new SqliteException(result, $"Could not execute SQL statement: {Marshal.PtrToStringAnsi(ptr)} ({result})");
	}

	protected IntPtr Prepare(string query)
	{
		if (!IsConnectionOpen)
		{
			throw new SqliteException(-1, "SQLite database is not open.");
		}
		if (_preparedStatementCache.TryGetValue(query, out var value))
		{
			Reset(value, clearBindings: true);
			return value;
		}
		IntPtr ppStmpt;
		int num = Interop.sqlite3_prepare_v3(_connection, query, query.Length, 1u, out ppStmpt, IntPtr.Zero);
		if (num != 0)
		{
			IntPtr ptr = Interop.sqlite3_errmsg(_connection);
			throw new SqliteException(num, $"Failed to prepare query: {Marshal.PtrToStringAnsi(ptr)} ({num})");
		}
		_preparedStatementCache.Add(query, ppStmpt);
		return ppStmpt;
	}

	protected void Complete(IntPtr stmHandle)
	{
		Reset(stmHandle);
	}

	protected void Reset(IntPtr stmHandle, bool clearBindings = false)
	{
		int num = Interop.sqlite3_reset(stmHandle);
		if (num != 0)
		{
			IntPtr ptr = Interop.sqlite3_errmsg(_connection);
			throw new SqliteException(num, $"Could not reset SQL statement: {Marshal.PtrToStringAnsi(ptr)} ({num})");
		}
		if (clearBindings)
		{
			int num2 = Interop.sqlite3_clear_bindings(stmHandle);
			if (num2 != 0)
			{
				IntPtr ptr2 = Interop.sqlite3_errmsg(_connection);
				throw new SqliteException(num, $"Could not clear bindings for SQL statement: {Marshal.PtrToStringAnsi(ptr2)} ({num2})");
			}
		}
	}

	protected void DebugLogColumns(IntPtr stmHandle)
	{
		int num = Interop.sqlite3_column_count(stmHandle);
		Debug.Log((object)$"{num} columns");
		for (int i = 0; i < num; i++)
		{
			IntPtr ptr = Interop.sqlite3_column_name(stmHandle, i);
			Debug.Log((object)$"Column {i + 1}: {Marshal.PtrToStringAnsi(ptr)} ({Interop.GetTypeName(Interop.sqlite3_column_type(stmHandle, i))})");
		}
	}
}


using System;
using System.Runtime.InteropServices;

internal static class Interop
{
	internal const int SQLITE_OK = 0;

	internal const int SQLITE_BUSY = 5;

	internal const int SQLITE_ROW = 100;

	internal const int SQLITE_DONE = 101;

	internal const int SQLITE_INTEGER = 1;

	internal const int SQLITE_FLOAT = 2;

	internal const int SQLITE_TEXT = 3;

	internal const int SQLITE_BLOB = 4;

	internal const int SQLITE_NULL = 5;

	internal const int SQLITE_PREPARE_PERSISTENT = 1;

	internal static IntPtr SQLITE_STATIC = new IntPtr(0);

	internal static IntPtr SQLITE_TRANSIENT = new IntPtr(-1);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_open(string filename, out IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_close(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_extended_result_codes(IntPtr db, int onoff);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_prepare_v3(IntPtr db, string zSql, int nByte, uint prepFlags, out IntPtr ppStmpt, IntPtr pzTail);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_step(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_finalize(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_reset(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_clear_bindings(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_errmsg(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_changes(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern long sqlite3_last_insert_rowid(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_count(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_name(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_type(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern long sqlite3_column_int64(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_text16(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_blob(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_bytes(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern double sqlite3_column_double(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_text16(IntPtr stmHandle, int i, IntPtr str, int len, IntPtr dest);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_int64(IntPtr stmHandle, int i, long val);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_blob(IntPtr stmHandle, int i, IntPtr str, int len, IntPtr dest);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_double(IntPtr stmHandle, int i, double val);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_null(IntPtr stmHandle, int i);

	public static string GetTypeName(int sqliteType)
	{
		return sqliteType switch
		{
			1 => "SQLITE_INTEGER", 
			2 => "SQLITE_FLOAT", 
			4 => "SQLITE_BLOB", 
			5 => "SQLITE_NULL", 
			3 => "SQLITE_TEXT", 
			_ => $"UNKNOWN ({sqliteType})", 
		};
	}
}


using System;

public class SqliteException : Exception
{
	public int Result { get; }

	public SqliteException(int result, string message)
		: base(message)
	{
		Result = result;
	}
}


