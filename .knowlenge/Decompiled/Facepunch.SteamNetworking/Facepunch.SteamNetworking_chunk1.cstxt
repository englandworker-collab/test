using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[218]
		{
			0, 0, 0, 2, 0, 0, 0, 67, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 83, 116, 101, 97, 109, 78,
			101, 116, 119, 111, 114, 107, 105, 110, 103, 92,
			83, 116, 101, 97, 109, 78, 101, 116, 119, 111,
			114, 107, 105, 110, 103, 46, 67, 108, 105, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 83,
			116, 101, 97, 109, 78, 101, 116, 119, 111, 114,
			107, 105, 110, 103, 92, 83, 116, 101, 97, 109,
			78, 101, 116, 119, 111, 114, 107, 105, 110, 103,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			67, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 83, 116, 101,
			97, 109, 78, 101, 116, 119, 111, 114, 107, 105,
			110, 103, 92, 83, 116, 101, 97, 109, 78, 101,
			116, 119, 111, 114, 107, 105, 110, 103, 46, 83,
			101, 114, 118, 101, 114, 46, 99, 115
		};
		result.TypesData = new byte[204]
		{
			1, 0, 0, 0, 33, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 78, 101, 116, 119, 111,
			114, 107, 124, 83, 116, 101, 97, 109, 78, 101,
			116, 119, 111, 114, 107, 105, 110, 103, 0, 0,
			0, 0, 40, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 78, 101, 116, 119, 111, 114, 107,
			46, 83, 116, 101, 97, 109, 78, 101, 116, 119,
			111, 114, 107, 105, 110, 103, 124, 67, 108, 105,
			101, 110, 116, 1, 0, 0, 0, 33, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 78, 101,
			116, 119, 111, 114, 107, 124, 83, 116, 101, 97,
			109, 78, 101, 116, 119, 111, 114, 107, 105, 110,
			103, 1, 0, 0, 0, 33, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 78, 101, 116, 119,
			111, 114, 107, 124, 83, 116, 101, 97, 109, 78,
			101, 116, 119, 111, 114, 107, 105, 110, 103, 0,
			0, 0, 0, 40, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 78, 101, 116, 119, 111, 114,
			107, 46, 83, 116, 101, 97, 109, 78, 101, 116,
			119, 111, 114, 107, 105, 110, 103, 124, 83, 101,
			114, 118, 101, 114
		};
		result.TotalFiles = 3;
		result.TotalTypes = 5;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;
using System.IO;
using System.Text;
using Facepunch;
using Facepunch.Network;
using Network;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

[Factory("global")]
public static class SteamNetworking
{
	public class Client : Client, IConnectionManager
	{
		private ConnectionManager manager;

		private const int bufferSize = 32;

		public override bool IsConnected()
		{
			return manager != null;
		}

		public override bool Connect(string strURL, int port)
		{
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c3: Expected O, but got Unknown
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						((Client)this).Connect(strURL, port);
						SteamNetworkingUtils.AllowWithoutAuth = 2;
						SteamNetworkingUtils.Unencrypted = 2;
						SteamNetworkingUtils.SendRateMax = 1048576;
						SteamNetworkingUtils.SendRateMin = 1048576;
						NetAddress val = NetAddress.From(strURL, (ushort)port);
						manager = SteamNetworkingSockets.ConnectNormal(val, (IConnectionManager)(object)this);
						if (manager == null)
						{
							return false;
						}
						((Connection)(ref manager.Connection)).ConfigureConnectionLanes(Server.lanePriorities, Server.laneWeights);
						((Client)this).ConnectedAddress = strURL;
						((Client)this).ConnectedPort = port;
						((Client)this).ServerName = "";
						((Client)this).Connection = new Connection();
						((BaseNetwork)this).MultithreadingInit((IServerCallback)null);
						return true;
					}
				}
			}
		}

		protected override bool Receive()
		{
			if (manager.Receive(32, false) == 32)
			{
				return true;
			}
			return false;
		}

		public override void Disconnect(string reason, bool sendReasonToServer)
		{
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						if (sendReasonToServer && manager != null)
						{
							NetWrite obj = ((BaseNetwork)this).StartWrite();
							obj.PacketID((Type)14);
							obj.String(reason, false);
							obj.SendImmediate(new SendInfo(((Client)this).Connection)
							{
								method = (SendMethod)1,
								priority = (Priority)0
							});
							if (manager != null)
							{
								manager.Close(true, 0, reason);
								manager = null;
							}
						}
						else if (manager != null)
						{
							manager.Close(false, 0, "Closing Connection");
							manager = null;
						}
						((Client)this).ConnectedAddress = "";
						((Client)this).ConnectedPort = 0;
						((Client)this).Connection = null;
						((Client)this).OnDisconnected(reason);
					}
				}
			}
		}

		public override void Flush()
		{
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			if (manager != null && ((Client)this).Connection != null)
			{
				Connection val = Connection.op_Implicit((uint)((Client)this).Connection.guid);
				((Connection)(ref val)).Flush();
			}
		}

		public unsafe override void ProcessWrite(NetWrite write)
		{
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_007c: Invalid comparison between Unknown and I4
			ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(((Client)this).Connection, write);
			fixed (byte* array = arraySegment.Array)
			{
				Result val = ((Connection)(ref manager.Connection)).SendMessage((IntPtr)array, arraySegment.Offset + arraySegment.Count, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexClient(write.method, write.priority, write.channel));
				if ((int)val != 1)
				{
					Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
				}
			}
			write.RemoveReference();
		}

		void IConnectionManager.OnConnecting(ConnectionInfo info)
		{
		}

		void IConnectionManager.OnConnected(ConnectionInfo info)
		{
			((Client)this).Connection.guid = ((Connection)(ref manager.Connection)).Id;
		}

		void IConnectionManager.OnDisconnected(ConnectionInfo info)
		{
			if (((Client)this).Connection != null)
			{
				((Client)this).Disconnect(Client.disconnectReason, false);
			}
		}

		unsafe void IConnectionManager.OnMessage(IntPtr data, int datasize, long messageNum, long recvTime, int channel)
		{
			NetRead val = Pool.Get<NetRead>();
			Span<byte> span = new Span<byte>(data.ToPointer(), datasize);
			val.Start(((Client)this).Connection, span);
			if (BaseNetwork.Multithreading)
			{
				((BaseNetwork)this).EnqueueDecrypt(val);
			}
			else
			{
				((BaseNetwork)this).ProcessDecrypt(val);
			}
		}

		public override void ProcessRead(NetRead read)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			((BaseNetwork)this).RecordReadForConnection(read.connection, read);
			byte b = read.PacketID();
			b -= 140;
			Type val;
			if (read.connection == null)
			{
				string[] obj = new string[5] { "Ignoring message (", null, null, null, null };
				val = (Type)b;
				obj[1] = ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString();
				obj[2] = " ";
				obj[3] = b.ToString();
				obj[4] = " connection is null)";
				Debug.LogWarning((object)string.Concat(obj));
				read.RemoveReference();
				return;
			}
			if (b > 28)
			{
				val = (Type)28;
				Debug.LogWarning((object)("Invalid Packet (higher than " + ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
				((Client)this).Disconnect("Invalid Packet (" + b + ") " + ((Stream)(object)read).Length + "b", true);
				read.RemoveReference();
				return;
			}
			Message val2 = ((BaseNetwork)this).StartMessage((Type)b, read);
			if (base.callbackHandler != null)
			{
				try
				{
					TimeWarning val3 = TimeWarning.New("OnMessage", 0);
					try
					{
						base.callbackHandler.OnNetworkMessage(val2);
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
				}
				catch (Exception ex)
				{
					Debug.LogException(ex);
					((Client)this).Disconnect(ex.Message + "\n" + ex.StackTrace, true);
				}
			}
			Pool.Free<Message>(ref val2);
			read.RemoveReference();
		}

		public override string GetDebug(Connection connection)
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			if (connection == null)
			{
				connection = ((Client)this).Connection;
			}
			if (connection == null)
			{
				return string.Empty;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			return ((Connection)(ref val)).DetailedStatus();
		}

		public override int GetLastPing()
		{
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			Connection connection = ((Client)this).Connection;
			if (connection == null)
			{
				return 1;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
			return ((ConnectionStatus)(ref val2)).Ping;
		}

		public override ulong GetStat(Connection connection, StatTypeLong type)
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Expected I4, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Invalid comparison between Unknown and I4
			if (connection == null)
			{
				connection = ((Client)this).Connection;
			}
			if (connection == null)
			{
				return 0uL;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
			int num = 0;
			switch (type - 1)
			{
			default:
				if ((int)type == 9)
				{
					num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
				}
				break;
			case 0:
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
				break;
			case 2:
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
				break;
			case 4:
				num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
				break;
			case 1:
			case 3:
				break;
			}
			return (ulong)num;
		}
	}

	public class Server : Server, ISocketManager
	{
		private SocketManager manager;

		private bool relay;

		private const int bufferSize = 32;

		public static readonly int[] lanePriorities = new int[3] { 1, 0, 1 };

		public static readonly ushort[] laneWeights = new ushort[3] { 4, 1, 1 };

		public override string ProtocolId => "sw";

		public Server(bool enableSteamDatagramRelay)
		{
			relay = enableSteamDatagramRelay;
		}

		public override bool IsConnected()
		{
			return manager != null;
		}

		public override bool Start(IServerCallback callbacks)
		{
			//IL_009b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c9: Invalid comparison between Unknown and I4
			//IL_012f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						if (manager != null)
						{
							throw new Exception("socket not null");
						}
						SteamNetworkingUtils.AllowWithoutAuth = 2;
						SteamNetworkingUtils.Unencrypted = 2;
						SteamNetworkingUtils.SendBufferSize = 4194304;
						SteamNetworkingUtils.SendRateMax = 1048576;
						SteamNetworkingUtils.SendRateMin = 1048576;
						NetAddress val = (string.IsNullOrEmpty(base.ip) ? NetAddress.AnyIp((ushort)base.port) : NetAddress.From(base.ip, (ushort)base.port));
						Debug.Log((object)$"Server Creating: {val}");
						if (relay)
						{
							NetAddress val2 = default(NetAddress);
							if ((int)SteamNetworkingSockets.GetFakeIP(0, ref val2) == 1)
							{
								Debug.Log((object)$"Server Fake IP: {val2}");
							}
							else
							{
								SteamNetworkingSockets.OnFakeIPResult += delegate(NetAddress fakeAddressCallback)
								{
									//IL_0005: Unknown result type (might be due to invalid IL or missing references)
									Debug.Log((object)$"Server Fake IP: {fakeAddressCallback}");
								};
							}
							manager = SteamNetworkingSockets.CreateRelaySocketFakeIP(0, (ISocketManager)(object)this);
						}
						else
						{
							manager = SteamNetworkingSockets.CreateNormalSocket(val, (ISocketManager)(object)this);
						}
						Debug.Log((object)$"Created Socket: {manager.Socket}");
						((BaseNetwork)this).MultithreadingInit(callbacks);
						if (manager != null)
						{
							base.callbackHandler = callbacks;
							return true;
						}
						return false;
					}
				}
			}
		}

		public override void Stop(string shutdownMsg)
		{
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						if (manager != null)
						{
							Console.WriteLine("[SteamNetworking] Server Shutting Down (" + shutdownMsg + ")");
							manager.Close();
							manager = null;
							((Server)this).Stop(shutdownMsg);
						}
					}
				}
			}
		}

		public override void Disconnect(Connection cn)
		{
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						if (manager != null)
						{
							Connection val = Connection.op_Implicit((uint)cn.guid);
							((Connection)(ref val)).Close(false, 0, "Closing Connection");
							((Server)this).OnDisconnected("Disconnected", cn);
						}
					}
				}
			}
		}

		public override void Kick(Connection cn, string message, bool logfile)
		{
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			lock (((BaseNetwork)this).readLock)
			{
				lock (((BaseNetwork)this).writeLock)
				{
					lock (((BaseNetwork)this).decryptLock)
					{
						if (manager != null)
						{
							NetWrite obj = ((BaseNetwork)this).StartWrite();
							obj.PacketID((Type)14);
							obj.String(message, false);
							obj.SendImmediate(new SendInfo(cn)
							{
								method = (SendMethod)1,
								priority = (Priority)0
							});
							string text = ((object)cn).ToString() + " kicked: " + message;
							if (logfile)
							{
								DebugEx.LogWarning((object)text, (StackTraceLogType)0);
							}
							else
							{
								Console.WriteLine(text);
							}
							Connection val = Connection.op_Implicit((uint)cn.guid);
							((Connection)(ref val)).Close(true, 0, message);
							((Server)this).OnDisconnected("Kicked: " + message, cn);
						}
					}
				}
			}
		}

		public override void Flush(Connection cn)
		{
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			if (manager != null && cn != null)
			{
				Connection val = Connection.op_Implicit((uint)cn.guid);
				((Connection)(ref val)).Flush();
			}
		}

		protected override bool Receive()
		{
			if (manager.Receive(32, false) == 32)
			{
				return true;
			}
			return false;
		}

		public override void ProcessWrite(NetWrite write)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			if (DemoConVars.ServerDemosEnabled)
			{
				((BaseNetwork)this).EnqueueToDemoThread(new DemoQueueItem(write));
			}
			foreach (Connection connection in write.connections)
			{
				ProcessWrite(write, connection);
			}
			write.RemoveReference();
		}

		private unsafe void ProcessWrite(NetWrite write, Connection connection)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0089: Invalid comparison between Unknown and I4
			((BaseNetwork)this).RecordWriteForConnection(connection, write);
			ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(connection, write);
			fixed (byte* array = arraySegment.Array)
			{
				Connection val = Connection.op_Implicit((uint)connection.guid);
				int num = arraySegment.Offset + arraySegment.Count;
				Result val2 = ((Connection)(ref val)).SendMessage((IntPtr)array, num, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexServer(write.method, write.priority, write.channel));
				if ((int)val2 != 1)
				{
					Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val2)/*cast due to .constrained prefix*/).ToString() + ")"));
				}
				int num2 = write.PeekPacketID();
				if (num2 >= 140)
				{
					num2 -= 140;
					PacketProfiler.LogOutbound(num2, 1, num);
				}
			}
		}

		public void OnConnecting(Connection cn, ConnectionInfo info)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			((Connection)(ref cn)).Accept();
		}

		public void OnConnected(Connection cn, ConnectionInfo info)
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Invalid comparison between Unknown and I4
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Expected O, but got Unknown
			Result val = ((Connection)(ref cn)).ConfigureConnectionLanes(lanePriorities, laneWeights);
			if ((int)val != 1)
			{
				Debug.LogWarning((object)("ConfigureConnectionLanes failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
			}
			uint id = ((Connection)(ref cn)).Id;
			NetAddress address = ((ConnectionInfo)(ref info)).Address;
			string ipaddress = ((object)(NetAddress)(ref address)/*cast due to .constrained prefix*/).ToString();
			Connection val2 = new Connection();
			val2.guid = id;
			val2.ipaddress = ipaddress;
			val2.active = true;
			((Server)this).OnNewConnection(val2);
		}

		public void OnDisconnected(Connection cn, ConnectionInfo info)
		{
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			((Connection)(ref cn)).Close(false, 0, "Closing Connection");
			Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
			if (val != null)
			{
				((Server)this).OnDisconnected("Disconnected", val);
			}
		}

		public unsafe void OnMessage(Connection cn, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
			if (val == null)
			{
				return;
			}
			if (size > 10000000)
			{
				((Server)this).Kick(val, "Packet Size", val.connected);
				return;
			}
			if (val.GetPacketsPerSecond(0) >= Server.MaxPacketsPerSecond)
			{
				((Server)this).Kick(val, "Packet Flooding", val.connected);
				return;
			}
			val.AddPacketsPerSecond(0);
			NetRead val2 = Pool.Get<NetRead>();
			Span<byte> span = new Span<byte>(data.ToPointer(), size);
			val2.Start(val, span);
			if (BaseNetwork.Multithreading)
			{
				((BaseNetwork)this).EnqueueDecrypt(val2);
			}
			else
			{
				((BaseNetwork)this).ProcessDecrypt(val2);
			}
		}

		public override void ProcessRead(NetRead read)
		{
			byte b = read.PacketID();
			b -= 140;
			Message val = ((BaseNetwork)this).StartMessage((Type)b, read);
			if (base.callbackHandler != null)
			{
				base.callbackHandler.OnNetworkMessage(val);
			}
			Pool.Free<Message>(ref val);
			read.RemoveReference();
		}

		public override string GetDebug(Connection connection)
		{
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			if (connection == null)
			{
				return string.Empty;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			return ((Connection)(ref val)).DetailedStatus();
		}

		public override int GetAveragePing(Connection connection)
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			if (connection == null)
			{
				return 0;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
			return ((ConnectionStatus)(ref val2)).Ping;
		}

		public override ulong GetStat(Connection connection, StatTypeLong type)
		{
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Expected I4, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Invalid comparison between Unknown and I4
			if (connection == null)
			{
				return 0uL;
			}
			Connection val = Connection.op_Implicit((uint)connection.guid);
			ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
			int num = 0;
			switch (type - 1)
			{
			default:
				if ((int)type == 9)
				{
					num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
				}
				break;
			case 0:
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
				break;
			case 2:
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
				break;
			case 4:
				num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
				break;
			case 1:
			case 3:
				break;
			}
			return (ulong)num;
		}

		public override bool LimitConnectionsPerIP()
		{
			return !relay;
		}
	}

	[ClientVar]
	[ServerVar]
	public static bool steamnagleflush;

	[ClientVar(Help = "Turns on varying levels of debug output for the Steam Networking. This will affect performance. (0 = off, 1 = bug, 2 = error, 3 = important, 4 = warning, 5 = message, 6 = verbose, 7 = debug, 8 = everything)")]
	[ServerVar(Help = "Turns on varying levels of debug output for the Steam Networking. This will affect performance. (0 = off, 1 = bug, 2 = error, 3 = important, 4 = warning, 5 = message, 6 = verbose, 7 = debug, 8 = everything)")]
	public static int steamnetdebug
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Expected I4, but got Unknown
			return (int)SteamNetworkingUtils.DebugLevel;
		}
		set
		{
			SteamNetworkingUtils.DebugLevel = (NetDebugOutput)value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_ackrtt
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelAckRTT;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelAckRTT = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_packetdecode
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelPacketDecode;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelPacketDecode = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_message
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelMessage;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelMessage = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_packetgaps
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelPacketGaps;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelPacketGaps = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_p2prendezvous
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelP2PRendezvous;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelP2PRendezvous = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamnetdebug_sdrrelaypings
	{
		get
		{
			return SteamNetworkingUtils.DebugLevelSDRRelayPings;
		}
		set
		{
			SteamNetworkingUtils.DebugLevelSDRRelayPings = value;
		}
	}

	[ClientVar]
	[ServerVar]
	public static int steamconnectiontimeout
	{
		get
		{
			return SteamNetworkingUtils.ConnectionTimeout;
		}
		set
		{
			SteamNetworkingUtils.ConnectionTimeout = value;
		}
	}

	[ClientVar]
	[ServerVar(Help = "Upper limit of buffered pending bytes to be sent")]
	public static int steamsendbuffer
	{
		get
		{
			return SteamNetworkingUtils.SendBufferSize;
		}
		set
		{
			SteamNetworkingUtils.SendBufferSize = value;
		}
	}

	[ClientVar]
	[ServerVar(Help = "Minimum send rate clamp, 0 is no limit")]
	public static int steamsendratemin
	{
		get
		{
			return SteamNetworkingUtils.SendRateMin;
		}
		set
		{
			SteamNetworkingUtils.SendRateMin = value;
		}
	}

	[ClientVar]
	[ServerVar(Help = "Maxminum send rate clamp, 0 is no limit")]
	public static int steamsendratemax
	{
		get
		{
			return SteamNetworkingUtils.SendRateMax;
		}
		set
		{
			SteamNetworkingUtils.SendRateMax = value;
		}
	}

	[ClientVar]
	[ServerVar(Help = "Nagle time, in microseconds")]
	public static int steamnagletime
	{
		get
		{
			return SteamNetworkingUtils.NagleTime;
		}
		set
		{
			SteamNetworkingUtils.NagleTime = value;
		}
	}

	public static SendType ToSteamSendType(SendMethod method, Priority priority)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Invalid comparison between Unknown and I4
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Invalid comparison between Unknown and I4
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		SendType val = (SendType)(((int)method != 2) ? 8 : 0);
		if ((int)priority == 0)
		{
			val = (SendType)(val | 1);
		}
		if ((int)method == 2)
		{
			val = (SendType)(val | 4);
		}
		return val;
	}

	public static ushort ToSteamLaneIndexServer(SendMethod method, Priority priority, sbyte channel)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Invalid comparison between Unknown and I4
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Invalid comparison between Unknown and I4
		if ((int)priority == 0 && ((int)method == 2 || (int)method == 1))
		{
			return 1;
		}
		return (ushort)channel;
	}

	public static ushort ToSteamLaneIndexClient(SendMethod method, Priority priority, sbyte channel)
	{
		return (ushort)channel;
	}

	public static void InitRelayNetworkAccess()
	{
		SteamNetworkingUtils.InitRelayNetworkAccess();
	}

	public static void SetDebugFunction()
	{
		SteamNetworkingUtils.OnDebugOutput += SteamNetworkingUtils_OnDebugOutput;
	}

	private static void SteamNetworkingUtils_OnDebugOutput(NetDebugOutput type, string str)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		DebugEx.Log((object)$"[SteamNet_{type}] {str}", (StackTraceLogType)0);
	}

	[ClientVar]
	[ServerVar]
	public static string steamstatus()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Invalid comparison between Unknown and I4
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		StringBuilder stringBuilder = new StringBuilder();
		NetIdentity identity = SteamNetworkingSockets.Identity;
		stringBuilder.AppendLine("[Steam Identity] " + ((object)(NetIdentity)(ref identity)/*cast due to .constrained prefix*/).ToString());
		NetAddress val = default(NetAddress);
		Result fakeIP = SteamNetworkingSockets.GetFakeIP(0, ref val);
		if ((int)fakeIP == 1)
		{
			NetAddress val2 = val;
			stringBuilder.AppendLine("[Steam Fake IP] " + ((object)(NetAddress)(ref val2)/*cast due to .constrained prefix*/).ToString());
		}
		else
		{
			stringBuilder.AppendLine("[Steam Fake IP] " + ((object)(Result)(ref fakeIP)/*cast due to .constrained prefix*/).ToString());
		}
		SteamNetworkingAvailability status = SteamNetworkingUtils.Status;
		stringBuilder.AppendLine("[Steam Datagram Relay Status] " + ((object)(SteamNetworkingAvailability)(ref status)/*cast due to .constrained prefix*/).ToString());
		return stringBuilder.ToString();
	}

	[ClientVar]
	[ServerVar]
	public static void steamrelayinit()
	{
		InitRelayNetworkAccess();
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using System.IO;
using Network;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class Client : Client, IConnectionManager
{
	private ConnectionManager manager;

	private const int bufferSize = 32;

	public override bool IsConnected()
	{
		return manager != null;
	}

	public override bool Connect(string strURL, int port)
	{
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Expected O, but got Unknown
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					((Client)this).Connect(strURL, port);
					SteamNetworkingUtils.AllowWithoutAuth = 2;
					SteamNetworkingUtils.Unencrypted = 2;
					SteamNetworkingUtils.SendRateMax = 1048576;
					SteamNetworkingUtils.SendRateMin = 1048576;
					NetAddress val = NetAddress.From(strURL, (ushort)port);
					manager = SteamNetworkingSockets.ConnectNormal(val, (IConnectionManager)(object)this);
					if (manager == null)
					{
						return false;
					}
					((Connection)(ref manager.Connection)).ConfigureConnectionLanes(Server.lanePriorities, Server.laneWeights);
					((Client)this).ConnectedAddress = strURL;
					((Client)this).ConnectedPort = port;
					((Client)this).ServerName = "";
					((Client)this).Connection = new Connection();
					((BaseNetwork)this).MultithreadingInit((IServerCallback)null);
					return true;
				}
			}
		}
	}

	protected override bool Receive()
	{
		if (manager.Receive(32, false) == 32)
		{
			return true;
		}
		return false;
	}

	public override void Disconnect(string reason, bool sendReasonToServer)
	{
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (sendReasonToServer && manager != null)
					{
						NetWrite obj = ((BaseNetwork)this).StartWrite();
						obj.PacketID((Type)14);
						obj.String(reason, false);
						obj.SendImmediate(new SendInfo(((Client)this).Connection)
						{
							method = (SendMethod)1,
							priority = (Priority)0
						});
						if (manager != null)
						{
							manager.Close(true, 0, reason);
							manager = null;
						}
					}
					else if (manager != null)
					{
						manager.Close(false, 0, "Closing Connection");
						manager = null;
					}
					((Client)this).ConnectedAddress = "";
					((Client)this).ConnectedPort = 0;
					((Client)this).Connection = null;
					((Client)this).OnDisconnected(reason);
				}
			}
		}
	}

	public override void Flush()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (manager != null && ((Client)this).Connection != null)
		{
			Connection val = Connection.op_Implicit((uint)((Client)this).Connection.guid);
			((Connection)(ref val)).Flush();
		}
	}

	public unsafe override void ProcessWrite(NetWrite write)
	{
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Invalid comparison between Unknown and I4
		ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(((Client)this).Connection, write);
		fixed (byte* array = arraySegment.Array)
		{
			Result val = ((Connection)(ref manager.Connection)).SendMessage((IntPtr)array, arraySegment.Offset + arraySegment.Count, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexClient(write.method, write.priority, write.channel));
			if ((int)val != 1)
			{
				Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
			}
		}
		write.RemoveReference();
	}

	void IConnectionManager.OnConnecting(ConnectionInfo info)
	{
	}

	void IConnectionManager.OnConnected(ConnectionInfo info)
	{
		((Client)this).Connection.guid = ((Connection)(ref manager.Connection)).Id;
	}

	void IConnectionManager.OnDisconnected(ConnectionInfo info)
	{
		if (((Client)this).Connection != null)
		{
			((Client)this).Disconnect(Client.disconnectReason, false);
		}
	}

	unsafe void IConnectionManager.OnMessage(IntPtr data, int datasize, long messageNum, long recvTime, int channel)
	{
		NetRead val = Pool.Get<NetRead>();
		Span<byte> span = new Span<byte>(data.ToPointer(), datasize);
		val.Start(((Client)this).Connection, span);
		if (BaseNetwork.Multithreading)
		{
			((BaseNetwork)this).EnqueueDecrypt(val);
		}
		else
		{
			((BaseNetwork)this).ProcessDecrypt(val);
		}
	}

	public override void ProcessRead(NetRead read)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		((BaseNetwork)this).RecordReadForConnection(read.connection, read);
		byte b = read.PacketID();
		b -= 140;
		Type val;
		if (read.connection == null)
		{
			string[] obj = new string[5] { "Ignoring message (", null, null, null, null };
			val = (Type)b;
			obj[1] = ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString();
			obj[2] = " ";
			obj[3] = b.ToString();
			obj[4] = " connection is null)";
			Debug.LogWarning((object)string.Concat(obj));
			read.RemoveReference();
			return;
		}
		if (b > 28)
		{
			val = (Type)28;
			Debug.LogWarning((object)("Invalid Packet (higher than " + ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
			((Client)this).Disconnect("Invalid Packet (" + b + ") " + ((Stream)(object)read).Length + "b", true);
			read.RemoveReference();
			return;
		}
		Message val2 = ((BaseNetwork)this).StartMessage((Type)b, read);
		if (base.callbackHandler != null)
		{
			try
			{
				TimeWarning val3 = TimeWarning.New("OnMessage", 0);
				try
				{
					base.callbackHandler.OnNetworkMessage(val2);
				}
				finally
				{
					((IDisposable)val3)?.Dispose();
				}
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
				((Client)this).Disconnect(ex.Message + "\n" + ex.StackTrace, true);
			}
		}
		Pool.Free<Message>(ref val2);
		read.RemoveReference();
	}

	public override string GetDebug(Connection connection)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			connection = ((Client)this).Connection;
		}
		if (connection == null)
		{
			return string.Empty;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		return ((Connection)(ref val)).DetailedStatus();
	}

	public override int GetLastPing()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		Connection connection = ((Client)this).Connection;
		if (connection == null)
		{
			return 1;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		return ((ConnectionStatus)(ref val2)).Ping;
	}

	public override ulong GetStat(Connection connection, StatTypeLong type)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Expected I4, but got Unknown
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Invalid comparison between Unknown and I4
		if (connection == null)
		{
			connection = ((Client)this).Connection;
		}
		if (connection == null)
		{
			return 0uL;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		int num = 0;
		switch (type - 1)
		{
		default:
			if ((int)type == 9)
			{
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
			}
			break;
		case 0:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
			break;
		case 2:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
			break;
		case 4:
			num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
			break;
		case 1:
		case 3:
			break;
		}
		return (ulong)num;
	}
}


using System;
using Network;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class Server : Server, ISocketManager
{
	private SocketManager manager;

	private bool relay;

	private const int bufferSize = 32;

	public static readonly int[] lanePriorities = new int[3] { 1, 0, 1 };

	public static readonly ushort[] laneWeights = new ushort[3] { 4, 1, 1 };

	public override string ProtocolId => "sw";

	public Server(bool enableSteamDatagramRelay)
	{
		relay = enableSteamDatagramRelay;
	}

	public override bool IsConnected()
	{
		return manager != null;
	}

	public override bool Start(IServerCallback callbacks)
	{
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Invalid comparison between Unknown and I4
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						throw new Exception("socket not null");
					}
					SteamNetworkingUtils.AllowWithoutAuth = 2;
					SteamNetworkingUtils.Unencrypted = 2;
					SteamNetworkingUtils.SendBufferSize = 4194304;
					SteamNetworkingUtils.SendRateMax = 1048576;
					SteamNetworkingUtils.SendRateMin = 1048576;
					NetAddress val = (string.IsNullOrEmpty(base.ip) ? NetAddress.AnyIp((ushort)base.port) : NetAddress.From(base.ip, (ushort)base.port));
					Debug.Log((object)$"Server Creating: {val}");
					if (relay)
					{
						NetAddress val2 = default(NetAddress);
						if ((int)SteamNetworkingSockets.GetFakeIP(0, ref val2) == 1)
						{
							Debug.Log((object)$"Server Fake IP: {val2}");
						}
						else
						{
							SteamNetworkingSockets.OnFakeIPResult += delegate(NetAddress fakeAddressCallback)
							{
								//IL_0005: Unknown result type (might be due to invalid IL or missing references)
								Debug.Log((object)$"Server Fake IP: {fakeAddressCallback}");
							};
						}
						manager = SteamNetworkingSockets.CreateRelaySocketFakeIP(0, (ISocketManager)(object)this);
					}
					else
					{
						manager = SteamNetworkingSockets.CreateNormalSocket(val, (ISocketManager)(object)this);
					}
					Debug.Log((object)$"Created Socket: {manager.Socket}");
					((BaseNetwork)this).MultithreadingInit(callbacks);
					if (manager != null)
					{
						base.callbackHandler = callbacks;
						return true;
					}
					return false;
				}
			}
		}
	}

	public override void Stop(string shutdownMsg)
	{
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						Console.WriteLine("[SteamNetworking] Server Shutting Down (" + shutdownMsg + ")");
						manager.Close();
						manager = null;
						((Server)this).Stop(shutdownMsg);
					}
				}
			}
		}
	}

	public override void Disconnect(Connection cn)
	{
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						Connection val = Connection.op_Implicit((uint)cn.guid);
						((Connection)(ref val)).Close(false, 0, "Closing Connection");
						((Server)this).OnDisconnected("Disconnected", cn);
					}
				}
			}
		}
	}

	public override void Kick(Connection cn, string message, bool logfile)
	{
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						NetWrite obj = ((BaseNetwork)this).StartWrite();
						obj.PacketID((Type)14);
						obj.String(message, false);
						obj.SendImmediate(new SendInfo(cn)
						{
							method = (SendMethod)1,
							priority = (Priority)0
						});
						string text = ((object)cn).ToString() + " kicked: " + message;
						if (logfile)
						{
							DebugEx.LogWarning((object)text, (StackTraceLogType)0);
						}
						else
						{
							Console.WriteLine(text);
						}
						Connection val = Connection.op_Implicit((uint)cn.guid);
						((Connection)(ref val)).Close(true, 0, message);
						((Server)this).OnDisconnected("Kicked: " + message, cn);
					}
				}
			}
		}
	}

	public override void Flush(Connection cn)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		if (manager != null && cn != null)
		{
			Connection val = Connection.op_Implicit((uint)cn.guid);
			((Connection)(ref val)).Flush();
		}
	}

	protected override bool Receive()
	{
		if (manager.Receive(32, false) == 32)
		{
			return true;
		}
		return false;
	}

	public override void ProcessWrite(NetWrite write)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if (DemoConVars.ServerDemosEnabled)
		{
			((BaseNetwork)this).EnqueueToDemoThread(new DemoQueueItem(write));
		}
		foreach (Connection connection in write.connections)
		{
			ProcessWrite(write, connection);
		}
		write.RemoveReference();
	}

	private unsafe void ProcessWrite(NetWrite write, Connection connection)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Invalid comparison between Unknown and I4
		((BaseNetwork)this).RecordWriteForConnection(connection, write);
		ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(connection, write);
		fixed (byte* array = arraySegment.Array)
		{
			Connection val = Connection.op_Implicit((uint)connection.guid);
			int num = arraySegment.Offset + arraySegment.Count;
			Result val2 = ((Connection)(ref val)).SendMessage((IntPtr)array, num, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexServer(write.method, write.priority, write.channel));
			if ((int)val2 != 1)
			{
				Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val2)/*cast due to .constrained prefix*/).ToString() + ")"));
			}
			int num2 = write.PeekPacketID();
			if (num2 >= 140)
			{
				num2 -= 140;
				PacketProfiler.LogOutbound(num2, 1, num);
			}
		}
	}

	public void OnConnecting(Connection cn, ConnectionInfo info)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		((Connection)(ref cn)).Accept();
	}

	public void OnConnected(Connection cn, ConnectionInfo info)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Invalid comparison between Unknown and I4
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Expected O, but got Unknown
		Result val = ((Connection)(ref cn)).ConfigureConnectionLanes(lanePriorities, laneWeights);
		if ((int)val != 1)
		{
			Debug.LogWarning((object)("ConfigureConnectionLanes failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
		}
		uint id = ((Connection)(ref cn)).Id;
		NetAddress address = ((ConnectionInfo)(ref info)).Address;
		string ipaddress = ((object)(NetAddress)(ref address)/*cast due to .constrained prefix*/).ToString();
		Connection val2 = new Connection();
		val2.guid = id;
		val2.ipaddress = ipaddress;
		val2.active = true;
		((Server)this).OnNewConnection(val2);
	}

	public void OnDisconnected(Connection cn, ConnectionInfo info)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		((Connection)(ref cn)).Close(false, 0, "Closing Connection");
		Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
		if (val != null)
		{
			((Server)this).OnDisconnected("Disconnected", val);
		}
	}

	public unsafe void OnMessage(Connection cn, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
		if (val == null)
		{
			return;
		}
		if (size > 10000000)
		{
			((Server)this).Kick(val, "Packet Size", val.connected);
			return;
		}
		if (val.GetPacketsPerSecond(0) >= Server.MaxPacketsPerSecond)
		{
			((Server)this).Kick(val, "Packet Flooding", val.connected);
			return;
		}
		val.AddPacketsPerSecond(0);
		NetRead val2 = Pool.Get<NetRead>();
		Span<byte> span = new Span<byte>(data.ToPointer(), size);
		val2.Start(val, span);
		if (BaseNetwork.Multithreading)
		{
			((BaseNetwork)this).EnqueueDecrypt(val2);
		}
		else
		{
			((BaseNetwork)this).ProcessDecrypt(val2);
		}
	}

	public override void ProcessRead(NetRead read)
	{
		byte b = read.PacketID();
		b -= 140;
		Message val = ((BaseNetwork)this).StartMessage((Type)b, read);
		if (base.callbackHandler != null)
		{
			base.callbackHandler.OnNetworkMessage(val);
		}
		Pool.Free<Message>(ref val);
		read.RemoveReference();
	}

	public override string GetDebug(Connection connection)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			return string.Empty;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		return ((Connection)(ref val)).DetailedStatus();
	}

	public override int GetAveragePing(Connection connection)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			return 0;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		return ((ConnectionStatus)(ref val2)).Ping;
	}

	public override ulong GetStat(Connection connection, StatTypeLong type)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Expected I4, but got Unknown
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Invalid comparison between Unknown and I4
		if (connection == null)
		{
			return 0uL;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		int num = 0;
		switch (type - 1)
		{
		default:
			if ((int)type == 9)
			{
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
			}
			break;
		case 0:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
			break;
		case 2:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
			break;
		case 4:
			num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
			break;
		case 1:
		case 3:
			break;
		}
		return (ulong)num;
	}

	public override bool LimitConnectionsPerIP()
	{
		return !relay;
	}
}


