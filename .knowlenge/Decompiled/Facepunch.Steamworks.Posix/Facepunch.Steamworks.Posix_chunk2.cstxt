using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct Lobby
{
	[CompilerGenerated]
	private sealed class <get_Data>d__16 : IEnumerable<KeyValuePair<string, string>>, IEnumerable, IEnumerator<KeyValuePair<string, string>>, IDisposable, IEnumerator
	{
		private int <>1__state;

		private KeyValuePair<string, string> <>2__current;

		private int <>l__initialThreadId;

		public Lobby <>4__this;

		public Lobby <>3__<>4__this;

		private int <cnt>5__2;

		private int <i>5__3;

		KeyValuePair<string, string> IEnumerator<KeyValuePair<string, string>>.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		object IEnumerator.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		[DebuggerHidden]
		public <get_Data>d__16(int <>1__state)
		{
			this.<>1__state = <>1__state;
			<>l__initialThreadId = Environment.CurrentManagedThreadId;
		}

		[DebuggerHidden]
		void IDisposable.Dispose()
		{
			<>1__state = -2;
		}

		private bool MoveNext()
		{
			int num = <>1__state;
			if (num != 0)
			{
				if (num != 1)
				{
					return false;
				}
				<>1__state = -1;
				goto IL_0079;
			}
			<>1__state = -1;
			<cnt>5__2 = SteamMatchmaking.Internal.GetLobbyDataCount(<>4__this.Id);
			<i>5__3 = 0;
			goto IL_0089;
			IL_0079:
			<i>5__3++;
			goto IL_0089;
			IL_0089:
			if (<i>5__3 < <cnt>5__2)
			{
				if (SteamMatchmaking.Internal.GetLobbyDataByIndex(<>4__this.Id, <i>5__3, out var pchKey, out var pchValue))
				{
					<>2__current = new KeyValuePair<string, string>(pchKey, pchValue);
					<>1__state = 1;
					return true;
				}
				goto IL_0079;
			}
			return false;
		}

		bool IEnumerator.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in MoveNext
			return this.MoveNext();
		}

		[DebuggerHidden]
		void IEnumerator.Reset()
		{
			throw new NotSupportedException();
		}

		[DebuggerHidden]
		IEnumerator<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>>.GetEnumerator()
		{
			<get_Data>d__16 <get_Data>d__;
			if (<>1__state == -2 && <>l__initialThreadId == Environment.CurrentManagedThreadId)
			{
				<>1__state = 0;
				<get_Data>d__ = this;
			}
			else
			{
				<get_Data>d__ = new <get_Data>d__16(0);
			}
			<get_Data>d__.<>4__this = <>3__<>4__this;
			return <get_Data>d__;
		}

		[DebuggerHidden]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return ((IEnumerable<KeyValuePair<string, string>>)this).GetEnumerator();
		}
	}

	[CompilerGenerated]
	private sealed class <get_Members>d__11 : IEnumerable<Friend>, IEnumerable, IEnumerator<Friend>, IDisposable, IEnumerator
	{
		private int <>1__state;

		private Friend <>2__current;

		private int <>l__initialThreadId;

		public Lobby <>4__this;

		public Lobby <>3__<>4__this;

		private int <i>5__2;

		Friend IEnumerator<Friend>.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		object IEnumerator.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		[DebuggerHidden]
		public <get_Members>d__11(int <>1__state)
		{
			this.<>1__state = <>1__state;
			<>l__initialThreadId = Environment.CurrentManagedThreadId;
		}

		[DebuggerHidden]
		void IDisposable.Dispose()
		{
			<>1__state = -2;
		}

		private bool MoveNext()
		{
			switch (<>1__state)
			{
			default:
				return false;
			case 0:
				<>1__state = -1;
				<i>5__2 = 0;
				break;
			case 1:
				<>1__state = -1;
				<i>5__2++;
				break;
			}
			if (<i>5__2 < <>4__this.MemberCount)
			{
				<>2__current = new Friend(SteamMatchmaking.Internal.GetLobbyMemberByIndex(<>4__this.Id, <i>5__2));
				<>1__state = 1;
				return true;
			}
			return false;
		}

		bool IEnumerator.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in MoveNext
			return this.MoveNext();
		}

		[DebuggerHidden]
		void IEnumerator.Reset()
		{
			throw new NotSupportedException();
		}

		[DebuggerHidden]
		IEnumerator<Friend> IEnumerable<Friend>.GetEnumerator()
		{
			<get_Members>d__11 <get_Members>d__;
			if (<>1__state == -2 && <>l__initialThreadId == Environment.CurrentManagedThreadId)
			{
				<>1__state = 0;
				<get_Members>d__ = this;
			}
			else
			{
				<get_Members>d__ = new <get_Members>d__11(0);
			}
			<get_Members>d__.<>4__this = <>3__<>4__this;
			return <get_Members>d__;
		}

		[DebuggerHidden]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return ((IEnumerable<Friend>)this).GetEnumerator();
		}
	}

	public SteamId Id { get; internal set; }

	public int MemberCount => SteamMatchmaking.Internal.GetNumLobbyMembers(Id);

	public IEnumerable<Friend> Members
	{
		[IteratorStateMachine(typeof(<get_Members>d__11))]
		get
		{
			//yield-return decompiler failed: Unexpected instruction in Iterator.Dispose()
			return new <get_Members>d__11(-2)
			{
				<>3__<>4__this = this
			};
		}
	}

	public IEnumerable<KeyValuePair<string, string>> Data
	{
		[IteratorStateMachine(typeof(<get_Data>d__16))]
		get
		{
			//yield-return decompiler failed: Unexpected instruction in Iterator.Dispose()
			return new <get_Data>d__16(-2)
			{
				<>3__<>4__this = this
			};
		}
	}

	public int MaxMembers
	{
		get
		{
			return SteamMatchmaking.Internal.GetLobbyMemberLimit(Id);
		}
		set
		{
			SteamMatchmaking.Internal.SetLobbyMemberLimit(Id, value);
		}
	}

	public Friend Owner
	{
		get
		{
			return new Friend(SteamMatchmaking.Internal.GetLobbyOwner(Id));
		}
		set
		{
			SteamMatchmaking.Internal.SetLobbyOwner(Id, value.Id);
		}
	}

	public Lobby(SteamId id)
	{
		Id = id;
	}

	public async Task<RoomEnter> Join()
	{
		LobbyEnter_t? lobbyEnter_t = await SteamMatchmaking.Internal.JoinLobby(Id);
		if (!lobbyEnter_t.HasValue)
		{
			return RoomEnter.Error;
		}
		return (RoomEnter)lobbyEnter_t.Value.EChatRoomEnterResponse;
	}

	public void Leave()
	{
		SteamMatchmaking.Internal.LeaveLobby(Id);
	}

	public bool InviteFriend(SteamId steamid)
	{
		return SteamMatchmaking.Internal.InviteUserToLobby(Id, steamid);
	}

	public string GetData(string key)
	{
		return SteamMatchmaking.Internal.GetLobbyData(Id, key);
	}

	public bool SetData(string key, string value)
	{
		if (key.Length > 255)
		{
			throw new ArgumentException("Key should be < 255 chars", "key");
		}
		if (value.Length > 8192)
		{
			throw new ArgumentException("Value should be < 8192 chars", "key");
		}
		return SteamMatchmaking.Internal.SetLobbyData(Id, key, value);
	}

	public bool DeleteData(string key)
	{
		return SteamMatchmaking.Internal.DeleteLobbyData(Id, key);
	}

	public string GetMemberData(Friend member, string key)
	{
		return SteamMatchmaking.Internal.GetLobbyMemberData(Id, member.Id, key);
	}

	public void SetMemberData(string key, string value)
	{
		SteamMatchmaking.Internal.SetLobbyMemberData(Id, key, value);
	}

	public bool SendChatString(string message)
	{
		byte[] bytes = Utility.Utf8NoBom.GetBytes(message + "\0");
		return SendChatBytes(bytes);
	}

	public unsafe bool SendChatBytes(byte[] data)
	{
		fixed (byte* ptr = data)
		{
			return SendChatBytesUnsafe(ptr, data.Length);
		}
	}

	public unsafe bool SendChatBytesUnsafe(byte* ptr, int length)
	{
		return SteamMatchmaking.Internal.SendLobbyChatMsg(Id, (IntPtr)ptr, length);
	}

	public bool Refresh()
	{
		return SteamMatchmaking.Internal.RequestLobbyData(Id);
	}

	public bool SetPublic()
	{
		return SteamMatchmaking.Internal.SetLobbyType(Id, LobbyType.Public);
	}

	public bool SetPrivate()
	{
		return SteamMatchmaking.Internal.SetLobbyType(Id, LobbyType.Private);
	}

	public bool SetInvisible()
	{
		return SteamMatchmaking.Internal.SetLobbyType(Id, LobbyType.Invisible);
	}

	public bool SetFriendsOnly()
	{
		return SteamMatchmaking.Internal.SetLobbyType(Id, LobbyType.FriendsOnly);
	}

	public bool SetJoinable(bool b)
	{
		return SteamMatchmaking.Internal.SetLobbyJoinable(Id, b);
	}

	public void SetGameServer(SteamId steamServer)
	{
		if (!steamServer.IsValid)
		{
			throw new ArgumentException("SteamId for server is invalid");
		}
		SteamMatchmaking.Internal.SetLobbyGameServer(Id, 0u, 0, steamServer);
	}

	public void SetGameServer(string ip, ushort port)
	{
		if (!IPAddress.TryParse(ip, out IPAddress address))
		{
			throw new ArgumentException("IP address for server is invalid");
		}
		SteamMatchmaking.Internal.SetLobbyGameServer(Id, address.IpToInt32(), port, default(SteamId));
	}

	public bool GetGameServer(ref uint ip, ref ushort port, ref SteamId serverId)
	{
		return SteamMatchmaking.Internal.GetLobbyGameServer(Id, ref ip, ref port, ref serverId);
	}

	public bool IsOwnedBy(SteamId k)
	{
		return (ulong)Owner.Id == (ulong)k;
	}
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct LobbyQuery
{
	internal LobbyDistanceFilter? distance;

	internal Dictionary<string, string> stringFilters;

	internal List<NumericalFilter> numericalFilters;

	internal Dictionary<string, int> nearValFilters;

	internal int? slotsAvailable;

	internal int? maxResults;

	public LobbyQuery FilterDistanceClose()
	{
		distance = LobbyDistanceFilter.Close;
		return this;
	}

	public LobbyQuery FilterDistanceFar()
	{
		distance = LobbyDistanceFilter.Far;
		return this;
	}

	public LobbyQuery FilterDistanceWorldwide()
	{
		distance = LobbyDistanceFilter.Worldwide;
		return this;
	}

	public LobbyQuery WithKeyValue(string key, string value)
	{
		if (string.IsNullOrEmpty(key))
		{
			throw new ArgumentException("Key string provided for LobbyQuery filter is null or empty", "key");
		}
		if (key.Length > SteamMatchmaking.MaxLobbyKeyLength)
		{
			throw new ArgumentException($"Key length is longer than {SteamMatchmaking.MaxLobbyKeyLength}", "key");
		}
		if (stringFilters == null)
		{
			stringFilters = new Dictionary<string, string>();
		}
		stringFilters.Add(key, value);
		return this;
	}

	public LobbyQuery WithLower(string key, int value)
	{
		AddNumericalFilter(key, value, LobbyComparison.LessThan);
		return this;
	}

	public LobbyQuery WithHigher(string key, int value)
	{
		AddNumericalFilter(key, value, LobbyComparison.GreaterThan);
		return this;
	}

	public LobbyQuery WithEqual(string key, int value)
	{
		AddNumericalFilter(key, value, LobbyComparison.Equal);
		return this;
	}

	public LobbyQuery WithNotEqual(string key, int value)
	{
		AddNumericalFilter(key, value, LobbyComparison.NotEqual);
		return this;
	}

	internal void AddNumericalFilter(string key, int value, LobbyComparison compare)
	{
		if (string.IsNullOrEmpty(key))
		{
			throw new ArgumentException("Key string provided for LobbyQuery filter is null or empty", "key");
		}
		if (key.Length > SteamMatchmaking.MaxLobbyKeyLength)
		{
			throw new ArgumentException($"Key length is longer than {SteamMatchmaking.MaxLobbyKeyLength}", "key");
		}
		if (numericalFilters == null)
		{
			numericalFilters = new List<NumericalFilter>();
		}
		numericalFilters.Add(new NumericalFilter(key, value, compare));
	}

	public LobbyQuery OrderByNear(string key, int value)
	{
		if (string.IsNullOrEmpty(key))
		{
			throw new ArgumentException("Key string provided for LobbyQuery filter is null or empty", "key");
		}
		if (key.Length > SteamMatchmaking.MaxLobbyKeyLength)
		{
			throw new ArgumentException($"Key length is longer than {SteamMatchmaking.MaxLobbyKeyLength}", "key");
		}
		if (nearValFilters == null)
		{
			nearValFilters = new Dictionary<string, int>();
		}
		nearValFilters.Add(key, value);
		return this;
	}

	public LobbyQuery WithSlotsAvailable(int minSlots)
	{
		slotsAvailable = minSlots;
		return this;
	}

	public LobbyQuery WithMaxResults(int max)
	{
		maxResults = max;
		return this;
	}

	private void ApplyFilters()
	{
		if (distance.HasValue)
		{
			SteamMatchmaking.Internal.AddRequestLobbyListDistanceFilter(distance.Value);
		}
		if (slotsAvailable.HasValue)
		{
			SteamMatchmaking.Internal.AddRequestLobbyListFilterSlotsAvailable(slotsAvailable.Value);
		}
		if (maxResults.HasValue)
		{
			SteamMatchmaking.Internal.AddRequestLobbyListResultCountFilter(maxResults.Value);
		}
		if (stringFilters != null)
		{
			foreach (KeyValuePair<string, string> stringFilter in stringFilters)
			{
				SteamMatchmaking.Internal.AddRequestLobbyListStringFilter(stringFilter.Key, stringFilter.Value, LobbyComparison.Equal);
			}
		}
		if (numericalFilters != null)
		{
			foreach (NumericalFilter numericalFilter in numericalFilters)
			{
				SteamMatchmaking.Internal.AddRequestLobbyListNumericalFilter(numericalFilter.Key, numericalFilter.Value, numericalFilter.Comparer);
			}
		}
		if (nearValFilters == null)
		{
			return;
		}
		foreach (KeyValuePair<string, int> nearValFilter in nearValFilters)
		{
			SteamMatchmaking.Internal.AddRequestLobbyListNearValueFilter(nearValFilter.Key, nearValFilter.Value);
		}
	}

	public async Task<Lobby[]> RequestAsync()
	{
		ApplyFilters();
		LobbyMatchList_t? lobbyMatchList_t = await SteamMatchmaking.Internal.RequestLobbyList();
		if (!lobbyMatchList_t.HasValue || lobbyMatchList_t.Value.LobbiesMatching == 0)
		{
			return null;
		}
		Lobby[] array = new Lobby[lobbyMatchList_t.Value.LobbiesMatching];
		for (int i = 0; i < lobbyMatchList_t.Value.LobbiesMatching; i++)
		{
			array[i] = new Lobby
			{
				Id = SteamMatchmaking.Internal.GetLobbyByIndex(i)
			};
		}
		return array;
	}
}


using Steamworks;

internal struct NumericalFilter
{
	public string Key { get; internal set; }

	public int Value { get; internal set; }

	public LobbyComparison Comparer { get; internal set; }

	internal NumericalFilter(string k, int v, LobbyComparison c)
	{
		Key = k;
		Value = v;
		Comparer = c;
	}
}


public struct OutgoingPacket
{
	public uint Address { get; internal set; }

	public ushort Port { get; internal set; }

	public byte[] Data { get; internal set; }

	public int Size { get; internal set; }
}


using Steamworks;

public struct P2Packet
{
	public SteamId SteamId;

	public byte[] Data;
}


using Steamworks;
using Steamworks.Data;

public struct RemotePlaySession
{
	public uint Id { get; set; }

	public bool IsValid => Id != 0;

	public SteamId SteamId => SteamRemotePlay.Internal.GetSessionSteamID(Id);

	public string ClientName => SteamRemotePlay.Internal.GetSessionClientName(Id);

	public SteamDeviceFormFactor FormFactor => SteamRemotePlay.Internal.GetSessionClientFormFactor(Id);

	public override string ToString()
	{
		return Id.ToString();
	}

	public static implicit operator RemotePlaySession(uint value)
	{
		RemotePlaySession result = default(RemotePlaySession);
		result.Id = value;
		return result;
	}

	public static implicit operator uint(RemotePlaySession value)
	{
		return value.Id;
	}
}


using Steamworks;
using Steamworks.Data;

public struct Screenshot
{
	internal ScreenshotHandle Value;

	public bool TagUser(SteamId user)
	{
		return SteamScreenshots.Internal.TagUser(Value, user);
	}

	public bool SetLocation(string location)
	{
		return SteamScreenshots.Internal.SetLocation(Value, location);
	}

	public bool TagPublishedFile(PublishedFileId file)
	{
		return SteamScreenshots.Internal.TagPublishedFile(Value, file);
	}
}


using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct ServerInfo : IEquatable<ServerInfo>
{
	private string[] _tags;

	internal const uint k_unFavoriteFlagNone = 0u;

	internal const uint k_unFavoriteFlagFavorite = 1u;

	internal const uint k_unFavoriteFlagHistory = 2u;

	public string Name { get; set; }

	public int Ping { get; set; }

	public string GameDir { get; set; }

	public string Map { get; set; }

	public string Description { get; set; }

	public uint AppId { get; set; }

	public int Players { get; set; }

	public int MaxPlayers { get; set; }

	public int BotPlayers { get; set; }

	public bool Passworded { get; set; }

	public bool Secure { get; set; }

	public uint LastTimePlayed { get; set; }

	public int Version { get; set; }

	public string TagString { get; set; }

	public ulong SteamId { get; set; }

	public uint AddressRaw { get; set; }

	public IPAddress Address { get; set; }

	public int ConnectionPort { get; set; }

	public int QueryPort { get; set; }

	public string[] Tags
	{
		get
		{
			if (_tags == null && !string.IsNullOrEmpty(TagString))
			{
				_tags = TagString.Split(new char[1] { ',' });
			}
			return _tags;
		}
	}

	internal static ServerInfo From(gameserveritem_t item)
	{
		ServerInfo result = default(ServerInfo);
		result.AddressRaw = item.NetAdr.IP;
		result.Address = Utility.Int32ToIp(item.NetAdr.IP);
		result.ConnectionPort = item.NetAdr.ConnectionPort;
		result.QueryPort = item.NetAdr.QueryPort;
		result.Name = item.ServerNameUTF8();
		result.Ping = item.Ping;
		result.GameDir = item.GameDirUTF8();
		result.Map = item.MapUTF8();
		result.Description = item.GameDescriptionUTF8();
		result.AppId = item.AppID;
		result.Players = item.Players;
		result.MaxPlayers = item.MaxPlayers;
		result.BotPlayers = item.BotPlayers;
		result.Passworded = item.Password;
		result.Secure = item.Secure;
		result.LastTimePlayed = item.TimeLastPlayed;
		result.Version = item.ServerVersion;
		result.TagString = item.GameTagsUTF8();
		result.SteamId = item.SteamID;
		return result;
	}

	public ServerInfo(uint ip, ushort cport, ushort qport, uint timeplayed)
	{
		this = default(ServerInfo);
		AddressRaw = ip;
		Address = Utility.Int32ToIp(ip);
		ConnectionPort = cport;
		QueryPort = qport;
		LastTimePlayed = timeplayed;
	}

	public void AddToHistory()
	{
		SteamMatchmaking.Internal.AddFavoriteGame(SteamClient.AppId, AddressRaw, (ushort)ConnectionPort, (ushort)QueryPort, 2u, (uint)Epoch.Current);
	}

	public async Task<Dictionary<string, string>> QueryRulesAsync()
	{
		return await SourceServerQuery.GetRules(this);
	}

	public void RemoveFromHistory()
	{
		SteamMatchmaking.Internal.RemoveFavoriteGame(SteamClient.AppId, AddressRaw, (ushort)ConnectionPort, (ushort)QueryPort, 2u);
	}

	public void AddToFavourites()
	{
		SteamMatchmaking.Internal.AddFavoriteGame(SteamClient.AppId, AddressRaw, (ushort)ConnectionPort, (ushort)QueryPort, 1u, (uint)Epoch.Current);
	}

	public void RemoveFromFavourites()
	{
		SteamMatchmaking.Internal.RemoveFavoriteGame(SteamClient.AppId, AddressRaw, (ushort)ConnectionPort, (ushort)QueryPort, 1u);
	}

	public bool Equals(ServerInfo other)
	{
		return GetHashCode() == other.GetHashCode();
	}

	public override int GetHashCode()
	{
		return Address.GetHashCode() + SteamId.GetHashCode() + ConnectionPort.GetHashCode() + QueryPort.GetHashCode();
	}
}


using System;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct Stat
{
	public string Name { get; internal set; }

	public SteamId UserId { get; internal set; }

	public Stat(string name)
	{
		Name = name;
		UserId = 0uL;
	}

	public Stat(string name, SteamId user)
	{
		Name = name;
		UserId = user;
	}

	internal void LocalUserOnly([CallerMemberName] string caller = null)
	{
		if ((ulong)UserId == 0L)
		{
			return;
		}
		throw new Exception("Stat." + caller + " can only be called for the local user");
	}

	public double GetGlobalFloat()
	{
		double pData = 0.0;
		if (SteamUserStats.Internal.GetGlobalStat(Name, ref pData))
		{
			return pData;
		}
		return 0.0;
	}

	public long GetGlobalInt()
	{
		long pData = 0L;
		SteamUserStats.Internal.GetGlobalStat(Name, ref pData);
		return pData;
	}

	public async Task<long[]> GetGlobalIntDaysAsync(int days)
	{
		GlobalStatsReceived_t? globalStatsReceived_t = await SteamUserStats.Internal.RequestGlobalStats(days);
		if (!globalStatsReceived_t.HasValue || globalStatsReceived_t.GetValueOrDefault().Result != Result.OK)
		{
			return null;
		}
		long[] array = new long[days];
		int globalStatHistory = SteamUserStats.Internal.GetGlobalStatHistory(Name, array, (uint)(array.Length * 8));
		if (days != globalStatHistory)
		{
			array = array.Take(globalStatHistory).ToArray();
		}
		return array;
	}

	public async Task<double[]> GetGlobalFloatDays(int days)
	{
		GlobalStatsReceived_t? globalStatsReceived_t = await SteamUserStats.Internal.RequestGlobalStats(days);
		if (!globalStatsReceived_t.HasValue || globalStatsReceived_t.GetValueOrDefault().Result != Result.OK)
		{
			return null;
		}
		double[] array = new double[days];
		int globalStatHistory = SteamUserStats.Internal.GetGlobalStatHistory(Name, array, (uint)(array.Length * 8));
		if (days != globalStatHistory)
		{
			array = array.Take(globalStatHistory).ToArray();
		}
		return array;
	}

	public float GetFloat()
	{
		float pData = 0f;
		if ((ulong)UserId != 0)
		{
			SteamUserStats.Internal.GetUserStat(UserId, Name, ref pData);
		}
		else
		{
			SteamUserStats.Internal.GetStat(Name, ref pData);
		}
		return pData;
	}

	public int GetInt()
	{
		int pData = 0;
		if ((ulong)UserId != 0)
		{
			SteamUserStats.Internal.GetUserStat(UserId, Name, ref pData);
		}
		else
		{
			SteamUserStats.Internal.GetStat(Name, ref pData);
		}
		return pData;
	}

	public bool Set(int val)
	{
		LocalUserOnly("Set");
		return SteamUserStats.Internal.SetStat(Name, val);
	}

	public bool Set(float val)
	{
		LocalUserOnly("Set");
		return SteamUserStats.Internal.SetStat(Name, val);
	}

	public bool Add(int val)
	{
		LocalUserOnly("Add");
		return Set(GetInt() + val);
	}

	public bool Add(float val)
	{
		LocalUserOnly("Add");
		return Set(GetFloat() + val);
	}

	public bool UpdateAverageRate(float count, float sessionlength)
	{
		LocalUserOnly("UpdateAverageRate");
		return SteamUserStats.Internal.UpdateAvgRateStat(Name, count, sessionlength);
	}

	public bool Store()
	{
		LocalUserOnly("Store");
		return SteamUserStats.Internal.StoreStats();
	}
}


using Steamworks.Data;

public struct Ugc
{
	internal UGCHandle_t Handle;
}


using Steamworks;

public struct UgcAdditionalPreview
{
	public string UrlOrVideoID { get; private set; }

	public string OriginalFileName { get; private set; }

	public ItemPreviewType ItemPreviewType { get; private set; }

	internal UgcAdditionalPreview(string urlOrVideoID, string originalFileName, ItemPreviewType itemPreviewType)
	{
		UrlOrVideoID = urlOrVideoID;
		OriginalFileName = originalFileName;
		ItemPreviewType = itemPreviewType;
	}
}


using System;
using System.Runtime.InteropServices;
using Steamworks.Data;

[StructLayout(LayoutKind.Sequential, Pack = 4)]
internal struct CallbackMsg_t
{
	public HSteamUser m_hSteamUser;

	public CallbackType Type;

	public IntPtr Data;

	public int DataSize;
}


using System;

private struct ResultCallback
{
	public Action continuation;

	public bool server;
}


using System;

private struct Callback
{
	public Action<IntPtr> action;

	public bool server;
}


using System;
using System.Runtime.InteropServices;
using Steamworks.Data;

internal static class Native
{
	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern SteamAPIInitResult SteamInternal_SteamAPI_Init(IntPtr pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg);

	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern void SteamAPI_Shutdown();

	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern HSteamPipe SteamAPI_GetHSteamPipe();

	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	public static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
}


using System.Runtime.InteropServices;
using Steamworks.Data;

internal static class Native
{
	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern void SteamGameServer_RunCallbacks();

	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern void SteamGameServer_Shutdown();

	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern HSteamPipe SteamGameServer_GetHSteamPipe();
}


using System;
using System.Runtime.InteropServices;

internal static class Native
{
	[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
	public static extern SteamAPIInitResult SteamInternal_GameServer_Init_V2(uint unIP, ushort usGamePort, ushort usQueryPort, int eServerMode, IntPtr pchVersionString, IntPtr pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg);
}


using System;
using System.Threading;

private sealed class ReferenceCounter
{
	private int _count;

	public IntPtr Pointer { get; private set; }

	public int Size { get; private set; }

	public void Set(IntPtr ptr, int size, int referenceCount)
	{
		if (ptr == IntPtr.Zero)
		{
			throw new ArgumentNullException("ptr");
		}
		if (size <= 0)
		{
			throw new ArgumentOutOfRangeException("size");
		}
		if (referenceCount <= 0)
		{
			throw new ArgumentOutOfRangeException("referenceCount");
		}
		Pointer = ptr;
		Size = size;
		Interlocked.Exchange(ref _count, referenceCount);
	}

	public bool Decrement()
	{
		int num = Interlocked.Decrement(ref _count);
		if (num < 0)
		{
			SteamNetworkingUtils.LogDebugMessage(NetDebugOutput.Bug, "Prevented double free of BufferManager pointer");
			return false;
		}
		return num == 0;
	}
}


using System.Runtime.InteropServices;
using Steamworks.Data;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
private unsafe delegate void FreeFn(NetMsg* msg);


private struct DebugMessage
{
	public NetDebugOutput Type;

	public string Msg;
}


using System.Net;
using Steamworks.Data;

public struct FriendGameInfo
{
	internal uint GameIP;

	internal ulong SteamIDLobby;

	public GameId GameID;

	public int ConnectionPort;

	public int QueryPort;

	public uint IpAddressRaw => GameIP;

	public IPAddress IpAddress => Utility.Int32ToIp(GameIP);

	public Lobby? Lobby
	{
		get
		{
			if (SteamIDLobby == 0L)
			{
				return null;
			}
			return new Lobby(SteamIDLobby);
		}
	}

	internal static FriendGameInfo From(FriendGameInfo_t i)
	{
		FriendGameInfo result = default(FriendGameInfo);
		result.GameID = i.GameID;
		result.GameIP = i.GameIP;
		result.ConnectionPort = i.GamePort;
		result.QueryPort = i.QueryPort;
		result.SteamIDLobby = i.SteamIDLobby;
		return result;
	}
}


public struct Amount
{
	public InventoryItem Item;

	public int Quantity;
}


using System;

public struct Ingredient
{
	public int DefinitionId;

	public InventoryDef Definition;

	public int Count;

	internal static Ingredient FromString(string part)
	{
		Ingredient result = default(Ingredient);
		result.Count = 1;
		try
		{
			if (part.Contains("x"))
			{
				int num = part.IndexOf('x');
				int result2 = 0;
				if (int.TryParse(part.Substring(num + 1), out result2))
				{
					result.Count = result2;
				}
				part = part.Substring(0, num);
			}
			result.DefinitionId = int.Parse(part);
			result.Definition = SteamInventory.FindDefinition(result.DefinitionId);
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

internal struct Memory : IDisposable
{
	private const int MaxBagSize = 4;

	private static readonly Queue<IntPtr> BufferBag = new Queue<IntPtr>();

	public IntPtr Ptr { get; private set; }

	public static implicit operator IntPtr(in Memory m)
	{
		return m.Ptr;
	}

	internal unsafe static Memory Take()
	{
		IntPtr intPtr;
		lock (BufferBag)
		{
			intPtr = ((BufferBag.Count > 0) ? BufferBag.Dequeue() : Marshal.AllocHGlobal(32768));
		}
		*(sbyte*)(void*)intPtr = 0;
		Memory result = default(Memory);
		result.Ptr = intPtr;
		return result;
	}

	public void Dispose()
	{
		if (Ptr == IntPtr.Zero)
		{
			return;
		}
		lock (BufferBag)
		{
			if (BufferBag.Count < 4)
			{
				BufferBag.Enqueue(Ptr);
			}
			else
			{
				Marshal.FreeHGlobal(Ptr);
			}
		}
		Ptr = IntPtr.Zero;
	}
}


internal enum EFailureType
{
	FlushedCallbackQueue,
	PipeFail
}


internal enum PlayerAcceptState_t
{
	Unknown,
	PlayerAccepted,
	PlayerDeclined
}


internal enum IdentityType
{
	Invalid = 0,
	IPAddress = 1,
	GenericString = 2,
	GenericBytes = 3,
	SteamID = 16
}


internal struct IPV4
{
	internal ulong m_8zeros;

	internal ushort m_0000;

	internal ushort m_ffff;

	internal byte ip0;

	internal byte ip1;

	internal byte ip2;

	internal byte ip3;
}


