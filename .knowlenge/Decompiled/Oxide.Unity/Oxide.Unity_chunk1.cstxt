using System;
using System.Linq;
using Oxide.Core.Logging;
using UnityEngine;

public static class ExtensionMethods
{
	public static Vector3 ToVector3(this string vector3)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		float[] array = vector3.Split(new char[1] { ',' }).Select(Convert.ToSingle).ToArray();
		if (array.Length != 3)
		{
			return Vector3.zero;
		}
		return new Vector3(array[0], array[1], array[2]);
	}

	public static LogType ToLogType(this LogType logType)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Expected I4, but got Unknown
		switch ((int)logType)
		{
		case 0:
		case 1:
		case 4:
			return (LogType)1;
		case 2:
			return (LogType)3;
		default:
			return (LogType)2;
		}
	}
}


using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Plugins;
using Oxide.Core.Unity;
using Oxide.Core.Unity.Plugins;
using UnityEngine;

public class UnityExtension : Extension
{
	internal static Assembly Assembly = Assembly.GetExecutingAssembly();

	internal static AssemblyName AssemblyName = Assembly.GetName();

	internal static VersionNumber AssemblyVersion = new VersionNumber(AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build);

	internal static string AssemblyAuthors = ((AssemblyCompanyAttribute)Attribute.GetCustomAttribute(Assembly, typeof(AssemblyCompanyAttribute), inherit: false)).Company;

	public override bool IsCoreExtension => true;

	public override string Name => "Unity";

	public override string Author => AssemblyAuthors;

	public override VersionNumber Version => AssemblyVersion;

	public UnityExtension(ExtensionManager manager)
		: base(manager)
	{
	}

	public override void Load()
	{
		Interface.Oxide.LogInfo("Unity version: " + Application.unityVersion, new object[0]);
		((Extension)this).Manager.RegisterPluginLoader((PluginLoader)(object)new UnityPluginLoader());
		Interface.Oxide.RegisterEngineClock((Func<float>)(() => UnityScript.RealtimeSinceStartup));
		UnityScript.Create();
	}

	public override void LoadPluginWatchers(string pluginDirectory)
	{
	}

	public override void OnModLoad()
	{
	}
}


using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Unity;
using UnityEngine;

public class UnityScript : MonoBehaviour
{
	private OxideMod oxideMod;

	public static GameObject Instance { get; private set; }

	public static float RealtimeSinceStartup { get; private set; }

	public static void Create()
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Expected O, but got Unknown
		Instance = new GameObject("Oxide.Core.Unity");
		Object.DontDestroyOnLoad((Object)(object)Instance);
		Instance.AddComponent<UnityScript>();
	}

	private void Awake()
	{
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Expected O, but got Unknown
		RealtimeSinceStartup = Time.realtimeSinceStartup;
		oxideMod = Interface.Oxide;
		EventInfo @event = typeof(Application).GetEvent("logMessageReceived");
		if ((object)@event == null)
		{
			LogCallback logCallback = default(LogCallback);
			ref LogCallback reference = ref logCallback;
			object? obj = typeof(Application).GetField("s_LogCallback", BindingFlags.Static | BindingFlags.NonPublic)?.GetValue(null);
			reference = (LogCallback)((obj is LogCallback) ? obj : null);
			if (logCallback == null)
			{
				Interface.Oxide.LogWarning("No Unity application log callback is registered", new object[0]);
			}
			Application.RegisterLogCallback((LogCallback)delegate(string message, string stack_trace, LogType type)
			{
				//IL_000e: Unknown result type (might be due to invalid IL or missing references)
				//IL_001c: Unknown result type (might be due to invalid IL or missing references)
				LogCallback obj2 = logCallback;
				if (obj2 != null)
				{
					obj2.Invoke(message, stack_trace, type);
				}
				LogMessageReceived(message, stack_trace, type);
			});
		}
		else
		{
			Delegate @delegate = Delegate.CreateDelegate(@event.EventHandlerType, this, "LogMessageReceived");
			@event.GetAddMethod().Invoke(null, new object[1] { @delegate });
		}
	}

	private void Update()
	{
		RealtimeSinceStartup = Time.realtimeSinceStartup;
		oxideMod.OnFrame(Time.deltaTime);
	}

	private void OnDestroy()
	{
		if (!oxideMod.IsShuttingDown)
		{
			oxideMod.LogWarning("The Oxide Unity Script was destroyed (creating a new instance)", new object[0]);
			oxideMod.NextTick((Action)Create);
		}
	}

	private void OnApplicationQuit()
	{
		if (!oxideMod.IsShuttingDown)
		{
			Interface.Call("OnServerShutdown", new object[0]);
			Interface.Oxide.OnShutdown();
		}
	}

	private void LogMessageReceived(string message, string stackTrace, LogType type)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Invalid comparison between Unknown and I4
		if ((int)type == 4)
		{
			RemoteLogger.Exception(message, stackTrace);
		}
	}
}


using System;
using Oxide.Core;
using Oxide.Core.Logging;
using Oxide.Core.Plugins;
using Oxide.Core.Unity;
using Oxide.Core.Unity.Logging;
using UnityEngine;

public class UnityCore : CSPlugin
{
	private UnityLogger logger;

	public UnityCore()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		((Plugin)this).Title = "Unity";
		((Plugin)this).Author = UnityExtension.AssemblyAuthors;
		((Plugin)this).Version = UnityExtension.AssemblyVersion;
	}

	[HookMethod("InitLogging")]
	private void InitLogging()
	{
		Interface.Oxide.NextTick((Action)delegate
		{
			logger = new UnityLogger();
			Interface.Oxide.RootLogger.AddLogger((Logger)(object)logger);
			Interface.Oxide.RootLogger.DisableCache();
		});
	}

	public void Print(string message)
	{
		Debug.Log((object)message);
	}

	public void PrintWarning(string message)
	{
		Debug.LogWarning((object)message);
	}

	public void PrintError(string message)
	{
		Debug.LogError((object)message);
	}
}


using System;
using Oxide.Core.Plugins;
using Oxide.Core.Unity.Plugins;

public class UnityPluginLoader : PluginLoader
{
	public override Type[] CorePlugins => new Type[1] { typeof(UnityCore) };
}


using System;
using System.Threading;
using Oxide.Core;
using Oxide.Core.Logging;
using UnityEngine;

public sealed class UnityLogger : Logger
{
	private readonly Thread mainThread = Thread.CurrentThread;

	public UnityLogger()
		: base(true)
	{
	}

	protected override void ProcessMessage(LogMessage message)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Invalid comparison between Unknown and I4
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Invalid comparison between Unknown and I4
		if (Thread.CurrentThread != mainThread)
		{
			Interface.Oxide.NextTick((Action)delegate
			{
				//IL_0007: Unknown result type (might be due to invalid IL or missing references)
				((Logger)this).ProcessMessage(message);
			});
			return;
		}
		LogType type = message.Type;
		if ((int)type != 1)
		{
			if ((int)type == 3)
			{
				Debug.LogWarning((object)message.ConsoleMessage);
			}
			else
			{
				Debug.Log((object)message.ConsoleMessage);
			}
		}
		else
		{
			Debug.LogError((object)message.ConsoleMessage);
		}
	}
}


