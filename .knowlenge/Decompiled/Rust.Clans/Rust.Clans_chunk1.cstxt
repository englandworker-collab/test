public struct ClanChatEntry
{
	public ulong SteamId;

	public string Name;

	public string Message;

	public long Time;
}


using System.Collections.Generic;

public struct ClanChatScrollback
{
	public long ClanId;

	public List<ClanChatEntry> Entries;
}


using System;

[Flags]
public enum ClanDataSource
{
	Basic = 1,
	Motd = 2,
	Logo = 4,
	Roles = 8,
	Members = 0x10,
	Invites = 0x20,
	Score = 0x40,
	All = -1
}


public struct ClanInvitation
{
	public long ClanId;

	public ulong Recruiter;

	public long Timestamp;
}


public struct ClanInvite
{
	public ulong SteamId;

	public ulong Recruiter;

	public long Timestamp;
}


public struct ClanLeaderboardEntry
{
	public long ClanId;

	public string Name;

	public long Score;
}


public struct ClanLogEntry
{
	public long Timestamp;

	public string EventKey;

	public string Arg1;

	public string Arg2;

	public string Arg3;

	public string Arg4;
}


using System.Collections.Generic;

public struct ClanLogs
{
	public long ClanId;

	public List<ClanLogEntry> Entries;
}


public struct ClanMember
{
	public ulong SteamId;

	public int RoleId;

	public long Joined;

	public long LastSeen;

	public string Notes;

	public long NotesTimestamp;
}


public enum ClanResult
{
	Fail,
	Success,
	Timeout,
	NoClan,
	NotFound,
	NoPermission,
	InvalidText,
	InvalidLogo,
	InvalidColor,
	DuplicateName,
	RoleNotEmpty,
	CannotSwapLeader,
	CannotDeleteLeader,
	CannotKickLeader,
	CannotDemoteLeader,
	AlreadyInAClan,
	CantModifyClanHere,
	ClanIsFull
}


public struct ClanRole
{
	public int RoleId;

	public int Rank;

	public string Name;

	public bool CanSetMotd;

	public bool CanSetLogo;

	public bool CanInvite;

	public bool CanKick;

	public bool CanPromote;

	public bool CanDemote;

	public bool CanSetPlayerNotes;

	public bool CanAccessLogs;

	public bool CanAccessScoreEvents;
}


public enum ClanScoreEventType
{
	Generic = 0,
	ClanPlayerKilled = 1,
	ClanPlayerDied = 2,
	UnarmedPlayerKilled = 3,
	DestroyedToolCupboard = 4,
	HackedCrate = 5,
	OpenedHackedCrate = 6,
	DestroyedBradley = 7,
	RanExcavator = 8,
	ReachedCargoShip = 9,
	LootedEliteCrate = 10,
	Invalid = -1
}


public struct ClanScoreEvent
{
	public long Timestamp;

	public ClanScoreEventType Type;

	public int Score;

	public int Multiplier;

	public ulong? SteamId;

	public ulong? OtherSteamId;

	public long? OtherClanId;

	public string Arg1;

	public string Arg2;
}


using System.Collections.Generic;

public struct ClanScoreEvents
{
	public long ClanId;

	public List<ClanScoreEvent> ScoreEvents;
}


using System;

public static class ClanUtility
{
	public const int LeaderRank = 1;

	public static long Timestamp()
	{
		return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
	}
}


using System.Text;

public static class ClanValidator
{
	private static readonly StringBuilder Builder = new StringBuilder(64);

	public static bool ValidateClanName(string name, out string validated)
	{
		validated = Normalize(name);
		if (!ValidateLength(validated, 3, 32) || !ValidateAlphanumericOnly(validated))
		{
			validated = null;
			return false;
		}
		return true;
	}

	public static bool ValidateRoleName(string name, out string validated)
	{
		return ValidateClanName(name, out validated);
	}

	public static bool ValidateMotd(string motd, out string validated)
	{
		validated = Normalize(motd, 30);
		if (!ValidateLength(validated, 0, 4096))
		{
			validated = null;
			return false;
		}
		return true;
	}

	public static bool ValidatePlayerNote(string note, out string validated)
	{
		validated = Normalize(note, 3);
		if (!ValidateLength(validated, 0, 256))
		{
			validated = null;
			return false;
		}
		return true;
	}

	public static bool ValidateChatMessage(string message, out string validated)
	{
		validated = Normalize(message);
		if (!ValidateLength(validated, 0, 128))
		{
			validated = null;
			return false;
		}
		return true;
	}

	private static string Normalize(string value, int maxLines = 1)
	{
		if (value == null)
		{
			return null;
		}
		value = value.Trim();
		int num = maxLines - 1;
		bool flag = false;
		Builder.Clear();
		for (int i = 0; i < value.Length; i++)
		{
			if (value[i] == '\n' && num > 0)
			{
				num--;
				Builder.Append('\n');
				continue;
			}
			bool flag2 = char.IsSurrogatePair(value, i);
			bool num2 = char.IsWhiteSpace(value, i);
			if (!num2)
			{
				Builder.Append(value[i]);
				if (flag2)
				{
					Builder.Append(value[i + 1]);
				}
			}
			else if (!flag)
			{
				Builder.Append(' ');
			}
			flag = num2;
			if (flag2)
			{
				i++;
			}
		}
		return Builder.ToString().Normalize(NormalizationForm.FormC);
	}

	private static bool ValidateLength(string value, int min, int max)
	{
		if (string.IsNullOrWhiteSpace(value))
		{
			return false;
		}
		if (value.Length >= min)
		{
			return value.Length <= max;
		}
		return false;
	}

	private static bool ValidateAlphanumericOnly(string value)
	{
		if (value == null)
		{
			return false;
		}
		for (int i = 0; i < value.Length; i++)
		{
			char c = value[i];
			if (c != ' ' && c != '\'' && c != '-' && !char.IsLetterOrDigit(value, i))
			{
				return false;
			}
			if (char.IsSurrogatePair(value, i))
			{
				i++;
			}
		}
		return true;
	}
}


using System;

public readonly struct ClanValueResult<T>
{
	public readonly ClanResult Result;

	private readonly T _value;

	public bool IsSuccess => Result == ClanResult.Success;

	public T Value
	{
		get
		{
			if (!IsSuccess)
			{
				throw new InvalidOperationException("Result is an error and has no value.");
			}
			return _value;
		}
	}

	public ClanValueResult(ClanResult result)
	{
		if (result == ClanResult.Success)
		{
			throw new ArgumentException("Success result requires a value.", "result");
		}
		Result = result;
		_value = default(T);
	}

	public ClanValueResult(T value)
	{
		Result = ClanResult.Success;
		_value = value;
	}

	public static implicit operator ClanValueResult<T>(ClanResult result)
	{
		return new ClanValueResult<T>(result);
	}

	public static implicit operator ClanValueResult<T>(T value)
	{
		return new ClanValueResult<T>(value);
	}
}


using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

public interface IClan
{
	long ClanId { get; }

	string Name { get; }

	long Created { get; }

	ulong Creator { get; }

	string Motd { get; }

	long MotdTimestamp { get; }

	ulong MotdAuthor { get; }

	byte[] Logo { get; }

	Color32 Color { get; }

	long Score { get; }

	IReadOnlyList<ClanRole> Roles { get; }

	IReadOnlyList<ClanMember> Members { get; }

	int MaxMemberCount { get; }

	IReadOnlyList<ClanInvite> Invites { get; }

	ValueTask RefreshIfStale();

	ValueTask<ClanValueResult<ClanLogs>> GetLogs(int limit, ulong bySteamId);

	ValueTask<ClanResult> UpdateLastSeen(ulong steamId);

	ValueTask<ClanResult> SetMotd(string newMotd, ulong bySteamId);

	ValueTask<ClanResult> SetLogo(byte[] newLogo, ulong bySteamId);

	ValueTask<ClanResult> SetColor(Color32 newColor, ulong bySteamId);

	ValueTask<ClanResult> Invite(ulong steamId, ulong bySteamId);

	ValueTask<ClanResult> CancelInvite(ulong steamId, ulong bySteamId);

	ValueTask<ClanResult> AcceptInvite(ulong steamId);

	ValueTask<ClanResult> Kick(ulong steamId, ulong bySteamId);

	ValueTask<ClanResult> SetPlayerRole(ulong steamId, int newRoleId, ulong bySteamId);

	ValueTask<ClanResult> SetPlayerNotes(ulong steamId, string notes, ulong bySteamId);

	ValueTask<ClanResult> CreateRole(ClanRole role, ulong bySteamId);

	ValueTask<ClanResult> UpdateRole(ClanRole role, ulong bySteamId);

	ValueTask<ClanResult> SwapRoleRanks(int roleIdA, int roleIdB, ulong bySteamId);

	ValueTask<ClanResult> DeleteRole(int roleId, ulong bySteamId);

	ValueTask<ClanResult> Disband(ulong bySteamId);

	ValueTask<ClanValueResult<ClanScoreEvents>> GetScoreEvents(int limit, ulong bySteamId);

	ValueTask<ClanResult> AddScoreEvent(ClanScoreEvent scoreEvent);

	ValueTask<ClanValueResult<ClanChatScrollback>> GetChatScrollback();

	ValueTask<ClanResult> SendChatMessage(string name, string message, ulong bySteamId);
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IClanBackend : IDisposable
{
	ValueTask Initialize(IClanChangeSink changeSink);

	ValueTask<ClanValueResult<IClan>> Get(long clanId);

	bool TryGet(long clanId, out IClan clan);

	ValueTask<ClanValueResult<IClan>> GetByMember(ulong steamId);

	ValueTask<ClanValueResult<IClan>> Create(ulong leaderSteamId, string name);

	ValueTask<ClanValueResult<List<ClanInvitation>>> ListInvitations(ulong steamId);

	ValueTask<ClanValueResult<List<ClanLeaderboardEntry>>> GetLeaderboard(int limit = 100);
}


public interface IClanChangeSink
{
	void ClanChanged(long clanId, ClanDataSource dataSources);

	void ClanDisbanded(long clanId);

	void InvitationCreated(ulong steamId, long clanId);

	void MembershipChanged(ulong steamId, long? clanId);

	void ClanChatMessage(long clanId, ClanChatEntry entry);
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[859]
		{
			0, 0, 0, 1, 0, 0, 0, 43, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 67,
			108, 97, 110, 115, 92, 67, 108, 97, 110, 67,
			104, 97, 116, 69, 110, 116, 114, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			67, 108, 97, 110, 115, 92, 67, 108, 97, 110,
			67, 104, 97, 116, 83, 99, 114, 111, 108, 108,
			98, 97, 99, 107, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 44, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 67, 108, 97, 110,
			115, 92, 67, 108, 97, 110, 73, 110, 118, 105,
			116, 97, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 40, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 67, 108,
			97, 110, 115, 92, 67, 108, 97, 110, 73, 110,
			118, 105, 116, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 50, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 67, 108, 97, 110,
			115, 92, 67, 108, 97, 110, 76, 101, 97, 100,
			101, 114, 98, 111, 97, 114, 100, 69, 110, 116,
			114, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 42, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 67, 108, 97, 110, 115, 92,
			67, 108, 97, 110, 76, 111, 103, 69, 110, 116,
			114, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 38, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 67, 108, 97, 110, 115, 92,
			67, 108, 97, 110, 76, 111, 103, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 40, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			67, 108, 97, 110, 115, 92, 67, 108, 97, 110,
			77, 101, 109, 98, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 38, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 67, 108,
			97, 110, 115, 92, 67, 108, 97, 110, 82, 111,
			108, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 67, 108, 97, 110, 115, 92,
			67, 108, 97, 110, 83, 99, 111, 114, 101, 69,
			118, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 45, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 67, 108, 97, 110,
			115, 92, 67, 108, 97, 110, 83, 99, 111, 114,
			101, 69, 118, 101, 110, 116, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 41, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 67,
			108, 97, 110, 115, 92, 67, 108, 97, 110, 85,
			116, 105, 108, 105, 116, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 43, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 67, 108,
			97, 110, 115, 92, 67, 108, 97, 110, 86, 97,
			108, 105, 100, 97, 116, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 67,
			108, 97, 110, 115, 92, 67, 108, 97, 110, 86,
			97, 108, 117, 101, 82, 101, 115, 117, 108, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			35, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 67, 108, 97, 110, 115, 92, 73, 67,
			108, 97, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 42, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			82, 117, 115, 116, 46, 67, 108, 97, 110, 115,
			92, 73, 67, 108, 97, 110, 66, 97, 99, 107,
			101, 110, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			82, 117, 115, 116, 46, 67, 108, 97, 110, 115,
			92, 73, 67, 108, 97, 110, 67, 104, 97, 110,
			103, 101, 83, 105, 110, 107, 46, 99, 115
		};
		result.TypesData = new byte[315]
		{
			0, 0, 0, 0, 14, 124, 67, 108, 97, 110,
			67, 104, 97, 116, 69, 110, 116, 114, 121, 0,
			0, 0, 0, 19, 124, 67, 108, 97, 110, 67,
			104, 97, 116, 83, 99, 114, 111, 108, 108, 98,
			97, 99, 107, 0, 0, 0, 0, 15, 124, 67,
			108, 97, 110, 73, 110, 118, 105, 116, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 11, 124, 67,
			108, 97, 110, 73, 110, 118, 105, 116, 101, 0,
			0, 0, 0, 21, 124, 67, 108, 97, 110, 76,
			101, 97, 100, 101, 114, 98, 111, 97, 114, 100,
			69, 110, 116, 114, 121, 0, 0, 0, 0, 13,
			124, 67, 108, 97, 110, 76, 111, 103, 69, 110,
			116, 114, 121, 0, 0, 0, 0, 9, 124, 67,
			108, 97, 110, 76, 111, 103, 115, 0, 0, 0,
			0, 11, 124, 67, 108, 97, 110, 77, 101, 109,
			98, 101, 114, 0, 0, 0, 0, 9, 124, 67,
			108, 97, 110, 82, 111, 108, 101, 0, 0, 0,
			0, 15, 124, 67, 108, 97, 110, 83, 99, 111,
			114, 101, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 16, 124, 67, 108, 97, 110, 83, 99, 111,
			114, 101, 69, 118, 101, 110, 116, 115, 0, 0,
			0, 0, 12, 124, 67, 108, 97, 110, 85, 116,
			105, 108, 105, 116, 121, 0, 0, 0, 0, 14,
			124, 67, 108, 97, 110, 86, 97, 108, 105, 100,
			97, 116, 111, 114, 0, 0, 0, 0, 16, 124,
			67, 108, 97, 110, 86, 97, 108, 117, 101, 82,
			101, 115, 117, 108, 116, 0, 0, 0, 0, 6,
			124, 73, 67, 108, 97, 110, 0, 0, 0, 0,
			13, 124, 73, 67, 108, 97, 110, 66, 97, 99,
			107, 101, 110, 100, 0, 0, 0, 0, 16, 124,
			73, 67, 108, 97, 110, 67, 104, 97, 110, 103,
			101, 83, 105, 110, 107
		};
		result.TotalFiles = 17;
		result.TotalTypes = 17;
		result.IsEditorOnly = false;
		return result;
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


