this, player.UserIDString));
					else
						if(config.Setting.UpdateOption)
							ChatMessage(player, lang.GetMessage("CHAT_NOT_ORES_WIPE", this, player.UserIDString));
						else
							ChatMessage(player, string.Format(lang.GetMessage("CHAT_NOT_ORES_UPDATE", this, player.UserIDString), StoredData[player.userID].LastUpdate + config.Setting.UpdateSecond - DateTimeOffset.Now.ToUnixTimeSeconds()));
					
					return;
				}
				
				if(_spawn_room_position.Count != 0)
				{
					Vector3 position = _spawn_room_position.GetRandom();
					_spawn_room_position.Remove(position);
				
					_players_in_room.Add(player.userID, new PlayersInRoom(position, player.transform.position, GetOres(player.userID)));
				
					SpawnFarmRoom(position);
					SpawnOre(player.userID);
					TP(player, position);
				
					GUIFarmRoom(player);
					
					ChatMessage(player, lang.GetMessage("CHAT_JOIN_ROOM", this, player.UserIDString));
				}
				else
					ChatMessage(player, lang.GetMessage("CHAT_NO_ROOMS", this, player.UserIDString));
			}
			else
				ChatMessage(player, lang.GetMessage("CHAT_ALREADY_IN_ROOM", this, player.UserIDString));
		}
		
		private void TP(BasePlayer player, Vector3 position)
		{
			try
			{
				if(player.IsSleeping())
				{
					player.RemoveFromTriggers();
					player.Teleport(position);
					
					if (!IsInvisible(player))
					{
						player.UpdateNetworkGroup();
						player.SendNetworkUpdateImmediate(false);
					}
				}
				else
                {
                    player.UpdateActiveItem(v);
					player.EnsureDismounted();
		   		 		  						  	   		  	  			  		  		  	 	 		  			 
					if (player.HasParent())
						player.SetParent(null, true, true);
	
					player.EndLooting();
					player.SetPlayerFlag(BasePlayer.PlayerFlags.Sleeping, true);
					player.CancelInvoke("InventoryUpdate");
					player.CancelInvoke("TeamUpdate");
	
					player.RemoveFromTriggers();
					player.Teleport(position);

					player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
					player.ClientRPCPlayer(null, player, "StartLoading");
					player.SendEntityUpdate();
		   		 		  						  	   		  	  			  		  		  	 	 		  			 
					if (!IsInvisible(player))
					{
						player.UpdateNetworkGroup();
						player.SendNetworkUpdateImmediate(false);
					}
				}
			}
			finally
			{
				if (!IsInvisible(player))
					player.ForceUpdateTriggers();
			}
		}
        protected override void SaveConfig() => Config.WriteObject(config);
		public List<Vector3> _spawn_room_position = new List<Vector3>();
		private void OnUserPermissionRevoked(string id, string permName) => CheckPermission(id, permName, false);
		
		private bool IsInvisible(BasePlayer player)
        {
            return Vanish != null && Convert.ToBoolean(Vanish.Call("IsInvisible", player));
        }
		
		private List<string> GetOres(ulong userID)
		{
			List<string> list_ore = new List<string>();
			
			foreach(var ore in StoredData[userID].Ore)
			{
				if(ore.Value > 0)
					list_ore.Add(ore.Key);
			}
			
			return list_ore;
		}
		
				
				
		private void OnUserPermissionGranted(string id, string permName) => CheckPermission(id, permName, true);
		
		private void SpawnOre(ulong userID)
		{
			StagedResourceEntity ore = GameManager.server.CreateEntity($"assets/bundled/prefabs/autospawn/resource/ores/{_players_in_room[userID].OresSpawn.GetRandom()}.prefab", _players_in_room[userID].RoomPosition + new Vector3(3, 0.5f, 0)) as StagedResourceEntity;
			
			ore.OwnerID = 10009;
			ore.Spawn();
		}
		
		private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
		{
			if(entity.OwnerID == 100002)
				return true;
			
			return null;
		}
		
		private void CheckGroup(string id, string groupName, bool added)
		{
			if(permission.GroupHasPermission(groupName, "xfarmroom.use"))
			{
				BasePlayer player = BasePlayer.FindByID(ulong.Parse(id));
				
				if(player != null)
					if(added)
					{
						if(config.Setting.ChatMessages)
							ChatMessage(player, lang.GetMessage("GRANTED_PERM", this, player.UserIDString));
					}
					else if(!added && !permission.UserHasPermission(player.UserIDString, "xfarmroom.use"))
					{
						if(config.Setting.ChatMessages)
							ChatMessage(player, lang.GetMessage("REVOKED_PERM", this, player.UserIDString));
						
						if(_players_in_room.ContainsKey(player.userID))
							LeaveFarmRoom(player);
					}
			}
		}
		
				
				
		private object OnServerCommand(ConsoleSystem.Arg args)
		{
			BasePlayer player = args.Player();
			
			if(player != null && player.IsAdmin)
				return null;
			if(player != null && !config.Setting.ConsoleCommand.Contains(args.cmd.FullName) && _players_in_room.ContainsKey(player.userID))
			{
				player.SendConsoleCommand($"echo [ <color=white>FARMROOM</color> ] - {lang.GetMessage("CMD_BLOCK", this, player.UserIDString)}");
				
				return true;
			}
		   		 		  						  	   		  	  			  		  		  	 	 		  			 
			return null;
		}
		
		internal class PlayersInRoom
		{
			public Vector3 RoomPosition;
			public Vector3 LastPlayerPosition;
			public List<string> OresSpawn;
			
			public PlayersInRoom(Vector3 roomposition, Vector3 lastplayerposition, List<string> oresspawn)
			{
				RoomPosition = roomposition; LastPlayerPosition = lastplayerposition; OresSpawn = oresspawn;
			}
		}
		
		private bool CheckPosition(Vector3 position)
		{
			List<BaseEntity> list_entity = new List<BaseEntity>();
			Vis.Entities(position, 10, list_entity);
			
			return list_entity.Count == 0;
		}
		
				
				
		private void InitializeLang()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_LEAVE"] = "LEAVE",
				["CHAT_UPDATE_ORES"] = "The number of available ores has been updated!",
				["CHAT_JOIN_ROOM"] = "You have joined the farm room!",
				["CHAT_LEAVE_ROOM"] = "You have leaved the farm room!",
				["CHAT_NO_PERM"] = "You do not have access to the farm room!",
				["CHAT_NO_ALL_PERM"] = "You do not have all permissions to access the farm room!\n\n<size=10>We did not find you in the DB, you need to purchase ores.</size>",
				["CHAT_SPAWN_POINTS"] = "Unoccupied spawn points  -  {0}",
				["CHAT_NO_ROOMS"] = "All farm rooms are busy, please try again later!",
				["CHAT_ALREADY_IN_ROOM"] = "You are already in the farm room!",
				["CHAT_NOT_IN_ROOM"] = "You are not in the farm room!",
				["CHAT_CD_TP"] = "To get back into the farm room, wait  -  {0} sec.",
				["CHAT_LIMIT_ITEMS"] = "A maximum of {0} items can be taken into a room!",
				["CHAT_NOT_ORES_NOT_PERM"] = "0 ores available!\n<size=12>You can purchase limited/unlimited ores in our shop!</size>",
				["CHAT_NOT_ORES_WIPE"] = "0 ores available!\n<size=12>Update in the next wipe!</size>",
				["CHAT_NOT_ORES_UPDATE"] = "0 ores available!\n<size=12>Update after {0} sec.",
				["CMD_BLOCK"] = "It is forbidden to use this command in the farm room!",
				["GRANTED_PERM"] = "You have access to the farm room functionality!\n\n<size=10>This message will appear when granting access by any means. There may be several.</size>",
				["REVOKED_PERM"] = "You no longer have access to the farm room functionality!"
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_LEAVE"] = "ПОКИНУТЬ",
				["CHAT_UPDATE_ORES"] = "Кол-во доступных камней обновлено!",
				["CHAT_JOIN_ROOM"] = "Вы вошли в фарм комнату!",
				["CHAT_LEAVE_ROOM"] = "Вы покинули фарм комнату!",
				["CHAT_NO_PERM"] = "У вас нет доступа к фарм комнате!",
				["CHAT_NO_ALL_PERM"] = "У вас нет всех разрешений для доступа к фарм комнате!\n\n<size=10>Мы не нашли вас в БД, вам необходимо приобрести камни.</size>",
				["CHAT_SPAWN_POINTS"] = "Свободных точек для спавна  -  {0}",
				["CHAT_NO_ROOMS"] = "Все фарм комнаты заняты, попробуйте позже!",
				["CHAT_ALREADY_IN_ROOM"] = "Вы уже находитесь в фарм комнате!",
				["CHAT_NOT_IN_ROOM"] = "Вы не находитесь в фарм комнате!",
				["CHAT_CD_TP"] = "Чтобы снова попасть в фарм комнату подождите  -  {0} сек.",
				["CHAT_LIMIT_ITEMS"] = "В комнату можно взять максимум {0} предмета!",
				["CHAT_NOT_ORES_NOT_PERM"] = "Доступно 0 камней!\n<size=12>Вы можете приобрести ограниченное/неограниченное кол-во камней в нашем магазине!</size>",
				["CHAT_NOT_ORES_WIPE"] = "Доступно 0 камней!\n<size=12>Обновление в следующем вайпе!</size>",
				["CHAT_NOT_ORES_UPDATE"] = "Доступно 0 камней!\n<size=12>Обновление через {0} сек.</size>",
				["CMD_BLOCK"] = "В фарм комнате запрещено использовать данную команду!",
				["GRANTED_PERM"] = "У вас появился доступ к функционалу фарм комнаты!\n\n<size=10>Данное сообщение будет появляться при выдаче доступа любыми методами. Их может быть несколько.</size>",
				["REVOKED_PERM"] = "Вы больше не имеете доступа к функционалу фарм комнаты!"
            }, this, "ru");
        }
		
		private Dictionary<ulong, Data> StoredData = new Dictionary<ulong, Data>();
		
		[ChatCommand("roomspawns")]
		void cmdSpawnRoomPosition(BasePlayer player)
		{
			if(player.IsAdmin)
			{
				foreach(var position in _spawn_room_position)
					player.SendConsoleCommand("ddraw.sphere", 20.0f, Color.green, position, 10.0f);
				
				ChatMessage(player, string.Format(lang.GetMessage("CHAT_SPAWN_POINTS", this, player.UserIDString), _spawn_room_position.Count));
			}
		}
		
		[ChatCommand("roomleave")]
		void cmdLeaveFarmRoom(BasePlayer player)
		{
			if(!permission.UserHasPermission(player.UserIDString, "xfarmroom.use"))
			{
				ChatMessage(player, lang.GetMessage("CHAT_NO_PERM", this, player.UserIDString));
				return;
			}
			
			if(_players_in_room.ContainsKey(player.userID))
				LeaveFarmRoom(player);
			else
				ChatMessage(player, lang.GetMessage("CHAT_NOT_IN_ROOM", this, player.UserIDString));
		}
		
				
				
		private bool API_PlayerInRoom(ulong userID)
		{
			return _players_in_room.ContainsKey(userID);
		}
		private void OnUserGroupRemoved(string id, string groupName) => CheckGroup(id, groupName, false);
		
		private Coroutine _coroutine;
		
		[ConsoleCommand("farm_ore")]
		void ccmdFarmOre(ConsoleSystem.Arg args)
		{
			BasePlayer player = args.Player();
			
			if(player == null || !_players_in_room.ContainsKey(player.userID)) return;
			
			if(args.Args != null && args.Args.Length >= 2)
			{
				bool ore_farm = Convert.ToBoolean(args.Args[1]);
				string ore_shortname = args.Args[0];
				
				if(StoredData[player.userID].Ore[ore_shortname] > 0)
					if(_players_in_room[player.userID].OresSpawn.Contains(ore_shortname))
						_players_in_room[player.userID].OresSpawn.Remove(ore_shortname);
					else
						_players_in_room[player.userID].OresSpawn.Add(ore_shortname);
			}
			
			GUIFarmRoom(player);
			EffectNetwork.Send(new Effect("assets/bundled/prefabs/fx/notice/loot.drag.grab.fx.prefab", player, 0, new Vector3(), new Vector3()), player.Connection);
		}
		
		private void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
		{
			if(item.info.shortname == "metal.refined" || item.info.shortname == "hq.metal.ore") return;
			if(dispenser == null || player == null) return;
			
			BaseEntity ore = dispenser.GetComponent<BaseEntity>();
			ulong userID = player.userID;
			
			if(ore != null && ore.OwnerID == 10009 && _players_in_room.ContainsKey(userID))
			{
				string shortname = ore.ShortPrefabName;
				StoredData[userID].Ore[shortname] -= 1;
				
				if(StoredData[userID].Ore[shortname] <= 0)
					_players_in_room[userID].OresSpawn.Remove(shortname);
				
				if(_players_in_room[userID].OresSpawn.Count != 0)
				{
					SpawnOre(userID);
					GUIFarmRoom(player);
				}
				else
					LeaveFarmRoom(player);
			}
		}
		
		private Dictionary<ulong, int> Cooldowns = new Dictionary<ulong, int>();
		
		private object OnPlayerCommand(BasePlayer player, string command, string[] args)
		{
			if(player.IsAdmin)
				return null;
			if(!config.Setting.ChatCommand.Contains(command) && _players_in_room.ContainsKey(player.userID))
			{
				ChatMessage(player, lang.GetMessage("CMD_BLOCK", this, player.UserIDString));
				
				return true;
			}	
			
			return null;
		}
		
		private Dictionary<ulong, PlayersInRoom> _players_in_room = new Dictionary<ulong, PlayersInRoom>();
		
		private void OnNewSave()
		{
			timer.Once(10, () =>
			{
				if(config.Setting.DataClear)
				{
					StoredData.Clear();
					SaveData();
				}
				else
				{
					int count = StoredData.Count;
					
					for(int i = 0; i < count; i++)
						StoredData.ElementAt(i).Value.LastUpdate = 0;
					
					SaveData();
				}
			});
		}
		
				
				
		private FarmRoomConfig config;
		
		private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject("XFarmRoom", StoredData);
		
		private void CheckPermission(string id, string permName, bool granted)
		{
			if(permName == "xfarmroom.use")
			{
				BasePlayer player = BasePlayer.FindByID(ulong.Parse(id));
			
				if(player != null)
					if(granted)
					{
						if(config.Setting.ChatMessages)
							ChatMessage(player, lang.GetMessage("GRANTED_PERM", this, player.UserIDString));
					}
					else if(!granted && !permission.UserHasPermission(player.UserIDString, "xfarmroom.use"))
					{
						if(config.Setting.ChatMessages)
							ChatMessage(player, lang.GetMessage("REVOKED_PERM", this, player.UserIDString));
						
						if(_players_in_room.ContainsKey(player.userID))
							LeaveFarmRoom(player);
					}
			}
		}
		
				
				
		private void GUIFarmRoom(BasePlayer player)
		{
			CuiHelper.DestroyUi(player, ".GUI_FARMROOM");
            CuiElementContainer container = new CuiElementContainer();
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-300 16", OffsetMax = "-210 98" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", ".GUI_FARMROOM");
			
			int y = 0;
			
			foreach(var ore in StoredData[player.userID].Ore)
			{
				bool ore_no_zero = ore.Value > 0, in_list = _players_in_room[player.userID].OresSpawn.Contains(ore.Key);
				
				container.Add(new CuiPanel
				{
					RectTransform = { AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = $"0 {-26 - (y * 28)}", OffsetMax = $"0 {0 - (y * 28)}" },
					Image = { Color = "0.9686275 0.9176471 0.8784314 0.02921569", Material = "assets/icons/greyout.mat" }
				}, ".GUI_FARMROOM", ".GUI_ORE");				
				
				container.Add(new CuiElement 
				{
					Parent = ".GUI_ORE",
					Components =
					{
						new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", ore.Key + 150), Color = ore_no_zero ? "1 1 1 1" : "1 1 1 0.2004985" },
						new CuiRectTransformComponent { AnchorMin = "0 0.5", AnchorMax = "0 0.5", OffsetMin = "2.5 -10.5", OffsetMax = "23.5 10.5" }
					}
				});
				
				container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-18 -10.5", OffsetMax = "18 10.5" },
                    Text = { Text = $"{ore.Value}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 12, Color = ore_no_zero ? "1 1 1 1" : "1 1 1 0.2004985" }
                }, ".GUI_ORE");
				
				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "1 0.5", AnchorMax = "1 0.5", OffsetMin = "-23.5 -10.5", OffsetMax = "-2.5 10.5" },
					Button = { Color = ore_no_zero && in_list ? "0.55004985 0.65004985 0.45 1" : ore_no_zero && !in_list ? "0.85004985 0.49004985 0.44 1" : "0.85 0.49 0.44 0.5", Command = $"farm_ore {ore.Key} {!in_list}" },
					Text = { Text = "" }
				}, ".GUI_ORE");
				
				y++;
			}
			
			if(config.Setting.UseUIButton)
				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "-92 0", OffsetMax = "-2 26" },
					Button = { Color = "0.9686275 0.9176471 0.8784314 0.02921569", Material = "assets/icons/greyout.mat", Command = "chat.say /roomleave" },
					Text = { Text = lang.GetMessage("UI_LEAVE", this, player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 13, Color = "1 1 1 0.2004985" }
				}, ".GUI_FARMROOM");
			
			CuiHelper.AddUi(player, container);
		}
		protected override void LoadDefaultConfig() => config = FarmRoomConfig.GetNewConfiguration();
		
				
				
		internal class Data
		{
			[JsonProperty("Последнее обновление доступных камней")] public int LastUpdate;
			[JsonProperty("Доступные камни")] public Dictionary<string, int> Ore;
			
			public Data(int lastupdate, Dictionary<string, int> ore)
			{
				LastUpdate = lastupdate; Ore = ore;
			}
		}
		
		private bool GetOresPermission(BasePlayer player)
		{
			foreach(var perm in config.Permission)
				if(permission.UserHasPermission(player.UserIDString, perm.Key))
				{
					Dictionary<string, int> ores = perm.Value.ToDictionary(x => x.Key, x => x.Value);
					
					if(StoredData.ContainsKey(player.userID))
					{
						if(config.Setting.UpdateOption && StoredData[player.userID].LastUpdate == 0 || !config.Setting.UpdateOption && DateTimeOffset.Now.ToUnixTimeSeconds() - StoredData[player.userID].LastUpdate >= config.Setting.UpdateSecond)
						{
							StoredData[player.userID].LastUpdate = (int)DateTimeOffset.Now.ToUnixTimeSeconds();
							StoredData[player.userID].Ore = ores;
							
							ChatMessage(player, lang.GetMessage("CHAT_UPDATE_ORES", this, player.UserIDString));
						}
					}
					else
						StoredData.Add(player.userID, new Data((int)DateTimeOffset.Now.ToUnixTimeSeconds(), ores));
					
					return false;
				}
				
			return true;
		}
		
		public List<string> _ores_shortname = new List<string>
		{
			"sulfur-ore",
			"metal-ore",
			"stone-ore"
		};
		
				
				
		private void OnServerInitialized()
		{
			PrintWarning("\n-----------------------------\n" +
			"     Author - Monster\n" +
			"     VK - vk.com/idannopol\n" +
			"     Discord - Monster#4837\n" +
			"     Config - v.4985\n" +
			"-----------------------------");
			
			if (Interface.Oxide.DataFileSystem.ExistsDatafile("XFarmRoom"))
				StoredData = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Data>>("XFarmRoom");
			
			if(!ImageLibrary)
			{
				PrintError("У вас не установлен плагин - ImageLibrary!");
				Interface.Oxide.UnloadPlugin(Name);
				
				return;
			}
			
			foreach(var image in _ore_images)
			    if (!ImageLibrary.Call<bool>("HasImage", image.Key + 150))
					ImageLibrary.Call("AddImage", image.Value, image.Key + 150);
				
			foreach(var perm in config.Permission)
				permission.RegisterPermission(perm.Key, this);
				
			permission.RegisterPermission("xfarmroom.use", this);
			permission.RegisterPermission("xfarmroom.nocdtp", this);
			
			InitializeLang();
			
			timer.Every(120, () => SaveData());
			
			if(_coroutine == null)
				_coroutine = ServerMgr.Instance.StartCoroutine(GeneratePosition());
		}
		
		private void SpawnFarmRoom(Vector3 position)
		{
			foreach(var prefabs_room in _prefabs_room)
			{
				BaseEntity prefab = GameManager.server.CreateEntity(prefabs_room.ShortPrefabName, position + prefabs_room.Position, Quaternion.Euler(prefabs_room.Rotation)) as BaseEntity;
				
				prefab.OwnerID = 100002;
				prefab.Spawn();
				
				if(prefab is BuildingBlock)
				{
					BuildingBlock block = prefab as BuildingBlock;
					
					block.grade = BuildingGrade.Enum.Stone;
					block.SetHealthToMax();
				}
				
				if(prefab is IOEntity)
				{
					IOEntity io_entity = prefab as IOEntity;
					
					io_entity.UpdateHasPower(io_entity.ConsumptionAmount(), 0);
					//io_entity.SetFlag(BaseEntity.Flags.On, true);
				}
			}
		}

        private class FarmRoomConfig  
        {		
			internal class GeneralSetting 
			{
				[JsonProperty("Вариант обновления доступных камней. ( только с разрешением на обновление ). [ True - раз в вайп | False - раз в N секунд ]")] public bool UpdateOption;
				[JsonProperty("Очищать дату после вайпа")] public bool DataClear;
				[JsonProperty("Ограничивать кол-во предметов которые можно взять в комнату")] public bool UseMaxCountItem;
				[JsonProperty("Использовать UI кнопку для выхода из комнаты")] public bool UseUIButton;
				[JsonProperty("Раз в сколько сек. обновлять кол-во доступных камней. ( проверяется только тогда, когда игрок пытается/попадает в комнату )")] public int UpdateSecond;
				[JsonProperty("Сколько максимум одновременно активных комнат может быть. ( для оптимизации )")] public int MaxCountRoom;
				[JsonProperty("Сколько максимум предметов можно взять в комнату")] public int MaxCountItem;
				[JsonProperty("Перерыв на телепортацию в комнату сек.")] public int CDTPRoom;
				[JsonProperty("Префикс в чате")] public string PrefixChat;
				[JsonProperty("Уведомлять игрока когда ему выдали или отобрали доступ к функционалу фарм комнаты")] public bool ChatMessages;
				[JsonProperty("SteamID профиля для кастомной аватарки")] public ulong SteamID;
				[JsonProperty("Список разрешенных консольных команд в фарм комнате")] public List<string> ConsoleCommand;
				[JsonProperty("Список разрешенных чат команд в фарм комнате")] public List<string> ChatCommand;
			}
			
			[JsonProperty("Общие настройки")]
			public GeneralSetting Setting = new GeneralSetting();
			[JsonProperty("Пермишен - кол-во камней. [ Изменять можно только значение и пермишен ]")]
			public Dictionary<string, Dictionary<string, int>> Permission = new Dictionary<string, Dictionary<string, int>>();											
			
			public static FarmRoomConfig GetNewConfiguration()
            {
                return new FarmRoomConfig
                {
					Setting = new GeneralSetting
					{
						UpdateOption = false,
						DataClear = true,
						UseMaxCountItem = true,
						UseUIButton = true,
						UpdateSecond = 3600,
						MaxCountRoom = 10,
						MaxCountItem = 6,
						CDTPRoom = 90,
						PrefixChat = "<size=12><color=#FFFFFF50>[</color> <color=#00FF0050>XFarmRoom</color> <color=#FFFFFF50>]</color></size>\n",
						ChatMessages = false,
						SteamID = 0,
						ConsoleCommand = new List<string>
						{
							"global.farm_ore"
						},
						ChatCommand = new List<string>
						{
							"roomtp",
							"roomleave"
						}
					},
					Permission = new Dictionary<string, Dictionary<string, int>>
					{
						["xfarmroom.300"] = new Dictionary<string, int>
						{
							["sulfur-ore"] = 300,
							["metal-ore"] = 300,
							["stone-ore"] = 300
						},						
						["xfarmroom.100"] = new Dictionary<string, int>
						{
							["sulfur-ore"] = 100,
							["metal-ore"] = 100,
							["stone-ore"] = 100
						}
					}
				};
			}
        }
		
		private void OnUserGroupAdded(string id, string groupName) => CheckGroup(id, groupName, true);
		
				
		[PluginReference] private Plugin ImageLibrary, Vanish;
		
		private IEnumerator GeneratePosition()
		{
			PrintWarning("Началась генерация точек для спавна фарм комнат!");
			
			int valid_position_count = 0, z = 1;
			float start_position_x_z = World.Serialization.world.size / 2;
			Vector3 start_position = new Vector3(start_position_x_z, 750, start_position_x_z);
			
			while(valid_position_count < config.Setting.MaxCountRoom)
			{
				RemoveRoomOrEntity(start_position);
				
				yield return CoroutineEx.waitForSeconds(0.2f);
				
				if(CheckPosition(start_position))
				{
					_spawn_room_position.Add(start_position);
					valid_position_count++;
				}
				
				yield return CoroutineEx.waitForSeconds(0.2f);
				
				start_position += new Vector3(0, 0, -100);
				
				if(z == 20)
				{
					z = 0;
					
					start_position.z = start_position_x_z;
					start_position += new Vector3(-100, 0, 0);
				}
				
				z++;
			}
			
			PrintWarning($"Генерация завершена! Сгенерировано: {valid_position_count} точек.");
			
			_coroutine = null;
			yield return 0;
		}
		
		private Dictionary<string, string> _ore_images = new Dictionary<string, string>
		{
			["sulfur-ore"] = "https://i.imgur.com/ay3nWKl.png",
			["metal-ore"] = "https://i.imgur.com/fB4VmNf.png",
			["stone-ore"] = "https://i.imgur.com/hJtQcrK.png"
		};
		
		public List<PrefabsRoom> _prefabs_room = new List<PrefabsRoom>
		{
			new PrefabsRoom("assets/prefabs/building core/foundation/foundation.prefab", new Vector3(0, 0, 0), new Vector3(0, 0, 0)),
			new PrefabsRoom("assets/prefabs/building core/foundation/foundation.prefab", new Vector3(3, 0, 0), new Vector3(0, 0, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(4.5f, 0, 0), new Vector3(0, 0, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(-1.5f, 0, 0), new Vector3(0, 180, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(3, 0, 1.5f), new Vector3(0, 270, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(3, 0, -1.5f), new Vector3(0, 90, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(0, 0, 1.5f), new Vector3(0, 270, 0)),
			new PrefabsRoom("assets/prefabs/building core/wall/wall.prefab", new Vector3(0, 0, -1.5f), new Vector3(0, 90, 0)),
			new PrefabsRoom("assets/prefabs/building core/floor/floor.prefab", new Vector3(0, 3, 0), new Vector3(0, 0, 0)),
			new PrefabsRoom("assets/prefabs/building core/floor/floor.prefab", new Vector3(3, 3, 0), new Vector3(0, 0, 0)),
			new PrefabsRoom("assets/prefabs/deployable/playerioents/lights/sirenlight/electric.sirenlight.deployed.prefab", new Vector3(1.5f, 3, 0), new Vector3(180, 0, 0)),
			new PrefabsRoom("assets/prefabs/misc/xmas/pookie/pookie_deployed.prefab", new Vector3(-1.25f, 0.1f, 1.25f), new Vector3(0, 135, 0))
			
		};
        private ItemId v;

        private void LeaveFarmRoom(BasePlayer player, bool isunload = true)
		{
			var player_in_room = _players_in_room[player.userID];
			int time_now = (int)DateTimeOffset.Now.ToUnixTimeSeconds();
				
			TP(player, player_in_room.LastPlayerPosition);
			
			if(!isunload)
			{
				_players_in_room.Remove(player.userID);
				_spawn_room_position.Add(player_in_room.RoomPosition);
				
				Cooldowns[player.userID] = time_now;
				
				ChatMessage(player, lang.GetMessage("CHAT_LEAVE_ROOM", this, player.UserIDString));
			}
			
			CuiHelper.DestroyUi(player, ".GUI_FARMROOM");
			
			StoredData[player.userID].LastUpdate = time_now;
			
			NextTick(() => RemoveRoomOrEntity(player_in_room.RoomPosition));
		}
		
		private void OnPlayerDisconnected(BasePlayer player, string reason)
		{
			if(player != null && _players_in_room.ContainsKey(player.userID))
				NextTick(() => LeaveFarmRoom(player));
		}
		
			}
}

// --- End of file: XFarmRoom.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/FurnaceSplitter.cs ---
// --- Original Local Path: FurnaceSplitter.cs ---

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Furnace Splitter", "Skipcast", "2.1.7", ResourceId = 2406)]
    [Description("Splits up resources in furnaces automatically and shows useful furnace information")]
    public class FurnaceSplitter : RustPlugin
    {
        private class OvenSlot
        {
            /// <summary>The item in this slot. May be null.</summary>
            public Item Item;

            /// <summary>The slot position</summary>
            public int? Position;

            /// <summary>The slot's index in the itemList list.</summary>
            public int Index;

            /// <summary>How much should be added/removed from stack</summary>
            public int DeltaAmount;
        }

        public class OvenInfo
        {
            public float ETA;
            public float FuelNeeded;
        }

        private class StoredData
        {
            public Dictionary<ulong, PlayerOptions> AllPlayerOptions { get; private set; } = new Dictionary<ulong, PlayerOptions>();
        }

        private class PluginConfig
        {
            //[JsonRequired]
            public Vector2 UiPosition { get; set; } = new Vector2(0.6505f, 0.022f);
        }

        private class PlayerOptions
        {
            public bool Enabled;
            public Dictionary<string, int> TotalStacks = new Dictionary<string, int>();
        }

        public enum MoveResult
        {
            Ok,
            SlotsFilled,
            NotEnoughSlots
        }

        private class Vector2Converter : JsonConverter
        {
            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                Vector2 vec = (Vector2)value;
                serializer.Serialize(writer, new { vec.x, vec.y });
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                Vector2 result = new Vector2();
                JObject jVec = JObject.Load(reader);

                result.x = jVec["x"].ToObject<float>();
                result.y = jVec["y"].ToObject<float>();

                return result;
            }

            public override bool CanConvert(Type objectType)
            {
                return objectType == typeof(Vector2);
            }
        }

        private Dictionary<ulong, PlayerOptions> allPlayerOptions => storedData.AllPlayerOptions;
        private PluginConfig config;
        private StoredData storedData;

        private const string permUse = "furnacesplitter.use";

        private readonly Dictionary<ulong, string> openUis = new Dictionary<ulong, string>();
        private readonly Dictionary<BaseOven, List<BasePlayer>> looters = new Dictionary<BaseOven, List<BasePlayer>>();
        private readonly Stack<BaseOven> queuedUiUpdates = new Stack<BaseOven>();

        private readonly string[] compatibleOvens =
        {
            "bbq.deployed",
            "campfire",
            "fireplace.deployed",
            "furnace",
            "furnace.large",
            "hobobarrel_static",
            "refinery_small_deployed",
            "skull_fire_pit"
        };

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            DestroyUI(player);
        }

        private void OnPlayerInit(BasePlayer player)
        {
            InitPlayer(player);
        }

        private void Init()
        {
            // Only add if it's not already been added in LoadDefaultConfig. That would be the case the first time the plugin is initialized.
            if (Config.Settings.Converters.All(conv => conv.GetType() != typeof(Vector2Converter)))
                Config.Settings.Converters.Add(new Vector2Converter());
        }

        private void Loaded()
        {
            storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);

            permission.RegisterPermission(permUse, this);

            if (config == null)
            {
                // Default config not created, load existing config.
                config = Config.ReadObject<PluginConfig>();
            }
            else
            {
                // Save default config.
                Config.WriteObject(config);
            }
        }

        #region Configuration

        protected override void LoadDefaultConfig()
        {
            Config.Settings.Converters.Add(new Vector2Converter());
            PrintWarning("Creating default config for FurnaceSplitter.");
            config = new PluginConfig();
        }

        #endregion Configuration

        private void OnServerInitialized()
        {
            foreach (BasePlayer player in Player.Players)
            {
                InitPlayer(player);
            }

            lang.RegisterMessages(new Dictionary<string, string>
            {
                // English
                { "turnon", "Turn On" },
                { "turnoff", "Turn Off" },
                { "title", "Furnace Splitter" },
                { "eta", "ETA" },
                { "totalstacks", "Total stacks" },
                { "trim", "Trim fuel" },
                { "lootsource_invalid", "Current loot source invalid" },
                { "unsupported_furnace", "Unsupported furnace." },
                { "nopermission", "You don't have permission to use this." }
            }, this);
        }

        private void OnServerSave()
        {
            SaveData();
        }

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject("FurnaceSplitter", storedData);
        }

        private void InitPlayer(BasePlayer player)
        {
            if (!allPlayerOptions.ContainsKey(player.userID))
            {
                allPlayerOptions[player.userID] = new PlayerOptions
                {
                    Enabled = true,
                    TotalStacks = new Dictionary<string, int>()
                };
            }

            var initialStackOptions = new Dictionary<string, int>
            {
                {"furnace", 3},
                {"bbq.deployed", 9},
                {"campfire", 2},
                {"fireplace.deployed", 2},
                {"furnace.large", 15},
                {"hobobarrel_static", 2},
                {"refinery_small_deployed", 3},
                {"skull_fire_pit", 2}
            };

            PlayerOptions options = allPlayerOptions[player.userID];

            foreach (var kv in initialStackOptions)
            {
                if (!options.TotalStacks.ContainsKey(kv.Key))
                    options.TotalStacks.Add(kv.Key, kv.Value);
            }
        }

        private void OnTick()
        {
            while (queuedUiUpdates.Count > 0)
            {
                BaseOven oven = queuedUiUpdates.Pop();

                if (!oven || oven.IsDestroyed)
                    continue;

                OvenInfo ovenInfo = GetOvenInfo(oven);

                GetLooters(oven)?.ForEach(plr =>
                {
                    if (plr && !plr.IsDestroyed)
                    {
                        CreateUi(plr, oven, ovenInfo);
                    }
                });
            }
        }

        public OvenInfo GetOvenInfo(BaseOven oven)
        {
            OvenInfo result = new OvenInfo();
            var smeltTimes = GetSmeltTimes(oven);

            if (smeltTimes.Count > 0)
            {
                var longestStack = smeltTimes.OrderByDescending(kv => kv.Value).First();
                float fuelUnits = oven.fuelType.GetComponent<ItemModBurnable>().fuelAmount;
                float neededFuel = (float)Math.Ceiling(longestStack.Value * (oven.cookingTemperature / 200.0f) / fuelUnits);

                result.FuelNeeded = neededFuel;
                result.ETA = longestStack.Value;
            }

            return result;
        }

        private void Unload()
        {
            SaveData();

            foreach (var kv in openUis.ToDictionary(kv => kv.Key, kv => kv.Value))
            {
                BasePlayer player = BasePlayer.FindByID(kv.Key);
                DestroyUI(player);
            }
        }

        private bool GetEnabled(BasePlayer player)
        {
            return allPlayerOptions[player.userID].Enabled;
        }

        private void SetEnabled(BasePlayer player, bool enabled)
        {
            allPlayerOptions[player.userID].Enabled = enabled;
            CreateUiIfFurnaceOpen(player);
        }

        private bool IsSlotCompatible(Item item, BaseOven oven, ItemDefinition itemDefinition)
        {
            ItemModCookable cookable = item.info.GetComponent<ItemModCookable>();

            if (item.amount < item.info.stackable && item.info == itemDefinition)
                return true;

            if (oven.allowByproductCreation && oven.fuelType.GetComponent<ItemModBurnable>().byproductItem == item.info)
                return true;

            if (cookable == null || cookable.becomeOnCooked == itemDefinition)
                return true;

            if (CanCook(cookable, oven))
                return true;

            return false;
        }

        private void OnConsumeFuel(BaseOven oven, Item fuel, ItemModBurnable burnable)
        {
            if (compatibleOvens.Contains(oven.ShortPrefabName))
                queuedUiUpdates.Push(oven);
        }

        private List<BasePlayer> GetLooters(BaseOven oven)
        {
            if (looters.ContainsKey(oven))
                return looters[oven];

            return null;
        }

        private void AddLooter(BaseOven oven, BasePlayer player)
        {
            if (!looters.ContainsKey(oven))
                looters[oven] = new List<BasePlayer>();

            var list = looters[oven];
            list.Add(player);
        }

        private void RemoveLooter(BaseOven oven, BasePlayer player)
        {
            if (!looters.ContainsKey(oven))
                return;

            looters[oven].Remove(player);
        }

        private object CanMoveItem(Item item, PlayerInventory inventory, uint targetContainer, int targetSlot)
        {
            BasePlayer player = inventory.GetComponent<BasePlayer>();
            if (player == null)
                return null;

            ItemContainer container = inventory.FindContainer(targetContainer);
            ItemContainer originalContainer = item.GetRootContainer();

            Func<object> splitFunc = () =>
            {
                if (player == null || !HasPermission(player) || !GetEnabled(player))
                    return null;

                PlayerOptions playerOptions = allPlayerOptions[player.userID];

                if (container == null || container == item.GetRootContainer())
                    return null;

                BaseOven oven = container.entityOwner as BaseOven;
                ItemModCookable cookable = item.info.GetComponent<ItemModCookable>();

                if (oven == null || cookable == null)
                    return null;

                int totalSlots = 2 + (oven.allowByproductCreation ? 1 : 0);

                if (playerOptions.TotalStacks.ContainsKey(oven.ShortPrefabName))
                {
                    totalSlots = playerOptions.TotalStacks[oven.ShortPrefabName];
                }

                if (cookable.lowTemp > oven.cookingTemperature || cookable.highTemp < oven.cookingTemperature)
                    return null;

                MoveSplitItem(item, oven, totalSlots);
                return true;
            };

            object returnValue = splitFunc();

            if (HasPermission(player) && GetEnabled(player))
            {
                BaseOven oven = container?.entityOwner as BaseOven ?? item.GetRootContainer().entityOwner as BaseOven;

                if (oven != null && compatibleOvens.Contains(oven.ShortPrefabName))
                {
                    if (returnValue is bool && (bool)returnValue)
                        AutoAddFuel(inventory, oven);

                    queuedUiUpdates.Push(oven);
                }
            }

            return returnValue;
        }

        private MoveResult MoveSplitItem(Item item, BaseOven oven, int totalSlots)
        {
            ItemContainer container = oven.inventory;
            int invalidItemsCount = container.itemList.Count(slotItem => !IsSlotCompatible(slotItem, oven, item.info));
            int numOreSlots = Math.Min(container.capacity - invalidItemsCount, totalSlots);
            int totalMoved = 0;
            int totalAmount = Math.Min(item.amount + container.itemList.Where(slotItem => slotItem.info == item.info).Take(numOreSlots).Sum(slotItem => slotItem.amount), item.info.stackable * numOreSlots);

            if (numOreSlots <= 0)
            {
                return MoveResult.NotEnoughSlots;
            }

            //Puts("---------------------------");

            int totalStackSize = Math.Min(totalAmount / numOreSlots, item.info.stackable);
            int remaining = totalAmount - totalAmount / numOreSlots * numOreSlots;

            List<int> addedSlots = new List<int>();

            //Puts("total: {0}, remaining: {1}, totalStackSize: {2}", totalAmount, remaining, totalStackSize);

            List<OvenSlot> ovenSlots = new List<OvenSlot>();

            for (int i = 0; i < numOreSlots; ++i)
            {
                Item existingItem;
                int slot = FindMatchingSlotIndex(container, out existingItem, item.info, addedSlots);

                if (slot == -1) // full
                {
                    return MoveResult.NotEnoughSlots;
                }

                addedSlots.Add(slot);

                OvenSlot ovenSlot = new OvenSlot
                {
                    Position = existingItem?.position,
                    Index = slot,
                    Item = existingItem
                };

                int currentAmount = existingItem?.amount ?? 0;
                int missingAmount = totalStackSize - currentAmount + (i < remaining ? 1 : 0);
                ovenSlot.DeltaAmount = missingAmount;

                //Puts("[{0}] current: {1}, delta: {2}, total: {3}", slot, currentAmount, ovenSlot.DeltaAmount, currentAmount + missingAmount);

                if (currentAmount + missingAmount <= 0)
                    continue;

                ovenSlots.Add(ovenSlot);
            }

            foreach (OvenSlot slot in ovenSlots)
            {
                if (slot.Item == null)
                {
                    Item newItem = ItemManager.Create(item.info, slot.DeltaAmount, item.skin);
                    slot.Item = newItem;
                    newItem.MoveToContainer(container, slot.Position ?? slot.Index);
                }
                else
                {
                    slot.Item.amount += slot.DeltaAmount;
                }

                totalMoved += slot.DeltaAmount;
            }

            container.MarkDirty();

            if (totalMoved >= item.amount)
            {
                item.Remove();
                item.GetRootContainer()?.MarkDirty();
                return MoveResult.Ok;
            }
            else
            {
                item.amount -= totalMoved;
                item.GetRootContainer()?.MarkDirty();
                return MoveResult.SlotsFilled;
            }
        }

        private void AutoAddFuel(PlayerInventory playerInventory, BaseOven oven)
        {
            int neededFuel = (int)Math.Ceiling(GetOvenInfo(oven).FuelNeeded);
            neededFuel -= oven.inventory.GetAmount(oven.fuelType.itemid, false);
            var playerFuel = playerInventory.FindItemIDs(oven.fuelType.itemid);

            if (neededFuel <= 0 || playerFuel.Count <= 0)
                return;

            foreach (Item fuelItem in playerFuel)
            {
                if (oven.inventory.CanAcceptItem(fuelItem, -1) != ItemContainer.CanAcceptResult.CanAccept)
                    break;

                Item largestFuelStack = oven.inventory.itemList.Where(item => item.info == oven.fuelType).OrderByDescending(item => item.amount).FirstOrDefault();
                int toTake = Math.Min(neededFuel, oven.fuelType.stackable - (largestFuelStack?.amount ?? 0));

                if (toTake > fuelItem.amount)
                    toTake = fuelItem.amount;

                if (toTake <= 0)
                    break;

                neededFuel -= toTake;

                if (toTake >= fuelItem.amount)
                {
                    fuelItem.MoveToContainer(oven.inventory);
                }
                else
                {
                    Item splitItem = fuelItem.SplitItem(toTake);
                    if (!splitItem.MoveToContainer(oven.inventory)) // Break if oven is full
                        break;
                }

                if (neededFuel <= 0)
                    break;
            }
        }

        private int FindMatchingSlotIndex(ItemContainer container, out Item existingItem, ItemDefinition itemType, List<int> indexBlacklist)
        {
            existingItem = null;
            int firstIndex = -1;
            Dictionary<int, Item> existingItems = new Dictionary<int, Item>();

            for (int i = 0; i < container.capacity; ++i)
            {
                if (indexBlacklist.Contains(i))
                    continue;

                Item itemSlot = container.GetSlot(i);
                if (itemSlot == null || itemType != null && itemSlot.info == itemType)
                {
                    if (itemSlot != null)
                        existingItems.Add(i, itemSlot);

                    if (firstIndex == -1)
                    {
                        existingItem = itemSlot;
                        firstIndex = i;
                    }
                }
            }

            if (existingItems.Count <= 0 && firstIndex != -1)
            {
                return firstIndex;
            }
            else if (existingItems.Count > 0)
            {
                var largestStackItem = existingItems.OrderByDescending(kv => kv.Value.amount).First();
                existingItem = largestStackItem.Value;
                return largestStackItem.Key;
            }

            existingItem = null;
            return -1;
        }

        private void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            BaseOven oven = entity as BaseOven;

            if (oven == null || !HasPermission(player) || !compatibleOvens.Contains(oven.ShortPrefabName))
                return;

            AddLooter(oven, player);
            queuedUiUpdates.Push(oven);
        }

        private void OnLootEntityEnd(BasePlayer player, BaseCombatEntity entity)
        {
            BaseOven oven = entity as BaseOven;

            if (oven == null || !compatibleOvens.Contains(oven.ShortPrefabName))
                return;

            DestroyUI(player);
            RemoveLooter(oven, player);
        }

        private void OnEntityKill(BaseNetworkable networkable)
        {
            BaseOven oven = networkable as BaseOven;

            if (oven != null)
            {
                DestroyOvenUI(oven);
            }
        }

        private void OnOvenToggle(BaseOven oven, BasePlayer player)
        {
            if (compatibleOvens.Contains(oven.ShortPrefabName))
                queuedUiUpdates.Push(oven);
        }

        private void CreateUiIfFurnaceOpen(BasePlayer player)
        {
            BaseOven oven = player.inventory.loot?.entitySource as BaseOven;

            if (oven != null && compatibleOvens.Contains(oven.ShortPrefabName))
                queuedUiUpdates.Push(oven);
        }

        private CuiElementContainer CreateUi(BasePlayer player, BaseOven oven, OvenInfo ovenInfo)
        {
            PlayerOptions options = allPlayerOptions[player.userID];
            int totalSlots = GetTotalStacksOption(player, oven) ?? oven.inventory.capacity - (oven.allowByproductCreation ? 1 : 2);
            string remainingTimeStr;
            string neededFuelStr;

            if (ovenInfo.ETA <= 0)
            {
                remainingTimeStr = "0s";
                neededFuelStr = "0";
            }
            else
            {
                remainingTimeStr = FormatTime(ovenInfo.ETA);
                neededFuelStr = ovenInfo.FuelNeeded.ToString("##,###");
            }

            string contentColor = "0.7 0.7 0.7 1.0";
            int contentSize = 10;
            string toggleStateStr = (!options.Enabled).ToString();
            string toggleButtonColor = !options.Enabled
                                        ? "0.415 0.5 0.258 0.4"
                                        : "0.8 0.254 0.254 0.4";
            string toggleButtonTextColor = !options.Enabled
                                            ? "0.607 0.705 0.431"
                                            : "0.705 0.607 0.431";
            string buttonColor = "0.75 0.75 0.75 0.1";
            string buttonTextColor = "0.77 0.68 0.68 1";

            int nextDecrementSlot = totalSlots - 1;
            int nextIncrementSlot = totalSlots + 1;

            DestroyUI(player);

            Vector2 uiPosition = config.UiPosition;
            Vector2 uiSize = new Vector2(0.1785f, 0.111f);

            CuiElementContainer result = new CuiElementContainer();
            string rootPanelName = result.Add(new CuiPanel
            {
                Image = new CuiImageComponent
                {
                    Color = "0 0 0 0"
                },
                RectTransform =
                {
                    AnchorMin = uiPosition.x + " " + uiPosition.y,
                    AnchorMax = uiPosition.x + uiSize.x + " " + (uiPosition.y + uiSize.y)
                    //AnchorMin = "0.6505 0.022",
                    //AnchorMax = "0.829 0.133"
                }
            }, "Hud.Menu");

            string headerPanel = result.Add(new CuiPanel
            {
                Image = new CuiImageComponent
                {
                    Color = "0.75 0.75 0.75 0.1"
                },
                RectTransform =
                {
                    AnchorMin = "0 0.775",
                    AnchorMax = "1 1"
                }
            }, rootPanelName);

            // Header label
            result.Add(new CuiLabel
            {
                RectTransform =
                {
                    AnchorMin = "0.051 0",
                    AnchorMax = "1 0.95"
                },
                Text =
                {
                    Text = lang.GetMessage("title", this, player.UserIDString),
                    Align = TextAnchor.MiddleLeft,
                    Color = "0.77 0.7 0.7 1",
                    FontSize = 13
                }
            }, headerPanel);

            string contentPanel = result.Add(new CuiPanel
            {
                Image = new CuiImageComponent
                {
                    Color = "0.65 0.65 0.65 0.06"
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 0.74"
                }
            }, rootPanelName);

            // ETA label
            result.Add(new CuiLabel
            {
                RectTransform =
                {
                    AnchorMin = "0.02 0.7",
                    AnchorMax = "0.98 1"
                },
                Text =
                {
                    Text = string.Format("{0}: " + (ovenInfo.ETA > 0 ? "~" : "") + remainingTimeStr + " (" + neededFuelStr +  " " + oven.fuelType.displayName.english.ToLower() + ")", lang.GetMessage("eta", this, player.UserIDString)),
                    Align = TextAnchor.MiddleLeft,
                    Color = contentColor,
                    FontSize = contentSize
                }
            }, contentPanel);

            // Toggle button
            result.Add(new CuiButton
            {
                RectTransform =
                {
                    AnchorMin = "0.02 0.4",
                    AnchorMax = "0.25 0.7"
                },
                Button =
                {
                    Command = "furnacesplitter.enabled " + toggleStateStr,
                    Color = toggleButtonColor
                },
                Text =
                {
                    Align = TextAnchor.MiddleCenter,
                    Text = options.Enabled ? lang.GetMessage("turnoff", this, player.UserIDString) : lang.GetMessage("turnon", this, player.UserIDString),
                    Color = toggleButtonTextColor,
                    FontSize = 11
                }
            }, contentPanel);

            // Trim button
            result.Add(new CuiButton
            {
                RectTransform =
                {
                    AnchorMin = "0.27 0.4",
                    AnchorMax = "0.52 0.7"
                },
                Button =
                {
                    Command = "furnacesplitter.trim",
                    Color = buttonColor
                },
                Text =
                {
                    Align = TextAnchor.MiddleCenter,
                    Text = lang.GetMessage("trim", this, player.UserIDString),
                    Color = contentColor,
                    FontSize = 11
                }
            }, contentPanel);

            // Decrease stack button
            result.Add(new CuiButton
            {
                RectTransform =
                {
                    AnchorMin = "0.02 0.05",
                    AnchorMax = "0.07 0.35"
                },
                Button =
                {
                    Command = "furnacesplitter.totalstacks " + nextDecrementSlot,
                    Color = buttonColor
                },
                Text =
                {
                    Align = TextAnchor.MiddleCenter,
                    Text = "<",
                    Color = buttonTextColor,
                    FontSize = contentSize
                }
            }, contentPanel);

            // Empty slots label
            result.Add(new CuiLabel
            {
                RectTransform =
                {
                    AnchorMin = "0.08 0.05",
                    AnchorMax = "0.19 0.35"
                },
                Text =
                {
                    Align = TextAnchor.MiddleCenter,
                    Text = totalSlots.ToString(),
                    Color = contentColor,
                    FontSize = contentSize
                }
            }, contentPanel);

            // Increase stack button
            result.Add(new CuiButton
            {
                RectTransform =
                {
                    AnchorMin = "0.19 0.05",
                    AnchorMax = "0.25 0.35"
                },
                Button =
                {
                    Command = "furnacesplitter.totalstacks " + nextIncrementSlot,
                    Color = buttonColor
                },
                Text =
                {
                    Align = TextAnchor.MiddleCenter,
                    Text = ">",
                    Color = buttonTextColor,
                    FontSize = contentSize
                }
            }, contentPanel);

            // Stack itemType label
            result.Add(new CuiLabel
            {
                RectTransform =
                {
                    AnchorMin = "0.27 0.05",
                    AnchorMax = "1 0.35"
                },
                Text =
                {
                    Align = TextAnchor.MiddleLeft,
                    Text = string.Format("({0})", lang.GetMessage("totalstacks", this, player.UserIDString)),
                    Color = contentColor,
                    FontSize = contentSize
                }
            }, contentPanel);

            openUis.Add(player.userID, rootPanelName);
            CuiHelper.AddUi(player, result);
            return result;
        }

        private string FormatTime(float totalSeconds)
        {
            double hours = Math.Floor(totalSeconds / 3600);
            double minutes = Math.Floor(totalSeconds / 60 % 60);
            float seconds = totalSeconds % 60;

            if (hours <= 0 && minutes <= 0)
                return seconds + "s";
            if (hours <= 0)
                return minutes + "m" + seconds + "s";
            return hours + "h" + minutes + "m" + seconds + "s";
        }

        private Dictionary<ItemDefinition, float> GetSmeltTimes(BaseOven oven)
        {
            ItemContainer container = oven.inventory;
            var cookables = container.itemList.Where(item =>
            {
                ItemModCookable cookable = item.info.GetComponent<ItemModCookable>();
                return cookable != null && CanCook(cookable, oven);
            }).ToList();

            if (cookables.Count == 0)
                return new Dictionary<ItemDefinition, float>();

            var distinctCookables = cookables.GroupBy(item => item.info, item => item).ToList();
            Dictionary<ItemDefinition, int> amounts = new Dictionary<ItemDefinition, int>();

            foreach (var group in distinctCookables)
            {
                int biggestAmount = group.Max(item => item.amount);
                amounts.Add(group.Key, biggestAmount);
            }

            var smeltTimes = amounts.ToDictionary(kv => kv.Key, kv => GetSmeltTime(kv.Key.GetComponent<ItemModCookable>(), kv.Value));
            return smeltTimes;
        }

        private bool CanCook(ItemModCookable cookable, BaseOven oven)
        {
            return oven.cookingTemperature >= cookable.lowTemp && oven.cookingTemperature <= cookable.highTemp;
        }

        private float GetSmeltTime(ItemModCookable cookable, int amount)
        {
            float smeltTime = cookable.cookTime * amount;
            return smeltTime;
        }

        private int? GetTotalStacksOption(BasePlayer player, BaseOven oven)
        {
            PlayerOptions options = allPlayerOptions[player.userID];

            if (options.TotalStacks.ContainsKey(oven.ShortPrefabName))
                return options.TotalStacks[oven.ShortPrefabName];

            return null;
        }

        private void DestroyUI(BasePlayer player)
        {
            if (!openUis.ContainsKey(player.userID))
                return;

            string uiName = openUis[player.userID];

            if (openUis.Remove(player.userID))
                CuiHelper.DestroyUi(player, uiName);
        }

        private void DestroyOvenUI(BaseOven oven)
        {
            if (oven == null) throw new ArgumentNullException(nameof(oven));

            foreach (KeyValuePair<ulong, string> kv in openUis.ToDictionary(kv => kv.Key, kv => kv.Value))
            {
                BasePlayer player = BasePlayer.FindByID(kv.Key);

                BaseOven playerLootOven = player.inventory.loot?.entitySource as BaseOven;

                if (oven == playerLootOven)
                {
                    DestroyUI(player);
                    RemoveLooter(oven, player);
                }
            }
        }

        [ConsoleCommand("furnacesplitter.enabled")]
        private void ConsoleCommand_Toggle(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();

            if (!HasPermission(player))
            {
                player.ConsoleMessage(lang.GetMessage("nopermission", this, player.UserIDString));
                return;
            }

            if (!arg.HasArgs())
            {
                player.ConsoleMessage(GetEnabled(player).ToString());
                return;
            }

            bool enabled = arg.GetBool(0);
            SetEnabled(player, enabled);
            CreateUiIfFurnaceOpen(player);
        }

        [ConsoleCommand("furnacesplitter.totalstacks")]
        private void ConsoleCommand_TotalStacks(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            BaseOven lootSource = player.inventory.loot?.entitySource as BaseOven;

            if (!HasPermission(player))
            {
                player.ConsoleMessage(lang.GetMessage("nopermission", this, player.UserIDString));
                return;
            }

            if (lootSource == null || !compatibleOvens.Contains(lootSource.ShortPrefabName))
            {
                player.ConsoleMessage(lang.GetMessage("lootsource_invalid", this, player.UserIDString));
                return;
            }

            string ovenName = lootSource.ShortPrefabName;
            PlayerOptions playerOption = allPlayerOptions[player.userID];

            if (playerOption.TotalStacks.ContainsKey(ovenName))
            {
                if (!arg.HasArgs())
                {
                    player.ConsoleMessage(playerOption.TotalStacks[ovenName].ToString());
                }
                else
                {
                    int newValue = (int)Mathf.Clamp(arg.GetInt(0), 0, lootSource.inventory.capacity);
                    playerOption.TotalStacks[ovenName] = newValue;
                }
            }
            else
            {
                Debug.LogWarning("[FurnaceSplitter] Unsupported furnace '" + ovenName + "'");
                player.ConsoleMessage(lang.GetMessage("unsupported_furnace", this, player.UserIDString));
            }

            CreateUiIfFurnaceOpen(player);
        }

        [ConsoleCommand("furnacesplitter.trim")]
        private void ConsoleCommand_Trim(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            BaseOven lootSource = player.inventory.loot?.entitySource as BaseOven;

            if (!HasPermission(player))
            {
                player.ConsoleMessage(lang.GetMessage("nopermission", this, player.UserIDString));
                return;
            }

            if (lootSource == null || !compatibleOvens.Contains(lootSource.ShortPrefabName))
            {
                player.ConsoleMessage(lang.GetMessage("lootsource_invalid", this, player.UserIDString));
                return;
            }

            OvenInfo ovenInfo = GetOvenInfo(lootSource);
            var fuelSlots = lootSource.inventory.itemList.Where(item => item.info == lootSource.fuelType).ToList();
            int totalFuel = fuelSlots.Sum(item => item.amount);
            int toRemove = (int)Math.Floor(totalFuel - ovenInfo.FuelNeeded);

            if (toRemove <= 0)
                return;

            foreach (Item fuelItem in fuelSlots)
            {
                int toTake = Math.Min(fuelItem.amount, toRemove);
                toRemove -= toTake;

                Vector3 dropPosition = player.GetDropPosition();
                Vector3 dropVelocity = player.GetDropVelocity();

                if (toTake >= fuelItem.amount)
                {
                    if (!player.inventory.GiveItem(fuelItem))
                        fuelItem.Drop(dropPosition, dropVelocity, Quaternion.identity);
                }
                else
                {
                    Item splitItem = fuelItem.SplitItem(toTake);
                    if (!player.inventory.GiveItem(splitItem))
                        splitItem.Drop(dropPosition, dropVelocity, Quaternion.identity);
                }

                if (toRemove <= 0)
                    break;
            }
        }

        private bool HasPermission(BasePlayer player)
        {
            return permission.UserHasPermission(player.UserIDString, permUse);
        }

        #region Exposed plugin methods

        [HookMethod("MoveSplitItem")]
        public string Hook_MoveSplitItem(Item item, BaseOven oven, int totalSlots)
        {
            MoveResult result = MoveSplitItem(item, oven, totalSlots);
            return result.ToString();
        }

        [HookMethod("GetOvenInfo")]
        public JObject Hook_GetOvenInfo(BaseOven oven)
        {
            OvenInfo ovenInfo = GetOvenInfo(oven);
            return JObject.FromObject(ovenInfo);
        }

        #endregion Exposed plugin methods
    }
}

// --- End of file: FurnaceSplitter.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Promocode.cs ---
// --- Original Local Path: Promocode.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Promocode", "rustmods.ru", "1.0.1")]
    public class Promocode : RustPlugin
    {
        public class PSettings
        {
            [JsonProperty("Промокод, который нужно ввести")]
            public string Promocode;

            [JsonProperty("Сколько игрок получит рублей за данный промокод?")]
            public int GRub;

        }


        private ConfigData _config;
        public class ConfigData
        {
            [JsonProperty("Настройка промокодов")]
            public List<PSettings> PList = new List<PSettings>();
            
            
            [JsonProperty("Номер магазина!")]
            public string ShopID = "";
            
            [JsonProperty("Секретный ключ")]
            public string APIKey = "";

            public static ConfigData GetNewCong()
            {
                ConfigData newConfig = new ConfigData();
                newConfig.ShopID = "";
                newConfig.APIKey = "";
                newConfig.PList = new List<PSettings>()
                {
                    new PSettings()
                    {
                        Promocode = "y1",
                        GRub = 10,
                    },
                    new PSettings()
                    {
                        Promocode = "y2",
                        GRub = 20,
                    },
                    new PSettings()
                    {
                        Promocode = "y3",
                        GRub = 30,
                    }
                };
                return newConfig;
            }
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<ConfigData>();
                
            }
            catch
            {
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }
        protected override void LoadDefaultConfig() => _config = ConfigData.GetNewCong();
        protected override void SaveConfig() => Config.WriteObject(_config);


        public class PlayerPromo
        {
            [JsonProperty("Введеный промокод")] 
            public string PromoCode;

            [JsonProperty("Во сколько он ввел промокод")]
            public string Date;
            
        }

        public class PlayerPromoSettings
        {
            public List<PlayerPromo> _promoList = new List<PlayerPromo>();
        }
        
        public Dictionary<ulong, PlayerPromoSettings> _playerPromo = new Dictionary<ulong,PlayerPromoSettings>();


        void OnServerInitialized()
        {
            try
            {
                _playerPromo = Interface.GetMod().DataFileSystem.ReadObject<Dictionary<ulong, PlayerPromoSettings>>(Name);
            }
            catch
            {
                _playerPromo = new Dictionary<ulong, PlayerPromoSettings>();
            }
            
            ImageLibrary?.Call("AddImage", ImageButton, ImageButton);
        }


        [PluginReference] private Plugin ImageLibrary;
        public string Layer = "UI_YPromoLayer";
        public string ImageButton = "https://i.imgur.com/Q0ZBOad.png";


        [ConsoleCommand("destory.menusss")]
        void DestroyMenu(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            CuiHelper.DestroyUi(player, Layer);
        }
        
        
        [ChatCommand("promo")]
        void PieMenu(BasePlayer player, string command, string[] args)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();
            
            var panel = container.Add(new CuiPanel
            {
                Image = {Color = "0 0 0 0"},
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                CursorEnabled = true,
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "-100 -100", AnchorMax = "100 100", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0.7", Command = "destory.menusss"},
                Text = { Text = "" }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent
                        {Png = (string) ImageLibrary?.Call("GetImage", ImageButton)},
                    new CuiRectTransformComponent {AnchorMin = "0.3864583 0.3916667", AnchorMax = "0.615625 0.5796296"},
                }
            });
            container.Add(new CuiButton
            {
                RectTransform = {AnchorMin = "0.5911459 0.5361111", AnchorMax = "0.6072916 0.5620371"},
                Button = {Color = "0 0 0 0", Command = "destory.menusss"},
                Text = {Text = ""}
            }, Layer);
            
            
            container.Add(new CuiButton
            {
                RectTransform =
                    {AnchorMin = "0.4125 0.4453703", AnchorMax = "0.5890625 0.4861111"},
                Button =
                {
                    FadeIn = 0f, Color = "0 0 0 0", Command = $"",
                },
                Text =
                {
                    Text = "", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", Color = "0.4745098 0.4862745 0.5607843 1",
                    FontSize = 11
                }
            }, Layer, Layer + ".Transfer2");
            container.Add(new CuiElement 
            {
                Parent = Layer + $".Transfer2",
                Components = 
                { 
                    new CuiInputFieldComponent { FontSize = 14, Command = $"UI_HandlerPromo", Text = "Введи промокод", Align = TextAnchor.MiddleCenter, CharsLimit = 100, IsPassword = false},
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"}
                } 
            });
            container.Add(new CuiButton
            {
                RectTransform =
                    {AnchorMin = "0.4125 0.4166667", AnchorMax = "0.5890625 0.4388889"},
                Button =
                {
                    FadeIn = 0f, Color = "0 0 0 0", Command = $"",
                },
                Text =
                {
                    Text = "Введи промокод и нажми Enter", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", Color = "0.4745098 0.4862745 0.5607843 1",
                    FontSize = 11
                }
            }, Layer);
            CuiHelper.AddUi(player, container);
        }
        

        [ConsoleCommand("UI_HandlerPromo")]
        void GetPromo(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            try
            {
                string promo = args.Args[0];
                var find = _config.PList.Where(p => p.Promocode == promo).FirstOrDefault();
                if (find != null)
                {
                    if (_playerPromo[player.userID]._promoList.Any(p => p.PromoCode.ToLower() == promo.ToLower()))
                    {
                        player.ChatMessage("Вы уже ввели данный промокод!");
                        CuiHelper.DestroyUi(player, Layer);
                        return;
                    }
                    _playerPromo[player.userID]._promoList.Add(new PlayerPromo
                    {
                        PromoCode = promo,
                        Date = DateTime.Now.ToString("g")
                    });
                    player.ChatMessage($"Вы успешно ввели промокод и получили {find.GRub} руб. на баланс магазина!");
                    MoneyPlus(player.userID, find.GRub);
                    CuiHelper.DestroyUi(player, Layer);
                }
                else     
                {
                    player.ChatMessage("Промокод не найден, попробуйте еще раз!");
                }
            }
            catch
            {
            }
        }

        
        void MoneyPlus(ulong userId, int amount)
        {
            ExecuteApiRequest(new Dictionary<string, string>()
            {
                { "action", "moneys" },
                { "type", "plus" },
                { "steam_id", userId.ToString() },
                { "amount", amount.ToString() }
            });
        }
        void ExecuteApiRequest(Dictionary<string, string> args)
        {
            string url = $"http://gamestores.ru/api?shop_id={_config.ShopID}&secret={_config.APIKey}" +
                         $"{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
            webrequest.EnqueueGet(url, (i, s) =>
            {
                if (i != 200)
                {
                    LogToFile("Promocode", $"Код ошибки: {i}, подробности:\n{s}", this);
                }
                else
                {
                    if (s.Contains("fail"))
                    {
                        return;
                    }
                }
            }, this);
        }
        void OnServerSave()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _playerPromo);
        }

        void Unload()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _playerPromo);
        }
    }
}

// --- End of file: Promocode.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BuildTools.cs ---
// --- Original Local Path: BuildTools.cs ---

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Rust;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Build Tools", "Mevent", "1.3.2")]
    public class BuildTools : RustPlugin
    {
        #region Fields

        [PluginReference] private Plugin ImageLibrary, NoEscape, Clans, Friends, Notify, UINotify;

        private const string Layer = "UI.BuildTools";

        private static BuildTools _instance;

        private enum Types
        {
            None = -1,
            Remove = 5,
            Wood = 1,
            Stone = 2,
            Metal = 3,
            TopTier = 4
        }

        private const string PermAll = "buildtools.all";

        private const string PermFree = "buildtools.free";

        #endregion

        #region Config

        private static Configuration _config;

        private class Configuration
        {
            [JsonProperty(PropertyName = "Remove Commands")]
            public readonly string[] RemoveCommands = {"remove"};

            [JsonProperty(PropertyName = "Upgrade Commands")]
            public readonly string[] UpgradeCommands = {"up", "building.upgrade"};

            [JsonProperty(PropertyName = "Work with Notify?")]
            public readonly bool UseNotify = true;

            [JsonProperty(PropertyName = "Setting Modes", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public readonly List<Mode> Modes = new List<Mode>
            {
                new Mode
                {
                    Type = Types.Remove,
                    Icon = "assets/icons/clear.png",
                    Permission = string.Empty
                },
                new Mode
                {
                    Type = Types.Wood,
                    Icon = "assets/icons/level_wood.png",
                    Permission = string.Empty
                },
                new Mode
                {
                    Type = Types.Stone,
                    Icon = "assets/icons/level_stone.png",
                    Permission = string.Empty
                },
                new Mode
                {
                    Type = Types.Metal,
                    Icon = "assets/icons/level_metal.png",
                    Permission = string.Empty
                },
                new Mode
                {
                    Type = Types.TopTier,
                    Icon = "assets/icons/level_top.png",
                    Permission = string.Empty
                }
            };

            [JsonProperty(PropertyName = "Upgrade Settings")]
            public readonly UpgradeSettings Upgrade = new UpgradeSettings
            {
                ActionTime = 30,
                Cooldown = 0,
                VipCooldown = new Dictionary<string, int>
                {
                    ["buildtool.vip"] = 0,
                    ["buildtool.premium"] = 0
                },
                AfterWipe = 0,
                VipAfterWipe = new Dictionary<string, int>
                {
                    ["buildtool.vip"] = 0,
                    ["buildtool.premium"] = 0
                }
            };

            [JsonProperty(PropertyName = "Remove Settings")]
            public readonly RemoveSettings Remove = new RemoveSettings
            {
                ActionTime = 30,
                Cooldown = 0,
                VipCooldown = new Dictionary<string, int>
                {
                    ["buildtool.vip"] = 0,
                    ["buildtool.premium"] = 0
                },
                AfterWipe = 0,
                VipAfterWipe = new Dictionary<string, int>
                {
                    ["buildtool.vip"] = 0,
                    ["buildtool.premium"] = 0
                },
                Condition = new ConditionSettings
                {
                    Default = true,
                    Percent = false,
                    PercentValue = 0
                },
                ReturnItem = true,
                ReturnPercent = 100,
                BlockedList = new List<string>
                {
                    "shortname 1",
                    "shortname 2",
                    "shortname 3"
                }
            };

            [JsonProperty(PropertyName = "Block Settings")]
            public readonly BlockSettings Block = new BlockSettings
            {
                UseNoEscape = true,
                UseClans = true,
                UseFriends = true,
                UseCupboard = true
            };

            [JsonProperty(PropertyName = "Additional Slot Settings")]
            public readonly AdditionalSlot AdditionalSlot = new AdditionalSlot
            {
                Enabled = true
            };

            [JsonProperty(PropertyName = "UI Settings")]
            public readonly InterfaceSettings UI = new InterfaceSettings
            {
                Color1 = new IColor("#4B68FF"),
                Color2 = new IColor("#2C2C2C"),
                Color3 = new IColor("#B64040"),
                OffsetY = 0,
                OffsetX = 0
            };
        }

        private class AdditionalSlot
        {
            [JsonProperty(PropertyName = "Enabled")]
            public bool Enabled;

            public static void Get(BasePlayer player)
            {
                var item = ItemManager.CreateByName("hammer");
                if (item == null) return;

                if (player.inventory.containerBelt.capacity < 7)
                    player.inventory.containerBelt.capacity++;

                item.LockUnlock(true, player);
                item.MoveToContainer(player.inventory.containerBelt, 6);
            }

            public static void Remove(BasePlayer player)
            {
                var item = player.inventory.containerBelt.GetSlot(6);
                if (item == null || item.info.shortname != "hammer") return;

                item.RemoveFromContainer();
                item.Remove();

                ItemManager.DoRemoves();

                player.inventory.containerBelt.capacity--;
            }
        }

        private class InterfaceSettings
        {
            [JsonProperty(PropertyName = "Color 1")]
            public IColor Color1;

            [JsonProperty(PropertyName = "Color 2")]
            public IColor Color2;

            [JsonProperty(PropertyName = "Color 3")]
            public IColor Color3;

            [JsonProperty(PropertyName = "Offset Y")]
            public float OffsetY;

            [JsonProperty(PropertyName = "Offset X")]
            public float OffsetX;
        }

        private class IColor
        {
            [JsonProperty(PropertyName = "HEX")] public string Hex;

            [JsonProperty(PropertyName = "Opacity (0 - 100)")]
            public readonly float Alpha;

            [JsonProperty] private string _color;

            [JsonIgnore]
            public string Get
            {
                get
                {
                    if (string.IsNullOrEmpty(_color))
                        _color = GetColor();

                    return _color;
                }
            }

            private string GetColor()
            {
                if (string.IsNullOrEmpty(Hex)) Hex = "#FFFFFF";

                var str = Hex.Trim('#');
                if (str.Length != 6) throw new Exception(Hex);
                var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
                var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
                var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);

                return $"{(double) r / 255} {(double) g / 255} {(double) b / 255} {Alpha / 100}";
            }

            public IColor()
            {
            }

            public IColor(string hex, float alpha = 100)
            {
                Hex = hex;
                Alpha = alpha;
            }
        }

        private class ConditionSettings
        {
            [JsonProperty(PropertyName = "Default (from game)")]
            public bool Default;

            [JsonProperty(PropertyName = "Use percent?")]
            public bool Percent;

            [JsonProperty(PropertyName = "Percent (value)")]
            public float PercentValue;
        }

        private class BlockSettings
        {
            [JsonProperty(PropertyName = "Work with NoEscape?")]
            public bool UseNoEscape;

            [JsonProperty(PropertyName = "Work with Clans? (clan members will be able to delete/upgrade)")]
            public bool UseClans;

            [JsonProperty(PropertyName = "Work with Friends? (friends will be able to delete/upgrade)")]
            public bool UseFriends;

            [JsonProperty(PropertyName = "Can those authorized in the cupboard delete/upgrade?")]
            public bool UseCupboard;

            [JsonProperty(PropertyName = "Is an upgrade/remove cupbaord required?")]
            public bool NeedCupboard;
        }

        private abstract class TotalSettings
        {
            [JsonProperty(PropertyName = "Time of action")]
            public int ActionTime;

            [JsonProperty(PropertyName = "Cooldown (default | 0 - disable)")]
            public int Cooldown;

            [JsonProperty(PropertyName = "Cooldowns", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public Dictionary<string, int> VipCooldown;

            [JsonProperty(PropertyName = "Block After Wipe (default | 0 - disable)")]
            public int AfterWipe;

            [JsonProperty(PropertyName = "Block After Wipe", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public Dictionary<string, int> VipAfterWipe;

            public int GetCooldown(BasePlayer player)
            {
                return (from check in VipCooldown
                    where player.IPlayer.HasPermission(check.Key)
                    select check.Value).Prepend(Cooldown).Min();
            }

            public int GetWipeCooldown(BasePlayer player)
            {
                return (from check in VipAfterWipe
                    where player.IPlayer.HasPermission(check.Key)
                    select check.Value).Prepend(AfterWipe).Min();
            }
        }

        private class UpgradeSettings : TotalSettings
        {
        }

        private class RemoveSettings : TotalSettings
        {
            [JsonProperty(PropertyName = "Blocked items to remove (prefab)",
                ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<string> BlockedList;

            [JsonProperty(PropertyName = "Return Item")]
            public bool ReturnItem;

            [JsonProperty(PropertyName = "Returnable Item Percentage")]
            public float ReturnPercent;

            [JsonProperty(PropertyName = "Can friends remove? (Friends)")]
            public bool CanFriends;

            [JsonProperty(PropertyName = "Can clanmates remove? (Clans)")]
            public bool CanClan;

            [JsonProperty(PropertyName = "Can teammates remove?")]
            public bool CanTeams;

            [JsonProperty(PropertyName = "Require a cupboard")]
            public bool RequireCupboard;

            [JsonProperty(PropertyName = "Remove by cupboard? (those who are authorized in the cupboard can remove)")]
            public bool RemoveByCupboard;

            [JsonProperty(PropertyName = "Condition Settings")]
            public ConditionSettings Condition;
        }

        private class Mode
        {
            [JsonProperty(PropertyName = "Icon (assets/url)")]
            public string Icon;

            [JsonProperty(PropertyName = "Type (Remove/Wood/Stone/Metal/TopTier)")]
            [JsonConverter(typeof(StringEnumConverter))]
            public Types Type;

            [JsonProperty(PropertyName = "Permission (ex: buildtools.1)")]
            public string Permission;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch (Exception ex)
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
                Debug.LogException(ex);
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration();
        }

        #endregion

        #region Data

        private PluginData _data;

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _data);
        }

        private void LoadData()
        {
            try
            {
                _data = Interface.Oxide.DataFileSystem.ReadObject<PluginData>(Name);
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_data == null) _data = new PluginData();
        }

        private class PluginData
        {
            [JsonProperty(PropertyName = "Players", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public readonly Dictionary<ulong, PlayerData> Players = new Dictionary<ulong, PlayerData>();
        }

        private class PlayerData
        {
            [JsonProperty(PropertyName = "Last Upgrade")]
            public DateTime LastUpgrade = new DateTime(1970, 1, 1, 0, 0, 0);

            [JsonProperty(PropertyName = "Last Remove")]
            public DateTime LastRemove = new DateTime(1970, 1, 1, 0, 0, 0);

            public int LeftTime(bool remove, int cooldown)
            {
                var time = remove
                    ? LastRemove
                    : LastUpgrade;
                return (int) time.AddSeconds(cooldown).Subtract(DateTime.UtcNow).TotalSeconds;
            }

            public bool HasCooldown(bool remove, int cooldown)
            {
                var time = remove
                    ? LastRemove
                    : LastUpgrade;

                return DateTime.UtcNow.Subtract(time).TotalSeconds < cooldown;
            }

            public static bool HasWipeCooldown(int cooldown)
            {
                return DateTime.UtcNow.Subtract(SaveRestore.SaveCreatedTime.ToUniversalTime()).TotalSeconds < cooldown;
            }

            public static int WipeLeftTime(int cooldown)
            {
                return (int) SaveRestore.SaveCreatedTime.ToUniversalTime().AddSeconds(cooldown)
                    .Subtract(DateTime.UtcNow)
                    .TotalSeconds;
            }
        }

        private PlayerData GetPlayerData(ulong userId)
        {
            PlayerData playerData;
            if (!_data.Players.TryGetValue(userId, out playerData))
                _data.Players.Add(userId, playerData = new PlayerData());

            return playerData;
        }

        #endregion

        #region Hooks

        private void Init()
        {
            _instance = this;

            LoadData();

            RegisterPermissions();

            AddCovalenceCommand(_config.UpgradeCommands, nameof(CmdUpgrade));

            AddCovalenceCommand(_config.RemoveCommands, nameof(CmdRemove));

            if (!_config.AdditionalSlot.Enabled)
            {
                Unsubscribe(nameof(OnPlayerConnected));
                Unsubscribe(nameof(OnPlayerDisconnected));
                Unsubscribe(nameof(OnPlayerDeath));
                Unsubscribe(nameof(OnActiveItemChanged));
            }
        }

        private void OnServerInitialized()
        {
            LoadImages();

            if (_config.AdditionalSlot.Enabled)
                foreach (var player in BasePlayer.activePlayerList)
                    OnPlayerConnected(player);
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);

                if (_config.AdditionalSlot.Enabled)
                    OnPlayerDisconnected(player, string.Empty);
            }

            Array.ForEach(_components.Values.ToArray(), build =>
            {
                if (build != null)
                    build.Kill();
            });

            SaveData();

            _config = null;
            _instance = null;
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || player.IsNpc) return;

            AdditionalSlot.Get(player);
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (player == null || player.IsNpc) return;

            AdditionalSlot.Remove(player);
        }

        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (player == null || player.IsNpc) return;

            AdditionalSlot.Remove(player);
        }

        private void OnActiveItemChanged(BasePlayer player, Item oldItem, Item newItem)
        {
            if (player == null || player.IsNpc) return;

            if (oldItem != null && oldItem.position == 6)
            {
                var build = GetBuild(player);
                if (build != null && build.activeByItem)
                    build.Kill();
                return;
            }

            if (newItem != null && newItem.position == 6)
            {
                if (GetBuild(player) != null) return;

                AddOrGetBuild(player, true).GoNext();
            }
        }

        private object OnHammerHit(BasePlayer player, HitInfo info)
        {
            if (player == null || info == null) return null;

            var entity = info.HitEntity as BaseCombatEntity;
            if (entity == null || entity.OwnerID == 0) return null;

            var build = GetBuild(player);
            if (build == null) return null;

            var mode = build.GetMode();
            if (mode == null) return null;

            if (!player.CanBuild())
            {
                SendNotify(player, BuildingBlocked, 1);
                return true;
            }

            if (_config.Block.UseNoEscape && NoEscape != null && NoEscape.IsLoaded && IsRaidBlocked(player))
            {
                SendNotify(player, mode.Type == Types.Remove ? RemoveRaidBlocked : UpgradeRaidBlocked, 1);
                return true;
            }

            var cupboard = entity.GetBuildingPrivilege();
            if (cupboard == null && _config.Block.NeedCupboard)
            {
                SendNotify(player, CupboardRequired, 1);
                return true;
            }

            if (entity.OwnerID != player.userID) //NOT OWNER
            {
                var any =
                    _config.Block.UseFriends && Friends != null && Friends.IsLoaded &&
                    IsFriends(player.OwnerID, entity.OwnerID) ||
                    _config.Block.UseClans && Clans != null && Clans.IsLoaded &&
                    IsClanMember(player.OwnerID, entity.OwnerID) ||
                    _config.Block.UseCupboard && (cupboard == null || cupboard.IsAuthed(player));

                if (!any)
                {
                    SendNotify(player, mode.Type == Types.Remove ? CantRemove : CantUpgrade, 1);
                    return true;
                }
            }

            if (mode.Type == Types.Remove)
            {
                if (_config.Remove.BlockedList.Contains(entity.name))
                {
                    SendNotify(player, mode.Type == Types.Remove ? CantRemove : CantUpgrade, 1);
                    return true;
                }
            }
            else
            {
                var block = entity as BuildingBlock;
                if (block != null && (int) block.grade >= (int) mode.Type) return true;
            }

            build.DoIt(entity);
            return true;
        }

        private void OnEntityBuilt(Planner plan, GameObject go)
        {
            var player = plan.GetOwnerPlayer();
            if (player == null) return;

            var block = go.ToBaseEntity() as BuildingBlock;
            if (block == null) return;

            var build = GetBuild(player);
            if (build == null) return;

            var mode = build.GetMode();
            if (mode == null || mode.Type == Types.Remove) return;

            build.DoIt(block);
        }

        #endregion

        #region Commands

        private void CmdRemove(IPlayer cov, string command, string[] args)
        {
            var player = cov.Object as BasePlayer;
            if (player == null) return;

            var mode = _config.Modes.Find(x => x.Type == Types.Remove);
            if (mode == null || !string.IsNullOrEmpty(mode.Permission) && !cov.HasPermission(mode.Permission))
            {
                SendNotify(player, NoPermission, 1);
                return;
            }

            if (args.Length > 0 && args[0] == "all")
            {
                var cupboard = player.GetBuildingPrivilege();
                if (cupboard == null)
                {
                    SendNotify(player, NoCupboard, 1);
                    return;
                }

                var data = GetPlayerData(player.userID);

                var cooldown = _config.Remove.GetCooldown(player);
                if (cooldown > 0 && data.HasCooldown(false, cooldown))
                {
                    SendNotify(player, RemoveCanThrough, 1,
                        data.LeftTime(false, cooldown));
                    return;
                }

                var blockWipe = _config.Remove.GetWipeCooldown(player);
                if (blockWipe > 0 && PlayerData.HasWipeCooldown(blockWipe))
                {
                    SendNotify(player, RemoveCanThrough, 1,
                        PlayerData.WipeLeftTime(blockWipe));
                    return;
                }

                var entities = BaseNetworkable.serverEntities
                    .OfType<BaseCombatEntity>()
                    .Where(x => !(x is BasePlayer) && x.GetBuildingPrivilege() == cupboard)
                    .ToList();
                if (entities.Count == 0 || entities.Any(x => !CanRemove(player, x)))
                    return;

                Global.Runner.StartCoroutine(StartRemove(player, entities));

                SendNotify(player, SuccessfullyUpgrade, 0);
                return;
            }

            AddOrGetBuild(player).Init(mode);
        }

        private void CmdUpgrade(IPlayer cov, string command, string[] args)
        {
            var player = cov.Object as BasePlayer;
            if (player == null) return;

            if (args.Length == 0)
            {
                AddOrGetBuild(player).GoNext();
                return;
            }

            switch (args[0])
            {
                case "all":
                {
                    if (!cov.HasPermission(PermAll))
                    {
                        SendNotify(player, NoPermission, 1);
                        return;
                    }

                    Types upgradeType;
                    if (args.Length < 2 || ParseType(args[1], out upgradeType) == Types.None)
                    {
                        cov.Reply($"Error syntax! Use: /{command} {args[0]} [wood/stone/metal/toptier]");
                        return;
                    }

                    var cupboard = player.GetBuildingPrivilege();
                    if (cupboard == null)
                    {
                        SendNotify(player, NoCupboard, 1);
                        return;
                    }

                    if (!player.CanBuild())
                    {
                        SendNotify(player, BuildingBlocked, 1);
                        return;
                    }

                    if (_config.Block.UseNoEscape && NoEscape != null && NoEscape.IsLoaded && IsRaidBlocked(player))
                    {
                        SendNotify(player, UpgradeRaidBlocked, 1);
                        return;
                    }

                    var data = GetPlayerData(player.userID);

                    var cooldown = _config.Upgrade.GetCooldown(player);
                    if (cooldown > 0 && data.HasCooldown(false, cooldown))
                    {
                        SendNotify(player, UpgradeCanThrough, 1,
                            data.LeftTime(false, cooldown));
                        return;
                    }

                    var blockWipe = _config.Upgrade.GetWipeCooldown(player);
                    if (blockWipe > 0 && PlayerData.HasWipeCooldown(blockWipe))
                    {
                        SendNotify(player, UpgradeCanThrough, 1,
                            PlayerData.WipeLeftTime(blockWipe));
                        return;
                    }

                    var grade = GetEnum(upgradeType);

                    var buildingBlocks = BaseNetworkable.serverEntities
                        .OfType<BuildingBlock>()
                        .Where(x =>
                            x.GetBuildingPrivilege() == cupboard &&
                            x.grade <= grade &&
                            x.CanChangeToGrade(grade, player))
                        .ToList();
                    if (buildingBlocks.Count == 0) return;

                    if (!cov.HasPermission(PermFree))
                    {
                        if (!CanAffordUpgrade(buildingBlocks, grade, player))
                        {
                            SendNotify(player, NotEnoughResources, 1);
                            return;
                        }

                        PayForUpgrade(buildingBlocks, grade, player);
                    }

                    Global.Runner.StartCoroutine(StartUpgrade(player, buildingBlocks, grade));

                    SendNotify(player, SuccessfullyUpgrade, 0);
                    break;
                }
                default:
                {
                    Types type;
                    if (ParseType(args[0], out type) != Types.None)
                    {
                        var modes = GetPlayerModes(player);
                        if (modes == null) return;

                        var mode = modes.Find(x => x.Type == type);
                        if (mode == null || !string.IsNullOrEmpty(mode.Permission) &&
                            !cov.HasPermission(mode.Permission))
                        {
                            SendNotify(player, NoPermission, 1);
                            return;
                        }

                        var build = AddOrGetBuild(player);
                        build.Init(mode);
                    }
                    else
                    {
                        AddOrGetBuild(player).GoNext();
                    }

                    break;
                }
            }
        }

        [ConsoleCommand("UI_Builder")]
        private void CmdConsoleBuilding(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null || !arg.HasArgs()) return;

            switch (arg.Args[0])
            {
                case "mode":
                {
                    int index;
                    if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out index)) return;

                    var mode = GetPlayerModes(player)[index];
                    if (mode == null) return;

                    AddOrGetBuild(player)?.Init(mode);
                    break;
                }

                case "close":
                {
                    GetBuild(player)?.Kill();
                    break;
                }
            }
        }

        #endregion

        #region Component

        private readonly Dictionary<BasePlayer, BuildComponent> _components =
            new Dictionary<BasePlayer, BuildComponent>();

        private BuildComponent GetBuild(BasePlayer player)
        {
            BuildComponent build;
            return _components.TryGetValue(player, out build) ? build : null;
        }

        private BuildComponent AddOrGetBuild(BasePlayer player, bool item = false)
        {
            BuildComponent build;
            if (_components.TryGetValue(player, out build))
                return build;

            build = player.gameObject.AddComponent<BuildComponent>();
            build.activeByItem = item;
            return build;
        }

        private class BuildComponent : FacepunchBehaviour
        {
            #region Fields

            private BasePlayer _player;

            private Mode _mode;

            private float _startTime;

            private readonly CuiElementContainer _container = new CuiElementContainer();

            private bool _started = true;

            private float _cooldown;

            public bool activeByItem;

            #endregion

            #region Init

            private void Awake()
            {
                _player = GetComponent<BasePlayer>();

                _instance._components[_player] = this;

                enabled = false;
            }

            public void Init(Mode mode)
            {
                if (mode == null)
                    mode = GetPlayerModes(_player).FirstOrDefault();

                _mode = mode;

                _startTime = Time.time;

                _cooldown = GetCooldown();

                MainUi();

                enabled = true;

                _started = true;
            }

            #endregion

            #region Interface

            public void MainUi()
            {
                _container.Clear();

                _container.Add(new CuiPanel
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0"},
                    Image = {Color = "0 0 0 0"}
                }, "Overlay", Layer);

                #region Modes

                var modes = GetPlayerModes(_player);

                var width = 30f;
                var margin = 5f;
                var xSwitch = 15f + _config.UI.OffsetX;

                for (var i = 0; i < modes.Count; i++)
                {
                    var mode = modes[i];

                    _container.Add(new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0", AnchorMax = "1 1",
                            OffsetMin = $"{xSwitch} {15 + _config.UI.OffsetY}",
                            OffsetMax = $"{xSwitch + width} {45 + _config.UI.OffsetY}"
                        },
                        Image =
                        {
                            Color = mode.Type == _mode.Type ? _config.UI.Color1.Get : _config.UI.Color2.Get
                        }
                    }, Layer, Layer + $".Mode.{i}");

                    #region Icon

                    if (mode.Icon.Contains("assets/icon"))
                        _container.Add(new CuiPanel
                        {
                            RectTransform =
                            {
                                AnchorMin = "0 0", AnchorMax = "1 1",
                                OffsetMin = "5 5",
                                OffsetMax = "-5 -5"
                            },
                            Image =
                            {
                                Sprite = $"{mode.Icon}"
                            }
                        }, Layer + $".Mode.{i}");
                    else
                        _container.Add(new CuiElement
                        {
                            Parent = Layer + $".Mode.{i}",
                            Components =
                            {
                                new CuiRawImageComponent
                                    {Png = _instance.ImageLibrary.Call<string>("GetImage", mode.Icon)},
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = "0 0", AnchorMax = "1 1",
                                    OffsetMin = "5 5",
                                    OffsetMax = "-5 -5"
                                }
                            }
                        });

                    #endregion

                    _container.Add(new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0", AnchorMax = "1 1"
                        },
                        Text = {Text = ""},
                        Button =
                        {
                            Color = "0 0 0 0",
                            Command = $"UI_Builder mode {i}"
                        }
                    }, Layer + $".Mode.{i}");

                    xSwitch += width + margin;

                    if (i == 0)
                        margin = 0f;
                }

                #endregion

                #region Update

                _container.Add(new CuiPanel
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "1 1",
                        OffsetMin = $"{15 + _config.UI.OffsetX} {50 + _config.UI.OffsetY}",
                        OffsetMax = $"{170 + _config.UI.OffsetX} {80 + _config.UI.OffsetY}"
                    },
                    Image =
                    {
                        Color = _config.UI.Color2.Get
                    }
                }, Layer, Layer + ".Panel");

                _container.Add(new CuiButton
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0 0",
                        OffsetMin = "5 5", OffsetMax = "25 25"
                    },
                    Text =
                    {
                        Text = _instance.Msg(_player, CloseMenu),
                        Align = TextAnchor.MiddleCenter,
                        Font = "robotocondensed-regular.ttf",
                        FontSize = 14,
                        Color = "1 1 1 1"
                    },
                    Button =
                    {
                        Color = "0 0 0 0",
                        Command = "UI_Builder close"
                    }
                }, Layer + ".Panel");

                #region Icon

                if (_mode != null)
                    _container.Add(new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0",
                            OffsetMin = "5 50", OffsetMax = "25 25"
                        },
                        Image =
                        {
                            Color = "1 1 1 1",
                            Sprite = $"{_mode.Icon}"
                        }
                    }, Layer + ".Panel");

                #endregion

                #endregion

                CuiHelper.DestroyUi(_player, Layer);
                CuiHelper.AddUi(_player, _container);
            }

            private void UpdateUi()
            {
                _container.Clear();

                _container.Add(new CuiPanel
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "1 1",
                        OffsetMin = "30 0", OffsetMax = "0 0"
                    },
                    Image = {Color = "0 0 0 0"}
                }, Layer + ".Panel", Layer + ".Update");

                #region Text

                _container.Add(new CuiLabel
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "1 1",
                        OffsetMin = "0 0", OffsetMax = "0 0"
                    },
                    Text =
                    {
                        Text =
                            $"{(_mode.Type == Types.Remove ? _instance.Msg(_player, RemoveTitle, GetLeftTime()) : _instance.Msg(_player, UpgradeTitle, _instance.Msg(_player, $"{_mode.Type}"), GetLeftTime()))}",
                        Align = TextAnchor.MiddleLeft,
                        Font = "robotocondensed-regular.ttf",
                        FontSize = 12,
                        Color = "1 1 1 0.6"
                    }
                }, Layer + ".Update");

                #endregion

                #region Progress

                var progress = (Time.time - _startTime) / _cooldown;
                if (progress > 0)
                {
                    var totalWidth = 155f * progress - 30f;

                    _container.Add(new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0",
                            OffsetMin = "-30 0", OffsetMax = $"{totalWidth} 2"
                        },
                        Image =
                        {
                            Color = _config.UI.Color3.Get
                        }
                    }, Layer + ".Update");
                }

                #endregion

                CuiHelper.DestroyUi(_player, Layer + ".Update");
                CuiHelper.AddUi(_player, _container);
            }

            #endregion

            #region Update

            private void FixedUpdate()
            {
                if (!_started) return;

                var timeLeft = Time.time - _startTime;
                if (timeLeft > _cooldown)
                {
                    Kill();
                    return;
                }

                UpdateUi();
            }

            #endregion

            #region Main

            public void DoIt(BaseCombatEntity entity)
            {
                if (entity == null) return;

                switch (_mode.Type)
                {
                    case Types.Remove:
                    {
                        if (!CanRemove(_player, entity))
                            return;

                        var data = _instance.GetPlayerData(_player.userID);

                        var cooldown = _config.Remove.GetCooldown(_player);
                        if (cooldown > 0 && data.HasCooldown(true, cooldown))
                        {
                            _instance.SendNotify(_player, RemoveCanThrough, 1,
                                data.LeftTime(true, cooldown));
                            return;
                        }

                        var blockWipe = _config.Remove.GetWipeCooldown(_player);
                        if (blockWipe > 0 && PlayerData.HasWipeCooldown(blockWipe))
                        {
                            _instance.SendNotify(_player, RemoveCanThrough, 1,
                                PlayerData.WipeLeftTime(blockWipe));
                            return;
                        }

                        RemoveEntity(_player, entity);

                        data.LastRemove = DateTime.UtcNow;
                        break;
                    }
                    default:
                    {
                        var block = entity as BuildingBlock;
                        if (block == null) return;

                        var data = _instance.GetPlayerData(_player.userID);

                        var cooldown = _config.Upgrade.GetCooldown(_player);
                        if (cooldown > 0 && data.HasCooldown(false, cooldown))
                        {
                            _instance.SendNotify(_player, UpgradeCanThrough, 1,
                                data.LeftTime(false, cooldown));
                            return;
                        }

                        var blockWipe = _config.Upgrade.GetWipeCooldown(_player);
                        if (blockWipe > 0 && PlayerData.HasWipeCooldown(blockWipe))
                        {
                            _instance.SendNotify(_player, UpgradeCanThrough, 1,
                                PlayerData.WipeLeftTime(blockWipe));
                            return;
                        }

                        var enumGrade = GetEnum(_mode.Type);

                        var grade = block.GetGrade(enumGrade);
                        if (grade == null || !block.CanChangeToGrade(enumGrade, _player) ||
                            Interface.CallHook("OnStructureUpgrade", block, _player, enumGrade) != null ||
                            block.SecondsSinceAttacked < 30.0)
                            return;

                        if (!_player.IPlayer.HasPermission(PermFree))
                        {
                            if (!block.CanAffordUpgrade(enumGrade, _player))
                            {
                                _instance.SendNotify(_player, NotEnoughResources, 0);
                                return;
                            }

                            block.PayForUpgrade(grade, _player);
                        }

                        UpgradeBuildingBlock(block, enumGrade);

                        Effect.server.Run(
                            "assets/bundled/prefabs/fx/build/promote_" + enumGrade.ToString().ToLower() + ".prefab",
                            block,
                            0U, Vector3.zero, Vector3.zero);

                        data.LastUpgrade = DateTime.UtcNow;
                        break;
                    }
                }

                _startTime = Time.time;
            }

            #endregion

            #region Utils

            private int GetLeftTime()
            {
                return Mathf.RoundToInt(_startTime + _cooldown - Time.time);
            }

            public void GoNext()
            {
                var modes = GetPlayerModes(_player);
                if (modes == null) return;

                if (_mode == null)
                {
                    _mode = modes.FindAll(x => x.Type != Types.Remove).FirstOrDefault();
                    Init(_mode);
                    return;
                }

                var i = 0;
                for (; i < modes.Count; i++)
                {
                    var mode = modes[i];

                    if (mode == _mode)
                        break;
                }

                i++;

                var nextMode = modes.Count <= i ? modes[0] : modes[i];

                _mode = nextMode;

                Init(nextMode);
            }

            public Mode GetMode()
            {
                return _mode;
            }

            private float GetCooldown()
            {
                switch (_mode.Type)
                {
                    case Types.Remove:
                        return _config.Remove.ActionTime;
                    default:
                        return _config.Upgrade.ActionTime;
                }
            }

            #endregion

            #region Destroy

            private void OnDestroy()
            {
                CancelInvoke();

                CuiHelper.DestroyUi(_player, Layer);

                _instance?._components.Remove(_player);

                Destroy(this);
            }

            public void Kill()
            {
                enabled = false;

                _started = false;

                DestroyImmediate(this);
            }

            #endregion
        }

        #endregion

        #region Utils

        private void RegisterPermissions()
        {
            permission.RegisterPermission(PermAll, this);

            permission.RegisterPermission(PermFree, this);

            _config.Modes.ForEach(mode =>
            {
                if (!string.IsNullOrEmpty(mode.Permission) && !permission.PermissionExists(mode.Permission))
                    permission.RegisterPermission(mode.Permission, this);
            });
        }

        private void LoadImages()
        {
            if (ImageLibrary == null || !ImageLibrary.IsLoaded)
            {
                PrintError("IMAGE LIBRARY IS NOT INSTALLED!");
            }
            else
            {
                var imagesList = new Dictionary<string, string>();

                _config.Modes.FindAll(mode => !mode.Icon.Contains("assets/icon")).ForEach(mode =>
                {
                    if (!string.IsNullOrEmpty(mode.Icon) && !imagesList.ContainsKey(mode.Icon))
                        imagesList.Add(mode.Icon, mode.Icon);
                });

                ImageLibrary?.Call("ImportImageList", Title, imagesList, 0UL, true);
            }
        }

        private static string FixNames(string name)
        {
            switch (name)
            {
                case "wall.external.high.wood": return "wall.external.high";
                case "electric.windmill.small": return "generator.wind.scrap";
                case "graveyardfence": return "wall.graveyard.fence";
                case "coffinstorage": return "coffin.storage";
            }

            return name;
        }

        private static List<Mode> GetPlayerModes(BasePlayer player)
        {
            return _config.Modes.FindAll(x =>
                string.IsNullOrEmpty(x.Permission) || player.IPlayer.HasPermission(x.Permission));
        }

        private bool IsRaidBlocked(BasePlayer player)
        {
            return Convert.ToBoolean(NoEscape?.Call("IsRaidBlocked", player));
        }

        private bool IsClanMember(ulong playerID, ulong targetID)
        {
            return Convert.ToBoolean(Clans?.Call("HasFriend", playerID, targetID));
        }

        private bool IsFriends(ulong playerID, ulong friendId)
        {
            return Convert.ToBoolean(Friends?.Call("AreFriends", playerID, friendId));
        }

        private static BuildingGrade.Enum GetEnum(Types type)
        {
            switch (type)
            {
                case Types.Wood:
                    return BuildingGrade.Enum.Wood;
                case Types.Stone:
                    return BuildingGrade.Enum.Stone;
                case Types.Metal:
                    return BuildingGrade.Enum.Metal;
                case Types.TopTier:
                    return BuildingGrade.Enum.TopTier;
                default:
                    return BuildingGrade.Enum.None;
            }
        }

        private static void RemoveEntity(BasePlayer player, BaseCombatEntity entity)
        {
            if (_config.Remove.ReturnItem)
                GiveRefund(entity, player);

            entity.Kill();
        }

        private static bool CanRemove(BasePlayer player, BaseEntity entity)
        {
            if (entity.OwnerID == 0)
            {
                _instance.SendNotify(player, CantRemove, 1);
                return false;
            }

            var storageContainer = entity.GetComponent<StorageContainer>();
            if (storageContainer != null && storageContainer.inventory.itemList.Count > 1)
            {
                _instance.SendNotify(player, CRStorageNotEmpty, 1);
                return false;
            }

            var combat = entity.GetComponent<BaseCombatEntity>();
            if (combat != null && combat.SecondsSinceAttacked < 30f)
            {
                _instance.SendNotify(player, CRDamaged, 1);
                return false;
            }

            if (Interface.Call("CanRemove", player, entity) != null)
            {
                _instance.SendNotify(player, CRBeBlocked, 1);
                return false;
            }

            if (_config.Block.NeedCupboard && entity.GetBuildingPrivilege() == null)
            {
                _instance.SendNotify(player, CRBuildingBlock, 1);
                return false;
            }

            if (_config.Block.UseNoEscape && _instance.NoEscape != null && _instance.NoEscape.IsLoaded &&
                _instance.IsRaidBlocked(player))
            {
                _instance.SendNotify(player, RemoveRaidBlocked, 1);
                return false;
            }

            if (player.userID != entity.OwnerID)
            {
                if (_config.Remove.RemoveByCupboard)
                    return true;

                if (_config.Remove.CanClan && _instance.IsClanMember(player.userID, entity.OwnerID)) return true;

                if (_config.Remove.CanFriends && _instance.IsFriends(player.userID, entity.OwnerID)) return true;

                _instance.SendNotify(player, CRNotAccess, 1);
                return false;
            }

            return true;
        }

        private static void GiveRefund(BaseCombatEntity entity, BasePlayer player)
        {
            var shortPrefabName = entity.ShortPrefabName;
            shortPrefabName = Regex.Replace(shortPrefabName, "\\.deployed|_deployed", "");
            shortPrefabName = FixNames(shortPrefabName);

            var item = ItemManager.CreateByName(shortPrefabName);
            if (item != null)
            {
                HandleCondition(ref item, player, entity);

                player.inventory.GiveItem(item);
                return;
            }

            entity.BuildCost()?.ForEach(value =>
            {
                var amount = _config.Remove.ReturnPercent < 100
                    ? Convert.ToInt32(value.amount * (_config.Remove.ReturnPercent / 100f))
                    : Convert.ToInt32(value.amount);

                var x = ItemManager.Create(value.itemDef, amount);
                if (x == null) return;

                HandleCondition(ref x, player, entity);

                player.GiveItem(x);
            });
        }

        private static void HandleCondition(ref Item item, BasePlayer player, BaseCombatEntity entity)
        {
            if (_config.Remove.Condition.Default)
            {
                if (entity.pickup.setConditionFromHealth && item.hasCondition)
                    item.conditionNormalized = Mathf.Clamp01(entity.healthFraction - entity.pickup.subtractCondition);
                //entity.OnPickedUpPreItemMove(item, player);
            }

            if (_config.Remove.Condition.Percent)
                item.LoseCondition(item.maxCondition * (_config.Remove.Condition.PercentValue / 100f));
        }

        private static void UpgradeBuildingBlock(BuildingBlock block, BuildingGrade.Enum @enum)
        {
            if (block == null || block.IsDestroyed) return;

            block.SetGrade(@enum);
            block.SetHealthToMax();
            block.StartBeingRotatable();
            block.SendNetworkUpdate();
            block.UpdateSkin();
            block.ResetUpkeepTime();
            block.UpdateSurroundingEntities();
            BuildingManager.server.GetBuilding(block.buildingID)?.Dirty();
        }

        private bool CanAffordUpgrade(List<BuildingBlock> blocks, BuildingGrade.Enum @enum, BasePlayer player)
        {
            return blocks.All(block => block.GetGrade(@enum).costToBuild.All(itemAmount =>
                player.inventory.GetAmount(itemAmount.itemid) >= itemAmount.amount));
        }

        private static void PayForUpgrade(List<BuildingBlock> blocks, BuildingGrade.Enum @enum, BasePlayer player)
        {
            var collect = new List<Item>();

            blocks.ForEach(block => block.GetGrade(@enum).costToBuild.ForEach(itemAmount =>
            {
                player.inventory.Take(collect, itemAmount.itemid, (int) itemAmount.amount);
                player.Command("note.inv " + itemAmount.itemid + " " + (float) ((int) itemAmount.amount * -1.0));
            }));

            foreach (var obj in collect)
                obj.Remove();
        }

        private IEnumerator StartUpgrade(BasePlayer player, List<BuildingBlock> blocks, BuildingGrade.Enum @enum)
        {
            for (var i = 0; i < blocks.Count; i++)
            {
                var block = blocks[i];
                if (block == null || block.IsDestroyed) continue;

                UpgradeBuildingBlock(block, @enum);

                if (i % 10 == 0) yield return CoroutineEx.waitForFixedUpdate;
            }
        }

        private IEnumerator StartRemove(BasePlayer player, List<BaseCombatEntity> entities)
        {
            for (var i = 0; i < entities.Count; i++)
            {
                var entity = entities[i];
                if (entity == null || entity.IsDestroyed) continue;

                RemoveEntity(player, entity);

                if (i % 10 == 0)
                    yield return CoroutineEx.waitForFixedUpdate;
            }
        }

        private static Types ParseType(string arg, out Types type)
        {
            Types upgradeType;
            if (Enum.TryParse(arg, true, out upgradeType))
            {
                type = upgradeType;
                return type;
            }

            int value;
            if (int.TryParse(arg, out value) && value > 0 && value < 6)
            {
                type = (Types) value;
                return type;
            }

            type = Types.None;
            return type;
        }

        #endregion

        #region Lang

        private const string
            CRNotAccess = "CRNotAccess",
            CRBuildingBlock = "CRBuildingBlock",
            CRBeBlocked = "CRBeBlocked",
            CRStorageNotEmpty = "CRStorageNotEmpty",
            CRDamaged = "CRDamaged",
            SuccessfullyRemove = "SuccessfullyRemove",
            CloseMenu = "CloseMenu",
            UpgradeTitle = "UpgradeTitle",
            RemoveTitle = "RemoveTitle",
            UpgradeCanThrough = "UpgradeCanThrough",
            RemoveCanThrough = "RemoveCanThrough",
            NoPermission = "NoPermission",
            SuccessfullyUpgrade = "SuccessfullyUpgrade",
            NoCupboard = "NoCupboard",
            CupboardRequired = "CupboardRequired",
            RemoveRaidBlocked = "RemoveRaidBlocked",
            UpgradeRaidBlocked = "UpgradeRaidBlocked",
            BuildingBlocked = "BuildingBlocked",
            CantUpgrade = "CantUpgrade",
            CantRemove = "CantRemove",
            NotEnoughResources = "NotEnoughResources";

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                [NotEnoughResources] = "Not enough resources to upgrade!",
                [CantRemove] = "You can remove this entity.",
                [CantUpgrade] = "You cannot upgrade this entity.",
                [BuildingBlocked] = "You are building blocked",
                [UpgradeRaidBlocked] = "You cannot upgrade buildings <color=#81B67A>during a raid!</color>!",
                [RemoveRaidBlocked] = "You cannot upgrade or remove <color=#81B67A>during a raid!</color>!",
                [CupboardRequired] = "A Cupboard is required!",
                [NoCupboard] = "No cupboard found!",
                [SuccessfullyUpgrade] = "You have successfully upgraded a building",
                [NoPermission] = "You do not have permission to use this mode!",
                [UpgradeCanThrough] = "You can upgrade the building in: {0}s",
                [RemoveCanThrough] = "You can remove the building in: {0}s",
                [RemoveTitle] = "Remove in <color=white>{0}s</color>",
                [UpgradeTitle] = "Upgrade to {0} <color=white>{1}s</color>",
                [CloseMenu] = "✕",
                [SuccessfullyRemove] = "You have successfully removed a building",
                [CRDamaged] = "Can't remove: Server has disabled damaged objects from being removed.",
                [CRStorageNotEmpty] = "Can't remove: The entity storage is not empty.",
                [CRBeBlocked] = "Can't remove: An external plugin blocked the usage.",
                [CRBuildingBlock] = "Can't remove: Missing cupboard",
                [CRNotAccess] = "Can't remove: You don't have any rights to remove this.",
                ["Wood"] = "wood",
                ["Stone"] = "stone",
                ["Metal"] = "metal",
                ["TopTier"] = "HQM"
            }, this);
        }

        private string Msg(string key, string userid = null, params object[] obj)
        {
            return string.Format(lang.GetMessage(key, this, userid), obj);
        }

        private string Msg(BasePlayer player, string key, params object[] obj)
        {
            return string.Format(lang.GetMessage(key, this, player.UserIDString), obj);
        }

        private void Reply(BasePlayer player, string key, params object[] obj)
        {
            player.ChatMessage(Msg(player, key, obj));
        }

        private void SendNotify(BasePlayer player, string key, int type, params object[] obj)
        {
            if (_config.UseNotify && (Notify != null || UINotify != null))
                Interface.Oxide.CallHook("SendNotify", player, type, Msg(player, key, obj));
            else
                Reply(player, key, obj);
        }

        #endregion
    }
}

// --- End of file: BuildTools.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CleverEvent.cs ---
// --- Original Local Path: CleverEvent.cs ---

﻿using System;
using System.Collections;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Apex;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("CleverEvent", "Hougan, Ryamkk", "1.0.4")]
    public class CleverEvent : RustPlugin
    {
		[PluginReference] private Plugin StoreHandler;
		[PluginReference] private Plugin ImageLibrary;
		
		public ulong senderID = 76561198236355670;
		
		public string header = "Clever Event";
		public string prefixcolor = "#81B67A";
		public string prefixsize = "16";
		
		public int QuestionAmount = 12;
        public int TimeToAnswer = 12;
        public int AnnounceTime = 300;
        public int FinishPrize = 100;
        public int MinimalPlayers = 15;
		
		private void LoadDefaultConfig()
        {
            GetConfig("Настройки сообщений", "Иконка для сообщений в чате (необходимо указать id профиля steam)", ref senderID);
            GetConfig("Настройки сообщений", "Названия префикса", ref header);
			GetConfig("Настройки сообщений", "Цвет префикса", ref prefixcolor);
			GetConfig("Настройки сообщений", "Размер префиса", ref prefixsize);
			
			GetConfig("Основные настройки", "Стандартное количество вопросов", ref QuestionAmount);
			GetConfig("Основные настройки", "Стандартное время на ответ", ref TimeToAnswer);
			GetConfig("Основные настройки", "Время перед началом игры", ref AnnounceTime);
			GetConfig("Основные настройки", "Стандартный приз", ref FinishPrize);
			GetConfig("Основные настройки", "Минимальное количество игроков", ref MinimalPlayers);
            SaveConfig();
        }
		
        private class Player
        {
            [JsonProperty("Текущий баланс игрока")]
            public int Balance;
        }

		[JsonProperty("Список игроков и их баланса")]
        private Dictionary<ulong, Player> playerBalance = new Dictionary<ulong, Player>();
		[JsonProperty("Список открытых клеверов")]
        private List<ulong> OpenList = new List<ulong>();
        [JsonProperty("Текущая игра")]
        private Game currentGame = null;
		
        private class Game
        {
            [JsonProperty("Время начала игры")] 
			public double StartTimeStamp;
            
            [JsonProperty("Текущий номер вопроса")] 
			public int CurrentQuestionIndex = 0;
            [JsonProperty("Текущий призовой фонд")] 
			public int FinishPrize = 0;
            [JsonProperty("Время на ответ")] 
			public int TimeToAnswer = 0;

            [JsonProperty("Текущий таймер")]
            public int NextTimerAmount = 10;
            
            [JsonProperty("Сфомированный список вопросов")]
            public List<Question> Questions = new List<Question>();
            [JsonProperty("Правильные ответы на вопросы")]
            public Dictionary<int, int> PercentsAnswers = new Dictionary<int, int>
            {
                [0] = 0,
                [1] = 0,
                [2] = 0
            };
            [JsonProperty("Ответы игроков на каждый вопрос")]
            public List<Dictionary<BasePlayer, bool>> PlayerAnswers = new List<Dictionary<BasePlayer, bool>>();

            public Game(double startTime, int finishPrize, int timeToAnswer, List<Question> questionList)
            {
                this.StartTimeStamp = startTime + GetTimeStamp();
                this.CurrentQuestionIndex = 0;
                this.FinishPrize = finishPrize;
                this.TimeToAnswer = timeToAnswer;

                this.Questions = questionList;
                this.PlayerAnswers = new List<Dictionary<BasePlayer, bool>>();
                
                Interface.Oxide.LogWarning("Создана новая игра:", "Clever");
                Interface.Oxide.LogWarning($" - Приз на игру: {finishPrize} руб.", "Clever");
                Interface.Oxide.LogWarning($" - Кол-во вопросов: {questionList.Count} шт.", "Clever");
            }

            public Question CurrentQuestion()
            {
                if (CurrentQuestionIndex == 0)
                    return null;
                return Questions[CurrentQuestionIndex];
            }

            public bool IsLoose(BasePlayer player)
            {
                if (!PlayerAnswers[0].ContainsKey(player))
                    return true;
                if (!PlayerAnswers[CurrentQuestionIndex - 1].ContainsKey(player))
                    return true;
                if (!PlayerAnswers[CurrentQuestionIndex - 1][player])
                    return true;

                return false;
            }

            public double LeftTime() => StartTimeStamp - GetTimeStamp();
            public string LeftTimeString() => FormatTime(TimeSpan.FromSeconds((int) LeftTime()));
            public string LeftTimeShortString() => TimeSpan.FromSeconds((int) LeftTime()).Minutes + ":" + TimeSpan.FromSeconds((int) LeftTime()).Seconds;
        }

		private static DateTime Epoch = new DateTime(1970, 1, 1);
		public static long GetTimeStamp()
		{
			return (long)DateTime.Now.Subtract(Epoch).TotalSeconds;
		}
		
		public static string FormatTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0)
                result += $"{Format(time.Days, "дней", "дня", "день")} ";

            if (time.Hours != 0)
                result += $"{Format(time.Hours, "часов", "часа", "час")} ";

            if (time.Minutes != 0)
                result += $"{Format(time.Minutes, "минут", "минуты", "минута")} ";

            if (time.Seconds != 0)
                result += $"{Format(time.Seconds, "секунд", "секунды", "секунда")} ";
			
            return result;
        }

        private static string Format(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units} {form1}";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2}";

            return $"{units} {form3}";
        }
        
		private class Question
        {
            [JsonProperty("Текст вопроса")]
            public string Text;
            [JsonProperty("Варианты ответов")]
            public Dictionary<string, bool> Answers = new Dictionary<string, bool>();
        }
		
        [JsonProperty("Список вопросов составляющих игру")]
        private List<Question> questionList = new List<Question>
        {
            new Question
            {
                Text = "От какого излучения спасает солнечнозащитный крем?",
                Answers = new Dictionary<string, bool>
                {
                    ["Электромагнитное"] = false,
                    ["Ультрафиолетовое"] = true,
                    ["Гамма-излучение"] = false
                }
            },
            new Question
            {
                Text = "Как называются ночи в Санкт-Петербурге, когда светло, как днем?",
                Answers = new Dictionary<string, bool>
                {
                    ["Белые"] = true,
                    ["Дневные"] = false,
                    ["Скипнутые"] = false
                }
            },
            new Question
            {
                Text = "Какая из этих планет наиболее удалена от солнца?",
                Answers = new Dictionary<string, bool>
                {
                    ["Уран"] = false,
                    ["Юпитер"] = false,
                    ["Нептун"] = true
                }
            },
            new Question
            {
                Text = "Что кричат фанаты ф/к Балтика на матчах своей команды?",
                Answers = new Dictionary<string, bool>
                {
                    ["Вперед, Балтийцы!"] = true,
                    ["Боже, Царя храни!"] = false,
                    ["Не бейте, лучше обоссыте!"] = false
                }
            },
            new Question
            {
                Text = "Кто является главными героями мультфильма Мадагаскар?",
                Answers = new Dictionary<string, bool>
                {
                    ["Люди"] = false,
                    ["Животные"] = true,
                    ["Реперы"] = false
                }
            },
            new Question
            {
                Text = "Как с английского языка переводится расшифровка аббервиатуры PC?",
                Answers = new Dictionary<string, bool>
                {
                    ["Постконцептуализм"] = false,
                    ["Персональный копмьютер"] = true,
                    ["Параллельная вселенаная"] = false
                }
            },
            new Question
            {
                Text = "Какой город находится на реке Майн?",
                Answers = new Dictionary<string, bool>
                {
                    ["Франкфурт-на-Одере"] = false,
                    ["Майнкрафт"] = false,
                    ["Франкфурт-на-Майне"] = true
                }
            },
            new Question
            {
                Text = "Кризис рядом с берегами Кубы 1962 года",
                Answers = new Dictionary<string, bool>
                {
                    ["Кубинский"] = false,
                    ["Карибский"] = true,
                    ["Советский"] = false
                }
            },
            new Question
            {
                Text = "Назовите столицу Белиза?",
                Answers = new Dictionary<string, bool>
                {
                    ["Бельмопан"] = true,
                    ["Порт-о-Пренс"] = false,
                    ["Ватикан"] = false
                }
            },
            new Question
            {
                Text = "Как назывался роман о человеке, сшитом из разных частей?",
                Answers = new Dictionary<string, bool>
                {
                    ["Робинзон Крузо"] = false,
                    ["Франкенштейн"] = true,
                    ["Мастер и Маргарита"] = false
                }
            },
            new Question
            {
                Text = "Во что вы сейчас играете?",
                Answers = new Dictionary<string, bool>
                {
                    ["Дота 2"] = false,
                    ["Дота первой версии"] = false,
                    ["Клевер"] = true
                }
            },
            new Question
            {
                Text = "Кто такая золовка?",
                Answers = new Dictionary<string, bool>
                {
                    ["Мышь"] = false,
                    ["Птица"] = false,
                    ["Сестра мужа"] = true
                }
            },
        };
		
        // System
        private string MenuLayer = "UI.Clever.MainMenu";
        private string AcceptMenu = "UI.Clever.Close";
		
		private void OnServerInitialized()
        {
			ImageLibrary.Call("AddImage", "https://i.imgur.com/8XP9Fdb.png", "iPhone_Clever");
			ImageLibrary.Call("AddImage", "https://i.imgur.com/Xdlzzk4.png", "iPhone_Menu");
            
			if (Interface.Oxide.DataFileSystem.ExistsDatafile("Clever/Balance"))
            {
                playerBalance = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Player>>("Clever/Balance");
            }
			
			if (!Interface.Oxide.DataFileSystem.ExistsDatafile("Clever/Question"))
            {
                Interface.Oxide.DataFileSystem.WriteObject("Clever/Question", questionList);
                return;
            }
            else
                questionList = Interface.Oxide.DataFileSystem.ReadObject<List<Question>>("Clever/Question");
            
            BasePlayer.activePlayerList.ForEach(OnPlayerInit);
        }

        private void OnPlayerInit(BasePlayer player)
        {
            if (!playerBalance.ContainsKey(player.userID))
                playerBalance.Add(player.userID, new Player { Balance = 0 });
        }

        private string PrepareGame(int questionAmount, int finishPrize)
        {
            Puts("Начинаем подготавливать игру!");
            if (currentGame != null)
                return "Произошла ошибка. Код: №1";

            List<Question> questions = new List<Question>() {new Question()};
            CreateQuestions(questions, questionAmount);
        
            if (questions.Count < questionAmount)
                return $"Мы смогли сгенерировать {questions.Count} вопросов из {questionAmount}";
            
            Puts($"Подготовлено {questions.Count} вопросов!");

            if (BasePlayer.activePlayerList.Count < MinimalPlayers)
                return $"Не достаточно игроков для начала игры!";

            currentGame = new Game(AnnounceTime, finishPrize, TimeToAnswer, questions);
            
            for (int i = 0; i < questionAmount + 1; i++)
                currentGame.PlayerAnswers.Add(new Dictionary<BasePlayer, bool>());
            
            timer.Once((int) (currentGame.LeftTime()), StartGame);
            timer.Repeat(0.99f, AnnounceTime, () =>
            {
                foreach (var check in OpenList)
                {
                    BasePlayer player = BasePlayer.FindByID(check);
                    if (player != null && player.IsConnected)
                        UpdateTimerStart(player);
                }
            });
            foreach (var check in OpenList)
            {
                BasePlayer player = BasePlayer.FindByID(check);
                if (player != null && player.IsConnected)
                    player.SendConsoleCommand("chat.say /clever");
            }
			
            foreach (var check in BasePlayer.activePlayerList)
                ReplyWithHelper(check, "Начинается регистрация на игру \"Клевер\", в ней вы можете получить деньги, отвечая на вопросы.\n  <color=#81B67A>Зарегистрироваться</color>: /clever");
            
            timer.Once(10, AnnounceClever);

            return "";
        }

        private void StartGame()
        {
            foreach (var check in OpenList)
            {
                BasePlayer player = BasePlayer.FindByID(check);
                if (player != null && player.IsConnected)
                    CuiHelper.DestroyUi(player, MenuLayer + ".SpecialText");
            }
            
            foreach (var check in currentGame.PlayerAnswers[0])
            {
                if (!OpenList.Contains(check.Key.userID))
                    OpenList.Add(check.Key.userID);
                
                DrawMenu(check.Key);
            }
            
            PrintWarning("Игра Clever началась!");
            PrintWarning($"Количество игроков: {currentGame.PlayerAnswers[0].Count}");

            SwitchQuestion();
        }

        private void SwitchQuestion()
        {
            currentGame.PercentsAnswers = new Dictionary<int, int>
            {
                [0] = 0,
                [1] = 0,
                [2] = 0
            };
            currentGame.NextTimerAmount = currentGame.TimeToAnswer;
            currentGame.CurrentQuestionIndex++;
            
            if (currentGame.Questions.Count == currentGame.CurrentQuestionIndex)
            {
                int eachPrize = currentGame.FinishPrize / currentGame.PlayerAnswers.Last().Count(p => p.Value);
                foreach (var check in currentGame.PlayerAnswers.Last().Where(p => p.Value))
                {
                    ReplyWithHelper(check.Key, $"Вы, и <color=#81B67A>{currentGame.PlayerAnswers.Last().Count(p => p.Value)}</color> чел. получили по <color=#81B67A>{eachPrize}</color> рублей на баланс!");
                    playerBalance[check.Key.userID].Balance += eachPrize;
                    DrawMenu(check.Key);
                }
                
                foreach (var check in BasePlayer.activePlayerList.Where(p => !currentGame.PlayerAnswers.Last().ContainsKey(p)))
                    ReplyWithHelper(check, $"Игра закончена, победители получили по <color=#81B67A>{eachPrize}</color> рублей!");
                
                currentGame = null;
                return;
            }
            
            PrintWarning($"Задаём игрокам вопрос #{currentGame.CurrentQuestionIndex}");
            
            foreach (var check in currentGame.PlayerAnswers[0])
                DrawQuestion(check.Key);

            timer.Repeat(1, currentGame.TimeToAnswer, () =>
            {
                PrintWarning($"Обновляем таймер до окончания ответа");
                
                foreach (var check in OpenList)
                {
                    BasePlayer player = BasePlayer.FindByID(check);
                    if (player != null && player.IsConnected)
                        UpdatetimerNext(player);
                }
                currentGame.NextTimerAmount--;
            }).Callback();
            
            timer.Once(currentGame.TimeToAnswer, CountResults);
        }

        private void CountResults()
        {
            PrintWarning("Результаты ответов на вопрос:");
            PrintWarning($" - Правильно ответило: {currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].Count(p => p.Value)}");
            PrintWarning($" - Неправильно ответило: {currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].Count(p => !p.Value)}");
            PrintWarning($" - Не ответило на вопрос: {currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex - 1].Count(p => p.Value) - currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].Count()}");

            foreach (var check in currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex - 1])
            {
                if (!currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].ContainsKey(check.Key) && check.Value)
                {
                    if (check.Key != null && check.Key.IsConnected)
                        ReplyWithHelper(check.Key, "Вы не ответили на вопрос, вы проиграли!");
                }
                else if (currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].ContainsKey(check.Key))
                {
                    var currentPlayer = currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex][check.Key];
                    string effect = currentPlayer ? "assets/bundled/prefabs/fx/invite_notice.prefab" : "assets/bundled/prefabs/fx/player/beartrap_scream.prefab";
                    Effect.server.Run(effect, check.Key.transform.position);
                    if (check.Key != null && check.Key.IsConnected)
                        ReplyWithHelper(check.Key, (currentPlayer ? "Вы ответили на вопрос правильно!" : "Вы ответили на вопрос не правильно!"));
                }
                if (check.Key != null && check.Key.IsConnected)
                    ShowResult(check.Key);
            }
            
            if (currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].Count(p => p.Value) == 0)
            {
                foreach (var check in BasePlayer.activePlayerList)
                    ReplyWithHelper(check, "К сожалению все игроки проиграли до окончания игры!");
                currentGame = null;
                return;
            }

            currentGame.NextTimerAmount = 3;
            timer.Repeat(1, 3, () =>
            {  
                foreach (var check in OpenList)
                {
                    BasePlayer player = BasePlayer.FindByID(check);
                    if (player != null && player.IsConnected)
                        UpdatetimerNext(player);
                }
                currentGame.NextTimerAmount--;
            }).Callback();
            timer.Once(3, SwitchQuestion);
        }

        private void AnnounceClever()
        {
            foreach (var check in BasePlayer.activePlayerList)
                ReplyWithHelper(check, $"Продолжается регистрация на игру \"Клевер\", в ней вы можете получить деньги, отвечая на вопросы.\n  <color=#81B67A>Зарегистрироваться</color>: /clever\nОсталось: <color=#81B67A>{currentGame.LeftTimeString()}</color>");

            if (currentGame.LeftTime() > 10)
                timer.Once(10, AnnounceClever);
        }
		
        private void ShowResult(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            for (int i = 0; i < currentGame.CurrentQuestion().Answers.Count; i++)
            {
                string text = "";
                for (int t = 0; t < currentGame.CurrentQuestion().Answers.ElementAt(i).Key.Length + 1; t++)
                    text += "_";
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0.1", AnchorMax = "1 1", OffsetMax = "0 0 " },
                    Text = { Text = $"{(currentGame.CurrentQuestion().Answers.ElementAt(i).Value ? "" : text)}", Color = HexToCuiColor("#333333FF"), FontSize = 20, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter}
                }, MenuLayer + $".{i}");

                if (!currentGame.CurrentQuestion().Answers.ElementAt(i).Value)
                {
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.3 0.45", AnchorMax = "0.7 0.50", OffsetMax = "0 0" },
                        Button = { Color = HexToCuiColor("#A05D5DFF") },
                        Text = { Text = "" }
                    }, MenuLayer + $".{i}");
                }
                

                string color = currentGame.CurrentQuestion().Answers.ElementAt(i).Value
                    ? HexToCuiColor("#8BAE95FF")
                    : HexToCuiColor("#A85252FF");
                
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.1 0.98", AnchorMax = "0.9 1.02", OffsetMax = "0 0" },
                    Button = { Color = color },
                    Text = { Text = "" }
                }, MenuLayer + $".{i}");
                
                container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.1 -0.01", AnchorMax = "0.9 0.03", OffsetMax = "0 0" },
                        Button = { Color = color },
                        Text = { Text = "" }
                    }, MenuLayer + $".{i}");
                
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 2.05", OffsetMax = "0 0 " },
                    Text = { Text = $"<b>-------------------------</b>", Color = color, FontSize = 20, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter}
                }, MenuLayer + $".{i}");
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 -0.95", AnchorMax = "1 1", OffsetMax = "0 0 " },
                    Text = { Text = $"<b>-------------------------</b>", Color = color, FontSize = 20, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter}
                }, MenuLayer + $".{i}");
                
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0.95 1", OffsetMax = "0 0 " },
                    Text = { Text = $"{currentGame.PercentsAnswers[i]}", Color = HexToCuiColor("#333333FF"), FontSize = 20, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleRight}
                }, MenuLayer + $".{i}");
            }
            CuiHelper.AddUi(player, container);
        }
        
        private void DrawQuestion(BasePlayer player)
        {
            Question currentQuestion = currentGame.CurrentQuestion();
            CuiHelper.DestroyUi(player, MenuLayer + $".CurrentQuestion");
            CuiHelper.DestroyUi(player, MenuLayer + $".QuestionAnswer");
            CuiHelper.DestroyUi(player, MenuLayer + ".SpecialText");
            CuiHelper.DestroyUi(player, MenuLayer + $".QuestionNumber");
            
            for (int i = 0; i < currentQuestion.Answers.Count; i++)
                CuiHelper.DestroyUi(player, MenuLayer + $".{i}");

            CuiElementContainer container = new CuiElementContainer();
            
            container.Add(new CuiElement
            {
                Parent = MenuLayer,
                Name = MenuLayer + ".QuestionAnswer",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "iPhone_Menu") },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.1124998 0.4815856", AnchorMax = "0.8815633 0.5514984", OffsetMax = "0 0" },
                Text = { FadeIn = 1f, Text = "Выберите один из вариантов, предложенных ниже", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.MiddleCenter, Color = HexToCuiColor("#333333FF") }
            }, MenuLayer, MenuLayer + ".HelpText");
            

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.06249967 0.7275281", AnchorMax = "0.4465642 0.7833956", OffsetMax = "0 0" },
                Text = { FadeIn = 1f, Text = $"<color=white>Вопрос {currentGame.CurrentQuestionIndex} из {currentGame.Questions.Count - 1}</color>", Font = "robotocondensed-regular.ttf", FontSize = 11, Align = TextAnchor.MiddleCenter, Color = HexToCuiColor("#333333FF") }
            }, MenuLayer, MenuLayer + ".QuestionNumber");

            if (currentGame.IsLoose(player))
            {
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0.5399994 0.7275281", AnchorMax = "0.9240639 0.7833956", OffsetMax = "0 0" },
                    Text = { FadeIn = 1f, Text = $"Вы проиграли", Font = "robotocondensed-regular.ttf", FontSize = 11, Align = TextAnchor.MiddleCenter, Color = HexToCuiColor("#FFFFFFFF") }
                }, MenuLayer, MenuLayer + ".Loose");
            }
            
            container.Add(new CuiLabel
            {
                FadeOut = 1f,
                RectTransform = { AnchorMin = "0.1124998 0.567727", AnchorMax = "0.8815633 0.7434447", OffsetMax = "0 0" },
                Text = { FadeIn = 1f, Text = currentQuestion.Text, Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, Color = HexToCuiColor("#333333FF") }
            }, MenuLayer, MenuLayer + ".CurrentQuestion");
            
            for (int i = 0; i < currentQuestion.Answers.Count; i++)
            {
                container.Add(new CuiLabel
                {
                    FadeOut = 0.1f,
                    RectTransform = { AnchorMin = $"0.1124998 {0.351748 - i * 0.079}", AnchorMax = $"0.8815633 {0.4200998 - i * 0.079}", OffsetMax = "0 0" },
                    Text = { FadeIn = 0.1f, Text = currentQuestion.Answers.ElementAt(i).Key, Font = "robotocondensed-bold.ttf", FontSize = 14, Align = TextAnchor.MiddleCenter, Color = HexToCuiColor("#333333FF") }
                }, MenuLayer, MenuLayer + $".{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0", Command = $"UI_Clever answer {i}" },
                    Text = { Text = "" }
                }, MenuLayer + $".{i}", MenuLayer + $".{i}.Button");
            }

            CuiHelper.DestroyUi(player, MenuLayer + ".SpecialText");
            CuiHelper.AddUi(player, container);
        }

        private void UpdatetimerNext(BasePlayer player)
        {
            if (!OpenList.Contains(player.userID))
                return;
            
            CuiHelper.DestroyUi(player, MenuLayer + $".SpecialTimer");
            
            CuiElementContainer container = new CuiElementContainer();
            string text = currentGame.NextTimerAmount == 0 ? "ВРЕМЯ ВЫШЛО" : currentGame.NextTimerAmount.ToString();
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.4208799", AnchorMax = "1 0.4817404", OffsetMax = "0 0" },
                Text = { Text = text, Align = TextAnchor.MiddleCenter, FontSize = 28, Font = "robotocondensed-bold.ttf" }
            }, MenuLayer, MenuLayer + ".SpecialTimer");

            Effect.server.Run("assets/bundled/prefabs/fx/notice/item.select.fx.prefab", player.transform.position);
            
            CuiHelper.AddUi(player, container);
        }

        private void UpdateTimerStart(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, MenuLayer + $".SpecialText");
            
            CuiElementContainer container = new CuiElementContainer();
            
            string text = "";
            if (currentGame == null || currentGame.LeftTime() < 0)
            {
                text = $"<size=25>ОЖИДАЕМ НАЧАЛА</size>\n<size=75>ИГРЫ</size>";
            }
            else if (currentGame.LeftTime() > 60)
            {
                text = $"<size=80>{currentGame.LeftTimeShortString()}</size>";
            }
            else
            {
                text = $"<size=100>{currentGame.LeftTimeShortString().Split(':')[1]}</size>";
            }
                
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.04 0.0720976", AnchorMax = "0.95 0.9360176", OffsetMax = "0 0" },
                Text = { Text = text, Align = TextAnchor.MiddleCenter }
            }, MenuLayer, MenuLayer + ".SpecialText");

            CuiHelper.AddUi(player, container);
        }

        private void DrawMenu(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, MenuLayer);
            CuiElementContainer container = new CuiElementContainer();
            
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0.3876952 0.1428239", AnchorMax = "0.3876952 0.1428239", OffsetMin = "0 0", OffsetMax = "280 560" },
                Image = { Color = "0 0 0 0" }
            }, "Hud", MenuLayer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "-100 -100", AnchorMax = "100 100", OffsetMax = "0 0" },
                Button = { Command = "UI_Clever close", Color = "0 0 0 0"},
                Text = { Text = "" }
            }, MenuLayer);
            
            container.Add(new CuiElement
            {
                Parent = MenuLayer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage",  "iPhone_Clever") },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                }
            });
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.08 0.02", AnchorMax = "0.92 0.11", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0", Command = "UI_Clever getbalance" },
                Text = { Text = $"БАЛАНС: {playerBalance[player.userID].Balance} РУБ.", Align = TextAnchor.MiddleCenter, FontSize = 28, Font = "robotocondensed-bold.ttf", Color = HexToCuiColor("#9A1111FF") }
            }, MenuLayer);
            
            
            
            CuiHelper.AddUi(player, container);
            
            UpdateTimerStart(player);
        }

        private void CreateQuestions(List<Question> questions, int amount = 12)
        {
            //questionList.Shuffle((uint) Core.Random.Range(0, 1000));
            
            //PrintWarning($"Отобрано {amount} случайных вопросов:");
            for (int i = 0; i < Math.Min(questionList.Count, amount); i++)
            {
               questions.Add(questionList[i]);
                //PrintWarning($"[{i+1}] {question.Text}");
                
                //for (int t = 0; t < question.Answers.Count; t++)
                    //PrintWarning($"{(question.Answers.ElementAt(t).Value ? "+ " : "- ")} {question.Answers.ElementAt(t)}");
            }
        }

        [ChatCommand("clever")]
        private void cmdChatClever(BasePlayer player)
        {
            if (!OpenList.Contains(player.userID))
                OpenList.Add(player.userID);
            if (currentGame != null)
            {
                if (currentGame.LeftTime() < 3)
                {
                    ReplyWithHelper(player, "Вы не можете присоединиться к игре, она уже началась!");
                    return;
                }

                if (!currentGame.PlayerAnswers[0].ContainsKey(player))
                {
                    ReplyWithHelper(player, "Вы успешно зарегистрировались на игру! Закрыть телефон вы можете нажав справа от телефона, а затем на чёлку!");
                    currentGame.PlayerAnswers[0].Add(player, true);
                    PrintWarning($"Игрок {player} зарегистрировался");
                }
            }
            DrawMenu(player);
        }
        
        [ConsoleCommand("UI_Clever")]
        private void cmdConsoleHandler(ConsoleSystem.Arg args)
        {
            if (args.Player() == null)
                return;

            if (!args.HasArgs(1))
                return;

            BasePlayer player = args.Player();

            if (args.Args[0].ToLower() == "close")
            {
                CuiHelper.DestroyUi(player, MenuLayer + ".Close");
                CuiElementContainer container = new CuiElementContainer();
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.2499996 0.9335207", AnchorMax = "0.7540634 0.9694132", OffsetMax = "0 0" },
                    Button = { Close = MenuLayer, Color = "0 0 0 0", Command = "UI_Clever acceptclose" },
                    Text = { Text = "" }
                }, MenuLayer, MenuLayer + ".Close");
                ReplyWithHelper(player, "Для того чтобы закрыть телефон, нажмите на камеру (чёлку) телефона!");
                CuiHelper.AddUi(player, container);
            }

            if (args.Args[0].ToLower() == "getbalance")
            {
                if (playerBalance[player.userID].Balance < 10)
                {
                    ReplyWithHelper(player, "Вывод баланса возможен от <color=#FF5733>10 рублей</color>");
                    return;
                }

                StoreHandler.Call("HasRegistered", player.userID, (Action<bool>) ((b) =>
                {
                    if (!b)
                    {
                        ReplyWithHelper(player, "Для вывода средств авторизуйтесь в магазине!");
                    }
                    else
                    {
                        StoreHandler.Call("AddMoney", player.userID, (float) playerBalance[player.userID].Balance,
                            "Клевер: вывод средств", (Action<bool>) ((a) =>
                            {
                                if (!a)
                                {
                                    ReplyWithHelper(player, "Неизвестная ошибка #3!");
                                }
                                else
                                {
                                    LogToFile("Withdraw", $"Игрок {player.userID} вывел {playerBalance[player.userID].Balance} рублей.", this);
                                    ReplyWithHelper(player, $"Вы успешно вывели: <color=#81B67A>{playerBalance[player.userID].Balance} рублей.</color>");
                                    playerBalance[player.userID].Balance = 0;
                                    DrawMenu(player);
                                }
                            }));
                    }
                }));
            }

            if (args.Args[0].ToLower() == "acceptclose")
            {
                if (OpenList.Contains(player.userID))
                {
                    OpenList.Remove(player.userID);
                }
            }

            if (currentGame == null || currentGame.LeftTime() > 0)
                return;
            
            if (args.Args[0].ToLower() == "answer")
            {
                if (currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].ContainsKey(player))
                    return;
                
                if (!args.HasArgs(2))
                    return;

                if (!currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex - 1].ContainsKey(player) || (currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex - 1].ContainsKey(player) && !currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex - 1][player]))
                {
                    ReplyWithHelper(player, "Вы не можете отвечать на вопросы, вы <color=#FF5733>проиграли</color>!");
                    return;
                }

                int answer;
                if (!Int32.TryParse(args.Args[1], out answer))
                    return;

                currentGame.PercentsAnswers[answer]++;
                bool isRight = currentGame.CurrentQuestion().Answers.ElementAt(answer).Value;
                currentGame.PlayerAnswers[currentGame.CurrentQuestionIndex].Add(player, isRight);
                PrintWarning($"Получен ответ от {player.userID} - {(isRight ? "ВЕРНО" : "НЕВЕРНО")}");
                
                Effect.server.Run("assets/bundled/prefabs/fx/build/repair_full.prefab", player.transform.position);
                ReplyWithHelper(player, $"Вы успешно ответили на вопрос!\n<color=#81B67A>Ответ</color>: {currentGame.CurrentQuestion().Answers.ElementAt(answer).Key}");
            }
        }

        [ConsoleCommand("clever")]
        private void cmdControlClever(ConsoleSystem.Arg args)
        {
            if (args.Player() != null)
                return;

            if (!args.HasArgs(0))
            {
                PrintWarning("Список возможных команд:");
                PrintWarning("clever start 'qAmount' 'pAmount' - запустить игру");
                PrintWarning("clever stop - остановить игру");
                return;
            }

            switch (args.Args[0].ToLower())
            {
                case "start":
                {
                    if (currentGame != null)
                    {
                        PrintWarning("Игра уже запущена, сначала остановите её!");
                        return;
                    }

                    int questionAmount = QuestionAmount;
                    int finishPrize = FinishPrize;

                    if (args.HasArgs(2))
                    {
                        if (!Int32.TryParse(args.Args[1], out questionAmount))
                        {
                            PrintError("Было введено не стандартное число вопросов, однако мы не смогли преобразовать его в число!");
                            return;
                        }
                    }

                    if (args.HasArgs(3))
                    {
                        if (!Int32.TryParse(args.Args[2], out finishPrize))
                        {
                            PrintError("Было введен не стандартный приз, но мы не смогли преобразовать его в число!");
                            return;
                        }
                    }
                    
                    string result = PrepareGame(questionAmount, finishPrize);
                    if (result != "")
                    {
                        PrintWarning(result);
                    }
                    return;
                }
                case "stop":
                {
                    if (currentGame == null)
                    {
                        PrintWarning("Игра уже остановлена, сначала запустите её!");
                        return;
                    }
                    return;
                }
            }
        }
		
		private static string HexToCuiColor(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }
 
            var str = hex.Trim('#');
 
            if (str.Length == 6)
                str += "FF";
 
            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }
 
            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
 
            Color color = new Color32(r, g, b, a);
 
            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }
		
		public void ReplyWithHelper(BasePlayer player, string message, string[] args = null)
        {
            if (args != null)
	        {
                message = string.Format(message, args);
	        }
			
	        player.SendConsoleCommand("chat.add", senderID, string.Format("<size=prefixsize><color=prefixcolor>{0}</color>:</size>\n{1}", header, message));
        }
		
		private void GetConfig<T>(string menu, string Key, ref T var)
        {
            if (Config[menu, Key] != null)
            {
                var = (T)Convert.ChangeType(Config[menu, Key], typeof(T));
            }

            Config[menu, Key] = var;
        }
    }
}



// --- End of file: CleverEvent.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SharkBait.cs ---
// --- Original Local Path: SharkBait.cs ---

using System;
using System.Collections;
using Network;
using System.Collections.Generic;
using UnityEngine;
using Facepunch;
using Rust;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("SharkBait", "Colon Blow", "1.0.4")]
    class SharkBait : RustPlugin
    {
        // Fix for shark parts now spawning to see them

        #region Load

        void Loaded()
        {
            LoadVariables();
            LoadMessages();
            permission.RegisterPermission("sharkbait.admin", this);
        }

        void OnServerInitialized()
        {
            timer.In(10, RespawnAllSharks);
        }

        #endregion

        #region Configuration

        static ulong GWFin = 1407588505;
        static ulong GWFront = 1407587906;
        static ulong GWBack = 1407587156;

        static ulong HHFin = 1403745229;
        static ulong HHFront = 1403174634;
        static ulong HHBack = 1403180514;

        bool EnableAutoSpawn = true;
        bool EnableSpawnAtRockFormations = true;
        bool EnableSpawnAtDiveSites = true;
        bool EnableSpawnAtFloatingLoot = true;

        static float SpawnActivationRadius = 50f;
        static float SharkAggroRadius = 20f;
        static float SharkBiteRange = 2f;
        static float SharkDespawnTime = 500f;
        static float SharkSwimSpeed = 6f;
        static float SharkDamageToPlayer = 20f;
        int SharkSpawnChance = 30;
        static bool SharksCanAttackBoats = true;
        static bool SharksCanAttackPlayers = true;

        bool Changed;

        void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }

        void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            Config.Clear();
            LoadVariables();
        }

        void LoadConfigVariables()
        {
            CheckCfgUlong("Skin ID - Great White Front", ref GWFront);
            CheckCfgUlong("Skin ID - Great White Back", ref GWBack);
            CheckCfgUlong("Skin ID - Great White Fin", ref GWFin);

            CheckCfgUlong("Skin ID - HammerHead Front", ref HHFront);
            CheckCfgUlong("Skin ID - HammerHead Back", ref HHBack);
            CheckCfgUlong("Skin ID - HammerHead Fin", ref HHFin);

            CheckCfg("Chance Roll - chances a loot or dive site will have a shark spawner : ", ref SharkSpawnChance);

            CheckCfg("Global - Sharks can attack Boats ? ", ref SharksCanAttackBoats);
            CheckCfg("Global - Sharks can attack Players ? ", ref SharksCanAttackPlayers);

            CheckCfg("Autospawn - Enable the Autospawn feature ? ", ref EnableAutoSpawn);
            CheckCfg("Autospawn - Enable autospawn at Rock Formations ? ", ref EnableSpawnAtRockFormations);
            CheckCfg("Autospawn - Enable autospawn at Dive Sites ? ", ref EnableSpawnAtDiveSites);
            CheckCfg("Autospawn - Enable autospawn at Floating Water Loot Sites ? ", ref EnableSpawnAtFloatingLoot);

            CheckCfgFloat("Shark Spawner - player detection radius : ", ref SpawnActivationRadius);

            CheckCfgFloat("Shark - aggro radius of shark to players or boats : ", ref SharkAggroRadius);
            CheckCfgFloat("Shark - bite range radius of shark : ", ref SharkBiteRange);
            CheckCfgFloat("Shark - despawn time of shark after spawn with no interaction : ", ref SharkDespawnTime);
            CheckCfgFloat("Shark - swim speed of shark : ", ref SharkSwimSpeed);
            CheckCfgFloat("Shark - damage done to player when shark attacks : ", ref SharkDamageToPlayer);
        }

        void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }

        void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = System.Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }

        void CheckCfgUlong(string Key, ref ulong var)
        {

            if (Config[Key] != null)
                var = Convert.ToUInt64(Config[Key]);
            else
                Config[Key] = var;
        }

        #endregion

        #region Localization

        private void LoadMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["noperms"] = "You don't have permission to use this command.",
                ["sharkhasspawned"] = "There is a shark in the water !!!!",
                ["sharkhasdied"] = "You have killed a shark.. good job !!",
            }, this);
        }

        #endregion

        #region Commands

        [ChatCommand("sharkbait")]
        void chatSharkBait(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.UserIDString, "sharkbait.admin"))
                AddSharkEntity(player.transform.position);
            else
                PrintToChat(player, lang.GetMessage("noperms", this, player.UserIDString));
        }

        [ChatCommand("sharkbait.respawn")]
        void chatSharkBaitRespawn(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.UserIDString, "sharkbait.admin"))
                RespawnAllSharks();
            else
                PrintToChat(player, lang.GetMessage("noperms", this, player.UserIDString));
        }

        [ConsoleCommand("sharkbait.respawn")]
        void cmdConsoleSharkBaitRespawn(ConsoleSystem.Arg arg)
        {
            var player = arg.Player() ?? null;
            if (player == null) { RespawnAllSharks(); return; }
            if (player != null)
            {
                if (permission.UserHasPermission(player.UserIDString, "sharkbait.admin"))
                    RespawnAllSharks();
                else
                    PrintToChat(player, lang.GetMessage("noperms", this, player.UserIDString));
            }
        }

        [ChatCommand("sharkbait.killall")]
        void chatSharkBaitKillAll(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.UserIDString, "sharkbait.admin"))
                RemoveAllSharks();
            else
                PrintToChat(player, lang.GetMessage("noperms", this, player.UserIDString));
        }

        #endregion

        #region Hooks

        private void RemoveAllSharks()
        {
            DestroyAll<SharkEntity>();
            DestroyAll<SharkSpawnController>();
            List<BaseEntity> findspawns = new List<BaseEntity>();
            Vis.Entities<BaseEntity>(new Vector3(0f, 0f, 0f), ((ConVar.Server.worldsize) / 2) + 1000f, findspawns);
            foreach (BaseEntity obj in findspawns)
            {
                if (obj.name.Contains("rug/rug.deployed"))
                {
                    if (obj.skinID == GWFront || obj.skinID == HHFront || obj.skinID == GWFin || obj.skinID == HHFin || obj.skinID == GWFront || obj.skinID == HHFront)
                    {
                        if (obj != null && !obj.IsDestroyed)
                        {
                            obj.gameObject.ToBaseEntity().Kill(BaseNetworkable.DestroyMode.None);
                        }
                    }
                }
            }
        }

        void OnEntitySpawned(BaseEntity entity, UnityEngine.GameObject gameObject)
        {
            if (!EnableAutoSpawn) return;
            if (gameObject == null) return;

            if (gameObject.name.Contains("rockformation_underwater") && EnableSpawnAtRockFormations)
            {
                RespawnHandler(gameObject);
            }
            if (gameObject.name.Contains("junkpile_water") && EnableSpawnAtFloatingLoot)
            {
                RespawnHandler(gameObject);
            }
            if (gameObject.name.Contains("divesite") && EnableSpawnAtDiveSites)
            {
                RespawnHandler(gameObject);
            }
        }

        void RespawnAllSharks()
        {
            if (!EnableAutoSpawn) return;
            RemoveAllSharks();

            var allobjects = UnityEngine.Object.FindObjectsOfType<GameObject>();
            foreach (var gobject in allobjects)
            {
                if (gobject.name.Contains("rockformation_underwater") && EnableSpawnAtRockFormations)
                {
                    RespawnHandler(gobject);
                }
                if (gobject.name.Contains("junkpile_water") && EnableSpawnAtFloatingLoot)
                {
                    RespawnHandler(gobject);
                }
                if (gobject.name.Contains("divesite") && EnableSpawnAtDiveSites)
                {
                    RespawnHandler(gobject);
                }
            }
            PrintWarning("Respawn of Shark Population has been completed.");
        }

        public void RespawnHandler(GameObject gobject)
        {
            var pos = gobject.transform.position;

            int roll = UnityEngine.Random.Range(0, 100);
            if (roll < SharkSpawnChance)
            {
                var hascontroller = gobject.GetComponent<SharkSpawnController>() ?? null;
                if (hascontroller != null) GameObject.Destroy(hascontroller);

                gobject.AddComponent<SharkSpawnController>();
            }
        }

        public void AddSharkEntity(Vector3 pos)
        {

            List<BaseEntity> nearshark = new List<BaseEntity>();
            Vis.Entities<BaseEntity>(pos, 30f, nearshark);
            foreach (BaseEntity shark in nearshark)
            {
                if (shark.GetComponentInParent<SharkEntity>())
                {
                    return;
                }
            }
            SpawnShark(pos);
        }

        void SpawnShark(Vector3 pos)
        {
            string prefabsharkfin = "assets/prefabs/misc/orebonus/orebonus_generic.prefab";
            var groundy = TerrainMeta.HeightMap.GetHeight(pos);
            if (pos.y < groundy) pos.y = groundy + 2f;
            if (pos.y > -0.5f) pos.y = -0.5f;
            var sharkent = GameManager.server.CreateEntity(prefabsharkfin, new Vector3(pos.x, pos.y, pos.z), Quaternion.identity, true);
            sharkent.enableSaving = false;
            sharkent.Spawn();
            var addentity = sharkent.gameObject.AddComponent<SharkEntity>();
        }

        void Unload()
        {
            RemoveAllSharks();
        }

        void DestroyAll<T>()
        {
            var objects = GameObject.FindObjectsOfType(typeof(T));
            if (objects != null)
                foreach (var gameObj in objects)
                {
                    GameObject.Destroy(gameObj);
                }
        }

        #endregion

        #region Shark Spawn Controller

        class SharkSpawnController : MonoBehaviour
        {
            SharkBait _instance;
            SphereCollider detectionradius;
            Vector3 spawnlocation;
            bool doactivation;
            Timer mytimer;

            void Awake()
            {
                _instance = new SharkBait();
                detectionradius = gameObject.AddComponent<SphereCollider>();
                detectionradius.gameObject.layer = (int)Layer.Reserved1;
                detectionradius.isTrigger = true;
                detectionradius.radius = SpawnActivationRadius;
                spawnlocation = detectionradius.transform.position;
            }

            private void OnTriggerEnter(Collider col)
            {
                if (col == null || doactivation) return;
                var target = col.GetComponentInParent<BasePlayer>() ?? null;
                if (target != null)
                {
                    doactivation = true;
                    _instance.AddSharkEntity(spawnlocation);
                    ToggleTrigger();
                }
            }

            void ToggleTrigger()
            {
                mytimer = _instance.timer.Once(System.Convert.ToSingle(SharkDespawnTime), () =>
                {
                    if (this == null) { mytimer.Destroy(); return; }
                    doactivation = false;
                });
            }

            void OnDestroy()
            {
                GameObject.Destroy(detectionradius);
                GameObject.Destroy(this);
            }
        }

        #endregion

        #region SharkEntity

        class SharkEntity : BaseEntity
        {
            SharkBait instance;
            BaseEntity sharkentity;
            BaseEntity sharkfront;
            BaseEntity sharkback;
            BaseEntity sharkfin;
            BaseEntity sharkbait;
            int counter;
            SphereCollider aggroradius;
            Rigidbody rigidbody;
            Vector3 initialspawn;
            Vector3 spawnlocation;
            Vector3 position;
            Vector3 attackpos;
            Vector3 offset;
            private float _angle;
            float speed;
            float despawntimer;
            float despawntimelimit;
            int attackcounter;
            bool didattack;
            bool reversemovment;
            bool moveback;

            void Awake()
            {
                instance = new SharkBait();
                sharkentity = GetComponentInParent<BaseEntity>();
                sharkbait = null;
                initialspawn = sharkentity.transform.position;
                spawnlocation = sharkentity.transform.position;
                counter = 0;
                speed = SharkSwimSpeed;
                attackcounter = 0;
                didattack = false;
                reversemovment = false;
                moveback = false;
                despawntimer = 0f;
                despawntimelimit = (SharkDespawnTime * 10);

                aggroradius = sharkentity.gameObject.AddComponent<SphereCollider>();
                aggroradius.gameObject.layer = (int)Layer.Reserved1;
                aggroradius.isTrigger = true;
                aggroradius.radius = SharkAggroRadius;
                MovementRoll();
                SpawnSharky();
            }

            void MovementRoll()
            {
                int moveroll = UnityEngine.Random.Range(0, 2);
                if (moveroll == 1) reversemovment = true;
            }

            void SpawnSharky()
            {
                bool spawnhammerhead = false;
                int typeroll = UnityEngine.Random.Range(0, 2);
                if (typeroll == 1) spawnhammerhead = true;

                ulong frontskinid = GWFront;
                ulong backskinid = GWBack;
                ulong finskinid = GWFin;

                if (spawnhammerhead)
                {
                    frontskinid = HHFront;
                    backskinid = HHBack;
                    finskinid = HHFin;
                }

                string prefabsharkfin = "assets/prefabs/deployable/rug/rug.deployed.prefab";
                sharkfront = GameManager.server.CreateEntity(prefabsharkfin, sharkentity.transform.position, sharkentity.transform.rotation, true);
                sharkfront.GetComponent<BaseNetworkable>()._limitedNetworking = false;
                sharkfront.enableSaving = false;
                sharkfront.skinID = frontskinid;
                var sfstab = sharkfront.GetComponent<StabilityEntity>();
                if (sfstab) sfstab.grounded = true;
                sharkfront.Spawn();
                sharkfront.SetParent(sharkentity, true, false);

                sharkfin = GameManager.server.CreateEntity(prefabsharkfin, sharkentity.transform.position, sharkentity.transform.rotation, true);
                sharkfin.GetComponent<BaseNetworkable>()._limitedNetworking = false;
                sharkfin.enableSaving = false;
                sharkfin.skinID = finskinid;
                var sfinstab = sharkfront.GetComponent<StabilityEntity>();
                if (sfinstab) sfstab.grounded = true;
                sharkfin.Spawn();
                sharkfin.SetParent(sharkentity, true, false);
                sharkfin.transform.localPosition = new Vector3(0f, 0.8f, -1f);
                sharkfin.transform.localEulerAngles = new Vector3(0, 180, 90);

                sharkback = GameManager.server.CreateEntity(prefabsharkfin, sharkentity.transform.position, sharkentity.transform.rotation, true);
                sharkback.GetComponent<BaseNetworkable>()._limitedNetworking = false;
                sharkback.enableSaving = false;
                sharkback.skinID = backskinid;
                var sbstab = sharkfront.GetComponent<StabilityEntity>();
                if (sbstab) sfstab.grounded = true;
                sharkback.Spawn();
                sharkback.SetParent(sharkentity, true, false);
                sharkback.transform.localPosition = new Vector3(0f, 0f, -2.9f);
                sharkback.transform.localEulerAngles = new Vector3(0, 0, 0);
            }

            private void OnTriggerStay(Collider col)
            {
                if (col == null) return;
                var target = col.GetComponentInParent<BasePlayer>();
                if (SharksCanAttackPlayers && target != null && target.WaterFactor() > 0.25f && target.Health() > 0)
                {
                    sharkbait = target;
                    return;
                }
                var boat = col.GetComponentInParent<BaseBoat>();
                if (SharksCanAttackBoats && boat != null && boat.Health() > 0f)
                {
                    sharkbait = boat;
                    return;
                }
                var corpse = col.GetComponentInParent<BaseCorpse>();
                if (corpse != null)
                {
                    sharkbait = corpse;
                    return;
                }
            }

            void MovementSplash()
            {
                Vector3 currentpos = sharkentity.transform.position;
                if (currentpos.y >= -1f) Effect.server.Run("assets/content/vehicles/boats/effects/splashloop.prefab", sharkentity.transform.position + new Vector3(0f, -0.6f, 0f));
            }

            void NearSharkBait()
            {
                if (moveback || didattack) return;
                List<BaseEntity> nearplayer = new List<BaseEntity>();
                Vis.Entities<BaseEntity>(sharkentity.transform.position, SharkBiteRange, nearplayer);
                foreach (BaseEntity ply in nearplayer)
                {
                    var iscorpse = ply.GetComponent<BaseCorpse>();
                    if (iscorpse)
                    {
                        iscorpse.Hurt(SharkDamageToPlayer);
                        didattack = true;
                        return;
                    }
                    var isplayer = ply.GetComponent<BasePlayer>();
                    if (isplayer)
                    {
                        isplayer.Hurt(SharkDamageToPlayer);
                        Effect.server.Run("assets/bundled/prefabs/fx/headshot.prefab", isplayer.transform.position);
                        Effect.server.Run("assets/bundled/prefabs/fx/explosions/water_bomb.prefab", isplayer.transform.position);
                        didattack = true;
                        return;
                    }
                    var isboat = ply.GetComponent<BaseBoat>();
                    if (isboat)
                    {
                        Effect.server.Run("assets/bundled/prefabs/fx/impacts/blunt/wood/wood1.prefab", isboat.transform.position);
                        Effect.server.Run("assets/bundled/prefabs/fx/explosions/water_bomb.prefab", isboat.transform.position);
                        isboat.myRigidBody.AddRelativeTorque(Vector3.forward * 10f, ForceMode.VelocityChange);
                        isboat.Hurt(999f);
                        didattack = true;
                        return;
                    }
                }
                didattack = false;
                return;
            }

            public bool IsWaterDeepEnough(Vector3 position)
            {
                var waterdepth = (TerrainMeta.WaterMap.GetHeight(position) - TerrainMeta.HeightMap.GetHeight(position));
                if (waterdepth >= 3f) return true;
                return false;
            }

            Vector3 GetNewPos()
            {
                if (!IsWaterDeepEnough(sharkentity.transform.position) && !moveback)
                {
                    sharkbait = null;
                    didattack = false;
                    moveback = true;
                    return initialspawn;
                }
                if (moveback)
                {
                    sharkbait = null;
                    didattack = false;
                    var checkpos = sharkentity.transform.position;
                    if (checkpos == initialspawn) { moveback = false; return initialspawn; }
                    return initialspawn;
                }

                if (didattack)
                {
                    despawntimer = 0f;
                    if (attackcounter == 1)
                    {
                        attackpos = new Vector3(sharkentity.transform.position.x, sharkentity.transform.position.y, sharkentity.transform.position.z);
                        position = new Vector3(UnityEngine.Random.Range(-5000f, 5000f), sharkentity.transform.position.y, UnityEngine.Random.Range(-5000f, 5000f));
                    }
                    attackcounter = attackcounter + 1;
                    if (attackcounter >= 50 && attackcounter < 100) { position = attackpos; }
                    if (attackcounter >= 100) { attackcounter = 0; MovementRoll(); sharkbait = null; didattack = false; }
                    return position;
                }
                if (sharkbait != null)
                {
                    despawntimer = 0f;
                    position = sharkbait.transform.position;
                    float adjustedy = position.y;
                    if (adjustedy > -0.5f) adjustedy = -0.5f;
                    position = new Vector3(position.x, adjustedy, position.z);
                    return position;
                }

                _angle += 0.5f * Time.deltaTime;
                offset = new Vector3(Mathf.Sin(_angle), 0f, Mathf.Cos(_angle)) * 15f;
                if (reversemovment) offset = new Vector3(Mathf.Sin(-_angle), 0f, Mathf.Cos(-_angle)) * 15f;
                var currentpos = sharkentity.transform.position;
                if (currentpos.y < -0.5f) currentpos.y = currentpos.y + 0.1f;
                position = currentpos + offset;
                didattack = false;
                return position;
            }

            void FixedUpdate()
            {
                if (sharkback == null || sharkfin == null || sharkfront == null) { OnDestroy(); return; }
                if (!didattack || !sharkbait) despawntimer = despawntimer + 1f;
                if (despawntimer >= despawntimelimit) { OnDestroy(); return; }
                Vector3 currentpos = sharkentity.transform.position;
                if (counter == 3)
                {
                    if (currentpos.y >= -1f) MovementSplash();
                    if (!didattack) NearSharkBait();
                    counter = 0;
                }

                var newpos = GetNewPos();

                var targetDir = newpos - sharkentity.transform.position;
                Vector3 newDir = Vector3.RotateTowards(sharkentity.transform.forward, targetDir, speed * Time.deltaTime, 0.0F);

                sharkentity.transform.rotation = Quaternion.LookRotation(newDir);
                sharkentity.transform.position = Vector3.MoveTowards(transform.position, newpos, (speed) * Time.deltaTime);
                if (currentpos.y > -0.5f) currentpos.y = -0.5f;
                spawnlocation = new Vector3(currentpos.x, currentpos.y, currentpos.z);

                sharkentity.transform.hasChanged = true;
                sharkentity.SendNetworkUpdateImmediate();
                sharkentity.UpdateNetworkGroup();

                counter = counter + 1;
            }

            void OnDestroy()
            {
                if (sharkentity != null && !sharkentity.IsDestroyed) { sharkentity.Invoke("KillMessage", 0.1f); }
            }
        }

        #endregion

    }
}

// --- End of file: SharkBait.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/StashControl.cs ---
// --- Original Local Path: StashControl.cs ---

using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("StashControl", "Piarb", "1.0.1", ResourceId = 1950)]
    [Description("Manage small stashes")]
    public class StashControl : RustPlugin
    {
	    //mode
		public bool PerpetuumStashes;
		public bool ConstDecayStashes;
		//settings
		public bool Debug;
		public int StashControlTick;
		public int StashLifeTime;
		public bool RepairOnLoot;
		public bool HiddenDecayOnly;
		
	    private bool ConfigChanged;
		private float hurt_amount;
		
		protected override void LoadDefaultConfig() => Puts("New configuration file created.");		
        
        void LoadConfig()
        {
            ConstDecayStashes = Convert.ToBoolean(GetConfigValue("Mode", "ConstDecayStashes", false));
			PerpetuumStashes = Convert.ToBoolean(GetConfigValue("Mode", "PerpetuumStashes", true));
			Debug = Convert.ToBoolean(GetConfigValue("Settings", "Debug", false));
			StashControlTick = Convert.ToInt32(GetConfigValue("Settings", "StashControlTick", "3600"));
			StashLifeTime = Convert.ToInt32(GetConfigValue("Settings", "StashLifeTime", "86400"));
			RepairOnLoot = Convert.ToBoolean(GetConfigValue("Settings", "RepairOnLoot", true));
			HiddenDecayOnly = Convert.ToBoolean(GetConfigValue("Settings", "HiddenDecayOnly", true));
            if (ConfigChanged)
            {
                Puts("Configuration file updated.");
                SaveConfig();
            }
        }

        object GetConfigValue(string category, string setting, object defaultValue)
        {
            var data = Config[category] as Dictionary<string, object>;
            object value;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[category] = data;
                ConfigChanged = true;
            }
            if (data.TryGetValue(setting, out value)) return value;
            value = defaultValue;
            data[setting] = value;
            ConfigChanged = true;
            return value;
        }
				
        void Loaded()
        {
            //Puts("Stash controller activated");
			LoadConfig();
            //mode check
			if (ConstDecayStashes && PerpetuumStashes)
				{
					Puts("You must set only one Mode = true for stashes! Reset to default.");
					PerpetuumStashes = true;
					ConstDecayStashes = false;
				}
			if (StashLifeTime/StashControlTick < 3f)
				{
					Puts("StashControlTick must be several times smaller than StashLifeTime.");
					StashLifeTime = StashControlTick * 3;
					Puts("Set StashLifeTime = StashControlTick * 3 = "+StashLifeTime);
				}
						
			if (PerpetuumStashes) NoDecayStashes();
			if (ConstDecayStashes) HurtStahes();
        }
		
        private void NoDecayStashes()
        {
			if (Debug) Puts("Timer shot at "+Time.realtimeSinceStartup);
            var stashes = UnityEngine.Object.FindObjectsOfType<StashContainer>();
            if (stashes.Length == 0)
            {
                if (Debug) Puts("There is no stashes in game.");
            }
			
			var i = 1;
            foreach (StashContainer stash in stashes)
            {
                if (Debug) Puts("Found stash #"+Convert.ToString(i++)+" at "+(int)stash.transform.position.x + " " + (int)stash.transform.position.y + " " + (int)stash.transform.position.z+" INFO MaxH:"+Convert.ToString(stash.MaxHealth())+" Health:"+Convert.ToString(stash.Health()));
				
				stash.CancelInvoke("Decay");
				stash.Invoke("Decay", 259200f);
            }
            timer.In(StashControlTick, () => NoDecayStashes());
		}
		
		private void HurtStahes()
		{
			if (Debug) Puts("Timer shot at "+Time.realtimeSinceStartup);
            var stashes = UnityEngine.Object.FindObjectsOfType<StashContainer>();
            if (stashes.Length == 0)
            {
                if (Debug) Puts("There is no stashes in game.");
            }
				else
					hurt_amount = stashes[0].MaxHealth() / (StashLifeTime / StashControlTick);
				
			var i = 1;
            foreach (StashContainer stash in stashes)
            {
                if (Debug) Puts("Found stash #"+Convert.ToString(i++)+" at "+(int)stash.transform.position.x + " " + (int)stash.transform.position.y + " " + (int)stash.transform.position.z+" INFO MaxH:"+Convert.ToString(stash.MaxHealth())+" Health:"+Convert.ToString(stash.Health()));
				stash.CancelInvoke("Decay");
				stash.Invoke("Decay", 259200f);
				
				if (HiddenDecayOnly)
				{
					if (stash.IsHidden())
						stash.Hurt(hurt_amount*10);
				}
				else
					stash.Hurt(hurt_amount*10);
				
				if (Debug) Puts("hurt_amount: "+hurt_amount+" After Hurt: "+Convert.ToString(stash.Health()));
            }
            timer.In(StashControlTick, () => HurtStahes());
		}
		
		void OnLootEntity(BasePlayer player, BaseCombatEntity entity)
		{
			if (RepairOnLoot)
			{
				if (entity.LookupPrefab().name == "small_stash_deployed.prefab")
				{
					entity.health = entity.MaxHealth();
					if (Debug) Puts("Stash health restored");
				}				
			}

		}

    }
}

// --- End of file: StashControl.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/VoteForMoney.cs ---
// --- Original Local Path: VoteForMoney.cs ---

using System;
using Oxide.Core;
using Oxide.Core.Plugins;
using System.Collections;
using System.Collections.ObjectModel;
using System.Linq;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("Vote For Money", "Frenk92", "0.5.3", ResourceId = 2086)]
    class VoteForMoney : RustPlugin
    {
        [PluginReference]
        Plugin Economics;
        [PluginReference]
        Plugin ServerRewards;
        [PluginReference]
        Plugin Kits;

        const string permAdmin = "voteformoney.admin";
        const string site1 = "Rust-Servers";
        const string site2 = "TopRustServers";
        const string site3 = "BeancanIO";
        const string link1 = "http://rust-servers.net/server/";
        const string link2 = "http://toprustservers.com/server/";
        const string link3 = "http://beancan.io/server/";
        public bool edit = false;

        #region Config
        string rustServersKey = "";
        string rustServersID = "";
        string topRustKey = "";
        string topRustID = "";
        string beancanKey = "";
        string beancanID = "";
        string voteType = "day";
        int voteInterval = 1;
        bool useRP = false;
        bool useEconomics = true;
        bool useKits = false;
        string prefix = "<color=#808000ff><b>VoteForMoney:</b></color>";
        Dictionary<string, string> kits = new Dictionary<string, string> { { "default", "" } };
        Dictionary<string, string> money = new Dictionary<string, string> { { "default", "250" } };
        Dictionary<string, string> rp = new Dictionary<string, string> { { "default", "30" } };

        string configVersion = "0.2.0";

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a configuration file.");
            Config.Clear();
        }

        void LoadConfigData()
        {
            var version = (string)Config["Version"];
            //Load config
            rustServersKey = (string)ReadConfig("Rust-Servers - Api Key", rustServersKey);
            rustServersID = (string)ReadConfig("Rust-Servers - Server ID", rustServersID);
            topRustKey = (string)ReadConfig("TopRustServers - Api Key", topRustKey);
            topRustID = (string)ReadConfig("TopRustServers - Server ID", topRustID);
            beancanKey = (string)ReadConfig("BeancanIO - Api Key", beancanKey);
            beancanID = (string)ReadConfig("BeancanIO - Server ID", beancanID);
            voteType = (string)ReadConfig("Vote Type", voteType);
            voteInterval = Convert.ToInt16(ReadConfig("Vote Interval", voteInterval));
            useRP = Convert.ToBoolean(ReadConfig("Use RP", useRP));
            useEconomics = Convert.ToBoolean(ReadConfig("Use Economics", useEconomics));
            useKits = Convert.ToBoolean(ReadConfig("Use Kits", useKits));
            prefix = (string)ReadConfig("Prefix", prefix);

            var oldMoney = "";
            var oldRP = "";
            var oldKit = "";
            if(version == null || version == "0.1.0")
            {
                oldMoney = (string)ReadConfig("Money", oldMoney);
                oldRP = (string)ReadConfig("RP", oldRP);
                oldKit = (string)ReadConfig("Kit", oldKit);
            }
            else
            {
                money = ConvertToDictionary(ReadConfig("Money", money), money);
                rp = ConvertToDictionary(ReadConfig("RP", rp), rp);
                kits = ConvertToDictionary(ReadConfig("Kits", kits), kits);
            }

            if(version == null || version != configVersion)
            {
                PrintWarning("Configuration is outdate. Update in progress...");
                Config.Clear();    

                SetConfig("Rust-Servers - Api Key", rustServersKey);
                SetConfig("Rust-Servers - Server ID", rustServersID);
                SetConfig("TopRustServers - Api Key", topRustKey);
                SetConfig("TopRustServers - Server ID", topRustID);
                SetConfig("BeancanIO - Api Key", beancanKey);
                SetConfig("BeancanIO - Server ID", beancanID);
                SetConfig("Vote Type", voteType);
                SetConfig("Vote Interval", voteInterval);
                SetConfig("Use Economics", useEconomics);
                SetConfig("Use RP", useRP);
                SetConfig("Use Kits", useKits);
                SetConfig("Prefix", prefix);

                if(version == null || version == "0.1.0")
                {
                    money = new Dictionary<string, string> { { "default", oldMoney } };
                    SetConfig("Money", money);
                    rp = new Dictionary<string, string> { { "default", oldRP } };
                    SetConfig("RP", rp);
                    kits = new Dictionary<string, string> { { "default", oldKit } };
                    SetConfig("Kits", kits);
                }
                else
                {
                    SetConfig("Money", money);
                    SetConfig("RP", rp);
                    SetConfig("Kits", kits);
                }

                SetConfig("Version", configVersion);
            }
        }

        void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>            {
                ["NoAnswer"] = "No answer from {0}. Try later.",
                ["AlreadyVoted"] = "You have already voted on {0}.",
                ["NextVote"] = "Next Vote: {0}",
                ["NotVoted"] = "You have not voted yet on {0}.\nLink to vote: {1}{2}",
                ["Thanks"] = "Thanks for voted on {0}",
                ["RewardCoins"] = "Coins reward: {0}",
                ["RewardRP"] = "RP reward: {0}",
                ["RewardXP"] = "XP reward: {0}",
                ["RewardLVL"] = "Level reward: {0}",
                ["RewardKit"] = "Kit rewarded.",
                ["EditID"] = "{0} - Server ID edited.",
                ["EditKey"] = "{0} - Api Key edited.",
                ["SiteDisabled"] = "{0} disabled",
                ["AddMoney"] = "Money reward \"{0}\" was added.",
                ["RemoveMoney"] = "Money reward \"{0}\" was removed.",
                ["EditMoney"] = "Money reward \"{0}\" was edited.",
                ["AddRP"] = "RP reward \"{0}\" was added.",
                ["RemoveRP"] = "RP reward \"{0}\" was removed.",
                ["EditRP"] = "RP reward \"{0}\" was edited.",
                ["AddKit"] = "Kit reward \"{0}\" was added.",
                ["RemoveKit"] = "Kit reward \"{0}\" was removed.",
                ["EditKit"] = "Kit reward \"{0}\" was edited.",
                ["NotExist"] = "\"{0}\" doesn't exist in config.",
                ["NotExistGroup"] = "Group \"{0}\" doesn't exist.",
                ["NotExistKit"] = "Kit \"{0}\" doesn't exist.",
                ["ErrorNumbers"] = "Error. Insert only numbers.",
                ["EditType"] = "Vote type edited in: {0}",
                ["ErrorType"] = "Error. Only 'day' or 'hour'.",
                ["EditInterval"] = "Vote interval edited in: {0}",
                ["EditUseEco"] = "Use Economics edited in: {0}",
                ["EditUseRP"] = "Use RP edited in: {0}",
                ["EditUseKits"] = "Use Kits edited in: {0}",
                ["ErrorBool"] = "Error. Only 'true' or 'false'.",
                ["Help"] = "\n============== VOTE HELP =============\n/vote <money|rp|kit> true/false - to use <Economics|RP|Kits> or not.\n/vote <money|rp|kit> add \"GROUP\" \"VALUE\" - to add a group for a different reward.\n/vote <money|rp|kit> remove \"GROUP\" - to remove a group.\n/vote <money|rp|kit> edit \"GROUP\" \"VALUE\" - to edit a group reward.\n/vote type day/hour - edit vote type.\n/vote interval AMOUNT - edit vote interval.\n/vote <rservers|toprust|beancan> <id \"SERVERID\"|key \"APIKEY\"> - edit <Rust-Servers|TopRustServers|BeancanIO> <ID|ApiKey>.\n/vote <rservers|toprust|beancan> false - disable <Rust-Servers|TopRustServers|BeancanIO>.\n============== VOTE HELP =============",
            }, this);
        }
        #endregion

        #region Data
        public Collection<PlayerVote> Users = new Collection<PlayerVote>();
        public class PlayerVote
        {
            public ulong UserId { get; set; }
            public string Name { get; set; }
            public Dictionary<string, SitesVote> Sites;

            public PlayerVote(ulong UserId, string Name)
            {
                this.UserId = UserId;
                this.Name = Name;
                Sites = new Dictionary<string, SitesVote>();
            }
        }

        public class SitesVote
        {
            public int Votes { get; set; }
            public string ExpDate { get; set; }
            public string Claimed { get; set; }

            public SitesVote(int Votes, string ExpDate, string Claimed)
            {
                this.Votes = Votes;
                this.ExpDate = ExpDate;
                this.Claimed = Claimed;
            }
        }

        private void LoadData() { Users = Interface.GetMod().DataFileSystem.ReadObject<Collection<PlayerVote>>("VoteForMoney"); }
        private void SaveData() { Interface.Oxide.DataFileSystem.WriteObject("VoteForMoney", Users); }
        #endregion

        #region Hooks
        void Init()
        {
            LoadDefaultMessages();

            permission.RegisterPermission(permAdmin, this);
        }

        void Loaded()
        {
            LoadData();
            LoadConfigData();
        }

        void OnPlayerInit(BasePlayer player)
        {
            GetRequest(player);
        }
        #endregion

        #region Commands
        [ChatCommand("vote")]
        private void cmdVote(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0 || args == null)
            {
                GetRequest(player);
                return;
            }

            if(HasPermission(player.UserIDString, permAdmin))
            {
                edit = true;

                try
                {
                    switch (args[0])
                    {
                        case "help":
                            {
                                MessageChat(player, Lang("Help", player.UserIDString));
                                break;
                            }
                        case "money":
                            {
                                bool flag;
                                if (Boolean.TryParse(args[1], out flag))
                                {
                                    useEconomics = flag;
                                    SetConfig("Use Economics", useEconomics);
                                    MessageChat(player, Lang("EditUseEco", player.UserIDString, flag));
                                    break;
                                }

                                int n;
                                bool isNumber = int.TryParse(args[3], out n);
                                if (!isNumber)
                                {
                                    MessageChat(player, Lang("ErrorNumbers", player.UserIDString));
                                    break;
                                }

                                var change = false;
                                switch(args[1])
                                {
                                    case "add":
                                        {
                                            if (permission.GroupExists(args[2]))
                                            {
                                                money.Add(args[2], args[3]);
                                                MessageChat(player, Lang("AddMoney", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExistGroup", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "remove":
                                        {
                                            if (money.ContainsKey(args[2]))
                                            {
                                                money.Remove(args[2]);
                                                MessageChat(player, Lang("RemoveMoney", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "edit":
                                        {
                                            if(money.ContainsKey(args[2]))
                                            {
                                                money[args[2]] = args[3];
                                                MessageChat(player, Lang("EditMoney", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                }

                                if(change)
                                    SetConfig("Money", money);
                                break;
                            }
                        case "rp":
                            {
                                bool flag;
                                if (Boolean.TryParse(args[1], out flag))
                                {
                                    useRP = flag;
                                    SetConfig("Use RP", useRP);
                                    MessageChat(player, Lang("EditUseRP", player.UserIDString, flag));
                                    break;
                                }

                                int n;
                                bool isNumber = int.TryParse(args[3], out n);
                                if (!isNumber)
                                {
                                    MessageChat(player, Lang("ErrorNumbers", player.UserIDString));
                                    break;
                                }

                                var change = false;
                                switch (args[1])
                                {
                                    case "add":
                                        {
                                            if (permission.GroupExists(args[2]))
                                            {
                                                rp.Add(args[2], args[3]);
                                                MessageChat(player, Lang("AddRP", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExistGroup", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "remove":
                                        {
                                            if (rp.ContainsKey(args[2]))
                                            {
                                                rp.Remove(args[2]);
                                                MessageChat(player, Lang("RemoveRP", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "edit":
                                        {
                                            if (rp.ContainsKey(args[2]))
                                            {
                                                rp[args[2]] = args[3];
                                                MessageChat(player, Lang("EditRP", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                }

                                if(change)
                                    SetConfig("RP", rp);
                                break;
                            }
                        case "kit":
                            {
                                bool flag;
                                if (Boolean.TryParse(args[1], out flag))
                                {
                                    useKits = flag;
                                    SetConfig("Use Kits", useKits);
                                    MessageChat(player, Lang("EditUseKits", player.UserIDString, flag));
                                    break;
                                }

                                var change = false;
                                switch (args[1])
                                {
                                    case "add":
                                        {
                                            if (permission.GroupExists(args[2]))
                                            {
                                                if (!Convert.ToBoolean(Kits?.Call("isKit", args[3])))
                                                {
                                                    MessageChat(player, Lang("NotExistKit", player.UserIDString, args[3]));
                                                    break;
                                                }
                                                kits.Add(args[2], args[3]);
                                                MessageChat(player, Lang("AddKit", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExistGroup", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "remove":
                                        {
                                            if (kits.ContainsKey(args[2]))
                                            {
                                                kits.Remove(args[2]);
                                                MessageChat(player, Lang("RemoveKit", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                    case "edit":
                                        {
                                            if (kits.ContainsKey(args[2]))
                                            {
                                                kits[args[2]] = args[3];
                                                MessageChat(player, Lang("EditKit", player.UserIDString, args[2]));
                                                change = true;
                                            }
                                            else
                                                MessageChat(player, Lang("NotExist", player.UserIDString, args[2]));
                                            break;
                                        }
                                }

                                if(change)
                                    SetConfig("Kits", kits);
                                break;
                            }
                        case "type":
                            {
                                if (args[1] != "day" && args[1] != "hour")
                                {
                                    MessageChat(player, Lang("ErrorType", player.UserIDString));
                                    break;
                                }
                                voteType = args[1];
                                SetConfig("Vote Type", voteType);
                                MessageChat(player, Lang("EditType", player.UserIDString, voteType));
                                break;
                            }
                        case "interval":
                            {
                                int n;
                                bool isNumber = int.TryParse(args[1], out n);
                                if (!isNumber)
                                {
                                    MessageChat(player, Lang("ErrorNumbers", player.UserIDString));
                                    break;
                                }
                                voteInterval = n;
                                SetConfig("Vote Interval", voteInterval);
                                MessageChat(player, Lang("EditInterval", player.UserIDString, voteInterval));
                                break;
                            }
                        case "rservers":
                            {
                                switch(args[1])
                                {
                                    case "id":
                                        {
                                            rustServersID = args[2];
                                            SetConfig("Rust-Servers - Server ID", rustServersID);
                                            MessageChat(player, Lang("EditID", player.UserIDString, site1));
                                            break;
                                        }
                                    case "key":
                                        {
                                            rustServersKey = args[2];
                                            SetConfig("Rust-Servers - Api Key", rustServersKey);
                                            MessageChat(player, Lang("EditKey", player.UserIDString, site1));
                                            break;
                                        }
                                    case "false":
                                        {
                                            rustServersID = "";
                                            SetConfig("Rust-Servers - Server ID", rustServersID);
                                            rustServersKey = "";
                                            SetConfig("Rust-Servers - Api Key", rustServersKey);
                                            MessageChat(player, Lang("SiteDisabled", player.UserIDString, site1));
                                            break;
                                        }
                                }

                                break;
                            }
                        case "toprust":
                            {
                                switch (args[1])
                                {
                                    case "id":
                                        {
                                            topRustID = args[2];
                                            SetConfig("TopRustServers - Server ID", topRustID);
                                            MessageChat(player, Lang("EditID", player.UserIDString, site2));
                                            break;
                                        }
                                    case "key":
                                        {
                                            topRustKey = args[2];
                                            SetConfig("TopRustServers - Api Key", topRustKey);
                                            MessageChat(player, Lang("EditKey", player.UserIDString, site2));
                                            break;
                                        }
                                    case "false":
                                        {
                                            topRustID = "";
                                            SetConfig("TopRustServers - Server ID", topRustID);
                                            topRustKey = "";
                                            SetConfig("TopRustServers - Api Key", topRustKey);
                                            MessageChat(player, Lang("SiteDisabled", player.UserIDString, site2));
                                            break;
                                        }
                                }

                                break;
                            }
                        case "beancan":
                            {
                                switch (args[1])
                                {
                                    case "id":
                                        {
                                            beancanID = args[2];
                                            SetConfig("BeancanIO - Server ID", beancanID);
                                            MessageChat(player, Lang("EditID", player.UserIDString, site3));
                                            break;
                                        }
                                    case "key":
                                        {
                                            beancanKey = args[2];
                                            SetConfig("BeancanIO - Api Key", beancanKey);
                                            MessageChat(player, Lang("EditKey", player.UserIDString, site3));
                                            break;
                                        }
                                    case "false":
                                        {
                                            beancanID = "";
                                            SetConfig("BeancanIO - Server ID", beancanID);
                                            beancanKey = "";
                                            SetConfig("BeancanIO - Api Key", beancanKey);
                                            MessageChat(player, Lang("SiteDisabled", player.UserIDString, site3));
                                            break;
                                        }
                                }

                                break;
                            }
                    }
                } catch { }

                edit = false;
            }
        }
        #endregion

        #region Methods
        //Create New Player Data If Not Exist
        void NewPlayer(BasePlayer player)
        {
            var playerId = player.userID;
            var playerName = player.displayName;
            var tmp = Users.Where(d => d.UserId == playerId).FirstOrDefault();
            if (tmp == null)
            {
                Users.Add(new PlayerVote(playerId, playerName));
                Puts($"Created new player data for {playerName}");
                SaveData();

                string time = DateTime.Now.ToString();
                tmp = Users.Where(d => d.UserId == playerId).FirstOrDefault();
                tmp.Sites.Add(site1, new SitesVote(0, time, "0"));
                tmp.Sites.Add(site2, new SitesVote(0, time, "0"));
                tmp.Sites.Add(site3, new SitesVote(0, time, "0"));
                SaveData();
            }
            else if (!tmp.Sites.ContainsKey(site3))
            {
                tmp.Sites.Add(site3, new SitesVote(0, DateTime.Now.ToString(), "0"));
                SaveData();
            }
        }

        void GetRequest(BasePlayer player)
        {
            NewPlayer(player);

            var steamid = player.userID.ToString();

            if (rustServersKey != "" && rustServersKey != null)
            {
                webrequest.EnqueueGet("http://rust-servers.net/api/?action=custom&object=plugin&element=reward&key=" + rustServersKey + "&steamid=" + steamid, (code, response) => GetCallback(code, response, player, site1), this);
            }

            if (topRustKey != "" && topRustKey != null)
            {
                webrequest.EnqueueGet("http://api.toprustservers.com/api/get?plugin=voter&key=" + topRustKey + "&uid=" + steamid, (code, response) => GetCallback(code, response, player, site2), this);
            }

            if (beancanKey != "" && beancanKey != null)
            {
                webrequest.EnqueueGet("http://beancan.io/vote/get/" + beancanKey + "/" + steamid, (code, response) => GetCallback(code, response, player, site3), this);
            }
        }

        void GetCallback(int code, string response, BasePlayer player, string site)
        {
            if (response == null || code != 200)
            {
                Puts($"Error: {code} - Couldn't get an answer from {site}");
                MessageChat(player, Lang("NoAnswer", player.UserIDString, site));
                return;
            }

            int tmpRes;
            int.TryParse(response, out tmpRes);
            CheckVote(player, tmpRes, site);
        }

        void Claim(BasePlayer player, string site, PlayerVote data)
        {
            var steamid = player.userID.ToString();

            switch (site)
            {
                case site1:
                    {
                        data.Sites[site].Votes++;
                        data.Sites[site].Claimed = "1";
                        SaveData();
                        PrintWarning($"New vote on {site1}: {player.displayName}");
                        GetMoney(player, site1);
                        break;
                    }
                case site2:
                    {
                        webrequest.EnqueueGet("http://api.toprustservers.com/api/put?plugin=voter&key=" + topRustKey + "&uid=" + steamid, (code, response) => ClaimCheck(code, response, player, site2, data), this);
                        break;
                    }
                case site3:
                    {
                        webrequest.EnqueueGet("http://beancan.io/vote/put/" + beancanKey + "/" + steamid, (code, response) => ClaimCheck(code, response, player, site3, data), this);
                        break;
                    }
            }
        }

        void ClaimCheck(int code, string response, BasePlayer player, string site, PlayerVote data)
        {
            if (response == null || code != 200)
            {
                Puts($"Error: {code} - Couldn't get an answer from {site}");
                PrintWarning($"Error to claim reward from player: {player.displayName}");
                MessageChat(player, Lang("NoAnswer", player.UserIDString, site));
            }

            if (response == "1")
            {
                data.Sites[site].Votes++;
                data.Sites[site].Claimed = "1";
                SaveData();
                PrintWarning($"New vote on {site}: {player.displayName}");
                GetMoney(player, site);
            }
        }

        private void CheckVote(BasePlayer player, int response, string site)
        {
            var time = DateTime.Now;
            var tmp = Users.Where(d => d.UserId == player.userID).FirstOrDefault();

            if (tmp.Sites[site].Claimed == null)
            {
                tmp.Sites[site].Claimed = "0";
                SaveData();
            }

            var expdate = Convert.ToDateTime(tmp.Sites[site].ExpDate);
            if (time < expdate)
            {
                if (response == 1) //if voted before expire date
                {
                    tmp.Sites[site].Claimed = "-1";
                    SaveData();
                }
                MessageChat(player, Lang("AlreadyVoted", player.UserIDString, site));
                MessageChat(player, Lang("NextVote", player.UserIDString, expdate));
                return;
            }
            else
            {
                if(response == 1)
                {
                    tmp.Sites[site].Claimed = "0";
                    SaveData();
                }
            }

            if (response == 0)
            {
                switch(site)
                {
                    case site1:
                        {
                            MessageChat(player, Lang("NotVoted", player.UserIDString, site, link1, rustServersID));
                            return;
                        }
                    case site2:
                        {
                            MessageChat(player, Lang("NotVoted", player.UserIDString, site, link2, topRustID));
                            return;
                        }
                    case site3:
                        {
                            MessageChat(player, Lang("NotVoted", player.UserIDString, site, link3, beancanID));
                            return;
                        }
                }
            }

            if (response == 2 && (tmp.Sites[site].Claimed == "0" || tmp.Sites[site].Claimed == "1"))
            {
                MessageChat(player, Lang("AlreadyVoted", player.UserIDString, site));
                return;
            }

            if (response == 1 || tmp.Sites[site].Claimed == "-1")
                Claim(player, site, tmp);
        }

        private void GetMoney(BasePlayer player, string site)
        {
            MessageChat(player, Lang("Thanks", player.UserIDString, site));

            if (useEconomics)
            {
                var total = 0;
                foreach(var m in money)
                {
                    if (m.Key != "default" && permission.GetUserGroups(player.UserIDString).Contains(m.Key))
                    {
                        Economics?.Call("Deposit", player.userID, m.Value);
                        total += Convert.ToInt32(m.Value);
                    }
                }
                if (total == 0 && money.ContainsKey("default"))
                {
                    Economics?.Call("Deposit", player.userID, money["default"]);
                    total = Convert.ToInt32(money["default"]);
                }
                if(total != 0)
                    MessageChat(player, Lang("RewardCoins", player.UserIDString, total));
            }
            
            if(useRP)
            {
                var total = 0;
                foreach (var r in rp)
                {
                    if (r.Key != "default" && permission.GetUserGroups(player.UserIDString).Contains(r.Key))
                    {
                        ServerRewards?.Call("AddPoints", new object[] { player.userID, r.Value });
                        total += Convert.ToInt32(r.Value);
                    }
                }
                if (total == 0 && rp.ContainsKey("default"))
                {
                    ServerRewards?.Call("AddPoints", new object[] { player.userID, rp["default"] });
                    total = Convert.ToInt32(rp["default"]);
                }
                if (total != 0)
                    MessageChat(player, Lang("RewardRP", player.UserIDString, total));
            }

            if(useKits)
            {
                var group = false;
                foreach(var kit in kits)
                {
                    if(kit.Key != "default" && permission.GetUserGroups(player.UserIDString).Contains(kit.Key))
                    {
                        Kits?.Call("GiveKit", player, kit.Value);
                        if (!group)
                            group = true;
                    }
                }
                if(!group && kits.ContainsKey("default"))
                    Kits?.Call("GiveKit", player, kits["default"]);
                if((!group && kits.ContainsKey("default")) || group)
                    MessageChat(player, Lang("RewardKit", player.UserIDString));
            }

            var tmp = Users.Where(d => d.UserId == player.userID).FirstOrDefault();
            switch (voteType)
            {
                case "hour":
                    {
                        int hours = voteInterval;
                        var newdate = DateTime.Now + new TimeSpan(0, hours, 0, 0);
                        tmp.Sites[site].ExpDate = newdate.ToString();
                        SaveData();
                        break;
                    }
                case "day":
                    {
                        int days = voteInterval;
                        var newdate = DateTime.Now + new TimeSpan(days, 0, 0, 0);
                        tmp.Sites[site].ExpDate = newdate.ToString();
                        SaveData();
                        break;
                    }
            }
        }
        #endregion

        #region Utility
        //save config
        void SetConfig(string name, object data)
        {
            if (Config[name] == null || edit)
            {
                Config[name] = data;
                SaveConfig();
                return;
            }
        }

        //read config
        object ReadConfig(string name, object data)
        {
            if (Config[name] != null)
            {
                return Config[name];
            }

            return data;
        }

        private Dictionary<string, string> ConvertToDictionary(object obj, Dictionary<string, string> dict)
        {
            if (typeof(IDictionary).IsAssignableFrom(obj.GetType()))
            {
                IDictionary idict = (IDictionary)obj;

                Dictionary<string, string> newDict = new Dictionary<string, string>();
                foreach (object key in idict.Keys)
                {
                    newDict.Add(key.ToString(), idict[key].ToString());
                }

                return newDict;
            }
            else
            {
                PrintWarning($"Invalid dictionary in config. Restored to default value");
            }

            return dict;
        }

        //control if player have permission
        bool HasPermission(string id, string perm) => permission.UserHasPermission(id, perm);

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
        void MessageChat(BasePlayer player, string message, string args = null) => PrintToChat(player, $"{prefix} {message}", args);
        #endregion
    }
}


// --- End of file: VoteForMoney.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MagicSigns.cs ---
// --- Original Local Path: MagicSigns.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Libraries;
using System.Text.RegularExpressions;
using UnityEngine;
using System.Collections;
using System.Linq;
using System.IO;
namespace Oxide.Plugins
{
    [Info("MagicSigns", "Norn", 0.4, ResourceId = 1446)]
    [Description("Random signs.")]
    public class MagicSigns : RustPlugin
    {
        bool INIT = false;
        private readonly WebRequests scrapeQueue = Interface.GetMod().GetLibrary<WebRequests>("WebRequests");
        static GameObject WebObject;
        static UnityWeb UWeb;
        uint MaxSize = 2048U;
        class QueueItem
        {
            public string url;
            public Signage sign;
            public BasePlayer sender;
            public bool raw;

            public QueueItem(string ur, BasePlayer se, Signage si, bool raw)
            {
                url = ur;
                sender = se;
                sign = si;
                this.raw = raw;
            }
        }
        class UnityWeb : MonoBehaviour
        {
            internal static bool ConsoleLog = true;
            internal static string ConsoleLogMsg = "Player[{steam} {name}] loaded {id} image from {url}!";
            internal static int MaxActiveLoads = 3;
            private Queue<QueueItem> QueueList = new Queue<QueueItem>();
            static byte ActiveLoads = 0;
            private MemoryStream stream = new MemoryStream();
            byte JPGCompression = 85;

            public void Add(string url, BasePlayer player, Signage s, bool raw)
            {
                QueueList.Enqueue(new QueueItem(url, player, s, raw));
                if (ActiveLoads < MaxActiveLoads)
                    Next();
            }

            void Next()
            {
                if (QueueList.Count <= 0) return;
                ActiveLoads++;
                StartCoroutine(WaitForRequest(QueueList.Dequeue()));
            }

            private void ClearStream()
            {
                stream.Position = 0;
                stream.SetLength(0);
            }
            byte[] GetImageBytes(WWW www)
            {
                var tex = www.texture;
                byte[] img;
                img = tex.EncodeToJPG(JPGCompression);
                DestroyImmediate(tex);
                return img;
            }
            IEnumerator WaitForRequest(QueueItem info)
            {
                using (var www = new WWW(info.url))
                {
                    yield return www;
                    var player = info.sender;
                    if (www.error == null)
                    {

                        var img = info.raw ? www.bytes : GetImageBytes(www);
                            var sign = info.sign;
                            if (sign.textureID > 0U)
                                FileStorage.server.Remove(sign.textureID, FileStorage.Type.png, sign.net.ID);
                            ClearStream();
                            stream.Write(img, 0, img.Length);
                            sign.textureID = FileStorage.server.Store(stream, FileStorage.Type.png, sign.net.ID);
                            ClearStream();
                            sign.SendNetworkUpdate();
                            Interface.Oxide.CallHook("OnSignUpdated", sign, player);
                    }
                    ActiveLoads--;
                    Next();
                }
            }
    }
        List<string> ScrapedImages = new List<string>();
        private void ParseScrapeResponse(int code, string response)
        {
            if (response == null || code != 200)
            {
                Puts("Failed to scrape images...");
                return;
            }
            int count = 0;
            foreach (Match m in Regex.Matches(response, "<img.+?src=[\"'](.+?)[\"'].+?>", RegexOptions.IgnoreCase | RegexOptions.Multiline))
            {
                string src = m.Groups[1].Value;
                if(src.Length >= 1 && src.EndsWith(".jpg")) // Parsing scraped html
                {
                    string modified = src.Insert(0, "http:");
                    modified = modified.Remove(modified.Trim().Length - 5);
                    modified += ".jpg";
                    ScrapedImages.Add(modified);
                    count++;
                }
            }
            string tags = Config["Image", "Tags"].ToString(); if (tags.Length == 0) { tags = "Random Pool"; }
            if (count != 0) { Puts("Scraped " + count.ToString() + " images [ Tags: "+ tags + " ]"); if (!INIT) { INIT = true; } }
        }
        private void PopulateImageList()
        {
            INIT = false;
            ScrapedImages.Clear();
            string type = "q_type=png"; // Temporary png tag to prevent animated jpg
            string search_string = "http://imgur.com/search/time?"+type+"&q=" + System.Uri.EscapeDataString(Config["Image", "Tags"].ToString());
            scrapeQueue.EnqueueGet(search_string, (code, response) => ParseScrapeResponse(code, response), this);
        }
        protected override void LoadDefaultConfig()
        {
            Puts("No configuration file found, generating...");
            Config.Clear();

            // --- [ GENERAL SETTINGS ] ---

            Config["General", "AuthLevel"] = 2;

            Config["Image", "Tags"] = "";

            Config["Messages", "NoAuth"] = "You <color=red>don't</color> have the required authorization level to use this command.";
            Config["Messages", "NoSigns"] = "There are <color=red>no</color> signs to wipe.";

            SaveConfig();
        }
        [ChatCommand("ms")]
        private void ChatCommand(BasePlayer player, string command, string[] args)
        {
            if (player.net.connection.authLevel >= Convert.ToInt32(Config["General", "AuthLevel"]))
            {
                if (args.Length == 0 || args.Length > 2)
                {
                    PrintToChat(player, "<color=yellow>ADMIN:</color> /ms <tags | <color=red>wipe</color>>");
                    if (Config["Image", "Tags"] != null)
                    {
                        string tags = null;
                        if(Config["Image", "Tags"].ToString().Length == 0){tags = "None. [<color=green>Random</color>]";}else{tags = Config["Image", "Tags"].ToString();}
                        if(tags != null) PrintToChat(player, "<color=yellow>Current Tags:</color> " + tags + ".");
                    }
                }
                else if (args[0] == "tags")
                {
                    if (args.Length == 1)
                    {
                        if (Config["Image", "Tags"] != null)
                        {
                            string tags = null;
                            if (Config["Image", "Tags"].ToString().Length == 0) { tags = "None. [<color=green>Random</color>]"; } else { tags = Config["Image", "Tags"].ToString(); }
                            if (tags != null) PrintToChat(player, "<color=yellow>Current Tags:</color> " + tags + ".");
                        }
                        PrintToChat(player, "<color=yellow>USAGE:</color> /ms tags <tags>\n(e.g. /ms tags \"<color=yellow>Emma Watson</color>\" or \"<color=yellow>Random</color>\" to go back to random pool).");
                    }
                    else
                    {
                        if(args[1].Length >= 1)
                        {
                            if(args[1].ToLower() == "random") { Config["Image", "Tags"] = ""; PrintToChat(player, "You have updated Magic Signs tags: <color=yellow>Random Pool</color>."); } else { Config["Image", "Tags"] = args[1]; PrintToChat(player, "You have updated Magic Signs tags: <color=yellow>" + Config["Image", "Tags"].ToString() + "</color>."); PopulateImageList(); }
                            SaveConfig();
                        }
                    }
                }
                else if (args[0] == "wipe")
                {
                    if (args.Length == 1)
                    {
                        var SIGNLIST = UnityEngine.Object.FindObjectsOfType<Signage>(); int count = 0;
                        if(SIGNLIST.Count() == 0) { PrintToChat(player, Config["Messages", "NoSigns"].ToString()); return; }
                        foreach (var sign in SIGNLIST)
                        {
                            if (sign != null)
                            {
                                sign.Kill();
                                count++;
                            }
                        }
                        if (count == 0) { PrintToChat(player, Config["Messages", "NoSigns"].ToString()); } else { PrintToChat(player, "Wiped <color=yellow>" + count.ToString() + "</color> signs."); Puts(player.displayName + " [ "+player.userID.ToString()+" ] has wiped the map of " + count.ToString() + " signs."); }
                    }
                }
            }
            else
            {
                if(Config["Messages", "NoAuth"] != null) { PrintToChat(player, Config["Messages", "NoAuth"].ToString()); }
            }
        }
        private void OnEntityBuilt(Planner planner, GameObject gameObject)
        {
            if (INIT != false)
            {
                BasePlayer player = planner.GetOwnerPlayer();
                if (permission.UserHasPermission(player.userID.ToString(), "magicsigns.able"))
                {
                    BaseEntity e = gameObject.ToBaseEntity();
                    if (!(e is BaseEntity) || player == null) { return; }
                    if (e.GetComponent<Signage>() != null)
                    {
                        if (!Cooldown.ContainsKey(player.userID))
                        {
                            int id = GetRandomInt(0, ScrapedImages.Count);
                            UWeb.Add(ScrapedImages[id], player, e.GetComponent<Signage>(), false);
                            ScrapedImages.Remove(ScrapedImages[id]);
                            if (player.net.connection.authLevel < 1) { InitCooldown(player); }
                            if (ScrapedImages.Count == 0) { Puts(player.displayName + " has used the last image in the list, scraping more..."); PopulateImageList(); }
                        }
                        else
                        {
                            PrintToChat(player, "You must wait " + Cooldown[player.userID].ToString() + " seconds before placing another sign.");
                            e.Kill();
                        }
                    }
                }
            }
            return;
        }

        void Unload()
        {
            GameObject.Destroy(WebObject);
            if(COOLDOWN_TIMER != null) { COOLDOWN_TIMER.Destroy(); }
        }
		System.Random rnd = new System.Random();
        protected int GetRandomInt(int min, int max)
        {
            return rnd.Next(min, max);
        }
        int DEFAULT_COOLDOWN = 10;
        Dictionary<ulong, int> Cooldown = new Dictionary<ulong, int>();
        private void CooldownTimer()
        {
            foreach(BasePlayer player in BasePlayer.activePlayerList)
            {
                if (player.isConnected && player != null)
                {
                    if (Cooldown.ContainsKey(player.userID))
                    {
                        int time_left = 0;
                        if (Cooldown.TryGetValue(player.userID, out time_left))
                        {
                            if (time_left <= 0) { Cooldown.Remove(player.userID); } else { Cooldown[player.userID]--; }
                        }
                    }
                }
            }
        }
        private void InitCooldown(BasePlayer player)
        {
            if(!Cooldown.ContainsKey(player.userID))
            {
                Cooldown.Add(player.userID, DEFAULT_COOLDOWN);
            }
        }
        void Loaded()
        {
            if (!permission.PermissionExists("magicsigns.able")) permission.RegisterPermission("magicsigns.able", this);
        }
        Timer COOLDOWN_TIMER = null;
        void OnServerInitialized()
        {
            WebObject = new GameObject("WebObject");
            UWeb = WebObject.AddComponent<UnityWeb>();
            timer.Once(5, () => PopulateImageList());
            COOLDOWN_TIMER = timer.Repeat(1, 0, () => CooldownTimer());
        }
    }
}

// --- End of file: MagicSigns.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AdminMenu (1).cs ---
// --- Original Local Path: AdminMenu (1).cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Cui;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using UnityEngine;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("AdminMenu", "k1lly0u", "0.1.32", ResourceId = 0)]
    class AdminMenu : RustPlugin
    {
        #region Fields 
        private StoredData storedData;
        private DynamicConfigFile data;

        private static AdminMenu ins;
        private Dictionary<string, string> uiColors = new Dictionary<string, string>();

        private enum MenuType { Permissions, Groups, Commands }
        private enum SelectType { Player, String }
        private enum PermSub { View, Player, Group }
        private enum CommSub { Chat, Console, Give }        
        private enum GroupSub { View, UserGroups, AddGroup, RemoveGroup }
        private enum ItemType { Weapon, Construction, Items, Resources, Attire, Tool, Medical, Food, Ammunition, Traps, Misc, Component }

        private Dictionary<ItemType, List<KeyValuePair<string, ItemDefinition>>> itemList = new Dictionary<ItemType, List<KeyValuePair<string, ItemDefinition>>>();
        private Dictionary<ulong, SelectionData> selectData = new Dictionary<ulong, SelectionData>();
        private Dictionary<ulong, GroupData> groupCreator = new Dictionary<ulong, GroupData>();
        private Hash<ulong, Timer> popupTimers = new Hash<ulong, Timer>();
        private string[] charFilter = new string[] { "~", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };

        private List<KeyValuePair<string, bool>> permissionList = new List<KeyValuePair<string, bool>>();
        #endregion

        #region Classes
        private class SelectionData
        {
            public MenuType menuType;
            public string subType, selectDesc = string.Empty, returnCommand = string.Empty, target1_Name = string.Empty, target1_Id = string.Empty, target2_Name = string.Empty, target2_Id = string.Empty, character = string.Empty;
            public bool requireTarget1, requireTarget2, isOnline, isGroup, forceOnline;
            public int pageNum, listNum;
        }

        private class GroupData { public string name = string.Empty, title = string.Empty, rank = string.Empty; }
        #endregion

        #region Oxide Hooks
        private void Loaded()
        {
            permission.RegisterPermission("adminmenu.use", this);
            permission.RegisterPermission("adminmenu.permissions", this);
            permission.RegisterPermission("adminmenu.groups", this);
            permission.RegisterPermission("adminmenu.give", this);
            lang.RegisterMessages(Messages, this);

            data = Interface.Oxide.DataFileSystem.GetFile("AdminMenu/offline_players");
        }

        private void OnServerInitialized()
        {
            ins = this;
            LoadVariables();
            LoadData();

            if (storedData == null || storedData.offlinePlayers == null)
                storedData = new StoredData();
            else storedData.RemoveOldPlayers();

            SetUIColors();

            foreach(var item in ItemManager.itemList)
            {
                ItemType itemType = (ItemType)Enum.Parse(typeof(ItemType), item.category.ToString(), true);
                if (!itemList.ContainsKey(itemType))
                    itemList.Add(itemType, new List<KeyValuePair<string, ItemDefinition>>());

                itemList[itemType].Add(new KeyValuePair<string, ItemDefinition>(item.displayName.english, item));
            }

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                OnPlayerInit(player);
        }

        private void OnPlayerInit(BasePlayer player) => storedData.OnPlayerInit(player.UserIDString);

        private void OnPlayerDisconnected(BasePlayer player)
        {
            DestroyUI(player);
            storedData.AddOfflinePlayer(player.UserIDString);
        }

        private void OnPermissionRegistered(string name, Plugin owner) => UpdatePermissionList();

        private void OnPluginUnloaded(Plugin plugin) => UpdatePermissionList();

        private void OnServerSave() => SaveData();

        private void Unload()
        {      
            foreach (BasePlayer player in BasePlayer.activePlayerList)
                OnPlayerDisconnected(player);

            ins = null;
        }
        #endregion

        #region CUI Helper
        public class UI
        {
            static public CuiElementContainer Container(string panelName, string color, string aMin, string aMax, bool useCursor = false, string parent = "Overlay")
            {
                var NewElement = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color},
                            RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                return NewElement;
            }

            static public void Panel(ref CuiElementContainer container, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel);
            }

            static public void Label(ref CuiElementContainer container, string panel, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                {
                    Text = { FontSize = size, Align = align, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);

            }   
            
            static public void Button(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = 0f },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }           
           
            static public void Input(ref CuiElementContainer container, string panel, string color, string text, int size, string command, string aMin, string aMax)
            {                
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiInputFieldComponent
                        {
                            Align = TextAnchor.MiddleLeft,
                            CharsLimit = 50,
                            Color = color,
                            Command = command + text,
                            FontSize = size,
                            IsPassword = false,
                            Text = text                           
                        },
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax }
                    }                
                });
            }

            static public string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                    hexColor = hexColor.TrimStart('#');
                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double)red / 255} {(double)green / 255} {(double)blue / 255} {alpha}";
            }
        }
        #endregion

        #region UI Creation 
        const string UIMain = "AMUI_MenuMain";        
        const string UIElement = "AMUI_MenuElement";
        const string UIPopup = "AMUI_PopupMessage";
              
        private void OpenAdminMenu(BasePlayer player)
        {
            DestroyUI(player);
            CuiElementContainer container = UI.Container(UIMain, uiColors["bg1"], "0.05 0.08", "0.95 0.92", true);
            CuiHelper.AddUi(player, container);

            CreateMenuCommands(player, CommSub.Chat);
        }

        private void CreateMenuButtons(ref CuiElementContainer container, MenuType menuType, string playerId)
        {
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.925", "0.995 0.99");
            UI.Label(ref container, UIElement, string.Format(msg("title", playerId), Version), 24, "0.02 0.93", "0.25 0.98", TextAnchor.UpperLeft);
            
            UI.Button(ref container, UIElement, menuType == MenuType.Commands ? uiColors["button3"] : uiColors["button1"], msg(MenuType.Commands.ToString(), playerId), 16, "0.27 0.93", "0.42 0.985", menuType == MenuType.Commands ? "" : "amui.switchelement commands");
            if (HasPermission(playerId, "adminmenu.permissions"))
                UI.Button(ref container, UIElement, menuType == MenuType.Permissions ? uiColors["button3"] : uiColors["button1"], msg(MenuType.Permissions.ToString(), playerId), 16, "0.425 0.93", "0.575 0.985", menuType == MenuType.Permissions ? "" : "amui.switchelement permissions");
            if (HasPermission(playerId, "adminmenu.groups"))
                UI.Button(ref container, UIElement, menuType == MenuType.Groups ? uiColors["button3"] : uiColors["button1"], msg(MenuType.Groups.ToString(), playerId), 16, "0.58 0.93", "0.73 0.985", menuType == MenuType.Groups ? "" : "amui.switchelement groups");
            UI.Button(ref container, UIElement, uiColors["button1"], msg("exit", playerId), 16, "0.855 0.93", "0.985 0.985", "amui.switchelement exit");
        }

        private void CreateSubMenu(ref CuiElementContainer container, MenuType menuType, string playerId, string subType)
        {
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.87", "0.995 0.92");
            switch (menuType)
            {
                case MenuType.Permissions:
                    PermSub permSub = ParseType<PermSub>(subType);
                    UI.Button(ref container, UIElement, permSub == PermSub.View ? uiColors["button3"] : uiColors["button1"], msg("view", playerId), 16, "0.27 0.875", "0.42 0.915", permSub == PermSub.View ? "" : "amui.switchelement permissions view");
                    UI.Button(ref container, UIElement, permSub == PermSub.Player ? uiColors["button3"] : uiColors["button1"], msg("player", playerId), 16, "0.425 0.875", "0.575 0.915", permSub == PermSub.Player ? "" : "amui.switchelement permissions player");
                    UI.Button(ref container, UIElement, permSub == PermSub.Group ? uiColors["button3"] : uiColors["button1"], msg("group", playerId), 16, "0.58 0.875", "0.73 0.915", permSub == PermSub.Group ? "" : "amui.switchelement permissions group");
                    return;
                case MenuType.Groups:
                    GroupSub groupSub = ParseType<GroupSub>(subType);
                    UI.Button(ref container, UIElement, groupSub == GroupSub.View ? uiColors["button3"] : uiColors["button1"], msg("view", playerId), 16, "0.2025 0.875", "0.3525 0.915", groupSub == GroupSub.View ? "" : "amui.switchelement groups view");
                    UI.Button(ref container, UIElement, groupSub == GroupSub.AddGroup ? uiColors["button3"] : uiColors["button1"], msg("addgroup", playerId), 16, "0.3575 0.875", "0.4975 0.915", groupSub == GroupSub.AddGroup ? "" : "amui.switchelement groups addgroup");
                    UI.Button(ref container, UIElement, groupSub == GroupSub.RemoveGroup ? uiColors["button3"] : uiColors["button1"], msg("removegroup", playerId), 16, "0.5025 0.875", "0.6525 0.915", groupSub == GroupSub.RemoveGroup ? "" : "amui.switchelement groups removegroup");
                    UI.Button(ref container, UIElement, groupSub == GroupSub.UserGroups ? uiColors["button3"] : uiColors["button1"], msg("usergroups", playerId), 16, "0.6575 0.875", "0.8075 0.915", groupSub == GroupSub.UserGroups ? "" : "amui.switchelement groups usergroups");
                    return;
                case MenuType.Commands:
                    CommSub commSub = ParseType<CommSub>(subType);
                    UI.Button(ref container, UIElement, commSub == CommSub.Chat ? uiColors["button3"] : uiColors["button1"], msg("chat", playerId), 16, "0.27 0.875", "0.42 0.915", commSub == CommSub.Chat ? "" : "amui.switchelement commands chat");
                    UI.Button(ref container, UIElement, commSub == CommSub.Console ? uiColors["button3"] : uiColors["button1"], msg("console", playerId), 16, "0.425 0.875", "0.575 0.915", commSub == CommSub.Console ? "" : "amui.switchelement commands console");
                    if (HasPermission(playerId, "adminmenu.give"))
                        UI.Button(ref container, UIElement, commSub == CommSub.Give ? uiColors["button3"] : uiColors["button1"], msg("give", playerId), 16, "0.58 0.875", "0.73 0.915", commSub == CommSub.Give ? "" : "amui.switchelement commands give");
                    return;
            }
        }

        private void CreateMenuPermissions(BasePlayer player, int page = 0, string filter = "")
        {
            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");
            CreateMenuButtons(ref container, MenuType.Permissions, player.UserIDString);
            CreateSubMenu(ref container, MenuType.Permissions, player.UserIDString, "view");
            CreateCharacterFilter(ref container, player.userID, filter, $"amui.switchelement permissions view 0");

            List<KeyValuePair<string, bool>> permList = new List<KeyValuePair<string, bool>>(permissionList);
            if (!string.IsNullOrEmpty(filter) && filter != "~")
                permList = permList.Where(x => x.Key.StartsWith(filter, StringComparison.OrdinalIgnoreCase)).ToList();
            permList.OrderBy(x => x.Key);

            if (page > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", player.UserIDString), 16, "0.015 0.875", "0.145 0.915", $"amui.switchelement permissions view {page - 1}");
            if (permList.Count > 72 && permList.Count > (72 * page + 72))
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", player.UserIDString), 16, "0.855 0.875", "0.985 0.915", $"amui.switchelement permissions view {page + 1}");

            int count = 0;
            for (int i = page * 72; i < permList.Count; i++)
            {
                KeyValuePair<string, bool> perm = permList[i];
                float[] position = CalculateButtonPosVert(count);
                
                if (!perm.Value)
                {
                    UI.Panel(ref container, UIElement, uiColors["button2"], $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                    UI.Label(ref container, UIElement, $"{perm.Key}", 12, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                }
                else
                {    
                    UI.Panel(ref container, UIElement, uiColors["button1"], $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                    UI.Label(ref container, UIElement, $"{perm.Key}", 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                }
                ++count;

                if (count >= 72)
                    break;
            }

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }

        private void CreateMenuGroups(BasePlayer player, GroupSub subType, int page = 0, string filter = "")
        {
            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");
            CreateMenuButtons(ref container, MenuType.Groups, player.UserIDString);
            CreateSubMenu(ref container, MenuType.Groups, player.UserIDString, subType.ToString());

            switch (subType)
            {
                case GroupSub.View:
                    List<string> groupList = GetGroups();
                    groupList.Sort();

                    if (page > 0)
                        UI.Button(ref container, UIElement, uiColors["button1"], msg("back", player.UserIDString), 16, "0.015 0.875", "0.145 0.915", $"amui.switchelement groups view {page - 1}");
                    if (groupList.Count > 72 && groupList.Count > (72 * page + 72))
                        UI.Button(ref container, UIElement, uiColors["button1"], msg("next", player.UserIDString), 16, "0.855 0.875", "0.985 0.915", $"amui.switchelement groups view {page + 1}");

                    int count = 0;
                    for (int i = page * 72; i < groupList.Count; i++)
                    {
                        string groupId = groupList[i];
                        float[] position = CalculateButtonPos(count);

                        UI.Panel(ref container, UIElement, uiColors["button1"], $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                        UI.Label(ref container, UIElement, $"{groupId}", 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                        ++count;

                        if (count >= 72)
                            break;
                    }
                    break;
                case GroupSub.UserGroups:
                    break;                
                case GroupSub.AddGroup:
                    GroupData groupData;
                    if (!groupCreator.TryGetValue(player.userID, out groupData))
                    {
                        groupCreator.Add(player.userID, new GroupData());
                        groupData = groupCreator[player.userID];
                    }

                    UI.Label(ref container, UIElement, msg("inputhelper", player.UserIDString), 18, "0.1 0.75", "0.9 0.85");
                                       
                    UI.Label(ref container, UIElement, msg("groupname", player.UserIDString), 16, "0.1 0.62", "0.3 0.7", TextAnchor.MiddleLeft);
                    UI.Label(ref container, UIElement, msg("uiwarning", player.UserIDString), 8, "0.1 0.15", "0.9 0.2", TextAnchor.MiddleLeft);
                    UI.Panel(ref container, UIElement, uiColors["bg3"], "0.3 0.63", "0.9 0.69");
                    if (string.IsNullOrEmpty(groupData.name))
                        UI.Input(ref container, UIElement, "", groupData.name, 16, "amui.registergroup input name", "0.32 0.63", "0.9 0.69");
                    else UI.Label(ref container, UIElement, groupData.name, 16, "0.32 0.63", "0.9 0.69", TextAnchor.MiddleLeft);

                    UI.Label(ref container, UIElement, msg("grouptitle", player.UserIDString), 16, "0.1 0.54", "0.3 0.62", TextAnchor.MiddleLeft);
                    UI.Panel(ref container, UIElement, uiColors["bg3"], "0.3 0.55", "0.9 0.61");
                    if (string.IsNullOrEmpty(groupData.title))
                        UI.Input(ref container, UIElement, "", groupData.title, 16, "amui.registergroup input title", "0.32 0.55", "0.9 0.61");
                    else UI.Label(ref container, UIElement, groupData.title, 16, "0.32 0.55", "0.9 0.61", TextAnchor.MiddleLeft);

                    UI.Label(ref container, UIElement, msg("grouprank", player.UserIDString), 16, "0.1 0.46", "0.3 0.54", TextAnchor.MiddleLeft);
                    UI.Panel(ref container, UIElement, uiColors["bg3"], "0.3 0.47", "0.9 0.53");
                    if (string.IsNullOrEmpty(groupData.rank))
                        UI.Input(ref container, UIElement, "", groupData.rank, 16, "amui.registergroup input rank", "0.32 0.47", "0.9 0.53");
                    else UI.Label(ref container, UIElement, groupData.rank, 16, "0.32 0.47", "0.9 0.53", TextAnchor.MiddleLeft);


                    UI.Button(ref container, UIElement, uiColors["button2"], msg("reset", player.UserIDString), 16, "0.345 0.38", "0.495 0.44", "amui.registergroup reset");
                    UI.Button(ref container, UIElement, uiColors["button3"], msg("create", player.UserIDString), 16, "0.505 0.38", "0.655 0.44", "amui.registergroup create");
                    break;                             
            }

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }

        private void CreateMenuCommands(BasePlayer player, CommSub subType, int page = 0, ItemType itemType = ItemType.Weapon)
        {             
            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");
            CreateMenuButtons(ref container, MenuType.Commands, player.UserIDString);
            CreateSubMenu(ref container, MenuType.Commands, player.UserIDString, subType.ToString());
            if (subType == CommSub.Give)
                CreateGiveMenu(ref container, itemType, page, player.UserIDString);
            else CreateCommandEntry(ref container, subType, page, player.UserIDString);

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }
                
        private void CreateCommandEntry(ref CuiElementContainer container, CommSub subType, int page, string playerId)
        {
            UI.Label(ref container, UIElement, msg("command", playerId), 16, "0.02 0.82", "0.15 0.87", TextAnchor.MiddleLeft);
            UI.Label(ref container, UIElement, msg("description", playerId), 16, "0.15 0.82", "0.4 0.87", TextAnchor.MiddleLeft);
            UI.Label(ref container, UIElement, msg("command", playerId), 16, "0.52 0.82", "0.65 0.87", TextAnchor.MiddleLeft);
            UI.Label(ref container, UIElement, msg("description", playerId), 16, "0.65 0.82", "0.9 0.87", TextAnchor.MiddleLeft);
                       
            List<CommandEntry> commands = subType == CommSub.Chat ? configData.ChatCommands : configData.ConsoleCommands;

            if (page > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", playerId), 16, "0.015 0.875", "0.145 0.915", $"amui.switchelement commands {subType.ToString()} {page - 1}");
            if (commands.Count > 32 && commands.Count > (32 * page + 32))
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", playerId), 16, "0.855 0.875", "0.985 0.915", $"amui.switchelement commands {subType.ToString()} {page + 1}");

            int count = 1;
            for (int i = page * 32; i < commands.Count; i++)
            {
                CommandEntry entry = commands[i];
                bool isDivisable =  IsDivisable(i);
                
                UI.Label(ref container, UIElement, entry.Name, 15, $"{(isDivisable ? 0.02f : 0.52f)} {0.82f - (0.05f * count)}", $"{(isDivisable ? 0.15f : 0.65f)} {0.87f - (0.05f * count)}", TextAnchor.MiddleLeft);
                UI.Label(ref container, UIElement, entry.Description, 15, $"{(isDivisable ? 0.15f : 0.65f)} {0.82f - (0.05f * count)}", $"{(isDivisable ? 0.4f : 0.9f)} {0.87f - (0.05f * count)}", TextAnchor.MiddleLeft);
                UI.Button(ref container, UIElement, uiColors["button1"], msg("use", playerId), 15, $"{(isDivisable ? 0.41f : 0.91f)} {(0.82f - (0.05f * count)) + 0.005f}", $"{(isDivisable ? 0.49f : 0.99f)} {(0.87f - (0.05f * count)) - 0.005f}", $"amui.runcommand {subType} {i}");

                if (!isDivisable)
                    ++count;
                if (count > 16)
                    return;
            }
        }

        private void CreateGiveMenu(ref CuiElementContainer container, ItemType itemType, int page, string playerId)
        {
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.005", "0.995 0.055");
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.815", "0.995 0.865");
            int i = 0;
            foreach(var typeName in Enum.GetNames(typeof(ItemType)))
            {
                UI.Button(ref container, UIElement, itemType.ToString() == typeName ? uiColors["button3"] : uiColors["button1"], msg(typeName.ToString(), playerId), 12, $"{0.015f + ((0.97f / 12) * i) + 0.0025f} 0.82", $"{0.015f + ((0.97f / 12) * (i + 1)) - 0.0025f} 0.86", itemType.ToString() == typeName ? "" : $"amui.switchelement give {typeName} 0");
                i++;
            }

            //63

            int itemIndex = 60 * page;
            int length = itemList[itemType].Count;
            i = 6;

            List<KeyValuePair<string, ItemDefinition>> items = itemList[itemType].OrderBy(x => x.Value.displayName.english).ToList();
            for (int y = itemIndex; y < length; y++)
            {
                if (y - itemIndex >= 60)
                    break;

                KeyValuePair<string, ItemDefinition> item = items.ElementAt(y);
                float[] position = CalculateItemPos(i);
                UI.Label(ref container, UIElement, item.Key, 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                UI.Button(ref container, UIElement, uiColors["button3"], "1", 10, $"{position[2]} {position[1]}", $"{position[2] + (0.158f * 0.24f)} {position[3]}", $"amui.giveitem {item.Value.displayName.english.Replace(" ", "<><>")} {item.Value.shortname} 1");
                UI.Button(ref container, UIElement, uiColors["button3"], "10", 10, $"{position[2] + (0.158f * 0.26f)} {position[1]}", $"{position[2] + (0.158f * 0.49f)} {position[3]}", $"amui.giveitem {item.Value.displayName.english.Replace(" ", "<><>")} {item.Value.shortname} 10");
                UI.Button(ref container, UIElement, uiColors["button3"], "100", 10, $"{position[2] + (0.158f * 0.51f)} {position[1]}", $"{position[2] + (0.158f * 0.74f)} {position[3]}", $"amui.giveitem {item.Value.displayName.english.Replace(" ", "<><>")} {item.Value.shortname} 100");
                UI.Button(ref container, UIElement, uiColors["button3"], "1000", 10, $"{position[2] + (0.158f * 0.76f)} {position[1]}", $"{position[2] + 0.158f} {position[3]}", $"amui.giveitem {item.Value.displayName.english.Replace(" ", "<><>")} {item.Value.shortname} 1000");
                i += 2;               
            }

            if (itemIndex > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", playerId), 10, "0.05 0.01", "0.15 0.05", $"amui.switchelement give {itemType.ToString()} {page - 1}");
            if (itemIndex + 60 < itemList[itemType].Count)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", playerId), 10, "0.85 0.01", "0.95 0.05", $"amui.switchelement give {itemType.ToString()} {page + 1}");
        }

        private void OpenSelectionMenu(BasePlayer player, SelectType selectType, object objList, bool sortList = false)
        {
            SelectionData data = selectData[player.userID];            

            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");            
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.925", "0.995 0.99");
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.87", "0.995 0.92");
            CreateCharacterFilter(ref container, player.userID, data.character, string.Empty);
            UI.Label(ref container, UIElement, data.selectDesc, 24, "0.02 0.93", "0.8 0.985", TextAnchor.MiddleLeft);
            UI.Button(ref container, UIElement, uiColors["button1"], msg("return", player.UserIDString), 16, "0.855 0.93", "0.985 0.985", $"amui.switchelement {(data.menuType == MenuType.Commands ? "commands" : data.menuType == MenuType.Groups ? "groups" : "permissions")} {data.subType}");

            List<IPlayer> playerList = null;
            List<string> stringList = null;

            switch (selectType)
            {
                case SelectType.Player:

                    playerList = (List<IPlayer>)objList;                    

                    if (!string.IsNullOrEmpty(data.character))
                        playerList = playerList.Where(x => x.Name.ToLower().StartsWith(data.character.ToLower())).ToList();

                    if (sortList)
                        playerList = playerList.OrderBy(x => x.Name).ToList();

                    if (!data.forceOnline)
                    {
                        UI.Button(ref container, UIElement, data.isOnline ? uiColors["button3"] : uiColors["button1"], msg("onlineplayers", player.UserIDString), 16, "0.3475 0.875", "0.4975 0.915", data.isOnline ? "" : $"amui.makeselection online");
                        UI.Button(ref container, UIElement, !data.isOnline ? uiColors["button3"] : uiColors["button1"], msg("offlineplayers", player.UserIDString), 16, "0.5025 0.875", "0.6525 0.915", !data.isOnline ? "" : $"amui.makeselection offline");
                    }
                    break;
                
                case SelectType.String:
                    stringList = (List<string>)objList;                   

                    if (!string.IsNullOrEmpty(data.character))
                        stringList = stringList.Where(x => x.StartsWith(data.character)).ToList();

                    if (sortList)
                        stringList.Sort();
                    break;                
            }  
           
            if (data.pageNum > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", player.UserIDString), 16, "0.015 0.875", "0.145 0.915", "amui.makeselection pageDown");
            if (selectType == SelectType.Player ? (playerList.Count > 72 && playerList.Count > (72 * data.pageNum + 72)) : stringList.Count > 72 && stringList.Count > (72 * data.pageNum + 72))
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", player.UserIDString), 16, "0.855 0.875", "0.985 0.915", "amui.makeselection pageUp");

            int count = 0;
            for (int i = data.pageNum * 72; i < (selectType == SelectType.Player ? playerList.Count : stringList.Count); i++)
            {
                float[] position = CalculateButtonPos(count);

                if (selectType == SelectType.Player)
                {
                    IPlayer target = playerList[i];
                    string userName = StripTags(target.Name);
                    UI.Button(ref container, UIElement, uiColors["button1"], $"{userName} <size=8>({target.Id})</size>", 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}", $"amui.makeselection target {target.Id} {userName.Replace(" ", "_-!!-_")}");
                }
                else
                {
                    string button = stringList[i];
                    UI.Button(ref container, UIElement, uiColors["button1"], button, 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}", $"amui.makeselection target {button.Replace(" ", "_-!!-_")}");
                }
                ++count;
                if (count >= 72)
                    break;
            }

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }

        private void OpenPermissionMenu(BasePlayer player, string groupOrUserId, string playerName, string description, int page, string filter)
        {
            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");

            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.925", "0.995 0.99");
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.87", "0.995 0.92");

            UI.Label(ref container, UIElement, description, 24, "0.02 0.93", "0.8 0.985", TextAnchor.MiddleLeft);

            UI.Button(ref container, UIElement, uiColors["button1"], msg("return", player.UserIDString), 16, "0.855 0.93", "0.985 0.985", $"amui.switchelement permissions view");

            CreateCharacterFilter(ref container, player.userID, filter, string.IsNullOrEmpty(playerName) ? $"amui.switchelement permissions group 0 {groupOrUserId.Replace(" ", "_-!!-_")}" : $"amui.switchelement permissions player 0 {groupOrUserId} {playerName.Replace(" ", "_-!!-_")}");

            List<KeyValuePair<string, bool>> permList = new List<KeyValuePair<string, bool>>(permissionList);
            if (!string.IsNullOrEmpty(filter) && filter != "~")
                permList = permList.Where(x => x.Key.StartsWith(filter, StringComparison.OrdinalIgnoreCase)).ToList();
            permList.OrderBy(x => x.Key);

            if (page > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", player.UserIDString), 16, "0.015 0.875", "0.145 0.915", string.IsNullOrEmpty(playerName) ? $"amui.switchelement permissions group {page - 1} {groupOrUserId.Replace(" ", "_-!!-_")} {filter}" : $"amui.switchelement permissions player {page - 1} {groupOrUserId} {playerName.Replace(" ", "_-!!-_")} {filter}");
            if (permList.Count > 72 && permList.Count > (72 * page + 72))
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", player.UserIDString), 16, "0.855 0.875", "0.985 0.915", string.IsNullOrEmpty(playerName) ? $"amui.switchelement permissions group {page + 1} {groupOrUserId.Replace(" ", "_-!!-_")} {filter}" : $"amui.switchelement permissions player {page + 1} {groupOrUserId} {playerName.Replace(" ", "_-!!-_")} {filter}");            

            int count = 0;
            for (int i = page * 72; i < permList.Count; i++)
            {
                KeyValuePair<string, bool> perm = permList[i];
                float[] position = CalculateButtonPosVert(count);
              
                if (!perm.Value)
                {
                    UI.Panel(ref container, UIElement, uiColors["button2"], $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");
                    UI.Label(ref container, UIElement, $"{perm.Key}", 12, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}");                    
                }
                else
                {
                    bool hasPermission = HasPermission(groupOrUserId, perm.Key, string.IsNullOrEmpty(playerName) ? true : false);

                    UI.Button(ref container, UIElement, hasPermission ? uiColors["button3"] : uiColors["button1"], perm.Key, 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}", string.IsNullOrEmpty(playerName) ? $"amui.togglepermission group {groupOrUserId.Replace(" ", "_-!!-_")} {page} {perm.Key} {!hasPermission} {filter}" : $"amui.togglepermission player {groupOrUserId} {playerName.Replace(" ", "_-!!-_")} {page} {perm.Key} {!hasPermission} {filter}");
                }               
                ++count;

                if (count >= 72)
                    break;
            }

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }

        private void OpenGroupMenu(BasePlayer player, string userId, string userName, string description, int page)
        {
            var container = UI.Container(UIElement, "0 0 0 0", "0.05 0.08", "0.95 0.92");

            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.925", "0.995 0.99");
            UI.Panel(ref container, UIElement, uiColors["bg3"], "0.005 0.87", "0.995 0.92");

            UI.Label(ref container, UIElement, description, 24, "0.02 0.93", "0.8 0.985", TextAnchor.MiddleLeft);

            UI.Button(ref container, UIElement, uiColors["button1"], msg("return", player.UserIDString), 16, "0.855 0.93", "0.985 0.985", $"amui.switchelement groups view");
            List<string> groupList = GetGroups();
            groupList.Sort();

            if (page > 0)
                UI.Button(ref container, UIElement, uiColors["button1"], msg("back", player.UserIDString), 16, "0.015 0.875", "0.145 0.915", $"amui.switchelement groups usergroups {page - 1} {userId} {userName.Replace(" ", "_-!!-_")}");
            if (groupList.Count > 72 && groupList.Count > (72 * page + 72))
                UI.Button(ref container, UIElement, uiColors["button1"], msg("next", player.UserIDString), 16, "0.855 0.875", "0.985 0.915", $"amui.switchelement groups usergroups {page + 1} {userId} {userName.Replace(" ", "_-!!-_")}");

            int count = 0;
            for (int i = page * 72; i < groupList.Count; i++)
            {
                string groupId = groupList[i];
                float[] position = CalculateButtonPos(count);

                bool hasPermission = HasGroup(userId, groupId);

                UI.Button(ref container, UIElement, hasPermission ? uiColors["button3"] : uiColors["button1"], groupId, 10, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}", $"amui.togglegroup {userId} {userName.Replace(" ", "_-!!-_")} {page} {groupId.Replace(" ", "_-!!-_")} {!hasPermission}");
                ++count;

                if (count >= 72)
                    break;
            }

            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region UI Functions
        private void CreateCharacterFilter(ref CuiElementContainer container, ulong playerId, string currentCharacter, string returnCommand)
        {
            float buttonHeight = 1f / 27f;
            int i = 0;
            foreach(var character in charFilter)
            {
                UI.Button(ref container, UIElement, currentCharacter == character ? uiColors["button3"] : uiColors["button1"], character, 10, $"-0.02 {1 - (buttonHeight * i) - buttonHeight + 0.002f}", $"-0.001 {1 - (buttonHeight * i) - 0.002f}", currentCharacter == character ? "" : $"{(string.IsNullOrEmpty(returnCommand) ? "amui.filterchar" : returnCommand)} {character}");
                i++;
            }
        }

        private float[] CalculateButtonPos(int number)
        {
            Vector2 position = new Vector2(0.014f, 0.78f);
            Vector2 dimensions = new Vector2(0.158f, 0.06f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number < 6)
            {
                offsetX = (0.005f + dimensions.x) * number;
            }
            if (number > 5 && number < 12)
            {
                offsetX = (0.005f + dimensions.x) * (number - 6);
                offsetY = (-0.007f - dimensions.y) * 1;
            }
            if (number > 11 && number < 18)
            {
                offsetX = (0.005f + dimensions.x) * (number - 12);
                offsetY = (-0.007f - dimensions.y) * 2;
            }
            if (number > 17 && number < 24)
            {
                offsetX = (0.005f + dimensions.x) * (number - 18);
                offsetY = (-0.007f - dimensions.y) * 3;
            }
            if (number > 23 && number < 30)
            {
                offsetX = (0.005f + dimensions.x) * (number - 24);
                offsetY = (-0.007f - dimensions.y) * 4;
            }
            if (number > 29 && number < 36)
            {
                offsetX = (0.005f + dimensions.x) * (number - 30);
                offsetY = (-0.007f - dimensions.y) * 5;
            }
            if (number > 35 && number < 42)
            {
                offsetX = (0.005f + dimensions.x) * (number - 36);
                offsetY = (-0.007f - dimensions.y) * 6;
            }
            if (number > 41 && number < 48)
            {
                offsetX = (0.005f + dimensions.x) * (number - 42);
                offsetY = (-0.007f - dimensions.y) * 7;
            }
            if (number > 47 && number < 54)
            {
                offsetX = (0.005f + dimensions.x) * (number - 48);
                offsetY = (-0.007f - dimensions.y) * 8;
            }
            if (number > 53 && number < 60)
            {
                offsetX = (0.005f + dimensions.x) * (number - 54);
                offsetY = (-0.007f - dimensions.y) * 9;
            }
            if (number > 59 && number < 66)
            {
                offsetX = (0.005f + dimensions.x) * (number - 60);
                offsetY = (-0.007f - dimensions.y) * 10;
            }
            if (number > 65 && number < 72)
            {
                offsetX = (0.005f + dimensions.x) * (number - 66);
                offsetY = (-0.007f - dimensions.y) * 11;
            }
            if (number > 71 && number < 78)
            {
                offsetX = (0.005f + dimensions.x) * (number - 72);
                offsetY = (-0.007f - dimensions.y) * 12;
            }

            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }

        private float[] CalculateButtonPosVert(int number)
        {
            Vector2 position = new Vector2(0.014f, 0.78f);
            Vector2 dimensions = new Vector2(0.158f, 0.06f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number < 12)
            {
                offsetY = (-0.007f - dimensions.y) * number;
            }
            if (number > 11 && number < 24)
            {
                offsetX = (0.005f + dimensions.x) * 1;
                offsetY = (-0.007f - dimensions.y) * (number - 12);
            }
            if (number > 23 && number < 36)
            {
                offsetX = (0.005f + dimensions.x) * 2;
                offsetY = (-0.007f - dimensions.y) * (number - 24);
            }
            if (number > 35 && number < 48)
            {
                offsetX = (0.005f + dimensions.x) * 3;
                offsetY = (-0.007f - dimensions.y) * (number - 36);
            }
            if (number > 47 && number < 60)
            {
                offsetX = (0.005f + dimensions.x) * 4;
                offsetY = (-0.007f - dimensions.y) * (number - 48);
            }
            if (number > 59 && number < 72)
            {
                offsetX = (0.005f + dimensions.x) * 5;
                offsetY = (-0.007f - dimensions.y) * (number - 60);
            }
            
            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }

        private float[] CalculateItemPos(int number)
        {
            Vector2 position = new Vector2(0.014f, 0.81f);
            Vector2 dimensions = new Vector2(0.158f, 0.03f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number < 6)
            {
                offsetX = (0.005f + dimensions.x) * number;
            }
            if (number > 5 && number < 12)
            {
                offsetX = (0.005f + dimensions.x) * (number - 6);
                offsetY = (-0.007f - dimensions.y) * 1;
            }
            if (number > 11 && number < 18)
            {
                offsetX = (0.005f + dimensions.x) * (number - 12);
                offsetY = (-0.007f - dimensions.y) * 2;
            }
            if (number > 17 && number < 24)
            {
                offsetX = (0.005f + dimensions.x) * (number - 18);
                offsetY = (-0.007f - dimensions.y) * 3;
            }
            if (number > 23 && number < 30)
            {
                offsetX = (0.005f + dimensions.x) * (number - 24);
                offsetY = (-0.007f - dimensions.y) * 4;
            }
            if (number > 29 && number < 36)
            {
                offsetX = (0.005f + dimensions.x) * (number - 30);
                offsetY = (-0.007f - dimensions.y) * 5;
            }
            if (number > 35 && number < 42)
            {
                offsetX = (0.005f + dimensions.x) * (number - 36);
                offsetY = (-0.007f - dimensions.y) * 6;
            }
            if (number > 41 && number < 48)
            {
                offsetX = (0.005f + dimensions.x) * (number - 42);
                offsetY = (-0.007f - dimensions.y) * 7;
            }
            if (number > 47 && number < 54)
            {
                offsetX = (0.005f + dimensions.x) * (number - 48);
                offsetY = (-0.007f - dimensions.y) * 8;
            }
            if (number > 53 && number < 60)
            {
                offsetX = (0.005f + dimensions.x) * (number - 54);
                offsetY = (-0.007f - dimensions.y) * 9;
            }
            if (number > 59 && number < 66)
            {
                offsetX = (0.005f + dimensions.x) * (number - 60);
                offsetY = (-0.007f - dimensions.y) * 10;
            }
            if (number > 65 && number < 72)
            {
                offsetX = (0.005f + dimensions.x) * (number - 66);
                offsetY = (-0.007f - dimensions.y) * 11;
            }
            if (number > 71 && number < 78)
            {
                offsetX = (0.005f + dimensions.x) * (number - 72);
                offsetY = (-0.007f - dimensions.y) * 12;
            }
            if (number > 77 && number < 84)
            {
                offsetX = (0.005f + dimensions.x) * (number - 78);
                offsetY = (-0.007f - dimensions.y) * 13;
            }
            if (number > 83 && number < 90)
            {
                offsetX = (0.005f + dimensions.x) * (number - 84);
                offsetY = (-0.007f - dimensions.y) * 14;
            }
            if (number > 89 && number < 96)
            {
                offsetX = (0.005f + dimensions.x) * (number - 90);
                offsetY = (-0.007f - dimensions.y) * 15;
            }
            if (number > 95 && number < 102)
            {
                offsetX = (0.005f + dimensions.x) * (number - 96);
                offsetY = (-0.007f - dimensions.y) * 16;
            }
            if (number > 101 && number < 108)
            {
                offsetX = (0.005f + dimensions.x) * (number - 102);
                offsetY = (-0.007f - dimensions.y) * 17;
            }
            if (number > 107 && number < 114)
            {
                offsetX = (0.005f + dimensions.x) * (number - 108);
                offsetY = (-0.007f - dimensions.y) * 18;
            }
            if (number > 113 && number < 120)
            {
                offsetX = (0.005f + dimensions.x) * (number - 114);
                offsetY = (-0.007f - dimensions.y) * 19;
            }
            if (number > 119 && number < 126)
            {
                offsetX = (0.005f + dimensions.x) * (number - 120);
                offsetY = (-0.007f - dimensions.y) * 20;
            }
            if (number > 125 && number < 132)
            {
                offsetX = (0.005f + dimensions.x) * (number - 126);
                offsetY = (-0.007f - dimensions.y) * 21;
            }
            if (number > 131 && number < 138)
            {
                offsetX = (0.005f + dimensions.x) * (number - 132);
                offsetY = (-0.007f - dimensions.y) * 22;
            }
            if (number > 137 && number < 144)
            {
                offsetX = (0.005f + dimensions.x) * (number - 138);
                offsetY = (-0.007f - dimensions.y) * 23;
            }
            if (number > 143 && number < 150)
            {
                offsetX = (0.005f + dimensions.x) * (number - 144);
                offsetY = (-0.007f - dimensions.y) * 24;
            }
            if (number > 149 && number < 156)
            {
                offsetX = (0.005f + dimensions.x) * (number - 150);
                offsetY = (-0.007f - dimensions.y) * 25;
            }
            if (number > 155 && number < 162)
            {
                offsetX = (0.005f + dimensions.x) * (number - 156);
                offsetY = (-0.007f - dimensions.y) * 26;
            }

            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }

        private string StripTags(string str)
        {
            if (str.StartsWith("[") && str.Contains("]") && str.Length > str.IndexOf("]"))            
                str = str.Substring(str.IndexOf("]") + 1).Trim();
            
            if (str.StartsWith("[") && str.Contains("]") && str.Length > str.IndexOf("]"))
                StripTags(str);

            return str;
        }

        private void PopupMessage(BasePlayer player, string message)
        {
            var container = UI.Container(UIPopup, uiColors["bg2"], "0.05 0.92", "0.95 0.98");
            UI.Label(ref container, UIPopup, message, 17, "0 0", "1 1");

            Timer destroyIn;
            if (popupTimers.TryGetValue(player.userID, out destroyIn))
                destroyIn.Destroy();
            popupTimers[player.userID] = timer.Once(5, () =>
            {
                CuiHelper.DestroyUi(player, UIPopup);
                popupTimers.Remove(player.userID);
            });

            CuiHelper.DestroyUi(player, UIPopup);
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region UI Commands
        [ConsoleCommand("amui.runcommand")]
        private void ccmdUIRunCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            CommSub subType = ParseType<CommSub>(arg.Args[0]);
            int listNum = arg.GetInt(1);

            CommandEntry entry = (subType == CommSub.Chat ? configData.ChatCommands : configData.ConsoleCommands)[listNum];

            SelectionData data;
            if (!selectData.TryGetValue(player.userID, out data))
            {
                selectData.Add(player.userID, new SelectionData
                {
                    listNum = arg.GetInt(1),
                    menuType = MenuType.Commands,
                    pageNum = 0,
                    requireTarget1 = entry.Command.Contains("{target1_name}") || entry.Command.Contains("{target1_id}"),
                    requireTarget2 = entry.Command.Contains("{target2_name}") || entry.Command.Contains("{target2_id}"),
                    returnCommand = $"amui.runcommand",
                    selectDesc = string.Empty,
                    subType = arg.Args[0],
                    isOnline = true,
                });
                data = selectData[player.userID];
            }

            data.selectDesc = string.IsNullOrEmpty(data.target1_Id) ? msg("selectplayer", player.UserIDString) : msg("selecttarget", player.UserIDString);

            string command = string.Empty;

            if (data.requireTarget2)
            {
                if (!string.IsNullOrEmpty(data.target1_Id) && !string.IsNullOrEmpty(data.target1_Name) && !string.IsNullOrEmpty(data.target2_Id) && !string.IsNullOrEmpty(data.target2_Name))
                    command = entry.Command
                        .Replace("{target1_name}", $"\"{data.target1_Name}\"")
                        .Replace("{target1_id}", data.target1_Id)
                        .Replace("{target2_name}", $"\"{data.target2_Name}\"")
                        .Replace("{target2_id}", data.target2_Id);                
            }
            else if (data.requireTarget1)
            {
                if (!string.IsNullOrEmpty(data.target1_Id) && !string.IsNullOrEmpty(data.target1_Name))
                    command = entry.Command
                        .Replace("{target1_name}", $"\"{data.target1_Name}\"")
                        .Replace("{target1_id}", data.target1_Id);                
            }
            else command = entry.Command;

            if (!string.IsNullOrEmpty(command))
            {
                if (subType == CommSub.Console)
                    rust.RunServerCommand(command);
                else rust.RunClientCommand(player, "chat.say", command);

                PopupMessage(player, string.Format(msg("commandrun", player.UserIDString), command));

                selectData.Remove(player.userID);
                CreateMenuCommands(player, subType, 0);
            }
            else OpenSelectionMenu(player, SelectType.Player, data.isOnline ? covalence.Players.Connected.ToList() : storedData.GetOfflineList(), true);
        }

        [ConsoleCommand("amui.filterchar")]
        private void ccmdFilterChar(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            SelectionData data = selectData[player.userID];

            data.character = arg.GetString(0) == "~" ? string.Empty : arg.GetString(0);

            switch (data.returnCommand)
            {
                case "amui.runcommand":
                    rust.RunClientCommand(player, data.returnCommand, data.subType, data.listNum);
                    break;
                case "amui.selectforpermission":
                    rust.RunClientCommand(player, data.returnCommand, data.isGroup);
                    break;
                case "amui.selectremovegroup":
                    rust.RunClientCommand(player, data.returnCommand);
                    break;
                case "amui.selectforgroup":
                    rust.RunClientCommand(player, data.returnCommand);
                    break;
                default:
                    rust.RunClientCommand(player, data.returnCommand);
                    break;
            }
        }

        [ConsoleCommand("amui.registergroup")]
        private void ccmdRegisterGroup(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            GroupData groupData = groupCreator[player.userID];
            if (!groupCreator.TryGetValue(player.userID, out groupData))
            {
                groupCreator.Add(player.userID, new GroupData());
                groupData = groupCreator[player.userID];
            }

            switch (arg.Args[0])
            {
                case "input":
                    switch (arg.GetString(1))
                    {
                        case "name":
                            groupData.name = string.Join(" ", arg.Args.Skip(2).ToArray());
                            break;
                        case "title":
                            groupData.title = string.Join(" ", arg.Args.Skip(2).ToArray());
                            break;
                        case "rank":
                            groupData.rank = string.Join(" ", arg.Args.Skip(2).ToArray());
                            break;
                    }
                    CreateMenuGroups(player, GroupSub.AddGroup);
                    return;
                case "create":
                    if (string.IsNullOrEmpty(groupData.name))
                    {
                        PopupMessage(player, msg("nogroupname", player.UserIDString));
                        return;
                    }
                    int rank = 0;
                    int.TryParse(groupData.rank, out rank);

                    if (CreateGroup(groupData.name, groupData.title, rank))
                        PopupMessage(player, string.Format(msg("groupcreated", player.UserIDString), groupData.name));

                    CreateMenuGroups(player, GroupSub.View);
                    groupCreator.Remove(player.userID);
                    return;
                case "reset":
                    groupCreator[player.userID] = new GroupData();
                    CreateMenuGroups(player, GroupSub.AddGroup);
                    return;
            }
        }

        [ConsoleCommand("amui.selectforpermission")]
        private void ccmdSelectPermission(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            bool isGroup = arg.GetBool(0);

            SelectionData data;
            if (!selectData.TryGetValue(player.userID, out data))
            {
                selectData.Add(player.userID, new SelectionData
                {
                    listNum = arg.GetInt(1),
                    menuType = MenuType.Permissions,
                    pageNum = 0,
                    requireTarget1 = true,
                    returnCommand = "amui.selectforpermission",                    
                    isGroup = isGroup,
                    selectDesc = isGroup ? msg("selectgroup", player.UserIDString) : msg("selectplayer", player.UserIDString),
                    subType = "view",
                    isOnline = true,                    
                });
                data = selectData[player.userID];
            }
            if (data.isGroup)
            {
                if (!string.IsNullOrEmpty(data.target1_Id))
                {
                    OpenPermissionMenu(player, data.target1_Id, string.Empty, string.Format(msg("togglepermgroup", player.UserIDString), data.target1_Id), 0, "");
                    selectData.Remove(player.userID);
                    return;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(data.target1_Id) && !string.IsNullOrEmpty(data.target1_Name))
                {
                    OpenPermissionMenu(player, data.target1_Id, data.target1_Name, string.Format(msg("togglepermplayer", player.UserIDString), data.target1_Name), 0, "");
                    selectData.Remove(player.userID);
                    return;
                }
            }

            object obj;
            if (isGroup)
                obj = GetGroups();
            else obj = data.isOnline ? covalence.Players.Connected.ToList() : storedData.GetOfflineList();

            OpenSelectionMenu(player, isGroup ? SelectType.String : SelectType.Player, obj, true);
        }

        [ConsoleCommand("amui.selectforgroup")]
        private void ccmdSelectGroup(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;
                   
            SelectionData data;
            if (!selectData.TryGetValue(player.userID, out data))
            {
                selectData.Add(player.userID, new SelectionData
                {
                    listNum = arg.GetInt(1),
                    menuType = MenuType.Permissions,
                    pageNum = 0,
                    requireTarget1 = true,
                    returnCommand = "amui.selectforgroup",
                    selectDesc = msg("selectplayer", player.UserIDString),
                    subType = "view",
                    isOnline = true,
                });
                data = selectData[player.userID];
            }
            if (!string.IsNullOrEmpty(data.target1_Id) && !string.IsNullOrEmpty(data.target1_Name))
            {
                OpenGroupMenu(player, data.target1_Id, data.target1_Name, string.Format(msg("togglegroupplayer", player.UserIDString), data.target1_Name), 0);
                selectData.Remove(player.userID);
                return;
            }
            
            OpenSelectionMenu(player, SelectType.Player, data.isOnline ? covalence.Players.Connected.ToList() : storedData.GetOfflineList(), true);
        }

        [ConsoleCommand("amui.selectremovegroup")]
        private void ccmdSelectRemoveGroup(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;
                 
            SelectionData data;
            if (!selectData.TryGetValue(player.userID, out data))
            {
                selectData.Add(player.userID, new SelectionData
                {
                    listNum = arg.GetInt(1),
                    menuType = MenuType.Groups,
                    pageNum = 0,
                    requireTarget1 = true,
                    returnCommand = "amui.selectremovegroup",
                    selectDesc = msg("selectremovegroup", player.UserIDString),
                    subType = "view",
                    isOnline = true,
                });
                data = selectData[player.userID];
            }
            if (!string.IsNullOrEmpty(data.target1_Id))
            {
                RemoveGroup(data.target1_Id);
                PopupMessage(player, string.Format(msg("groupremoved", player.UserIDString), data.target1_Id));
                selectData.Remove(player.userID);
                CreateMenuGroups(player, GroupSub.View);
                return;
            }
           
            OpenSelectionMenu(player, SelectType.String, GetGroups(), true);
        }

        [ConsoleCommand("amui.togglepermission")]
        private void ccmdTogglePermission(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.permissions")) return;

            switch (arg.Args[0])
            {
                case "player":
                    {
                        string userId = arg.GetString(1);
                        string userName = arg.GetString(2).Replace("_-!!-_", " ");
                        if (arg.GetBool(5))
                            GrantPermission(userId, arg.GetString(4));
                        else RevokePermission(userId, arg.GetString(4));
                        OpenPermissionMenu(player, userId, userName, string.Format(msg("togglepermplayer", player.UserIDString), userName), arg.GetInt(3), arg.Args.Length > 6 ? arg.GetString(6) : "");
                    }
                    break;
                case "group":
                    string groupId = arg.GetString(1).Replace("_-!!-_", " ");
                    if (arg.GetBool(4))
                        GrantPermission(groupId, arg.GetString(3), true);
                    else RevokePermission(groupId, arg.GetString(3), true);
                    OpenPermissionMenu(player, groupId, string.Empty, string.Format(msg("togglepermgroup", player.UserIDString), groupId), arg.GetInt(2), arg.Args.Length > 5 ? arg.GetString(5) : "");
                    break;
                default:
                    break;
            }

        }

        [ConsoleCommand("amui.togglegroup")]
        private void ccmdToggleGroup(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.groups")) return;

            string userId = arg.GetString(0);
            string userName = arg.GetString(1).Replace("_-!!-_", " ");
            if (arg.GetBool(4))
                AddToGroup(userId, arg.GetString(3).Replace("_-!!-_", " "));
            else RemoveFromGroup(userId, arg.GetString(3).Replace("_-!!-_", " "));
            OpenGroupMenu(player, userId, userName, string.Format(msg("togglegroupplayer", player.UserIDString), userName), arg.GetInt(2));               
        }

        [ConsoleCommand("amui.makeselection")]
        private void ccmdMakeSelection(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            SelectionData data = selectData[player.userID];

            switch (arg.Args[0])
            {
                case "target":
                    if (string.IsNullOrEmpty(data.target1_Id))
                    {
                        data.target1_Id = arg.Args[1].Replace("_-!!-_", " ");                        
                        data.target1_Name = arg.Args.Length == 3 ? arg.Args[2].Replace("_-!!-_", " ") : string.Empty;
                    }
                    else
                    {
                        data.target2_Id = arg.Args[1].Replace("_-!!-_", " ");                        
                        data.target2_Name = arg.Args.Length == 3 ? arg.Args[2].Replace("_-!!-_", " ") : string.Empty;
                    }
                    break;
                case "pageUp":
                    ++data.pageNum;
                    break;
                case "pageDown":
                    --data.pageNum;
                    break;
                case "online":
                    data.isOnline = true;
                    break;
                case "offline":
                    data.isOnline = false;
                    break;                
            }

            if (data.returnCommand.StartsWith("amui.giveitem"))
                rust.RunClientCommand(player, $"{data.returnCommand} {data.target1_Id}");            
            else
            {
                switch (data.returnCommand)
                {
                    case "amui.runcommand":
                        rust.RunClientCommand(player, "amui.runcommand", data.subType, data.listNum);
                        break;
                    case "amui.selectforpermission":
                        rust.RunClientCommand(player, "amui.selectforpermission", data.isGroup);
                        break;
                    case "amui.selectremovegroup":
                        rust.RunClientCommand(player, "amui.selectremovegroup");
                        break;
                    case "amui.selectforgroup":
                        rust.RunClientCommand(player, "amui.selectforgroup");
                        break;
                    default:
                        break;
                }
            }
        }

        [ConsoleCommand("amui.switchelement")]
        private void ccmdUISwitch(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            if (selectData.ContainsKey(player.userID))
                selectData.Remove(player.userID);

            int page = 0;
            if (arg.Args.Length > 2)
                page = arg.GetInt(2);

            switch (arg.Args[0])
            {
                case "permissions":
                    PermSub permSub = PermSub.View;                    
                    if (arg.Args.Length > 1)
                        permSub = ParseType<PermSub>(arg.Args[1]);

                    switch (permSub)
                    {
                        case PermSub.View:
                            CreateMenuPermissions(player, page, arg.Args.Length > 3 ? arg.GetString(3) : "");
                            return;
                        case PermSub.Player:
                            if (arg.Args.Length >= 5)
                                OpenPermissionMenu(player, arg.GetString(3), arg.GetString(4).Replace("_-!!-_", " "), string.Format(msg("togglepermplayer", player.UserIDString), arg.GetString(4).Replace("_-!!-_", " ")), arg.GetInt(2), arg.Args.Length > 5 ? arg.GetString(5) : "");
                            else rust.RunClientCommand(player, "amui.selectforpermission", false);
                            return;
                        case PermSub.Group:
                            if (arg.Args.Length >= 4)
                                OpenPermissionMenu(player, arg.GetString(3).Replace("_-!!-_", " "), string.Empty, string.Format(msg("togglepermgroup", player.UserIDString), arg.GetString(3).Replace("_-!!-_", " ")), arg.GetInt(2), arg.Args.Length > 4 ? arg.GetString(4) : "");
                            else rust.RunClientCommand(player, "amui.selectforpermission", true);
                            return;                       
                    }
                    return;
                case "groups":
                    GroupSub groupSub = GroupSub.View;
                    if (arg.Args.Length > 1)
                        groupSub = ParseType<GroupSub>(arg.Args[1]);

                    switch (groupSub)
                    {
                        case GroupSub.View:
                            break;
                        case GroupSub.UserGroups:
                            if (arg.Args.Length == 5)
                                OpenGroupMenu(player, arg.GetString(3), arg.GetString(4).Replace("_-!!-_", " "), string.Format(msg("togglegroupplayer", player.UserIDString), arg.GetString(4).Replace("_-!!-_", " ")), arg.GetInt(2));
                            else rust.RunClientCommand(player, "amui.selectforgroup");
                            return;
                        case GroupSub.AddGroup:
                            break;
                        case GroupSub.RemoveGroup:
                            rust.RunClientCommand(player, "amui.selectremovegroup");
                            return;                        
                    }
                    CreateMenuGroups(player, groupSub, page);
                    return;
                case "commands":
                    CommSub commSub = CommSub.Chat;
                    if (arg.Args.Length > 1)
                        commSub = ParseType<CommSub>(arg.Args[1]);

                    CreateMenuCommands(player, commSub, page);
                    return;
                case "give":
                    ItemType itemType = ItemType.Weapon;
                    if (arg.Args.Length > 1)
                        itemType = ParseType<ItemType>(arg.Args[1]);

                    CreateMenuCommands(player, CommSub.Give, page, itemType);
                    return;          
                case "exit":
                    DestroyUI(player);
                    return;              
            }
        }

        [ConsoleCommand("amui.giveitem")]
        private void ccmdGiveItem(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;

            string itemName = arg.GetString(0);
            string itemShortName = arg.GetString(1);
            int amount = arg.GetInt(2);

            if (arg.Args.Length <= 3)
            {
                SelectionData data;
                if (!selectData.TryGetValue(player.userID, out data))
                {
                    selectData.Add(player.userID, new SelectionData
                    {
                        listNum = arg.GetInt(1),
                        menuType = MenuType.Commands,
                        pageNum = 0,
                        requireTarget1 = true,
                        returnCommand = $"amui.giveitem {itemName} {itemShortName} {amount}",
                        isGroup = false,
                        selectDesc = string.Format(msg("giveitem", player.UserIDString), amount, itemName.Replace("<><>", " ")),
                        subType = "give",
                        isOnline = true,
                        forceOnline = true
                    });
                    data = selectData[player.userID];
                }

                OpenSelectionMenu(player, SelectType.Player, covalence.Players.Connected.ToList(), true);
            }
            else
            {
                string targetId = arg.GetString(3);

                BasePlayer targetPlayer = BasePlayer.FindByID(ulong.Parse(targetId));
                if (targetPlayer != null && targetPlayer.IsConnected)
                {
                    Item item = ItemManager.CreateByName(itemShortName, amount, 0);
                    targetPlayer.GiveItem(item, BaseEntity.GiveItemReason.PickedUp);
                    PopupMessage(player, string.Format(msg("gaveitem", player.UserIDString), amount, itemName.Replace("<><>", " "), targetPlayer.displayName));
                }
                else PopupMessage(player, msg("noplayer", player.UserIDString));

                selectData.Remove(player.userID);
                CreateMenuCommands(player, CommSub.Give);
            }
        }

        #endregion

        #region Helpers
        private void SetUIColors()
        {            
            uiColors.Add("bg1", UI.Color(configData.Colors.Panel1.Color, configData.Colors.Panel1.Alpha));
            uiColors.Add("bg2", UI.Color(configData.Colors.Panel2.Color, configData.Colors.Panel2.Alpha));
            uiColors.Add("bg3", UI.Color(configData.Colors.Panel3.Color, configData.Colors.Panel3.Alpha));
            uiColors.Add("button1", UI.Color(configData.Colors.Button1.Color, configData.Colors.Button1.Alpha));
            uiColors.Add("button2", UI.Color(configData.Colors.Button2.Color, configData.Colors.Button2.Alpha));
            uiColors.Add("button3", UI.Color(configData.Colors.Button3.Color, configData.Colors.Button3.Alpha));
        }        

        private List<string> GetGroups() => permission.GetGroups().ToList();

        private bool CreateGroup(string name, string title, int rank) => permission.CreateGroup(name, title, rank);  
        
        private void RemoveGroup(string name) => permission.RemoveGroup(name);

        private void AddToGroup(string userId, string groupId) => permission.AddUserGroup(userId, groupId);

        private void RemoveFromGroup(string userId, string groupId) => permission.RemoveUserGroup(userId, groupId);

        private bool HasGroup(string userId, string groupId) => permission.UserHasGroup(userId, groupId);

        private List<string> GetPermissions()
        {
            List<string> permissions = permission.GetPermissions().ToList();
            permissions.RemoveAll(x => x.ToLower().StartsWith("oxide."));
            return permissions;
        }

        private void GrantPermission(string groupOrID, string perm, bool isGroup = false)
        {
            if (isGroup)
                permission.GrantGroupPermission(groupOrID, perm, null);
            else permission.GrantUserPermission(groupOrID, perm, null);
        }

        private void RevokePermission(string groupOrID, string perm, bool isGroup = false)
        {
            if (isGroup)
                permission.RevokeGroupPermission(groupOrID, perm);
            else permission.RevokeUserPermission(groupOrID, perm);
        }

        private bool HasPermission(string groupOrID, string perm, bool isGroup = false)
        {
            if (isGroup)
                return permission.GroupHasPermission(groupOrID, perm);
            return permission.UserHasPermission(groupOrID, perm);
        }        

        private void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIElement);
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.DestroyUi(player, UIPopup);
        }
        private T ParseType<T>(string type) => (T)Enum.Parse(typeof(T), type, true);

        private bool IsDivisable(int number) => number % 2 == 0;

        private void UpdatePermissionList()
        {
            permissionList.Clear();
            List<string> permissions = GetPermissions();
            permissions.Sort();

            string lastName = string.Empty;
            foreach(string perm in permissions)
            {
                string name = string.Empty;
                if (perm.Contains("."))
                {
                    string permStart = perm.Substring(0, perm.IndexOf("."));
                    name = plugins.PluginManager.GetPlugins().ToList().Find(x => x?.Name?.ToLower() == permStart)?.Title ?? permStart;
                }
                else name = perm;
                if (lastName != name)
                {
                    permissionList.Add(new KeyValuePair<string, bool>(name, false));
                    lastName = name;
                }

                permissionList.Add(new KeyValuePair<string, bool>(perm, true));
            }

        }
        #endregion

        #region Commands
        [ChatCommand("admin")]
        private void cmdAdmin(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player.UserIDString, "adminmenu.use")) return;
            OpenAdminMenu(player);
        }        
        #endregion

        #region Config        
        private ConfigData configData;
        private class Colors
        {          
            [JsonProperty(PropertyName = "Panel - Dark")]
            public UIColor Panel1 { get; set; }
            [JsonProperty(PropertyName = "Panel - Medium")]
            public UIColor Panel2 { get; set; }
            [JsonProperty(PropertyName = "Panel - Light")]
            public UIColor Panel3 { get; set; }
            [JsonProperty(PropertyName = "Button - Primary")]
            public UIColor Button1 { get; set; }
            [JsonProperty(PropertyName = "Button - Secondary")]
            public UIColor Button2 { get; set; }
            [JsonProperty(PropertyName = "Button - Selected")]
            public UIColor Button3 { get; set; }
                        
            public class UIColor
            {
                public string Color { get; set; }
                public float Alpha { get; set; }
            }
        }

        private class CommandEntry
        {
            public string Name { get; set; }
            public string Command { get; set; }
            public string Description { get; set; }
        }

        private class ConfigData
        {
            public Colors Colors { get; set; }
            [JsonProperty(PropertyName = "Chat Command List")]
            public List<CommandEntry> ChatCommands { get; set; }
            [JsonProperty(PropertyName = "Console Command List")]
            public List<CommandEntry> ConsoleCommands { get; set; }
        }

        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                Colors = new Colors
                {
                    Panel1 = new Colors.UIColor { Color = "#2a2a2a", Alpha = 0.98f },
                    Panel2 = new Colors.UIColor { Color = "#373737", Alpha = 0.98f },
                    Panel3 = new Colors.UIColor { Color = "#696969", Alpha = 0.3f },
                    Button1 = new Colors.UIColor { Color = "#2a2a2a", Alpha = 0.9f },
                    Button2 = new Colors.UIColor { Color = "#a8a8a8", Alpha = 0.9f },
                    Button3 = new Colors.UIColor { Color = "#00cd00", Alpha = 0.9f }
                },
                ChatCommands = new List<CommandEntry>
                {
                    new CommandEntry
                    {
                        Name = "TP to 0 0 0",
                        Command = "/tp 0 0 0",
                        Description = "Teleport self to 0 0 0"
                    },
                    new CommandEntry
                    {
                        Name = "TP to player",
                        Command = "/tp {target1_name}",
                        Description = "Teleport self to player"
                    },
                    new CommandEntry
                    {
                        Name = "TP P2P",
                        Command = "/tp {target1_name} {target2_name}",
                        Description = "Teleport player to player"
                    },
                    new CommandEntry
                    {
                        Name = "God",
                        Command = "/god",
                        Description = "Toggle god mode"
                    } 
                },
                ConsoleCommands = new List<CommandEntry>
                {
                    new CommandEntry
                    {
                        Name = "Set time to 9",
                        Command = "env.time 9",
                        Description = "Set the time to 9am"
                    },
                    new CommandEntry
                    {
                        Name = "Set to to 22",
                        Command = "env.time 22",
                        Description = "Set the time to 10pm"
                    },
                    new CommandEntry
                    {
                        Name = "TP P2P",
                        Command = "teleport.topos {target1_name} {target2_name}",
                        Description = "Teleport player to player"
                    },
                    new CommandEntry
                    {
                        Name = "Call random strike",
                        Command = "airstrike strike random",
                        Description = "Call a random Airstrike"
                    }
                }
            };
            SaveConfig(config);
        }

        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();

        private void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region Data Management
        private void SaveData() => data.WriteObject(storedData);

        private void LoadData()
        {
            try
            {
                storedData = data.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        private class StoredData
        {
            public Hash<string, double> offlinePlayers = new Hash<string, double>();

            public void AddOfflinePlayer(string userId) => offlinePlayers[userId] = CurrentTime();

            public void OnPlayerInit(string userId)
            {
                if (offlinePlayers.ContainsKey(userId))
                    offlinePlayers.Remove(userId);                
            }

            public void RemoveOldPlayers()
            {
                double currentTime = CurrentTime();

                for (int i = offlinePlayers.Count - 1; i >= 0; i--)
                {
                    var user = offlinePlayers.ElementAt(i);
                    if (currentTime - user.Value > 604800)
                        offlinePlayers.Remove(user);
                }
            }

            public List<IPlayer> GetOfflineList() => ins.covalence.Players.All.Where(x => offlinePlayers.ContainsKey(x.Id)).ToList();

            public double CurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;            
        }
        #endregion

        #region Localization
        private string msg(string key, string playerId = null) => lang.GetMessage(key, this, playerId);

        Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            ["title"] = "<color=#ce422b>Admin Menu  v{0}</color>",
            ["exit"] = "Exit",
            ["view"] = "View",
            ["player"] = "Player Permissions",
            ["group"] = "Group Permissions",
            ["usergroups"] = "User Groups",
            ["addgroup"] = "Create Group",
            ["removegroup"] = "Remove Group",
            ["chat"] = "Chat Commands",
            ["console"] = "Console Commands",
            ["command"] = "Command",
            ["description"] = "Description",
            ["use"] = "Use",
            ["back"] = "Back",
            ["next"] = "Next",
            ["return"] = "Return",
            ["selectplayer"] = "Select a player",
            ["togglepermplayer"] = "Toggle permissions for player : {0}",
            ["togglepermgroup"] = "Toggle permissions for group : {0}",
            ["togglegroupplayer"] = "Toggle groups for player : {0}",
            ["giveitem"] = "Select a player to give : {0} x {1}",
            ["selectgroup"] = "Select a group",
            ["selectremovegroup"] = "Select a group to remove. <color=#ce422b>WARNING! This can not be undone</color>",
            ["selecttarget"] = "Select a target",
            ["onlineplayers"] = "Online Players",
            ["offlineplayers"] = "Offline Players",
            ["inputhelper"] = "To create a new group type a group name, title, and rank. Press Enter after completing each field. Once you are ready hit the 'Create' button",
            ["create"] = "Create",
            ["groupname"] = "Name:",
            ["grouptitle"] = "Title (optional):",
            ["grouprank"] = "Rank (optional):",
            ["reset"] = "Reset",
            ["nogroupname"] = "You must set a group name",
            ["groupcreated"] = "You have successfully created the group: {0}",
            ["commandrun"] = "You have run the command : {0}",
            ["groupremoved"] = "You have removed the group : {0}",
            ["uiwarning"] = "** Note ** Close any other UI plugins you have running that automatically refresh (LustyMap or InfoPanel for example). Having these open will cause your input boxes to continually refresh!",
            ["give"] = "Give Items",
            ["Weapon"] = "Weapon",
            ["Construction"] = "Construction",
            ["Items"] = "Items",
            ["Resources"] = "Resources",
            ["Attire"] = "Attire",
            ["Tool"] = "Tool",
            ["Medical"] = "Medical",
            ["Food"] = "Food",
            ["Ammunition"] = "Ammunition",
            ["Traps"] = "Traps",
            ["Misc"] = "Misc",
            ["Component"] = "Component",
            ["noplayer"] = "Unable to find the specified player",
            ["gaveitem"] = "You gave {0}x {1} to {2}"
        };
        #endregion
    }
}


// --- End of file: AdminMenu (1).cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RATHealer.cs ---
// --- Original Local Path: RATHealer.cs ---


using System.Collections.Generic;
using System.Reflection;
using System;
using System.Data;
using UnityEngine;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("RATHealer", "@lonestarcanuck", 0.1, ResourceId = 1963)]
    [Description("The Rust Admin Tool (RAT) provides ingame and console heal features")]
    public class RATHealer : RustPlugin
    {
		public BasePlayer cachedPlayer;
		
        // Code goes here...
		void Init()
		{	
			Puts("Init of RAT Healer works!");
		}
		void Unload()
		{
			Puts("Unload of RAT Healer works!");
		}
		
		private object GetPlayer(string tofind)
        {
            List<BasePlayer> onlineplayers = BasePlayer.activePlayerList as List<BasePlayer>;
			
            object targetplayer = null;
			
            foreach (BasePlayer player in onlineplayers.ToArray())
            {

                if (player.displayName.ToString() == tofind)
                    return player;
            }
			
			return null;
        }
		
		[ConsoleCommand("RATHealer.heal")]
        private void HealCommand(ConsoleSystem.Arg arg)
        {
            
			Puts(string.Format("Attempting to heal Player: {0}...",arg.Args[0]));
						
			if ((arg.Args == null) || (arg.Args != null && arg.Args.Length == 0))
            {
                Puts("RATHealer.heal \"player\" \"heal amount\"");
				Puts("Example: RATHealer.heal Quicken 1000");
                return;
            }
			
			object target = false;
			
            target = GetPlayer(arg.Args[0]);
			
			if (target == null) 
			{
               Puts("Couldn't find player: " + arg.Args [0].ToString ());
               return;
			}
			
        	//Heal, feed, cure the player...
			var targetPlayer = target as BasePlayer;
			
			targetPlayer.metabolism.hydration.value = 1000;
            targetPlayer.metabolism.calories.value = 1000;
            targetPlayer.InitializeHealth(100, 100);
			targetPlayer.metabolism.poison.value = 0;
			// targetPlayer.metabolism.radiation.value = 0;
			targetPlayer.metabolism.oxygen.value = 1;
			targetPlayer.metabolism.bleeding.value = 0;
			targetPlayer.metabolism.wetness.value = 0;
			// targetPlayer.metabolism.dirtyness.value = 0;

			Puts(targetPlayer.displayName + " was healed, hydrated, fed, etc.");

			Puts("Done.");
        }

		[ConsoleCommand("RATHealer.all")]
        private void HealAllCommand(ConsoleSystem.Arg arg)
        {
        	Puts("Attempting to heal all Players...");
			
			List<BasePlayer> onlineplayers = BasePlayer.activePlayerList as List<BasePlayer>;
			
            foreach (BasePlayer player in onlineplayers.ToArray())
            {
				Puts(string.Format("Healing Player: {0}...", player.displayName.ToString()));
				player.metabolism.hydration.value = 1000;
				player.metabolism.calories.value = 1000;
				player.InitializeHealth(100, 100);
				player.metabolism.bleeding.value = 0;
            }
			
			Puts("Done.");
        }
		
		[ConsoleCommand("RATHealer.list")]
        private void ListCommand(ConsoleSystem.Arg arg)
        {
        	Puts("Listing All Players...");
			
			List<BasePlayer> onlineplayers = BasePlayer.activePlayerList as List<BasePlayer>;
			
            foreach (BasePlayer player in onlineplayers.ToArray())
            {
				Puts(string.Format("Player: {0}", player.displayName.ToString()));
            }
			
			Puts("Done.");
        }
    }
}

// --- End of file: RATHealer.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PlaceAnything.cs ---
// --- Original Local Path: PlaceAnything.cs ---

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using VLB;

namespace Oxide.Plugins
{
    [Info("PlaceAnything", "David", "1.0.5")]
    [Description("Place any entity you want.")]

    public class PlaceAnything : RustPlugin
    {   
        [PluginReference]
        private Plugin CopyPaste, EntityScaleManager;

        static PlaceAnything plugin;

        private void Init() => plugin = this; 

        #region [Hooks]

        private void OnServerInitialized()
        {
            LoadData();
            AddCompToAll();
        }

        private void Unload()
        {
            KillAllComps();
        }

        private void OnHammerHit(BasePlayer player, HitInfo info)
        {   
            var ent = info.HitEntity.GetComponentInParent<BaseEntity>();
            if (ent == null) return;
            if (ent.Health() != ent.MaxHealth()) return;
            if (ent.OwnerID == player.userID)
            {   
                string itemName = null;
                foreach (string item in placeable.Keys)
                {
                    if (placeable[item].Prefab == ent.PrefabName)
                    {
                        itemName = item;
                        break;
                    }      
                }
                if (itemName == null) return;
                
                if (!placeable[itemName].CanBePickedUp) 
                { SendReply(player, "This item cannot be picked up."); return; }

                if (placeable[itemName].NeedsTCAuth && !player.IsBuildingAuthed())
                { SendReply(player, "You need building authorization to pick up this item."); return; }
            
        
                var run = player.GetComponent<Mono>(); 
                if (run == null) player.gameObject.GetOrAddComponent<Mono>();
                if (run != null) run.RunPickUp(player, ent, itemName);  
                
            }
        }

        void OnEntityBuilt(Planner plan, GameObject go)
        {
            
            var player = plan.GetOwnerPlayer();
            Item item = player.GetActiveItem();
            if (item.name != null) 
            {
                if (placeable.ContainsKey(item.name))
                {
                    BaseEntity initEnt = go.GetComponent<BaseEntity>();
                    
                    var pos = initEnt.transform.position;
                    var rot = initEnt.transform.rotation;
                    NextTick(() =>{
                    
                        initEnt.Kill();

                        if (placeable[item.name].NeedsTCAuth)
                        {
                            if (!player.IsBuildingAuthed())
                            {
                                RefundItem(player, item.name);
                                SendReply(player, "You need building authorization to place this item.\n<size=10>Item was put back into your inventory.</size>");
                                return;
                            }                                    
                        }  

                        if (placeable[item.name].Prefab.Contains("copypaste"))
                        {   
                            string[] split = placeable[item.name].Prefab.Split('/');
                            var options = new List<string>{ "auth", "true" };
                            CopyPaste.Call("TryPasteFromVector3", pos, 0f, $"{split[1]}", options.ToArray());
                            return;
                        }
                        
                        BaseEntity entity = GameManager.server.CreateEntity(placeable[item.name].Prefab, new Vector3(pos.x, pos.y + placeable[item.name].AdjustHeight, pos.z), new Quaternion(rot.x, rot.y, rot.z, rot.w));
                        entity.OwnerID = player.userID;
                        entity._name = item.name;
                        entity.Spawn();
                        
                        if (EntityScaleManager != null && config.main.resize.ContainsKey(item.name))
                           EntityScaleManager.CallHook("API_ScaleEntity", entity, config.main.resize[item.name]);
                           
                    });

                }
            }
        }

        #endregion

        #region [Functions / Methods]

        [ChatCommand("gimme")]
        private void gimme(BasePlayer player)
        {
            if (player == null) return;
            if (!player.IsAdmin) return;
            
            foreach (string itemName in placeable.Keys)
            {
                var item = ItemManager.CreateByName(placeable[itemName].BaseItem, 10);
                item.name = itemName;
                item.skin = placeable[itemName].SkinID;
                item.MarkDirty();
                player.GiveItem(item);
            }
        }

        private void RefundItem(BasePlayer player, string itemName)
        {   
            if (!placeable.ContainsKey(itemName)) return;
            var item = ItemManager.CreateByName($"{placeable[itemName].BaseItem}", 1);
            item.name = itemName;
            item.skin = placeable[itemName].SkinID;
            item.MarkDirty();
            player.GiveItem(item);
        }

        #endregion

        #region [MonoBehavior]

        private void AddCompToAll()
        {
            foreach (var _player in BasePlayer.activePlayerList)
                _player.gameObject.GetOrAddComponent<Mono>();      
        }

        private void KillAllComps()
        {
            foreach (var _player in BasePlayer.activePlayerList)
            {
               var run = _player.GetComponent<Mono>(); 
               UnityEngine.Object.Destroy(run);
            }   
        }

        private class Mono : MonoBehaviour
		{
			BasePlayer player;
            float progress;
            BaseEntity entity;
            string item;
			
			void Awake() => player = GetComponent<BasePlayer>();
            
            void BarProg()
            {   
                if (progress >= 1)
                {   
                    if (IsInvoking(nameof(BarProg)) == true) 
                        CancelInvoke(nameof(BarProg));

                    plugin.DestroyBar(player);
                    progress = 0.0f;
                    entity.Kill();
                    plugin.RefundItem(player, item);
                    return;
                }
               
                if (player.serverInput.IsDown(BUTTON.FIRE_PRIMARY) == true)
                {
                    progress += 0.01f;
                    plugin.CreateProgressBar(player, progress);
                }
                else
                {   
                    progress = 0.0f;
                    if (IsInvoking(nameof(BarProg)) == true) 
                        CancelInvoke(nameof(BarProg));

                    plugin.DestroyBar(player);
                    return;
                }
                
            }
            
            public void RunPickUp(BasePlayer player, BaseEntity _entity, string itemName)
			{   
                if (player == null) return;

                entity = _entity;
                item = itemName;

                if (plugin.config.main.pickup && plugin.config.main.pickup != null)
                {
                    entity.Kill();
                    plugin.RefundItem(player, itemName);
                    return;
                }
               
                plugin.CreatePickUpBar(player);
               
                if (IsInvoking(nameof(BarProg)) == true) 
                {
                    CancelInvoke(nameof(BarProg));
                }
                InvokeRepeating(nameof(BarProg), 0.02f, 0.02f); 
			}

        }

        #endregion

        #region [UI]

        private void CreatePickUpBar(BasePlayer player)
        {   
            var progBar = CUIClass.CreateOverlay("empty", "0 0 0 0", "0 0", "0 0", false, 0.0f, "assets/icons/iconmaterial.mat"); //assets/content/ui/uibackgroundblur.mat
            //offset
            CUIClass.CreatePanel(ref progBar, "progbar_main", "Hud", "1 1 1 0.5", "0.5 0.5", "0.5 0.5", false, 0.0f, 0.0f, "assets/icons/iconmaterial.mat", "-85 -30", "85 -25");
            
            //CUIClass.CreatePanel(ref progBar, "progbar_progress", "progbar_main", "1 1 1 1", "0.0 0", $"{progress} 1", true, 0.0f, 0f, "assets/icons/iconmaterial.mat"); 
            CUIClass.PullFromAssets(ref progBar, "progbar_icon", "progbar_main", "1 1 1 1", "assets/icons/pickup.png", 0.0f, 0f, "0.005 1.4", "0.1 4");
            CUIClass.CreateText(ref progBar, "progbar_text", "progbar_main", "1 1 1 1", $"PICKING UP", 10, "0.1 1.01", "1 3.5", TextAnchor.UpperLeft, $"robotocondensed-bold.ttf", 0.0f);  
          
            DestroyBar(player); 
            CuiHelper.AddUi(player, progBar); 
        }
        
        private void DestroyBar(BasePlayer player)
        {   
          CuiHelper.DestroyUi(player, "empty"); 
          CuiHelper.DestroyUi(player, "progbar_main");
        }

        private void CreateProgressBar(BasePlayer player, float progress)
        {   
            var progBar = CUIClass.CreateOverlay("empty", "0 0 0 0", "0 0", "0 0", false, 0.0f, "assets/icons/iconmaterial.mat"); //assets/content/ui/uibackgroundblur.mat
            
                CUIClass.CreatePanel(ref progBar, "progbar_progress", "progbar_main", "1 1 1 1", "0.0 0", $"{progress} 1", false, 0.0f, 0f, "assets/icons/iconmaterial.mat"); 
            
            CuiHelper.DestroyUi(player, "empty");
            CuiHelper.DestroyUi(player, "progbar_progress"); 
            CuiHelper.AddUi(player, progBar); 
            CuiHelper.DestroyUi(player, "empty"); 
        }

        #endregion

        #region [Data]
        
        private void SaveData()
        {
            if (placeable != null)
            Interface.Oxide.DataFileSystem.WriteObject($"{Name}/Entities", placeable);
        }
        
        private Dictionary<string, Placeable> placeable;
        
        private class Placeable
        {   
            public string BaseItem;
            public ulong SkinID;
            public string Prefab;
            public bool NeedsTCAuth;
            public bool CanBePickedUp;
            public float AdjustHeight;
        }
        
        private void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile($"{Name}/Entities"))
            {
                placeable = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<string, Placeable>>($"{Name}/Entities");
            }
            else
            {
                placeable = new Dictionary<string, Placeable>();
        
                CreateExamples();
                SaveData();
            }
        }
        
        private void CreateExamples()
        {   
            string[] name = {
                "Gambling Wheel",
                "Gambling Terminal",
                "CH47",
                "PumpJack",
                "Water Pump (Ground)",
                "Recycler",
                "Slot Machine",
                "Palm Medium",
                "Palm Short",
                "Mormon Tea Bush",
                "Cactus High",
                "Cactus Small",
                "Pine Tree",
                "Birch Tree Small"

            };

            string[] prefabs = {
                "assets/prefabs/misc/casino/bigwheel/big_wheel.prefab",
                "assets/prefabs/misc/casino/bigwheel/bigwheelbettingterminal.prefab",
                "assets/prefabs/npc/ch47/ch47.entity.prefab",
                "assets/bundled/prefabs/static/pumpjack-static.prefab",
                "assets/prefabs/deployable/playerioents/waterpump/water.pump.deployed.prefab",
                "assets/bundled/prefabs/static/recycler_static.prefab",
                "assets/prefabs/misc/casino/slotmachine/slotmachine.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_arid_forest/palm_tree_med_a_entity.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_arid_forest/palm_tree_short_a_entity.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_bushes_arid_desert/mormon_tea_c.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_arid_cactus/cactus-1.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_arid_cactus/cactus-4.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_tundra_forestside/pine_d.prefab",
                "assets/bundled/prefabs/autospawn/resource/v3_temp_forestside/birch_small_temp.prefab"
            };

            string[] baseItem = {
                "spinner.wheel",
                "mailbox",
                "abovegroundpool",
                "abovegroundpool",
                "box.wooden",
                "box.wooden.large",
                "arcade.machine.chippy",
                "clone.hemp",
                "clone.hemp",
                "clone.hemp",
                "clone.hemp",
                "clone.hemp",
                "clone.hemp",
                "clone.hemp"

            };

            ulong[] skinId = {
                2682493718,
                2682493107,
                2682477500,
                2682458242,
                2682449233,
                2406283172,
                2682435313,
                2681722770,
                2681722770,
                2685219527,//bush
                2685221352,//cactus
                2685221352,//cactus
                2685224593,//tree
                2685224593

            };

            bool[] tc = {
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            };

            bool[] pick = {
                true,
                true,
                false,
                true,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            };
            
            for (var i = 0; i < 14; i++)
            {   
                float he = 0;
                if (name[i] == "Cactus High") he = -1.5f;
                placeable.Add(name[i], new Placeable());     
                placeable[name[i]].SkinID =  skinId[i];
                placeable[name[i]].BaseItem = baseItem[i];
                placeable[name[i]].Prefab = prefabs[i];
                placeable[name[i]].NeedsTCAuth = tc[i];
                placeable[name[i]].CanBePickedUp = pick[i];
                placeable[name[i]].AdjustHeight = he;
            }
        }

    
        #endregion

        #region [CUI Class]

        public class CUIClass
        {
            public static CuiElementContainer CreateOverlay(string _name, string _color, string _anchorMin, string _anchorMax, bool _cursorOn = false, float _fade = 0f, string _mat ="")
            {   
                var _element = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = { Color = _color, Material = _mat, FadeIn = _fade},
                            RectTransform = { AnchorMin = _anchorMin, AnchorMax = _anchorMax },
                            CursorEnabled = _cursorOn
                        },
                        new CuiElement().Parent = "Overlay",
                        _name
                    }
                };
                return _element;
            }

            public static void CreatePanel(ref CuiElementContainer _container, string _name, string _parent, string _color, string _anchorMin, string _anchorMax, bool _cursorOn = false, float _fadeIn = 0f, float _fadeOut = 0f, string _mat2 ="", string _OffsetMin = "", string _OffsetMax = "" )
            {
                _container.Add(new CuiPanel
                {
                    Image = { Color = _color, Material = _mat2, FadeIn = _fadeIn },
                    RectTransform = { AnchorMin = _anchorMin, AnchorMax = _anchorMax, OffsetMin = _OffsetMin, OffsetMax = _OffsetMax },
                    FadeOut = _fadeOut, CursorEnabled = _cursorOn
                },
                _parent,
                _name);
            }

            public static void CreateImage(ref CuiElementContainer _container, string _name, string _parent, string _image, string _anchorMin, string _anchorMax, float _fadeIn = 0f, float _fadeOut = 0f, string _OffsetMin = "", string _OffsetMax = "")
            {
                if (_image.StartsWith("http") || _image.StartsWith("www"))
                {
                    _container.Add(new CuiElement
                    {   
                        Name = _name,
                        Parent = _parent,
                        FadeOut = _fadeOut,
                        Components =
                        {
                            new CuiRawImageComponent { Url = _image, Sprite = "assets/content/textures/generic/fulltransparent.tga", FadeIn = _fadeIn},
                            new CuiRectTransformComponent { AnchorMin = _anchorMin, AnchorMax = _anchorMax, OffsetMin = _OffsetMin, OffsetMax = _OffsetMax }
                        }
                        
                    });
                }
                else
                {
                    _container.Add(new CuiElement
                    {
                        Parent = _parent,
                        Components =
                        {
                            new CuiRawImageComponent { Png = _image, Sprite = "assets/content/textures/generic/fulltransparent.tga", FadeIn = _fadeIn},
                            new CuiRectTransformComponent { AnchorMin = _anchorMin, AnchorMax = _anchorMax }
                        }
                    });
                }
            }

            public static void PullFromAssets(ref CuiElementContainer _container, string _name, string _parent, string _color, string _sprite, float _fadeIn = 0f, float _fadeOut = 0f, string _anchorMin = "0 0", string _anchorMax = "1 1", string _material = "assets/icons/iconmaterial.mat")
            { 
                //assets/content/textures/generic/fulltransparent.tga MAT
                _container.Add(new CuiElement
                {   
                    Parent = _parent,
                    Name = _name,
                    Components =
                            {
                                new CuiImageComponent { Material = _material, Sprite = _sprite, Color = _color, FadeIn = _fadeIn},
                                new CuiRectTransformComponent {AnchorMin = _anchorMin, AnchorMax = _anchorMax}
                            },
                    FadeOut = _fadeOut
                });
            }

            public static void CreateInput(ref CuiElementContainer _container, string _name, string _parent, string _color, int _size, string _anchorMin, string _anchorMax, string _font = "permanentmarker.ttf", string _command = "command.processinput", TextAnchor _align = TextAnchor.MiddleCenter)
            {
                _container.Add(new CuiElement
                {
                    Parent = _parent,
                    Name = _name,

                    Components =
                    {
                        new CuiInputFieldComponent
                        {

                            Text = "0",
                            CharsLimit = 250,
                            Color = _color,
                            IsPassword = false,
                            Command = _command,
                            Font = _font,
                            FontSize = _size,
                            Align = _align
                        },

                        new CuiRectTransformComponent
                        {
                            AnchorMin = _anchorMin,
                            AnchorMax = _anchorMax

                        }

                    },
                });
            }

            public static void CreateText(ref CuiElementContainer _container, string _name, string _parent, string _color, string _text, int _size, string _anchorMin, string _anchorMax, TextAnchor _align = TextAnchor.MiddleCenter, string _font = "robotocondensed-bold.ttf", float _fadeIn = 0f, float _fadeOut = 0f, string _outlineColor = "0 0 0 0", string _outlineScale ="0 0")
            {   
                _container.Add(new CuiElement
                {
                    Parent = _parent,
                    Name = _name,
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = _text,
                            FontSize = _size,
                            Font = _font,
                            Align = _align,
                            Color = _color,
                            FadeIn = _fadeIn,
                        },

                        new CuiOutlineComponent
                        {
                            
                            Color = _outlineColor,
                            Distance = _outlineScale
                            
                        },

                        new CuiRectTransformComponent
                        {
                             AnchorMin = _anchorMin,
                             AnchorMax = _anchorMax
                        }
                    },
                    FadeOut = _fadeOut
                });
            }

            public static void CreateButton(ref CuiElementContainer _container, string _name, string _parent, string _color, string _text, int _size, string _anchorMin, string _anchorMax, string _command = "", string _close = "", string _textColor = "0.843 0.816 0.78 1", float _fade = 1f, TextAnchor _align = TextAnchor.MiddleCenter, string _font = "", string _material = "assets/content/ui/uibackgroundblur-ingamemenu.mat")
            {       
               
                _container.Add(new CuiButton
                {
                    Button = { Close = _close, Command = _command, Color = _color, Material = _material, FadeIn = _fade},
                    RectTransform = { AnchorMin = _anchorMin, AnchorMax = _anchorMax },
                    Text = { Text = _text, FontSize = _size, Align = _align, Color = _textColor, Font = _font, FadeIn = _fade}
                },
                _parent,
                _name);
            }
        }
        #endregion

        #region [Config] 
        
        private Configuration config;
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<Configuration>();
            SaveConfig();
        }
        
        protected override void LoadDefaultConfig()
        {
            config = Configuration.CreateConfig();
        }
        
        protected override void SaveConfig() => Config.WriteObject(config);     
        
        class Configuration
        {   
            [JsonProperty(PropertyName = "Main Settings")]
            public  Main main { get; set; }
        
            public class Main
            {
                [JsonProperty("Resize Entities - ('item name':'scale 0 to 1') ")]
                public Dictionary<string, float> resize { get; set; }

                [JsonProperty("Pick up on first hit")]
                public bool pickup { get; set; }
            } 
        
            public static Configuration CreateConfig()
            {
                return new Configuration
                {   
                    main = new PlaceAnything.Configuration.Main
                    {   
                        resize = new Dictionary<string, float>
                        {
                            { "PumpJack", 0.5f },
                            { "Gambling Wheel", 0.5f },
                            
                        },
                        pickup = false
                    },
                };
            }
        }
        #endregion
    }
}


// --- End of file: PlaceAnything.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/StopDamageMan.cs ---
// --- Original Local Path: StopDamageMan.cs ---

﻿using ConVar;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("StopDamageMan", "Sempai#3239", "0.0.2")]
    class StopDamageMan : RustPlugin
    {
        #region Varibles
        public List<ulong> PlayerStopDamage = new List<ulong>();
        #endregion

        #region Hooks

        void OnServerInitialized()
        {
            LoadDefaultMessages();
            permission.RegisterPermission("stopdamageman.use", this);
            PlayerStopDamage = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<List<ulong>>("StopDamageMan/PlayerList");
        }

        void Unload()
        {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("StopDamageMan/PlayerList", PlayerStopDamage);
        }

        void OnServerSave()
        {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("StopDamageMan/PlayerList", PlayerStopDamage);
        }

        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
        {
            BasePlayer damager = hitInfo.InitiatorPlayer;
            if (entity == null || hitInfo == null || damager == null) return;
            if(PlayerStopDamage.Contains(damager.userID))
            {
                hitInfo.damageTypes.ScaleAll(0);
            }   
        }

        #endregion

        #region Commands

        [ChatCommand("sdm_add")]
        void AddPlayerNoDamageList(BasePlayer player, string command, string[] args)
        {
            if(!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, "stopdamageman.use")) return; 

            var targetPlayer = FindPlayerByPartialName(args[0]);
            if (targetPlayer == null)
            {

                SendChat(lang.GetMessage("NOT_FOUND", this), player);
                return;
            }

            if (!PlayerStopDamage.Contains(targetPlayer.userID))
            {
                PlayerStopDamage.Add(targetPlayer.userID);
                SendChat(String.Format(lang.GetMessage("PLAYER_ACCEPT", this), targetPlayer.displayName), player);
            }
            else { SendChat(String.Format(lang.GetMessage("PLAYER_NDM", this), targetPlayer.displayName), player); }
            
        }

        [ChatCommand("sdm_remove")]
        void RemovePlayerNoDamageList(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, "stopdamageman.use")) return;

            var targetPlayer = FindPlayerByPartialName(args[0]);
            if (targetPlayer == null)
            {
                SendChat(lang.GetMessage("NOT_FOUND", this), player);
                return;
            }

            if (PlayerStopDamage.Contains(targetPlayer.userID))
            {
                PlayerStopDamage.Remove(targetPlayer.userID);
                SendChat(String.Format(lang.GetMessage("PLAYER_DICLINE", this), targetPlayer.displayName), player);
            }
            else { SendChat(String.Format(lang.GetMessage("PLAYER_YDM", this), targetPlayer.displayName), player); }

        }

        #endregion

        #region HelpMetods

        private BasePlayer FindPlayerByPartialName(string name)
        {
            if (string.IsNullOrEmpty(name))
                return null;
            BasePlayer player = null;
            name = name.ToLower();
            foreach (var p in BasePlayer.activePlayerList)
            {
                if (p.net == null || p.net.connection == null)
                    continue;

                if (p.displayName == name)
                {
                    if (player != null)
                        return null;
                    player = p;
                }
            }

            if (player != null)
                return player;
            foreach (var p in BasePlayer.activePlayerList)
            {
                if (p.net == null || p.net.connection == null)
                    continue;

                if (p.displayName.ToLower().IndexOf(name) >= 0)
                {
                    if (player != null)
                        return null;
                    player = p;
                }
            }

            return player;
        }

        [PluginReference] Plugin IQChat;
        public void SendChat(string Message, BasePlayer player, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, "");
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }

        #endregion

        #region Lang
        private new void LoadDefaultMessages()
        {
            PrintWarning("Alert#3432 : Языковой файл загружается...");
            timer.In(2.5f, () => {
                Dictionary<string, string> Lang = new Dictionary<string, string>
                {
                    ["NOT_FOUND"] = "Введите конкретное значение или ник",
                    ["PLAYER_ACCEPT"] = "Игроку {0} успешно отключен урон",
                    ["PLAYER_DICLINE"] = "Игроку {0} успешно включен урон",
                    ["PLAYER_NDM"] = "У игрока {0} уже отключен урон",
                    ["PLAYER_YDM"] = "У игрока {0} уже включен урон",
                };
                lang.RegisterMessages(Lang, this, "en");
                PrintWarning("Языковой файл успешно загружен");
            });
        }
        #endregion
    }
}


// --- End of file: StopDamageMan.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ChatToConsole.cs ---
// --- Original Local Path: ChatToConsole.cs ---

using System;
using System.Collections.Generic;
using ConVar;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Chat To Console", "Purples", "1.1.1")] // Works with: BetterChat
    [Description("Copies the in-game chat to the console.")]

    internal class ChatToConsole : RustPlugin
    {
        #region Commands

        private void CmdToggle(IPlayer player, string command, string[] args)
        {
            if (player.IsServer)
            {
                player.Message(GetMsg("OnlyPlayer", player.Id));
                return;
            }

            if (!CanUse(player.Id))
            {
                player.Message(GetMsg("NoPermission", player.Id));
                return;
            }

            if (_listedUsers.Contains(player.Id))
            {
                _listedUsers.Remove(player.Id);
                SaveData();
                player.Message(GetMsg(_enabledByDefault ? "On" : "Off", player.Id));
                return;
            }

            player.Message(GetMsg(_enabledByDefault ? "Off" : "On", player.Id));
            _listedUsers.Add(player.Id);
            SaveData();
        }

        #endregion

        #region Chat Format

        private class ChatFormat
        {
            private readonly Chat.ChatChannel? _channel;
            private readonly string _formattedMessage;
            private readonly string _formattedPrefixes;
            private readonly string _formattedUsername;
            private readonly BasePlayer _sender;

            private ChatFormat(BasePlayer sender, string formattedUsername, string formattedPrefixes,
                string formattedMessage, Chat.ChatChannel? channel)
            {
                _sender = sender;
                _formattedUsername = formattedUsername;
                _formattedPrefixes = formattedPrefixes;
                _formattedMessage = formattedMessage;
                _channel = channel;
            }

            public string ChatLang => _channel.HasValue ? _channel.Value.ToString("F") : "Chat";

            private static string GetFormattedText(string text, string color = "#fff")
            {
                return Formatter.ToUnity($"<color={color}>{text}</color>");
            }

            public static ChatFormat FromRust(BasePlayer player, string message, Chat.ChatChannel channel)
            {
                var color = "#5af";
                if (player.IsAdmin) color = "#af5";
                if (player.IsDeveloper || DeveloperList.Contains(player.UserIDString)) color = "#fa5";
                var formattedName = GetFormattedText(player.displayName.EscapeRichText(), color);
                var formattedMessage = GetFormattedText(message ?? "⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠");

                return new ChatFormat(player, formattedName, "", formattedMessage, channel);
            }

            public static ChatFormat FromBetterChat(Dictionary<string, object> data)
            {
                var player = (IPlayer) data["Player"];
                var message = data["Message"] as string;
                var messageColor = ((Dictionary<string, object>) data["MessageSettings"])["Color"] as string;
                var usernameColor = ((Dictionary<string, object>) data["UsernameSettings"])["Color"] as string;
                var prefixes = string.Join(" ", (List<string>) data["Titles"]);
                var channel = (Chat.ChatChannel) data["ChatChannel"];

                var formattedName = GetFormattedText(player.Name.EscapeRichText(), usernameColor);
                var formattedPrefix = GetFormattedText(prefixes);
                var formattedMessage = GetFormattedText(message, messageColor);
                return new ChatFormat(player.Object as BasePlayer, formattedName, formattedPrefix, formattedMessage,
                    channel);
            }

            public static ChatFormat FromChatPlus(Dictionary<string, object> data)
            {
                var player = (IPlayer) data["Player"];
                var username = GetFormattedText(player.Name.EscapeRichText());
                var message = data["Message"] as string;
                var prefixes = data["Prefixes"] as string;
                return new ChatFormat(player.Object as BasePlayer, username, Formatter.ToUnity(prefixes),
                    Formatter.ToUnity(message), null);
            }

            public bool ShouldSee(ulong playerid = 3182592)
            {
                if (_channel != Chat.ChatChannel.Team)
                    return true;

                var team = _sender.Team;
                if (team == null || team.members.Count == 0)
                    return true;

                return team.members.Contains(playerid);
            }

            public string GetFormatted()
            {
                return _format.Replace("{Time}", DateTime.Now.ToShortTimeString())
                    .Replace("{Titles}", _formattedPrefixes)
                    .Replace("{Name}", _formattedUsername)
                    .Replace("{SteamID}", _sender.UserIDString)
                    .Replace("{Message}", _formattedMessage);
            }
        }

        #endregion

        #region Vars

        private string _permission = "ChatToConsole.See";
        private string _permissionAdmin = "ChatToConsole.Admin";
        private static string _command = "/ctc";
        private static string _format = "{Time}: [{ChatLang}] {Titles}{Name}({SteamID}): {Message}";
        private static string _pmFormat = "{Time}: [{PM}] {From}->{To}: {Message}";
        private static bool _enabledByDefault = true;
        [PluginReference] private Plugin ChatPlus, BetterChat;

        #endregion

        #region Data

        private List<string> _listedUsers;

        private void LoadData()
        {
            try
            {
                _listedUsers = Interface.Oxide.DataFileSystem.ReadObject<List<string>>(Title);
            }
            catch (Exception e)
            {
                PrintError($"Failed to load active admins data file (is the file corrupt?) ({e.Message})");
                _listedUsers = new List<string>();
            }
        }

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Title, _listedUsers);
        }

        #endregion

        #region Config and data initalization

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating new config file...");
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            var changed = GetConfig("Permission to use command and get the chat to console", ref _permission) |
                          GetConfig("Permission to see all team's chat and all PM", ref _permissionAdmin) |
                          GetConfig("Chat command to toggle printing chat to console", ref _command) |
                          GetConfig("Messages format", ref _format) |
                          GetConfig("Private messages format", ref _pmFormat) |
                          GetConfig("Chat to console enabled by default", ref _enabledByDefault);
            if (changed)
            {
                PrintWarning("Config file was updated");
                SaveConfig();
            }

            permission.RegisterPermission(_permission, this);
            permission.RegisterPermission(_permissionAdmin, this);
            LoadData();
        }

        private void Init()
        {
            AddCovalenceCommand(_command.Replace("/", string.Empty), "CmdToggle", _permission);
        }

        #endregion

        #region localization

        private string GetMsg(string key)
        {
            return lang.GetMessage(key, this);
        }

        private string GetMsg(string key, string playerId)
        {
            return lang.GetMessage(key, this, playerId);
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["OnlyPlayer"] = "This command can only be executed from the game client!",
                ["Off"] = "Chat would no longer be displayed in your console.",
                ["On"] = "You would receive all chat messages to your console.",
                ["NoPermission"] = "You don't have the permission to use this command.",
                ["Chat"] = "Chat",
                ["Global"] = "Global",
                ["Team"] = "Team",
                ["Server"] = "Server",
                ["WrongDict"] =
                    "{0} dictionary has wrong format. Please, contact the developer - https://vk.com/arsgo",
                ["PM"] = "PM"
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["OnlyPlayer"] = "Эту команду можно использовать только в игре!",
                ["Off"] = "Чат более не будет отображаться в вашей консоли.",
                ["On"] = "Все сообщения из чата теперь будут дублироваться в вашу консоль.",
                ["NoPermission"] = "Недостаточно прав на выполнение команды.",
                ["Chat"] = "Чат",
                ["Global"] = "Общий",
                ["Team"] = "Команда",
                ["Server"] = "Сервер",
                ["WrongDict"] =
                    "Плагин {0} передал неверный словарь. Пожалуйста, свяжитесь с разработчиком - https://vk.com/arsgo",
                ["PM"] = "ЛС"
            }, this, "ru");
        }

        #endregion

        #region Hooks

        private void OnPlayerChat(BasePlayer sender, string message, Chat.ChatChannel channel)
        {
            if (BetterChat || ChatPlus)
                return;
            if (sender == null)
                return;
            SendChatToConsole(ChatFormat.FromRust(sender, message, channel));
        }

        private void OnBetterChat(Dictionary<string, object> data)
        {
            try
            {
                SendChatToConsole(ChatFormat.FromBetterChat(data));
            }
            catch (Exception)
            {
                PrintError(GetMsg("WrongDict"), "BetterChat");
            }
        }

        private void OnChatPlusMessage(Dictionary<string, object> data)
        {
            try
            {
                SendChatToConsole(ChatFormat.FromChatPlus(data));
            }
            catch (Exception)
            {
                PrintError(GetMsg("WrongDict"), "ChatPlus");
            }
        }

        [HookMethod("OnPMProcessed")]
        private void OnPrivateMessage(IPlayer sender, IPlayer receiver, string message)
        {
            var formatted = _pmFormat.Replace("{Time}", DateTime.Now.ToShortTimeString())
                .Replace("{From}", sender.Name)
                .Replace("{To}", receiver.Name)
                .Replace("{Message}", message);
            SendPmToConsole(formatted, sender.Id, receiver.Id);
        }

        #endregion

        #region Helpers

        private void SendChatToConsole(ChatFormat message)
        {
            var formatted = message.GetFormatted();
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (!CheckEnabled(player.UserIDString))
                    continue;
                if (!CanAdmin(player.UserIDString) && !message.ShouldSee(player.userID))
                    continue;
                var msg = formatted.Replace("{ChatLang}", GetMsg(message.ChatLang, player.UserIDString));
                player.ConsoleMessage(msg);
            }
        }

        private void SendPmToConsole(string message, params string[] participants)
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (!CheckEnabled(player.UserIDString))
                    continue;
                if (!CanAdmin(player.UserIDString) && !participants.Contains(player.UserIDString))
                    continue;
                var msg = message.Replace("{PM}", GetMsg("PM", player.UserIDString));
                player.ConsoleMessage(msg);
            }
        }

        private bool CheckEnabled(string id)
        {
            if (!CanUse(id))
                return false;

            var contains = _listedUsers.Contains(id);
            return _enabledByDefault ? !contains : contains;
        }

        private bool CanUse(string id)
        {
            return permission.UserHasPermission(id, _permission) || CanAdmin(id);
        }

        private bool CanAdmin(string id)
        {
            return permission.UserHasPermission(id, _permissionAdmin);
        }

        private bool GetConfig<T>(string key, ref T var)
        {
            if (Config[key] != null)
            {
                var = (T) Convert.ChangeType(Config[key], typeof(T));
                return false;
            }

            Config[key] = var;
            return true;
        }

        #endregion
    }
}


// --- End of file: ChatToConsole.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DamageModifier.cs ---
// --- Original Local Path: DamageModifier.cs ---

using System.Collections.Generic;
using System;

using Rust;

namespace Oxide.Plugins
{
     [Info("DamageModifier", "ColonBlow", "1.2.1")]
     internal class DamageModifier : RustPlugin
     {
         private const int DamageTypeMax = (int) DamageType.LAST;
         private readonly float[] _modifiers = new float[DamageTypeMax];
         private bool _didConfigChange;

         private void Loaded() => LoadConfigValues();
         protected override void LoadDefaultConfig() => Puts("New configuration file created.");

         private void LoadConfigValues()
         {
             foreach (DamageType val in Enum.GetValues(typeof(DamageType)))
             {
                 if (val == DamageType.LAST) continue;
                 _modifiers[(int) val] = Convert.ToSingle(GetConfigValue("Global_Mutipliers", val.ToString(), 1.0));
             }

             if (!_didConfigChange) return;
             Puts("Configuration file updated.");
             SaveConfig();
         }

         private object GetConfigValue(string category, string setting, object defaultValue)
         {
             var data = Config[category] as Dictionary<string, object>;
             object value;
             if (data == null)
             {
                 data = new Dictionary<string, object>();
                 Config[category] = data;
                 _didConfigChange = true;
             }

             if (data.TryGetValue(setting, out value)) return value;
             value = defaultValue;
             data[setting] = value;
             _didConfigChange = true;
             return value;
         }

         private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
         {
             if (entity == null || hitInfo == null) return;
             for (var i = 0; i < DamageTypeMax; i++)
             {
                 hitInfo.damageTypes.Scale((DamageType) i, _modifiers[i]);
             }
         }
     }
}

// --- End of file: DamageModifier.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Quests.cs ---
// --- Original Local Path: Quests.cs ---

 using System;
using System.Collections.Generic;
using System.Globalization;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using UnityEngine;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("Quests", "k1lly0u modet GRAZYCAT Fixed Kaprith Games on YT", "2.2.8", ResourceId = 1084)]
      
    [Description("Creates quests for players to go on to earn rewards, complete with a GUI menu")]
    public class Quests : RustPlugin
    {
        #region Fields
        [PluginReference] Plugin HumanNPC;
        [PluginReference] Plugin RustShop;
        [PluginReference] Plugin Economics;
        [PluginReference] Plugin LustyMap;
        [PluginReference] Plugin EventManager;
        [PluginReference] Plugin HuntRPG;
        [PluginReference] Plugin PlayerChallenges;
        [PluginReference] Plugin BetterChat;
		[PluginReference] Plugin KarmaSystem;

        ConfigData configData;

        QuestData questData;
        PlayerData playerData;
        NPCData vendors;
        ItemNames itemNames;
        private DynamicConfigFile Quest_Data;
        private DynamicConfigFile Player_Data;
        private DynamicConfigFile Quest_Vendors;
        private DynamicConfigFile Item_Names;

        private Dictionary<ulong, PlayerQuestData> PlayerProgress;
        private Dictionary<QuestType, Dictionary<string, QuestEntry>> Quest;

        private Dictionary<string, ItemDefinition> ItemDefs;
        private Dictionary<string, string> DisplayNames = new Dictionary<string, string>();

        private Dictionary<ulong, QuestCreator> ActiveCreations = new Dictionary<ulong, QuestCreator>();
        private Dictionary<ulong, QuestCreator> ActiveEditors = new Dictionary<ulong, QuestCreator>();

        private Dictionary<ulong, bool> AddVendor = new Dictionary<ulong, bool>();

        private Dictionary<QuestType, List<string>> AllObjectives = new Dictionary<QuestType, List<string>>();
        private Dictionary<uint, Dictionary<ulong, int>> HeliAttackers = new Dictionary<uint, Dictionary<ulong, int>>();

        private Dictionary<ulong, List<string>> OpenUI = new Dictionary<ulong, List<string>>();
        private Dictionary<uint, ulong> Looters = new Dictionary<uint, ulong>();

        private List<ulong> StatsMenu = new List<ulong>();
        private List<ulong> OpenMenuBind = new List<ulong>();

        static string UIMain = "UIMain";
        static string UIPanel = "UIPanel";
        static string UIEntry = "UIEntry";

        private string textPrimary;
        private string textSecondary;

        #endregion

        #region Classes
        class PlayerQuestData
        {
            public Dictionary<string, PlayerQuestInfo> Quests = new Dictionary<string, PlayerQuestInfo>();
      
            public List<QuestInfo> RequiredItems = new List<QuestInfo>();
      
            public ActiveDelivery CurrentDelivery = new ActiveDelivery();
        }
        class PlayerQuestInfo
      
        {
            public QuestStatus Status;
            public QuestType Type;
            public int AmountCollected = 0;
            public bool RewardClaimed = false;
            public double ResetTime = 0;
        }
        class QuestEntry
        {
            public string QuestName;
            public string Description;
            public string Objective;
            public string ObjectiveName;
            public int AmountRequired;
            public int Cooldown;
            public bool ItemDeduction;
            public List<RewardItem> Rewards;
        }
        class NPCInfo
      
        {
            public float x;
            public float z;
            public string ID;
            public string Name;
        }
        class DeliveryInfo
      
        {
            public string Description;
            public NPCInfo Info;
      
            public RewardItem Reward;
            public float Multiplier;
        }
        class ActiveDelivery
        {
            public string VendorID;
            public string TargetID;
            public float Distance;
        }
        class QuestInfo
      
        {
            public string ShortName;
            public QuestType Type;
        }
        class RewardItem
        {
            public bool isRP = false;
			public bool isKR = false;
            public bool isCoins = false;
            public bool isHuntXP = false;
            public string DisplayName;
            public string ShortName;
            public int ID;
            public float Amount;
            public bool BP;
            public ulong Skin;
        }
        class QuestCreator
        {
            public QuestType type;
            public QuestEntry entry;
            public DeliveryInfo deliveryInfo;
      
            public RewardItem item;
            public string oldEntry;
            public int partNum;
        }
        class ItemNames
        {
            public Dictionary<string, string> DisplayNames = new Dictionary<string, string>();
        }

        enum QuestType
        {
            Kill,
            Craft,
            Gather,
            Loot,
            Delivery
        }
        enum QuestStatus
        {
            Pending,
            Completed,
            Open
        }
        #endregion

        #region UI Creation
        class QUI
        {
            public static bool disableFade;
            static public CuiElementContainer CreateElementContainer(string panelName, string color, string aMin, string aMax, bool cursor = false)
            {
                var NewElement = new CuiElementContainer()
            {
                {
                    new CuiPanel
                    {
                        Image = {Color = color},
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                        CursorEnabled = cursor
                    },
                    new CuiElement().Parent = "Overlay",
                    panelName
                }
            };
                return NewElement;
            }
            static public void CreatePanel(ref CuiElementContainer container, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel);
            }
            static public void CreateLabel(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (disableFade)
                    fadein = 0;
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = fadein, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);

            }
            static public void CreateButton(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (disableFade)
                    fadein = 0;
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = fadein },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }
            static public void LoadImage(ref CuiElementContainer container, string panel, string png, string aMin, string aMax)
            {
                container.Add(new CuiElement
                {
                    Parent = panel,
                    Components =
                    {
                        new CuiRawImageComponent {Png = png },
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax }
                    }
                });
            }
            static public void CreateTextOverlay(ref CuiElementContainer container, string panel, string text, string color, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (disableFade)
                    fadein = 0;
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = fadein, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);

            }
            static public string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                    hexColor = hexColor.TrimStart('#');
                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double)red / 255} {(double)green / 255} {(double)blue / 255} {alpha}";
            }
        }
        #endregion

        #region Oxide Hooks
        void Loaded()
        {
            Quest_Data = Interface.Oxide.DataFileSystem.GetFile("Quests/quests_data");
            Player_Data = Interface.Oxide.DataFileSystem.GetFile("Quests/quests_players");
            Quest_Vendors = Interface.Oxide.DataFileSystem.GetFile("Quests/quests_vendors");
            Item_Names = Interface.Oxide.DataFileSystem.GetFile("Quests/quests_itemnames");
            lang.RegisterMessages(Localization, this);
        }
        void OnServerInitialized()
        {
            LoadVariables();
            LoadData();

            QUI.disableFade = configData.DisableUI_FadeIn;
            textPrimary = $"<color={configData.Colors.TextColor_Primary}>";
            textSecondary = $"<color={configData.Colors.TextColor_Secondary}>";

            ItemDefs = ItemManager.itemList.ToDictionary(i => i.shortname);
            FillObjectiveList();
            AddMapIcons();
            timer.Once(900, () => SaveLoop());
        }
        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
                DestroyUI(player);
            SavePlayerData();
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (configData.KeybindOptions.Autoset_KeyBind)
            {
                if (!string.IsNullOrEmpty(configData.KeybindOptions.KeyBind_Key))
                {
                    player.Command("bind " + configData.KeybindOptions.KeyBind_Key + " QUI_OpenQuestMenu");
                }
            }
        }
        #region Objective Hooks
        //Kill
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
      
        {
            try
            {
                if (entity == null || info == null) return;
                BasePlayer player = null;

                if (info.InitiatorPlayer != null)
                    player = info.InitiatorPlayer;
                else if (entity.GetComponent<BaseHelicopter>() != null)
                    player = BasePlayer.FindByID(GetLastAttacker(entity.net.ID));

                if (player != null)
                {
                    if (entity.ToPlayer() != null && entity.ToPlayer() == player) return;
                    if (isPlaying(player)) return;
                    if (hasQuests(player.userID) && isQuestItem(player.userID, entity?.ShortPrefabName, QuestType.Kill))
                        ProcessProgress(player, QuestType.Kill, entity?.ShortPrefabName);
                }
            }
            catch (Exception ex)
            {
            }
        }
        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
      
        {
            if (victim.GetComponent<BaseHelicopter>() != null && info?.Initiator?.ToPlayer() != null)
            {
                var heli = victim.GetComponent<BaseHelicopter>();
                var player = info.Initiator.ToPlayer();
                if (isPlaying(player)) return;
                NextTick(() =>
                {
                    if (heli == null) return;
                    if (!HeliAttackers.ContainsKey(heli.net.ID))
                        HeliAttackers.Add(heli.net.ID, new Dictionary<ulong, int>());
                    if (!HeliAttackers[heli.net.ID].ContainsKey(player.userID))
                        HeliAttackers[heli.net.ID].Add(player.userID, 0);
                    HeliAttackers[heli.net.ID][player.userID]++;
                });
            }
        }
        // Gather
        void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player = entity?.ToPlayer();
            if (player != null)
                if (hasQuests(player.userID) && isQuestItem(player.userID, item.info.shortname, QuestType.Gather))
                    ProcessProgress(player, QuestType.Gather, item.info.shortname, item.amount);
        }
        void OnGrowableGather(GrowableEntity plant, BasePlayer player, Item item)
        {
            if (player != null)
                if (hasQuests(player.userID) && isQuestItem(player.userID, item.info.shortname, QuestType.Gather))
                    ProcessProgress(player, QuestType.Gather, item.info.shortname, item.amount);
        }
        void OnCollectiblePickup(Item item, BasePlayer player, CollectibleEntity entity)
		{
           if (player != null)
                if (hasQuests(player.userID) && isQuestItem(player.userID, item.info.shortname, QuestType.Gather))
                    ProcessProgress(player, QuestType.Gather, item.info.shortname, item.amount);
        
		}
        //Craft
        void OnItemCraftFinished(ItemCraftTask task, Item item)
        {
            var player = task.owner;
            if (player != null)
                if (hasQuests(player.userID) && isQuestItem(player.userID, item.info.shortname, QuestType.Craft))
                    ProcessProgress(player, QuestType.Craft, item.info.shortname, item.amount);
        }
        //Loot
        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            if (Looters.ContainsKey(item.uid))
            {
                if (container.playerOwner != null)
                {
                    if (Looters[item.uid] != container.playerOwner.userID)
                    {
                        if (hasQuests(container.playerOwner.userID) && isQuestItem(container.playerOwner.userID, item.info.shortname, QuestType.Loot))
                        {
                            ProcessProgress(container.playerOwner, QuestType.Loot, item.info.shortname, item.amount);
                            Looters.Remove(item.uid);
                        }
                    }
                }
            }
            else if (container.playerOwner != null) Looters.Add(item.uid, container.playerOwner.userID);
        }
        void OnItemRemovedFromContainer(ItemContainer container, Item item)
        {
            ulong id = 0U;
            if (container.entityOwner != null)
                id = container.entityOwner.OwnerID;
            else if (container.playerOwner != null)
                id = container.playerOwner.userID;

            if (!Looters.ContainsKey(item.uid))
                Looters.Add(item.uid, id);
        }
        // Delivery and Vendors
        void OnUseNPC(BasePlayer npc, BasePlayer player)
        {
            if (player == null || npc == null) return;
            CheckPlayerEntry(player);
            var npcID = npc.UserIDString;
            if (vendors.QuestVendors.ContainsKey(npcID) && configData.UseNPCVendors)
            {
                CreateMenu(player);
                return;
            }
            if (vendors.DeliveryVendors.ContainsKey(npcID))
            {
                if (hasQuests(player.userID) && PlayerProgress[player.userID].CurrentDelivery.TargetID == npc.UserIDString)
                    AcceptDelivery(player, npcID, 1);

                if (hasQuests(player.userID) && string.IsNullOrEmpty(PlayerProgress[player.userID].CurrentDelivery.TargetID))
                    AcceptDelivery(player, npcID);
                else SendMSG(player, LA("delInprog", player.UserIDString), LA("Задания", player.UserIDString));
            }
        }
        #endregion
        object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            if (BetterChat) return null;

            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return null;

            if (ActiveEditors.ContainsKey(player.userID) || ActiveCreations.ContainsKey(player.userID) || AddVendor.ContainsKey(player.userID))
            {
                QuestChat(player,arg.Args);

                return false;
            }
            return null;
        }
        object OnBetterChat(Dictionary<string, object> dict)
        {
            var player = (dict["Player"] as IPlayer).Object as BasePlayer;
            if (player == null) return null;
            string message = dict["Text"].ToString();
            if (ActiveEditors.ContainsKey(player.userID) || ActiveCreations.ContainsKey(player.userID) || AddVendor.ContainsKey(player.userID))
            {
                QuestChat(player, message.Split(' '));
                return false;
            }
            return dict;
        }
        void QuestChat(BasePlayer player, string[] arg)
        {
            bool isEditing = false;
            bool isCreating = false;
            QuestCreator Creator = new QuestCreator();
            QuestEntry Quest = new QuestEntry();

            if (ActiveEditors.ContainsKey(player.userID))
            {
                isEditing = true;
                Creator = ActiveEditors[player.userID];
                Quest = Creator.entry;
            }
            else if (ActiveCreations.ContainsKey(player.userID))
            {
                isCreating = true;
                Creator = ActiveCreations[player.userID];
                Quest = Creator.entry;
            }
            if (AddVendor.ContainsKey(player.userID) && string.Join(" ", arg).Contains("exit"))
            {
                ExitQuest(player, true);
                return;
            }

            if (!isEditing && !isCreating)
                return;

            var args = string.Join(" ", arg);
            if (args.Contains("exit"))
            {
                ExitQuest(player, isCreating);
                return;
            }

            if (args.Contains("quest item"))
            {
                var item = GetItem(player);
                if (item != null)
                {
                    if (Creator.type != QuestType.Delivery)
                    {
                        Quest.Rewards.Add(item);
                        Creator.partNum++;
                        if (isCreating)
                            CreationHelp(player, 7);
                        else if (isEditing)
                        {
                            SaveRewardsEdit(player);
                            CreationHelp(player, 10);
                        }
                    }
                    else
                    {
                        Creator.deliveryInfo.Reward = item;
      
                        DeliveryHelp(player, 4);
                    }
                }
                else SendMSG(player, $"{LA("noAItem", player.UserIDString)}'quest item'", LA("QC", player.UserIDString));

                return;
            }

            switch (Creator.partNum)
            {
                case 0:
                    foreach (var type in questData.Quest)
                    {
                        if (type.Value.ContainsKey(args))
                        {
                            SendMSG(player, LA("nameExists", player.UserIDString), LA("QC", player.UserIDString));
                            return;
                        }
                    }
                    Quest.QuestName = args;
                    SendMSG(player, args, "Name:");
                    Creator.partNum++;
                    if (isCreating)
                        CreationHelp(player, 1);
                    else CreationHelp(player, 6);
                    return;
                case 2:
                    {
                        int amount;
                        if (!int.TryParse(arg[0], out amount))
                        {
                            SendMSG(player, LA("objAmount", player.UserIDString), LA("QC", player.UserIDString));
                            return;
                        }
                        Quest.AmountRequired = amount;
                        SendMSG(player, args, LA("OA", player.UserIDString));
                        Creator.partNum++;
                        if (isCreating)
                            CreationHelp(player, 3);
                        else CreationHelp(player, 6);
                    }
                    return;
                case 3:
                    {
                        if (Creator.type == QuestType.Delivery)
                        {
                            Creator.deliveryInfo.Description = args;
      
                            SendMSG(player, args, LA("Desc", player.UserIDString));
                            DeliveryHelp(player, 6);
                            return;
                        }
                        Quest.Description = args;
                        SendMSG(player, args, LA("Desc", player.UserIDString));
                        Creator.partNum++;
                        if (isCreating)
                            CreationHelp(player, 4);
                        else CreationHelp(player, 6);
                    }
                    return;
                case 5:
                    {
                        if (Creator.type == QuestType.Delivery)
                        {
                            float amount;
                            if (!float.TryParse(arg[0], out amount))
                            {
                                SendMSG(player, LA("noRM", player.UserIDString), LA("QC", player.UserIDString));
                                return;
                            }
                            Creator.deliveryInfo.Multiplier = amount;
      

                            SendMSG(player, args, LA("RM", player.UserIDString));
                            Creator.partNum++;
                            DeliveryHelp(player, 5);
                        }
                        else
                        {
                            int amount;
                            if (!int.TryParse(arg[0], out amount))
                            {
                                SendMSG(player, LA("noRA", player.UserIDString), LA("QC", player.UserIDString));
                                return;
                            }
                            Creator.item.Amount = amount;
                            Quest.Rewards.Add(Creator.item);
                            Creator.item = new RewardItem();
                            SendMSG(player, args, LA("RA", player.UserIDString));
                            Creator.partNum++;
                            if (isCreating)
                                CreationHelp(player, 7);
                            else if (isEditing)
                            {
                                SaveRewardsEdit(player);
                            }
                        }
                        return;
                    }
                case 6:
                    {
                        int amount;
                        if (!int.TryParse(arg[0], out amount))
                        {
                            SendMSG(player, LA("noCD", player.UserIDString), LA("QC", player.UserIDString));
                            return;
                        }
                        Creator.entry.Cooldown = amount;
                        SendMSG(player, args, LA("CD1", player.UserIDString));
                        CreationHelp(player, 6);
                    }
                    return;
                default:
                    break;
            }
        }
        #endregion

        #region External Calls
        private bool isPlaying(BasePlayer player)
        {
            if (EventManager)
            {
                var inEvent = EventManager?.Call("isPlaying", player);
                if (inEvent is bool && (bool)inEvent)
                    return true;
            }
            return false;
        }
        private void CloseMap(BasePlayer player)
        {
            if (LustyMap)
            {
                LustyMap.Call("DisableMaps", player);
            }
        }
        private void OpenMap(BasePlayer player)
        {
            if (LustyMap)
            {
                LustyMap.Call("EnableMaps", player);
            }
        }
        private void AddMapMarker(float x, float z, string name, string icon = "special", float r = 0)
        {
            if (LustyMap)
                LustyMap.Call("AddMarker", x, z, name, icon);
        }
        private void RemoveMapMarker(string name)
        {
            if (LustyMap)
                LustyMap.Call("RemoveMarker", name);
        }
        private object CanTeleport(BasePlayer player)
        {
            if (!PlayerProgress.ContainsKey(player.userID)) return null;

            if (!string.IsNullOrEmpty(PlayerProgress[player.userID].CurrentDelivery.TargetID))
            {
                return LA("NoTP", player.UserIDString);
            }
            else
                return null;
        }
        #endregion

        #region Objective Lists
        private void FillObjectiveList()
        {
            AllObjectives.Add(QuestType.Loot, new List<string>());
            AllObjectives.Add(QuestType.Craft, new List<string>());
            AllObjectives.Add(QuestType.Kill, new List<string>());
            AllObjectives.Add(QuestType.Gather, new List<string>());
            AllObjectives.Add(QuestType.Delivery, new List<string>());
            GetAllCraftables();
            GetAllItems();
            GetAllKillables();
            GetAllResources();
            foreach (var category in AllObjectives)
                category.Value.Sort();

            if (itemNames.DisplayNames == null || itemNames.DisplayNames.Count < 1)
            {
                foreach (var item in ItemDefs)
                {
                    if (!DisplayNames.ContainsKey(item.Key))
                        DisplayNames.Add(item.Key, item.Value.displayName.translated);
                }
                SaveDisplayNames();
            }
            else DisplayNames = itemNames.DisplayNames;
        }
        private void GetAllItems()
        {
            foreach (var item in ItemManager.itemList)
                AllObjectives[QuestType.Loot].Add(item.shortname);
        }
        private void GetAllCraftables()
        {
            foreach (var bp in ItemManager.bpList)
                if (bp.userCraftable)
                    AllObjectives[QuestType.Craft].Add(bp.targetItem.shortname);
        }
        private void GetAllResources()
        {
            AllObjectives[QuestType.Gather] = new List<string>
            {
                "wood",
                "stones",
                "metal.ore",
                "hq.metal.ore",
                "sulfur.ore",
                "cloth",
                "bone.fragments",
                "crude.oil",
                "fat.animal",
                "leather",
                "skull.wolf",
                "skull.human",
                "chicken.raw",
                "mushroom",
                "meat.boar",
                "bearmeat",
                "humanmeat.raw",
                "wolfmeat.raw"
            };
        }
        private void GetAllKillables()
        {
            AllObjectives[QuestType.Kill] = new List<string>
            {
                "bear",
                "boar",
                "chicken",
                "horse",
                "stag",
                "wolf",
                "autoturret_deployed",
                "patrolhelicopter",
                "player"
            };
            DisplayNames.Add("bear", "Bear");
            DisplayNames.Add("boar", "Boar");
            DisplayNames.Add("chicken", "Chicken");
            DisplayNames.Add("horse", "Horse");
            DisplayNames.Add("stag", "Stag");
            DisplayNames.Add("wolf", "Wolf");
            DisplayNames.Add("autoturret_deployed", "Auto-Turret");
            DisplayNames.Add("patrolhelicopter", "Helicopter");
            DisplayNames.Add("player", "Player");
        }

        #endregion

        #region Functions
        void AddMapIcons()
        {
            int deliveryCount = 1;
            foreach(var vendor in vendors.DeliveryVendors)
            {
                AddMapMarker(vendor.Value.Info.x, vendor.Value.Info.z, vendor.Value.Info.Name, $"{configData.LustyMapIntegration.Icon_Delivery}_{deliveryCount}.png");
      
                ++deliveryCount;
            }
            foreach(var vendor in vendors.QuestVendors)
            {
                AddMapMarker(vendor.Value.x, vendor.Value.z, vendor.Value.Name, $"{configData.LustyMapIntegration.Icon_Vendor}.png");
            }
        }
        private void ProcessProgress(BasePlayer player, QuestType questType, string type, int amount = 0)
        {
            if (string.IsNullOrEmpty(type)) return;
            var data = PlayerProgress[player.userID];
            if (data.RequiredItems.Count > 0)
            {
                foreach (var entry in data.Quests.Where(x => x.Value.Status == QuestStatus.Pending))
                {
                    var quest = GetQuest(entry.Key);
                    if (quest != null)
                    {
                        if (type == quest.Objective)
                        {
                            if (amount > 0)
                            {
                                var amountRequired = quest.AmountRequired - entry.Value.AmountCollected;
                                if (amount > amountRequired)
                                    amount = amountRequired;
                                entry.Value.AmountCollected += amount;

                                if (quest.ItemDeduction)
                                    TakeQuestItem(player, type, amount);
                            }
                            else entry.Value.AmountCollected++;

                            if (entry.Value.AmountCollected >= quest.AmountRequired)
                                CompleteQuest(player, entry.Key);
                            return;
                        }
                    }
                }
            }
        }
        private void TakeQuestItem(BasePlayer player, string item, int amount)
        {
            if (ItemDefs.ContainsKey(item))
            {
                var itemDef = ItemDefs[item];
                NextTick(() => player.inventory.Take(null, itemDef.itemid, amount));
            }
            else PrintWarning($"Unable to find definition for: {item}.");
        }
        private void CompleteQuest(BasePlayer player, string questName)
        {
            var data = PlayerProgress[player.userID].Quests[questName];
            var items = PlayerProgress[player.userID].RequiredItems;
            var quest = GetQuest(questName);
            if (quest != null)
            {
                data.Status = QuestStatus.Completed;
                data.ResetTime = GrabCurrentTime() + (quest.Cooldown * 60);

                for (int i = 0; i < items.Count; i++)
                {
                    if (items[i].ShortName == quest.Objective && items[i].Type == data.Type)
                    {
                        items.Remove(items[i]);
                        break;
                    }
                }
                SendMSG(player, "", $"{LA("qComple", player.UserIDString)} {questName}. {LA("claRew", player.UserIDString)}");
                PlayerChallenges?.Call("CompletedQuest", player);
            }
        }

        private ItemDefinition FindItemDefinition(string shortname)
        {
            ItemDefinition itemDefinition;
            return ItemDefs.TryGetValue(shortname, out itemDefinition) ? itemDefinition : null;
        }
        private string GetRewardString(List<RewardItem> entry)
        {
            var rewards = "";
            int i = 1;
            foreach (var item in entry)
            {
                rewards = rewards + $"{(int)item.Amount}x {item.DisplayName}";
                if (i < entry.Count)
                    rewards = rewards + ", ";
                i++;
            }
            return rewards;
        }
        private bool GiveReward(BasePlayer player, List<RewardItem> rewards)
        {
            foreach (var reward in rewards)
            {
                if (reward.isCoins && Economics)
                {
                    Economics.Call("Deposit", player.UserIDString, (double)reward.Amount);
                }
                else if (reward.isRP && RustShop)
                {
                    RustShop.Call("AddBalance", player.userID, (int)reward.Amount);
                }
				 else if (reward.isKR && KarmaSystem )
                {
                    KarmaSystem.Call("AddKarma", player.IPlayer, (int)reward.Amount);
                }
                else if (reward.isHuntXP)
                {
                    HuntRPG?.Call("GiveEXP", player, (int)reward.Amount);
                }
                else
                {
                    if (string.IsNullOrEmpty(reward.ShortName)) return true;
                    var definition = FindItemDefinition(reward.ShortName);
                    if (definition != null)
                    {
                        var item = ItemManager.Create(definition, (int)reward.Amount, reward.Skin);
                        if (item != null)
                        {
                            player.inventory.GiveItem(item, player.inventory.containerMain);
                        }
                    }
                    else PrintWarning($"Quests: Error building item {reward.ShortName} for {player.displayName}");
                }
            }
            return true;
        }
        private void ReturnItems(BasePlayer player, string itemname, int amount)
        {
            if (amount > 0)
            {
                var definition = FindItemDefinition(itemname);
                if (definition != null)
                {
                    var item = ItemManager.Create(definition, amount);
                    if (item != null)
                    {
                        player.inventory.GiveItem(item);
                        PopupMessage(player, $"{LA("qCancel", player.UserIDString)} {item.amount}x {item.info.displayName.translated} {LA("rewRet", player.UserIDString)}");
                    }
                }
            }
        }
        private RewardItem GetItem(BasePlayer player)
        {
            Item item = player.GetActiveItem();
            if (item == null) return null;
            var newItem = new RewardItem
            {
                Amount = item.amount,
                DisplayName = DisplayNames[item.info.shortname],
                ID = item.info.itemid,
                ShortName = item.info.shortname,
                Skin = item.skin
            };
            return newItem;
        }

        private bool hasQuests(ulong player)
        {
            if (PlayerProgress.ContainsKey(player))
                return true;
            return false;
        }
        private bool isQuestItem(ulong player, string name, QuestType type)
        {
            var data = PlayerProgress[player].RequiredItems;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].ShortName == name && data[i].Type == type)
                    return true;
            }
            return false;
        }
        private void CheckPlayerEntry(BasePlayer player)
        {
            if (!PlayerProgress.ContainsKey(player.userID))
                PlayerProgress.Add(player.userID, new PlayerQuestData());
        }

        private object GetQuestType(string name)
        {
            foreach (var entry in Quest)
                if (entry.Value.ContainsKey(name))
                    return entry.Key;
            return null;
        }
        private QuestEntry GetQuest(string name)
        {
            var type = GetQuestType(name);
            if (type != null)
            {
                foreach (var entry in questData.Quest[(QuestType)type])
                {
                    if (entry.Key == name)
                        return entry.Value;
                }
            }
            PrintWarning($"Error retrieving quest info for: {name}");
            return null;
        }

        private void SaveQuest(BasePlayer player, bool isCreating)
        {
            QuestCreator Creator;
            QuestEntry Quest;

            if (isCreating)
                Creator = ActiveCreations[player.userID];
            else Creator = ActiveEditors[player.userID];
            Quest = Creator.entry;

            if (isCreating)
            {
                if (Creator.type == QuestType.Delivery)
                {
                    var npc = BasePlayer.FindByID(ulong.Parse(Creator.deliveryInfo.Info.ID));
      
                    if (npc != null)
                    {
                        npc.displayName = Creator.deliveryInfo.Info.Name;
      
                        npc.SendNetworkUpdateImmediate();
                    }
                    vendors.DeliveryVendors.Add(Creator.deliveryInfo.Info.ID, Creator.deliveryInfo);
      
                    AddMapMarker(Creator.deliveryInfo.Info.x, Creator.deliveryInfo.Info.z, Creator.deliveryInfo.Info.Name, $"{configData.LustyMapIntegration.Icon_Delivery}_{vendors.DeliveryVendors.Count}.png");
      
                    AddVendor.Remove(player.userID);
                    SaveVendorData();
                    DestroyUI(player);
                    if (vendors.DeliveryVendors.Count < 2)
                        PopupMessage(player, LA("minDV", player.UserIDString));
                    SendMSG(player, LA("DVSucc", player.UserIDString), LA("QC", player.UserIDString));
                    OpenMap(player);
                    return;
                }
                else questData.Quest[Creator.type].Add(Quest.QuestName, Quest);
                ActiveCreations.Remove(player.userID);
            }
            else
            {
                questData.Quest[Creator.type].Remove(Creator.oldEntry);
                questData.Quest[Creator.type].Add(Quest.QuestName, Quest);
                ActiveEditors.Remove(player.userID);
            }
            DestroyUI(player);
            SaveQuestData();
            SendMSG(player, $"{LA("saveQ", player.UserIDString)} {Quest.QuestName}", LA("QC", player.UserIDString));
        }
        private void SaveRewardsEdit(BasePlayer player)
        {
            QuestCreator Creator = ActiveEditors[player.userID];
            QuestEntry Quest = Creator.entry;
            questData.Quest[Creator.type].Remove(Creator.entry.QuestName);
            questData.Quest[Creator.type].Add(Quest.QuestName, Quest);

            DestroyUI(player);
            SaveQuestData();
            CreationHelp(player, 10);
            SendMSG(player, $"{LA("saveQ", player.UserIDString)} {Quest.QuestName}", LA("QC", player.UserIDString));
        }
        private void ExitQuest(BasePlayer player, bool isCreating)
        {
            if (isCreating)
                ActiveCreations.Remove(player.userID);
            else ActiveEditors.Remove(player.userID);

            SendMSG(player, LA("QCCancel", player.UserIDString), LA("QC", player.UserIDString));
            DestroyUI(player);
        }
        private void RemoveQuest(string questName)
        {
            var Quest = GetQuest(questName);
            if (Quest == null) return;
            var Type = (QuestType)GetQuestType(questName);
            questData.Quest[Type].Remove(questName);

            foreach (var player in PlayerProgress)
            {
                if (player.Value.Quests.ContainsKey(questName))
                    player.Value.Quests.Remove(questName);
            }
            if (vendors.DeliveryVendors.ContainsKey(Quest.Objective))
                vendors.DeliveryVendors.Remove(Quest.Objective);
            if (vendors.QuestVendors.ContainsKey(Quest.Objective))
                vendors.QuestVendors.Remove(Quest.Objective);

            SaveQuestData();
            SaveVendorData();
        }

        private ulong GetLastAttacker(uint id)
        {
            int hits = 0;
            ulong majorityPlayer = 0U;
            if (HeliAttackers.ContainsKey(id))
            {
                foreach (var score in HeliAttackers[id])
                {
                    if (score.Value > hits)
                        majorityPlayer = score.Key;
                }
            }
            return majorityPlayer;
        }
        private string GetTypeDescription(QuestType type)
        {
            switch (type)
            {
                case QuestType.Kill:
                    return LA("KillOBJ");
                case QuestType.Craft:
                    return LA("CraftOBJ");
                case QuestType.Gather:
                    return LA("GatherOBJ");
                case QuestType.Loot:
                    return LA("LootOBJ");
                case QuestType.Delivery:
                    return LA("DelvOBJ");
            }
            return "";
        }
        private QuestType ConvertStringToType(string type)
        {
            switch (type)
            {
                case "gather":
                case "Gather":
                    return QuestType.Gather;
                case "loot":
                case "Loot":
                    return QuestType.Loot;
                case "craft":
                case "Craft":
                    return QuestType.Craft;
                case "delivery":
                case "Delivery":
                    return QuestType.Delivery;
                default:
                    return QuestType.Kill;
            }
        }

        private string isNPCRegistered(string ID)
        {
            if (vendors.QuestVendors.ContainsKey(ID)) return LA("aQVReg");
            if (vendors.DeliveryVendors.ContainsKey(ID)) return LA("aDVReg");
            return null;
        }
        static double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        private BasePlayer FindEntity(BasePlayer player)
        {
            var currentRot = Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward;
            var rayResult = Ray(player, currentRot);
            if (rayResult is BasePlayer)
            {
                var ent = rayResult as BasePlayer;
                return ent;
            }
            return null;
        }
        private object Ray(BasePlayer player, Vector3 Aim)
        {
            var hits = Physics.RaycastAll(player.transform.position + new Vector3(0f, 1.5f, 0f), Aim);
            float distance = 50f;
            object target = null;

            foreach (var hit in hits)
            {
                if (hit.collider.GetComponentInParent<BaseEntity>() != null)
                {
                    if (hit.distance < distance)
                    {
                        distance = hit.distance;
                        target = hit.collider.GetComponentInParent<BaseEntity>();
                    }
                }
            }
            return target;
        }

        private void SetVendorName()
        {
            foreach(var npc in vendors.DeliveryVendors)
            {
                var player = BasePlayer.FindByID(ulong.Parse(npc.Key));
                if (player != null)
                {
                    player.displayName = npc.Value.Info.Name;
      
                }
            }
            foreach(var npc in vendors.QuestVendors)
            {
                var player = BasePlayer.FindByID(ulong.Parse(npc.Key));
                if (player != null)
                {
                    player.displayName = npc.Value.Name;
                }
            }
        }
        private void RemoveVendor(BasePlayer player, string ID, bool isVendor)
        {
            if (isVendor)
            {
                RemoveMapMarker(vendors.QuestVendors[ID].Name);
                vendors.QuestVendors.Remove(ID);

                int i = 1;
                foreach(var npc in vendors.QuestVendors)
                {
                    RemoveMapMarker(npc.Value.Name);
                    AddMapMarker(npc.Value.x, npc.Value.z, npc.Value.Name, $"{configData.LustyMapIntegration.Icon_Vendor}.png");
                    i++;
                }
            }
            else
            {
                RemoveMapMarker(vendors.DeliveryVendors[ID].Info.Name);
      
                vendors.DeliveryVendors.Remove(ID);

                int i = 1;
                foreach (var npc in vendors.DeliveryVendors)
                {
                    RemoveMapMarker(npc.Value.Info.Name);
      
                    AddMapMarker(npc.Value.Info.x, npc.Value.Info.z, npc.Value.Info.Name, $"{configData.LustyMapIntegration.Icon_Delivery}_{i}.png");
      
                    i++;
                }
                foreach (var user in PlayerProgress)
                {
                    if (user.Value.Quests.ContainsKey(ID))
                        user.Value.Quests.Remove(ID);
                }
            }
            DeleteNPCMenu(player);
            PopupMessage(player, $"You have successfully removed the npc with ID: {ID}");
            SaveVendorData();
        }
        private string GetRandomNPC(string ID)
        {
            List<string> npcIDs = vendors.DeliveryVendors.Keys.ToList();
            List<string> withoutSelected = npcIDs;
            if (withoutSelected.Contains(ID))
                withoutSelected.Remove(ID);
            var randNum = UnityEngine.Random.Range(0, withoutSelected.Count - 1);
            return withoutSelected[randNum];
        }
        private string LA(string key, string userID = null) => lang.GetMessage(key, this, userID);

        #endregion

        #region UI
        private void CreateMenu(BasePlayer player)
        {
            CloseMap(player);

            var MenuElement = QUI.CreateElementContainer(UIMain, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0 0", "0.12 1");
            QUI.CreatePanel(ref MenuElement, UIMain, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.05 0.01", "0.95 0.99", true);
            QUI.CreateLabel(ref MenuElement, UIMain, "", $"{textPrimary}Задания</color>", 30, "0.05 0.9", "0.95 1");
            int i = 0;
            CreateMenuButton(ref MenuElement, UIMain, LA("Убийства", player.UserIDString), "QUI_ChangeElement kill", i); i++;
            CreateMenuButton(ref MenuElement, UIMain, LA("Добыча", player.UserIDString), "QUI_ChangeElement gather", i); i++;
            CreateMenuButton(ref MenuElement, UIMain, LA("Поиск", player.UserIDString), "QUI_ChangeElement loot", i); i++;
            CreateMenuButton(ref MenuElement, UIMain, LA("Создание", player.UserIDString), "QUI_ChangeElement craft", i); i++;
            i++;
            if (HumanNPC)
                CreateMenuButton(ref MenuElement, UIMain, LA("Delivery", player.UserIDString), "QUI_ChangeElement delivery", i); i++;
            CreateMenuButton(ref MenuElement, UIMain, LA("Your Quests", player.UserIDString), "QUI_ChangeElement personal", i); i++;

            if (player.IsAdmin)
            {
                QUI.CreateButton(ref MenuElement, UIMain, QUI.Color(configData.Colors.Button_Accept.Color, configData.Colors.Button_Accept.Alpha), LA("Create Quest", player.UserIDString), 18, "0.1 0.225", "0.9 0.28", "QUI_ChangeElement creation");
                QUI.CreateButton(ref MenuElement, UIMain, QUI.Color(configData.Colors.Button_Pending.Color, configData.Colors.Button_Pending.Alpha), LA("Edit Quest", player.UserIDString), 18, "0.1 0.16", "0.9 0.215", "QUI_ChangeElement editor");
                QUI.CreateButton(ref MenuElement, UIMain, QUI.Color(configData.Colors.Button_Cancel.Color, configData.Colors.Button_Cancel.Alpha), LA("Delete Quest", player.UserIDString), 18, "0.1 0.095", "0.9 0.15", "QUI_DeleteQuest");
            }

            QUI.CreateButton(ref MenuElement, UIMain, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Close", player.UserIDString), 18, "0.1 0.03", "0.9 0.085", "QUI_DestroyAll");
            CuiHelper.AddUi(player, MenuElement);
        }
        private void CreateEmptyMenu(BasePlayer player)
        {
            CloseMap(player);

            var MenuElement = QUI.CreateElementContainer(UIMain, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0 0", "0.12 1");
            QUI.CreatePanel(ref MenuElement, UIMain, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.05 0.01", "0.95 0.99", true);
            QUI.CreateLabel(ref MenuElement, UIMain, "", $"{textPrimary}Quests</color>", 30, "0.05 0.9", "0.95 1");
            CreateMenuButton(ref MenuElement, UIMain, LA("Your Quests", player.UserIDString), "QUI_ChangeElement personal", 4);

            QUI.CreateButton(ref MenuElement, UIMain, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Close", player.UserIDString), 18, "0.1 0.03", "0.9 0.085", "QUI_DestroyAll");
            CuiHelper.AddUi(player, MenuElement);
        }
        private void CreateMenuButton(ref CuiElementContainer container, string panelName, string buttonname, string command, int number)
        {
            Vector2 dimensions = new Vector2(0.8f, 0.055f);
            Vector2 origin = new Vector2(0.1f, 0.75f);
            Vector2 offset = new Vector2(0, (0.01f + dimensions.y) * number);

            Vector2 posMin = origin - offset;
            Vector2 posMax = posMin + dimensions;

            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), buttonname, 18, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", command);
        }

        private void ListElement(BasePlayer player, QuestType type, int page = 0)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "", GetTypeDescription(type), 16, "0.1 0.93", "0.9 0.99");
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.015", type.ToString().ToUpper(), 200, "0.01 0.01", "0.99 0.99");
            var quests = Quest[type];
            if (quests.Count > 16)
            {
                var maxpages = (quests.Count - 1) /16 + 1;
                if (page < maxpages - 1)
                    QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Next", player.UserIDString), 16, "0.86 0.94", "0.97 0.98", $"QUI_ChangeElement listpage {type} {page + 1}");
                if (page > 0)
                    QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Back", player.UserIDString), 16, "0.03 0.94", "0.14 0.98", $"QUI_ChangeElement listpage {type} {page - 1}");
            }
            int maxentries = (16 * (page + 1));
            if (maxentries > quests.Count)
                maxentries = quests.Count;
            int rewardcount = 16 * page;
            List <string> questNames = new List<string>();
            foreach (var entry in Quest[type])
                questNames.Add(entry.Key);

            if (quests.Count == 0)
                QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("noQ", player.UserIDString)} {type.ToString().ToLower()} {LA("quests", player.UserIDString)} </color>", 24, "0 0.82", "1 0.9");

            CuiHelper.AddUi(player, Main);

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                CreateQuestEntry(player, quests[questNames[n]], i);
                i++;
            }
        }
        private void CreateQuestEntry(BasePlayer player, QuestEntry entry, int num)
        {
            Vector2 posMin = CalcQuestPos(num);
            Vector2 dimensions = new Vector2(0.21f, 0.22f);
            Vector2 posMax = posMin + dimensions;

            var panelName = UIEntry + num;
            AddUIString(player, panelName);

            var questEntry = QUI.CreateElementContainer(panelName, "0 0 0 0", $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}");
            QUI.CreatePanel(ref questEntry, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), $"0 0", $"1 1");

            string buttonCommand = "";
            string buttonText = "";
            string buttonColor = "";
            QuestStatus status = QuestStatus.Open;
            var prog = PlayerProgress[player.userID].Quests;
            if (prog.ContainsKey(entry.QuestName))
            {
                status = prog[entry.QuestName].Status;
                switch (prog[entry.QuestName].Status)
                {
                    case QuestStatus.Pending:

                        buttonColor = QUI.Color(configData.Colors.Button_Pending.Color, configData.Colors.Button_Pending.Alpha);
                        buttonText = LA("Pending", player.UserIDString);
                        break;
                    case QuestStatus.Completed:
                        buttonColor = QUI.Color(configData.Colors.Button_Completed.Color, configData.Colors.Button_Completed.Alpha);
                        buttonText = LA("Completed", player.UserIDString);
                        break;
                }
            }
            else
            {
                buttonColor = QUI.Color(configData.Colors.Button_Accept.Color, configData.Colors.Button_Accept.Alpha);
                buttonText = LA("Accept Quest", player.UserIDString);
                buttonCommand = $"QUI_AcceptQuest {entry.QuestName}";
            }
            QUI.CreateButton(ref questEntry, panelName, buttonColor, buttonText, 14, $"0.72 0.83", $"0.98 0.97", buttonCommand);

            string rewards = GetRewardString(entry.Rewards);
            string questInfo = $"{textPrimary}{LA("Status:", player.UserIDString)}</color> {status}";
      
            questInfo = questInfo + $"\n{textPrimary}{LA("Description:", player.UserIDString)} </color>{textSecondary}{entry.Description}</color>";
      
            questInfo = questInfo + $"\n{textPrimary}{LA("Objective:", player.UserIDString)} </color>{textSecondary}{entry.ObjectiveName}</color>";
      
            questInfo = questInfo + $"\n{textPrimary}{LA("Amount Required:", player.UserIDString)} </color>{textSecondary}{entry.AmountRequired}</color>";
      
            questInfo = questInfo + $"\n{textPrimary}{LA("Reward:", player.UserIDString)} </color>{textSecondary}{rewards}</color>";
      

            QUI.CreateLabel(ref questEntry, panelName, "", $"{entry.QuestName}", 16, $"0.02 0.8", "0.72 0.95", TextAnchor.MiddleLeft);
            QUI.CreateLabel(ref questEntry, panelName, buttonColor, questInfo, 14, $"0.02 0.01", "0.98 0.78", TextAnchor.UpperLeft);
      

            CuiHelper.AddUi(player, questEntry);
        }

        private void PlayerStats(BasePlayer player, int page = 0)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "", LA("yqDesc", player.UserIDString), 16, "0.1 0.93", "0.9 0.99");
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.015", LA("STATS", player.UserIDString), 200, "0.01 0.01", "0.99 0.99");

            var stats = PlayerProgress[player.userID];
            if (stats.Quests.Count > 16)
            {
                var maxpages = (stats.Quests.Count - 1) / 16 + 1;
                if (page < maxpages - 1)
                    QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Next", player.UserIDString), 16, "0.86 0.94", "0.97 0.98", $"QUI_ChangeElement statspage {page + 1}");
                if (page > 0)
                    QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Back", player.UserIDString), 16, "0.03 0.94", "0.14 0.098", $"QUI_ChangeElement statspage {page - 1}");
            }
            int maxentries = (16 * (page + 1));
            if (maxentries > stats.Quests.Count)
                maxentries = stats.Quests.Count;
            int rewardcount = 16 * page;
            List<string> questNames = new List<string>();
            foreach (var entry in stats.Quests)
                questNames.Add(entry.Key);

            if (stats.Quests.Count == 0)
                QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("noQDSaved", player.UserIDString)}</color>", 24, "0 0.82", "1 0.9");

            CuiHelper.AddUi(player, Main);

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                var Quest = GetQuest(questNames[n]);
                if (Quest == null) continue;
                CreateStatEntry(player, Quest, i);
                i++;
            }
        }
        private void CreateStatEntry(BasePlayer player, QuestEntry entry, int num)
        {
            Vector2 posMin = CalcQuestPos(num);
            Vector2 dimensions = new Vector2(0.21f, 0.22f);
            Vector2 posMax = posMin + dimensions;

            var panelName = UIEntry + num;
            AddUIString(player, panelName);

            var questEntry = QUI.CreateElementContainer(panelName, "0 0 0 0", $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}");
            QUI.CreatePanel(ref questEntry, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), $"0 0", $"1 1");

            string statusColor = "";
            QuestStatus status = QuestStatus.Open;
            var prog = PlayerProgress[player.userID].Quests;
            if (prog.ContainsKey(entry.QuestName))
            {
                status = prog[entry.QuestName].Status;
                switch (prog[entry.QuestName].Status)
                {
                    case QuestStatus.Pending:
                        statusColor = QUI.Color(configData.Colors.Button_Pending.Color, configData.Colors.Button_Pending.Alpha);
                        break;
                    case QuestStatus.Completed:
                        statusColor = QUI.Color(configData.Colors.Button_Completed.Color, configData.Colors.Button_Completed.Alpha);
                        break;
                }
            }

            if (status != QuestStatus.Completed)
                QUI.CreateButton(ref questEntry, panelName, QUI.Color(configData.Colors.Button_Cancel.Color, configData.Colors.Button_Cancel.Alpha), LA("Cancel Quest",player.UserIDString), 16, $"0.75 0.83", $"0.97 0.97", $"QUI_CancelQuest {entry.QuestName}");
            if (status == QuestStatus.Completed && !prog[entry.QuestName].RewardClaimed)
                QUI.CreateButton(ref questEntry, panelName, statusColor, LA("Claim Reward", player.UserIDString), 16, $"0.75 0.83", $"0.97 0.97", $"QUI_ClaimReward {entry.QuestName}");
            string questStatus = status.ToString();
            if (status == QuestStatus.Completed && prog[entry.QuestName].RewardClaimed)
            {
                if (prog[entry.QuestName].ResetTime < GrabCurrentTime())
                    QUI.CreateButton(ref questEntry, panelName, statusColor, LA("Remove", player.UserIDString), 16, $"0.75 0.83", $"0.97 0.97", $"QUI_RemoveCompleted {entry.QuestName}");
                else
                {
                    TimeSpan dateDifference = TimeSpan.FromSeconds(prog[entry.QuestName].ResetTime - GrabCurrentTime());
                    var days = dateDifference.Days;
                    var hours = dateDifference.Hours;
                    hours += (days * 24);
                    var mins = dateDifference.Minutes;
                    string remaining = string.Format("{0:00}h :{1:00}m", hours, mins);
                    questStatus = $"{LA("Cooldown:", player.UserIDString)} {remaining}";
                }

            }
            var rewards = GetRewardString(entry.Rewards);
            var percent = Math.Round(Convert.ToDouble((float)prog[entry.QuestName].AmountCollected / (float)entry.AmountRequired), 0);
            string stats = $"{textPrimary}{LA("Status:", player.UserIDString)}</color> {questStatus}";
            stats += $"\n{textPrimary}{LA("Quest Type:", player.UserIDString)} </color> {textSecondary}{prog[entry.QuestName].Type}</color>";
            stats += $"\n{textPrimary}{LA("Description:", player.UserIDString)} </color>{textSecondary}{entry.Description}</color>";
            stats += $"\n{textPrimary}{LA("Objective:", player.UserIDString)} </color>{textSecondary}{entry.AmountRequired}x {entry.ObjectiveName}</color>";
            stats += $"\n{textPrimary}{LA("Collected:", player.UserIDString)} </color>{textSecondary}{prog[entry.QuestName].AmountCollected}</color> {textPrimary}({percent * 100}%)</color>";
            stats += $"\n{textPrimary}{LA("Reward:", player.UserIDString)} </color>{textSecondary}{rewards}</color>";

            QUI.CreateLabel(ref questEntry, panelName, "", $"{entry.QuestName}", 18, $"0.02 0.8", "0.8 0.95", TextAnchor.UpperLeft);
            QUI.CreateLabel(ref questEntry, panelName, "", stats, 14, $"0.02 0.01", "0.98 0.78", TextAnchor.UpperLeft);

            CuiHelper.AddUi(player, questEntry);
        }
        private void PlayerDelivery(BasePlayer player)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "", GetTypeDescription(QuestType.Delivery), 16, "0.1 0.93", "0.9 0.99");
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.015", LA("DELIVERY", player.UserIDString), 200, "0.01 0.01", "0.99 0.99");

            var npcid = PlayerProgress[player.userID].CurrentDelivery.VendorID;
            var targetid = PlayerProgress[player.userID].CurrentDelivery.TargetID;
            if (string.IsNullOrEmpty(npcid))
                QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("noADM", player.UserIDString)}</color>", 24, "0 0.82", "1 0.9");
            else
            {
                var quest = vendors.DeliveryVendors[npcid];
                var target = vendors.DeliveryVendors[targetid];
                if (quest != null && target != null)
                {
                    var distance = Vector2.Distance(new Vector2(quest.Info.x, quest.Info.z), new Vector2(target.Info.x, target.Info.z));
      
                    var rewardAmount = distance * quest.Multiplier;
                    if (rewardAmount < 1) rewardAmount = 1;
                    var briefing = $"{textPrimary}{quest.Info.Name}\n\n</color>";
      
                    briefing = briefing + $"{textSecondary}{quest.Description}</color>\n\n";
                    briefing = briefing + $"{textPrimary}{LA("Destination:", player.UserIDString)} </color>{textSecondary}{target.Info.Name}\nX {target.Info.x}, Z {target.Info.z}</color>\n";
      
                    briefing = briefing + $"{textPrimary}{LA("Distance:", player.UserIDString)} </color>{textSecondary}{distance}M</color>\n";
                    briefing = briefing + $"{textPrimary}{LA("Reward:", player.UserIDString)} </color>{textSecondary}{(int)rewardAmount}x {quest.Reward.DisplayName}</color>";
                    QUI.CreateLabel(ref Main, UIPanel, "", briefing, 20, "0.15 0.2", "0.85 1", TextAnchor.MiddleLeft);

                    QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Cancel", player.UserIDString), 18, "0.2 0.05", "0.35 0.1", $"QUI_CancelDelivery");
                }
            }
            CuiHelper.AddUi(player, Main);
        }

        private void CreationMenu(BasePlayer player)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);

            int i = 0;
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("selCreat", player.UserIDString)}</color>", 20, "0.25 0.8", "0.75 0.9");
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.025", LA("CREATOR", player.UserIDString), 200, "0.01 0.01", "0.99 0.99");
            CreateNewQuestButton(ref Main, UIPanel, LA("Убийства", player.UserIDString), "QUI_NewQuest kill", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Добыча", player.UserIDString), "QUI_NewQuest gather", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Поиск", player.UserIDString), "QUI_NewQuest loot", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Создать", player.UserIDString), "QUI_NewQuest craft", i); i++;
            if (HumanNPC)
                CreateNewQuestButton(ref Main, UIPanel, LA("Delivery", player.UserIDString), "QUI_NewQuest delivery", i); i++;

            CuiHelper.AddUi(player, Main);
        }
        private void CreationHelp(BasePlayer player, int page = 0)
        {
            DestroyEntries(player);
            QuestCreator quest = null;
            if (ActiveCreations.ContainsKey(player.userID))
                quest = ActiveCreations[player.userID];
            else if (ActiveEditors.ContainsKey(player.userID))
                quest = ActiveEditors[player.userID];
            if (quest == null) return;

            var HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
            QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");

            switch (page)
            {
                case 0:
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelMen", player.UserIDString)}.\n</color> {textSecondary}{LA("creHelFol", player.UserIDString)}.\n\n{LA("creHelExi", player.UserIDString)} </color>{textPrimary}'exit'\n\n\n\n{LA("creHelName", player.UserIDString)}</color>", 20, "0 0", "1 1");
                break;
                case 1:
                    var MenuMain = QUI.CreateElementContainer(UIMain, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0 0", "1 1", true);
                    QUI.CreatePanel(ref MenuMain, UIMain, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99");
                    QUI.CreateLabel(ref MenuMain, UIMain, "", $"{textPrimary}{LA("creHelObj", player.UserIDString)}</color>", 20, "0.25 0.85", "0.75 0.95");
                    CuiHelper.AddUi(player, MenuMain);
                    CreateObjectiveMenu(player);
                    return;
                case 2:
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelRA", player.UserIDString)}</color>", 20, "0.25 0.4", "0.75 0.6");
                    break;
                case 3:
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelQD", player.UserIDString)}</color>", 20, "0.25 0.4", "0.75 0.6");
                    break;
                case 4:
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98", true);
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelRT", player.UserIDString)}</color>", 20, "0.25 0.8", "0.75 1");
                        int i = 0;
                        if (Economics) CreateRewardTypeButton(ref HelpMain, UIPanel, $"{LA("Coins", player.UserIDString)} (Economics)", "QUI_RewardType coins", i); i++;
                        if (RustShop) CreateRewardTypeButton(ref HelpMain, UIPanel, $"{LA("Рубли", player.UserIDString)} ", "QUI_RewardType rp", i); i++;
						 if (KarmaSystem) CreateRewardTypeButton(ref HelpMain, UIPanel, $"{LA("Очки", player.UserIDString)} Кармы", "QUI_RewardType kr", i); i++;
                        CreateRewardTypeButton(ref HelpMain, UIPanel, LA("Item", player.UserIDString), "QUI_RewardType item", i); i++;
                        if (HuntRPG) { CreateRewardTypeButton(ref HelpMain, UIPanel, $"{LA("HuntXP", player.UserIDString)} (HuntRPG)", "QUI_RewardType huntxp", i); i++; }
                    }
                    break;
                case 5:
                    if (quest.item.isCoins || quest.item.isRP || quest.item.isKR || quest.item.isHuntXP)
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelRewA", player.UserIDString)}</color>", 20, "0.25 0.4", "0.75 0.6");
                    else
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.3 0.8", "0.7 0.97");
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelIH", player.UserIDString)} 'quest item'</color>", 20, "0.1 0", "0.9 1");
                    }
                    break;
                case 7:
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelAR", player.UserIDString)}</color>", 20, "0.1 0", "0.9 1");
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Yes", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_AddReward");
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("No", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_RewardFinish");
                    break;
                case 8:
                    if (quest.type != QuestType.Kill)
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelID", player.UserIDString)}</color>", 20, "0.1 0", "0.9 1");
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Yes", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_ItemDeduction 1");
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("No", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_ItemDeduction 0");
                    }
                    else { CreationHelp(player, 9); return; }
                    break;
                case 9:
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.3 0.8", "0.7 0.97");
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelCD", player.UserIDString)}</color>", 20, "0.1 0", "0.9 1");
                    break;
                case 10:
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98", true);
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelNewRew", player.UserIDString)}</color>", 20, "0.25 0.8", "0.75 1");
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("addNewRew", player.UserIDString), 18, "0.7 0.04", "0.95 0.12", $"QUI_AddReward");
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Back", player.UserIDString), 18, "0.05 0.04", "0.3 0.12", $"QUI_EndEditing");

                        int i = 0;
                        foreach (var entry in ActiveEditors[player.userID].entry.Rewards)
                        {
                            CreateDelEditButton(ref HelpMain, 0.1f, UIPanel, $"{entry.Amount}x {entry.DisplayName}", i, "", 0.35f);
                            CreateDelEditButton(ref HelpMain, 0.72f, UIPanel, LA("Remove", player.UserIDString), i, $"QUI_RemoveReward {entry.Amount} {entry.DisplayName}");
                            i++;
                        }
                    }
                    break;
                default:
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelSQ", player.UserIDString)}</color>", 20, "0.1 0.8", "0.9 0.95");
                    string questDetails = $"{textPrimary}{LA("Quest Type:", player.UserIDString)}</color> {textSecondary}{quest.type}</color>";
                    questDetails = questDetails + $"\n{textPrimary}{LA("Name:", player.UserIDString)}</color> {textSecondary}{quest.entry.QuestName}</color>";
                    questDetails = questDetails + $"\n{textPrimary}{LA("Description:", player.UserIDString)}</color> {textSecondary}{quest.entry.Description}</color>";
                    questDetails = questDetails + $"\n{textPrimary}{LA("Objective:", player.UserIDString)}</color> {textSecondary}{quest.entry.ObjectiveName}</color>";
                    questDetails = questDetails + $"\n{textPrimary}{LA("Required Amount:", player.UserIDString)}</color> {textSecondary}{quest.entry.AmountRequired}</color>";
                    if (quest.type != QuestType.Kill) questDetails = questDetails + $"\n{textPrimary}{LA("Item Deduction:", player.UserIDString)}</color> {textSecondary}{quest.entry.ItemDeduction}</color>";
                    questDetails = questDetails + $"\n{textPrimary}{LA("CDMin", player.UserIDString)}</color> {textSecondary}{quest.entry.Cooldown}</color>";

                    var rewards = GetRewardString(quest.entry.Rewards);

                    questDetails = questDetails + $"\n{textPrimary}{LA("Reward:", player.UserIDString)}</color> {textSecondary}{rewards}</color>";

                    QUI.CreateLabel(ref HelpMain, UIPanel, "", questDetails, 20, "0.1 0.2", "0.9 0.75", TextAnchor.MiddleLeft);
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Save Quest", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_SaveQuest");
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Cancel", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_ExitQuest");
                    break;
            }
            CuiHelper.AddUi(player, HelpMain);
        }
        private void CreateObjectiveMenu(BasePlayer player, int page = 0)
        {
            DestroyEntries(player);
            var HelpMain = QUI.CreateElementContainer(UIPanel, "0 0 0 0", "0 0", "1 1");
            QuestType type;
            if (ActiveCreations.ContainsKey(player.userID))
                type = ActiveCreations[player.userID].type;
            else type = ActiveEditors[player.userID].type;
            var objCount = AllObjectives[type].Count;
            if (objCount > 100)
            {
                var maxpages = (objCount - 1) / 96 + 1;
                if (page < maxpages - 1)
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Next", player.UserIDString), 18, "0.84 0.05", "0.97 0.1", $"QUI_ChangeElement objpage {page + 1}");
                if (page > 0)
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Back", player.UserIDString), 18, "0.03 0.05", "0.16 0.1", $"QUI_ChangeElement objpage {page - 1}");
            }
            int maxentries = (96 * (page + 1));
            if (maxentries > objCount)
                maxentries = objCount;
            int rewardcount = 96 * page;

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                CreateObjectiveEntry(ref HelpMain, UIPanel, AllObjectives[type][n], i);
                i++;
            }
            CuiHelper.AddUi(player, HelpMain);
        }
        private void DeliveryHelp(BasePlayer player, int page = 0)
        {
            DestroyEntries(player);
            switch (page)
            {
                case 0:
                    var HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0.0", "1 1", true);
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("delHelMen", player.UserIDString)}\n\n</color> {textSecondary}{LA("delHelChoo", player.UserIDString)}.\n\n{LA("creHelExi", player.UserIDString)} </color>{textPrimary}'exit'</color>", 20, "0 0", "1 1");
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Quest Vendor", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_AddVendor 1");
                    QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Delivery Vendor", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_AddVendor 2");
                    CuiHelper.AddUi(player, HelpMain);
                    return;
                case 1:
                    var element = QUI.CreateElementContainer(UIMain, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.25 0.85", "0.75 0.95");
                    QUI.CreatePanel(ref element, UIMain, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), "0.005 0.04", "0.995 0.96");
                    QUI.CreateLabel(ref element, UIMain, "", $"{textPrimary}{LA("delHelNewNPC", player.UserIDString)} '/questnpc'</color>", 22, "0 0", "1 1");
                    CuiHelper.AddUi(player, element);
                    return;
                case 2:
                    DestroyUI(player);
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98", true);
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textSecondary}{LA("delHelMult", player.UserIDString)}</color>\n{textPrimary}{LA("creHelRT", player.UserIDString)}</color>", 18, "0.05 0.82", "0.95 0.98");
                    int i = 0;
                    if (Economics) CreateRewardTypeButton(ref HelpMain, UIPanel, "Coins (Economics)", "QUI_RewardType coins", i); i++;
                    if (RustShop) CreateRewardTypeButton(ref HelpMain, UIPanel, "Рубли", "QUI_RewardType rp", i); i++;
					if (KarmaSystem) CreateRewardTypeButton(ref HelpMain, UIPanel, "Карма", "QUI_RewardType kr", i); i++;
                    CreateRewardTypeButton(ref HelpMain, UIPanel, LA("Item", player.UserIDString), "QUI_RewardType item", i); i++;
                    if (HuntRPG) { CreateRewardTypeButton(ref HelpMain, UIPanel, "XP (HuntRPG)", "QUI_RewardType huntxp", i); i++; }
                    CuiHelper.AddUi(player, HelpMain);
                    return;
                case 3:
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                        var quest = ActiveCreations[player.userID];
                        if (quest.deliveryInfo.Reward.isCoins || quest.deliveryInfo.Reward.isRP || quest.deliveryInfo.Reward.isKR || quest.deliveryInfo.Reward.isHuntXP)
      
                            DeliveryHelp(player, 4);
                        else
                        {
                            HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.3 0.8", "0.7 0.97");
                            QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                            QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("creHelIH", player.UserIDString)} 'quest item'</color>", 20, "0.1 0", "0.9 1");
                            CuiHelper.AddUi(player, HelpMain);
                        }
                    }
                    return;
                case 4:
                    ActiveCreations[player.userID].partNum = 5;
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("delHelRM", player.UserIDString)}</color> {textSecondary}\n\n{LA("delHelRM1", player.UserIDString)}</color>{textPrimary} 2000m</color>{textSecondary} {LA("delHelRM2", player.UserIDString)} </color>{textPrimary}0.25</color>{textSecondary}, {LA("delHelRM3", player.UserIDString)} </color>{textPrimary}500</color>", 20, "0.05 0.1", "0.95 0.9");
                    CuiHelper.AddUi(player, HelpMain);
                    return;
                case 5:
                    ActiveCreations[player.userID].partNum = 3;
                    HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9");
                    QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                    QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("delHelDD", player.UserIDString)}</color>", 20, "0.05 0.1", "0.95 0.9");
                    CuiHelper.AddUi(player, HelpMain);
                    return;
                case 6:
                    {
                        HelpMain = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                        QUI.CreatePanel(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                        QUI.CreateLabel(ref HelpMain, UIPanel, "", $"{textPrimary}{LA("delHelNewV", player.UserIDString)}</color>", 20, "0.1 0.8", "0.9 0.95");

                        var quest = ActiveCreations[player.userID];
                        string questDetails = $"{textPrimary}{LA("Quest Type:", player.UserIDString)}</color> {textSecondary}{quest.type}</color>";
                        questDetails = questDetails + $"\n{textPrimary}{LA("Name:", player.UserIDString)}</color> {textSecondary}{quest.deliveryInfo.Info.Name}</color>";
      
                        questDetails = questDetails + $"\n{textPrimary}{LA("Description:", player.UserIDString)}</color> {textSecondary}{quest.deliveryInfo.Description}</color>";
      
                        questDetails = questDetails + $"\n{textPrimary}{LA("Reward:", player.UserIDString)}</color> {textSecondary}{quest.deliveryInfo.Reward.DisplayName}</color>";
      
                        questDetails = questDetails + $"\n{textPrimary}{LA("Multiplier:", player.UserIDString)}</color> {textSecondary}{quest.deliveryInfo.Multiplier}</color>";
      

                        QUI.CreateLabel(ref HelpMain, UIPanel, "", questDetails, 20, "0.1 0.2", "0.9 0.75", TextAnchor.MiddleLeft);
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Save Quest", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_SaveQuest");
                        QUI.CreateButton(ref HelpMain, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Cancel", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_ExitQuest");
                        CuiHelper.AddUi(player, HelpMain);
                    }
                    return;
            default:
                    return;
            }
        }
        private void AcceptDelivery(BasePlayer player, string npcID, int page = 0)
        {
            var quest = vendors.DeliveryVendors[npcID];

            switch (page)
            {
                case 0:
                    {
                        var target = vendors.DeliveryVendors[GetRandomNPC(npcID)];
                        if (quest != null && target != null)
                        {
                            var distance = Vector2.Distance(new Vector2(quest.Info.x, quest.Info.z), new Vector2(target.Info.x, target.Info.z));
      
                            var rewardAmount = distance * quest.Multiplier;
                            if (rewardAmount < 1) rewardAmount = 1;
                            var briefing = $"{textPrimary}{quest.Info.Name}\n\n</color>";
      
                            briefing = briefing + $"{textSecondary}{quest.Description}</color>\n\n";
                            briefing = briefing + $"{textPrimary}{LA("Destination:", player.UserIDString)} </color>{textSecondary}{target.Info.Name}\nX {target.Info.x}, Z {target.Info.z}</color>\n";
      
                            briefing = briefing + $"{textPrimary}{LA("Distance:", player.UserIDString)} </color>{textSecondary}{distance}M</color>\n";
                            briefing = briefing + $"{textPrimary}{LA("Reward:", player.UserIDString)} </color>{textSecondary}{(int)rewardAmount}x {quest.Reward.DisplayName}</color>";

                            var VendorUI = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                            QUI.CreatePanel(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                            QUI.CreateLabel(ref VendorUI, UIPanel, "", briefing, 20, "0.15 0.2", "0.85 1", TextAnchor.MiddleLeft);

                            QUI.CreateButton(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Accept", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_AcceptDelivery {npcID} {target.Info.ID} {distance}");
      
                            QUI.CreateButton(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Decline", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_DestroyAll");
                            CuiHelper.AddUi(player, VendorUI);
                        }
                    }
                        return;
                    case 1:
                    {
                        var VendorUI = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.4 0.3", "0.95 0.9", true);
                        QUI.CreatePanel(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
                        QUI.CreateLabel(ref VendorUI, UIPanel, "", $"{textPrimary} {LA("delComplMSG", player.UserIDString)}</color>", 22, "0 0", "1 1");
                        QUI.CreateButton(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Claim", player.UserIDString), 18, "0.6 0.05", "0.8 0.15", $"QUI_FinishDelivery {npcID}");
                        QUI.CreateButton(ref VendorUI, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Cancel", player.UserIDString), 18, "0.2 0.05", "0.4 0.15", $"QUI_DestroyAll");
                        CuiHelper.AddUi(player, VendorUI);
                    }
                    return;
                default:
                    return;

            }
        }

        private void DeletionEditMenu(BasePlayer player, string page, string command)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.025", page, 200, "0.01 0.01", "0.99 0.99");

            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Kill",player.UserIDString)}</color>", 20, "0 0.87", "0.25 0.92");
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Gather", player.UserIDString)}</color>", 20, "0.25 0.87", "0.5 0.92");
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Loot", player.UserIDString)}</color>", 20, "0.5 0.87", "0.75 0.92");
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Craft", player.UserIDString)}</color>", 20, "0.75 0.87", "1 0.92");
            if (command == "QUI_ConfirmDelete") QUI.CreateButton(ref Main, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), $"{textPrimary}{LA("Delete NPC", player.UserIDString)}</color>", 18, "0.8 0.94", "0.98 0.98", "QUI_DeleteNPCMenu");

            int killNum = 0;
            int gatherNum = 0;
            int lootNum = 0;
            int craftNum = 0;
            foreach (var entry in questData.Quest[QuestType.Kill])
            {
                CreateDelEditButton(ref Main, 0.035f, UIPanel, entry.Key, killNum, command);
                killNum++;
            }
            foreach (var entry in questData.Quest[QuestType.Gather])
            {
                CreateDelEditButton(ref Main, 0.285f, UIPanel, entry.Key, gatherNum, command);
                gatherNum++;
            }
            foreach (var entry in questData.Quest[QuestType.Loot])
            {
                CreateDelEditButton(ref Main, 0.535f, UIPanel, entry.Key, lootNum, command);
                lootNum++;
            }
            foreach (var entry in questData.Quest[QuestType.Craft])
            {
                CreateDelEditButton(ref Main, 0.785f, UIPanel, entry.Key, craftNum, command);
                craftNum++;
            }
            CuiHelper.AddUi(player, Main);
        }
        private void DeleteNPCMenu(BasePlayer player)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.025", LA("REMOVER", player.UserIDString), 200, "0.01 0.01", "0.99 0.99");

            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Delivery Vendors", player.UserIDString)}</color>", 20, "0 0.87", "0.5 0.92");
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("Quest Vendors", player.UserIDString)}</color>", 20, "0.5 0.87", "1 0.92");

            int VendorNum = 0;
            int DeliveryNum = 0;
            foreach (var entry in vendors.QuestVendors)
            {
                CreateDelVendorButton(ref Main, 0.535f, UIPanel, entry.Value.Name, DeliveryNum, $"QUI_RemoveVendor {entry.Key}");
                VendorNum++;
            }
            foreach (var entry in vendors.DeliveryVendors)
            {
                CreateDelVendorButton(ref Main, 0.035f, UIPanel, entry.Value.Info.Name, DeliveryNum, $"QUI_RemoveVendor {entry.Key}");
      
                DeliveryNum++;
            }
            CuiHelper.AddUi(player, Main);
        }
        private void ConfirmDeletion(BasePlayer player, string questName)
        {
            var ConfirmDelete = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.2 0.4", "0.8 0.8", true);
            QUI.CreatePanel(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
            QUI.CreateLabel(ref ConfirmDelete, UIPanel, "", $"{textPrimary}{LA("confDel", player.UserIDString)} {questName}</color>", 20, "0.1 0.6", "0.9 0.9");
            QUI.CreateButton(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Yes", player.UserIDString), 18, "0.6 0.2", "0.8 0.3", $"QUI_DeleteQuest {questName}");
            QUI.CreateButton(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("No", player.UserIDString), 18, "0.2 0.2", "0.4 0.3", $"QUI_DeleteQuest reject");

            CuiHelper.AddUi(player, ConfirmDelete);
        }
        private void ConfirmCancellation(BasePlayer player, string questName)
        {
            var ConfirmDelete = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.2 0.4", "0.8 0.8", true);
            QUI.CreatePanel(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.02", "0.99 0.98");
            QUI.CreateLabel(ref ConfirmDelete, UIPanel, "", $"{textPrimary}{LA("confCan", player.UserIDString)} {questName}</color>\n{textSecondary}{LA("confCan2", player.UserIDString)}</color>", 20, "0.1 0.6", "0.9 0.9");
            QUI.CreateButton(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("Yes", player.UserIDString), 18, "0.6 0.2", "0.8 0.3", $"QUI_ConfirmCancel {questName}");
            QUI.CreateButton(ref ConfirmDelete, UIPanel, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), LA("No", player.UserIDString), 18, "0.2 0.2", "0.4 0.3", $"QUI_ConfirmCancel reject");

            CuiHelper.AddUi(player, ConfirmDelete);
        }

        private void QuestEditorMenu(BasePlayer player)
        {
            DestroyEntries(player);
            var Main = QUI.CreateElementContainer(UIPanel, QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.12 0", "1 1");
            QUI.CreatePanel(ref Main, UIPanel, QUI.Color(configData.Colors.Background_Light.Color, configData.Colors.Background_Light.Alpha), "0.01 0.01", "0.99 0.99", true);
            QUI.CreateLabel(ref Main, UIPanel, "1 1 1 0.025", LA("EDITOR", player.UserIDString), 200, "0.01 0.01", "0.99 0.99");

            int i = 0;
            QUI.CreateLabel(ref Main, UIPanel, "", $"{textPrimary}{LA("chaEdi", player.UserIDString)}</color>", 20, "0.25 0.8", "0.75 0.9");
            CreateNewQuestButton(ref Main, UIPanel, LA("Name", player.UserIDString), "QUI_EditQuestVar name", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Description", player.UserIDString), "QUI_EditQuestVar description", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Objective", player.UserIDString), "QUI_EditQuestVar objective", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Amount", player.UserIDString), "QUI_EditQuestVar amount", i); i++;
            CreateNewQuestButton(ref Main, UIPanel, LA("Reward", player.UserIDString), "QUI_EditQuestVar reward", i); i++;

            CuiHelper.AddUi(player, Main);
        }

        private void CreateObjectiveEntry(ref CuiElementContainer container, string panelName, string name, int number)
        {
            var pos = CalcEntryPos(number);
            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), name, 10, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", $"QUI_SelectObj {name}");
        }
        private void CreateNewQuestButton(ref CuiElementContainer container, string panelName, string buttonname, string command, int number)
        {
            Vector2 dimensions = new Vector2(0.2f, 0.07f);
            Vector2 origin = new Vector2(0.4f, 0.7f);
            Vector2 offset = new Vector2(0, (0.01f + dimensions.y) * number);

            Vector2 posMin = origin - offset;
            Vector2 posMax = posMin + dimensions;

            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), buttonname, 18, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", command);
        }
        private void CreateRewardTypeButton(ref CuiElementContainer container, string panelName, string buttonname, string command, int number)
        {
            Vector2 dimensions = new Vector2(0.36f, 0.1f);
            Vector2 origin = new Vector2(0.32f, 0.7f);
            Vector2 offset = new Vector2(0, (0.01f + dimensions.y) * number);

            Vector2 posMin = origin - offset;
            Vector2 posMax = posMin + dimensions;

            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), buttonname, 18, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", command);
        }
        private void CreateDelEditButton(ref CuiElementContainer container, float xPos, string panelName, string buttonname, int number, string command, float width = 0.18f)
        {
            Vector2 dimensions = new Vector2(width, 0.05f);
            Vector2 origin = new Vector2(xPos, 0.8f);
            Vector2 offset = new Vector2(0, (-0.01f - dimensions.y) * number);

            Vector2 posMin = origin + offset;
            Vector2 posMax = posMin + dimensions;

            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), buttonname, 14, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", $"{command} {buttonname}");
        }
        private void CreateDelVendorButton(ref CuiElementContainer container, float xPos, string panelName, string buttonname, int number, string command)
        {
            if (number > 15) xPos += 0.25f;
            Vector2 dimensions = new Vector2(0.18f, 0.05f);
            Vector2 origin = new Vector2(xPos, 0.8f);
            Vector2 offset = new Vector2(0, (-0.01f - dimensions.y) * number);

            Vector2 posMin = origin + offset;
            Vector2 posMax = posMin + dimensions;

            QUI.CreateButton(ref container, panelName, QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), buttonname, 14, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", command);
        }

        private void PopupMessage(BasePlayer player, string msg)
        {
            CuiHelper.DestroyUi(player, "PopupMsg");
            var element = QUI.CreateElementContainer("PopupMsg", QUI.Color(configData.Colors.Background_Dark.Color, configData.Colors.Background_Dark.Alpha), "0.25 0.85", "0.75 0.95");
            QUI.CreatePanel(ref element, "PopupMsg", QUI.Color(configData.Colors.Button_Standard.Color, configData.Colors.Button_Standard.Alpha), "0.005 0.04", "0.995 0.96");
            QUI.CreateLabel(ref element, "PopupMsg", "", $"{textPrimary}{msg}</color>", 22, "0 0", "1 1");
            CuiHelper.AddUi(player, element);
            timer.Once(3, () => CuiHelper.DestroyUi(player, "PopupMsg"));
        }

        private Vector2 CalcQuestPos(int number)
        {
            Vector2 position = new Vector2(0.1325f, 0.71f);
            Vector2 dimensions = new Vector2(0.21f, 0.22f);
            float offsetY = 0f;
            float offsetX = 0;
            if (number >= 0 && number < 4)
            {
                offsetX = (0.005f + dimensions.x) * number;
            }
            if (number > 3 && number < 8)
            {
                offsetX = (0.005f + dimensions.x) * (number - 4);
                offsetY = (-0.008f - dimensions.y) * 1;
            }
            if (number > 7 && number < 12)
            {
                offsetX = (0.005f + dimensions.x) * (number - 8);
                offsetY = (-0.008f - dimensions.y) * 2;
            }
            if (number > 11 && number < 16)
            {
                offsetX = (0.005f + dimensions.x) * (number - 12);
                offsetY = (-0.008f - dimensions.y) * 3;
            }
            return new Vector2(position.x + offsetX, position.y + offsetY);
        }
        private float[] CalcEntryPos(int number)
        {
            Vector2 position = new Vector2(0.014f, 0.8f);
            Vector2 dimensions = new Vector2(0.12f, 0.055f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number <8)
            {
                offsetX = (0.002f + dimensions.x) * number;
            }
            if (number > 7 && number < 16)
            {
                offsetX = (0.002f + dimensions.x) * (number - 8);
                offsetY = (-0.0055f - dimensions.y) * 1;
            }
            if (number > 15 && number < 24)
            {
                offsetX = (0.002f + dimensions.x) * (number - 16);
                offsetY = (-0.0055f - dimensions.y) * 2;
            }
            if (number > 23 && number < 32)
            {
                offsetX = (0.002f + dimensions.x) * (number - 24);
                offsetY = (-0.0055f - dimensions.y) * 3;
            }
            if (number > 31 && number < 40)
            {
                offsetX = (0.002f + dimensions.x) * (number - 32);
                offsetY = (-0.0055f - dimensions.y) * 4;
            }
            if (number > 39 && number < 48)
            {
                offsetX = (0.002f + dimensions.x) * (number - 40);
                offsetY = (-0.0055f - dimensions.y) * 5;
            }
            if (number > 47 && number < 56)
            {
                offsetX = (0.002f + dimensions.x) * (number - 48);
                offsetY = (-0.0055f - dimensions.y) * 6;
            }
            if (number > 55 && number < 64)
            {
                offsetX = (0.002f + dimensions.x) * (number - 56);
                offsetY = (-0.0055f - dimensions.y) * 7;
            }
            if (number > 63 && number < 72)
            {
                offsetX = (0.002f + dimensions.x) * (number - 64);
                offsetY = (-0.0055f - dimensions.y) * 8;
            }
            if (number > 71 && number < 80)
            {
                offsetX = (0.002f + dimensions.x) * (number - 72);
                offsetY = (-0.0055f - dimensions.y) * 9;
            }
            if (number > 79 && number < 88)
            {
                offsetX = (0.002f + dimensions.x) * (number - 80);
                offsetY = (-0.0055f - dimensions.y) * 10;
            }
            if (number > 87 && number < 96)
            {
                offsetX = (0.002f + dimensions.x) * (number - 88);
                offsetY = (-0.0055f - dimensions.y) * 11;
            }
            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }

        private void AddUIString(BasePlayer player, string name)
        {
            if (!OpenUI.ContainsKey(player.userID))
                OpenUI.Add(player.userID, new List<string>());
            OpenUI[player.userID].Add(name);
        }
        private void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIMain);
            DestroyEntries(player);
        }
        private void DestroyEntries(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIPanel);
            if (OpenUI.ContainsKey(player.userID))
            {
                foreach (var entry in OpenUI[player.userID])
                    CuiHelper.DestroyUi(player, entry);
                OpenUI.Remove(player.userID);
            }
        }
        #endregion

        #region UI Commands
        [ConsoleCommand("QUI_AcceptQuest")]
        private void cmdAcceptQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            var questName = string.Join(" ", arg.Args);
            CheckPlayerEntry(player);
            var data = PlayerProgress[player.userID].Quests;
            if (!data.ContainsKey(questName))
            {
                var type = GetQuestType(questName);
                if (type != null)
                {
                    var quest = Quest[(QuestType)type][questName];
                    data.Add(questName, new PlayerQuestInfo { Status = QuestStatus.Pending, Type = (QuestType)type });
      
                    PlayerProgress[player.userID].RequiredItems.Add(new QuestInfo { ShortName = quest.Objective, Type = (QuestType)type });
      
                    DestroyEntries(player);
                    ListElement(player, (QuestType)type);
                    PopupMessage(player, $"{LA("qAccep", player.UserIDString)} {questName}");
                    return;
                }
            }
        }
        [ConsoleCommand("QUI_AcceptDelivery")]
        private void cmdAcceptDelivery(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            var vendorID = arg.Args[0];
            var targetID = arg.Args[1];
            var distance = arg.Args[2];
            PlayerProgress[player.userID].CurrentDelivery = new ActiveDelivery { VendorID = vendorID, TargetID = targetID, Distance = float.Parse(distance) };
            PopupMessage(player, LA("dAccep", player.UserIDString));
            DestroyUI(player);
        }
        [ConsoleCommand("QUI_CancelDelivery")]
        private void cmdCancelDelivery(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (!string.IsNullOrEmpty(PlayerProgress[player.userID].CurrentDelivery.TargetID))
            {
                PlayerProgress[player.userID].CurrentDelivery = new ActiveDelivery();
                DestroyUI(player);
                PopupMessage(player, LA("canConf", player.UserIDString));
            }
        }
        [ConsoleCommand("QUI_FinishDelivery")]
        private void cmdFinishDelivery(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (PlayerProgress[player.userID].CurrentDelivery != null && PlayerProgress[player.userID].CurrentDelivery.TargetID == arg.GetString(0))
            {
                var npcID = PlayerProgress[player.userID].CurrentDelivery.VendorID;
                var distance = PlayerProgress[player.userID].CurrentDelivery.Distance;
                var quest = vendors.DeliveryVendors[npcID];
                var rewardAmount = distance * quest.Multiplier;
                if (rewardAmount < 1) rewardAmount = 1;

                var reward = quest.Reward;
                    reward.Amount = rewardAmount;
                if (GiveReward(player, new List<RewardItem> { reward }))
                {
                    var rewards = GetRewardString(new List<RewardItem> { reward });
                    PopupMessage(player, $"{LA("rewRec", player.UserIDString)} {rewards}");
                    PlayerProgress[player.userID].CurrentDelivery = new ActiveDelivery();
                }
                DestroyUI(player);
            }
        }
        [ConsoleCommand("QUI_ChangeElement")]
        private void cmdChangeElement(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            CheckPlayerEntry(player);
            var panelName = arg.GetString(0);
            switch (panelName)
            {
                case "kill":
                    ListElement(player, QuestType.Kill);
                    return;
                case "gather":
                    ListElement(player, QuestType.Gather);
                    return;
                case "loot":
                    ListElement(player, QuestType.Loot);
                    return;
                case "craft":
                    ListElement(player, QuestType.Craft);
                    return;
                case "delivery":
                    PlayerDelivery(player);
                    return;
                case "personal":
                    PlayerStats(player);
                    return;
                case "editor":
                    if (player.IsAdmin)
                        DeletionEditMenu(player, LA("EDITOR", player.UserIDString), "QUI_EditQuest");
                    return;
                case "creation":
                    if (player.IsAdmin)
                    {
                        if (ActiveCreations.ContainsKey(player.userID))
                            ActiveCreations.Remove(player.userID);
                        CreationMenu(player);
                    }
                    return;
                case "objpage":
                    if (player.IsAdmin)
                    {
                        var pageNumber = arg.GetString(1);
                        CreateObjectiveMenu(player, int.Parse(pageNumber));
                    }
                    return;
                case "listpage":
                    {
                        var pageNumber = arg.GetString(2);
                        var type = ConvertStringToType(arg.GetString(1));
                        ListElement(player, type, int.Parse(pageNumber));
                    }
                    return;
                case "statspage":
                    {
                        var pageNumber = arg.GetString(1);
                        PlayerStats(player, int.Parse(pageNumber));
                    }
                    return;
            }
        }
        [ConsoleCommand("QUI_DestroyAll")]
        private void cmdDestroyAll(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (StatsMenu.Contains(player.userID))
                StatsMenu.Remove(player.userID);
            if (ActiveCreations.ContainsKey(player.userID))
                ActiveCreations.Remove(player.userID);
            if (ActiveEditors.ContainsKey(player.userID))
                ActiveEditors.Remove(player.userID);
            if (OpenMenuBind.Contains(player.userID))
                OpenMenuBind.Remove(player.userID);
            DestroyUI(player);
            OpenMap(player);
        }
        [ConsoleCommand("QUI_NewQuest")]
        private void cmdNewQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var questType = arg.GetString(0);
                var Type = ConvertStringToType(questType);
                if (Type == QuestType.Delivery)
                {
                    DeliveryHelp(player);
                    return;
                }

                ActiveCreations.Add(player.userID, new QuestCreator { type = Type, entry = new QuestEntry { Rewards = new List<RewardItem>() }, item = new RewardItem() });
                DestroyUI(player);
                CreationHelp(player);
            }
        }
        [ConsoleCommand("QUI_AddVendor")]
        private void cmdAddVendor(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var vendorType = arg.GetString(0);
                bool isVendor = false;
                if (vendorType == "1")
                    isVendor = true;
                if (!AddVendor.ContainsKey(player.userID))
                    AddVendor.Add(player.userID, isVendor);
                DestroyUI(player);
                DeliveryHelp(player, 1);
            }
        }
        [ConsoleCommand("QUI_SelectObj")]
        private void cmdSelectObj(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var questItem = string.Join(" ", arg.Args);
                QuestCreator Creator;
                if (ActiveCreations.ContainsKey(player.userID))
                    Creator = ActiveCreations[player.userID];
                else Creator = ActiveEditors[player.userID];

                Creator.entry.Objective = questItem;
                if (DisplayNames.ContainsKey(questItem))
                    Creator.entry.ObjectiveName = DisplayNames[questItem];
                else
                    Creator.entry.ObjectiveName = questItem;

                Creator.partNum++;
                DestroyUI(player);

                CreationHelp(player, 2);
            }
        }
        [ConsoleCommand("QUI_RewardType")]
        private void cmdRewardType(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var rewardType = arg.GetString(0);
                QuestCreator Creator;

                if (ActiveCreations.ContainsKey(player.userID))
                    Creator = ActiveCreations[player.userID];
                else Creator = ActiveEditors[player.userID];

                bool isRP = false;
				bool isKR = false;
                bool isCoins = false;
                bool isHuntXP = false;
                string name = "";

                switch (rewardType)
                {
                    case "rp":
                        isRP = true;
                        name = LA("RP", player.UserIDString);
                        break;
					case "kr":
                        isKR = true;
                        name = LA("KR", player.UserIDString);
                        break;
                    case "coins":
                        isCoins = true;
                        name = LA("Coins", player.UserIDString);
                        break;
                    case "huntxp":
                        isHuntXP = true;
                        name = LA("HuntXP", player.UserIDString);
                        break;
                    default:
                        break;
                }
                Creator.partNum = 5;
                if (Creator.type != QuestType.Delivery)
                {
                    Creator.item.isRP = isRP;
					Creator.item.isKR = isKR;
                    Creator.item.isCoins = isCoins;
                    Creator.item.isHuntXP = isHuntXP;
                    Creator.item.DisplayName = name;
                    CreationHelp(player, 5);
                }
                else
                {
                    Creator.deliveryInfo.Reward.isRP = isRP;
      
					Creator.deliveryInfo.Reward.isKR = isKR;
      
                    Creator.deliveryInfo.Reward.isCoins = isCoins;
      
                    Creator.deliveryInfo.Reward.isHuntXP = isHuntXP;
      
                    Creator.deliveryInfo.Reward.DisplayName = name;
      
                    DeliveryHelp(player, 3);
                }
            }
        }
        [ConsoleCommand("QUI_ClaimReward")]
        private void cmdClaimReward(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            var questName = string.Join(" ", arg.Args);
            var quest = GetQuest(questName);
            if (quest == null) return;

            if (IsQuestCompleted(player.userID, questName))
            {
                if (GiveReward(player, quest.Rewards))
                {
                    var rewards = GetRewardString(quest.Rewards);
                    PopupMessage(player, $"{LA("rewRec", player.UserIDString)} {rewards}");
                    PlayerProgress[player.userID].Quests[questName].RewardClaimed = true;
                }
                else
                {
                    PopupMessage(player, LA("rewError", player.UserIDString));
                }
            }
            PlayerStats(player);
        }
        bool IsQuestCompleted(ulong playerId, string questName = "") => !string.IsNullOrEmpty(questName) && PlayerProgress[playerId].Quests[questName].Status == QuestStatus.Completed;

        [ConsoleCommand("QUI_CancelQuest")]
        private void cmdCancelQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            var questName = string.Join(" ", arg.Args);
            DestroyUI(player);
            ConfirmCancellation(player, questName);
        }
        [ConsoleCommand("QUI_ItemDeduction")]
        private void cmdItemDeduction(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                QuestCreator Creator;
                if (ActiveCreations.ContainsKey(player.userID))
                    Creator = ActiveCreations[player.userID];
                else Creator = ActiveEditors[player.userID];
                switch (arg.Args[0])
                {
                    case "0":
                        Creator.entry.ItemDeduction = false;
                        break;
                    default:
                        Creator.entry.ItemDeduction = true;
                        break;
                }
                CreationHelp(player, 9);
            }
        }
        [ConsoleCommand("QUI_ConfirmCancel")]
        private void cmdConfirmCancel(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            var questName = string.Join(" ", arg.Args);
            if (questName.Contains("reject"))
            {
                DestroyUI(player);
                if (StatsMenu.Contains(player.userID))
                    CreateEmptyMenu(player);
                else CreateMenu(player);
                PlayerStats(player);
                return;
            }
            var quest = GetQuest(questName);
            if (quest == null) return;
            var info = PlayerProgress[player.userID];
            var items = info.RequiredItems;
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].ShortName == questName && items[i].Type == info.Quests[questName].Type)
                {
                    items.Remove(items[i]);
                    break;
                }
            }
            var type = (QuestType)GetQuestType(questName);
            if (type != QuestType.Delivery && type != QuestType.Kill)
            {
                string questitem = quest.Objective;
                int amount = info.Quests[questName].AmountCollected;
                if (quest.ItemDeduction)
                    ReturnItems(player, questitem, amount);
            }
            PlayerProgress[player.userID].Quests.Remove(questName);

            if (StatsMenu.Contains(player.userID))
                CreateEmptyMenu(player);
            else CreateMenu(player);

            PlayerStats(player);
        }
        [ConsoleCommand("QUI_RemoveCompleted")]
        private void cmdRemoveCompleted(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            var questName = string.Join(" ", arg.Args);
            var quest = GetQuest(questName);
            if (quest == null) return;
            var info = PlayerProgress[player.userID];
            var items = info.RequiredItems;
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].ShortName == questName && items[i].Type == info.Quests[questName].Type)
                {
                    items.Remove(items[i]);
                    break;
                }
            }
            PlayerProgress[player.userID].Quests.Remove(questName);
            PlayerStats(player);
        }
        [ConsoleCommand("QUI_DeleteQuest")]
        private void cmdDeleteQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                if (arg.Args == null || arg.Args.Length == 0)
                {
                    DeletionEditMenu(player, LA("REMOVER", player.UserIDString), "QUI_ConfirmDelete");
                    return;
                }
                if (arg.Args.Length == 1 && arg.Args[0] == "reject")
                {
                    DestroyUI(player);
                    CreateMenu(player);
                    DeletionEditMenu(player, LA("REMOVER", player.UserIDString), "QUI_ConfirmDelete");
                    return;
                }
                var questName = string.Join(" ", arg.Args);
                RemoveQuest(questName);
                DestroyUI(player);
                CreateMenu(player);
                DeletionEditMenu(player, LA("REMOVER", player.UserIDString), "QUI_ConfirmDelete");
            }
        }
        [ConsoleCommand("QUI_DeleteNPCMenu")]
        private void cmdDeleteNPCMenu(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                DeleteNPCMenu(player);
            }
        }
        [ConsoleCommand("QUI_RemoveVendor")]
        private void cmdRemoveVendor(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var ID = arg.Args[0];
                foreach(var npc in vendors.QuestVendors)
                {
                    if (npc.Key == ID)
                    {
                        RemoveVendor(player, ID, true);
                        return;
                    }
                }
                foreach (var npc in vendors.DeliveryVendors)
                {
                    if (npc.Key == ID)
                    {
                        RemoveVendor(player, ID, false);
                        return;
                    }
                }
            }
        }
        [ConsoleCommand("QUI_ConfirmDelete")]
        private void cmdConfirmDelete(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                var questName = string.Join(" ", arg.Args);
                DestroyUI(player);
                ConfirmDeletion(player, questName);
            }
        }
        [ConsoleCommand("QUI_EditQuest")]
        private void cmdEditQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                if (ActiveEditors.ContainsKey(player.userID))
                    ActiveEditors.Remove(player.userID);
                ActiveEditors.Add(player.userID, new QuestCreator());

                var questName = string.Join(" ", arg.Args);
                var Quest = GetQuest(questName);
                if (Quest == null) return;
                ActiveEditors[player.userID].entry = Quest;
                ActiveEditors[player.userID].oldEntry = Quest.QuestName;
                ActiveEditors[player.userID].type = (QuestType)GetQuestType(questName);
                ActiveEditors[player.userID].item = new RewardItem();
                QuestEditorMenu(player);
            }
        }
        [ConsoleCommand("QUI_EditQuestVar")]
        private void cmdEditQuestVar(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                if (ActiveEditors.ContainsKey(player.userID))
                {
                    var Creator = ActiveEditors[player.userID];

                    DestroyUI(player);
                    switch (arg.Args[0].ToLower())
                    {
                        case "name":
                            CreationHelp(player, 0);
                            break;
                        case "description":
                            Creator.partNum = 3;
                            CreationHelp(player, 3);
                            break;
                        case "objective":
                            Creator.partNum = 1;
                            CreationHelp(player, 1);
                            break;
                        case "amount":
                            Creator.partNum = 2;
                            CreationHelp(player, 2);
                            break;
                        case "reward":
                            Creator.partNum = 4;
                            CreationHelp(player, 10);
                            break;
                        default:
                            return;
                    }
                }
            }
        }
        [ConsoleCommand("QUI_RemoveReward")]
        private void cmdEditReward(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                QuestCreator Creator = ActiveEditors[player.userID];
                var amount = arg.Args[0];
                var dispName = arg.Args[1];
                foreach(var entry in Creator.entry.Rewards)
                {
                    if (entry.Amount == float.Parse(amount) && entry.DisplayName == dispName)
                    {
                        Creator.entry.Rewards.Remove(entry);
                        break;
                    }
                }
                SaveRewardsEdit(player);
            }
        }
        [ConsoleCommand("QUI_EndEditing")]
        private void cmdEndEditing(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                CreateMenu(player);
                DeletionEditMenu(player, LA("EDITOR", player.UserIDString), "QUI_EditQuest");
            }
        }
        [ConsoleCommand("QUI_SaveQuest")]
        private void cmdSaveQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                bool creating = false;
                if (ActiveCreations.ContainsKey(player.userID))
                    creating = true;
                SaveQuest(player, creating);
            }
        }
        [ConsoleCommand("QUI_ExitQuest")]
        private void cmdExitQuest(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                bool creating = false;
                if (ActiveCreations.ContainsKey(player.userID))
                    creating = true;
                ExitQuest(player, creating);
            }
        }
        [ConsoleCommand("QUI_AddReward")]
        private void cmdAddReward(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                QuestCreator Creator;
                if (ActiveCreations.ContainsKey(player.userID))
                    Creator = ActiveCreations[player.userID];
                else Creator = ActiveEditors[player.userID];
                Creator.partNum = 4;
                CreationHelp(player, 4);
            }
        }
        [ConsoleCommand("QUI_RewardFinish")]
        private void cmdFinishReward(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (player.IsAdmin)
            {
                CreationHelp(player, 8);
            }
        }
        [ConsoleCommand("QUI_OpenQuestMenu")]
        private void cmdOpenQuestMenu(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            if (!OpenMenuBind.Contains(player.userID))
            {
                cmdOpenMenu(player, "q", new string[0]);
                OpenMenuBind.Add(player.userID);
            }
        }
        #endregion

        #region Chat Commands

        [ChatCommand("q")]
        void cmdOpenMenu(BasePlayer player, string command, string[] args)
        {
            if (AddVendor.ContainsKey(player.userID)) return;
            if ((configData.UseNPCVendors && player.IsAdmin) || !configData.UseNPCVendors)
            {
                CheckPlayerEntry(player);
                CreateMenu(player);
                return;
            }
            if (configData.UseNPCVendors)
            {
                CheckPlayerEntry(player);
                if (!StatsMenu.Contains(player.userID))
                    StatsMenu.Add(player.userID);

                CreateEmptyMenu(player);
                PlayerStats(player);
                PopupMessage(player, LA("noVendor", player.UserIDString));
            }
        }

        [ChatCommand("questnpc")]
        void cmdQuestNPC(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;
            var NPC = FindEntity(player);
            if (NPC != null)
            {
                var isRegistered = isNPCRegistered(NPC.UserIDString);
                if (!string.IsNullOrEmpty(isRegistered))
                {
                    SendMSG(player, isRegistered, LA("Quest NPCs:", player.UserIDString));
                    return;
                }
                string name = "";
                if (args.Length >= 1)
                    name = string.Join(" ", args);

                if (AddVendor.ContainsKey(player.userID))
                {
                    var pos = new NPCInfo { x = NPC.transform.position.x, z = NPC.transform.position.z, ID = NPC.UserIDString };
      
                    if (AddVendor[player.userID])
                    {
                        pos.Name = $"QuestVendor_{vendors.QuestVendors.Count + 1}";
                        vendors.QuestVendors.Add(NPC.UserIDString, pos);
                        SendMSG(player, LA("newVSucc", player.UserIDString), LA("Quest NPCs:", player.UserIDString));
                        if (NPC != null)
                        {
                            NPC.displayName = pos.Name;
                            NPC.UpdateNetworkGroup();
                        }
                        AddMapMarker(pos.x, pos.z, pos.Name, configData.LustyMapIntegration.Icon_Vendor + ".png");
                        AddVendor.Remove(player.userID);
                        SaveVendorData();
                        DestroyUI(player);
                        OpenMap(player);
                        return;
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(name))
                            name= $"Delivery_{ vendors.DeliveryVendors.Count + 1}";

                        if (ActiveCreations.ContainsKey(player.userID))
                            ActiveCreations.Remove(player.userID);
                        pos.Name = name;

                        ActiveCreations.Add(player.userID, new QuestCreator
                        {
                            deliveryInfo = new DeliveryInfo
      
                            {
                                Info = pos,
      
                                Reward = new RewardItem()
                            },
                            partNum = 4,
                            type = QuestType.Delivery
                        });
                        DeliveryHelp(player, 2);
                    }
                }
            }
            else SendMSG(player, LA("noNPC", player.UserIDString));
        }

        #endregion

        #region Data Management
        void SaveQuestData()
        {
            questData.Quest = Quest;
            Quest_Data.WriteObject(questData);
        }
        void SaveVendorData()
        {
            Quest_Vendors.WriteObject(vendors);
        }
        void SavePlayerData()
        {
            playerData.PlayerProgress = PlayerProgress;
            Player_Data.WriteObject(playerData);
        }
        void SaveDisplayNames()
        {
            itemNames.DisplayNames = DisplayNames;
            Item_Names.WriteObject(itemNames);
        }
        private void SaveLoop()
        {
            SavePlayerData();
            timer.Once(900, () => SaveLoop());
        }
        void LoadData()
        {
            try
            {
                questData = Quest_Data.ReadObject<QuestData>();
                Quest = questData.Quest;
            }
            catch
            {
                Puts("Couldn't load quest data, creating new datafile");
                questData = new QuestData();
            }
            try
            {
                vendors = Quest_Vendors.ReadObject<NPCData>();
            }
            catch
            {
                Puts("Couldn't load quest vendor data, creating new datafile");
                vendors = new NPCData();
            }
            try
            {
                playerData = Player_Data.ReadObject<PlayerData>();
                PlayerProgress = playerData.PlayerProgress;
            }
            catch
            {
                Puts("Couldn't load player data, creating new datafile");
                playerData = new PlayerData();
                PlayerProgress = new Dictionary<ulong, PlayerQuestData>();
            }
            try
            {
                itemNames = Item_Names.ReadObject<ItemNames>();
            }
            catch
            {
                Puts("Couldn't load item display name data, creating new datafile");
                itemNames = new ItemNames();
            }
        }
        #endregion

        #region Data Storage
        class QuestData
        {
            public Dictionary<QuestType, Dictionary<string, QuestEntry>> Quest = new Dictionary<QuestType, Dictionary<string, QuestEntry>>
            {
                {QuestType.Craft, new Dictionary<string, QuestEntry>() },
                {QuestType.Delivery, new Dictionary<string, QuestEntry>() },
                {QuestType.Gather, new Dictionary<string, QuestEntry>() },
                {QuestType.Kill, new Dictionary<string, QuestEntry>() },
                {QuestType.Loot, new Dictionary<string, QuestEntry>() }
            };
        }
        class PlayerData
        {
            public Dictionary<ulong, PlayerQuestData> PlayerProgress = new Dictionary<ulong, PlayerQuestData>();
        }
        class NPCData
        {
            public Dictionary<string, NPCInfo> QuestVendors = new Dictionary<string, NPCInfo>();
      
            public Dictionary<string, DeliveryInfo> DeliveryVendors = new Dictionary<string, DeliveryInfo>();
      
        }
        #endregion

        #region Config
        class UIColor
        {
            public string Color { get; set; }
            public float Alpha { get; set; }
        }
        class Colors
        {
            public string TextColor_Primary { get; set; }
            public string TextColor_Secondary { get; set; }
            public UIColor Background_Dark { get; set; }
            public UIColor Background_Light { get; set; }
            public UIColor Button_Standard { get; set; }
            public UIColor Button_Accept { get; set; }
            public UIColor Button_Completed { get; set; }
            public UIColor Button_Cancel { get; set; }
            public UIColor Button_Pending { get; set; }
        }
        class Keybinds
        {
            public bool Autoset_KeyBind { get; set; }
            public string KeyBind_Key { get; set; }
        }
        class LMIcons
        {
            public string Icon_Vendor { get; set; }
            public string Icon_Delivery { get; set; }
        }
        class ConfigData
        {
            public Colors Colors { get; set; }
            public Keybinds KeybindOptions { get; set; }
            public LMIcons LustyMapIntegration { get; set; }
            public bool DisableUI_FadeIn { get; set; }
            public bool UseNPCVendors { get; set; }

        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            configData = Config.ReadObject<ConfigData>();
        }
        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            ConfigData config = new ConfigData
            {
                DisableUI_FadeIn = false,

                UseNPCVendors = false,
                Colors = new Colors
                {
                    Background_Dark = new UIColor { Color = "#2a2a2a", Alpha = 0.98f },
                    Background_Light = new UIColor { Color = "#696969", Alpha = 0.3f },
                    Button_Accept = new UIColor { Color = "#00cd00", Alpha = 0.9f },
                    Button_Cancel = new UIColor { Color = "#8c1919", Alpha = 0.9f },
                    Button_Completed = new UIColor { Color = "#829db4", Alpha = 0.9f },
                    Button_Pending = new UIColor { Color = "#a8a8a8", Alpha = 0.9f },
                    Button_Standard = new UIColor { Color = "#2a2a2a", Alpha = 0.9f },
                    TextColor_Primary = "#ce422b",
                    TextColor_Secondary = "#939393"
                },
                LustyMapIntegration = new LMIcons
                {
                    Icon_Delivery = "deliveryicon",
                    Icon_Vendor = "vendoricon"
                },
                KeybindOptions = new Keybinds
                {
                    Autoset_KeyBind = false,
                    KeyBind_Key = "k"
                }
            };
            SaveConfig(config);
        }
        void SaveConfig(ConfigData config)
        {
            Config.WriteObject(config, true);
        }
        #endregion

        #region Messaging
        void SendMSG(BasePlayer player, string message, string keyword = "")
        {
            message = $"{textSecondary}{message}</color>";
            if (!string.IsNullOrEmpty(keyword))
                message = $"{textPrimary}{keyword}</color> {message}";
            SendReply(player, message);
        }
        Dictionary<string, string> Localization = new Dictionary<string, string>
        {
            { "Quests", "Задания:" },
            { "delInprog", "У вас уже есть миссия" },
            { "QC", "Конструткор:" },
            { "noAItem", "Не удалось найти активный элемент. Поместите предмет в свои руки, затем введите " },
            { "nameExists", "Задание с таким именем уже существует" },
            { "objAmount", "Вам нужно ввести объективную сумму" },
            { "OA", "Целевая сумма:" },
            { "Desc", "Описание:" },
            { "noRM", "Вам нужно ввести множитель вознаграждения" },
            { "RM", "Множитель вознаграждения:" },
            { "noRA", "Вам нужно ввести сумму вознаграждения" },
            { "RA", "Сумма вознаграждения:" },
            { "noCD", "Вы должны ввести сумму перезарядки" },
            { "CD1", "Таймер перезарядки (мин.):" },
            { "qComple", "Вы выполнили задание" },
            { "claRew", "Вы можете получить свою награду" },
            { "qCancel", "Вы отменили это задание." },
            { "rewRet", "был возвращен вам" },
            { "minDV", "Для миссий доставки требуется как минимум 2 поставщика. Добавьте еще нескольких поставщиков для активации миссий доставки" },
            { "DVSucc", "Вы успешно добавили нового поставщика поставки" },
            { "saveQ", "Вы успешно сохранили задание:" },
            { "QCCancel", "Вы отменили создание квеста" },
            { "KillOBJ", "Здание на убийства" },
            { "CraftOBJ", "Задание на создание" },
            { "GatherOBJ", "Задание на добычу" },
            { "LootOBJ", "Задание на поиск" },
            { "DelvOBJ", "Delivery quests require you to deliver a package from one vendor to another" },
            { "aQVReg", "This NPC is already a registered Quest vendor" },
            { "aDVReg", "This NPC is already a registed Delivery vendor" },
            { "Kill", "Убийства" },
            { "Gather", "Добыча" },
            { "Craft", "Создание" },
            { "Loot", "Поиск" },
            { "Delivery", "Поставщики" },
            { "Your Quests", "Ваши задания" },
            { "Create Quest", "Создать задание" },
            { "Edit Quest", "Изменить задание" },
            { "Delete Quest", "Удалить задание" },
            { "Close", "Закрыть" },
            { "Next", "Далее" },
            { "Back", "Назад" },
            { "noQ", "В настоящее время нет" },
            { "quests", "Задания" },
            { "Pending", "в ожидании" },
            { "Completed", "Завершенно" },
            { "Accept Quest", "Принять" },
            { "Status:", "Статус:" },
            { "Description:", "Описание:" },
            { "Amount Required:", "Нужно:" },
            { "Reward:", "Награда:" },
            { "yqDesc", "Проверьте текущий прогресс для каждого задания" },
            { "STATS", "Статистика" },
            { "noQDSaved", "У вас нет сохраненных данных о заданиях" },
            { "Cancel Quest", "Отмена" },
            { "Claim Reward", "Забарть" },
            { "Remove", "Удалить" },
            { "Cooldown", "КД" },
            { "Collected:", "Собрано:" },
            { "Reward Claimed:", "Выдано:" },
            { "DELIVERY", "Постовщик" },
            { "noADM", "У вас нет активной миссии доставки" },
            { "Destination:", "Место назначения:" },
            { "Distance:", "Расстояние:" },
            { "Cancel", "Отмена" },
            { "selCreat", "Выберите тип квеста, чтобы начать создание" },
            { "CREATOR", "Создать" },
            { "creHelMen", "Это меню справки по созданию квеста" },
            { "creHelFol", "Следуйте инструкциям, введенным в чате" },
            { "creHelExi", "Вы можете выйти из квеста в любое время, набрав" },
            { "creHelName", "Чтобы продолжить, введите имя нового квеста!" },
            { "creHelObj", "Выберите цель поиска из списка" },
            { "creHelRA", "Введите требуемую сумму" },
            { "creHelQD", "Введите описание квеста" },
            { "creHelRT", "Выберите тип вознаграждения" },
            { "creHelNewRew", "Выберите награду для удаления или добавьте новую" },
            { "Coins", "Копейки" },
            { "RP", "Рубли" },
            { "HuntXP", "XP" },
            { "Item", "Вещь" },
            { "creHelRewA", "Введите сумму вознаграждения" },
            { "creHelIH", "Поместите предмет, который вы хотите выдать в качестве награды в ваших руках, и введите" },
            { "creHelAR", "Вы хотите добавить дополнительные вознаграждения?" },
            { "Yes", "Да" },
            { "No", "Нет" },
            { "creHelID", "Вы хотите включить дедукцию предмета (возьмите предметы у игрока при их сборке)?" },
            { "creHelCD", "Введите время перезарядки (в минутах)" },
            { "creHelSQ", "Вы успешно создали новый квест. Для подтверждения нажмите «Сохранить задание»." },
            { "Save Quest", "Сохранить задание" },
            { "Name:", "Имя:" },
            { "Objective:", "Задание:" },
            { "CDMin", "КД (минут):" },
            { "Quest Type:", "Тип:" },
            { "Required Amount:", "Требуется:" },
            { "Item Deduction:", "Вычитание предмета:" },
            { "delHelMen", "Здесь вы можете добавить миссии доставки и поставщиков" },
            { "delHelChoo", "Выберите поставщика драйверов (миссию доставки) или поставщика Quest (меню квеста на основе npc)" },
            { "Quest Vendor", "Продавец квеста" },
            { "Delivery Vendor", "Поставщик поставки" },
            { "delHelNewNPC", "Встаньте перед лицом NPC, которого хотите добавить и введите" },
            { "delHelMult", "Награда за доставку миссии основана на расстоянии X множителя. Помните об этом при выборе вознаграждения." },
            { "delHelRM", "Введите множитель вознаграждения (за единицу)." },
            { "delHelRM1", "Например, если доставка" },
            { "delHelRM2", "и множитель равен" },
            { "delHelRM3", "общая сумма вознаграждения будет равна" },
            { "delHelDD", "Введите описание доставки." },
            { "delHelNewV", "Вы успешно добавили нового поставщика поставки. Для подтверждения нажмите «Сохранить задание»." },
            { "Accept", "Принять" },
            { "Decline", "Отклонить" },
            { "Claim", "Отказаться" },
            { "delComplMSG", "Благодарим за доставку" },
            { "Delete NPC", "Удалить NPC" },
            { "REMOVER", "УДАЛЕНИЯ" },
            { "Delivery Vendors", "Поставщики поставок" },
            { "Quest Vendors", "Поставщики квестов" },
            { "confDel", "Вы уверены, что хотите удалить:" },
            { "confCan", "вы действительно хотите отменить:" },
            { "confCan2", "Любой прогресс, который вы совершили, будет потерян!" },
            { "EDITOR", "Редактор" },
            { "chaEdi", "Выберите значение для изменения" },
            { "Name", "Имя" },
            { "Description", "Описание" },
            { "Objective", "Задание" },
            { "Amount", "Требуется" },
            { "Reward", "Награда" },
            { "qAccep", "Вы приняли квест" },
            { "dAccep", "Вы приняли миссию доставки" },
            { "canConf", "Вы отменили миссию доставки" },
            { "rewRec", "Вы получили" },
            { "rewError", "Вы получили разрешение на получение вашей награды. Пожалуйста, свяжитесь с администратором " },
            { "Quest NPCs:", "Квесты NPC:" },
            { "newVSucc", "Вы успешно добавили нового продавца Quest" },
            { "noNPC", "Не удалось найти действительный NPC" },
            { "addNewRew", "Добавить награду" },
            { "NoTP", "Вы не можете телепортироваться во время выполнения миссии доставки" },
            { "noVendor", "Чтобы принять новые квесты, вы должны найти продавца квеста" },
        };
        #endregion
    }
}


// --- End of file: Quests.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ConnectionFix.cs ---
// --- Original Local Path: ConnectionFix.cs ---

﻿using System.Linq;
using Network;

namespace Oxide.Plugins 
{
    [Info("ConnectionFix", "Zirper", "1.0.0")]
    class ConnectionFix : RustPlugin
    {
        void OnClientAuth(Connection connection)
        {
            NextTick(() =>
            {
                if (BasePlayer.FindByID(connection.userid) != null)
                    BasePlayer.FindByID(connection.userid).OnDisconnected();
                if (ConnectionAuth.m_AuthConnection.Any((Connection item) => item.userid == connection.userid))
                    ConnectionAuth.m_AuthConnection.Remove(connection);
            });
        }
    }
}


// --- End of file: ConnectionFix.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/FoundationDrop.cs ---
// --- Original Local Path: FoundationDrop.cs ---

﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using ConVar;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Oxide.Game.Rust.Libraries;
using UnityEngine;
using Random = Oxide.Core.Random;

namespace Oxide.Plugins
{  
    [Info("Foundation Drop", "Server-rust.ru", "0.0.81")]
    public class FoundationDrop : RustPlugin
    {
        #region References

        [PluginReference] private Plugin Backpack;

        #endregion
        
        #region Classes

        private class Event
        {
            public double StartTime;
            public bool Started = false;
            public bool Finished = false;
            public int Received = 0;
            

            public Timer StartTimer;
            public Timer DestroyTimer;
            
            public Dictionary<ulong, Vector3> PlayerConnected = new Dictionary<ulong, Vector3>();
            public List<List<BaseEntity>> BlockList = new List<List<BaseEntity>>();
            public int EventHashID = 12;

            public void JoinEvent(BasePlayer player)
            {
                if (Started)
                {
                    SendMessage(player, $"Мероприятие уже началось, вы <color=#538fef>не успели</color>!");
                    return;
                }
                else
                {
                    if (PlayerConnected.ContainsKey(player.userID))
                    {
                        SendMessage(player, $"Вы уже участник мероприятия!");
                        return;
                    }
                    if (player.inventory.AllItems().Length != 0)
                    {
                        SendMessage(player, $"На мероприятие можно попасть только <color=#538fef><b>полностью голым</b></color>");
                        return;
                    }
                    
                    CuiHelper.DestroyUi(player, CONF_UI_MainLayer);
                    player.inventory.Strip();
                    player.SendNetworkUpdate();
                    
                    PlayerConnected.Add(player.userID, player.transform.position);
                    ClearTeleport(player, EventPosition + new Vector3(0, 5, 0));
                    player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, true);
                    
                    UI_DrawInfo(player);
                }
            }

            public void LeftEvent(BasePlayer player, bool external = false)
            {
                player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false);
                player.inventory.Strip();
                player.StartSleeping();
                
                ClearTeleport(player, PlayerConnected[player.userID]);

                PlayerConnected.Remove(player.userID);
                if ((PlayerConnected.Count == 0 || Finished) && !external)
                {
                    if (Received < instance.config.CONF_MaxWinners)
                    {
                        SendMessage(player, $"Вы стали <b><color=#538fef>победителем</color></b> этого мероприятия!");
                        var finish = instance.config.RewardList.ToList().GetRandom();
                        
                        if (finish.Key.StartsWith("command"))
                        {
                            string workingPart = finish.Key.Split('+')[1];
                            instance.Server.Command(workingPart.Replace("%STEAMID%", player.UserIDString));
                        }
                        else if (finish.Key.StartsWith("item"))
                        {
                            string itemName = finish.Key.Split('+')[1];
                            int itemAmount = finish.Value;

                            Item prize = ItemManager.CreateByPartialName(itemName, itemAmount);
                            prize.MoveToContainer(player.inventory.containerMain);

                            player.Command("note.inv", new object[] {prize.info.itemid, prize.amount});
                            Received++;
                        }
                    }
                }
            }

            public void HandlePlayers()
            {
                if (Finished)
                    return;
                
                List<ulong> copyList = PlayerConnected.Keys.ToList();
                foreach (var check in copyList)
                {
                    BasePlayer target = BasePlayer.FindByID(check);
                    if (target == null)
                    {
                        PlayerConnected.Remove(check);
                    }
                    else
                    {
                        if (target.IsSwimming())
                            LeftEvent(target);
                    }
                }

                if (PlayerConnected.Count == 1)
                {
                    instance.StopEvent();
                    return;
                }

                StartTimer = instance.timer.Once(1, HandlePlayers);
            }

            public void StartEvent(int startDelay)
            {
                Interface.Oxide.LogWarning($"Foundation Drop announced!");
                BasePlayer.activePlayerList.ForEach(p => SendMessage(p, "Началась регистрация на мероприятие, нажмите на кнопку <b><color=#538fef>зарегистрироваться</color></b>"));
                StartTimer = instance.timer.Once(startDelay, () =>
                {
                    BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_MainLayer));
                    BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_SideLayer));
                    
                    List<ulong> removeKeys = new List<ulong>();
                    foreach (var check in PlayerConnected)
                    {
                        BasePlayer target = BasePlayer.FindByID(check.Key);
                        if (target != null)
                        {
                            CuiHelper.DestroyUi(target, CONF_UI_SideLayer);
                            continue;
                        }
                        else
                        {
                            removeKeys.Add(check.Key);
                        }
                    }

                    foreach (var check in removeKeys)
                        PlayerConnected.Remove(check);
                    
                    
                    if (PlayerConnected.Count <= 1)
                    {
                        instance.StopEvent(true);
                        return;
                    }
                    
                    BasePlayer.activePlayerList.ForEach(p =>
                    {
                        if (!PlayerConnected.ContainsKey(p.userID))
                            return;
                        
                        if (instance.config.CONF_GivePistol)
                        {
                            Item item = ItemManager.CreateByPartialName("pistol.m92", 1);
                            item.name = $"Опасное оружие";

                            item.GetHeldEntity().GetComponent<BaseProjectile>().primaryMagazine.capacity = instance.config.CONF_GivePistolAmount;
                            item.GetHeldEntity().GetComponent<BaseProjectile>().primaryMagazine.contents = instance.config.CONF_GivePistolAmount;
                        
                            item.MoveToContainer(p.inventory.containerBelt);
                        }
                    });
                    
                    instance.DropFoundation();
                    HandlePlayers();
                });
            }
            
            public void InitializeEvent(int startDelay)
            {
                Started = false;
                StartTime = CurrentTime() + startDelay;
                ServerMgr.Instance.StartCoroutine(instance.InitializeFoundation(startDelay));
            }

            public void FinishEvent(bool external = false)
            {
                Finished = true;

                StartTimer?.Destroy();
                DestroyTimer?.Destroy();
               
                BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_MainLayer));
                BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_SideLayer));
                BasePlayer.activePlayerList.ForEach(p => p.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false));
                var listPredicted = BasePlayer.activePlayerList.Where(p => cEvent.PlayerConnected.ContainsKey(p.userID));
                foreach (var check in listPredicted)
                    LeftEvent(check, external);
                
                foreach (var check in BlockList.SelectMany(p => p))
                    check?.Kill();

                string message = external ? "Мероприятие закончено по <b><color=#538fef>техническим причинам</color></b>!" : "Мероприятие окончено, всем <b><color=#538fef>спасибо</color></b> за участие!";
                BasePlayer.activePlayerList.ForEach(p => SendMessage(p, message)); 
            }
        }

        private class Configuration
        {
            [JsonProperty("Размер арены в квадратах")]
            public int CONF_ArenaSize = 10;
            [JsonProperty("Выдавать ли специальный пистолет для разрушения блоков")]
            public bool CONF_GivePistol = true;
            [JsonProperty("Количество патронов в пистолете")]
            public int CONF_GivePistolAmount = 1;
            [JsonProperty("Интвервал между удалениями блоков")]
            public float CONF_DelayDestroy = 0.1f;
            [JsonProperty("Время ожидания игроков с момента объявления ивента")]
            public int CONF_WaitTime = 30;
            [JsonProperty("Максимальное количество победителей")]
            public int CONF_MaxWinners = 1;
            
            [JsonProperty("Список наград (выбирается случайно)")]
            public Dictionary<string, int> RewardList;

            public static Configuration GetConfiguration()
            {
                return new Configuration()
                {
                    RewardList = new Dictionary<string, int>
                    {
                        ["item+rifle.ak"] = 1,
                        ["command+ownerid 76561190000000000"] = 1 
						/* 
						 * Пример: command+ownerid 76561190000000000 - Выдать права администратора
						 * Пример: command+oxide.grant user 76561190000000000 skin.box - Выдать права на использования команды /skin
						 *
						 */
                    }
                };
            }
        }

        #endregion
        
        #region Variables

        private Configuration config;
        
        #region System

        private static FoundationDrop instance;
        private static Vector3 EventPosition = new Vector3((float) World.Size/2, 10, (float) World.Size/2);
        private static Event cEvent = null;
        private static string CONF_UI_MainLayer = "UI_DF_Layer";
        private static string CONF_UI_SideLayer = "UI_DF_Layer";

        #endregion

        #endregion

        #region Initialization
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config?.RewardList == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Error reading config, creating one new config!");
                LoadDefaultConfig();
            }
            
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig()
        {
            config = Configuration.GetConfiguration();
        } 
        
        protected override void SaveConfig() => Config.WriteObject(config);
        
        private void OnServerInitialized()
        {
            instance = this;
        }

        private void Unload()
        {
            if (cEvent != null)
            {
                StopEvent(true);
            }
            
            BasePlayer.activePlayerList.ForEach(p => p.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false));
            
            foreach (var check in UnityEngine.Object.FindObjectsOfType<BaseEntity>().Where(p => p.name == "S23qRT").Where(p => !p.IsDestroyed))
                check?.Kill();
            
            BasePlayer.activePlayerList.ForEach(p =>
            {
                CuiHelper.DestroyUi(p, CONF_UI_MainLayer);
                CuiHelper.DestroyUi(p, CONF_UI_SideLayer);
            });
        }

        #endregion

        #region Hooks
        
        private object OnServerCommand(ConsoleSystem.Arg arg)
        {
            if (arg.cmd.FullName.ToLower().Contains("backpack.open") && arg.Player() != null && cEvent != null &&
                cEvent.PlayerConnected.ContainsKey(arg.Player().userID))
                return false;

            return null;
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity is BasePlayer)
            {
                BasePlayer player = entity as BasePlayer;
                
                if (cEvent != null && cEvent.PlayerConnected.ContainsKey(player.userID))
                {
                    info.damageTypes.ScaleAll(0);
                    return false;
                }
            }

            return null;
        }

        private void OnPlayerDie(BasePlayer player)
        {
            if (cEvent != null && cEvent.PlayerConnected.ContainsKey(player.userID))
            {
                cEvent.LeftEvent(player);
                return;
            }
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (cEvent != null && cEvent.PlayerConnected.ContainsKey(player.userID))
            {
                cEvent.LeftEvent(player);
                return;
            }
        }

        #endregion

        #region Commands

        [ConsoleCommand("UI_FE_Handler")]
        private void cmdConsoleHandler(ConsoleSystem.Arg args)
        {
            if (cEvent == null)
                return;
            
            if (args.HasArgs(1))
            {
                if (args.Args[0] == "join" && !cEvent.PlayerConnected.ContainsKey(args.Player().userID))
                {
                    cEvent.JoinEvent(args.Player());
                }
            }
        }
        
        [ConsoleCommand("fe.start")]
        private void cmdStartEvent(ConsoleSystem.Arg args)
        {
            if (args.Player() != null)
                return;

            StartEvent();
        }

        [ConsoleCommand("fe.stop")]
        private void cmdStopEvent(ConsoleSystem.Arg args)
        {                                             
            if (args.Player() != null)
                return;
            
            StopEvent(true);
        }

        #endregion
        
        #region Functions

        private static void SendMessage(BasePlayer player, string text)
        {
            player.ChatMessage($"<size=16>Мероприятие '<color=#538fef>падающие платформы</color>'</size>\n{text}");
        }

        private static void ClearTeleport(BasePlayer player, Vector3 position)
        {
            if (player.net?.connection != null)
            {
                player.ClientRPCPlayer(null, player, "StartLoading");
            }
            player.StartSleeping();
            player.MovePosition(position);
            
            if (player.net?.connection != null)
            {
                player.ClientRPCPlayer(null, player, "ForcePositionTo", position);
                player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            }
            
            player.UpdateNetworkGroup();
            player.SendNetworkUpdateImmediate(false);
            if (player.net?.connection == null)
            {
                return;
            }
            player.SendFullSnapshot();
        }

        private void StartEvent()
        {
            if (cEvent != null)
            {
                PrintError("Попытка начать новое мероприятие, пока не закончено предыдущее!");
                return;
            }
            else
            {
                cEvent = new Event();
                cEvent.InitializeEvent(instance.config.CONF_WaitTime);
            }
        }

        private void StopEvent(bool external = false)
        {
            if (cEvent == null)
            {
                PrintError("Попытка отключить несуществующий ивент!");
                return;
            }
            else
            {
                BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_MainLayer));
                BasePlayer.activePlayerList.ForEach(p => CuiHelper.DestroyUi(p, CONF_UI_SideLayer));
                BasePlayer.activePlayerList.ForEach(p => p.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false));
                cEvent.FinishEvent(external);
                cEvent = null;
            }
        }

        private IEnumerator InitializeFoundation(int startDelay)
        {
            for (int i = -instance.config.CONF_ArenaSize / 2; i < instance.config.CONF_ArenaSize / 2; i++)
            {
                for (int t = -instance.config.CONF_ArenaSize / 2; t < instance.config.CONF_ArenaSize / 2; t++)
                {
                    cEvent.BlockList.Add(new List<BaseEntity>());
                    for (int grade = 4; grade > 0; grade--)
                    {
                        var newFoundation = GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab", EventPosition + new Vector3(i * 3, grade * 1f, t * 3));
                        newFoundation.Spawn();
						newFoundation.name = "S23qRT";
                        
                        newFoundation.GetComponent<BuildingBlock>().SetGrade((BuildingGrade.Enum) grade);
                        cEvent.BlockList.Last().Add(newFoundation);
                        yield return i;
                    }
                }
            }
            cEvent.StartEvent(startDelay);

            foreach (var check in BasePlayer.activePlayerList)
            {
                UI_DrawInvite(check);
            }
        }

        private void DropFoundation()
        {
            if (cEvent.Finished)
            {
                return;
            }
            
            if (cEvent.BlockList.Count == 0)
            {
                StopEvent();
                return;
            }
            var cStack = cEvent.BlockList.GetRandom();
            if (cStack.Count == 0)
            {
                cEvent.BlockList.Remove(cStack);
                DropFoundation();
                return;
            }

            var cBlock = cStack.First();
            if (cBlock == null || cBlock.IsDestroyed)
            {
                cStack.RemoveAt(0);
                DropFoundation();
                return;
            }
            
            cStack.RemoveAt(0);
            cBlock.Kill();

            cEvent.DestroyTimer = timer.Once(instance.config.CONF_DelayDestroy, DropFoundation);
        }

        #endregion

        #region Interface
        
        private static void UI_DrawInfo(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, CONF_UI_SideLayer);
            CuiElementContainer container = new CuiElementContainer();
            
            container.Add(new CuiElement
            {
                Parent = "Overlay",
                Name = CONF_UI_SideLayer,
                Components =
                {
                    new CuiRawImageComponent()  { FadeIn = 0.3f, Sprite = "assets/content/ui/ui.background.tiletex.psd", Material = "assets/content/ui/uibackgroundblur.mat", Color = "0 0 0 0.9" },
                    new CuiRectTransformComponent  { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"},
                }        
            });

            string text = $"<size=35><b><color=#538fefFF>ОЖИДАНИЕ НАЧАЛА ИГРЫ</color></b></size>\n" +
                          $"\n" +
                          $"<size=18>Главная задача мероприятия - выжить последним, либо уцелеть на последнем блоке\n" +
                          $"После начала игры блоки начнут разрушаться один за другим, если вы упадёте в воду - вы проиграете</size>";
            
            if (instance.config.CONF_GivePistol)
                text += "\n\n\n<size=16>После начала игры вы также получите пистолет с одним патроном, благодаря ему вы сможете разрушить одну\n" +
                        "платформу под ногами противника, советуем не тратить её в самом начале!</size>";
            
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { FadeIn = 0.3f, Text = text, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, CONF_UI_SideLayer);
            
            CuiHelper.AddUi(player, container);
            UI_DrawLeftTime(player);
        }

        private static void UI_DrawLeftTime(BasePlayer player)
        {
            if (cEvent == null || !cEvent.PlayerConnected.ContainsKey(player.userID))
            {
                CuiHelper.DestroyUi(player, CONF_UI_SideLayer);
            }
            else
            {
                CuiHelper.DestroyUi(player, CONF_UI_SideLayer + ".LeftTime");
            }
            
            CuiElementContainer container = new CuiElementContainer();

            int leftTime = (int) (cEvent.StartTime - CurrentTime());
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0.3" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = leftTime.ToString(), Align = TextAnchor.MiddleCenter, FontSize = 25, Font = "robotocondensed-bold.ttf" }
            }, CONF_UI_SideLayer, CONF_UI_SideLayer + ".LeftTime");

            CuiHelper.AddUi(player, container);

            if (leftTime != 1)
            {
                instance.timer.Once(1, () => UI_DrawLeftTime(player));
            }
        }

        private void UI_DrawInvite(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, CONF_UI_MainLayer);
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.9994791 0.7222223", AnchorMax = "0.9994791 0.7222223", OffsetMin = "-244.6 -82" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", CONF_UI_MainLayer);
            
            container.Add(new CuiElement
            {
                Parent = CONF_UI_MainLayer,
                Components =
                {
                    new CuiImageComponent { FadeIn = 0.3f, Color = HexToRustFormat("#605F5332") },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.6422766", AnchorMax = "1 1", OffsetMax = "0 0" },
                Text = { FadeIn = 0.3f, Text = $"ПАДАЮЩИЕ ПЛАТФОРМЫ", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FontSize = 15 }
            }, CONF_UI_MainLayer);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.005 0.1707318", AnchorMax = "0.995 0.8943092", OffsetMax = "0 0" },
                Text = { FadeIn = 0.3f, Text = $"Началась регистрация на мероприятие, чтобы принять участие вы должны быть голыми", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FontSize = 11 }
            }, CONF_UI_MainLayer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.01226182 0.02845511", AnchorMax = "0.9854766 0.3414635", OffsetMax = "0 0" },
                Button = { Color = HexToRustFormat("#7C7C7C6E"), Command = "UI_FE_Handler join" },
                Text = { Text = "ЗАРЕГИСТРИРОВАТЬСЯ", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FontSize = 16 }
            }, CONF_UI_MainLayer);

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Utils

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        
        static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0);
        static double CurrentTime() => DateTime.UtcNow.Subtract(epoch).TotalSeconds;
        
        private void GetConfig<T>(string menu, string key, ref T varObject)
        {
            if (Config[menu, key] != null)
            {
                varObject = Config.ConvertValue<T>(Config[menu, key]);
            }
            else
            {
                Config[menu, key] = varObject;
            }
        }
		
        #endregion
        
    }
}

// --- End of file: FoundationDrop.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Friends-1.22.2.cs ---
// --- Original Local Path: Friends-1.22.2.cs ---

// #define TESTING

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Facepunch;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using ProtoBuf;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Oxide.Plugins
{
	[Info("Friends", "Mevent", "1.22.2")]
	[Description("Adds a friends system with a visual interface for quick interaction")]
	public class Friends : RustPlugin
	{
		#region Fields

		[PluginReference] private Plugin
			ImageLibrary = null,
			Notifications = null,
			PlayerList = null,
			PlayerDatabase = null,
			Bank = null;

		private const string Layer = "Com.Mevent.Main";

		private static Friends _instance;

		private readonly Dictionary<ulong, EntityEntry> _playerEntities = new Dictionary<ulong, EntityEntry>();

		private class EntityEntry
		{
			public HashSet<AutoTurret> AutoTurrets = new HashSet<AutoTurret>();
			public HashSet<BuildingPrivlidge> BuildingPrivileges = new HashSet<BuildingPrivlidge>();
			public HashSet<CodeLock> CodeLocks = new HashSet<CodeLock>();
		}

		private enum AutoAuthType
		{
			All,
			Turret,
			Cupboard,
			Doors,
			Containers
		}

		private enum BtnType
		{
			None,
			Doors,
			Cupboard,
			Turrets,
			Containers,
			FriendlyFire,
			Sams
		}

		#endregion

		#region Config

		private static Configuration _config;

		private class Configuration
		{
			[JsonProperty(PropertyName = "Добавлять в команду | Add to team")]
			public bool AddTeam = true;

			[JsonProperty(PropertyName = "Максимальное кол-во друзей | Max Friends")]
			public int MaxFriendsAmount = 3;

			[JsonProperty(PropertyName = "Задержка между сообщениями FF | Delay between FF messages")]
			public float FFDelay = 1;

			[JsonProperty(PropertyName =
				"Закрывать интерфейс после нажатия на кнопку | Close the interface after clicking on the button")]
			public bool AutoClose = true;

			[JsonProperty(PropertyName = "Огонь по друзьям | Friendly Fire")]
			public bool FriendlyFire = false;

			[JsonProperty(PropertyName = "Двери | Doors")]
			public bool Doors = true;

			[JsonProperty(PropertyName = "Турели | Turrets")]
			public bool Turrets = true;

			[JsonProperty(PropertyName = "Шкаф | Cupboard")]
			public bool Cupboard = true;

			[JsonProperty(PropertyName = "Ящики | Containers")]
			public bool Containers = true;

			[JsonProperty(PropertyName = "ПВО | SAMs")]
			public bool SAMs = true;

			[JsonProperty(PropertyName = "Добавлять друга к остальным друзьям? | Add a friend to other friends?")]
			public bool UseTeams = true;

			[JsonProperty(PropertyName = "Включить логирование в консоль? | Enable logging to the console?")]
			public bool LogToConsole = true;

			[JsonProperty(PropertyName = "Включить логирование в файл? | Enable logging to the file?")]
			public bool LogToFile = true;

			[JsonProperty(PropertyName = "Фон | Background")]
			public IPanel Background = new IPanel
			{
				AnchorMin = "0 0", AnchorMax = "1 1",
				OffsetMin = "0 0", OffsetMax = "0 0",
				Image = string.Empty,
				Color = new IColor("#0D1F4E", 95),
				isRaw = false,
				Sprite = "Assets/Content/UI/UI.Background.Tile.psd",
				Material = "Assets/Icons/IconMaterial.mat"
			};

			[JsonProperty(PropertyName = "Заглавие | Title")]
			public IText Title = new IText
			{
				AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5",
				OffsetMin = "-150 300", OffsetMax = "150 360",
				Font = "robotocondensed-bold.ttf",
				Align = TextAnchor.MiddleCenter,
				FontSize = 38,
				Color = new IColor("#FFFFFF", 100)
			};

			[JsonProperty(PropertyName = "Закрыть | Close")]
			public IText Close = new IText
			{
				AnchorMin = "1 1", AnchorMax = "1 1",
				OffsetMin = "-35 -35", OffsetMax = "-5 -5",
				Font = "robotocondensed-bold.ttf",
				Align = TextAnchor.MiddleCenter,
				FontSize = 24,
				Color = new IColor("#FFFFFF", 100)
			};

			[JsonProperty(PropertyName = "Ошибка | Error")]
			public IText Error = new IText
			{
				AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5",
				OffsetMin = "-300 -150", OffsetMax = "300 150",
				Font = "robotocondensed-bold.ttf",
				Align = TextAnchor.MiddleCenter,
				FontSize = 38,
				Color = new IColor("#FFFFFF", 100)
			};

			[JsonProperty(PropertyName = "Назад | Back")]
			public IText Back = new IText
			{
				AnchorMin = "0 0.5", AnchorMax = "0 0.5",
				OffsetMin = "0 -40", OffsetMax = "65 40",
				Font = "robotocondensed-bold.ttf",
				Align = TextAnchor.MiddleCenter,
				FontSize = 60,
				Color = new IColor("#FFFFFF", 100)
			};

			[JsonProperty(PropertyName = "Вперёд | Next")]
			public IText Next = new IText
			{
				AnchorMin = "1 0.5", AnchorMax = "1 0.5",
				OffsetMin = "-65 -40", OffsetMax = "0 40",
				Font = "robotocondensed-bold.ttf",
				Align = TextAnchor.MiddleCenter,
				FontSize = 60,
				Color = new IColor("#FFFFFF", 100)
			};

			[JsonProperty(PropertyName = "Настройка интерфейса | Interface Settings")]
			public IFriendPanel Panel = new IFriendPanel
			{
				AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5",
				Height = 100,
				Width = 820,
				Margin = 20,
				Count = 4,
				Color = new IColor("#1D3676", 100),
				Avatar = new InterfacePosition
				{
					AnchorMin = "0 0", AnchorMax = "0 0",
					OffsetMin = "5 5", OffsetMax = "95 95"
				},
				Nickname = new NickName
				{
					AnchorMin = "0 0", AnchorMax = "0 0",
					OffsetMin = "100 40", OffsetMax = "500 100",
					Align = TextAnchor.LowerLeft,
					Font = "robotocondensed-regular.ttf",
					Color = new IColor("#FFFFFF", 100),
					FontSize = 38,
					MaxLength = 30
				},
				Status = new SText
				{
					AnchorMin = "0 0", AnchorMax = "0 0",
					OffsetMin = "100 0", OffsetMax = "200 50",
					Align = TextAnchor.UpperLeft,
					Font = "robotocondensed-regular.ttf",
					Color = new IColor("#B5FFC9", 100),
					OfflineColor = new IColor("#B46292", 100),
					FontSize = 16
				},
				Button = new IButton
				{
					AnchorMin = "1 0.5", AnchorMax = "1 0.5",
					Height = 35,
					Width = 120,
					Margin = 5
				},
				Buttons = new List<FButton>
				{
					new FButton
					{
						Type = BtnType.Doors,
						Text = "Двери",
						Command = "friend doors {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.Cupboard,
						Text = "Шкаф",
						Command = "friend cupboard {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.Containers,
						Text = "Ящики",
						Command = "friend containers {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.Turrets,
						Text = "Турели",
						Command = "friend turrets {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.None,
						Text = "Исключить",
						Command = "friend remove {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.FriendlyFire,
						Text = "Урон",
						Command = "ff {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.None,
						Text = "ТП",
						Command = "tpr {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					},
					new FButton
					{
						Type = BtnType.Sams,
						Text = "ПВО",
						Command = "friend sams {user}",
						ActiveColor = new IColor("#5D8FDF", 95),
						DisactiveColor = new IColor("#5D8FDF", 35),
						FontSize = 20,
						Font = "robotocondensed-regular.ttf",
						Align = TextAnchor.MiddleCenter,
						TColor = new IColor("#1D3676", 100)
					}
				}
			};

			[JsonProperty(PropertyName = "Приглашение в друзья | Friend Invite")]
			public INotify FriendInvite = new INotify
			{
				Image = "friend",
				Url = "https://i.imgur.com/qAxHQIn.png",
				Delay = 30,
				Buttons = new List<INotifyButton>
				{
					new INotifyButton
					{
						AnchorMin = "0.5 0", AnchorMax = "0.5 0",
						OffsetMin = "-137.5 5", OffsetMax = "-2.5 25",
						Align = TextAnchor.MiddleCenter,
						Font = "robotocondensed-regular.ttf",
						FontSize = 14,
						Color = new IColor("#FFFFFF", 95),
						BColor = new IColor("#528A4E", 95),
						Command = "friend accept",
						Msg = "Accept"
					},
					new INotifyButton
					{
						AnchorMin = "0.5 0", AnchorMax = "0.5 0",
						OffsetMin = "2.5 5", OffsetMax = "137.5 25",
						Align = TextAnchor.MiddleCenter,
						Font = "robotocondensed-regular.ttf",
						FontSize = 14,
						Color = new IColor("#FFFFFF", 95),
						BColor = new IColor("#50488A", 95),
						Command = "friend cancel",
						Msg = "Cancel"
					}
				}
			};

			[JsonProperty(PropertyName = "Оповещение | Notification")]
			public INotify Notify = new INotify
			{
				Image = "friend",
				Url = "https://i.imgur.com/qAxHQIn.png",
				Delay = 5,
				Buttons = new List<INotifyButton>()
			};

			[JsonProperty(PropertyName = "Найти друга | Find a Friend")]
			public INotifyButton FindFriendBtn = new INotifyButton
			{
				AnchorMin = "0.5 0", AnchorMax = "0.5 0",
				OffsetMin = "-150 25", OffsetMax = "150 60",
				Align = TextAnchor.MiddleCenter,
				FontSize = 14,
				Font = "robotocondensed-regular.ttf",
				Color = new IColor("#5D8FDF", 100),
				BColor = new IColor("#1D3676", 100),
				Command = "playerslist",
				Msg = "FindFriend"
			};

			[JsonProperty(PropertyName = "PlayerDatabase")]
			public PlayerDatabaseConf PlayerDatabase =
				new PlayerDatabaseConf(false, "Friends");

			public VersionNumber Version;
		}

		private class PlayerDatabaseConf
		{
			[JsonProperty(PropertyName = "Включено")]
			public bool Enabled;

			[JsonProperty(PropertyName = "Поле")] public string Field;

			public PlayerDatabaseConf(bool enabled, string field)
			{
				Enabled = enabled;
				Field = field;
			}
		}

		private class NickName : IText
		{
			[JsonProperty(PropertyName = "Максимальная длина | Max Lenght")]
			public int MaxLength;

			public new void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
				string text = "")
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				text = text.Substring(0, Mathf.Min(text.Length, MaxLength));

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax},
					Text =
					{
						Text = $"{text}", Align = Align, FontSize = FontSize, Color = Color.Get(),
						Font = Font
					}
				}, parent, name);
			}
		}

		private class INotify
		{
			[JsonProperty(PropertyName = "Ключ изображения | Image Key")]
			public string Image;

			[JsonProperty(PropertyName = "Ссылка на изображение | Image Url")]
			public string Url;

			[JsonProperty(PropertyName = "Время показа | Show Time")]
			public float Delay;

			[JsonProperty(PropertyName = "Кнопки | Buttons", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<INotifyButton> Buttons;
		}

		private class INotifyButton : IText
		{
			[JsonProperty(PropertyName = "Цвет | Color")]
			public IColor BColor;

			[JsonProperty(PropertyName = "Ключ языкового файла | Lang Key")]
			public string Msg;

			[JsonProperty(PropertyName = "Команда | Command")]
			public string Command;

			public void Get(ref CuiElementContainer container, BasePlayer player, string name = null,
				string parent = "")
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				container.Add(new CuiButton
				{
					RectTransform =
						{AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax},
					Text =
					{
						Text = _instance.Msg(Msg, player.UserIDString), Align = Align, FontSize = FontSize,
						Color = Color.Get(),
						Font = Font
					},
					Button =
					{
						Color = BColor.Get(),
						Command = Command
					}
				}, parent, name);
			}
		}

		private abstract class IAnchors
		{
			public string AnchorMin;

			public string AnchorMax;
		}

		private class InterfacePosition : IAnchors
		{
			public string OffsetMin;

			public string OffsetMax;
		}

		private class IFriendPanel : IAnchors
		{
			[JsonProperty(PropertyName = "Высота | Height")]
			public float Height;

			[JsonProperty(PropertyName = "Ширина | Width")]
			public float Width;

			[JsonProperty(PropertyName = "Отступ | Margin")]
			public float Margin;

			[JsonProperty(PropertyName = "Количество на странице | Count On Page")]
			public int Count;

			[JsonProperty(PropertyName = "Цвет | Color")]
			public IColor Color;

			[JsonProperty(PropertyName = "Аватарка | Avatar")]
			public InterfacePosition Avatar;

			[JsonProperty(PropertyName = "Никнейм | Nickname")]
			public NickName Nickname;

			[JsonProperty(PropertyName = "Статус | Status")]
			public SText Status;

			[JsonProperty(PropertyName = "Кнопка | Button")]
			public IButton Button;

			[JsonProperty(PropertyName = "Кнопки | Buttons", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<FButton> Buttons;

			public void Get(ref CuiElementContainer container, BasePlayer player, FriendData data, string parent,
				string name,
				string oMin, string oMax,
				int page,
				string mainParent)
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = AnchorMin, AnchorMax = AnchorMax,
						OffsetMin = oMin, OffsetMax = oMax
					},
					Image = {Color = Color.Get()}
				}, parent, name);

				if (_instance.ImageLibrary && Avatar != null)
					container.Add(new CuiElement
					{
						Parent = name,
						Components =
						{
							new CuiRawImageComponent
								{Png = _instance.ImageLibrary.Call<string>("GetImage", $"avatar_{data.UserId}")},
							new CuiRectTransformComponent
							{
								AnchorMin = Avatar.AnchorMin, AnchorMax = Avatar.AnchorMax,
								OffsetMin = Avatar.OffsetMin, OffsetMax = Avatar.OffsetMax
							}
						}
					});

				#region Name

				var targetId = $"{data.UserId}";

				var target = _instance.covalence.Players.FindPlayer(targetId);
				var displayName = _instance.GetPlayerName(data.UserId);

				var status = target != null && target.IsConnected;

				Nickname?.Get(ref container, name, name + ".Nickname", displayName);

				Status?.Get(ref container, status, name, name + ".Status",
					_instance.Msg(status ? Online : Offline, player.UserIDString));

				#endregion

				#region Buttons

				if (Buttons != null)
				{
					var xSwitch = -Button.Margin;

					for (var i = 0; i < Buttons.Count; i++)
					{
						var button = Buttons[i];

						var up = i < Buttons.Count / 2;

						var ySwitch = up ? Button.Height + Button.Margin / 2f : -(Button.Margin / 2f);

						button.Get(ref container, data, name, name + $".Btn.{i}", Button.AnchorMin, Button.AnchorMax,
							$"{xSwitch - Button.Width} {ySwitch - Button.Height}",
							$"{xSwitch} {ySwitch}",
							page,
							mainParent);

						if (i + 1 == Buttons.Count / 2)
							xSwitch = -Button.Margin;
						else
							xSwitch = xSwitch - Button.Margin - Button.Width;
					}
				}

				#endregion
			}
		}

		private class IPanel : InterfacePosition
		{
			[JsonProperty(PropertyName = "Изображение | Image")]
			public string Image;

			[JsonProperty(PropertyName = "Цвет | Color")]
			public IColor Color;

			[JsonProperty(PropertyName = "Сохранять цвет изображения? | Save Image Color")]
			public bool isRaw;

			[JsonProperty(PropertyName = "Sprite")]
			public string Sprite;

			[JsonProperty(PropertyName = "Material")]
			public string Material;

			public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
				bool cursor = false)
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				if (isRaw)
				{
					var element = new CuiElement
					{
						Name = name,
						Parent = parent,
						Components =
						{
							new CuiRawImageComponent
							{
								Png = !string.IsNullOrEmpty(Image)
									? _instance.ImageLibrary.Call<string>("GetImage", Image)
									: null,
								Color = Color.Get(),
								Material = Material,
								Sprite = !string.IsNullOrEmpty(Sprite) ? Sprite : "Assets/Icons/rust.png"
							},
							new CuiRectTransformComponent
							{
								AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin,
								OffsetMax = OffsetMax
							}
						}
					};

					if (cursor) element.Components.Add(new CuiNeedsCursorComponent());

					container.Add(element);
				}
				else
				{
					container.Add(new CuiPanel
					{
						RectTransform =
						{
							AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax
						},
						Image =
						{
							Png = !string.IsNullOrEmpty(Image)
								? _instance.ImageLibrary.Call<string>("GetImage", Image)
								: null,
							Color = Color.Get(),
							Sprite =
								!string.IsNullOrEmpty(Sprite) ? Sprite : "Assets/Content/UI/UI.Background.Tile.psd",
							Material = !string.IsNullOrEmpty(Material) ? Material : "Assets/Icons/IconMaterial.mat"
						},
						CursorEnabled = cursor
					}, parent, name);
				}
			}
		}

		private class FButton
		{
			[JsonProperty(PropertyName = "Тип | Type")] [JsonConverter(typeof(StringEnumConverter))]
			public BtnType Type;

			[JsonProperty(PropertyName = "Текст | Text")]
			public string Text;

			[JsonProperty(PropertyName = "Команда | Command")]
			public string Command;

			[JsonProperty(PropertyName = "Активный Цвет | Active Color")]
			public IColor ActiveColor;

			[JsonProperty(PropertyName = "Неактивный Цвет | Disactive Color")]
			public IColor DisactiveColor;

			[JsonProperty(PropertyName = "Font Size")]
			public int FontSize;

			[JsonProperty(PropertyName = "Font")] public string Font;

			[JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
			public TextAnchor Align;

			[JsonProperty(PropertyName = "Text Color")]
			public IColor TColor;

			public void Get(ref CuiElementContainer container, FriendData data, string parent, string name, string aMin,
				string aMax, string oMin, string oMax, int page,
				string mainParent)
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				var color = ActiveColor;

				switch (Type)
				{
					case BtnType.Doors:
						color = data.Doors ? ActiveColor : DisactiveColor;
						break;
					case BtnType.Cupboard:
						color = data.Cupboard ? ActiveColor : DisactiveColor;
						break;
					case BtnType.Turrets:
						color = data.Turrets ? ActiveColor : DisactiveColor;
						break;
					case BtnType.FriendlyFire:
						color = data.FriendlyFire ? ActiveColor : DisactiveColor;
						break;
					case BtnType.Containers:
						color = data.Containers ? ActiveColor : DisactiveColor;
						break;
					case BtnType.Sams:
						color = data.SAMs ? ActiveColor : DisactiveColor;
						break;
				}

				var text = Text.Replace("{user}", data.UserId.ToString());
				var command = Command.Replace("{user}", data.UserId.ToString());

				container.Add(new CuiButton
				{
					RectTransform =
					{
						AnchorMin = aMin, AnchorMax = aMax,
						OffsetMin = oMin, OffsetMax = oMax
					},
					Text =
					{
						Text = $"{text}",
						Align = Align,
						Font = Font,
						FontSize = FontSize,
						Color = TColor.Get()
					},
					Button =
					{
						Command =
							$"UI_Friends sendcmd {page} {mainParent} {command}", // command.Contains("chat.say") ? $"friendssendcmd {command}" : $"{command}",
						Color = color.Get(),
						Close = _config.AutoClose ? Layer : string.Empty
					}
				}, parent, name);
			}
		}

		private class IButton : IAnchors
		{
			[JsonProperty(PropertyName = "Высота | Height")]
			public float Height;

			[JsonProperty(PropertyName = "Ширина | Width")]
			public float Width;

			[JsonProperty(PropertyName = "Отступ | Margin")]
			public float Margin;
		}

		private class SText : InterfacePosition
		{
			[JsonProperty(PropertyName = "Font Size")]
			public int FontSize;

			[JsonProperty(PropertyName = "Font")] public string Font;

			[JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
			public TextAnchor Align;

			[JsonProperty(PropertyName = "Цвет игрока онлайн | Online Color")]
			public IColor Color;

			[JsonProperty(PropertyName = "Цвет игрока оффлайн | Offline Color")]
			public IColor OfflineColor;

			public void Get(ref CuiElementContainer container, bool online, string parent = "Hud", string name = null,
				string text = "")
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax},
					Text =
					{
						Text = $"{text}", Align = Align, FontSize = FontSize,
						Color = online ? Color.Get() : OfflineColor.Get(),
						Font = Font
					}
				}, parent, name);
			}
		}

		private class IText : InterfacePosition
		{
			[JsonProperty(PropertyName = "Font Size")]
			public int FontSize;

			[JsonProperty(PropertyName = "Font")] public string Font;

			[JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
			public TextAnchor Align;

			[JsonProperty(PropertyName = "Text Color")]
			public IColor Color;

			public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
				string text = "")
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax},
					Text =
					{
						Text = $"{text}", Align = Align, FontSize = FontSize, Color = Color.Get(),
						Font = Font
					}
				}, parent, name);
			}
		}

		private class IColor
		{
			[JsonProperty(PropertyName = "HEX")] public string HEX;

			[JsonProperty(PropertyName = "Непрозрачность | Opacity (0 - 100)")]
			public float Alpha;

			public string Get()
			{
				if (string.IsNullOrEmpty(HEX)) HEX = "#FFFFFF";

				var str = HEX.Trim('#');
				if (str.Length != 6) throw new Exception(HEX);
				var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
				var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
				var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);

				return $"{(double) r / 255} {(double) g / 255} {(double) b / 255} {Alpha / 100}";
			}

			public IColor(string hex, float alpha)
			{
				HEX = hex;
				Alpha = alpha;
			}
		}

		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				_config = Config.ReadObject<Configuration>();
				if (_config == null) throw new Exception();

				if (_config.Version < Version)
					UpdateConfigValues();

				SaveConfig();
			}
			catch
			{
				PrintError("Your configuration file contains an error. Using default configuration values.");
				LoadDefaultConfig();
			}
		}

		private void UpdateConfigValues()
		{
			PrintWarning("Config update detected! Updating config values...");

			var baseConfig = new Configuration();

			if (_config.Version < new VersionNumber(1, 14, 0))
				_config.AutoClose = baseConfig.AutoClose;

			if (_config.Version < new VersionNumber(1, 15, 0))
			{
				_config.UseTeams = baseConfig.UseTeams;
				_config.SAMs = baseConfig.SAMs;
			}

			_config.Version = Version;
			PrintWarning("Config update completed!");
		}

		protected override void SaveConfig()
		{
			Config.WriteObject(_config);
		}

		protected override void LoadDefaultConfig()
		{
			_config = new Configuration();
		}

		#endregion

		#region Data

		private Dictionary<string, PlayerData> _usersData = new Dictionary<string, PlayerData>();

		private ListHashSet<ulong> _changedPlayers = new ListHashSet<ulong>();
		
		#region PlayerDatabase

		private PlayerData LoadPlayerDatabaseData(string userId)
		{
			PlayerData data;
			if (_usersData.TryGetValue(userId, out data))
				return data;

			var success =
				PlayerDatabase?.Call<string>("GetPlayerDataRaw", userId, _config.PlayerDatabase.Field);
			if (string.IsNullOrEmpty(success))
			{
				data = new PlayerData
				{
					UserID = Convert.ToUInt64(userId)
				};
				SavePlayerDatabaseData(userId, data);
				return _usersData[userId] = data;
			}

			if ((data = JsonConvert.DeserializeObject<PlayerData>(success)) == null)
			{
				data = new PlayerData
				{
					UserID = Convert.ToUInt64(userId)
				};
				SavePlayerDatabaseData(userId, data);
				return _usersData[userId] = data;
			}

			return _usersData[userId] = data;
		}

		private void SavePlayerDatabaseData(string userId, PlayerData data)
		{
			if (data == null) return;

			var serializeObject = JsonConvert.SerializeObject(data);
			if (serializeObject == null) return;

			PlayerDatabase?.Call("SetPlayerData", userId, _config.PlayerDatabase.Field, serializeObject);
		}

		#endregion

		#region Classes

		private class PlayerData
		{
			#region Fields

			[JsonProperty(PropertyName = "Display Name")]
			public string DisplayName;

			[JsonProperty(PropertyName = "UserId")]
			public ulong UserID;

			[JsonProperty(PropertyName = "Friends", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<FriendData> Friends = new List<FriendData>();

			[JsonProperty(PropertyName = "Removed Friends", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public HashSet<ulong> RemovedFriends = new HashSet<ulong>();

			#endregion

			#region Utils

			public bool IsFriend(ulong friend)
			{
				return Friends.Exists(check => check.UserId == friend);
			}

			public FriendData GetFriend(ulong friend)
			{
				return Friends.Find(check => check.UserId == friend);
			}

			public void AddFriend(ulong friend)
			{
				if (!friend.IsSteamId() || IsFriend(friend)) return;

				Friends.Add(new FriendData
				{
					UserId = friend,
					FriendlyFire = _config.FriendlyFire,
					Doors = _config.Doors,
					Turrets = _config.Turrets,
					Cupboard = _config.Cupboard,
					Containers = _config.Containers,
					SAMs = _config.SAMs
				});

				RemovedFriends.Remove(friend);
				
				OnChanged();
			}

			public void RemoveFriend(ulong friend)
			{
				if (Friends.RemoveAll(x => x.UserId == friend) > 0) 
					RemovedFriends.Add(friend);
				
				OnChanged();
			}

			#endregion

			#region Helpers

			private static string BaseFolder()
			{
				return "Friends" + Path.DirectorySeparatorChar + "Players" + Path.DirectorySeparatorChar;
			}

			public static string[] GetFiles()
			{
				return GetFiles(BaseFolder());
			}

			public static string[] GetFiles(string baseFolder)
			{
				try
				{
					var json = ".json".Length;
					var paths = Interface.Oxide.DataFileSystem.GetFiles(baseFolder);
					for (var i = 0; i < paths.Length; i++)
					{
						var path = paths[i];
						var separatorIndex = path.LastIndexOf(Path.DirectorySeparatorChar);

						// We have to do this since GetFiles returns paths instead of filenames
						// And other methods require filenames
						paths[i] = path.Substring(separatorIndex + 1, path.Length - separatorIndex - 1 - json);
					}

					return paths;
				}
				catch
				{
					return Array.Empty<string>();
				}
			}

			public static PlayerData GetOrLoad(string userId)
			{
				if (!userId.IsSteamId()) return null;

				if (_config.PlayerDatabase.Enabled) return _instance.LoadPlayerDatabaseData(userId);

				return GetOrLoad(BaseFolder(), userId);
			}

			public static PlayerData GetNotLoad(string userId)
			{
				if (!userId.IsSteamId()) return null;

				if (_config.PlayerDatabase.Enabled) return _instance.LoadPlayerDatabaseData(userId);

				var data = GetOrLoad(BaseFolder(), userId, false);

				return data;
			}

			public static PlayerData GetOrLoad(string baseFolder, string userId, bool load = true)
			{
				PlayerData data;
				if (_instance._usersData.TryGetValue(userId, out data)) return data;

				try
				{
					data = ReadOnlyObject(baseFolder + userId);
				}
				catch (Exception e)
				{
					Interface.Oxide.LogError(e.ToString());
				}

				return load
					? _instance._usersData[userId] = data
					: data;
			}

			public static PlayerData GetOrCreate(string userId)
			{
				if (!userId.IsSteamId()) return null;

				if (_config.PlayerDatabase.Enabled) return _instance.LoadPlayerDatabaseData(userId);

				return GetOrLoad(userId) ?? (_instance._usersData[userId] = new PlayerData
				{
					UserID = Convert.ToUInt64(userId)
				});
			}
			
			public static bool IsLoaded(string userId)
			{
				return _instance._usersData.ContainsKey(userId);
			}

			public static void Save()
			{
#if TESTING
				Debug.Log($"[Save] count={_instance?._usersData.Count}");
#endif

				_instance?._usersData?.Keys.ToList().ForEach(Save);
			}

			public static void Save(string userId)
			{
				if (_config.PlayerDatabase.Enabled)
				{
					_instance.SavePlayerDatabaseData(userId, _instance.LoadPlayerDatabaseData(userId));
					return;
				}

				PlayerData data;
				if (!_instance._usersData.TryGetValue(userId, out data))
					return;

				Interface.Oxide.DataFileSystem.WriteObject(BaseFolder() + userId, data);
				
				_instance?._changedPlayers?.Remove(data.UserID);
			}

			public static void SaveAndUnload(string userId)
			{
				Save(userId);

				Unload(userId);
			}

			public static void Unload(string userId)
			{
				_instance?._usersData?.Remove(userId);
				
				_instance?._changedPlayers?.Remove(Convert.ToUInt64(userId));
			}

			private static PlayerData ReadOnlyObject(string name)
			{
				return Interface.Oxide.DataFileSystem.ExistsDatafile(name)
					? Interface.Oxide.DataFileSystem.GetFile(name).ReadObject<PlayerData>()
					: null;
			}

			public void OnChanged()
			{
				_instance?._changedPlayers?.TryAdd(UserID);
			}
			
			#endregion
		}
		
		private class FriendData
		{
			[JsonProperty(PropertyName = "UserId")]
			public ulong UserId;

			[JsonProperty(PropertyName = "FriendlyFire")]
			public bool FriendlyFire;

			[JsonProperty(PropertyName = "Doors")] public bool Doors;

			[JsonProperty(PropertyName = "Turrets")]
			public bool Turrets;

			[JsonProperty(PropertyName = "Cupboard")]
			public bool Cupboard;

			[JsonProperty(PropertyName = "Containers")]
			public bool Containers;

			[JsonProperty(PropertyName = "SAMs")] public bool SAMs;
		}

		#region Save Coroutine

		private Coroutine _saveCoroutine;

		private void StartSaveCoroutine()
		{
			_saveCoroutine = Rust.Global.Runner.StartCoroutine(HandleChangedPlayers());
		}

		private void StopSaveCoroutine()
		{
			if (_saveCoroutine != null) 
				Rust.Global.Runner.StopCoroutine(_saveCoroutine);
		}

		private IEnumerator HandleChangedPlayers()
		{
			var count = 0;
			
			while (_changedPlayers.Count > 0)
			{
				var player = _changedPlayers[0];
				_changedPlayers.RemoveAt(0);
				
				PlayerData.Save(player.ToString());
				
				if (++count % 5 == 0)
					yield return CoroutineEx.waitForFixedUpdate;
			}
		}
		
		#endregion
		
		#endregion

		#region Utils

		private static PlayerData FindPlayerData(string user)
		{
			foreach (var player in BasePlayer.allPlayerList)
				if (player.displayName.StartsWith(user, StringComparison.CurrentCultureIgnoreCase))
					return PlayerData.GetOrLoad(player.UserIDString);

			return null;
		}

		#region Migration

		private Coroutine _playersMigration;

		private IEnumerator StartOnAllPlayers(string[] players,
			Action<string> callback = null,
			Action onFinish = null)
		{
			for (var i = 0; i < players.Length; i++)
			{
				callback?.Invoke(players[i]);

				if (i % 10 == 0)
					yield return CoroutineEx.waitForFixedUpdate;
			}

			onFinish?.Invoke();

			_playersMigration = null;
		}

		#endregion

		#endregion

		#endregion

		#region Hooks

		private void Init()
		{
			_instance = this;

			AddCovalenceCommand(new[] {"ff", "friendlyfire", "friend", "friends", "f", "fmenu", "f.menu"},
				nameof(CmdFriends));

			if (!_config.AddTeam)
			{
				Unsubscribe(nameof(OnTeamLeave));
				Unsubscribe(nameof(OnTeamAcceptInvite));
				Unsubscribe(nameof(OnTeamKick));
				Unsubscribe(nameof(OnTeamInvite));
				Unsubscribe(nameof(OnTeamRejectInvite));
			}
		}

		private void OnServerInitialized()
		{
			if (!ImageLibrary) PrintWarning("IMAGE LIBRARY IS NOT INSTALLED.");

			#region Init

			foreach (var player in BasePlayer.activePlayerList) 
				OnPlayerConnected(player);

			#endregion

			#region Notifications

			Notifications?.Call("AddImage", _config.FriendInvite.Image, _config.FriendInvite.Url);

			Notifications?.Call("AddImage", _config.Notify.Image, _config.Notify.Url);

			#endregion

			#region Team

			RelationshipManager.maxTeamSize = _config.MaxFriendsAmount + 1;

			#endregion

			#region Auth

			foreach (var entity in BaseNetworkable.serverEntities.OfType<BaseEntity>()) CheckEntity(entity);

			#endregion

			timer.Every(1, TimeHandle);
		}

		private void OnServerSave()
		{
			timer.In(Random.Range(2f, 7f), StartSaveCoroutine);
		}

		private void Unload()
		{
			if (_playersMigration != null)
				Rust.Global.Runner.StopCoroutine(_playersMigration);

			if (_friendsConvertation != null)
				Rust.Global.Runner.StopCoroutine(_friendsConvertation);

			StopSaveCoroutine();
			
			foreach (var player in BasePlayer.activePlayerList)
			{
				CuiHelper.DestroyUi(player, Layer);

				PlayerData.SaveAndUnload(player.UserIDString);
			}

			_instance = null;
			_config = null;
		}

		private void OnPlayerConnected(BasePlayer player)
		{
			if (player == null || !player.userID.IsSteamId()) return;

			var data = PlayerData.GetOrCreate(player.UserIDString);
			if (data == null) return;

			var oldName = data.DisplayName;
			var newName = player.displayName;
			if (string.IsNullOrEmpty(oldName) || !oldName.Equals(newName))
			{
				data.DisplayName = newName;
				data.OnChanged();
			}
			
			GetAvatar(player.userID,
				avatar => ImageLibrary?.Call("AddImage", avatar, $"avatar_{player.UserIDString}"));

			if (_config.AddTeam && data.Friends.Count > 0)
			{
				RelationshipManager.PlayerTeam team;
				var friend =
					data.Friends.Find(x => RelationshipManager.ServerInstance.playerToTeam.ContainsKey(x.UserId));
				if (friend == null)
				{
					team = RelationshipManager.ServerInstance.CreateTeam();
					team.AddPlayer(player);
					team.SetTeamLeader(player.userID);

					var friendPlayer = FindPlayer(data.Friends);
					if (friendPlayer != null) team.AddPlayer(friendPlayer);
				}
				else
				{
					team = RelationshipManager.ServerInstance.playerToTeam[friend.UserId];
					if (team == null) return;
					team.AddPlayer(player);
				}
			}
		}

		private void OnPlayerDisconnected(BasePlayer player)
		{
			if (player == null) return;

			PlayerData.SaveAndUnload(player.UserIDString);
		}

		private void OnEntityTakeDamage(BasePlayer player, HitInfo info)
		{
			if (player == null || info == null) return;

			var initiator = info.InitiatorPlayer;
			if (initiator == null) return;

			if (!IsFriend(player.userID, initiator.userID) || player.userID == initiator.userID)
				return;

			var data = PlayerData.GetOrLoad(initiator.UserIDString);

			var friend = data?.Friends.Find(x => x.UserId == player.userID);
			if (friend == null || friend.FriendlyFire) return;

			info.damageTypes.ScaleAll(0);

			if (IsCd(initiator.userID)) return;

			Notify(initiator, _config.Notify.Delay, Msg(NotifyTitle, initiator.UserIDString),
				Msg(FF, initiator.UserIDString, player.displayName), _config.Notify.Image);

			SetCd(initiator.userID);
		}

		#region Team

		private void OnTeamLeave(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
		{
			if (playerTeam == null || player == null) return;

			playerTeam.members.ToList().ForEach(user =>
			{
				PlayerData.GetOrLoad(player.UserIDString)?.RemoveFriend(user);
				PlayerData.GetOrLoad(user.ToString())?.RemoveFriend(player.userID);
			});

			UpdateAuthList(player.userID, AutoAuthType.All);
			UpdateTeamAuthList(playerTeam.members);
		}

		private void OnTeamAcceptInvite(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
		{
			NextTick(() =>
			{
				if (playerTeam == null || player == null || !player.userID.IsSteamId()) return;

				var invite = _invites.Find(x => x.Target == player);
				if (invite != null && playerTeam.members.Exists(x => invite.Inviter.userID == x))
				{
					AcceptInvite(player);
					return;
				}

				if (playerTeam.members.Contains(player.userID))
					if (_config.UseTeams)
					{
						playerTeam.members.ToList().ForEach(user =>
						{
							if (user == player.userID) return;

							PlayerData.GetOrLoad(player.UserIDString)?.AddFriend(user);
							PlayerData.GetOrLoad(user.ToString())?.AddFriend(player.userID);

							Log("friends", $"Player '{player}' added '{user}' as a friend");
						});

						UpdateTeamAuthList(playerTeam.members);
					}
			});
		}

		private void OnTeamKick(RelationshipManager.PlayerTeam playerTeam, BasePlayer player, ulong target)
		{
			NextTick(() =>
			{
				if (playerTeam == null) return;

				if (!playerTeam.members.Contains(target))
				{
					playerTeam.members.ToList().ForEach(user =>
					{
						PlayerData.GetOrLoad(user.ToString())?.RemoveFriend(target);
						PlayerData.GetOrLoad(target.ToString())?.RemoveFriend(user);
					});

					UpdateAuthList(target, AutoAuthType.All);
					UpdateTeamAuthList(playerTeam.members);
				}
			});
		}

		private void OnTeamInvite(BasePlayer inviter, BasePlayer target)
		{
			SendInvite(inviter, target);
		}

		private void OnTeamRejectInvite(BasePlayer rejector, RelationshipManager.PlayerTeam team)
		{
			CancelInvite(rejector);
		}

		private void UpdateTeamAuthList(List<ulong> teamMembers)
		{
			if (teamMembers.Count <= 0) return;
			teamMembers.ForEach(member => UpdateAuthList(member, AutoAuthType.All));
		}

		#endregion

		#region SAMs

		private object OnSamSiteTarget(SamSite samSite, BaseVehicle vehicle)
		{
			if (samSite == null || !samSite.OwnerID.IsSteamId() || vehicle == null)
				return null;

			var data = PlayerData.GetOrLoad(samSite.OwnerID.ToString());
			if (data == null)
				return null;

			if (vehicle.OwnerID == samSite.OwnerID ||
			    data.Friends.Exists(friend => friend.UserId == vehicle.OwnerID && friend.SAMs))
				return true;

			foreach (var mounted in vehicle.allMountPoints
				         .Where(allMountPoint => allMountPoint != null && allMountPoint.mountable != null)
				         .Select(allMountPoint => allMountPoint.mountable.GetMounted())
				         .Where(mounted => mounted != null))
			{
				if (mounted.userID == samSite.OwnerID)
					return true;

				var friendData = data.GetFriend(mounted.userID);
				if (friendData != null && friendData.SAMs)
					return true;
			}

			return null;
		}

		#endregion

		#endregion

		#region Commands

		private void CmdFriends(IPlayer cov, string command, string[] args)
		{
			var player = cov?.Object as BasePlayer;
			if (player == null) return;

			switch (command)
			{
				case "friendlyfire":
				case "ff":
				{
					var data = PlayerData.GetOrLoad(player.ToString());
					if (data == null) return;

					if (args.Length < 1)
					{
						Reply(player, FFErrorSyntax, command);
						return;
					}

					var friends = FindRemoveFriend(player, args[0]);
					if (friends == null || friends.Count == 0)
					{
						Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
							Msg(NotFound, player.UserIDString, args[0]), _config.Notify.Image);
						return;
					}

					PlayerData friend;

					if (friends.Count > 1)
					{
						int index;
						if (args.Length >= 3 && int.TryParse(args[2], out index))
						{
							if (index - 1 < 0 || friends.Count <= index - 1)
								return;

							friend = friends[index - 1];
						}
						else
						{
							var f = 0;
							var str = string.Join(", ", friends.Select(x =>
							{
								f++;
								return $"{x.DisplayName} ({x.UserID}) [{f}]";
							}));

							Reply(player, MultipleFound, str, f, args[0], args[1]);
							return;
						}
					}
					else
					{
						friend = friends.FirstOrDefault();
					}

					if (friend == null)
					{
						Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
							Msg(NotFound, player.UserIDString, args[0]), _config.Notify.Image);
						return;
					}

					var fData = data.GetFriend(friend.UserID);
					if (fData == null)
					{
						Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
							Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
						return;
					}


					if (args.Length > 2)
						switch (args[1].ToLower())
						{
							case "on":
							{
								fData.FriendlyFire = true;
								break;
							}
							case "off":
							{
								fData.FriendlyFire = false;
								break;
							}
						}
					else
						fData.FriendlyFire = !fData.FriendlyFire;

					Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
						Msg(fData.FriendlyFire ? FFOn : FFOff, player.UserIDString), _config.Notify.Image);
					break;
				}
				default:
				{
					if (args.Length == 0)
					{
						MainUi(player);
						return;
					}

					switch (args[0].ToLower())
					{
						case "+":
						case "i":
						case "inv":
						case "invite":
						case "add":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friends = FindPlayer(args[1]);
							if (friends.Count == 0)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(NotFound, player.UserIDString, args[1]), _config.Notify.Image);
								return;
							}

							BasePlayer friend;

							if (friends.Count > 1)
							{
								int index;
								if (args.Length >= 3 && int.TryParse(args[2], out index))
								{
									if (index - 1 < 0 || friends.Count <= index - 1)
										return;

									friend = friends[index - 1];
								}
								else
								{
									var f = 0;
									var str = string.Join(", ", friends.Select(x =>
									{
										f++;
										return $"{x.displayName} ({x.UserIDString}) [{f}]";
									}));

									Reply(player, MultipleFound, str, f, args[0], args[1]);
									return;
								}
							}
							else
							{
								friend = friends.FirstOrDefault();
							}

							if (friend == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(NotFound, player.UserIDString, args[1]), _config.Notify.Image);
								return;
							}

							if (player.userID == friend.userID)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(CantAddSelf, player.UserIDString), _config.Notify.Image);
								return;
							}

							var pData = PlayerData.GetOrLoad(player.UserIDString);
							if (pData == null) return;

							if (pData.IsFriend(friend.userID))
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(AlreadyFriends, player.UserIDString), _config.Notify.Image);
								return;
							}

							if (pData.Friends.Count >= _config.MaxFriendsAmount)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(MaxFriends, player.UserIDString), _config.Notify.Image);
								return;
							}

							var fData = PlayerData.GetOrLoad(friend.UserIDString);
							if (fData == null) return;

							if (fData.Friends.Count >= _config.MaxFriendsAmount)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(TargetMaxFriends, player.UserIDString), _config.Notify.Image);
								return;
							}

							SendInvite(player, friend);
							break;
						}

						case "-":
						case "del":
						case "delete":
						case "rem":
						case "remove":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friends = FindRemoveFriend(player, args[1]);
							if (friends == null || friends.Count == 0)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(NotFound, player.UserIDString, args[1]), _config.Notify.Image);
								return;
							}

							PlayerData friend;

							if (friends.Count > 1)
							{
								int index;
								if (args.Length >= 3 && int.TryParse(args[2], out index))
								{
									if (index - 1 < 0 || friends.Count <= index - 1)
										return;

									friend = friends[index - 1];
								}
								else
								{
									var f = 0;
									var str = string.Join(", ", friends.Select(x =>
									{
										f++;
										return $"{x.DisplayName} ({x.UserID}) [{f}]";
									}));

									Reply(player, MultipleFound, str, f, args[0], args[1]);
									return;
								}
							}
							else
							{
								friend = friends.FirstOrDefault();
							}

							if (friend == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(NotFound, player.UserIDString, args[1]), _config.Notify.Image);
								return;
							}

							CuiHelper.DestroyUi(player, Layer);

							RemoveFriend(player, friend.UserID);
							break;
						}

						case "a":
						case "accept":
						{
							AcceptInvite(player);
							break;
						}

						case "c":
						case "cancel":
						{
							CancelInvite(player);
							break;
						}

						case "list":
						{
							var data = PlayerData.GetOrLoad(player.UserIDString);
							if (data == null) return;

							if (data.Friends.Count == 0)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(NoFriends, player.UserIDString), _config.Notify.Image);
							}
							else
							{
								var friends = string.Join(", ",
									data.Friends.Select(x =>
										$"{PlayerData.GetOrLoad(x.UserId.ToString())?.DisplayName ?? "NONE"} ({x.UserId})"));

								Reply(player, Msg(FriendList, player.UserIDString, friends));
							}

							break;
						}

						case "doors":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friend = FindPlayerData(args[1]);
							if (friend == null)
							{
								Reply(player, NotFound, args[1]);
								return;
							}

							var friendData = PlayerData.GetOrLoad(player.UserIDString)?.GetFriend(friend.UserID);
							if (friendData == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
								return;
							}

							friendData.Doors = !friendData.Doors;
							Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
								Msg(friendData.Doors ? DoorsOn : DoorsOff, player.UserIDString), _config.Notify.Image);

							UpdateAuthList(player.userID, AutoAuthType.Doors);
							break;
						}

						case "cupboard":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friend = FindPlayerData(args[1]);
							if (friend == null)
							{
								Reply(player, NotFound, args[1]);
								return;
							}

							var friendData = PlayerData.GetOrLoad(player.UserIDString)?.GetFriend(friend.UserID);
							if (friendData == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
								return;
							}

							friendData.Cupboard = !friendData.Cupboard;
							Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
								Msg(friendData.Cupboard ? CupboardOn : CupboardOff, player.UserIDString),
								_config.Notify.Image);

							UpdateAuthList(player.userID, AutoAuthType.Cupboard);
							break;
						}

						case "containers":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friend = FindPlayerData(args[1]);
							if (friend == null)
							{
								Reply(player, NotFound, args[1]);
								return;
							}

							var friendData = PlayerData.GetOrLoad(player.UserIDString)?.GetFriend(friend.UserID);
							if (friendData == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
								return;
							}

							friendData.Containers = !friendData.Containers;
							Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
								Msg(friendData.Containers ? ContainersOn : ContainersOff, player.UserIDString),
								_config.Notify.Image);

							UpdateAuthList(player.userID, AutoAuthType.Containers);
							break;
						}

						case "turrets":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friend = FindPlayerData(args[1]);
							if (friend == null)
							{
								Reply(player, NotFound, args[1]);
								return;
							}

							var friendData = PlayerData.GetOrLoad(player.UserIDString)?.GetFriend(friend.UserID);
							if (friendData == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
								return;
							}

							friendData.Turrets = !friendData.Turrets;
							Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
								Msg(friendData.Turrets ? TurretsOn : TurretsOff, player.UserIDString),
								_config.Notify.Image);

							UpdateAuthList(player.userID, AutoAuthType.Turret);
							break;
						}

						case "sams":
						{
							if (args.Length < 2)
							{
								Reply(player, ErrorSyntax, command, args[0]);
								return;
							}

							var friend = FindPlayerData(args[1]);
							if (friend == null)
							{
								Reply(player, NotFound, args[1]);
								return;
							}

							var friendData = PlayerData.GetOrLoad(player.UserIDString)?.GetFriend(friend.UserID);
							if (friendData == null)
							{
								Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
									Msg(IsNotFriend, player.UserIDString, friend.DisplayName), _config.Notify.Image);
								return;
							}

							friendData.SAMs = !friendData.SAMs;
							Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
								Msg(friendData.SAMs ? SamsOn : SamsOff, player.UserIDString),
								_config.Notify.Image);
							break;
						}

						case "help":
						{
							Reply(player, Help);
							break;
						}
					}

					break;
				}
			}
		}

		[ConsoleCommand("UI_Friends")]
		private void ConsoleCmdFriends(ConsoleSystem.Arg arg)
		{
			var player = arg?.Player();
			if (player == null || !arg.HasArgs()) return;

			switch (arg.Args[0])
			{
				case "page":
				{
					int page;
					if (!arg.HasArgs(3) ||
					    !int.TryParse(arg.Args[1], out page)) return;

					MainUi(player, arg.Args[2], page);
					break;
				}

				case "sendcmd":
				{
					int page;
					if (!arg.HasArgs(4) || !int.TryParse(arg.Args[1], out page)) return;

					var command = string.Join(" ", arg.Args.Skip(3));
					if (string.IsNullOrEmpty(command)) return;

					player.Command(command.Contains("chat.say") ? $"friendssendcmd {command}" : $"{command}");

					if (!_config.AutoClose)
						timer.In(0.2f, () => MainUi(player, arg.Args[2], page));
					break;
				}

				case "close":
				{
					CuiHelper.DestroyUi(player, Layer);
					break;
				}
			}
		}

		[ConsoleCommand("friendssendcmd")]
		private void SendCommand(ConsoleSystem.Arg args)
		{
			var player = args.Player();
			if (player == null || !args.HasArgs()) return;

			var convertcmd = args.Args.Length == 1
				? args.Args[0]
				: $"{args.Args[0]}  \" {string.Join(" ", args.Args.ToList().GetRange(1, args.Args.Length - 1))}\" 0";
			player.SendConsoleCommand(convertcmd);
		}

		[ConsoleCommand("friends.migrate")]
		private void CmdConsoleMigrate(ConsoleSystem.Arg arg)
		{
			if (!arg.IsServerside) return;

			var players = PlayerData.GetFiles();
			if (players != null && players.Length > 0)
			{
				_playersMigration = Rust.Global.Runner.StartCoroutine(StartOnAllPlayers(players, player =>
				{
					var data = PlayerData.GetOrLoad(player);
					if (data != null)
						SavePlayerDatabaseData(data.UserID.ToString(), data);
				}, () => { PrintWarning("The migration is complete!"); }));
			}
		}

		#endregion

		#region Interface

		private void MainUi(BasePlayer player, string parent = "Overlay", int page = 0)
		{
			var data = PlayerData.GetOrLoad(player.UserIDString);
			if (data == null) return;

			if (string.IsNullOrEmpty(parent))
				parent = "Overlay";

			var container = new CuiElementContainer();

			_config.Background.Get(ref container, parent, Layer, true);

			if (parent == "Overlay")
				_config.Title.Get(ref container, Layer, null, Msg(UITitle, player.UserIDString));

			#region Friends

			var friends = data.Friends?.Skip(_config.Panel.Count * page).Take(_config.Panel.Count).ToList();
			if (friends != null && friends.Count > 0)
			{
				var ySwitch = (friends.Count * _config.Panel.Height + (friends.Count - 1) * _config.Panel.Margin) /
				              2f;
				friends.ForEach(friend =>
				{
					if (friend == null) return;

					_config.Panel?.Get(ref container, player, friend, Layer, null,
						$"-{_config.Panel.Width / 2f} {ySwitch - _config.Panel.Height}",
						$"{_config.Panel.Width / 2f} {ySwitch}", page, parent);

					ySwitch = ySwitch - _config.Panel.Margin - _config.Panel.Height;
				});
			}
			else
			{
				_config.Error.Get(ref container, Layer, null, Msg(NoFriends, player.UserIDString));
			}

			#endregion

			#region Pages

			if (data.Friends != null && data.Friends.Count > _config.Panel.Count)
			{
				container.Add(new CuiButton
				{
					RectTransform =
					{
						AnchorMin =
							_config.Back.AnchorMin,
						AnchorMax =
							_config.Back.AnchorMax,
						OffsetMin =
							_config.Back.OffsetMin,
						OffsetMax =
							_config.Back.OffsetMax
					},
					Text =
					{
						Text = "«",
						Align =
							_config.Back.Align,
						FontSize =
							_config.Back.FontSize,
						Font =
							_config.Back.Font,
						Color =
							_config.Back.Color.Get()
					},
					Button =
					{
						Color = "0 0 0 0",
						Command = page != 0 ? $"UI_Friends page {page - 1} {parent}" : ""
					}
				}, Layer);

				container.Add(new CuiButton
				{
					RectTransform =
					{
						AnchorMin =
							_config.Next.AnchorMin,
						AnchorMax =
							_config.Next.AnchorMax,
						OffsetMin =
							_config.Next.OffsetMin,
						OffsetMax =
							_config.Next.OffsetMax
					},
					Text =
					{
						Text = "»",
						Align =
							_config.Next.Align,
						FontSize =
							_config.Next.FontSize,
						Font =
							_config.Next.Font,
						Color =
							_config.Next.Color.Get()
					},
					Button =
					{
						Color = "0 0 0 0",
						Command = data.Friends.Count > (page + 1) * _config.Panel.Count
							? $"UI_Friends page {page + 1} {parent}"
							: ""
					}
				}, Layer);
			}

			#endregion

			#region Find Friend

			if (data.Friends != null && PlayerList && GetMaxFriends() - data.Friends.Count > 0)
				_config.FindFriendBtn.Get(ref container, player, null, Layer);

			#endregion

			#region Close

			_config.Close?.Get(ref container, Layer, Layer + ".Close", "✕");

			container.Add(new CuiButton
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text = {Text = ""},
				Button = {Color = "0 0 0 0", Command = "UI_Friends close"}
			}, Layer + ".Close");

			#endregion

			CuiHelper.DestroyUi(player, Layer);
			CuiHelper.AddUi(player, container);
		}

		#endregion

		#region Auth

		#region Hooks

		private void OnCupboardAuthorize(BuildingPrivlidge privilege, BasePlayer player)
		{
			if (privilege == null || player == null) return;

			var count = privilege.authorizedPlayers.Count;
			if (count == 0 || count <= RelationshipManager.maxTeamSize) return;
			
			var newAuthorizedPlayers = privilege.authorizedPlayers.ToList();
			newAuthorizedPlayers.RemoveRange(0, count - 1);
				
			privilege.authorizedPlayers = new HashSet<PlayerNameID>(newAuthorizedPlayers);
		}

		private void OnEntitySpawned(BaseEntity entity)
		{
			NextTick(() => CheckEntity(entity, true));
		}

		private void CheckEntity(BaseEntity entity, bool justCreated = false)
		{
			if (entity == null) return;

			var buildingPrivilege = entity as BuildingPrivlidge;
			if (buildingPrivilege != null && buildingPrivilege.OwnerID.IsSteamId())
			{
				EntityEntry playerEntity;
				if (_playerEntities.TryGetValue(entity.OwnerID, out playerEntity))
					playerEntity.BuildingPrivileges.Add(buildingPrivilege);
				else
					_playerEntities.Add(entity.OwnerID,
						new EntityEntry {BuildingPrivileges = new HashSet<BuildingPrivlidge> {buildingPrivilege}});

				if (justCreated)
					AuthToCupboard(new HashSet<BuildingPrivlidge> {buildingPrivilege}, entity.OwnerID);
				return;
			}

			var autoTurret = entity as AutoTurret;
			if (autoTurret != null && autoTurret.OwnerID.IsSteamId())
			{
				EntityEntry playerEntity;
				if (_playerEntities.TryGetValue(entity.OwnerID, out playerEntity))
					playerEntity.AutoTurrets.Add(autoTurret);
				else
					_playerEntities.Add(entity.OwnerID,
						new EntityEntry {AutoTurrets = new HashSet<AutoTurret> {autoTurret}});

				if (justCreated)
					AuthToTurret(new HashSet<AutoTurret> {autoTurret}, entity.OwnerID);
				return;
			}

			var codeLock = entity as CodeLock;
			if (codeLock != null)
			{
				var parentEntity = codeLock.GetParentEntity();
				if (parentEntity != null && IsBankBox(parentEntity))
					return;

				var ownerId = codeLock.OwnerID.IsSteamId() ? codeLock.OwnerID :
					parentEntity != null ? parentEntity.OwnerID : 0;
				if (!ownerId.IsSteamId())
					return;

				EntityEntry playerEntity;
				if (_playerEntities.TryGetValue(ownerId, out playerEntity))
					playerEntity.CodeLocks.Add(codeLock);
				else
					_playerEntities.Add(ownerId,
						new EntityEntry {CodeLocks = new HashSet<CodeLock> {codeLock}});

				if (justCreated)
					AuthToCodeLock(new HashSet<CodeLock> {codeLock}, ownerId);
			}
		}

		private void OnEntityKill(BaseEntity entity)
		{
			if (entity == null || entity.OwnerID == 0) return;

			var buildingPrivilege = entity as BuildingPrivlidge;
			if (buildingPrivilege != null)
			{
				foreach (var entry in _playerEntities.Where(entry =>
					         entry.Value.BuildingPrivileges.Contains(buildingPrivilege)))
					entry.Value.BuildingPrivileges.Remove(buildingPrivilege);

				return;
			}

			var autoTurret = entity as AutoTurret;
			if (autoTurret != null)
			{
				foreach (var entry in _playerEntities.Where(entry => entry.Value.AutoTurrets.Contains(autoTurret)))
					entry.Value.AutoTurrets.Remove(autoTurret);

				return;
			}

			var codeLock = entity as CodeLock;
			if (codeLock != null)
			{
				foreach (var entry in _playerEntities.Where(x => x.Value.CodeLocks.Contains(codeLock)))
					entry.Value.CodeLocks.Remove(codeLock);
			}
		}

		private object CanUseLockedEntity(BasePlayer player, BaseLock baseLock)
		{
			if (player == null || baseLock == null) return null;

			var parentEntity = baseLock.GetParentEntity();
			var ownerId = baseLock.OwnerID.IsSteamId() ? baseLock.OwnerID :
				parentEntity != null ? parentEntity.OwnerID : 0;
			if (!ownerId.IsSteamId() || ownerId == player.userID)
				return null;

			// Ignore the bank boxes
			if (IsBankBox(parentEntity))
			{
				return null;
			}

			var friend = PlayerData.GetOrLoad(baseLock.OwnerID.ToString())?.GetFriend(player.userID);
			if (friend == null)
			{
				return null;
			}


			if ((parentEntity is Door && friend.Doors) ||
			    (parentEntity is BuildingPrivlidge && friend.Cupboard) ||
			    (parentEntity is StorageContainer && !parentEntity.ShortPrefabName.Contains("cupboard") &&
			     friend.Containers))
			{
				var codeLock = baseLock as CodeLock;
				if (codeLock != null)
				{
					Effect.server.Run(codeLock.effectUnlocked.resourcePath, codeLock.transform.position);
				}

				return true;
			}


			return null;
		}

		private void CanChangeCode(BasePlayer player, CodeLock codeLock, string code, bool isGuest)
		{
			NextTick(() =>
			{
				if (!isGuest ? codeLock.code != code : codeLock.guestCode != code)
					return;

				var parentEntity = codeLock.GetParentEntity();
				var ownerId = codeLock.OwnerID.IsSteamId() ? codeLock.OwnerID :
					parentEntity != null ? parentEntity.OwnerID : 0;
				if (!ownerId.IsSteamId())
					return;

				UpdateAuthList(ownerId, AutoAuthType.All);
			});
		}

		#endregion

		private void UpdateAuthList(ulong playerID, AutoAuthType autoAuthType)
		{
			EntityEntry entityEntry;
			if (!_playerEntities.TryGetValue(playerID, out entityEntry)) return;

			switch (autoAuthType)
			{
				case AutoAuthType.All:
				{
					AuthToCupboard(entityEntry.BuildingPrivileges, playerID);

					AuthToTurret(entityEntry.AutoTurrets, playerID);
					break;
				}

				case AutoAuthType.Turret:
				{
					AuthToTurret(entityEntry.AutoTurrets, playerID);
					break;
				}

				case AutoAuthType.Cupboard:
				{
					AuthToCupboard(entityEntry.BuildingPrivileges, playerID);
					break;
				}
			}

			AuthToCodeLock(entityEntry.CodeLocks, playerID);
		}

		private void AuthToCodeLock(HashSet<CodeLock> codeLocks, ulong playerID)
		{
			if (codeLocks.Count <= 0) return;

			var data = PlayerData.GetOrLoad(playerID.ToString());
			if (data == null) return;

			var authList = GetPlayerNameIDs(playerID, AutoAuthType.All);

			foreach (var codeLock in codeLocks)
			{
				if (codeLock == null || codeLock.IsDestroyed) continue;

				codeLock.whitelistPlayers.Clear();
				codeLock.whitelistPlayers.Add(playerID);

				var parentEntity = codeLock.GetParentEntity();
				if (parentEntity != null && !IsBankBox(parentEntity))
				{
					codeLock.guestPlayers.Clear();

					foreach (var friend in authList)
					{
						var friendData = data.GetFriend(friend.userid);
						if (friendData != null)
						{
							var friendDataDoors = (parentEntity is Door && friendData.Doors);
							var friendDataCupboard = (parentEntity is BuildingPrivlidge && friendData.Cupboard);
							var friendDataContainers = (parentEntity is StorageContainer &&
							                            !parentEntity.ShortPrefabName.Contains("cupboard") &&
							                            friendData.Containers);

							if (friendDataDoors ||
							    friendDataCupboard ||
							    friendDataContainers)
							{
								codeLock.guestPlayers.Add(friend.userid);
							}
						}
					}
				}

				codeLock.SendNetworkUpdate();
			}
		}

		private void AuthToCupboard(HashSet<BuildingPrivlidge> cupboards, ulong playerID)
		{
			if (cupboards.Count <= 0) return;
			var authList = GetPlayerNameIDs(playerID, AutoAuthType.Cupboard);

			foreach (var buildingPrivilege in cupboards.Where(buildingPrivilege =>
				         buildingPrivilege != null && !buildingPrivilege.IsDestroyed))
			{
				buildingPrivilege.authorizedPlayers.Clear();

				foreach (var friend in authList)
					buildingPrivilege.authorizedPlayers.Add(friend);

				buildingPrivilege.SendNetworkUpdateImmediate();
			}
		}

		private void AuthToTurret(HashSet<AutoTurret> autoTurrets, ulong playerID)
		{
			if (autoTurrets.Count <= 0) return;
			var authList = GetPlayerNameIDs(playerID, AutoAuthType.Turret);

			foreach (var autoTurret in autoTurrets)
			{
				if (autoTurret == null || autoTurret.IsDestroyed) continue;
				var isOnline = false;
				if (autoTurret.IsOnline())
				{
					autoTurret.SetIsOnline(false);
					isOnline = true;
				}

				autoTurret.authorizedPlayers.Clear();

				foreach (var friend in authList) autoTurret.authorizedPlayers.Add(friend);

				if (isOnline) autoTurret.SetIsOnline(true);
				autoTurret.SendNetworkUpdateImmediate();
			}
		}

		private List<PlayerNameID> GetPlayerNameIDs(ulong playerId, AutoAuthType autoAuthType)
		{
			var playerNameIDs = new List<PlayerNameID>();
			var authList = GetAuthList(playerId, autoAuthType);

			playerNameIDs.AddRange(authList.Select(auth => new PlayerNameID
			{
				userid = auth, username = covalence.Players.FindPlayer(auth.ToString())?.Name ?? string.Empty,
				ShouldPool = true
			}));

			return playerNameIDs;
		}

		private HashSet<ulong> GetAuthList(ulong playerID, AutoAuthType autoAuthType)
		{
			var sharePlayers = new HashSet<ulong> {playerID};
			
			var data = PlayerData.GetOrLoad(playerID.ToString());
			if (data == null) return sharePlayers;

			data.Friends?.ForEach(friend =>
			{
				if (autoAuthType == AutoAuthType.All ||
				    autoAuthType == AutoAuthType.Turret ? friend.Turrets :
				    autoAuthType == AutoAuthType.Cupboard ? friend.Cupboard :
				    autoAuthType == AutoAuthType.Doors ? friend.Doors :
				    autoAuthType == AutoAuthType.Containers && friend.Containers)
				{
					sharePlayers.Add(friend.UserId);
				}
			});

			return sharePlayers;
		}

		#endregion

		#region Utils

		#region Convert

		private Coroutine _friendsConvertation;

		#region Commands

		[ConsoleCommand("friends.convert")]
		private void CmdConsoleConvert(ConsoleSystem.Arg arg)
		{
			if (!arg.IsServerside) return;

			var data = LoadOldPluginData();
			if (data == null) return;

			_friendsConvertation = Rust.Global.Runner.StartCoroutine(StartConvertOldData(data.Players.ToArray(),
				() => { Puts($"{data.Players.Count} players was converted!"); }));
		}

		private OldPluginClasses.PluginData LoadOldPluginData()
		{
			OldPluginClasses.PluginData data = null;

			try
			{
				data = Interface.Oxide.DataFileSystem.ReadObject<OldPluginClasses.PluginData>(Name);
			}
			catch (Exception e)
			{
				Interface.Oxide.LogError("There was an error reading plugin data: {0}", e.Message);
			}

			return data;
		}

		private IEnumerator StartConvertOldData(KeyValuePair<ulong, OldPluginClasses.PluginData.PlayerData>[]
				players,
			Action onFinish = null)
		{
			for (var i = 0; i < players.Length; i++)
			{
				var check = players[i];

				var data = PlayerData.GetOrCreate(check.Key.ToString());
				if (data == null) continue;

				data.DisplayName = check.Value.DisplayName;
				data.Friends = check.Value.Friends;
				data.UserID = check.Value.UserID;
				data.RemovedFriends = new HashSet<ulong>(check.Value.RemovedFriends);
				
				data.OnChanged();
				
				if (i % 10 == 0)
					yield return CoroutineEx.waitForFixedUpdate;
			}

			onFinish?.Invoke();

			_friendsConvertation = null;
		}

		#endregion

		#region Classes

		private class OldPluginClasses
		{
			public class PluginData
			{
				[JsonProperty(PropertyName = "Players", ObjectCreationHandling = ObjectCreationHandling.Replace)]
				public Dictionary<ulong, PlayerData> Players = new Dictionary<ulong, PlayerData>();

				public class PlayerData
				{
					[JsonProperty(PropertyName = "Display Name")]
					public string DisplayName;

					[JsonProperty(PropertyName = "UserId")]
					public ulong UserID;

					[JsonProperty(PropertyName = "Friends", ObjectCreationHandling = ObjectCreationHandling.Replace)]
					public List<FriendData> Friends = new List<FriendData>();

					[JsonProperty(PropertyName = "Removed Friends",
						ObjectCreationHandling = ObjectCreationHandling.Replace)]
					public List<ulong> RemovedFriends = new List<ulong>();
				}
			}
		}

		#endregion

		#endregion

		private bool IsBankBox(BaseNetworkable entity)
		{
			return Bank != null && Bank.Call<bool>("IsBankBox", entity);
		}

		#region Log

		private void Log(string filename, string text)
		{
			if (_config.LogToConsole) Puts(text);

			if (_config.LogToFile) LogToFile(filename, $"[{DateTime.Now}] {text}", this);
		}

		#endregion

		private readonly Regex _regex = new Regex(@"<avatarFull><!\[CDATA\[(.*)\]\]></avatarFull>");

		private void GetAvatar(ulong userId, Action<string> callback)
		{
			if (callback == null) return;

			webrequest.Enqueue($"http://steamcommunity.com/profiles/{userId}?xml=1", null, (code, response) =>
			{
				if (code != 200 || response == null)
					return;

				var avatar = _regex.Match(response).Groups[1].ToString();
				if (string.IsNullOrEmpty(avatar))
					return;

				callback.Invoke(avatar);
			}, this);
		}

		private string GetPlayerName(ulong target)
		{
			var data = PlayerData.GetOrLoad(target.ToString());
			var result = data == null
				? covalence.Players.FindPlayerById(target.ToString())?.Name ?? "UNKNOWN"
				: data.DisplayName;

			return string.IsNullOrEmpty(result) ? "UNKNOWN" : result;
		}

		private void TimeHandle()
		{
			var toRemove = Pool.GetList<Invite>();

			_invites?.ForEach(invite =>
			{
				if (Time.time - invite.Cooldown >= 0)
				{
					RemoveNotify(invite.Target, invite.Guid);

					Notify(invite.Inviter, _config.Notify.Delay, Msg(NotifyTitle, invite.Inviter.UserIDString),
						Msg(TimeLose, invite.Inviter.UserIDString), _config.Notify.Image);

					Notify(invite.Target, _config.Notify.Delay, Msg(NotifyTitle, invite.Target.UserIDString),
						Msg(TargetTimeLose, invite.Target.UserIDString, invite.Inviter.displayName),
						_config.Notify.Image);

					toRemove.Add(invite);
				}
			});

			toRemove.ForEach(invite =>
			{
				if (_config.AddTeam)
					if (invite.Inviter != null && invite.Target != null)
					{
						var team = GetOrCreateTeam(invite.Inviter);
						if (team != null)
							if (!team.invites.Contains(invite.Target.userID))
								team.RejectInvite(invite.Target);
					}

				_invites.Remove(invite);
			});
			Pool.FreeList(ref toRemove);
		}

		private BasePlayer FindPlayer(List<FriendData> friendDatas)
		{
			return friendDatas.Select(friendData => FindPlayer(friendData.UserId))
				.FirstOrDefault(friend => friend != null);
		}

		private BasePlayer FindPlayer(ulong user)
		{
			foreach (var player in BasePlayer.activePlayerList)
				if (player.userID == user)
					return player;

			foreach (var player in BasePlayer.sleepingPlayerList)
				if (player.userID == user)
					return player;

			return null;
		}

		private List<BasePlayer> FindPlayer(string steamOrIdOrName)
		{
			var result = new List<BasePlayer>();

			foreach (var player in BasePlayer.activePlayerList)
				if (player.UserIDString == steamOrIdOrName ||
				    player.displayName.StartsWith(steamOrIdOrName, StringComparison.CurrentCultureIgnoreCase) ||
				    player.displayName.Contains(steamOrIdOrName))
					result.Add(player);

			return result;
		}

		private List<PlayerData> FindRemoveFriend(BasePlayer player, string friend)
		{
			var result = new List<PlayerData>();

			PlayerData.GetOrLoad(player.UserIDString)?.Friends?.ForEach(f =>
			{
				var fData = PlayerData.GetOrLoad(f.UserId.ToString());
				if (fData == null) return;

				if (f.UserId.ToString() == friend ||
				    (!string.IsNullOrEmpty(fData.DisplayName) &&
				     fData.DisplayName.StartsWith(friend, StringComparison.CurrentCultureIgnoreCase)))
					result.Add(fData);
			});

			
			
			return result;
		}

		private void RemoveFriend(BasePlayer player, ulong friend)
		{
			var data = PlayerData.GetOrLoad(player.UserIDString);
			if (data == null) return;
			
			var fData = PlayerData.GetOrLoad(friend.ToString());
			if (fData == null)
			{
				return;
			}

			var target = BasePlayer.FindByID(friend);

			var name = target != null ? target.displayName : $"{friend}";

			if (!data.Friends.Exists(x => x.UserId == friend))
			{
				Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
					Msg(IsNotFriend, player.UserIDString, name), _config.Notify.Image);
				return;
			}

			data.RemoveFriend(friend);
			fData.RemoveFriend(player.userID);

			if (_config.AddTeam) player.Team?.RemovePlayer(friend);

			if (_config.UseTeams)
				GetTeamList(player.userID)?.ForEach(member =>
				{
					PlayerData.GetOrLoad(member.ToString())?.RemoveFriend(friend);
					fData.RemoveFriend(member);
				});

			Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
				Msg(FriendRemoved, player.UserIDString, name), _config.Notify.Image);

			if (target != null)
				Notify(target, _config.Notify.Delay, Msg(NotifyTitle, target.UserIDString),
					Msg(FriendRemoved, target.UserIDString, player.displayName), _config.Notify.Image);

			NextTick(() =>
			{
				UpdateAuthList(player.userID, AutoAuthType.All);

				UpdateAuthList(friend, AutoAuthType.All);
			});
		}

		private RelationshipManager.PlayerTeam GetOrCreateTeam(BasePlayer player)
		{
			var team = RelationshipManager.ServerInstance.FindPlayersTeam(player.userID);
			if (team == null)
			{
				team = RelationshipManager.ServerInstance.CreateTeam();
				team.AddPlayer(player);
				team.SetTeamLeader(player.userID);
			}

			return team;
		}

		#region Invites

		private class Invite
		{
			public BasePlayer Inviter;
			public BasePlayer Target;
			public string Guid;
			public float Cooldown;

			public Invite(BasePlayer inviter, BasePlayer target, string guid)
			{
				Inviter = inviter;
				Target = target;
				Guid = guid;
				Cooldown = Time.time + _config.FriendInvite.Delay;
			}
		}

		private readonly List<Invite> _invites = new List<Invite>();

		private void SendInvite(BasePlayer inviter, BasePlayer target)
		{
			if (inviter == null || target == null || !inviter.userID.IsSteamId() || !target.userID.IsSteamId()) return;

			var data = PlayerData.GetOrLoad(inviter.UserIDString);
			if (data == null) return;

			if (data.Friends.Count >= _config.MaxFriendsAmount)
			{
				Notify(inviter, _config.Notify.Delay, Msg(NotifyTitle, inviter.UserIDString),
					Msg(TargetMaxFriends, inviter.UserIDString), _config.Notify.Image);
				return;
			}

			if (_invites.Exists(x => x.Inviter == inviter && x.Target == target))
			{
				Notify(inviter, _config.Notify.Delay, Msg(NotifyTitle, inviter.UserIDString),
					Msg(AlreadyPending, inviter.UserIDString), _config.Notify.Image);
				return;
			}

			if (_invites.Exists(x => x.Inviter == target || x.Target == target))
			{
				Notify(inviter, _config.Notify.Delay, Msg(NotifyTitle, inviter.UserIDString),
					Msg(PendingBusy, inviter.UserIDString), _config.Notify.Image);
				return;
			}

			var guid = string.Empty;
			if (Notifications)
			{
				var container = new CuiElementContainer();
				_config.FriendInvite.Buttons.ForEach(btn => btn.Get(ref container, target));

				guid = (string) Notifications.Call("ShowNotify",
					target,
					_config.FriendInvite.Delay,
					Msg(NotifyTitle, target.UserIDString),
					Msg(Pending, target.UserIDString, inviter.displayName),
					_config.FriendInvite.Image,
					container);

				Notify(inviter, _config.Notify.Delay, Msg(NotifyTitle, inviter.UserIDString),
					Msg(PendingSuccessSend, inviter.UserIDString), _config.Notify.Image);
			}
			else
			{
				Reply(target, Pending, inviter.displayName);
				Reply(inviter, PendingSuccessSend);
			}

			if (_config.AddTeam)
			{
				var team = GetOrCreateTeam(inviter);
				if (team != null)
					if (!team.invites.Contains(target.userID))
						team.SendInvite(target);
			}

			_invites.Add(new Invite(inviter, target, guid));
		}

		private void AcceptInvite(BasePlayer target)
		{
			var invite = _invites.Find(x => x.Target == target);
			if (invite == null)
			{
				Notify(target, _config.Notify.Delay, Msg(NotifyTitle, target.UserIDString),
					Msg(PendingNotFound, target.UserIDString), _config.Notify.Image);
				return;
			}

			var inviter = invite.Inviter;
			if (inviter == null) return;

			var iData = PlayerData.GetOrLoad(inviter.UserIDString);
			if (iData == null) return;

			var tData = PlayerData.GetOrLoad(target.UserIDString);
			if (tData == null) return;

			if (target.userID == inviter.userID)
			{
				Notify(target, _config.Notify.Delay, Msg(NotifyTitle, target.UserIDString),
					Msg(CantAddSelf, target.UserIDString), _config.Notify.Image);
				return;
			}

			if (_config.UseTeams)
			{
				GetTeamList(inviter.userID)?.ForEach(player =>
				{
					PlayerData.GetOrLoad(player.ToString())?.AddFriend(target.userID);
					tData.AddFriend(player);

					Log("friends", $"Player '{player}' added '{target.userID}' as a friend");
				});
			}
			else
			{
				PlayerData.GetOrLoad(inviter.UserIDString)?.AddFriend(target.userID);
				tData.AddFriend(inviter.userID);

				Log("friends", $"Player '{inviter.userID}' added '{target.userID}' as a friend");
			}

			RemoveNotify(invite.Target, invite.Guid);

			Notify(target, _config.Notify.Delay, Msg(NotifyTitle, target.UserIDString),
				Msg(FriendAdded, target.UserIDString, inviter.displayName), _config.Notify.Image);

			Notify(inviter, _config.Notify.Delay, Msg(NotifyTitle, inviter.UserIDString),
				Msg(FriendAdded, inviter.UserIDString, target.displayName), _config.Notify.Image);

			_invites.Remove(invite);

			if (_config.AddTeam)
			{
				target.Team?.RemovePlayer(target.userID);

				if (inviter.Team == null || inviter.Team.teamID == 0)
				{
					var team = RelationshipManager.ServerInstance.CreateTeam();
					team.AddPlayer(inviter);
					team.SetTeamLeader(inviter.userID);
					team.AddPlayer(target);
				}
				else
				{
					inviter.Team.AddPlayer(target);
				}
			}

			NextTick(() =>
			{
				if (_config.AddTeam && inviter.Team != null) UpdateTeamAuthList(GetTeamList(inviter.userID));
			});
		}

		private List<ulong> GetTeamList(ulong user)
		{
			var result = new List<ulong> {user};

			PlayerData.GetOrLoad(user.ToString())?.Friends.ForEach(friend =>
			{
				if (!result.Contains(friend.UserId))
					result.Add(friend.UserId);
			});

			return result;
		}

		private void CancelInvite(BasePlayer player)
		{
			var invite = _invites.Find(x => x.Target == player);
			if (invite == null)
			{
				Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
					Msg(PendingNotFound, player.UserIDString), _config.Notify.Image);
				return;
			}

			Notify(invite.Inviter, _config.Notify.Delay, Msg(NotifyTitle, invite.Inviter.UserIDString),
				Msg(InviterFriendCancel, invite.Inviter.UserIDString, player.displayName), _config.Notify.Image);

			Notify(player, _config.Notify.Delay, Msg(NotifyTitle, player.UserIDString),
				Msg(FriendCancel, player.UserIDString, invite.Inviter.displayName), _config.Notify.Image);

			RemoveNotify(invite.Target, invite.Guid);

			_invites.Remove(invite);
		}

		#endregion

		#endregion

		#region Lang

		private const string
			UITitle = "UITitle",
			Online = "Online",
			Offline = "Offline",
			NotifyTitle = "InviteTitle",
			Pending = "Pending",
			AlreadyPending = "AlreadyPending",
			PendingBusy = "PendingBusy",
			PendingSuccessSend = "PendingSuccessSend",
			PendingNotFound = "PendingNotFound",
			AlreadyFriends = "AlreadyFriends",
			CantAddSelf = "CantAddSelf",
			MaxFriends = "MaxFriends",
			TargetMaxFriends = "TargetMaxFriends",
			TimeLose = "TimeLose",
			TargetTimeLose = "TargetTimeLose",
			FriendAdded = "FriendAdded",
			FriendCancel = "FriendCancel",
			InviterFriendCancel = "InviterFriendCancel",
			NoFriends = "NoFriends",
			FriendList = "FriendList",
			IsNotFriend = "IsNotFriend",
			FriendRemoved = "FriendRemoved",
			NotFound = "NotFound",
			FF = "FF",
			FFOn = "FFOn",
			FFOff = "FFOff",
			FFErrorSyntax = "FFErrorSyntax",
			ErrorSyntax = "ErrorSyntax",
			SamsOn = "SamsOn",
			SamsOff = "SamsOff",
			DoorsOn = "DoorsOn",
			DoorsOff = "DoorsOff",
			TurretsOn = "TurretsOn",
			TurretsOff = "TurretsOff",
			CupboardOn = "CupboardOn",
			CupboardOff = "CupboardOff",
			ContainersOn = "ContainersOn",
			ContainersOff = "ContainersOff",
			Accept = "Accept",
			Cancel = "Cancel",
			FindFriend = "FindFriend",
			Help = "Help",
			MultipleFound = "MultipleFound";

		protected override void LoadDefaultMessages()
		{
			lang.RegisterMessages(new Dictionary<string, string>
			{
				[UITitle] = "FRIENDS SYSTEM",
				[Online] = "Online",
				[Offline] = "Offline",
				[NotifyTitle] = "Friend System",
				[Pending] = "{0} sent you a friend request",
				[AlreadyPending] =
					"Your previous friend request has not yet been answered by the player, please wait for a response!",
				[PendingBusy] =
					"The player already has a request from another player, please wait until the player responds to the other",
				[PendingSuccessSend] = "Request sent successfully, please wait while it accepts it.",
				[PendingNotFound] = "You have no friend requests",
				[AlreadyFriends] = "You are already friends!",
				[CantAddSelf] = "You cannot add yourself as a friend.",
				[MaxFriends] = "You have reached the maximum number of friends",
				[TargetMaxFriends] = "The player has reached the maximum number of friends",
				[TimeLose] = "The player did not have time to accept the invitation!",
				[TargetTimeLose] = "You did not have time to accept the invitation from {0}",
				[FriendAdded] = "{0} has become your friend.",
				[FriendCancel] = "You gave up your friendship with {0}",
				[InviterFriendCancel] = "{0} refused to befriend you.",
				[NoFriends] = "You have no friends = (",
				[FriendList] = "Your friends list: {0}",
				[IsNotFriend] = "The player is not your friend",
				[FriendRemoved] = "You ended your friendship with {0}",
				[NotFound] = "Player '{0}' not found!",
				[FF] = "Attention! {0} Your friend, you cannot hurt him. Enable/Disable damage on friends: /friend ff",
				[FFOn] = "You enabled Friends Damage!",
				[FFOff] = "You turned off damage to friends!",
				[FFErrorSyntax] = "Use: /{0} name/steamid [on/off]",
				[ErrorSyntax] = "Use: /{0} {1} name/steamid",
				[DoorsOn] = "You have enabled friends to access your doors!",
				[DoorsOff] = "You have disabled friends' access to your doors!",
				[TurretsOn] = "You have enabled the authorization of friends in turrets",
				[TurretsOff] = "You have disabled the authorization of friends in turrets",
				[SamsOn] = "You have enabled the authorization of friends in SAMs",
				[SamsOff] = "You have disabled the authorization of friends in SAMs",
				[CupboardOn] = "You have enabled cupboard friends authorization",
				[CupboardOff] = "You have disabled cupboard friends authorization",
				[ContainersOn] = "You have enabled containers friends authorization",
				[ContainersOff] = "You have disabled containers friends authorization",
				[Accept] = "Accept",
				[Cancel] = "Cancel",
				[FindFriend] = "FIND FRIEND",
				[Help] = "FRIEND HELP: /friend add|remove|accept|cancel|list|doors|cupboard|turrets",
				[MultipleFound] = "Found multiple players: {0}\nUse: /{1} {2} {3} [ID]"
			}, this);

			lang.RegisterMessages(new Dictionary<string, string>
			{
				[UITitle] = "СИСТЕМА ДРУЗЕЙ",
				[Online] = "Онлайн",
				[Offline] = "Оффлайн",
				[NotifyTitle] = "Система друзей",
				[Pending] = "{0} отправил вам запрос в друзья",
				[AlreadyPending] = "На ваш предыдущий запрос дружбы игрок еще не ответил, ожидайте его ответа!",
				[PendingBusy] =
					"У игрока уже есть запрос от другого игрока, ожидайте пока игрок игрок не ответит другому",
				[PendingSuccessSend] = "Запрос успешно отправлен, ожидайте пока он примет его.",
				[PendingNotFound] = "К вам нет запросов в друзья",
				[AlreadyFriends] = "Вы уже являетесь друзьями!",
				[CantAddSelf] = "Вы не можете добавить себя в друзья.",
				[MaxFriends] = "У вас достигнуто максимальное количество друзей",
				[TargetMaxFriends] = "У игрока достигнуто максимальное количество друзей",
				[TimeLose] = "Игрок не успел принять приглашение!",
				[TargetTimeLose] = "Вы не успели принять приглашение от {0}",
				[FriendAdded] = "{0} стал Вашим другом.",
				[FriendCancel] = "Вы отказались от дружбы с {0}",
				[InviterFriendCancel] = "{0} отказался от дружбы с Вами.",
				[NoFriends] = "У Вас нет друзей =(",
				[FriendList] = "Список ваших друзей: {0}",
				[IsNotFriend] = "Игрок '{0}' не является Вашим другом",
				[FriendRemoved] = "Вы прекратили дружбу с {0}",
				[NotFound] = "Игрок '{0}' не найден!",
				[FF] =
					"Внимание! {0} Ваш друг, вы не можете его ранить. Включение/Отключение урона по друзьям /friend ff",
				[FFOn] = "Вы включили урон по друзьям!",
				[FFOff] = "Вы выключили урон по друзьям!",
				[FFErrorSyntax] = "Используйте: /{0} name/steamid [on/off]",
				[ErrorSyntax] = "Используйте: /{0} {1} name/steamid",
				[DoorsOn] = "Вы включили доступ друзей к вашим дверям!",
				[DoorsOff] = "Вы выключили доступ друзей к вашим дверям!",
				[TurretsOn] = "Вы включили авторизацию друзей в турелях",
				[TurretsOff] = "Вы выключили авторизацию друзей в турелях",
				[SamsOn] = "Вы включили авторизацию друзей в ПВО",
				[SamsOff] = "Вы выключили авторизацию друзей в ПВО",
				[CupboardOn] = "Вы включили авторизацию друзей в шкафах",
				[CupboardOff] = "Вы выключили авторизацию друзей в шкафах",
				[ContainersOn] = "Вы включили авторизацию друзей в ящиках",
				[ContainersOff] = "Вы выключили авторизацию друзей в ящиках",
				[Accept] = "Принять",
				[Cancel] = "Отклонить",
				[FindFriend] = "НАЙТИ ДРУГА",
				[Help] = "ПОМОЩЬ ПО ДРУЗЬЯМ: /friend add|remove|accept|cancel|list|doors|cupboard|turrets",
				[MultipleFound] = "Найдено несколько игроков: {0}\nИспользуйте: /{1} {2} {3} [ID]"
			}, this, "ru");
		}

		private void Notify(BasePlayer player, float delay, string title, string description, string image)
		{
			if (player == null) return;

			if (Notifications)
				Notifications.Call("ShowNotify", player, delay, title, description, image);
			else
				SendReply(player, description);

			var reply = "";
			if (reply == "14879")
			{
			}
		}

		private void RemoveNotify(BasePlayer player, string guid)
		{
			Notifications?.Call("RemoveNotify", player, guid);
		}

		private void Reply(BasePlayer player, string key, params object[] obj)
		{
			SendReply(player, Msg(key, player.UserIDString, obj));
		}

		private string Msg(string key, string userid = null, params object[] obj)
		{
			return string.Format(lang.GetMessage(key, this, userid), obj);
		}

		#endregion

		#region Cooldown

		private readonly Dictionary<ulong, float> _cooldown = new Dictionary<ulong, float>();

		private bool IsCd(ulong user)
		{
			return GetCd(user) >= 0;
		}

		private int GetCd(ulong user)
		{
			return _cooldown.ContainsKey(user) ? (int) (_cooldown[user] - Time.time) : -1;
		}

		private void SetCd(ulong user)
		{
			var time = Time.time + _config.FFDelay;
			if (_cooldown.ContainsKey(user))
				_cooldown[user] = time;
			else
				_cooldown.Add(user, time);
		}

		#endregion

		#region API

		private ulong[] GetFriends(string playerId)
		{
			return GetFriends(ulong.Parse(playerId));
		}

		private ulong[] GetFriends(ulong playerId)
		{
			return PlayerData.GetOrLoad(playerId.ToString())?.Friends.Select(x => x.UserId).ToArray();
		}

		private ulong[] GetFriendList(string playerId)
		{
			return GetFriendList(ulong.Parse(playerId));
		}

		private ulong[] GetFriendList(ulong playerId)
		{
			return GetFriends(playerId);
		}

		private bool AreFriends(string playerId, string friendId)
		{
			return AreFriends(ulong.Parse(playerId), ulong.Parse(friendId));
		}

		private bool AreFriends(ulong playerId, ulong friendId)
		{
			return PlayerData.GetOrLoad(playerId.ToString())?.IsFriend(friendId) == true;
		}

		private bool HasFriend(string playerId, string friendId)
		{
			return HasFriend(ulong.Parse(playerId), ulong.Parse(friendId));
		}

		private bool HasFriend(ulong playerId, ulong friendId)
		{
			return AreFriends(playerId, friendId);
		}

		private bool HasFriends(string playerId, string friendId)
		{
			return AreFriends(ulong.Parse(playerId), ulong.Parse(friendId));
		}

		private bool HasFriends(ulong playerId, ulong friendId)
		{
			return AreFriends(playerId, friendId);
		}

		private bool IsFriend(string playerId, string friendId)
		{
			return IsFriend(ulong.Parse(playerId), ulong.Parse(friendId));
		}

		private bool IsFriend(ulong playerId, ulong friendId)
		{
			return AreFriends(playerId, friendId);
		}

		private bool WasFriend(string playerId, string friendId)
		{
			return WasFriend(ulong.Parse(playerId), ulong.Parse(friendId));
		}

		private bool WasFriend(ulong playerId, ulong friendId)
		{
			return PlayerData.GetOrLoad(playerId.ToString())?.RemovedFriends.Contains(friendId) == true;
		}

		private int GetMaxFriends()
		{
			return _config.MaxFriendsAmount;
		}

		#endregion
	}
}

// --- End of file: Friends-1.22.2.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TsunHorse (1).cs ---
// --- Original Local Path: TsunHorse (1).cs ---

/* 
████████╗███████╗██╗   ██╗███╗   ██╗██████╗ ███████╗██████╗ ███████╗██╗     ██╗      █████╗ ███████╗    ██╗  ██╗ ██████╗ ██████╗ ███████╗███████╗███████╗
╚══██╔══╝██╔════╝██║   ██║████╗  ██║██╔══██╗██╔════╝██╔══██╗██╔════╝██║     ██║     ██╔══██╗██╔════╝    ██║  ██║██╔═══██╗██╔══██╗██╔════╝██╔════╝██╔════╝
   ██║   ███████╗██║   ██║██╔██╗ ██║██║  ██║█████╗  ██████╔╝█████╗  ██║     ██║     ███████║███████╗    ███████║██║   ██║██████╔╝███████╗█████╗  ███████╗
   ██║   ╚════██║██║   ██║██║╚██╗██║██║  ██║██╔══╝  ██╔══██╗██╔══╝  ██║     ██║     ██╔══██║╚════██║    ██╔══██║██║   ██║██╔══██╗╚════██║██╔══╝  ╚════██║
   ██║   ███████║╚██████╔╝██║ ╚████║██████╔╝███████╗██║  ██║███████╗███████╗███████╗██║  ██║███████║    ██║  ██║╚██████╔╝██║  ██║███████║███████╗███████║
   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;
using System.Text.RegularExpressions;
using System.Runtime.CompilerServices;
using UnityEngine;
using Rust;
using Newtonsoft.Json;
using Network;
using System.Reflection;
using Facepunch;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Configuration;
namespace Oxide.Plugins
{ 
    [Info("Tsunderellas horse plugin", "Tsunderella", "2.0.5")]
    [Description("Adds Tsunderellas horses ")]


    class TsunHorse : RustPlugin
    {
		
#region config

  		public bool smoothanim;
  		public bool thirdperson;
  		public bool invul;
  		public bool taming;
		public bool enablecommand;
		public string animals;

		public int sprintspeeds;
		public int walkspeeds;
		public int backspeeds;
		public int turnspeeds; 
		public int stopcmdcd; 
		public int stopradius;
		private const string StopHorses = "tsunhorse.stophorse";
		private const string RideHorses = "tsunhorse.ridehorse";
 		void init()
		{

			LoadDefaultConfig();
		}
		void Unload()
		{
           foreach(var horsemount in GameObject.FindObjectsOfType<RHorse>())
            {
				if(horsemount!=null){
					horsemount.delthis(false);
				}
            }
		}
        void Loaded()
        { 
			permission.RegisterPermission(StopHorses, this);
			permission.RegisterPermission(RideHorses, this);
            LoadVariables();
        }
        private bool Changed;
        private object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
			Config["HorseRiding"]=null;
			if(Config["HorseRiding"]!=null){
				var removedata = Config["HorseRiding"] as Dictionary<string, object>;
				if (removedata != null)
				{
					removedata = new Dictionary<string, object>();
					Config["HorseRiding"] = null;
					Changed = true;
				}
			}
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

        private void LoadVariables()
        {
            smoothanim = Convert.ToBoolean(GetConfig("HorseRiding2.0", "Smooth Animation", false));
            thirdperson = Convert.ToBoolean(GetConfig("HorseRiding2.0", "Middle mouse thirdperson", true));
            animals = Convert.ToString(GetConfig("HorseRiding2.0", "Allowed animals", "horse"));

            invul = Convert.ToBoolean(GetConfig("HorseRiding2.0", "Can the horse die(riding)", true));
            taming = Convert.ToBoolean(GetConfig("HorseRiding2.0", "Require Taming", false));
            sprintspeeds = Convert.ToInt32(GetConfig("HorseRiding2.0", "Sprint Speed", 9.84));
            walkspeeds = Convert.ToInt32(GetConfig("HorseRiding2.0", "Walk Speed", 2.16));
            turnspeeds = Convert.ToInt32(GetConfig("HorseRiding2.0", "Turn Speed", 5)); 
            stopradius = Convert.ToInt32(GetConfig("StopHorse", "Stop Radius", 10)); 
            stopcmdcd = Convert.ToInt32(GetConfig("StopHorse", "Command Cooldown(seconds)", 30)); 
            enablecommand = Convert.ToBoolean(GetConfig("StopHorse", "Enable Command", true));
			
            if (Changed)
            {
                SaveConfig();
                Changed = false;
            }
        }
        protected override void LoadDefaultConfig()
        {
            Config.Clear();
            LoadVariables();
        } 
#endregion	

  		[ChatCommand("stophorse")]
        void cmdHorse(BasePlayer player)
        { 
			if(!enablecommand)return;
			if(!permission.UserHasPermission(player.UserIDString, StopHorses))return;

			if(player.GetComponent<CoolDownCMD>()!=null){
				return;
			}else{
				player.gameObject.AddComponent<CoolDownCMD>();
				player.GetComponent<CoolDownCMD>().Startcd(stopcmdcd);
			}
			List<BaseEntity> entities1 = new List<BaseEntity>();
			var amount=0;
			Vis.Entities<BaseEntity>(player.transform.position, stopradius, entities1);
			foreach (BaseEntity e in entities1.Distinct().ToList())
			{
				if(e.GetComponent<BaseNpc>()!=null){
					if(animals.Contains(e.ShortPrefabName.ToString())){
						var array =e.GetComponents(typeof(Component));
						foreach(var test in array){
							if(test.ToString()==e.name+" (AIAnimal)"){
								GameObject.Destroy(test);
							} 
							
						}
						e.GetComponent<BaseNpc>().Pause();
						
						amount++;
					}
				}
			}
			SendReply(player,"You stopped "+amount+" animals!");
		}  

		
        void OnPlayerInput(BasePlayer player, InputState input)
        {
			if(player==null)return;
			if(player.isMounted && input.WasJustPressed(BUTTON.FIRE_THIRD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				if(player.net?.connection?.authLevel!=0)return;
				if(!thirdperson)return;
				rhorse.Movement("ThirdPerson");
			}
			if(player.isMounted && input.WasJustPressed(BUTTON.FORWARD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Walk");
			}
			if(player.isMounted && input.WasJustReleased(BUTTON.FORWARD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Stop");
			}
			//forward
			//backwards
			if(player.isMounted && input.WasJustPressed(BUTTON.BACKWARD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Backwards");
			}
			if(player.isMounted && input.WasJustReleased(BUTTON.BACKWARD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Stop");
			}
			//backwards
			//sprint
			if(player.isMounted && input.WasJustPressed(BUTTON.SPRINT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Sprint");
			}
			if(player.isMounted && input.WasJustReleased(BUTTON.SPRINT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>(); 
				if(ent==null)return;
				var horse=ent.GetParentEntity(); 
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("StopSprint");
			}
			//sprint
			//attacktest
			if(player.isMounted && input.WasJustPressed(BUTTON.RELOAD)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Attack");
			}
			//attacktest
			//right
			if(player.isMounted && input.WasJustPressed(BUTTON.RIGHT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Right");
			}
			if(player.isMounted && input.WasJustReleased(BUTTON.RIGHT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Stopturn");
			}
			//right
			//left
			if(player.isMounted && input.WasJustPressed(BUTTON.LEFT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Left");
			}
			if(player.isMounted && input.WasJustReleased(BUTTON.LEFT)){
				var mount=player.GetMounted();
				if(mount==null)return;
				var ent=mount.GetComponent<BaseEntity>();
				if(ent==null)return;
				var horse=ent.GetParentEntity();
				if(horse==null)return;
				var rhorse=horse.GetComponent<RHorse>();
				if(rhorse==null)return;
				rhorse.Movement("Stopturn");
			}
			//left
			if(!player.isMounted && input.WasJustPressed(BUTTON.USE)){
				//Debug.Log("1");
			if(!permission.UserHasPermission(player.UserIDString, RideHorses))return;
			        RaycastHit[] hits;
					//Debug.Log("2");
				hits = Physics.RaycastAll(player.eyes.position, player.eyes.HeadForward(), 1.0F);
				
				for (int i = 0; i < hits.Length; i++)
				{ 
					//Debug.Log("3");
					RaycastHit hit = hits[i];
					var horse=hit.GetEntity();
					if(horse==null)return; 
					//Debug.Log("4");
					var horsename=horse.ShortPrefabName.ToString();
					if(!animals.Contains(horsename))return;
					//Debug.Log("5");
					if(horse.GetComponent<BaseCombatEntity>().health==1)return;
					//Debug.Log("6");
					if(horse.GetComponent<RHorse>()==null){
						//Debug.Log("7");
					horse.gameObject.AddComponent<RHorse>();
					horse.GetComponent<RHorse>().GrabConfig(smoothanim,turnspeeds, sprintspeeds, walkspeeds,taming);
					horse.GetComponent<RHorse>().AddMount(player);
					return;
					}else{
						SendReply(player,"Only one person can mount this!");
						return;
					horse.GetComponent<RHorse>().AddMount(player);
					}
					
				}
			}

		}
	    void OnEntityDismounted(BaseMountable bm, BasePlayer player)
        {
			if(bm.GetComponent<HiddenChair>()==null)return;
			if(bm.GetComponent<HiddenChair>().horse==null)return;
			var horsepostemp=bm.GetComponent<HiddenChair>().horse.transform.position;
			if(bm.GetComponent<HiddenChair>().rhorse==null)return;
			bm.GetComponent<HiddenChair>().rhorse.Destroy();
			player.transform.position=horsepostemp;
			player.MovePosition(horsepostemp);
			player.ClientRPCPlayer(null, player, "ForcePositionTo", horsepostemp);
			player.SendNetworkUpdate();
			player.UpdateNetworkGroup();
			player.SendNetworkUpdateImmediate(true); 
		}
		object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
		{
			if(!info.hasDamage)return null;
			if(entity==null)return null;
			if(entity.GetComponent<RHorse>()!=null){
				if(!invul)return true;
				if(entity.GetComponent<RHorse>().shouldkill)return null;
				if(entity.health-1>=info.damageTypes.Total())return null;
				
				entity.GetComponent<RHorse>().delthis(true);
				entity.health=1;
				entity.SendNetworkUpdateImmediate();
				return false;
			}
			if(entity.GetComponent<Damageredirect>()!=null){
				if(entity.GetComponent<Damageredirect>().player==null)return null;
				entity.GetComponent<Damageredirect>().player.Hurt(info);
				return false;
			}
			return null;
		}
/* 		object CanNetworkTo(BaseEntity target, BasePlayer player)
		{
			if(target.GetComponent<BaseEntity>()==null)return null;
			if(target.GetComponent<HiddenChair>()==null)return null; 
			
			if(target.GetComponent<HiddenChair>().player==player)return null;
			Puts(""+player);
			return false;
		}  */ //shit won't work for me >:C
		 class Damageredirect : MonoBehaviour  {public BasePlayer player;}
		 class HiddenChair : MonoBehaviour
        {
			public BasePlayer player;
			public BaseNpc horse;
			public RHorse rhorse;
		}
		 class CoolDownCMD : MonoBehaviour
        {
			private IEnumerator coroutine;
            public void Startcd(float time)
			{
				coroutine = Coold(time);
				StartCoroutine(coroutine);
			}

			private IEnumerator Coold(float waitTime)
			{
				while (true)
				{
					yield return new WaitForSeconds(waitTime);
					Destroy();
				}
			}
			void Destroy()
            {
                enabled = false;
                CancelInvoke();
                Destroy(this);
            } 
		}
		 class RHorse : MonoBehaviour
        {
			private BaseEntity entity;
			public BaseNpc horse;
			public BasePlayer player;
			public bool smooth;	
			public float turnspeed;
			public float sprintspeed;
			public float walkspeed;
			public float backspeed;
			public bool taming;
			public bool shouldkill;
			public int fixv;
			public int updatev;
			float forward;
			float right;
			float sprint;
			float speed;
			float speedturn;
			public string movesets;
			public BaseEntity chair;
			public BaseMountable bm;
			bool mounted;
			bool thirdperson;
		    void Awake() 
            {
				
                entity = GetComponent<BaseEntity>();  
				horse = GetComponent<BaseNpc>();
				var array =horse.GetComponents(typeof(Component));
				foreach(var test in array){
					if(test.ToString()==horse.name+" (AIAnimal)"){
						GameObject.Destroy(test);
					} 
					
				}
				horse.Resume();
                gameObject.layer = (int)Layer.Reserved1;
                gameObject.name = "RidingHorse";
				forward=0;
				sprint=0;
				right=0;
				//UpdateHorseShit();
				//Movement("Left")

			}
			public void GrabConfig(bool st,float ts, float ss, float ws, bool t)
			{
				smooth=st;	
				turnspeed=ts*10;
				sprintspeed=ss;
				walkspeed=ws;
				taming=t;
			}
			public void delthis(bool kill)
			{
				shouldkill=kill;
				if(horse!=null)horse.Pause();
				Destroy();
			}
			public void AddMount( BasePlayer bplayer)
			{
				//horse=horsenpc;
				player=bplayer;
				
				var pos = entity.transform.position;
				Quaternion ang = entity.transform.rotation;
				chair = GameManager.server.CreateEntity("assets/prefabs/deployable/chair/chair.deployed.prefab", pos,new Quaternion(0.0f,0.0f,0.0f,0.0f), true);
				chair.enableSaving=false;
				//chair.gameObject.AddComponent<HiddenChair>().player=bplayer;
				//chair.GetComponent<BaseNetworkable>().limitNetworking=true;
				bm = chair.GetComponent<BaseMountable>();
				
				bm.gameObject.AddComponent<HiddenChair>().player=bplayer;
				bm.GetComponent<HiddenChair>().horse=horse;
				bm.GetComponent<HiddenChair>().rhorse=this;
				//bm.transform.rotation=ang;
				bm.isMobile=true;
				bm.skinID=(ulong)1169930802;
				chair.Spawn();
                bm.GetComponent<DestroyOnGroundMissing>().enabled = false;
                bm.GetComponent<GroundWatch>().enabled = false;
				chair.gameObject.AddComponent<Damageredirect>().player=bplayer;
				chair.SendNetworkUpdate();
				chair.SendNetworkUpdateImmediate();
				chair.enableSaving=false; 
				//chair.GetComponent<BaseNetworkable>().limitNetworking=true;
				bm.isMobile=true;

















				bm.SetParent(entity,1);


				var animal=horse.ShortPrefabName.ToString();
				var chairvec=new Vector3(0,0,0);
				var chairang=new Vector3(0,0,0);
				if(animal=="horse"){chairvec=new Vector3(-0.5f,0,-0.4f);chairang=new Vector3(0,-90,-90);}
				//if(animal=="horse"){chairvec=new Vector3(0f,1f,0f);chairang=new Vector3(0f,0f,0f);}
				if(animal=="stag"){chairvec=new Vector3(0,0,0);chairang=new Vector3(0,0,0);}
				if(animal=="chicken"){chairvec=new Vector3(0,0.4f,0);chairang=new Vector3(180,90,0);}
				if(animal=="wolf"){chairvec=new Vector3(0,-0.2f,0);chairang=new Vector3(0,-90,0);}
				if(animal=="bear"){chairvec=new Vector3(0,1,0);chairang=new Vector3(0,0,0);}
				if(animal=="boar"){chairvec=new Vector3(0,0,-0.5f);chairang=new Vector3(0,-90,-90);}
				bm.transform.localPosition=chairvec;
				bm.transform.localEulerAngles=chairang;

				bm.MountPlayer(player);
				mounted=true;
				
				  
			}
			public void Destroy()
            {
				if(player!=null){
					player.SetPlayerFlag(BasePlayer.PlayerFlags.ThirdPersonViewmode, false);
					player.EnsureDismounted();

				}
				if(chair!=null){ 
					chair.GetComponent<BaseMountable>().transform.parent = null;
					chair.GetComponent<BaseMountable>().DismountAllPlayers();
					chair.Kill();
				}
				if(horse!=null)
					horse.Pause();
				if(horse!=null&&shouldkill){
					horse.Hurt(150f, DamageType.Fall, null, true);
				}
				if(debug!=null){
				debug.Kill();
				}
                enabled = false;
                CancelInvoke();
                Destroy(this);
            } 
			public void Movement(string MoveSet)
			{
				switch (MoveSet)
                {
					case "ThirdPerson":
						thirdperson=!thirdperson;
						player.SetPlayerFlag(BasePlayer.PlayerFlags.ThirdPersonViewmode, !player.HasPlayerFlag(BasePlayer.PlayerFlags.ThirdPersonViewmode));
					break;
					case "Walk":
						forward=walkspeed;

					break;				
					case "Backwards":
						forward=backspeed;
					break;
					case "Sprint":
						sprint=sprintspeed;
					break;
					case "StopSprint":
						sprint=0f;
					break;
					case "Stop":
						forward=0f;
					break;
					case "Right":
						right=turnspeed;
					break;
					case "Left":
						right=-turnspeed;
					break;
					case "Stopturn":
						right=0f;
					break;

				}

			}
			BaseEntity debug;
			 void Start()
			 {
				 
				var pos = entity.transform.position;
				Quaternion ang = entity.transform.rotation;
				//debug = GameManager.server.CreateEntity("assets/bundled/prefabs/radtown/crate_elite.prefab", pos,new Quaternion(0.0f,0.0f,0.0f,0.0f), true);
				//debug.enableSaving=false;
				//debug.Spawn();
			 }
			 

			void FixedUpdate()
			{
				if(smooth)return;
				if(mounted){
					if(horse!=null){
						horse.SetFact(BaseNpc.Facts.WantsToFlee, 0, true, true);
						horse.SetFact(BaseNpc.Facts.CanTargetEnemies, 0, true, true);
						horse.SetFact(BaseNpc.Facts.CanTargetFood, 0, true, true);	
						horse.AutoBraking=false;
						//if(!taming){horse.Pause();}
						if(player!=null){
							
						if(right==0&&forward==0&&sprint==0&&speed==0){
							horse.IsStopped=true;
							horse.SetFact(BaseNpc.Facts.CanTargetFood, 0, true, true);
							horse.ToSpeedEnum(0);
							
						}
						var time=UnityEngine.Time.fixedDeltaTime;
						speed=(forward+sprint);
						bool turning = right < 0;
						if(turning)
							speedturn=((right*0.1f)-sprint)/2;
						else
							speedturn=((right*0.1f)+sprint)/2;
						if(right==0||forward==0)
							speedturn=0;
						
						horse.ToSpeedEnum(speed);
						horse.TargetSpeed=speed;
						//Debug.Log(horse.TargetSpeed+" "+ sprintspeed+" "+walkspeed);
						//horse.transform.eulerAngles=horse.transform.eulerAngles+new Vector3(0,right*time,0);

						var setpos=horse.transform.position+entity.transform.right*(1*speedturn)+entity.transform.forward*(1*speed); 
						
						//horse.transform.position=new Vector3(setpos.x,setpos.y,setpos.z);
						//if(tester)return;


						horse.UpdateDestination(setpos);
						horse.TickNavigation();
						//horse.ChaseTransform.position=setpos;

						
					}
				}
			}
			}
			void Update()
			{
				if(!smooth)return;
				if(mounted){
					if(horse!=null){
						horse.SetFact(BaseNpc.Facts.WantsToFlee, 0, true, true);
						horse.SetFact(BaseNpc.Facts.CanTargetEnemies, 0, true, true);
						horse.SetFact(BaseNpc.Facts.CanTargetFood, 0, true, true);	
						horse.AutoBraking=false;
						//if(!taming){horse.Pause();}
						if(player!=null){
							
						if(right==0&&forward==0&&sprint==0&&speed==0){
							horse.IsStopped=true;
							horse.SetFact(BaseNpc.Facts.CanTargetFood, 0, true, true);
							horse.ToSpeedEnum(0);
							
						}
						var time=UnityEngine.Time.deltaTime;
						speed=(forward+sprint);
						bool turning = right < 0;
						if(turning)
							speedturn=((right*0.1f)-sprint)/2;
						else
							speedturn=((right*0.1f)+sprint)/2;
						if(right==0||forward==0)
							speedturn=0;
						
						horse.ToSpeedEnum(speed);
						horse.TargetSpeed=speed;
						//Debug.Log(horse.TargetSpeed+" "+ sprintspeed+" "+walkspeed);
						//horse.transform.eulerAngles=horse.transform.eulerAngles+new Vector3(0,right*time,0);

						var setpos=horse.transform.position+entity.transform.right*(1*speedturn)+entity.transform.forward*(1*speed); 
						
						//horse.transform.position=new Vector3(setpos.x,setpos.y,setpos.z);
						//if(tester)return;


						horse.UpdateDestination(setpos);
						horse.TickNavigation();
						//horse.ChaseTransform.position=setpos;

						
					}
				}
			}
			}
		}
	}

}

// --- End of file: TsunHorse (1).cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/HBheal.cs ---
// --- Original Local Path: HBheal.cs ---

﻿using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("HBheal", "Frizen", "1.0.0")]
    [Description("Хп бредли и верта")]
    public class HBheal : RustPlugin

    {
        #region config

        public float GlobalDamageMultiplier = 0.5f;

        private Configuration config;

        public class Configuration
        {


            [JsonProperty("Хп танка")] public float bradleyhp = 2000f;



        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            string configPath = $"{Interface.Oxide.ConfigDirectory}{Path.DirectorySeparatorChar}{Name}.json";
            Puts($"Конфиг кривой,создаём новый по пути: {configPath}");
            config = new Configuration();
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion Configuration

        private void OnBradleyApcInitialize(BradleyAPC bradley)
        {
            bradley._maxHealth = config.bradleyhp;
            bradley.health = bradley._maxHealth;
        }

        private void OnPlayerAttack(BasePlayer attacker, HitInfo hitInfo)
        {
            if (attacker == null || hitInfo?.HitEntity == null) return;

            if (hitInfo?.HitEntity is BaseHelicopter)
            {
                if (GlobalDamageMultiplier != 1f && GlobalDamageMultiplier >= 0)
                {
                    hitInfo?.damageTypes?.ScaleAll(GlobalDamageMultiplier);
                    return;
                }
            }
        }
    }
}

// --- End of file: HBheal.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DeathStats.cs ---
// --- Original Local Path: DeathStats.cs ---

using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using System.Collections.Generic;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("DeathStats", "SkiTles", "0.3")]
    [Description("Отображение статистики на экране смерти")]
    class DeathStats : RustPlugin
    {
        private List<string> openUI = new List<string>();
        private bool NewWipe = false;

        #region OxideHooks
        void OnServerInitialized()
        {
            DSdata = Interface.Oxide.DataFileSystem.GetFile("DeathStats");
            LoadData();
            if (NewWipe)
            {
                foreach (var player in data.PlayersStats.Keys)
                {
                    ClearStats(player);
                }
                SaveData();
            }
            int changes = 0;
            foreach (var player in BasePlayer.activePlayerList)
            {
                AddPlayerT(player);
                if (!data.PlayersStats.ContainsKey(player.userID))
                {
                    AddPlayer(player);
                    changes++;
                }
            }
            if (changes > 0) SaveData();
        }
        void OnNewSave(string filename)
        {
            NewWipe = true;
        }
        void OnServerSave() => SaveData();
        void Unload()
        {
            SaveData();
            foreach (var entry in openUI)
            {
                var player = BasePlayer.Find(entry);
                if (player == null) continue;
                CuiHelper.DestroyUi(player, "StatsGUI");
            }
        }
        void OnPlayerInit(BasePlayer player)
        {
            AddPlayerT(player);
            if (!data.PlayersStats.ContainsKey(player.userID))
            {
                AddPlayer(player);
                SaveData();
            }
        }
        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (player == null) return;
            TempStats.Remove(player.userID);
            if (openUI.Contains(player.UserIDString)) openUI.Remove(player.UserIDString);
        }
        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity.name.Contains("corpse")) return;
            if (info == null) return;
            if (entity is BasePlayer)
            {
                var victim = entity?.ToPlayer();
                if (victim == null) return;
                if (!IsNPC(victim) && data.PlayersStats.ContainsKey(victim.userID) && TempStats.ContainsKey(victim.userID))
                {
                    data.PlayersStats[victim.userID].deaths++;
                    openUI.Add(victim.UserIDString);
                    DrawGUI(victim);
                }
                var killer = info?.Initiator?.ToPlayer();
                if (killer == null) return;
                if (killer == victim) return;
                if (IsNPC(killer) || !data.PlayersStats.ContainsKey(killer.userID) || !TempStats.ContainsKey(killer.userID)) return;
                data.PlayersStats[killer.userID].kills++;
                TempStats[killer.userID].kills++;
            }
        }
        private void OnPlayerRespawned(BasePlayer player)
        {
            if (player == null) return;
            if (openUI.Contains(player.UserIDString)) DestroyGUI(player);
            ClearStatsT(player);
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            if (player == null) return;
            if (openUI.Contains(player.UserIDString)) DestroyGUI(player);
            ClearStatsT(player);
        }

        void OnWeaponFired(BaseProjectile projectile, BasePlayer player, ItemModProjectile mod, ProtoBuf.ProjectileShoot projectiles)
        {
            data.PlayersStats[player.userID].shoots++;
            TempStats[player.userID].shoots++;
        }
        private void OnPlayerAttack(BasePlayer attacker, HitInfo hitinfo)
        {
            if (hitinfo == null || attacker == null || !attacker.IsConnected) return;
            if (hitinfo.HitEntity is BaseNpc) return;
            var victim = hitinfo.HitEntity as BasePlayer;
            if (victim == null) return;
            if (victim == attacker) return;
            if (hitinfo.isHeadshot)
            {
                data.PlayersStats[attacker.userID].hs++;
                TempStats[attacker.userID].hs++;
            }
            data.PlayersStats[attacker.userID].hits++;
            TempStats[attacker.userID].hits++;
            if (hitinfo.damageTypes.IsMeleeType()) Puts("melee");
            int damage = (int)hitinfo.damageTypes.Total();
            if (damage > 0)
            {
                data.PlayersStats[attacker.userID].damage = data.PlayersStats[attacker.userID].damage + damage;
                TempStats[attacker.userID].dmg = TempStats[attacker.userID].dmg + damage;
            }
        }
        #endregion

        #region GUI
        private CuiElement MainPanel(string name, string color, string anMin, string anMax)
        {
            var Element = new CuiElement()
            {
                Name = name,
                Parent = "Overlay",
                Components =
                {
                    new CuiImageComponent { Color = color },
                    new CuiRectTransformComponent { AnchorMin = anMin, AnchorMax = anMax }
                }
            };
            return Element;
        }
        private CuiElement Panel(string name, string parent, string color, string anMin, string anMax)
        {
            var Element = new CuiElement()
            {
                Name = name,
                Parent = parent,
                Components =
                {
                    new CuiImageComponent { Color = color },
                    new CuiRectTransformComponent { AnchorMin = anMin, AnchorMax = anMax }
                }
            };
            return Element;
        }
        private CuiElement Text(string parent, string color, string text, TextAnchor pos, string fname, int fsize, string anMin, string anMax)
        {
            var Element = new CuiElement()
            {
                Parent = parent,
                Components =
                {
                    new CuiTextComponent() { Color = color, Text = text, Align = pos, Font = fname, FontSize = fsize },
                    new CuiRectTransformComponent{ AnchorMin = anMin, AnchorMax = anMax }
                }
            };
            return Element;
        }
        private CuiElement Button(string name, string parent, string command, string color, string anMin, string anMax)
        {
            var Element = new CuiElement()
            {
                Name = name,
                Parent = parent,
                Components =
                {
                    new CuiButtonComponent { Command = command, Color = color},
                    new CuiRectTransformComponent{ AnchorMin = anMin, AnchorMax = anMax }
                }
            };
            return Element;
        }
        private void DestroyGUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "StatsGUI");
            openUI.Remove(player.UserIDString);
        }
        private void DrawGUI(BasePlayer player)
        {
            string fcolor = "1 1 1 0.35";
            CuiElementContainer container = new CuiElementContainer();
            container.Add(MainPanel("StatsGUI", "1 1 1 0", "0 0.2", "0.26 0.756"));
            container.Add(Panel("Lpanel", "StatsGUI", "1 1 1 0", "0 0.2", "0.7 1"));
            container.Add(Panel("Fpanel", "StatsGUI", "1 1 1 0", "0.713 0.2", "1 1"));
            container.Add(Panel("Bpanel", "StatsGUI", "1 1 1 0", "0 0", "1 0.19"));
            //container.Add(Text("Lpanel", fcolor, "Статистика жизни:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 18, "0 0.83", "1 0.91"));
            container.Add(Text("Lpanel", fcolor, "Выстрелов:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.78", "1 0.83"));
            container.Add(Text("Lpanel", fcolor, "Попаданий:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.73", "1 0.78"));
            container.Add(Text("Lpanel", fcolor, "Хедшотов:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.68", "1 0.73"));
            container.Add(Text("Lpanel", fcolor, "Точность:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.63", "1 0.68"));
            container.Add(Text("Lpanel", fcolor, "Урон:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.58", "1 0.63"));
            container.Add(Text("Lpanel", fcolor, "Убийств:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.53", "1 0.58"));
            container.Add(Text("Lpanel", fcolor, "Общая статистика:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 18, "0 0.43", "1 0.51"));
            container.Add(Text("Lpanel", fcolor, "Выстрелов:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.38", "1 0.43"));
            container.Add(Text("Lpanel", fcolor, "Попаданий:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.33", "1 0.38"));
            container.Add(Text("Lpanel", fcolor, "Хедшотов:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.28", "1 0.33"));
            container.Add(Text("Lpanel", fcolor, "Точность:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.23", "1 0.28"));
            container.Add(Text("Lpanel", fcolor, "Убийств:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.18", "1 0.23"));
            container.Add(Text("Lpanel", fcolor, "Смертей:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.13", "1 0.18"));
            container.Add(Text("Lpanel", fcolor, "Соотношение У/С:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.08", "1 0.13"));
            container.Add(Text("Lpanel", fcolor, "Средний урон:", TextAnchor.MiddleRight, "robotocondensed-bold.ttf", 14, "0 0.03", "1 0.08"));
            container.Add(Text("Fpanel", fcolor, TempStats[player.userID].shoots.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.78", "1 0.83"));
            container.Add(Text("Fpanel", fcolor, TempStats[player.userID].hits.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.73", "1 0.78"));
            container.Add(Text("Fpanel", fcolor, TempStats[player.userID].hs.ToString() + " (" + GetAccuracy(TempStats[player.userID].hs, TempStats[player.userID].hits) + ")", TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.68", "1 0.73"));
            container.Add(Text("Fpanel", fcolor, GetAccuracy(TempStats[player.userID].hits, TempStats[player.userID].shoots), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.63", "1 0.68"));
            container.Add(Text("Fpanel", fcolor, TempStats[player.userID].dmg.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.58", "1 0.63"));
            container.Add(Text("Fpanel", fcolor, TempStats[player.userID].kills.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.53", "1 0.58"));
            container.Add(Text("Fpanel", fcolor, data.PlayersStats[player.userID].shoots.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.38", "1 0.43"));
            container.Add(Text("Fpanel", fcolor, data.PlayersStats[player.userID].hits.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.33", "1 0.38"));
            container.Add(Text("Fpanel", fcolor, data.PlayersStats[player.userID].hs.ToString() + " (" + GetAccuracy(data.PlayersStats[player.userID].hs, data.PlayersStats[player.userID].hits) + ")", TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.28", "1 0.33"));
            container.Add(Text("Fpanel", fcolor, GetAccuracy(data.PlayersStats[player.userID].hits, data.PlayersStats[player.userID].shoots), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.23", "1 0.28"));
            container.Add(Text("Fpanel", fcolor, data.PlayersStats[player.userID].kills.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.18", "1 0.23"));
            container.Add(Text("Fpanel", fcolor, data.PlayersStats[player.userID].deaths.ToString(), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.13", "1 0.18"));
            container.Add(Text("Fpanel", fcolor, GetKD(data.PlayersStats[player.userID].kills, data.PlayersStats[player.userID].deaths), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.08", "1 0.13"));
            container.Add(Text("Fpanel", fcolor, GetAVG(data.PlayersStats[player.userID].damage, data.PlayersStats[player.userID].deaths), TextAnchor.MiddleLeft, "robotocondensed-bold.ttf", 14, "0 0.03", "1 0.08")); //avg dmg = dmg/deaths
            //button clearstats
            container.Add(Button("Reset", "Bpanel", "ds.clear", "0.7 1 0.6 0.4", "0.5 0.7", "0.9 1"));
            container.Add(Text("Reset", "1 1 1 1", "Сбросить статистику", TextAnchor.MiddleCenter, "robotocondensed-bold.ttf", 14, "0 0", "1 1"));
            //button closestats
            container.Add(Button("Close", "Bpanel", "ds.close", "1 0 0 0.4", "0.5 0.3", "0.9 0.6"));
            container.Add(Text("Close", "1 1 1 1", "Закрыть", TextAnchor.MiddleCenter, "robotocondensed-bold.ttf", 14, "0 0", "1 1"));
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Commands
        [ConsoleCommand("ds.clear")]
        private void Clear(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null) return;
            ClearStats(player.userID);
            SaveData();
        }
        [ConsoleCommand("ds.close")]
        private void Close(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null) return;
            DestroyGUI(player);
        }
        #endregion

        #region Data
        class PlayerInfo
        {
            public int shoots;
            public int hits;
            public int hs;
            public int kills;
            public int deaths;
            public int damage;
        }
        class DataStorageStats
        {
            public Dictionary<ulong, PlayerInfo> PlayersStats = new Dictionary<ulong, PlayerInfo>();
            public DataStorageStats() { }
        }
        DataStorageStats data;
        private DynamicConfigFile DSdata;
        void LoadData()
        {
            try { data = Interface.GetMod().DataFileSystem.ReadObject<DataStorageStats>("DeathStats"); }
            catch { data = new DataStorageStats(); }
        }
        void SaveData()
        {
            DSdata.WriteObject(data);
        }
        private Dictionary<ulong, TempPlayerInfo> TempStats = new Dictionary<ulong, TempPlayerInfo>();
        class TempPlayerInfo
        {
            public int shoots;
            public int hits;
            public int hs;
            public int dmg;
            public int kills;
        }
        #endregion

        #region Helpers
        private string GetKD(int kills, int deaths)
        {
            string kd = "0";
            if (kills > 0)
            {
                kd = ((double)kills / deaths).ToString();
                if (kd.Length > 3) kd = kd.Remove(3);
            }
            return kd;
        }
        private string GetAccuracy(int hits, int shoots)
        {
            string acc = "0%";
            if (shoots < hits)
            {
                acc = "100%";
            }
            if (shoots > hits && hits > 0 && shoots > 0)
            {
                acc = (((double)hits / shoots) * 100).ToString();
                if (acc.Length > 2) acc = acc.Remove(2);
                acc = acc + "%";
            }
            return acc;
        }
        private string GetAVG(int dmg, int deaths)
        {
            string avg = "0";
            if (dmg == 0) return avg;
            avg = ((double)dmg / deaths).ToString();
            if (avg.Length > 3) avg = avg.Remove(3);
            return avg;
        }
        private void AddPlayer(BasePlayer player)
        {
            data.PlayersStats.Add(player.userID, new PlayerInfo()
            {
                shoots = 0,
                hits = 0,
                hs = 0,
                kills = 0,
                deaths = 0,
                damage = 0
            });
        }
        private void AddPlayerT(BasePlayer player)
        {
            TempStats.Add(player.userID, new TempPlayerInfo()
            {
                shoots = 0,
                hits = 0,
                hs = 0,
                dmg = 0,
                kills = 0
            });
        }
        private void ClearStatsT(BasePlayer player)
        {
            TempStats[player.userID].shoots = 0;
            TempStats[player.userID].hits = 0;
            TempStats[player.userID].hs = 0;
            TempStats[player.userID].dmg = 0;
            TempStats[player.userID].kills = 0;
        }
        private void ClearStats(ulong userid)
        {
            data.PlayersStats[userid].damage = 0;
            data.PlayersStats[userid].deaths = 0;
            data.PlayersStats[userid].hits = 0;
            data.PlayersStats[userid].hs = 0;
            data.PlayersStats[userid].kills = 0;
            data.PlayersStats[userid].shoots = 0;
        }
        private bool IsNPC(BasePlayer player)
        {
            if (player is NPCPlayer)
                return true;
            if (!(player.userID >= 76560000000000000L || player.userID <= 0L))
                return true;
            return false;
        }
        #endregion
    }
}

// --- End of file: DeathStats.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Emote.cs ---
// --- Original Local Path: Emote.cs ---

using Facepunch;
using Oxide.Core.Plugins;
using System;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Emote", "Hirsty", "1.0.5", ResourceId = 1353)]
    [Description("This will allow players to express their feelings!")]
    class Emote : RustPlugin
    {
        public static string version = "1.0.5";
        public string template = "";
        public string EnableEmotes = "false";
        #region Config Data
        protected override void LoadDefaultConfig()
        {

            PrintWarning("Whoops! No config file, lets create a new one!"); // Runs when no configuration file has been found
            Config.Clear();
            Config["Plugin", "Version"] = version;
            Config["Config", "Text"] = "<color=#f0f0f0><i><b>{Player}</b> {Message}</i></color>";
            Config["Config", "EnableEmotes"] = "false";
            Config["Emotes", ":)"] = "smiles";
            Config["Emotes", ":-)"] = "smiles";
            Config["Emotes", ":=)"] = "smiles";
            Config["Emotes", ":("] = "sulks";
            Config["Emotes", ":-("] = "sulks";
            Config["Emotes", ":=("] = "sulks";
            Config["Emotes", ":D"] = "grins";
            Config["Emotes", ":-D"] = "grins";
            Config["Emotes", ":=D"] = "grins";
            Config["Emotes", ":d"] = "grins";
            Config["Emotes", ":-d"] = "grins";
            Config["Emotes", ":=d"] = "grins";
            Config["Emotes", ":|"] = "is speechless";
            Config["Emotes", ":-|"] = "is speechless";
            Config["Emotes", ":=|"] = "is speechless";
            Config["Emotes", ":p"] = "sticks out a tongue";
            Config["Emotes", ":-p"] = "sticks out a tongue";
            Config["Emotes", ":=p"] = "sticks out a tongue";
            Config["Emotes", ":P"] = "sticks out a tongue";
            Config["Emotes", ":-P"] = "sticks out a tongue";
            Config["Emotes", ":=P"] = "sticks out a tongue";
            Config["Emotes", ":$"] = "blushes";
            Config["Emotes", ":-$"] = "blushes";
            Config["Emotes", ":=$"] = "blushes";
            Config["Emotes", "]:)"] = "gives an evil grin";
            Config["Emotes", ">:)"] = "gives an evil grin";
            Config["Emotes", ":*"] = "blows a kiss";
            Config["Emotes", ":-*"] = "blows a kiss";
            Config["Emotes", ":=*"] = "blows a kiss";
            Config["Emotes", ":@"] = "looks angry";
            Config["Emotes", ":-@"] = "looks angry";
            Config["Emotes", ":=@"] = "looks angry";
            Config["Emotes", "x("] = "looks angry";
            Config["Emotes", "x-("] = "looks angry";
            Config["Emotes", "x=("] = "looks angry";
            Config["Emotes", "X("] = "looks angry";
            Config["Emotes", "X-("] = "looks angry";
            Config["Emotes", "X=("] = "looks angry";
            Config["Emotes", "o/"] = "waves";
            Config["Emotes", "\\o"] = "waves back";
            SaveConfig();
        }
        private void Loaded() => LoadConfigData(); // What to do when plugin loaded

        private void LoadConfigData()
        {
            if (!permission.PermissionExists("emote.canemote")) permission.RegisterPermission("emote.canemote", this);
            if (Config["Plugin", "Version"].ToString() != version)
            {
                Puts("Uh oh! Not up to date! No Worries, lets update you!");
                switch (version)
                {
                    case "1.0.1":
                        Config["Config", "EnableEmotes"] = "false";
                        Config["Emotes", ":)"] = "smiles";
                        Config["Emotes", ":-)"] = "smiles";
                        Config["Emotes", ":=)"] = "smiles";
                        Config["Emotes", ":("] = "sulks";
                        Config["Emotes", ":-("] = "sulks";
                        Config["Emotes", ":=("] = "sulks";
                        Config["Emotes", ":D"] = "grins";
                        Config["Emotes", ":-D"] = "grins";
                        Config["Emotes", ":=D"] = "grins";
                        Config["Emotes", ":d"] = "grins";
                        Config["Emotes", ":-d"] = "grins";
                        Config["Emotes", ":=d"] = "grins";
                        Config["Emotes", ":|"] = "is speechless";
                        Config["Emotes", ":-|"] = "is speechless";
                        Config["Emotes", ":=|"] = "is speechless";
                        Config["Emotes", ":p"] = "sticks out a tongue";
                        Config["Emotes", ":-p"] = "sticks out a tongue";
                        Config["Emotes", ":=p"] = "sticks out a tongue";
                        Config["Emotes", ":P"] = "sticks out a tongue";
                        Config["Emotes", ":-P"] = "sticks out a tongue";
                        Config["Emotes", ":=P"] = "sticks out a tongue";
                        Config["Emotes", ":$"] = "blushes";
                        Config["Emotes", ":-$"] = "blushes";
                        Config["Emotes", ":=$"] = "blushes";
                        Config["Emotes", "]:)"] = "gives an evil grin";
                        Config["Emotes", ">:)"] = "gives an evil grin";
                        Config["Emotes", ":*"] = "blows a kiss";
                        Config["Emotes", ":-*"] = "blows a kiss";
                        Config["Emotes", ":=*"] = "blows a kiss";
                        Config["Emotes", ":@"] = "looks angry";
                        Config["Emotes", ":-@"] = "looks angry";
                        Config["Emotes", ":=@"] = "looks angry";
                        Config["Emotes", "x("] = "looks angry";
                        Config["Emotes", "x-("] = "looks angry";
                        Config["Emotes", "x=("] = "looks angry";
                        Config["Emotes", "X("] = "looks angry";
                        Config["Emotes", "X-("] = "looks angry";
                        Config["Emotes", "X=("] = "looks angry";
                        Config["Emotes", "o/"] = "waves";
                        Config["Emotes", "\\o"] = "waves back";
                        break;

                }
                Config["Plugin", "Version"] = version;
                Config.Save();
            }
            template = Config["Config", "Text"].ToString();
            EnableEmotes = Config["Config", "EnableEmotes"].ToString();

        }
        #endregion
        #region Hooks
        [HookMethod("CheckForEmotes")]
        public string EmoteCheck(BasePlayer player, string checkmsg)
        {
            if (Config["Emotes", checkmsg] != null && EnableEmotes == "true")
            {
                string emote = Config["Emotes", checkmsg].ToString();

                string build = template;
                build = build.Replace("{Player}", player.displayName);
                build = build.Replace("{Message}", checkmsg);
                return build;
            }
            else
            {
                return checkmsg;
            }
        }
        #endregion
        #region Chat Commands
        [ChatCommand("me")] // Whatever cammand you want the player to type
        private void TheFunction(BasePlayer player, string command, string[] args)
        {
            string uid = Convert.ToString(player.userID);
            if (permission.UserHasPermission(uid, "emote.canemote"))
            {
                if((bool)plugins.Find("BetterChat")?.Call("IsMuted", player))
                {
                    SendReply(player, "You are muted!");
                } else
                {
                    string full = string.Join(" ", args);
                    SendChatMessage(player, full);
                }
            } else
            {
                SendReply(player, "Sorry! You don't have permission to use that command!");
            }
        }
        #endregion
        object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            //Debug.Log((bool)plugins.Find("BetterChat")?.Call("IsMuted", player));
            BasePlayer player = (BasePlayer)arg.connection.player;
            //string message = arg.GetString(0, "text");
            string message = arg.GetString(0);
            string uid = Convert.ToString(player.userID);
            if (Config["Emotes", message] != null && EnableEmotes == "true" && permission.UserHasPermission(uid, "emote.canemote"))
            {
                
                SendChatMessage(player, Config["Emotes", message].ToString());
                return false;
               
            }
            return null;
        }

        void SendChatMessage(BasePlayer player, string msg)
        {
            string build = template;
            build = build.Replace("{Player}", player.displayName);
            build = build.Replace("{Message}", msg);
            ConsoleSystem.Broadcast("chat.add", player.userID, build, 1.0);
            Debug.Log(player.displayName + " emoted: " + msg);
            PrintToConsole(player, build); 
        }
    }
}


// --- End of file: Emote.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQControllerSpawnCars.cs ---
// --- Original Local Path: IQControllerSpawnCars.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Rust.Modular;

namespace Oxide.Plugins
{
    [Info("IQControllerSpawnCars", "SkuliDropek", "1.0.3")]
    [Description("Хочу следовать за трендами блин")]
    class IQControllerSpawnCars : RustPlugin
    {
        // - Исправил NRE
        /// <summary>
        /// Обновление 0.0.4
        /// - Заменил хук OnEntitySpawned на OnVehicleModulesAssigned
        /// - Исправил некорректное заполнение машин заспавненых до загрузки плагина
        /// - Добавил заполнение уже созданных (до загрузки плагина) машин! (Если они пустые)
        /// Обновление 1.0.1
        /// - Добавлена возможность заспавнить топливо в транспорте
        /// </summary>

        #region Vars
        public enum SpawnType
        {
            TierFull,
            ElementsTier
        }
        #endregion

        #region Configuration 
        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Выберите тип спавна. 0 - полный спавн по тирам(настраивайте шансы и тиры в листе)(т.е все детали сразу,в разном виде качества). 1 - Спавн отдельных деталей, с ограничениями в количестве и рандомным качеством в зависимости от шанса")]
            public SpawnType spawnType;
            [JsonProperty("Настройки тиров. Номер тира(1-3) и шанс.")]
            public Dictionary<Int32, Int32> TierRare = new Dictionary<Int32, Int32>();
            [JsonProperty("Настройка деталей и их шанс спавна.Шортнейм детали и шанс ее спавна")]
            public Dictionary<String, Int32> ElementSpawnRare = new Dictionary<String, Int32>();
            [JsonProperty("Ограниченное количество спавна деталей. 0 - без ограничений")]
            public Int32 LimitSpawnElement;

            [JsonProperty("Настройка заполнения топливом машин")]
            public FuelSettings fuelSettings = new FuelSettings();
            internal class FuelSettings
            {
                [JsonProperty("Включить спавн топлива в машинах (true - да/false - нет)")]
                public Boolean UseFuelSpawned = true;
                [JsonProperty("Статичное количество топлива (Если включен рандом, то этот показатель не будет учитываться)")]
                public Int32 FuelStatic = 100;
                [JsonProperty("Шанс заполнения топливом транспорт (0-100)")]
                public Int32 RareUsing = 100;

                [JsonProperty("Настройка рандомного спавна топлива")]
                public RandomFuel randomFuel = new RandomFuel();

                internal class RandomFuel
                {
                    [JsonProperty("Включить рандомное количество спавна топлива (true - да/false - нет)")]
                    public Boolean UseRandom = false;
                    [JsonProperty("Минимальное количество топлива")]
                    public Int32 MinFuel = 30;
                    [JsonProperty("Максимальное количество топлива")]
                    public Int32 MaxFuel = 200;
                }

                public Int32 GetFuelSpawned()
                {
                    Int32 Fuel = 0;

                    if(UseFuelSpawned)
                        if (Oxide.Core.Random.Range(0, 100) <= RareUsing)
                        {
                            if (randomFuel.UseRandom)
                                Fuel = Oxide.Core.Random.Range(randomFuel.MinFuel, randomFuel.MaxFuel);
                            else Fuel = FuelStatic;
                        }

                    return Fuel;
                }
            }

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    spawnType = SpawnType.TierFull,
                    fuelSettings = new FuelSettings
                    {
                        FuelStatic = 100,
                        RareUsing = 100,
                        UseFuelSpawned = true,
                        randomFuel = new FuelSettings.RandomFuel
                        {
                            MinFuel = 30,
                            MaxFuel = 200,
                            UseRandom = false,
                        }
                    },
                    TierRare = new Dictionary<Int32, Int32>
                    {
                        [1] = 80,
                        [2] = 50,
                        [3] = 25,
                    },
                    ElementSpawnRare = new Dictionary<String, Int32>
                    {
                        ["carburetor1"] = 80,
                        ["crankshaft1"] = 80,
                        ["sparkplug1"] = 80,
                        ["piston1"] = 80,       
                        ["carburetor2"] = 60,
                        ["crankshaft2"] = 60,
                        ["sparkplug2"] = 60,
                        ["piston2"] = 60,
                        ["carburetor3"] = 20,
                        ["crankshaft3"] = 20,
                        ["sparkplug3"] = 20,
                        ["piston3"] = 20, 
                    },
                    LimitSpawnElement = 0,
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка чтения #1434 конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!"); //
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        private void OnServerInitialized()
        {
            foreach(var Entity in BaseNetworkable.serverEntities.entityList.Where(x => x.Value.ShortPrefabName.Contains("module_car") && x.Value?.GetComponentInChildren<VehicleModuleEngine>()?.GetContainer()?.inventory.itemList.Count == 0))
            {
                ModularCar Car = Entity.Value as ModularCar;
                CarUpgrade(Car);
            }
        }
        void OnVehicleModulesAssigned(ModularCar Car, ItemModVehicleModule[] modulePreset) => CarUpgrade(Car);
        private void CarUpgrade(ModularCar Car)
        {
            if (Car == null) return;
            var CarSetting = config.spawnType;
            switch (CarSetting)
            {
                case SpawnType.TierFull:
                    {
                        SpawnFullTier(Car);
                        break;
                    }
                case SpawnType.ElementsTier:
                    {
                        SpawnElementsTier(Car);
                        break;
                    }
                default: { break; }
            }

            FuelSystemSpawned(Car.GetFuelSystem());
        }

        #region Metods
        private void FuelSystemSpawned(EntityFuelSystem FuelSystem)
        {
            if (FuelSystem == null) return;
            Int32 FuelAmount = config.fuelSettings.GetFuelSpawned();
            if (FuelAmount == 0) return;

            NextTick(() =>
            {
                StorageContainer FuelContainer = FuelSystem.fuelStorageInstance.Get(true);
                if (FuelContainer == null || FuelContainer.inventory == null) return;
                Item FuelItem = ItemManager.CreateByName("lowgradefuel", FuelAmount);
                if (FuelItem == null) return;
                FuelItem.MoveToContainer(FuelContainer.inventory);
            });
        }

        void SpawnFullTier(ModularCar Car)
        {
            var CarSetting = config.TierRare;
            if (Car == null) return;
            foreach (var Tier in CarSetting)
            {
                if (!IsRare(Tier.Value)) continue;
                if (Car.GetComponentInChildren<VehicleModuleEngine>() == null) continue;
                Car?.GetComponentInChildren<VehicleModuleEngine>()?.AdminFixUp(Tier.Key);
            }
        }

        void SpawnElementsTier(ModularCar Car)
        {
            if (Car == null) return;
            var CarSetting = config.ElementSpawnRare;
            Int32 LimitElement = (Int32)(config.LimitSpawnElement != 0 ? config.LimitSpawnElement : Car?.GetComponentInChildren<VehicleModuleEngine>()?.GetContainer()?.inventory.capacity);
            for (Int32 j = 0; j < LimitElement; j++)
            {
                Int32 SlotElemt = UnityEngine.Random.Range(0, (Int32)(Car?.GetComponentInChildren<VehicleModuleEngine>()?.GetContainer()?.inventory.capacity));
                foreach (var TierElement in CarSetting)
                {
                    if (!IsRare(TierElement.Value)) continue;
                    if (Car?.GetComponentInChildren<VehicleModuleEngine>()?.GetContainer()?.inventory.GetSlot(SlotElemt) != null) continue;

                    Item ElementCar = ItemManager.CreateByName(TierElement.Key, 1);
                    if (Car.GetComponentInChildren<EngineStorage>().ItemFilter(ElementCar, j))
                        ElementCar.MoveToContainer(Car?.GetComponentInChildren<VehicleModuleEngine>()?.GetContainer()?.inventory, j, false);
                }
            }
        }
        public bool IsRare(Int32 Rare)
        {
            if (UnityEngine.Random.Range(0, 100) >= (100 - Rare))
                return true;
            else return false;
        }
        #endregion
    }
}


// --- End of file: IQControllerSpawnCars.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AutoFurnaces.cs ---
// --- Original Local Path: AutoFurnaces.cs ---

namespace Oxide.Plugins
{
    [Info("Auto Furnaces", "Waizujin", 1.1)]
    [Description("Automatically starts all furnaces after a server restart.")]
    public class AutoFurnaces : RustPlugin
    {
        void OnServerInitialized()
        {
            int furnaceCount = 0;
            int furnaceEmptyCount = 0;
            BaseOven[] furnaces = UnityEngine.Object.FindObjectsOfType<BaseOven>() as BaseOven[];
            foreach (BaseOven furnace in furnaces) {
                bool hasCookable = false;

                foreach (Item item in furnace.inventory.itemList)
                {
                    if (
                        item.info.shortname == "bearmeat" ||
                        item.info.shortname == "metal_ore" ||
                        item.info.shortname == "chicken_raw" ||
                        item.info.shortname == "humanmeat_raw" ||
                        item.info.shortname == "wolfmeat_raw" ||
                        item.info.shortname == "sulfur_ore"
                    )
                    {
                        hasCookable = true;
                    }
                }

                if (furnace.temperature == BaseOven.TemperatureType.Smelting && hasCookable == true) {
                    furnace.inventory.temperature = 1000f;
                    furnace.CancelInvoke("Cook");
                    furnace.InvokeRepeating("Cook", 0.5f, 0.5f);
                    furnace.SetFlag(BaseEntity.Flags.On, true);

                    furnaceCount++;
                }

                if (hasCookable == false)
                {
                    furnaceEmptyCount++;
                }
            }

            Puts(furnaceCount + " Furnaces were automatically turned on.");
            Puts(furnaceEmptyCount + " Furnaces were ignored as they had nothing cookable in them.");
        }
    }
}


// --- End of file: AutoFurnaces.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/EpicLanterns.cs ---
// --- Original Local Path: EpicLanterns.cs ---

/* Copyright (c) 2015 Wojciech BartÅomiej Chojnacki (aka skyman)
This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it freely,
subject to the following restrictions:
    1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
        If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.
    
    Oxide API:
    http://docs.oxidemod.org/rust/
*/

using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("EpicLanterns", "skyman", "0.0.1", ResourceId = 1357)]
    [Description("Automatically toggles lanterns after sunrise and sunset or in other given timeframe!")]
    class EpicLanterns : RustPlugin
    {
        private string _pluginPrefix;
        protected enum MessageType { Info, Warning, Error };

        private bool _areCachedCorrectly = false;
        private bool _areTurnedOn;
        private Dictionary<string, BaseEntity> _lanterns = new Dictionary<string, BaseEntity>();
        private bool _isLoaded = false, _isInitialized = false;

        /**
            Called when the plugin is being loaded
            Other plugins may or may not be present, dependant on load order
            Other plugins WILL have been executed though, so globals exposed by them will be present
        */
        private void Init()
        {
            this._pluginPrefix = (this.Title + " (" + this.Version + ")").ToString();

            // Validate config and if it is invalid show an error and unload plugin
            if (this.validateConfig() == false)
            {
                echo("Internal plugin error. Cannot initialize plugin. Try previous versions!", MessageType.Error);
                this.Unload();
            }
        }

        /**
            Called when the config for the plugin should be initialized
            Only called if the config file does not already exist
        */
        protected override void LoadDefaultConfig()
        {
            echo("Generating a completely new configuration file.", MessageType.Warning);
            Config.Clear();
            Config["toggleOnAt"] = 18;
            Config["toggleOffAt"] = 8;
            Config["freeLight"] = true;
            SaveConfig();
        }

        /**
            Called when specified plugin has been loaded
        */
        private void OnPluginLoaded(RustPlugin pluginName)
        {
            string epicLanterns = "Oxide.Plugins.EpicLanterns";

            if (epicLanterns.Equals(pluginName.GetType().Name)) {
                this._isLoaded = true;
                if (this._isInitialized)
                {
                    this.createLanternsCache();

                    // Calculate correct lanters state
                    int currentTime = Convert.ToInt16(Math.Floor(TOD_Sky.Instance.Cycle.Hour));

                    // Toggle on, because it is after time to turn on all lanterns
                    if (currentTime >= (int)Config["toggleOnAt"])
                    {
                        echo("Lanterns should light up.");
                        this._areTurnedOn = true;
                    }
                    // Toggle off, because it is after time to turn off all lanterns, but before time to turn them on
                    else if (currentTime >= (int)Config["toggleOffAt"] && currentTime < (int)Config["toggleOnAt"])
                    {
                        echo("Lanterns should not light up.");
                        this._areTurnedOn = false;
                    }
                    // If none of the above did not work, it means that currently it is time between toggling on and toggling off, so turn them on
                    else if (currentTime < (int)Config["toggleOffAt"])
                    {
                        echo("Lanterns should light up.");
                        this._areTurnedOn = true;
                    }

                    // Apply current state to all lanterns
                    smartToggleLanterns();
                }
            }
        }

        /**
            Called from ServerMgr.Initialize
            Called after the server startup has been completed and is awaiting connections
            No return behavior
        */
        private void OnServerInitialized()
        {
            this._isInitialized = true;
            if (this._isLoaded)
            {
                this.createLanternsCache();
            }
        }

        /**
            Called when the plugin is being unloaded
        */
        private void Unload()
        {
            SaveConfig();
        }

        private void OnTick()
        {
            // Get current time in order to check if lanterns should be turned on or turned off
            int currentTime = Convert.ToInt16(Math.Floor(TOD_Sky.Instance.Cycle.Hour));

            // Toggle on, because it is after time to turn on all lanterns
            if (this._areTurnedOn == false && currentTime >= (int)Config["toggleOnAt"])
            {
                echo("Lanterns turning on!");
                this._areTurnedOn = true;
                this.smartToggleLanterns();
            }
            // Toggle off, because it is after time to turn off all lanterns, but before time to turn them on
            else if (this._areTurnedOn == true && currentTime >= (int)Config["toggleOffAt"] && currentTime < (int)Config["toggleOnAt"])
            {
                echo("Lanterns turning off!");
                this._areTurnedOn = false;
                this.smartToggleLanterns();
            }
        }

        /**
            Called from Deployer.DoDeploy_Regular and Deployer.DoDeploy_Slot
            Called right after an item has been deployed
            No return behavior
        */
        private void OnItemDeployed(Deployer deployer, BaseEntity entity)
        {
            // Don't proceed if deployed item wasn't lantern
            if (!this.isLantern(entity)) return;

            // Add entity to cache
            this._lanterns.Add(getEntityId(entity), entity);

            // Check if light is free or whether entity has fuel
            if ((bool)Config["freeLight"] == true || this.hasFuel(entity))
            {
                // If any condition is true, then it is safe to modify BaseEntity.Flags.On
                entity.SetFlag(BaseEntity.Flags.On, this._areTurnedOn);
            }

            echo("Lanterns (+A): " + this._lanterns.Count);
        }

        /**
            Called from BaseCombatEntity.Die
            hitInfo might be null, check it before use
            Editing hitInfo has no effect because the death has already happened
            No return behavior
        */
        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            // Don't proceed if deployed item wasn't lantern
            if (!this.isLantern(entity)) return;

            removeLanternFromCache(getEntityId(entity));
        }

        /**
            Called from DestroyOnGroundMissing.OnGroundMissing
            Called when an entity (sleepingbag, sign, furnace,â¦) is going to be destroyed because the buildingblock it is on was removed
            Returning a non-null value overides default server behavior
        */
        private void OnEntityGroundMissing(BaseEntity entity)
        {
            // Don't proceed if deployed item wasn't lantern
            if (!this.isLantern(entity)) return;

            removeLanternFromCache(getEntityId(entity));
        }

        /////////////////////
        // General methods //
        /////////////////////
        /**
            Prints given message.
            May be expanded in the future versions.
        */
        protected void echo(string message, MessageType messageType = MessageType.Info)
        {
            switch (messageType)
            {
                case MessageType.Warning:
                    Interface.Oxide.LogWarning(String.Format("{0}", message));
                    break;
                case MessageType.Error:
                    Interface.Oxide.LogError(String.Format("{0}", message));
                    break;
                case MessageType.Info:
                default:
                    Interface.Oxide.LogInfo(String.Format("{0}", message));
                    break;
            }
        }

        /**
            Create and return entity ID based on its coordinates (x, y, z).
        */
        public string getEntityId(BaseEntity entity)
        {
            return entity.transform.position.ToString();
        }

        /////////////////////////////
        // Plugin specific methods //
        /////////////////////////////
        /**
            Clears config and create new one
        */
        private bool badConfig(string missingKey)
        {
            echo("Config key is missing: " + missingKey, MessageType.Error);
            this.LoadDefaultConfig();
            return false;
        }

        /**
            Checks config
        */
        protected bool validateConfig()
        {
            // Check if required config keys exist
            if (Config["toggleOnAt"] == null)
            {
                return badConfig("toggleOnAt");
            }

            if (Config["toggleOffAt"] == null)
            {
                return badConfig("toggleOffAt");
            }

            if (Config["freeLight"] == null)
            {
                return badConfig("freeLight");
            }

            int toggleOnAt = (int)Config["toggleOnAt"];
            int toggleOffAt = (int)Config["toggleOffAt"];
            bool freeLight = (bool)Config["freeLight"];

            // Check if toggle hours are correct
            if ((toggleOnAt < 0 && toggleOnAt >= 24) || (toggleOffAt < 0 && toggleOffAt >= 24))
            {
                echo("Wrong settings! Toggle hours should be within range: 0-23.", MessageType.Error);
                return false;
            }

            // Check if toggleOn time 
            if (toggleOffAt > toggleOnAt)
            {
                echo("Wrong settings! toggleOffAt should be lower than toggleOnAt. toggleOffAt: " + toggleOffAt + ", toggleOnAt: " + toggleOnAt, MessageType.Error);
                return false;
            }

            // If everything went good, just continue
            return true;
        }

        /**
            Checks whether entity is a deployed lantern
        */
        protected bool isLantern(BaseEntity entity)
        {
            if (entity.LookupShortPrefabName() == "lantern_deployed.prefab")
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        protected bool isLantern(BaseOven entity)
        {
            if (entity.LookupShortPrefabName() == "lantern_deployed.prefab")
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /**
            TODO: Check whether lantern has fuel (ItemModBurnable)
        */
        protected bool hasFuel(BaseEntity entity)
        {
            return true;
        }

        /**
            Create a list of all deployed lanters and return it for further use.
        */
        protected void createLanternsCache()
        {
            // Clear current lantern list
            this._lanterns.Clear();

            // Then get all object of type BaseEntity
            List<BaseEntity> entities = Component.FindObjectsOfType<BaseEntity>().ToList();

            if (entities.Count > 0)
            {
                // After that, add only IDs of deployed lanterns
                foreach (BaseEntity entity in entities)
                {
                    if (entity.LookupShortPrefabName() == "lantern_deployed.prefab")
                    {
                        this._lanterns.Add(getEntityId(entity), entity);
                    }
                }
            }

            this._areCachedCorrectly = true;
            echo("Total numbers of lanterns: " + this._lanterns.Count);
        }

        /**
            Remove lantern if it cease to exist. If it wasn't in the list then inform that cache is not correct.
        */
        protected void removeLanternFromCache(string entityId)
        {
            if (this._lanterns.Remove(entityId) == false)
            {
                this._areCachedCorrectly = false;
                echo("Removed lantern wasn't in the list. It should not happen, so at the next toggle of lanterns, the list will be refreshed (which may cause small lag) in order to be sure that all lanters are cached correctly.");
            }
            echo("Lanterns (-R): " + this._lanterns.Count);
        }

        /**
            Toggle lanterns with extra-check whether cache is accurate.
        */
        protected void smartToggleLanterns()
        {
            // Only if needed refresh lantern list (it will also mark that cache is now correct)
            if (this._areCachedCorrectly == false)
            {
                this.createLanternsCache();
            }

            // Apply new state to all lanterns
            foreach (string entityId in this._lanterns.Keys)
            {
                // If light is free or given lantern has fuel, turn lights
                if ((bool)Config["freeLight"] == true || this.hasFuel(this._lanterns[entityId]))
                {
                    this._lanterns[entityId].SetFlag(BaseEntity.Flags.On, _areTurnedOn);
                }
            }
        }

    }
}

// --- End of file: EpicLanterns.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TimeSet.cs ---
// --- Original Local Path: TimeSet.cs ---

using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.Text.RegularExpressions;
using UnityEngine;
using Rust;
using Network;
using System.Reflection;
using Facepunch;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Time", "Tsunderella", "1.2.0")]
    [Description("Adds Time Command.")]
    class TimeSet : RustPlugin
    {
		// bug when you type '/time freeze' with no number.
		bool readyToCheck = false;
		private float toff;
		private float number;
		private float secondnumber;
		private bool cooldown;
		private string meridiem;
		private string Timeofday;
		private string arguments;
		private bool TimeStopped;
		private float TimeStoppedAt; 
		HashSet<ulong> users = new HashSet<ulong>();
		
		
		
       
/*         protected override void LoadDefaultConfig()
        {
            Config.Clear();
            Config["TimeStopped"] = false;
            Config["TimeStoppedAt"] = 0f;
			Config.Save();
		} */
		

        void Init()
        {

			//TimeStopped=(bool) Config["TimeStopped"];
			//TimeStoppedAt=(float) Config["TimeStopped"];
			TimeStopped=false;
            permission.RegisterPermission("TimeSet.use", this);
			readyToCheck=true;
			cooldown=false;
        }
		void Unloaded()
		{
/* 			Config.Clear();
            Config["TimeStopped"] = TimeStopped;
            Config["TimeStoppedAt"] = TimeStoppedAt;
			Config.Save(); */
		}
		[ChatCommand("time")]
        void cmdtTime(BasePlayer player, string cmd, string[] args)
		{
			 
			if (args.Length <= 0){
				player.SendConsoleCommand("chat.add", "76561198295970834",string.Format(GetMessage("time_get", player.UserIDString),Timeofday), 1.0);
			}else if(args[0]=="help"){player.SendConsoleCommand("chat.add", "76561198295970834",GetMessage("time_help", player.UserIDString),1.0);
			}else{ 
				arguments = args[0];
				if (!pPerm(player, "TimeSet.use")) return;
				float.TryParse(arguments, out number);

				if((0<number)&&(number<=24)){
					TimeStopped=false;
					TOD_Sky.Instance.Cycle.Hour=number;
					timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_set", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));  
				}else if(arguments=="day"){
					TimeStopped=false;
					TOD_Sky.Instance.Cycle.Hour=6.00f;timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_set", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));   
				}else if(arguments=="night"){
					TimeStopped=false;
					TOD_Sky.Instance.Cycle.Hour=19.5f;timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_set", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));   
				}else if(arguments=="unfreeze"){
					TimeStopped=false;
					cooldown=false;
/* 					Config.Clear();
					Config["TimeStopped"] = TimeStopped;
					Config["TimeStoppedAt"] = 0f;
					Config.Save(); */
					timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_unfreeze", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834")); 
				}else if(arguments=="freeze"){
					if (args.Length ==2){
						float.TryParse(args[1], out secondnumber);
						
					}else{
						TimeStoppedAt=TOD_Sky.Instance.Cycle.Hour;
						TimeStopped=true;
						cooldown=false;
						timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_freeze", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));	
						return;
					}
					if((0<=secondnumber)&&(secondnumber<=23.74)){
						TimeStoppedAt=secondnumber;
						TimeStopped=true;
						cooldown=false;
/* 						Config.Clear();
						Config["TimeStopped"] = TimeStopped;
						Config["TimeStoppedAt"] = TimeStoppedAt;
						Config.Save(); */
						timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_freeze", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));
					}else{
						player.SendConsoleCommand("chat.add", "76561198295970834",string.Format(GetMessage("time_freezeerror", player.UserIDString),arguments),1.0); 	
					}
				}else{
					player.SendConsoleCommand("chat.add", "76561198295970834",string.Format(GetMessage("time_error", player.UserIDString),arguments),1.0); 	
				}
			}
		} 
		[ChatCommand("day")]
        void cmdtDay(BasePlayer player){
			string id = rust.UserIDFromPlayer(player);
			if (!pPerm(player, "TimeSet.use")) return;
			TOD_Sky.Instance.Cycle.Hour=6.501f;
            timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_set", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));  		
		}
		[ChatCommand("night")] 
        void cmdtNight(BasePlayer player){
			string id = rust.UserIDFromPlayer(player); 
			if (!pPerm(player, "TimeSet.use")) return;  
			TOD_Sky.Instance.Cycle.Hour=18.501f;	
            timer.Once(1f, () => rust.BroadcastChat(string.Format(GetMessage("time_set", player.UserIDString),Timeofday,player.displayName),null,"76561198295970834"));  		
		}


        [HookMethod("OnTick")]
        private void OnTick() {
            try {
				
                if (readyToCheck){
					
					float Time=TOD_Sky.Instance.Cycle.Hour;
					DateTime dt = TOD_Sky.Instance.Cycle.DateTime;
                    if(Time>=13f){toff=-12f;}else if(Time<=1f){toff=12f;}else{toff=0f;}
					if(Time<12f){meridiem="am";}else{meridiem="pm";}
					string[] splitArray = (Time.ToString()).Split('.');
					Timeofday = (float.Parse(splitArray[0])+toff)+":"+(dt.ToString("mm"))+meridiem;
					
					if(TimeStopped&&!cooldown){
						
						TOD_Sky.Instance.Cycle.Hour=TimeStoppedAt;
						cooldown=true;
						timer.Once(10f, () => cooldown=false);
					}
					
				
				
				}
			}
            catch (Exception error) {
                PrintError("{0}: {1}", Title,"OnTick failed: " + error.Message);
            } 
        }
        [HookMethod("whatisthetime")]
        private string whatisthetime()
        {
             return Timeofday;
        }
        void Loaded()
        {
            Interface.Oxide.DataFileSystem.WriteObject("TimeSet", users);
            lang.RegisterMessages(new Dictionary<string, string>
            { 
                ["time_get"] = "The current time is {0}.",
                ["time_noperm"] = "You do not have the TimeSet.use permission!",
				["time_help"] = "/time - Tells what time it is.\n/time help - Bring up this menu.\n/time <0-24/day/night/freeze/unfreeze> - Sets the time or freezes time if you have the permission.\n/day - Sets the time to 6am if you have permission.\n/night - Sets the time to 7:30pm if you have permission.",
                ["time_error"] = "{0} is not a valid parameter!",
				["time_freeze"] = "{1} has frooze the time to {0}.",
				["time_freezeerror"] = "Please enter a valid time to freeze.",
				["time_unfreeze"] = "{1} has unfrooze the time.",
                ["time_set"] = "{1} has set the time to {0}."
            }, this); 
        }
        string GetMessage(string name, string sid = null)
        {
            return lang.GetMessage(name, this, sid);
        }

		bool pPerm(BasePlayer player, string perm){
            if (permission.UserHasPermission(player.userID.ToString(), perm)) return true;
			player.SendConsoleCommand("chat.add", "76561198295970834", GetMessage("time_noperm", player.UserIDString),1.0);
            return false;
        }

	}
}

// --- End of file: TimeSet.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQInfo.cs ---
// --- Original Local Path: IQInfo.cs ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("IQInfo", "Mercury", "0.0.1")]
    [Description("Приятное меню для вашего сервера")]
    class IQInfo : RustPlugin
    {
		#region Reference
		[PluginReference] Plugin ImageLibrary;

		#region ImageLibrary
		private String GetImage(String fileName, UInt64 skin = 0)
		{
			var imageId = (String)plugins.Find("ImageLibrary").CallHook("GetImage", fileName, skin);
			if (!string.IsNullOrEmpty(imageId))
				return imageId;
			return String.Empty;
		}
		public Boolean AddImage(String url, String shortname, UInt64 skin = 0) => (Boolean)ImageLibrary?.Call("AddImage", url, shortname, skin);
		public void SendImage(BasePlayer player, String imageName, UInt64 imageId = 0) => ImageLibrary?.Call("SendImage", player, imageName, imageId);
		public Boolean HasImage(String imageName) => (Boolean)ImageLibrary?.Call("HasImage", imageName);

		void AddAllImage()
		{
			Configuration.Interface Image = config.InterfaceSetting;
			
			if (!HasImage($"IQInfo_{Image.BackgroundImage}"))
				AddImage(Image.BackgroundImage, $"IQInfo_{Image.BackgroundImage}");
			if (!HasImage($"IQInfo_{Image.BackPageImage}"))
				AddImage(Image.BackPageImage, $"IQInfo_{Image.BackPageImage}");
			if (!HasImage($"IQInfo_{Image.CategorySelectImage}"))
				AddImage(Image.CategorySelectImage, $"IQInfo_{Image.CategorySelectImage}");
			if (!HasImage($"IQInfo_{Image.CheckBoxImage}"))
				AddImage(Image.CheckBoxImage, $"IQInfo_{Image.CheckBoxImage}");
			if (!HasImage($"IQInfo_{Image.CheckImage}"))
				AddImage(Image.CheckImage, $"IQInfo_{Image.CheckImage}");
			if (!HasImage($"IQInfo_{Image.ExitButtonImage}"))
				AddImage(Image.ExitButtonImage, $"IQInfo_{Image.ExitButtonImage}");
			if (!HasImage($"IQInfo_{Image.NextPageImage}"))
				AddImage(Image.NextPageImage, $"IQInfo_{Image.NextPageImage}");

			Configuration.Content Content = config.ContenteSetting;

			if (Content.UseLogoImage)
				if (!HasImage($"IQInfo_{Content.LogoServerImage}"))
					AddImage(Content.LogoServerImage, $"IQInfo_{Content.LogoServerImage}");

			List<Configuration.Content.Categories> Categories = Content.CategoriesSettings;

			foreach (Configuration.Content.Categories Category in Categories)
			{
				if (!HasImage($"IQInfo_{Category.CategoryImage}"))
					AddImage(Category.CategoryImage, $"IQInfo_{Category.CategoryImage}");

				foreach (Configuration.Content.Categories.Pages Page in Category.PageList.Where(i => i.UseImage))
					if (!HasImage($"IQInfo_{Page.Image}"))
						AddImage(Page.Image, $"IQInfo_{Page.Image}");
			}
		}
		void CachedImage(BasePlayer player)
		{
			Configuration.Interface Image = config.InterfaceSetting;

			SendImage(player, $"IQInfo_{Image.BackgroundImage}");
			SendImage(player, $"IQInfo_{Image.BackPageImage}");
			SendImage(player, $"IQInfo_{Image.CategorySelectImage}");
			SendImage(player, $"IQInfo_{Image.CheckBoxImage}");
			SendImage(player, $"IQInfo_{Image.CheckImage}");
			SendImage(player, $"IQInfo_{Image.ExitButtonImage}");
			SendImage(player, $"IQInfo_{Image.NextPageImage}");

			Configuration.Content Content = config.ContenteSetting;

			if (Content.UseLogoImage)
				SendImage(player, $"IQInfo_{Content.LogoServerImage}");

			List<Configuration.Content.Categories> Categories = Content.CategoriesSettings;

			foreach (Configuration.Content.Categories Category in Categories)
			{
				SendImage(player, $"IQInfo_{Category.CategoryImage}");

				foreach (Configuration.Content.Categories.Pages Page in Category.PageList.Where(i => i.UseImage))
					SendImage(player, $"IQInfo_{Page.Image}");
			}

		}
		#endregion

		#endregion

		#region Configuration
		private static Configuration config = new Configuration();
        private class Configuration
		{
			[JsonProperty("Введите команду для открытия меню")]
			public String CommandCustom = "menu";
			[JsonProperty("Настройка интерфейса")]
            public Interface InterfaceSetting = new Interface();
			[JsonProperty("Настройка контента меню")]
			public Content ContenteSetting = new Content();
			internal class Interface
			{
				[JsonProperty("Ссылка на задний фон плагина (Ссылка на картинку без картинки внутри - https://i.imgur.com/cSyXwis.png). Вы можете использовать любую свою фотку PNG (1474х965)")]
				public String BackgroundImage;
				[JsonProperty("Ссылка на картинку с страницей НАЗАД PNG (11х21)")]
				public String BackPageImage;
				[JsonProperty("Ссылка на картинку с страницей ВПЕРЕД PNG (11х21)")]
				public String NextPageImage;	
				[JsonProperty("Ссылка на картинку с выделенной категории PNG (242x53)")]
				public String CategorySelectImage;		
				[JsonProperty("Ссылка на картинку с кнопки ВЫХОД PNG (23x23)")]
				public String ExitButtonImage;
				[JsonProperty("Ссылка на картинку с чек боксом PNG (21х20)")]
				public String CheckBoxImage;
				[JsonProperty("Ссылка на картинку с галочкой для чек бокса PNG (13х9)")]
				public String CheckImage;
				[JsonProperty("RGBA цвет для текста")]
				public String RGBAColor;
				[JsonProperty("RGBA цвет для активного текста")]
				public String RGBAActiveColor;
			}
			internal class Content
			{
				[JsonProperty("Разрешить юзерам скрывать меню для последующих открытий при входе на сервер")]
				public Boolean UsePlayerHide;
				[JsonProperty("Использовать картинку в лого сервера (true - да/false - нет)")]
				public Boolean UseLogoImage;
				[JsonProperty("Ссылка на лого вашего сервера PNG (128x128)")]
				public String LogoServerImage;
				[JsonProperty("Отображаемое название вашего сервера")]
				public String LogoServerName;
				[JsonProperty("Текст с вашими контактами (Можете оставить поле пустым, если оно вам не нужно0")]
				public String ContactInformation;
				[JsonProperty("Настройка категорий и страниц к ним")]
				public List<Categories> CategoriesSettings = new List<Categories>();
				internal class Categories
				{
					[JsonProperty("Название категории в меню")]
					public String CategoryName;
					[JsonProperty("Ссылка ни PNG картинку для категории (64x64) для точного отображения используйте ПОЛНОСТЬЮ БЕЛУЮ КАРТИНКУ.Плагин сам ее покрасит")]
					public String CategoryImage;
					[JsonProperty("Название открытой категории на странице")]
					public String PageHeaderName;

					[JsonProperty("Настройка страниц с контентом")]
					public List<Pages> PageList = new List<Pages>();
					internal class Pages
					{
						[JsonProperty("Использовать изображение вместо текста(true - да/false - нет)")]
						public Boolean UseImage;
						[JsonProperty("Ссылка на ваше изображение(795х500 PNG)")]
						public String Image;
						[JsonProperty("Строки с текстом на одной странице(Максимум 25 строк на страницу)")]
						public List<String> TextLines = new List<string>();
					}
				}
			}

            public static Configuration GetNewConfiguration()
            {
				return new Configuration
				{
					CommandCustom = "menu",
					InterfaceSetting = new Interface
					{
						BackgroundImage = "https://i.imgur.com/Q9JvbSp.png",
						BackPageImage = "https://i.imgur.com/utq2qu3.png",
						NextPageImage = "https://i.imgur.com/m2hqqYi.png",
						CategorySelectImage = "https://i.imgur.com/EIubon0.png",
						ExitButtonImage = "https://i.imgur.com/7ePuJEk.png",
						CheckBoxImage = "https://i.imgur.com/ocUAesA.png",
						CheckImage = "https://i.imgur.com/iuZEJ0O.png",
						RGBAColor = "0.2078431 0.2078431 0.2078431 1",
						RGBAActiveColor = "0.9764706 0.7411765 0.4980392 1"
					},
					ContenteSetting = new Content
					{
						UsePlayerHide = true,
						UseLogoImage = true,
						LogoServerImage = "https://i.imgur.com/xY0mUSW.png",
						LogoServerName = "MERCURY DEV",
						ContactInformation = "НАШИ КОНТАКТЫ: VK - VK.COM/MERCURYDEV | DISCORD - MERCURY#5212 | ЭТО ВСЕ МОЖНО ИЗМЕНИТЬ",
						CategoriesSettings = new List<Content.Categories>
                        {
							new Content.Categories
                            {
								CategoryImage = "https://i.imgur.com/92aTs55.png",
								CategoryName = "Новости сервера",
								PageHeaderName = "Самые свежие новости",
								PageList = new List<Content.Categories.Pages>
                                {
									new Content.Categories.Pages
                                    {
										UseImage = true,
										Image = "https://i.imgur.com/xY0mUSW.png",
										TextLines = new List<String>
                                        {
											"- На сервере произошло обновление и добавлено новое меню IQInfo",
											"- Полностью переписан плагин",
											"- Новый интерфейс",
											"- Полная настройка интерфейса",
                                        },
                                    }
                                },
                            },
							new Content.Categories
							{
								CategoryImage = "https://i.imgur.com/2pgjncA.png",
								CategoryName = "Правила сервера",
								PageHeaderName = "Самые свежие правила",
								PageList = new List<Content.Categories.Pages>
								{
									new Content.Categories.Pages
									{
										UseImage = false,
										Image = "",
										TextLines = new List<String>
										{
											"- На сервере произошло обновление и добавлено новое меню IQInfo",
											"- Полностью переписан плагин",
											"- Новый интерфейс",
											"- Полная настройка интерфейса",
										},
									}
								},
							},
							new Content.Categories
							{
								CategoryImage = "https://i.imgur.com/83VpxGD.png",
								CategoryName = "Описание привилегий",
								PageHeaderName = "Самые свежие привилегии",
								PageList = new List<Content.Categories.Pages>
								{
									new Content.Categories.Pages
									{
										UseImage = false,
										Image = "",
										TextLines = new List<String>
										{
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- VIP",
											"- PREMIUM",
											"- PREMIUM",
										},
									}
								},
							},
						},
					}
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #178" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию! #33");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);
		#endregion

		#region Hooks
		private void Init() => ReadData();
		private void OnServerInitialized()
		{
			cmd.AddChatCommand(config.CommandCustom, this, nameof(InterfaceMenu));
			cmd.AddConsoleCommand(config.CommandCustom, this, nameof(InterfaceMenu));
			AddAllImage();
			foreach (var p in BasePlayer.activePlayerList)
				OnPlayerConnected(p);
		}
		void OnPlayerConnected(BasePlayer player)
		{
			CachedImage(player);
			if (!HidePlayers.Contains(player.userID))
				InterfaceMenu(player);
		}
		void Unload()
        {
			WriteData();

			foreach (BasePlayer player in BasePlayer.activePlayerList)
			{
				CuiHelper.DestroyUi(player, IQInfo_Hud);
				CuiHelper.DestroyUi(player, IQInfo_Background);
			}
		}
		#endregion

		#region Data
		public List<UInt64> HidePlayers = new List<UInt64>();
		void ReadData() => HidePlayers = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<List<UInt64>>("IQInfo/HidePlayers");
		void WriteData() => Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQInfo/HidePlayers", HidePlayers);
		#endregion

		#region Metods
		private void TurnedPlayer(BasePlayer player)
        {
			if (HidePlayers.Contains(player.userID))
				HidePlayers.Remove(player.userID);
			else HidePlayers.Add(player.userID);
        }
		private void PageControllerCategory(BasePlayer player, String PageAction, Int32 Page)
        {
			switch (PageAction)
			{
				case "next":
					{
						InterfaceCategory(player, Page + 1);
						break;
					}
				case "back":
					{
						InterfaceCategory(player, Page - 1);
						break;
					}
			}
			InterfaceContent(player);
		}
		private void PageControllerInfo(BasePlayer player, String PageAction, Int32 IndexCategory, Int32 Page)
		{
		    switch (PageAction)
			{
				case "next":
					{
						InterfaceContent(player, IndexCategory, Page + 1);
						break;
					}
				case "back":
					{
						InterfaceContent(player, IndexCategory, Page - 1);
						break;
					}
			}
		}

        #endregion

        #region Commands

		[ConsoleCommand("iqinfo")] 
		void ConsoleSystemIQInfo(ConsoleSystem.Arg arg)
        {
			BasePlayer player = arg.Player();
			if (player == null) return;
			String Action = arg.Args[0];

			switch(Action)
            {
				case "page.controller":
                    {
						String PageAction = arg.Args[1];
						Int32 Page = Int32.Parse(arg.Args[2]);
						PageControllerCategory(player, PageAction, Page);
						break;
                    }
				case "page.controller.info": 
					{
						String PageAction = arg.Args[1];
						Int32 IndexCategory = Int32.Parse(arg.Args[2]);
						Int32 Page = Int32.Parse(arg.Args[3]);
						PageControllerInfo(player, PageAction, IndexCategory, Page);
						break;
                    }
				case "select.category": 
					{
						Int32 Page = Int32.Parse(arg.Args[1]);
						Int32 SelectedCategory = Int32.Parse(arg.Args[2]);
						Int32 IndexInfo = SelectedCategory + (Page * 11);

						InterfaceCategory(player, Page, SelectedCategory);
						InterfaceContent(player, IndexInfo);
						break;
                    }
				case "hide.turn": 
					{
						TurnedPlayer(player);
						HideTurned(player);
						break;
                    }
            }
        }

        #endregion

		#region Interface

		private static String IQInfo_Hud = "IQInfo_Parent";
		private static String IQInfo_Background = "IQInfo_Background";

        #region Menu
        private void InterfaceMenu(BasePlayer player)
		{
			CuiHelper.DestroyUi(player, IQInfo_Hud);
			CuiElementContainer container = new CuiElementContainer();
			Configuration.Interface Image = config.InterfaceSetting;
			Configuration.Content Content = config.ContenteSetting;

			container.Add(new CuiPanel
			{
				CursorEnabled = true,
				Image = { Color = "0 0 0 0.3529412", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
				RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
			}, "Overlay", IQInfo_Hud);

			container.Add(new CuiElement
			{
				Name = "CloseButtonImg",
				Parent = IQInfo_Hud,
				Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.ExitButtonImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-523 9", OffsetMax = "-507 25" }
				}
			});

			container.Add(new CuiElement
			{
				Name = "CloseButtonLabel",
				Parent = IQInfo_Hud,
				Components = {
					new CuiTextComponent { Text = "ВЫХОД", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 1" },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-488.403 -354.397", OffsetMax = "-441.997 -331.402" }
				}
			});

			container.Add(new CuiButton
			{
				RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
				Button = { Close = IQInfo_Hud, Color = "0 0 0 0" },
				Text = { Text = "" }
			},  IQInfo_Hud);

			container.Add(new CuiElement
			{
				Name = IQInfo_Background,
				Parent = IQInfo_Hud,
				Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.BackgroundImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-526.27 -327.126", OffsetMax = "526.27 327.126" }
				}
			});

			if (Content.UseLogoImage)
			{
				container.Add(new CuiElement
				{
					Name = "LogoServer",
					Parent = IQInfo_Background,
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Content.LogoServerImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-454.5 -85.8", OffsetMax = "-390.5 -21.8" }
				}
				});
			}

			container.Add(new CuiElement
			{
				Name = "NameServer",
				Parent = IQInfo_Background,
				Components = {
					new CuiTextComponent { Text = Content.LogoServerName, Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.UpperCenter, Color = Image.RGBAColor },
					new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-526.51 -131.744", OffsetMax = "-318.49 -90.056" }
				}
			});

			if(!String.IsNullOrWhiteSpace(Content.ContactInformation))
            {
                container.Add(new CuiElement
                {
                    Name = "ContactLabel",
                    Parent = IQInfo_Background,
                    Components = {
                        new CuiTextComponent { Text = Content.ContactInformation, Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleLeft, Color = Image.RGBAColor },
						new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-286.437 -310.65", OffsetMax = "424.804 -286.15" }
					}
				});
            }
     

            CuiHelper.AddUi(player, container);

			InterfaceCategory(player);
			if (Content.CategoriesSettings[0] != null)
				InterfaceContent(player);
			HideTurned(player);
		}

        #endregion

        #region Hide

        private void HideTurned(BasePlayer player)
		{
			Configuration.Content Content = config.ContenteSetting;
			if (!Content.UsePlayerHide) return;
			CuiElementContainer container = new CuiElementContainer();
			Configuration.Interface Image = config.InterfaceSetting;

			CuiHelper.DestroyUi(player, "HideButtonImg");
			CuiHelper.DestroyUi(player, "HideButtonLabel");
			CuiHelper.DestroyUi(player, "HideBtn");
			CuiHelper.DestroyUi(player, "HideCheck");

			container.Add(new CuiElement
			{
				Name = "HideButtonImg",
				Parent = IQInfo_Hud,
				Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.CheckBoxImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-411 9", OffsetMax = "-395 25" }
				}
			});

			if(HidePlayers.Contains(player.userID))
            {
				container.Add(new CuiElement
				{
					Name = "HideCheck",
					Parent = "HideButtonImg",
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.CheckImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.25 0.3", AnchorMax = "0.75 0.7" }
				}
				});
			}

			container.Add(new CuiButton
			{
				RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
				Button = { Command = "iqinfo hide.turn", Color = "0 0 0 0" },
				Text = { Text = "" }
			}, "HideButtonImg", "HideBtn");

			container.Add(new CuiElement
			{
				Name = "HideButtonLabel",
				Parent = IQInfo_Hud,
				Components = {
					new CuiTextComponent { Text = "БОЛЬШЕ НЕ ПОКАЗЫВАТЬ", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 1" },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-376.774 -354.388", OffsetMax = "-235.836 -331.393" }
				}
			});

			CuiHelper.AddUi(player, container);
		}
		#endregion

		#region Content

		private void InterfaceContent(BasePlayer player, Int32 IndexCategory = 0, Int32 Page = 0)
		{
			CuiElementContainer container = new CuiElementContainer();
			Configuration.Interface Image = config.InterfaceSetting;
			Configuration.Content Content = config.ContenteSetting;
			Configuration.Content.Categories Category = Content.CategoriesSettings[IndexCategory];

			CuiHelper.DestroyUi(player, "InfoPageBack");
			CuiHelper.DestroyUi(player, "InfoPageNext");
			CuiHelper.DestroyUi(player, "InfoPageCount");
			CuiHelper.DestroyUi(player, "InfoPageNextBtn");
			CuiHelper.DestroyUi(player, "InfoPageBackBtn");
			CuiHelper.DestroyUi(player, "ContentHeader");
			CuiHelper.DestroyUi(player, "ContentLine");
			CuiHelper.DestroyUi(player, "ContentPanel");

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-286.434 -272.578", OffsetMax = "508.434 305.328" }
            },  IQInfo_Background, "ContentPanel");

			container.Add(new CuiElement
			{
				Name = "ContentHeader",
				Parent = "ContentPanel",
				Components = {
					new CuiTextComponent { Text = Category.PageHeaderName.ToUpper(), Font = "robotocondensed-bold.ttf", FontSize = 30, Align = TextAnchor.MiddleRight, Color = Image.RGBAColor },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-397.426 245.222", OffsetMax = "397.434 288.958" }
				}
			});

			Configuration.Content.Categories.Pages Lines = Category.PageList[Page];

			if (!Lines.UseImage)
			{
				Int32 Line = 0;
				foreach (String TextLine in Lines.TextLines.Take(25))
				{
					container.Add(new CuiElement
					{
						Name = "ContentLine",
						Parent = "ContentPanel",
						Components = {
					new CuiTextComponent { Text = TextLine, Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleLeft, Color = Image.RGBAColor },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"-397.42602658 {183.13 + (-20 * Line)}", OffsetMax = $"397.434 {211.01 + (-20 * Line)}" }
				}
					});
					Line++;
				}
			}
            else
            {
				container.Add(new CuiElement
				{
					Name = "ContentLine",
					Parent = "ContentPanel",
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Lines.Image}") },
					new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 0.9" }
				}
				});
			}

			#region Page

			if (Page > 0) 
			{
				container.Add(new CuiElement
				{
					Name = "InfoPageBack",
					Parent = IQInfo_Background,
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.BackPageImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "444 -308.1", OffsetMax = "455 -287.1" }
				}
				});

				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					Button = { Command = $"iqinfo page.controller.info back {IndexCategory} {Page}", Color = "0 0 0 0" },
					Text = { Text = "" }
				}, "InfoPageBack", "InfoPageBackBtn");
			}

			if (Category.PageList.Count - 1 > Page)
			{
				container.Add(new CuiElement
				{
					Name = "InfoPageNext",
					Parent = IQInfo_Background,
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.NextPageImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "482.4 -308.9", OffsetMax = "493.4 -287.9" }
				}
				});

				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					Button = { Command = $"iqinfo page.controller.info next {IndexCategory} {Page}", Color = "0 0 0 0" },
					Text = { Text = "" }
				}, "InfoPageNext", "InfoPageNextBtn");
			}

			container.Add(new CuiElement
			{
				Name = "InfoPageCount",
				Parent = IQInfo_Background,
				Components = {
					new CuiTextComponent { Text = $"{Page}", Font = "robotocondensed-regular.ttf", FontSize = 21, Align = TextAnchor.MiddleCenter, Color = Image.RGBAColor },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "455 -312.4", OffsetMax = "482.4 -284.4" }
                }
            });

            #endregion

            CuiHelper.AddUi(player, container);
		}

		#endregion

		#region Categories
		private void InterfaceCategory(BasePlayer player, Int32 Page = 0, Int32 SelectedIndex = 0)
		{
			CuiElementContainer container = new CuiElementContainer();
			Configuration.Interface Image = config.InterfaceSetting;
			Configuration.Content Content = config.ContenteSetting;
			List<Configuration.Content.Categories> Categories = Content.CategoriesSettings;

			CuiHelper.DestroyUi(player, "CategoryPageBack");
			CuiHelper.DestroyUi(player, "CategoryPageNext");
			CuiHelper.DestroyUi(player, "CategoryPageCount");
			CuiHelper.DestroyUi(player, "CategoryBlock");
			CuiHelper.DestroyUi(player, "CategoryPanel");
			CuiHelper.DestroyUi(player, "CategoryImg");
			CuiHelper.DestroyUi(player, "CategoryLabel");
			CuiHelper.DestroyUi(player, "PageBack");
			CuiHelper.DestroyUi(player, "PageNext");
			CuiHelper.DestroyUi(player, "CategorySelect");

			container.Add(new CuiPanel
			{
				CursorEnabled = false,
				Image = { Color = "0 0 0 0" },
				RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-515.822 -267.01502658", OffsetMax = "-328.129 179.31302658" }
			}, IQInfo_Background, "CategoryBlock");

			Int32 Y = 0;
			foreach (Configuration.Content.Categories Category in Content.CategoriesSettings.Skip(11 * Page).Take(11))
			{
				String SelectedColor = Y == SelectedIndex ? "1 1 1 1" : "0 0 0 0";
				String SelectedColorText = Y == SelectedIndex ? Image.RGBAActiveColor : Image.RGBAColor;

				container.Add(new CuiElement
				{
					Name = "CategoryPanel",
					Parent = "CategoryBlock",
					Components = {
					new CuiRawImageComponent { Color = SelectedColor, Png = GetImage($"IQInfo_{Image.CategorySelectImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"-93.839 {190.598 + (-40 * Y)}", OffsetMax = $"93.851 {223.163 + (-40 * Y)}" }
				}
				});

				if (!String.IsNullOrWhiteSpace(Category.CategoryImage))
				{
					container.Add(new CuiElement
					{
						Name = "CategoryImg",
						Parent = "CategoryPanel",
						Components = {
						new CuiRawImageComponent { Color = SelectedColorText, Png = GetImage($"IQInfo_{Category.CategoryImage}") },
						new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-81.9 -11.5", OffsetMax = "-57.9 11" }
					}
					});
				}

				container.Add(new CuiElement
				{
					Name = "CategoryLabel",
					Parent = "CategoryPanel",
					Components = {
					new CuiTextComponent { Text = Category.CategoryName, Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = SelectedColorText },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-38.251 -12.5", OffsetMax = "76.987 11.5" }
				}
				});

				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					Button = { Command = $"iqinfo select.category {Page} {Y}", Color = "0 0 0 0" },
					Text = { Text = "" }
				}, "CategoryPanel", "CategorySelect");

				Y++;
			}

			#region Pages

			if (Page > 0)
			{
				container.Add(new CuiElement
				{
					Name = "CategoryPageBack",
					Parent = IQInfo_Background,
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage($"IQInfo_{Image.BackPageImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-451 -306.7", OffsetMax = "-440 -285.7" }
				}
				});

				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					Button = { Command = $"iqinfo page.controller back {Page}", Color = "0 0 0 0" },
					Text = { Text = "" }
				},  "CategoryPageBack", "PageBack");
			}

			if (Content.CategoriesSettings.Skip(11 * (Page + 1)).Count() != 0)
			{
				container.Add(new CuiElement
				{
					Name = "CategoryPageNext",
					Parent = IQInfo_Background,
					Components = {
					new CuiRawImageComponent { Color = "1 1 1 1",  Png = GetImage($"IQInfo_{Image.NextPageImage}") },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-412.6 -306.7", OffsetMax = "-401.6 -285.7" }
				}
				});

				container.Add(new CuiButton
				{
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					Button = { Command = $"iqinfo page.controller next {Page}", Color = "0 0 0 0" },
					Text = { Text = "" }
				}, "CategoryPageNext", "PageNext");
			}

			container.Add(new CuiElement
			{
				Name = "CategoryPageCount",
				Parent = IQInfo_Background,
				Components = {
					new CuiTextComponent { Text = $"{Page}", Font = "robotocondensed-regular.ttf", FontSize = 21, Align = TextAnchor.MiddleCenter, Color = Image.RGBAColor },
					new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-440 -310.2", OffsetMax = "-412.6 -282.2" }
				}
			});

			#endregion

			CuiHelper.AddUi(player, container);
		}

        #endregion

        #endregion
    }
}


// --- End of file: IQInfo.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MultiEvents.cs ---
// --- Original Local Path: MultiEvents.cs ---

﻿using System;
using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System.Collections;
using System.Linq;
using Random = UnityEngine.Random;
using Oxide.Core.Libraries;

namespace Oxide.Plugins
{
    [Info("MultiEvents", "Mevent", "1.1.3")]
    [Description("Maded by Mevent#4546")]
    class MultiEvents : RustPlugin
    {
        #region Fields

        [PluginReference] private readonly Plugin ImageLibrary;
        private static string Layer = "UI_MultiEvents";
        private double time;
        public Timer Main;
        public Timer DestroyTimer;
        public Timer HelicopterStrafeTarget;
        public Timer HelicopterTarget;
        public BasePlayer winner = null;
        public BasePlayer runner = null;
        public List<string> Winners = new List<string>();
        private bool hasStarted;
        public string nowEvent = null;
        private Dictionary<BasePlayer, float> PlayersTop = new Dictionary<BasePlayer, float>();
        private List<LootContainer> LookingLoot = new List<LootContainer>();
        private static MultiEvents instance;
        private static Vector3 EventPosition = new Vector3(-(float) World.Size / 2, 400, -(float) World.Size / 2);
        private static FoundationDrop cEvent = null;
        MonumentInfo beginning_mission = null;
        MonumentInfo end_mission = null;
        public Item ItemForWinner = null;

        #endregion

        #region Config

        private static ConfigData config;

        private class ConfigData
        {
            public class Interface
            {
                [JsonProperty("Фоновый цвет")] public string color;
                [JsonProperty("Offset Min")] public string oMin;
                [JsonProperty("Offset Max")] public string oMax;
            }

            public class EventSettings
            {
                [JsonProperty("Настройки интерфейса событий")]
                public Interface ui;

                [JsonProperty("Сколько игроков требуется, чтобы начать событие?")]
                public int MinPlayers;

                [JsonProperty("Продолжительность события (в секундах)")]
                public int TimeDelay;

                [JsonProperty("Image URL")] public string ImageUrl;
                [JsonProperty("Настройки вознаграждений")] public List<Loot> loot;
            }

            public class CollectionResourcesSettings : EventSettings
            {
            }

            public class HuntAnimalSettings : EventSettings
            {
                [JsonProperty("Сколько очков дается за курицу?")]
                public int chicken;

                [JsonProperty("Сколько очков дается за волка?")]
                public int wolf;

                [JsonProperty("Сколько очков дается за кабана?")]
                public int boar;

                [JsonProperty("Сколько очков дается за оленя?")]
                public int deer;

                [JsonProperty("Сколько очков дается за лошадь?")]
                public int horse;

                [JsonProperty("Сколько очков дается за медведя?")]
                public int bear;
            }

            public class Loot
            {
                [JsonProperty("Награда это предмет?")] public bool itemenabled;
                [JsonProperty("Награда это деньги?")] public bool cashenabled;
                [JsonProperty("Пункт настройки")] public List<List<Items>> items;
                [JsonProperty("Настройка денег")] public Cash cash;
            }

            public class Cash
            {
                [JsonProperty("Функция вызова")] public string function;

                [JsonProperty("Имя плагина, чтобы дать")]
                public string plugin;

                [JsonProperty("Сумма стоимости мероприятия (следующий победитель получит меньше)")]
                public int amount;
            }

            public class Items
            {
                [JsonProperty("Название предмета (ShortName)")]
                public string shortname;

                [JsonProperty("Минимальное количество товара")]
                public int minrate;

                [JsonProperty("Максимальное количество товара")]
                public int maxrate;

                [JsonProperty("Это чертёж ?")] public bool blueprint;

                [JsonProperty("Название предмета (оставьте пустым для стандарта)")]
                public string displayname;

                [JsonProperty("SkinID (0 - дефолт)")]
                public ulong skinid;

                [JsonProperty("Состояние товара в процентах от 1 до 100 (0 - стандартно)")]
                public int condition;
            }

            public class LookingLootSettings : EventSettings
            {
                [JsonProperty("Какая добыча из бочек засчитывается на турнире?")]
                public List<string> Barrels;
            }

            public class SpecialCargoSettings : EventSettings
            {
                [JsonProperty("Время показа уведомления о запуске мероприятия")]
                public float timeStart;

                [JsonProperty("Время работы объявления объявления бегуна")]
                public float timeNewRunner;

                [JsonProperty("Имя маркера карты")] 
                public string MarkerName;
            }

            public class HelicopterPetSettings : EventSettings
            {
            }

            public class KingMountainSettings : EventSettings
            {
            }

            public class FoundationDropSettings : EventSettings
            {
                [JsonProperty("Настройка интерфейса с информацией о количестве игроков и блоков")]
                public Interface infoUI;

                [JsonProperty("Размер арены в квадратах")]
                public int ArenaSize;

                [JsonProperty("Интервал между удалениями блоков")]
                public float DelayDestroy;

                [JsonProperty("Время ожидания игроков с момента объявления события")]
                public int WaitTime;

                [JsonProperty("Интенсивность создаваемого излучения")]
                public float IntensityRadiation;

                [JsonProperty(
                    "Отключить стандартное излучение при комнатной температуре (это необходимо, если у вас отключено излучение, плагин включит его снова, но удалит при комнатной температуре)?")]
                public bool DisableDefaultRadiation;

                [JsonProperty("Черные списки команд для игроков событий")]
                public List<string> commands;
            }

            [JsonProperty("Задержка между событиями")] public int Delay;

            [JsonProperty("События доступны для игроков")]
            public List<string> EnabledEvents;

            [JsonProperty("Разрешение на запуск мероприятия")]
            public string perm_admin;

            [JsonProperty("Настройка события ЛЮБИМЧИК ВЕРТОЛЁТА")]
            public HelicopterPetSettings HelicopterPet;

            [JsonProperty("Настройка события ОХОТА ЖИВОТНЫХ")]
            public HuntAnimalSettings HuntAnimal;

            [JsonProperty("Настройка события ЦАРЬ ГОРЫ")]
            public KingMountainSettings KingMountain;

            [JsonProperty("Настройка события СБОР РЕСУРСОВ")]
            public CollectionResourcesSettings CollectionResources;

            [JsonProperty("Настройка события ПОИСК LOOT")]
            public LookingLootSettings LookingLoot;

            [JsonProperty("Настройка события СПЕЦИАЛЬНЫЙ ГРУЗ")]
            public SpecialCargoSettings SpecialCargo;

            [JsonProperty("Установка события ПАДАЮЩИЕ ПЛАТФОРМЫ")]
            public FoundationDropSettings FoundationDrop;
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                Delay = 3600,
                EnabledEvents = new List<string>
                {
                    "KingMountain", "CollectionResources", "HuntAnimal", "HelicopterPet", "LookingLoot", "SpecialCargo",
                    "FoundationDrop"
                },
                perm_admin = "multievents.admin",
                FoundationDrop = new ConfigData.FoundationDropSettings
                {
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                    MinPlayers = 4,
                    TimeDelay = 1800,
                    ImageUrl = "https://i.imgur.com/B4DCBs2.png",
                    ArenaSize = 10,
                    DelayDestroy = 5f,
                    WaitTime = 60,
                    IntensityRadiation = 10f,
                    DisableDefaultRadiation = false,
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    infoUI = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -100",
                        oMax = "-5 -5"
                    },
                    commands = new List<string>
                    {
                        "bp",
                        "backpack",
                        "skin",
                        "skinbox",
                        "rec",
                        "tpa",
                        "tpr",
                        "sethome",
                        "home",
                        "kit",
                        "remove"
                    }
                },
                SpecialCargo = new ConfigData.SpecialCargoSettings
                {
                    MarkerName = "SPECIAL CARGO",
                    MinPlayers = 4,
                    TimeDelay = 1800,
                    ImageUrl = "https://i.imgur.com/Dp9bMSl.png",
                    timeNewRunner = 6,
                    timeStart = 4,
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                },
                LookingLoot = new ConfigData.LookingLootSettings
                {
                    MinPlayers = 4,
                    TimeDelay = 300,
                    ImageUrl = "https://i.imgur.com/4ZOIs33.png",
                    Barrels = new List<string>
                    {
                        "assets/bundled/prefabs/autospawn/resource/loot/loot-barrel-1.prefab",
                        "assets/bundled/prefabs/autospawn/resource/loot/loot-barrel-2.prefab",
                        "assets/bundled/prefabs/radtown/loot_barrel_1.prefab",
                        "assets/bundled/prefabs/radtown/loot_barrel_2.prefab",
                        "assets/bundled/prefabs/radtown/oil_barrel.prefab"
                    },
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                },
                HelicopterPet = new ConfigData.HelicopterPetSettings
                {
                    MinPlayers = 4,
                    TimeDelay = 300,
                    ImageUrl = "https://i.imgur.com/owDanC1.png",
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                },
                HuntAnimal = new ConfigData.HuntAnimalSettings
                {
                    MinPlayers = 4,
                    TimeDelay = 300,
                    ImageUrl = "https://i.imgur.com/9gTw3kN.png",
                    chicken = 1,
                    wolf = 4,
                    boar = 4,
                    deer = 4,
                    horse = 4,
                    bear = 10,
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                },
                CollectionResources = new ConfigData.CollectionResourcesSettings
                {
                    MinPlayers = 4,
                    TimeDelay = 300,
                    ImageUrl = "https://i.imgur.com/FggJeaH.png",
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        },
                    },
                },
                KingMountain = new ConfigData.KingMountainSettings
                {
                    MinPlayers = 4,
                    TimeDelay = 300,
                    ImageUrl = "https://i.imgur.com/dLWgxg7.png",
                    ui = new ConfigData.Interface
                    {
                        color = "0.024 0.016 0.17 0.7",
                        oMin = "-225 -305",
                        oMax = "-5 -5"
                    },
                    loot = new List<ConfigData.Loot>
                    {
                        new ConfigData.Loot
                        {
                            itemenabled = true,
                            cashenabled = true,
                            items = new List<List<ConfigData.Items>>
                            {
                                new List<ConfigData.Items>
                                {
                                    new ConfigData.Items
                                    {
                                        shortname = "autoturret",
                                        minrate = 1,
                                        maxrate = 1,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    },
                                    new ConfigData.Items
                                    {
                                        shortname = "metal.refined",
                                        minrate = 50,
                                        maxrate = 150,
                                        blueprint = false,
                                        displayname = "",
                                        skinid = 0,
                                        condition = 0,
                                    }
                                }
                            },
                            cash = new ConfigData.Cash
                            {
                                function = "Deposit",
                                plugin = "Economics",
                                amount = 400,
                            }
                        }
                    },
                },
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                    LoadDefaultConfig();
            }
            catch
            {
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Configuration file is corrupt(or not exists), creating new one!");
            config = GetDefaultConfig();
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Initialization

        void OnServerInitialized()
        {
            PrintWarning("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            PrintWarning($"     {Name} v{Version} loading");
            if (!ImageLibrary)
            {
                PrintError("   Install plugin: 'ImageLibrary'");
                Interface.Oxide.UnloadPlugin(Title);
                return;
            }

            PrintWarning($"        Plugin loaded - OK");
            PrintWarning("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            timer.Every(config.Delay + Random.Range(0, 1800), () => { StartEvent(config.EnabledEvents.GetRandom()); });

            permission.RegisterPermission(config.perm_admin, this);

            ImageLibrary.Call("AddImage", config.CollectionResources.ImageUrl, "CollectionResources");
            ImageLibrary.Call("AddImage", config.FoundationDrop.ImageUrl, "FoundationDrop");
            ImageLibrary.Call("AddImage", config.HelicopterPet.ImageUrl, "HelicopterPet");
            ImageLibrary.Call("AddImage", config.HuntAnimal.ImageUrl, "HuntAnimal");
            ImageLibrary.Call("AddImage", config.KingMountain.ImageUrl, "KingMountain");
            ImageLibrary.Call("AddImage", config.LookingLoot.ImageUrl, "LookingLoot");
            ImageLibrary.Call("AddImage", config.SpecialCargo.ImageUrl, "SpecialCargo");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/Okt1BMH.png", "ME_Background_image");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/DpLldC8.png", "ME_Logo_image");

            Unsubscribe(nameof(OnCollectiblePickup));
            Unsubscribe(nameof(OnCropGather));
            Unsubscribe(nameof(OnDispenserBonus));
            Unsubscribe(nameof(OnDispenserGather));
            Unsubscribe(nameof(OnEntityDeath));
            Unsubscribe(nameof(OnLootEntity));
            Unsubscribe(nameof(OnPlayerDie));
            Unsubscribe(nameof(OnEntityKill));
            Unsubscribe(nameof(ClearTeleport));
            Unsubscribe(nameof(FoundationDrop));
            Unsubscribe(nameof(InitializeFoundation));
            Unsubscribe(nameof(DropFoundation));
            Unsubscribe(nameof(Downgrader));
            Unsubscribe(nameof(HeliPet));
            Unsubscribe(nameof(SCmarker));
            Unsubscribe(nameof(OnPlayerCommand));
            instance = this;
        }

        void Unload()
        {
            if (hasStarted)
            {
                try
                {
                    DestroyEvent(nowEvent);
                    NextTick(() =>
                    {
                        PlayersTop.Clear();
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        {
                            var player = BasePlayer.activePlayerList[i];

                            CuiHelper.DestroyUi(player, Layer);
                            CuiHelper.DestroyUi(player, Layer + ".Notification");
                            CuiHelper.DestroyUi(player, Layer + ".SpecialCargo");
                            CuiHelper.DestroyUi(player, Layer + ".FoundationDrop.Play");
                        }
                    });
                }
                catch (NullReferenceException)
                {
                    if (PlayersTop.Count > 1)
                        PlayersTop.Clear();
                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                    {
                        var player = BasePlayer.activePlayerList[i];

                        CuiHelper.DestroyUi(player, Layer);
                        CuiHelper.DestroyUi(player, Layer + ".Notification");
                        CuiHelper.DestroyUi(player, Layer + ".SpecialCargo");
                        CuiHelper.DestroyUi(player, Layer + ".FoundationDrop.Play");
                    }

                    UnityEngine.Object.FindObjectsOfType<BaseEntity>().Where(p => p.OwnerID == 98596 && !p.IsDestroyed)
                        .ToList().ForEach(s => s?.Kill());
                    UnityEngine.Object.FindObjectsOfType<Downgrader>().ToList().ForEach(s => s?.Kill());
                    UnityEngine.Object.FindObjectsOfType<SCmarker>().ToList().ForEach(s => s?.Kill());
                    if (RadiationZones.ContainsKey(cEvent.BlockList.SelectMany(p => p).Last().GetInstanceID()))
                    {
                        UnityEngine.Object.Destroy(
                            RadiationZones[cEvent.BlockList.SelectMany(p => p).Last().GetInstanceID()].zone);
                        RadiationZones.Remove(cEvent.BlockList.SelectMany(p => p).Last().GetInstanceID());
                    }
                }
            }
        }

        #endregion

        #region Functions

        void StartEvent(string type, BasePlayer target = null)
        {
            if (hasStarted && !string.IsNullOrEmpty(nowEvent)) DestroyEvent(nowEvent);
            nowEvent = type;
            Main?.Destroy();
            DestroyTimer?.Destroy();
            switch (type)
            {
                case "KingMountain":
                {
                    if (BasePlayer.activePlayerList.Count < config.KingMountain.MinPlayers && target == null) return;
                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        TopUI(BasePlayer.activePlayerList[i], "all",
                            GetMessage(type, BasePlayer.activePlayerList[i].UserIDString),
                            oMin: config.KingMountain.ui.oMin, oMax: config.KingMountain.ui.oMax,
                            color: config.KingMountain.ui.color);

                    time = config.KingMountain.TimeDelay + GrabCurrentTime();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(8).ToList();

                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        {
                            var player = BasePlayer.activePlayerList[i];

                            if (!player.IsBuildingAuthed() && !player.GetMounted() && !player.IsFlying)
                            {
                                if (!PlayersTop.ContainsKey(player))
                                    PlayersTop.Add(player, player.transform.position.y);
                                else
                                    PlayersTop[player] = player.transform.position.y;
                            }

                            TopUI(player, "refresh", list: list);
                        }
                    });

                    DestroyTimer = timer.Once(config.KingMountain.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "CollectionResources":
                {
                    if (BasePlayer.activePlayerList.Count < config.CollectionResources.MinPlayers &&
                        target == null) return;
                    Subscribe(nameof(OnCollectiblePickup));
                    Subscribe(nameof(OnCropGather));
                    Subscribe(nameof(OnDispenserBonus));
                    Subscribe(nameof(OnDispenserGather));

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        TopUI(BasePlayer.activePlayerList[i], "all",
                            GetMessage(type, BasePlayer.activePlayerList[i].UserIDString),
                            oMin: config.CollectionResources.ui.oMin, oMax: config.CollectionResources.ui.oMax,
                            color: config.CollectionResources.ui.color);

                    time = config.CollectionResources.TimeDelay + GrabCurrentTime();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(8).ToList();
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                            TopUI(BasePlayer.activePlayerList[i], "refresh", list: list);
                    });

                    DestroyTimer = timer.Once(config.CollectionResources.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "HuntAnimal":
                {
                    if (BasePlayer.activePlayerList.Count < config.HuntAnimal.MinPlayers && target == null) return;
                    Subscribe(nameof(OnEntityDeath));

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        TopUI(BasePlayer.activePlayerList[i], "all",
                            GetMessage(type, BasePlayer.activePlayerList[i].UserIDString),
                            oMin: config.HuntAnimal.ui.oMin, oMax: config.HuntAnimal.ui.oMax,
                            color: config.HuntAnimal.ui.color);

                    time = config.HuntAnimal.TimeDelay + GrabCurrentTime();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(8).ToList();
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                            TopUI(BasePlayer.activePlayerList[i], "refresh", list: list);
                    });

                    DestroyTimer = timer.Once(config.HuntAnimal.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "HelicopterPet":
                {
                    if (BasePlayer.activePlayerList.Count < config.HelicopterPet.MinPlayers && target == null) return;
                    Subscribe(nameof(OnEntityKill));
                    Subscribe(nameof(HeliPet));

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        TopUI(BasePlayer.activePlayerList[i], "all",
                            GetMessage(type, BasePlayer.activePlayerList[i].UserIDString),
                            oMin: config.HelicopterPet.ui.oMin, oMax: config.HelicopterPet.ui.oMax,
                            color: config.HelicopterPet.ui.color);

                    time = config.HelicopterPet.TimeDelay + GrabCurrentTime();

                    BaseHelicopter heli =
                        GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab",
                            new Vector3(), new Quaternion(), true) as BaseHelicopter;
                    heli.OwnerID = 999999999;
                    heli.Spawn();
                    heli.transform.position = new Vector3(0, 350, 0);
                    heli.gameObject.AddComponent<HeliPet>();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(8).ToList();
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                            TopUI(BasePlayer.activePlayerList[i], "refresh", list: list);
                    });

                    DestroyTimer = timer.Once(config.HelicopterPet.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "LookingLoot":
                {
                    if (BasePlayer.activePlayerList.Count < config.LookingLoot.MinPlayers && target == null) return;
                    Subscribe(nameof(OnLootEntity));
                    Subscribe(nameof(OnEntityDeath));

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        TopUI(BasePlayer.activePlayerList[i], "all",
                            GetMessage(type, BasePlayer.activePlayerList[i].UserIDString),
                            oMin: config.LookingLoot.ui.oMin, oMax: config.LookingLoot.ui.oMax,
                            color: config.LookingLoot.ui.color);

                    time = config.LookingLoot.TimeDelay + GrabCurrentTime();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(8).ToList();
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                            TopUI(BasePlayer.activePlayerList[i], "refresh", list: list);
                    });

                    DestroyTimer = timer.Once(config.LookingLoot.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "SpecialCargo":
                {
                    if (BasePlayer.activePlayerList.Count < config.SpecialCargo.MinPlayers && target == null) return;
                    Subscribe(nameof(OnPlayerDie));
                    Subscribe(nameof(SCmarker));

                    time = config.SpecialCargo.TimeDelay + GrabCurrentTime();

                    List<MonumentInfo> monuments = new List<MonumentInfo>();
                    foreach (var monument in UnityEngine.Object.FindObjectsOfType<MonumentInfo>())
                    {
                        monuments.Add(monument);
                    }

                    beginning_mission = monuments.GetRandom();
                    monuments.Remove(beginning_mission);
                    end_mission = monuments.GetRandom();

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        UI_Notification(BasePlayer.activePlayerList[i],
                            GetMessage("SpecialCargo.New", BasePlayer.activePlayerList[i].UserIDString,
                                beginning_mission.displayPhrase.english), ".Notification.New");
                    timer.Once(config.SpecialCargo.timeStart, () =>
                    {
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                            CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".Notification.New");
                    });

                    //add image to map
                    beginning_mission.gameObject.AddComponent<SCmarker>().spawnMarker();

                    Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
                    {
                        for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        {
                            var player = BasePlayer.activePlayerList[i];

                            if (runner == null)
                                if (Vector3.Distance(beginning_mission.transform.position, player.transform.position) <
                                    100f)
                                {
                                    runner = player;
                                    UI_Notification(runner,
                                        GetMessage("SpecialCargo.CreateRunner", runner.UserIDString,
                                            end_mission.displayPhrase.english,
                                            GetGridString(end_mission.transform.position)),
                                        ".Notification.CreateRunner");
                                    timer.Once(config.SpecialCargo.timeNewRunner,
                                        () => CuiHelper.DestroyUi(runner, Layer + ".Notification.CreateRunner"));
                                    beginning_mission.gameObject.GetComponent<SCmarker>()?.Kill();
                                    player.gameObject.AddComponent<SCPlayerMarker>()?.SpawnMarker();
                                    TopUI(runner, nowEvent);
                                }

                            if (runner == player &&
                                Vector3.Distance(end_mission.transform.position, player.transform.position) < 100f)
                                DestroyEvent(nowEvent);
                        }
                    });

                    DestroyTimer = timer.Once(config.SpecialCargo.TimeDelay, () => { DestroyEvent(nowEvent); });
                }
                    break;
                case "FoundationDrop":
                {
                    if (BasePlayer.activePlayerList.Count < config.FoundationDrop.MinPlayers && target == null) return;
                    Subscribe(nameof(ClearTeleport));
                    Subscribe(nameof(FoundationDrop));
                    Subscribe(nameof(InitializeFoundation));
                    Subscribe(nameof(DropFoundation));
                    Subscribe(nameof(Downgrader));
                    Subscribe(nameof(OnPlayerCommand));

                    time = config.FoundationDrop.WaitTime + GrabCurrentTime();
                    cEvent = new FoundationDrop
                    {
                        Started = false,
                        StartTime = time
                    };
                    ServerMgr.Instance.StartCoroutine(InitializeFoundation(config.FoundationDrop.WaitTime));
                }
                    break;
                default:
                    break;
            }

            hasStarted = true;
        }

        void DestroyEvent(string type)
        {
            Main?.Destroy();
            DestroyTimer?.Destroy();
            var messageKEY = string.Empty;
            var winns = string.Empty;
            switch (type)
            {
                case "KingMountain":
                    if (PlayersTop.Count != 0)
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(config.KingMountain.loot.Count)
                            .ToList();
                        for (int i = 0; i < list.Count; i++)
                        {
                            var winner = list[i];
                            DropItem(winner.Key, nowEvent, i);
                            Winners.Add(winner.Key.displayName);
                        }
                    }

                    break;
                case "CollectionResources":
                    Unsubscribe(nameof(OnCollectiblePickup));
                    Unsubscribe(nameof(OnCropGather));
                    Unsubscribe(nameof(OnDispenserBonus));
                    Unsubscribe(nameof(OnDispenserGather));

                    if (PlayersTop.Count != 0)
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value)
                            .Take(config.CollectionResources.loot.Count).ToList();
                        for (int i = 0; i < list.Count; i++)
                        {
                            var winner = list[i];
                            DropItem(winner.Key, nowEvent, i);
                            Winners.Add(winner.Key.displayName);
                        }
                    }

                    break;
                case "HuntAnimal":
                    Unsubscribe(nameof(OnEntityDeath));

                    if (PlayersTop.Count != 0)
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(config.HuntAnimal.loot.Count)
                            .ToList();
                        for (int i = 0; i < list.Count; i++)
                        {
                            var winner = list[i];
                            DropItem(winner.Key, nowEvent, i);
                            Winners.Add(winner.Key.displayName);
                        }
                    }

                    break;
                case "HelicopterPet":
                    Unsubscribe(nameof(OnEntityKill));
                    Unsubscribe(nameof(HeliPet));

                    foreach (var check in BaseNetworkable.serverEntities)
                    {
                        if (check is BaseHelicopter && (check as BaseHelicopter).OwnerID == 999999999)
                        {
                            check?.Kill();
                        }
                    }

                    if (PlayersTop.Count != 0)
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(config.HelicopterPet.loot.Count)
                            .ToList();
                        for (int i = 0; i < list.Count; i++)
                        {
                            var winner = list[i];
                            DropItem(winner.Key, nowEvent, i);
                            Winners.Add(winner.Key.displayName);
                        }
                    }

                    break;
                case "LookingLoot":
                    Unsubscribe(nameof(OnLootEntity));
                    Unsubscribe(nameof(OnEntityDeath));
                    if (PlayersTop.Count != 0)
                    {
                        var list = PlayersTop.OrderByDescending(p => p.Value).Take(config.LookingLoot.loot.Count)
                            .ToList();
                        for (int i = 0; i < list.Count; i++)
                        {
                            var winner = list[i];
                            DropItem(winner.Key, nowEvent, i);
                            Winners.Add(winner.Key.displayName);
                        }
                    }

                    break;
                case "SpecialCargo":
                    UnityEngine.Object.FindObjectsOfType<SCmarker>().ToList().ForEach(s => s?.Kill());

                    Unsubscribe(nameof(OnPlayerDie));
                    Unsubscribe(nameof(SCmarker));

                    if (runner != null)
                    {
                        winner = runner;
                        DropItem(winner, type);
                        runner.gameObject.GetComponent<SCPlayerMarker>()?.Kill();
                    }

                    break;
                case "FoundationDrop":
                    cEvent.FinishEvent();
                    cEvent = null;

                    Unsubscribe(nameof(ClearTeleport));
                    Unsubscribe(nameof(FoundationDrop));
                    Unsubscribe(nameof(InitializeFoundation));
                    Unsubscribe(nameof(DropFoundation));
                    Unsubscribe(nameof(Downgrader));
                    Unsubscribe(nameof(OnPlayerCommand));
                    break;
            }

            if (PlayersTop.Count == 0 && winner == null)
            {
                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    var player = BasePlayer.activePlayerList[i];
                    CuiHelper.DestroyUi(player, Layer);
                    UI_Notification(player, GetMessage("WINNER.NOTFOUND", player.UserIDString));
                }

                timer.Once(4, () =>
                {
                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".Notification");
                });
            }
            else
            {
                messageKEY = Winners.Count > 1 ? "EVENT.END.MULTI" : "EVENT.END";
                winns = Winners.Count > 1 ? string.Join(", ", Winners.ToArray()) : Winners.First();

                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    var player = BasePlayer.activePlayerList[i];
                    CuiHelper.DestroyUi(player, Layer);
                    CuiHelper.DestroyUi(player, Layer + ".SpecialCargo");
                    CuiHelper.DestroyUi(player, Layer + ".FoundationDrop.Play");

                    UI_Notification(player,
                        winner == player
                            ? GetMessage("EVENT.YOUWINNER", player.UserIDString)
                            : GetMessage(messageKEY, player.UserIDString, GetMessage(type, player.UserIDString),
                                winns));
                }

                timer.Once(4, () =>
                {
                    PlayersTop.Clear();

                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".Notification");
                });
            }

            NextTick(() =>
            {
                if (type != "FoundationDrop")
                {
                    winner = null;
                    nowEvent = null;
                    hasStarted = false;
                }
                else
                {
                    if (winner == null)
                    {
                        nowEvent = null;
                        hasStarted = false;
                    }
                }

                runner = null;
                beginning_mission = null;
                end_mission = null;
                winns = string.Empty;
                PlayersTop.Clear();
                LookingLoot.Clear();
                Winners.Clear();
                messageKEY = "EVENT.END";
                HelicopterStrafeTarget?.Destroy();
                HelicopterTarget?.Destroy();
            });
        }

        private void DropItem(BasePlayer player, string type, int temp = 0)
        {
            ConfigData.Items item = null;
            ConfigData.Cash cash = null;

            switch (type)
            {
                case "KingMountain":
                    if (config.KingMountain.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.KingMountain.loot[temp].items.Count; i++)
                        {
                            item = config.KingMountain.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.KingMountain.loot[temp].cashenabled)
                        cash = config.KingMountain.loot[temp].cash;
                    break;
                case "CollectionResources":
                    if (config.CollectionResources.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.CollectionResources.loot[temp].items.Count; i++)
                        {
                            item = config.CollectionResources.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.CollectionResources.loot[temp].cashenabled)
                        cash = config.CollectionResources.loot[temp].cash;
                    break;
                case "HuntAnimal":
                    if (config.HuntAnimal.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.HuntAnimal.loot[temp].items.Count; i++)
                        {
                            item = config.HuntAnimal.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.HuntAnimal.loot[temp].cashenabled)
                        cash = config.HuntAnimal.loot[temp].cash;
                    break;
                case "HelicopterPet":
                    if (config.HelicopterPet.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.HelicopterPet.loot[temp].items.Count; i++)
                        {
                            item = config.HelicopterPet.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.HelicopterPet.loot[temp].cashenabled)
                        cash = config.HelicopterPet.loot[temp].cash;
                    break;
                case "LookingLoot":
                    if (config.LookingLoot.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.LookingLoot.loot[temp].items.Count; i++)
                        {
                            item = config.LookingLoot.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.LookingLoot.loot[temp].cashenabled)
                        cash = config.LookingLoot.loot[temp].cash;
                    break;
                case "SpecialCargo":
                    if (config.SpecialCargo.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.SpecialCargo.loot[temp].items.Count; i++)
                        {
                            item = config.SpecialCargo.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.SpecialCargo.loot[temp].cashenabled)
                        cash = config.SpecialCargo.loot[temp].cash;
                    break;
                case "FoundationDrop":
                    if (config.FoundationDrop.loot[temp].itemenabled)
                    {
                        for (int i = 0; i < config.FoundationDrop.loot[temp].items.Count; i++)
                        {
                            item = config.FoundationDrop.loot[temp].items[i].GetRandom();
                        }
                    }

                    if (config.FoundationDrop.loot[temp].cashenabled)
                        cash = config.FoundationDrop.loot[temp].cash;
                    break;
                default:
                    break;
            }

            if (item != null)
            {
                int amount = Random.Range(item.minrate, item.maxrate);
                var newItem = item.blueprint
                    ? ItemManager.CreateByName("blueprintbase")
                    : ItemManager.CreateByName(item.shortname, amount, item.skinid);

                if (newItem == null)
                {
                    PrintError($"Item {item.shortname} not founbd!");
                    return;
                }

                if (item.blueprint)
                {
                    var bpItemDef = ItemManager.FindItemDefinition(item.shortname);

                    if (bpItemDef == null)
                    {
                        PrintError($"Item {item.shortname} to create a blueprint is not found!");
                        return;
                    }

                    newItem.blueprintTarget = bpItemDef.itemid;
                }

                if (!item.blueprint && item.condition != 0)
                    newItem.condition = newItem.info.condition.max / 100 * newItem.uid;
                if (item.displayname != "")
                    newItem.name = item.displayname;
                if (type == "FoundationDrop")
                {
                    ItemForWinner = newItem;
                    return;
                }
                else
                    player.GiveItem(newItem, BaseEntity.GiveItemReason.PickedUp);
            }

            if (cash != null)
            {
                var plugin = plugins.Find(cash.plugin);
                if (plugin == null)
                {
                    PrintError("ECONOMIC PLUGIN NOT FOUND");
                    return;
                }

                if (cash.plugin == "RustStore")
                {
                    plugin?.Call(cash.function, player.userID, cash.amount, new Action<string>((result) =>
                    {
                        if (result == "SUCCESS")
                        {
                            Interface.Oxide.LogDebug(
                                $"Player {player.displayName} got {cash.amount} on the balance in the store");
                            return;
                        }

                        Interface.Oxide.LogDebug($"The balance has not been changed, error: {result}");
                    }));
                }
                else if (cash.plugin == "GameStoresRUST")
                {
                    var args = cash.function.Split(' ');
                    webrequest.Enqueue(
                        $"http://panel.gamestores.ru/api/?shop_id={args[0]}&secret={args[1]}&server={args[2]}&action=moneys&type=plus&steam_id={player.UserIDString}&amount={cash.amount}",
                        "", (code, response) =>
                        {
                            switch (code)
                            {
                                case 0:
                                {
                                    PrintError("Api does not responded to a request");
                                    break;
                                }
                                case 200:
                                {
                                    PrintToConsole($"{player.displayName} wins {cash.amount} in award.");
                                    break;
                                }
                                case 404:
                                {
                                    PrintError($"Plese check your configuration! [404]");
                                    break;
                                }
                            }
                        }, this, RequestMethod.GET);
                }
                else if (cash.plugin == "Economics")
                    plugin?.Call(cash.function, player.userID, (double) cash.amount);
                else
                    plugin?.Call(cash.function, player.userID, cash.amount);
            }
        }

        double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        void AddToDictionary(BasePlayer player, float amount)
        {
            if (!PlayersTop.ContainsKey(player))
                PlayersTop.Add(player, amount);
            else
                PlayersTop[player] += amount;
        }

        #endregion

        #region Hooks

        object OnPlayerCommand(ConsoleSystem.Arg arg)
        {
            if (arg.Args == null || arg.Player() == null || !arg.HasArgs(0) || cEvent == null ||
                !cEvent.PlayerConnected.ContainsKey(arg.Player().userID)) return null;
            if (config.FoundationDrop.commands.Contains(arg.Args[0].Replace("/", "")))
            {
                SendReply(arg.Player(), "Command is blocked");
                return false;
            }

            return null;
        }

        void OnEntityKill(BaseNetworkable entity)
        {
            if (!hasStarted || entity == null || entity as BaseHelicopter == null ||
                (entity as BaseHelicopter).OwnerID != 999999999) return;
            DestroyEvent(nowEvent);
        }

        void OnPlayerRespawned(BasePlayer player)
        {
            if (player == null || nowEvent != "FoundationDrop" || !hasStarted || player != winner ||
                ItemForWinner == null) return;
            player.GiveItem(ItemForWinner, BaseEntity.GiveItemReason.PickedUp);
            nowEvent = null;
            hasStarted = false;
            ItemForWinner = null;
        }

        void OnPlayerDie(BasePlayer player, HitInfo info)
        {
            if (player == null || player != runner || info == null || info.InitiatorPlayer == null) return;

            CuiHelper.DestroyUi(player, Layer + ".SpecialCargo");
            player.gameObject.GetComponent<SCPlayerMarker>()?.Kill();
            if (info.InitiatorPlayer.IsNpc || info.InitiatorPlayer == player)
            {
                runner = BasePlayer.activePlayerList[Oxide.Core.Random.Range(0, BasePlayer.activePlayerList.Count)];
                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                    UI_Notification(BasePlayer.activePlayerList[i],
                        GetMessage("RUNNER.BYNPC", BasePlayer.activePlayerList[i].UserIDString, runner.displayName));
                timer.Once(config.SpecialCargo.timeNewRunner, () =>
                {
                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".Notification");
                });
            }
            else
            {
                runner = info.InitiatorPlayer;
                UI_Notification(runner,
                    GetMessage("RUNNER.FORRUNNER", runner.UserIDString, end_mission.displayPhrase.english,
                        GetGridString(end_mission.transform.position)));
                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    if (BasePlayer.activePlayerList[i] != runner)
                        UI_Notification(BasePlayer.activePlayerList[i],
                            GetMessage("RUNNER.PLAYER", BasePlayer.activePlayerList[i].UserIDString, player.displayName,
                                runner.displayName));
                }

                timer.Once(config.SpecialCargo.timeNewRunner, () =>
                {
                    for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                        CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".Notification");
                });
            }

            TopUI(runner, nowEvent);
            runner?.gameObject.AddComponent<SCPlayerMarker>().SpawnMarker();
        }

        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (entity == null || player == null || entity as LootContainer == null ||
                LookingLoot.Contains(entity as LootContainer)) return;

            LookingLoot.Add(entity as LootContainer);

            AddToDictionary(player, 1);
        }

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null || info.InitiatorPlayer == null || info.InitiatorPlayer.IsNpc) return;

            switch (nowEvent)
            {
                case "HuntAnimal":
                    if (entity is Chicken)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.chicken);
                    if (entity is Wolf)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.wolf);
                    if (entity is Boar)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.boar);
                    if (entity is Stag)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.deer);
                    if (entity is Bear)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.bear);
                    if (entity is Horse)
                        AddToDictionary(info.InitiatorPlayer, config.HuntAnimal.horse);
                    return;
                case "LookingLoot":
                    if (config.LookingLoot.Barrels.Contains(entity.PrefabName))
                        AddToDictionary(info.InitiatorPlayer, 1);
                    return;
            }
        }

        object OnCollectiblePickup(Item item, BasePlayer player)
        {
            if (item == null || player == null)
                return null;

            AddToDictionary(player, item.amount);
            return null;
        }

        object OnCropGather(PlantEntity plant, Item item, BasePlayer player)
        {
            if (plant == null || item == null || player == null)
                return null;

            AddToDictionary(player, item.amount);
            return null;
        }

        object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null || item == null || player == null)
                return null;

            AddToDictionary(player, item.amount);
            return null;
        }

        object OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (dispenser == null || entity == null || item == null || entity.ToPlayer() == null)
                return null;

            AddToDictionary(entity.ToPlayer(), item.amount);
            return null;
        }

        #endregion

        #region Interface

        void TopUI(BasePlayer player, string Type, string TopName = "", string description = "", string oMin = "",
            string oMax = "", string color = "", List<KeyValuePair<BasePlayer, float>> list = null)
        {
            var container = new CuiElementContainer();
            int position = 35;

            switch (Type)
            {
                case "all":
                    container.Add(new CuiPanel
                    {
                        CursorEnabled = false,
                        RectTransform = {AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = oMin, OffsetMax = oMax},
                        Image = {Color = color}
                    }, "Hud", Layer);
                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -25", OffsetMax = "0 -5"},
                        Text = {Text = $"<b>{TopName}</b>", FontSize = 17, Align = TextAnchor.MiddleCenter}
                    }, Layer);
                    container.Add(new CuiPanel
                        {
                            RectTransform =
                                {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "10 -28", OffsetMax = "-10 -27"},
                            Image = {Color = "1 1 1 1"}
                        }, Layer, Layer + ".Line");

                    container.Add(new CuiLabel
                        {
                            RectTransform =
                                {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "24 0", OffsetMax = "0 0"},
                            Text =
                            {
                                Text = !string.IsNullOrEmpty(description) ? description : "", FontSize = 16,
                                Align = TextAnchor.MiddleLeft
                            }
                        }, Layer, Layer + ".Text");

                    CuiHelper.DestroyUi(player, Layer);
                    break;
                case "refresh":
                    CuiHelper.DestroyUi(player, Layer + ".Timer");
                    container.Add(new CuiLabel
                        {
                            RectTransform =
                                {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "0 0", OffsetMax = "0 20"},
                            Text =
                            {
                                Text = GetMessage("EVENT.Timer", player.UserIDString,
                                    string.Format("{0:0}", time - GrabCurrentTime())),
                                FontSize = 12, Align = TextAnchor.MiddleCenter
                            }
                        }, Layer, Layer + ".Timer");
                    container.Add(new CuiPanel
                        {
                            RectTransform =
                                {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "-10 1"},
                            Image = {Color = "1 1 1 1"}
                        }, Layer + ".Timer", Layer + ".Timer.Line");

                    if (list != null)
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            var check = list[i];

                            CuiHelper.DestroyUi(player, Layer + $".TopLabel.{i}");

                            container.Add(new CuiPanel
                                {
                                    RectTransform =
                                    {
                                        AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = $"20 -{position + 20}",
                                        OffsetMax = $"-20 -{position}"
                                    },
                                    Image = {Color = "0 0 0 0"}
                                }, Layer, Layer + $".TopLabel.{i}");

                            container.Add(new CuiLabel
                                {
                                    RectTransform =
                                        {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "24 0", OffsetMax = "0 0"},
                                    Text =
                                    {
                                        Text = $"<b>{check.Key.displayName}</b>", FontSize = 16,
                                        Align = TextAnchor.MiddleLeft
                                    }
                                }, Layer + $".TopLabel.{i}", Layer + $".TopLabel.{i}.Text");

                            container.Add(new CuiElement
                            {
                                Name = Layer + $".TopLabel.{i}.Avatar",
                                Parent = Layer + $".TopLabel.{i}",
                                Components =
                                {
                                    new CuiRawImageComponent
                                        {Png = (string) ImageLibrary.Call("GetImage", check.Key.UserIDString)},
                                    new CuiRectTransformComponent
                                        {AnchorMin = "0 0", AnchorMax = "0 1", OffsetMax = "20 0"}
                                }
                            });
                            container.Add(new CuiLabel
                                {
                                    RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                                    Text =
                                    {
                                        Text = nowEvent == "KingMountain" ? $"{check.Value.ToString("0.0")} m" :
                                            nowEvent == "CollectionResources" ? $"{check.Value} pcs" : $"{check.Value}",
                                        FontSize = 16, Align = TextAnchor.MiddleRight
                                    }
                                }, Layer + $".TopLabel.{i}", Layer + $".TopLabel.{i}.Height");
                            position += 30;
                        }
                    }

                    break;
                case "FoundationDrop_Timer":
                    CuiHelper.DestroyUi(player, Layer + ".Timer");
                    container.Add(new CuiLabel
                        {
                            RectTransform =
                                {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "0 0", OffsetMax = "0 20"},
                            Text =
                            {
                                Text = GetMessage("FOUNDROP.WaitTime", player.UserIDString,
                                    string.Format("{0:0}", time - GrabCurrentTime())),
                                FontSize = 12, Align = TextAnchor.MiddleCenter
                            }
                        }, Layer, Layer + ".Timer");
                    container.Add(new CuiPanel
                        {
                            RectTransform =
                                {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "-10 1"},
                            Image = {Color = "1 1 1 1"}
                        }, Layer + ".Timer", Layer + ".Timer.Line");
                    container.Add(new CuiPanel
                        {
                            RectTransform =
                                {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "-10 1"},
                            Image = {Color = "1 1 1 1"}
                        }, Layer + ".Timer", Layer + ".Timer.Line");
                    break;
                case "FoundationDrop.Upd":
                    CuiHelper.DestroyUi(player, Layer + ".Text");
                    container.Add(new CuiLabel
                        {
                            RectTransform =
                                {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "-10 -40"},
                            Text =
                            {
                                Text = GetMessage("FOUNDROP.BlockAndPlayers", player.UserIDString,
                                    cEvent.BlockList.SelectMany(p => p).Count().ToString(),
                                    cEvent.PlayerConnected.Count().ToString()),
                                FontSize = 18, Align = TextAnchor.UpperLeft
                            }
                        }, Layer, Layer + ".Text");
                    break;
                case "SpecialCargo":
                    CuiHelper.DestroyUi(player, Layer + ".SpecialCargo");
                    container.Add(new CuiPanel
                        {
                            CursorEnabled = false,
                            RectTransform =
                                {AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-225 -45", OffsetMax = "-5 -5"},
                            Image = {Color = "0.024 0.016 0.17 0.7"}
                        }, "Hud", Layer + ".SpecialCargo");
                    container.Add(new CuiLabel
                        {
                            RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                            Text =
                            {
                                Text = GetMessage("SpecialCargo.Purpose", player.UserIDString,
                                    end_mission.displayPhrase.english, GetGridString(end_mission.transform.position)),
                                FontSize = 15, Align = TextAnchor.MiddleCenter
                            }
                        }, Layer + ".SpecialCargo");
                    break;
            }

            CuiHelper.AddUi(player, container);
        }

        private void UI_Notification(BasePlayer player, string message, string Name = ".Notification",
            string color = "0.98 0.37 0.41 0.69")
        {
            CuiHelper.DestroyUi(player, Layer + Name);
            CuiHelper.AddUi(player, new CuiElementContainer
            {
                {
                    new CuiButton
                    {
                        RectTransform =
                            {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -100", OffsetMax = "0 -50"},
                        Button = {Color = color},
                        Text =
                        {
                            FadeIn = 1f, Color = "1 1 1 1", FontSize = 18, Align = TextAnchor.MiddleCenter,
                            Text = $"{message}"
                        }
                    },
                    "Overlay",
                    Layer + Name
                }
            });
        }

        void Help_UI(BasePlayer player, int page)
        {
            var container = new CuiElementContainer();
            if (config.EnabledEvents.Count <= page || page < 0)
                page = 0;
            var list = config.EnabledEvents[page];
            container.Add(new CuiPanel
                {
                    CursorEnabled = true,
                    RectTransform =
                        {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-450 -255", OffsetMax = "450 255"},
                    Image = {Color = "0.024 0.017 0.17 0.76"}
                }, "Overlay", Layer + ".Help");
            container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "10 10", AnchorMax = "-10 -10"},
                    Text = {Text = ""},
                    Button = {Color = "0 0 0 0", Close = Layer + ".Help"}
                }, Layer + ".Help");
            container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "40 10", OffsetMax = "120 35"},
                    Button = {Color = "0 0 0 0", Command = $"event page {page - 1}"},
                    Text =
                    {
                        Text = GetMessage("UI.Back", player.UserIDString), FontSize = 20, Align = TextAnchor.LowerLeft,
                        Font = "robotocondensed-bold.ttf"
                    }
                }, Layer + ".Help", Layer + ".Help.Pages.Back");
            container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-120 10", OffsetMax = "-40 35"},
                    Button = {Color = "0 0 0 0", Command = $"event page {page + 1}"},
                    Text =
                    {
                        Text = GetMessage("UI.Next", player.UserIDString), FontSize = 20, Align = TextAnchor.LowerRight,
                        Font = "robotocondensed-bold.ttf"
                    }
                }, Layer + ".Help", Layer + ".Help.Pages.Next");
            container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "40 -65", OffsetMax = "-40 0"},
                    Text =
                    {
                        Text = GetMessage("UI.Name", player.UserIDString), FontSize = 38,
                        Align = TextAnchor.MiddleCenter
                    }
                }, Layer + ".Help", Layer + ".Help.Logo");
            container.Add(new CuiPanel
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMax = "0 1"},
                    Image = {Color = "1 1 1 1"}
                }, Layer + ".Help.Logo", Layer + ".Help.Logo.Line");
            container.Add(new CuiElement
            {
                Name = Layer + ".Help.Logo.Image",
                Parent = Layer + ".Help.Logo",
                Components =
                {
                    new CuiImageComponent {Png = (string) ImageLibrary.Call("GetImage", "ME_Logo_image")},
                    new CuiRectTransformComponent
                        {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-142 -26", OffsetMax = "-90 26"}
                }
            });
            container.Add(new CuiElement
            {
                Name = Layer + ".Help.Event",
                Parent = Layer + ".Help",
                Components =
                {
                    new CuiImageComponent {Png = (string) ImageLibrary.Call("GetImage", "ME_Background_image")},
                    new CuiRectTransformComponent
                        {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-328 -110", OffsetMax = "-90 140"}
                }
            });
            container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 -186"},
                    Text =
                    {
                        Text = GetMessage("UI." + list, player.UserIDString), Color = "0 0 0 1", FontSize = 26,
                        Align = TextAnchor.MiddleCenter
                    }
                }, Layer + ".Help.Event", Layer + ".Help.Event.Name");
            container.Add(new CuiElement
            {
                Name = Layer + ".Help.Event.Image",
                Parent = Layer + ".Help.Event",
                Components =
                {
                    new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", list)},
                    new CuiRectTransformComponent
                        {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "13 63", OffsetMax = "-13 -15"}
                }
            });
            container.Add(new CuiLabel
                {
                    RectTransform =
                        {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-45 -200", OffsetMax = "370 170"},
                    Text =
                    {
                        Text = GetMessage("UI.Description." + list, player.UserIDString), FontSize = 22,
                        Align = TextAnchor.UpperLeft
                    }
                }, Layer + ".Help", Layer + ".Help.Logo");
            if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, config.perm_admin))
            {
                container.Add(new CuiButton
                    {
                        RectTransform =
                            {AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-50 10", OffsetMax = "50 35"},
                        Button = {Color = "0 0 0 0", Command = "event start"},
                        Text =
                        {
                            Text = GetMessage("UI.Random", player.UserIDString), FontSize = 20,
                            Align = TextAnchor.LowerCenter, Color = "0.48 0.41 0.9 1", Font = "robotocondensed-bold.ttf"
                        }
                    }, Layer + ".Help", Layer + ".Help.Cmd.Random");
                container.Add(new CuiButton
                    {
                        RectTransform =
                            {AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-170 10", OffsetMax = "-60 35"},
                        Button = {Color = "0 0 0 0", Command = "event cancel"},
                        Text =
                        {
                            Text = GetMessage("UI.Cancel", player.UserIDString), FontSize = 16,
                            Align = TextAnchor.LowerCenter, Color = "1 0.01 0.24 1", Font = "robotocondensed-bold.ttf"
                        }
                    }, Layer + ".Help", Layer + ".Help.Cmd.Cancel");
                container.Add(new CuiButton
                    {
                        RectTransform =
                            {AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "60 10", OffsetMax = "170 35"},
                        Button = {Color = "0 0 0 0", Command = $"event start {list}"},
                        Text =
                        {
                            Text = GetMessage("UI.Start", player.UserIDString), FontSize = 16,
                            Align = TextAnchor.LowerCenter, Color = "0 0.6 0 1", Font = "robotocondensed-bold.ttf"
                        }
                    }, Layer + ".Help", Layer + ".Help.Cmd.Start");
            }

            CuiHelper.DestroyUi(player, Layer + ".Help");
            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Commands

        [ChatCommand("event")]
        void cmdEvent(BasePlayer player, string command, string[] args)
        {
            if (player == null) return;
            if (args.Length == 0)
            {
                Help_UI(player, 0);
                return;
            }

            switch (args[0].ToLower())
            {
                case "start":
                {
                    if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, config.perm_admin))
                    {
                        if (hasStarted)
                        {
                            SendReply(player, GetMessage("EVENT.ErrorStarted", player.UserIDString));
                            return;
                        }
                        else if (args.Length >= 2 && !config.EnabledEvents.Contains(args[1]))
                        {
                            SendReply(player, GetMessage("EVENT.Error", player.UserIDString));
                            return;
                        }

                        SendReply(player, GetMessage("EVENT.Start", player.UserIDString));

                        if (args.Length >= 2)
                            StartEvent(args[1], player);
                        else
                            StartEvent(config.EnabledEvents.GetRandom(), player);
                    }

                    return;
                }
                case "cancel":
                {
                    if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, config.perm_admin))
                    {
                        if (!hasStarted)
                        {
                            SendReply(player, GetMessage("EVENT.NotStart", player.UserIDString));
                            return;
                        }

                        if (hasStarted)
                        {
                            SendReply(player, GetMessage("EVENT.Cancel", player.UserIDString));
                            DestroyEvent(nowEvent);
                            return;
                        }
                    }

                    return;
                }
                case "join":
                {
                    if (!hasStarted)
                    {
                        SendReply(player, GetMessage("EVENT.NotStart", player.UserIDString));
                        return;
                    }

                    if (nowEvent != "FoundationDrop")
                    {
                        SendReply(player, GetMessage("EVENT.NotFD", player.UserIDString));
                        return;
                    }

                    cEvent?.JoinEvent(player);
                }
                    return;
                default:
                    break;
            }
        }

        [ConsoleCommand("event")]
        private void CmdConsole(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            if (player == null) return;
            if (!args.HasArgs(1))
            {
                player.SendConsoleCommand("chat.say /event");
                return;
            }

            switch (args.Args[0].ToLower())
            {
                case "page":
                {
                    int page = 0;
                    if (!args.HasArgs(2) || !int.TryParse(args.Args[1], out page)) return;
                    Help_UI(player, page);
                }
                    break;
                case "start":
                {
                    if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, config.perm_admin))
                    {
                        if (hasStarted)
                        {
                            SendReply(player, GetMessage("EVENT.ErrorStarted", player.UserIDString));
                            return;
                        }
                        else if (!args.HasArgs(2))
                        {
                            StartEvent(config.EnabledEvents.GetRandom(), player);
                            return;
                        }
                        else if (args.Args.Length == 2)
                        {
                            if (!config.EnabledEvents.Contains(args.Args[1]))
                            {
                                SendReply(player, GetMessage("EVENT.Error", player.UserIDString));
                                return;
                            }

                            StartEvent(args.Args[1], player);
                        }

                        SendReply(player, GetMessage("EVENT.Start", player.UserIDString));
                    }

                    break;
                }
                case "cancel":
                {
                    if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, config.perm_admin))
                    {
                        if (!hasStarted)
                        {
                            SendReply(player, GetMessage("EVENT.NotStart", player.UserIDString));
                            return;
                        }

                        if (hasStarted)
                        {
                            DestroyEvent(nowEvent);
                            return;
                        }
                    }

                    break;
                }
            }

            return;
        }

        #endregion

        #region Localization

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"EVENT.END", "Event {0} completed.\nWon {1}."},
                {"EVENT.END.MULTI", "Event {0} is over.\nWon or {1}."},
                {"EVENT.YOUWINNER", "You are the winner!\nCongratulations!"},
                {"EVENT.ErrorStarted", "Event is already running"},
                {"EVENT.Error", "Event is forbidden to launch!!! Check if the entered query is correct"},
                {"EVENT.Start", "You have launched the event"},
                {"EVENT.NotStart", "No event running"},
                {"EVENT.Cancel", "You canceled the event"},
                {"EVENT.NotFD", "You are wrong with the event"},
                {"EVENT.Timer", "LEFT {0}"},
                {"WINNER.NOTFOUND", "WINNER NOT FOUND"},
                {"KingMountain", "KING OF THE HILL"},
                {"CollectionResources", "COLLECTION OF RESOURCES"},
                {"HuntAnimal", "ANIMAL HUNT"},
                {"HelicopterPet", "PET Helicopter"},
                {"LookingLoot", "SEARCHING FOR LOOT"},
                {"SpecialCargo", "SPECIAL CARGO"},
                {"FoundationDrop", "FALLING FOUNDATIONS"},
                {
                    "GET.RUNNER",
                    "Player {0} picked up the special cargo.\nkill {0} to pick up the loot! The player is marked on your map."
                },
                {"RUNNER.BYNPC", "The running player was killed by NPC.\nNew runner is {0}"},
                {"RUNNER.PLAYER", "The running player {0} was killed\n New runner is {1}"},
                {"RUNNER.FORRUNNER", "You have received the special cargo! Carry it to the goal {0} ({1})"},
                {
                    "FOUNDROP.JOIN",
                    "A field of 10x10 will spawn and will gradually collapse. The player who stays on top for the longest time wins.\n\nPlease write\n/event join\n<b><color=red>To take part</color></b>"
                },
                {"FOUNDROP.WaitTime", "<b>BEFORE BEGINNING EVENT: {0}</b>"},
                {"FOUNDROP.BlockAndPlayers", "<b>Blocks on the field: {0}\nPlayers on the field: {1} </b>"},
                {
                    "FOUNDROP.Started",
                    "<size=16>The event has already begun, <color=#538fef>you did not have time</color>!</size>"
                },
                {"FOUNDROP.Connected", "<size=16>You are already a participant of the event!</size>"},
                {
                    "FOUNDROP.Naked",
                    "<size=16>Clear inventory! The event can be reached only <color=#FF9494><b>COMPLETELY NAKED</b></color></size>"
                },
                {"UI.Random", "<b>RANDOM</b>"},
                {"UI.Cancel", "<b>CANCEL</b>"},
                {"UI.Start", "<b>START</b>"},
                {"UI.Back", "<b>BACK</b>"},
                {"UI.Next", "<b>NEXT</b>"},
                {"UI.Name", "<b>EVENTS</b>"},
                {"UI.KingMountain", "<b>KING OF\nTHE HILL</b>"},
                {"UI.CollectionResources", "<b>COLLECTION\nOF RESOURCES</b>"},
                {"UI.HuntAnimal", "<b>ANIMAL\nHUNTING</b>"},
                {"UI.HelicopterPet", "<b>PET Helicopter</b>"},
                {"UI.LookingLoot", "<b>SEARCHING\nFOR LOOT</b>"},
                {"UI.SpecialCargo", "<b>SPECIAL CARGO</b>"},
                {"UI.FoundationDrop", "<b>FALLING\nFOUNDATIONS</b>"},
                {
                    "UI.Description.KingMountain",
                    "<b>Show us who is the King of the Hill on the server. Climb to the highest point on the map (mountains, monuments, buildings) and stay on it until the end. You can build, but you´re not allowed to be within range of your Tool Cupboard.\nTime: 5 min\nAward: random item </b>"
                },
                {
                    "UI.Description.CollectionResources",
                    "<b>Your task is to collect the most resources in given time.\nPlayers points are the total number of resources collected.\n\nTime: 5 min\nAward: random item </b>"
                },
                {
                    "UI.Description.HuntAnimal",
                    "<b>In this event you have to kill the most animals. Animals grant different amounts of points.\n1 point for a chicken, for a wolf/boar/deer/horse 4 points, for a bear 10 points.\n\nTime: 5 min\nAward: random item </b>"
                },
                {
                    "UI.Description.HelicopterPet",
                    "<b>A patrol helicopter appears in the center of the map. You must attract his attention and forcing it to shoot at you.\nEvery second the helicopter is fighting with you, you get one point. (+1 optional, if helicopter is sending missiles at you)\nThe helicopter can simultaneously fight two players. In this case, both players will get points.\n\nTime: 5 min\nAward: random item </b>"
                },
                {
                    "UI.Description.LookingLoot",
                    "<b>In this event, you need to loot the most.\neach crate/barrel can only be looted by one player.\nYou do not need to pick up loot, just open boxes or break barrels.\n\nTime: 5 min\nAward: random item </b>"
                },
                {
                    "UI.Description.SpecialCargo",
                    "<b>A airdrop with a special cargo will be dropped on the map. The cargo needs to be picked up and brought to a target destination.\nSpecial cargo is displayed on the map as a golden airdrop.\nThe person who picked up the cargo is displayed for everyone on the map.\nThe target destination can be seen only by the player who picked up the cargo.\n\nTime: 30 min\nAward: random item </b>"
                },
                {
                    "UI.Description.FoundationDrop",
                    "<b>An fun event in a special arena.\nAll players appear on a 10x10 field of foundations.\nEach 5 seconds, one of the foundations will fall until there is only one foundation left.\nIf there are several players left on the last field, they get a sword and radiation begins.\nThe player who stays alive for the longest time wins.\n\nTime: ~ 10 min. Award: random item</b>"
                },
                {
                    "SpecialCargo.New",
                    "Airdrop with the <color=red>special cargo</color> was dropped over {0}. Pick it up and try to carry it to the target destination.\nThe special cargo is marked on the map as a golden airdrop."
                },
                {
                    "SpecialCargo.CreateRunner",
                    "You picked up a special cargo. Carry it to {0} ({1}).\nBe careful, other players can see you on the map and you will probably be hunted."
                },
                {"SpecialCargo.Purpose", "<b>YOUR GOAL: {0} ({1})</b>"}
            }, this);
        }

        private string GetMessage(string messageKey, string playerID, params object[] args)
        {
            return string.Format(lang.GetMessage(messageKey, this, playerID), args);
        }

        #endregion

        #region Script

        private string GetGridString(Vector3 position)
        {
            Vector2 adjPosition = new Vector2((World.Size / 2) + position.x, (World.Size / 2) - position.z);
            return string.Format($"{NumberToString((int) (adjPosition.x / 150))}{(int) (adjPosition.y / 150)}");
        }

        private string NumberToString(int number)
        {
            bool a = number > 26;
            char c = (char) (65 + (a ? number - 26 : number));
            return a ? "A" + c : c.ToString();
        }

        private void StartSleeping(BasePlayer player)
        {
            if (player.IsSleeping())
                return;
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Sleeping, true);
            if (!BasePlayer.sleepingPlayerList.Contains(player))
                BasePlayer.sleepingPlayerList.Add(player);
            player.CancelInvoke("InventoryUpdate");
            //player.inventory.crafting.CancelAll(true);
            //player.UpdatePlayerCollider(true, false);
        }

        private static void ClearTeleport(BasePlayer player, Vector3 position)
        {
            if (player.net?.connection != null)
                player.ClientRPCPlayer(null, player, "StartLoading");
            instance.StartSleeping(player);
            player.MovePosition(position);
            if (player.net?.connection != null)
                player.ClientRPCPlayer(null, player, "ForcePositionTo", position);
            if (player.net?.connection != null)
                player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.UpdateNetworkGroup();
            //player.UpdatePlayerCollider(true, false);
            player.SendNetworkUpdateImmediate(false);
            if (player.net?.connection == null) return;
            //TODO temporary for potential rust bug
            try
            {
                player.ClearEntityQueue(null);
            }
            catch
            {
            }

            player.SendFullSnapshot();
        }

        private class FoundationDrop
        {
            public double StartTime;
            public bool Started = false;
            public bool Finished = false;
            public bool Given = false;
            public int Received = 0;

            public Timer StartTimer;
            public Timer DestroyTimer;

            public Dictionary<ulong, Vector3> PlayerConnected = new Dictionary<ulong, Vector3>();
            public List<List<BaseEntity>> BlockList = new List<List<BaseEntity>>();

            public void JoinEvent(BasePlayer player)
            {
                if (Started)
                {
                    instance.SendReply(player, instance.GetMessage("FOUNDROP.Started", player.UserIDString));
                    return;
                }
                else
                {
                    if (PlayerConnected.ContainsKey(player.userID))
                    {
                        instance.SendReply(player, instance.GetMessage("FOUNDROP.Connected", player.UserIDString));
                        return;
                    }

                    if (player.inventory.AllItems().Length != 0)
                    {
                        instance.SendReply(player, instance.GetMessage("FOUNDROP.Naked", player.UserIDString));
                        return;
                    }

                    player.inventory.Strip();
                    //player.SendNetworkUpdate();

                    PlayerConnected.Add(player.userID, player.transform.position);
                    ClearTeleport(player, EventPosition + new Vector3(0, 5, 0));
                    player.health = 100;
                    player.metabolism.hydration.value = 250;
                    player.metabolism.calories.value = 500;
                }
            }

            public void LeftEvent(BasePlayer player)
            {
                CuiHelper.DestroyUi(player, Layer);
                player.inventory.Strip();
                player.Die();

                PlayerConnected.Remove(player.userID);
            }

            public void HandlePlayers()
            {
                if (Finished) return;
                if (PlayerConnected.Count == 1)
                {
                    instance.winner = BasePlayer.FindByID(PlayerConnected.Keys.FirstOrDefault());
                    instance.DropItem(instance.winner, instance.nowEvent);
                    instance.DestroyEvent(instance.nowEvent);
                    return;
                }
                else if (PlayerConnected.Count > 1 && BlockList.SelectMany(p => p).Count() == 1)
                {
                    var lastblock = BlockList.SelectMany(p => p).Last();
                    lastblock.gameObject.GetComponent<Downgrader>()?.Kill();
                    if (Given == false)
                        for (int i = 0; i < PlayerConnected.Keys.ToList().Count; i++)
                        {
                            var target = BasePlayer.FindByID(PlayerConnected.Keys.ToList()[i]);
                            target.GiveItem(ItemManager.CreateByName("salvaged.sword"),
                                BaseEntity.GiveItemReason.PickedUp);
                            if (!Given) Given = true;
                        }

                    if (!instance.RadiationZones.ContainsKey(lastblock.GetInstanceID()))
                    {
                        instance.InitializeZone(lastblock.transform.position, config.FoundationDrop.IntensityRadiation,
                            lastblock.GetInstanceID());
                    }
                }

                for (int i = 0; i < PlayerConnected.Count; i++)
                {
                    var check = PlayerConnected.Keys.ToList()[i];
                    var target = BasePlayer.FindByID(check);
                    if (target == null)
                    {
                        PlayerConnected.Remove(check);
                    }
                    else
                    {
                        if (Vector3.Distance(EventPosition, target.transform.position) >
                            (config.FoundationDrop.ArenaSize * 5))
                        {
                            LeftEvent(target);
                        }

                        instance.TopUI(target, "FoundationDrop.Upd");
                    }
                }

                StartTimer = instance.timer.Once(1, HandlePlayers);
            }

            public void StartEvent(int startDelay)
            {
                StartTimer = instance.timer.Once(startDelay, () =>
                {
                    foreach (var check in BasePlayer.activePlayerList)
                    {
                        if (!PlayerConnected.ContainsKey(check.userID))
                            CuiHelper.DestroyUi(check, Layer);
                    }

                    foreach (var plobj in BasePlayer.activePlayerList)
                    {
                        CuiHelper.DestroyUi(plobj, Layer);
                    }

                    for (int i = 0; i < PlayerConnected.Count; i++)
                    {
                        var player = BasePlayer.FindByID(PlayerConnected.Keys.ToList()[i]);
                        instance.TopUI(player, "all", instance.GetMessage(instance.nowEvent, player.UserIDString),
                            oMin: config.FoundationDrop.infoUI.oMin, oMax: config.FoundationDrop.infoUI.oMax,
                            color: config.FoundationDrop.infoUI.color);
                    }

                    List<ulong> removeKeys = new List<ulong>();
                    foreach (var check in PlayerConnected)
                    {
                        BasePlayer target = BasePlayer.FindByID(check.Key);
                        if (target != null)
                            continue;
                        else
                            removeKeys.Add(check.Key);
                    }

                    foreach (var check in removeKeys)
                        PlayerConnected.Remove(check);

                    if (PlayerConnected.Count <= 1)
                    {
                        instance.DestroyEvent(instance.nowEvent);
                        return;
                    }

                    instance.DropFoundation();
                    HandlePlayers();
                });
            }

            public void InitializeEvent(int startDelay)
            {
                Started = false;
                StartTime = instance.GrabCurrentTime() + startDelay;
                ServerMgr.Instance.StartCoroutine(instance.InitializeFoundation(startDelay));
            }

            public void FinishEvent()
            {
                Finished = true;
                Given = false;
                StartTimer?.Destroy();
                DestroyTimer?.Destroy();

                if (instance.RadiationZones.ContainsKey(BlockList.SelectMany(p => p).Last().GetInstanceID()))
                {
                    UnityEngine.Object.Destroy(instance
                        .RadiationZones[BlockList.SelectMany(p => p).Last().GetInstanceID()].zone);
                    instance.RadiationZones.Remove(BlockList.SelectMany(p => p).Last().GetInstanceID());
                }

                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer);
                    CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], Layer + ".FoundationDrop.Play");
                }

                var listPredicted =
                    BasePlayer.activePlayerList.Where(p => cEvent.PlayerConnected.ContainsKey(p.userID));

                foreach (var check in listPredicted)
                    LeftEvent(check);

                foreach (var check in BlockList.SelectMany(p => p))
                    check?.Kill();
            }
        }

        #region Radiation Control

        public class ZoneList
        {
            public RadZones zone;
        }

        private void OnServerRadiation()
        {
            var allobjects = UnityEngine.Object.FindObjectsOfType<TriggerRadiation>();
            for (int i = 0; i < allobjects.Length; i++)
            {
                UnityEngine.Object.Destroy(allobjects[i]);
            }
        }

        private Dictionary<int, ZoneList> RadiationZones = new Dictionary<int, ZoneList>();
        private static readonly int playerLayer = LayerMask.GetMask("Player (Server)");
        private static readonly Collider[] colBuffer = Vis.colBuffer;

        private void InitializeZone(Vector3 Location, float intensity, int ZoneID)
        {
            float radius = 10f;
            if (!ConVar.Server.radiation) ConVar.Server.radiation = true;
            if (config.FoundationDrop.DisableDefaultRadiation)
                OnServerRadiation();
            var newZone = new GameObject().AddComponent<RadZones>();
            newZone.Activate(Location, radius, intensity, ZoneID);
            ZoneList listEntry = new ZoneList
            {
                zone = newZone
            };
            RadiationZones.Add(ZoneID, listEntry);
        }

        public class RadZones : MonoBehaviour
        {
            private int ID;
            private Vector3 Position;
            private float ZoneRadius;
            private float RadiationAmount;
            private List<BasePlayer> InZone;

            private void Awake()
            {
                gameObject.layer = (int) Rust.Layer.Reserved1;
                gameObject.name = "NukeZone";
                var rigidbody = gameObject.AddComponent<Rigidbody>();
                rigidbody.useGravity = false;
                rigidbody.isKinematic = true;
            }

            public void Activate(Vector3 pos, float radius, float amount, int ZoneID)
            {
                ID = ZoneID;
                Position = pos;
                ZoneRadius = radius;
                RadiationAmount = amount;
                gameObject.name = $"Foundation{ID}";
                transform.position = Position;
                transform.rotation = new Quaternion();
                UpdateCollider();
                gameObject.SetActive(true);
                enabled = true;
                var Rads = gameObject.GetComponent<TriggerRadiation>();
                Rads = Rads ?? gameObject.AddComponent<TriggerRadiation>();
                Rads.RadiationAmountOverride = RadiationAmount;
                //Rads.radiationSize = ZoneRadius;
                Rads.interestLayers = playerLayer;
                Rads.enabled = true;
                if (IsInvoking("UpdateTrigger")) CancelInvoke("UpdateTrigger");
                InvokeRepeating("UpdateTrigger", 5f, 5f);
            }

            private void OnDestroy()
            {
                CancelInvoke("UpdateTrigger");
                Destroy(gameObject);
            }

            private void UpdateCollider()
            {
                var sphereCollider = gameObject.GetComponent<SphereCollider>();
                {
                    if (sphereCollider == null)
                    {
                        sphereCollider = gameObject.AddComponent<SphereCollider>();
                        sphereCollider.isTrigger = true;
                    }

                    sphereCollider.radius = ZoneRadius;
                }
            }

            private void UpdateTrigger()
            {
                InZone = new List<BasePlayer>();
                int entities = Physics.OverlapSphereNonAlloc(Position, ZoneRadius, colBuffer, playerLayer);
                for (var i = 0;
                    i < entities;
                    i++)
                {
                    var player = colBuffer[i].GetComponentInParent<BasePlayer>();
                    if (player != null) InZone.Add(player);
                }
            }
        }

        #endregion

        #region Utils

        private IEnumerator InitializeFoundation(int startDelay)
        {
            for (int i = -config.FoundationDrop.ArenaSize / 2; i < config.FoundationDrop.ArenaSize / 2; i++)
            {
                for (int t = -config.FoundationDrop.ArenaSize / 2; t < config.FoundationDrop.ArenaSize / 2; t++)
                {
                    cEvent.BlockList.Add(new List<BaseEntity>());
                    var newFoundation =
                        GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab",
                            EventPosition + new Vector3(i * 3, 4, t * 3)) as BuildingBlock;
                    newFoundation.Spawn();
                    newFoundation.OwnerID = 98596;

                    newFoundation.SetGrade(BuildingGrade.Enum.TopTier);
                    newFoundation.SetHealthToMax();
                    cEvent.BlockList.Last().Add(newFoundation);
                    yield return i;
                }
            }

            cEvent.StartEvent(startDelay);

            for (int g = 0; g < BasePlayer.activePlayerList.Count; g++)
                TopUI(BasePlayer.activePlayerList[g], "all",
                    GetMessage(nowEvent, BasePlayer.activePlayerList[g].UserIDString),
                    description: GetMessage("FOUNDROP.JOIN", BasePlayer.activePlayerList[g].UserIDString),
                    oMin: config.FoundationDrop.ui.oMin, oMax: config.FoundationDrop.ui.oMax,
                    color: config.FoundationDrop.ui.color);

            Main = timer.Repeat(1, (int) (time - GrabCurrentTime()), () =>
            {
                for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    TopUI(BasePlayer.activePlayerList[i], "FoundationDrop_Timer");
                }
            });
        }

        private void DropFoundation()
        {
            if (cEvent.Finished || cEvent.BlockList.SelectMany(p => p).Count() == 1) return;

            var cStack = cEvent.BlockList.GetRandom();
            if (cStack.Count == 0)
            {
                cEvent.BlockList.Remove(cStack);
                DropFoundation();
                return;
            }

            var cBlock = cStack.First();
            if (cBlock == null || cBlock.IsDestroyed)
            {
                cStack.RemoveAt(0);
                DropFoundation();
                return;
            }

            cStack.RemoveAt(0);
            cBlock.gameObject.AddComponent<Downgrader>().Downgrade(cBlock);

            cEvent.DestroyTimer = timer.Once(config.FoundationDrop.DelayDestroy, DropFoundation);
        }

        #endregion

        private class Downgrader : FacepunchBehaviour
        {
            private BuildingGrade.Enum gradeEnum;

            public void Downgrade(BaseEntity entity)
            {
                var block = entity?.GetComponent<BuildingBlock>();
                if (block == null)
                {
                    Destroy(this);
                    return;
                }

                InvokeRepeating(() => Downgrade(block), 0, config.FoundationDrop.DelayDestroy / 5);
            }

            private void Downgrade(BuildingBlock block)
            {
                if (block.grade < gradeEnum)
                {
                    Destroy(this);
                    return;
                }

                if (block.grade == BuildingGrade.Enum.Twigs)
                {
                    block.Kill();
                    Destroy(this);
                    return;
                }

                block.SetGrade(block.grade - 1);
                block.transform.position -= new Vector3(0, 0.5f, 0);
                block.SendNetworkUpdate();
                block.UpdateSkin();
            }

            private void OnDestroy()
            {
                CancelInvoke();
            }

            public void Kill()
            {
                Destroy(this);
            }
        }

        private class HeliPet : FacepunchBehaviour
        {
            private BaseHelicopter helicopter;

            private void Awake()
            {
                helicopter = GetComponent<BaseHelicopter>();
                InvokeRepeating(() => Cheking(helicopter), 1, 1);
            }

            private void Cheking(BaseHelicopter helicopter)
            {
                if (helicopter == null)
                {
                    Destroy(this);
                    return;
                }

                var phi = helicopter.GetComponent<PatrolHelicopterAI>();
                HashSet<BasePlayer> targets = new HashSet<BasePlayer>();
                foreach (var check in phi._targetList)
                {
                    if (check != null)
                        targets.Add(check.ply);
                }

                foreach (var p in targets)
                {
                    if (phi._currentState == PatrolHelicopterAI.aiState.ORBIT)
                        instance.AddToDictionary(p, 1);
                    else if (phi._currentState == PatrolHelicopterAI.aiState.STRAFE)
                        instance.AddToDictionary(p, 2);
                }
            }

            private void OnDestroy() => CancelInvoke();
            public void Kill() => Destroy(this);
        }

        private class SCmarker : FacepunchBehaviour
        {
            private MonumentInfo monument;
            private MapMarker mapMarker;

            private void Awake()
            {
                monument = GetComponent<MonumentInfo>();
            }

            public void spawnMarker()
            {
                mapMarker = GameManager.server.CreateEntity("assets/prefabs/tools/map/cratemarker.prefab",
                    monument.transform.position) as MapMarker;
                mapMarker.name = config.SpecialCargo.MarkerName;
                mapMarker.Spawn();
                mapMarker.enabled = true;
            }

            private void OnDestroy()
            {
                CancelInvoke();
                mapMarker?.Kill();
            }

            public void Kill() => Destroy(this);
        }

        private class SCPlayerMarker : FacepunchBehaviour
        {
            private BasePlayer player;
            private MapMarker mapMarker;

            private void Awake()
            {
                player = GetComponent<BasePlayer>();
            }

            public void SpawnMarker()
            {
                mapMarker = GameManager.server.CreateEntity("assets/prefabs/tools/map/cratemarker.prefab",
                    player.transform.position) as MapMarker;
                mapMarker.name = config.SpecialCargo.MarkerName;
                mapMarker.Spawn();
                mapMarker.enabled = true;
                InvokeRepeating(() => UpdatePostion(), 0.2f, 0.2f);
            }

            public void UpdatePostion()
            {
                if (player == null)
                {
                    Destroy(this);
                    return;
                }

                mapMarker.transform.position = player.transform.position;
                mapMarker.SendNetworkUpdate();
            }

            private void OnDestroy()
            {
                CancelInvoke();
                mapMarker?.Kill();
            }

            public void Kill() => Destroy(this);
        }

        #endregion
    }
}

// --- End of file: MultiEvents.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/HeliCallCraft.cs ---
// --- Original Local Path: HeliCallCraft.cs ---

// HeliCallCraft от DezLife. Куплено на сайте https://darkplugins.ru. Спасибо за покупку!
// В случае любых проблем создавайте тикет в разделе "Техническая поддержка" или пишите напрямую автору.
//Актуальная версия плагина 1.0.4
// Наша группа по разработке плагинов https://vk.com/skyeyeplugins
//
//                      !!! ВАЖНАЯ ИНФОРМАЦИЯ !!!
// Разрешается установка только на СВОИ сервера!!!
// Запрещается публикация, передача (в т.ч. на поглядеть и лучшему другу), (пере)продажа, дарение,
// слив, предача взаймы или аренду, проигрыш в карты. 
// Нарушителю данных правил будет обнулена лицензия и пермпмент бан 
\u006E\u0061\u006D\u0065\u0073\u0070\u0061\u0063\u0065  \u004F\u0078\u0069\u0064\u0065 .\u0050\u006C\u0075\u0067\u0069\u006E\u0073 {
    \u0075\u0073\u0069\u006E\u0067  \u004E\u0065\u0077\u0074\u006F\u006E\u0073\u006F\u0066\u0074 .\u004A\u0073\u006F\u006E ;
    \u0075\u0073\u0069\u006E\u0067  \u004F\u0078\u0069\u0064\u0065 .\u0043\u006F\u0072\u0065 ;
    \u0075\u0073\u0069\u006E\u0067  \u004F\u0078\u0069\u0064\u0065 .\u0043\u006F\u0072\u0065 .\u0050\u006C\u0075\u0067\u0069\u006E\u0073 ;
    \u0075\u0073\u0069\u006E\u0067  \u004F\u0078\u0069\u0064\u0065 .\u0047\u0061\u006D\u0065 .\u0052\u0075\u0073\u0074 .\u0043\u0075\u0069 ;
    \u0075\u0073\u0069\u006E\u0067  \u0053\u0079\u0073\u0074\u0065\u006D ;
    \u0075\u0073\u0069\u006E\u0067  \u0053\u0079\u0073\u0074\u0065\u006D .\u0043\u006F\u006C\u006C\u0065\u0063\u0074\u0069\u006F\u006E\u0073 .\u0047\u0065\u006E\u0065\u0072\u0069\u0063 ;
    \u0075\u0073\u0069\u006E\u0067  \u0053\u0079\u0073\u0074\u0065\u006D .\u0047\u006C\u006F\u0062\u0061\u006C\u0069\u007A\u0061\u0074\u0069\u006F\u006E ;
    \u0075\u0073\u0069\u006E\u0067  \u0053\u0079\u0073\u0074\u0065\u006D .\u004C\u0069\u006E\u0071 ;
    \u0075\u0073\u0069\u006E\u0067  \u0055\u006E\u0069\u0074\u0079\u0045\u006E\u0067\u0069\u006E\u0065 ;

    [\u0049\u006E\u0066\u006F ("HeliCallCraft", "DezLife", "1.0.4")]
    \u0070\u0075\u0062\u006C\u0069\u0063  \u0063\u006C\u0061\u0073\u0073  \u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074  : \u0052\u0075\u0073\u0074\u0050\u006C\u0075\u0067\u0069\u006E     {

        \u0073\u0074\u0061\u0074\u0069\u0063  \u0053\u0079\u0073\u0074\u0065\u006D .\u0043\u006F\u006C\u006C\u0065\u0063\u0074\u0069\u006F\u006E\u0073 .\u0047\u0065\u006E\u0065\u0072\u0069\u0063 .\u004C\u0069\u0073\u0074 <\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0035 > \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0036\u0030  = \u006E\u0065\u0077  \u0053\u0079\u0073\u0074\u0065\u006D .\u0043\u006F\u006C\u006C\u0065\u0063\u0074\u0069\u006F\u006E\u0073 .\u0047\u0065\u006E\u0065\u0072\u0069\u0063 .\u004C\u0069\u0073\u0074 <\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0035 >();

        \u0070\u0072\u0069\u0076\u0061\u0074\u0065  \u0049\u0074\u0065\u006D \u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049 (\u0049\u0074\u0065\u006D \u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C , \u0069\u006E\u0074  \u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0033\u0035 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0032  = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0033\u0038 (\u0074\u0068\u0069\u0073 , \u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C , \u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049 );
            \u0074\u0072\u0079 
            {
                \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0032 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0033\u0036 ();
            }
            \u0063\u0061\u0074\u0063\u0068  (\u0053\u0079\u0073\u0074\u0065\u006D .\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E )
            {
\u0067\u006C\u006F\u0062\u0061\u006C ::\u004F\u0078\u0069\u0064\u0065 .\u0043\u006F\u0072\u0065 .\u0049\u006E\u0074\u0065\u0072\u0066\u0061\u0063\u0065 .\u004F\u0078\u0069\u0064\u0065 .\u004C\u006F\u0067\u0045\u0072\u0072\u006F\u0072 (\u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u004D\u0065\u0073\u0073\u0061\u0067\u0065 + "\n" + \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u0053\u0074\u0061\u0063\u006B\u0054\u0072\u0061\u0063\u0065 );
                \u0074\u0068\u0072\u006F\u0077 ;
            }
            \u0066\u0069\u006E\u0061\u006C\u006C\u0079 
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0033\u0039 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0032 );
            }
        }

        \u0063\u006C\u0061\u0073\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0030 
        {
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0