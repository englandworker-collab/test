0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C ;
\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049 .\u0073\u006B\u0069\u006E = \u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C .\u0056\u0061\u006C\u0075\u0065 .\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049 ;
\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049 .\u0061\u006D\u006F\u0075\u006E\u0074 = \u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049 ;
\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C .\u0061\u006D\u006F\u0075\u006E\u0074 -= \u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049 ;
                    \u0072\u0065\u0074\u0075\u0072\u006E  \u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049 ;
                }

                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0035 ()
            {
\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C = \u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C .\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C .\u0046\u0069\u0072\u0073\u0074\u004F\u0072\u0044\u0065\u0066\u0061\u0075\u006C\u0074 (\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C  => \u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C .\u0056\u0061\u006C\u0075\u0065 .\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049 == \u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C .\u0069\u006E\u0066\u006F .\u0073\u0068\u006F\u0072\u0074\u006E\u0061\u006D\u0065 );
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0049\u0074\u0065\u006D \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0033\u0036 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = ~35742847;
                \u0053\u0054\u0041\u0052\u0054 :
                \u0073\u0077\u0069\u0074\u0063\u0068  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 )
                {
                    \u0063\u0061\u0073\u0065  -14020912 << 2:
                        \u0072\u0065\u0074\u0075\u0072\u006E  (\u0049\u0074\u0065\u006D )\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 ;
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = 37183584;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -2287320 << 4:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0032 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -66672864;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -4467856 << 3:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0035 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -55349184;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -35823936 >> 1:
                        \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 \u0069\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0030 )
                            \u0072\u0065\u0074\u0075\u0072\u006E  \u0064\u0065\u0066\u0061\u0075\u006C\u0074 (\u0049\u0074\u0065\u006D );
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -48683648;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -266691456 >> 2:
                        \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 \u0069\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0030 )
                            \u0072\u0065\u0074\u0075\u0072\u006E  \u0064\u0065\u0066\u0061\u0075\u006C\u0074 (\u0049\u0074\u0065\u006D );
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -56083648;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  148734336 >> 2:
                        \u0062\u0072\u0065\u0061\u006B ;
                    \u0063\u0061\u0073\u0065  -778938368 >> 4:
                        \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 != \u006E\u0075\u006C\u006C )
                            \u0072\u0065\u0074\u0075\u0072\u006E  (\u0049\u0074\u0065\u006D )\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 ;
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -36597120;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -221396736 >> 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0033 = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0034 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 = -17911968;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                }

                \u0074\u0068\u0072\u006F\u0077  \u006E\u0065\u0077  \u0053\u0079\u0073\u0074\u0065\u006D .\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E ();
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0036 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0037 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0038 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0030\u0039 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0036\u0031\u0030 ;
        }
        \u0073\u0074\u0061\u0074\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0034 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0032 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0031 .\u0041\u0064\u0064 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0032 );
        }

        \u0070\u0075\u0062\u006C\u0069\u0063  \u0063\u006C\u0061\u0073\u0073  \u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049 
        {
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0044\u0069\u0063\u0074\u0069\u006F\u006E\u0061\u0072\u0079 <\u0069\u006E\u0074 , \u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C > \u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C  = \u006E\u0065\u0077  \u0044\u0069\u0063\u0074\u0069\u006F\u006E\u0061\u0072\u0079 <\u0069\u006E\u0074 , \u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C >{[0] = \u006E\u0065\u0077  \u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C {\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C = "Рация", \u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049 = "Рация -  с помощью нее вы сможете вызвать вертолет! Только будте готовы его сбить. Иначе он улетит (", \u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049 = "battery.small", \u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C = "✔", \u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C = 10, \u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049 = 1700982057, \u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049 = "Heli", \u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C = \u006E\u0065\u0077  \u0044\u0069\u0063\u0074\u0069\u006F\u006E\u0061\u0072\u0079 <\u0073\u0074\u0072\u0069\u006E\u0067 , \u0069\u006E\u0074 >{["metal.fragments"] = 1000, ["metal.refined"] = 130, ["wiretool"] = 1, ["techparts"] = 5, ["targeting.computer"] = 1, }, \u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C = \u006E\u0065\u0077  \u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C .\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049 {\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C = "Heli Call", \u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049 = "#1399f2", \u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049 = 76561198854646370, }}};
        }
        \u0070\u0072\u0069\u0076\u0061\u0074\u0065  \u0076\u006F\u0069\u0064  \u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C (\u0042\u0061\u0073\u0065\u0050\u006C\u0061\u0079\u0065\u0072 \u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0033  = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0033 (\u0074\u0068\u0069\u0073 , \u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C );
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0033 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0031 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0034 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0033 );
        }

        \u0073\u0074\u0061\u0074\u0069\u0063  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0035 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0038 (\u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0037\u0030 , \u0042\u0061\u0073\u0065\u0050\u006C\u0061\u0079\u0065\u0072 \u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0035 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 ;
            \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0034 .\u0043\u006F\u0075\u006E\u0074 > 0)
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0034 [0];
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0034 .\u0052\u0065\u006D\u006F\u0076\u0065\u0041\u0074 (0);
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0037 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0037\u0030 , \u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049 );
                \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 ;
            }
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 = \u006E\u0065\u0077  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0035 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0037 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0037\u0030 , \u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049 );
            \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0036 ;
        }

        \u0070\u0072\u0069\u0076\u0061\u0074\u0065  \u0062\u006F\u006F\u006C  \u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049 (\u0042\u0061\u0073\u0065\u0050\u006C\u0061\u0079\u0065\u0072 \u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0035 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0036  = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0038 (\u0074\u0068\u0069\u0073 , \u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049 );
            \u0074\u0072\u0079 
            {
                \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0036 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0036 ();
            }
            \u0063\u0061\u0074\u0063\u0068  (\u0053\u0079\u0073\u0074\u0065\u006D .\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E )
            {
\u0067\u006C\u006F\u0062\u0061\u006C ::\u004F\u0078\u0069\u0064\u0065 .\u0043\u006F\u0072\u0065 .\u0049\u006E\u0074\u0065\u0072\u0066\u0061\u0063\u0065 .\u004F\u0078\u0069\u0064\u0065 .\u004C\u006F\u0067\u0045\u0072\u0072\u006F\u0072 (\u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u004D\u0065\u0073\u0073\u0061\u0067\u0065 + "\n" + \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u0053\u0074\u0061\u0063\u006B\u0054\u0072\u0061\u0063\u0065 );
                \u0074\u0068\u0072\u006F\u0077 ;
            }
            \u0066\u0069\u006E\u0061\u006C\u006C\u0079 
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0035\u0039 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0036 );
            }
        }

        \u0070\u0075\u0062\u006C\u0069\u0063  \u0063\u006C\u0061\u0073\u0073  \u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C 
        {
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Отображаемое имя", \u004F\u0072\u0064\u0065\u0072 = 0)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Описания в меню крафта", \u004F\u0072\u0064\u0065\u0072 = 1)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049 ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Этот парамтр менять не нужно", \u004F\u0072\u0064\u0065\u0072 = 2)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049 ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Кд на вызов вертолета", \u004F\u0072\u0064\u0065\u0072 = 3)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Скин ID рации", \u004F\u0072\u0064\u0065\u0072 = 4)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0075\u006C\u006F\u006E\u0067  \u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049 ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Команда для открытия меню", \u004F\u0072\u0064\u0065\u0072 = 5)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049 ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Символ показывающий,что у игрока достаточно предметов на крафт / Symbol showing that the player has enough items to craft", \u004F\u0072\u0064\u0065\u0072 = 6)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C ;
            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Что нужно для крафта (Макс 5 предметов)", \u004F\u0072\u0064\u0065\u0072 = 7)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0044\u0069\u0063\u0074\u0069\u006F\u006E\u0061\u0072\u0079 <\u0073\u0074\u0072\u0069\u006E\u0067 , \u0069\u006E\u0074 > \u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C  = \u006E\u0065\u0077  \u0044\u0069\u0063\u0074\u0069\u006F\u006E\u0061\u0072\u0079 <\u0073\u0074\u0072\u0069\u006E\u0067 , \u0069\u006E\u0074 >();
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0063\u006C\u0061\u0073\u0073  \u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049 
            {
                [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Команда для открытия меню", \u004F\u0072\u0064\u0065\u0072 = 0)]
                \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C ;
                [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Цвет префикса", \u004F\u0072\u0064\u0065\u0072 = 1)]
                \u0070\u0075\u0062\u006C\u0069\u0063  \u0073\u0074\u0072\u0069\u006E\u0067  \u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049 ;
                [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("SteamId для аватарки", \u004F\u0072\u0064\u0065\u0072 = 2)]
                \u0070\u0075\u0062\u006C\u0069\u0063  \u0075\u006C\u006F\u006E\u0067  \u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049 ;
            }

            [\u004A\u0073\u006F\u006E\u0050\u0072\u006F\u0070\u0065\u0072\u0074\u0079 ("Настройки префикса", \u004F\u0072\u0064\u0065\u0072 = 8)]
            \u0070\u0075\u0062\u006C\u0069\u0063  \u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049 \u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C  = \u006E\u0065\u0077  \u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049 ();
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0049\u0074\u0065\u006D \u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C (\u0069\u006E\u0074  \u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049 )
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0030\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0035  = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0030\u0033 (\u0074\u0068\u0069\u0073 , \u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049 );
                \u0074\u0072\u0079 
                {
                    \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0035 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0030\u0031 ();
                }
                \u0063\u0061\u0074\u0063\u0068  (\u0053\u0079\u0073\u0074\u0065\u006D .\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E )
                {
\u0067\u006C\u006F\u0062\u0061\u006C ::\u004F\u0078\u0069\u0064\u0065 .\u0043\u006F\u0072\u0065 .\u0049\u006E\u0074\u0065\u0072\u0066\u0061\u0063\u0065 .\u004F\u0078\u0069\u0064\u0065 .\u004C\u006F\u0067\u0045\u0072\u0072\u006F\u0072 (\u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u004D\u0065\u0073\u0073\u0061\u0067\u0065 + "\n" + \u005F\u0065\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E .\u0053\u0074\u0061\u0063\u006B\u0054\u0072\u0061\u0063\u0065 );
                    \u0074\u0068\u0072\u006F\u0077 ;
                }
                \u0066\u0069\u006E\u0061\u006C\u006C\u0079 
                {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0030\u0034 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0035 );
                }
            }
        }

        \u0070\u0072\u0069\u0076\u0061\u0074\u0065  \u0076\u006F\u0069\u0064  \u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C ()
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0035 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0030  = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0038 (\u0074\u0068\u0069\u0073 );
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0030 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0036 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0039 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0039\u0030 );
        }

        \u0063\u006C\u0061\u0073\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0039\u0035 
        {
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0035\u0038 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0039\u0037 (\u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0035\u0038 )
            {
                \u0074\u0068\u0069\u0073 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0035\u0038 = (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0035\u0038 );
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0035 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0035\u0038 .\u0043\u006F\u006E\u0066\u0069\u0067 .\u0057\u0072\u0069\u0074\u0065\u004F\u0062\u006A\u0065\u0063\u0074 (\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C );
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0039\u0036 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0036 = ~-56925761;
                \u0053\u0054\u0041\u0052\u0054 :
                \u0073\u0077\u0069\u0074\u0063\u0068  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0036 )
                {
                    \u0063\u0061\u0073\u0065  227703040 >> 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0035 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0036 = 43002016;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  86004032 >> 1:
                        \u0062\u0072\u0065\u0061\u006B ;
                }
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0036 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0037 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0031\u0038 ;
        }
        \u0073\u0074\u0061\u0074\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0034 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0034\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0034\u0036 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0034\u0035 .\u0041\u0064\u0064 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0034\u0036 );
        }

        \u0073\u0074\u0061\u0074\u0069\u0063  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0033 (\u0073\u0074\u0072\u0069\u006E\u0067  \u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 ;
            \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0037 .\u0043\u006F\u0075\u006E\u0074 > 0)
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 = \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0037 [0];
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0037 .\u0052\u0065\u006D\u006F\u0076\u0065\u0041\u0074 (0);
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0032 (\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C );
                \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 ;
            }
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 = \u006E\u0065\u0077  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0030 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0036\u0032 (\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C );
            \u0072\u0065\u0074\u0075\u0072\u006E  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0035\u0039 ;
        }

        \u0063\u006C\u0061\u0073\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0035 
        {
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0037 (\u0048\u0065\u006C\u0069\u0043\u0061\u006C\u006C\u0043\u0072\u0061\u0066\u0074 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 )
            {
                \u0074\u0068\u0069\u0073 .\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 = (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 );
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0034 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"-----------------------------------");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0035 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"          Version = {\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0056\u0065\u0072\u0073\u0069\u006F\u006E }      ");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0036 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"          Author = DezLife         ");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0037 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"         vk.com/skyeyeplugins      ");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0038 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"            HeliCallCraft          ");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0039 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ($"-----------------------------------");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0030 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0063\u006D\u0064 .\u0041\u0064\u0064\u0043\u0068\u0061\u0074\u0043\u006F\u006D\u006D\u0061\u006E\u0064 (\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C .\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C [0].\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049 , \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 , \u006E\u0061\u006D\u0065\u006F\u0066 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u006C ));
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0031 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u0049\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C\u0049\u0049\u0049\u006C\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u006C\u006C\u0049\u006C\u0049\u006C\u006C\u0049\u0049\u0049\u006C\u0049\u006C\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u006C\u006C\u006C\u0049\u0049\u006C\u0049\u0049\u0049\u0049\u006C ("https://i.imgur.com/lqdLqOW.png", "HeliCall");
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0032 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0070\u0065\u0072\u006D\u0069\u0073\u0073\u0069\u006F\u006E .\u0052\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0050\u0065\u0072\u006D\u0069\u0073\u0073\u0069\u006F\u006E ("helicallcraft.craft", \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 );
                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u006F\u0062\u006A\u0065\u0063\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0033 ()
            {
                \u0069\u0066  (!\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0049\u006D\u0061\u0067\u0065\u004C\u0069\u0062\u0072\u0061\u0072\u0079 )
                {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0033\u0036\u0034 .\u0050\u0072\u0069\u006E\u0074\u0045\u0072\u0072\u006F\u0072 ("Не найден ImageLibrary, плагин не будет работать!");
                    \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0065\u0077  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0030 ();
                }

                \u0072\u0065\u0074\u0075\u0072\u006E  \u006E\u0075\u006C\u006C ;
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0032\u0036 ()
            {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = ~18959423;
                \u0053\u0054\u0041\u0052\u0054 :
                \u0073\u0077\u0069\u0074\u0063\u0068  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 )
                {
                    \u0063\u0061\u0073\u0065  -119865280 >> 1:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0038 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -4597664;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -198604544 >> 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0039 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -59932640;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -489992192 >> 4:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0034 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = 275712;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  68928 << 2:
                        \u0062\u0072\u0065\u0061\u006B ;
                    \u0063\u0061\u0073\u0065  -3575450 << 4:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0036 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -32553600;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -181556992 >> 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0030 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -49651136;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -130214400 >> 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0035 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -30624512;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  536804 << 3:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0031 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -45389248;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  21262320 << 1:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0032 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = 4294432;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -2369928 << 3:
                        \u0069\u0066  (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0033 () \u0069\u0073  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0038\u0030 )
                            \u0072\u0065\u0074\u0075\u0072\u006E ;
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = 42524640;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                    \u0063\u0061\u0073\u0065  -1149416 << 2:
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0037\u0037 ();
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 = -57207200;
                        \u0067\u006F\u0074\u006F  \u0053\u0054\u0041\u0052\u0054 ;
                }
            }

            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0034 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0035 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0036 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0037 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0038 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0038\u0039 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0030 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0031 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0032 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0033 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0034 ;
            \u0070\u0075\u0062\u006C\u0069\u0063  \u0069\u006E\u0074  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0035\u0039\u0035 ;
        }
        \u0073\u0074\u0061\u0074\u0069\u0063  \u0076\u006F\u0069\u0064  \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0037\u0034 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0034\u0037\u0030 \u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0036\u0034 )
        {
\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0036\u0033 .\u0041\u0064\u0064 (\u0067\u0065\u006E\u0065\u0072\u0061\u0074\u0065\u0064\u005F\u0038\u0037\u0036\u0034 );
        }
    }
}

// --- End of file: HeliCallCraft.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ServerRewards.cs ---
// --- Original Local Path: ServerRewards.cs ---

using System;
using Oxide.Core;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;
using UnityEngine;
using System.Collections;
using System.Reflection;
using System.IO;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("ServerRewards", "k1lly0u", "0.3.6", ResourceId = 1751)]
    public class ServerRewards : RustPlugin
    {
        #region Fields
        [PluginReference] Plugin Kits;
        [PluginReference] Plugin Economics;
        [PluginReference] Plugin HumanNPC;
        [PluginReference] Plugin LustyMap;
        [PluginReference] Plugin PlaytimeTracker;

        #region Datafiles
        PointData playerData;
        private DynamicConfigFile PlayerData;

        RewardDataStorage rewardData;
        private DynamicConfigFile RewardData;

        SaleDataStorage saleData;
        private DynamicConfigFile SaleData;

        NPCDealers npcDealers;
        private DynamicConfigFile NPC_Dealers;
        #endregion

        static GameObject webObject;
        static UnityWeb uWeb;
        static MethodInfo getFileData = typeof(FileStorage).GetMethod("StorageGet", (BindingFlags.Instance | BindingFlags.NonPublic));

        static ServerRewards instance;
        ConfigData configData;

        private Timer saveTimer;

        private Dictionary<ulong, OUIData> OpenUI;
        private Dictionary<string, string> ItemNames;
        private Dictionary<ulong, int> PointCache;
        private Dictionary<ulong, NPCInfos> NPCCreator;
        #endregion

        #region Classes
        #region Player data
        class PointData
        {
            public Dictionary<ulong, int> Players = new Dictionary<ulong, int>();
        }
        
        #endregion
        
        #region Reward data
        class RewardDataStorage
        {
            public Dictionary<string, KitInfo> RewardKits = new Dictionary<string, KitInfo>();
            public Dictionary<int, ItemInfo> RewardItems = new Dictionary<int, ItemInfo>();
            public Dictionary<string, CommandInfo> RewardCommands = new Dictionary<string, CommandInfo>();
            public Dictionary<string, Dictionary<ulong, uint>> storedImages = new Dictionary<string, Dictionary<ulong, uint>>();
        } 
        class SaleDataStorage
        {
            public Dictionary<int, Dictionary<ulong, SaleInfo>> Prices = new Dictionary<int, Dictionary<ulong, SaleInfo>>();
        }   
        class SaleInfo
        {
            public float SalePrice;
            public string Name;
            public bool Enabled;
        }    
        class KitInfo
        {
            public string KitName;
            public string Description = "";
            public string URL = "";
            public int Cost;
        }
        class ItemInfo
        {
            public string DisplayName;
            public string URL;
            public int ID;
            public int Amount;            
            public ulong Skin;
            public int Cost;
            public int TargetID;
        }
        class CommandInfo
        {
            public List<string> Command;
            public string Description;
            public int Cost;
        }

        #endregion

        #region Other data
        class NPCDealers
        {
            public Dictionary<string, NPCInfos> NPCIDs = new Dictionary<string, NPCInfos>();
        }
        class NPCInfos
        {
            public float X;
            public float Z;
            public float ID;
            public string NPCID;
            public bool isCustom;
            public List<int> itemList = new List<int>();
            public List<string> kitList = new List<string>();
            public List<string> commandList = new List<string>();
            public bool allowExchange;
            public bool allowTransfer;
            public bool allowSales;
        }
        class KitItemEntry
        {
            public int ItemAmount;
            public List<string> ItemMods;
        }
        public class OUIData
        {
            public ElementType type;
            public int page;
            public string npcid;
        }
        #endregion

        #region UI
        static string UIMain = "SR_Store";
        static string UISelect = "SR_Select";
        static string UIRP = "SR_RPPanel";
        static string UIPopup = "SR_Popup";

        class SR_UI
        {
            static public CuiElementContainer CreateElementContainer(string panelName, string color, string aMin, string aMax)
            {
                var NewElement = new CuiElementContainer()
            {
                {
                    new CuiPanel
                    {
                        Image = {Color = color},
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                        CursorEnabled = true
                    },
                    new CuiElement().Parent = "Overlay",
                    panelName
                }
            };
                return NewElement;
            }
            static public void CreatePanel(ref CuiElementContainer container, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel, CuiHelper.GetGuid());
            }
            static public void CreateLabel(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (instance.configData.UI_Options.DisableUI_FadeIn)
                    fadein = 0;
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = fadein, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel, CuiHelper.GetGuid());

            }
            static public void CreateButton(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (instance.configData.UI_Options.DisableUI_FadeIn)
                    fadein = 0;
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = fadein },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel, CuiHelper.GetGuid());
            }
            static public void LoadImage(ref CuiElementContainer container, string panel, string png, string aMin, string aMax)
            {               
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiRawImageComponent {Png = png },                        
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax }
                    }
                });
            }
            static public void CreateTextOverlay(ref CuiElementContainer container, string panel, string text, string color, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                if (instance.configData.UI_Options.DisableUI_FadeIn)
                    fadein = 0;
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = fadein, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel, CuiHelper.GetGuid());

            }
        }
        private Dictionary<string, string> UIColors = new Dictionary<string, string>
        {
            {"dark", "0.1 0.1 0.1 0.98" },
            {"light", "0.9 0.9 0.9 0.1" },
            {"grey1", "0.6 0.6 0.6 1.0" },
            {"buttonbg", "0.2 0.2 0.2 0.7" },
            {"buttoncom", "0 0.5 0.1 0.9" },
            {"grey8", "0.8 0.8 0.8 1.0" }
        };
        #endregion
        #endregion

        #region Player UI
        private void DisplayPoints(BasePlayer player)
        {
            if (player == null) return;
            CuiHelper.DestroyUi(player, UIRP);
            if (!OpenUI.ContainsKey(player.userID)) return;
            int playerPoints = 0;
            if (PointCache.ContainsKey(player.userID))
                playerPoints = PointCache[player.userID];
            var element = SR_UI.CreateElementContainer(UIRP, "0 0 0 0", "0.3 0", "0.7 0.1");
            string message = $"{configData.Messaging.MSG_MainColor}{msg("storeRP", player.UserIDString)}: {playerPoints}</color>";
            if (Economics && !configData.Categories.Disable_CurrencyExchange)
            {
                var amount = Economics?.Call("GetPlayerMoney", player.userID);
                message = message + $" || {configData.Messaging.MSG_MainColor}Economics: {amount}</color>";
            }
            if (configData.Options.Use_PTT && PlaytimeTracker)
            {
                var time = PlaytimeTracker?.Call("GetPlayTime", player.UserIDString);
                if (time is double)
                {
                    var playTime = GetPlaytimeClock((double)time);
                    if (!string.IsNullOrEmpty(playTime))
                        message = $"{configData.Messaging.MSG_MainColor}{msg("storePlaytime", player.UserIDString)}: {playTime}</color> || " + message;
                }
            }              

            SR_UI.CreateLabel(ref element, UIRP, "0 0 0 0", message, 20, "0 0", "1 1", TextAnchor.MiddleCenter, 0f);
            CuiHelper.AddUi(player, element);
            timer.Once(1, () => DisplayPoints(player));
        }
        private void PopupMessage(BasePlayer player, string msg)
        {
            CuiHelper.DestroyUi(player, UIPopup);
            var element = SR_UI.CreateElementContainer(UIPopup, UIColors["dark"], "0.33 0.45", "0.67 0.6");
            SR_UI.CreatePanel(ref element, UIPopup, UIColors["grey1"], "0.01 0.04", "0.99 0.96");
            SR_UI.CreateLabel(ref element, UIPopup, "", $"{configData.Messaging.MSG_MainColor}{msg}</color>", 22, "0 0", "1 1");
            CuiHelper.AddUi(player, element);
            timer.Once(3.5f, () => CuiHelper.DestroyUi(player, UIPopup));
        }

        private void OpenNavMenu(BasePlayer player, string npcid = null)
        {
            CuiElementContainer element = GetElement(ElementType.Navigation, 0, npcid);            
            CuiHelper.AddUi(player, element);
            DisplayPoints(player);
        }        
        private void SwitchElement(BasePlayer player, ElementType type, int page = 0, string npcid = null)
        {
            if (type == ElementType.Transfer)
            {
                UIElements.DestroyUI(player, OpenUI[player.userID]);
                CreateTransferElement(player, page);
                OpenUI[player.userID].type = ElementType.Transfer;
                OpenUI[player.userID].page = 0;
            }
            else if (type == ElementType.Sell)
            {
                UIElements.DestroyUI(player, OpenUI[player.userID]);
                CreateSaleElement(player);
                OpenUI[player.userID].type = ElementType.Sell;
                OpenUI[player.userID].page = 0;
            }
            else if (type == ElementType.Exchange)
            {
                UIElements.DestroyUI(player, OpenUI[player.userID]);
                CuiElementContainer element = GetElement(type, page, null);
                OpenUI[player.userID].type = ElementType.Exchange;
                OpenUI[player.userID].page = 0;
                CuiHelper.AddUi(player, element);
                return;
            }
            else
            {
                CuiElementContainer element = GetElement(type, page, npcid);

                UIElements.DestroyUI(player, OpenUI[player.userID]);
                CuiHelper.DestroyUi(player, UIMain);
                OpenUI[player.userID].page = page;
                OpenUI[player.userID].type = type;
                CuiHelper.AddUi(player, element);
            }            
        }        
        private CuiElementContainer GetElement(ElementType type, int page, string npcid = null)
        {            
            if (!string.IsNullOrEmpty(npcid))
            {
                if (UIElements.npcElements.ContainsKey(npcid))
                    return UIElements.npcElements[npcid][type][page];
            }
            return UIElements.standardElements[type][page];
        }
        private void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.DestroyUi(player, UISelect);
            CuiHelper.DestroyUi(player, UIRP);
            if (OpenUI.ContainsKey(player.userID))
            {
                UIElements.DestroyUI(player, OpenUI[player.userID]);
                UIElements.DestroyNav(player, OpenUI[player.userID]);
                OpenUI.Remove(player.userID);
            }            
            OpenMap(player);
        }

        public enum ElementType
        {
            None,
            Navigation,
            Kits,
            Items,
            Commands,
            Exchange,
            Transfer,
            Sell
        }
        #endregion

        #region UI Creation
        #region Static UI cache
        public static class UIElements
        {            
            public static Dictionary<ElementType, CuiElementContainer[]> standardElements;
            public static Dictionary<string, Dictionary<ElementType, CuiElementContainer[]>> npcElements;
            public static List<string> elementIDs;
            
            public static void RenameComponents(CuiElementContainer[] container)
            {
                foreach(var element in container)
                {
                    foreach(var e in element)
                    {
                        if (e.Name == "AddUI CreatedPanel")
                            e.Name = CuiHelper.GetGuid();
                        elementIDs.Add(e.Name);
                    }
                }                             
            }
            public static void DestroyUI(BasePlayer player, OUIData data)
            {
                if (data.type == ElementType.None) return;
                if (data.type == ElementType.Transfer || data.type == ElementType.Sell)
                {
                    CuiHelper.DestroyUi(player, UIMain);
                    return;
                }                

                CuiElementContainer element = null;

                if (data.type == ElementType.Exchange)
                {
                    if (standardElements[ElementType.Exchange].Length >= data.page)
                        element = standardElements[ElementType.Exchange][data.page];
                }
                else if (!string.IsNullOrEmpty(data.npcid) && npcElements.ContainsKey(data.npcid))
                {
                    if (npcElements[data.npcid].ContainsKey(data.type))
                    {
                        if (npcElements[data.npcid][data.type].Length >= data.page)
                            element = npcElements[data.npcid][data.type][data.page];
                    }
                }
                else
                {
                    if (standardElements.ContainsKey(data.type))
                    {
                        if (standardElements[data.type].Length >= data.page)
                            element = standardElements[data.type][data.page];
                    }
                }

                if (element == null)
                {
                    DestroyWholeList(player);
                    return;
                }                

                for (int i = 0; i < element.ToArray().Length; i++)                
                    CuiHelper.DestroyUi(player, element.ToArray()[i].Name);                                
            } 
            public static void DestroyNav(BasePlayer player, OUIData data)
            {
                CuiElementContainer element = null;

                if (!string.IsNullOrEmpty(data.npcid) && npcElements.ContainsKey(data.npcid))
                    element = npcElements[data.npcid][ElementType.Navigation][0];
                else element = standardElements[ElementType.Navigation][0];

                for (int i = 0; i < element.ToArray().Length; i++)
                    CuiHelper.DestroyUi(player, element.ToArray()[i].Name);
            }  
            static void DestroyWholeList(BasePlayer player)
            {
                foreach(var element in elementIDs)
                    CuiHelper.DestroyUi(player, element);
            }         
        }
        void InitializeAllElements()
        {
            PrintWarning("Creating and storing all UI elements to cache");
            CreateNavUI();
            CreateKitsUI();
            CreateItemsUI();
            CreateCommandsUI();
            CreateExchangeUI();
            CreateAllNPCs(); 
        }

        #region Standard Elements
        private void CreateNavUI()
        {
            var Selector = SR_UI.CreateElementContainer(UISelect, UIColors["dark"], "0 0.92", "1 1");
            SR_UI.CreatePanel(ref Selector, UISelect, UIColors["light"], "0.01 0.05", "0.99 0.95", true);
            SR_UI.CreateLabel(ref Selector, UISelect, "", $"{configData.Messaging.MSG_MainColor}{msg("storeTitle")}</color>", 30, "0.01 0", "0.2 1");
                       
            int number = 0;
            if (!configData.Categories.Disable_Kits) { CreateMenuButton(ref Selector, UISelect, msg("storeKits"), $"SRUI_ChangeElement Kits 0", number); number++; }
            if (!configData.Categories.Disable_Items) { CreateMenuButton(ref Selector, UISelect, msg("storeItems"), $"SRUI_ChangeElement Items 0", number); number++; }
            if (!configData.Categories.Disable_Commands) { CreateMenuButton(ref Selector, UISelect, msg("storeCommands"), $"SRUI_ChangeElement Commands 0", number); number++; }
            if (Economics) if (!configData.Categories.Disable_CurrencyExchange) { CreateMenuButton(ref Selector, UISelect, msg("storeExchange"), "SRUI_ChangeElement Exchange 0", number); number++; }
            if (!configData.Categories.Disable_CurrencyTransfer) { CreateMenuButton(ref Selector, UISelect, msg("storeTransfer"), "SRUI_ChangeElement Transfer 0", number); number++; }
            if (!configData.Categories.Disable_SellersScreen) { CreateMenuButton(ref Selector, UISelect, msg("sellItems"), "SRUI_ChangeElement Sell 0", number); number++; }
            CreateMenuButton(ref Selector, UISelect, msg("storeClose"), "SRUI_DestroyAll", number);

            UIElements.standardElements.Add(ElementType.Navigation, new CuiElementContainer[] { Selector });
            UIElements.RenameComponents(UIElements.standardElements[ElementType.Navigation]);
        }
        private void CreateKitsUI()
        {
            int maxPages = 0;
            var count = rewardData.RewardKits;
            if (count.Count > 10)            
                maxPages = (count.Count - 1) / 10 + 1;
            List<CuiElementContainer> kitList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)            
                kitList.Add(CreateKitsElement(i));
            UIElements.standardElements.Add(ElementType.Kits, kitList.ToArray());
            UIElements.RenameComponents(UIElements.standardElements[ElementType.Kits]);
        }
        private void CreateItemsUI()
        {
            int maxPages = 0;
            var count = rewardData.RewardItems;
            if (count.Count > 21)
                maxPages = (count.Count - 1) / 21 + 1;
            List<CuiElementContainer> itemList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)
                itemList.Add(CreateItemsElement(i));
            UIElements.standardElements.Add(ElementType.Items, itemList.ToArray());
            UIElements.RenameComponents(UIElements.standardElements[ElementType.Items]);
        }
        private void CreateCommandsUI()
        {
            int maxPages = 0;
            var count = rewardData.RewardCommands;
            if (count.Count > 10)
                maxPages = (count.Count - 1) / 10 + 1;
            List<CuiElementContainer> commandList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)
                commandList.Add(CreateCommandsElement(i));
            UIElements.standardElements.Add(ElementType.Commands, commandList.ToArray());
            UIElements.RenameComponents(UIElements.standardElements[ElementType.Commands]);
        }
        private void CreateExchangeUI()
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("exchange1")}</color>", 24, "0 0.82", "1 0.9");
            SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_Color}{msg("exchange2")}</color>{configData.Messaging.MSG_MainColor}{configData.CurrencyExchange.RP_ExchangeRate} {msg("storeRP")}</color> -> {configData.Messaging.MSG_MainColor}{configData.CurrencyExchange.Econ_ExchangeRate} {msg("storeCoins")}</color>", 20, "0 0.6", "1 0.7");
            SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("storeRP")} => {msg("storeEcon")}</color>", 20, "0.25 0.4", "0.4 0.55");
            SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("storeEcon")} => {msg("storeRP")}</color>", 20, "0.6 0.4", "0.75 0.55");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeExchange"), 20, "0.25 0.3", "0.4 0.38", "SRUI_Exchange 1");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeExchange"), 20, "0.6 0.3", "0.75 0.38", "SRUI_Exchange 2");
            UIElements.standardElements.Add(ElementType.Exchange, new CuiElementContainer[] { Main });
            UIElements.RenameComponents(UIElements.standardElements[ElementType.Exchange]);
        }
        private CuiElementContainer CreateKitsElement(int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            var rew = rewardData.RewardKits;
            if (rew.Count > 10)
            {
                var maxpages = (rew.Count - 1) / 10 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Kits {page + 1}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Kits {page - 1}");
            }
            int maxentries = (10 * (page + 1));
            if (maxentries > rew.Count)
                maxentries = rew.Count;
            int rewardcount = 10 * page;

            List<string> kitNames = rewardData.RewardKits.Keys.ToList();

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                var contents = GetKitContents(rew[kitNames[n]].KitName);
                if (string.IsNullOrEmpty(contents) || !configData.UI_Options.ShowKitContents)
                    contents = rew[kitNames[n]].Description;
                CreateKitCommandEntry(ref Main, UIMain, kitNames[n], contents, rew[kitNames[n]].Cost, i, true);
                i++;
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noKits")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        private CuiElementContainer CreateItemsElement(int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            var rew = rewardData.RewardItems;
            if (rew.Count > 21)
            {
                var maxpages = (rew.Count - 1) / 21 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Items {page + 1}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Items {page - 1}");
            }
            int maxentries = (21 * (page + 1));
            if (maxentries > rew.Count)
                maxentries = rew.Count;
            int i = 0;
            int rewardcount = 21 * page;
            for (int n = rewardcount; n < maxentries; n++)
            {
                CreateItemEntry(ref Main, UIMain, n, i);
                i++;
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noItems")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        private CuiElementContainer CreateCommandsElement(int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            var rew = rewardData.RewardCommands;
            if (rew.Count > 10)
            {
                var maxpages = (rew.Count - 1) / 10 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Commands {page + 1}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Commands {page - 1}");
            }
            int maxentries = (10 * (page + 1));
            if (maxentries > rew.Count)
                maxentries = rew.Count;
            int rewardcount = 10 * page;

            List<string> commNames = rewardData.RewardCommands.Keys.ToList();            

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                CreateKitCommandEntry(ref Main, UIMain, commNames[n], rew[commNames[n]].Description, rew[commNames[n]].Cost, i, false);
                i++;
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noCommands")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        #endregion
                
        #region NPC Elements
        private void CreateAllNPCs()
        {
            foreach(var npc in npcDealers.NPCIDs)
            {
                if (npc.Value.isCustom)
                {
                    CreateNPCMenu(npc.Key);                    
                }
            }            
            PrintWarning("All UI elements created successfully!");
        }
        private void CreateNPCMenu(string npcid)
        {
            if (UIElements.npcElements.ContainsKey(npcid))
                UIElements.npcElements.Remove(npcid);
            CreateNPCNavUI(npcid);
            CreateNPCCommandsUI(npcid);
            CreateNPCItemsUI(npcid);
            CreateNPCKitsUI(npcid);
        }
        private void CreateNPCNavUI(string npcid)
        {
            var Selector = SR_UI.CreateElementContainer(UISelect, UIColors["dark"], "0 0.92", "1 1");
            SR_UI.CreatePanel(ref Selector, UISelect, UIColors["light"], "0.01 0.05", "0.99 0.95", true);
            SR_UI.CreateLabel(ref Selector, UISelect, "", $"{configData.Messaging.MSG_MainColor}{msg("storeTitle")}</color>", 30, "0.01 0", "0.2 1");

            NPCInfos npcInfo = null;
            if (!string.IsNullOrEmpty(npcid))
                npcInfo = npcDealers.NPCIDs[npcid];
            if (npcInfo == null) return;

            int number = 0;
            if (!configData.Categories.Disable_Kits && npcInfo.kitList.Count > 0) { CreateMenuButton(ref Selector, UISelect, msg("storeKits"), $"SRUI_ChangeElement Kits 0 {npcid}", number); number++; }
            if (!configData.Categories.Disable_Items && npcInfo.itemList.Count > 0) { CreateMenuButton(ref Selector, UISelect, msg("storeItems"), $"SRUI_ChangeElement Items 0 {npcid}", number); number++; }
            if (!configData.Categories.Disable_Commands && npcInfo.commandList.Count > 0) { CreateMenuButton(ref Selector, UISelect, msg("storeCommands"), $"SRUI_ChangeElement Commands 0 {npcid}", number); number++; }
            if (Economics) if (!configData.Categories.Disable_CurrencyExchange && npcInfo.allowExchange) { CreateMenuButton(ref Selector, UISelect, msg("storeExchange"), "SRUI_ChangeElement Exchange 0", number); number++; }
            if (!configData.Categories.Disable_CurrencyTransfer && npcInfo.allowTransfer) { CreateMenuButton(ref Selector, UISelect, msg("storeTransfer"), "SRUI_ChangeElement Transfer 0", number); number++; }
            if (!configData.Categories.Disable_SellersScreen && npcInfo.allowSales) { CreateMenuButton(ref Selector, UISelect, msg("sellItems"), "SRUI_ChangeElement Sell 0", number); number++; }
            CreateMenuButton(ref Selector, UISelect, msg("storeClose"), "SRUI_DestroyAll", number);

            UIElements.npcElements.Add(npcid, new Dictionary<ElementType, CuiElementContainer[]> { { ElementType.Navigation, new CuiElementContainer[] { Selector } } });
            UIElements.RenameComponents(UIElements.npcElements[npcid][ElementType.Navigation]);
        }
        private void CreateNPCKitsUI(string npcid)
        {
            int maxPages = 0;
            var count = npcDealers.NPCIDs[npcid].kitList;
            if (count.Count > 10)
                maxPages = (count.Count - 1) / 10 + 1;            
            List<CuiElementContainer> kitList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)
                kitList.Add(CreateNPCKitsElement(npcid, i));
            UIElements.npcElements[npcid].Add(ElementType.Kits, kitList.ToArray());
            UIElements.RenameComponents(UIElements.npcElements[npcid][ElementType.Kits]);
        }
        private void CreateNPCItemsUI(string npcid)
        {
            int maxPages = 0;
            var count = npcDealers.NPCIDs[npcid].itemList;
            if (count.Count > 21)
                maxPages = (count.Count - 1) / 21 + 1;
            List<CuiElementContainer> itemList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)            
                itemList.Add(CreateNPCItemsElement(npcid, i));            
            UIElements.npcElements[npcid].Add(ElementType.Items, itemList.ToArray());
            UIElements.RenameComponents(UIElements.npcElements[npcid][ElementType.Items]);
        }
        private void CreateNPCCommandsUI(string npcid)
        {
            int maxPages = 0;
            var count = npcDealers.NPCIDs[npcid].commandList;
            if (count.Count > 10)
                maxPages = (count.Count - 1) / 10 + 1;
            List<CuiElementContainer> commandList = new List<CuiElementContainer>();
            for (int i = 0; i <= maxPages; i++)
                commandList.Add(CreateNPCCommandsElement(npcid, i));
            UIElements.npcElements[npcid].Add(ElementType.Commands, commandList.ToArray());
            UIElements.RenameComponents(UIElements.npcElements[npcid][ElementType.Commands]);
        }
        private CuiElementContainer CreateNPCKitsElement(string npcid, int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);

            List<string> kitNames = npcDealers.NPCIDs[npcid].kitList;
            if (kitNames.Count > 10)
            {
                var maxpages = (kitNames.Count - 1) / 10 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Kits {page + 1} {npcid}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Kits {page - 1} {npcid}");
            }
            int maxentries = (10 * (page + 1));
            if (maxentries > kitNames.Count)
                maxentries = kitNames.Count;
            int rewardcount = 10 * page;
                        
            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                var contents = GetKitContents(rewardData.RewardKits[kitNames[n]].KitName);
                if (string.IsNullOrEmpty(contents) || !configData.UI_Options.ShowKitContents)
                    contents = rewardData.RewardKits[kitNames[n]].Description;
                CreateKitCommandEntry(ref Main, UIMain, kitNames[n], contents, rewardData.RewardKits[kitNames[n]].Cost, i, true);
                i++;
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noKits")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        private CuiElementContainer CreateNPCItemsElement(string npcid, int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);

            var rew = npcDealers.NPCIDs[npcid].itemList;
            if (rew.Count > 21)
            {
                var maxpages = (rew.Count - 1) / 21 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Items {page + 1} {npcid}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Items {page - 1} {npcid}");
            }
            int maxentries = (21 * (page + 1));
            if (maxentries > rew.Count)
                maxentries = rew.Count;
            int i = 0;
            int rewardcount = 21 * page;

            for (int n = rewardcount; n < maxentries; n++)
            {                
                CreateItemEntry(ref Main, UIMain, rew[n], i);
                i++;
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noItems")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        private CuiElementContainer CreateNPCCommandsElement(string npcid, int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);

            List<string> commNames = npcDealers.NPCIDs[npcid].commandList;
            if (commNames.Count > 10)
            {
                var maxpages = (commNames.Count - 1) / 10 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_ChangeElement Commands {page + 1} {npcid}");
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_ChangeElement Commands {page - 1} {npcid}");
            }
            int maxentries = (10 * (page + 1));
            if (maxentries > commNames.Count)
                maxentries = commNames.Count;
            int rewardcount = 10 * page;
            
            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                if (rewardData.RewardCommands.ContainsKey(commNames[n]))
                {
                    CreateKitCommandEntry(ref Main, UIMain, commNames[n], rewardData.RewardCommands[commNames[n]].Description, rewardData.RewardCommands[commNames[n]].Cost, i, false);
                    i++;
                }
            }
            if (i == 0)
                SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("noCommands")}</color>", 24, "0 0.82", "1 0.9");
            return Main;
        }
        #endregion
        #endregion

        #region Sale System
        private void CreateSaleElement(BasePlayer player)
        {
            var HelpMain = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref HelpMain, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("selectSell")}</color>", 22, "0 0.9", "1 1");

            int i = 0;
            foreach(var item in player.inventory.containerMain.itemList)
            {
                if (saleData.Prices.ContainsKey(item.info.itemid))
                {
                    if (!saleData.Prices[item.info.itemid].ContainsKey(item.skin))
                    {
                        saleData.Prices[item.info.itemid].Add(item.skin, new SaleInfo { Enabled = false, Name = item?.info?.steamItem?.displayName?.english ?? $"{item.info.displayName.english} {item.skin}", SalePrice = 1 });
                        SavePrices();
                    }
                    if (saleData.Prices[item.info.itemid][item.skin].Enabled)
                    {
                        var name = item.info.displayName.english;
                        if (ItemNames.ContainsKey(item.info.itemid.ToString()))
                            name = ItemNames[item.info.itemid.ToString()];

                        CreateInventoryEntry(ref HelpMain, UIMain, item.info.itemid, item.skin, name, item.amount, i);
                        i++;
                    }
                }
            }
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.AddUi(player, HelpMain);
        }
        private void CreateInventoryEntry(ref CuiElementContainer container, string panelName, int itemId, ulong skinId, string name, int amount, int number)
        {            
            var pos = CalcPosInv(number);

            SR_UI.CreateLabel(ref container, panelName, "", $"{msg("Name")}:  {configData.Messaging.MSG_MainColor}{name}</color>", 14, $"{pos[0]} {pos[1]}", $"{pos[0] + 0.22f} {pos[3]}", TextAnchor.MiddleLeft);
            SR_UI.CreateLabel(ref container, panelName, "", $"{msg("Amount")}:  {configData.Messaging.MSG_MainColor}{amount}</color>", 14, $"{pos[0] + 0.22f} {pos[1]}", $"{pos[0] + 0.32f} {pos[3]}", TextAnchor.MiddleLeft);
            SR_UI.CreateButton(ref container, panelName, UIColors["buttonbg"], msg("Sell"), 14, $"{pos[0] + 0.35f} {pos[1]}", $"{pos[2]} {pos[3]}", $"SRUI_SellItem {itemId} {skinId} {amount} {name}");
        }       
        private void SellItem(BasePlayer player, int itemId, ulong skinId, string name, int amount)
        {
            var HelpMain = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref HelpMain, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("selectToSell")}</color>", 22, "0 0.9", "1 1");
            var price = saleData.Prices[itemId][skinId].SalePrice;
            int salePrice = (int)Math.Floor(price * amount);

            SR_UI.CreateLabel(ref HelpMain, UIMain, "", string.Format(msg("sellItemF"), configData.Messaging.MSG_MainColor, name), 18, "0.1 0.8", "0.3 0.84", TextAnchor.MiddleLeft);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", string.Format(msg("sellPriceF"), configData.Messaging.MSG_MainColor, price, msg("storeRP")), 18, "0.1 0.76", "0.3 0.8", TextAnchor.MiddleLeft);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", string.Format(msg("sellUnitF"), configData.Messaging.MSG_MainColor, amount), 18, "0.1 0.72", "0.3 0.76", TextAnchor.MiddleLeft);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", string.Format(msg("sellTotalF"), configData.Messaging.MSG_MainColor, salePrice, msg("storeRP")), 18, "0.1 0.68", "0.3 0.72", TextAnchor.MiddleLeft);

            
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "+ 10000", 16, "0.84 0.72", "0.89 0.76", $"SRUI_SellItem {itemId} {skinId} {amount + 10000} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "+ 1000", 16, "0.78 0.72", "0.83 0.76", $"SRUI_SellItem {itemId} {skinId} {amount + 1000} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "+ 100", 16, "0.72 0.72", "0.77 0.76", $"SRUI_SellItem {itemId} {skinId} {amount + 100} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "+ 10", 16, "0.66 0.72", "0.71 0.76", $"SRUI_SellItem {itemId} {skinId} {amount + 10} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "+ 1", 16, "0.6 0.72", "0.65 0.76", $"SRUI_SellItem {itemId} {skinId} {amount + 1} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "-1", 16, "0.54 0.72", "0.59 0.76", $"SRUI_SellItem {itemId} {skinId} {amount - 1} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "-10", 16, "0.48 0.72", "0.53 0.76", $"SRUI_SellItem {itemId} {skinId} {amount - 10} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "-100", 16, "0.42 0.72", "0.47 0.76", $"SRUI_SellItem {itemId} {skinId} {amount - 100} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "-1000", 16, "0.36 0.72", "0.41 0.76", $"SRUI_SellItem {itemId} {skinId} {amount - 1000} {name}");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], "-10000", 16, "0.3 0.72", "0.35 0.76", $"SRUI_SellItem {itemId} {skinId} {amount - 10000} {name}");

            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], msg("cancelSale"), 16, "0.75 0.34", "0.9 0.39", "SRUI_CancelSale");
            SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], msg("confirmSale"), 16, "0.55 0.34", "0.7 0.39", $"SRUI_Sell {itemId} {skinId} {amount} {name}");

            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.AddUi(player, HelpMain);
        }

        #region Commands
        [ConsoleCommand("SRUI_CancelSale")]
        private void cmdCancelSale(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            CreateSaleElement(player);
        }
        [ConsoleCommand("SRUI_SellItem")]
        private void cmdSellItem(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            int itemId = arg.GetInt(0);
            ulong skinId = arg.GetUInt64(1);
            int amount = arg.GetInt(2);
            string name = arg.GetString(3);
            var max = GetAmount(player, itemId, skinId);

            if (amount <= 0)
                amount = 1;            
            if (amount > max)
                amount = max;

            SellItem(player, itemId, skinId, name, amount);            
        }
        [ConsoleCommand("SRUI_Sell")]
        private void cmdSell(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            int itemId = arg.GetInt(0);
            ulong skinId = arg.GetUInt64(1);
            int amount = arg.GetInt(2);
            string name = arg.GetString(3);
            float price = saleData.Prices[itemId][skinId].SalePrice;
            int salePrice = (int)Math.Floor(price * amount);

            TakeResources(player, itemId, skinId, amount);
            AddPoints(player.userID, salePrice);

            CreateSaleElement(player);
            PopupMessage(player, string.Format(msg("saleSuccess"), amount, name, salePrice, msg("storeRP")));
        }
        #endregion
        #region Functions
        private float[] CalcPosInv(int number)
        {
            Vector2 dimensions = new Vector2(0.45f, 0.04f);
            Vector2 origin = new Vector2(0.015f, 0.86f);
            float offsetY = 0.005f;
            float offsetX = 0.033f;
            float posX = 0;
            float posY = 0;
            if (number < 18)
            {
                posX = origin.x;
                posY = (offsetY + dimensions.y) * number;
            }
            else
            {
                number -= 18;
                posX = offsetX + dimensions.x;
                posY = (offsetY + dimensions.y) * number;
            }
            Vector2 offset = new Vector2(posX, -posY);
            Vector2 posMin = origin + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }
        private int GetAmount(BasePlayer player, int itemid, ulong skinid)
        {
            List<Item> items = player.inventory.AllItems().ToList().FindAll((Item x) => x.info.itemid == itemid);
            int num = 0;
            foreach (Item item in items)
            {
                if (!item.IsBusy())
                {
                    if (item.skin == skinid)
                        num = num + item.amount;
                }
            }
            return num;
        }
        private void TakeResources(BasePlayer player, int itemid, ulong skinId, int iAmount)
        {
            int num = TakeResourcesFrom(player, player.inventory.containerMain.itemList, itemid, skinId, iAmount);
            if (num < iAmount)
                num += TakeResourcesFrom(player, player.inventory.containerBelt.itemList, itemid, skinId, iAmount);
            if (num < iAmount)
                num += TakeResourcesFrom(player, player.inventory.containerWear.itemList, itemid, skinId, iAmount);
        }
        private int TakeResourcesFrom(BasePlayer player, List<Item> container, int itemid, ulong skinId, int iAmount)
        {
            List<Item> collect = new List<Item>();
            List<Item> items = new List<Item>();
            int num = 0;
            foreach (Item item in container)
            {
                if (item.info.itemid == itemid && item.skin == skinId)
                {
                    int num1 = iAmount - num;
                    if (num1 > 0)
                    {
                        if (item.amount <= num1)
                        {
                            if (item.amount <= num1)
                            {
                                num = num + item.amount;
                                items.Add(item);
                                if (collect != null)                                
                                    collect.Add(item);                                
                            }
                            if (num != iAmount)                            
                                continue;                            
                            break;
                        }
                        else
                        {
                            item.MarkDirty();
                            Item item1 = item;
                            item1.amount = item1.amount - num1;
                            num = num + num1;
                            Item item2 = ItemManager.CreateByItemID(itemid, 1, skinId);
                            item2.AddOwners(item.owners, 1f);
                            item2.amount = num1;
                            item2.CollectedForCrafting(player);
                            if (collect != null)                            
                                collect.Add(item2);                            
                            break;
                        }
                    }
                }
            }
            foreach (Item item3 in items)            
                item3.RemoveFromContainer();            
            return num;
        }
        #endregion
        #endregion

        #region Transfer System
        private void CreateTransferElement(BasePlayer player, int page = 0)
        {            
            var HelpMain = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref HelpMain, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
            SR_UI.CreateLabel(ref HelpMain, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("transfer1", player.UserIDString)}</color>", 22, "0 0.9", "1 1");

            var playerCount = BasePlayer.activePlayerList.Count;
            if (playerCount > 96)
            {
                var maxpages = (playerCount - 1) / 96 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], msg("storeNext", player.UserIDString), 18, "0.87 0.92", "0.97 0.97", $"SRUI_Transfer {page + 1}");
                if (page > 0)
                    SR_UI.CreateButton(ref HelpMain, UIMain, UIColors["buttonbg"], msg("storeBack",  player.UserIDString), 18, "0.03 0.92", "0.13 0.97", $"SRUI_Transfer {page - 1}");
            }
            int maxentries = (96 * (page + 1));
            if (maxentries > playerCount)
                maxentries = playerCount;
            int rewardcount = 96 * page;

            int i = 0;
            for (int n = rewardcount; n < maxentries; n++)
            {
                if (BasePlayer.activePlayerList[n] == null) continue;
                CreatePlayerNameEntry(ref HelpMain, UIMain, BasePlayer.activePlayerList[n].displayName, BasePlayer.activePlayerList[n].UserIDString, i);
                i++;
            }
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.AddUi(player, HelpMain);
        }
        private void TransferElement(BasePlayer player, string name, string id)
        {
            CuiHelper.DestroyUi(player, UIMain);
            var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 0.92");
            SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);

            SR_UI.CreateLabel(ref Main, UIMain, "", $"{configData.Messaging.MSG_MainColor}{msg("transfer2", player.UserIDString)}</color>", 24, "0 0.82", "1 0.9");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], "1", 20, "0.27 0.3", "0.37 0.38", $"SRUI_TransferID {id} {name} 1");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], "10", 20, "0.39 0.3", "0.49 0.38", $"SRUI_TransferID {id} {name} 10");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], "100", 20, "0.51 0.3", "0.61 0.38", $"SRUI_TransferID {id} {name} 100");
            SR_UI.CreateButton(ref Main, UIMain, UIColors["buttonbg"], "1000", 20, "0.63 0.3", "0.73 0.38", $"SRUI_TransferID {id} {name} 1000");

            CuiHelper.AddUi(player, Main);
        }
        private void CreatePlayerNameEntry(ref CuiElementContainer container, string panelName, string name, string id, int number)
        {
            var pos = CalcPlayerNamePos(number);
            SR_UI.CreateButton(ref container, panelName, UIColors["buttonbg"], name, 10, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", $"SRUI_TransferNext {id} {name}");
        }
        private float[] CalcPlayerNamePos(int number)
        {
            Vector2 position = new Vector2(0.014f, 0.82f);
            Vector2 dimensions = new Vector2(0.12f, 0.055f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number < 8)
            {
                offsetX = (0.002f + dimensions.x) * number;
            }
            if (number > 7 && number < 16)
            {
                offsetX = (0.002f + dimensions.x) * (number - 8);
                offsetY = (-0.0055f - dimensions.y) * 1;
            }
            if (number > 15 && number < 24)
            {
                offsetX = (0.002f + dimensions.x) * (number - 16);
                offsetY = (-0.0055f - dimensions.y) * 2;
            }
            if (number > 23 && number < 32)
            {
                offsetX = (0.002f + dimensions.x) * (number - 24);
                offsetY = (-0.0055f - dimensions.y) * 3;
            }
            if (number > 31 && number < 40)
            {
                offsetX = (0.002f + dimensions.x) * (number - 32);
                offsetY = (-0.0055f - dimensions.y) * 4;
            }
            if (number > 39 && number < 48)
            {
                offsetX = (0.002f + dimensions.x) * (number - 40);
                offsetY = (-0.0055f - dimensions.y) * 5;
            }
            if (number > 47 && number < 56)
            {
                offsetX = (0.002f + dimensions.x) * (number - 48);
                offsetY = (-0.0055f - dimensions.y) * 6;
            }
            if (number > 55 && number < 64)
            {
                offsetX = (0.002f + dimensions.x) * (number - 56);
                offsetY = (-0.0055f - dimensions.y) * 7;
            }
            if (number > 63 && number < 72)
            {
                offsetX = (0.002f + dimensions.x) * (number - 64);
                offsetY = (-0.0055f - dimensions.y) * 8;
            }
            if (number > 71 && number < 80)
            {
                offsetX = (0.002f + dimensions.x) * (number - 72);
                offsetY = (-0.0055f - dimensions.y) * 9;
            }
            if (number > 79 && number < 88)
            {
                offsetX = (0.002f + dimensions.x) * (number - 80);
                offsetY = (-0.0055f - dimensions.y) * 10;
            }
            if (number > 87 && number < 96)
            {
                offsetX = (0.002f + dimensions.x) * (number - 88);
                offsetY = (-0.0055f - dimensions.y) * 11;
            }
            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }       
       
        #endregion

        #region Item Entries
        private void CreateMenuButton(ref CuiElementContainer container, string panelName, string buttonname, string command, int number)
        {            
            Vector2 dimensions = new Vector2(0.1f, 0.6f);
            Vector2 origin = new Vector2(0.2f, 0.2f);
            Vector2 offset = new Vector2((0.005f + dimensions.x) * number, 0);

            Vector2 posMin = origin + offset;
            Vector2 posMax = posMin + dimensions;

            SR_UI.CreateButton(ref container, panelName, UIColors["buttonbg"], buttonname, 16, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", command);
        }
        private void CreateKitCommandEntry(ref CuiElementContainer container, string panelName, string name, string description, int cost, int number, bool kit)
        {
            Vector2 dimensions = new Vector2(0.8f, 0.079f);
            Vector2 origin = new Vector2(0.03f, 0.86f);
            float offsetY = (0.004f + dimensions.y) * number; 
            Vector2 offset = new Vector2(0, offsetY);
            Vector2 posMin = origin - offset;
            Vector2 posMax = posMin + dimensions;
            string command;
            if (kit)
            {
                command = $"SRUI_BuyKit {name}";
                if (!string.IsNullOrEmpty(rewardData.RewardKits[name].URL))
                {                    
                    string fileLocation = rewardData.storedImages[999999999.ToString()][0].ToString();
                    if (rewardData.storedImages.ContainsKey(rewardData.RewardKits[name].KitName))
                        fileLocation = rewardData.storedImages[rewardData.RewardKits[name].KitName][0].ToString();

                    SR_UI.LoadImage(ref container, panelName, fileLocation, $"{posMin.x} {posMin.y}", $"{posMin.x + 0.05} {posMax.y}");                    
                }
                posMin.x = 0.09f;
            }
            else command = $"SRUI_BuyCommand {name}";
            SR_UI.CreateLabel(ref container, panelName, "", $"{configData.Messaging.MSG_MainColor}{name}</color> -- {configData.Messaging.MSG_Color}{description}</color>", 18, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", TextAnchor.MiddleLeft);
            SR_UI.CreateButton(ref container, panelName, UIColors["buttonbg"], $"{msg("storeCost")}: {cost}", 18, $"0.84 {posMin.y + 0.015}", $"0.97 {posMax.y - 0.015f}", command);
        }       
        private void CreateItemEntry(ref CuiElementContainer container, string panelName, int itemnumber, int number)
        {
            if (rewardData.RewardItems.ContainsKey(itemnumber))
            {                
                var item = rewardData.RewardItems[itemnumber];
                Vector2 dimensions = new Vector2(0.13f, 0.24f);
                Vector2 origin = new Vector2(0.03f, 0.7f);
                float offsetY = 0;
                float offsetX = 0;                
                switch (number)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        offsetX = (0.005f + dimensions.x) * number;
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                        {
                            offsetX = (0.005f + dimensions.x) * (number - 7);
                            offsetY = (0.02f + dimensions.y) * 1;
                        }
                        break;
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                        {
                            offsetX = (0.005f + dimensions.x) * (number - 14);
                            offsetY = (0.02f + dimensions.y) * 2;
                        }
                        break;
                }
                Vector2 offset = new Vector2(offsetX, -offsetY);
                Vector2 posMin = origin + offset;
                Vector2 posMax = posMin + dimensions;

                string fileLocation = rewardData.storedImages[999999999.ToString()][0].ToString();
                if (rewardData.storedImages.ContainsKey(item.ID.ToString()))
                {
                    if (rewardData.storedImages[item.ID.ToString()].ContainsKey(item.Skin))
                        fileLocation = rewardData.storedImages[item.ID.ToString()][item.Skin].ToString();
                }

                SR_UI.LoadImage(ref container, panelName, fileLocation, $"{posMin.x + 0.02} {posMin.y + 0.08}", $"{posMax.x - 0.02} {posMax.y}");
                if (item.Amount > 1)
                    SR_UI.CreateTextOverlay(ref container, panelName, $"{configData.Messaging.MSG_MainColor}<size=18>X</size><size=20>{item.Amount}</size></color>", "", 20, $"{posMin.x + 0.02} {posMin.y + 0.1}", $"{posMax.x - 0.02} {posMax.y - 0.1}", TextAnchor.MiddleCenter);
                SR_UI.CreateLabel(ref container, panelName, "", item.DisplayName, 16, $"{posMin.x} {posMin.y + 0.05}", $"{posMax.x} {posMin.y + 0.08}");
                SR_UI.CreateButton(ref container, panelName, UIColors["buttonbg"], $"{msg("storeCost")}: {item.Cost}", 16, $"{posMin.x + 0.015} {posMin.y}", $"{posMax.x - 0.015} {posMin.y + 0.05}", $"SRUI_BuyItem {itemnumber}");
            }
        }
        #endregion

        #region Kit Contents
        private string GetKitContents(string kitname)
        {
            var contents = Kits?.Call("GetKitContents", kitname);
            if (contents != null)
            {
                var itemString = "";
                var itemList = new SortedDictionary<string, KitItemEntry>();

                foreach (var item in (string[])contents)
                {
                    var entry = item.Split('_');
                    var name = entry[0];
                    if (ItemNames.ContainsKey(entry[0]))
                        name = ItemNames[entry[0]];
                    var amount = 0;
                    if (!int.TryParse(entry[1], out amount))
                        amount = 1;
                    var mods = new List<string>();

                    if (entry.Length > 2)
                        for (int i = 2; i < entry.Length; i++)
                        {
                            if (ItemNames.ContainsKey(entry[i]))
                                mods.Add(ItemNames[entry[i]]);
                        }

                    if (itemList.ContainsKey(name))
                        itemList[name].ItemAmount += amount;
                    else itemList.Add(name, new KitItemEntry { ItemAmount = amount, ItemMods = mods });
                }
                int eCount = 0;
                foreach (var entry in itemList)
                {
                    itemString = itemString + $"{entry.Value.ItemAmount}x {entry.Key}";
                    if (entry.Value.ItemMods.Count > 0)
                    {
                        itemString = itemString + " (";
                        int i = 0;
                        foreach (var mod in entry.Value.ItemMods)
                        {
                            itemString = itemString + $"{mod}";
                            if (i < entry.Value.ItemMods.Count - 1)
                                itemString = itemString + ", ";
                            i++;
                        }
                        itemString = itemString + "), ";
                    }
                    else if (eCount < itemList.Count - 1)
                        itemString = itemString + ", ";
                    eCount++;
                }
                return itemString;
            }
            return null;
        }
        #endregion

        #region UI Commands
        [ConsoleCommand("SRUI_BuyKit")]
        private void cmdBuyKit(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            var kitName = arg.ArgsStr;
            if (rewardData.RewardKits.ContainsKey(kitName))
            {
                var kit = rewardData.RewardKits[kitName];
                if (PointCache.ContainsKey(player.userID))
                {
                    var pd = PointCache[player.userID];
                    if (pd >= kit.Cost)
                    {
                        if (TakePoints(player.userID, kit.Cost, "Kit " + kit.KitName) != null)
                        {
                            Kits?.Call("GiveKit", new object[] { player, kit.KitName });
                            PopupMessage(player, string.Format(msg("buyKit", player.UserIDString), kitName));
                            return;
                        }
                    }                    
                }
                PopupMessage(player, msg("notEnoughPoints", player.UserIDString));
                return;
            }
            PopupMessage(player, msg("errorKit", player.UserIDString));
            return;
        }

        [ConsoleCommand("SRUI_BuyCommand")]
        private void cmdBuyCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            var commandname = arg.ArgsStr;
            if (rewardData.RewardCommands.ContainsKey(commandname))
            {
                var command = rewardData.RewardCommands[commandname];
                if (PointCache.ContainsKey(player.userID))
                {
                    var pd = PointCache[player.userID];
                    if (pd >= command.Cost)
                    {
                        if (TakePoints(player.userID, command.Cost, "Command") != null)
                        {
                            foreach (var cmd in command.Command)
                                ConsoleSystem.Run.Server.Normal(cmd.Replace("$player.id", player.UserIDString).Replace("$player.name", player.displayName).Replace("$player.x", player.transform.position.x.ToString()).Replace("$player.y", player.transform.position.y.ToString()).Replace("$player.z", player.transform.position.z.ToString()));

                            PopupMessage(player, string.Format(msg("buyCommand", player.UserIDString), commandname));
                            return;
                        }
                    }
                }
                PopupMessage(player, msg("notEnoughPoints", player.UserIDString));
                return;
            }
            PopupMessage(player, msg("errorCommand", player.UserIDString));
            return;
        }

        [ConsoleCommand("SRUI_BuyItem")]
        private void cmdBuyItem(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            var itemname = int.Parse(arg.GetString(0).Replace("'", ""));
            if (rewardData.RewardItems.ContainsKey(itemname))
            {
                var item = rewardData.RewardItems[itemname];
                if (PointCache.ContainsKey(player.userID))
                {
                    var pd = PointCache[player.userID];
                    if (player.inventory.containerMain.itemList.Count == 24)
                    {
                        PopupMessage(player, msg("fullInv", player.UserIDString));
                        return;
                    }
                    if (pd >= item.Cost)
                    {
                        if (TakePoints(player.userID, item.Cost, item.DisplayName) != null)
                        {
                            GiveItem(player, itemname);
                            PopupMessage(player, string.Format(msg("buyItem", player.UserIDString), item.Amount, item.DisplayName));
                            return;
                        }
                    }
                }
                PopupMessage(player, msg("notEnoughPoints", player.UserIDString));
                return;
            }
            PopupMessage(player, msg("errorItem", player.UserIDString));
            return;
        }        

        [ConsoleCommand("SRUI_ChangeElement")]
        private void cmdChangeElement(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;

            string type = arg.GetString(0);
            int page = 0;
            string npcid = null;

            if (arg.Args.Length >= 2)            
                page = arg.GetInt(1);

            if (arg.Args.Length >= 3)
                npcid = arg.GetString(2);
            
            switch (type)
            {
                case "Kits":
                    SwitchElement(player, ElementType.Kits, page, npcid);
                    return;
                case "Commands":
                    SwitchElement(player, ElementType.Commands, page, npcid);
                    return;
                case "Items":
                    SwitchElement(player, ElementType.Items, page, npcid);
                    return;
                case "Exchange":
                    SwitchElement(player, ElementType.Exchange);
                    return;
                case "Transfer":
                    SwitchElement(player, ElementType.Transfer, page);
                    return;
                case "Sell":
                    SwitchElement(player, ElementType.Sell);
                    return;             
            }
        }
        
        [ConsoleCommand("SRUI_Exchange")]
        private void cmdExchange(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;            
            var type = int.Parse(arg.GetString(0).Replace("'", ""));           
            if (type == 1)
            {
                if (!PointCache.ContainsKey(player.userID) || PointCache[player.userID] < configData.CurrencyExchange.RP_ExchangeRate)
                {
                    PopupMessage(player, msg("notEnoughPoints", player.UserIDString));
                    return;
                }
                if (TakePoints(player.userID, configData.CurrencyExchange.RP_ExchangeRate, "RP Exchange") != null)
                {
                    Economics.Call("Deposit", player.userID, (double)configData.CurrencyExchange.Econ_ExchangeRate);
                    PopupMessage(player, $"{msg("exchange", player.UserIDString)}{configData.CurrencyExchange.RP_ExchangeRate} {msg("storeRP", player.UserIDString)} for {configData.CurrencyExchange.Econ_ExchangeRate} {msg("storeCoins", player.UserIDString)}");
                }
            }
            else
            {
                var amount = Convert.ToSingle(Economics?.Call("GetPlayerMoney", player.userID));
                if (amount < configData.CurrencyExchange.Econ_ExchangeRate)
                {
                    PopupMessage(player, msg("notEnoughCoins", player.UserIDString));
                    return;
                }
                Economics?.Call("Withdraw", player.userID, (double)configData.CurrencyExchange.Econ_ExchangeRate);
                AddPoints(player.userID, configData.CurrencyExchange.RP_ExchangeRate);
                PopupMessage(player, $"{msg("exchange", player.UserIDString)}{configData.CurrencyExchange.Econ_ExchangeRate} {msg("storeCoins", player.UserIDString)} for {configData.CurrencyExchange.RP_ExchangeRate} {msg("storeRP", player.UserIDString)}");
            }
        }

        [ConsoleCommand("SRUI_Transfer")]
        private void ccmdTransfer(ConsoleSystem.Arg args)
        {
            var player = args.connection.player as BasePlayer;
            if (player == null)
                return;
            var type = args.GetInt(0);
            CreateTransferElement(player, type);
        }

        [ConsoleCommand("SRUI_TransferNext")]
        private void ccmdTransferNext(ConsoleSystem.Arg args)
        {
            var player = args.connection.player as BasePlayer;
            if (player == null)
                return;
            var ID = args.GetString(0);
            var name = args.GetString(1);
            TransferElement(player, name, ID);            
        }

        [ConsoleCommand("SRUI_TransferID")]
        private void ccmdTransferID(ConsoleSystem.Arg args)
        {
            var player = args.connection.player as BasePlayer;
            if (player == null)
                return;
            var ID = args.GetUInt64(0);
            var name = args.GetString(1);
            var amount = args.GetInt(2);
            var hasPoints = CheckPoints(player.userID);
            if (hasPoints is int && (int)hasPoints >= amount)
            {
                if (TakePoints(player.userID, amount) != null)
                {
                    AddPoints(ID, amount);
                    PopupMessage(player, string.Format(msg("transfer3"), amount, msg("storeRP"), name));
                    return;
                }
            }
            PopupMessage(player, msg("notEnoughPoints"));            
        }
       
        [ConsoleCommand("SRUI_DestroyAll")]
        private void cmdDestroyAll(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;            
            DestroyUI(player);
        }
        #endregion
        
        #endregion

        #region Oxide Hooks  
        void Loaded()
        {
            lang.RegisterMessages(messages, this);

            PlayerData = Interface.Oxide.DataFileSystem.GetFile("ServerRewards/data/serverrewards_players");
            RewardData = Interface.Oxide.DataFileSystem.GetFile("ServerRewards/data/serverrewards_rewards");
            NPC_Dealers = Interface.Oxide.DataFileSystem.GetFile("ServerRewards/data/serverrewards_npcids");
            SaleData = Interface.Oxide.DataFileSystem.GetFile("ServerRewards/data/serverrewards_saleprices");

            ItemNames = new Dictionary<string, string>();
            OpenUI = new Dictionary<ulong, OUIData>();
            NPCCreator = new Dictionary<ulong, NPCInfos>();
            PointCache = new Dictionary<ulong, int>();
            UIElements.npcElements = new Dictionary<string, Dictionary<ElementType, CuiElementContainer[]>>();
            UIElements.standardElements = new Dictionary<ElementType, CuiElementContainer[]>();
            UIElements.elementIDs = new List<string>();
        }
        void OnServerInitialized()
        {
            webObject = new GameObject("WebObject");
            uWeb = webObject.AddComponent<UnityWeb>();
            uWeb.Add("http://i.imgur.com/zq9zuKw.jpg", "999999999", 0);
                                              
            LoadData();
            LoadVariables();

            instance = this;

            if (!Kits) PrintWarning($"Kits could not be found! Unable to issue kit rewards");
            if (configData.Options.Use_PTT && !PlaytimeTracker) PrintWarning("Playtime Tracker could not be found! Unable to monitor user playtime");
               
            foreach (var item in ItemManager.itemList)
            {
                if (!ItemNames.ContainsKey(item.itemid.ToString()))
                    ItemNames.Add(item.itemid.ToString(), item.displayName.translated);
            }            

            InitializeAllElements();
            UpdatePriceList();

            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerInit(player);

            SaveLoop();            
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (player != null)
            {
                DestroyUI(player);
                var ID = player.userID; 
                if (PointCache.ContainsKey(ID))
                    if (PointCache[ID] > 0)
                        InformPoints(player);
            }           
        }
        void OnPlayerDisconnected(BasePlayer player) => DestroyUI(player);
        void Unload()
        {
            if (saveTimer != null)
                saveTimer.Destroy();    
            foreach (var player in BasePlayer.activePlayerList)
                DestroyUI(player);
            SaveData();
        }
        #endregion

        #region Functions        
        private void SendMSG(BasePlayer player, string msg, string keyword = "title")
        {
            if (keyword == "title") keyword = lang.GetMessage("title", this, player.UserIDString);
            SendReply(player, configData.Messaging.MSG_MainColor + keyword + "</color>" + configData.Messaging.MSG_Color + msg + "</color>");
        }
        private void InformPoints(BasePlayer player)
        {
            var outstanding = PointCache[player.userID];
            if (configData.Options.NPCDealers_Only)
                SendMSG(player, string.Format(msg("msgOutRewardsnpc", player.UserIDString), outstanding));
            else SendMSG(player, string.Format(msg("msgOutRewards1", player.UserIDString), outstanding));
        }
        private void OpenStore(BasePlayer player, string npcid = null)
        {
            if (!OpenUI.ContainsKey(player.userID))
                OpenUI.Add(player.userID, new OUIData { npcid = npcid });
            else OpenUI[player.userID] = new OUIData { npcid = npcid };

            CloseMap(player);
            OpenNavMenu(player, npcid);

            if (!configData.Categories.Disable_Kits)            
                SwitchElement(player, ElementType.Kits, 0, npcid);
            else if (!configData.Categories.Disable_Items)
                SwitchElement(player, ElementType.Items, 0, npcid);
            else if (!configData.Categories.Disable_Commands)
                SwitchElement(player, ElementType.Commands, 0, npcid);
            else
            {
                OpenUI.Remove(player.userID);
                timer.Once(3.5f, () => { DestroyUI(player); OpenMap(player); });
                PopupMessage(player, "All reward options are currently disabled. Closing the store.");
            }
        }
        private string GetPlaytimeClock(double time)
        {
            TimeSpan dateDifference = TimeSpan.FromSeconds((float)time);
            var days = dateDifference.Days;
            var hours = dateDifference.Hours;
            hours += (days * 24);
            var mins = dateDifference.Minutes;
            var secs = dateDifference.Seconds;
            return string.Format("{0:00}:{1:00}:{2:00}", hours, mins, secs);
        }
        private void GiveItem(BasePlayer player, int itemkey)
        {
            if (rewardData.RewardItems.ContainsKey(itemkey))
            {
                var entry = rewardData.RewardItems[itemkey];
                Item item = ItemManager.CreateByItemID(entry.ID, entry.Amount, entry.Skin);
                if (entry.TargetID != 0) item.blueprintTarget = entry.TargetID;
                item.MoveToContainer(player.inventory.containerMain);
            }
        }
        private object FindPlayer(BasePlayer player, string arg)
        {
            ulong targetID;
            if (ulong.TryParse(arg, out targetID))
            {
                var target = covalence.Players.FindPlayer(arg);
                if (target != null && target.Object is BasePlayer)
                    return target.Object as BasePlayer;
            }

            var targets = covalence.Players.FindPlayers(arg);            

            if (targets.ToArray().Length == 0)
            {
                if (player != null)
                {
                    SendMSG(player, msg("noPlayers", player.UserIDString));
                    return null;
                }
                else return msg("noPlayers");
            }
            if (targets.ToArray().Length > 1)
            {
                if (player != null)
                { 
                    SendMSG(player, msg("multiPlayers", player.UserIDString));
                    return null;
                }
                else return msg("multiPlayers");
            }
            if ((targets.ToArray()[0].Object as BasePlayer) != null)
                return targets.ToArray()[0].Object as BasePlayer;
            else
            {
                if (player != null)
                {
                    SendMSG(player, msg("noPlayers", player.UserIDString));
                    return null;
                }
                else return msg("noPlayers");
            }
        }        
        private bool RemovePlayer(ulong ID)
        {
            if (PointCache.ContainsKey(ID))
            {
                PointCache.Remove(ID);
                return true;
            }
            return false;           
        }                
        void SendEchoConsole(Network.Connection cn, string msg)
        {
            if (Network.Net.sv.IsConnected())
            {
                Network.Net.sv.write.Start();
                Network.Net.sv.write.PacketID(Network.Message.Type.ConsoleMessage);
                Network.Net.sv.write.String(msg);
                Network.Net.sv.write.Send(new Network.SendInfo(cn));
            }
        }        
        #endregion

        #region API
        [HookMethod("AddPoints")]
        public object AddPoints(object userID, int amount)
        {
            ulong ID;
            var success = GetUserID(userID);
            if (success is bool)
                return false;
            else ID = (ulong)success;            

            if (!PointCache.ContainsKey(ID))
                PointCache.Add(ID, amount);
            else PointCache[ID] += amount;
            
            if (configData.Options.LogRPTransactions)
            {
                BasePlayer player = BasePlayer.FindByID(ID);
                var message = $"ADD - (offline){ID} has been issued {amount}x RP";

                if (player != null)
                    message = $"ADD - {ID} - {player.displayName} has been issued {amount}x RP";

                var dateTime = DateTime.Now.ToString("yyyy-MM-dd");
                ConVar.Server.Log($"oxide/logs/ServerRewards - EarntRP_{dateTime}.txt", message);
            }
            return true;
        }
        [HookMethod("TakePoints")]
        public object TakePoints(object userID, int amount, string item = "")
        {
            ulong ID;
            var success = GetUserID(userID);
            if (success is bool)
                return false;
            else ID = (ulong)success;

            if (!PointCache.ContainsKey(ID)) return null;
            PointCache[ID] -= amount;
            
            if (configData.Options.LogRPTransactions)
            {
                BasePlayer player = BasePlayer.FindByID(ID);
                var message = $"TAKE - (offline){ID} has used {amount}x RP";

                if (player != null)
                    message = $"TAKE - {ID} - {player.displayName} has used {amount}x RP";
                if (!string.IsNullOrEmpty(item))
                    message = message + $" on: {item}";
                if (player != null)
                    message = message + $"\nInventory Count's:\n Belt: {player.inventory.containerBelt.itemList.Count}\n Main: {player.inventory.containerMain.itemList.Count}\n Wear: {player.inventory.containerWear.itemList.Count} ";

                var dateTime = DateTime.Now.ToString("yyyy-MM-dd");
                ConVar.Server.Log($"oxide/logs/ServerRewards-SpentRP_{dateTime}.txt", message);
            }
            return true;
        }
        [HookMethod("CheckPoints")]
        public object CheckPoints(object userID)
        {
            ulong ID;
            var success = GetUserID(userID);
            if (success is bool)
                return false;
            else ID = (ulong)success;

            if (!PointCache.ContainsKey(ID)) return null;
            return PointCache[ID];
        }

        private object GetUserID(object userID)
        {
            if (userID == null)
                return false;
            if (userID is ulong)
                return (ulong)userID;
            else if (userID is string)
            {
                ulong ID = 0U;
                if (ulong.TryParse((string)userID, out ID))
                    return ID;
                return false;
            }
            else if (userID is BasePlayer)
                return (userID as BasePlayer).userID;
            else if (userID is IPlayer)
                return ulong.Parse((userID as IPlayer).Id);
            return false;
        }
        #endregion

        #region External API Calls        
        private void CloseMap(BasePlayer player)
        {
            if (LustyMap)
            {
                LustyMap.Call("DisableMaps", player);
            }
        }
        private void OpenMap(BasePlayer player)
        {
            if (LustyMap)
            {
                LustyMap.Call("EnableMaps", player);
            }
        }
        private void AddMapMarker(float x, float z, string name, string icon = "rewarddealer")
        {
            if (LustyMap)
            {
                LustyMap.Call("AddMarker", x, z, name, icon);
                LustyMap.Call("addCustom", icon);
                LustyMap.Call("cacheImages");
            }
        }
        private void RemoveMapMarker(string name)
        {
            if (LustyMap)
                LustyMap.Call("RemoveMarker", name);
        }
        void OnUseNPC(BasePlayer npc, BasePlayer player)
        {
            if (player == null || npc == null) return;
            var npcID = npc.UserIDString;
            if (npcDealers.NPCIDs.ContainsKey(npcID))
            {
                OpenStore(player, npcID);
            }
        }
        #endregion

        #region NPC Registration
        private static FieldInfo serverinput = typeof(BasePlayer).GetField("serverInput", (BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.NonPublic));

        private BasePlayer FindEntity(BasePlayer player)
        {
            var input = serverinput.GetValue(player) as InputState;
            var currentRot = Quaternion.Euler(input.current.aimAngles) * Vector3.forward;
            var rayResult = Ray(player, currentRot);
            if (rayResult is BasePlayer)
            {
                var ent = rayResult as BasePlayer;
                return ent;
            }
            return null;
        }
        private object Ray(BasePlayer player, Vector3 Aim)
        {
            var hits = Physics.RaycastAll(player.transform.position + new Vector3(0f, 1.5f, 0f), Aim);
            float distance = 50f;
            object target = null;

            foreach (var hit in hits)
            {
                if (hit.collider.GetComponentInParent<BaseEntity>() != null)
                {
                    if (hit.distance < distance)
                    {
                        distance = hit.distance;
                        target = hit.collider.GetComponentInParent<BaseEntity>();
                    }
                }
            }
            return target;
        }
        private string isNPCRegistered(string ID)
        {
            if (npcDealers.NPCIDs.ContainsKey(ID)) return msg("npcExist");
            return null;
        }
        [ChatCommand("srnpc")]
        void cmdSRNPC(BasePlayer player, string command, string[] args)
        {
            if (!isAuth(player)) return;
            if (args == null || args.Length == 0)
            {
                SendMSG(player, "/srnpc add - Add a new NPC vendor");
                SendMSG(player, "/srnpc remove - Remove a NPC vendor");
                SendMSG(player, "/srnpc loot - Create a custom loot table for the specified NPC vendor");
                return;
            }
            var NPC = FindEntity(player);
            if (NPC != null)
            {
                var isRegistered = isNPCRegistered(NPC.UserIDString);

                switch (args[0].ToLower())
                {
                    case "add":
                        {
                            if (!string.IsNullOrEmpty(isRegistered))
                            {
                                SendMSG(player, isRegistered);
                                return;
                            }
                            int key = npcDealers.NPCIDs.Count + 1;
                            npcDealers.NPCIDs.Add(NPC.UserIDString, new NPCInfos { ID = key, X = NPC.transform.position.x, Z = NPC.transform.position.z });
                            AddMapMarker(NPC.transform.position.x, NPC.transform.position.z, $"{msg("Reward Dealer")} {key}");
                            SendMSG(player, msg("npcNew"));
                            SaveNPC();
                        }
                        return;
                    case "remove":
                        {
                            if (!string.IsNullOrEmpty(isRegistered))
                            {
                                npcDealers.NPCIDs.Remove(NPC.UserIDString);
                                int i = 1;
                                var data = new Dictionary<string, NPCInfos>();

                                foreach (var npc in npcDealers.NPCIDs)
                                {
                                    RemoveMapMarker($"{msg("Reward Dealer")} {npc.Value}");
                                    data.Add(npc.Key, new NPCInfos { ID = i, X = NPC.transform.position.x, Z = NPC.transform.position.z });
                                    i++;
                                }
                                foreach (var npc in data)
                                {
                                    AddMapMarker(npc.Value.X, npc.Value.Z, $"{msg("Reward Dealer")} {npc.Value.ID}");
                                }
                                npcDealers.NPCIDs = data;

                                SendMSG(player, msg("npcRem"));
                                SaveNPC();
                            }
                            else SendMSG(player, msg("npcNotAdded"));
                        }
                        return;
                    case "loot":
                        {
                            if (!string.IsNullOrEmpty(isRegistered))
                            {
                                if (!NPCCreator.ContainsKey(player.userID))
                                    NPCCreator.Add(player.userID, new NPCInfos());

                                if (npcDealers.NPCIDs[NPC.UserIDString].isCustom)
                                {
                                    NPCCreator[player.userID] = npcDealers.NPCIDs[NPC.UserIDString];
                                    NPCCreator[player.userID].NPCID = NPC.UserIDString;
                                }
                                else NPCCreator[player.userID] = new NPCInfos { NPCID = NPC.UserIDString };

                                var Main = SR_UI.CreateElementContainer(UIMain, UIColors["dark"], "0 0", "1 1");
                                SR_UI.CreatePanel(ref Main, UIMain, UIColors["light"], "0.01 0.02", "0.99 0.98", true);
                                SR_UI.CreateLabel(ref Main, UIMain, "", msg("cldesc", player.UserIDString), 18, "0.25 0.88", "0.75 0.98");
                                SR_UI.CreateLabel(ref Main, UIMain, "", msg("storeKits", player.UserIDString), 18, "0 0.8", "0.33 0.88");
                                SR_UI.CreateLabel(ref Main, UIMain, "", msg("storeItems", player.UserIDString), 18, "0.33 0.8", "0.66 0.88");
                                SR_UI.CreateLabel(ref Main, UIMain, "", msg("storeCommands", player.UserIDString), 18, "0.66 0.8", "1 0.88");
                                CuiHelper.AddUi(player, Main);
                                NPCLootMenu(player);
                            }
                            else SendMSG(player, msg("npcNotAdded"));
                        }
                        return;
                    default:
                        break;
                }
            }
            else SendMSG(player, msg("noNPC", player.UserIDString));
        }
        private void NPCLootMenu(BasePlayer player, int page = 0)
        {
            var Main = SR_UI.CreateElementContainer(UISelect, "0 0 0 0", "0 0", "1 1");
            SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("save", player.UserIDString), 16, "0.85 0.91", "0.95 0.96", "SRUI_NPCSave", TextAnchor.MiddleCenter, 0f);
            SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("storeClose",player.UserIDString), 16, "0.05 0.91", "0.15 0.96", "SRUI_NPCCancel", TextAnchor.MiddleCenter, 0f);
            
            int[] itemNames = rewardData.RewardItems.Keys.ToArray();
            string[] kitNames = rewardData.RewardKits.Keys.ToArray();
            string[] commNames = rewardData.RewardCommands.Keys.ToArray();

            int maxCount = itemNames.Length;
            if (kitNames.Length > maxCount) maxCount = kitNames.Length;
            if (commNames.Length > maxCount) maxCount = commNames.Length;

            if (maxCount > 30)
            {
                var maxpages = (maxCount - 1) / 30 + 1;
                if (page < maxpages - 1)
                    SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("storeNext"), 18, "0.84 0.05", "0.97 0.1", $"SRUI_NPCPage {page + 1}", TextAnchor.MiddleCenter, 0f);
                if (page > 0)
                    SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("storeBack"), 18, "0.03 0.05", "0.16 0.1", $"SRUI_NPCPage {page - 1}", TextAnchor.MiddleCenter, 0f);
            }
            
            int maxComm = (30 * (page + 1));
            if (maxComm > commNames.Length)
                maxComm = commNames.Length;
            int commcount = 30 * page;

            int comm = 0;
            for (int n = commcount; n < maxComm; n++)
            {
                string color1 = UIColors["buttonbg"];
                string text1 = commNames[n];
                string command1 = $"SRUI_CustomList Commands {text1.Replace(" ", "%!%")} true {page}";
                string color2 = "0 0 0 0";
                string text2 = "";
                string command2 = "";

                if (NPCCreator[player.userID].commandList.Contains(commNames[n]))
                {
                    color1 = UIColors["buttoncom"];
                    command1 = $"SRUI_CustomList Commands {text1.Replace(" ", "%!%")} false {page}";
                }
                if (n + 1 < commNames.Length)
                {                    
                    color2 = UIColors["buttonbg"];
                    text2 = commNames[n + 1];
                    command2 = $"SRUI_CustomList Commands {text2.Replace(" ", "%!%")} true {page}";
                    if (NPCCreator[player.userID].commandList.Contains(commNames[n + 1]))
                    {
                        color2 = UIColors["buttoncom"];
                        command2 = $"SRUI_CustomList Commands {text2.Replace(" ", "%!%")} false {page}";
                    }
                    ++n;
                }

                CreateItemButton(ref Main, UISelect, color1, text1, command1, color2, text2, command2, comm, 0.66f);
                comm++;
            }

            int maxKit = (30 * (page + 1));
            if (maxKit > kitNames.Length)
                maxKit = kitNames.Length;
            int kitcount = 30 * page;

            int kits = 0;
            for (int n = kitcount; n < maxKit; n++)
            {
                string color1 = UIColors["buttonbg"];
                string text1 = kitNames[n];
                string command1 = $"SRUI_CustomList Kits {text1.Replace(" ", "%!%")} true {page}";
                string color2 = "0 0 0 0";
                string text2 = "";
                string command2 = "";                
                if (NPCCreator[player.userID].kitList.Contains(kitNames[n]))
                {
                    color1 = UIColors["buttoncom"];
                    command1 = $"SRUI_CustomList Kits {text1.Replace(" ", "%!%")} false {page}";                    
                }
                if (n + 1 < kitNames.Length)
                {                    
                    color2 = UIColors["buttonbg"];
                    text2 = kitNames[n+1];
                    command2 = $"SRUI_CustomList Kits {text2.Replace(" ", "%!%")} true {page}";
                    if (NPCCreator[player.userID].kitList.Contains(kitNames[n+1]))
                    {
                        color2 = UIColors["buttoncom"];
                        command2 = $"SRUI_CustomList Kits {text2.Replace(" ", "%!%")} false {page}";                        
                    }
                    ++n;
                }

                CreateItemButton(ref Main, UISelect, color1, text1, command1, color2, text2, command2, kits, 0f);
                kits++;
            }

            int maxItem = (30 * (page + 1));
            if (maxItem > itemNames.Length)
                maxItem = itemNames.Length;
            int itemcount = 30 * page;

            int items = 0;
            for (int n = itemcount; n < maxItem; n++)
            {
                string color1 = UIColors["buttonbg"];
                string text1 = rewardData.RewardItems[n].DisplayName;
                string command1 = $"SRUI_CustomList Items {n} true {page}";
                string color2 = "0 0 0 0";
                string text2 = "";
                string command2 = "";

                if (NPCCreator[player.userID].itemList.Contains(n))
                {
                    color1 = UIColors["buttoncom"];
                    command1 = $"SRUI_CustomList Items {n} false {page}";
                }
                if (n + 1 < rewardData.RewardItems.Count)
                {                   
                    color2 = UIColors["buttonbg"];
                    text2 = rewardData.RewardItems[n + 1].DisplayName;
                    command2 = $"SRUI_CustomList Items {n + 1} true {page}";
                    if (NPCCreator[player.userID].itemList.Contains(n + 1))
                    {
                        color2 = UIColors["buttoncom"];
                        command2 = $"SRUI_CustomList Items {n + 1} false {page}";
                    }
                    ++n;
                }

                CreateItemButton(ref Main, UISelect, color1, text1, command1, color2, text2, command2, items, 0.33f);
                items++;
            }
            if (NPCCreator[player.userID].allowExchange)
                SR_UI.CreateButton(ref Main, UISelect, UIColors["buttoncom"], msg("allowExchange"), 18, "0.435 0.05", "0.565 0.1", $"SRUI_NPCOption {page} exchange", TextAnchor.MiddleCenter, 0f);
            else SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("allowExchange"), 18, "0.435 0.05", "0.565 0.1", $"SRUI_NPCOption {page} exchange", TextAnchor.MiddleCenter, 0f);

            if (NPCCreator[player.userID].allowSales)
                SR_UI.CreateButton(ref Main, UISelect, UIColors["buttoncom"], msg("allowSales"), 18, "0.27 0.05", "0.4 0.1", $"SRUI_NPCOption {page} sales", TextAnchor.MiddleCenter, 0f);
            else SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("allowSales"), 18, "0.27 0.05", "0.4 0.1", $"SRUI_NPCOption {page} sales", TextAnchor.MiddleCenter, 0f);

            if (NPCCreator[player.userID].allowTransfer)
                SR_UI.CreateButton(ref Main, UISelect, UIColors["buttoncom"], msg("allowTransfer"), 18, "0.6 0.05", "0.73 0.1", $"SRUI_NPCOption {page} transfer", TextAnchor.MiddleCenter, 0f);
            else SR_UI.CreateButton(ref Main, UISelect, UIColors["buttonbg"], msg("allowTransfer"), 18, "0.6 0.05", "0.73 0.1", $"SRUI_NPCOption {page} transfer", TextAnchor.MiddleCenter, 0f);

            CuiHelper.DestroyUi(player, UISelect);
            CuiHelper.AddUi(player, Main);
        }
        void CreateItemButton(ref CuiElementContainer Main, string panel, string b1color, string b1text, string b1command, string b2color, string b2text, string b2command, int number, float xPos)
        {
            float offsetX = 0.01f;
            float offsetY = 0.0047f;
            Vector2 dimensions = new Vector2(0.15f, 0.04f);
            Vector2 origin = new Vector2(xPos + offsetX, 0.76f);

            Vector2 offset = new Vector2(0, (offsetY + dimensions.y) * number);

            Vector2 posMin = origin - offset;
            Vector2 posMax = posMin + dimensions;

            SR_UI.CreateButton(ref Main, panel, b1color, b1text, 14, $"{posMin.x} {posMin.y}", $"{posMax.x} {posMax.y}", b1command, TextAnchor.MiddleCenter, 0f);
            SR_UI.CreateButton(ref Main, panel, b2color, b2text, 14, $"{posMin.x + offsetX + dimensions.x} {posMin.y}", $"{posMax.x + offsetX + dimensions.x} {posMax.y}", b2command, TextAnchor.MiddleCenter, 0f);
        }  
              
        [ConsoleCommand("SRUI_CustomList")]
        private void cmdCustomList(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;

            string type = arg.GetString(0);
            string key = arg.GetString(1).Replace("%!%", " ");
            bool isAdding = arg.GetBool(2);
            int page = arg.GetInt(3);

            switch (type)
            {
                case "Kits":
                    if (isAdding)
                        NPCCreator[player.userID].kitList.Add(key);
                    else NPCCreator[player.userID].kitList.Remove(key);
                    break;
                case "Commands":
                    if (isAdding)
                        NPCCreator[player.userID].commandList.Add(key);
                    else NPCCreator[player.userID].commandList.Remove(key);
                    break;
                case "Items":
                    var id = int.Parse(key);
                    if (isAdding)
                        NPCCreator[player.userID].itemList.Add(id);
                    else NPCCreator[player.userID].itemList.Remove(id);
                    break;                                 
            }
            NPCLootMenu(player, page);
        }
        [ConsoleCommand("SRUI_NPCPage")]
        private void cmdNPCPage(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;

            int page = arg.GetInt(0);           
            NPCLootMenu(player, page);
        }
        [ConsoleCommand("SRUI_NPCOption")]
        private void cmdNPCOption(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            switch (arg.Args[1])
            {
                case "exchange":
                    if (NPCCreator[player.userID].allowExchange)
                        NPCCreator[player.userID].allowExchange = false;
                    else NPCCreator[player.userID].allowExchange = true;
                    break;
                case "transfer":
                    if (NPCCreator[player.userID].allowTransfer)
                        NPCCreator[player.userID].allowTransfer = false;
                    else NPCCreator[player.userID].allowTransfer = true;
                    break;
                case "sales":
                    if (NPCCreator[player.userID].allowSales)
                        NPCCreator[player.userID].allowSales = false;
                    else NPCCreator[player.userID].allowSales = true;
                    break;
                default:
                    break;
            }
            int page = arg.GetInt(0);
            NPCLootMenu(player, page);
        }
        [ConsoleCommand("SRUI_NPCCancel")]
        private void cmdNPCCancel(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            NPCCreator.Remove(player.userID);
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.DestroyUi(player, UISelect);
            SendReply(player, msg("clcanc", player.UserIDString));
        }
        [ConsoleCommand("SRUI_NPCSave")]
        private void cmdNPCSave(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;

            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.DestroyUi(player, UISelect);            
            var info = NPCCreator[player.userID];
            npcDealers.NPCIDs[info.NPCID].isCustom = true;
            npcDealers.NPCIDs[info.NPCID].itemList = info.itemList;
            npcDealers.NPCIDs[info.NPCID].commandList = info.commandList;
            npcDealers.NPCIDs[info.NPCID].kitList = info.kitList;
            SaveNPC();
            CreateNPCMenu(info.NPCID);
            NPCCreator.Remove(player.userID);
            SendReply(player, msg("clootsucc", player.UserIDString));
        }
        #endregion

        #region Sale updater
        void UpdatePriceList()
        {
            bool changed = false;            
            foreach (var item in ItemManager.itemList)
            {
                if (!saleData.Prices.ContainsKey(item.itemid))
                {
                    SaleInfo saleInfo = new SaleInfo { Enabled = false, SalePrice = 1, Name = item.displayName.english };
                    saleData.Prices.Add(item.itemid, new Dictionary<ulong, SaleInfo>());
                    saleData.Prices[item.itemid].Add(0, saleInfo);
                    changed = true;
                }
                if (HasSkins(item))
                {
                    foreach (var skin in ItemSkinDirectory.ForItem(item))
                    {
                        if (!saleData.Prices[item.itemid].ContainsKey(Convert.ToUInt64(skin.id)))
                        {
                            SaleInfo saleInfo = new SaleInfo { Enabled = false, SalePrice = 1, Name = skin.invItem.displayName.english };
                            saleData.Prices[item.itemid].Add(Convert.ToUInt64(skin.id), saleInfo);
                            changed = true;
                        }
                    }
                }
            }
            if (changed)
                SavePrices();
        }
        bool HasSkins(ItemDefinition item)
        {
            if (item != null)
            {
                var skins = ItemSkinDirectory.ForItem(item).ToList();
                if (skins.Count > 0)
                    return true;
            }
            return false;
        }
        #endregion

        #region Chat Commands 
        [ChatCommand("s")]
        private void cmdStore(BasePlayer player, string command, string[] args)
        {
            if ((configData.Options.NPCDealers_Only && isAuth(player)) || !configData.Options.NPCDealers_Only)
            {
                OpenStore(player);
            }            
        }

        [ChatCommand("rewards")]
        private void cmdRewards(BasePlayer player, string command, string[] args)
        {
            if (args == null || args.Length == 0)
            {
                SendMSG(player, "V " + Version, msg("title", player.UserIDString));                
                SendMSG(player, msg("chatCheck1", player.UserIDString), msg("chatCheck", player.UserIDString));
                SendMSG(player, msg("storeSyn2", player.UserIDString), msg("storeSyn21", player.UserIDString));
                if (isAuth(player))
                {
                    SendMSG(player, msg("chatAddKit", player.UserIDString), msg("addSynKit", player.UserIDString));
                    SendMSG(player, msg("chatAddItem", player.UserIDString), msg("addSynItem", player.UserIDString));
                    SendMSG(player, msg("chatAddCommand", player.UserIDString), msg("addSynCommand", player.UserIDString));
                    SendMSG(player, msg("chatRemove", player.UserIDString), msg("remSynKit", player.UserIDString));
                    SendMSG(player, msg("chatRemove", player.UserIDString), msg("remSynItem", player.UserIDString));
                    SendMSG(player, msg("chatRemove", player.UserIDString), msg("remSynCommand", player.UserIDString));
                    SendMSG(player, msg("chatList1", player.UserIDString), msg("chatList", player.UserIDString));                    
                }
                return;
            }
            if (args.Length >= 1)
            {
                switch (args[0].ToLower())
                {
                    case "check":
                        if (!PointCache.ContainsKey(player.userID))
                        {
                            SendMSG(player, msg("errorProfile", player.UserIDString));
                            Puts(msg("errorPCon", player.UserIDString), player.displayName);
                            return;
                        }
                        int points = PointCache[player.userID];
                        SendMSG(player, string.Format(msg("tpointsAvail", player.UserIDString), points));
                        return;
                    case "list":
                        if (isAuth(player))
                            foreach (var entry in rewardData.RewardItems)
                            {
                                SendEchoConsole(player.net.connection, string.Format("ID: {0} - Type: {1} - Amount: {2} - Cost: {3}", entry.Key, entry.Value.DisplayName, entry.Value.Amount, entry.Value.Cost));
                            }
                        return;                    
                    case "add":
                        if (args.Length >= 2)
                            if (isAuth(player))
                            {
                                switch (args[1].ToLower())
                                {
                                    case "kit":
                                        if (args.Length == 5)
                                        {
                                            int i = -1;
                                            int.TryParse(args[4], out i);
                                            if (i <= 0) { SendMSG(player, msg("noCost", player.UserIDString)); return; }

                                            object isKit = Kits?.Call("isKit", new object[] { args[3] });
                                            if (isKit is bool)
                                                if ((bool)isKit)
                                                {
                                                    if (!rewardData.RewardKits.ContainsKey(args[2]))
                                                        rewardData.RewardKits.Add(args[2], new KitInfo() { KitName = args[3], Cost = i, Description = "" });
                                                    else
                                                    {
                                                        SendMSG(player, string.Format(msg("rewardExisting", player.UserIDString), args[2]));
                                                        return;
                                                    }
                                                    SendMSG(player, string.Format(msg("addSuccess", player.UserIDString), "kit", args[2], i));
                                                    SaveRewards();
                                                    return;
                                                }
                                            SendMSG(player, msg("noKit", player.UserIDString), "");
                                            return;
                                        }
                                        SendMSG(player, "", msg("addSynKit", player.UserIDString));
                                        return;
                                    case "item":
                                        if (args.Length >= 3)
                                        {
                                            int i = -1;
                                            int.TryParse(args[2], out i);
                                            if (i <= 0) { SendMSG(player, msg("noCost", player.UserIDString)); return; }
                                            if (player.GetActiveItem() != null)
                                            {
                                                Item item = player.GetActiveItem();
                                                if (item == null)
                                                {
                                                    SendMSG(player, "", "Unable to get the required item information");
                                                    return;
                                                }
                                                ItemInfo newItem = new ItemInfo
                                                {
                                                    Amount = item.amount,                                                    
                                                    Cost = i,
                                                    DisplayName = item.info.displayName.english,
                                                    ID = item.info.itemid,
                                                    Skin = item.skin,
                                                    URL = "",
                                                    TargetID = !item.IsBlueprint() ? 0 : item.blueprintTarget
                                                };                                                
                                                rewardData.RewardItems.Add(rewardData.RewardItems.Count, newItem);
                                                SendMSG(player, string.Format(msg("addSuccess", player.UserIDString), "item", newItem.DisplayName, i));
                                                SaveRewards();
                                                return;
                                            }
                                            SendMSG(player, "", msg("itemInHand", player.UserIDString));
                                            return;
                                        }
                                        SendMSG(player, "", msg("addSynItem", player.UserIDString));
                                        return;
                                    case "command":
                                        
                                        if (args.Length == 5)
                                        {
                                            int i = -1;
                                            int.TryParse(args[4], out i);
                                            if (i <= 0) { SendMSG(player, msg("noCost", player.UserIDString)); return; }
                                            rewardData.RewardCommands.Add(args[2], new CommandInfo { Command = new List<string> { args[3] }, Cost = i, Description = "" });
                                            SendMSG(player, string.Format(msg("addSuccess", player.UserIDString), "command", args[2], i));
                                            SaveRewards();
                                            return;
                                        }
                                        SendMSG(player, "", msg("addSynCommand", player.UserIDString));
                                        return;
                                }
                            }
                        return;

                    case "remove":
                        if (isAuth(player))
                            if (args.Length == 3)
                            {
                                switch (args[1].ToLower())
                                {
                                    case "kit":
                                        if (rewardData.RewardKits.ContainsKey(args[2]))
                                        {
                                            rewardData.RewardKits.Remove(args[2]);
                                            SendMSG(player, "", string.Format(msg("remSuccess", player.UserIDString), args[2]));
                                            SaveRewards();
                                            return;
                                        }
                                        SendMSG(player, msg("noKitRem", player.UserIDString), "");
                                        return;
                                    case "item":
                                        int i;
                                        if (!int.TryParse(args[2], out i))
                                        {
                                            SendMSG(player, "", msg("itemIDHelp", player.UserIDString));
                                            return;
                                        }
                                        if (rewardData.RewardItems.ContainsKey(i))
                                        {
                                            SendMSG(player, "", string.Format(msg("remSuccess", player.UserIDString), rewardData.RewardItems[i].DisplayName));
                                            rewardData.RewardItems.Remove(i);
                                            Dictionary<int, ItemInfo> newList = new Dictionary<int, ItemInfo>();
                                            int n = 0;
                                            foreach(var entry in rewardData.RewardItems)
                                            {
                                                newList.Add(n, entry.Value);
                                                n++;
                                            }
                                            rewardData.RewardItems = newList;
                                            SaveRewards();
                                            return;
                                        }
                                        SendMSG(player, msg("noItemRem", player.UserIDString), "");
                                        return;
                                    case "command":
                                        if (rewardData.RewardCommands.ContainsKey(args[2]))
                                        {
                                            rewardData.RewardKits.Remove(args[2]);
                                            SendMSG(player, "", string.Format(msg("remSuccess", player.UserIDString), args[2]));
                                            SaveRewards();
                                            return;
                                        }
                                        SendMSG(player, msg("noCommandRem", player.UserIDString), "");
                                        return;
                                }                               
                            }
                
                        return;                    
                }                
            }
        }               

        

        [ChatCommand("sr")]
        private void cmdSR(BasePlayer player, string command, string[] args)
        {
            if (!isAuth(player)) return;
            if (args == null || args.Length == 0)
            {
                SendMSG(player, msg("srAdd2", player.UserIDString), "/sr add <playername> <amount>");
                SendMSG(player, msg("srTake2", player.UserIDString), "/sr take <playername> <amount>");
                SendMSG(player, msg("srClear2", player.UserIDString), "/sr clear <playername>");
                SendMSG(player, msg("srCheck", player.UserIDString), "/sr check <playername>");
                SendMSG(player, msg("srAdd3", player.UserIDString), "/sr add all <amount>");
                SendMSG(player, msg("srTake3", player.UserIDString), "/sr take all <amount>");
                SendMSG(player, msg("srClear3", player.UserIDString), "/sr clear all");                
                return;
            }
            if (args.Length >= 2)
            {
                if(args[1].ToLower() == "all")
                {
                    switch (args[0].ToLower())
                    {
                        case "add":
                            if (args.Length == 3)
                            {
                                int i = 0;
                                if (int.TryParse(args[2], out i))
                                {
                                    var pList = PointCache.Keys.ToArray();
                                    foreach (var entry in pList)
                                        AddPoints(entry, i);
                                    SendMSG(player, string.Format(msg("addPointsAll", player.UserIDString), i));
                                }
                            }
                            return;

                        case "take":
                            if (args.Length == 3)
                            {
                                int i = 0;
                                if (int.TryParse(args[2], out i))
                                {
                                    var pList = PointCache.Keys.ToArray();
                                    foreach (var entry in pList)
                                    {
                                        var amount = CheckPoints(entry);
                                        if (amount is int)
                                        {
                                            if ((int)amount >= i)
                                                TakePoints(entry, i);
                                            else TakePoints(entry, (int)amount);
                                        }
                                    }

                                    SendMSG(player, string.Format(msg("remPointsAll", player.UserIDString), i));
                                }                                
                            }
                            return;
                        case "clear":
                            PointCache.Clear();
                            SendMSG(player, msg("clearAll", player.UserIDString));
                            return;
                    }
                }
                object target = FindPlayer(player, args[1]);
                if (target != null && target is BasePlayer)
                {
                    switch (args[0].ToLower())
                    {
                        case "add":
                            if (args.Length == 3)
                            {
                                int i = 0;
                                int.TryParse(args[2], out i);
                                if (i != 0)
                                    if (AddPoints((target as BasePlayer).userID, i) != null)
                                        SendMSG(player, string.Format(msg("addPoints", player.UserIDString), (target as BasePlayer).displayName, i));
                            }
                            return;

                        case "take":
                            if (args.Length == 3)
                            {
                                int i = 0;
                                int.TryParse(args[2], out i);
                                if (i != 0)
                                    if (TakePoints((target as BasePlayer).userID, i) != null)
                                        SendMSG(player, string.Format(msg("removePoints", player.UserIDString), i, (target as BasePlayer).displayName));
                            }
                            return;
                        case "clear":
                            RemovePlayer((target as BasePlayer).userID);
                            SendMSG(player, string.Format(msg("clearPlayer", player.UserIDString), (target as BasePlayer).displayName));
                            return;
                        case "check":
                            if (args.Length == 2)
                            {
                                if (PointCache.ContainsKey((target as BasePlayer).userID))
                                {
                                    var points = PointCache[(target as BasePlayer).userID];
                                    SendMSG(player, string.Format("{0} - {2}: {1}", (target as BasePlayer).displayName, points, msg("storeRP")));
                                    return;
                                }
                                SendMSG(player, string.Format(msg("noProfile", player.UserIDString), (target as BasePlayer).displayName));
                            }
                            return;
                    }
                }                
            }
        }

        [ConsoleCommand("sr")]
        private void ccmdSR(ConsoleSystem.Arg arg)
        {
            if (!isAuthCon(arg)) return;
            if (arg.Args == null || arg.Args.Length == 0)
            {
                SendReply(arg, "sr add <playername> <amount>" + msg("srAdd2"));
                SendReply(arg, "sr take <playername> <amount>" + msg("srTake2"));
                SendReply(arg, "sr clear <playername>" + msg("srClear2"));
                SendReply(arg, "sr check <playername>" + msg("srCheck"));
                SendReply(arg, "sr add all <amount>" + msg("srAdd3"));
                SendReply(arg, "sr take all <amount>" + msg("srTake3"));
                SendReply(arg, "sr clear all" + msg("srClear3"));
                return;
            }
            if (arg.Args.Length >= 2)
            {
                if (arg.Args[1].ToLower() == "all")
                {
                    switch (arg.Args[0].ToLower())
                    {
                        case "add":
                            if (arg.Args.Length == 3)
                            {
                                int i = 0;
                                if (int.TryParse(arg.Args[2], out i))
                                {
                                    var pList = PointCache.Keys.ToArray();
                                    foreach (var entry in pList)
                                        AddPoints(entry, i);
                                    SendReply(arg, string.Format(msg("addPointsAll"), i));
                                }
                            }
                            return;

                        case "take":
                            if (arg.Args.Length == 3)
                            {
                                int i = 0;
                                if (int.TryParse(arg.Args[2], out i))
                                {
                                    var pList = PointCache.Keys.ToArray();
                                    foreach (var entry in pList)
                                    {
                                        var amount = CheckPoints(entry);
                                        if (amount is int)
                                        {
                                            if ((int)amount >= i)
                                                TakePoints(entry, i);
                                            else TakePoints(entry, (int)amount);
                                        }                                        
                                    }

                                    SendReply(arg, string.Format(msg("remPointsAll"), i));
                                }
                            }
                            return;
                        case "clear":
                            PointCache.Clear();
                            SendReply(arg, msg("clearAll"));
                            return;
                    }
                }
                object target = FindPlayer(null, arg.Args[1]);
                if (target is string)
                {
                    SendReply(arg, (string)target);
                    return;
                }
                if (target != null && target is BasePlayer)
                {
                    switch (arg.Args[0].ToLower())
                    {
                        case "add":
                            if (arg.Args.Length == 3)
                            {
                                int i = 0;
                                int.TryParse(arg.Args[2], out i);
                                if (i != 0)
                                    if (AddPoints((target as BasePlayer).userID, i) != null)
                                        SendReply(arg, string.Format(msg("addPoints"), (target as BasePlayer).displayName, i));
                            }
                            return;
                        case "take":
                            if (arg.Args.Length == 3)
                            {
                                int i = 0;
                                int.TryParse(arg.Args[2], out i);
                                if (i != 0)
                                    if (TakePoints((target as BasePlayer).userID, i) != null)
                                        SendReply(arg, string.Format(msg("removePoints"), i, (target as BasePlayer).displayName));
                            }
                            return;
                        case "clear":
                            RemovePlayer((target as BasePlayer).userID);
                            SendReply(arg, string.Format(msg("clearPlayer"), (target as BasePlayer).displayName));
                            return;
                        case "check":
                            if (arg.Args.Length == 2)
                            {
                                if (PointCache.ContainsKey((target as BasePlayer).userID))
                                {
                                    var points = PointCache[(target as BasePlayer).userID];
                                    SendReply(arg, string.Format("{0} - {2}: {1}", (target as BasePlayer).displayName, points, msg("storeRP")));
                                    return;
                                }
                                SendReply(arg, string.Format(msg("noProfile"), (target as BasePlayer).displayName));
                            }
                            return;
                    }
                }                    
            }
        }

        bool isAuth(BasePlayer player)
        {
            if (player.net.connection != null)
                if (player.net.connection.authLevel < 1)
                    return false;
            return true;
        }
        bool isAuthCon(ConsoleSystem.Arg arg)
        {
            if (arg.connection != null)
            {
                if (arg.connection.authLevel < 1)
                {
                    SendReply(arg, "You dont not have permission to use this command.");
                    return false;
                }
            }
            return true;
        }        
        #endregion

        #region Data
        void SaveData()
        {
            playerData.Players = PointCache;
            PlayerData.WriteObject(playerData);
            Puts("Saved player data");            
        }
        void SaveRewards()
        {
            RewardData.WriteObject(rewardData);
            Puts("Saved reward data");
        }
        void SaveNPC()
        {
            NPC_Dealers.WriteObject(npcDealers);
            Puts("Saved NPC data");
        }
        void SavePrices() => SaleData.WriteObject(saleData);
        private void SaveLoop() => saveTimer = timer.Once(configData.Options.Save_Interval * 60, () => { SaveData(); SaveLoop(); });
            
        void LoadData()
        {
            try
            {
                playerData = PlayerData.ReadObject<PointData>();
                PointCache = playerData.Players;
            }
            catch
            {
                Puts("Couldn't load player data, creating new datafile");
                playerData = new PointData();
            }
            try
            {
                rewardData = RewardData.ReadObject<RewardDataStorage>();
            }
            catch
            {
                Puts("Couldn't load reward data, creating new datafile");
                rewardData = new RewardDataStorage();
            } 
            try
            {
                npcDealers = NPC_Dealers.ReadObject<NPCDealers>();
            }
            catch
            {
                Puts("Couldn't load NPC data, creating new datafile");
                npcDealers = new NPCDealers();
            }
            try
            {
                saleData = SaleData.ReadObject<SaleDataStorage>();
            }
            catch
            {
                Puts("Couldn't load sale pricings, creating new datafile");
                saleData = new SaleDataStorage();
            }
        }        
        #endregion

        #region Config
        class Tabs
        {
            public bool Disable_Kits { get; set; }
            public bool Disable_Items { get; set; }
            public bool Disable_Commands { get; set; }
            public bool Disable_CurrencyExchange { get; set; }
            public bool Disable_CurrencyTransfer { get; set; }
            public bool Disable_SellersScreen { get; set; }
        }
        class Messaging
        {
            public string MSG_MainColor { get; set; }
            public string MSG_Color { get; set; }
        }
        class Exchange
        {
            public int Econ_ExchangeRate { get; set; }
            public int RP_ExchangeRate { get; set; }
        }
        class Options
        {
            public bool LogRPTransactions { get; set; }
            public int Save_Interval { get; set; }
            public bool NPCDealers_Only { get; set; }
            public bool Use_PTT { get; set; }
        }
        class UIOptions
        {
            public bool DisableUI_FadeIn { get; set; }
            public bool ShowKitContents { get; set; }
        }
        class ConfigData
        {
            public Tabs Categories { get; set; }
            public Exchange CurrencyExchange { get; set; }
            public Messaging Messaging { get; set; }
            public Options Options { get; set; }
            public UIOptions UI_Options { get; set; }           
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            configData = Config.ReadObject<ConfigData>();
        }
        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            ConfigData config = new ConfigData
            {
                Categories = new Tabs
                {
                    Disable_Commands = false,
                    Disable_Items = false,
                    Disable_Kits = false,
                    Disable_CurrencyExchange = false,
                    Disable_CurrencyTransfer = false,
                    Disable_SellersScreen = false                 
                },
                CurrencyExchange = new Exchange
                {
                    Econ_ExchangeRate = 250,
                    RP_ExchangeRate = 1
                },
                Messaging = new Messaging
                {
                    MSG_MainColor = "<color=orange>",
                    MSG_Color = "<color=#939393>"
                },
                Options = new Options
                {
                    LogRPTransactions = true,
                    NPCDealers_Only = false,
                    Save_Interval = 10,
                    Use_PTT = true
                },
                UI_Options = new UIOptions
                {
                    DisableUI_FadeIn = false,
                    ShowKitContents = true
                }                
            };
            SaveConfig(config);
        }
        void SaveConfig(ConfigData config)
        {
            Config.WriteObject(config, true);
        }
        #endregion

        #region Unity WWW
        class QueueItem
        {
            public string url;
            public string itemid;
            public ulong skinid;            
            public QueueItem(string ur, string na, ulong sk)
            {
                url = ur;
                itemid = na;
                skinid = sk;               
            }
        }
        class UnityWeb : MonoBehaviour
        {
            ServerRewards filehandler;
            const int MaxActiveLoads = 3;
            private Queue<QueueItem> QueueList = new Queue<QueueItem>();
            static byte activeLoads;
            private MemoryStream stream = new MemoryStream();

            private void Awake()
            {
                filehandler = (ServerRewards)Interface.Oxide.RootPluginManager.GetPlugin(nameof(ServerRewards));
            }
            private void OnDestroy()
            {
                QueueList.Clear();
                filehandler = null;
            }
            public void Add(string url, string itemid, ulong skinid)
            {
                QueueList.Enqueue(new QueueItem(url, itemid, skinid));
                if (activeLoads < MaxActiveLoads) Next();
            }

            void Next()
            {
                if (QueueList.Count <= 0) return;
                activeLoads++;
                StartCoroutine(WaitForRequest(QueueList.Dequeue()));
            }
            private void ClearStream()
            {
                stream.Position = 0;
                stream.SetLength(0);
            }

            IEnumerator WaitForRequest(QueueItem info)
            {
                using (var www = new WWW(info.url))
                {
                    yield return www;
                    if (filehandler == null) yield break;
                    if (www.error != null)
                    {
                        print(string.Format("Image loading fail! Error: {0}", www.error));
                    }
                    else
                    {
                        if (!filehandler.rewardData.storedImages.ContainsKey(info.itemid.ToString()))
                            filehandler.rewardData.storedImages.Add(info.itemid.ToString(), new Dictionary<ulong, uint>());
                        if (!filehandler.rewardData.storedImages[info.itemid.ToString()].ContainsKey(info.skinid))
                        {
                            ClearStream();
                            stream.Write(www.bytes, 0, www.bytes.Length);
                            uint textureID = FileStorage.server.Store(stream, FileStorage.Type.png, uint.MaxValue);
                            ClearStream();
                            filehandler.rewardData.storedImages[info.itemid.ToString()].Add(info.skinid, textureID);
                        }
                    }
                    activeLoads--;
                    if (QueueList.Count > 0) Next();
                    else if (QueueList.Count <= 0) filehandler.SaveRewards();
                }
            }
        }

        [ConsoleCommand("loadimages")]
        private void cmdLoadImages(ConsoleSystem.Arg arg)
        {
            if (arg.connection == null)
            {
                LoadImages(false);
            }
        }
        [ConsoleCommand("loadlocalimages")]
        private void cmdLoadLocalImages(ConsoleSystem.Arg arg)
        {
            if (arg.connection == null)
            {
                LoadImages(true);
            }
        }
        private void LoadImages(bool isLocal)
        {
            string dir = "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "ServerRewards" + Path.DirectorySeparatorChar + "Icons" + Path.DirectorySeparatorChar;

            foreach(var entry in rewardData.storedImages)
            {                
                foreach(var image in entry.Value)
                {
                    FileStorage.server.Remove(image.Value, FileStorage.Type.png, uint.MaxValue);
                }
            }
            rewardData.storedImages.Clear();
            uWeb.Add("http://i.imgur.com/zq9zuKw.jpg", "999999999", 0);
            foreach (var entry in rewardData.RewardItems)
            {               
                if (!string.IsNullOrEmpty(entry.Value.URL))
                {
                    var url = entry.Value.URL;
                    if (isLocal)
                        url = dir + url;
                    uWeb.Add(url, entry.Value.ID.ToString(), entry.Value.Skin);
                }
            }

            foreach (var entry in rewardData.RewardKits)
            {               
                if (!string.IsNullOrEmpty(entry.Value.URL))
                {
                    var url = entry.Value.URL;
                    if (isLocal)
                        url = dir + url;
                    uWeb.Add(url, entry.Value.KitName, 0);
                }
            }
        }
        #endregion

        #region Localization
        string msg(string key, string id = null) => lang.GetMessage(key, this, id);
        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "ServerRewards: " },
            { "msgOutRewards1", "You currently have {0} unspent reward tokens! Spend them in the reward store using /s" },
            { "msgOutRewardsnpc", "You currently have {0} unspent reward tokens! Spend them in the reward store by finding a NPC reward dealer" },
            {"msgNoPoints", "You dont have enough reward points" },
            {"errorProfile", "Error getting your profile from the database"},
            {"errorPCon", "There was a error pulling {0}'s profile from the database" },
            {"errorItemPlayer", "There was an error whilst retrieving your reward, please contact an administrator" },
            {"noFind", "Unable to find {0}" },
            {"rInviter", "You have recieved {0} reward points for inviting {1}" },
            {"rInvitee", "You have recieved {0} reward points" },
            {"refSyn", "/refer <playername>" },
            {"remSynKit", "/rewards remove kit <name>" },
            {"remSynItem", "/rewards remove item <number>" },
            {"remSynCommand", "/rewards remove command <name>" },
            {"noKit", "Kit's could not confirm that the kit exists. Check Kit's and your kit data" },
            {"noKitRem", "Unable to find a reward kit with that name" },
            {"noItemRem", "Unable to find a reward item with that number" },
            {"noCommandRem", "Unable to find a reward command with that name" },
            {"remSuccess", "You have successfully removed {0} from the rewards list" },
            {"addSynKit", "/rewards add kit <Name> <kitname> <cost>" },
            {"addSynItem", "/rewards add item <cost>" },
            {"addSynCommand", "/rewards add command <Name> <command> <cost>" },
            {"storeSyn21", "/s" },
            {"storeSyn2", " - Opens the reward store" },
            {"addSuccess", "You have added the {0} {1}, available for {2} tokens" },
            {"rewardExisting", "You already have a reward kit named {0}" },
            {"noCost", "You must enter a reward cost" },
            {"reward", "Reward: " },
            {"desc1", ", Description: " },
            {"cost", ", Cost: " },
            {"claimSyn", "/claim <rewardname>" },
            {"noReward", "This reward doesnt exist!" },
            {"claimSuccess", "You have claimed {0}" },
            {"multiPlayers", "Multiple players found with that name" },
            {"noPlayers", "No players found" },
            {"tpointsAvail", "You have {0} reward point(s) to spend" },
            {"rewardAvail", "Available Rewards;" },
            {"chatClaim", " - Claim the reward"},
            {"chatCheck", "/rewards check" },
            {"chatCheck1", " - Displays you current time played and current reward points"},
            {"chatList", "/rewards list"},
            {"chatList1", " - Dumps item rewards and their ID numbers to console"},
            {"chatAddKit", " - Add a new reward kit"},
            {"chatAddItem", " - Add a new reward item"},
            {"chatAddCommand", " - Add a new reward command"},
            {"chatRemove", " - Removes a reward"},
            {"chatRefer", " - Acknowledge your referral from <playername>"},
            {"alreadyRefer1", "You have already been referred" },
            {"addPoints", "You have given {0} {1} points" },
            {"removePoints", "You have taken {0} points from {1}"},
            {"clearPlayer", "You have removed {0}'s reward profile" },
            {"addPointsAll", "You have given everyone {0} points" },
            {"remPointsAll", "You have taken {0} points from everyone"},
            {"clearAll", "You have removed all reward profiles" },
            {"srAdd2", " - Adds <amount> of reward points to <playername>" },
            {"srAdd3", " - Adds <amount> of reward points to all players" },
            {"srTake2", " - Takes <amount> of reward points from <playername>" },
            {"srTake3", " - Takes <amount> of reward points from all players" },
            {"srClear2", " - Clears <playername>'s reward profile" },
            {"srClear3", " - Clears all reward profiles" },
            {"srCheck", " - Check a players point count" },
            {"notSelf", "You cannot refer yourself. But nice try!" },
            {"noCommands", "There are currently no commands set up" },
            {"noItems", "There are currently no items set up" },
            {"noKits", "There are currently no kits set up" },
            {"exchange1", "Here you can exchange economics money (Coins) for reward points (RP) and vice-versa" },
            {"exchange2", "The current exchange rate is " },
            {"buyKit", "You have purchased a {0} kit" },
            {"notEnoughPoints", "You don't have enough points" },
            {"errorKit", "There was a error purchasing this kit. Contact a administrator" },
            {"buyCommand", "You have purchased the {0} command" },
            {"errorCommand", "There was a error purchasing this command. Contact a administrator" },
            {"buyItem", "You have purchased {0}x {1}" },
            {"errorItem", "There was a error purchasing this item. Contact a administrator" },
            {"notEnoughCoins", "You do not have enough coins to exchange" },            
            {"exchange", "You have exchanged " },
            {"itemInHand", "You must place the item you wish to add in your hands" },
            {"itemIDHelp", "You must enter the items number. Type /rewards list to see available entries" },
            {"noProfile", "{0} does not have any saved data" },
            {"permAdd1", "/rewards permission add <permname> <amount>" },
            {"permAdd2", " - Add a new permission to give a different amount of playtime points" },
            {"permRem1", "/rewards permission remove <permname>" },
            {"permRem2", " - Remove a custom permission" },
            {"permCreated", "You have created a new permission {0} with a point value of {1}" },
            {"permRemoved", "You have successfully removed the permission {0}" },
            {"permList1", "/rewards permission list" },
            {"permList2", " - Lists all custom permissions and their point value" },
            {"permListSyn", "Permission: {0}, Value: {1}" },
            {"storeTitle", "Reward Store" },
            {"storeKits", "Kits" },
            {"storeCommands", "Commands" },
            {"storeItems", "Items" },
            {"storeExchange", "Exchange" },
            {"storeTransfer", "Transfer" },
            {"storeClose", "Close" },
            {"storeNext", "Next" },
            {"storeBack", "Back" },
            {"storePlaytime", "Playtime" },
            {"storeCost", "Cost" },
            {"storeRP", "RP" },
            {"storeEcon", "Economics" },
            {"storeCoins", "Coins" },
            {"npcExist", "This NPC is already a Reward Dealer" },
            {"npcNew", "You have successfully added a new Reward Dealer" },
            {"npcRem", "You have successfully removed a Reward Dealer" },
            {"npcNotAdded", "This NPC is not a Reward Dealer" },
            {"noNPC", "Could not find a NPC to register" },
            {"Reward Dealer", "Reward Dealer" },
            {"fullInv", "Your inventory is full" },
            {"transfer1", "Select a user to transfer money to" },
            {"transfer2", "Select a amount to send" },
            {"transfer3", "You have transferred {0} {1} to {2}" },
            {"clootsucc", "You have successfully created a new loot list for this NPC" },
            {"save", "Save"},
            {"cldesc", "Select items, kits and commands to add to this NPC's custom store list" },
            {"clcanc", "You have cancelled custom loot creation"},
            {"sellItems", "Sell Items" },
            {"selectSell", "Select an item to sell" },
            {"Name", "Name" },
            {"Amount", "Amount" },
            {"Sell","Sell" },
            {"selectToSell", "Select an amount of the item you wish to sell" },
            {"sellItemF","Item: {0}{1}</color>" },
            {"sellPriceF","Price per unit: {0}{1} {2}</color>" },
            {"sellUnitF","Units to sell: {0}{1}</color>" },
            {"sellTotalF","Total sale price: {0}{1} {2}</color>" },
            {"cancelSale","Cancel Sale" },
            {"confirmSale","Sell Item" },
            {"saleSuccess", "You have sold {0}x {1} for {2} {3}" },
            {"allowExchange", "Currency Exchange" },
            {"allowTransfer", "Currency Transfer" },
            {"allowSales", "Item Sales" }
        };
        #endregion
    }
}


// --- End of file: ServerRewards.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/NoSteamDevRust.cs ---
// --- Original Local Path: NoSteamDevRust.cs ---

using Network;

namespace Oxide.Plugins
{
    [Info("AutoInsecure", "Zirper", "1.0.0")]
    class NoSteamDevRust : RustPlugin
    {		

        void OnClientAuth(Connection connection)
        {
			Server.Command("secure 0");
			Server.Command("encryption 1");
		}
	}
}

// --- End of file: NoSteamDevRust.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SkinsOptimization.cs ---
// --- Original Local Path: SkinsOptimization.cs ---

﻿using Oxide.Core;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEngine;
using Oxide.Core.Configuration;

namespace Oxide.Plugins
{
    [Info("SkinsOptimization", "bazuka5801", "1.0.0")]
    class SkinsOptimization : RustPlugin
    {
        #region FIELDS

        private List<ulong> PlayersActivated = new List<ulong>();
        
        #endregion

        #region OXIDE HOOKS

        void OnServerInitialized()
        {
            LoadDefaultConfig();
            lang.RegisterMessages(Messages, this, "en");
            Messages = lang.GetMessages("en", this);
            LoadData();
            foreach (var player in BasePlayer.activePlayerList) OnPlayerInit(player);
        }

        void Unload()
        {
            SaveData();
        }

        void OnPlayerConnected(Network.Message packet)
        {
            var player = packet.Player();
            if (player)
                OnPlayerInit(player);
        }

        void OnPlayerInit(BasePlayer player)
        {
            ItemSkinsCommand(player, PlayersActivated.Contains(player.userID));
        }

        [ChatCommand("skinon")]
        void cmdChatSkinOn(BasePlayer player, string command, string[] args)
        {
            if (!PlayersActivated.Contains(player.userID))
            {
                PlayersActivated.Add(player.userID);
                ItemSkinsCommand(player, true);
                SendReply(player, Messages["skinsOn"]);
            }
            else
            {
                SendReply(player, Messages["alreadyOn"]);
            }
        }

        [ChatCommand("skinoff")]
        void cmdChatSkinOff(BasePlayer player, string command, string[] args)
        {
            if (PlayersActivated.Contains(player.userID))
            {
                PlayersActivated.Remove(player.userID);
                ItemSkinsCommand(player, false);
                SendReply(player, Messages["skinsOff"]);
            }
            else
            {
                SendReply(player, Messages["alreadyOff"]);
            }
        }

        #endregion

        #region CORE

        void ItemSkinsCommand(BasePlayer player, bool value)
        {
            player.SendConsoleCommand($"itemskins {(value ? 1 : 0)}");
        }
        
        #endregion

        #region DATA

        private readonly DynamicConfigFile PlayersActivatedFile = Interface.Oxide.DataFileSystem.GetFile("Skins.PlayersActivated");

        void OnServerSave() => SaveData();

        void LoadData()
        {
            PlayersActivated = PlayersActivatedFile.ReadObject<List<ulong>>();
        }

        void SaveData()
        {
            PlayersActivatedFile.WriteObject(PlayersActivated);
        }

        #endregion

        #region LOCALIZATION

        Dictionary<string, string> Messages = new Dictionary<string, string>()
        {
            { "skinsCurrentlyDisabled", "У вас выключены скины!\nЧтобы включить используйте /skin on\nЧтобы выключить используйте /skin off" },
            { "skinsOff", "Скины отключены!\nЧтобы включить используйте /skin on\nЧтобы выключить используйте /skin off" },
            { "skinsOn", "Скины включены!\nЧтобы включить используйте /skin on\nЧтобы выключить используйте /skin off" },
            { "alreadyOn", "У вас уже включены скины!" },
            { "alreadyOff", "У вас уже выключены скины!" }
        };

        #endregion
    }
}


// --- End of file: SkinsOptimization.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Battlepass.cs ---
// --- Original Local Path: Battlepass.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using WebSocketSharp;
using Random = UnityEngine.Random;

namespace Oxide.Plugins
{
	[Info("Battlepass", "https://topplugin.ru/", "1.19.0⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠⁠")]
	public class Battlepass : RustPlugin
	{
		#region Fields

		[PluginReference] private Plugin ImageLibrary;

		private const string Layer = "UI.Battlepass";
		private const string ModalLayer = "UI.Battlepass.Modal";

		private const string OrangeColor = "0.74 0.36 0.13 1";
		private const string ProgressBarColor = "0.74 0.36 0.13 0.4";

		private static Battlepass _instance;

		private bool needUpdate;

		private readonly Dictionary<BasePlayer, List<ItemCase>> openedCaseItems =
			new Dictionary<BasePlayer, List<ItemCase>>();

		private readonly List<GeneralMission> _generalMissions = new List<GeneralMission>();

		private List<int> _privateMissions = new List<int>();

		private readonly List<BasePlayer> _missionPlayers = new List<BasePlayer>();

		private List<uint> LootedItems = new List<uint>();

		private DateTime nextTime;

		private class GeneralMission
		{
			public int ID;
			public MissionConfig Mission;
		}

		private enum ItemType
		{
			Item,
			Command,
			Plugin
		}

		private enum MissionType
		{
			Gather,
			Kill,
			Craft,
			Look,
			Build,
			Upgrade
		}

		#endregion

		#region Config

		private static Configuration _config;

		private class Configuration
		{
			[JsonProperty(PropertyName = "Команда | Command")]
			public string Command = "pass";

			[JsonProperty(PropertyName = "Право | Permission")]
			public string Permission = "battlepass.use";

			[JsonProperty(PropertyName = "Фон | Background")]
			public string Background = "https://i.imgur.com/Duv8iVm.jpg";

			[JsonProperty(PropertyName = "Логотип | Logo")]
			public string Logo = "https://i.imgur.com/mhRO2AN.png";

			[JsonProperty(PropertyName =
				"Сбрасывать квест после его завершения? | Reset the quest after completing it?")]
			public bool ResetQuestAfterComplete;

			[JsonProperty(PropertyName = "Валюта 1 | Currency 1")]
			public FirstCurrencyClass FirstCurrency = new FirstCurrencyClass
			{
				Image = "https://i.imgur.com/swNAv0k.png",
				useDefaultCur = true,
				AddHook = "Deposit",
				BalanceHook = "Balance",
				RemoveHook = "Withdraw",
				Plug = "Economics",
				Rates = new Dictionary<string, float>
				{
					["battlepass.vip"] = 2f,
					["battlepass.premium"] = 3f
				}
			};

			[JsonProperty(PropertyName = "Использовать 2 валюту? | Use 2nd currency?")]
			public bool useSecondCur = true;

			[JsonProperty(PropertyName = "Валюта 2 | Currency 2")]
			public SecondCurrencyClass SecondCurrency = new SecondCurrencyClass
			{
				Image = "https://i.imgur.com/d3vGeRL.png",
				useDefaultCur = true,
				AddHook = "Deposit",
				BalanceHook = "Balance",
				RemoveHook = "Withdraw",
				Plug = "Economics"
			};

			[JsonProperty(PropertyName = "Изображение сезона | Season image")]
			public string Battlepass = "https://i.imgur.com/f2GN8m7.png";

			[JsonProperty(PropertyName = "Изображение кейсов | Case Image")]
			public string CaseImg = "https://i.imgur.com/2lMM2bS.png";

			[JsonProperty(PropertyName = "Изображение инвентаря | Inventory Image")]
			public string InventoryImg = "https://i.imgur.com/vvJe7KO.png";

			[JsonProperty(PropertyName = "Изображение топ награды | Image Top Awards")]
			public string AdvanceAward = "https://i.imgur.com/gRFdu5D.png";

			[JsonProperty(PropertyName = "Фон для кейсов | Background for cases")]
			public string CaseBG = "https://i.imgur.com/tlMMjqc.png";

			[JsonProperty(PropertyName = "Кейсы | Cases", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<CaseClass> Cases = new List<CaseClass>
			{
				new CaseClass
				{
					DisplayName = "Кейс 'Сокровища пиратов'",
					Image = "https://i.imgur.com/tsPPUhg.png",
					Permission = "battlepass.vip",
					FCost = 3000,
					PCost = 1500,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				},
				new CaseClass
				{
					DisplayName = "Легендарный кейс",
					Image = "https://i.imgur.com/3mtbqji.png",
					Permission = "battlepass.use",
					FCost = 2000,
					PCost = 1000,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				},
				new CaseClass
				{
					DisplayName = "Кейс мастера",
					Image = "https://i.imgur.com/NvHk5Sw.png",
					Permission = "battlepass.use",
					FCost = 1500,
					PCost = 750,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				},
				new CaseClass
				{
					DisplayName = "Кейс профессионала",
					Image = "https://i.imgur.com/kZyZqy9.png",
					Permission = "battlepass.use",
					FCost = 1000,
					PCost = 500,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				},
				new CaseClass
				{
					DisplayName = "Кейс любителя",
					Image = "https://i.imgur.com/5bur68a.png",
					Permission = "battlepass.use",
					FCost = 500,
					PCost = 250,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				},
				new CaseClass
				{
					DisplayName = "Кейс новичка",
					Image = "https://i.imgur.com/9KIoJ2G.png",
					Permission = "",
					FCost = 150,
					PCost = 75,
					Items = new List<ItemCase>
					{
						new ItemCase
						{
							Title = "Дерево (2000 шт.)",
							Chance = 80,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "wood",
							Skin = 0,
							Amount = 2000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Камень (3000 шт.)",
							Chance = 70,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "stones",
							Skin = 0,
							Amount = 3000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Штурмовая винтовка",
							Chance = 50,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "rifle.ak",
							Skin = 0,
							Amount = 1,
							Command = string.Empty,
							PluginAward = new PluginAward()
						},
						new ItemCase
						{
							Title = "Сера (10000 шт.)",
							Chance = 25,
							Type = ItemType.Item,
							Image = string.Empty,
							DisplayName = string.Empty,
							Shortname = "sulfur",
							Skin = 0,
							Amount = 10000,
							Command = string.Empty,
							PluginAward = new PluginAward()
						}
					}
				}
			};

			[JsonProperty(PropertyName = "Количество общих миссий в день | Total missions per day")]
			public int MissionsCount = 7;

			[JsonProperty(PropertyName =
				"Раз во сколько часов обновлять миссии? | How many hours are missions updated?")]
			public int MissionHours = 24;

			[JsonProperty(PropertyName = "Настройка общих миссий | Settings shared missions",
				ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<int, MissionConfig> Missions = new Dictionary<int, MissionConfig>
			{
				[1] = new MissionConfig
				{
					Description = "Добыть 5000 камней",
					Type = MissionType.Gather,
					Shortname = "stones",
					Skin = 0,
					Grade = 0,
					Amount = 5000,
					MainAward = 50,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[2] = new MissionConfig
				{
					Description = "Убить 3 игроков",
					Type = MissionType.Kill,
					Shortname = "player",
					Skin = 0,
					Grade = 0,
					Amount = 3,
					MainAward = 90,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[3] = new MissionConfig
				{
					Description = "Скрафтить 15 ракет",
					Type = MissionType.Craft,
					Shortname = "ammo.rocket.basic",
					Skin = 0,
					Grade = 0,
					Amount = 15,
					MainAward = 75,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[4] = new MissionConfig
				{
					Description = "Залутать 10 металлических пружин",
					Type = MissionType.Look,
					Shortname = "metalspring",
					Skin = 0,
					Grade = 0,
					Amount = 10,
					MainAward = 50,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[5] = new MissionConfig
				{
					Description = "Построить 25 высоких внешних каменных стен для защиты Вашего дома",
					Type = MissionType.Build,
					Shortname = "wall.external.high.stone",
					Skin = 0,
					Grade = 0,
					Amount = 25,
					MainAward = 100,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[6] = new MissionConfig
				{
					Description = "Улучшить 10 фундаментов в металл",
					Type = MissionType.Upgrade,
					Shortname = "foundation.prefab",
					Skin = 0,
					Grade = 3,
					Amount = 10,
					MainAward = 60,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[7] = new MissionConfig
				{
					Description = "Добыть 10000 дерева",
					Type = MissionType.Gather,
					Shortname = "wood",
					Skin = 0,
					Grade = 0,
					Amount = 10000,
					MainAward = 50,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				},
				[8] = new MissionConfig
				{
					Description = "Скрафтите 3 бронированные двери для дома",
					Type = MissionType.Craft,
					Shortname = "door.hinged.toptier",
					Skin = 0,
					Grade = 0,
					Amount = 3,
					MainAward = 85,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "rifle.ak",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = false,
					SecondAward = 0
				}
			};

			[JsonProperty(PropertyName = "Настройка вызова дня | Settings challenge of the day",
				ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<int, MissionConfig> PrivateMissions = new Dictionary<int, MissionConfig>
			{
				[1] = new MissionConfig
				{
					Description = "Добыть 5000 камней",
					Type = MissionType.Gather,
					Shortname = "stones",
					Skin = 0,
					Grade = 0,
					Amount = 5000,
					MainAward = 50,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				},
				[2] = new MissionConfig
				{
					Description = "Убить 3 игроков",
					Type = MissionType.Kill,
					Shortname = "player",
					Skin = 0,
					Grade = 0,
					Amount = 3,
					MainAward = 90,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				},
				[3] = new MissionConfig
				{
					Description = "Скрафтить 15 ракет",
					Type = MissionType.Craft,
					Shortname = "ammo.rocket.basic",
					Skin = 0,
					Grade = 0,
					Amount = 15,
					MainAward = 75,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				},
				[4] = new MissionConfig
				{
					Description = "Залутать 10 металлических пружин",
					Type = MissionType.Look,
					Shortname = "metalspring",
					Skin = 0,
					Grade = 0,
					Amount = 10,
					MainAward = 50,
					UseAdvanceAward = true,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				},
				[5] = new MissionConfig
				{
					Description = "Построить 25 высоких внешних каменных стен для защиты Вашего дома",
					Type = MissionType.Build,
					Shortname = "wall.external.high.stone",
					Skin = 0,
					Grade = 0,
					Amount = 25,
					MainAward = 100,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				},
				[6] = new MissionConfig
				{
					Description = "Улучшить 10 фундаментов в металл",
					Type = MissionType.Upgrade,
					Shortname = "foundation.prefab",
					Skin = 0,
					Grade = 3,
					Amount = 10,
					MainAward = 60,
					UseAdvanceAward = false,
					AdvanceAward = new AdvanceAward
					{
						Image = "https://i.imgur.com/IkEWGT8.png",
						Amount = 1,
						DisplayName = string.Empty,
						Shortname = "",
						Skin = 1230963555,
						Title = "Talon AK-47"
					},
					UseSecondAward = true,
					SecondAward = 25
				}
			};

			[JsonProperty(PropertyName = "Включить логирование в консоль? | Enable logging to the console?")]
			public bool LogToConsole = true;

			[JsonProperty(PropertyName = "Включить логирование в файл? | Enable logging to the file?")]
			public bool LogToFile = true;
		}

		private class CurrencyClass
		{
			[JsonProperty(PropertyName = "Картинка | Image")]
			public string Image;

			[JsonProperty(PropertyName = "Использовать встроенную систему? | Use embedded system?")]
			public bool useDefaultCur;

			[JsonProperty(PropertyName = "Название плагина | Plugin name")]
			public string Plug;

			[JsonProperty(PropertyName = "Функция пополнения баланса | Balance add hook")]
			public string AddHook;

			[JsonProperty(PropertyName = "Функция снятия баланса | Balance remove hook")]
			public string RemoveHook;

			[JsonProperty(PropertyName = "Функция показа баланса | Balance show hook")]
			public string BalanceHook;
		}

		private class FirstCurrencyClass : CurrencyClass
		{
			[JsonProperty(PropertyName = "Rates for permissions",
				ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<string, float> Rates;

			public double ShowBalance(BasePlayer player)
			{
				if (useDefaultCur) return _instance.GetFirstCurrency(player.userID);

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return 0;

				return Math.Round(Convert.ToDouble(plugin.Call(BalanceHook, player.UserIDString)));
			}

			public void AddBalance(BasePlayer player, int amount)
			{
				if (useDefaultCur)
				{
					_instance.AddFirstCurrency(player, amount);
					return;
				}

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return;

				switch (Plug)
				{
					case "Economics":
						plugin.Call(AddHook, player.UserIDString, (double) amount);
						break;
					default:
						plugin.Call(AddHook, player.UserIDString, amount);
						break;
				}
			}

			public bool RemoveBalance(BasePlayer player, int amount)
			{
				if (ShowBalance(player) < amount) return false;

				if (useDefaultCur) return _instance.RemoveFirstCurrency(player, amount);

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return false;

				switch (Plug)
				{
					case "Economics":
						plugin.Call(RemoveHook, player.UserIDString, (double) amount);
						break;
					default:
						plugin.Call(RemoveHook, player.UserIDString, amount);
						break;
				}

				return true;
			}
		}

		private class SecondCurrencyClass : CurrencyClass
		{
			[JsonProperty(PropertyName = "Право | Permission")]
			public string Permission;

			public double ShowBalance(BasePlayer player)
			{
				if (useDefaultCur) return _instance.GetSecondCurrency(player.userID);

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return 0;

				return Math.Round(Convert.ToDouble(plugin.Call(BalanceHook, player.UserIDString)));
			}

			public void AddBalance(BasePlayer player, int amount)
			{
				if (useDefaultCur)
				{
					_instance.AddSecondCurrency(player, amount);
					return;
				}

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return;

				switch (Plug)
				{
					case "Economics":
						plugin.Call(AddHook, player.UserIDString, (double) amount);
						break;
					default:
						plugin.Call(AddHook, player.UserIDString, amount);
						break;
				}
			}

			public bool RemoveBalance(BasePlayer player, int amount)
			{
				if (ShowBalance(player) < amount) return false;

				if (useDefaultCur) return _instance.RemoveSecondCurrency(player, amount);

				var plugin = _instance?.plugins.Find(Plug);
				if (plugin == null) return false;

				switch (Plug)
				{
					case "Economics":
						plugin.Call(RemoveHook, player.UserIDString, (double) amount);
						break;
					default:
						plugin.Call(RemoveHook, player.UserIDString, amount);
						break;
				}

				return true;
			}
		}

		private class MissionConfig
		{
			[JsonProperty(PropertyName = "Описание миссии | Mission description")]
			public string Description;

			[JsonProperty(PropertyName = "Тип миссии | Mission type")] [JsonConverter(typeof(StringEnumConverter))]
			public MissionType Type;

			[JsonProperty(PropertyName = "Шортнейм/префаб | Shortname/prefab")]
			public string Shortname;

			[JsonProperty(PropertyName = "Скин (0 - любой предмет) | Skin (0 - any item)")]
			public ulong Skin;

			[JsonProperty(PropertyName =
				"Уровень апгрейда (для миссий 'Улучшить') | Upgrade Level (for 'Улучшить' missions)")]
			public int Grade;

			[JsonProperty(PropertyName = "Количество | Amount")]
			public int Amount;

			[JsonProperty(PropertyName = "Количество основной награды | Amounr of main reward")]
			public int MainAward;

			[JsonProperty(PropertyName = "Давать доп.награду? | Give extra reward?")]
			public bool UseAdvanceAward;

			[JsonProperty(PropertyName = "Настройка доп.награды | Settings extra reward")]
			public AdvanceAward AdvanceAward;

			[JsonProperty(PropertyName = "(Вызов) Давать вторую валюту | (Challenge) Give second currency?")]
			public bool UseSecondAward;

			[JsonProperty(PropertyName = "(Вызов) Количество основной валюты | (Challenge) Amount of second currency")]
			public int SecondAward;


			private void GiveMainAward(BasePlayer player)
			{
				_config.FirstCurrency.AddBalance(player, MainAward);
			}

			public void GiveAwards(BasePlayer player)
			{
				GiveMainAward(player);

				if (UseAdvanceAward) AdvanceAward?.GiveItem(player);
			}

			public void GivePrivateAwards(BasePlayer player)
			{
				GiveMainAward(player);

				if (UseSecondAward) _config.SecondCurrency.AddBalance(player, SecondAward);
			}
		}

		private class AdvanceAward
		{
			[JsonProperty(PropertyName =
				"Картинка (если пусто - берётся иконка по shortname) | Image (if empty - the icon is taken by shortname)")]
			public string Image;

			[JsonProperty(PropertyName =
				"Отображаемое имя (если пусто - стандартное) | Display Name (if empty - standard)")]
			public string DisplayName;

			[JsonProperty(PropertyName = "Отображаемое имя (для интерфейса) | Display Name (for interface)")]
			public string Title;

			[JsonProperty(PropertyName = "Shortname")]
			public string Shortname;

			[JsonProperty(PropertyName = "Скин | Skin")]
			public ulong Skin;

			[JsonProperty(PropertyName = "Количество (для предмета) | Amount (for item)")]
			public int Amount;

			public void GiveItem(BasePlayer player)
			{
				var item = ItemManager.CreateByName(Shortname, Amount, Skin);
				if (item == null)
				{
					_instance?.PrintError($"Error creating item with shortname '{Shortname}'");
					return;
				}

				if (!string.IsNullOrEmpty(DisplayName)) item.name = DisplayName;

				player.GiveItem(item, BaseEntity.GiveItemReason.PickedUp);
			}
		}

		private class CaseClass
		{
			[JsonProperty(PropertyName = "Отображаемое имя кейса | Case Display Name")]
			public string DisplayName;

			[JsonProperty(PropertyName = "Картинка | Image")]
			public string Image;

			[JsonProperty(PropertyName = "Право | Permission")]
			public string Permission;

			[JsonProperty(PropertyName = "Стоимость в валюте 1 | Cost in currency 1")]
			public int FCost;

			[JsonProperty(PropertyName = "Стоимость в валюте 2 | Cost in currency 2")]
			public int PCost;

			[JsonProperty(PropertyName = "Предметы | Items", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<ItemCase> Items = new List<ItemCase>();
		}

		private class ItemCase
		{
			[JsonProperty(PropertyName =
				"Отображаемое имя (для вывода в интерфейсе) | Display Name (for display in the interface)")]
			public string Title;

			[JsonProperty(PropertyName = "Шанс | Chance")]
			public float Chance;

			[JsonProperty(PropertyName = "Тип предмета | Item type")] [JsonConverter(typeof(StringEnumConverter))]
			public ItemType Type;

			[JsonProperty(PropertyName =
				"Картинка (если пусто - берётся икнока по shortname) | Image (if empty - the icon is taken by shortname) ")]
			public string Image;

			[JsonProperty(PropertyName =
				"Отображаемое имя (для предмета) (если пусто - стандартное) | Display name (for the item) (if empty - standard)")]
			public string DisplayName;

			[JsonProperty(PropertyName = "Shortname")]
			public string Shortname;

			[JsonProperty(PropertyName = "Скин | Skin")]
			public ulong Skin;

			[JsonProperty(PropertyName = "Количество (для предмета) | Amount (for item)")]
			public int Amount;

			[JsonProperty(PropertyName = "Команда | Command")]
			public string Command;

			[JsonProperty(PropertyName = "Плагин | Plugin")]
			public PluginAward PluginAward;

			private void ToItem(BasePlayer player)
			{
				var newItem = ItemManager.CreateByName(Shortname, Amount, Skin);

				if (newItem == null)
				{
					_instance?.PrintError($"Error creating item with shortname '{Shortname}'");
					return;
				}

				if (!string.IsNullOrEmpty(DisplayName)) newItem.name = DisplayName;

				player.GiveItem(newItem, BaseEntity.GiveItemReason.PickedUp);
			}

			private void ToCommand(BasePlayer player)
			{
				var command = Command.Replace("\n", "|")
					.Replace("%steamid%", player.UserIDString, StringComparison.OrdinalIgnoreCase).Replace("%username%",
						player.displayName, StringComparison.OrdinalIgnoreCase);

				foreach (var check in command.Split('|')) _instance?.Server.Command(check);
			}

			public void GetItem(BasePlayer player)
			{
				if (player == null) return;

				switch (Type)
				{
					case ItemType.Command:
					{
						ToCommand(player);
						break;
					}
					case ItemType.Plugin:
					{
						PluginAward?.ToPluginAward(player);
						break;
					}
					case ItemType.Item:
					{
						ToItem(player);
						break;
					}
				}
			}
		}

		private class PluginAward
		{
			[JsonProperty("Название функции для вызова | Hook to call")]
			public string hook = "Withdraw";

			[JsonProperty("Название плагина | Plugin name")]
			public string plugin = "Economics";

			[JsonProperty("Количество | Amount")] public int amount;

			[JsonProperty("(GameStores) ИД магазина в сервисе")]
			public string ShopID = "UNDEFINED";

			[JsonProperty("(GameStores) ИД сервера в сервисе")]
			public string ServerID = "UNDEFINED";

			[JsonProperty("(GameStores) Секретный ключ")]
			public string SecretKey = "UNDEFINED";

			public void ToPluginAward(BasePlayer player)
			{
				var plug = _instance?.plugins.Find(plugin);
				if (plug == null)
				{
					_instance?.PrintError($"Economy plugin '{plugin}' not found !!! ");
					return;
				}

				switch (plugin)
				{
					case "RustStore":
					{
						plug.CallHook(hook, player.userID, amount, new Action<string>(result =>
						{
							if (result == "SUCCESS")
							{
								_instance?.Log("givemoney", "givemoney", player.displayName, player.UserIDString,
									amount, plug);
								return;
							}

							Interface.Oxide.LogDebug($"Баланс игрока {player.userID} не был изменен, ошибка: {result}");
						}));
						break;
					}
					case "GameStoresRUST":
					{
						_instance?.webrequest.Enqueue(
							$"https://gamestores.ru/api/?shop_id={ShopID}&secret={SecretKey}&server={ServerID}&action=moneys&type=plus&steam_id={player.UserIDString}&amount={amount}",
							"", (code, response) =>
							{
								switch (code)
								{
									case 0:
									{
										_instance?.PrintError("Api does not responded to a request");
										break;
									}
									case 200:
									{
										_instance?.Log("givemoney", "givemoney", player.displayName,
											player.UserIDString, amount, plug);
										break;
									}
									case 404:
									{
										_instance?.PrintError("Please check your configuration! [404]");
										break;
									}
								}
							}, _instance);
						break;
					}
					case "Economics":
					{
						plug.Call(hook, player.userID, (double) amount);
						break;
					}
					default:
					{
						plug.Call(hook, player.userID, amount);
						break;
					}
				}
			}
		}

		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				_config = Config.ReadObject<Configuration>();
				if (_config == null) throw new Exception();
				SaveConfig();
			}
			catch
			{
				PrintError("Your configuration file contains an error. Using default configuration values.");
				LoadDefaultConfig();
			}
		}

		protected override void SaveConfig()
		{
			Config.WriteObject(_config);
		}

		protected override void LoadDefaultConfig()
		{
			_config = new Configuration();
		}

		#endregion

		#region Data

		private static PluginData _data;

		private void SaveData()
		{
			Interface.Oxide.DataFileSystem.WriteObject(Name, _data);
			Interface.Oxide.DataFileSystem.WriteObject(Name + "_LootedItems", LootedItems);
		}

		private void LoadData()
		{
			try
			{
				_data = Interface.Oxide.DataFileSystem.ReadObject<PluginData>(Name);
				LootedItems = Interface.Oxide.DataFileSystem.ReadObject<List<uint>>(Name + "_LootedItems");
			}
			catch (Exception e)
			{
				PrintError(e.ToString());
			}

			if (_data == null) _data = new PluginData();
			if (LootedItems == null) LootedItems = new List<uint>();
		}

		private class PluginData
		{
			[JsonProperty(PropertyName = "Date of last mission update")]
			public DateTime MissionsDate = new DateTime(1970, 1, 1, 0, 0, 0);

			[JsonProperty(PropertyName = "Missions", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public List<int> Missions = new List<int>();

			[JsonProperty(PropertyName = "Players Data", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<ulong, PlayerData> PlayerDatas = new Dictionary<ulong, PlayerData>();
		}

		private class PlayerData
		{
			[JsonProperty(PropertyName = "MissionDate")]
			public DateTime MissionDate;

			[JsonProperty(PropertyName = "Mission ID")]
			public int MissionId;

			[JsonProperty(PropertyName = "Mission Progress")]
			public int MissionProgress;

			[JsonProperty(PropertyName = "Currency 1")]
			public int FirstCurrency;

			[JsonProperty(PropertyName = "Currency 2")]
			public int SecondCurrency;

			[JsonProperty(PropertyName = "General Mission Progress",
				ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<int, int> Missions = new Dictionary<int, int>();

			[JsonProperty(PropertyName = "Items", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<int, ItemCase> Items = new Dictionary<int, ItemCase>();
		}

		#endregion

		#region Hooks

		private void Init()
		{
			_instance = this;
			LoadData();
		}

		private void OnServerInitialized()
		{
			if (!ImageLibrary)
			{
				PrintWarning("IMAGE LIBRARY IS NOT INSTALLED.");
			}
			else
			{
				ImageLibrary.Call("AddImage", _config.Background, _config.Background);
				ImageLibrary.Call("AddImage", _config.Logo, _config.Logo);
				ImageLibrary.Call("AddImage", _config.FirstCurrency.Image, _config.FirstCurrency.Image);
				ImageLibrary.Call("AddImage", _config.Battlepass, _config.Battlepass);
				ImageLibrary.Call("AddImage", _config.CaseImg, _config.CaseImg);
				ImageLibrary.Call("AddImage", _config.InventoryImg, _config.InventoryImg);
				ImageLibrary.Call("AddImage", _config.CaseBG, _config.CaseBG);
				ImageLibrary.Call("AddImage", _config.AdvanceAward, _config.AdvanceAward);

				if (_config.useSecondCur)
					ImageLibrary.Call("AddImage", _config.SecondCurrency.Image, _config.SecondCurrency.Image);

				_config.Cases.ForEach(check =>
				{
					if (!string.IsNullOrEmpty(check.Image))
						ImageLibrary.Call("AddImage", check.Image, check.Image);

					if (!check.Permission.IsNullOrEmpty() && !permission.PermissionExists(check.Permission))
						permission.RegisterPermission(check.Permission, this);


					check.Items.ForEach(item =>
					{
						if (!string.IsNullOrEmpty(item.Image))
							ImageLibrary.Call("AddImage", item.Image, item.Image);
					});
				});

				foreach (var missions in _config.Missions.Values)
				{
					if (missions.UseAdvanceAward || string.IsNullOrEmpty(missions.AdvanceAward.Image)) continue;
					ImageLibrary.Call("AddImage", missions.AdvanceAward.Image, missions.AdvanceAward.Image);
				}

				foreach (var missions in _config.PrivateMissions.Values)
				{
					if (missions.UseAdvanceAward || string.IsNullOrEmpty(missions.AdvanceAward.Image)) continue;
					ImageLibrary.Call("AddImage", missions.AdvanceAward.Image, missions.AdvanceAward.Image);
				}
			}

			foreach (var check in _config.FirstCurrency.Rates)
				if (!permission.PermissionExists(check.Key))
					permission.RegisterPermission(check.Key, this);

			if (_config.useSecondCur && !_config.SecondCurrency.Permission.IsNullOrEmpty() &&
			    !permission.PermissionExists(_config.SecondCurrency.Permission))
				permission.RegisterPermission(_config.SecondCurrency.Permission, this);

			if (!_config.Permission.IsNullOrEmpty() && !permission.PermissionExists(_config.Permission))
				permission.RegisterPermission(_config.Permission, this);

			cmd.AddChatCommand(_config.Command, this, nameof(CmdChatOpenBattlepass));

			AddCovalenceCommand(new[] {"addfirstcurrency", "addsecondcurrency"}, nameof(CmdAddBalance));

			UpdateMissions();

			CheckPlayersMission();
		}

		private void OnServerSave()
		{
			SaveData();
		}

		private void Unload()
		{
			if (InvokeHandler.Instance.IsInvoking(UpdateMissions))
				InvokeHandler.Instance.CancelInvoke(UpdateMissions);
			if (InvokeHandler.Instance.IsInvoking(RefreshCooldown))
				InvokeHandler.Instance.CancelInvoke(RefreshCooldown);

			foreach (var player in BasePlayer.activePlayerList)
				CuiHelper.DestroyUi(player, Layer);

			SaveData();

			_data = null;
			_config = null;
			_instance = null;
		}

		private void OnNewSave()
		{
			if (_data == null)
				LoadData();

			LootedItems?.Clear();
			SaveData();
		}

		private void OnPlayerConnected(BasePlayer player)
		{
			if (player == null || !player.userID.IsSteamId()) return;

			var data = GetPlayerData(player);
			var privateMission = GetPrivateMission(data);
			if (privateMission == null)
			{
				data.MissionDate = DateTime.Now;
				data.MissionId = _privateMissions.GetRandom();
				data.MissionProgress = 0;
			}
		}

		private void OnPlayerDisconnected(BasePlayer player, string reason)
		{
			if (player == null) return;

			openedCaseItems.Remove(player);
			_missionPlayers.Remove(player);
		}

		#region Gather

		private void OnCollectiblePickup(Item item, BasePlayer player)
		{
			NextTick(() => OnMissionsProgress(player, MissionType.Gather, item));
		}

		private void OnDispenserGather(ResourceDispenser dispenser, BasePlayer player, Item item)
		{
			NextTick(() => OnMissionsProgress(player, MissionType.Gather, item));
		}

		private void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
		{
			NextTick(() => OnMissionsProgress(player, MissionType.Gather, item));
		}

		private void OnGrowableGathered(GrowableEntity growable, Item item, BasePlayer player)
		{
			NextTick(() => OnMissionsProgress(player, MissionType.Gather, item));
		}

		#endregion

		#region Pickup

		/*private void OnItemPickup(Item item, BasePlayer player)
		{
		    OnMissionsProgress(player, item);
		}*/

		#endregion

		#region Kill

		private void OnEntityDeath(BaseEntity entity, HitInfo info)
		{
			if (entity is BaseHelicopter) return;

			OnMissionsProgress(info?.InitiatorPlayer, MissionType.Kill, entity: entity);
		}


		private readonly Dictionary<uint, Dictionary<ulong, int>> HeliAttackers =
			new Dictionary<uint, Dictionary<ulong, int>>();

		private void OnEntityTakeDamage(BaseHelicopter heli, HitInfo info)
		{
			if (heli == null || info == null) return;

			var player = info.InitiatorPlayer;
			if (player != null)
			{
				if (HeliAttackers.ContainsKey(heli.net.ID))
					if (HeliAttackers[heli.net.ID].ContainsKey(player.userID))
						HeliAttackers[heli.net.ID][player.userID]++;
					else
						HeliAttackers[heli.net.ID].Add(player.userID, 0);
				else
					HeliAttackers.Add(heli.net.ID, new Dictionary<ulong, int>());
			}

			if (info.damageTypes.Total() >= heli.health)
			{
				if (player == null)
					player = BasePlayer.FindByID(GetLastAttacker(heli.net.ID));

				if (player == null) return;

				OnMissionsProgress(player, MissionType.Kill, entity: heli);
			}
		}

		private ulong GetLastAttacker(uint id)
		{
			return HeliAttackers.ContainsKey(id) ? HeliAttackers[id].Last().Key : 0;
		}

		#endregion

		#region Craft

		private void OnItemCraftFinished(ItemCraftTask task, Item item)
		{
			OnMissionsProgress(task?.owner, MissionType.Craft, item);
		}

		#endregion

		#region Loot

		private object CanMoveItem(Item item, PlayerInventory playerLoot, uint id2, int iTargetPos,
			int num)
		{
			if (item == null || playerLoot == null) return null;

			var player = playerLoot.GetComponent<BasePlayer>();
			if (player == null) return null;

			if (!(item.GetRootContainer()?.entityOwner is LootContainer))
				return null;

			if (!CanMoveItemsFrom(playerLoot, item.parent.entityOwner, item))
			{
				player.ChatMessage("Cannot move item!");
			}
			else
			{
				if (num <= 0)
					num = item.amount;

				var a = Mathf.Clamp(num, 1, item.MaxStackable());
				if (player.GetActiveItem() == item)
					player.UpdateActiveItem(0U);
				if (id2 == 0U)
				{
					if (playerLoot.GiveItem(item))
					{
						AddedToContainer(player, item);
						return false;
					}

					player.ChatMessage("GiveItem failed!");
				}
				else
				{
					var container = playerLoot.FindContainer(id2);
					if (container == null)
					{
						player.ChatMessage("Invalid container (" + id2 + ")");
					}
					else
					{
						var parent = item.parent;
						if (parent != null && parent.IsLocked() || container.IsLocked())
						{
							player.ChatMessage("Container is locked!");
						}
						else if (container.PlayerItemInputBlocked())
						{
							player.ChatMessage("Container does not accept player items!");
						}
						else
						{
							using (TimeWarning.New("Split"))
							{
								if (item.amount > a)
								{
									var split_Amount = a;
									if (container.maxStackSize > 0)
										split_Amount = Mathf.Min(a, container.maxStackSize);
									var obj = item.SplitItem(split_Amount);
									if (!obj.MoveToContainer(container, iTargetPos))
									{
										item.amount += obj.amount;
										obj.Remove();
									}

									AddedToContainer(player, item);
									ItemManager.DoRemoves();
									playerLoot.ServerUpdate(0.0f);
									return false;
								}
							}

							if (!item.MoveToContainer(container, iTargetPos))
								return false;

							AddedToContainer(player, item);
							ItemManager.DoRemoves();
							playerLoot.ServerUpdate(0.0f);
						}
					}
				}
			}

			return false;
		}

		private void OnItemAddedToContainer(ItemContainer container, Item item)
		{
			AddedToContainer(container.playerOwner, item);
		}

		private void OnItemPickup(Item item, BasePlayer player)
		{
			AddedToContainer(player, item);
		}

		private void AddedToContainer(BasePlayer player, Item item)
		{
			if (player == null || item == null) return;

			if (!LootedItems.Contains(item.uid))
			{
				OnMissionsProgress(player, MissionType.Look, item);
				LootedItems.Add(item.uid);
			}
		}

		private bool CanMoveItemsFrom(PlayerInventory playerLoot, BaseEntity entity, Item item)
		{
			var canMoveFrom = entity as PlayerInventory.ICanMoveFrom;
			return canMoveFrom == null ||
			       canMoveFrom.CanMoveFrom(playerLoot._baseEntity, item);
		}

		#endregion

		#region Build

		private void OnEntitySpawned(BaseEntity entity)
		{
			if (entity == null || entity.OwnerID == 0) return;

			OnMissionsProgress(BasePlayer.FindByID(entity.OwnerID), MissionType.Build, entity: entity);
		}

		#endregion

		#region Grade

		private void OnPayForUpgrade(BasePlayer player, BuildingBlock block, ConstructionGrade gradeTarget)
		{
			if (player == null || block == null || gradeTarget == null || gradeTarget.gradeBase == null) return;

			OnMissionsProgress(player, MissionType.Upgrade, entity: block, grade: (int) gradeTarget.gradeBase.type);
		}

		private void OnBuildingUpgrade(BuildingBlock block, BuildingGrade.Enum grade, BasePlayer player)
		{
			if (player == null || block == null) return;

			OnMissionsProgress(player, MissionType.Upgrade, entity: block, grade: (int) grade);
		}

		#endregion

		#endregion

		#region Commands

		private void CmdChatOpenBattlepass(BasePlayer player, string cmd, string[] args)
		{
			if (!(_config.Permission.IsNullOrEmpty() ||
			      permission.UserHasPermission(player.UserIDString, _config.Permission)))
			{
				Reply(player, "NoPermission");
				return;
			}

			MainUI(player, true);
		}

		[ConsoleCommand("battlepass.wipedata")]
		private void CmdConsoleWipeData(ConsoleSystem.Arg arg)
		{
			if (!arg.IsAdmin) return;

			_data.MissionsDate = new DateTime(1970, 1, 1, 0, 0, 0);

			UpdateMissions();

			SaveData();

			PrintWarning("Data was wiped!");
		}

		private void CmdAddBalance(IPlayer player, string cmd, string[] args)
		{
			if (!player.IsAdmin) return;

			if (args.Length < 2)
			{
				player.Reply($"Use {cmd} [userid] [count]");
				return;
			}

			var target = BasePlayer.Find(args[0]);
			if (target == null)
			{
				player.Reply($"Player {args[0]} not found");
				return;
			}

			int amount;
			if (!int.TryParse(args[1], out amount))
			{
				player.Reply($"Use {cmd} [userid] [count]");
				return;
			}

			switch (cmd)
			{
				case "addfirstcurrency":
				{
					_config.FirstCurrency.AddBalance(target, amount);
					break;
				}
				case "addsecondcurrency":
				{
					_config.SecondCurrency.AddBalance(target, amount);
					break;
				}
			}
		}

		[ConsoleCommand("UI_Battlepass")]
		private void CmdConsoleBattlepass(ConsoleSystem.Arg arg)
		{
			var player = arg.Player();
			if (player == null) return;

			if (!arg.HasArgs()) return;

			switch (arg.Args[0].ToLower())
			{
				case "closeui":
				{
					CuiHelper.DestroyUi(player, Layer);
					openedCaseItems.Remove(player);
					_missionPlayers.Remove(player);
					break;
				}
				case "main":
				{
					_missionPlayers.Remove(player);

					MainUI(player);
					break;
				}
				case "missions":
				{
					if (!_missionPlayers.Contains(player)) _missionPlayers.Add(player);

					MissionsUI(player);
					break;
				}
				case "cases":
				{
					CasesUI(player);
					break;
				}
				case "inventory":
				{
					openedCaseItems.Remove(player);

					InventoryUI(player);
					break;
				}
				case "showcase":
				{
					int caseID;
					if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out caseID)
					                    || caseID < 0 || _config.Cases.Count <= caseID) return;

					CaseUI(player, caseID);
					break;
				}
				case "tryopencase":
				{
					int caseID, count;
					bool isFreeCoin;
					if (!arg.HasArgs(4) || !int.TryParse(arg.Args[1], out caseID)
					                    || !bool.TryParse(arg.Args[2], out isFreeCoin)
					                    || !int.TryParse(arg.Args[3], out count)) return;

					CaseModalUI(player, caseID, isFreeCoin, count);
					break;
				}
				case "opencase":
				{
					int caseID, count;
					bool isFirstCurrent;
					if (!arg.HasArgs(4) || !int.TryParse(arg.Args[1], out caseID)
					                    || !bool.TryParse(arg.Args[2], out isFirstCurrent)
					                    || !int.TryParse(arg.Args[3], out count)) return;

					var _case = _config.Cases[caseID];
					if (_case == null) return;

					if (!(_case.Permission.IsNullOrEmpty() ||
					      permission.UserHasPermission(player.UserIDString, _case.Permission)))
					{
						Notification(player, "NoCasePermission");
						return;
					}

					var data = GetPlayerData(player);
					if (data == null) return;

					var cost = (isFirstCurrent ? _case.FCost : _case.PCost) * count;

					var remove = isFirstCurrent
						? _config.FirstCurrency.RemoveBalance(player, cost)
						: _config.SecondCurrency.RemoveBalance(player, cost);

					if (!remove)
					{
						Notification(player, "Not enough");
						return;
					}

					var items = GetRandom(_case, count);

					Log("opencase", "opencase", player.displayName, player.UserIDString, _case.DisplayName,
						string.Join(", ",
							items.Select(x =>
								$"item (title: {x.Title}, type: {x.Type.ToString()}, shortname: {x.Shortname}, amount: {x.Amount}, skin: {x.Skin}, command: {x.Command}, plugin amount: {x.PluginAward.amount}")));

					var index = data.Items.Count > 0 ? data.Items.Keys.Max() : -1;
					foreach (var item in items)
					{
						index++;
						data.Items.Add(index, item);
					}

					RefreshBalance(player);

					if (openedCaseItems.ContainsKey(player))
						openedCaseItems[player] = items;
					else
						openedCaseItems.Add(player, items);

					OpenCasesUI(player);
					break;
				}
				case "setvalue":
				{
					int caseID, count;
					bool isFreeCoin;
					if (!arg.HasArgs(4) || !int.TryParse(arg.Args[1], out caseID)
					                    || !bool.TryParse(arg.Args[2], out isFreeCoin)
					                    || !int.TryParse(arg.Args[3], out count)) return;

					if (count > 5) count = 5;
					if (count == 0) count = 1;

					CaseUI(player, caseID, isFreeCoin, count);
					break;
				}
				case "changepage":
				{
					int page;
					if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out page)) return;

					OpenCasesUI(player, page);
					break;
				}
				case "invpage":
				{
					int page;
					if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out page)) return;

					InventoryUI(player, page);
					break;
				}
				case "giveitem":
				{
					int page, maxCount, itemIndex, g;
					if (!arg.HasArgs(5) || !int.TryParse(arg.Args[1], out page)
					                    || !int.TryParse(arg.Args[2], out maxCount)
					                    || !int.TryParse(arg.Args[3], out itemIndex)
					                    || !int.TryParse(arg.Args[4], out g)) return;

					var data = GetPlayerData(player);
					if (data == null) return;

					var items = GetItemsByPage(data, page, maxCount);

					var item = items?[itemIndex];
					if (item == null) return;

					item.GetItem(player);

					data.Items.Remove(itemIndex);

					Log("getitem", "getitem", player.displayName, player.UserIDString,
						$"item (title: {item.Title}, type: {item.Type.ToString()}, shortname: {item.Shortname}, amount: {item.Amount}, skin: {item.Skin}, command: {item.Command}, plugin amount: {item.PluginAward.amount}");

					GiveUI(player, g);
					break;
				}
				case "showaward":
				{
					int missionId, ySwitch;
					if (!arg.HasArgs(3) || !int.TryParse(arg.Args[1], out missionId)
					                    || !int.TryParse(arg.Args[2], out ySwitch)) return;

					ShowAward(player, _config.Missions[missionId], ySwitch);
					break;
				}
				case "mispage":
				{
					int page;
					if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out page)) return;

					MissionsUI(player, page);
					break;
				}
			}
		}

		#endregion

		#region Interface

		private void MainUI(BasePlayer player, bool isFirst = false)
		{
			var container = new CuiElementContainer();

			#region First

			if (isFirst)
			{
				#region BG

				CuiHelper.DestroyUi(player, Layer);
				container.Add(new CuiElement
				{
					Parent = "Overlay",
					Name = Layer,
					Components =
					{
						new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.Background)},
						new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"},
						new CuiNeedsCursorComponent()
					}
				});

				#endregion

				#region Header

				CuiHelper.DestroyUi(player, Layer + ".Header");
				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -35", OffsetMax = "0 0"},
					Image = {Color = "0 0 0 0.6"}
				}, Layer, Layer + ".Header");

				container.Add(new CuiElement
				{
					Parent = Layer + ".Header",
					Components =
					{
						new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.Logo)},
						new CuiRectTransformComponent
							{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-350 -9", OffsetMax = "-250 9"}
					}
				});

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-240.5 -9",
						OffsetMax = "-239.5 9"
					},
					Image = {Color = "1 1 1 0.5"}
				}, Layer + ".Header");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-230 -9", OffsetMax = "80 9"},
					Text =
					{
						Text = player.displayName, Align = TextAnchor.MiddleLeft, FontSize = 12,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Header");

				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "230 -10", OffsetMax = "250 10"},
					Image =
					{
						Png = ImageLibrary.Call<string>("GetImage", _config.FirstCurrency.Image),
						Color = OrangeColor
					}
				}, Layer + ".Header");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0 -10", OffsetMax = "225 10"},
					Text =
					{
						Text = $"{_config.FirstCurrency.ShowBalance(player)}", FontSize = 12,
						Align = TextAnchor.MiddleRight, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Header", Layer + ".FreeCoins");

				if (_config.useSecondCur && (_config.SecondCurrency.Permission.IsNullOrEmpty() ||
				                             permission.UserHasPermission(player.UserIDString,
					                             _config.SecondCurrency.Permission)))
				{
					container.Add(new CuiPanel
					{
						RectTransform =
						{
							AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "315 -10",
							OffsetMax = "335 10"
						},
						Image =
						{
							Png = ImageLibrary.Call<string>("GetImage", _config.SecondCurrency.Image),
							Color = OrangeColor
						}
					}, Layer + ".Header");
					container.Add(new CuiLabel
					{
						RectTransform =
						{
							AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0 -10", OffsetMax = "310 10"
						},
						Text =
						{
							Text = $"{_config.SecondCurrency.ShowBalance(player)}", FontSize = 12,
							Align = TextAnchor.MiddleRight, Font = "robotocondensed-regular.ttf"
						}
					}, Layer + ".Header", Layer + ".PaidCoins");
				}

				#endregion
			}

			#endregion

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Missions

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-391 -128", OffsetMax = "-135 128"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".Missions");

			container.Add(new CuiElement
			{
				Parent = Layer + ".Missions",
				Components =
				{
					new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.Battlepass)},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-105 -75", OffsetMax = "105 135"}
				}
			});

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-105 5", OffsetMax = "105 35"},
				Button = {Command = "UI_Battlepass missions", Color = "0 0 0 0"},
				Text =
				{
					Text = Msg("Mission btn", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 16
				}
			}, Layer + ".Missions", Layer + ".Missions.Btn");

			Outline(ref container, Layer + ".Missions.Btn");

			#endregion

			#region Cases

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-125 -128", OffsetMax = "125 128"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".CasesMenu");

			container.Add(new CuiElement
			{
				Parent = Layer + ".CasesMenu",
				Components =
				{
					new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.CaseImg)},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-105 -75", OffsetMax = "105 135"}
				}
			});

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-105 5", OffsetMax = "105 35"},
				Button = {Command = "UI_Battlepass cases", Color = "0 0 0 0"},
				Text =
				{
					Text = Msg("Cases btn", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 16
				}
			}, Layer + ".CasesMenu", Layer + ".CasesMenu.Btn");

			Outline(ref container, Layer + ".CasesMenu.Btn");

			#endregion

			#region Inventory

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "135 -128", OffsetMax = "391 128"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".Inventory");

			container.Add(new CuiElement
			{
				Parent = Layer + ".Inventory",
				Components =
				{
					new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.InventoryImg)},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-105 -75", OffsetMax = "105 135"}
				}
			});

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-105 5", OffsetMax = "105 35"},
				Button = {Command = "UI_Battlepass inventory", Color = "0 0 0 0"},
				Text =
				{
					Text = Msg("Inventory btn", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 16
				}
			}, Layer + ".Inventory", Layer + ".Inventory.Btn");

			Outline(ref container, Layer + ".Inventory.Btn");

			#endregion

			#region Leave

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass closeui", Color = "0 0 0 0"},
				Text = {Text = Msg("Exit", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void CasesUI(BasePlayer player)
		{
			var container = new CuiElementContainer();

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Title

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 250", OffsetMax = "0 290"},
				Text =
				{
					Text = Msg("Cases title", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 26
				}
			}, Layer + ".Main");

			#endregion

			#region Back

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass main", Color = "0 0 0 0"},
				Text = {Text = Msg("Back", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#region Cases

			var xSwitch = -335;
			var ySwitch = 40;

			for (var i = 1; i <= _config.Cases.Count; i++)
			{
				var Case = _config.Cases[i - 1];

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{xSwitch} {ySwitch}",
						OffsetMax = $"{xSwitch + 195} {ySwitch + 205}"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Main", Layer + $".Case.{i}");

				container.Add(new CuiElement
				{
					Parent = Layer + $".Case.{i}",
					Components =
					{
						new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", _config.CaseBG)},
						new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"}
					}
				});

				container.Add(new CuiLabel
				{
					RectTransform = {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -40", OffsetMax = "0 -5"},
					Text = {Text = Case.DisplayName, Align = TextAnchor.MiddleCenter, FontSize = 12}
				}, Layer + $".Case.{i}");

				container.Add(new CuiElement
				{
					Parent = Layer + $".Case.{i}",
					Components =
					{
						new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", Case.Image)},
						new CuiRectTransformComponent
							{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-70 -65", OffsetMax = "70 75"}
					}
				});

				Outline(ref container, Layer + $".Case.{i}");

				container.Add(new CuiButton
				{
					RectTransform =
						{AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-58 15", OffsetMax = "58 35"},
					Button = {Command = $"UI_Battlepass showcase {i - 1}", Color = "0 0 0 0"},
					Text =
					{
						Text = Msg("Cases show", player.UserIDString), Align = TextAnchor.MiddleCenter,
						FontSize = 12
					}
				}, Layer + $".Case.{i}", Layer + $".Case.{i}.Btn");

				Outline(ref container, Layer + $".Case.{i}.Btn");

				if (i % 3 == 0)
				{
					ySwitch -= 215;
					xSwitch = -335;
				}
				else
				{
					xSwitch += 205;
				}
			}

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void CaseUI(BasePlayer player, int caseId, bool isFirstCurrent = true, int count = 1)
		{
			var Case = _config.Cases[caseId];

			var container = new CuiElementContainer();

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Title

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 250", OffsetMax = "0 290"},
				Text =
				{
					Text = Msg("Cases title", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 26
				}
			}, Layer + ".Main");

			#endregion

			#region Back

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass cases", Color = "0 0 0 0"},
				Text = {Text = Msg("Back", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#region Case

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 200", OffsetMax = "0 250"},
				Text = {Text = $"<b>{Case.DisplayName}</b>", Align = TextAnchor.MiddleLeft, FontSize = 18}
			}, Layer + ".Main");

			container.Add(new CuiElement
			{
				Parent = Layer + ".Main",
				Components =
				{
					new CuiRawImageComponent {Png = ImageLibrary.Call<string>("GetImage", Case.Image)},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-290 5", OffsetMax = "-110 185"}
				}
			});

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-310 -25", OffsetMax = "-110 -5"},
				Text =
				{
					Text = Msg("Case pick current", player.UserIDString), Align = TextAnchor.MiddleLeft,
					FontSize = 12, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Main");

			#region FirstCurrent

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-210 -30", OffsetMax = "-135 0"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".FirstCurrent");

			Outline(ref container, Layer + ".FirstCurrent", "1 1 1 0.2");

			if (isFirstCurrent)
			{
				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
					Image = {Color = "1 1 1 0.2"}
				}, Layer + ".FirstCurrent");

				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -5", OffsetMax = "2 0"},
					Image = {Color = OrangeColor}
				}, Layer + ".FirstCurrent");

				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -2", OffsetMax = "5 0"},
					Image = {Color = OrangeColor}
				}, Layer + ".FirstCurrent");
			}

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "5 -10", OffsetMax = "25 10"},
				Image = {Png = ImageLibrary.Call<string>("GetImage", _config.FirstCurrency.Image)}
			}, Layer + ".FirstCurrent");

			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "0.5 1"},
				Text =
				{
					Text = $"{Case.FCost * count}", Align = TextAnchor.MiddleRight, FontSize = 12,
					Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".FirstCurrent");

			container.Add(new CuiButton
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Button = {Command = $"UI_Battlepass setvalue {caseId} {true} {count}", Color = "0 0 0 0"},
				Text = {Text = ""}
			}, Layer + ".FirstCurrent");

			#endregion

			#region SecondCurrent

			if (_config.useSecondCur && (_config.SecondCurrency.Permission.IsNullOrEmpty() ||
			                             permission.UserHasPermission(player.UserIDString,
				                             _config.SecondCurrency.Permission)))
			{
				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-130 -30", OffsetMax = "-55 0"},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Main", Layer + ".SecondCurrent");

				Outline(ref container, Layer + ".SecondCurrent", "1 1 1 0.2");

				if (!isFirstCurrent)
				{
					container.Add(new CuiPanel
					{
						RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
						Image = {Color = "1 1 1 0.2"}
					}, Layer + ".SecondCurrent");

					container.Add(new CuiPanel
					{
						RectTransform =
							{AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -5", OffsetMax = "2 0"},
						Image = {Color = OrangeColor}
					}, Layer + ".SecondCurrent");

					container.Add(new CuiPanel
					{
						RectTransform =
							{AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -2", OffsetMax = "5 0"},
						Image = {Color = OrangeColor}
					}, Layer + ".SecondCurrent");
				}

				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "5 -10", OffsetMax = "25 10"},
					Image = {Png = ImageLibrary.Call<string>("GetImage", _config.SecondCurrency.Image)}
				}, Layer + ".SecondCurrent");

				container.Add(new CuiLabel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "0.5 1"},
					Text =
					{
						Text = $"{Case.PCost * count}", Align = TextAnchor.MiddleRight, FontSize = 12,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".SecondCurrent");

				container.Add(new CuiButton
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
					Button = {Command = $"UI_Battlepass setvalue {caseId} {false} {count}", Color = "0 0 0 0"},
					Text = {Text = ""}
				}, Layer + ".SecondCurrent");
			}

			#endregion

			#region Items

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "70 200", OffsetMax = "270 250"},
				Text =
				{
					Text = Msg("Case awards", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 18
				}
			}, Layer + ".Main");

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "70 -70", OffsetMax = "320 195"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".Items");

			var ySwitch = 0;
			for (var i = 0; i < Case.Items.Count; i++)
			{
				var Item = Case.Items[i];

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = $"0 {ySwitch - 15}",
						OffsetMax = $"0 {ySwitch}"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Items", Layer + $".Item.{i}");

				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "0 1", OffsetMin = "0 0", OffsetMax = "2 0"},
					Image = {Color = OrangeColor}
				}, Layer + $".Item.{i}");

				container.Add(new CuiLabel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "0 0"},
					Text =
					{
						Text = Item.Title, Align = TextAnchor.MiddleLeft, FontSize = 12,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + $".Item.{i}");

				ySwitch -= 20;
			}

			#endregion

			#region Buttons

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-205 -75", OffsetMax = "-50 -50"},
				Button =
				{
					Command = $"UI_Battlepass tryopencase {caseId} {isFirstCurrent} {count}", Color = "0 0 0 0"
				},
				Text =
				{
					Text = Msg("Case open", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 12
				}
			}, Layer + ".Main", Layer + ".Btn.Open.Case");

			Outline(ref container, Layer + ".Btn.Open.Case", "1 1 1 1", "1");

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-235 -75", OffsetMax = "-210 -50"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".InputLayer");

			Outline(ref container, Layer + ".InputLayer", "1 1 1 1", "1");

			container.Add(new CuiElement
			{
				Parent = Layer + ".InputLayer",
				Name = Layer + ".InputLayer.Value",
				Components =
				{
					new CuiInputFieldComponent
					{
						FontSize = 12, Align = TextAnchor.MiddleCenter,
						Command = $"UI_Battlepass setvalue {caseId} {isFirstCurrent} ", Text = $"{count}",
						Color = "1 1 1 1", CharsLimit = 1
					},
					new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"}
				}
			});

			#endregion

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void CaseModalUI(BasePlayer player, int caseId, bool isFreeCoin, int count)
		{
			var Case = _config.Cases[caseId];

			var container = new CuiElementContainer();

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0.6"}
			}, "Overlay", ModalLayer);

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-300 -200", OffsetMax = "300 200"},
				Image = {Color = "0 0 0 1"}
			}, ModalLayer, ModalLayer + ".Main");

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0 0.5", AnchorMax = "1 0.5", OffsetMin = "50 -50", OffsetMax = "-50 170"},
				Text =
				{
					Text = Msg("Modal tryopen", player.UserIDString, Case.DisplayName),
					Align = TextAnchor.MiddleCenter, FontSize = 30
				}
			}, ModalLayer + ".Main");

			container.Add(new CuiButton
			{
				RectTransform = {AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-30 -30", OffsetMax = "0 0"},
				Button = {Close = ModalLayer, Color = "0 0 0 0"},
				Text = {Text = "X", Align = TextAnchor.MiddleCenter, FontSize = 24}
			}, ModalLayer + ".Main");

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-150 80", OffsetMax = "150 110"},
				Button =
				{
					Command = $"UI_Battlepass opencase {caseId} {isFreeCoin} {count}", Close = ModalLayer,
					Color = "0 0 0 0"
				},
				Text =
				{
					Text = Msg("Modal accept", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 18
				}
			}, ModalLayer + ".Main", ModalLayer + ".Main.Accept");

			Outline(ref container, ModalLayer + ".Main.Accept");

			CuiHelper.DestroyUi(player, ModalLayer);
			CuiHelper.AddUi(player, container);
		}

		private void RefreshBalance(BasePlayer player)
		{
			var container = new CuiElementContainer();

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0 -10", OffsetMax = "225 10"},
				Text =
				{
					Text = $"{_config.FirstCurrency.ShowBalance(player)}", FontSize = 12,
					Align = TextAnchor.MiddleRight, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header", Layer + ".FreeCoins");

			if (_config.useSecondCur && (_config.SecondCurrency.Permission.IsNullOrEmpty() ||
			                             permission.UserHasPermission(player.UserIDString,
				                             _config.SecondCurrency.Permission)))
				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0 -10", OffsetMax = "310 10"},
					Text =
					{
						Text = $"{_config.SecondCurrency.ShowBalance(player)}", FontSize = 12,
						Align = TextAnchor.MiddleRight, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Header", Layer + ".PaidCoins");

			CuiHelper.DestroyUi(player, Layer + ".FreeCoins");
			CuiHelper.DestroyUi(player, Layer + ".PaidCoins");
			CuiHelper.AddUi(player, container);
		}

		private void OpenCasesUI(BasePlayer player, int page = 0)
		{
			if (!openedCaseItems.ContainsKey(player)) return;

			var items = openedCaseItems[player];

			var item = items?[page];
			if (item == null) return;

			var container = new CuiElementContainer();

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Title

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 250", OffsetMax = "0 290"},
				Text = {Text = Msg("Your award", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 26}
			}, Layer + ".Main");

			#endregion

			#region Close

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass cases", Color = "0 0 0 0"},
				Text = {Text = Msg("Back", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#region Selected item

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-200 160", OffsetMax = "200 230"},
				Text = {Text = $"{item.Title}", Align = TextAnchor.UpperCenter, FontSize = 16}
			}, Layer + ".Main");

			container.Add(new CuiElement
			{
				Parent = Layer + ".Main",
				Components =
				{
					new CuiRawImageComponent
					{
						Png = ImageLibrary.Call<string>("GetImage",
							!string.IsNullOrEmpty(item.Image) ? item.Image : item.Shortname)
					},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-95 -50", OffsetMax = "95 140"}
				}
			});

			#endregion

			#region Items

			var xSwitch = -(items.Count * 140 + (items.Count - 1) * 10) / 2;
			for (var i = 0; i < items.Count; i++)
			{
				var itemCase = items[i];

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{xSwitch} -180",
						OffsetMax = $"{xSwitch + 140} -100"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Main", Layer + $".Item.{i}");

				Outline(ref container, Layer + $".Item.{i}");

				if (i == page)
					container.Add(new CuiPanel
					{
						RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
						Image = {Color = "1 1 1 0.2"}
					}, Layer + $".Item.{i}");

				container.Add(new CuiElement
				{
					Parent = Layer + $".Item.{i}",
					Components =
					{
						new CuiRawImageComponent
						{
							Png = ImageLibrary.Call<string>("GetImage",
								!string.IsNullOrEmpty(itemCase.Image) ? itemCase.Image : itemCase.Shortname)
						},
						new CuiRectTransformComponent
							{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-38 -38", OffsetMax = "38 38"}
					}
				});

				container.Add(new CuiButton
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
					Button = {Command = $"UI_Battlepass changepage {i}", Color = "0 0 0 0"},
					Text = {Text = ""}
				}, Layer + $".Item.{i}");

				xSwitch += 150;
			}

			#endregion

			#region Button

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-100 -280", OffsetMax = "100 -250"},
				Button = {Command = "UI_Battlepass inventory", Color = "0 0 0 0"},
				Text =
				{
					Text = Msg("Go to inventory", player.UserIDString), Align = TextAnchor.MiddleCenter,
					FontSize = 12
				}
			}, Layer + ".Main", Layer + ".Inventory");

			Outline(ref container, Layer + ".Inventory");

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void InventoryUI(BasePlayer player, int page = 0)
		{
			var data = GetPlayerData(player);
			if (data == null) return;

			var container = new CuiElementContainer();

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Title

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 250", OffsetMax = "0 290"},
				Text =
				{
					Text = Msg("Inventory title", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 26
				}
			}, Layer + ".Main");

			#endregion

			#region Close

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass main", Color = "0 0 0 0"},
				Text = {Text = Msg("Back", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#region Items

			var ItemSize = 80;
			var Margin = 5;
			var ItemsOnString = 8;
			var Lines = 6;

			var maxCount = Lines * ItemsOnString;

			var xSwitch = -335;
			var ySwitch = 170;

			for (var i = 0; i < maxCount; i++)
			{
				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{xSwitch} {ySwitch}",
						OffsetMax = $"{xSwitch + ItemSize} {ySwitch + ItemSize}"
					},
					Image = {Color = "1 1 1 0.2"}
				}, Layer + ".Main", Layer + $".Items.{i}");

				Outline(ref container, Layer + $".Items.{i}", "1 1 1 0.2");

				if ((i + 1) % ItemsOnString == 0)
				{
					xSwitch = -335;
					ySwitch = ySwitch - ItemSize - Margin;
				}
				else
				{
					xSwitch = xSwitch + ItemSize + Margin;
				}
			}

			var items = GetItemsByPage(data, page, maxCount);

			var g = 0;
			foreach (var item in items)
			{
				container.Add(new CuiElement
				{
					Parent = Layer + $".Items.{g}",
					Components =
					{
						new CuiRawImageComponent
						{
							Png = ImageLibrary.Call<string>("GetImage",
								!string.IsNullOrEmpty(item.Value.Image) ? item.Value.Image : item.Value.Shortname,
								item.Value.Skin)
						},
						new CuiRectTransformComponent
							{AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 5", OffsetMax = "-5 -5"}
					}
				});

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-50 2.5", OffsetMax = "-2.5 17.5"},
					Text =
					{
						Text = $"x{item.Value.Amount}", Align = TextAnchor.LowerRight, FontSize = 10,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + $".Items.{g}");

				container.Add(new CuiButton
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
					Button =
					{
						Command = $"UI_Battlepass giveitem {page} {maxCount} {item.Key} {g}", Color = "0 0 0 0"
					},
					Text = {Text = ""}
				}, Layer + $".Items.{g}", Layer + $".Items.{g}.BtnBuy");

				g++;
			}

			#endregion

			#region Pages

			var pages = (int) Math.Ceiling((double) data.Items.Count / maxCount);

			if (pages > 1)
			{
				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-335 -275",
						OffsetMax = "340 -260"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Main", Layer + ".Pages");

				var size = 1.0f / pages;

				var pSwitch = 0.0f;

				for (var i = 0; i < pages; i++)
				{
					container.Add(new CuiButton
					{
						RectTransform = {AnchorMin = $"{pSwitch} 0", AnchorMax = $"{pSwitch + size} 1"},
						Button =
						{
							Command = $"UI_Battlepass invpage {i}", Color = i == page ? "1 1 1 0.6" : "1 1 1 0.2"
						},
						Text = {Text = ""}
					}, Layer + ".Pages");

					pSwitch += size;
				}
			}

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void GiveUI(BasePlayer player, int itemId)
		{
			var container = new CuiElementContainer();

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {FadeIn = 1f, Color = "0.5 1 0.5 0.2", Sprite = "assets/content/ui/ui.background.tile.psd"}
			}, Layer + $".Items.{itemId}", Layer + $".Items.{itemId}.Hover");

			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text =
				{
					Text = Msg("Item gived", player.UserIDString), Align = TextAnchor.MiddleCenter,
					Color = "0.7 1 0.7 1", FontSize = 14
				}
			}, Layer + $".Items.{itemId}.Hover");

			CuiHelper.AddUi(player, container);
		}

		private void MissionsUI(BasePlayer player, int page = 0)
		{
			var data = GetPlayerData(player);
			if (data == null) return;

			var container = new CuiElementContainer();

			#region Main

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Image = {Color = "0 0 0 0"}
			}, Layer, Layer + ".Main");

			#region Back

			container.Add(new CuiButton
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "200 295", OffsetMax = "320 315"},
				Button = {Command = "UI_Battlepass main", Color = "0 0 0 0"},
				Text = {Text = Msg("Back", player.UserIDString), Align = TextAnchor.MiddleRight, FontSize = 16}
			}, Layer + ".Main");

			#endregion

			#region Private Mission

			var privateMission = GetPrivateMission(data);
			if (privateMission != null)
			{
				var progress = data.MissionProgress > privateMission.Amount
					? privateMission.Amount
					: data.MissionProgress;

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 230", OffsetMax = "-15 235"
					},
					Image = {Color = ProgressBarColor}
				}, Layer + ".Main", Layer + ".ProgressBar");

				var progressLine = progress / (float) privateMission.Amount;
				container.Add(new CuiPanel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = $"{progressLine} 1"},
					Image = {Color = progressLine > 0f ? OrangeColor : "0 0 0 0"}
				}, Layer + ".ProgressBar");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 240", OffsetMax = "0 255"},
					Text =
					{
						Text = Msg("PM Progress", player.UserIDString), Align = TextAnchor.MiddleLeft,
						FontSize = 11, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 240", OffsetMax = "-15 255"
					},
					Text =
					{
						Text = $"{progress} / {privateMission.Amount}", Align = TextAnchor.MiddleRight,
						FontSize = 11, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 260", OffsetMax = "0 290"},
					Text =
					{
						Text = Msg("PM title", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 16
					}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "15 260", OffsetMax = "320 290"},
					Text =
					{
						Text = Msg("PM description", player.UserIDString), Align = TextAnchor.MiddleLeft,
						FontSize = 16
					}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "15 200", OffsetMax = "325 255"},
					Text =
					{
						Text = $"{privateMission.Description}", Align = TextAnchor.UpperLeft, FontSize = 11,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "15 195", OffsetMax = "150 215"},
					Text =
					{
						Text = Msg("PM award", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 11,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Main");

				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "85 195", OffsetMax = "105 215"},
					Image = {Png = ImageLibrary.Call<string>("GetImage", _config.FirstCurrency.Image)}
				}, Layer + ".Main");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "55 195", OffsetMax = "80 215"},
					Text =
					{
						Text = $"{privateMission.MainAward}", Align = TextAnchor.MiddleRight, FontSize = 11,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + ".Main");

				if (privateMission.UseSecondAward && (_config.SecondCurrency.Permission.IsNullOrEmpty() ||
				                                      permission.UserHasPermission(player.UserIDString,
					                                      _config.SecondCurrency.Permission)))
				{
					container.Add(new CuiPanel
					{
						RectTransform =
						{
							AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "135 195",
							OffsetMax = "155 215"
						},
						Image = {Png = ImageLibrary.Call<string>("GetImage", _config.SecondCurrency.Image)}
					}, Layer + ".Main");

					container.Add(new CuiLabel
					{
						RectTransform =
						{
							AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "100 195",
							OffsetMax = "130 215"
						},
						Text =
						{
							Text = $"{privateMission.SecondAward}", Align = TextAnchor.MiddleRight, FontSize = 11,
							Font = "robotocondensed-regular.ttf"
						}
					}, Layer + ".Main");
				}

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-335 164.5",
						OffsetMax = "325 165.5"
					},
					Image = {Color = "1 1 1 0.2"}
				}, Layer + ".Main");
			}

			#endregion

			#region Titles

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-320 95", OffsetMax = "0 165"},
				Text =
				{
					Text = Msg("Missions title", player.UserIDString), Align = TextAnchor.MiddleLeft, FontSize = 14
				}
			}, Layer + ".Main");

			var span = nextTime.Subtract(DateTime.Now);

			container.Add(new CuiLabel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-150 95", OffsetMax = "150 165"},
				Text =
				{
					Text = Msg("Mission tochange", player.UserIDString, FormatShortTime(span)),
					Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Main", Layer + ".Cooldown");

			#endregion

			#region Missions Header

			#region Description

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-355 65", OffsetMax = "-10 95"},
				Image = {Color = "1 1 1 0.2"}
			}, Layer + ".Main", Layer + ".Header.Description");
			Arrow(ref container, Layer + ".Header.Description");
			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "10 0", OffsetMax = "0 0"},
				Text =
				{
					Text = Msg("Mission description", player.UserIDString), Align = TextAnchor.MiddleLeft,
					FontSize = 11, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header.Description");

			#endregion

			#region Progress

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-5 65", OffsetMax = "75 95"},
				Image = {Color = "1 1 1 0.2"}
			}, Layer + ".Main", Layer + ".Header.Progress");
			Arrow(ref container, Layer + ".Header.Progress");
			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text =
				{
					Text = Msg("Mission progress", player.UserIDString), Align = TextAnchor.MiddleCenter,
					FontSize = 11, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header.Progress");

			#endregion

			#region Main_award

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "80 65", OffsetMax = "150 95"},
				// {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "115 65", OffsetMax = "230 95"},
				Image = {Color = "1 1 1 0.2"}
			}, Layer + ".Main", Layer + ".Header.Main_award");
			Arrow(ref container, Layer + ".Header.Main_award");
			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text =
				{
					Text = Msg("Mission mainaward", player.UserIDString), Align = TextAnchor.MiddleCenter,
					FontSize = 11, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header.Main_award");

			#endregion

			#region Second_Award

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "155 65", OffsetMax = "230 95"},
				// {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "115 65", OffsetMax = "230 95"},
				Image = {Color = "1 1 1 0.2"}
			}, Layer + ".Main", Layer + ".Header.Second_Award");
			Arrow(ref container, Layer + ".Header.Second_Award");
			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text =
				{
					Text = Msg("Mission secondaward", player.UserIDString), Align = TextAnchor.MiddleCenter,
					FontSize = 11, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header.Second_Award");

			#endregion

			#region Advance_award

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "235 65", OffsetMax = "310 95"},
				Image = {Color = "1 1 1 0.2"}
			}, Layer + ".Main", Layer + ".Header.Advance_award");
			Arrow(ref container, Layer + ".Header.Advance_award");
			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
				Text =
				{
					Text = Msg("Mission adwaward", player.UserIDString), Align = TextAnchor.MiddleCenter,
					FontSize = 11, Font = "robotocondensed-regular.ttf"
				}
			}, Layer + ".Header.Advance_award");

			#endregion

			#endregion

			#region Missions

			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-355 55", OffsetMax = "310 55"},
				Image = {Color = "0 0 0 0"}
			}, Layer + ".Main", Layer + ".Missions");

			var missions = GetMessingByPage(page, 5);

			var ySwitch = 0;

			for (var i = 0; i < missions.Count; i++)
			{
				var check = missions[i];

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = $"0 {ySwitch - 30}",
						OffsetMax = $"0 {ySwitch}"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Missions", Layer + $".Mission.{i}");

				container.Add(new CuiLabel
				{
					RectTransform = {AnchorMin = "0 0", AnchorMax = "0 1", OffsetMin = "5 0", OffsetMax = "345 0"},
					Text =
					{
						Text = $"{5 * page + i + 1}. {check.Mission.Description}", Align = TextAnchor.MiddleLeft,
						FontSize = 12, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + $".Mission.{i}");

				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "360 0", OffsetMax = "420 1"},
					Image = {Color = OrangeColor}
				}, Layer + $".Mission.{i}");

				var progress = GetMissionProgress(player, check.ID);
				var progressAmount = progress > check.Mission.Amount ? check.Mission.Amount : progress;
				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "350 0", OffsetMax = "430 30"},
					Text =
					{
						Text = $"{progressAmount} / {check.Mission.Amount}", Align = TextAnchor.MiddleCenter,
						FontSize = 12, Font = "robotocondensed-regular.ttf"
					}
				}, Layer + $".Mission.{i}");

				#region Main Award

				container.Add(new CuiPanel
				{
					RectTransform =
						{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "475 5", OffsetMax = "495 25"},
					Image =
					{
						Png = ImageLibrary.Call<string>("GetImage", _config.FirstCurrency.Image),
						Color = OrangeColor
					}
				}, Layer + $".Mission.{i}");

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "435 5", OffsetMax = "470 25"},
					Text =
					{
						Text = $"{check.Mission.MainAward * GetPlayerRates(player.UserIDString)}",
						Align = TextAnchor.MiddleRight, FontSize = 12,
						Font = "robotocondensed-regular.ttf"
					}
				}, Layer + $".Mission.{i}");

				#endregion

				if (check.Mission.UseSecondAward)
				{
					container.Add(new CuiPanel
					{
						RectTransform =
							{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "535 5", OffsetMax = "555 25"},
						Image =
						{
							Png = ImageLibrary.Call<string>("GetImage", _config.SecondCurrency.Image),
							Color = OrangeColor
						}
					}, Layer + $".Mission.{i}");

					container.Add(new CuiLabel
					{
						RectTransform =
							{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "500 5", OffsetMax = "535 25"},
						Text =
						{
							Text = $"{check.Mission.SecondAward}",
							Align = TextAnchor.MiddleRight, FontSize = 12,
							Font = "robotocondensed-regular.ttf"
						}
					}, Layer + $".Mission.{i}");
				}

				if (check.Mission.UseAdvanceAward)
				{
					container.Add(new CuiPanel
					{
						RectTransform =
							{AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "617.5 5", OffsetMax = "637.5 25"},
						Image =
						{
							Png = ImageLibrary.Call<string>("GetImage", _config.AdvanceAward),
							Color = OrangeColor
						}
					}, Layer + $".Mission.{i}", Layer + $".Mission.{i}.AdvanceAward");

					container.Add(new CuiButton
					{
						RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
						Button = {Command = $"UI_Battlepass showaward {check.ID} {ySwitch}", Color = "0 0 0 0"},
						Text = {Text = ""}
					}, Layer + $".Mission.{i}.AdvanceAward");
				}

				ySwitch -= 35;
			}

			#endregion

			#region Pages

			var pages = (int) Math.Ceiling((double) _generalMissions.Count / 5);

			if (pages > 1)
			{
				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "315 -115", OffsetMax = "325 95"
					},
					Image = {Color = "0 0 0 0"}
				}, Layer + ".Main", Layer + ".Pages");

				var size = 1.0 / pages;

				var pSwitch = 0.0;

				for (var i = pages - 1; i >= 0; i--)
				{
					container.Add(new CuiButton
					{
						RectTransform = {AnchorMin = $"0 {pSwitch}", AnchorMax = $"1 {pSwitch + size}"},
						Button =
						{
							Command = $"UI_Battlepass mispage {i}", Color = i == page ? "1 1 1 0.6" : "1 1 1 0.2"
						},
						Text = {Text = ""}
					}, Layer + ".Pages");

					pSwitch += size;
				}
			}

			#endregion

			#endregion

			CuiHelper.DestroyUi(player, Layer + ".Main");
			CuiHelper.AddUi(player, container);
		}

		private void ShowAward(BasePlayer player, MissionConfig mission, int ySwitch)
		{
			if (mission == null) return;

			ySwitch += 15;

			var container = new CuiElementContainer();
			var guid = CuiHelper.GetGuid();

			container.Add(new CuiPanel
			{
				RectTransform =
				{
					AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"135 {ySwitch - 95}",
					OffsetMax = $"310 {ySwitch}"
				},
				Image = {Color = "0 0 0 1"},
				FadeOut = 0.1f
			}, Layer + ".Main", guid);

			Outline(ref container, guid, OrangeColor);

			container.Add(new CuiElement
			{
				Parent = guid,
				Components =
				{
					new CuiRawImageComponent
					{
						Png = ImageLibrary.Call<string>("GetImage",
							!string.IsNullOrEmpty(mission.AdvanceAward.Image)
								? mission.AdvanceAward.Image
								: mission.AdvanceAward.Shortname)
					},
					new CuiRectTransformComponent
						{AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-35 -25", OffsetMax = "35 45"}
				},
				FadeOut = 0.1f
			});

			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "0 0", OffsetMax = "0 20"},
				Text =
				{
					Text = mission.AdvanceAward.Title, Align = TextAnchor.MiddleCenter, FontSize = 12,
					Font = "robotocondensed-regular.ttf"
				},
				FadeOut = 0.1f
			}, guid);

			CuiHelper.AddUi(player, container);

			InvokeHandler.Instance.Invoke(() =>
			{
				if (player == null) return;
				CuiHelper.DestroyUi(player, guid);
			}, 2.5f);
		}

		private void RefreshCooldown()
		{
			var span = nextTime.Subtract(DateTime.Now);
			var shortTime = FormatShortTime(span);

			if (needUpdate)
			{
				needUpdate = false;

				for (var i = 0; i < _missionPlayers.Count; i++)
				{
					var player = _missionPlayers[i];
					if (player == null || !player.IsConnected) continue;

					MissionsUI(player);
				}
			}
			else
			{
				for (var i = 0; i < _missionPlayers.Count; i++)
				{
					var player = _missionPlayers[i];
					if (player == null || !player.IsConnected) continue;

					var container = new CuiElementContainer();

					container.Add(new CuiLabel
					{
						RectTransform =
						{
							AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-150 95",
							OffsetMax = "150 165"
						},
						Text =
						{
							Text = Msg("Mission tochange", player.UserIDString, shortTime),
							Align = TextAnchor.MiddleCenter, FontSize = 16, Font = "robotocondensed-regular.ttf"
						}
					}, Layer + ".Main", Layer + ".Cooldown");

					CuiHelper.DestroyUi(player, Layer + ".Cooldown");
					CuiHelper.AddUi(player, container);
				}
			}
		}

		private void Notification(BasePlayer player, string key, params object[] obj)
		{
			var container = new CuiElementContainer();
			var guid = CuiHelper.GetGuid();

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-320 10", OffsetMax = "-20 60"},
				Image = {Color = HexToCuiColor("#E54D41FF")},
				FadeOut = 0.4f
			}, Layer + ".Main", guid);

			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "0 1", OffsetMin = "0 0", OffsetMax = "3 0"},
				Image = {Color = HexToCuiColor("#BF2E24FF")},
				FadeOut = 0.4f
			}, guid);

			container.Add(new CuiLabel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "2.5 0", OffsetMax = "-20 0"},
				Text =
				{
					Text = Msg(key, player.UserIDString, obj), Align = TextAnchor.MiddleRight, FontSize = 12,
					Font = "robotocondensed-regular.ttf"
				},
				FadeOut = 0.4f
			}, guid);

			CuiHelper.AddUi(player, container);

			InvokeHandler.Instance.Invoke(() => CuiHelper.DestroyUi(player, guid), 2.5f);
		}

		#endregion

		#region Utils

		private void OnMissionsProgress(BasePlayer player, MissionType type, Item item = null, BaseEntity entity = null,
			int grade = 0)
		{
			if (player == null || _data?.PlayerDatas == null || !_data.PlayerDatas.ContainsKey(player.userID)) return;

			var data = GetPlayerData(player);
			if (data == null) return;

			_generalMissions?.ForEach(check =>
			{
				var mission = check.Mission;

				if (!_config.Missions.ContainsKey(check.ID) || mission.Type != type) return;

				if (!data.Missions.ContainsKey(check.ID))
					data.Missions.Add(check.ID, 0);

				if (data.Missions[check.ID] >= mission.Amount) return;

				var amount = CheckMission(mission, item, entity, grade);

				data.Missions[check.ID] += amount;

				if (data.Missions[check.ID] >= mission.Amount)
				{
					CompleteMission(player, mission);
					if (_config.ResetQuestAfterComplete)
						data.Missions[check.ID] = 0;
				}
			});

			var privateMission = GetPrivateMission(data);
			if (privateMission == null) return;

			if (data.MissionProgress >= privateMission.Amount || privateMission.Type != type) return;

			var count = CheckMission(privateMission, item, entity, grade);

			data.MissionProgress += count;

			if (data.MissionProgress >= privateMission.Amount)
			{
				CompleteMission(player, privateMission, true);
				if (_config.ResetQuestAfterComplete)
					data.MissionProgress = 0;
			}
		}

		private static int CheckMission(MissionConfig mission, Item item, BaseEntity entity, int grade)
		{
			if (mission == null) return 0;

			var amount = 0;

			switch (mission.Type)
			{
				case MissionType.Build:
				{
					if (entity == null || !entity.name.Contains(mission.Shortname)) return 0;
					amount = 1;
					break;
				}
				case MissionType.Gather:
				{
					if (item == null || item.info.shortname != mission.Shortname) return 0;
					amount = item.amount;
					break;
				}
				case MissionType.Look:
				{
					if (item == null || item.info.shortname != mission.Shortname ||
					    mission.Skin != 0 && item.skin != mission.Skin) return 0;
					amount = item.amount;
					break;
				}
				case MissionType.Craft:
				{
					if (item == null || item.info.shortname != mission.Shortname) return 0;
					amount = item.amount;
					break;
				}
				case MissionType.Kill:
				{
					if (entity == null || !entity.ShortPrefabName.Contains(mission.Shortname)) return 0;
					amount = 1;
					break;
				}
				case MissionType.Upgrade:
				{
					if (entity == null || !entity.name.Contains(mission.Shortname) || mission.Grade != grade) return 0;
					amount = 1;
					break;
				}
			}

			return amount;
		}

		private static void CompleteMission(BasePlayer player, MissionConfig mission, bool isPrivate = false)
		{
			if (player == null || mission == null) return;

			mission.GiveAwards(player);
		}

		private void CheckPlayersMission()
		{
			var now = DateTime.Now;

			foreach (var data in _data.PlayerDatas.Values.Where(x => GetPrivateMission(x) == null))
			{
				data.MissionDate = now;
				data.MissionId = _privateMissions.GetRandom();
				data.MissionProgress = 0;
			}
		}

		private static string FormatShortTime(TimeSpan time)
		{
			var result = new List<int>();
			if (time.Days != 0)
				result.Add(time.Days);

			if (time.Hours != 0)
				result.Add(time.Hours);

			if (time.Minutes != 0)
				result.Add(time.Minutes);

			if (time.Seconds != 0)
				result.Add(time.Seconds);

			return string.Join(":", result.Take(2).Select(x => x.ToString()));
		}

		private static MissionConfig GetPrivateMission(PlayerData data)
		{
			return _config.PrivateMissions.ContainsKey(data.MissionId) ? _config.PrivateMissions[data.MissionId] : null;
		}

		private void UpdateMissions()
		{
			var now = DateTime.Now;

			nextTime = _data.MissionsDate;

			_privateMissions = _config.PrivateMissions.Keys.ToList();

			if (now.Subtract(nextTime).TotalHours >= 0)
			{
				_generalMissions.Clear();
				_generalMissions.AddRange(GetRandomMissions());

				var nextHours = new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, 0);

				var addHours = nextHours.AddHours(_config.MissionHours);

				nextTime = addHours;

				_data.MissionsDate = nextTime;

				_data.Missions.Clear();

				foreach (var data in _data.PlayerDatas.Values)
					data.Missions.Clear();

				_generalMissions.ForEach(mission => _data.Missions.Add(mission.ID));

				foreach (var player in BasePlayer.allPlayerList)
					UpdatePlayerMission(player, now);
			}
			else
			{
				_generalMissions.Clear();

				_data.Missions.ForEach(id =>
				{
					var mission = _config.Missions.ContainsKey(id) ? _config.Missions[id] : null;
					if (mission == null) return;

					_generalMissions.Add(new GeneralMission {ID = id, Mission = mission});
				});
			}

			var seconds = (int) nextTime.Subtract(now).TotalSeconds;

			needUpdate = true;

			InvokeHandler.Instance.Invoke(UpdateMissions, seconds + 2.5f);

			InvokeHandler.Instance.InvokeRepeating(RefreshCooldown, 60, 60);
		}

		private void UpdatePlayerMission(BasePlayer player, DateTime now)
		{
			if (player == null) return;

			var data = GetPlayerData(player);
			if (data == null) return;

			data.MissionDate = now;
			data.MissionId = _privateMissions.GetRandom();
			data.MissionProgress = 0;
		}

		private List<GeneralMission> GetRandomMissions()
		{
			var x = _config.Missions.Select(configQuest =>
				new GeneralMission {ID = configQuest.Key, Mission = configQuest.Value}).ToList();

			var seed = (uint) DateTime.UtcNow.Ticks;
			x.Shuffle(seed);

			return x.Take(_config.MissionsCount).ToList();
		}

		private static PlayerData GetPlayerData(BasePlayer player)
		{
			return GetPlayerData(player.userID);
		}

		private static PlayerData GetPlayerData(ulong userId)
		{
			if (!_data.PlayerDatas.ContainsKey(userId))
				_data.PlayerDatas.Add(userId, new PlayerData());

			return _data.PlayerDatas[userId];
		}

		private int GetFirstCurrency(ulong userId)
		{
			return GetFirstCurrency(GetPlayerData(userId));
		}

		private int GetFirstCurrency(PlayerData data)
		{
			return data?.FirstCurrency ?? 0;
		}

		private int GetSecondCurrency(ulong userId)
		{
			return GetSecondCurrency(GetPlayerData(userId));
		}

		private int GetSecondCurrency(PlayerData data)
		{
			return data?.SecondCurrency ?? 0;
		}

		private bool RemoveFirstCurrency(ulong player, int amount)
		{
			return RemoveFirstCurrency(GetPlayerData(player), amount);
		}

		private bool RemoveFirstCurrency(BasePlayer player, int amount)
		{
			return RemoveFirstCurrency(GetPlayerData(player), amount);
		}

		private bool RemoveFirstCurrency(PlayerData data, int amount)
		{
			if (data == null || data.FirstCurrency < amount) return false;
			data.FirstCurrency -= amount;
			return true;
		}

		private bool RemoveSecondCurrency(ulong player, int amount)
		{
			return RemoveSecondCurrency(GetPlayerData(player), amount);
		}

		private bool RemoveSecondCurrency(BasePlayer player, int amount)
		{
			return RemoveSecondCurrency(GetPlayerData(player), amount);
		}

		private bool RemoveSecondCurrency(PlayerData data, int amount)
		{
			if (data == null || data.SecondCurrency < amount) return false;
			data.SecondCurrency -= amount;
			return true;
		}

		private bool AddFirstCurrency(ulong player, int amount)
		{
			return AddFirstCurrency(GetPlayerData(player), amount);
		}

		private bool AddFirstCurrency(BasePlayer player, int amount)
		{
			return AddFirstCurrency(GetPlayerData(player), amount);
		}

		private bool AddFirstCurrency(PlayerData data, int amount)
		{
			if (data == null) return false;
			data.FirstCurrency += amount;
			return true;
		}

		private bool AddSecondCurrency(ulong player, int amount)
		{
			return AddSecondCurrency(GetPlayerData(player), amount);
		}

		private bool AddSecondCurrency(BasePlayer player, int amount)
		{
			return AddSecondCurrency(GetPlayerData(player), amount);
		}

		private bool AddSecondCurrency(PlayerData data, int amount)
		{
			if (data == null) return false;
			data.SecondCurrency += amount;
			return true;
		}

		private static List<ItemCase> GetRandom(CaseClass Case, int count)
		{
			var result = new List<ItemCase>();

			for (var i = 0; i < count; i++)
			{
				ItemCase item = null;

				var iteration = 0;
				do
				{
					iteration++;

					var randomItem = Case.Items[Random.Range(0, Case.Items.Count)];

					if (randomItem.Chance < 1 || randomItem.Chance > 100)
						continue;

					if (Random.Range(0f, 100f) <= randomItem.Chance)
						item = randomItem;
				} while (item == null && iteration < 1000);

				if (item != null)
					result.Add(item);
			}

			return result;
		}

		private static void Outline(ref CuiElementContainer container, string parent, string color = "1 1 1 1",
			string size = "1.5")
		{
			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "0 0", OffsetMax = $"0 {size}"},
				Image = {Color = color}
			}, parent);
			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = $"0 -{size}", OffsetMax = "0 0"},
				Image = {Color = color}
			}, parent);
			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "0 0", AnchorMax = "0 1", OffsetMin = $"0 {size}", OffsetMax = $"{size} -{size}"},
				Image = {Color = color}
			}, parent);
			container.Add(new CuiPanel
			{
				RectTransform =
					{AnchorMin = "1 0", AnchorMax = "1 1", OffsetMin = $"-{size} {size}", OffsetMax = $"0 -{size}"},
				Image = {Color = color}
			}, parent);
		}

		private void Arrow(ref CuiElementContainer container, string parent)
		{
			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -5", OffsetMax = "2 0"},
				Image = {Color = OrangeColor}
			}, parent);
			container.Add(new CuiPanel
			{
				RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -2", OffsetMax = "5 0"},
				Image = {Color = OrangeColor}
			}, parent);
		}

		private Dictionary<int, ItemCase> GetItemsByPage(PlayerData data, int page, int count)
		{
			var result = new Dictionary<int, ItemCase>();

			var skipCount = page * count;

			var i = 0;
			foreach (var itemCraft in data.Items)
			{
				if (i >= skipCount)
					result.Add(itemCraft.Key, itemCraft.Value);

				i++;

				if (result.Count >= count) break;
			}

			return result;
		}

		private List<GeneralMission> GetMessingByPage(int page, int count)
		{
			var result = new List<GeneralMission>();

			var skipCount = page * count;

			for (var i = 0; i < _generalMissions.Count; i++)
			{
				var mission = _generalMissions[i];

				if (i < skipCount) continue;

				result.Add(mission);

				if (result.Count >= count) break;
			}

			return result;
		}

		private static int GetMissionProgress(BasePlayer player, int missionId)
		{
			var data = GetPlayerData(player);
			if (data == null) return 0;
			int progress;
			data.Missions.TryGetValue(missionId, out progress);
			return progress;
		}

		private static float GetPlayerRates(string userId)
		{
			var result = 1f;

			foreach (var rate in _config.FirstCurrency.Rates)
				if (_instance.permission.UserHasPermission(userId, rate.Key) && rate.Value > result)
					result = rate.Value;

			return result;
		}

		private static string HexToCuiColor(string hex)
		{
			if (string.IsNullOrEmpty(hex)) hex = "#FFFFFFFF";

			var str = hex.Trim('#');

			if (str.Length == 6)
				str += "FF";

			if (str.Length != 8) throw new Exception(hex);

			var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
			var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
			var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
			var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
			Color color = new Color32(r, g, b, a);
			return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
		}

		#endregion

		#region Log

		private void Log(string filename, string key, params object[] obj)
		{
			var text = Msg(key, null, obj);
			if (_config.LogToConsole) Puts(text);

			if (_config.LogToFile) LogToFile(filename, $"[{DateTime.Now}] {text}", this);
		}

		#endregion

		#region Lang

		protected override void LoadDefaultMessages()
		{
			lang.RegisterMessages(new Dictionary<string, string>
			{
				["Not enough"] = "Not enough coins",
				["opencase"] = "Player {0} ({1}) opened case {2} and received from there: {3}",
				["getitem"] = "Player {0} ({1}) taked from inventory: {2}",
				["givemoney"] = "Player {0} ({1}) received {2} to the balance in {3}",
				["Mission btn"] = "TESTING THE HORGON",
				["Cases btn"] = "SEASONAL STORE",
				["Inventory btn"] = "INVENTORY",
				["Exit"] = "« QUIT",
				["Back"] = "« BACK",
				["Cases title"] = "PRODUCTS",
				["Cases show"] = "LOOK",
				["Case pick current"] = "Choose currency",
				["Case awards"] = "<b>Possible awards</b>",
				["Case open"] = "OPEN",
				["Modal tryopen"] = "YOU ARE GOING TO OPEN\n'{0}'",
				["Modal accept"] = "CONFIRM",
				["Your award"] = "YOUR AWARD",
				["Go to inventory"] = "GO TO INVENTORY",
				["Inventory title"] = "INVENTORY",
				["Item gived"] = "SUCCESS\nRECEIVED",
				["PM Progress"] = "Active mission progress",
				["PM title"] = "CHALLENGE OF THE DAY",
				["PM description"] = "DESCRIPTION",
				["PM award"] = "Award:",
				["Missions title"] = "CHALLENGES OF THE DAY",
				["Mission tochange"] = "Before the change of tasks left: <color=#bd5221>{0}</color>",
				["Mission description"] = "<b>Description</b>",
				["Mission progress"] = "<b>Progress:</b>",
				["Mission mainaward"] = "<b>Main award</b>",
				["Mission adwaward"] = "<b>Extra award</b>",
				["Mission secondaward"] = "<b>Second award</b>",
				["NoPermission"] = "You dont have permission to use this command!",
				["NoCasePermission"] = "You have no permissions to open this case"
			}, this);

			lang.RegisterMessages(new Dictionary<string, string>
			{
				["Not enough"] = "Недостаточно монет",
				["opencase"] = "Игрок {0} ({1}) открыл кейс {2} и получил оттуда: {3}",
				["getitem"] = "Игрок {0} ({1}) забрал из инвентаря: {2}",
				["givemoney"] = "Игрок {0} ({1}) получил {2} на баланс в {3}",
				["Mission btn"] = "ИСПЫТАНИЯ ГОРГОНЫ",
				["Cases btn"] = "СЕЗОННЫЙ МАГАЗИН",
				["Inventory btn"] = "ИНВЕНТАРЬ",
				["Exit"] = "« ВЫЙТИ",
				["Back"] = "« НАЗАД",
				["Cases title"] = "ТОВАРЫ",
				["Cases show"] = "ПОСМОТРЕТЬ",
				["Case pick current"] = "Выбери валюту",
				["Case awards"] = "<b>Возможные призы</b>",
				["Case open"] = "ОТКРЫТЬ",
				["Modal tryopen"] = "ВЫ СОБИРАЕТЕСЬ ОТКРЫТЬ\n'{0}'",
				["Modal accept"] = "ПОДТВЕРДИТЬ",
				["Your award"] = "ВАША НАГРАДА",
				["Go to inventory"] = "ПЕРЕЙТИ В ИНВЕНТАРЬ",
				["Inventory title"] = "ИНВЕНТАРЬ",
				["Item gived"] = "УСПЕШНО\nПОЛУЧЕНО",
				["PM Progress"] = "Прогресс активного задания",
				["PM title"] = "ВЫЗОВ ДНЯ",
				["PM description"] = "ОПИСАНИЕ",
				["PM award"] = "Награда:",
				["Missions title"] = "ЗАДАЧИ ДНЯ",
				["Mission tochange"] = "До смены заданий осталось: <color=#bd5221>{0}</color>",
				["Mission description"] = "<b>Описание</b>",
				["Mission progress"] = "<b>Прогресс:</b>",
				["Mission mainaward"] = "<b>Основная награда</b>",
				["Mission adwaward"] = "<b>Доп. награда</b>",
				["Mission secondaward"] = "<b>Вторая награда</b>",
				["NoPermission"] = "У вас нет право на использование этой команды!",
				["NoCasePermission"] = "У вас нет прав на открытие этого кейса!"
			}, this, "ru");
		}

		private string Msg(string key, string userid = null, params object[] obj)
		{
			return string.Format(lang.GetMessage(key, this, userid), obj);
		}

		private void Reply(BasePlayer player, string key, params object[] obj)
		{
			player.ChatMessage(Msg(key, player.UserIDString, obj));
		}

		#endregion
	}
}

// --- End of file: Battlepass.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Cornucopia.cs ---
// --- Original Local Path: Cornucopia.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using Random = UnityEngine.Random;
using Oxide.Core.Plugins;
using Oxide.Core;


namespace Oxide.Plugins
{
    [Info("Cornucopia", "Deicide666ra", "1.1.4", ResourceId = 1264)]
    class Cornucopia : RustPlugin
    {
        class CornuConfig
        {
            public CornuConfig()
            {
                // Animals
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/chicken.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/horse.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/boar.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/stag.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/wolf.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Animals.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/animals/bear.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });

                // Ore nodes
                Ores.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/resource/ores/stone-ore.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Ores.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/resource/ores/metal-ore.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });
                Ores.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/resource/ores/sulfur-ore.prefab", Min = -1, Max = -1, IgnoreIrridiated = true });

                // Silver barrels
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/loot_barrel_1.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Brown barrels
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/loot_barrel_2.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Oil Drums
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/oil_barrel.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Trashcans
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/loot_trash.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Trash piles (food)
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/autospawn/resource/loot/trash-pile-1.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Weapon crates
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/crate_normal.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });

                // Box crates
                Loots.Add(new CornuConfigItem { Prefab = "assets/bundled/prefabs/radtown/crate_normal_2.prefab", Min = -1, Max = -1, IgnoreIrridiated = true, DeleteEmtpy = false });
            }

            // Refresh Interval in minutes
            public int RefreshMinutes= 15;

            // Apply the loot fix to prevent stacked rad town loot crates
            public bool ApplyLootFix= true;

            // Run the cycle on start
            public bool RefreshOnStart= false;

            // If true, any item that has a maximum will be prevented from spawning outside of the Cornucopia spawn cycle
            //public bool MaxSpawnBlock = true;

            public List<CornuConfigItem> Animals= new List<CornuConfigItem>();
            public List<CornuConfigItem> Ores = new List<CornuConfigItem>();
            public List<CornuConfigItem> Loots = new List<CornuConfigItem>();
        }

        class CornuConfigItem
        {
            public string Prefab;
            public int Min;
            public int Max;
            public bool IgnoreIrridiated;
            public bool DeleteEmtpy;
        }

        private CornuConfig g_config;
        private Timer g_refreshTimer;
        //private bool g_spawnBlock = true;

        void Loaded() => LoadConfigValues();
        protected override void LoadDefaultConfig()
        {
            g_config = new CornuConfig();
            Config.WriteObject(g_config, true);
            Puts("New configuration file created.");
        }

        void LoadConfigValues()
        {
            try
            {
                g_config = Config.ReadObject<CornuConfig>();
            }
            catch
            {
                Puts("Could not read config, creating new default config.");
                LoadDefaultConfig();
            }

            //g_spawnBlock = g_config.MaxSpawnBlock;
        }

        [HookMethod("SendHelpText")]
        private void SendHelpText(BasePlayer player)
        {
            var sb = new StringBuilder();
            sb.Append("<color=yellow>Cornucopia 1.1.4.0</color> Â· Controls resource abundance\n");
            if (player.IsAdmin())
            {
                sb.Append("  Â· ").AppendLine("<color=lime>/cdump</color> (<color=orange>cornu.dump</color>) for RCON stats");
                sb.Append("  Â· ").AppendLine("<color=lime>/cspawn</color> (<color=orange>cornu.spawn</color>) adjusts resources");
                sb.Append("  Â· ").AppendLine("<color=lime>/cfixloot</color> (<color=orange>cornu.fixloot</color>) loot box stacking fix");
                sb.Append("  Â· ").Append("<color=lime>/cpurge</color> (<color=orange>cornu.purge</color>) deletes ALL resources");
            }
            player.ChatMessage(sb.ToString());
        }

        void OnServerInitialized()
        {
            g_refreshTimer = timer.Every(g_config.RefreshMinutes * 60, OnTimer);
        }

        void OnTimer()
        {
            if (g_config.ApplyLootFix) FixLoot(null);

            //g_spawnBlock = false;
            try
            {
                MainSpawnCycle();
            }
            finally
            {
                //g_spawnBlock = g_config.MaxSpawnBlock;
            }
        }

        void Unloaded()
        {
            if (g_refreshTimer != null)
            {
                g_refreshTimer.Destroy();
                g_refreshTimer = null;
            }
        }

        Dictionary<string, int> GetCollectibles()
        {
            // wood
            // stone-1
            // metalore-2
            // sulfurore-3
            // mushroom-cluster-1
            // mushroom-cluster-2
            // mushroom-cluster-3
            // mushroom-cluster-4
            // mushroom-cluster-5
            // mushroom-cluster-6
            // hemp
            return Resources.FindObjectsOfTypeAll<CollectibleEntity>()
                .Where(c => c.isActiveAndEnabled && !c.LookupShortPrefabName().Contains("hemp") && !c.LookupShortPrefabName().Contains("mushroom"))
                .GroupBy(c => c.LookupShortPrefabName()).ToDictionary(c => c.Key, c => c.Count());
        }

        Dictionary<string, IGrouping<string, BaseEntity>> GetOreNodes()
        {
            // stone-ore
            // metal-ore
            // sulfur-ore
            return Resources.FindObjectsOfTypeAll<BaseResource>()
                .Where(c => /*c.name.StartsWith("autospawn") &&*/ c.isActiveAndEnabled)
                .Cast<BaseEntity>()
                .GroupBy(c => c.LookupShortPrefabName()).ToDictionary(c => c.Key, c => c);
        }

        Dictionary<string, IGrouping<string, BaseEntity>> GetLootContainers()
        {
            // loot_trash
            // loot_barrel_1
            // loot_barrel_2
            // crate_normal
            // crate_normal_2
            return Resources.FindObjectsOfTypeAll<LootContainer>()
                .Where(c => c.isActiveAndEnabled)
                .Cast<BaseEntity>()
                .GroupBy(c => c.LookupShortPrefabName()).ToDictionary(c => c.Key, c => c);
        }

        Dictionary<string, IGrouping<string, BaseEntity>> GetAnimals()
        {
            // chicken
            // horse
            // boar
            // stag
            // wolf
            // bear
            return Resources.FindObjectsOfTypeAll<BaseNPC>()
                .Where(c => c.isActiveAndEnabled)
                .Cast<BaseEntity>()
                .GroupBy(c => c.LookupShortPrefabName()).ToDictionary(c => c.Key, c => c);
        }

        void DumpSpawns(Dictionary<string, int> entities)
        {
            foreach (var t in entities)
                Puts($"{t.Key.PadRight(50)} {t.Value}");
        }

        void DumpSpawns(Dictionary<string, IGrouping<string, BaseEntity>> entities)
        {
            foreach (var t in entities)
                Puts($"{t.Key.PadRight(50)} {t.Value.Count()}");
        }

        [ConsoleCommand("cornu.dump")]
        private void DumpCommand(ConsoleSystem.Arg arg)
        {
            if (arg != null && arg.Player() != null && arg.Player().IsAdmin() == false) return;
            DumpEntities();
        }

        [ConsoleCommand("cornu.spawn")]
        private void SpawnCommand(ConsoleSystem.Arg arg)
        {
            if (arg != null && arg.Player() != null && arg.Player().IsAdmin() == false) return;
            MainSpawnCycle();
        }

        [ConsoleCommand("cornu.fixloot")]
        private void FixLootCommand(ConsoleSystem.Arg arg)
        {
            if (arg != null && arg.Player() != null && arg.Player().IsAdmin() == false) return;
            FixLoot(null);
        }

        [ConsoleCommand("cornu.purge")]
        private void PurgeCommand(ConsoleSystem.Arg arg)
        {
            if (arg != null && arg.Player() != null && arg.Player().IsAdmin() == false) return;
            Purge();
        }

        void DumpEntities()
        {
            Puts($"= COLLECTIBLES ================");
            DumpSpawns(GetCollectibles());
            Puts($"= NODES =======================");
            DumpSpawns(GetOreNodes());
            Puts($"= CONTAINERS ==================");
            DumpSpawns(GetLootContainers());
            Puts($"= ANIMALS =====================");
            DumpSpawns(GetAnimals());
        }

        Vector2 GetBoxPos(LootContainer box)
        {
            return new Vector2(box.transform.position.x, box.transform.position.z);
        }

        [ChatCommand("cpurge")]
        void cmdPurge(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin())
            {
                player.ChatMessage("You need to be admin to run this command, sorry buddy!");
                return;
            }
            Purge();
        }

        [ChatCommand("cfixloot")]
        void cmdFixLoot(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin())
            {
                player.ChatMessage("You need to be admin to run this command, sorry buddy!");
                return;
            }
            FixLoot(player);
        }

        [ChatCommand("cdump")]
        void cmdDump(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin())
            {
                player.ChatMessage("You need to be admin to run this command, sorry buddy!");
                return;
            }
            DumpEntities();
        }

        [ChatCommand("cspawn")]
        void cmdSpawn(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin())
            {
                player.ChatMessage("You need to be admin to run this command, sorry buddy!");
                return;
            }
            player.ChatMessage("Respawning the lost ones!");
            MainSpawnCycle();
            player.ChatMessage("... and done!");
        }

        [ChatCommand("ctest")]
        void cmdTest(BasePlayer player, string cmd, string[] args)
        {

            var toto = Resources.FindObjectsOfTypeAll<LootContainer>()
                .Where(c => c.isActiveAndEnabled && c.LookupShortPrefabName().Contains("trash-pile"));

            Puts($"{toto.First().LookupPrefabName()}");
        }

        void SubCycle(IEnumerable<BaseEntity> entities, IEnumerable<CornuConfigItem> limits, List<CollectibleEntity> collectibles, ref bool aborted)
        {
            foreach (var spawn in limits)
            {
                if (spawn.Min == -1 && spawn.Max == -1) continue;

                var matches = entities.Where(r => r.LookupPrefabName() == spawn.Prefab);

                if (matches.Count() < spawn.Min && spawn.Min != -1)
                {
                    if (!aborted) BatchSpawn(matches.Count(), spawn.Min, spawn.Prefab, collectibles, ref aborted);
                }
                else if (matches.Count() > spawn.Max && spawn.Max != -1)
                {
                    PopulationControl(matches, spawn.Max);
                }

                var deleted = 0;
                if (spawn.DeleteEmtpy)
                {
                    foreach (var match in matches.OfType<LootContainer>())
                    {
                        if (!match.inventory.itemList.Any())
                        {
                            match.Kill(BaseNetworkable.DestroyMode.None);
                            deleted++;
                        }
                    }
                }
                if (deleted > 0) Puts($"Deleted {deleted} empty {spawn.Prefab}");
            }
        }

        void MainSpawnCycle()
        {            
            var doAnimals = g_config.Animals.Any(a => a.Min != -1 || a.Max != -1);
            var doOres = g_config.Ores.Any(a => a.Min != -1 || a.Max != -1);
            var doLoots = g_config.Loots.Any(a => a.Min != -1 || a.Max != -1);

            if (!doAnimals && !doOres && !doLoots)
            {
                Puts("Nothing to process, skipping MainSpawnCycle()");
                return;
            }

            var tick = DateTime.Now;
            var collectibles = Resources.FindObjectsOfTypeAll<CollectibleEntity>().Where(c => c.isActiveAndEnabled).ToList();
            //Puts($"collectibles: {(DateTime.Now - tick).TotalMilliseconds} ms");

            var aborted = false;

            if (doAnimals)
            {
                tick = DateTime.Now;
                SubCycle(Resources.FindObjectsOfTypeAll<BaseNPC>().Where(c => c.isActiveAndEnabled).Cast<BaseEntity>(), g_config.Animals, collectibles, ref aborted);
                //Puts($"npc: {(DateTime.Now - tick).TotalMilliseconds} ms");
            }

            if (doOres)
            {
                tick = DateTime.Now;
                SubCycle(Resources.FindObjectsOfTypeAll<BaseResource>().Where(c => c.isActiveAndEnabled).Cast<BaseEntity>(), g_config.Ores, collectibles, ref aborted);
                //Puts($"res: {(DateTime.Now - tick).TotalMilliseconds} ms");
            }

            if (doLoots)
            {
                tick = DateTime.Now;
                SubCycle(Resources.FindObjectsOfTypeAll<LootContainer>().Where(c => c.isActiveAndEnabled).Cast<BaseEntity>(), g_config.Loots, collectibles, ref aborted);
                //Puts($"loot: {(DateTime.Now - tick).TotalMilliseconds} ms");
            }
        }

        void PopulationControl(IEnumerable<BaseEntity> matches, int cap)
        {
            if (cap < 0) return;
            if (matches.Count() < cap) return;
            if (matches.Count() == 0) return;
            var toDelete = matches.Count() - cap;

            var killed = 0;
            var shortPrefabName = matches.First().LookupShortPrefabName();

            while (killed != toDelete)
            {
                var idx = Random.Range(0, matches.Count() - 1);
                var match = matches.ElementAt(idx);
                if (!match.enabled) continue;
                match.enabled= false;
                match.Kill();
                killed++;
            }

            Puts($"Destroying {toDelete}X {shortPrefabName}!");
        }

        void BatchSpawn(int current, int wanted, string prefab, List<CollectibleEntity> collectibles, ref bool aborted)
        {
            if (aborted) return;

            int toSpawn = wanted - current;
            if (toSpawn <= 0) return;

            if (toSpawn > collectibles.Count())
            {
                Puts($"Could not find enough collectibles to complete the spawn cycle (this is normal after a server restart, it takes time!)");
                aborted = true;
                toSpawn = collectibles.Count();
            }

            Puts($"Spawning {toSpawn}X {prefab}!");
            for (int i = 0; i < toSpawn; i++)
                ReplaceCollectibleWithSomething(prefab, collectibles);

            return;
        }

        private void ReplaceCollectibleWithSomething(string prefabName, List<CollectibleEntity> collectibles)
        {
            // Pick a collectible that we did not replace yet and remove it from the list
            var pick = Random.Range(0, collectibles.Count() - 1);
            var spawnToReplace = collectibles.ElementAt(pick);
            collectibles.RemoveAt(pick);

            // save the position
            var position = spawnToReplace.transform.position;

            // delete the collectible (we are replacing it)
            spawnToReplace.Kill();

            BaseEntity entity = GameManager.server.CreateEntity(prefabName, position, new Quaternion(0, 0, 0, 0));
            if (entity == null)
            {
                Puts($"Tried to spawn {prefabName} but entity could not be spawned.");
                return;
            }

            entity.name = prefabName;
            entity.Spawn(true);
        }

        void FixLoot(BasePlayer player)
        {
            var spawns = Resources.FindObjectsOfTypeAll<LootContainer>()
                .Where(c => c.isActiveAndEnabled && c.LookupShortPrefabName().StartsWith("crate")).
                OrderBy(c => c.transform.position.x).ThenBy(c => c.transform.position.z).ThenBy(c => c.transform.position.z)
                .ToList();

            var count = spawns.Count();
            var racelimit = count * count;

            var antirace = 0;
            var deleted = 0;

            for (var i = 0; i < count; i++)
            {
                var box = spawns[i];
                var pos = GetBoxPos(box);

                if (++antirace > racelimit)
                {
                    Puts("Race condition detected ?! report to author");
                    return;
                }

                var next = i + 1;
                while (next < count)
                {
                    var box2 = spawns[next];
                    var pos2 = GetBoxPos(box2);
                    var distance = Vector2.Distance(pos, pos2);

                    if (++antirace > racelimit)
                    {
                        Puts("Race condition detected ?! report to author");
                        return;
                    }

                    if (distance < 5)
                    {
                        spawns.RemoveAt(next);
                        count--;
                        box2.Kill();
                        deleted++;
                    }
                    else break;
                }
            }

            if (deleted > 0)
                Puts($"Deleted {deleted} stacked loot boxes (out of {count})");
            if (player != null)
                player.ChatMessage($"Deleted {deleted} stacked loot boxes (out of {count})");
        }

        private void Purge()
        {
            // Delete all spawnables
            var ores = GetOreNodes();
            foreach (var grp in ores)
                foreach (var ore in grp.Value) ore.Kill();

            var loots = GetLootContainers();
            foreach (var grp in loots)
                foreach (var loot in grp.Value) loot.Kill();

            var animals = GetAnimals();
            foreach (var grp in animals)
                foreach (var animal in grp.Value) animal.Kill();
        }

        //void OnEntitySpawned(BaseNetworkable entity)
        //{
        //    if (!g_spawnBlock) return;

        //    var controlled = g_config.Animals.Union(g_config.Ores).Union(g_config.Loots);
        //    var prefab = entity.LookupPrefabName();
        //    if (controlled.Any(c => c.Prefab == prefab && c.Max != -1))
        //    {
        //        entity.Kill();
        //        //Puts($"BLOCKED OnEntitySpawned {entity.LookupShortPrefabName()}");
        //    }
        //}
    }
}


// --- End of file: Cornucopia.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TPStatsSystem.cs ---
// --- Original Local Path: TPStatsSystem.cs ---

using System.IO;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("TPStatsSystem", "Sempai#3239", "5.0.0")]
    public class TPStatsSystem : RustPlugin
    {
        #region [Vars]
        [PluginReference] private Plugin ImageLibrary = null;
        private string[] _gatherHooks = {
            "OnDispenserGather",
            "OnDispenserBonus",
            "OnCollectiblePickup",
        };
        private static TPStatsSystem plugin;
        private const string Layer = "TPStatsSystem.Layer";

        private readonly Dictionary<ulong, BasePlayer> _lastHeli = new Dictionary<ulong, BasePlayer>();
        private Dictionary<string, int> _itemIds = new Dictionary<string, int>();
        private List<ulong> _lootEntity = new List<ulong>();
        #endregion

        #region [ImageLibrary]
        private bool HasImage(string imageName, ulong imageId = 0) => (bool)ImageLibrary.Call("HasImage", imageName, imageId);
        private bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);
        private string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary?.Call("GetImage", shortname, skin);
        #endregion

        #region [Data]
        Dictionary<ulong, playerData> _playerList = new Dictionary<ulong, playerData>();

		public class playerData
		{
			public string Name;

            public int Point;

            public int PlayTimeInServer = 0;

            public int Kill = 0;

            public int Death = 0;

            public Dictionary<string, int> Gather = new Dictionary<string, int>()
            {
                { "wood", 0 },
                { "stones", 0 },
                { "metal.ore", 0 },
                { "sulfur.ore", 0},
                { "hq.metal.ore", 0 },
                { "cloth", 0},
                { "leather", 0},
                { "fat.animal", 0},
                { "loot-barrel", 0}
            };

            public int TotalFarm() => Gather.Sum(p => p.Value);
        }

		private playerData GetPlayerData(ulong member)
		{
			if (!_playerList.ContainsKey(member))
				_playerList.Add(member, new playerData());

			return _playerList[member];
		}

		private void SavePlayer()
		{
			Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerList", _playerList);
		}

		private void LoadPlayer()
		{
			try
			{
				_playerList = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, playerData>>($"{Name}/PlayerList");
			}
			catch (Exception e)
			{
				PrintError(e.ToString());
			}

			if (_playerList == null) _playerList = new Dictionary<ulong, playerData>();
		}
        #endregion

        #region [Oxide]
        private void OnPluginLoaded(Plugin plugin)
        {
            NextTick(() =>
            {
                foreach (string hook in _gatherHooks)
                {
                    Unsubscribe(hook);
                    Subscribe(hook);
                }
            });
        }

		private void Init()
		{
			plugin = this;

			LoadPlayer();
		}

        private void OnServerInitialized()
        {
            cmd.AddChatCommand(config.openMenuTop, this, "cmdOpenStats");
            
            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);

            ImageLibrary.Call("AddImage", $"https://rustage.su/img/server/ui/stat_bg.png", "P72zCAu");
            ImageLibrary.Call("AddImage", "https://rustage.su/img/server/ui/stat_skip.png", "Skip");
            ImageLibrary.Call("AddImage", "https://rustage.su/img/server/ui/stat_skipback.png", "SkipBack");
            if (config._NotifyChatRandom.chatSendTop)
                timer.Every(config._NotifyChatRandom.chatSendTopTime, GetRandomTopPlayer);
            timer.Every(60, TimeHandle);
        }

		private void Unload()
		{
			foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
            }

			SavePlayer();
			plugin = null;
		}

		private void OnNewSave(string filename)
		{
            WipeEnded();
		}
        #endregion

        #region [Reward]
        private void WipeEnded()
        {
            if(config._GameStoreSettings.GivePrize && !string.IsNullOrEmpty(config._GameStoreSettings.ShopID) && !string.IsNullOrEmpty(config._GameStoreSettings.SecretKey))
            {
                var sortedData = _playerList.OrderByDescending(x => x.Value.Point);
                int pos = 1;

                foreach (var user in sortedData)
                {
                    if (config._GameStoreSettings.RewardSettings.ContainsKey(pos))
                    {
                        var args = new Dictionary<string, string>()
                        {
                            { "action", "moneys" },
                            { "type", "plus" },
                            { "steam_id", user.Key.ToString() },
                            { "amount", config._GameStoreSettings.RewardSettings[pos].ToString() }
                        };
                        string url = $"https://gamestores.ru/api/?shop_id={config._GameStoreSettings.ShopID}&secret={config._GameStoreSettings.SecretKey}" + $"{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
                        webrequest.Enqueue(url, null, (i, s) =>
                        {
                            if (i != 200)
                            {
                                PrintError($"Ошибка {i}: {s}");
                                return;
                            }
                        }, this);
                    }
                    pos++;
                }
            }

            foreach (var playerData in _playerList)
            {
                playerData.Value.Point = 0;
                playerData.Value.PlayTimeInServer = 0;
                playerData.Value.Kill = 0;
                playerData.Value.Death = 0;
                playerData.Value.Gather = new Dictionary<string, int>()
                {
                    ["wood"] = 0,
                    ["stones"] = 0,
                    ["metal.ore"] = 0,
                    ["hq.metal.ore"] = 0,
                    ["sulfur.ore"] = 0,
                    ["cloth"] = 0,
                    ["leather"] = 0,
                    ["fat.animal"] = 0,
                    ["loot-barrel"] = 0
                };
            }
            SavePlayer();
        }
        #endregion

        #region [Gui]
        private void PlayerTop(BasePlayer player, int page = 0)
        {
            #region [Vars]
            var container = new CuiElementContainer();
            #endregion

            #region [Parrent]
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Color = "0.36 0.33 0.28 0" }
            }, "MainStats" + ".Main", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8 0.804", AnchorMax = "0.817 0.832" },
                Button = { Close = "Menu_UI", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.78 0.805", AnchorMax = "0.795 0.833", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0", Command = "statdesc" },
                Text = { Text = "?", Color = "1 1 1 0.7", Align = TextAnchor.MiddleCenter, FontSize = 16, Font = "robotocondensed-regular.ttf" }
            }, Layer);
            #endregion

            #region [Text]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.45 0.682", AnchorMax = "0.807 0.72" },
                Image = { Color = "0 0 0 0" }
            }, Layer, "MainStats" + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.024 0", AnchorMax = "1 1" },
                Text = { Text = $"#", Color = "1 1 1 1", Align = TextAnchor.MiddleLeft, FontSize = 14, Font = "robotocondensed-bold.ttf" }
            }, "MainStats" + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.1 0", AnchorMax = "1 1" },
                Text = { Text = $"ИМЯ ИГРОКА", Color = "1 1 1 0.85", Align = TextAnchor.MiddleLeft, FontSize = 13, Font = "robotocondensed-bold.ttf" }
            }, "MainStats" + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.69 0", AnchorMax = "1 1" },
                Text = { Text = $"НАГРАДА", Color = "1 1 1 0.85", Align = TextAnchor.MiddleLeft, FontSize = 13, Font = "robotocondensed-bold.ttf" }
            }, "MainStats" + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.88 0", AnchorMax = "1 1" },
                Text = { Text = $"ОЧКИ", Color = "1 1 1 0.85", Align = TextAnchor.MiddleLeft, FontSize = 13, Font = "robotocondensed-bold.ttf" }
            }, "MainStats" + ".Main" + ".Text");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.195 0.188", AnchorMax = "0.438 0.377" },
                Image = { Color = "1 1 1 0" }
            }, Layer, "MainStats" + ".Main" + ".TextPoint");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Очки даются:\nУбийство +{config._PointsKillDeath.pKill}, добыча камня +{config._PointsSettings.pStone}, добыча метала +{config._PointsSettings.pMetal}, добыча серы +{config._PointsSettings.pSulfur}, разрушение бочки +{config._PointsSettings.pBarrel},\nсбитие вертолета +{config._PointsDestroy.dHeli}, уничтожение танка +{config._PointsDestroy.dBradley}\nОчки отнимаются:\nСмерть -{config._PointsKillDeath.pDeath}, самоубийство -{config._PointsKillDeath.pSuicide}\nНаграда выдается после вайпа на сервере!", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.045 0.04", AnchorMax = $"1 1" },
            }, "MainStats" + ".Main" + ".TextPoint");
            #endregion

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);
            TopPlayerList(player, page);
        }

        [ConsoleCommand("statdesc")]
        void DescUI(ConsoleSystem.Arg args) {
            var player = args.Player();
            CuiHelper.DestroyUi(player, "MainStats" + ".Main" + ".Description");
            var container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = "MainStats" + ".Main" + ".Description",
                Parent = "MainStats" + ".Main",
                Components = {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "fonDescription") },
                    new CuiRectTransformComponent { AnchorMin = $"0.58 0.6", AnchorMax = $"0.8 0.8" },
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = "0.9 1" },
                Text = { Text = $"Описание статистики", Color = "1 1 1 0.65",FontSize = 14, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleLeft }
            }, "MainStats" + ".Main" + ".Description");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.05 0", AnchorMax = "1 0.7" },
                Text = { Text = $"{config.Info}", Color = "1 1 1 0.65",FontSize = 12, Font = "robotocondensed-bold.ttf", Align = TextAnchor.UpperLeft }
            }, "MainStats" + ".Main" + ".Description");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.9 0.82", AnchorMax = "0.98 0.98" },
                Button = { Close = "MainStats" + ".Main" + ".Description", Color = "1 1 1 0" },
                Text = { Text = "" }
            }, "MainStats" + ".Main" + ".Description");

            CuiHelper.AddUi(player, container);
        }

        private void TopPlayerList(BasePlayer player, int page = 0)
        {
            #region [Vars]
            var playerList = _playerList.OrderByDescending(p => p.Value.Point);
            var container = new CuiElementContainer();
            string colored = "0 0 0 0.5";
            int i = 0;
            #endregion

            #region [Main]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.45 0.17", AnchorMax = "0.807 0.675" },
                Image = { Color = "0 0 0 0" }
            }, "MainStats" + ".Main", Layer + ".Main" + "TopPlayerList");
            #endregion

            #region [Button]
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.505 0.03", AnchorMax = $"0.7 0.1" },
                Button = { Color = "1 1 1 0", Command = playerList.Skip(10 * (page + 1)).Count() > 0 ? $"UI_BSTATS ChangeTopPage {page + 1}" : "" },
                Text = { Text = $"", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-bold.ttf" }
            }, Layer + ".Main" + "TopPlayerList", "Skips");

            container.Add(new CuiElement
            {
                Parent = "Skips",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "Skip"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.3 0.03", AnchorMax = $"0.495 0.1" },
                Button = { Color = "1 1 1 0", Command = page > 0 ? $"UI_BSTATS ChangeTopPage {page - 1}" : "" },
                Text = { Text = $"", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-bold.ttf" }
            }, Layer + ".Main" + "TopPlayerList", "SkipsBack");

            container.Add(new CuiElement
            {
                Parent = "SkipsBack",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "SkipBack"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                }
            });
            #endregion

            #region [PlayerInfo]
            for (int y = 0; y < 9; y++)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"0 {0.915 - y * 0.099}", AnchorMax = $"1 {0.984 - y * 0.099}" },
                    Image = { Color = "0 0 0 0" }
                }, Layer + ".Main" + "TopPlayerList", Layer + ".Main" + "TopPlayerList" + $".TopLine{y}");
            }

            foreach (var key in playerList.Skip(10 * page).Take(playerList.ToList().Count >= 10 ? 10 : playerList.ToList().Count))
            {
                container.Add(new CuiLabel
                {
                    Text = { Text = $"{i + (1 + (page * 10))}", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter },
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.067 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiLabel
                {
                    Text = { Text = BasePlayer.FindByID(key.Key) != null ? "<color=lime>●</color>" : "<color=red>●</color>", Font = "robotocondensed-regular.ttf", FontSize = 7, Color = "1 1 1 1", Align = TextAnchor.MiddleLeft },
                    RectTransform = { AnchorMin = $"0.0925 0", AnchorMax = $"0.44 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiLabel
                {
                    Text = { Text = $"{key.Value.Name}", Font = "robotocondensed-regular.ttf", FontSize = 12, Color = "1 1 1 1", Align = TextAnchor.MiddleLeft },
                    RectTransform = { AnchorMin = $"0.1085 0", AnchorMax = $"0.45 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                if (config._GameStoreSettings.RewardSettings.ContainsKey(i + (1 + (page * 10))))
                {
                    container.Add(new CuiLabel
                    {
                        Text = { Text = $"{config._GameStoreSettings.RewardSettings.ElementAt(i + (page * 10)).Value} RUB", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter },
                        RectTransform = { AnchorMin = $"0.675 0", AnchorMax = $"0.82 1" },
                    }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");
                }

                container.Add(new CuiLabel
                {
                    Text = { Text = $"{key.Value.Point}", Font = "robotocondensed-regular.ttf", FontSize = 12, Color = "1 1 1 1", Align = TextAnchor.MiddleCenter },
                    RectTransform = { AnchorMin = $"0.83 0", AnchorMax = $"1 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"UI_BSTATS OpenProfileStats {key.Key}" },
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"1 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                i++;
            }
            #endregion

            CuiHelper.DestroyUi(player, Layer + ".Main" + "TopPlayerList");
            CuiHelper.AddUi(player, container);
        }

        private void PlayerTopInfo(BasePlayer player, ulong playerID)
        {
            #region [Vars]
            var container = new CuiElementContainer();
            string colored = "0 0 0 0.5";

            var data = GetPlayerData(playerID);
            if (data == null) return;
            #endregion

            #region [Parrent]
            container.Add(new CuiElement
            {
                Name = "MainStats" + ".Main",
                Parent = ".Mains",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "P72zCAu"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "-0.315 -0.27", AnchorMax = "1.3 1.275", OffsetMax = "0 0" },
                }
            });
            #endregion

            #region [Main-Gui]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.195 0.38", AnchorMax = "0.438 0.72" },
                Image = { Color = "0 0 0 0" }
            }, "MainStats" + ".Main", Layer + ".Profile");
            #endregion

            #region [Avatar]
            container.Add(new CuiElement
            {
                Parent =  Layer + ".Profile",
                Components =
                {
                    new CuiRawImageComponent { Png = GetImage($"avatar_{playerID}") },
                    new CuiRectTransformComponent { AnchorMin = "0.035 0.51", AnchorMax = "0.38 0.945", OffsetMin = "4 4", OffsetMax = "-4 -4" }
                }
            });
            #endregion

            #region [Title]
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.36 0.91", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Text = { Text = "●", Color = BasePlayer.FindByID(playerID) != null ? "0.00 1.00 0.00 1.00" : "1.00 0.00 0.00 1.00", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, Layer + ".Profile");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.46 0.91", AnchorMax = $"0.99 1", OffsetMax = "0 0" },
                Text = { Text = $"{data.Name}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 20, Font = "robotocondensed-regular.ttf" }
            }, Layer + ".Profile");
            #endregion

            #region [Info]
            Dictionary<string, string> _playerInfo = new Dictionary<string, string>()
            {
                { "МЕСТО В ТОПЕ:", $"{GetTopScore(playerID)}" },
                { "ОЧКОВ:", $"{data.Point}" },
                { "АКТИВНОСТЬ:", $"{data.PlayTimeInServer}м." },
                { "УБИЙСТВ:", $"{data.Kill}" },
                { "СМЕРТЕЙ:", $"{data.Death}" },
                { "К/Д:", $"{(data.Death == 0 ? data.Kill : (float)Math.Round(((float)data.Kill) / data.Death, 2))}" },
            };

            foreach (var check in _playerInfo.Select((i, t) => new { A = i, B = t }))
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"0.42 {0.83 - Math.Floor((float) check.B/ 1) * 0.0625}",
                                        AnchorMax = $"0.938 {0.95 - Math.Floor((float) check.B / 1) * 0.0625}", },
                    Image = { Color = "0 0 0 0", Material = "assets/icons/greyout.mat" }
                }, Layer + ".Profile", Layer + ".Profile" + ".Info" + $".{check.B}");

                container.Add(new CuiElement
                {
                    Parent = Layer + ".Profile" + ".Info" + $".{check.B}",
                    Components =
                    {
                        new CuiTextComponent { Text = $"{check.A.Key}", Color = "1 1 1 1", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf" },
                        new CuiRectTransformComponent { AnchorMin = $"0.011 0", AnchorMax = $"1 1" },
                    }
                }); 

                container.Add(new CuiElement
                {
                    Parent = Layer + ".Profile" + ".Info" + $".{check.B}",
                    Components =
                    {
                        new CuiTextComponent { Text = $"{check.A.Value}", Color = "1 1 1 1", Align = TextAnchor.MiddleRight, FontSize = 12, Font = "robotocondensed-regular.ttf" },
                        new CuiRectTransformComponent { AnchorMin = $"0 0", AnchorMax = $"0.985 1" },
                    }
                }); 
            }
            #endregion

            #region [Resourse]
            for (int x = 0; x < data.Gather.Count; x++)
            {
                var Resourse = data.Gather.ToList()[x];
                var Text = Resourse.Value >= 1000 ? $"{(float)Math.Round((float)Resourse.Value / 1000, 1)}к" : $"{Resourse.Value}";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"{0.025 + (x * 0.1075)} 0.22", AnchorMax = $"{0.115 + (x * 0.1075)} 0.3" },
                    Text = { Text = $"{Text}", Color = "1 1 1 0.45", Align = TextAnchor.MiddleCenter, FontSize = 10, Font = "robotocondensed-regular.ttf" }
                }, Layer + ".Profile", "MainStats" + ".Main" + ".Profile" + $".Res{x}");
            }
            #endregion

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);
            PlayerTop(player);
        }
        #endregion

        #region [Connect]
        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || !player.userID.IsSteamId()) return;

            GetAvatar(player.UserIDString, avatar => AddImage(avatar, $"avatar_{player.UserIDString}"));

            var data = GetPlayerData(player.userID);
            if (data == null || string.IsNullOrEmpty(player.displayName)) return;

            var Name = covalence.Players.FindPlayerById(player.UserIDString)?.Name;
            if (data.Name != Name)
                data.Name = Name;
        }
        #endregion

        #region [Gather]
		private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
		{
            if (!entity.ToPlayer() || entity == null || item == null) return;

            var player = entity.ToPlayer();
            if (player == null || player.IsNpc) return;

            AddResourse(player, item.info.shortname, item.amount);
		}

		private void OnDispenserBonus(ResourceDispenser dispenser, BaseEntity entity, Item item)
		{
            if (!entity.ToPlayer() || entity == null || item == null) return;

            var player = entity.ToPlayer();
            if (player == null || player.IsNpc) return;

            AddResourse(player, item.info.shortname, item.amount, true);
		}

        private void OnCollectiblePickup(CollectibleEntity collectible, BasePlayer player)
		{
			if (player == null || collectible == null || collectible.itemList == null) return;

			foreach (var itemAmount in collectible.itemList)
            {
			    if (itemAmount.itemDef != null)
                {
                    AddResourse(player, itemAmount.itemDef.shortname, (int)itemAmount.amount);
                }
            }
		}
        #endregion

        #region [Entity]
		private void OnEntityTakeDamage(PatrolHelicopter entity, HitInfo info)
		{
			if (entity != null && entity.net != null && info.InitiatorPlayer != null)
				_lastHeli[entity.net.ID.Value] = info.InitiatorPlayer;
		}

		private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
		{
			if (entity == null || info == null) return;

			if (entity is PatrolHelicopter)
			{
				if (_lastHeli.ContainsKey(entity.net.ID.Value))
				{
                    var dataHeli = GetPlayerData(_lastHeli[entity.net.ID.Value].userID);
                    if (dataHeli == null) return;
                    dataHeli.Point += config._PointsDestroy.dHeli;
				}
				return;
			}

			var player = info.InitiatorPlayer;
			if (player == null) return;

            var data = GetPlayerData(player.userID);
            if (data == null) return;

            if (entity is BradleyAPC)
            {
                data.Point += config._PointsDestroy.dBradley;
            }
            else if (entity.name.Contains("barrel"))
            {
                data.Point += config._PointsSettings.pBarrel;
                data.Gather["loot-barrel"]++;
            }
		}
        #endregion

        #region [Loot]
        private void OnLootEntity(BasePlayer player, LootContainer entity)
        {
            if (player == null || entity == null || entity?.net?.ID == null || _lootEntity.Contains(entity.net.ID.Value)) return;

            var data = GetPlayerData(player.userID);
            if (data == null) return;

            data.Point += config._PointsSettings.pBarrel;
            data.Gather["loot-barrel"]++;
            
            _lootEntity.Add(entity.net.ID.Value);
        }
        #endregion

        #region [Death]
        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (player == null || info == null || !player.userID.IsSteamId()) return;
            
            if (info.damageTypes.Has(DamageType.Suicide))
            {
                var data = GetPlayerData(player.userID);
                if (data == null) return;
                
                data.Point -= config._PointsKillDeath.pSuicide;
                data.Death++;
                return;
            }
            
            var attacker = info.InitiatorPlayer;
            if (attacker == null || !attacker.userID.IsSteamId() || IsTeammates(player.userID, attacker.userID)) return;

            if (player.userID.IsSteamId())
            {
                var data = GetPlayerData(player.userID);
                if (data != null)
                {
                    data.Point -= config._PointsKillDeath.pDeath;
                    data.Death++;
                }

                var dataAttacker = GetPlayerData(attacker.userID);
                if (dataAttacker != null)
                {
                    dataAttacker.Point += config._PointsKillDeath.pKill;
                    dataAttacker.Kill++;
                }
            }
        }
        #endregion

        #region [ConsoleCommand]
        private void cmdOpenStats(BasePlayer player) => PlayerTop(player);

        [ConsoleCommand("UI_BSTATS")]
        private void StatsUIHandler(ConsoleSystem.Arg args)
        {
			BasePlayer player = args?.Player();
			if (player == null || !args.HasArgs()) return;

            switch (args.Args[0])
            {
                case "OpenProfileStats":
                {
                    PlayerTopInfo(player, ulong.Parse(args.Args[1]));
                    break;
                }
                case "ReturnToPlayerTop":
                {
                    PlayerTop(player, int.Parse(args.Args[1]) - 1);
                    break;
                }
                case "ChangeTopPage":
                {
                    TopPlayerList(player, int.Parse(args.Args[1]));
                    break;
                }
            }
        }
        #endregion

		#region [Avatar]
		private readonly Regex Regex = new Regex(@"<avatarFull><!\[CDATA\[(.*)\]\]></avatarFull>");
		private void GetAvatar(string userId, Action<string> callback)
		{
			if (callback == null) return;

			try
			{
				webrequest.Enqueue($"http://steamcommunity.com/profiles/{userId}?xml=1", null, (code, response) =>
				{
					if (code != 200 || response == null)
						return;

					var avatar = Regex.Match(response).Groups[1].ToString();
					if (string.IsNullOrEmpty(avatar))
						return;

					callback.Invoke(avatar);
				}, this);
			}
			catch (Exception e)
			{
				PrintError($"{e.Message}");
			}
		}
        #endregion

        #region [NotifyChat]
        private void GetRandomTopPlayer()
        {
            int random = Core.Random.Range(0, 9);

            switch (random)
            {
                case 0:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Kill).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего убийств:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Kill}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 1:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Death).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего смертей:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Death}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 2:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.TotalFarm()).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего фарма:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.TotalFarm()}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 3:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Gather["hq.metal.ore"]).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто МВК:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["hq.metal.ore"]}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 4:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Gather["metal.ore"]).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто Металла:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["metal.ore"]}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 5:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Gather["sulfur.ore"]).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто Серы:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["sulfur.ore"]}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 6:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Gather["loot-barrel"]).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто бочек и залутно ящиков:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["loot-barrel"]}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 7:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.PlayTimeInServer).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Проведено больше всего время на сервере:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{FormatShortTime(TimeSpan.FromSeconds(key.Value.PlayTimeInServer * 60))}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
                case 8:
                {
                    var playerList = _playerList.OrderByDescending(p => p.Value.Point).Take(5);
                    foreach (var player in BasePlayer.activePlayerList)
                    {
                        int i = 1;
                        ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего очков:</color></size>", 0);
                        foreach (var key in playerList)
                        {
                            ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Point}</color></size>", key.Key);
                            i++;
                        }
                    }
                    break;
                }
            }
        }

        private void ServerBroadcast(BasePlayer player, string message, ulong AvatarID)
        {
            if (player == null || string.IsNullOrEmpty(message)) return;

            Player.Message(player, $"{message}", AvatarID);
        }

        public static string FormatShortTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0)
                result += $"{time.Days} д. ";

            if (time.Hours != 0)
                result += $"{time.Hours} час. ";

            if (time.Minutes != 0)
                result += $"{time.Minutes} мин. ";

            if (time.Seconds != 0)
                result += $"{time.Seconds} сек. ";

            return result;
        }
        #endregion

        #region [Functional]
		private bool IsTeammates(ulong player, ulong friend)
		{
			return player == friend ||
			       RelationshipManager.ServerInstance.FindPlayersTeam(player)?.members?.Contains(friend) == true;
		}

		private void TimeHandle()
		{
            foreach (var player in BasePlayer.activePlayerList)
            {
                var data = GetPlayerData(player.userID);
                if (data == null) continue;
                
                data.PlayTimeInServer++;
            }
		}

        private int GetTopScore(ulong userid)
        {
            int Top = 1;
            var RaitingNumber = _playerList.OrderByDescending(x => x.Value.Point);

            foreach (var Data in RaitingNumber)
            {
                if (Data.Key == userid)
                    break;
                Top++;
            }

            return Top;
        }

		private int FindItemID(string shortName)
		{
			int val;
			if (_itemIds.TryGetValue(shortName, out val))
				return val;

			var definition = ItemManager.FindItemDefinition(shortName);
			if (definition == null) return 0;

			val = definition.itemid;
			_itemIds[shortName] = val;
			return val;
		}
        #endregion

        #region [AddResourse]
        private void AddResourse(BasePlayer player, string shortname, int amount, bool GivePoint = false)
        {
            if (player == null || string.IsNullOrEmpty(shortname) || amount <= 0) return;

            var data = GetPlayerData(player.userID);
            if (data == null || !data.Gather.ContainsKey(shortname)) return;

            switch (shortname)
            {
                case "wood":
                {
                    data.Gather[shortname] += amount;
                    if (GivePoint)
                    {
                        data.Point += config._PointsSettings.pWood;
                    }
                    break;
                }
                case "stones":
                {
                    data.Gather[shortname] += amount;
                    if (GivePoint)
                    {
                        data.Point += config._PointsSettings.pStone;
                    }
                    break;
                }
                case "metal.ore": case "metal.fragments":
                {
                    data.Gather["metal.ore"] += amount;
                    if (GivePoint)
                    {
                        data.Point += config._PointsSettings.pMetal;
                    }
                    break;
                }
                case "sulfur.ore": case "sulfur":
                {
                    data.Gather["sulfur.ore"] += amount;
                    if (GivePoint)
                    {
                        data.Point += config._PointsSettings.pMetal;
                    }
                    break;
                }
                case "hq.metal.ore": case "metal.refined":
                {
                    data.Gather["hq.metal.ore"] += amount;
                    break;
                }
                case "leather":
                {
                    data.Gather[shortname] += amount;
                    break;
                }
                case "cloth":
                {
                    data.Gather[shortname] += amount;
                    break;
                }
                case "fat.animal":
                {
                    data.Gather[shortname] += amount;                 
                    break;
                }
            }
        }
        #endregion

        #region [Config]
        private PluginConfig config;

        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();

            if (config.PluginVersion < Version)
                UpdateConfigValues();

            Config.WriteObject(config, true);
        }

        private void UpdateConfigValues()
        {
            PluginConfig baseConfig = PluginConfig.DefaultConfig();
            if (config.PluginVersion < Version)
            {
                config.PluginVersion = Version;
                if (Version == new VersionNumber(1, 1, 1))
                {
                    config._NotifyChatRandom.chatSendTop = true;
                    config._NotifyChatRandom.chatSendTopTime = 1200;
                }

                PrintWarning("Config checked completed!");
            }
            config.PluginVersion = Version;
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        public class PointsSettings
        {
            [JsonProperty("Сколько давать очков за дерево")]
            public int pWood = 5;

            [JsonProperty("Сколько давать очков за каменный камень")]
            public int pStone = 5;

            [JsonProperty("Сколько давать очков за металический камень")]
            public int pMetal = 5;

            [JsonProperty("Сколько давать очков за серный камень")]
            public int pSulfur = 5;

            [JsonProperty("Сколько давать очков за уничтожение бочки | Лутание обычного ящика у дороги")]
            public int pBarrel = 5;
        }

        public class PointsDestroy
        {
            [JsonProperty("Сколько давать очков за уничтожение вертолета")]
            public int dHeli = 1500;

            [JsonProperty("Сколько давать очков за уничтожение танка")]
            public int dBradley = 750;
        }

        public class PointsKillDeath
        {
            [JsonProperty("Сколько давать очков за убийство игрока")]
            public int pKill = 40;

            [JsonProperty("Сколько отнимать очков за смерть")]
            public int pDeath = 15;

            [JsonProperty("Сколько отнимать очков за суицид")]
            public int pSuicide = 15;
        }

        public class GameStoreSettings
        {
            [JsonProperty("Включить авто выдачу призов при вайпе сервера?")]
            public bool GivePrize = true;

            [JsonProperty("ИД магазина в сервисе")] 
            public string ShopID = "";

            [JsonProperty("Секретный ключ (не распростраяйте его)")] 
            public string SecretKey = "";

            [JsonProperty("Место в топе и выдаваемый баланс игроку")]
            public Dictionary<int, float> RewardSettings;
        }

        public class NotifyChatRandom
        {
            [JsonProperty("Отправлять в чат сообщения с топ 5 игроками ?")]
            public bool chatSendTop = true;

            [JsonProperty("Раз в сколько секунд будет отправлятся сообщение ?")]
            public int chatSendTopTime = 1200;
        }

        private class PluginConfig
        {
            [JsonProperty("Команда для открытия топа")]
            public string openMenuTop;
            [JsonProperty("Информация")]
            public string Info;
            [JsonProperty("Сколько выдавать очков за лутание мегаящика")]
            public int CountPoint;
            [JsonProperty("Сколько выдавать очков за захват карьера")]
            public int CountPointQuarry;

            [JsonProperty("Настройка начисления очков за добычу")]
            public PointsSettings _PointsSettings = new PointsSettings();

            [JsonProperty("Настройка начисления очков за уничтожение")]
            public PointsDestroy _PointsDestroy = new PointsDestroy();

            [JsonProperty("Настройка начисления и отнимания очков за убийства и смерти")]
            public PointsKillDeath _PointsKillDeath = new PointsKillDeath();

            [JsonProperty("Настройка призов")]
            public GameStoreSettings _GameStoreSettings = new GameStoreSettings();

            [JsonProperty("Настройка оповещений в чате")]
            public NotifyChatRandom _NotifyChatRandom = new NotifyChatRandom();

            [JsonProperty("Config version")]
            public VersionNumber PluginVersion = new VersionNumber();

            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    openMenuTop = "top",
                    Info = "Хуита",
                    CountPoint = 500,
                    CountPointQuarry = 500,
                    _PointsDestroy = new PointsDestroy()
                    {
                        dHeli = 1500,
                        dBradley = 750,
                    },
                    _PointsKillDeath = new PointsKillDeath()
                    {
                        pKill = 40,
                        pDeath = 15,
                        pSuicide = 15,
                    },
                    _PointsSettings = new PointsSettings()
                    {
                        pWood = 5,
                        pStone = 5,
                        pMetal = 5,
                        pSulfur = 5,
                        pBarrel = 5,
                    },
                    _GameStoreSettings = new GameStoreSettings()
                    {
                        GivePrize = true,
                        ShopID = "",
                        SecretKey = "",
                        RewardSettings = new Dictionary<int, float>()
                        {
                            [1] = 400f,
                            [2] = 250f,
                            [3] = 150f,
                            [4] = 100f,
                            [5] = 50f,
                            [6] = 50f,
                            [7] = 30f,
                        },
                    },
                    _NotifyChatRandom = new NotifyChatRandom()
                    {
                        chatSendTop = true,
                        chatSendTopTime = 1200,
                    },
                    PluginVersion = new VersionNumber()
                };
            }
        }
        #endregion

        #region Api
        int AddPoint(BasePlayer player)
        {
            var data = GetPlayerData(player.userID);
            return data.Point += config.CountPoint;
        }

        int AddPointQuarry(BasePlayer player)
        {
            var data = GetPlayerData(player.userID);
            return data.Point += config.CountPointQuarry;
        }

        int PointQuarry()
        {
            return config.CountPointQuarry;
        }
        #endregion
    }
}

// --- End of file: TPStatsSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BattlePass.cs ---
// --- Original Local Path: BattlePass.cs ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Battle Pass", "CASHR#6906", "1.0.0")]
    internal class BattlePass : RustPlugin
    {
        #region Static

        [PluginReference] private Plugin ImageLibrary;
        private Configuration _config;
        private const string Layer = "UI_BATTLEPASS_MAINLAYER";
        private const string perm = "battlepass.vip";
        private const string perm1 = "battlepass.exp";

        #endregion

        #region Config

        private class Configuration
        {
            [JsonProperty(PropertyName = "Ссылка на логотип сервера(64x64 px)")]
            public string serverLogoURL = "https://i.imgur.com/v0i0Rid.png";

            [JsonProperty(PropertyName = "Название сервера")]
            public string serverName = "The best of the best - Beast";
            
            [JsonProperty("Настройка очков")] public readonly PointSettings Point = new PointSettings();

            [JsonProperty("Настройки уровней обычных уровней")]
            public readonly LevelSettings LevelDefault = new LevelSettings();

            [JsonProperty("Настройки уровней донатных уровней")]
            public readonly LevelSettings LevelDonate = new LevelSettings();

            internal class LevelSettings
            {

                [JsonProperty(PropertyName = "Список уровней", ObjectCreationHandling = ObjectCreationHandling.Replace)]
                public readonly List<Settings> LevelList = new List<Settings>
                {
                    new Settings
                    {
                        Level = 1,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 2,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 3,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 4,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 5,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 6,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 7,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 8,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 9,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 10,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 11,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 12,
                        Exp = 1000,
                        Image = "https://i.imgur.com/WUtLEeN.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    }
                };

                internal class Settings
                {
                    [JsonProperty("Номер уровня")] public int Level;

                    [JsonProperty("Количество Exp для получения этого уровня")]
                    public int Exp;

                    [JsonProperty("Картинка отображения награды")]
                    public string Image;

                    [JsonProperty("Награда за уровень")] public RewardSettings Reward;

                    internal class RewardSettings
                    {
                        [JsonProperty("ShortName")] public string ShortName;
                        [JsonProperty("Amount")] public int Amount;
                        [JsonProperty("SkinID")] public ulong SkinID;

                        [JsonProperty("Команды, которые должны выполниться")]
                        public List<string> command;
                    }
                }
            }

            internal class PointSettings
            {
                [JsonProperty("Множитель очков у донатера")]
                public readonly int DonateAmount = 1;

                [JsonProperty("Количество очков за убийство игрока")]
                public readonly int killPlayer = 1;

                [JsonProperty("Количество очков за убийство животных")]
                public readonly int killHuman = 1;

                [JsonProperty("Количество очков за убийство вертолета")]
                public readonly int killHeli = 1;

                [JsonProperty("Количество очков за убийство НПС")]
                public readonly int killNPC = 1;

                [JsonProperty("Количество очков за убийство танка")]
                public readonly int killBredly = 1;

                [JsonProperty("Количество отнимаемых очков за смерть")]
                public readonly int deathPlayer = 1;

                [JsonProperty("Настройки добычи")] public readonly GatherSettings Gather = new GatherSettings();
            }

            internal class GatherSettings
            {
                [JsonProperty(PropertyName = "Настройка добычи(shortname/количество очков", ObjectCreationHandling = ObjectCreationHandling.Replace)]
                public readonly Dictionary<string, int> GatherList = new Dictionary<string, int>
                {
                    ["wood"] = 2
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration();
        }

        #endregion

        #region OxideHooks

        private void OnServerInitialized()
        {

            if (lang.GetServerLanguage() == "ru")
            {
                PrintWarning("" + "\n=====================" + "\n=====================Author: CASHR" +
                             "\n=====================VK: vk.com/cashrdev" +
                             "\n=====================Discord: CASHR#6906" +
                             "\n=====================Email: pipnik99@gmail.com" +
                             "\n=====================Если вы хотите заказать у меня плагин, я жду вас в любой момент." +
                             "\n=====================");
                PrintWarning(
                    "Благодарим за покупку плагина на сайте RustPlugin.ru. Если вы передадите этот плагин сторонним лицам знайте - это лишает вас гарантированных обновлений!");
            }
            else
            {
                PrintWarning("" + "\n=====================" + "\n=====================Author: CASHR" +
                             "\n=====================VK: vk.com/cashrdev" +
                             "\n=====================Discord: CASHR#6906" +
                             "\n=====================Email: pipnik99@gmail.com" +
                             "\n=====================If you want to order a plugin from me, I am waiting for you in discord." +
                             "\n=====================");
            }

            ImageLibrary?.Call("AddImage", "https://i.imgur.com/MGh0CxA.png", "MAINPAGEIMAGEBP");
            ImageLibrary?.Call("AddImage", _config.serverLogoURL, _config.serverLogoURL);
            ImageLibrary?.Call("AddImage", "https://i.imgur.com/cBLIoWr.png", ".iconpattern");
            ImageLibrary?.Call("AddImage", "https://i.imgur.com/8bmAyzO.png", ".rewardisaccepted");
            ImageLibrary?.Call("AddImage", "https://i.imgur.com/OLJP48p.png", ".blockereward");
            ImageLibrary?.Call("AddImage", "https://i.imgur.com/MGh0CxA.png", "secondbpmain");
            LoadData();
            permission.RegisterPermission(perm, this);
            permission.RegisterPermission(perm1, this);
            foreach (var check in _config.LevelDefault.LevelList)
                ImageLibrary?.Call("AddImage", check.Image, check.Image);
            foreach (var check in _config.LevelDonate.LevelList)
                ImageLibrary?.Call("AddImage", check.Image, check.Image);
            foreach (var check in BasePlayer.activePlayerList)
                OnPlayerConnected(check);
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null) return;
            if (_data.ContainsKey(player.userID)) return;
            _data.Add(player.userID, new Data());
        }

        private void Unload()
        {
            SaveData();
        }

        private object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (item == null || player == null) return null;
            if (!_config.Point.Gather.GatherList.ContainsKey(item.info.shortname)) return null;
            GivePoint(player.userID, _config.Point.Gather.GatherList[item.info.shortname]);
            return null;
        }

        private void OnCollectiblePickup(Item item, BasePlayer player, CollectibleEntity entity)
        {
            if (player == null || item == null) return;
            GivePoint(player.userID, 1);
        }

        private readonly Dictionary<uint, ulong> LastHeliHit = new Dictionary<uint, ulong>();

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return null;
            var player = info.InitiatorPlayer;
            if (player == null) return null;
            if (entity is BaseHelicopter && info.Initiator is BasePlayer)
            {
                if (!LastHeliHit.ContainsKey(entity.net.ID))
                    LastHeliHit.Add(entity.net.ID, info.InitiatorPlayer.userID);
                LastHeliHit[entity.net.ID] = info.InitiatorPlayer.userID;
            }

            return null;
        }

        private void OnEntityDeath(BaseEntity entity, HitInfo info)
        {
            if (entity == null || info == null || info.InitiatorPlayer == null) return;
            var player = info.InitiatorPlayer;
            if (entity as BaseAnimalNPC)
            {
                GivePoint(player.userID, _config.Point.killHuman);
                return;
            }

            if (entity as BaseHelicopter)
            {
                if (!LastHeliHit.ContainsKey(entity.net.ID)) return;
                GivePoint(LastHeliHit[entity.net.ID], _config.Point.killHeli);
                return;
            }

            if (entity as BradleyAPC)
            {
                GivePoint(player.userID, _config.Point.killBredly);
                return;
            }

            if (entity as NPCPlayer || entity as NPCMurderer || entity.IsNpc)
            {
                GivePoint(player.userID, _config.Point.killNPC);
                return;
            }

            if (entity.ToPlayer() == null) return;
            if (entity.ToPlayer().userID != player.userID)
            {
                GivePoint(player.userID, _config.Point.killPlayer);
            }

            if (!_data.ContainsKey(entity.ToPlayer().userID)) return;
            if (info.InitiatorPlayer == null) return;
            if (info.InitiatorPlayer.IsNpc) return;
            _data[entity.ToPlayer().userID].Score -= _config.Point.deathPlayer;
        }

        #endregion

        #region Data

        private Dictionary<ulong, Data> _data;

        private class Data
        {
            public int Level;
            public int Score;
            public readonly List<int> DefaultRewardID = new List<int>();
            public readonly List<int> DonateRewardID = new List<int>();
        }

        private void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile($"{Name}/PlayerData"))
                _data = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Data>>(
                    $"{Name}/PlayerData");
            else _data = new Dictionary<ulong, Data>();
            Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerData", _data);
        }

        private void OnServerSave()
        {
            SaveData();
        }

        private void SaveData()
        {
            if (_data != null)
                Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerData", _data);
        }

        #endregion

        #region Commands

        [ConsoleCommand("UI_BATTLEPASS_GETREWARDDEFULT")]
        private void cmdChatUI_BATTLEPASS_GETREWARD(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            var id = int.Parse(arg.Args[0]);
            var page = int.Parse(arg.Args[1]);
            var settings = _config.LevelDefault.LevelList.FirstOrDefault(p => p.Level == id);
            var reward = settings.Reward;
            _data[player.userID].DefaultRewardID.Add(id);
            ShowUIMain(player, page);

            if (!string.IsNullOrEmpty(reward.ShortName))
            {
                var item = ItemManager.CreateByName(reward.ShortName, reward.Amount, reward.SkinID);
                player.GiveItem(item);
            }

            if (reward.command.Count <= 0) return;
            for (var index = 0; index < reward.command.Count; index++)
            {
                var check = reward.command[index];
                rust.RunServerCommand(check.Replace("%STEAMID%", player.UserIDString));
            }

        }

        [ChatCommand("pass")]
        private void cmdChatpass(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ChatCommand("lvl")]
        private void cmdChatpa22ss(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ChatCommand("level")]
        private void cmdChatpas2s(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ConsoleCommand("UI_BATTLEPASS_GETREWARDDONATE")]
        private void cmdChatUI_BATTLEPASS_DDONATE(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            var id = int.Parse(arg.Args[0]);
            var page = int.Parse(arg.Args[1]);
            var settings = _config.LevelDonate.LevelList.FirstOrDefault(p => p.Level == id);
            var reward = settings.Reward;
            _data[player.userID].DonateRewardID.Add(id);
            ShowUIMain(player, page);
            if (!string.IsNullOrEmpty(reward.ShortName))
            {
                var item = ItemManager.CreateByName(reward.ShortName, reward.Amount, reward.SkinID);
                player.GiveItem(item);
            }

            if (reward.command.Count <= 0) return;
            for (var index = 0; index < reward.command.Count; index++)
            {
                var check = reward.command[index];
                rust.RunServerCommand(check.Replace("%STEAMID%", player.UserIDString));
            }
        }

        [ConsoleCommand("givepoint")]
        private void cmdChatgivepoint(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.Args?.Length != 2)
            {
                PrintError(
                    "Вы не правильно используете команду. Пример: givepoint STEAMID количество");
                return;
            }

            var player = arg.Player();
            if (arg.Connection != null)
                if (!player.IsAdmin)
                    return;
            var userID = ulong.Parse(arg.Args[0]);
            var amount = int.Parse(arg.Args[1]);
            GivePoint(userID, amount);

        }

        [ConsoleCommand("UI_BATTLEPASS_CHANGEPAGE")]
        private void cmdChatUI_BATTLEPASS_CHANGEPAGE(ConsoleSystem.Arg arg)
        {
            var player = arg?.Player();
            if (arg == null || arg.Args.Length == 0)
            {
                player.ChatMessage("Не верное число");
                return;
            }

            var page = int.Parse(arg.Args[0]);
            ShowUIMain(player, page);
        }

        #endregion

        #region Function

        private void GivePoint(ulong userid, int amount)
        {
            if (!_data.ContainsKey(userid)) return;
            if (permission.UserHasPermission(userid.ToString(), perm1))
                amount *= _config.Point.DonateAmount;
            var data = _data[userid];
            var settings = _config.LevelDefault.LevelList.FirstOrDefault(p => p.Level == data.Level + 1);
            if (settings == null) return;

            data.Score += amount;
            if (data.Score < settings.Exp) return;
            data.Level++;
            data.Score -= settings.Exp;
            GivePoint(userid, 0);
        }

        #endregion
        
        private void ShowUIMain(BasePlayer player, int page)
        {
            var container = new CuiElementContainer();
            var d = _data[player.userID];

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-640 -360", OffsetMax = "640 360"},
                Image = {Color = "0 0 0 0"}
            }, "Overlay", Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", permission.UserHasPermission(player.UserIDString, perm) ? "secondbpmain" : "MAINPAGEIMAGEBP")},
                    new CuiRectTransformComponent {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-640 -360", OffsetMax = "640 360"}
                }
            });

            #region header

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", _config.serverLogoURL)},
                    new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -64", OffsetMax = "84 0"}
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "100 -64", OffsetMax = "800 0"},
                Text =
                {
                    Text = _config.serverName, Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.MiddleLeft,
                    Color = "0.93 0.77 0.58 1.00"
                }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = {AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-72 -53", OffsetMax = "-31 -11"},
                Button = {Color = "0 0 0 0", Close = Layer},
                Text = {Text = ""}
            }, Layer);

            #endregion

            #region Level/Bar

            container.Add(new CuiLabel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "130 -186", OffsetMax = "287 -143"},
                Text =
                {
                    Text = $"Уровень <size=30>{d.Level}</size>", Font = "robotocondensed-bold.ttf", FontSize = 28, Align = TextAnchor.MiddleLeft,
                    Color = "0.27 0.33 0.42 1.00"
                }
            }, Layer);

            container.Add(new CuiPanel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "308 -180", OffsetMax = "1180 -175"},
                Image = {Color = "0.18 0.20 0.24 1.00"}
            }, Layer, Layer + ".progressbar");
            
            var settings = _config.LevelDefault.LevelList.FirstOrDefault(p => p.Level == d.Level + 1);
            if (settings != null)
            {
                var progress = (float)d.Score / settings.Exp;

                container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "308 -172", OffsetMax = "500 -150"},
                    Text =
                    {
                        Text = $"ОЧКИ ОПЫТА <color=white>{d.Score}/{settings.Exp}</color>", Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.MiddleLeft,
                        Color = "0.93 0.77 0.58 1.00"
                    }
                }, Layer);

                container.Add(new CuiPanel
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "0 0", OffsetMax = $"{872 * progress} 5"},
                    Image = {Color = "0.93 0.77 0.58 1.00"}
                }, Layer + ".progressbar");
            }
            else
            {
                container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "308 -172", OffsetMax = "500 -150"},
                    Text =
                    {
                        Text = "ОЧКИ ОПЫТА <color=white>МАКСИМУМ</color>", Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.MiddleLeft,
                        Color = "0.93 0.77 0.58 1.00"
                    }
                }, Layer);

                container.Add(new CuiPanel
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "0 0", OffsetMax = $"872 5"},
                    Image = {Color = "0.93 0.77 0.58 1.00"}
                }, Layer + ".progressbar");
            }

            #endregion

            #region body

            var levels = _config.LevelDefault.LevelList.Skip(page * 10).Take(10);
            var donate = _config.LevelDonate.LevelList.Skip(page * 10).Take(10);

            container.Add(new CuiLabel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "93 -343", OffsetMax = "192 -323"},
                Text =
                {
                    Text = "FREE", Font = "robotocondensed-bold.ttf", FontSize = 16, Align = TextAnchor.MiddleCenter,
                    Color = "0.27 0.33 0.42 1.00"
                }
            }, Layer);
            
            container.Add(new CuiLabel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "93 -543", OffsetMax = "192 -512"},
                Text =
                {
                    Text = "EPIC", Font = "robotocondensed-bold.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter,
                    Color = "0.27 0.33 0.42 1.00"
                }
            }, Layer);

            container.Add(new CuiPanel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "198 -561", OffsetMax = "1087 -204"},
                Image = {Color = "0 0 0 0"}
            }, Layer, Layer + ".rewards");
            var pos = 0;
            var i = 1;
            foreach (var check in levels)
            {
                var lvl = check.Level;
                if (lvl % 10f != 0)
                {
                    container.Add(new CuiPanel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = $"{pos} -357", OffsetMax = $"{pos + 99} 0"},
                        Image = {Color = "0 0 0 0"}
                    }, Layer + ".rewards", Layer + ".rewards" + lvl);
                    
                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -36", OffsetMax = "95 0"},
                        Text =
                        {
                            Text = $"Ур. {lvl}", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter,
                            Color = "0.84 0.85 0.80 1.00", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".iconpattern"), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -120", OffsetMax = "80 -55"}
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -120", OffsetMax = "80 -55"},
                        Text =
                        {
                            Text = check.Reward.Amount.ToString(), Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.LowerCenter,
                            Color = "1 1 1 1", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "24 -104", OffsetMax = "72 -55"}
                        }
                    });

                    if (d.DefaultRewardID.Contains(check.Level))
                    {
                        container.Add(new CuiElement
                        {
                            Parent = Layer + ".rewards" + lvl,
                            Components =
                            {
                                new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".rewardisaccepted"), FadeIn = 0.5f * i},
                                new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "26 -104", OffsetMax = "74 -55"}
                            }
                        });
                    }
                    else
                    {
                        if (check.Level > d.Level)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = Layer + ".rewards" + lvl,
                                Components =
                                {
                                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".blockereward"), FadeIn = 0.5f * i},
                                    new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "66 -69", OffsetMax = "83 -52"}
                                }
                            });
                        }
                        else
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -120", OffsetMax = "80 -55"},
                                Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDEFULT {check.Level} {page}", FadeIn = 0.5f * i},
                                Text = {Text = ""}
                            }, Layer + ".rewards" + lvl);
                        }
                    }
                }
                else
                {
                    container.Add(new CuiPanel  
                    {
                        RectTransform = {AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-185 -561", OffsetMax = "-80 -196"},
                        Image = {Color = "0 0 0 0"}
                    }, Layer, Layer + ".rewards" + lvl);
                     
                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -51", OffsetMax = "104 -23"},
                        Text =
                        {
                            Text = $"Ур. {lvl}", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter,
                            Color = "0.27 0.33 0.42 1.00", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".iconpattern"), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -134", OffsetMax = "85 -69"}
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -134", OffsetMax = "85 -69"},
                        Text =
                        {
                            Text = check.Reward.Amount.ToString(), Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.LowerCenter,
                            Color = "1 1 1 1", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "28 -118", OffsetMax = "77 -69"}
                        }
                    });

                    if (d.DefaultRewardID.Contains(check.Level))
                    {
                        container.Add(new CuiElement
                        {
                            Parent = Layer + ".rewards" + lvl,
                            Components =
                            {
                                new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".rewardisaccepted"), FadeIn = 0.5f * i},
                                new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "28 -118", OffsetMax = "77 -69"}
                            }
                        });
                    }
                    else
                    {
                        if (check.Level > d.Level)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = Layer + ".rewards" + lvl,
                                Components =
                                {
                                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".blockereward"), FadeIn = 0.5f * i},
                                    new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "73 -83", OffsetMax = "89 -66"}
                                }
                            });
                        }
                        else
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -134", OffsetMax = "85 -69"},
                                Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDEFULT {check.Level} {page}", FadeIn = 0.5f * i},
                                Text = {Text = ""}
                            }, Layer + ".rewards" + lvl);
                        }
                    }
                }
                pos += 99;
                i++;
            }

            i = 1;
            foreach (var check in donate)
            {
                var lvl = check.Level;
                if (lvl % 10f != 0)
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".iconpattern"), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -275", OffsetMax = "80 -210"}
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -275", OffsetMax = "80 -210"},
                        Text =
                        {
                            Text = check.Reward.Amount.ToString(), Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.LowerCenter,
                            Color = "1 1 1 1", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "24 -260", OffsetMax = "72 -210"}
                        }
                    });

                    if (d.DonateRewardID.Contains(check.Level))
                    {
                        container.Add(new CuiElement
                        {
                            Parent = Layer + ".rewards" + lvl,
                            Components =
                            {
                                new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".rewardisaccepted"), FadeIn = 0.5f * i},
                                new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -260", OffsetMax = "80 -210"}
                            }
                        });
                    }
                    else
                    {
                        if (check.Level > d.Level || !permission.UserHasPermission(player.UserIDString, perm))
                        {
                            container.Add(new CuiElement
                            {
                                Parent = Layer + ".rewards" + lvl,
                                Components =
                                {
                                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".blockereward"), FadeIn = 0.5f * i},
                                    new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "66 -224", OffsetMax = "83 -207"}
                                }
                            });
                        }
                        else
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "16 -275", OffsetMax = "80 -210"},
                                Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDONATE {check.Level} {page}", FadeIn = 0.5f * i},
                                Text = {Text = ""}
                            }, Layer + ".rewards" + lvl);
                        }
                    }
                }
                else
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".iconpattern"), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -278", OffsetMax = "85 -210"}
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -278", OffsetMax = "85 -210"},
                        Text =
                        {
                            Text = check.Reward.Amount.ToString(), Font = "robotocondensed-bold.ttf", FontSize = 15, Align = TextAnchor.LowerCenter,
                            Color = "1 1 1 1", FadeIn = 0.5f * i
                        }
                    }, Layer + ".rewards" + lvl);

                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), FadeIn = 0.5f * i},
                            new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "28 -260", OffsetMax = "77 -210"}
                        }
                    });

                    if (d.DonateRewardID.Contains(check.Level))
                    {
                        container.Add(new CuiElement
                        {
                            Parent = Layer + ".rewards" + lvl,
                            Components =
                            {
                                new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".rewardisaccepted"), FadeIn = 0.5f * i},
                                new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "28 -260", OffsetMax = "77 -210"}
                            }
                        });
                    }
                    else
                    {
                        if (check.Level > d.Level)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = Layer + ".rewards" + lvl,
                                Components =
                                {
                                    new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", ".blockereward"), FadeIn = 0.5f * i},
                                    new CuiRectTransformComponent {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "73 -224", OffsetMax = "89 -207"}
                                }
                            });
                        }
                        else
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "20 -278", OffsetMax = "85 -210"},
                                Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDONATE {check.Level} {page}", FadeIn = 0.5f * i},
                                Text = {Text = ""}
                            }, Layer + ".rewards" + lvl);
                        }
                    }
                }

                i++;
            }

            #endregion

            if (page > 0)
                container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "38 345", OffsetMax = "62 375"},
                    Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_CHANGEPAGE {page - 1}"},
                    Text = {Text = ""}
                }, Layer);
            
            if (_config.LevelDefault.LevelList.Count - 10 * (page + 1) > 0)
                container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-62 345", OffsetMax = "-38 375"},
                    Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_CHANGEPAGE {page + 1}"},
                    Text = {Text = ""}
                }, Layer);

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);
        }

        
    }
}


// --- End of file: BattlePass.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Slasher.cs ---
// --- Original Local Path: Slasher.cs ---

using System.Collections.Generic;
using System;
using UnityEngine;
using Oxide.Core.Plugins;
using Rust;

namespace Oxide.Plugins
{
    [Info("Slasher", "k1lly0u", "0.1.32", ResourceId = 1662)]
    class Slasher : RustPlugin
    {

        [PluginReference]
        Plugin EventManager;

        [PluginReference]
        Plugin ZoneManager;

        [PluginReference]
        Plugin Spawns;

        private bool useSlasher;
        private bool SlasherStarted;
        private bool autoOpen;
        private bool gameOpen;
        private bool Changed;
        private bool failed;
        private bool timerStarted;

        private List<SlasherPlayer> SlasherPlayers = new List<SlasherPlayer>();
        public List<Timer> SlasherTimers = new List<Timer>();
        private List<ulong> DeadPlayers;        
        private List<BasePlayer> Slashers;
        private List<BasePlayer> Players;
        private Dictionary<ulong, Team> Teams;
        private Dictionary<string, string> displaynameToShortname;

        static string GameName = "Slasher";       

        static int RoundNumber;

        ////////////////////////////////////////////////////////////
        // SlasherPlayer class to store informations ////////////
        ////////////////////////////////////////////////////////////
        class SlasherPlayer : MonoBehaviour
        {
            public BasePlayer player;
            public int kills;
            public bool isSlasher;

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                enabled = false;
                kills = 0;
            }
        }

        #region oxide hooks
        //////////////////////////////////////////////////////////////////////////////////////
        // Oxide Hooks ///////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
        void Loaded()
        {
            useSlasher = false;
            SlasherStarted = false;
            failed = false;
            gameOpen = false;
            autoOpen = false;
            timerStarted = false;
            lang.RegisterMessages(messages, this);
        }
        void OnServerInitialized()
        {
            displaynameToShortname = new Dictionary<string, string>();
            if (EventManager == null)
            {
                Puts("Event plugin doesn't exist");
                return;
            }
            LoadVariables();
            RegisterGame();
            if (useAutoStart)
                TimeLoop();
        }
        void RegisterGame()
        {
            var success = EventManager.Call("RegisterEventGame", new object[] { GameName });
            if (success == null)
            {
                Puts("Event plugin doesn't exist");
                return;
            }
        }
        void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            Config.Clear();
            LoadVariables();
        }
        void Unload()
        {
            if (useSlasher && SlasherStarted)
            {
                EventManager.Call("EndEvent", new object[] { });
                var objects = GameObject.FindObjectsOfType(typeof(SlasherPlayer));
                if (objects != null)
                    foreach (var gameObj in objects)
                        GameObject.Destroy(gameObj);
            }
        }
        void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitinfo)
        {
            if (useSlasher && SlasherStarted)
            {
                try
                {
                    if (entity is BasePlayer && hitinfo.Initiator is BasePlayer)
                    {
                        var victim = (BasePlayer)entity;
                        var attacker = (BasePlayer)hitinfo.Initiator;
                        if (Teams.ContainsKey(victim.userID) && Teams.ContainsKey(attacker.userID))
                        {
                            if (victim.userID != attacker.userID)
                            {
                                if (Teams[victim.userID] == Teams[attacker.userID])
                                {
                                    hitinfo.damageTypes.ScaleAll(ffDamageMod);
                                    SendReply(attacker, lang.GetMessage("title", this, attacker.UserIDString) + lang.GetMessage("ff", this, attacker.UserIDString));
                                    return;
                                }
                                else if (hitinfo.WeaponPrefab.ToString().ToLower().Contains("torch"))
                                {
                                    hitinfo.damageTypes.ScaleAll(torchDamageMod);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }
        #endregion     

        #region eventmanager hooks
        //////////////////////////////////////////////////////////////////////////////////////
        // Beginning Of Event Manager Hooks //////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
        void OnSelectEventGamePost(string name)
        {
            if (GameName == name)
            {
                useSlasher = true;
                if (PlayerSpawns != null && PlayerSpawns != "")
                    EventManager.Call("SelectSpawnfile", new object[] { PlayerSpawns });
            }
            else
                useSlasher = false;
        }
        void OnEventPlayerSpawn(BasePlayer player)
        {
            if (useSlasher && SlasherStarted)
            {
                if (!CheckForTeam(player)) TeamAssign(player);

                player.inventory.Strip();
                player.health = EventStartHealth;
                if (DeadPlayers.Contains(player.userID))
                {
                    SendReply(player, lang.GetMessage("title", this, player.UserIDString) + lang.GetMessage("waitNext", this, player.UserIDString));
                    return;
                }
                if (Teams[player.userID] == Team.SLASHER)
                {
                    GiveSlasherGear(player);
                }
                else if (Teams[player.userID] == Team.HUNTED)
                {
                    GivePlayerGear(player);
                }                
            }
        }
        object OnSelectSpawnFile(string name)
        {
            if (useSlasher)
            {
                PlayerSpawns = name;
                return true;
            }
            return null;
        }
        void OnSelectEventZone(MonoBehaviour monoplayer, string radius)
        {
            if (useSlasher)
            {
                return;
            }
        }
        void OnPostZoneCreate(string name)
        {
            if (name == GameName)
            {
                return;
            }
        }
        object CanEventOpen()
        {
            if (useSlasher)
            {
                var time = TOD_Sky.Instance.Cycle.Hour;
                if (time <= openHour && time >= endHour)
                {
                    return (lang.GetMessage("openTime", this) + openHour.ToString() + " & " + endHour.ToString());
                }
            }
            return null;
        }
        object CanEventStart()
        {
            if (useSlasher)
                if (SlasherPlayers.Count <= 1)
                    return "Not enough players to start the game";
            return null;
        }
        object OnEventOpenPost()
        {
            if (useSlasher)
            {               
                Teams = new Dictionary<ulong, Team>();
                DeadPlayers = new List<ulong>();
                Slashers = new List<BasePlayer>();
                Players = new List<BasePlayer>();
                EventManager.Call("BroadcastEvent", new object[] { lang.GetMessage("OpenMsg", this) });
            }
            return null;
        }
        object OnEventClosePost()
        {
            return null;
        }
        object OnEventEndPre()
        {
            if (useSlasher)
            {
                useSlasher = false;
                SlasherStarted = false;
                SlasherPlayers.Clear();
                DeadPlayers.Clear();
                Slashers.Clear();
                Players.Clear();
                Teams.Clear();
            }
            return null;
        }
        object OnEventEndPost()
        {
            
            return null;
        }
        object OnEventStartPre()
        {
            if (useSlasher)
            {
                SlasherStarted = true;
            }
            return null;
        }
        object OnEventStartPost()
        {
            if (useSlasher)
            {
                autoOpen = false;
                timerStarted = false;
                RoundNumber = 0;
                NextRound();
            }
            return null;
        }
        object CanEventJoin(BasePlayer player)
        {
            if (useSlasher)
            {
                
            }
            return null;
        }
        object OnSelectKit(string kitname)
        {
            if (useSlasher)
            {
                Puts("No Kits required for this gamemode!");
                return true;
            }
            return null;
        }
        object OnEventJoinPost(BasePlayer player)
        {
            if (useSlasher)
            {
                if (player.GetComponent<SlasherPlayer>())
                    GameObject.Destroy(player.GetComponent<SlasherPlayer>());
                SlasherPlayers.Add(player.gameObject.AddComponent<SlasherPlayer>());

                if (SlasherStarted)
                {
                    if (!Players.Contains(player)) Players.Add(player);
                    DeadPlayers.Add(player.userID);
                }                               
            }
            return null;
        }
        object OnEventLeavePost(BasePlayer player)
        {
            if (useSlasher)
            {
                if (player.GetComponent<SlasherPlayer>())
                {
                    if (DeadPlayers.Contains(player.userID)) DeadPlayers.Remove(player.userID);
                    if (Teams.ContainsKey(player.userID)) Teams.Remove(player.userID);
                    SlasherPlayers.Remove(player.GetComponent<SlasherPlayer>());
                    GameObject.Destroy(player.GetComponent<SlasherPlayer>());
                    Debug.Log("leavehere");
                    
                }
                if (SlasherPlayers.Count <= 1)
                {
                    var emptyobject = new object[] { };
                    EventManager.Call("BroadcastEvent", (lang.GetMessage("NoPlayers", this)));
                    EventManager.Call("CloseEvent", emptyobject);
                    EventManager.Call("EndEvent", emptyobject);                    
                }
            }
            return null;
        }
        void OnEventPlayerAttack(BasePlayer attacker, HitInfo hitinfo)
        {
            if (useSlasher)
            {
                if (!(hitinfo.HitEntity is BasePlayer))
                {
                    hitinfo.damageTypes = new DamageTypeList();
                    hitinfo.DoHitEffects = false;
                }
            }
        }
        void OnEventPlayerDeath(BasePlayer victim, HitInfo hitinfo)
        {
            if (useSlasher && SlasherStarted)
            {
                try
                {
                    if (hitinfo.Initiator != null)
                    {
                        BasePlayer attacker = hitinfo.Initiator.ToPlayer();
                        if (attacker != null)
                        {
                            if (attacker != victim)
                            {

                                DeadPlayers.Add(victim.userID);
                                if (victim.GetComponent<SlasherPlayer>().isSlasher)
                                {
                                    AddKill(attacker, victim, KillSlasherTokens);
                                    victim.GetComponent<SlasherPlayer>().isSlasher = false;
                                    if (RoundNumber >= maxRounds)
                                    {
                                        timerMsg(lang.GetMessage("gameEnd", this));
                                        DestroyTimers();
                                        timer.Once(10, () => CheckScores());
                                        return;
                                    }
                                    else
                                        timerMsg(string.Format(lang.GetMessage("killSlasher", this), attacker.displayName.ToString()));
                                    DestroyTimers();
                                    timer.Once(10, () => NextRound());
                                    return;
                                }
                                AddKill(attacker, victim, KillTokens);
                                CheckPlayers();
                            }
                        }
                    }
                }
                catch (Exception ex) { }
            }
            return;
        }
        object EventChooseSpawn(BasePlayer player, Vector3 destination)
        {
            if (useSlasher)
            {                
                if (!CheckForTeam(player))
                {
                    TeamAssign(player);
                    if (SlasherStarted) EventManager.Call("TeleportPlayerToEvent", player);
                    return null;
                }
                string spawnfile = "";
                if (DeadPlayers.Contains(player.userID)) spawnfile = DeadPlayerSpawns;
                else spawnfile = PlayerSpawns;

                var newpos = Spawns.Call("GetRandomSpawn", new object[] { spawnfile });
                return (Vector3)newpos;
            }
            return null;
        }
        object OnRequestZoneName()
        {
            if (useSlasher)
            {
                return EventZoneName;
            }
            return null;
        }
        #endregion

        #region slasher functions
        ////////////////////////////////////////////////////////////
        // Slasher Functions ///////////////////////////////////////
        ////////////////////////////////////////////////////////////

        private void NextRound()
        {
            if (useSlasher && SlasherStarted)
            {
                TOD_Sky.Instance.Cycle.Hour = startHour + 1;
                if (Players.Count == 0)
                {
                    Slashers.Clear();
                    foreach (var plyr in SlasherPlayers)
                    {
                        Players.Add(plyr.player);
                    }
                }               
                DeadPlayers.Clear();
                Teams.Clear();
                RoundNumber++;
                ChooseRandomSlasher();
                EventManager.Call("TeleportAllPlayersToEvent", new object[] { });
                BuildTimer(1);
            }         
        }        
        private void BuildTimer(int type)
        {
            float time;
            bool start = true;
            if (type == 1)
            {
                time = slasherTime;
                SlasherTimers.Add(timer.Repeat(1, slasherTime, () =>
                {
                    if (start)
                    {
                        timerMsg(string.Format("Round {0}", RoundNumber.ToString()));
                        timerMsg(string.Format(lang.GetMessage("weapAvail", this), slasherTime / 60, "Minutes"));
                        start = false;
                    }
                    time--;
                    if (time == 0)
                    {
                        BuildTimer(2);
                        GivePlayerWeapons();
                        return;
                    }
                    if (time == 60)
                    {
                        timerMsg(string.Format(lang.GetMessage("weapAvail", this), 1, "Minute"));
                    }
                    if (time == 30)
                    {
                        timerMsg(string.Format(lang.GetMessage("weapAvail", this), 30, "Seconds"));
                    }
                    if (time == 10)
                    {
                        timerMsg(string.Format(lang.GetMessage("weapAvail", this), 10, "Seconds"));
                    }
                }));
            }
            else if (type == 2)
            {
                time = playTimer;
                SlasherTimers.Add(timer.Repeat(1, playTimer, () =>
                {
                    if (start)
                    {
                        timerMsg(string.Format(lang.GetMessage("skillTime", this), playTimer / 60, "Minutes"));
                        start = false;
                    }
                    time--;
                    if (time == 0)
                    {
                        NextRound();
                        return;
                    }
                    if (time == 60)
                    {
                        timerMsg(string.Format(lang.GetMessage("skillTime", this), 1, "Minute"));
                    }
                    if (time == 30)
                    {
                        timerMsg(string.Format(lang.GetMessage("skillTime", this), 30, "Seconds"));
                    }
                    if (time == 10)
                    {
                        timerMsg(string.Format(lang.GetMessage("skillTime", this), 10, "Seconds"));
                    }
                }));
            }
        }        
        private void timerMsg(string left)
        {
            foreach (var player in SlasherPlayers)
            {
                SendReply(player.player, lang.GetMessage("title", this) + left);
            }
        }
        private void GiveWeapons(BasePlayer player)
        {
            player.inventory.GiveItem(BuildSlasherWeapon(SlasherWeapon), player.inventory.containerBelt);
            GiveItem(player, SlasherAmmo, AmmoAmount, player.inventory.containerMain);
            GiveItem(player, "machete", 1, player.inventory.containerBelt);
        }
        private void GiveSlasherGear(BasePlayer player)
        {
            GiveWeapons(player);
            Give(player, BuildItem("shoes.boots", 1, sBoots));
            Give(player, BuildItem("pants", 1, sPants));
            Give(player, BuildItem("tshirt", 1, sShirt));
            Give(player, BuildItem("mask.bandana", 1, sMask));
        }
        private void GivePlayerGear(BasePlayer player)
        {
            GiveItem(player, "torch", 2, player.inventory.containerBelt);
            Give(player, BuildItem("shoes.boots", 1, pBoots));
            Give(player, BuildItem("pants", 1, pPants));
            Give(player, BuildItem("tshirt", 1, pShirt));
            Give(player, BuildItem("hat.miner", 1, null));
        }
        private void GivePlayerWeapons()
        {            
            foreach (SlasherPlayer slasherplayer in SlasherPlayers)
            {
                if (Teams[slasherplayer.player.userID] == Team.HUNTED)
                    GiveWeapons(slasherplayer.player);
            }            
        }    
        private void CheckPlayers()
        {
            if (DeadPlayers.Count == (SlasherPlayers.Count - 1))
            {
                foreach (var plyr in SlasherPlayers)
                {
                    SendReply(plyr.player, lang.GetMessage("slasherWin", this));
                }
                if (RoundNumber >= maxRounds)
                {
                    timerMsg(lang.GetMessage("gameEnd", this));
                    DestroyTimers();
                    timer.Once(10, () => CheckScores());
                    return;
                }
                DestroyTimers();
                timer.Once(10, ()=> NextRound());
                return;
            }            
        }
        private void TimeLoop()
        {
            timer.Once(30, () => CheckTime());            
        }
        private void CheckTime()
        {
            var time = TOD_Sky.Instance.Cycle.Hour;
            if (!SlasherStarted)
            {                
                if (((time >= openHour && time <= 24) || (time >= 0 && time <= endHour)))
                {
                    if (!autoOpen && !failed)
                    {
                        ForceOpenEvent();
                    }
                    else if (autoOpen)
                    {
                        if (time >= startHour)
                        {
                            if (SlasherPlayers.Count >= 2)
                            {
                                if (!timerStarted)
                                {
                                    timerStarted = true;
                                    timerMsg(lang.GetMessage("startEvent", this));
                                    timer.Once(20, () => timerMsg(lang.GetMessage("10start", this)));
                                    timer.Once(30, () => EventManager.Call("StartEvent", new object[] { }));
                                }
                            }
                        }
                    }
                }
                if (time >= endHour && time <= openHour && gameOpen)
                { EventManager.Call("CloseEvent", new object[] { }); gameOpen = false; }
            }            
            TimeLoop();
        }
        private void ForceOpenEvent()
        {
            if (!SlasherStarted)
            {              

                if (PlayerSpawns == null)
                {
                    failed = true;
                    Puts("Failed to launch Slasher, player spawnfile not found");
                    return;
                }
                object success = Spawns.Call("GetSpawnsCount", new object[] { PlayerSpawns });
                if (success is string)
                {
                    if (!failed)
                    {
                        failed = true;
                        Puts("Failed to launch Slasher, invalid spawn file set");
                        return;
                    }
                    return;
                }
                if (DeadPlayerSpawns == null)
                {
                    failed = true;
                    Puts("Failed to launch Slasher, dead player spawnfile not found");
                    return;
                }
                object successD = Spawns.Call("GetSpawnsCount", new object[] { DeadPlayerSpawns });
                if (successD is string)
                {
                    if (!failed)
                    {
                        failed = true;
                        Puts("Failed to launch Slasher, invalid dead player spawn file set");
                        return;
                    }
                    return;
                }
                EventManager.Call("SelectEvent", new object[] { "Slasher" });
                EventManager.Call("SelectSpawnfile", new object[] { PlayerSpawns });

                var open = EventManager.Call("CanEventOpen", new object[] { });
                if (open is string)
                {
                    Puts("Can not start event because : " + open.ToString());
                    return;
                }

                autoOpen = true;
                gameOpen = true;
                
                EventManager.Call("OpenEvent", new object[] { });
                timer.Once(60, () => OpenReminder());
            }
        }
        private void OpenReminder()
        {
            if (!SlasherStarted && gameOpen)
            {
                foreach (var player in BasePlayer.activePlayerList)
                {
                    SendReply(player, lang.GetMessage("eventOpen", this, player.UserIDString));
                }
                timer.Once(180, () => OpenReminder());
            }

        }
        void DestroyTimers()
        {
            foreach (Timer sTimer in SlasherTimers)
            {
                sTimer.Destroy();
            }
            SlasherTimers.Clear();
        }

        ////////////////////////////////////////////////////////////
        // Give ////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////

        private void InitializeTable()
        {
            displaynameToShortname.Clear();
            List<ItemDefinition> IDef = ItemManager.GetItemDefinitions() as List<ItemDefinition>;
            foreach (ItemDefinition itemdef in IDef)
            {
                displaynameToShortname.Add(itemdef.displayName.english.ToString().ToLower(), itemdef.shortname.ToString());
            }
        }
        public object GiveItem(BasePlayer player, string itemname, int amount, ItemContainer pref)
        {
            itemname = itemname.ToLower();

            if (displaynameToShortname.ContainsKey(itemname))
                itemname = displaynameToShortname[itemname];

            var definition = ItemManager.FindItemDefinition(itemname);
            if (definition == null)
                return string.Format("{0} {1}", "Item not found: ", itemname);
            player.inventory.GiveItem(ItemManager.CreateByItemID(definition.itemid, amount, false), pref);
            return true;
        }
        private void Give(BasePlayer player, Item item)
        {
            player.inventory.GiveItem(item, player.inventory.containerWear);
        }
        private Item BuildItem(string shortname, int amount, object skin)
        {
            var definition = ItemManager.FindItemDefinition(shortname);
            if (definition != null)
            {
                if (skin != null)
                {
                    Item item = ItemManager.CreateByItemID((int)definition.itemid, amount, false, (int) skin);
                    return item;
                }
                else
                {
                    Item item = ItemManager.CreateByItemID((int)definition.itemid, amount, false);
                    return item;
                }
            }
            return null;
        }
        private Item BuildSlasherWeapon(string shortname)
        {
            var definition = ItemManager.FindItemDefinition(shortname);
            if (definition != null)
            {
                Item sGun = ItemManager.CreateByItemID((int)definition.itemid, 1, false);

                var weapon = sGun.GetHeldEntity() as BaseProjectile;
                if (weapon != null)
                {
                    (sGun.GetHeldEntity() as BaseProjectile).primaryMagazine.contents = weapon.primaryMagazine.capacity;
                }
                sGun.contents.AddItem(BuildItem("weapon.mod.flashlight", 1, null).info, 1);
                
                return sGun;
            }
            return null;
        }

        ////////////////////////////////////////////////////////////
        // Teams ///////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////

        enum Team
        {
            SLASHER,
            HUNTED,
            NONE
        }
        private bool CheckForTeam(BasePlayer player)
        {
            if (Teams.ContainsKey(player.userID))
            {
                return true;
            }
            return false;
        }
        private void TeamAssign(BasePlayer player)
        {
            if (useSlasher)
            {
                Team team = Team.HUNTED;
                Teams.Add(player.userID, team);
                player.GetComponent<SlasherPlayer>().isSlasher = false;                
            }        
        }
        private void ChooseRandomSlasher()
        {
            BasePlayer slasher = null;
            int num = UnityEngine.Random.Range(1, Players.Count);
            slasher = Players[num - 1];
            foreach (var p in SlasherPlayers)
            {
                Team team;
                if (p.player == slasher)
                {
                    team = Team.SLASHER;
                    p.player.GetComponent<SlasherPlayer>().isSlasher = true;
                    Slashers.Add(p.player);
                    Players.Remove(p.player);
                    SendReply(p.player, lang.GetMessage("title", this, p.player.UserIDString) + lang.GetMessage("slasherChoose", this, p.player.UserIDString));
                }
                else
                {
                    team = Team.HUNTED;
                    p.player.GetComponent<SlasherPlayer>().isSlasher = false;                    
                }
                Teams.Add(p.player.userID, team);
            }         
        } 
        #endregion      

        #region scoring
        ////////////////////////////////////////////////////////////
        // Scoring /////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////

        void AddKill(BasePlayer player, BasePlayer victim, int amount)
        {
            if (!player.GetComponent<SlasherPlayer>())
                return;

            player.GetComponent<SlasherPlayer>().kills++;
            EventManager.Call("AddTokens", player.userID.ToString(), amount);
            EventManager.Call("BroadcastEvent", string.Format(lang.GetMessage("KillMsg", this), player.displayName, player.GetComponent<SlasherPlayer>().kills.ToString(), victim.displayName));
        }
        void CheckScores()
        {
            int highScore = 0;
            BasePlayer winner = null;
            TOD_Sky.Instance.Cycle.Hour = endHour;
            foreach (var player in SlasherPlayers)
            {
                int score = player.player.GetComponent<SlasherPlayer>().kills;
                if (score > highScore)
                    highScore = score;
                winner = player.player;
            } 
                     
           if (winner == null) return;
           Winner(winner);
        }
        void Winner(BasePlayer player)
        {
            var winnerobjectmsg = new object[] { string.Format(lang.GetMessage("WinMsg", this), player.displayName) };
            EventManager.Call("AddTokens", player.userID.ToString(), WinTokens);
            var emptyobject = new object[] { };
            for (var i = 1; i < 10; i++)
            {
                EventManager.Call("BroadcastEvent", winnerobjectmsg);
            }
            EventManager.Call("CloseEvent", emptyobject);
            EventManager.Call("EndEvent", emptyobject);
        }
        #endregion

        #region console commands/auth
        ////////////////////////////////////////////////////////////
        // Console Commands ////////////////////////////////////////
        ////////////////////////////////////////////////////////////

        [ConsoleCommand("slasher.spawnfile")]
        void ccmdSpawns(ConsoleSystem.Arg arg)
        {
            if (!isAuth(arg)) return;
            if (arg.Args == null || arg.Args.Length == 0)
            {
                SendReply(arg, "slasher.spawnfile \"filename\"");
                return;
            }
            object success = EventManager.Call("SelectSpawnfile", (arg.Args[0]));
            if (success is string)
            {
                SendReply(arg, (string)success);
                return;
            }
            PlayerSpawns = arg.Args[0];
            SaveConfig();
            SendReply(arg, string.Format("Slasher spawnfile is now {0} .", PlayerSpawns));
            failed = false;
        }
        [ConsoleCommand("slasher.deadspawnfile")]
        void ccmdDeadSpawns(ConsoleSystem.Arg arg)
        {
            if (!isAuth(arg)) return;
            if (arg.Args == null || arg.Args.Length == 0)
            {
                SendReply(arg, "slasher.deadspawnfile \"filename\"");
                return;
            }
            object success = EventManager.Call("SelectSpawnfile", (arg.Args[0]));
            if (success is string)
            {
                SendReply(arg, (string)success);
                return;
            }
            DeadPlayerSpawns = arg.Args[0];
            SaveConfig();
            SendReply(arg, string.Format("Slasher dead player spawnfile is now {0} .", DeadPlayerSpawns));
            failed = false;
        }
        [ConsoleCommand("slasher.toggle")]
        void ccmdToggle(ConsoleSystem.Arg arg)
        {
            if (!isAuth(arg)) return;
            if (useAutoStart)
            {
                useAutoStart = false;
                Puts("Autostart deactivated");
                return;
            }
            else if (!useAutoStart)
            {
                useAutoStart = true;
                Puts("Autostart activated");
                return;
            }
        }
        bool isAuth(ConsoleSystem.Arg arg)
        {
            if (arg.connection != null)
            {
                if (arg.connection.authLevel < 1)
                {
                    SendReply(arg, "You dont not have permission to use this command.");
                    return false;
                }
            }
            return true;
        }
        #endregion

        #region config
        //////////////////////////////////////////////////////////////////////////////////////
        // Configurations ////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        static Dictionary<string, object> EventZoneConfig;

    
        public float openHour = 18;
        public float startHour = 19.5f;
        public float endHour = 4f;

        static string EventZoneName = "Slasher";
        static string PlayerSpawns = "slasherspawns";
        static string DeadPlayerSpawns = "deadplayerspawns";
        static string SlasherWeapon = "shotgun.pump";
        static string SlasherAmmo = "ammo.shotgun";

        static float EventStartHealth = 100;
        static float ffDamageMod = 0.4f;
        static float torchDamageMod = 2.2f;
        static int slasherTime = 150;
        static int playTimer = 90;

        static bool useAutoStart = true;

        static int KillTokens = 1;
        static int WinTokens = 10;
        static int KillSlasherTokens = 3;
        static int AmmoAmount = 60;
        static int maxRounds = 2;

        static int sBoots = 10088;
        static int sPants = 10048;
        static int sShirt = 10038;
        static int sMask = 10064;
        static int pBoots = 10044;
        static int pPants = 10078;
        static int pShirt = 10039;


        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            CheckCfg("Slasher - Spawnfile", ref PlayerSpawns);
            CheckCfg("Slasher - Dead player spawnfile", ref DeadPlayerSpawns);
            CheckCfg("Slasher - Zone name", ref EventZoneName);
            CheckCfg("Slasher - Weapon - Slasher weapon shortname", ref SlasherWeapon);
            CheckCfg("Slasher - Weapon - Ammo type", ref SlasherAmmo);
            CheckCfg("Slasher - AutoStart - Use auto start", ref useAutoStart);
            CheckCfg("Slasher - Rounds to play per night cycle", ref maxRounds);


            CheckCfgFloat("Slasher - AutoStart - Time event will open", ref openHour);
            CheckCfgFloat("Slasher - AutoStart - Time event will start", ref startHour);
            CheckCfgFloat("Slasher - AutoStart - Time event will end", ref endHour);
            CheckCfgFloat("Slasher - Players - Starting health", ref EventStartHealth);
            CheckCfgFloat("Slasher - Players - Friendly fire damage modifier", ref ffDamageMod);
            CheckCfgFloat("Slasher - Players - Torch damage modifier", ref torchDamageMod);
            CheckCfg("Slasher - Round Timers - Slasher timer (seconds)", ref slasherTime);
            CheckCfg("Slasher - Round Timers - Play timer (seconds)", ref playTimer);

            CheckCfg("Tokens - Per Kill", ref KillTokens);
            CheckCfg("Tokens - Per Slasher Kill", ref KillSlasherTokens);
            CheckCfg("Tokens - On Win", ref WinTokens);

            CheckCfg("Skins - Slasher - Boots", ref sBoots);
            CheckCfg("Skins - Slasher - Pants", ref sPants);
            CheckCfg("Skins - Slasher - TShirt", ref sShirt);
            CheckCfg("Skins - Slasher - Bandana", ref sMask);
            CheckCfg("Skins - Player - Boots", ref pBoots);
            CheckCfg("Skins - Player - Pants", ref pPants);
            CheckCfg("Skins - Player - TShirt", ref pShirt);
        }
        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }
        private void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }
        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

        object GetEventConfig(string configname)
        {
            if (!useSlasher) return null;
            if (Config[configname] == null) return null;
            return Config[configname];
        }
        #endregion

        #region messages
        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "<color=#cc0000>Slasher</color> : " },
            {"WinMsg", "{0} won the game with the most kills" },
            {"NoPlayers", "Slasher has no more players, auto-closing." },
            {"KillMsg", "{0} killed {2}. ({1} kills)" },
            {"OpenMsg", "In Slasher, the goal is to hide from the slasher, if you hide long enough you will be given weapons to take down the slasher" },
            {"waitNext", "You must wait for the next round."},
            {"openTime", "Slasher can only be played between the hours of " },
            {"killS", "You killed the slasher!"},
            {"killSlasher", "{0} killed the slasher, next round starts in 10 seconds" },
            {"gameEnd", "Event ends in 10 seconds" },
            {"weapAvail", "Weapons will be available in {0} {1}"},          
            {"skillTime", "{0} {1} left to kill the slasher!" },
            {"slasherWin", "The slasher has won the round! next round starts in 10 seconds"},
            {"slasherChoose", "You are the Slasher!" },
            {"startEvent", "Starting event in 30 seconds" },
            {"10start", "Event starts in 10 seconds"},
            {"ff", "Don't shoot your team mates!"},
            {"eventOpen", "<color=orange>Event:</color> The Event is now open for : <color=#cc0000>Slasher</color> !  Type /event_join to join!" }
        };
        #endregion
    }
}



// --- End of file: Slasher.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XRaidProtection-1.2.1.cs ---
// --- Original Local Path: XRaidProtection-1.2.1.cs ---

using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using System.Globalization;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("XRaidProtection", "Monster", "1.2.1")]
    class XRaidProtection : RustPlugin
	{
		private const bool LanguageEnglish = false;
		
		#region Reference
		
		[PluginReference] private Plugin IQChat, RaidableBases, AbandonedBases, Convoy;
		
        #endregion
		
	    #region Configuration

        private RaidConfig config;

        private class RaidConfig
        {													
			internal class MessageSetting
			{			
				[JsonProperty(LanguageEnglish ? "Interval between messages. Min - 10 sec" : "Интервал между сообщениями. Мин - 10 сек")] public int TimeMessage;
			}			
			
			internal class TimeSetting
			{
				[JsonProperty(LanguageEnglish ? "Start protection | Hour" : "Начало защиты | Часы")] public int HourStart;
				[JsonProperty(LanguageEnglish ? "Start protection | Minute" : "Начало защиты | Минуты")] public int MinuteStart;
				[JsonProperty(LanguageEnglish ? "End protection | Hour" : "Конец защиты | Часы")] public int HourEnd;
				[JsonProperty(LanguageEnglish ? "End protection | Minute" : "Конец защиты | Минуты")] public int MinuteEnd;
				[JsonProperty(LanguageEnglish ? "Timezone - UTC+0:00" : "Часовой пояс - UTC+0:00")] public int GMT;
				[JsonProperty(LanguageEnglish ? "Protection activity check timer (.sec)" : "Время таймера проверки активности защиты (.сек)")] public int Timer;
				[JsonProperty(LanguageEnglish ? "Use local computer/hosting time. [ Requests to an external time service and time zone will be disabled ]" : "Использовать локальное время компьютера/хостинга. [ Запросы к внешнему сервису точного времени и часовой пояс будут отключены ]")] public bool LocalTime;
			}			
			
			internal class Settings
			{
				[JsonProperty(LanguageEnglish ? "Sound effect" : "Звуковой эффект")] public string Effect;
				[JsonProperty(LanguageEnglish ? "Protection percentage for all players. 1.0 - 100%" : "Процент защиты для всех игроков. 1.0 - 100%")] public float Damage;
				[JsonProperty(LanguageEnglish ? "Protection percentage for all vehicles. 1.0 - 100%" : "Процент защиты для всех транспортных средств. 1.0 - 100%")] public float DamageV;
				[JsonProperty(LanguageEnglish ? "Protected all vehicles" : "Защита всех транспортных средств")] public bool ProtectV;
				[JsonProperty(LanguageEnglish ? "Enable sound effect" : "Включить звуковой эффект")] public bool TEffect;
				[JsonProperty(LanguageEnglish ? "Protection activity only in the first days of the wipe" : "Активность защиты только в первые дни вайпа")] public bool PDay;
				[JsonProperty(LanguageEnglish ? "How protection will work in the early days of the wipe - [ True - all day | False - only in the specified time range ]" : "Как будет работать защита в первые дни вайпа - [ True - круглые сутки | False - только в указанном временном диапазоне ]")] public bool PDayO;
				[JsonProperty(LanguageEnglish ? "How many first days after the wipe will be active protection" : "Сколько первых дней после вайпа будет активной защита")] public int PDays;
				[JsonProperty(LanguageEnglish ? "Percentage of protection by day, only at ( Protection activity only in the first days of the wipe ). If the list is empty or no day is specified, the protection percentage will be taken from ( Protection percentage for all players. 1.0 - 100% )" : "Процент защиты по дням, только при ( Активность защиты только в первые дни вайпа ). Если список пуст или не указан день, процент защиты будет взят из параметра ( Процент защиты для всех игроков. 1.0 - 100% )")] public Dictionary<int, float> ProtectDays;
				[JsonProperty(LanguageEnglish ? "Enable GUI message" : "Включить GUI сообщение")] public bool TGUIMessage;
				[JsonProperty(LanguageEnglish ? "Enable chat message" : "Включить чат сообщение")] public bool TMessage;
				[JsonProperty(LanguageEnglish ? "Allow breaking twigs during defense" : "Разрешить ломать солому во время защиты")] public bool Twigs;
				[JsonProperty(LanguageEnglish ? "Enable protection for players with permission when the main protect is not active" : "Включить защиту для игроков с разрешением, когда основная защита не активна")] public bool PermProtect;
				[JsonProperty(LanguageEnglish ? "Enable protection against damage from helicopters, MLRS, submarines, etc. [ Excluding rot damage ]" : "Включить защиту от урона вертолета, МЛРС, подводных лодок и т.д. [ Кроме урона от гниения ]")] public bool MoreDamage;
				[JsonProperty(LanguageEnglish ? "0 - Protection only for players with permission, 1 - Protection for all players, 2 - Protection for players with permission and for all players" : "0 - Защита только для игроков с пермишеном, 1 - Защита для всех игроков, 2 - Защита для игроков с пермишеном и для всех игроков")] public int TypeProtection;
				[JsonProperty(LanguageEnglish ? "What days of the week protection can be active - [ Does not apply to protection in the early days of the wipe ] - [ Sun - 1, Mon - 2, Tue - 3, Wed - 4, Thu - 5, Fri - 6, Sat - 7 ]" : "В какие дни недели защита может быть активной - [ Не распространяется на защиту в первые дни вайпа ] - [ Вс - 1, Пн - 2, Вт - 3, Ср - 4, Чт - 5, Пт - 6, Сб - 7 ]")] public int[] DayOfWeekProtection = new int[] { 1, 2, 3, 4, 5, 6, 7 };
			}
			
			internal class GUISettings
			{
				[JsonProperty(LanguageEnglish ? "AnchorMin [ When damage is dealt ]" : "AnchorMin [ Когда наносится урон ]")] public string AnchorMinD;
				[JsonProperty(LanguageEnglish ? "AnchorMax [ When damage is dealt ]" : "AnchorMax [ Когда наносится урон ]")] public string AnchorMaxD;
				[JsonProperty(LanguageEnglish ? "OffsetMin [ When damage is dealt ]" : "OffsetMin [ Когда наносится урон ]")] public string OffsetMinD;
				[JsonProperty(LanguageEnglish ? "OffsetMax [ When damage is dealt ]" : "OffsetMax [ Когда наносится урон ]")] public string OffsetMaxD;
				[JsonProperty(LanguageEnglish ? "Use icons [ When damage is dealt ]" : "Использовать иконки [ Когда наносится урон ]")] public bool IconD;
				[JsonProperty(LanguageEnglish ? "AnchorMin [ Status is always displayed ]" : "AnchorMin [ Статус всегда отображается ]")] public string AnchorMinA;
				[JsonProperty(LanguageEnglish ? "AnchorMax [ Status is always displayed ]" : "AnchorMax [ Статус всегда отображается ]")] public string AnchorMaxA;
				[JsonProperty(LanguageEnglish ? "OffsetMin [ Status is always displayed ]" : "OffsetMin [ Статус всегда отображается ]")] public string OffsetMinA;
				[JsonProperty(LanguageEnglish ? "OffsetMax [ Status is always displayed ]" : "OffsetMax [ Статус всегда отображается ]")] public string OffsetMaxA;
				[JsonProperty(LanguageEnglish ? "Use icons [ Status is always displayed ]" : "Использовать иконки [ Статус всегда отображается ]")] public bool IconA;
				[JsonProperty(LanguageEnglish ? "Text color" : "Цвет текста")] public string ColorText;
				[JsonProperty(LanguageEnglish ? "Text size" : "Размер текста")] public int SizeText;
				[JsonProperty(LanguageEnglish ? "Always display UI when protection is active" : "Постоянно отображать UI при активной защите")] public bool ActiveUI;
				[JsonProperty(LanguageEnglish ? "Always display UI when protection is inactive" : "Постоянно отображать UI при неактивной защите")] public bool DeactiveUI;
			}
			
			[JsonProperty(LanguageEnglish ? "Messages in chat and GUI" : "Сообщения в чат и GUI")]
            public MessageSetting Message = new MessageSetting();
			[JsonProperty(LanguageEnglish ? "Setting the protection duration" : "Настройка времени действия защиты")]
            public TimeSetting Time = new TimeSetting();
			[JsonProperty(LanguageEnglish ? "General settings" : "Общее")]
            public Settings Setting = new Settings();
			[JsonProperty(LanguageEnglish ? "GUI settings" : "Настройка GUI")]
            public GUISettings GUI = new GUISettings();
			[JsonProperty(LanguageEnglish ? "List of prefabs that will be protected" : "Список префабов которые будут под защитой")]
            public List<string> Prefabs = new List<string>();
            [JsonProperty(LanguageEnglish ? "Setting permissions - [ Permisssion | The percentage of protection by permission. 1.0 - 100% ]" : "Настройка пермишенов - [ Пермишен | Процент защиты по пермишену. 1.0 - 100% ]")]
			public Dictionary<string, float> Permisssion = new Dictionary<string, float>();
			[JsonProperty(LanguageEnglish ? "Wipe date" : "Дата вайпа")]
            public string DateWipe;
			[JsonProperty(LanguageEnglish ? "Time" : "Время")]
			public DateTime MSCTime;

			public static RaidConfig GetNewConfiguration()
            {
                return new RaidConfig
                {
					Message = new MessageSetting
					{
						TimeMessage = 30
					},
					Time = new TimeSetting
					{
						HourStart = 22,
						MinuteStart = 0,
						HourEnd = 7,
						MinuteEnd = 0,
						GMT = LanguageEnglish ? 0 : 3,
						Timer = 120,
						LocalTime = true
					},
					Setting = new Settings
					{
						Effect = "assets/bundled/prefabs/fx/invite_notice.prefab",
						Damage = 0.5f,
						DamageV = 0.5f,
						ProtectV = false,
						TEffect = true,
						PDay = false,
						PDayO = false,
						PDays = 3,
						ProtectDays = new Dictionary<int, float> { [1] = 1.0f, [2] = 0.7f, [3] = 0.5f },
						TGUIMessage = true,
						TMessage = false,
						Twigs = true,
						PermProtect = false,
						MoreDamage = true,
						TypeProtection = 1,
						DayOfWeekProtection = new int[] { 1, 2, 3, 4, 5, 6, 7 }
						
					},					
					GUI = new GUISettings
					{
						AnchorMinD = "0.5 0",
						AnchorMaxD = "0.5 0",
						OffsetMinD = "-194.5 80",
						OffsetMaxD = "175.5 110",
						IconD = true,
						AnchorMinA = "0.5 0",
						AnchorMaxA = "0.5 0",
						OffsetMinA = "-194.5 -6",
						OffsetMaxA = "175.5 24",
						IconA = false,
						ColorText = "1 1 1 0.4",
						SizeText = 12,
						ActiveUI = true,
						DeactiveUI = true
					},
					Prefabs = new List<string>
					{
						"cupboard.tool.deployed",
						"wall.frame.shopfront.metal"
					},
					Permisssion = new Dictionary<string, float>
					{
						["xraidprotection.elite"] = 0.90f,
						["xraidprotection.perm"] = 0.80f,
						["xraidprotection.vip"] = 0.70f
					}
				}; 
			}			 
		}			

		protected override void LoadConfig()
        {
            base.LoadConfig(); 
			 
			try 
			{ 
				config = Config.ReadObject<RaidConfig>();
			}
			catch  
			{
				PrintWarning(LanguageEnglish ? "Configuration read error! Creating a default configuration!" : "Ошибка чтения конфигурации! Создание дефолтной конфигурации!");
				LoadDefaultConfig();
			}
			
			if(config.Setting.ProtectDays == null)
				config.Setting.ProtectDays = new Dictionary<int, float> { [1] = 1.0f, [2] = 0.5f, [3] = 0.3f };
			
			SaveConfig();
        }
		protected override void LoadDefaultConfig() => config = RaidConfig.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion
		
		#region Commands
		
		[ChatCommand("protect")]
		void cmdProtection(BasePlayer player)
		{
			if(config.Setting.TypeProtection != 0)
				if(_time)
				{
					if(config.Setting.PDay && config.Setting.PDayO)
						Player.Reply(player, string.Format(lang.GetMessage("WIPE_CHAT_MESSAGE", this, player.UserIDString), config.Setting.PDays, config.Setting.ProtectDays.Count == 0 ? $"{config.Setting.Damage * 100}" : $"{config.Setting.ProtectDays.First().Value * 100}-{config.Setting.ProtectDays.Last().Value * 100}") + string.Format(lang.GetMessage("LEFT", this, player.UserIDString), (config.MSCTime - DateTime.ParseExact(config.DateWipe, "dd/MM/yyyy", CultureInfo.InvariantCulture).AddDays(config.Setting.PDays)).ToString("dd' d.  'hh':'mm':'ss")));
					else
						Player.Reply(player, lang.GetMessage("P_YES_ACTIVE", this, player.UserIDString));
				}
				else
					Player.Reply(player, lang.GetMessage("P_NO_ACTIVE", this, player.UserIDString));
		}
		
		#endregion
		
		#region Hooks
		
		private void OnServerInitialized()
		{
			PrintWarning("\n-----------------------------\n" +
			"     Author - Monster\n" +
			"     VK - vk.com/idannopol\n" +
			"     Discord - Monster#4837\n" +
			"-----------------------------");
			
			foreach(var perm in config.Permisssion)
			    permission.RegisterPermission(perm.Key, this);
			
			On = new TimeSpan(config.Time.HourStart, config.Time.MinuteStart, 0);
			Off = new TimeSpan(config.Time.HourEnd, config.Time.MinuteEnd, 0);
			
			timer.Once(5, () => BasePlayer.activePlayerList.ToList().ForEach(OnPlayerConnected));
			
			MSC();
			InitializeLang();
			timer.Once(1, () => 
			{
				config.DateWipe = SaveRestore.SaveCreatedTime.ToString("dd/MM/yyyy");
				SaveConfig();
			});
			timer.Every(config.Time.Timer, () => MSC());
		}
		
		private void Unload()
		{
			foreach(var player in BasePlayer.activePlayerList)
			{
				CuiHelper.DestroyUi(player, ".MessagePanel");
				CuiHelper.DestroyUi(player, ".Icon1");
				CuiHelper.DestroyUi(player, ".Icon2");				
				
				CuiHelper.DestroyUi(player, ".MessagePanelX");
				CuiHelper.DestroyUi(player, ".Icon1X");
				CuiHelper.DestroyUi(player, ".Icon2X");
			}
		}
		
		private void OnPlayerConnected(BasePlayer player)
		{
			if(player.IsReceivingSnapshot)
			{
				NextTick(() => OnPlayerConnected(player));
				return;
			}
			
			if(config.GUI.ActiveUI && _time || config.GUI.DeactiveUI && !_time)
				Message(player, "", false);
		}
		
		private void MSC()
		{
			if(config.Time.LocalTime)
			{
				config.MSCTime = DateTime.Now;
				SaveConfig();
			}
			else
				webrequest.Enqueue("http://worldtimeapi.org/api/timezone/Europe/London", null, (code, response) =>
				{
					if(code != 200 || response == null) return;
				
					config.MSCTime = new DateTime(1970, 1, 1, 0, 0, 0, 0).AddSeconds(double.Parse(JsonConvert.DeserializeObject<JObject>(response)["unixtime"].ToString()) + (config.Time.GMT * 3600));
					SaveConfig();
				}, this);
				
			timer.Once(3, () =>
			{
				bool time_1 = _time;
				
				_time = Time();
				
				if(!time_1 && _time)
				{
					foreach(var player in BasePlayer.activePlayerList)
					{
						OnPlayerConnected(player);
						Player.Reply(player, lang.GetMessage("P_ACTIVE", this, player.UserIDString));
					}
				}
				
				if(time_1 && !_time)
				{
					foreach(var player in BasePlayer.activePlayerList)
						Player.Reply(player, lang.GetMessage("P_DEACTIVE", this, player.UserIDString));
						
					if(!config.GUI.DeactiveUI) Unload();
					else BasePlayer.activePlayerList.ToList().ForEach(OnPlayerConnected);
				}
			});
		} 
		
		private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
		{
			if(entity == null || info == null || info.damageTypes.Has(Rust.DamageType.Decay)) return;
			
			if(EventTerritory(entity.transform.position)) return;
			
            if(_time)
            {
				if(config.Setting.ProtectV)
					if((entity is BaseVehicle || entity is HotAirBalloon) && info.InitiatorPlayer != null && (!Convoy?.Call<bool>("IsConvoyVehicle", entity) ?? true))
						if(info.InitiatorPlayer.userID.IsSteamId())
						{
							info.damageTypes.ScaleAll(1.0f - config.Setting.DamageV);
							return;
						}
				
                if(config.Setting.TypeProtection == 0 || config.Setting.TypeProtection == 2)
                    foreach(var perm in config.Permisssion)
                        if(permission.UserHasPermission(entity.OwnerID.ToString(), perm.Key))
                        {
                            Protection(entity, info, perm.Value);
                            return;
                        }
                
                if(config.Setting.TypeProtection == 1 || config.Setting.TypeProtection == 2)
                    Protection(entity, info, config.Setting.PDay && config.Setting.ProtectDays.ContainsKey(_day) ? config.Setting.ProtectDays[_day] : config.Setting.Damage);
            }
            else if(config.Setting.PermProtect)
            {
                foreach(var perm in config.Permisssion)
                    if(permission.UserHasPermission(entity.OwnerID.ToString(), perm.Key))
                    {
                        Protection(entity, info, perm.Value);
                        break;
                    }
            }
		}
		
		private void Protection(BaseCombatEntity entity, HitInfo info, float damage)
		{
				bool ent = entity is BuildingBlock;
				
				if(config.Setting.Twigs && ent)
					if((entity as BuildingBlock).grade == BuildingGrade.Enum.Twigs)
						return;
				
		        if(ent || entity is Door || entity is SimpleBuildingBlock || config.Prefabs.Contains(entity.ShortPrefabName))
			    {
					BasePlayer player = info.InitiatorPlayer;
					var dm = info.damageTypes.Total();
					
					if(config.Setting.MoreDamage && player == null || player != null)
						info.damageTypes.ScaleAll(1.0f - damage);
					
					if(dm >= 1.5 && player != null)
					{
						if(Cooldowns.ContainsKey(player))
							if(Cooldowns[player].Subtract(DateTime.Now).TotalSeconds >= 0) return;
						
						string s_damage = $"{damage * 100}";
						
						if(config.Setting.TEffect) EffectNetwork.Send(new Effect(config.Setting.Effect, player, 0, new Vector3(), new Vector3()), player.Connection);
						if(config.Setting.TGUIMessage) Message(player, s_damage);
						if(config.Setting.TMessage)
						{
							string message = config.Setting.PDay && config.Setting.PDayO ? string.Format(lang.GetMessage("WIPE_CHAT_MESSAGE", this, player.UserIDString), config.Setting.PDays, s_damage) : s_damage == "100" ? string.Format(lang.GetMessage("FULL_CHAT_MESSAGE", this, player.UserIDString), s_damage, Off.ToString(@"hh\:mm"), On.ToString(@"hh\:mm")) : string.Format(lang.GetMessage("CHAT_MESSAGE", this, player.UserIDString), s_damage, On.ToString(@"hh\:mm"), Off.ToString(@"hh\:mm"));
							
							if(IQChat)
								IQChatPuts(player, message);
							else
								SendReply(player, message);
						}
					
						if(config.Message.TimeMessage < 10)
							Cooldowns[player] = DateTime.Now.AddSeconds(10);
						else
							Cooldowns[player] = DateTime.Now.AddSeconds(config.Message.TimeMessage);
					}
			    }
		}
		
		private bool EventTerritory(Vector3 entityPos) => Convert.ToBoolean(RaidableBases?.Call("EventTerritory", entityPos)) || Convert.ToBoolean(AbandonedBases?.Call("EventTerritory", entityPos));
		
		#endregion
		
		#region DateTime
		
		private Dictionary<BasePlayer, DateTime> Cooldowns = new Dictionary<BasePlayer, DateTime>();
		TimeSpan On, Off;
		bool _time;
		int _day;
		
		private bool Time()
		{
			if(config.Setting.PDay)
			{
				DateTime days = config.MSCTime - DateTime.ParseExact(config.DateWipe, "dd/MM/yyyy", CultureInfo.InvariantCulture).Subtract(new DateTime(1970, 1, 1));
				int d = days.Subtract(new DateTime(1970, 1, 1)).Days;
				 
				_day = 1 + d;
				 
				if(config.Setting.PDayO)
					return config.Setting.PDays > d;
				else
					return config.Setting.PDays > d && IsRange();
			}
			else
				if(config.Setting.DayOfWeekProtection.Contains((int)config.MSCTime.DayOfWeek + 1))
					return IsRange();
				else
					return false;
		}
		
		private bool IsRange()
		{
			int startTime = 100010;
			var Now = config.MSCTime.TimeOfDay;
			
			if(On < Off)
				return On <= Now && Now <= Off;
			
			return !(Off < Now && Now < On);
		}
		
		#endregion 
		 
		#region Message

        private void Message(BasePlayer player, string s_damage, bool destroy = true) 
        {
            CuiElementContainer container = new CuiElementContainer();
			
			if(destroy)
			{
				container.Add(new CuiLabel
				{
					FadeOut = 0.75f,
					RectTransform = { AnchorMin = config.GUI.AnchorMinD, AnchorMax = config.GUI.AnchorMaxD, OffsetMin = config.GUI.OffsetMinD, OffsetMax = config.GUI.OffsetMaxD },
					Text = { FadeIn = 0.75f, Text = config.Setting.PDay && config.Setting.PDayO ? string.Format(lang.GetMessage("WIPE_UI_MESSAGE", this, player.UserIDString), config.Setting.PDays, s_damage) : s_damage == "100" ? string.Format(lang.GetMessage("FULL_UI_MESSAGE", this, player.UserIDString), s_damage, Off.ToString(@"hh\:mm"), On.ToString(@"hh\:mm")) : string.Format(lang.GetMessage("UI_MESSAGE", this, player.UserIDString), s_damage, On.ToString(@"hh\:mm"), Off.ToString(@"hh\:mm")), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = config.GUI.SizeText, Color = config.GUI.ColorText }
				}, "Hud", ".MessagePanel", ".MessagePanel");
			
				if(config.GUI.IconD) 
				{
					container.Add(new CuiButton
					{
						FadeOut = 0.75f,
						RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-180 2", OffsetMax = "-154 28" },
						Button = { Color = "0.8 0.5 0.5 0.8", Sprite = "assets/icons/vote_down.png" },
						Text = { Text = "" }
					}, ".MessagePanel", ".Icon1");			
			
					container.Add(new CuiButton
					{
						FadeOut = 0.75f,
						RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "154 2", OffsetMax = "180 28" },
						Button = { Color = "0.8 0.5 0.5 0.8", Sprite = "assets/icons/vote_down.png" },
						Text = { Text = "" }
					}, ".MessagePanel", ".Icon2");
				}
			}
			else
			{
				container.Add(new CuiLabel
				{
					FadeOut = 0.75f,
					RectTransform = { AnchorMin = config.GUI.AnchorMinA, AnchorMax = config.GUI.AnchorMaxA, OffsetMin = config.GUI.OffsetMinA, OffsetMax = config.GUI.OffsetMaxA },
					Text = { FadeIn = 0.75f, Text = _time ? lang.GetMessage("P_YES_ACTIVE", this, player.UserIDString) : lang.GetMessage("P_NO_ACTIVE", this, player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = config.GUI.SizeText, Color = config.GUI.ColorText }
				}, "Hud", ".MessagePanelX", ".MessagePanelX");
			
				if(config.GUI.IconA) 
				{
					container.Add(new CuiButton
					{
						FadeOut = 0.75f,
						RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-180 2", OffsetMax = "-154 28" },
						Button = { Color = "0.8 0.5 0.5 0.8", Sprite = "assets/icons/vote_down.png" },
						Text = { Text = "" }
					}, ".MessagePanelX", ".Icon1X");			
			
					container.Add(new CuiButton
					{
						FadeOut = 0.75f,
						RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "154 2", OffsetMax = "180 28" },
						Button = { Color = "0.8 0.5 0.5 0.8", Sprite = "assets/icons/vote_down.png" },
						Text = { Text = "" }
					}, ".MessagePanelX", ".Icon2X");
				}
			}

            CuiHelper.AddUi(player, container);  

			if(destroy)
				timer.Once(7.5f, () => { CuiHelper.DestroyUi(player, ".MessagePanel"); CuiHelper.DestroyUi(player, ".Icon1"); CuiHelper.DestroyUi(player, ".Icon2"); });
        }

        #endregion
		
		#region Lang
 
        private void InitializeLang()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MESSAGE"] = "NIGHT RAIDING PROTECTION ACTIVE: {0}%. FROM {1} TO {2}!",
                ["CHAT_MESSAGE"] = "<size=12>NIGHT RAIDING PROTECTION ACTIVE: {0}%. FROM {1} TO {2}!</size>",
				["FULL_UI_MESSAGE"] = "PROTECTION: {0}%. RAIDING IS ALLOWED FROM {1} TO {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>PROTECTION: {0}%. RAIDING IS ALLOWED FROM {1} TO {2}!</size>",
				["WIPE_UI_MESSAGE"] = "IN THE FIRST {0} WIPE DAYS PROTECTION IN ACTIVITY! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>IN THE FIRST {0} WIPE DAYS PROTECTION IN ACTIVITY! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>NIGHT RAID PROTECTION IS ACTIVATED!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>NIGHT RAID PROTECTION IS DEACTIVATED!</color>",
				["P_NO_ACTIVE"] = "NIGHT RAID PROTECTION IS NOT ACTIVE NOW!",
				["P_YES_ACTIVE"] = "NIGHT RAID PROTECTION IS NOW ACTIVE!",
				["LEFT"] = "\n<size=10>LEFT: {0}</size>"
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MESSAGE"] = "АКТИВНА НОЧНАЯ ЗАЩИТА ОТ РЕЙДА: {0}%. С {1} ДО {2}!",
                ["CHAT_MESSAGE"] = "<size=12>АКТИВНА НОЧНАЯ ЗАЩИТА ОТ РЕЙДА: {0}%. С {1} ДО {2}!</size>",
				["FULL_UI_MESSAGE"] = "ЗАЩИТА: {0}%. РЕЙДИТЬ РАЗРЕШЕНО С {1} ДО {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>ЗАЩИТА: {0}%. РЕЙДИТЬ РАЗРЕШЕНО С {1} ДО {2}!</size>",
				["WIPE_UI_MESSAGE"] = "В ПЕРВЫЕ {0} ДНЯ ВАЙПА ДЕЙСТВУЕТ ЗАЩИТА! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>В ПЕРВЫЕ {0} ДНЯ ВАЙПА ДЕЙСТВУЕТ ЗАЩИТА! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>НОЧНАЯ ЗАЩИТА ОТ РЕЙДА АКТИВИРОВАНА!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>НОЧНАЯ ЗАЩИТА ОТ РЕЙДА ДЕАКТИВИРОВАНА!</color>",
				["P_NO_ACTIVE"] = "НОЧНАЯ ЗАЩИТА ОТ РЕЙДА СЕЙЧАС НЕ АКТИВНА!",
				["P_YES_ACTIVE"] = "НОЧНАЯ ЗАЩИТА ОТ РЕЙДА СЕЙЧАС АКТИВНА!",
				["LEFT"] = "\n<size=10>ОСТАЛОСЬ: {0}</size>"
            }, this, "ru");
			
			lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MESSAGE"] = "АКТИВНИЙ НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ: {0}%. З {1} ДО {2}!",
                ["CHAT_MESSAGE"] = "<size=12>АКТИВНИЙ НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ: {0}%. З {1} ДО {2}!</size>",
				["FULL_UI_MESSAGE"] = "ЗАХИСТ: {0}%. РЕЙДИТИ ДОЗВОЛЕНО З {1} ДО {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>ЗАХИСТ: {0}%. РЕЙДИТИ ДОЗВОЛЕНО З {1} ДО {2}!</size>",
				["WIPE_UI_MESSAGE"] = "У ПЕРШІ {0} ДНЯ ВАЙПУ ДІЄ ЗАХИСТ! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>У ПЕРШІ {0} ДНЯ ВАЙПУ ДІЄ ЗАХИСТ! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ АКТИВОВАНИЙ!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ ДЕАКТИВОВАНИЙ!</color>",
				["P_NO_ACTIVE"] = "НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ ЗАРАЗ НЕ АКТИВНИЙ!",
				["P_YES_ACTIVE"] = "НІЧНИЙ ЗАХИСТ ВІД РЕЙДУ ЗАРАЗ АКТИВНИЙ!",
				["LEFT"] = "\n<size=10>ЗАЛИШИЛОСЯ: {0}</size>"
            }, this, "uk");
			
			lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MESSAGE"] = "PROTECCIÓN CONTRA ATAQUES NOCTURNOS ACTIVADA: {0}%. DE {1} A {2}!",
                ["CHAT_MESSAGE"] = "<size=12>PROTECCIÓN CONTRA ATAQUES NOCTURNOS ACTIVADA: {0}%. DE {1} A {2}!</size>",
				["FULL_UI_MESSAGE"] = "PROTECCIÓN: {0}%. SE PERMITE ASALTAR DE {1} A {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>PROTECCIÓN: {0}%. SE PERMITE ASALTAR DE {1} A {2}!</size>",
				["WIPE_UI_MESSAGE"] = "EN LOS PRIMEROS {0} DÍAS LIMPIEZA ¡PROTECCIÓN EN ACTIVIDAD! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>EN LOS PRIMEROS {0} DÍAS LIMPIEZA ¡PROTECCIÓN EN ACTIVIDAD! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>¡LA PROTECCIÓN CONTRA RAID NOCTURNO ESTÁ ACTIVADA!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>¡LA PROTECCIÓN CONTRA RAID NOCTURNO ESTÁ DESACTIVADA!</color>",
				["P_NO_ACTIVE"] = "<size=10>¡LA PROTECCIÓN CONTRA RAID NOCTURNO NO ESTÁ ACTIVADA AHORA!</size>",
				["P_YES_ACTIVE"] = "¡LA PROTECCIÓN CONTRA RAID NOCTURNO YA ESTÁ ACTIVA!",
				["LEFT"] = "\n<size=10>IZQUIERDA: {0}</size>"
            }, this, "es-ES");
			
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MESSAGE"] = "DÉFENSE CONTRE LES RAIDS NOCTURNES ACTIVE: {0}%. DE {1} À {2}!",
                ["CHAT_MESSAGE"] = "<size=12>DÉFENSE CONTRE LES RAIDS NOCTURNES ACTIVE: {0}%. DE {1} À {2}!</size>",
				["FULL_UI_MESSAGE"] = "PROTECTION: {0}%. LES RAIDS SONT AUTORISÉS DE {1} À {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>PROTECTION: {0}%. LES RAIDS SONT AUTORISÉS DE {1} À {2}!</size>",
				["WIPE_UI_MESSAGE"] = "PROTECTION POUR LES {0} PREMIERS JOURS DE LA VYP! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>PROTECTION POUR LES {0} PREMIERS JOURS DE LA VYP! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>DÉFENSE CONTRE LES RAIDS NOCTURNES ACTIVÉE!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>DÉFENSE CONTRE LES RAIDS NOCTURNES DÉSACTIVÉE!</color>",
				["P_NO_ACTIVE"] = "LA DÉFENSE CONTRE LES RAIDS NOCTURNES EST DÉSORMAIS INACTIVE !",
				["P_YES_ACTIVE"] = "LA DÉFENSE CONTRE LES RAIDS NOCTURNES EST DÉSORMAIS ACTIVE!",
				["LEFT"] = "\n<size=10>RESTANTES: {0}</size>"
            }, this, "fr");
			
			Dictionary<string, string> PT_BR = new Dictionary<string, string>
			{
                ["UI_MESSAGE"] = "DEFESA DE ATAQUE NOCTURNO ACTIVA: {0}%. DAS {1} ÀS {2}!",
                ["CHAT_MESSAGE"] = "<size=12>DEFESA DE ATAQUE NOCTURNO ACTIVA: {0}%. DAS {1} ÀS {2}!</size>",
				["FULL_UI_MESSAGE"] = "PROTECÇÃO: {0}%. A INVASÃO É PERMITIDA DAS {1} ÀS {2}!",
                ["FULL_CHAT_MESSAGE"] = "<size=12>PROTECÇÃO: {0}%. A INVASÃO É PERMITIDA DAS {1} ÀS {2}!</size>",
				["WIPE_UI_MESSAGE"] = "PARA OS PRIMEIROS {0} DIAS DO VYP É A PROTECÇÃO! {1}%",
                ["WIPE_CHAT_MESSAGE"] = "<size=12>PARA OS PRIMEIROS {0} DIAS DO VYP É A PROTECÇÃO! {1}%</size>",
				["P_ACTIVE"] = "<color=#f74d4d90>DEFESA DE ATAQUE NOCTURNO ACTIVADA!</color>",
				["P_DEACTIVE"] = "<color=#4ad44890>DEFESA CONTRA ATAQUES NOCTURNOS DESACTIVADA!</color>",
				["P_NO_ACTIVE"] = "A DEFESA DO ATAQUE NOCTURNO ESTÁ AGORA INACTIVA!",
				["P_YES_ACTIVE"] = "A DEFESA DO ATAQUE NOCTURNO ESTÁ AGORA ACTIVA!",
				["LEFT"] = "\n<size=10>SEGUINTE: {0}</size>"
			};
			
			lang.RegisterMessages(PT_BR, this, "pt-PT");
			lang.RegisterMessages(PT_BR, this, "pt-BR");
        }

        #endregion
		
		#region IQChat API
		
		private void IQChatPuts(BasePlayer player, string Message) => IQChat?.Call("API_ALERT_PLAYER", player, Message);
		
		#endregion
	}
}

// --- End of file: XRaidProtection-1.2.1.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/LadderModes.cs ---
// --- Original Local Path: LadderModes.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Ladder Modes", "Lomarine", "2.0.0")]
    [Description("Плагин для управления лестницами, разработал - https://vk.com/lomarine")] 
    public class LadderModes : RustPlugin
    {
		[PluginReference] Plugin NoEscape;

	    #region Oxide Hooks

	    private void Init()
	    {			
		    if (!plugins.Exists("NoEscape")) PrintError("Отсутствует NoEscape!");
		    LoadDefaultMessages();
		    LoadDefaultConfig();
	    }
		
	    private void OnEntityBuilt(Planner planner, GameObject gameobject)
	    {
		    BaseEntity entity = gameobject.ToBaseEntity();
			
		    if(entity is BaseLadder == false) return;
			
		    BasePlayer player = planner.GetOwnerPlayer();

		    var block = NoEscape.Call<bool>("IsRaidBlocked", player);

		    if (block)
		    {
			    if (!raid)
			    {
				    entity.Kill();
				    player.inventory.GiveItem(ItemManager.CreateByItemID(108061910));
				    player.ChatMessage(lang.GetMessage("NORAID", this));  
				    return;
			    }

			    if (raidPriv && !player.CanBuild())
			    {
				    entity.Kill();
				    player.inventory.GiveItem(ItemManager.CreateByItemID(108061910));
				    player.ChatMessage(lang.GetMessage("PRIVELEGE", this));
			    }
		    }
		    else
		    {
			    if(!free)
			    {
				    entity.Kill();
				    player.inventory.GiveItem(ItemManager.CreateByItemID(108061910));
				    player.ChatMessage(lang.GetMessage("NOFREE", this));
				    return;
			    }

			    if (freePriv && !player.CanBuild())
			    {
				    entity.Kill();
				    player.inventory.GiveItem(ItemManager.CreateByItemID(108061910));
				    player.ChatMessage(lang.GetMessage("PRIVELEGE", this));
			    }
		    }
	    }

	    #endregion

		#region Language

		protected override void LoadDefaultMessages()
		{
		    lang.RegisterMessages(new Dictionary<string, string>
		    {
			    ["NORAID"] = "<color=#DC143C>[Ladder Master]</color> Штурмовые лестницы нельзя ставить вне рейда!",
			    ["NOFREE"] = "<color=#DC143C>[Ladder Master]</color> Штурмовые лестницы нельзя ставить во время рейда!",
				["PRIVELEGE"] = "<color=#DC143C>[Ladder Master]</color> Вам нужно право на постройку для установки штурмовой лестницы!",
		    }, this);
	    }

		#endregion

		#region Config

	    private bool raidPriv, freePriv, raid , free;

	    private const string 
		    config1 = "Можно ли стравить в рейдблоке", 
		    config2 = "Можно ли их ставить вне рейдблока", 
		    config3 = "Требование права на постройку в рейдблоке", 
		    config4 = "Требование права на постройку вне рейблока";

		protected override void LoadDefaultConfig()
        {
            Config[config1] = raid     = GetConfig(config1, true);
	        Config[config2] = free     = GetConfig(config2, true);
			Config[config3] = raidPriv = GetConfig(config3, false);
	        Config[config4] = freePriv = GetConfig(config4, false);
            SaveConfig();
        }

		T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));

		#endregion
	}
}

// --- End of file: LadderModes.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SortItems.cs ---
// --- Original Local Path: SortItems.cs ---

﻿using Oxide.Core;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
namespace Oxide.Plugins
{
    [Info("SortItems", "Own3r", "1.0.1")]
    class SortItems : RustPlugin
    {
        #region CONFIGURATION

        #endregion

        #region FIELDS

        const string permAccess = "sortitems.access";
        List<string> toggleCaptions = new List<string>() { "<-", "->" };
        List<ulong> putPlayers = new List<ulong>();
        #endregion


        #region COMMANDS

        [ConsoleCommand("sortitems.toggle")]
        void cmdToggle(ConsoleSystem.Arg arg)
        {

            if (arg.Connection == null) return;
            var player = arg.Player();
            if (InDuel(player))
            {
                DestroyUI(player);
                return;
            }
            var userId = player.userID;

            if (putPlayers.Contains(userId))
            {
                putPlayers.Remove(userId);
                DestroyUI(player);
                DrawUI(player);
            }
            else
            {
                putPlayers.Add(userId);
                DestroyUI(player);
                DrawUI(player);
            }
        }

        [ConsoleCommand("sortitems.sort")]
        void cmdSort(ConsoleSystem.Arg arg)
        {

            if (arg.Connection == null) return;
            var player = arg.Player();
            if (InDuel(player))
            {
                DestroyUI(player);
                return;
            }
            var category = arg.GetInt(0);

            var lootContainer = player.inventory.loot?.containers?.Count > 0 ? player.inventory.loot?.containers[0] : null;
            if (lootContainer == null) return;
            var playerContainer = player.inventory.containerMain;

            if (lootContainer == null || playerContainer == null)
            {
                DestroyUI(player);
                return;
            }

            var inputContainer = putPlayers.Contains(player.userID) ? playerContainer : lootContainer;
            var outputContainer = inputContainer == lootContainer ? playerContainer : lootContainer;

            GetItemsByCategory(inputContainer, category).ForEach(item => item.MoveToContainer(outputContainer));
        }

        #endregion

        #region OXIDE HOOKS
        [PluginReference]
        Plugin Duel;

        bool InDuel(BasePlayer player) => Duel?.Call<bool>("IsPlayerOnActiveDuel", player) ?? false;

        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                DestroyUI(player);
            }
        }
        void OnPlayerSleepEnded(PlayerLoot inventory, BasePlayer player)
        {
            if (InDuel(player))
            {
                player.EndLooting();
                DestroyUI(player);
                return;
            }
           
           
            var invectory = inventory.GetComponent<BasePlayer>();
            if (invectory == null)
            {
                DestroyUI(invectory);
            }
        }


        void OnPlayerInit(BasePlayer player)
        {
            DestroyUI(player);
        }

        void OnServerInitialized()
        {
            LoadDefaultConfig();
            permission.RegisterPermission(permAccess, this);
        }


        void OnLootEntity(BasePlayer player, BaseEntity entry)
        {
            if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, permAccess))
            {
                if (entry is StorageContainer)
                {
                    StorageContainer box = entry as StorageContainer;
                    if (!(box.panelName == "largewoodbox" || box.panelName == "smallwoodbox"
                          || box.panelName == "fuelstorage" || box.panelName == "smallstash"
                          || box.name.Contains("hopperoutput")
                          || box.prefabID == 349880778))
                        return;
                }
                DrawUI(player);
            }
        }


        void OnPlayerLootEnd(PlayerLoot inventory)
        {
            var player = inventory.GetComponent<BasePlayer>();
            if (player != null)
            {
                Puts("1");
                DestroyUI(player);
                return;
            }
            if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, permAccess))
                DestroyUI(player);
        }

        #endregion

        #region CORE

        List<Item> GetItemsByCategory(ItemContainer container, int category)
        {
            List<ItemCategory> categories = new List<ItemCategory>();
            switch (category)
            {
                case 0:
                    categories.Add(ItemCategory.Resources);
                    break;
                case 1:
                    categories.Add(ItemCategory.Weapon);
                    break;
                case 2:
                    categories.Add(ItemCategory.Ammunition);
                    break;
                case 3:
                    categories.Add(ItemCategory.Medical);
                    break;
                case 4:
                    categories.Add(ItemCategory.Attire);
                    break;
                case 5:
                    categories.Add(ItemCategory.Component);
                    break;
                case 6:
                    categories.Add(ItemCategory.Tool);
                    break;
                case 7:
                    categories.Add(ItemCategory.Construction);
                    categories.Add(ItemCategory.Items);
                    categories.Add(ItemCategory.Traps);
                    categories.Add(ItemCategory.Misc);
                    categories.Add(ItemCategory.Common);
                    categories.Add(ItemCategory.Search);
                    break;
                case 8:
                    for (int i = 0; i < 15; i++)
                        categories.Add((ItemCategory)i);
                    break;
            }
            return container.itemList.Where(item => item != null && categories.Contains(item.info.category)).ToList();
        }

        bool HasAccess(BasePlayer player) => player.IsAdmin;

        #endregion

        #region UI
        string HandleArgs(string json, params object[] args)
        {
            var reply = 431;
            for (int i = 0; i < args.Length; i++)
                json = json.Replace("{" + i + "}", args[i].ToString());
            return json;
        }

        string GUI = "[{\"name\":\"sortitems_panel\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.655 0.6308895 0.6308895 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.6505206 0.02222223\",\"anchormax\":\"0.8294269 0.1361113\"}]},{\"name\":\"sortitems_direction\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.toggle\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"0.1850519 0.9674798\"}]},{\"parent\":\"sortitems_direction\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{0}\",\"fontSize\":35,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_res\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 0\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.195051 0\",\"anchormax\":\"0.4570595 0.3333329\"}]},{\"parent\":\"sortitems_res\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Ресурсы\",\"fontSize\":13,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_weapons\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 1\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1950507 0.3658533\",\"anchormax\":\"0.4556037 0.6207555\"}]},{\"parent\":\"sortitems_weapons\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Оружие\",\"fontSize\":11,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_ammo\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 2\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7161568 0\",\"anchormax\":\"0.9981656 0.3333328\"}]},{\"parent\":\"sortitems_ammo\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Боеприпасы\",\"fontSize\":11,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_medical\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 3\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4669705 0.6422769\",\"anchormax\":\"0.7063342 0.9674798\"}]},{\"parent\":\"sortitems_medical\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Медицина\",\"fontSize\":11,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_tool\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 6\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7161568 0.6422771\",\"anchormax\":\"0.9981656 0.9674798\"}]},{\"parent\":\"sortitems_tool\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Инструменты\",\"fontSize\":10,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_other\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 7\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7161568 0.3658533\",\"anchormax\":\"0.9981656 0.6207555\"}]},{\"parent\":\"sortitems_other\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Остальное\",\"fontSize\":11,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_components\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 5\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4669705 0\",\"anchormax\":\"0.7063342 0.3333328\"}]},{\"parent\":\"sortitems_components\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Компоненты\",\"fontSize\":10,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_all\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 8\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1950509 0.6422771\",\"anchormax\":\"0.4556037 0.9674798\"}]},{\"parent\":\"sortitems_all\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Всё\",\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]},{\"name\":\"sortitems_altire\",\"parent\":\"sortitems_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"sortitems.sort 4\",\"color\":\"0.45 0.52 0.26 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4669705 0.3659533\",\"anchormax\":\"0.7063342 0.6207555\"}]},{\"parent\":\"sortitems_altire\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Одежда\",\"fontSize\":11,\"align\":\"MiddleCenter\",\"color\":\"0.67 0.76 0.50 1.00\"},{\"type\":\"RectTransform\"}]}]";

        void DrawUI(BasePlayer player)
        {

            CuiHelper.AddUi(player, HandleArgs(GUI, toggleCaptions[putPlayers.Contains(player.userID) ? 1 : 0]));
        }

        void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "sortitems_panel");
        }

        #endregion
    }
}

// --- End of file: SortItems.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/UniqueCupboard.cs ---
// --- Original Local Path: UniqueCupboard.cs ---

﻿using Oxide.Core;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using UnityEngine;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("UniqueCupboard", "https://topplugin.ru/", "2.1.0")]
    class UniqueCupboard : RustPlugin
    {
		#region Config
		
		private class Configuration
		{
			[JsonProperty("Время которое требуется отыграть на сервере, для получения уникального шкафа в минутах", Order = 0)]
			public int PlayedTime = 1;			
			[JsonProperty("Название уникального шкафа", Order = 1)]
			public string CupboardName = "Магический шкаф";
			[JsonProperty("Настройки команд", Order = 2)]
			public CommandSettings Command = new CommandSettings();	
			[JsonProperty("Приз", Order = 3)]
			public PrizeSettings Prize = new PrizeSettings();	
			[JsonProperty("Настройки очков", Order = 4)]
			public PointSettings Points = new PointSettings();	
			
			
			public class PointSettings{
				[JsonProperty("Сколько очков отнимать в случае потери своего шкафа", Order = 0)]
				public int takePoint = 50;
				
			}
			public class PrizeSettings{
				[JsonProperty("Исполняемая команда, для участника занявшего 1-ое место", Order = 0)]
				public string prize1 = "giveto {0} sulfur 10000";
				[JsonProperty("Исполняемая команда, для участника занявшего 2-ое место", Order = 0)]
				public string prize2 = "giveto {0} sulfur 5000";
				[JsonProperty("Исполняемая команда, для участника занявшего 3-ое место", Order = 0)]
				public string prize3 = "giveto {0} sulfur 2000";
			}
			
			public class CommandSettings{
				[JsonProperty("Команда доступа к статистике участников ивента", Order = 0)]
				public string topCommand = "toptc";
				[JsonProperty("Команда для участия в ивенте", Order = 1)]
				public string yesCommand = "yes";
				[JsonProperty("Команда для проверки наличия уникального шкафа", Order = 2)]
				public string whoCommand = "who";
			}		
			
			public static Configuration GetNewConfiguration(){
				Configuration newConfig = new Configuration();
				newConfig.PlayedTime=60;
				newConfig.CupboardName="Магический шкаф";
				newConfig.Command = new CommandSettings(){
					topCommand = "toptc",
					yesCommand = "yes",
					whoCommand = "who"
				};
				newConfig.Prize = new PrizeSettings()
				{
					prize1 = "giveto {0} sulfur 10000",
					prize2 = "giveto {0} sulfur 5000",
					prize3 = "giveto {0} sulfur 2000"
				};	
				newConfig.Points= new PointSettings(){
					takePoint = 50
				};
				return newConfig;		
			}
		}
		private Configuration config;
		
		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				config = Config.ReadObject<Configuration>();
				if (config?.Prize == null) LoadDefaultConfig();
			}
			catch
			{
				LoadDefaultConfig();
			}
			NextTick(SaveConfig);
		}
		protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
		protected override void SaveConfig() => Config.WriteObject(config);
		#endregion

        #region Variables

        public DataManager playerData { get; set; } = new DataManager();
        public Dictionary<ulong, CupboardData> cupboardsData { get; set; } = new Dictionary<ulong, CupboardData>();
        public Dictionary<uint, CupboardData> cupboardsDataOfUint { get; set; } = new Dictionary<uint, CupboardData>();
        public Dictionary<ulong, int> ActivePage { get; set; } = new Dictionary<ulong, int>();

        #endregion

        #region Classes

        public class CupboardData
        {
            public int PointsCount { get; set; } = 0;
            public uint NetId { get; set; } = 0;
            public DateTime PlacedTime { get; set; } = DateTime.Now;
            public string ownerName { get; set; }

            public void SetPoints(int points)
            {
                PointsCount += points;
            }

            public CupboardData(uint NetId, string displayName)
            {
                this.NetId = NetId;
                ownerName = displayName;
            }
        }

        public class DataManager
        {
            public DateTime WipeTime { get; set; } = DateTime.Now;
            public Dictionary<ulong, int> TimePlayed { get; set; } = new Dictionary<ulong, int>();
            public List<ulong> CupboardCreate { get; set; } = new List<ulong>();
			
			public void PrepareData(ulong userID){
				if (!this.TimePlayed.ContainsKey(userID)){
					this.TimePlayed.Add(userID,0);
				}
				return;
			}
        }

        #endregion

        #region Hooks

        private void OnServerInitialized()
        {
            LoadData();
			cmd.AddChatCommand(config.Command.whoCommand, this, cupboardWho);
			cmd.AddChatCommand(config.Command.yesCommand, this, cupboardYes);
			cmd.AddChatCommand(config.Command.topCommand, this, CMDtopTC);
            FillNetDataOfCupboards();
            TimeUpdate();
            
            foreach (var check in BasePlayer.activePlayerList)
                OnPlayerConnected(check);
        }

        void OnNewSave(string filename)
        {
            PrintWarning("Обнаружен вайп, происходит выдача призов за победу в ивенте -Уникальный Шкаф- и очистка даты!");

            var playersTop = GetListTopOfPage(1);
            Server.Command(config.Prize.prize1, playersTop[0]);
            Server.Command(config.Prize.prize2, playersTop[1]);
            Server.Command(config.Prize.prize3, playersTop[2]);

            playerData = new DataManager();
            cupboardsData = new Dictionary<ulong, CupboardData>();
            SaveData();
        }

		//При сохранении данных	
		void OnServerSave()=>SaveData();
        private void Unload()=>SaveData();		

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (!(entity is BuildingPrivlidge) || !cupboardsDataOfUint.ContainsKey(entity.net.ID)) return;

            cupboardsDataOfUint[entity.net.ID].PointsCount -= config.Points.takePoint;
            if (info.InitiatorPlayer == null || IsYourCupboard(info.InitiatorPlayer.userID, entity.net.ID)) return;
            var pointResult = CalculatePoints(entity as BuildingPrivlidge);
            if (BasePlayer.FindByID(entity.OwnerID) == null) pointResult /= 2;
            if (!cupboardsData.ContainsKey(info.InitiatorPlayer.userID)) return;
            cupboardsData[info.InitiatorPlayer.userID].SetPoints(pointResult);
			info.InitiatorPlayer.ChatMessage($"Вы получили {pointResult} поинтов.\nПросмотреть рейтинг топа можно через команду /{config.Command.topCommand}");
        }

        object CanBuild(Planner planner, Construction prefab, Construction.Target target)
        {
            if (planner.GetItem().info.itemid != -97956382 || planner.GetItem().skin != 1 || planner.GetItem()?.name != config.CupboardName) return null;

            if (!playerData.CupboardCreate.Contains(planner.GetOwnerPlayer().userID) || !HasPriviligesToUseCupboard(planner.GetOwnerPlayer()))
            {
               return false;
            }

            return null;
        }

        private void OnEntityBuilt(Planner plan, GameObject go)
        {
            BaseEntity baseEntity = go.ToBaseEntity();

            if (!(baseEntity is BuildingPrivlidge)) return;
            if (baseEntity.skinID == 0) return;

            if (!playerData.CupboardCreate.Contains(plan.GetOwnerPlayer().userID) || !HasPriviligesToUseCupboard(plan.GetOwnerPlayer()))
            {
                return;
            }

            cupboardsData.Add(plan.GetOwnerPlayer().userID, new CupboardData(go.ToBaseEntity().net.ID, plan.GetOwnerPlayer().displayName));
            cupboardsDataOfUint.Add(go.ToBaseEntity().net.ID, cupboardsData[plan.GetOwnerPlayer().userID]);
        }

        #endregion

        #region Data

        private void LoadData()
        {
            playerData = Interface.Oxide.DataFileSystem.ReadObject<DataManager>("UniqueCupboardData/PlayersData");
            cupboardsData = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, CupboardData>>("UniqueCupboardData/CupboardsData");

            if (playerData == null) playerData = new DataManager();
            if (cupboardsData == null) cupboardsData = new Dictionary<ulong, CupboardData>();
        }

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject("UniqueCupboardData/PlayersData", playerData);
            Interface.Oxide.DataFileSystem.WriteObject("UniqueCupboardData/CupboardsData", cupboardsData);
        }

        #endregion

        #region Commands

        [ConsoleCommand("CUPBOARD_CLOSE")]
        private void CloseCupboard(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            CuiHelper.DestroyUi(arg.Player(), "Oснова");
        }

        [ConsoleCommand("CUPBOARD_NEXTPAGE")]
        private void CupboardNextPage(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            if (cupboardsData.Count <= 6) return;

            int pages = (int)Math.Ceiling((double)cupboardsData.Count / 6);

            if (ActivePage.ContainsKey(arg.Player().userID))
            {
                if(ActivePage[arg.Player().userID] + 1 <= pages)
                GUIShowTCTOP(arg.Player(), ActivePage[arg.Player().userID] + 1);
            }
            else GUIShowTCTOP(arg.Player(), 1);
        }

        [ConsoleCommand("CUPBOARD_BackPage")]
        private void CupboardBackPage(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            if (ActivePage.ContainsKey(arg.Player().userID))
                GUIShowTCTOP(arg.Player(), ActivePage[arg.Player().userID] - 1);
            else GUIShowTCTOP(arg.Player(), 1);
        }

        private void CMDtopTC(BasePlayer player, string command, string[] args)
        {
            GUIShowTCTOP(player, 1);
        }

        private void cupboardWho(BasePlayer player, string command, string[] args)
        {
            if (!player.IsBuildingAuthed() && !player.IsBuildingBlocked()) {
                player.ChatMessage("<color=#DB7093>Уникальный шкаф не обнаружен!</color>");
                return; 
            }

            if (cupboardsDataOfUint.ContainsKey(player.GetBuildingPrivilege().net.ID))
            {
                int Points = CalculatePoints(player.GetBuildingPrivilege());
                player.ChatMessage($"Обнаружен уникальный шкаф. За него вы получите: {Points} поинт(ов)");
            }
        }

        private void cupboardYes(BasePlayer player, string command, string[] args)
        {
            if (playerData.CupboardCreate.Contains(player.userID))
            {
                player.ChatMessage($"<color=#DB7093>Вы уже получали уникальный шкаф!</color><size=7529></size>");
                return;
            }
			playerData.PrepareData(player.userID);			
			if (!HasPriviligesToUseCupboard(player)) 
			{
				string difTime = FormatShortTime(config.PlayedTime-playerData.TimePlayed[player.userID]);
				player.ChatMessage($"Для доступа к соревнованиям вам осталось сыграть на сервере {difTime}"); 
				return; 
			} 
            playerData.CupboardCreate.Add(player.userID);
			player.ChatMessage($"Вы получили <color=#DB7093>{config.CupboardName}</color>.\nРазместите его в укрекпленном здании и не дайте другим игрока до него добраться!\nРейтинг участников ивента вы можете посмотреть через команду <color=#DB7093>/{config.Command.topCommand}</color>");
            player.GiveItem(GetCupboardItem());
        }

        #endregion

        private bool IsNPC(BasePlayer player)
        {
            if (player == null) return false;
            if (player is NPCPlayer)
                return true;
            if (!(player.userID >= 76560000000000000L || player.userID <= 0L))
                return true;
            return false;
        }

        void OnPlayerConnected(BasePlayer player)
        {            
            if (player==null) return;
			if (IsNPC(player)) return;
			SendReply(player, $"Вы можете принять участие в соревнованиях <color=#DB7093>Уникальный шкаф</color>\nДля участия вам необходимо получить Уникальный шкаф.\nПодробнее вы можете узнать через команду <color=#DB7093>/toptc</color>.\nДля получения шкафа выполните команду <color=#DB7093>/yes</color>");  
        }
        #region Functions

        private void GUIShowTCTOP(BasePlayer player, int page)
        {
            CuiHelper.DestroyUi(player, "Oснова");
            string GUITop = "[{\"name\":\"Oснова\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.282353 0.2705882 0.2431373 0.6194041\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1541667 0.137037\",\"anchormax\":\"0.8520834 0.8583333\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Уникальный шкаф\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.5215687 0.5137255 0.509804 0.6227752\"},{\"type\":\"RectTransform\",\"anchormin\":\"-1.305016E-07 0.89729\",\"anchormax\":\"0.9999999 1.000141\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"надпись\",\"parent\":\"Уникальный шкаф\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"УНИКАЛЬНЫЙ ШКАФ\",\"fontSize\":15,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4119403 0.08785719\",\"anchormax\":\"0.5873134 0.890101\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Aктивных\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.3411765 0.3176471 0.2666667 0.6227756\"},{\"type\":\"RectTransform\",\"anchormin\":\"4.202593E-08 2.30968E-07\",\"anchormax\":\"0.9999993 0.1051915\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"надпись\",\"parent\":\"Aктивных\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.4039216 0.3803922 0.3411765 0.6227756\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4000001 0.08590239\",\"anchormax\":\"0.5992543 0.927461\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"AKТ1BHЫХ\",\"parent\":\"надпись\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"АКТИВНЫХ:\",\"fontSize\":13,\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2589047 0.08757434\",\"anchormax\":\"0.7415726 0.8694906\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"COUNT\",\"parent\":\"надпись\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%COUNT%\",\"fontSize\":13,\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7003741 0.1600794\",\"anchormax\":\"0.8913847 0.7836232\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"▶\",\"parent\":\"Aктивных\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"▶\",\"fontSize\":36,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.951483 0.08590239\",\"anchormax\":\"0.9962591 0.927461\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"BUTTON\",\"parent\":\"▶\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"CUPBOARD_NEXTPAGE\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"2.980232E-08 0.0005682539\",\"anchormax\":\"1 1.000568\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"3aпись\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"• Уничтожьте как можно больше уникальных шкафов чтобы попасть в топ.\n• Чтобы узнать сколько очков Вы получите за уничтожение уникального шкафа, подойдите к дому на расстояние не менее 15м, наведите на него\nприцел и введите команду /"+config.Command.whoCommand+". Если ваш шкаф уничтожат, вы потеряете очки.\n• Количество получаемых очков зависит от прошедших дней после вайпа.\n• Время с момента вайпа и количество получаемых очков:\n• 1 день - 0 очков, 2 день - 2 очка, 3 день - 6 очков, 4 день - 10 очков, 5 день - 14 очков, 6 день - 18 очков, 7 день - 22 очков.\n• Игрок выбывает из ивента при получении бана или уничтожении шкафа друга или абуза очков путем продажи/отдачи шкафа для намеренного\nполучения очков.\",\"fontSize\":13},{\"type\":\"RectTransform\",\"anchormin\":\"0.01343272 0.5752797\",\"anchormax\":\"0.9895521 0.886486\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"1\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227751\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104644 0.5040274\",\"anchormax\":\"0.9908953 0.568698\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"1\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"1\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674828\",\"anchormax\":\"0.03177237 0.9202884\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"1\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK1%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025348\",\"anchormax\":\"0.278048 0.9163762\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"1\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки:\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754731 0.1025348\",\"anchormax\":\"0.8514811 0.9163762\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE1\",\"parent\":\"1\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE1%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.8355241 0.08268505\",\"anchormax\":\"0.8802736 0.936226\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"2\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227756\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104642 0.4273805\",\"anchormax\":\"0.9908953 0.4920527\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"2\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"2\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674666\",\"anchormax\":\"0.03177238 0.9202661\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"2\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK2%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025322\",\"anchormax\":\"0.278048 0.916353\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"2\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754731 0.1025322\",\"anchormax\":\"0.8514811 0.916353\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE2\",\"parent\":\"2\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE2%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.8355241 0.08268295\",\"anchormax\":\"0.8802736 0.9362024\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"3\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227756\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104642 0.350734\",\"anchormax\":\"0.9908953 0.4154047\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"3\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674819\",\"anchormax\":\"0.03177238 0.9202872\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK3%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025346\",\"anchormax\":\"0.278048 0.9163745\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки:\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754731 0.1025346\",\"anchormax\":\"0.8514811 0.9163745\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE3\",\"parent\":\"3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE3%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.8355241 0.08268486\",\"anchormax\":\"0.8802736 0.9362239\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"4\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227752\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104642 0.2740873\",\"anchormax\":\"0.9908953 0.338758\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"4\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"4\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674819\",\"anchormax\":\"0.03177238 0.9202872\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"4\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK4%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025346\",\"anchormax\":\"0.278048 0.9163746\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"4\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки:\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754731 0.1025346\",\"anchormax\":\"0.8514811 0.9163746\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE4\",\"parent\":\"4\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE4%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.8355241 0.08268489\",\"anchormax\":\"0.8802736 0.9362243\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"5\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227751\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104642 0.1974406\",\"anchormax\":\"0.9908953 0.2621113\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"5\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"5\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674821\",\"anchormax\":\"0.03177238 0.9202872\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"5\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK5%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025346\",\"anchormax\":\"0.278048 0.916374\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"5\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки:\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754731 0.1025346\",\"anchormax\":\"0.8514811 0.9163743\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE5\",\"parent\":\"5\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE5%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.8355241 0.08268486\",\"anchormax\":\"0.8802736 0.9362239\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"6\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.2784314 0.2666667 0.227451 0.6227756\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.009104642 0.1195963\",\"anchormax\":\"0.9908953 0.1842669\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Цифра\",\"parent\":\"6\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"6\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.002888201 0.06674831\",\"anchormax\":\"0.03177238 0.9202887\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"ник\",\"parent\":\"6\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%NICK6%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.05792049 0.1025348\",\"anchormax\":\"0.2780479 0.9163759\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"Очки\",\"parent\":\"6\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Очки:\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.7754735 0.1025348\",\"anchormax\":\"0.8514814 0.916376\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"SCORE6\",\"parent\":\"6\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"%SCORE6%\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.835524 0.08268501\",\"anchormax\":\"0.8802735 0.9362256\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"1\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"CUPBOARD_CLOSE\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"-0.2208956 -0.1899871\",\"anchormax\":\"-0.001492575 1.195122\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"2\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"CUPBOARD_CLOSE\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"-0.2208955 1\",\"anchormax\":\"1.211194 1.195122\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"3\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"CUPBOARD_CLOSE\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"1.001492 -0.1899871\",\"anchormax\":\"1.210448 1.007702\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"4\",\"parent\":\"Oснова\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"CUPBOARD_CLOSE\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"-0.1231344 -0.1899871\",\"anchormax\":\"1.211194 -0.001283646\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"CuiElement\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"RectTransform\",\"anchormin\":\"0.05208334 0.09259259\",\"anchormax\":\"0.1041667 0.1851852\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]}]";

            int playerPosition = 1;
            foreach (var cupboard in GetListTopOfPage(page))
            {
                string nameofPlayer = "";
                int scoreOfPlayer = 0;

                if (cupboard != 0)
                {
                    nameofPlayer = cupboardsData[cupboard].ownerName;
                    scoreOfPlayer = cupboardsData[cupboard].PointsCount;
                }

                GUITop = GUITop.Replace($"%NICK{playerPosition}%", nameofPlayer)
                    .Replace($"%SCORE{playerPosition}%", scoreOfPlayer.ToString());

                playerPosition++;
            }

            GUITop = GUITop.Replace("%COUNT%", cupboardsData.Count.ToString());
            if (ActivePage.ContainsKey(player.userID)) ActivePage[player.userID] = page;
            else ActivePage.Add(player.userID, page);

            CuiHelper.AddUi(player, GUITop);
        }

        private List<ulong> GetListTopOfPage(int Page)
        {
            int maxCount = Page * 6;
            int startCount = maxCount - 6;

            var sortUnqieuCupboards = from cupboard in cupboardsData orderby cupboard.Value.PointsCount descending select cupboard;

            List<ulong> playersTop = new List<ulong>();

            for (int i = startCount; i < maxCount; i++)
            {
                if (sortUnqieuCupboards.Count() - 1 < i) playersTop.Add(0);
                else
                {
                    playersTop.Add(sortUnqieuCupboards.ElementAt(i).Key);
                }
            }

            return playersTop;
        }

        private void TimeUpdate()
        {
            timer.Repeat(1 * 60f, 0, () => {
               var playerList = BasePlayer.activePlayerList.Where(x => (playerData.TimePlayed.ContainsKey(x.userID) && playerData.TimePlayed[x.userID] < config.PlayedTime) || !playerData.TimePlayed.ContainsKey(x.userID)).ToList();
                foreach(var player in playerList)
                {
                    if (!playerData.TimePlayed.ContainsKey(player.userID))
                        playerData.TimePlayed.Add(player.userID, 1);
                    else
                    {
                        playerData.TimePlayed[player.userID] += 1;
                    }
                }
            });
        }

        private int CalculatePointsOfWipe(DateTime cupboardTime)
        {
            int daysWipe = (int)DateTime.Now.Subtract(cupboardTime).TotalDays;
			PrintWarning("CalculatePointsOfWipe");
			Puts($"daysWipe {daysWipe}");
            if (daysWipe == 0) return 0;

            int totalPoints = 0;
            for(int i = 2; i < daysWipe; i++)
            {
				Puts($"i {i}");
                if (i == 2)
                {
                    totalPoints = 2;
                    continue;
                }

                if (i == 3) {
                    totalPoints = 3;
                    continue;
                }

                totalPoints *= 2;

            }
			Puts($"totalPoints {totalPoints}");
            return totalPoints;
        }

        private int CalculateOldPoints(BuildingPrivlidge cupboard)
        {
			Puts($"cupboard.CalculateBuildingTaxRate() = {cupboard.CalculateBuildingTaxRate()}");
            int addPrice = (int)(cupboard.CalculateBuildingTaxRate() * 10);
			Puts($"cupboardsDataOfUint = {cupboardsDataOfUint[cupboard.net.ID].PlacedTime}");
			Puts($"CalculatePointsOfWipe = {CalculatePointsOfWipe(cupboardsDataOfUint[cupboard.net.ID].PlacedTime)}");
            addPrice += CalculatePointsOfWipe(cupboardsDataOfUint[cupboard.net.ID].PlacedTime);
			Puts($"addPrice = {addPrice}");
            return addPrice;
        }

        private int CalculatePoints(BuildingPrivlidge cupboard)
        {
            int addPrice=0;
			Puts($"placed {cupboardsDataOfUint[cupboard.net.ID].PlacedTime}");
			int daysWipe = (int)DateTime.Now.Subtract(playerData.WipeTime).TotalDays;
			Puts($"day {daysWipe}");
			if (daysWipe==0) return 0;
            //addPrice = (int)Math.Pow((daysWipe-1),2);
			addPrice = ((daysWipe-1)+(daysWipe))*2;
			Puts($"daysWipe = {addPrice}");
            return addPrice;
        }
		
        private bool IsYourCupboard(ulong initiatorId, uint netid) => cupboardsData.ContainsKey(initiatorId) && cupboardsData[initiatorId].NetId == netid;

        private void FillNetDataOfCupboards()
        {
            foreach (var CupboardData in cupboardsData)
                cupboardsDataOfUint.Add(CupboardData.Value.NetId, CupboardData.Value);
        }

		public static string FormatShortTime(int min) 
		{
			TimeSpan time = TimeSpan.FromSeconds(min*60);
			string result = string.Empty;
			if (time.Hours>0) result += $"{time.Hours} ч. ";
			if (time.Minutes>0) result += $"{time.Minutes} мин. ";
			if (string.IsNullOrEmpty(result)) result ="0";
			return result;
		}	
        private bool HasPriviligesToUseCupboard(BasePlayer player)
        {
            if (playerData.TimePlayed.ContainsKey(player.userID))
				if (playerData.TimePlayed[player.userID] >= config.PlayedTime)
					return true;
            return false;            
        }

        private Item GetCupboardItem()
        {
            var item =  ItemManager.CreateByItemID(-97956382, 1, 1);
            item.name = config.CupboardName;
            return item;
        }

        #endregion

    }
}


// --- End of file: UniqueCupboard.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CleanUp.cs ---
// --- Original Local Path: CleanUp.cs ---

using System.Collections.Generic;
using System.Reflection;
using UnityEngine;
using Oxide.Core;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("CleanUp", "Reneb & SPooCK", "2.0.2")]
    public class CleanUp : RustPlugin
    {
        private int constructionColl;

        void Loaded()
        {
            if (!permission.PermissionExists("canclean")) permission.RegisterPermission("canclean", this);
            constructionColl = LayerMask.GetMask(new string[] { "Construction" });
        }
        void OnServerInitialized()
        {
            InitializeTable();
        }

        Dictionary<string, string> displaynameToShortname = new Dictionary<string, string>();

        private void InitializeTable()
        {
            displaynameToShortname.Clear();
            List<ItemDefinition> ItemsDefinition = ItemManager.GetItemDefinitions() as List<ItemDefinition>;
            foreach (ItemDefinition itemdef in ItemsDefinition)
            {
                 if(itemdef.GetComponent< ItemModDeployable>() != null)
                      displaynameToShortname.Add(itemdef.displayName.english.ToString().ToLower(), itemdef.shortname.ToString());
            }
        }
        bool shouldRemove(Deployable deployable, bool forceRemove, float eraseRadius = 0.5f )
        {
            if (forceRemove) return true;
            foreach( Collider collider in UnityEngine.Physics.OverlapSphere(deployable.transform.position, eraseRadius, constructionColl) )
            {
                return false;
            }
            return true;
        }

        bool hasAccess(BasePlayer player)
        {
            if (player == null) return false;
            if (player.net.connection.authLevel > 0) return true;
            return permission.UserHasPermission(player.userID.ToString(), "canclean");
        }
		
		[ConsoleCommand("cc.clean")]
        void cmdConsoleClean(ConsoleSystem.Arg arg)
        {
            if (arg.Player() && !arg.Player().IsAdmin()) { SendReply(arg, "You need to be admin to use that command"); return; }
			if (arg.Args == null || arg.Args.Length < 2) { SendReply(arg, "cc.clean \"Deployable Item Name\" all => all the deployable items"); SendReply(arg, "cc.clean \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            if (arg.Args[1] != "world" && arg.Args[1] != "all") { SendReply(arg, "cc.clean \"Deployable Item Name\" all => all the deployable items"); SendReply(arg, "cc.clean \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            switch (arg.Args[0].ToLower())
            {
                default:
                    string shortname = arg.Args[0].ToLower();
                    if (displaynameToShortname.ContainsKey(shortname))
                        shortname = displaynameToShortname[shortname];
                    else if (!displaynameToShortname.ContainsValue(shortname))
                    {
                        SendReply(arg, string.Format("{0} is not a valid item name", arg.Args[0]));
                        return;
                    }
                    Item newItem = ItemManager.CreateByName(shortname, 1);
                    if (newItem == null)
                    {
                        SendReply(arg, "Couldn't find this item, this shouldnt show ever ...");
                        return;
                    }
                    if (newItem.info.GetComponent<ItemModDeployable>() == null)
                    {
                        SendReply(arg, "This is not a item mod deployable item, this shouldnt show ever ...");
                        return;
                    }
                    Deployable deployable = newItem.info.GetComponent<ItemModDeployable>().entityPrefab.Get().GetComponent<Deployable>();
                    if (deployable == null)
                    {
                        SendReply(arg, "This is not a deployable item, this shouldnt show ever ...");
                        return;
                    }
                    string deployablename = deployable.gameObject.name + ".prefab";
                    bool shouldForce = (arg.Args[1] == "all") ? true : false;
                    float eraseRadius = 0.5f;
                    if (arg.Args.Length > 2) float.TryParse(arg.Args[2], out eraseRadius);
                    int cleared = 0;
                    int total = 0;
                    foreach (Deployable deployed in UnityEngine.Resources.FindObjectsOfTypeAll<Deployable>())
                    {
                        var realEntity = deployed.GetComponent<BaseNetworkable>().net;
                        if (realEntity == null) continue;
                        if(deployed.gameObject.name.EndsWith(deployablename))
                        {
                            total++;
                            if (shouldRemove(deployed, shouldForce, eraseRadius))
                            {
                                deployed.GetComponent<BaseEntity>().KillMessage();
                                cleared++;
                            }
                        }
                    }
                    SendReply(arg, string.Format("Cleared {0} entities out of {1} found", cleared.ToString(), total.ToString()));
                    break;
            }			
		}
		[ConsoleCommand("cc.count")]
        void cmdConsoleCount(ConsoleSystem.Arg arg)
        {
            if (arg.Player() && !arg.Player().IsAdmin()) { SendReply(arg, "You need to be admin to use that command"); return; }
			if (arg.Args == null || arg.Args.Length < 2) { SendReply(arg, "cc.count \"Deployable Item Name\" all => all the deployable items"); SendReply(arg, "cc.count \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            if (arg.Args[1] != "world" && arg.Args[1] != "all") { SendReply(arg, "cc.count \"Deployable Item Name\" all => all the deployable items"); SendReply(arg, "cc.count \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            switch (arg.Args[0].ToLower())
            {
                default:
                    string shortname = arg.Args[0].ToLower();
                    if (displaynameToShortname.ContainsKey(shortname))
                        shortname = displaynameToShortname[shortname];
                    else if (!displaynameToShortname.ContainsValue(shortname))
                    {
                        SendReply(arg, string.Format("{0} is not a valid item name", arg.Args[0]));
                        return;
                    }
                    Item newItem = ItemManager.CreateByName(shortname, 1);
                    if (newItem == null)
                    {
                        SendReply(arg, "Couldn't find this item, this shouldnt show ever ...");
                        return;
                    }
                    if (newItem.info.GetComponent<ItemModDeployable>() == null)
                    {
                        SendReply(arg, "This is not a item mod deployable item, this shouldnt show ever ...");
                        return;
                    }
                    Deployable deployable = newItem.info.GetComponent<ItemModDeployable>().entityPrefab.Get().GetComponent<Deployable>();
                    if (deployable == null)
                    {
                        SendReply(arg, "This is not a deployable item, this shouldnt show ever ...");
                        return;
                    }
                    string deployablename = deployable.gameObject.name + ".prefab";
                    bool shouldForce = (arg.Args[1] == "all") ? true : false;
                    float eraseRadius = 0.5f;
                    if (arg.Args.Length > 2) float.TryParse(arg.Args[2], out eraseRadius);
                    int cleared = 0;
                    foreach (Deployable deployed in UnityEngine.Resources.FindObjectsOfTypeAll<Deployable>())
                    {
                        var realEntity = deployed.GetComponent<BaseNetworkable>().net;
                        if (realEntity == null) continue;
                        if (deployed.gameObject.name.EndsWith(deployablename))
                        {
                            if (shouldRemove(deployed, shouldForce, eraseRadius))
                            {
                                cleared++;
                            }
                        }
                    }
                    SendReply(arg, string.Format("{1}: Found {0} entities that matchs your search", cleared.ToString(), shortname));
                    break;
            }
		}
        [ChatCommand("clean")]
        void cmdChatClean(BasePlayer player, string command, string[] args)
        {
            if (!hasAccess(player)) { SendReply(player, "You dont have access to this command"); return; }
            if (args.Length < 2) { SendReply(player, "/clean \"Deployable Item Name\" all => all the deployable items"); SendReply(player, "/clean \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            if (args[1] != "world" && args[1] != "all") { SendReply(player, "/clean \"Deployable Item Name\" all => all the deployable items"); SendReply(player, "/clean \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            switch (args[0].ToLower())
            {
                default:
                    string shortname = args[0].ToLower();
                    if (displaynameToShortname.ContainsKey(shortname))
                        shortname = displaynameToShortname[shortname];
                    else if (!displaynameToShortname.ContainsValue(shortname))
                    {
                        SendReply(player, string.Format("{0} is not a valid item name", args[0]));
                        return;
                    }
                    Item newItem = ItemManager.CreateByName(shortname, 1);
                    if (newItem == null)
                    {
                        SendReply(player, "Couldn't find this item, this shouldnt show ever ...");
                        return;
                    }
                    if (newItem.info.GetComponent<ItemModDeployable>() == null)
                    {
                        SendReply(player, "This is not a item mod deployable item, this shouldnt show ever ...");
                        return;
                    }
                    Deployable deployable = newItem.info.GetComponent<ItemModDeployable>().entityPrefab.Get().GetComponent<Deployable>();
                    if (deployable == null)
                    {
                        SendReply(player, "This is not a deployable item, this shouldnt show ever ...");
                        return;
                    }
                    string deployablename = deployable.gameObject.name + ".prefab";
                    bool shouldForce = (args[1] == "all") ? true : false;
                    float eraseRadius = 0.5f;
                    if (args.Length > 2) float.TryParse(args[2], out eraseRadius);
                    int cleared = 0;
                    int total = 0;
                    foreach (Deployable deployed in UnityEngine.Resources.FindObjectsOfTypeAll<Deployable>())
                    {
                        var realEntity = deployed.GetComponent<BaseNetworkable>().net;
                        if (realEntity == null) continue;
                        if(deployed.gameObject.name.EndsWith(deployablename))
                        {
                            total++;
                            if (shouldRemove(deployed, shouldForce, eraseRadius))
                            {
                                deployed.GetComponent<BaseEntity>().KillMessage();
                                cleared++;
                            }
                        }
                    }
                    SendReply(player, string.Format("Cleared {0} entities out of {1} found", cleared.ToString(), total.ToString()));
                    break;
            }
        }
        [ChatCommand("count")]
        void cmdChatCount(BasePlayer player, string command, string[] args)
        {
            if (!hasAccess(player)) { SendReply(player, "You dont have access to this command"); return; }
            if (args.Length < 2) { SendReply(player, "/count \"Deployable Item Name\" all => all the deployable items"); SendReply(player, "/count \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            if (args[1] != "world" && args[1] != "all") { SendReply(player, "/count \"Deployable Item Name\" all => all the deployable items"); SendReply(player, "/count \"Deployable Item Name\" world optional:XX => all the items that are not connected to a construction in XX radius (default is 3 meters)"); return; }
            switch (args[0].ToLower())
            {
                default:
                    string shortname = args[0].ToLower();
                    if (displaynameToShortname.ContainsKey(shortname))
                        shortname = displaynameToShortname[shortname];
                    else if (!displaynameToShortname.ContainsValue(shortname))
                    {
                        SendReply(player, string.Format("{0} is not a valid item name", args[0]));
                        return;
                    }
                    Item newItem = ItemManager.CreateByName(shortname, 1);
                    if (newItem == null)
                    {
                        SendReply(player, "Couldn't find this item, this shouldnt show ever ...");
                        return;
                    }
                    if (newItem.info.GetComponent<ItemModDeployable>() == null)
                    {
                        SendReply(player, "This is not a item mod deployable item, this shouldnt show ever ...");
                        return;
                    }
                    Deployable deployable = newItem.info.GetComponent<ItemModDeployable>().entityPrefab.Get().GetComponent<Deployable>();					
                    if (deployable == null)
                    {
                        SendReply(player, "This is not a deployable item, this shouldnt show ever ...");
                        return;
                    }
                    string deployablename = deployable.gameObject.name + ".prefab";					
                    bool shouldForce = (args[1] == "all") ? true : false;
                    float eraseRadius = 0.5f;
                    if (args.Length > 2) float.TryParse(args[2], out eraseRadius);
                    int cleared = 0;
                    foreach (Deployable deployed in UnityEngine.Resources.FindObjectsOfTypeAll<Deployable>())
                    {
                        var realEntity = deployed.GetComponent<BaseNetworkable>().net;
                        if (realEntity == null) continue;
                        if (deployed.gameObject.name.EndsWith(deployablename))
                        {
                            if (shouldRemove(deployed, shouldForce, eraseRadius))
                            {
                                cleared++;
                            }
                        }
                    }
                    SendReply(player, string.Format("{1}: Found {0} entities that matchs your search", cleared.ToString(), shortname));
                    break;
            }
        }
    }
}


// --- End of file: CleanUp.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Bounty.cs ---
// --- Original Local Path: Bounty.cs ---

using System.Collections.Generic;
using System;
using Oxide.Core;
using Oxide.Core.Plugins;
using System.Linq;
using Oxide.Core.Configuration;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Bounty", "k1lly0u", "0.1.73", ResourceId = 1649)]
    class Bounty : RustPlugin
    {

        [PluginReference]
        Plugin Clans;
        [PluginReference]
        Plugin Friends;
        [PluginReference]
        Plugin PopupNotifications;
        [PluginReference]
        Plugin Economics;

        private bool Changed;

        BountyDataStorage bountyData;
        private DynamicConfigFile BountyData;

        RewardDataStorage rewardData;
        private DynamicConfigFile RewardData;

        PlayerTimeStamp playerTimeData = new PlayerTimeStamp();

        private Dictionary<string, string> itemInfo;

        private Dictionary<ulong, OpenBox> rewardBoxs = new Dictionary<ulong, OpenBox>();
        string rBox = "assets/prefabs/deployable/woodenbox/woodbox_deployed.prefab";

        #region oxide hooks
        //////////////////////////////////////////////////////////////////////////////////////
        // Oxide Hooks ///////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
        void Loaded()
        {
            permission.RegisterPermission("bounty.use", this);
            permission.RegisterPermission("bounty.admin", this);
            permission.RegisterPermission("bounty.ban", this);

            lang.RegisterMessages(messages, this);
            
            BountyData = Interface.Oxide.DataFileSystem.GetFile("bounty_players");
            RewardData = Interface.Oxide.DataFileSystem.GetFile("bounty_rewards");
            itemInfo = new Dictionary<string, string>();            

            LoadData();
            LoadVariables();           

        }
        void OnServerInitialized()
        {
            CheckDependencies();   
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (bountyData.players.ContainsKey(player.userID))
                {
                    if (bountyData.players[player.userID].Bountys.Count > 0)
                        initTimestamp(player);
                }
            }
            InitializeTable();
            SaveDataLoop();
            if (useReminders)
                RemindPlayers();
        }
        void CheckDependencies()
        {
            if (Friends == null)
            {
                if (useFriendsAPI)
                {
                    PrintWarning($"FriendsAPI could not be found! Disabling friends feature");
                    useFriendsAPI = false;
                }
            }

            if (Clans == null)
            {
                if (useClans)
                {
                    PrintWarning($"Clans could not be found! Disabling clans feature");
                    useClans = false;
                }
            }
            if (PopupNotifications == null)
            {
                if (usePopup)
                {
                    PrintWarning($"Popup Notifications could not be found! Disabling feature");
                    usePopup = false;
                }
            }
            if (Economics == null)
            {
                if (useEconomics)
                {
                    PrintWarning($"Economics could not be found! Disabling money feature");
                    useEconomics = false;
                }
            }
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (bountyData.players.ContainsKey(player.userID))
            {
                int count = bountyData.players[player.userID].Bountys.Count;
                if (count > 0)
                {
                    initTimestamp(player);
                    if (usePopup && PopupNotifications)
                    {
                        timer.Once(15, ()=> SendPopup(player, string.Format(lang.GetMessage("numOutstand", this, player.UserIDString), count)));
                    }
                    else
                        timer.Once(15, () => SendMSG(player, string.Format(lang.GetMessage("numOutstand", this, player.UserIDString), count)));                    
                }
            }
        }
        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            Config.Clear();
            LoadVariables();
        }
        void Unload()
        {
            SaveData();
            playerTimeData.playerTime.Clear();
            rewardBoxs.Clear();
        }        
       
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            try
            {
                if (entity == null || info.Initiator == null) return;
                if (entity is BasePlayer && info.Initiator is BasePlayer)
                {
                    if ((BasePlayer)entity != (BasePlayer)info.Initiator)
                    {                        
                        BasePlayer victim = (BasePlayer)entity;
                        ulong VID = victim.userID;
                        BasePlayer attacker = (BasePlayer)info.Initiator;
                        ulong AID = attacker.userID;
                        if (isBanned(attacker))
                        {
                            if (usePopup && PopupNotifications)
                            {
                                SendPopup(attacker, lang.GetMessage("title", this, attacker.UserIDString) + lang.GetMessage("playerBanned", this, attacker.UserIDString));
                            }
                            else
                                SendMSG(attacker, lang.GetMessage("playerBanned", this, attacker.UserIDString));
                            return;
                        }
                        if (bountyData.players.ContainsKey(VID))
                        {
                            if (bountyData.players[VID].Bountys.Count > 0)
                            {
                                if (useClans)
                                {
                                    if (IsClanmate(VID, AID))
                                    {
                                        if (usePopup && PopupNotifications)
                                        {
                                            SendPopup(attacker, lang.GetMessage("title", this, attacker.UserIDString) + lang.GetMessage("clanMate", this, attacker.UserIDString));
                                        }
                                        else
                                            SendMSG(attacker, lang.GetMessage("clanMate", this, attacker.UserIDString));
                                        return;
                                    }
                                }
                                if (useFriendsAPI)
                                {
                                    if (IsFriend(victim, attacker.userID))
                                    {
                                        if (usePopup && PopupNotifications)
                                        {
                                            SendPopup(attacker, lang.GetMessage("title", this, attacker.UserIDString) + lang.GetMessage("isFriend", this, attacker.UserIDString));
                                        }
                                        else
                                            SendMSG(attacker, lang.GetMessage("isFriend", this, attacker.UserIDString));
                                        return;
                                    }
                                }
                                recordEarnings(attacker, victim);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        void OnPlayerLootEnd(PlayerLoot inventory)
        {
            BasePlayer player = inventory.GetComponent<BasePlayer>();

            if (rewardBoxs.ContainsKey(player.userID))
                StoreRewardData(player);            
        }
        #endregion

        #region methods
        //////////////////////////////////////////////////////////////////////////////////////
        // Bounty Methods ////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
        
        void addBounty(BasePlayer player, BasePlayer target, string item, int amount)
        {

            if (checkExisting(player, target))
            {
                SendMSG(player, lang.GetMessage("existBounty", this, player.UserIDString));
                return;
            }
            if (rewardBoxs.ContainsKey(player.userID))
            {
                SendMSG(player, lang.GetMessage("existBox", this, player.UserIDString));
                return;
            }
            ulong TID = target.userID;
            if (item == "Money")
            {
                List<ItemStorage> items = new List<ItemStorage>();
                ItemStorage bItem = new ItemStorage();
                bItem.money = true;
                bItem.amount = amount;
                bItem.itemname = item;
                items.Add(bItem);
                bountyData.players[TID].Bountys.Add(player.userID, new BountyInfo() { InitiatorName = player.displayName, BountyItems = items });
                bountyData.players[TID].TotalBountys++;
                initTimestamp(target);
                SaveData();
                notifyBounty(player, target);
                return;
            }
            var pos = player.transform.position;

            Vector3 newPos = pos + player.eyes.BodyForward() + new Vector3(0, 1, 0);
            BaseEntity box = GameManager.server.CreateEntity(rBox, newPos);           
            box.SendMessage("SetDeployedBy", player, UnityEngine.SendMessageOptions.DontRequireReceiver);
            box.Spawn(true);
            ItemContainer loot = box.GetComponent<ItemContainer>();
            var ownerloot = player.inventory.loot;
            ownerloot.StartLootingEntity(box, true);
            ownerloot.AddContainer(loot);
            ownerloot.SendImmediate();
            SendMSG(player, lang.GetMessage("setReward", this, player.UserIDString));
            rewardBoxs[player.userID] = new OpenBox() { entity = box, target = target };
        }
       
        void StoreRewardData(BasePlayer player)
        {
            ulong ID = player.userID;
            if (rewardBoxs.ContainsKey(ID))
            {
                BasePlayer target = rewardBoxs[ID].target;
                ulong TID = target.userID;
                BaseEntity box = rewardBoxs[ID].entity.GetComponent<BaseEntity>();
                StorageContainer loot = box.GetComponent<StorageContainer>();
                List<ItemStorage> items = new List<ItemStorage>();

                foreach (Item item in loot.inventory.itemList)
                {
                    ItemStorage bItem = new ItemStorage();
                    bItem.amount = item.amount;
                    bItem.itemname = item.info.displayName.english;
                    items.Add(bItem);
                }
                if (items.Count == 0)
                {
                    SendMSG(player, lang.GetMessage("noItems", this, player.UserIDString));
                    loot.inventory.itemList.Clear();
                    rewardBoxs.Remove(ID);
                    loot.KillMessage();
                    loot.SendNetworkUpdateImmediate(false);
                    return;
                }

                bountyData.players[TID].Bountys.Add(ID, new BountyInfo() { InitiatorName = player.displayName, BountyItems = items });
                bountyData.players[TID].TotalBountys++;
                initTimestamp(target);
                SaveData();

                loot.inventory.itemList.Clear();
                rewardBoxs.Remove(ID);
                notifyBounty(player, target);
                
                loot.KillMessage();
                loot.SendNetworkUpdateImmediate(false);
            }
        }
        private void notifyBounty(BasePlayer player, BasePlayer target)
        {
            if (usePopup && PopupNotifications)
            {
                if (globalBroadcast)
                {
                    foreach (var p in BasePlayer.activePlayerList)
                    {
                        SendPopup(p, string.Format(lang.GetMessage("addBounty", this, player.UserIDString), target.displayName));
                    }
                }
                else { SendPopup(player, string.Format(lang.GetMessage("addBounty", this, player.UserIDString), target.displayName)); }
                
                SendPopup(target, string.Format(lang.GetMessage("bountyAdded", this, player.UserIDString), player.displayName));
            }
            else
            {
                if (globalBroadcast)
                {
                    foreach (var p in BasePlayer.activePlayerList)
                    {
                        SendMSG(p, string.Format(lang.GetMessage("addBounty", this, player.UserIDString), target.displayName));
                    }
                }
                else { SendMSG(player, string.Format(lang.GetMessage("addBounty", this, player.UserIDString), target.displayName)); }
                SendMSG(target, string.Format(lang.GetMessage("bountyAdded", this, player.UserIDString), player.displayName));
            }
        }
        private void SendMSG(BasePlayer player, string msg)
        {
            SendReply(player, mainColor + lang.GetMessage("title", this, player.UserIDString) + "</color>" + msgColor + msg + "</color>");
        }
        private bool checkExisting(BasePlayer player, BasePlayer target)
        {
            ulong TID = target.userID;
            if (!bountyData.players.ContainsKey(TID))
            {
                bountyData.players.Add(TID, new PlayerData()
                {
                    PlayerName = target.displayName,
                    PlayerID = TID,                    
                    Bountys = new Dictionary<ulong, BountyInfo>()
                });
                return false;
            }           
            if (bountyData.players[TID].Bountys.ContainsKey(player.userID))
                return true;
            return false;
        }
        private bool itemCosts(BasePlayer player, string item, int amount)
        {
            if (item == "Money")
            {
                return true;
            }
            string itemshortname = itemInfo[item];
            var definition = ItemManager.FindItemDefinition(itemshortname);

            int itemID = definition.itemid;
            int invAmount = player.inventory.GetAmount(itemID);
            Puts(invAmount.ToString());

            if (amount <= invAmount)
            {
                player.inventory.Take(null, itemID, amount);

                return true;
            }
            return false;
        }
        private void recordEarnings(BasePlayer player, BasePlayer victim)
        {
            ulong VID = victim.userID;
            ulong PID = player.userID;
            if (!rewardData.rewards.ContainsKey(PID))
            {
                rewardData.rewards.Add(PID, new RewardInfo()
                {
                    PlayerID = PID,
                    PlayerName = player.displayName,                    
                    Rewards = new Dictionary<int, UnclaimedData>()
                });
            }
            foreach (var bounty in bountyData.players[VID].Bountys)
            {
                int rewardCount = rewardData.rewards[PID].Rewards.Count;
                rewardData.rewards[PID].Rewards.Add((rewardCount + 1), new UnclaimedData()
                {
                    VictimID = VID,
                    VictimName = victim.displayName,
                    Rewards = bounty.Value.BountyItems
                });
                rewardData.rewards[PID].TotalCount++;
            }
            int bountyCount = bountyData.players[VID].Bountys.Count;
            calculateTimestamp(victim);
            bountyData.players[VID].Bountys.Clear();
            if (usePopup && PopupNotifications)
            {
                SendPopup(player, string.Format(lang.GetMessage("numEarnt", this, player.UserIDString), victim.displayName, bountyCount.ToString()));
            }
            else
                SendMSG(player, string.Format(lang.GetMessage("numEarnt", this, player.UserIDString), victim.displayName, bountyCount.ToString()));
        }
        private bool claimBounty(BasePlayer player, int ID)
        {           
            foreach (var entry in rewardData.rewards[player.userID].Rewards[ID].Rewards)
            {
                if (entry.money)
                {
                    if (RewardMoney(player, entry.amount))
                        return true;
                }
                else
                {
                    GiveItem(player, entry.itemname, entry.amount, player.inventory.containerMain);                    
                }
            }
            return true;
        }
        private void InitializeTable()
        {
            itemInfo.Clear();
            List<ItemDefinition> ItemsDefinition = ItemManager.GetItemDefinitions();
            foreach (ItemDefinition itemdef in ItemsDefinition)
            {
                itemInfo.Add(itemdef.displayName.english.ToString().ToLower(), itemdef.shortname.ToLower());
            }
        }
        private object GiveItem(BasePlayer player, string itemname, int amount, ItemContainer pref)
        {
            itemname = itemname.ToLower();            
            if (itemInfo.ContainsKey(itemname))
                itemname = itemInfo[itemname];
            var definition = ItemManager.FindItemDefinition(itemname);
            if (definition == null)
                return string.Format("{0} {1}", "Item not found: ", itemname);
            player.inventory.GiveItem(ItemManager.CreateByItemID((int)definition.itemid, amount), pref);
            return true;
        }
        List<BasePlayer> FindPlayer(string arg)
        {
            var foundPlayers = new List<BasePlayer>();

            ulong steamid;
            ulong.TryParse(arg, out steamid);
            string lowerarg = arg.ToLower();

            foreach (var player in BasePlayer.activePlayerList)
            {
                if (steamid != 0L)
                    if (player.userID == steamid)
                    {
                        foundPlayers.Clear();
                        foundPlayers.Add(player);
                        return foundPlayers;
                    }
                string lowername = player.displayName.ToLower();
                if (lowername.Contains(lowerarg))
                {
                    foundPlayers.Add(player);
                }
            }
            if (foundPlayers.Count == 0)
            {
                foreach (var player in BasePlayer.sleepingPlayerList)
                {
                    if (steamid != 0L)
                        if (player.userID == steamid)
                        {
                            foundPlayers.Clear();
                            foundPlayers.Add(player);
                            return foundPlayers;
                        }
                    string lowername = player.displayName.ToLower();
                    if (lowername.Contains(lowerarg))
                    {
                        foundPlayers.Add(player);
                    }
                }
            }
            return foundPlayers;
        }
        List<string> FindItem(string arg)
        {
            var foundItems = new List<string>();

            foreach (var item in itemInfo)
            {
                string lowername = arg.ToLower();

                if (lowername == item.Key)
                {
                    foundItems.Add(item.Key);
                    Puts(foundItems.Count.ToString());
                }
                else if (lowername == item.Value)
                {
                    foundItems.Add(item.Key);
                    Puts(foundItems.Count.ToString());
                }
            }
            return foundItems;
        }
        private bool IsClanmate(ulong playerId, ulong friendId)
        {
            object playerTag = Clans?.Call("GetClanOf", playerId);
            object friendTag = Clans?.Call("GetClanOf", friendId);
            if (playerTag is string && friendTag is string)
                if (playerTag == friendTag) return true;
            return false;
        }
        private bool IsFriend(BasePlayer player, ulong friendID)
        {
            bool isFriend = (bool)Friends?.Call("IsFriend", player.userID, friendID);
            return isFriend;
        }
        private void RemindPlayers()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (bountyData.players.ContainsKey(player.userID))
                {
                    int count = bountyData.players[player.userID].Bountys.Count;
                    if (count > 0)
                    {
                        if (usePopup && PopupNotifications)
                        {
                            SendPopup(player, string.Format(lang.GetMessage("numOutstand", this, player.UserIDString), count));
                        }
                        else
                            SendMSG(player, string.Format(lang.GetMessage("numOutstand", this, player.UserIDString), count));
                    }
                }
            }
            timer.Once(remindTime * 60, () => RemindPlayers());
        }
        private void SendPopup(BasePlayer player, string msg)
        {
            PopupNotifications?.Call("CreatePopupOnPlayer", lang.GetMessage("title", this, player.UserIDString) + msg, player, popupTime);
        }
        private bool CheckPlayerMoney(BasePlayer player, int amount)
        {
            if (useEconomics)
            {
                double money = (double)Economics?.CallHook("GetPlayerMoney", player.userID);
                if (money >= amount)
                {
                    money = money - amount;
                    Economics?.CallHook("Set", player.userID, money);
                    return true;
                }
                return false;
            }
            return false;
        }
        private bool RewardMoney(BasePlayer player, double amount)
        {
            if (useEconomics)
            {
                double money = (double)Economics?.CallHook("GetPlayerMoney", player.userID);
                if (amount >= 1)
                {
                    var setmoney = money + amount;
                    Economics?.CallHook("Set", player.userID, setmoney);
                    return true;
                }

                return false;
            }
            return false;
        }
       

        //////////////////////////////////////////////////////////////////////////////////////
        // Time //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        private void initTimestamp(BasePlayer player)
        {
            long currentTimestamp = getCurrentTime();
            var state = new PlayerStateInfo(player);
            var ID = player.userID;

            if (!playerTimeData.playerTime.ContainsKey(ID))
            {
                playerTimeData.playerTime.Add(ID, state);
            }
            playerTimeData.playerTime[ID].InitTimeStamp = currentTimestamp;
        }
        private void calculateTimestamp(BasePlayer player)
        {
            var ID = player.userID;
            if (!bountyData.players.ContainsKey(ID)) return;
            if (bountyData.players[ID].Bountys.Count > 0)
            {
                long currentTimestamp = getCurrentTime();
                long initTimeStamp = playerTimeData.playerTime[ID].InitTimeStamp;
                long totalPlayed = currentTimestamp - initTimeStamp;

                bountyData.players[ID].TotalWantedSec += totalPlayed;
                TimeSpan ClockPlayTime = TimeSpan.FromSeconds(bountyData.players[ID].TotalWantedSec);
                bountyData.players[ID].TotalWantedClock = string.Format("{0:c}", ClockPlayTime);

                foreach (var bounty in bountyData.players[ID].Bountys)
                {
                    var e = bounty.Value;
                    e.WantedTime += totalPlayed;
                    e.WantedTimeClock = string.Format("{0:c}", ClockPlayTime);
                }

                playerTimeData.playerTime[ID].InitTimeStamp = currentTimestamp;

            }
        }
        private long getCurrentTime()
        {
            long timestamp = 0;
            long ticks = DateTime.UtcNow.Ticks - DateTime.Parse("01/01/1970 00:00:00").Ticks;
            ticks /= 10000000;
            timestamp = ticks;

            return timestamp;
        }        
        
        #endregion

        #region chat commands
        //////////////////////////////////////////////////////////////////////////////////////
        // Chat Commands /////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
        [ChatCommand("bounty")]
        private void cmdBounty(BasePlayer player, string command, string[] args)
        {
            if (!canBountyPlayer(player)) return;
            
            if (args.Length == 0)
            {
                SendMSG(player, lang.GetMessage("commands", this, player.UserIDString));
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty add</color>" + msgColor + " - Adds a bounty");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty claim</color>" + msgColor + " - Lists your current rewards");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty claim #ID#</color>" + msgColor + " - Claim reward with ID number");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty close</color>" + msgColor + " - Close a open bounty box");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty check</color>" + msgColor + " - Check yourself for bounty(s)");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty check playername</color>" + msgColor + " - Check player for bounty(s)");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty top</color>" + msgColor + " - List the top bounty hunters / top wanted time");
                SendMSG(player, "</color>" + "<color=#8dc63f>/bounty wanted</color>" + msgColor + " - List the most wanted / most current wanted time");

                if (canBountyAdmin(player))
                {
                    SendMSG(player, "</color>" + "<color=#8dc63f>/bounty clear playername</color>" + msgColor + " - Clear player bounty(s)");
                    SendMSG(player, "</color>" + "<color=#8dc63f>/bounty wipe</color>" + msgColor + " - Wipe all bounty data");
                }
                return;
            }
            ulong ID = player.userID;
            var data = bountyData.players;
            var rdata = rewardData.rewards;
            if (args.Length == 1)
            {
                switch (args[0].ToLower())
                {
                    case "add":
                        if (!useEconomyOnly)
                            SendMSG(player, lang.GetMessage("addFormat", this, player.UserIDString));
                        if (Economics && useEconomics)
                            SendMSG(player, lang.GetMessage("addFormatMoney", this, player.UserIDString));
                        return;
                    case "claim":
                        if (rdata.ContainsKey(ID))
                        {
                            if (rdata[ID].Rewards.Count > 0)
                            {
                                SendMSG(player, string.Format(lang.GetMessage("claimRewards", this, player.UserIDString), rdata[ID].Rewards.Count));
                                foreach (var reward in rdata[ID].Rewards)
                                {
                                    SendReply(player, string.Format(lang.GetMessage("rewardInfo", this, player.UserIDString), reward.Key.ToString()));
                                    foreach (var item in reward.Value.Rewards)
                                    {
                                        SendReply(player, mainColor + item.itemname + "</color>" + msgColor + " --- </color>" + mainColor + item.amount.ToString() + "</color>");
                                    }
                                }
                                return;
                            }
                        }
                        SendMSG(player, lang.GetMessage("noRewards", this, player.UserIDString));
                        return;

                    case "check":
                        if (data.ContainsKey(ID))
                        {
                            if (data[ID].Bountys.Count > 0)
                            {
                                SendMSG(player, string.Format(lang.GetMessage("numOutstand", this, player.UserIDString), data[ID].Bountys.Count));
                                foreach (var entry in data[ID].Bountys)
                                {
                                    SendReply(player, string.Format(lang.GetMessage("checkInfo", this, player.UserIDString), entry.Value.InitiatorName));
                                    foreach (var item in entry.Value.BountyItems)
                                    {
                                        SendReply(player, mainColor + item.itemname + "</color>" + msgColor + " --- </color>" + mainColor + item.amount.ToString() + "</color>");
                                    }
                                }
                                return;
                            }
                        }
                        SendMSG(player, lang.GetMessage("noOutstand", this, player.UserIDString));
                        return;

                    case "close":
                        if (rewardBoxs.ContainsKey(player.userID))
                            StoreRewardData(player);
                        return;

                    case "top":
                        if (rdata.Count > 0)
                        {
                            Dictionary<string, int> topHunters = new Dictionary<string, int>();
                            foreach (var entry in rdata)
                            {
                                topHunters.Add(entry.Value.PlayerName, entry.Value.TotalCount);
                            }
                            Dictionary<string, int> top5 = topHunters.OrderByDescending(pair => pair.Value).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                            if (top5.Count > 0)
                            {
                                SendMSG(player, lang.GetMessage("mostKills", this, player.UserIDString));
                                foreach (var name in top5)
                                {
                                    SendReply(player, string.Format(lang.GetMessage("topList", this, player.UserIDString), name.Key, name.Value));
                                }
                            }
                            /////////////////////////////////

                            Dictionary<string, long> topWanted = new Dictionary<string, long>();
                            foreach (var entry in data)
                            {
                                topWanted.Add(entry.Value.PlayerName, entry.Value.TotalWantedSec);
                            }
                            Dictionary<string, long> top5w = topWanted.OrderByDescending(pair => pair.Value).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                            if (top5w.Count > 0)
                            {
                                SendMSG(player, lang.GetMessage("mostOverallTime", this, player.UserIDString));
                                foreach (var name in top5w)
                                {
                                    TimeSpan ClockPlayTime = TimeSpan.FromSeconds(name.Value);
                                    string time = string.Format("{0:c}", ClockPlayTime);
                                    SendReply(player, string.Format(lang.GetMessage("wantedOverallTime", this, player.UserIDString), name.Key, time));
                                }
                            }
                            return;
                        }
                        SendMSG(player, lang.GetMessage("noTop", this, player.UserIDString));
                        return;
                    case "save":
                        if (rewardBoxs.ContainsKey(player.userID))
                            StoreRewardData(player);
                        return;
                    case "wanted":
                        if (data.Count > 0)
                        {
                            Dictionary<string, int> mostWanted = new Dictionary<string, int>();
                            foreach (var entry in data)
                            {
                                mostWanted.Add(entry.Value.PlayerName, entry.Value.Bountys.Count);
                            }
                            Dictionary<string, int> top5 = mostWanted.OrderByDescending(pair => pair.Value).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                            if (top5.Count > 0)
                            {
                                SendMSG(player, lang.GetMessage("mostWanted", this, player.UserIDString));
                                foreach (var name in top5)
                                {
                                    SendReply(player, string.Format(lang.GetMessage("wantedList", this, player.UserIDString), name.Key, name.Value));
                                }                                
                            }
                            Dictionary<string, long> longestWanted = new Dictionary<string, long>();
                            foreach (var entry in data)
                            {
                                List<long> times = new List<long>();
                                long best = 0;
                                foreach (var bounty in entry.Value.Bountys)
                                {
                                    long t = bounty.Value.WantedTime;
                                    if (t > best)
                                        best = t;
                                }

                                longestWanted.Add(entry.Value.PlayerName, best);
                            }
                            Dictionary<string, long> long5 = longestWanted.OrderByDescending(pair => pair.Value).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                            if (long5.Count > 0)
                            {
                                SendMSG(player, lang.GetMessage("mostCurrentTime", this, player.UserIDString));
                                foreach (var name in long5)
                                {
                                    TimeSpan ClockPlayTime = TimeSpan.FromSeconds(name.Value);
                                    string time = string.Format("{0:c}", ClockPlayTime);
                                    SendReply(player, string.Format(lang.GetMessage("wantedCurrentTime", this, player.UserIDString), name.Key, time));
                                }
                            }
                            return;
                        }
                        SendMSG(player, lang.GetMessage("noWanted", this, player.UserIDString));
                        return;

                    case "wipe":
                        if (isAuth(player))
                        {
                            rdata.Clear();
                            data.Clear();
                            SaveData();
                            SendMSG(player, lang.GetMessage("wipedData", this, player.UserIDString));
                        }
                        return;
                }
            }
            if (args[0].ToLower() == "claim" && args.Length == 2)
            {
                if (rdata.ContainsKey(ID))
                {
                    int rewardNum;
                    if (!int.TryParse(args[1], out rewardNum))
                    {
                        SendMSG(player, lang.GetMessage("invRNum", this, player.UserIDString));
                        return;
                    }
                    if (!rdata[ID].Rewards.ContainsKey(rewardNum))
                    {
                        SendMSG(player, lang.GetMessage("invRNum", this, player.UserIDString));
                        return;
                    }

                    bool success = claimBounty(player, rewardNum);
                    if (success)
                    {
                        SendMSG(player, string.Format(lang.GetMessage("claimSuccess", this, player.UserIDString), rewardNum));
                        rdata[ID].Rewards.Remove(rewardNum);
                        return;
                    }
                }
                SendMSG(player, lang.GetMessage("claimFormat", this, player.UserIDString));
                return;
            }

            BasePlayer target = null;
            if (args.Length >= 2)
            {
                var players = FindPlayer(args[1]);
                if (players.Count == 0)
                {
                    SendMSG(player, lang.GetMessage("noPlayers", this, player.UserIDString));
                    return;
                }
                if (players.Count > 1)
                {
                    SendMSG(player, lang.GetMessage("multiplePlayers", this, player.UserIDString));
                    return;
                }
                target = players[0];
            }          
            if (target != null)
            {
                
                var TID = target.userID;
                switch (args[0].ToLower())
                {
                    case "add":
                        if (args.Length >= 2)
                        {
                            int amount = 1;
                            if (isBanned(player))
                            {
                                if (usePopup && PopupNotifications)
                                {
                                    SendPopup(player, lang.GetMessage("title", this, player.UserIDString) + lang.GetMessage("playerBanned", this, player.UserIDString));
                                }
                                else
                                    SendMSG(player, lang.GetMessage("playerBanned", this, player.UserIDString));
                                return;
                            }                            
                            if (target == player)
                            {
                                SendMSG(player, lang.GetMessage("noSelf", this, player.UserIDString));
                                return;
                            }
                            if (args.Length == 4)
                            {                                
                                if (args[2].ToLower() == "money" && useEconomics)
                                {
                                    if (!int.TryParse(args[3], out amount))
                                    {
                                        SendMSG(player, lang.GetMessage("invAmount", this, player.UserIDString));
                                        return;
                                    }
                                    if (CheckPlayerMoney(player, amount))
                                    {
                                        addBounty(player, target, "Money", amount);
                                        return;
                                    }
                                    SendMSG(player, lang.GetMessage("noMoney", this, player.UserIDString));
                                    return;
                                }                                
                            }
                            if (useEconomyOnly) SendMSG(player, lang.GetMessage("addFormatMoney", this, player.UserIDString));
                            else                                  
                                addBounty(player, target, "", 0);
                            return;
                        }
                        SendMSG(player, lang.GetMessage("addFormat", this, player.UserIDString));
                        if (Economics && useEconomics)
                            SendMSG(player, lang.GetMessage("addFormatMoney", this, player.UserIDString));
                        return;
                    case "check":
                        if (args.Length == 2)
                        {
                            if (data.ContainsKey(TID))
                            {
                                if (data[TID].Bountys.Count > 0)
                                {
                                    SendMSG(player, string.Format(lang.GetMessage("checkBounty", this, player.UserIDString), data[TID].Bountys.Count, data[TID].PlayerName));
                                    foreach (var entry in data[TID].Bountys)
                                    {
                                        SendReply(player, string.Format(msgColor + lang.GetMessage("checkInfo", this, player.UserIDString) + "</color>", entry.Value.InitiatorName));
                                        foreach (var item in entry.Value.BountyItems)
                                        {
                                            SendReply(player, mainColor + item.itemname + "</color>" + msgColor + " --- </color>" + mainColor + item.amount.ToString() + "</color>");
                                        }
                                    }
                                    return;
                                }                                
                            }
                            SendMSG(player, string.Format(lang.GetMessage("pnoOutstand", this, player.UserIDString), target.displayName));
                            return;
                        }
                        SendMSG(player, lang.GetMessage("checkFormat", this, player.UserIDString));
                        return;

                    case "clear":
                        if (isAuth(player))
                        {
                            if (args.Length == 2)
                            {
                                if (data.ContainsKey(TID))
                                {
                                    if (data[TID].Bountys.Count > 0)
                                    {
                                        int icount = data[TID].Bountys.Count;
                                        data[TID].Bountys.Clear();
                                        SendMSG(player, string.Format(lang.GetMessage("clearBounty", this, player.UserIDString), icount, target.displayName));
                                        return;
                                    }
                                }
                                SendMSG(player, string.Format(lang.GetMessage("pnoOutstand", this, player.UserIDString), target.displayName));
                            }
                        }
                        return;
                }
            }
        }
        [ConsoleCommand("bounty.wipe")]
        void ccmdbWipe(ConsoleSystem.Arg arg)
        {
            if (!isAuthCon(arg)) return;
            var data = bountyData.players;
            var rdata = rewardData.rewards;
            rdata.Clear();
            data.Clear();
            SaveData();
            Puts("Bounty data wiped!");
        }
        [ConsoleCommand("bounty.list")]
        void ccmdbList(ConsoleSystem.Arg arg)
        {
            if (!isAuthCon(arg)) return;
            foreach (var entry in bountyData.players)
            {
                if (entry.Value.Bountys.Count > 0)
                {
                    Puts("Name: " + entry.Value.PlayerName);
                    Puts("ID: " + entry.Value.PlayerID);
                    foreach (var reward in entry.Value.Bountys)
                    {
                        Puts("-- Initiator: " + reward.Value.InitiatorName);
                        Puts("-- Items;");
                        foreach (var ientry in reward.Value.BountyItems)
                        {
                            Puts("---- " + ientry.itemname + " X " + ientry.amount);
                        }
                    }
                }
            }
        }


        #endregion

        #region permissions/auth

        //////////////////////////////////////////////////////////////////////////////////////
        // Permissions/Auth //////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        bool canBountyPlayer(BasePlayer player)
        {
            if (permission.UserHasPermission(player.userID.ToString(), "bounty.use")) return true;
            else if (canBountyAdmin(player)) return true;            
            return false;
        }
        bool canBountyAdmin(BasePlayer player)
        {
            if (permission.UserHasPermission(player.userID.ToString(), "bounty.admin")) return true;
            else if (isAuth(player)) return true;
            return false;
        }
        bool isBanned(BasePlayer player)
        {
            if (permission.UserHasPermission(player.userID.ToString(), "bounty.ban")) return true;            
            return false;
        }
        bool isAuth(BasePlayer player)
        {
            if (player.net.connection.authLevel >= auth) return true;
            return false;
        }
        bool isAuthCon(ConsoleSystem.Arg arg)
        {
            if (arg.connection != null)
            {
                if (arg.connection.authLevel < 1)
                {
                    SendReply(arg, lang.GetMessage("noPerms", this));
                    return false;
                }
            }
            return true;
        }
        #endregion

        #region config
        //////////////////////////////////////////////////////////////////////////////////////
        // Configuration /////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        static int auth = 1;
        static bool useClans = true;
        static bool useFriendsAPI = true;
        static bool usePopup = true;
        static bool useReminders = true;
        static bool useEconomics = true;
        static bool globalBroadcast = true;
        static bool useEconomyOnly = false;

        static int saveLoop = 10;
        static int popupTime = 30;
        static int remindTime = 20;

        static string mainColor = "<color=orange>";
        static string msgColor = "<color=#939393>";

        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            CheckCfg("Authlevel to access admin commands", ref auth);
            CheckCfg("Use FriendsAPI", ref useFriendsAPI);
            CheckCfg("Use Clans", ref useClans);
            CheckCfg("Broadcast new bounty's to global", ref globalBroadcast);
            CheckCfg("Popups - Use Popup Notifications", ref usePopup);
            CheckCfg("Popups - Popup Notification time", ref popupTime);
            CheckCfg("Reminders - Use reminders", ref useReminders);
            CheckCfg("Reminders - Timer (mins)", ref remindTime);
            CheckCfg("Economics - Use money as bounty", ref useEconomics);
            CheckCfg("Economics - Only use money to set a bounty", ref useEconomyOnly);
            CheckCfg("Colors - Main color", ref mainColor);
            CheckCfg("Colors - Message color", ref msgColor);
        }
        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }
        private void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }
        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }
        #endregion        

        #region data
        //////////////////////////////////////////////////////////////////////////////////////
        // Data Management ///////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////
                
        void SaveData()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (bountyData.players.ContainsKey(player.userID))
                {
                    if (bountyData.players[player.userID].Bountys.Count > 0)
                        calculateTimestamp(player);
                }
            }
            BountyData.WriteObject(bountyData);
            RewardData.WriteObject(rewardData);
        }
        void SaveDataLoop()
        {
            SaveData();
            timer.Once(saveLoop, () => SaveDataLoop());
        }
        void LoadData()
        {
            try
            {
                bountyData = BountyData.ReadObject<BountyDataStorage>();
            }
            catch
            {
                Puts("Couldn't load Bounty player data, creating new datafile");
                bountyData = new BountyDataStorage();
            }
            try
            {
                rewardData = RewardData.ReadObject<RewardDataStorage>();
            }
            catch
            {
                Puts("Couldn't load Bounty reward data, creating new datafile");
                rewardData = new RewardDataStorage();
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////
        // Data Class ////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        class BountyDataStorage
        {
            public Dictionary<ulong, PlayerData> players = new Dictionary<ulong, PlayerData>();
            public BountyDataStorage() { }
        }
        class PlayerData
        {
            public ulong PlayerID;
            public string PlayerName;
            public int TotalBountys;
            public long TotalWantedSec;
            public string TotalWantedClock;            
            public Dictionary<ulong, BountyInfo> Bountys;

            public PlayerData() { }
            public PlayerData(string name, ulong id)
            {
                PlayerID = id;
                PlayerName = name;                                             
                TotalBountys = 0;
                TotalWantedSec = 0;
                TotalWantedClock = "00:00:00";
                Bountys = new Dictionary<ulong, BountyInfo>();
            }
        }
        class BountyInfo
        {
            public string InitiatorName;
            public List<ItemStorage> BountyItems = new List<ItemStorage>();
            public long WantedTime;
            public string WantedTimeClock;

            public BountyInfo() { }
            public BountyInfo(ulong playerid, string playername, List<ItemStorage> items)
            {
                InitiatorName = playername;
                BountyItems = items;
                WantedTime = 0;
                WantedTimeClock = "00:00:00";                
            }
        }
        class RewardDataStorage
        {
            public Dictionary<ulong, RewardInfo> rewards = new Dictionary<ulong, RewardInfo>();
            public RewardDataStorage() { }
        }
        class RewardInfo
        {            
            public ulong PlayerID;            
            public string PlayerName;
            public int TotalCount;
            public Dictionary<int, UnclaimedData> Rewards;

            public RewardInfo() { }
            public RewardInfo(ulong aid, string attackname)
            {
                PlayerID = aid;
                PlayerName = attackname;
                TotalCount = 0;
                Rewards = new Dictionary<int, UnclaimedData>();
            }
        }
        class UnclaimedData
        {
            public ulong VictimID;
            public string VictimName;
            public List<ItemStorage> Rewards = new List<ItemStorage>();
            public UnclaimedData() { }

        }
        class ItemStorage
        {
            public bool money;
            public int amount;
            public string itemname;
        }
        class OpenBox
        {
            public BasePlayer target;
            public BaseEntity entity;
        }       

        class PlayerTimeStamp
        {
            public Dictionary<ulong, PlayerStateInfo> playerTime = new Dictionary<ulong, PlayerStateInfo>();
            public PlayerTimeStamp() { }
        }
        class PlayerStateInfo
        {
            public long InitTimeStamp;

            public PlayerStateInfo() { }

            public PlayerStateInfo(BasePlayer player)
            {
                InitTimeStamp = 0;
            }
        }        
       
        #endregion

        #region messages
        //////////////////////////////////////////////////////////////////////////////////////
        // Messages //////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "Bounty : " },
            {"noPerms", "You do not have permission to use this command" },
            {"neRes", "You do not have enough resources to place this bounty" },
            {"existBounty", "You already have a bounty placed on this player" },
            {"existBox", "You already have reward box open!" },
            {"setReward", "Place your reward items in the box infront of you!" },
            {"addBounty", "A bounty has been placed on {0}" },
            {"bountyAdded", "{0} has just placed a bounty on you!" },
            {"numOutstand", "You currently have {0} outstanding bounty(s)" },
            {"noOutstand", "You have no outstanding bounty's" },
            {"noSelf", "You cannot place a bounty on yourself" },
            {"noItems", "You didn't place any items in the box, no bounty has been placed" },
            {"noPlayers", "Could not find a player with that name" },
            {"multiplePlayers", "Multiple players found with that name" },
            {"noItem", "Could not find a item with that name" },
            {"noMoney", "You do not have enough money" },
            {"multipleItems", "Multiple items found with that name, try typing more of the name" },
            {"invAmount", "The amount needs to be a number" },
            {"checkBounty", "{1} has {0} outstanding bounty(s)" },
            {"pnoOutstand", "{0} has no outstanding bounty's" },
            {"clearBounty", "You have removed {0} bounty(s) from {1}" },
            {"clanMate", "You cannot claim a bounty on a clan mate" },
            {"isFriend", "You cannot claim a bounty on a friend" },
            {"numEarnt", "{0} had {1} bounty(s), you can claim these using /bounty claim" },
            {"checkInfo", "<color=#8dc63f>Initiator:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Rewards;</color>" },
            {"noRewards", "You don't have any rewards" },
            {"claimRewards", "You currently have {0} bounty reward(s) to claim, use /bounty claim #ID#" },
            {"rewardInfo", "<color=#8dc63f>RewardID:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Items;</color>" },
            {"invRNum", "You must type a valid reward number" },
            {"claimSuccess", "You have claimed reward ID {0}" },
            {"claimFormat", "/bounty claim ID#" },
            {"wipedData", "All data has been wiped!" },
            {"mostWanted", "--- Top wanted active bounty's" },
            {"mostCurrentTime", "--- Top current wanted time" },
            {"mostKills", "--- Top bounty killers" },
            {"mostOverallTime", "--- Top total wanted time" },
            {"wantedList", "<color=#8dc63f>Name:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Active Bountys:</color> {1}" },
            {"wantedCurrentTime", "<color=#8dc63f>Name:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Current wanted time:</color> {1}" },
            {"topList", "<color=#8dc63f>Name:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Bountys Collected:</color> {1}" },
            {"wantedOverallTime", "<color=#8dc63f>Name:</color> {0} <color=#31698a>---</color> <color=#8dc63f>Total wanted time:</color> {1}" },
            {"addFormat", "Format: /bounty add PlayerName" },
            {"addFormatMoney", "Economics Format: /bounty add PlayerName money amount" },
            {"checkFormat", "Format: /bounty check PlayerName"},
            {"commands", "Commands" },
            {"noTop", "There are currently no top hunters" },
            {"playerBanned", "You are currently banned from adding/claiming a bounty" },
            {"noWanted", "There are currently no wanted players" }
        };
        #endregion

    }
}


// --- End of file: Bounty.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Everlight.cs ---
// --- Original Local Path: Everlight.cs ---

using System;

namespace Oxide.Plugins
{
    [Info("Everlight", ".legaCypowers", "1.0.0")]
    [Description("Disable the consumption of fuel on light items like Lantern")]

    class Everlight : RustPlugin
    {

        void Init()
        {
            Puts("Everlight by .legaCypowers");
        }

        void OnConsumeFuel(BaseOven oven, Item fuel, ItemModBurnable burnable)
		{
			if(oven.panelName == "Lantern"){
				fuel.amount++;
				
			}
		}

    }
}

// --- End of file: Everlight.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TPMenuSystem.cs ---
// --- Original Local Path: TPMenuSystem.cs ---

using System.Collections.Generic;
using UnityEngine;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("TPMenuSystem", "Sempai#3239", "5.0.0")]
    class TPMenuSystem : RustPlugin
    {
        #region Вар
        [PluginReference] Plugin ImageLibrary, TPRulesSystem, TPSkillSystem, TPWipeBlock, TPChat, TPKits, TPCases, TPStatsSystem, TPTeleportation, TPReportSystem, TPSkinMenu, TPBattlePass, GameStoresRUST, TPLotterySystem;

        public string Layer = "Menu_UI";

        Dictionary<ulong, bool> hidden = new Dictionary<ulong, bool>();
        Dictionary<ulong, string> activeButton = new Dictionary<ulong, string>();


        public class Settings {
            [JsonProperty("Название отображаемое в меню")] public string DisplayName;
            [JsonProperty("Выполняемая команда в меню")] public string Command;
            [JsonProperty("Изображение которое будет отображаться на кнопке")] public string Url;
        }
        #endregion

        #region Конфиг
        Configuration config;
        class Configuration 
        {
            [JsonProperty("Изображение беннера в окне с информацией")] public string BannerURL = "https://imgur.com/QqPL0jW.png";
            [JsonProperty("Первый заголовок в окне с информацией")] public string Title1 = "ДОБРО ПОЖАЛОВАТЬ НА RUSTFUN";
            [JsonProperty("Второй заголовок в окне с информацией")] public string Title2 = "ВНИМАНИЕ!";
            [JsonProperty("Первый текст с информацией")] public string Text1 = "Текст заполнитель - это текст, который имеет некоторые характеристики реального письменного текста, но является случайным набором слов или сгенерирован иным образом. Его можно использовать для отображения образца шрифтов, создание текста для тестирования или обхода.";
            [JsonProperty("Второй текст с информацией")] public string Text2 = "Есть много вариантов Lorem Ipsum, но большинство из них имеет не всегда приемлемые модификации, например, юмористические вставки или слова, которые даже отдалённо не напоминают латынь. Если вам нужны Lorem Ipsum для серьёзного проекта, вы наверняка не хотите кокой-нибудь шутки.";
            [JsonProperty("Заголовок донат магазина в окне с информацией")] public string ShopTitle = "ДОНАТ МАГАЗИН";
            [JsonProperty("Ссылка донат магазина в окне с информацией")] public string ShopText = "RUST.GOVNOSTORE.COM";
            [JsonProperty("QRCode изображение донат магазина в окне с информацией")] public string ShopQR = "https://imgur.com/2MruV7D.png";
            [JsonProperty("Заголовок дискорда в окне с информацией")] public string DSTitle = "НАШ ДИСКОРД";
            [JsonProperty("Ссылка на группу в дискорде в окне с информацией")] public string DSText = "RUST.GOVNOSTORE.COM";
            [JsonProperty("QRCode изображение дискорда в окне с информацией")] public string DSQR = "https://imgur.com/2MruV7D.png";
            [JsonProperty("Настройки навигации меню")] public List<Settings> settings;
            public static Configuration GetNewConfig() 
            {
                return new Configuration
                {
                    settings = new List<Settings>()
                    {
                        new Settings {
                            DisplayName = "Правила",
                            Command = "rules",
                            Url = "https://imgur.com/RRJLrbU.png"
                        },
                        new Settings {
                            DisplayName = "Скилы",
                            Command = "skill",
                            Url = "https://imgur.com/RRJLrbU.png"
                        },
                        new Settings {
                            DisplayName = "Вайп блок",
                            Command = "block",
                            Url = "https://imgur.com/Y1ic8fH.png"
                        },
                        new Settings {
                            DisplayName = "Наборы",
                            Command = "kit",
                            Url = "https://imgur.com/X06Pvj9.png"
                        },
                        new Settings {
                            DisplayName = "Кейсы",
                            Command = "case1",
                            Url = "https://imgur.com/IAW5SM6.png"
                        },
                        new Settings {
                            DisplayName = "Статистика",
                            Command = "stat",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                        new Settings {
                            DisplayName = "Телепортация",
                            Command = "teleport",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                        new Settings {
                            DisplayName = "Репорты",
                            Command = "report",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                        new Settings {
                            DisplayName = "Скины",
                            Command = "skin",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                        new Settings {
                            DisplayName = "Лотерея",
                            Command = "lot",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                        new Settings {
                            DisplayName = "Чаты",
                            Command = "Chat",
                            Url = "https://imgur.com/ONdAIJ4.png"
                        },
                    }
                };
            }
        }
        
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config?.settings == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfig();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        #region Хуки
        Dictionary<string, string> imageMenu = new Dictionary<string, string>() {
            ["backgroundhidden"] = "https://rustage.su/img/server/ui/menu_bg_hidden.png",
            ["backgroundshow"] = "https://rustage.su/img/server/ui/menu_bg.png",
            ["backgroundbutton"] = "https://rustage.su/img/server/ui/menu_bg_btn_small.png",
            ["backgroundtextbutton"] = "https://rustage.su/img/server/ui/menu_bg_text.png",
            ["hiddenarrow"] = "https://rustage.su/img/server/ui/hide-arrow.png",
            ["showarrow"] = "https://rustage.su/img/server/ui/show-arrow.png",
            ["textshow"] = "https://rustage.su/img/server/ui/menu_text_show.png",
            ["activeButton"] = "https://rustage.su/img/server/ui/menu_active_button.png",
            ["foninfo"] = "https://rustage.su/img/server/ui/mainscreen.png",
            ["commandinfo"] = "https://rustage.su/img/server/ui/modal_window.png",
        };
        void OnServerInitialized()
        {
            foreach (var check in imageMenu) {
                ImageLibrary.Call("AddImage", check.Value, check.Value);
            }
            foreach (var check in config.settings)
                ImageLibrary.Call("AddImage", check.Url, check.Url);

            ImageLibrary.Call("AddImage", config.BannerURL, "banner");
            ImageLibrary.Call("AddImage", config.ShopQR, "shopqr");
            ImageLibrary.Call("AddImage", config.DSQR, "dsqr");

            foreach (var check in BasePlayer.activePlayerList) 
                OnPlayerConnected(check);
        }

        void OnPlayerConnected(BasePlayer player) {
            if (!hidden.ContainsKey(player.userID))
                hidden[player.userID] = true;

            if (!activeButton.ContainsKey(player.userID))
                activeButton[player.userID] = "info";
        }
        #endregion

        #region Команды
        [ChatCommand("menu")]
        void ChatMenu(BasePlayer player) => MenuUI(player);

        [ChatCommand("info")]
        void ChatInfo(BasePlayer player) => MenuUI(player, "info");

        [ChatCommand("skill")]
        void ChatSkill(BasePlayer player) => MenuUI(player, "skill");

        [ChatCommand("block")]
        void ChatBlock(BasePlayer player) => MenuUI(player, "block");

        [ChatCommand("kits")]
        void ChatKit(BasePlayer player) => MenuUI(player, "kit");
                
        [ChatCommand("case")]
        void ChatCase(BasePlayer player) => MenuUI(player, "case");

        [ChatCommand("stat")]
        void ChatStat(BasePlayer player) => MenuUI(player, "stat");

        [ChatCommand("tpmenu")]
        void ChatTeleport(BasePlayer player) => MenuUI(player, "teleport");

        [ChatCommand("report")]
        void ChatReport(BasePlayer player) => MenuUI(player, "report");

        [ChatCommand("Chat")]
        void ChatChat(BasePlayer player) => MenuUI(player, "Chat");

        [ChatCommand("skin")]
        void ChatSkin(BasePlayer player) => MenuUI(player, "skin");
        
        [ChatCommand("lot")]
        void ChatLot(BasePlayer player) => MenuUI(player, "lot");

        [ConsoleCommand("hidden_menu")]
        void Hidden(ConsoleSystem.Arg args) {
            var player = args.Player();
            var hide = hidden[player.userID] == true ? false : true;
            hidden[player.userID] = hide;
            ButtonUI(player);
            MenuUI(player);
        }

        [ConsoleCommand("menu")]
        void ConsoleMenu(ConsoleSystem.Arg args) {
            var player = args.Player();
            activeButton[player.userID] = args.Args[0];
            ButtonUI(player);
            UI(player, args.Args[0]);
        }
        #endregion

        #region Интерфейс
        void MenuUI(BasePlayer player, string name = "")
        {
            if (name != "")
                activeButton[player.userID] = name;
            CuiHelper.DestroyUi(player, Layer);
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0.1", Material = "assets/content/ui/uibackgroundblur.mat", Sprite = "assets/content/ui/ui.background.transparent.radial.psd" }
            }, "Overlay", Layer);

            var anchormin = hidden[player.userID] == true ? "0.233" : "0.283";
            var anchormax = hidden[player.userID] == true ? "0.8" : "0.85";
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"{anchormin} 0.2", AnchorMax = $"{anchormax} 0.8", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.9" }
            }, Layer, ".Mains");

            CuiHelper.AddUi(player, container);
            ButtonUI(player);

            var command = name != "" ? name : activeButton[player.userID];
            UI(player, command);
        }

        void UI(BasePlayer player, string name) {
            CuiHelper.DestroyUi(player, "lay" + ".Main");
            CuiHelper.DestroyUi(player, "Rules_UI" + ".Main");
            CuiHelper.DestroyUi(player, "MainStats" + ".Main");
            CuiHelper.DestroyUi(player, "ui.kits" + ".Main");
            CuiHelper.DestroyUi(player, "TPMENULAYER");
            CuiHelper.DestroyUi(player, "TPMENULAYER1");
            CuiHelper.DestroyUi(player, "TPMENULAYER2");
            if (name == "info") {
                InfoUI(player);
            }
            if (name == "rules") {
                TPRulesSystem?.Call("RulesUI", player);
            }
            if (name == "skill") {
                TPSkillSystem?.Call("ShowMainUI", player);
            }
            if (name == "block") {
                TPWipeBlock?.Call("BlockUi", player);
            }
            if (name == "kit") {
                TPKits?.Call("InitilizeUI", player);
            }
            if (name == "case") {
                TPCases?.Call("DrawGui", player);
            }
            if (name == "stat") {
                TPStatsSystem?.Call("PlayerTopInfo", player, player.userID);
            }
            if (name == "teleport") {
                TPTeleportation?.Call("DDrawMenu", player);
            }
            if (name == "report") {
                TPReportSystem?.Call("ReportUI", player);
            }
            if (name == "Chat") {
                TPChat?.Call("InitializeInterface", player);
            }

            if (name == "skin") {
                TPSkinMenu?.Call("GUI", player);
            }
            if (name == "pass") {
                TPBattlePass?.Call("ShowUIMain", player, 0);
            }
            if (name == "store") {
                GameStoresRUST?.Call("InitializeStore", player, 0);
            }
            if (name == "lot") {
                TPLotterySystem?.Call("LotteryUI", player, 0);
            }
        }

        void ButtonUI(BasePlayer player) {
            CuiHelper.DestroyUi(player, Layer + ".Main");
            var container = new CuiElementContainer();

            var imagehidden = hidden[player.userID] == true ? imageMenu["backgroundhidden"] : imageMenu["backgroundshow"];
            var anchorhiddenmin = hidden[player.userID] == true ? "0.19" : "0.135";
            var anchorhiddenmax = hidden[player.userID] == true ? "0.22" : "0.27";
            container.Add(new CuiElement
            {
                Name = Layer + ".Main",
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imagehidden) },
                    new CuiRectTransformComponent { AnchorMin = $"{anchorhiddenmin} 0.19", AnchorMax = $"{anchorhiddenmax} 0.814", OffsetMax = "0 0" }
                }
            });

            var imagebgarrow = hidden[player.userID] == true ? imageMenu["backgroundbutton"] : imageMenu["textshow"];
            var anchorbgarrowmin = hidden[player.userID] == true ? "0.15" : "0.04";
            var anchorbgarrowmax = hidden[player.userID] == true ? "0.85" : "0.96";
            container.Add(new CuiElement
            {
                Name = "Hidden",
                Parent = Layer + ".Main",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imagebgarrow) },
                    new CuiRectTransformComponent { AnchorMin = $"{anchorbgarrowmin} 0.015", AnchorMax = $"{anchorbgarrowmax} 0.075", OffsetMax = "0 0" }
                }
            });

            var imagearrow = hidden[player.userID] == true ? imageMenu["hiddenarrow"] : imageMenu["showarrow"];
            var anchorarrow = hidden[player.userID] == true ? "1" : "0.18";
            container.Add(new CuiElement
            {
                Parent = "Hidden",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imagearrow)},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = $"{anchorarrow} 1", OffsetMin = "9.2 9.2", OffsetMax = "-9.2 -9.2" }
                }
            });

            if (hidden[player.userID] == false) {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.19 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0" },
                    Text = { Text = "Свернуть", Color = "1 1 1 0.4", FontSize = 12, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf" }
                }, "Hidden");
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Button = { Command = "hidden_menu", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, "Hidden");

            var anchorbutton = hidden[player.userID] == true ? 1f : 0.225f;
            float width = anchorbutton, height = 0.075f, startxBox = 0.005f, startyBox = 0.99f - height, xmin = startxBox, ymin = startyBox;
            foreach (var check in config.settings)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = xmin + " " + ymin, AnchorMax = (xmin + width) + " " + (ymin + height * 1), OffsetMax = "0 0" },
                    Button = { Color = "1 1 1 0", Command = $"menu {check.Command}" },
                    Text = { Text = "" }
                }, Layer + ".Main", "Button");

                container.Add(new CuiElement
                {
                    Name = "ButtonImage",
                    Parent = "Button",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imageMenu["backgroundbutton"]) },
                        new CuiRectTransformComponent { AnchorMin = "0.15 0.1", AnchorMax = "0.85 0.9", OffsetMax = "0 0" }
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = "ButtonImage",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", check.Url) },
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "9.2 9.2", OffsetMax = "-9.2 -9.2" }
                    }
                });

                var color = activeButton[player.userID] == check.Command ? "1 1 1 1" : "0 0 0 0";
                container.Add(new CuiElement
                {
                    Parent = "ButtonImage",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imageMenu["activeButton"]), Color = color },
                        new CuiRectTransformComponent { AnchorMin = "-0.15 0.2", AnchorMax = "-0.06 0.8", OffsetMax = "0 0" }
                    }
                });

                if (hidden[player.userID] == false) {
                    container.Add(new CuiElement
                    {
                        Name = "Button" + "Text",
                        Parent = "Button",
                        Components =
                        {
                            new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", imageMenu["backgroundtextbutton"]) },
                            new CuiRectTransformComponent { AnchorMin = "0.7 0", AnchorMax = "4.45 1", OffsetMin = "9.2 3.9", OffsetMax = "-9.2 -3.9" }
                        }
                    });

                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.08 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Button = { Color = "0 0 0 0", Command = $"menu {check.Command}" },
                        Text = { Text = check.DisplayName, Color = "1 1 1 0.4", FontSize = 12, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf" }
                    }, "Button" + "Text");
                }

                xmin += width;
                if (xmin + width >= 0)
                {
                    xmin = startxBox;
                    ymin -= height;
                }
            }

            CuiHelper.AddUi(player, container);
        }

        void InfoUI(BasePlayer player) {
            var container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = "lay" + ".Main",
                Parent = ".Mains",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", imageMenu["foninfo"]) },
                    new CuiRectTransformComponent { AnchorMin = "-0.315 -0.27", AnchorMax = "1.3 1.275", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8 0.804", AnchorMax = "0.817 0.832" },
                Button = { Close = "Menu_UI", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, "lay" + ".Main");

            container.Add(new CuiElement
            {
                Parent = "lay" + ".Main",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "banner") },
                    new CuiRectTransformComponent { AnchorMin = "0.244 0.615", AnchorMax = "0.76 0.79", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.406 0.554", AnchorMax = "0.5967 0.592", OffsetMax = "0 0" },
                Text = { Text = config.Title1, Color = "1 1 1 0.4", FontSize = 13, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.25 0.47", AnchorMax = "0.755 0.55", OffsetMax = "0 0" },
                Text = { Text = config.Text1, Color = "1 1 1 0.3", FontSize = 12, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.45 0.43", AnchorMax = "0.5505 0.468", OffsetMax = "0 0" },
                Text = { Text = config.Title2, Color = "1 1 1 0.4", FontSize = 13, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.25 0.35", AnchorMax = "0.755 0.425", OffsetMax = "0 0" },
                Text = { Text = config.Text2, Color = "1 1 1 0.4", FontSize = 12, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.3285 0.27", AnchorMax = "0.429 0.308", OffsetMax = "0 0" },
                Text = { Text = config.ShopTitle, Color = "1 1 1 0.4", FontSize = 12, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.3285 0.19", AnchorMax = "0.45 0.265", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0" }
            }, "lay" + ".Main", "ShopText");

            container.Add(new CuiElement
            {
                Parent = "ShopText",
                Components =
                {
                    new CuiInputFieldComponent { Text = config.ShopText, Color = "1 1 1 0.3", Align = TextAnchor.UpperCenter, FontSize = 12, Font = "robotocondensed-bold.ttf"},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiElement
            {
                Parent = "lay" + ".Main",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "shopqr") },
                    new CuiRectTransformComponent { AnchorMin = "0.259 0.203", AnchorMax = "0.3148 0.299", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.59 0.27", AnchorMax = "0.69 0.308", OffsetMax = "0 0" },
                Text = { Text = config.DSTitle, Color = "1 1 1 0.4", FontSize = 12, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf" }
            }, "lay" + ".Main");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.59 0.19", AnchorMax = "0.708 0.265", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0" }
            }, "lay" + ".Main", "DSText");

            container.Add(new CuiElement
            {
                Parent = "DSText",
                Components =
                {
                    new CuiInputFieldComponent { Text = config.DSText, Color = "1 1 1 0.3", Align = TextAnchor.UpperCenter, FontSize = 12, Font = "robotocondensed-bold.ttf"},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiElement
            {
                Parent = "lay" + ".Main",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "dsqr") },
                    new CuiRectTransformComponent { AnchorMin = "0.521 0.203", AnchorMax = "0.576 0.299", OffsetMax = "0 0" },
                }
            });

            CuiHelper.AddUi(player, container);
        }
        #endregion 
    }
}

// --- End of file: TPMenuSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Metabolism.cs ---
// --- Original Local Path: Metabolism.cs ---

using System;using UnityEngine;
namespace Oxide.Plugins
{
    [Info("Metabolism", "Wulf/lukespragg", "2.3.1", ResourceId = 680)]
    [Description("Modifies player metabolism stats and rates")]

    class Metabolism : RustPlugin
    {
        #region Configuration

        const string permAllow = "metabolism.allow";
        bool usePermissions;
        float caloriesLossRate;
        float caloriesSpawnValue;
        float healthGainRate;
        float healthSpawnValue;
        float hydrationLossRate;
        float hydrationSpawnValue;

        protected override void LoadDefaultConfig()
        {
            Config["CaloriesLossRate"] = caloriesLossRate = GetConfig("CaloriesLossRate", 0.03f);
            Config["CaloriesSpawnValue"] = caloriesSpawnValue = GetConfig("CaloriesSpawnValue", 500f);
            Config["HealthGainRate"] = healthGainRate = GetConfig("HealthGainRate", 0.03f);
            Config["HealthSpawnValue"] = healthSpawnValue = GetConfig("HealthSpawnValue", 100f);
            Config["HydrationLossRate"] = hydrationLossRate = GetConfig("HydrationLossRate", 0.03f);
            Config["HydrationSpawnValue"] = hydrationSpawnValue = GetConfig("HydrationSpawnValue", 250f);
            Config["UsePermissions"] = usePermissions = GetConfig("UsePermissions", false);
            SaveConfig();
        }

        void Init()        {            LoadDefaultConfig();
            permission.RegisterPermission(permAllow, this);        }        #endregion

        #region Modify Metabolism

        void Metabolize(BasePlayer player)
        {
            player.health = healthSpawnValue;
            player.metabolism.calories.value = caloriesSpawnValue;
            player.metabolism.hydration.value = hydrationSpawnValue;
        }

        void OnPlayerRespawned(BasePlayer player) => Metabolize(player);        void OnRunPlayerMetabolism(PlayerMetabolism m, BaseCombatEntity entity)
        {
            var player = entity.ToPlayer();
            if (player == null) return;
            if (usePermissions && !permission.UserHasPermission(player.UserIDString, permAllow))

            player.health = Mathf.Clamp(player.health + healthGainRate, 0f, 100f);
            m.calories.value = Mathf.Clamp(m.calories.value - caloriesLossRate, m.calories.min, m.calories.max);
            m.hydration.value = Mathf.Clamp(m.hydration.value - hydrationLossRate, m.hydration.min, m.hydration.max);
        }

        #endregion

        T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));
    }
}


// --- End of file: Metabolism.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BBank.cs ---
// --- Original Local Path: BBank.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    using SteamID = System.UInt64;
    [Info("Fucking Bank (BBank)", "bazuka5801", "1.0.0")]
    public class BBank : RustPlugin
    {
        #region [Section] Config

        private float NPC_Radius = 3f;
        
        private const int Hour = 3600;

        private const int CardCount = 3;

        enum CardType
        {
            Silver = 0,
            Gold = 1,
            Premium = 2
        }
        
        class CardConfig
        {
            public string Name;
            public int SecondsToUpgrade;
            public string CostItemShortname;
            public int CostItemAmount;
            public float AmountPercent;
            public float TimePercent;
            public int MaxItemAmount;
        }

        static Dictionary<CardType, CardConfig> Cards = new Dictionary<CardType, CardConfig>()
        {
            [CardType.Silver] = new CardConfig()
            {
                Name = "Silver",
                SecondsToUpgrade = 3 * Hour,
                AmountPercent = 15f,
                CostItemShortname = "sulfur",
                CostItemAmount = 2000,
                MaxItemAmount = 5000,
                TimePercent = 8 * Hour,
            },
            [CardType.Gold] = new CardConfig()
            {
                Name = "Gold",
                SecondsToUpgrade = 6 * Hour,
                AmountPercent = 25f,
                CostItemShortname = "sulfur",
                CostItemAmount = 5000,
                MaxItemAmount = 10000,
                TimePercent = 8 * Hour,
            },
            [CardType.Premium] = new CardConfig()
            {
                Name = "Platinum",
                SecondsToUpgrade = 10 * Hour,
                AmountPercent = 50f,
                CostItemShortname = "sulfur",
                CostItemAmount = 10000,
                MaxItemAmount = 15000,
                TimePercent = 8 * Hour,
            },
        };

        static CardConfig GetCardConfig(CardType type)
        {
            return Cards[type];
        }

        #endregion
        #region [Section] Hooks

        void OnServerInitialized()
        {
            UploadImages();
            LoadData();
            timer.Every(1f, TimeTracker_Tick);
            BasePlayer.activePlayerList.ForEach(ShowGUI_Icon);
        }

        void Unload()
        {
            SaveData();
        }

        void OnServerSave()
        {
            SaveData();
        }

        object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity && entity.net.ID == Data.NPCID)
            {
                return true;
            }
            return null;
        }

        void OnPlayerInit(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                timer.Once(0.1f, () => OnPlayerInit(player));
                return;
            }
            
            ShowGUI_Icon(player);
        }

        #endregion

        #region [Section] Core

        void TimeTracker_Tick()
        {
            BasePlayer.activePlayerList.ForEach((player) =>
            {
                GetData(player).TimeTracker_Tick(player);
            });
        }

        #region [Method] SpawnNPC

        [ChatCommand("spawnnpc")]
        void SpawnNPC(BasePlayer player)
        {
            if (player.IsAdmin == false)
            {
                return;
            }
            
            if (Data.NPCID > 0)
            {
                var ent = BaseNetworkable.serverEntities.Find(Data.NPCID);
                if (ent && ent.IsDestroyed == false)
                {
                    ent.Kill();
                    player.ChatMessage("<color=#FF0000>Банк:</color> <color=#00FFFF>Предыдущий NPC уничтожен!</color>");
                }
            }
            RaycastHit hit;
            if (Physics.Raycast(player.eyes.HeadRay(), out hit))
            {
                var ent = GameManager.server.CreateEntity("assets/prefabs/player/player.prefab", hit.point);
                ent.Spawn();
                Data.NPCID = ent.net.ID;
                Data.NPCPosition = ent.transform.position;
                player.ChatMessage("<color=#FF0000>Банк:</color> <color=#00FFFF>NPC успешно установлен!</color>");
            }
        }
        #endregion
        
        #region [Methods] BoxOpenning

        Dictionary<SteamID, BBankBox> boxesDB = new Dictionary<ulong, BBankBox>();
        
        void OpenLoot(BasePlayer player)
        {
            var box = BBankBox.Spawn(player, "Банковская ячейка (Перетащите сюда свой ресурс)");
            boxesDB[player.userID] = box;
            var pData = GetData(player);
            if (pData.Amount > 0 && string.IsNullOrEmpty(pData.Shortname).Equals(false))
            {
                box.Push(new List<Item>()
                {
                    ItemManager.CreateByPartialName(pData.Shortname, pData.GetAmountWithBonus())
                });
            }

            box.StartLoot();
        }

        void OnSaveLoot(BBankBox box, BasePlayer player)
        {
            var pData = GetData(player);
            
            var items = box.GetItems;
            if (items.Count > 0)
            {
                var item = items[0];
                pData.OnItemChanged(player, item);
            }
            else
            {
                pData.Amount = 0;
                pData.Shortname = "";
            }
            box.ClearItems();
            box.Close();
        }

        #endregion

        #region [Method] IsNPCNear

        bool IsNPCNear(BasePlayer player)
        {
            return Vector3.Distance(player.transform.position, Data.NPCPosition) < NPC_Radius;
        }
        
        #endregion
        
        #endregion

        #region [Section] Commands

        [ConsoleCommand("bbank.menu")]
        void cmdMenu(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null)
                return;

            if (IsNPCNear(player))
            {
                ShowGUI_Menu(player, GetData(player));
                return;
            }
            
            player.ChatMessage("<color=#FF0000>Вам нужно добраться до банкира!</color>");
        }
        
        [ConsoleCommand("bbank.open")]
        void cmdOpen(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null)
                return;

            if (IsNPCNear(player))
            {
                DestroyGUI_Menu(player);
                OpenLoot(player);
                return;
            }
            
            player.ChatMessage("<color=#FF0000>Вам нужно добраться до банкира!</color>");
        }
        [ConsoleCommand("bbank.upgrade")]
        void cmdUpgrade(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null)
                return;

            if (IsNPCNear(player))
            {
                if (GetData(player).CardUpgrade(player))
                {
                    ShowGUI_Menu(player, GetData(player));
                }
                return;
            }
            
            player.ChatMessage("<color=#FF0000>Вам нужно добраться до банкира!</color>");
        }
        [ConsoleCommand("bbank.addtime")]
        void cmdAddTime(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null)
                return;
            
            if (player.IsAdmin == false)
                return;

            GetData(player).PlayingSeconds += 2 * Hour;
            GetData(player).DepositSeconds += 2 * Hour;
            player.ChatMessage("<color=#FF0000>Депутат:</color> <color=#00FFFF>Вам начислено 2 часа игры!</color>");
        }
        #endregion

        #region [Section] Data
        
        BBankData Data;

        class BBankData
        {
            public Dictionary<SteamID, BankAccountData> Accounts;
            public HashSet<string> CardNumberList;
            
            public Vector3 NPCPosition = new Vector3(0,0,0);
            public uint NPCID = 0;
            
            public BBankData()
            {
                Accounts = new Dictionary<ulong, BankAccountData>();
                CardNumberList = new HashSet<string>();
            }
        }
        
        class BankAccountData
        {
            public SteamID UserID;
            public string CardNumber;
            public string Shortname = "";

            public CardType CardType = 0;
            public int Amount = 0;
            public int PlayingSeconds = 0;
            public int DepositSeconds = 0;

            public bool NewCardAvailable = false;

            public CardConfig CardConfig => GetCardConfig(CardType);
            public bool IsLastCard => CardCount == (int) CardType + 1;

            public BankAccountData(SteamID steamid, string cardNumber)
            {
                this.UserID = steamid;
                this.CardNumber = cardNumber;
            }

            public int GetAmountWithBonus()
            {
                return Amount * (1 + Mathf.FloorToInt((float) DepositSeconds / CardConfig.TimePercent));
            }
            
            public int GetNextBonus()
            {
                return Amount;
            }

            public int GetNextBonusSeconds()
            {
                float time = DepositSeconds;
                while (time > CardConfig.TimePercent)
                {
                    time -= CardConfig.TimePercent;
                }

                return (int)(CardConfig.TimePercent - time);
            }

            public void TimeTracker_Tick(BasePlayer player)
            {
                PlayingSeconds++;
                DepositSeconds++;
                if (NewCardAvailable == false && IsLastCard == false && GetCardConfig(CardType + 1).SecondsToUpgrade < PlayingSeconds)
                {
                    player.ChatMessage("<color=#FF0000>Банк:</color> <color=#00FFFF>Доступна новая карта</color>");
                    NewCardAvailable = true;
                }
            }

            public bool CardUpgrade(BasePlayer player)
            {
                if (IsLastCard)
                {
                    player.ChatMessage($"<color=#FF0000>Банк:</color> <color=#00FFFF>У вас и так самая лучшая карта!</color>");
                    return false;
                }
                var newCardConfig = GetCardConfig(CardType + 1);
                
                if (NewCardAvailable == false)
                {
                    var remainTime = newCardConfig.SecondsToUpgrade - PlayingSeconds;
                    player.ChatMessage($"<color=#FF0000>Банк:</color> <color=#00FFFF>Улучшение карты будет доступно через {FormatTime(TimeSpan.FromSeconds(remainTime), 2)}</color>");
                    return false;
                }
                var costitem = ItemManager.FindItemDefinition(newCardConfig.CostItemShortname);
                var itemid = costitem.itemid;
                var remain = newCardConfig.CostItemAmount - player.inventory.GetAmount(itemid); 
                if (remain > 0)
                {
                    player.ChatMessage($"<color=#FF0000>Банк: Нехватает {remain} {costitem.shortname}!</color>");
                    return false;
                }

                List<Item> collectedItems = new List<Item>();
                player.inventory.Take(collectedItems, itemid, newCardConfig.CostItemAmount);
                collectedItems.ForEach(i=>i.Remove());

                player.ChatMessage($"<color=#FF0000>Банк:</color> <color=#00FFFF>Ваша карта успешно улучшена до {newCardConfig.Name}</color>");
                
                CardType++;
                NewCardAvailable = false;
                return true;
            }

            public void OnItemChanged(BasePlayer player, Item item)
            {
                if (item.info.shortname != Shortname || item.amount != GetAmountWithBonus())
                {
                    if (item.amount > CardConfig.MaxItemAmount)
                    {
                        var retAmount = item.amount - CardConfig.MaxItemAmount;
                        player.inventory.GiveItem(item.SplitItem(retAmount));
                        player.ChatMessage($"<color=#FF0000>Банк:</color> <color=#00FFFF>Ресурсы не вместились!\n </color>" +
                                           $"<color=#FF0000>Банк:</color> <color=#00FFFF>Макс. вместимость {CardConfig.Name} карты - {CardConfig.MaxItemAmount}\n </color>" +
                                           $"<color=#FF0000>Банк:</color> <color=#00FFFF>Возвращено {retAmount} {item.info.shortname} </color>");
                    }

                    Amount = item.amount;
                    Shortname = item.info.shortname;
                    DepositSeconds = 0;
                    item.Remove(0);
                }
            }
        }

        void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile("BBank.Data") == false)
                Interface.Oxide.DataFileSystem.WriteObject("BBank.Data", new BBankData());
            Data = Interface.Oxide.DataFileSystem.ReadObject<BBankData>("BBank.Data");
            if (Data == null)
                Data = new BBankData();
        }

        void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject("BBank.Data", Data);
        }

        BankAccountData GetData(BasePlayer player)
        {
            BankAccountData account;
            if (Data.Accounts.TryGetValue(player.userID, out account))
                return account;

            string cardNum;
            do
            {
                cardNum = CardNumber();
            } while (Data.CardNumberList.Contains(cardNum));
            
            return Data.Accounts[player.userID] = new BankAccountData(player.userID, cardNum);
        }
        
        #endregion

        #region [Section] Helpers

        #region [Class] StorageBox
        public class BBankBox : MonoBehaviour
        {

            LootableCorpse corpse;
            BasePlayer owner;

            public void Init( LootableCorpse storage, BasePlayer owner )
            {
                this.corpse = storage;
                this.owner = owner;
            }

            public static BBankBox Spawn( BasePlayer player, string name, int size = 1)
            {
                player.EndLooting();
                var storage = SpawnContainer( player, size, name );
                var box = storage.gameObject.AddComponent<BBankBox>();
                box.Init( storage, player );
                return box;
            } 

            static int rayColl = LayerMask.GetMask( "Construction", "Deployed", "Tree", "Terrain", "Resource", "World", "Water", "Default", "Prevent Building" );

            public static LootableCorpse SpawnContainer( BasePlayer player, int size, string name )
            {
                var entity = GameManager.server.CreateEntity("assets/prefabs/player/player_corpse.prefab") as BaseCorpse;
                if (entity == null) return null;
                entity.parentEnt = null;
                entity.transform.position = new Vector3(player.transform.position.x, -300, player.transform.position.z);
                entity.CancelInvoke(nameof(BaseCorpse.RemoveCorpse));

                var corpse = entity as LootableCorpse;
                if (corpse == null) return null;

                ItemContainer container = new ItemContainer { playerOwner = player };
                container.ServerInitialize(null, size);
                if ((int)container.uid == 0)
                    container.GiveUID();

                corpse.containers = new ItemContainer[1];
                corpse.containers[0] = container;
                corpse.containers[0].playerOwner = player;

                corpse.playerName = name;
                corpse.lootPanelName = "generic";
                corpse.playerSteamID = 0;
                corpse.enableSaving = false;

                corpse.Spawn();
                corpse.GetComponentInChildren<Rigidbody>().useGravity = false;
                return corpse;
            }

            private void PlayerStoppedLooting( BasePlayer player )
            {
                Interface.Oxide.RootPluginManager.GetPlugin( "BBank" ).Call( "OnSaveLoot",  this, player);
            }

            public void Close()
            {
                for (var i = corpse.children.Count - 1; i >= 0; i--)
                {
                    corpse.children[i].Kill();
                }
                ClearItems();

                // bypass ItemContainer.Drop
                corpse.containers = null;
                corpse.Kill(); 
                if (this)
                UnityEngine.Object.Destroy(this);
            }

            public void StartLoot()
            {
                var panel = corpse.lootPanelName;
                corpse.lootPanelName = "generic";
                corpse.SetFlag(BaseEntity.Flags.Open, true, false);
                owner.inventory.loot.StartLootingEntity(corpse, false);
                owner.inventory.loot.AddContainer(corpse.containers[0]);
                owner.inventory.loot.SendImmediate();
                owner.ClientRPCPlayer(null, owner, "RPC_OpenLootPanel", "generic");
                corpse.SendNetworkUpdate();
            }

            public void Push( List<Item> items )
            {
                for (int i = items.Count - 1; i >= 0; i--)
                    items[ i ].MoveToContainer( corpse.containers[0] );
            }

            public void ClearItems()
            {
                for (var i = corpse.containers[0].itemList.Count - 1; i >= 0; i--)
                {
                    corpse.containers[0].itemList[i].Remove();
                }
            }

            public List<Item> GetItems => corpse.containers[0].itemList.Where( i => i != null ).ToList();

        }
        #endregion

        #region [Random]

        public static string CardNumber()
        {
            return $"{RandomNum(4, false)} {RandomNum(4, true)} {RandomNum(4, true)} {RandomNum(4, true)}";
        }
        public static string RandomNum(int length, bool withZero)
        {
            string chars = "123456789";
            if (withZero)
                chars += "0";
            return new string(Enumerable.Repeat(chars, length)
                .Select(s => s[UnityEngine.Random.Range(0,s.Length-1)]).ToArray());
        }

        #endregion

        #region [Method] FormatTime
        public static string FormatTime(TimeSpan time, int maxSubstr = 5, string language = "ru", bool @short = false)
        {
            string result = string.Empty;
            switch (language)
            {
                case "ru":
                    int i = 0;
                    if (time.Days != 0 && i < maxSubstr)
                    {
                        if (!string.IsNullOrEmpty(result))
                            result += " ";
                        
                        result += (@short ? $"{time.Days}дн." : Format(time.Days, "дней", "дня", "день"));
                        i++;
                    }

                    if (time.Hours != 0 && i < maxSubstr)
                    {
                        if (!string.IsNullOrEmpty(result))
                            result += " ";

                        result += (@short ? $"{time.Hours}ч." : Format(time.Hours, "часов", "часа", "час"));
                        i++;
                    }

                    if (time.Minutes != 0 && i < maxSubstr)
                    {
                        if (!string.IsNullOrEmpty(result))
                            result += " ";

                        result += (@short ? $"{time.Minutes}м." : Format(time.Minutes, "минут", "минуты", "минута" ));
                        i++;
                    }

                    if (time.Seconds != 0 && i < maxSubstr)
                    {
                        if (!string.IsNullOrEmpty(result))
                            result += " ";

                        result += (@short ? $"{time.Seconds}c." : Format(time.Seconds, "секунд", "секунды", "секунда"));
                        i++;
                    }

                        break;
                case "en":
                    result = string.Format( "{0}{1}{2}{3}",
                        time.Duration().Days > 0 ? $"{time.Days:0} day{( time.Days == 1 ? String.Empty : "s" )}, " : string.Empty,
                        time.Duration().Hours > 0 ? $"{time.Hours:0} hour{( time.Hours == 1 ? String.Empty : "s" )}, " : string.Empty,
                        time.Duration().Minutes > 0 ? $"{time.Minutes:0} minute{( time.Minutes == 1 ? String.Empty : "s" )}, " : string.Empty,
                        time.Duration().Seconds > 0 ? $"{time.Seconds:0} second{( time.Seconds == 1 ? String.Empty : "s" )}" : string.Empty );

                    if (result.EndsWith( ", " )) result = result.Substring( 0, result.Length - 2 );

                    if (string.IsNullOrEmpty( result )) result = "0 seconds";
                    break;
            }
            return result;
        }
        
        private static string Format( int units, string form1, string form2, string form3 )
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units} {form1}";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2}";

            return $"{units} {form3}";
        }

        #endregion

        #endregion

        #region [Section] GUI

        private const string GUI_MENU = "[{\"name\":\"bbank_gui\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bbank_gui\",\"color\":\"1 1 1 0\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_panel\",\"parent\":\"bbank_gui\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\",\"png\":\"{png}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0.5\",\"anchormax\":\"0.5 0.5\",\"offsetmin\":\"-128 -128\",\"offsetmax\":\"128 128\"}]},{\"name\":\"bbank_money\",\"parent\":\"bbank_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{money}\",\"fontSize\":24,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleLeft\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2265625 0.4843751\",\"anchormax\":\"0.9817706 0.6223959\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_cardnum\",\"parent\":\"bbank_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{cardnum}\",\"fontSize\":15,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2109373 0.333334\",\"anchormax\":\"0.7760416 0.4713562\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_username\",\"parent\":\"bbank_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{username}\",\"fontSize\":18,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2109373 0.1927092\",\"anchormax\":\"0.7760416 0.3307311\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_upgrade\",\"parent\":\"bbank_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.03645841 0.06770828\",\"anchormax\":\"0.393229 0.1927082\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_upgrade_text\",\"parent\":\"bbank_upgrade\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Улучшить\",\"fontSize\":18,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleCenter\",\"color\":\"0.5019608 0.7294118 0.4039216 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0.7921569 0.01960784 0.01960784 1\",\"distance\":\"0.4 -0.4\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_upgrad_btn\",\"parent\":\"bbank_upgrade\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"bbank.upgrade\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_open\",\"parent\":\"bbank_panel\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5989584 0.06770828\",\"anchormax\":\"0.9557267 0.1927082\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_open_text\",\"parent\":\"bbank_open\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Открыть\",\"fontSize\":18,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleCenter\",\"color\":\"0.6202191 0.5499281 0.5499281 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0.3583119 0 0 1\",\"distance\":\"0.4 -0.4\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"bbank_open_btn\",\"parent\":\"bbank_open\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"bbank.open\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]}]";
        private const string GUI_ICON = "[{\"name\":\"bbank_icon\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"$\",\"fontSize\":24,\"font\":\"robotocondensed-bold.ttf\",\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 1\",\"anchormax\":\"0 1\",\"offsetmin\":\"0 -80\",\"offsetmax\":\"60 -40\"}]},{\"name\":\"bbank_icon_btn\",\"parent\":\"bbank_icon\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"bbank.menu\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";

        void ShowGUI_Icon(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "bbank_icon");
            CuiHelper.AddUi(player, GUI_ICON);
        }
        void ShowGUI_Menu(BasePlayer player, BankAccountData accountData)
        {
            CuiHelper.DestroyUi(player, "bbank_gui");
            CuiHelper.AddUi(player, GUI_MENU
                .Replace("{png}", (string)ImageLibrary.Call("GetImage", ImageData.Keys.ElementAt((int)accountData.CardType)))
                .Replace("{cardnum}", accountData.CardNumber)
                .Replace("{money}", $"{accountData.GetAmountWithBonus()} + <size=12>{accountData.GetNextBonus()}({FormatTime(TimeSpan.FromSeconds(accountData.GetNextBonusSeconds()), 2, @short: true)})</size>")
                .Replace("{username}", player.displayName));
        }

        void DestroyGUI_Menu(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "bbank_gui");
        }

        #endregion


        #region [Methods] ImageLibrary
        
        [PluginReference] private Plugin ImageLibrary;

        private static Dictionary<string, string> ImageData = new Dictionary<string, string>()
        {
            ["bbank.card.silver"]   = "https://i.imgur.com/sqrINPa.png",
            ["bbank.card.gold"]     = "https://i.imgur.com/f2WzVDK.png",
            ["bbank.card.platinum"] = "https://i.imgur.com/kjd2T6H.png",
        };
        
        private int LoadedImages = 0;

        private bool IsLoadedImages()
        {
            return LoadedImages == ImageData.Count;
        }
        
        void UploadImages()
        {
			if (!ImageLibrary)
            {
                PrintError("ImageLibrary not found! Download from Umod.org");
                return;
            }
            foreach (var image in ImageData)
            {
                ImageLibrary.Call("AddImage", image.Value, image.Key, (ulong)0, (Action)(() => LoadedImages++ ));
            }
        }

        #endregion
    }
}

// --- End of file: BBank.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SuperMedkit-1.0.0.cs ---
// --- Original Local Path: SuperMedkit-1.0.0.cs ---

﻿using System;
using System.Linq;
using UnityEngine;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Plugins;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("SuperMedkit", "chhhh", "1.0.0")]
    class SuperMedkit : RustPlugin
    {                		
	
        #region Variables
		
		private const string BloodItemName = "blood";
		private const string MedkitItemName = "largemedkit";
		private static HashSet<ResourceDispenser> GivenAnimals = new HashSet<ResourceDispenser>();
		private static Dictionary<ulong, double> Cooldown = new Dictionary<ulong, double>();
		
		#endregion
		
		#region Hooks
		
		private void Init() => LoadVariables();
		
		private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {			
            if (dispenser == null || entity == null || item == null) return;

			if (configData.BloodRates.ContainsKey(item.info.shortname) && !GivenAnimals.Contains(dispenser))			
			{
				BasePlayer player = entity.ToPlayer();
				if (player == null) return;				
				GiveBlood(player, configData.BloodRates[item.info.shortname]);
				GivenAnimals.Add(dispenser);
			}
		}
		
		private object OnItemSplit(Item item, int split_Amount)
        {
            if (item.info.shortname == BloodItemName)
            {
				var byItemId = ItemManager.CreateByName(BloodItemName, 1);				
                byItemId.amount = split_Amount;
                byItemId.name = item.name;
				item.amount -= split_Amount;
                item.MarkDirty();
                return byItemId;
            }
			
			if (item.info.shortname == MedkitItemName && item.skin == configData.SuperMedkitSkin)
            {
				var byItemId = ItemManager.CreateByName(MedkitItemName, 1, configData.SuperMedkitSkin);				
                byItemId.amount = split_Amount;
                byItemId.name = item.name;
				item.amount -= split_Amount;
                item.MarkDirty();
                return byItemId;
            }
			
            return null;
        }
		
		private object CanStackItem(Item item, Item anotherItem)
        {
            if (item.info.shortname == MedkitItemName && item.skin != anotherItem.skin) return false;
            return null;
        }        

        private object CanCombineDroppedItem(DroppedItem drItem, DroppedItem anotherDrItem)
        {
            if (drItem.item.info.shortname == MedkitItemName && drItem.item.info.itemid == anotherDrItem.item.info.itemid && drItem.item.skin != anotherDrItem.item.skin) return false;
            return null;
        }
		
		private bool? CanMoveItem(Item item, PlayerInventory playerLoot, uint targetContainer, int targetSlot, int amount)
        {
            if (item == null || playerLoot == null) return null;
            var player = playerLoot.containerMain.playerOwner;
            if (player == null) return null;
			
            if (item.info.shortname == BloodItemName)
            {
                var container = playerLoot.FindContainer(targetContainer);
                if (container != null)
                {
                    var getItem = container.GetSlot(targetSlot);
                    if (getItem != null && getItem.info.shortname == MedkitItemName)
                    {
						if (getItem.amount > getItem.info.stackable)
						{
							SendReply(player, "Расстакайте аптечки, прежде чем их улучшать!");
							return null;
						}
						
						if (ChangeItem(getItem))						
						{
							Effect.server.Run("assets/prefabs/misc/xmas/presents/effects/wrap.prefab", player, 0, Vector3.zero, Vector3.forward);
							item.UseItem();
							player.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
							return false;
						}
                    }
                }
            }
			
			return null;
        }
		
		private object OnItemAction(Item item, string action, BasePlayer player)
        {
            if (item == null || player == null) return null;
            if (action == "consume" && item.info.shortname == MedkitItemName && item.skin == configData.SuperMedkitSkin)
            {
                if (!Cooldown.ContainsKey(player.userID))
                    Cooldown.Add(player.userID, GrabCurrentTime() + 1);
                else 
					if (Cooldown[player.userID] > GrabCurrentTime()) 
						return false;
                
				var consumable = item.info.GetComponent<ItemModConsumable>();
								
				item.UseItem();
				if (consumable != null)
				{					
					foreach (ItemModConsumable.ConsumableEffect effect in consumable.effects)
					{
						if (effect.type != MetabolismAttribute.Type.Health)						
						{							
							player.metabolism.ApplyChange(effect.type, effect.amount, effect.time);
							
							if (effect.type.ToString() == "HealthOverTime")
							{
								player.metabolism.ApplyChange(effect.type, effect.amount, effect.time);
								player.metabolism.ApplyChange(effect.type, effect.amount, effect.time);
							}							
						}
						else													
							player.health += effect.amount;
					}
				}
								
                player.health += 50;
                player.SendNetworkUpdate();
                //Effect.server.Run("assets/bundled/prefabs/fx/gestures/take_pills.prefab", player, 0, Vector3.zero, Vector3.forward);
                Cooldown[player.userID] = GrabCurrentTime() + 10;
                
				return false;
            }
			
            return null;
        }
		
		#endregion
		
		#region Main
		
		private bool ChangeItem(Item item)
		{
			if (item == null)  return false;
			
			item.skin = configData.SuperMedkitSkin;
			item.name = configData.SuperMedkitName;
			item.MarkDirty();
			
			return true;
		}
		
		private void GiveBlood(BasePlayer player, int amount)
		{
			var item = ItemManager.CreateByName(BloodItemName, amount);
            item.name = configData.BloodName;
            player.GiveItem(item);
		}
		
		private double GrabCurrentTime() => DateTime.UtcNow.ToLocalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
		
		#endregion
		
		#region Commands
		
		[ChatCommand("sm_give")]
        private void CommandGive(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;            			
			
			GiveBlood(player, 5);
			
			var byItemId = ItemManager.CreateByName(MedkitItemName, 50, configData.SuperMedkitSkin);
			byItemId.name = configData.SuperMedkitName;
			player.GiveItem(byItemId);			
        }
		
		#endregion
		
		#region Config
		
        private static ConfigData configData;
		
        private class ConfigData
        {            
			[JsonProperty(PropertyName = "При добыче мяса животных выпадает кровь")]
			public Dictionary<string, int> BloodRates; 
			[JsonProperty(PropertyName = "Название на пакете с кровью")]
			public string BloodName;
			[JsonProperty(PropertyName = "Скин супер аптечки")]
			public ulong SuperMedkitSkin;
			[JsonProperty(PropertyName = "Название супер аптечки")]
			public string SuperMedkitName;
        }
		
        private void LoadVariables() => configData = Config.ReadObject<ConfigData>();        
		
        protected override void LoadDefaultConfig()
        {
            configData = new ConfigData
            {
                BloodRates = new Dictionary<string, int>()
				{
					{ "wolfmeat.raw", 1 },
					{ "meat.boar", 1 },
					{ "deermeat.raw", 1 },
					{ "bearmeat", 2 }
				},
				BloodName = "Кровь (перетащите кровь на аптечку для её апгрейда)",
				SuperMedkitSkin = 2001406820,
				SuperMedkitName = "Улучшенная аптечка"
            };
            SaveConfig(configData);
			timer.Once(0.1f, ()=> SaveConfig(configData));
        }        
		
        private void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
		
        #endregion
		
    }
}

// --- End of file: SuperMedkit-1.0.0.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/VoteChecker.cs ---
// --- Original Local Path: VoteChecker.cs ---

using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Oxide.Plugins
{
    /*
    [B]Changelog 2.2.2[/B]
    [LIST]
    [*] Added the ability to annouce plugins to Game-Servers.top. This eliminates the need for a server owners to keep listing their mods on their servers.
    [/LIST]
    */
    [Info("VoteChecker", "Pho3niX90", "2.2.2", ResourceId = 1216)]
    class VoteChecker : RustPlugin
    {
        #region [CLASSES]
        static class Constants
        {
            public const string PLATFORM = "rust"; //Game-servers.top doesn't need a platform string, cause were awesome >8-)
            public const string SERVICE = "listforge"; //nope not this as well
            public const bool DEBUG = false;
        }
        #endregion

        #region [LISTS]
        int timesVoted;
        private Dictionary<ulong, DateTime> Cooldowns = new Dictionary<ulong, DateTime>();
        private Collection<RewardItem> Rewards = new Collection<RewardItem>();
        public Collection<LastVote> Users = new Collection<LastVote>();
        private Dictionary<string, string> shortnameDictionary;
        public class RewardItem
        {
            public RewardItem(string itemName, int votesRequired, int itemAmount)
            {
                this.itemName = itemName;
                this.votesRequired = votesRequired;
                this.itemAmount = itemAmount;
            }

            public string itemName { get; set; }
            public int votesRequired { get; set; }
            public int itemAmount { get; set; }
        }
        public class LastVote
        {
            public LastVote(ulong steamid, int lastvote)
            {
                this.steamid = steamid;
                this.lastvote = lastvote;
            }

            public ulong steamid { get; set; }
            public int lastvote { get; set; }
        }
        private Collection<RewardItem> LoadDefaultRewards()
        {

            Rewards = new Collection<RewardItem>
            {
                new RewardItem("Pistol Bullet",           -1,      100),
                new RewardItem("Semi-automatic Pistol",   1,      1)
            };

            SaveRewards();
            return Rewards;
        }
        #endregion

        #region [CONFIGS]
        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a configuration file for rewards.");
            Config.Clear();
            Config["serverApi"] = "";
            Config["serverId"] = ""; //serverID 1017
            Config["trackingInterval"] = "1";
            Config["trackingType"] = "month";
            Config["autoGive"] = "true";

            Config["tgsApi"] = "";
            Config["tgsAddress"] = "";
            SaveConfig();
        }
        #endregion

        #region [HOOKS]
        void OnServerInitialized()
        {
            InitializeTable();
        }

        private void InitializeTable()
        {
            shortnameDictionary.Clear();
            List<ItemDefinition> ItemsDefinition = ItemManager.GetItemDefinitions() as List<ItemDefinition>;
            foreach (ItemDefinition itemdef in ItemsDefinition)
            {
                shortnameDictionary.Add(itemdef.displayName.english.ToString().ToLower().Trim(), itemdef.shortname.ToString());
            }
        }
        void Loaded()
        {
            LoadRewards();
            //LoadMessages();
            AnnouncePlugins();

            if (shortnameDictionary == null)
            {
                shortnameDictionary = new Dictionary<string, string>();
            }
            if (Rewards.Count < 1)
            {
                PrintWarning("No items was loaded, will now load defaults");
                LoadDefaultRewards();
                PrintWarning(Rewards.Count + " default rewards loaded");
            }
            LoadVotes();
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (player.displayName.ToLower() == "server") return;


            // set cooldown
            TimeSpan time = new TimeSpan(0, 0, 15, 0);
            DateTime combined = DateTime.Now.Add(time);
            if (!Cooldowns.ContainsKey(player.userID)) { Cooldowns.Add(player.userID, DateTime.Now); }
            //

            bool autoGive;
            if (!bool.TryParse(Config["autoGive"].ToString(), out autoGive)) { autoGive = true; }
            if (!autoGive) { return; }
            GetRewardDelayed(player);
            Cooldowns[player.userID] = combined;
        }
        #endregion

        #region [CHAT COMMANDS]
        [ChatCommand("addreward")]
        private void ChatCmd_AddReward(BasePlayer player, string cmd, string[] args)
        {


            if (player.net.connection.authLevel < 2)
            {
                PrintToChat(player, "Only admins are allowed to use this function");
                return;
            }
            var tmpItemName = "";
            int tmpItemAmnt = 0;
            int tmpItemVtNeed = 0;
            switch (args.Length)
            {

                case 0:
                    PrintToChat(player, "/addreward itemname rewardamount votecountneeded");
                    break;
                case 3:
                    tmpItemName = args[0];
                    if (!int.TryParse(args[1], out tmpItemAmnt)) { }
                    if (!int.TryParse(args[2], out tmpItemVtNeed)) { }
                    break;
                case 4:
                    tmpItemName = args[0] + " " + args[1];
                    if (!int.TryParse(args[2], out tmpItemAmnt)) { }
                    if (!int.TryParse(args[3], out tmpItemVtNeed)) { }
                    break;
                default:
                    PrintToChat(player, "Incorrect usage");
                    return;
            }

            string value;
            if (shortnameDictionary.TryGetValue(tmpItemName.ToLower().Trim(), out value))
            {
                Rewards.Add(new RewardItem(tmpItemName, tmpItemVtNeed, tmpItemAmnt));
                PrintToChat(player, "Item " + Capitalise(tmpItemName) + " was added with a quanitity of " + tmpItemAmnt + " and will be given at " + tmpItemVtNeed + " votes");
                SaveRewards();
            }
            else
            {
                PrintToChat(player, "No such item -" + tmpItemName + "- , please use /itemlist to see available items");
                Puts("No such item -" + tmpItemName + "- , please use /itemlist to see available items");
            }
        }
        [ChatCommand("getreward")]
        private void GetMyVoteReward(BasePlayer player, string cmd) { GetRewardDelayed(player); }
        private readonly WebRequests webRequestsAddress = Interface.GetMod().GetLibrary<WebRequests>("WebRequests");
        private readonly WebRequests webRequestsApi = Interface.GetMod().GetLibrary<WebRequests>("WebRequests");
        [ChatCommand("rewardconf")]
        private void ChatCmd_Config(BasePlayer player, string command, string[] args)
        {
            if (player.net.connection.authLevel < 2) { PrintToChat(player, "Only admins are allowed to use this function"); return; }
            if (args == null || args.Length == 0)
            {
                PrintToChat(player, "TGS API: " + ((string)Config["tgsApi"] == "" ? "No api set, please set ASAP" : (string)Config["tgsApi"]));
                PrintToChat(player, "Listforge API: " + ((string)Config["serverApi"] == "" ? "No api set, please set ASAP" : (string)Config["serverApi"]));
                PrintToChat(player, "ServerID: " + Config["serverId"]);
                PrintToChat(player, "Reward Type: " + Config["trackingInterval"] + Config["trackingType"] + "");
                return;
            }
            if (args[0].Length < 1 || args[1].Length < 1) { PrintToChat(player, "/rewardconf [api/serverid/tracking/autogive] configValue"); return; }

            switch (args[0])
            {
                case "api":
                    if (args[1].Equals("listforge"))
                    {
                        Config["serverApi"] = args[2];
                        PrintToChat(player, "ServerApi set to " + args[2]);
                    }
                    else if (args[1].Equals("tgs"))
                    {
                        Config["tgsApi"] = args[2];

                        PrintToChat(player, "Game-Server ServerApi set to " + args[2]);

                        //NOW LETS FETCH SOME DETAILS FOR THE SERVER

                        if (player.displayName.ToLower() == "server") return;
                        var playerId = player.userID;
                        webRequestsAddress.EnqueueGet("http://game-servers.top/api/query.php?apikey=" + Config["tgsApi"] + "&getAddress", (code, response) => WebRequestCallbackAddress(code, response, player), this);
                        /////////////////////////////////////////////

                    }
                    break;
                case "serverid":
                    Config["serverId"] = args[1];
                    PrintToChat(player, "ServerID set to " + args[1]);
                    break;
                case "tracking":
                    int interval;
                    if (int.TryParse(args[1], out interval))
                    {
                        Config["trackingInterval"] = args[1];
                        PrintToChat(player, "Interval set to " + args[1]);
                    }
                    else
                    {
                        PrintToChat(player, "Syntax Error: Interval must be an Integer (Number)");
                    }

                    if (args[2].Equals("month", StringComparison.CurrentCultureIgnoreCase)
                        || args[2].Equals("week", StringComparison.CurrentCultureIgnoreCase)
                        || args[2].Equals("day", StringComparison.CurrentCultureIgnoreCase))
                    {
                        Config["trackingType"] = args[2];
                        PrintToChat(player, "Tracking set to " + args[2]);
                    }
                    else
                    {
                        PrintToChat(player, "Syntax Error: Tracking must be either month/day/week");
                    }
                    break;
                case "autoreward":
                    bool val;
                    if (!bool.TryParse(args[1], out val)) { PrintToChat(player, "Please enter either true or false."); };
                    Config["autoGive"] = val;
                    PrintToChat(player, "AutoGive set to " + val);
                    break;
            }

            SaveConfig();
        }
        [ChatCommand("clearrewards")]
        private void ChatCmd_ClearRewards(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel < 2) { PrintToChat(player, "Only admins are allowed to use this function"); return; }
            Rewards.Clear();
            SaveRewards();
            PrintToChat(player, "Rewards file cleared. Please add some rewards with /addreward itemname itemamount votecount");
        }
        [ChatCommand("itemlist")]
        private void getItemList(BasePlayer player, string cmd)
        {

            foreach (var itemList in shortnameDictionary.Keys)
            {
                PrintToChat(player, Capitalise(itemList));
            }
        }
        [ChatCommand("voterewards")]
        private void ChatCmd_Rewards(BasePlayer player, string cmd)
        {
            PrintToChat(player, "Get rewards for daily votes");
            var RewardsSorted = Rewards.OrderBy(a => a.votesRequired);
            var tmplastVote = Users.Where(d => d.steamid == player.userID).FirstOrDefault();
            int thisvote = (tmplastVote.lastvote == null) ? tmplastVote.lastvote : 0;
            int nextVote = thisvote + 1;
            foreach (var voteReward in RewardsSorted) // Loop through List with foreach.
            {
                var resource = voteReward.itemName;
                var votesNeeded = voteReward.votesRequired; //int Votes
                int resourceAmount = voteReward.itemAmount; //int Amount
                if (thisvote == votesNeeded)
                { PrintToChat(player, "LAST Reward: " + resourceAmount + " * " + resource + " when you have reached " + votesNeeded + " votes"); }
                else
                if (nextVote == votesNeeded || votesNeeded == -1)
                {
                    if (votesNeeded == -1)
                    { PrintToChat(player, "NEXT Reward: " + resourceAmount + " * " + resource + " for every vote"); }
                    else
                    { PrintToChat(player, "NEXT Reward: " + resourceAmount + " * " + resource + " when you have reached " + votesNeeded + " votes"); }
                }
                else { PrintToChat(player, "Reward: " + resourceAmount + " * " + resource + " when you have reached " + votesNeeded + " votes"); }
            }
        }
        #endregion

        #region [SAVE REWARDS]
        private void SaveRewards() { Interface.GetMod().DataFileSystem.WriteObject("VoteCheckerRewards", Rewards); }
        private void LoadRewards()
        {
            try
            {
                Rewards = Interface.GetMod().DataFileSystem.ReadObject<Collection<RewardItem>>("VoteCheckerRewards");
            }
            catch (Exception e)
            {

                PrintWarning("You are using the old rewards format, we will now try and convert it.");

                var _StoreStock_OLD = Interface.GetMod().DataFileSystem.ReadObject<Collection<string[]>>("VoteCheckerRewards");
                foreach (var item in _StoreStock_OLD)
                {
                    string itemid = item[0];
                    int votecount = int.Parse(item[1]);
                    int amount = int.Parse(item[2]);
                    Rewards.Add(new RewardItem(itemid, votecount, amount));
                }
                PrintWarning("Conversion complete, we converted " + Rewards.Count + " items");
                SaveRewards();
                _StoreStock_OLD.Clear();

            }
        }
        private void SaveVotes() { Interface.GetMod().DataFileSystem.WriteObject("VoteCheckerUserVotes", Users); }
        private void LoadVotes() { Users = Interface.GetMod().DataFileSystem.ReadObject<Collection<LastVote>>("VoteCheckerUserVotes"); }
        #endregion

        #region [HELPERS]
        private readonly WebRequests webRequests = Interface.GetMod().GetLibrary<WebRequests>("WebRequests");
        void GetRewardDelayed(BasePlayer player)
        {
            PrintWarning("0");
            if (!Cooldowns.ContainsKey(player.userID)) { Cooldowns.Add(player.userID, DateTime.Now); }
            DateTime Date;
            PrintWarning("1");
            Cooldowns.TryGetValue(player.userID, out Date);
            PrintWarning("2");
            PrintWarning(Date + " " + DateTime.Now);
            PrintWarning("3");
            if (Date > DateTime.Now)
            {
                PrintWarning("4");
                PrintToChat(player, "You can only use this command in " + Date.Subtract(DateTime.Now).Minutes + " minutes");
                return;
            }

            GetRewardsForThisPlayer(player);

            TimeSpan time = new TimeSpan(0, 0, 15, 0);
            DateTime combined = Date.Add(time);
            Cooldowns[player.userID] = combined; // we are setting the cooldown.
        }
        void GetRewardsForThisPlayer(BasePlayer player)
        {
            timesVoted = 0;
            if (player.displayName.ToLower() == "server") return;
            var playerId = player.userID.ToString();
            //Game-Servers.top
            if ((string)Config["tgsApi"] != "" && Config["tgsApi"] != null)
            {
                webRequests.EnqueueGet("http://game-servers.top/api/query.php?apikey=" + Config["tgsApi"] + "&interval=" + Config["trackingInterval"] + "&period=" + Config["trackingType"] + "&steamid=" + playerId + "&app", (code, response) => WebRequestCallbackApi(code, response, player), this);
                Debug(1, "TGS Passing: http://game-servers.top/api/query.php?apikey=" + Config["tgsApi"] + "&interval=" + Config["trackingInterval"] + "&period=" + Config["trackingType"] + "&steamid=" + playerId + "&app");
            }
            //listforge
            if ((string)Config["serverApi"] != "" && Config["serverApi"] != null)
            {
                webRequests.EnqueueGet("http://api.cyberscene.co.za/listforge/votechecker.php?steamid=" + playerId + "&ver=" + this.Version + "&api=" + Config["serverApi"] + "&mode=" + Config["trackingType"] + "&interval=" + Config["trackingInterval"] + "&platform=" + Constants.PLATFORM, (code, response) => WebRequestCallback(code, response, player), this);
                Debug(1, "LF Passing: http://api.cyberscene.co.za/listforge/votechecker.php?steamid=" + playerId + "&ver=" + this.Version + "&api=" + Config["serverApi"] + "&mode=" + Config["trackingType"] + "&interval=" + Config["trackingInterval"] + "&platform=" + Constants.PLATFORM);
            }
        }
        void WebRequestCallbackAddress(int code, string response, BasePlayer player)
        {
            if (response == null || code != 200) { Puts("error " + code + ": Couldn't get an answer from Game-Servers.top for " + player.displayName); return; }

            Config["tgsAddress"] = "http://game-servers.top/server/" + response;
            PrintToChat(player, "Game-Server address set to " + (string)Config["tgsAddress"]);
            PrintWarning("Your server address has been saved as " + response + ", setup complete for Game-Servers.top");
            SaveConfig();
        }
        void WebRequestCallbackApi(int code, string response, BasePlayer player)
        {
            int tmpVotes = 0;
            if (response == null || code != 200) { Puts("error" + code + ": Couldn't get an answer from Game-Servers.top for " + player.displayName); return; }

            if (!int.TryParse(response, out tmpVotes)) { PrintError("Game-Servers.top Error: '" + response + "' - " + player.displayName + " (" + player.userID + ") didn't received their reward."); }
            Debug(1, "Game-Servers votes is " + tmpVotes + " for player " + player.displayName);
            timesVoted += tmpVotes;
            if ((string)Config["serverApi"] == "" || Config["serverApi"] == null)
            {
                giveItems(player, timesVoted);
                SaveVotes();
            }
        }
        void WebRequestCallback(int code, string response, BasePlayer player)
        {
            int tmpVotes = 0;
            if (response == null || code != 200) { Puts("error" + code + ": Couldn't get an answer from Cyberscene for " + player.displayName); return; }

            if (!int.TryParse(response, out tmpVotes)) { PrintError("Cyberscene Error: '" + response + "' - " + player.displayName + " (" + player.userID + ") didn't received their reward."); }
            Debug(1, "Listforge votes is " + tmpVotes + " for player " + player.displayName);
            timesVoted += tmpVotes;

            timer.Once(1, () => giveItems(player, timesVoted));
            SaveVotes();
        }

        void giveItems(BasePlayer player, int voteCount)
        {
            Debug(1, "1");
            Debug(1, "Votecount passed to giveitems is " + voteCount);
            var playerName = player.displayName;
            Debug(1, "2");
            var playerId = player.userID;
            Debug(1, "3");



            var tmplastVote = Users.Where(d => d.steamid == playerId).FirstOrDefault();

            if (tmplastVote == null)
            {
                Debug(1, "12");
                Debug(1, "LastVote is null for user, recreate.");
                Users.Add(new LastVote((ulong)playerId, 0));
                SaveVotes();

                Debug(1, "13");
            }
            else
            {
                Debug(1, "14");
                if (tmplastVote.lastvote > voteCount) { tmplastVote.lastvote = 0; }; //this means to interval has reset
            }
            Debug(1, "The lastvotecount after checks is " + ((tmplastVote == null) ? "isnull" : tmplastVote.lastvote.ToString()));
            Debug(1, "14.5");
            tmplastVote = Users.Where(d => d.steamid == playerId).FirstOrDefault();

            Debug(1, "The lastvotecount after select is " + tmplastVote.lastvote);


            Debug(1, "15");
            int LastVote = tmplastVote.lastvote;

            if (voteCount == 0 || voteCount == LastVote)
            {
                Debug(1, "4");
                PrintToChat(player, "You have no new rewards, please vote for our server to receive rewards.");
                if ((string)Config["tgsApi"] != null || (string)Config["tgsApi"] != "")
                {
                    Debug(1, "5");
                    PrintToChat(player, (string)Config["tgsAddress"]);
                }
                if ((string)Config["serverId"] != null || (string)Config["serverId"] != "")
                {
                    Debug(1, "6");
                    PrintToChat(player, "http://rust-servers.net/server/" + Config["serverId"] + "/");
                }
                return;
            }

            Debug(1, "16");
            var RewardsLimited = from p in Rewards.ToList() where (p.votesRequired > LastVote && p.votesRequired <= voteCount) || p.votesRequired == -1 select p;
            Debug(1, "16.5");
            Debug(1, "RewardsLimited contains " + RewardsLimited.Count() + " rewards and isnull? " + (RewardsLimited == null));
            Debug(1, "16.7");
            foreach (var voteReward in RewardsLimited)
            {
                Debug(1, "17");
                var votesNeeded = voteReward.votesRequired;
                Debug(1, "18");
                int resourceAmount = voteReward.itemAmount;
                Debug(1, "19");
                var definition = ItemManager.FindItemDefinition(shortnameDictionary[voteReward.itemName.ToLower().Trim()]);
                Debug(1, "20");
                int amountToGive = resourceAmount;
                Debug(1, "21");
                Debug(1, "Should we give? amnt:" + amountToGive + " vtneed:" + votesNeeded + " vtcnt:" + voteCount + " lstvote: " + LastVote);
                if (amountToGive > 0 && LastVote < voteCount)
                {
                    Debug(1, "22");
                    int remainderToGive = amountToGive;

                    Debug(1, "23");
                    while (remainderToGive > 0)
                    {
                        Debug(1, "24");
                        var maxStackSize = 1000;
                        Debug(1, "25");
                        var stackToGive = maxStackSize;

                        if (remainderToGive < maxStackSize)
                        {
                            stackToGive = remainderToGive;
                        }

                        var isBP = false;

                        player.inventory.GiveItem(ItemManager.CreateByItemID((int)definition.itemid, stackToGive, isBP), (ItemContainer)player.inventory.containerMain);
                        remainderToGive = remainderToGive - maxStackSize;
                    }
                    PrintToChat(player, "Thanks for voting " + voteCount + " times, you have received " + amountToGive + " " + voteReward.itemName);
                }


            }

            if (tmplastVote != null) { tmplastVote.lastvote = voteCount; Debug(1, "Storing users last vote, "); }// else { Users.Add(new LastVote(playerId, voteCount)); }
            //possible fix v
            foreach (var e in Users.Where(a => a.steamid == (ulong)player.userID))
            {
                e.lastvote = voteCount;
            }
            //possible fix ^

            timesVoted = 0;
        }
        private string Capitalise(string word)
        {
            var finalText = "";
            finalText = Char.ToUpper(word[0]).ToString();
            var spaceFound = 0;
            for (var i = 1; i < word.Length; i++)
            {
                if (word[i] == ' ')
                {
                    spaceFound = i + 1;
                }
                if (i == spaceFound)
                {
                    finalText = finalText + Char.ToUpper(word[i]).ToString();
                }
                else finalText = finalText + word[i].ToString();
            }
            return finalText;
        }
        private void Debug(int level, string msg)
        {
            if (Constants.DEBUG)
            {
                switch (level)
                {
                    case 0:
                        Puts(msg);
                        break;
                    case 1:
                        PrintWarning(msg);
                        break;
                    case 2:
                        PrintError(msg);
                        break;
                }
            }

        }
        /// <summary>
        /// This is to annouce plugins to game-servers.top, this eliminates the need for server owners to list it on their own. Users will also be able to search for servers based on plugins. 
        /// </summary>
        private readonly WebRequests wrAnnoucePlugin = Interface.GetMod().GetLibrary<WebRequests>("WebRequests");
        private void AnnouncePlugins()
        {
            if ((string)Config["tgsApi"] == "" || Config["tgsApi"] == null) return;

            foreach (Plugin plugin in plugins.GetAll())
            {
                wrAnnoucePlugin.EnqueueGet("http://game-servers.top/api/query.php?apikey=" + Config["tgsApi"] + "&annoucePlugins&pn=" + plugin.Name + "&pt=" + plugin.Title + "&prid=" + plugin.ResourceId + "&pv=" + plugin.Version
                    , (code, response) => AnnoucePluginCallback(code, response, plugin.Title), this);

            }

        }
        void AnnoucePluginCallback(int code, string response, string title)
        {
            if (response == null || code != 200) { PrintError("Error-" + code + ": There was an error when announcing " + title + " to Game-Servers.top"); return; }
            PrintWarning(title + " has been annouced successfully to Game-Servers.top");
        }
        #endregion
    }
}


// --- End of file: VoteChecker.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BaseRepair.cs ---
// --- Original Local Path: BaseRepair.cs ---

﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using ProtoBuf;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Base Repair", "MJSU", "1.0.24")]
    [Description("Allows player to repair their entire base")]
    internal class BaseRepair : RustPlugin
    {
        #region Class Fields

        [PluginReference] private Plugin NoEscape;

        private StoredData _storedData; //Plugin Data
        private PluginConfig _pluginConfig; //Plugin Config

        private const string UsePermission = "baserepair.use";
        private const string NoCostPermission = "baserepair.nocost";
        private const string NoAuthPermission = "baserepair.noauth";
        private const string AccentColor = "#de8732";

        private readonly List<ulong> _repairingPlayers = new List<ulong>();
        private readonly ItemAmountPool _itemAmountPool = new ItemAmountPool();
        private readonly StringBuilder _sb = new StringBuilder();

        private GameObject _go;
        private RepairBehavior _rb;

        private readonly object _true = true;
        #endregion

        #region Setup & Loading
        private void Init()
        {
            _storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);
            permission.RegisterPermission(UsePermission, this);
            permission.RegisterPermission(NoCostPermission, this);
            permission.RegisterPermission(NoAuthPermission, this);
            foreach (string command in _pluginConfig.ChatCommands)
            {
                cmd.AddChatCommand(command, this, BaseRepairChatCommand);
            }

            UnsubscribeAll();
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                [LangKeys.Chat] = $"<color=#bebebe>[<color={AccentColor}>{Title}</color>] {{0}}</color>",
                [LangKeys.NoPermission] = "You do not have permission to use this command",
                [LangKeys.RepairInProcess] = "You have a current repair in progress. Please wait for that to finish before repairing again",
                [LangKeys.RecentlyDamaged] = "We failed to repair {0} because they were recently damaged",
                [LangKeys.AmountRepaired] = "We have repaired {0} damaged items in this base. ",
                [LangKeys.Enabled] = "You enabled enabled building repair. Hit the building you wish to repair with the hammer and we will do the rest for you.",
                [LangKeys.Disabled] = "You have disabled building repair."
            }, this);
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Loading Default Config");
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            Config.Settings.DefaultValueHandling = DefaultValueHandling.Populate;
            _pluginConfig = AdditionalConfig(Config.ReadObject<PluginConfig>());
            Config.WriteObject(_pluginConfig);
        }

        private PluginConfig AdditionalConfig(PluginConfig config)
        {
            config.ChatCommands = config.ChatCommands ?? new List<string>
            {
                "br"
            };
            return config;
        }

        private void OnServerInitialized()
        {
            _go = new GameObject(Name);
            _rb = _go.AddComponent<RepairBehavior>();
            
            SubscribeAll();
        }

        private void Unload()
        {
            if (_rb)
            {
                _rb.StopAllCoroutines();
                _rb.DoDestroy();
            }
           
            GameObject.Destroy(_go);
        }
        #endregion

        #region Chat Command
        private void BaseRepairChatCommand(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin && !HasPermission(player, UsePermission))
            {
                Chat(player, Lang(LangKeys.NoPermission, player));
                return;
            }

            bool enabled = !_storedData.RepairEnabled[player.userID];
            _storedData.RepairEnabled[player.userID] = enabled;

            Chat(player, enabled ? Lang(LangKeys.Enabled, player) : Lang(LangKeys.Disabled, player));
            SaveData();
        }
        #endregion

        #region Oxide Hooks
        private object OnHammerHit(BasePlayer player, HitInfo info)
        {
            BaseCombatEntity entity = info?.HitEntity as BaseCombatEntity;
            if (entity == null || entity.IsDestroyed)
            {
                return null;
            }
            
            if (entity is BaseVehicle)
            {
                return null;
            }
            
            if (!HasPermission(player, UsePermission))
            {
                return null;
            }
            
            if (_storedData.RepairEnabled.ContainsKey(player.userID))
            {
                if (!_storedData.RepairEnabled[player.userID])
                {
                    return null;
                }
            }
            else if (!_pluginConfig.DefaultEnabled)
            {
                return null;
            }

            string error = NoEscape?.Call<string>("CanDo", "repair", player);
            if (!string.IsNullOrEmpty(error))
            {
                Chat(player, error);
                return null;
            }

            if (_repairingPlayers.Contains(player.userID))
            {
                Chat(player, Lang(LangKeys.RepairInProcess, player));
                return _true;
            }

            bool hasNoAuth = HasPermission(player, NoAuthPermission);
            
            BuildingPrivlidge priv = player.GetBuildingPrivilege();
            if (priv && !hasNoAuth && !priv.IsAuthed(player))
            {
                return null;
            }
            
            BuildingManager.Building building = null;
            if (entity is DecayEntity)
            {
                building = ((DecayEntity)entity).GetBuilding();
            }
            
            if (building == null)
            {
                if (!priv)
                {
                    return null;
                }
                
                building = priv.GetBuilding();
                if (building == null)
                {
                    return null;
                }
            }
            
            priv = building.GetDominatingBuildingPrivilege();
            if (!priv && !_pluginConfig.AllowNoTcRepair)
            {
                return null;
            }
            
            if (priv && !hasNoAuth && !priv.IsAuthed(player))
            {
                return null;
            }

            PlayerRepairStats stats = new PlayerRepairStats();

            if (Interface.CallHook("OnBaseRepair", building, player) != null)
            {
                return null;
            }
            
            _rb.StartCoroutine(DoBuildingRepair(player, building, stats));
            return _true;
        }
        #endregion

        #region Repair Handler

        private IEnumerator DoBuildingRepair(BasePlayer player, BuildingManager.Building building, PlayerRepairStats stats)
        {
            _repairingPlayers.Add(player.userID);
            bool noCostPerm = HasPermission(player, NoCostPermission);
            
            for (int index = 0; index < building.decayEntities.Count; index++)
            {
                DecayEntity entity = building.decayEntities[index];
                DoRepair(player, entity, stats, noCostPerm);

                for (int i = 0; i < entity.children.Count; i++)
                {
                    BaseEntity childEntity = entity.children[i];
                    if (childEntity is BaseLadder)
                    {
                        DoRepair(player, (BaseLadder)childEntity, stats, noCostPerm);
                    }
                }

                if (index % _pluginConfig.RepairsPerFrame == 0)
                {
                    yield return null;
                }
            }

            _sb.Clear();
            _sb.AppendLine(Lang(LangKeys.AmountRepaired, player, stats.TotalSuccess));

            if (stats.RecentlyDamaged > 0)
            {
                _sb.AppendLine(Lang(LangKeys.RecentlyDamaged, player, stats.RecentlyDamaged));
            }

            Chat(player, _sb.ToString());

            if (stats.TotalCantAfford > 0)
            {
                List<ItemAmount> missingAmounts = Pool.GetList<ItemAmount>();
                foreach (KeyValuePair<int, ItemAmount> missing in stats.MissingAmounts)
                {
                    float amountMissing = missing.Value.amount - player.inventory.GetAmount(missing.Key);
                    if (amountMissing <= 0)
                    {
                        ItemAmount amount = missing.Value;
                        _itemAmountPool.Free(ref amount);
                        continue;
                  