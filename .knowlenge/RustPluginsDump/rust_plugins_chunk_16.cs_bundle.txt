  }

                    missingAmounts.Add(missing.Value);
                }
                
                SendMissingItemAmounts(player, missingAmounts);
                FreeItemAmounts(missingAmounts);
            }

            foreach (KeyValuePair<int, int> taken in stats.AmountTaken)
            {
                player.Command("note.inv", taken.Key, -taken.Value);
            }

            _repairingPlayers.Remove(player.userID);
        }

        private void DoRepair(BasePlayer player, BaseCombatEntity entity, PlayerRepairStats stats, bool noCost)
        {
            if (!entity.IsValid() || entity.IsDestroyed)
            {
                return;
            }

            if (!entity.repair.enabled || entity.health == entity.MaxHealth())
            {
                return;
            }

            if (Interface.CallHook("OnStructureRepair", entity, player) != null)
            {
                return;
            }

            if (entity.SecondsSinceAttacked <= _pluginConfig.EntityRepairDelay)
            {
                entity.OnRepairFailed(null, string.Empty);
                stats.RecentlyDamaged++;
                return;
            }

            float missingHealth = entity.MaxHealth() - entity.health;
            float healthPercentage = missingHealth / entity.MaxHealth();
            if (missingHealth <= 0f || healthPercentage <= 0f)
            {
                entity.OnRepairFailed(null, string.Empty);
                return;
            }

            if (!noCost)
            {
                List<ItemAmount> itemAmounts = Pool.GetList<ItemAmount>();
                GetEntityRepairCost(entity, itemAmounts, healthPercentage);
                if (!HasRepairCost(itemAmounts))
                {
                    entity.health += missingHealth;
                    entity.SendNetworkUpdate();
                    entity.OnRepairFinished();
                    FreeItemAmounts(itemAmounts);
                    return;
                }

                if (Math.Abs(_pluginConfig.RepairCostMultiplier - 1f) > 0.001f)
                {
                    foreach (ItemAmount amount in itemAmounts)
                    {
                        amount.amount *= _pluginConfig.RepairCostMultiplier;
                    }
                }

                if (!CanAffordRepair(player, itemAmounts))
                {
                    entity.OnRepairFailed(null, string.Empty);
                    
                    foreach (ItemAmount amount in itemAmounts)
                    {
                        ItemAmount missing = stats.MissingAmounts[amount.itemid];
                        if (missing == null)
                        {
                            missing = _itemAmountPool.Get();
                            missing.itemDef = amount.itemDef;
                            missing.amount = amount.amount;
                            stats.MissingAmounts[amount.itemid] = missing;
                            continue;
                        }

                        missing.amount += amount.amount;
                    }

                    stats.TotalCantAfford++;
                    FreeItemAmounts(itemAmounts);
                    return;
                }

                List<Item> items = Pool.GetList<Item>();
                foreach (ItemAmount amount in itemAmounts)
                {
                    player.inventory.Take(items, amount.itemid, (int) amount.amount);
                    stats.AmountTaken[amount.itemid] += (int) amount.amount;
                }

                for (int index = 0; index < items.Count; index++)
                {
                    Item item = items[index];
                    item.Remove();
                }

                Pool.FreeList(ref items);
                FreeItemAmounts(itemAmounts);
            }

            entity.health += missingHealth;
            entity.SendNetworkUpdate();

            if (entity.health < entity.MaxHealth())
            {
                entity.OnRepair();
            }
            else
            {
                entity.OnRepairFinished();
            }

            stats.TotalSuccess++;
        }

        public bool CanAffordRepair(BasePlayer player, List<ItemAmount> amounts)
        {
            for (int index = 0; index < amounts.Count; index++)
            {
                ItemAmount amount = amounts[index];
                if (player.inventory.GetAmount(amount.itemid) < amount.amount)
                {
                    return false;
                }
            }

            return true;
        }

        public void GetEntityRepairCost(BaseCombatEntity entity, List<ItemAmount> repairAmounts, float missingHealthFraction)
        {
            List<ItemAmount> entityAmount = entity.BuildCost();
            if (entityAmount == null)
            {
                return;
            }
            
            float repairCostFraction = entity.RepairCostFraction();
            for (int index = 0; index < entityAmount.Count; index++)
            {
                ItemAmount itemAmount = entityAmount[index];
                int amount = Mathf.RoundToInt(itemAmount.amount * repairCostFraction * missingHealthFraction);
                if (amount > 0)
                {
                    ItemAmount repairAmount = _itemAmountPool.Get();
                    repairAmount.itemDef = itemAmount.itemDef;
                    repairAmount.amount = amount;
                    repairAmounts.Add(repairAmount);
                }
            }
        }

        public bool HasRepairCost(List<ItemAmount> amounts)
        {
            for (int index = 0; index < amounts.Count; index++)
            {
                ItemAmount amount = amounts[index];
                if (amount.amount >= 1)
                {
                    return true;
                }
            }

            return false;
        }

        public void FreeItemAmounts(List<ItemAmount> amounts)
        {
            for (int index = 0; index < amounts.Count; index++)
            {
                ItemAmount amount = amounts[index];
                _itemAmountPool.Free(ref amount);
            }
            
            Pool.FreeList(ref amounts);
        }
        #endregion

        #region Helper Methods
        public void SendMissingItemAmounts(BasePlayer player, List<ItemAmount> itemAmounts)
        {
            using (ItemAmountList itemAmountList = ItemAmount.SerialiseList(itemAmounts))
            {
                player.ClientRPCPlayer(null, player, "Client_OnRepairFailedResources", itemAmountList);
            }
        }
        
        public void SubscribeAll()
        {
            Subscribe(nameof(OnHammerHit));
        }
        
        public void UnsubscribeAll()
        {
            Unsubscribe(nameof(OnHammerHit));
        }

        private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(Name, _storedData);

        private void Chat(BasePlayer player, string format) => PrintToChat(player, Lang(LangKeys.Chat, player, format));

        private bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);

        private string Lang(string key, BasePlayer player = null)
        {
            return lang.GetMessage(key, this, player?.UserIDString);
        }
        
        private string Lang(string key, BasePlayer player = null, params object[] args)
        {
            try
            {
                return string.Format(lang.GetMessage(key, this, player?.UserIDString), args);
            }
            catch (Exception ex)
            {
                PrintError($"Lang Key '{key}' threw exception\n:{ex}");
                throw;
            }
        }

        #endregion

        #region Behavior
        private class RepairBehavior : FacepunchBehaviour
        {
            private void Awake()
            {
                enabled = false;
            }

            public void DoDestroy()
            {
                Destroy(this);
            }
        }
        #endregion
        
        #region Classes

        private class PluginConfig
        {
            [DefaultValue(10)]
            [JsonProperty(PropertyName = "Number of entities to repair per server frame")]
            public int RepairsPerFrame { get; set; }

            [DefaultValue(false)]
            [JsonProperty(PropertyName = "Default Enabled")]
            public bool DefaultEnabled { get; set; }
            
            [DefaultValue(false)]
            [JsonProperty(PropertyName = "Allow Repairing Bases Without A Tool Cupboard")]
            public bool AllowNoTcRepair { get; set; }

            [DefaultValue(1f)]
            [JsonProperty(PropertyName = "Repair Cost Multiplier")]
            public float RepairCostMultiplier { get; set; }
            
            [DefaultValue(30f)]
            [JsonProperty(PropertyName = "How long after an entity is damaged before it can be repaired (Seconds)")]
            public float EntityRepairDelay { get; set; }

            [JsonProperty(PropertyName = "Chat Commands")]
            public List<string> ChatCommands { get; set; }
        }

        private class StoredData
        {
            public Hash<ulong, bool> RepairEnabled = new Hash<ulong, bool>();
        }

        private class PlayerRepairStats
        {
            public int TotalSuccess { get; set; }
            public int TotalCantAfford { get; set; }
            public int RecentlyDamaged { get; set; }
            public Hash<int, ItemAmount> MissingAmounts { get; } = new Hash<int, ItemAmount>();
            public Hash<int, int> AmountTaken { get; } = new Hash<int, int>();
        }

        private class LangKeys
        {
            public const string Chat = "Chat";
            public const string NoPermission = "NoPermission";
            public const string RepairInProcess = "RepairInProcess";
            public const string RecentlyDamaged = "RecentlyDamaged";
            public const string AmountRepaired = "AmountRepaired";
            public const string Enabled = "Enabled";
            public const string Disabled = "Disabled";
        }

        #endregion

        #region Pool
        private class BasePool<T> where T : class
        {
            protected readonly List<T> Pool = new List<T>();
            protected readonly Func<T> Init;

            public BasePool(Func<T> init)
            {
                Init = init;
            }
            
            public virtual T Get()
            {
                if (Pool.Count == 0)
                {
                    return Init.Invoke();
                }

                int index = Pool.Count - 1; //Removing the last element prevents an array copy.
                T entity = Pool[index];
                Pool.RemoveAt(index);
                
                return entity;
            }

            public virtual void Free(ref T entity)
            {
                Pool.Add(entity);
                entity = null;
            }
        }
        
        private class ItemAmountPool : BasePool<ItemAmount>
        {
            public ItemAmountPool() : base(() => new ItemAmount())
            {
            }
            
            public override void Free(ref ItemAmount ia)
            {
                ia.itemDef = null;
                ia.amount = 0;
                ia.startAmount = 0;
                base.Free(ref ia);
            }
        }
        #endregion
    }
}

// --- End of file: BaseRepair.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQReportSystem-2.23.90.cs ---
// --- Original Local Path: IQReportSystem-2.23.90.cs ---

using Oxide.Game.Rust.Cui;
using System.Text;
using System.Collections.Generic;
using Oxide.Core.Libraries;
using Object = System.Object;
using ConVar;
using Newtonsoft.Json;
using Facepunch.Utility;
using System.Linq;
using Network;
using Oxide.Core;
using Net = Network.Net;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEngine.UI;
using Oxide.Core.Plugins;
using UnityEngine.Networking;
using System.Collections;
using Newtonsoft.Json.Linq;
using Oxide.Core.Libraries.Covalence;
using System;
using Time = UnityEngine.Time;

namespace Oxide.Plugins
{
    /* Плагин */
    [Info("IQReportSystem", "Mercury", "2.23.90")]
    [Description("One love IQReportSystem")]
    internal class IQReportSystem : RustPlugin
    {
		private Boolean IsClans(String userID, String targetID)
		{
			if (!Clans) return false;
			if (!Clans.Author.Contains("dcode"))
			{
				Object result = Clans.Call("IsClanMember", userID, targetID);
				if (result == null)
					return false;
				
				return (Boolean)result;
			}
			String TagUserID = (String)Clans.Call("GetClanOf", userID);
			String TagTargetID = (String)Clans.Call("GetClanOf", targetID);
			return TagUserID == TagTargetID;
		}
                
        
        private class ImageUi
        {
            private static Coroutine coroutineImg = null;
			private static Dictionary<String, String> Images = new Dictionary<String, String>();

			private static List<String> KeyImages = new List<String>();

			public static void DownloadImages() { coroutineImg = ServerMgr.Instance.StartCoroutine(AddImage()); }

			private static IEnumerator AddImage()
			{
				if (_ == null)
					yield break;
				_.PrintWarning("Генерируем интерфейс, ожидайте ~10-15 секунд!");
				foreach (String URL in KeyImages)
				{
					String KeyName = URL;
					if (KeyName == null) throw new ArgumentNullException(nameof(KeyName));

					UnityWebRequest www = UnityWebRequestTexture.GetTexture(URL);
					yield return www.SendWebRequest();

					if (www.isNetworkError || www.isHttpError)
					{
						_.PrintWarning($"Image download error! Error: {www.error}, Image name: {KeyName}");
						www.Dispose();
						coroutineImg = null;
						yield break;
					}

					Texture2D texture = DownloadHandlerTexture.GetContent(www);
					if (texture != null)
					{
						Byte[] bytes = texture.EncodeToPNG();

						String image = FileStorage.server.Store(bytes, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID).ToString();
						if (!Images.ContainsKey(KeyName))
							Images.Add(KeyName, image);
						else
							Images[KeyName] = image;

						UnityEngine.Object.DestroyImmediate(texture);
					}

					www.Dispose();
					yield return CoroutineEx.waitForSeconds(0.02f);
				}
		   		 		  						  	   		  	   		  	 				   		 		  				
				yield return CoroutineEx.waitForSeconds(0.02f);
				coroutineImg = null;

				_interface = new InterfaceBuilder();
				_.PrintWarning("Интерфейс успешно загружен!");
			}

            public static string GetImage(String ImgKey)
            {
                if (Images.ContainsKey(ImgKey))
                    return Images[ImgKey];
                return _.GetImage("LOADING");
            }
			public static void Initialize()
			{
				KeyImages = new List<String>();
				Images = new Dictionary<string, string>();

                Configuration.Images ImagesPlugin = config.ImagesSettings;
		   		 		  						  	   		  	   		  	 				   		 		  				
                                if (!KeyImages.Contains(ImagesPlugin.Background))
                    KeyImages.Add(ImagesPlugin.Background);
		   		 		  						  	   		  	   		  	 				   		 		  				
				if (!KeyImages.Contains(ImagesPlugin.PageDown))
					KeyImages.Add(ImagesPlugin.PageDown);

				if (!KeyImages.Contains(ImagesPlugin.PageUp))
					KeyImages.Add(ImagesPlugin.PageUp);		
				
				if (!KeyImages.Contains(ImagesPlugin.Search))
					KeyImages.Add(ImagesPlugin.Search);
				
				if (!KeyImages.Contains(ImagesPlugin.AvatarBlur))
					KeyImages.Add(ImagesPlugin.AvatarBlur);

								
				if (!KeyImages.Contains(ImagesPlugin.ReasonModeratorAndRaiting))
					KeyImages.Add(ImagesPlugin.ReasonModeratorAndRaiting);
				
				if (!KeyImages.Contains(ImagesPlugin.PlayerAlerts))
					KeyImages.Add(ImagesPlugin.PlayerAlerts);

				
				if (!KeyImages.Contains(ImagesPlugin.StatisticsBlockSettings.BlockStatsModeration))
					KeyImages.Add(ImagesPlugin.StatisticsBlockSettings.BlockStatsModeration);		
				
				if (!KeyImages.Contains(ImagesPlugin.StatisticsBlockSettings.BlockStatsRaitingModeration))
					KeyImages.Add(ImagesPlugin.StatisticsBlockSettings.BlockStatsRaitingModeration);
				
				if (!KeyImages.Contains(ImagesPlugin.StatisticsBlockSettings.RaitingImage))
					KeyImages.Add(ImagesPlugin.StatisticsBlockSettings.RaitingImage);
		   		 		  						  	   		  	   		  	 				   		 		  				
				
				
				if (!KeyImages.Contains(ImagesPlugin.PlayerListBlockSettings.PoopUpBackgorund))
					KeyImages.Add(ImagesPlugin.PlayerListBlockSettings.PoopUpBackgorund);
				
				if (!KeyImages.Contains(ImagesPlugin.PlayerListBlockSettings.PoopUpReasonBackgorund))
					KeyImages.Add(ImagesPlugin.PlayerListBlockSettings.PoopUpReasonBackgorund);

				
				
				if (!KeyImages.Contains(ImagesPlugin.LeftBlockSettings.ButtonBackgorund))
					KeyImages.Add(ImagesPlugin.LeftBlockSettings.ButtonBackgorund);
				
				if (!KeyImages.Contains(ImagesPlugin.LeftBlockSettings.ModerationIcon))
					KeyImages.Add(ImagesPlugin.LeftBlockSettings.ModerationIcon);
				
				if (!KeyImages.Contains(ImagesPlugin.LeftBlockSettings.ReportIcon))
					KeyImages.Add(ImagesPlugin.LeftBlockSettings.ReportIcon);

				
				
				if (!KeyImages.Contains(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPBackgorund))
					KeyImages.Add(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPBackgorund);
				
				if (!KeyImages.Contains(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPTextBackgorund))
					KeyImages.Add(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPTextBackgorund);
				
				if (!KeyImages.Contains(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPPanelBackgorund))
					KeyImages.Add(ImagesPlugin.ModerationBlockSettings.ModeratorPoopUPPanelBackgorund);

				
				
				if (!KeyImages.Contains(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorCheckedBackground))
					KeyImages.Add(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorCheckedBackground);
				
				if (!KeyImages.Contains(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorCheckedStopButton))
					KeyImages.Add(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorCheckedStopButton);
					
				if (!KeyImages.Contains(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorVerdictButton))
					KeyImages.Add(ImagesPlugin.ModeratorMenuCheckedSettings.ModeratorVerdictButton);

				if (!KeyImages.Contains(ImagesPlugin.ModeratorMenuCheckedSettings.SteamIcoPlayer))
					KeyImages.Add(ImagesPlugin.ModeratorMenuCheckedSettings.SteamIcoPlayer);
				
				if (!KeyImages.Contains(ImagesPlugin.ModeratorMenuCheckedSettings.PirateIcoPlayer))
					KeyImages.Add(ImagesPlugin.ModeratorMenuCheckedSettings.PirateIcoPlayer);
				
				
				if (!KeyImages.Contains(ImagesPlugin.PlayerMenuRaitingSettings.PlayerMenuRaitingBackground))
					KeyImages.Add(ImagesPlugin.PlayerMenuRaitingSettings.PlayerMenuRaitingBackground);

				
			}
            public static void Unload()
            {
                coroutineImg = null;
                foreach (KeyValuePair<String, String> item in Images)
                    FileStorage.server.RemoveExact(UInt32.Parse(item.Value), FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID, 0U);

				KeyImages.Clear();
				KeyImages = null;
				Images.Clear();
				Images = null;
            }
        }
		
		
		private Boolean CanStartedChecked(BasePlayer Target) => IsValidStartChecked(Target, null);

        
        [ConsoleCommand("iqrs")]
        private void ConsoleCommandReport(ConsoleSystem.Arg arg) ///iqrs call SteamID
        {
	        if (!arg.HasArgs(1)) return;
	        String Actions = arg.Args[0];
	        BasePlayer player = arg.Player();
	        if (player != null)
		        if (!IsModerator(player))
			        return;

	        Boolean IsConsole = player == null;
	        BasePlayer Target = null;
	        UInt64 UserIDPlayer = 0;
	        if (!Actions.Contains("report"))
	        {
		        if (!arg.HasArgs(2)) return;
		        String NameOrID = arg.Args[1];
		        UserIDPlayer = Convert.ToUInt64(NameOrID.IsSteamId() ? NameOrID : covalence.Players.FindPlayer(NameOrID)?.Id);
		        Target = BasePlayer.Find(NameOrID);

		        if (Target == null)
		        {
			        if (!Actions.Contains("dismiss"))
			        {
				        if (player != null)
					        player.ConsoleMessage(LanguageEn
						        ? "The player is not on the server or you have entered incorrect data"
						        : "Игрока нет на сервере или вы указали неверные данные");
				        else
					        Puts(LanguageEn
						        ? "The player is not on the server or you have entered incorrect data"
						        : "Игрока нет на сервере или вы указали неверные данные");
				        return;
			        }
		        }
	        }

	        switch (Actions) 
	        {
		        case "give":
		        {
			        if (!arg.HasArgs(3)) return;
			        if (!IsConsole && !player.IsAdmin) return;
			        Int32 AmountGive;
			        if (!Int32.TryParse(arg.Args[2], out AmountGive))
			        {
				        PrintWarning(LanguageEn ? "You have entered a letter as quantity! Only numbers are supported" : "Вы ввели в качестве количества буквы! Поддерживаются только цифры");
				        return;
			        }
		   		 		  						  	   		  	   		  	 				   		 		  				
			        if (AmountGive <= 0)
			        {
				        PrintWarning(LanguageEn ? "Value cannot be less than or equal to zero." : "Значение не может быть меньше или равно нулю");
				        return;
			        }
			        
			        if (!PlayerInformations.ContainsKey(UserIDPlayer))
			        {
				        PrintWarning(LanguageEn ? "The player is not in the complaint system database" : "Игрока нет в базе данных системы жалоб");
				        return;
			        }

			        PlayerInformations[UserIDPlayer].Reports += AmountGive;
			        Puts(LanguageEn ? $"Player {UserIDPlayer} has been successfully awarded {AmountGive} reports. Total amount: {PlayerInformations[UserIDPlayer].Reports}" : $"Игроку {UserIDPlayer} успешно было начислено {AmountGive} репортов. Общее количество {PlayerInformations[UserIDPlayer].Reports}");
			        break;
		        }
		        case "remove":
		        {
			        if (!arg.HasArgs(3)) return;
			        if (!IsConsole && !player.IsAdmin) return;
			        Int32 AmountRemove;
			        if (!Int32.TryParse(arg.Args[2], out AmountRemove))
			        {
				        PrintWarning(LanguageEn ? "You have entered a letter as quantity! Only numbers are supported" : "Вы ввели в качестве количества буквы! Поддерживаются только цифры");
				        return;
			        }

			        if (AmountRemove <= 0)
			        {
				        PrintWarning(LanguageEn ? "Value cannot be less than or equal to zero." : "Значение не может быть меньше или равно нулю");
				        return;
			        }

			        if (!PlayerInformations.ContainsKey(UserIDPlayer))
			        {
				        PrintWarning(LanguageEn ? "The player is not in the complaint system database" : "Игрока нет в базе данных системы жалоб");
				        return;
			        }

			        PlayerInformations[UserIDPlayer].Reports -= PlayerInformations[UserIDPlayer].Reports <= AmountRemove ? PlayerInformations[UserIDPlayer].Reports : AmountRemove;
			        Puts(LanguageEn ? $"Player {UserIDPlayer} has been successfully remove {AmountRemove} reports. Total amount: {PlayerInformations[UserIDPlayer].Reports}" : $"Игроку {UserIDPlayer} успешно было удалено {AmountRemove} репортов. Общее количество {PlayerInformations[UserIDPlayer].Reports}");
			        break;
		        }
		        case "call":
		        {
			        if (!IsConsole && (!player.IsAdmin || !IsModerator(player))) return; 
			        
			        if (AfkCheckRoutine.ContainsKey(Target))
			        {
				        if (AfkCheckRoutine[Target] != null)
				        {
					        ServerMgr.Instance.StopCoroutine(AfkCheckRoutine[Target]);
					        AfkCheckRoutine[Target] = null;
					        
					        if(PlayerChecks.ContainsKey(Target.userID))
						        PlayerChecks.Remove(Target.userID);
				        }
			        }
			        
			        Coroutine routineAFK = ServerMgr.Instance.StartCoroutine(StartAfkCheck(Target, player, IsConsole, !config.CheckControllerSettings.UseCheckAFK));

			        if (!AfkCheckRoutine.ContainsKey(Target))
				        AfkCheckRoutine.Add(Target, routineAFK);
			        else AfkCheckRoutine[Target] = routineAFK;
			        
			        break;
		        }
		        case "dismiss":
		        {
			        if (!IsConsole && (!player.IsAdmin || !IsModerator(player))) return; 

			        StopCheckedPlayer(UserIDPlayer, player, IsConsole: IsConsole);
			        break;
		        }
		        case "report.list": 
		        case "reports":
		        {
			        if (!IsConsole && !player.IsAdmin) return;
			        
			        IOrderedEnumerable<BasePlayer> moderatorSortedList = BasePlayer.activePlayerList
				        .Where(x => PlayerInformations[x.userID].Reports >=
				                    config.ReportContollerModerationSettings.ReportCountTrigger)
				        .OrderByDescending(x => PlayerInformations[x.userID].Reports);

			        Int32 Number = 1;
			        String PlayersInfo = String.Empty;
			        foreach (BasePlayer pList in moderatorSortedList)
			        {
				        PlayersInfo += $"{Number}. {pList.displayName} ({pList.userID}) : {PlayerInformations[pList.userID].Reports} ";
				        PlayersInfo += LanguageEn ? "reports\n" : "жалоб\n";
				        Number++;
			        }

			        if (String.IsNullOrWhiteSpace(PlayersInfo))
				        PlayersInfo = LanguageEn ? "There are no players with complaints" : "Игроков с жалобами нет";
			        
			        if (IsConsole)
				        Puts(LanguageEn ? $"Players with complaints :\n{PlayersInfo}" : $"Игроки с жалобами :\n{PlayersInfo}");
			        else PrintToConsole(player, !lang.GetLanguage(player.UserIDString).Equals("ru") ? $"Players with complaints :\n{PlayersInfo}" : $"Игроки с жалобами :\n{PlayersInfo}");
			        break;
		        }
	        }
        }

		private void DrawUI_ModeratorStitistics_Banner(BasePlayer Moderator, String OffsetMin, String OffsetMax, String TitleBanner, String ArgBanner, String AdditionalText = "", Int32 CountRaiting = -1)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PROFILE_BANNER_TEMPLATE");
			if (Interface == null) return;

			Interface = Interface.Replace("%OFFSET_MIN%", OffsetMin);
			Interface = Interface.Replace("%OFFSET_MAX%", OffsetMax);
			Interface = Interface.Replace("%TITLE_BANNER%", TitleBanner);
			Interface = Interface.Replace("%ARGS_BANNER%", ArgBanner);

			CuiHelper.AddUi(Moderator, Interface);

			if (!String.IsNullOrWhiteSpace(AdditionalText))
			{
				DrawUI_ModeratorStitistics_Banner_AdditionalText(Moderator, AdditionalText);
				return;
			}

			if (CountRaiting < 0) return;
			
			for (Int32 Raiting = 0; Raiting < CountRaiting; Raiting++)
				DrawUI_ModeratorStitistics_Banner_RaitingImage(Moderator, Raiting);
		}
		
		
				private String GetImage(String fileName, UInt64 skin = 0)
        {
            var imageId = (String)plugins.Find("ImageLibrary").CallHook("GetImage", fileName, skin);
            if (!string.IsNullOrEmpty(imageId))
                return imageId;
            return String.Empty;
        }
		
		private void OnPlayerConnected(BasePlayer player)
		{
			SteamAvatarAdd(player.UserIDString);
			RegisteredPlayer(player);

			CheckStatusPlayer(player);

			if (IsModerator(player))
				CheckStatusModerator(player);
		}

		private void DrawUI_ModeratorStitistics_Banner_AdditionalText(BasePlayer Moderator, String AdditionalText)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PROFILE_BANNER_TEMPLATE_ADDITIONAL_TEXT");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%ADDITIONAL_TEXT%", AdditionalText);

			CuiHelper.AddUi(Moderator, Interface);
		}
		
		
		
		private void DrawUI_ShowPoopUP(BasePlayer player, String displayName, String userID)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_TEMPLATE_POOPUP");
			if (Interface == null) return;
			
			 Interface = Interface.Replace("%POOPUP_BACKGORUND%",ImageUi.GetImage(config.ImagesSettings.PlayerListBlockSettings.PoopUpBackgorund));
			 Interface = Interface.Replace("%AVATAR%",GetImage(userID));
			 Interface = Interface.Replace("%NICK_NAME%",displayName.Length > 7 ? displayName.Substring(0, 7).ToUpper() + ".." : displayName.ToUpper());
			 Interface = Interface.Replace("%STEAMID%",userID);
			 
			 Interface = Interface.Replace("%TITLE_PLAYER_NICK_NAME%",GetLang("TITLE_PLAYER_NICK_NAME", player.UserIDString));
			 Interface = Interface.Replace("%TITLE_PLAYER_STEAMID%",GetLang("TITLE_PLAYER_STEAMID", player.UserIDString));

			CuiHelper.AddUi(player, Interface);
			
			DrawUI_ShowPoopUP_Reason(player, userID);
		}	

        private void WriteData()
        {
	        Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQReportSystem/PlayerInformations", PlayerInformations);
	        Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQReportSystem/ModeratorInformations", ModeratorInformations);
        }
		
		private void DrawUI_PoopUp_Moderator_Panel_Info(BasePlayer player, BasePlayer Target, String TitlePanel, List<Configuration.LangText> InfoList, String OffsetMin, String OffsetMax, List<String> AlternativeInfoList = null)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_POOPUP_MODERATOR_INFO_BLOCK");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%TITLE_PANEL%", TitlePanel);
			Interface = Interface.Replace("%OFFSET_MIN%", OffsetMin);
			Interface = Interface.Replace("%OFFSET_MAX%", OffsetMax);

			CuiHelper.AddUi(player, Interface);

			if (AlternativeInfoList != null)
			{
				if (AlternativeInfoList.Count == 0)
				{
					DrawUI_PoopUp_Moderator_InfoText(player, 0, GetLang("TITLE_POOPUP_MODERATION_INFO_BLOCK_EMPTY", player.UserIDString));
					return;
				}
				for (Int32 Y = 0; Y < AlternativeInfoList.Count; Y++)
					DrawUI_PoopUp_Moderator_InfoText(player, Y, AlternativeInfoList[Y]);

				return;
			}
			
			if (InfoList.Count == 0)
			{
				DrawUI_PoopUp_Moderator_InfoText(player, 0, GetLang("TITLE_POOPUP_MODERATION_INFO_BLOCK_EMPTY", player.UserIDString));
				return;
			}
			
			for (Int32 Y = 0; Y < InfoList.Count; Y++)
				DrawUI_PoopUp_Moderator_InfoText(player, Y, InfoList[Y].GetReasonTitle(player.userID));
		}
        
        private List<Fields> DT_StopCheck(UInt64 TargetID, BasePlayer Moderator, Boolean AutoStop = false, Boolean IsConsole = false, Configuration.ReasonReport Verdict = null)
        {
	        String ModeratorName = !IsConsole && Moderator != null ? Moderator.displayName : "Console";
	        String ModeratorID = !IsConsole && Moderator != null ? Moderator.UserIDString : "Console";
	        List<Fields> fields;
	        
	        if (AutoStop)
	        {
		        fields = new List<Fields>
		        {
			        new Fields(LanguageEn ? "Player verification is completed automatically :" : "Проверка игрока завершена автоматически :", "", false),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Suspect Information:" : "Информация о подозреваемом :", "", false),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Nick" : "Ник", $"{PlayerChecks[TargetID].DisplayName}", true),
			        new Fields("SteamID", $"{TargetID}", true),
			        new Fields("Результат", LanguageEn ? "The player's reports are not reset" : "Репорты игрока не сброшены", false),
		        };
	        }
	        else
	        {
		        fields = new List<Fields>
		        {
			        new Fields(LanguageEn ? "Player check completed :" : "Завершена проверка игрока :", "", false),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Moderator Information :" : "Информация о модераторе :", "", false),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Nick" : "Ник", $"{ModeratorName}", true),
			        new Fields("Steam64ID", $"[{ModeratorID}](https://steamcommunity.com/profiles/{ModeratorID})", true),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Suspect Information:" : "Информация о подозреваемом :", "", false),
			        new Fields("", "", false),
			        new Fields(LanguageEn ? "Nick" : "Ник", $"{PlayerChecks[TargetID].DisplayName}", true),
			        new Fields("SteamID", $"{TargetID}", true),
			        new Fields("Результат", $"{(Verdict == null ? (LanguageEn ? "No violations found" : "Нарушений не выявлено") : LanguageEn ? Verdict.Title.LanguageEN : Verdict.Title.LanguageRU)}", false),
		        };
	        }

	        return fields;
        }

				
				private void StartPluginLoad()
		{
			_ = this;
			
			//AddCommands
			cmd.AddChatCommand(config.CommandForContact, this, nameof(ChatCommandDiscord));
			cmd.AddConsoleCommand(config.CommandForContact, this, nameof(ConsoleCommandDiscord));
			
			//Validate DataFile
			foreach (BasePlayer player in BasePlayer.activePlayerList)
				OnPlayerConnected(player);
			
			//Load your images here
			ImageUi.Initialize();
			ImageUi.DownloadImages();

			//Starting IQFakeActive
			StartSysncFakeActive();
		}
        private void CheckStatusPlayer(BasePlayer player, String ReasonDisconnected = null)
        {
	        if (player == null) return;

	        if (!PlayerChecks.ContainsKey(player.userID)) return;

	        Boolean IsConsole = PlayerChecks[player.userID].ModeratorID == 0;
	        BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyStatusPlayerOrModerator;

	        if (Moderator == null && !IsConsole)
	        {
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED", player.UserIDString), player);
		        
		        Timer WaitModerator = timer.Once(600f, () =>
		        {
			        StopCheckedPlayer(player.userID, null, true);
			        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED_FULL_LEAVE", player.UserIDString), player);
		        });
		   		 		  						  	   		  	   		  	 				   		 		  				
		        if (!TimerWaitChecked.ContainsKey(player.userID))
			        TimerWaitChecked.Add(player.userID, WaitModerator);
		        else TimerWaitChecked[player.userID] = WaitModerator;

		        return;
	        }

	        if (ReasonDisconnected != null)
	        {
		        if (config.CheckControllerSettings.StopCheckLeavePlayer)
		        {
			        Timer WaitPlayer = timer.Once(900, () => { StopCheckedPlayer(player.userID, Moderator, true); });

			        if (!TimerWaitPlayer.ContainsKey(player.userID))
				        TimerWaitPlayer.Add(player.userID, WaitPlayer);
			        else TimerWaitPlayer[player.userID] = WaitPlayer;
		        }

		        if (IsConsole)
		        {
			        Puts(LanguageEn ? $"The player's connection status has changed from server to : {ReasonDisconnected}" : $"У игрока изменился статус соединения с сервером на : {ReasonDisconnected}");
			        return;
		        }
		        DrawUI_Moderator_Checked_Menu_Status(Moderator, ReasonDisconnected);
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_PLAYER_ALERT_MODERATOR", Moderator.UserIDString, ReasonDisconnected), Moderator);

		        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
		        {
			        List<Fields> fields = DT_ChangeStatus(false, player.displayName, player.UserIDString, ReasonDisconnected);
			        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
		        }
		        
		        SendVK(VKT_ChangeStatus(false, player.displayName, player.UserIDString, ReasonDisconnected));
		        
		        StopDamageRemove(player.userID);
		        return;
	        }
	        
	        if (!player.IsConnected) return;

	        player.Invoke(() =>
	        {
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_PLAYER", player.UserIDString), player);
		        DrawUI_Player_Alert(player);
		        
		        if(config.CheckControllerSettings.UseDemo)
			        player.StartDemoRecording();
		        
		        if (IsConsole)
		        {
			        Puts(LanguageEn ? "The player has connected to the server. Check continued" : "Игрок подключился к серверу. Проверка продолжена");
			        return;
		        }
		        if (Moderator == null) return;
		        DrawUI_Moderator_Checked_Menu_Status(Moderator, GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS_DEFAULT", Moderator.UserIDString));
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_MODERATOR", Moderator.UserIDString), Moderator);
		        
		        StopDamageAdd(player);
	        }, 3f);
	        
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_ChangeStatus(false, player.displayName, player.UserIDString, "Online");
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_ChangeStatus(false, player.displayName, player.UserIDString, "Online"));

	        
	        if (!TimerWaitPlayer.ContainsKey(player.userID)) return;
	        if (TimerWaitPlayer[player.userID].Destroyed) return;
	        
	        TimerWaitPlayer[player.userID].Destroy();
	        TimerWaitPlayer.Remove(player.userID);
        }

		
		
		
		private static Configuration config = new Configuration();

		private String CorrectedClanName(BasePlayer player)
		{
			String ClanTag = GetClanTag(player.UserIDString);
			String pattern = @"\[.*?\]";
			
			String CorrectedResult = ClanTag == null || String.IsNullOrWhiteSpace(ClanTag)
				? player.displayName
				: Regex.Replace(player.displayName, pattern, String.Empty);

			if (String.IsNullOrWhiteSpace(CorrectedResult) || CorrectedResult == null)
				CorrectedResult = player.displayName;
			
			return CorrectedResult;
		}
		
		private void DrawUI_TemplatePlayer_Moderator_IsSteam(BasePlayer player, String UserID)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_TEMPLATE_PLAYER_MODERATOR_ISSTEAM");
			if (Interface == null) return;

			Interface = Interface.Replace("%STATUS_PLAYER%", IsSteam(UserID) ? ImageUi.GetImage(config.ImagesSettings.ModeratorMenuCheckedSettings.SteamIcoPlayer) : ImageUi.GetImage(config.ImagesSettings.ModeratorMenuCheckedSettings.PirateIcoPlayer));

			CuiHelper.AddUi(player, Interface);
		}

        private void AddCooldown(UInt64 SenderID, UInt64 TargetID)
        {
	        if (config.ReportSendControllerSettings.CooldownReport == 0 && !config.ReportSendControllerSettings.NoRepeatReport) return;
	        if (!PlayerRepositories.ContainsKey(SenderID))
	        {
		        PlayerRepositories.Add(SenderID, new PlayerRepository
		        {
			        ReportedList = new Dictionary<UInt64, Double>(),
			        Cooldown = 0
		        });
	        }

	        PlayerRepositories[SenderID].AddCooldown(TargetID);
        }
		
		private void DrawUI_Player_Alert(BasePlayer player)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PLAYER_ALERT");
			if (Interface == null) return;
	
			Interface = Interface.Replace("%TITLE_TEXT%", GetLang("TITLE_PLAYER_ALERT_INFORMATION_TITLE", player.UserIDString));
			Interface = Interface.Replace("%DESCRIPTION_TEXT%", GetLang("TITLE_PLAYER_ALERT_INFORMATION_DESCRIPTION", player.UserIDString));
			
			CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_PLAYER_ALERT);
			CuiHelper.AddUi(player, Interface);
			
			if (!config.CheckControllerSettings.UseSoundAlert) return;
			NextTick(() => { SoundPlay(player); });
		}

        
        
        private void SendRaitingModerator(UInt64 ModeratorID, Int32 IndexAchive, Int32 StarAmount)
        {
	        if (!ModeratorInformations.ContainsKey(ModeratorID)) return;

	        ModeratorInformation ModeratorInfo = ModeratorInformations[ModeratorID];
	        List<Int32> ListScore = IndexAchive == 1 ? ModeratorInfo.OneScore :
		        IndexAchive == 2 ? ModeratorInfo.TwoScore :
		        IndexAchive == 3 ? ModeratorInfo.ThreeScore : null;

	        ListScore?.Add(StarAmount);
	        
	        Interface.Call("OnSendedFeedbackChecked", ModeratorID, IndexAchive, StarAmount);
        }

        private void ReadData()
        {
	        PlayerInformations = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<UInt64, PlayerInformation>>("IQSystem/IQReportSystem/PlayerInformations");
	        ModeratorInformations = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<UInt64, ModeratorInformation>>("IQSystem/IQReportSystem/ModeratorInformations");
        }
        private Dictionary<UInt64, Timer> TimerWaitPlayer = new Dictionary<UInt64, Timer>();
		
		private List<String> GetServersBansRCC(UInt64 TargetID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.RCCSettings.RCCKey)) return null;
			return !RCC_LocalRepository.ContainsKey(TargetID) ? new List<String>() : RCC_LocalRepository[TargetID].LastBansServers;
		}

		private void OnPlayerDisconnected(BasePlayer player, String reason)
		{
			CheckStatusPlayer(player, reason);
			
			if (IsModerator(player))
				CheckStatusModerator(player, reason);
		} 
        private List<Fields> DT_PlayerSendContact(BasePlayer Sender, String Contact)
        {
	        List<Fields> fields = new List<Fields>
	        {
		        new Fields(LanguageEn ? "Information about the sender :" : "Информация об отправителе :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{Sender.displayName}", true),
		        new Fields("Steam64ID", $"[{Sender.userID}](https://steamcommunity.com/profiles/{Sender.userID})", true),
		        new Fields(LanguageEn ? "Contacts for communication :" : "Контакты для связи :", Contact, false),
	        };

	        return fields;
        }

        
        
        
        public Dictionary<BasePlayer, Coroutine> RoutineSounds = new Dictionary<BasePlayer, Coroutine>();

		
		
		
		private Dictionary<UInt64, LocalRepositoryOzProtect> OzProtect_LocalRepository = new Dictionary<UInt64, LocalRepositoryOzProtect>();
		protected override void SaveConfig() => Config.WriteObject(config);
		
				public class OzResponse
		{
			public int unixtime { get; set; }
			public string reason { get; set; }
			public string proofid { get; set; }
			public bool pirate { get; set; }
			public bool active { get; set; }
			public bool reliable { get; set; }
			public bool unnecessary { get; set; }
			public OzServer server { get; set; }
			public string admin { get; set; }
			public int game { get; set; }
			public string date { get; set; }
			public int bantime { get; set; }
		}
		
		private void DrawUI_Moderator_Checked_Menu_Discord(BasePlayer moderator, String Discord)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_DISCORD_STATUS_CHECKED_MODERATOR");
			if (Interface == null) return;
		   		 		  						  	   		  	   		  	 				   		 		  				
			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD%", GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD", moderator.UserIDString, Discord));

			CuiHelper.DestroyUi(moderator, "InfoDiscord");
			CuiHelper.AddUi(moderator, Interface);
		}

		private String GetClanTag(String userID)
		{
			if (Clans)
				return (String)Clans.Call("GetClanOf", userID);
			else return null;
		}
		
		private void DrawUI_Raiting_Menu_Stars(BasePlayer player, Int32 SelectedAmount, UInt64 ModeratorID)
		{
			for (Int32 X = 0; X < 5; X++)
			{
				String Interface =
					InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_RAITING_MENU_PLAYER_STARS");
				if (Interface == null) return;

				Interface = Interface.Replace("%OFFSET_MIN%", $"{-88.24 + (X * 15)} -22");
				Interface = Interface.Replace("%OFFSET_MAX%", $"{-77.58 + (X * 15)} -12");
				Interface = Interface.Replace("%COLOR_STARS%", SelectedAmount >= X ? "1 1 1 1" : "1 1 1 0.5");
				Interface = Interface.Replace("%COMMAND_STARS%", SelectedAmount >= 0 ? "" : $"report.panel select.raiting.star {X} {ModeratorID}");

				CuiHelper.AddUi(player, Interface);
			}
		}

                
              
        public Boolean IsValidStartChecked(BasePlayer Target, BasePlayer Moderator, Boolean IsConsole = false)
        {
	        if (PlayerChecks.ContainsKey(Target.userID))
	        {
		        if (IsConsole)
			        Puts(LanguageEn ? "This player has already been called for checked" : "Данного игрока уже вызвали на проверку");
		        else if(Moderator != null)
			        SendChat(GetLang("NOTIFY_MODERATOR_ITS_PLAYER_CHECKED", Moderator.UserIDString), Moderator);
		        return false;
	        }
	        
	        if (IsRaidBlock(Target)) 
	        {
		        if (IsConsole)
			        Puts(LanguageEn ? "The check was canceled automatically with complaints saved! Reason : the player has an active raid-block" : "Проверка отменена автоматически с сохранением жалоб! Причина : у игрока активный рейд-блок");
		        else if(Moderator != null)
			        SendChat(GetLang("NOTIFY_MODERATOR_RAIDBLOCK_PLAYER", Moderator.UserIDString), Moderator);
		        return false;
	        }

	        if (IsCombatBlock(Target))
	        {
		        if (IsConsole)
			        Puts(LanguageEn ? "The check was canceled automatically with complaints saved! Reason : the player has an active combat-block" : "Проверка отменена автоматически с сохранением жалоб! Причина : у игрока активный комбат-блок");
		        else if(Moderator != null)
			        SendChat(GetLang("NOTIFY_MODERATOR_COMBATBLOCK_PLAYER", Moderator.UserIDString), Moderator);
		        return false;
	        }

	        if (IsDuel(Target.userID))
	        {
		        if (IsConsole)
			        Puts(LanguageEn ? "The check is canceled automatically with complaints saved! Reason : the player is in a duel" : "Проверка отменена автоматически с сохранением жалоб! Причина : игрок находится на дуэли");
		        else if(Moderator != null)
			        SendChat(GetLang("NOTIFY_MODERATOR_DUEL_PLAYER", Moderator.UserIDString), Moderator);
		        return false;
	        }

	        if (Moderator != null && !IsConsole)
	        {
		        if (IsFriendStartChecked(Moderator.userID, Target.userID))
		        {
			        SendChat(GetLang("NOTIFY_MODERATOR_FRIEND_PLAYER", Moderator.UserIDString), Moderator);
			        return false;
		        }
		        if (IsClansStartChecked(Moderator.UserIDString, Target.UserIDString))
		        {
			        SendChat(GetLang("NOTIFY_MODERATOR_FRIEND_PLAYER", Moderator.UserIDString), Moderator);
			        return false;
		        }
	        }
	        
	        return true;
        }

		protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();

				private void SendChat(String Message, BasePlayer player, ConVar.Chat.ChatChannel channel = ConVar.Chat.ChatChannel.Global)
		{
		    if (IQChat)
			    if (config.ReferenceSettings.IQChatSetting.UIAlertUse)
				    IQChat?.Call("API_ALERT_PLAYER_UI", player, Message);
			    else IQChat?.Call("API_ALERT_PLAYER", player, Message, config.ReferenceSettings.IQChatSetting.CustomPrefix, config.ReferenceSettings.IQChatSetting.CustomAvatar);
		    else player.SendConsoleCommand("chat.add", channel, 0, Message); 
		}
        private class InterfaceBuilder
        {
            
            public static InterfaceBuilder Instance;
            
            public const String UI_LAYER = "UI_IQREPORT_INTERFACE";
            
            public const String UI_REPORT_PANEL = "UI_REPORT_PANEL";
            public const String UI_REPORT_LEFT_PANEL = "UI_REPORT_LEFT_PANEL";
	        public const String UI_REPORT_PLAYER_PANEL = "UI_REPORT_PLAYER_PANEL";
	        public const String UI_REPORT_POOPUP_PLAYER = "UI_REPORT_POOPUP_PLAYER";
	        public const String UI_REPORT_POOPUP_MODERATOR = "UI_REPORT_POOPUP_MODERATOR";
	        public const String UI_REPORT_MODERATOR_STATISTICS = "UI_REPORT_MODERATOR_STATISTICS";
	        public const String UI_REPORT_MODERATOR_MENU_CHECKED = "UI_REPORT_MODERATOR_MENU_CHECKED";
	        public const String UI_REPORT_RAITING_PLAYER_PANEL = "UI_REPORT_RAITING_PLAYER_PANEL";
	        public const String UI_REPORT_PLAYER_ALERT = "UI_REPORT_PLAYER_ALERT";

	        public Dictionary<String, String> Interfaces;

            
            
            public InterfaceBuilder()
            {
                Instance = this;
                Interfaces = new Dictionary<String, String>();

                Building_Bacgkround();
                
                Building_Panel_Players();
                Building_PageController();
                Building_PlayerTemplate();
                Building_PoopUp_Player();
                Building_PoopUp_Reason();
                
                Building_PlayerTemplate_Moderator();
                Building_Left_Menu();
                Building_Button_Template();
                Building_PoopUP_Moderator();
                Building_PoopUP_Moderator_InfoBlock();
                Building_Text_Template_Moderator_Block_Info();
                
                Building_HeaderPanel_Search();

                Building_Profile_Moderator_Stats();
                Building_Profile_Template_Banner();
                Building_Profile_Template_Banner_AdditionalImg();
                Building_Profile_Template_Banner_AdditionalText();

                Building_Moderator_Menu();
				Building_ModeratorMenuChecked_InfoDiscord();
				Building_ModeratorMenuChecked_InfoOnline();
				Building_ModeratorMenu_Verdict_Button();
                
                Building_Raiting_Menu();
                Building_Raiting_Select_Button();
                
                Building_DropList_Reasons();
                
                Building_Player_Alert();

                Building_PlayerTemplate_Moderator_IsSteam();
            }

            public static void AddInterface(String name, String json)
            {
                if (Instance.Interfaces.ContainsKey(name))
                {
                    _.PrintError($"Error! Tried to add existing cui elements! -> {name}");
                    return;
                }
		   		 		  						  	   		  	   		  	 				   		 		  				
                Instance.Interfaces.Add(name, json);
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            public static String GetInterface(String name)
            {
                String json = String.Empty;
                if (Instance.Interfaces.TryGetValue(name, out json) == false)
                {
                    _.PrintWarning($"Warning! UI elements not found by name! -> {name}");
                }

                return json;
            }

            public static void DestroyAll()
            {
                for (Int32 i = 0; i < BasePlayer.activePlayerList.Count; i++)
                {
                    BasePlayer player = BasePlayer.activePlayerList[i];
                    CuiHelper.DestroyUi(player, UI_REPORT_PANEL);
                    CuiHelper.DestroyUi(player, UI_REPORT_MODERATOR_MENU_CHECKED);
                    CuiHelper.DestroyUi(player, UI_REPORT_RAITING_PLAYER_PANEL);
                    CuiHelper.DestroyUi(player, UI_REPORT_PLAYER_ALERT);
                }
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            
            
            private void Building_Bacgkround()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiPanel
	            {
		            CursorEnabled = true,
		            Image = { Color = "0 0 0 0" },
		            RectTransform ={ AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-459.83 -316.66", OffsetMax = "461.49 316.67" }
	            },"Overlay",UI_REPORT_PANEL);
	            
	            container.Add(new CuiButton
	            {
		            RectTransform = { AnchorMin = "-100 -100", AnchorMax = "100 100" },
		            Button = { Close = UI_REPORT_PANEL, Color = "0 0 0 0" },
		            Text = { Text = "" }
	            }, UI_REPORT_PANEL);
	            
	            container.Add(new CuiElement
	            {
		            Name = "PNG_BACKGORUND",
		            Parent = UI_REPORT_PANEL,
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.Background) },
			            new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "TitleUi",
		            Parent = UI_REPORT_PANEL,
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_NAME_REPORT_SYSTEM%", Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0 0.5", AnchorMax = "0 0.5", OffsetMin = "38.72 242.11", OffsetMax = "180.96 276.15" }
		            }
	            });
	            
	            
	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0 0 0 0" },
		            RectTransform ={ AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-265.27 -93.21", OffsetMax = "224.90 -28.37" }
	            },UI_REPORT_PANEL,"HeaderUI");

	            container.Add(new CuiElement
	            {
		            Name = "HeaderActionTitle",
		            Parent = "HeaderUI",
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_PLAYER_HEADER_TITLE_SEND_REPORT%", Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-219.38 -21.38", OffsetMax = "-33.95 4.11" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "HeaderActionDescription",
		            Parent = "HeaderUI",
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_PLAYER_HEADER_TITLE_DESC_SEND_REPORT%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.AdditionalColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-219.38 0", OffsetMax = "-78.11 19.54" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "HeaderSearchIcon",
		            Parent = "HeaderUI",
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColorText, Png = ImageUi.GetImage(config.ImagesSettings.Search)},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "136.33 -6.55", OffsetMax = "147 4.11" }
		            }
	            });

	            
	            
	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0 0 0 0" },
		            RectTransform ={ AnchorMin = "1 0.5", AnchorMax = "1 0.5", OffsetMin = "-235.75 -288.17", OffsetMax = "-28.33 288.29" }
	            },UI_REPORT_PANEL,"ProfilePanel");

	            container.Add(new CuiElement
	            {
		            Name = "AvatarUser",
		            Parent = "ProfilePanel",
		            Components = {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = "%AVATAR_PLAYER%"},
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-66.32 -51.29", OffsetMax = "-23.66 -8.63" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "CircleBlock",
		            Parent = "AvatarUser",
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.AvatarBlur)},
			            new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1"}
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "Nick",
		            Parent = "ProfilePanel",
		            Components = {
			            new CuiTextComponent { Text = "%NICK_PROFILE%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-19.05 -34.22", OffsetMax = "82.47 -15.09" }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiElement
	            {
		            Name = "CheckedCount",
		            Parent = "ProfilePanel",
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_PROFILE_INFO_CHECKED%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.AdditionalColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-19.05 -45.29", OffsetMax = "75.05 -29.37" }
		            }
	            });


	            	            
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Close = UI_REPORT_PANEL},
		            Text = { Text = "%TITLE_CLOSE_BUTTON_REPORT%", Font = "robotocondensed-regular.ttf", FontSize = 17, Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText },
		            RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "405.26 265.06", OffsetMax = "426.6 286.4" }
	            },UI_REPORT_PANEL,"CloseReportPanel");

	            AddInterface($"{UI_LAYER}_BACKGORUND", container.ToJson());
            }
            
            private void Building_HeaderPanel_Search()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            String NickName = "";
	            container.Add(new CuiPanel
	            {
		            RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "152.25 -9.98", OffsetMax = "245.09 7.53" },
		            Image = { Color = "0 0 0 0" }
	            }, "HeaderUI", "InputPanelSearch" + ".Input");

	            container.Add(new CuiElement
	            {
		            Parent = "InputPanelSearch" + ".Input",
		            Name = "InputPanelSearch" + ".Input.Current",
		            Components =
		            {
			            new CuiInputFieldComponent { Text = "%TITLE_PLAYER_HEADER_TITLE_SEARCH_PLAYER%", FontSize = 14, Command = $"report.panel search.player %ISMODERATOR% {NickName}", Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText, CharsLimit = 13, NeedsKeyboard = true},
			            new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
		            }
	            });
	            
	            AddInterface($"{UI_LAYER}_SEARCH_HEADER", container.ToJson());
            }

            
            private void Building_Profile_Moderator_Stats()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0 0 0 0" },
		            RectTransform ={ AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-103.71 -288.23", OffsetMax = "103.71 224.66" }
	            },"ProfilePanel",UI_REPORT_MODERATOR_STATISTICS);
	            
	            container.Add(new CuiElement
	            {
		            Name = "TitleStatistics",
		            Parent = UI_REPORT_MODERATOR_STATISTICS,
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_PROFILE_MODERATOR_STATISTICS_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-93.21 -40.28", OffsetMax = "91.72 -13.05" }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "TitleRaiting",
		            Parent = UI_REPORT_MODERATOR_STATISTICS,
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_QUALITY_ASSESSMENT%", Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-93.21 -210.09", OffsetMax = "91.72 -182.86" }
		            }
	            });
	            
	            AddInterface($"{UI_LAYER}_PROFILE_MODERATION_INFO_PANEL", container.ToJson());
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            private void Building_Profile_Template_Banner()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "CheckedPanel",
		            Parent = UI_REPORT_MODERATOR_STATISTICS,
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElements, Png = ImageUi.GetImage(config.ImagesSettings.StatisticsBlockSettings.BlockStatsModeration) },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"}
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "TitleChecked",
		            Parent = "CheckedPanel",
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_BANNER%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-61.85 -4.69", OffsetMax = "28.22 13.37" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "CountPanelChecked",
		            Parent = "CheckedPanel",
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElementsTwo, Png = ImageUi.GetImage(config.ImagesSettings.StatisticsBlockSettings.BlockStatsRaitingModeration) },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "33.73 -9.33", OffsetMax = "77.06 9.33"}
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "CountInfoChecked",
		            Parent = "CountPanelChecked",
		            Components = {
			            new CuiTextComponent { Text = "%ARGS_BANNER%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-21.66 -9.33", OffsetMax = "21.66 9.33" }
		            }
	            });
	            
	            AddInterface($"{UI_LAYER}_PROFILE_BANNER_TEMPLATE", container.ToJson());
            }
            
            private void Building_Profile_Template_Banner_AdditionalText()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "TitleCheckedAllTime",
		            Parent = "CheckedPanel",
		            Components = {
			            new CuiTextComponent { Text = "%ADDITIONAL_TEXT%", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.LowerLeft, Color = config.ColorsSettings.AdditionalColorText },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-61.85 -13.21", OffsetMax = "28.22 2.40" }
		            }
	            });

	            AddInterface($"{UI_LAYER}_PROFILE_BANNER_TEMPLATE_ADDITIONAL_TEXT", container.ToJson());
            }
            
            private void Building_Profile_Template_Banner_AdditionalImg()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "RateImageOne",
		            Parent = "CheckedPanel",
		            Components = {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = ImageUi.GetImage(config.ImagesSettings.StatisticsBlockSettings.RaitingImage) },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%" }
		            }
	            });

	            AddInterface($"{UI_LAYER}_PROFILE_BANNER_TEMPLATE_ADDITIONAL_IMG", container.ToJson());
            }

                        
            
            
            private void Building_Panel_Players()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0.8 0 0 0" },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-265.27 -288.17",
			            OffsetMax = "224.90 223.45"
		            }
	            }, UI_REPORT_PANEL, UI_REPORT_PLAYER_PANEL);

	            container.Add(new CuiElement
	            {
		            Name = "ActionSearch",
		            Parent = UI_REPORT_PLAYER_PANEL,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_LIST%", Font = "robotocondensed-regular.ttf", FontSize = 18,
				            Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-219.21 212.58", OffsetMax = "56.36 244.75"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "ActionPageNext",
		            Parent = UI_REPORT_PLAYER_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = ImageUi.GetImage(config.ImagesSettings.PageUp)},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "170.99 231.02",
				            OffsetMax = "177.66 234.35"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "ActionPageBack",
		            Parent = UI_REPORT_PLAYER_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = ImageUi.GetImage(config.ImagesSettings.PageDown) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "210.38 231.02",
				            OffsetMax = "217.04 234.35"
			            }
		            }
	            });
	            
	            AddInterface($"{UI_LAYER}_PANEL_PLAYERS", container.ToJson());
            }

            private void Building_PageController()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "ActionPageCount",
		            Parent = UI_REPORT_PLAYER_PANEL,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%AMOUNT_PAGE%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "177.65 224.77", OffsetMax = "210.38 242.86"
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            { 
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_PAGE_NEXT%" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 40, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0" },
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}
	            }, "ActionPageNext", "ButtonNextPage");
	            
	            container.Add(new CuiButton
	            { 
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_PAGE_BACK%" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 40, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0" },
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}
	            }, "ActionPageBack", "ButtonBackPage");

	            AddInterface($"{UI_LAYER}_PANEL_PLAYERS_PAGE_CONTROLLER", container.ToJson());
            }
            
            
            
             private void Building_PlayerTemplate()
            {
	            CuiElementContainer container = new CuiElementContainer();
	
				container.Add(new CuiPanel 
				{
		            CursorEnabled = false,
		            Image = { Color = "0 0 0 0" },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
		            }
	            }, UI_REPORT_PLAYER_PANEL, "PlayerPanel");

	            container.Add(new CuiElement
	            {
		            Name = "AvatarPlayer",
		            Parent = "PlayerPanel",
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = "%STEAMID%"},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-64.62 -18", OffsetMax = "-28.62 18"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "BlurAvatar",
		            Parent = "AvatarPlayer",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.AvatarBlur)},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0 0", AnchorMax = "1 1"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "NickName",
		            Parent = "PlayerPanel",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%NICK%", Font = "robotocondensed-regular.ttf", FontSize = 16,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-25.32 -2.93", OffsetMax = "64.62 18"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "NickNameTitle",
		            Parent = "PlayerPanel",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_NICK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 16,
				            Align = TextAnchor.LowerLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-25.32 -18", OffsetMax = "64.62 3.41"
				            
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            { 
		            Button = { Color = "0 0 0 0", Command = "%COMMAND%" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 40, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0" },
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}
	            }, "PlayerPanel", "SelectUserForReport");
	            
	            AddInterface($"{UI_LAYER}_TEMPLATE_PLAYER", container.ToJson());
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            
            
            private void Building_PoopUp_Player()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiPanel
	            {
		            Image = { Color = "0 0 0 0.3", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
		            RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-432.18 -288.17", OffsetMax = "432.34 288.29" }
	            }, UI_REPORT_PANEL, "BLURED_POOP_UP");
	            
	            container.Add(new CuiButton
	            {
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
		            Button = { Close = "UI_REPORT_PANEL_CLOSE", Command = "report.panel close.poopup",  Color = "0 0 0 0" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 13, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0"}
	            },  "BLURED_POOP_UP", "UI_REPORT_PANEL_CLOSE");
	            
	            container.Add(new CuiElement
	            {
		            Name = UI_REPORT_POOPUP_PLAYER,
		            Parent = UI_REPORT_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = "%POOPUP_BACKGORUND%" },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-188.59 -199.06", OffsetMax = "189.40 200.26"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpAvatar",
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = "%AVATAR%"},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-152.46 113.8",
				            OffsetMax = "-109.8 156.46"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpCircle",
		            Parent = "PoopUpAvatar",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.AvatarBlur) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-21.33 -21.33",
				            OffsetMax = "21.33 21.33"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpNickTitle",
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_NICK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-100.51 119.71", OffsetMax = "-25.96 138.81"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Name = "PoopUpNickName",
		            Components =
		            {
			            new CuiInputFieldComponent {  Text = "%NICK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText, NeedsKeyboard = true, LineType = InputField.LineType.SingleLine, ReadOnly = true},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-100.51 132.24", OffsetMax = "-13.00 154.29" }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiElement
	            {
		            Name = "PoopUpSteamIDTitle",
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_STEAMID%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "34.94 119.71", OffsetMax = "155.55 138.81"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Name = "PoopUpSteamID",
		            Components =
		            {
			            new CuiInputFieldComponent {  Text = "%STEAMID%", Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText, NeedsKeyboard = true, LineType = InputField.LineType.SingleLine, ReadOnly = true},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "34.93 132.24", OffsetMax = "155.54 154.29" }
		            }
	            });

	            AddInterface($"{UI_LAYER}_TEMPLATE_POOPUP", container.ToJson());
            }

             private void Building_PoopUp_Reason()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpReason",
		            Parent = UI_REPORT_POOPUP_PLAYER,
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElements, Png = "%POOPUP_REASON%" },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Command = "%COMMAND%" },
		            Text = { Text = "%REASON%", Font = "robotocondensed-regular.ttf", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText },
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}
	            }, "PoopUpReason", "ReasonButton");
		   		 		  						  	   		  	   		  	 				   		 		  				
	            AddInterface($"{UI_LAYER}_TEMPLATE_POOPUP_REASON", container.ToJson());
            }
            
            
            private void Building_PlayerTemplate_Moderator()
            {
	            CuiElementContainer container = new CuiElementContainer();
	
	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0 0 0 0" },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
		            }
	            }, UI_REPORT_PLAYER_PANEL, "PlayerPanel_Moderator");

	            container.Add(new CuiElement
	            {
		            Name = "AvatarPlayer",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = "%AVATAR%"},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-219.21 -18",
				            OffsetMax = "-183.21 18"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "PoopUpCircle",
		            Parent = "AvatarPlayer",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.AvatarBlur) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0 0", AnchorMax = "1 1"
			            }
		            }
	            });


	            container.Add(new CuiElement
	            {
		            Name = "NickName",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%NAME%", Font = "robotocondensed-regular.ttf", FontSize = 15,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-180.04 -2.93",
				            OffsetMax = "-99.62 18"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "NickNameTitle",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_NICK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 16,
				            Align = TextAnchor.LowerLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-180.04 -18",
				            OffsetMax = "-90.09 3.41"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "SteamIDPlayer",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%STEAMID%", Font = "robotocondensed-regular.ttf", FontSize = 15,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-29.44 -2.93",
				            OffsetMax = "96.62 18"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "SteamIDTitle",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_STEAMID%", Font = "robotocondensed-regular.ttf", FontSize = 15,
				            Align = TextAnchor.LowerLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-29.43 -18",
				            OffsetMax = "93.62 3.41"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "ReportCount",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%REPORT_COUNTS%", Font = "robotocondensed-regular.ttf", FontSize = 15,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "155.37 -2.93",
				            OffsetMax = "210.22 18"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiElement
	            {
		            Name = "ReportTitle",
		            Parent = "PlayerPanel_Moderator",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_REPORTS%", Font = "robotocondensed-regular.ttf", FontSize = 15,
				            Align = TextAnchor.LowerLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "155.37 -18",
				            OffsetMax = "210.22 3.41"
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            { 
		            Button = { Color = "0 0 0 0", Command = "%COMMAND%" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 40, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0" },
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}
	            }, "PlayerPanel_Moderator", "SelectUserForReport");

	            AddInterface($"{UI_LAYER}_TEMPLATE_PLAYER_MODERATOR", container.ToJson());
            }

            private void Building_PlayerTemplate_Moderator_IsSteam()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "IconStatusIsSteam",
		            Parent = "AvatarPlayer",
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElementsTwo, Png = "%STATUS_PLAYER%"},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-18 7.33", OffsetMax = "-7.33 18" }
		            }
	            });
	            
	            AddInterface($"{UI_LAYER}_TEMPLATE_PLAYER_MODERATOR_ISSTEAM", container.ToJson());
            }
            
            
            
            private void Building_Left_Menu()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiPanel
	            {
		            CursorEnabled = false,
		            Image = { Color = "0.80 0.29 0.29 0" },
		            RectTransform =
		            {
			            AnchorMin = "0 0.5", AnchorMax = "0 0.5", OffsetMin = "28.49 -288.17", OffsetMax = "195.39 226.15"
		            }
	            }, UI_REPORT_PANEL, UI_REPORT_LEFT_PANEL);

	            AddInterface($"{UI_LAYER}_LEFT_MENU", container.ToJson());
            }

            private void Building_Button_Template()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "ReportPanelButton",
		            Parent = UI_REPORT_LEFT_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "%COLOR_BUTTON%", Png = ImageUi.GetImage(config.ImagesSettings.LeftBlockSettings.ButtonBackgorund) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "LogoButtonReport",
		            Parent = "ReportPanelButton",
		            Components =
		            {
			            new CuiRawImageComponent
				            { Color = config.ColorsSettings.MainColorText, Png = "%ICON_BUTTON%" },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5",  OffsetMin = "-46 -6.33", OffsetMax = "-35.33 4.33"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "LabelText",
		            Parent = "ReportPanelButton",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_BUTTON%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-19.89 -17", OffsetMax = "62.66 17"
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            {
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
		            Button = { Command = "%COMMAND_BUTTON%", Color = "0 0 0 0" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "0 0 0 0" }
	            },  "ReportPanelButton", "Button_Take");
	            
	            AddInterface($"{UI_LAYER}_LEFT_MENU_BUTTON", container.ToJson());
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            
            
            private void Building_PoopUP_Moderator()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiPanel
	            {
		            Image = { Color = "0 0 0 0.3", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
		            RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-432.18 -288.17", OffsetMax = "432.34 288.29" }
	            }, UI_REPORT_PANEL, "BLURED_POOP_UP");
	            
	            container.Add(new CuiButton
	            {
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
		            Button = { Close = "UI_REPORT_PANEL_CLOSE", Command = "report.panel close.poopup",  Color = "0 0 0 0" },
		            Text = { Text = "", Font = "robotocondensed-regular.ttf", FontSize = 13, Align = TextAnchor.MiddleCenter, Color = "0 0 0 0"}
	            },  "BLURED_POOP_UP", "UI_REPORT_PANEL_CLOSE");

	            container.Add(new CuiElement
	            {
		            Name = UI_REPORT_POOPUP_MODERATOR,
		            Parent = UI_REPORT_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.ModerationBlockSettings.ModeratorPoopUPBackgorund) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-276.59 -199.66",
				            OffsetMax = "277.40 199.66"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpAvatar",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = "%AVATAR%"},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-235.53 111.86",
				            OffsetMax = "-192.86 154.53"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpCircle",
		            Parent = "PoopUpAvatar",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.AvatarBlur) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-21.33 -21.33",
				            OffsetMax = "21.33 21.33"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiElement
	            {
		            Name = "PoopUpNickTitle",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_NICK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 16,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-181.08 113.19", OffsetMax = "-93.58 134.67"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Name = "PoopUpNickName",
		            Components =
		            {
			            new CuiInputFieldComponent {  Text = "%PLAYER_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 16, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText, NeedsKeyboard = true, LineType = InputField.LineType.SingleLine, ReadOnly = true},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-181.08 125.84", OffsetMax = "-93.58 147.89" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "PoopUpSteamIDTitle",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PLAYER_STEAMID%", Font = "robotocondensed-regular.ttf", FontSize = 16,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-62.83 113.19",
				            OffsetMax = "57.77 134.67"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiElement
	            {
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Name = "PoopUpSteamID",
		            Components =
		            {
			            new CuiInputFieldComponent {  Text = "%PLAYER_USERID%", Font = "robotocondensed-regular.ttf", FontSize = 16, Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText, NeedsKeyboard = true, LineType = InputField.LineType.SingleLine, ReadOnly = true},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-62.83 125.84", OffsetMax = "63.77 147.89" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "CheckStatus",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%LAST_MODER_CHECK_NAME%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-232.80 56.22", OffsetMax = "-84.33 78.64"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "CheckStatusTitle",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_POOPUP_MODERATION_LAST_CHECK_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-232.80 42.76", OffsetMax = "-84.32 64.84"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "AmountCheck",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%AMOUNT_CHECK%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-67.03 56.23", OffsetMax = "81.43 78.64"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "AmountCheckTitle",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_POOPUP_MODERATION_AMOUNT_CHECK_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-67.03 42.76", OffsetMax = "81.43 64.84"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "AmountReport",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%AMOUNT_REPORTS%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "99.96 56.23", OffsetMax = "248.43 78.64"
			            }
		            }
	            });
																																																																																																			//diavel
	            container.Add(new CuiElement
	            {
		            Name = "AmountReportTitle",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_POOPUP_MODERATION_REPORTS_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 13,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.AdditionalColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "99.96 42.76", OffsetMax = "248.43 64.84"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "StartCheckPlayerButton",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components = {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElements, Png = ImageUi.GetImage(config.ImagesSettings.LeftBlockSettings.ButtonBackgorund)},
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "107.4 116.2", OffsetMax = "232.73 150.2" }
		            }
	            });
	           
	            container.Add(new CuiButton
	            {
		            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
		            Button = { Close = UI_REPORT_PANEL, Command = "%COMMAND_START%", Color = "0 0 0 0" },
		            Text = { Text = "%TITLE_POOPUP_MODERATION_INFO_BUTTON_START_CHECK%", Font = "robotocondensed-regular.ttf", FontSize = 13, Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText }
	            },  "StartCheckPlayerButton", "StartFuncCheckPlayer");
		   		 		  						  	   		  	   		  	 				   		 		  				
	            AddInterface($"{UI_LAYER}_POOPUP_MODERATOR", container.ToJson());
            }

            private void Building_PoopUP_Moderator_InfoBlock()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "HistoryReportsPanel",
		            Parent = UI_REPORT_POOPUP_MODERATOR,
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.ModerationBlockSettings.ModeratorPoopUPPanelBackgorund) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "TitleHistory",
		            Parent = "HistoryReportsPanel",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PANEL%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-65.33 55.41",
				            OffsetMax = "65.33 80"
			            }
		            }
	            });

	            AddInterface($"{UI_LAYER}_POOPUP_MODERATOR_INFO_BLOCK", container.ToJson());
            }

            private void Building_Text_Template_Moderator_Block_Info()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "PanelText",
		            Parent = "HistoryReportsPanel",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.AdditionalColorElements, Png = ImageUi.GetImage(config.ImagesSettings.ModerationBlockSettings.ModeratorPoopUPTextBackgorund) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "Title",
		            Parent = "PanelText",
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%REASON_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 10,
				            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0 0", AnchorMax = "1 1"
			            }
		            }
	            });

	            AddInterface($"{UI_LAYER}_POOPUP_MODERATOR_INFO_BLOCK_TEXT_TEMPLATE", container.ToJson());
            }

            
            
            private void Building_Moderator_Menu()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Parent = "Overlay",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.ModeratorMenuCheckedSettings.ModeratorCheckedBackground) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "208.93 17.8", OffsetMax = "413.6 116.46"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "BackgroundButtonStop",
		            Parent = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Components =
		            {
			            new CuiRawImageComponent
				            { Color = config.ColorsSettings.AdditionalColorElementsThree, Png = ImageUi.GetImage(config.ImagesSettings.ModeratorMenuCheckedSettings.ModeratorCheckedStopButton) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.6 -41.2",
				            OffsetMax = "-3.26 -14.53"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_STOP_CHECKED%"},
		            Text =
		            {
			            Text = "%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_STOP%", Font = "robotocondensed-regular.ttf", FontSize = 12,
			            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
		            },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-42.66 -13.33",
			            OffsetMax = "42.66 13.33"
		            }
	            }, "BackgroundButtonStop", "ButtonStopCheck");

	            container.Add(new CuiElement
	            {
		            Name = "BackgroundButtonVerdict",
		            Parent = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = ImageUi.GetImage(config.ImagesSettings.ModeratorMenuCheckedSettings.ModeratorVerdictButton) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "1.13 -41.2",
				            OffsetMax = "86.46 -14.53"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "TitleMenu",
		            Parent = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLES%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.6 27.38",
				            OffsetMax = "51.76 44.21"
			            }
		            }
	            });

	            AddInterface($"{UI_LAYER}_MODERATOR_MENU_CHECKED", container.ToJson());
            }

            private void Building_ModeratorMenu_Verdict_Button()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_VERDICT%"},
		            Text =
		            {
			            Text = "%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_RESULT%", Font = "robotocondensed-regular.ttf", FontSize = 12,
			            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
		            },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-42.66 -13.33",
			            OffsetMax = "42.66 13.33"
		            }
	            }, "BackgroundButtonVerdict", "ButtonVerdictCheck");

	            AddInterface($"{UI_LAYER}_MODERATOR_MENU_CHECKED_BUTTON_VERDICT", container.ToJson());
            }
            private void Building_ModeratorMenuChecked_InfoOnline()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = "InfoStatus",
		            Parent = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS%", Font = "robotocondensed-regular.ttf", FontSize = 10,
				            Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.6 -6.94",
				            OffsetMax = "51.76 9.88"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            AddInterface($"{UI_LAYER}_ONLINE_STATUS_CHECKED_MODERATOR", container.ToJson());
            }
            private void Building_ModeratorMenuChecked_InfoDiscord()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Parent = UI_REPORT_MODERATOR_MENU_CHECKED,
		            Name = "InfoDiscord",
		            Components =
		            {
			            new CuiInputFieldComponent {  Text = "%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD%", Font = "robotocondensed-regular.ttf", FontSize = 10, Align = TextAnchor.MiddleLeft, Color = config.ColorsSettings.MainColorText, NeedsKeyboard = true, LineType = InputField.LineType.SingleLine, ReadOnly = true },
			            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.6 8.45", OffsetMax = "51.76 25.28" }
		            }
	            });

	            AddInterface($"{UI_LAYER}_DISCORD_STATUS_CHECKED_MODERATOR", container.ToJson());
            }
            private void Building_DropList_Reasons()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "%REASON_NAME%",
		            Parent = "%PARENT_UI%",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.ReasonModeratorAndRaiting) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });

	            container.Add(new CuiButton
	            {
		            Button = { Color = "1 1 1 0", Command = "%COMMAND_REASON%"},
		            Text =
		            {
			            Text = "%TEXT_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 14,
			            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
		            },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-102.33 -12", OffsetMax = "102.33 12"
		            }
	            }, "%REASON_NAME%", "SelectReason");
	            
	            AddInterface($"{UI_LAYER}_REASON_MENU_LABEL", container.ToJson());
            }

            
            
            private void Building_Raiting_Menu()
            {
	            CuiElementContainer container = new CuiElementContainer();

	            container.Add(new CuiElement
	            {
		            Name = UI_REPORT_RAITING_PLAYER_PANEL,
		            Parent = "Overlay",
		            Components =
		            {
			            new CuiRawImageComponent { Color = config.ColorsSettings.MainColor, Png = ImageUi.GetImage(config.ImagesSettings.PlayerMenuRaitingSettings.PlayerMenuRaitingBackground) },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "208.93 17.8", OffsetMax = "413.6 83.13"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "TitleRating",
		            Parent = UI_REPORT_RAITING_PLAYER_PANEL,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_RAITING_WORK_MODERATOR_TITLE%", Font = "robotocondensed-regular.ttf", FontSize = 14,
				            Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.24 6.37",
				            OffsetMax = "43.84 24.35"
			            }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "InfoNameModer",
		            Parent = UI_REPORT_RAITING_PLAYER_PANEL,
		            Components =
		            {
			            new CuiTextComponent
			            {
				            Text = "%TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR%", Font = "robotocondensed-regular.ttf", FontSize = 10,
				            Align = TextAnchor.UpperLeft, Color = config.ColorsSettings.MainColorText
			            },
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-88.24 -9.69",
				            OffsetMax = "33.84 5.29"
			            }
		            }
	            });
		   		 		  						  	   		  	   		  	 				   		 		  				
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_CLOSE%"},
		            Text =
		            {
			            Text = "%TITLE_CLOSE_BUTTON_REPORT%", Font = "robotocondensed-regular.ttf", FontSize = 14,
			            Align = TextAnchor.MiddleCenter, Color = config.ColorsSettings.MainColorText
		            },
		            RectTransform =
		            {
			            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "77.08 9.37",
			            OffsetMax = "94.24 24.83"
		            }
	            }, UI_REPORT_RAITING_PLAYER_PANEL, "NoRaitingClose");

	            AddInterface($"{UI_LAYER}_RAITING_MENU_PLAYER", container.ToJson());
            }

            private void Building_Raiting_Select_Button()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = "RaitingPng",
		            Parent = UI_REPORT_RAITING_PLAYER_PANEL,
		            Components =
		            {
			            new CuiRawImageComponent { Color = "%COLOR_STARS%", Png = ImageUi.GetImage(config.ImagesSettings.StatisticsBlockSettings.RaitingImage)},
			            new CuiRectTransformComponent
			            {
				            AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "%OFFSET_MIN%", OffsetMax = "%OFFSET_MAX%"
			            }
		            }
	            });
	            
	            container.Add(new CuiButton
	            {
		            Button = { Color = "0 0 0 0", Command = "%COMMAND_STARS%"},
		            Text =
		            {
			            Text = "", Font = "robotocondensed-regular.ttf", FontSize = 14,
			            Align = TextAnchor.MiddleCenter, Color = "0 0 0 0"
		            },
		            RectTransform =
		            {
			            AnchorMin = "0 0", AnchorMax = "1 1"
		            }
	            }, "RaitingPng", "RaitingPng_Command");

	            AddInterface($"{UI_LAYER}_RAITING_MENU_PLAYER_STARS", container.ToJson());
            }

            
            
            private void Building_Player_Alert()
            {
	            CuiElementContainer container = new CuiElementContainer();
	            
	            container.Add(new CuiElement
	            {
		            Name = UI_REPORT_PLAYER_ALERT,
		            Parent = "Overlay",
		            Components = {
			            new CuiRawImageComponent { Color = "1 1 1 1", Png = ImageUi.GetImage(config.ImagesSettings.PlayerAlerts) },
			            new CuiRectTransformComponent { AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-483.33 -372.66", OffsetMax = "483.33 0.00" }
		            }
	            });
	            
	            container.Add(new CuiElement
	            {
		            Name = "LabelInfo",
		            Parent = UI_REPORT_PLAYER_ALERT,
		            Components = {
			            new CuiTextComponent { Text = "%TITLE_TEXT%", Font = "robotocondensed-regular.ttf", FontSize = 48, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
			            new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 137.23", OffsetMax = "0 -175.89" },
			            new CuiOutlineComponent { Color = "0 0 0 1", Distance = "-0.5 0.5" }
		            }
	            });

	            container.Add(new CuiElement
	            {
		            Name = "LabelDescription",
		            Parent = UI_REPORT_PLAYER_ALERT,
		            Components = {
			            new CuiTextComponent { Text = "%DESCRIPTION_TEXT%", Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.UpperCenter, Color = "1 1 1 1" },
			            new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 39.67", OffsetMax = "0 -228.20" },
			            new CuiOutlineComponent { Color = "0 0 0 1", Distance = "-0.5 0.5" }
		            }
	            });

	            AddInterface($"{UI_LAYER}_PLAYER_ALERT", container.ToJson());
            }

            		}
		public Boolean HasImage(String imageName) => (Boolean)ImageLibrary?.Call("HasImage", imageName);
		
		void OnPlayerBanned(string name, ulong id, string address, string reason) => StopCheckedPlayer(id, null, IsConsole: true);
		
		private void DrawUI_ModeratorStitistics_Banner_RaitingImage(BasePlayer Moderator, Int32 X)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PROFILE_BANNER_TEMPLATE_ADDITIONAL_IMG");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%OFFSET_MIN%", $"{-59.85 + (X * 12)} -13.93");
			Interface = Interface.Replace("%OFFSET_MAX%", $"{-49.18 + (X * 12)} -3.93");

			CuiHelper.AddUi(Moderator, Interface);
		}

		private List<String> GetServersCheckRCC(UInt64 TargetID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.RCCSettings.RCCKey)) return null;
			return !RCC_LocalRepository.ContainsKey(TargetID) ? new List<String>() : RCC_LocalRepository[TargetID].LastChecksServers;
		}
		private void DrawUI_PoopUp_Moderator_InfoText(BasePlayer player, Int32 Y, String Text)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_POOPUP_MODERATOR_INFO_BLOCK_TEXT_TEMPLATE");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%REASON_TITLE%", Text);
			Interface = Interface.Replace("%OFFSET_MIN%", $"-51.66 {35.13 - (Y * 20)}");
			Interface = Interface.Replace("%OFFSET_MAX%", $"51.66 {49.8 - (Y * 20)}");

			CuiHelper.AddUi(player, Interface);
		}
		
		
		
		private void DrawUI_PageController(BasePlayer player, Int32 Page, Boolean IsModerator, String SearchName = "")
		{
			List<FakePlayer> fakePlayers = null;
			List<BasePlayer> playerList = null;
			Int32 AllCountPlayers = 0;
			Int32 MaxPlayerPage = IsModerator ? 7 : 27;

			if (IsModerator)  //
			{  
				List<BasePlayer> moderatorSortedList = BasePlayer.activePlayerList.Where(x => x.userID != player.userID && !permission.UserHasPermission(x.UserIDString, HideMenuPermissions) && !PlayerChecks.ContainsKey(x.userID) && PlayerInformations[x.userID].Reports >= config.ReportContollerModerationSettings.ReportCountTrigger && x.displayName.ToLower().Contains(SearchName.ToLower())).OrderByDescending(x => PlayerInformations[x.userID].Reports).ToList();
				playerList = moderatorSortedList.Skip(Page * MaxPlayerPage).Take(MaxPlayerPage).ToList();

				AllCountPlayers = moderatorSortedList.Count;
			}
			else
			{
				if (IQFakeActive && config.ReferenceSettings.IQFakeActiveUse)
				{
					List<FakePlayer> fakePlayersSorted = PlayerBases.Where(x => x.UserID != player.userID && !permission.UserHasPermission(x.UserID.ToString(), HideMenuPermissions) && x.DisplayName.ToLower().Contains(SearchName.ToLower())).ToList();
					fakePlayers = fakePlayersSorted.Skip(Page * MaxPlayerPage).Take(MaxPlayerPage).ToList();
					
					AllCountPlayers = fakePlayersSorted.Count;
				}
				else // 
				{
					List<BasePlayer> sortedPlayers = BasePlayer.activePlayerList.Where(x => x.userID != player.userID && !permission.UserHasPermission(x.UserIDString, HideMenuPermissions) && x.displayName.ToLower().Contains(SearchName.ToLower()) && (!IsFriendSendReport(player.userID, x.userID) || !IsClansSendReport(player.UserIDString, x.UserIDString))).ToList();
					playerList = sortedPlayers.Skip(Page * MaxPlayerPage).Take(MaxPlayerPage).ToList();
					
					AllCountPlayers = sortedPlayers.Count;
				}
			}

			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PANEL_PLAYERS_PAGE_CONTROLLER");
            if (Interface == null) return;
            
            Interface = Interface.Replace("%AMOUNT_PAGE%", $"{Page}");																		
            Interface = Interface.Replace("%COMMAND_PAGE_NEXT%", AllCountPlayers < MaxPlayerPage ? "" : $"report.panel page.controller {(AllCountPlayers >= (Page + 1) * MaxPlayerPage ? (Page + 1) : 0)} {IsModerator}");
            Interface = Interface.Replace("%COMMAND_PAGE_BACK%", AllCountPlayers < MaxPlayerPage ? "" : $"report.panel page.controller {(Page <= 0 ? AllCountPlayers / MaxPlayerPage : Page - 1)} {IsModerator}");

            CuiHelper.DestroyUi(player, "ActionPageCount");
            CuiHelper.DestroyUi(player, "ButtonNextPage");
            CuiHelper.DestroyUi(player, "ButtonBackPage");
            CuiHelper.AddUi(player, Interface);

            ShowPlayersList(player, playerList, fakePlayers, IsModerator);
        }

        
        private void ChatCommandDiscord(BasePlayer player, String cmd, String[] args)
        {
	        String Discord = String.Join(" ", args);
	        SendPlayerDiscord(player, Discord);
        }
        
                
        private void SendVK(String Message)
        {
	        if (String.IsNullOrWhiteSpace(config.NotifyVKSettings.VKTokenGroup) || String.IsNullOrWhiteSpace(config.NotifyVKSettings.VKChatID)) return;
	        
	        while (Message.Contains("#"))
		        Message = Message.Replace("#", "%23");
	        
	        RequestVK(Message);
        }
		private Boolean IsClansStartChecked(String userID, String targetID) => config.ReferenceSettings.ClansSetting.StartCheckedClan && IsClans(userID, targetID);

		internal class LocalRepositoryRCC
		{
			public List<String> LastChecksServers = new List<String>();
			public List<String> LastBansServers = new List<String>();
		}
		private new void LoadDefaultMessages()
		{
			lang.RegisterMessages(new Dictionary<string, string>
			{
				["TITLE_NAME_REPORT_SYSTEM"] = "<b>IQReportSystem.</b>",
				["TITLE_CLOSE_BUTTON_REPORT"] = "<b>X</b>",
				["TITLE_PLAYER_LIST"] = "<b>Players list</b>",
				["TITLE_PLAYER_NICK_NAME"] = "NICK NAME",
				["TITLE_PLAYER_STEAMID"] = "STEAMID",
				["TITLE_PLAYER_REPORTS"] = "REPORTS",
				["TITLE_LEFT_MENU_BUTTON_REPORTS"] = "Reports",
				["TITLE_LEFT_MENU_BUTTON_MODERATION"] = "Moderations",
				["TITLE_POOPUP_MODERATION_LAST_CHECK_TITLE"] = "Last verifier",
				["TITLE_POOPUP_MODERATION_AMOUNT_CHECK_TITLE"] = "Number of checks",
				["TITLE_POOPUP_MODERATION_REPORTS_TITLE"] = "Reports",
				["TITLE_POOPUP_MODERATION_NO_CHECKED"] = "Has not verified",
				["TITLE_POOPUP_MODERATION_HISTORY_REPORTS_TITLE"] = "History reports",
				["TITLE_POOPUP_MODERATION_INFO_BLOCK_EMPTY"] = "Information empty",
				["TITLE_POOPUP_MODERATION_INFO_CHECK_SERVERS_RCC"] = "Checkeds",
				["TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_RCC"] = "Banneds",
				["TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_OZPROTECT"] = "Banneds",
				["TITLE_POOPUP_MODERATION_INFO_BUTTON_START_CHECK"] = "<b>CHECK</b>",
				["TITLE_PLAYER_HEADER_TITLE_SEND_REPORT"] = "<b>Send report</b>",
				["TITLE_PLAYER_HEADER_TITLE_DESC_SEND_REPORT"] = "Select a player to",
				["TITLE_PLAYER_HEADER_TITLE_SEARCH_PLAYER"] = "Find players",
				["TITLE_PROFILE_INFO_CHECKED"] = "Checked : {0}",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_CHECKED"] = "Checkeds",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE"] = "Statistics",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_QUALITY_ASSESSMENT"] = "Quality assessment",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_BANS"] = "Banneds",
				["TITLE_POOPUP_MODERATION_INFO_TEAMS_NAME_PLAYER"] = "Teammates",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ALLSCORE"] = "Raiting",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE"] = "Communicative",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_TWO_ACHIVE"] = "Competent",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_THREE_ACHIVE"] = "Fast",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_BANS_AND_CHECHKED"] = "all time",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_ONE_ACHIVE"] = "don't be rude",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_TWO_ACHIVE"] = "prove yourself",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_THREE_ACHIVE"] = "don't delay",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_RESULT"] = "VERDICT",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLES"] = "Reviewer menu",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_STOP"] = "STOP",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS"] = "STATUS : {0}",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS_DEFAULT"] = "ONLINE",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD"] = "DISCORD : {0}",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD_EMPTY"] = "NOT PROVIDED",
				["TITLE_RAITING_WORK_MODERATOR_TITLE"] = "Evaluate the reviewer",
				["TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR"] = "You were checked : {0}",
				["TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR_NOT_NAME"] = "MODERATOR",
				["FUNCIONAL_MESSAGE_NO_SEND_RAITING_FOR_MODERATOR"] = "The player refrained from evaluating your check",
				["TITLE_PLAYER_ALERT_INFORMATION_TITLE"] = "<b><size=34><color=#70C3F8>YOU HAVE BEEN CALLED FOR A CHECK</color></size></b>",
				["TITLE_PLAYER_ALERT_INFORMATION_DESCRIPTION"] = "<b><size=14>You have exceeded the maximum allowable number of reports!" +
				                                                 "\nProvide your <color=#70C3F8>Discord</color> for our moderation to contact you." +
				                                                 "\nIn case of <color=#70C3F8>ignoring</color> this message - you will receive <color=#70C3F8>banneds</color> on the server!" +
				                                                 "\n\nCommand to send : <color=#70C3F8>/discord YourName</color></size></b>",
				
				["FUNCIONAL_MESSAGE_CHECK_AFK_STARTING"] = "We start checking the player on AFK",
				["FUNCIONAL_MESSAGE_CHECK_AFK_TRY"] = "Checking a player for AFK\nAttemp : {0}",
				["FUNCIONAL_MESSAGE_CHECK_START"] = "The check is started, the player is notified!",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_AFK"] = "Check has not been started!\nThe player is in AFK, please try again later",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_LEAVE"] = "Player left the server while checking for AFK\nChecking cancelled, please try again later",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_CHAT"] = "The player wrote a message in the chat\nMessage : {0}",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_COMMAND"] = "The player used the command\nCommand : {0}",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_START_CRAFTING"] = "The player has just crafted an item",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_CANCELLED_CRAFTING"] = "Player just canceled item crafting",
				["FUNCIONAL_MESSAGE_NO_SEND_RAITING"] = "You refrained from rating the moderator",
				["FUNCIONAL_MESSAGE_SEND_RAITING"] = "Thanks!\nYour rating has been successfully submitted\nWe care about the quality of moderation work",
				["FUNCIONAL_MESSAGE_SEND_RAITING_FOR_MODERATOR"] = "The player has rated your check",
				["FUNCIONAL_SEND_DISCORD_NULL_DS"] = "You have not entered your <color=#70C3F8>Discord</color>",
				["FUNCIONAL_SEND_DISCORD_NO_REGEX_DS"] = "Enter correct <color=#70C3F8>Discord</color>",
				["FUNCIONAL_SEND_DISCORD_SUCCESS"] = "You have successfully submitted your <color=#70C3F8>Discord</color>\nContact : {0}",
				["FUNCIONAL_SEND_DISCORD_SUCCESS_ALERT_MODERATOR"] = "The player sent you his <color=#70C3F8>Discord</color>\nContact : {0}",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ALERT_MODERATOR"] = "The player's connection status has changed from server to : {0}\nWait for it for 15 minutes, otherwise issue a block for refusing to check",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_MODERATOR"] = "The player has connected to the server\nCheck continued",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_PLAYER"] = "Connected!\nChecking continued, the moderator is waiting for your contact!",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED"] = "The moderator has left the server\nWait 10 minutes - verification will continue after it is connected\nOtherwise, the check will be canceled automatically.",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_RECONNECTED"] = "Moderator reconnected to the server\nChecked continued",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED_FULL_LEAVE"] = "Moderator failed to connect\nCheck has been canceled\nWe're sorry, have fun",
				["FUNCIONAL_MODERATOR_VERDICT_RESULT"] = "You finished checking with a verdict : {0}\nAppropriate action has been taken against the player",
				["FUNCIONAL_SEND_REPORT_SUCCESS"] = "You have successfully reported player {0}",
				["FUNCIONAL_NO_DUPLE_SEND_REPORT"] = "You have already sent a complaint about this player!\nWait for it to be checked",
				["FUNCIONAL_COOLDOWN_REPORT"] = "You have already sent a complaint!\nWait {0} seconds before resending",
				["FUNCIONAL_PLAYER_STOP_DAMAGE_MAN_ADD"] = "Damage is disabled for you during the check - you can't deal damage to players, buildings, etc.",

				["NOTIFY_PLAYERS_START_CHECK_MODERATOR"] = "Moderator {0} called player {1} to check\nYou can send a report using /report",
				["NOTIFY_PLAYERS_START_CHECK_NOT_MODERATOR"] = "Player {0} was called for check\nYou can send a report using /report",
				["NOTIFY_PLAYERS_STOP_CHECK_MODERATOR"] = "Moderator {0} finished checking player {1}\nUse of prohibited software - not detected",
				["NOTIFY_PLAYERS_STOP_CHECK_NOT_MODERATOR"] = "Checking of player {0} completed\nUse of prohibited software - not detected",
				["NOTIFY_PLAYERS_STOP_CHECK_VERDICT_MODERATOR"] = "Moderator {0} finished checking player {1} with verdict {2}\nAppropriate action has been taken against the player.",
				["NOTIFY_PLAYERS_STOP_CHECK_VERDICT_NOT_MODERATOR"] = "Verification of player {0} completed with verdict {1}\nAppropriate action has been taken against the player.",
				["NOTIFY_MODERATOR_RAIDBLOCK_PLAYER"] = "The check was canceled automatically with complaints saved\nReason : the player has an active raid-block",
				["NOTIFY_MODERATOR_ITS_PLAYER_CHECKED"] = "This player has already been called for checked",
				["NOTIFY_MODERATOR_COMBATBLOCK_PLAYER"] = "The check was canceled automatically with complaints saved\nReason : the player has an active combat-block",
				["NOTIFY_MODERATOR_DUEL_PLAYER"] = "The check was canceled automatically with complaints saved\nReason : the player is in a duel",
				["NOTIFY_MODERATOR_FRIEND_PLAYER"] = "The check was canceled automatically with complaints saved\nReason : the player is your teammate",
				["NOTIFY_MODERATOR_MAX_REPORT"] = "Player {0} has exceeded the number of reports, call him for check!\nNumber of reports : {1}",

			}, this);
			
			lang.RegisterMessages(new Dictionary<string, string>
			{
				["TITLE_NAME_REPORT_SYSTEM"] = "<b>IQReportSystem.</b>",
				["TITLE_CLOSE_BUTTON_REPORT"] = "<b>X</b>",
				["TITLE_PLAYER_LIST"] = "<b>Список игроков</b>",
				["TITLE_PLAYER_NICK_NAME"] = "NICK NAME",
				["TITLE_PLAYER_STEAMID"] = "STEAMID",
				["TITLE_PLAYER_REPORTS"] = "ЖАЛОБ",
				["TITLE_LEFT_MENU_BUTTON_REPORTS"] = "Жалобы",
				["TITLE_LEFT_MENU_BUTTON_MODERATION"] = "Модерация",
				["TITLE_POOPUP_MODERATION_LAST_CHECK_TITLE"] = "Последний проверяющий",
				["TITLE_POOPUP_MODERATION_AMOUNT_CHECK_TITLE"] = "Количество проверок",
				["TITLE_POOPUP_MODERATION_REPORTS_TITLE"] = "Жалоб(/ы)",
				["TITLE_POOPUP_MODERATION_NO_CHECKED"] = "Не был проверен",
				["TITLE_POOPUP_MODERATION_HISTORY_REPORTS_TITLE"] = "История жалоб",
				["TITLE_POOPUP_MODERATION_INFO_BLOCK_EMPTY"] = "Информации нет",
				["TITLE_POOPUP_MODERATION_INFO_CHECK_SERVERS_RCC"] = "Проверялся",
				["TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_RCC"] = "Забанен",
				["TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_OZPROTECT"] = "Забанен",
				["TITLE_POOPUP_MODERATION_INFO_TEAMS_NAME_PLAYER"] = "Тиммейты",
				["TITLE_POOPUP_MODERATION_INFO_BUTTON_START_CHECK"] = "<b>ПРОВЕРИТЬ</b>",
				["TITLE_PLAYER_HEADER_TITLE_SEND_REPORT"] = "<b>Отправить жалобу</b>",
				["TITLE_PLAYER_HEADER_TITLE_DESC_SEND_REPORT"] = "Выберите игрока чтобы",
				["TITLE_PLAYER_HEADER_TITLE_SEARCH_PLAYER"] = "Поиск игроков",
				["TITLE_PROFILE_INFO_CHECKED"] = "Проверен : {0}",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_CHECKED"] = "Проверок",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE"] = "Статистика",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_QUALITY_ASSESSMENT"] = "Оценка качества",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_BANS"] = "Блокировок",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ALLSCORE"] = "Общий балл",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE"] = "Общительный", 
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_TWO_ACHIVE"] = "Компетентный",
				["TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_THREE_ACHIVE"] = "Быстрый",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_BANS_AND_CHECHKED"] = "за все время",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_ONE_ACHIVE"] = "не грубите",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_TWO_ACHIVE"] = "проявите себя",
				["TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_THREE_ACHIVE"] = "не медлите",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_RESULT"] = "ВЕРДИКТ",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLES"] = "Меню проверяющего",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_STOP"] = "CТОП",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS"] = "STATUS : {0}",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS_DEFAULT"] = "ONLINE",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD"] = "DISCORD : {0}",
				["TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD_EMPTY"] = "НЕ ПРЕДОСТАВЛЕН",
				["TITLE_RAITING_WORK_MODERATOR_TITLE"] = "Оцените проверяющего",
				["TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR"] = "Вас проверял : {0}",
				["TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR_NOT_NAME"] = "МОДЕРАТОР",
				["TITLE_PLAYER_ALERT_INFORMATION_TITLE"] = "<b><size=34><color=#70C3F8>ВАС ВЫЗВАЛИ НА ПРОВЕРКУ</color></size></b>",
				["TITLE_PLAYER_ALERT_INFORMATION_DESCRIPTION"] = "<b><size=14>Вы превысили максимально-допустимое количество жалоб!" +
				                                                 "\nПредоставьте ваш <color=#70C3F8>Discord</color> для того чтобы с вами связалась наша модерация." +
				                                                 "\nВ случае <color=#70C3F8>игнорирования</color> данного сообщения - вы получите <color=#70C3F8>блокировку</color> на сервере!" +
				                                                 "\n\nКоманда для отправки : <color=#70C3F8>/discord YourName#0000</color></size></b>",
		   		 		  						  	   		  	   		  	 				   		 		  				
				["FUNCIONAL_MESSAGE_CHECK_AFK_STARTING"] = "Начинаем проверку игрока на AFK",
				["FUNCIONAL_MESSAGE_CHECK_AFK_TRY"] = "Проверяем игрока на AFK\nПопытка : {0}",
				["FUNCIONAL_MESSAGE_CHECK_START"] = "Проверка запущена, игрок уведомлен!",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_AFK"] = "Проверка не была запущена!\nИгрок находится в AFK, пожалуйста повторите попытку позже",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_LEAVE"] = "Игрок покинул сервер на стадии проверки на AFK\nПроверка отменена, повторите попытку позже",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_CHAT"] = "Игрок написал сообщение в чат\nСообщение : {0}",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_COMMAND"] = "Игрок использовал команду\nКоманда : {0}",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_START_CRAFTING"] = "Игрок только что поставил предмет на крафт",
				["FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_CANCELLED_CRAFTING"] = "Игрок только что отменил крафт предмета",
				["FUNCIONAL_MESSAGE_NO_SEND_RAITING"] = "Вы воздержались от оценки модератора",
				["FUNCIONAL_MESSAGE_NO_SEND_RAITING_FOR_MODERATOR"] = "Игрок воздержался от оценки вашей проверки",
				["FUNCIONAL_MESSAGE_SEND_RAITING"] = "Спасибо!\nВаша оценка успешно отправлена\nНам важно качество работы модерации",
				["FUNCIONAL_MESSAGE_SEND_RAITING_FOR_MODERATOR"] = "Игрок оценил вашу проверку",
				["FUNCIONAL_SEND_DISCORD_NULL_DS"] = "Вы не ввели свой <color=#70C3F8>Discord</color>",
				["FUNCIONAL_SEND_DISCORD_NO_REGEX_DS"] = "Введите корректный <color=#70C3F8>Discord</color>",
				["FUNCIONAL_SEND_DISCORD_SUCCESS"] = "Вы успешно отправили свой <color=#70C3F8>Discord</color>\nКонтакт : {0}",
				["FUNCIONAL_SEND_DISCORD_SUCCESS_ALERT_MODERATOR"] = "Игрок прислал вам свой <color=#70C3F8>Discord</color>\nКонтакт : {0}",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ALERT_MODERATOR"] = "У игрока изменился статус соединения с сервером на : {0}\nОжидайте его 15 минут, в ином случае выдавайте блокировку за отказ от проверки",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_MODERATOR"] = "Игрок подключился к серверу\nПроверка продолжена",
				["FUNCIONAL_CHANGE_STATUS_PLAYER_ONLINE_ALERT_PLAYER"] = "С подключением!\nПроверка продолжена, модератор ожидает ваш контакт!",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED"] = "Модератор покинул сервер\nОжидайте 10 минут - проверка продолжится после его подключения\nВ ином случае проверка будет отменена автоматически",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED_FULL_LEAVE"] = "Модератор не успел подключиться\nПроверка была отменена\nПриносим извинения, приятной игры",
				["FUNCIONAL_CHANGE_STATUS_MODERATOR_RECONNECTED"] = "Модератор переподключился на сервер\nПроверка продолжена",
				["FUNCIONAL_MODERATOR_VERDICT_RESULT"] = "Вы закончили проверку с вердиктом : {0}\nК игроку применены соотвествующие меры",
				["FUNCIONAL_SEND_REPORT_SUCCESS"] = "Вы успешно отправили жалобу на игрока {0}",
				["FUNCIONAL_NO_DUPLE_SEND_REPORT"] = "Вы уже отправляли жалобу на этого игрока!\nОжидайте когда его проверят",
				["FUNCIONAL_COOLDOWN_REPORT"] = "Вы уже отправляли жалобу!\nОжидайте {0} секунд перед повторной отправкой",
				["FUNCIONAL_PLAYER_STOP_DAMAGE_MAN_ADD"] = "На время проверки вам отключен урон - вы не можете наносить урон по игрокам, постройкам и т.д",
				
				["NOTIFY_PLAYERS_START_CHECK_MODERATOR"] = "Модератор {0} вызвал на проверку игрока {1}\nОтправить жалобу можно с помощью /report",
				["NOTIFY_PLAYERS_START_CHECK_NOT_MODERATOR"] = "Игрока {0} вызвали на проверку\nОтправить жалобу можно с помощью /report",
				["NOTIFY_PLAYERS_STOP_CHECK_MODERATOR"] = "Модератор {0} завершил проверку игрока {1}\nИспользование запрещенного ПО - не обнаружено",
				["NOTIFY_PLAYERS_STOP_CHECK_NOT_MODERATOR"] = "Проверка игрока {0} завершена\nИспользование запрещенного ПО - не обнаружено",
				["NOTIFY_PLAYERS_STOP_CHECK_VERDICT_MODERATOR"] = "Модератор {0} завершил проверку игрока {1} с вердиктом {2}\nК игроку применены соотвествующие меры",
				["NOTIFY_PLAYERS_STOP_CHECK_VERDICT_NOT_MODERATOR"] = "Проверка игрока {0} завершена с вердиктом {1}\nК игроку применены соотвествующие меры",
				["NOTIFY_MODERATOR_RAIDBLOCK_PLAYER"] = "Проверка отменена автоматически с сохранением жалоб\nПричина : у игрока активный рейд-блок",
				["NOTIFY_MODERATOR_ITS_PLAYER_CHECKED"] = "Данного игрока уже вызвали на проверку",
				["NOTIFY_MODERATOR_COMBATBLOCK_PLAYER"] = "Проверка отменена автоматически с сохранением жалоб\nПричина : у игрока активный комбат-блок",
				["NOTIFY_MODERATOR_DUEL_PLAYER"] = "Проверка отменена автоматически с сохранением жалоб\nПричина : игрок находится на дуэли",
				["NOTIFY_MODERATOR_FRIEND_PLAYER"] = "Проверка отменена автоматически с сохранением жалоб\nПричина : игрок является вашим тиммейтом",
				["NOTIFY_MODERATOR_MAX_REPORT"] = "Игрок {0} превысил количество репортов, вызовите его на проверку!\nКоличество репортов : {1}",

			}, this, "ru");
		}
		   		 		  						  	   		  	   		  	 				   		 		  				
        private void RequestVK(String Message)
        {
	        try
	        {
		        webrequest.Enqueue(GetUrlVK(Message), null, (code, response) => { }, this, RequestMethod.GET, timeout: 10F);
	        }
	        catch (Exception ex)
	        {
		        PrintWarning(LanguageEn ? "Check the correctness of the entered data for VK! Vkontakte returns an error of your data!" : "Проверьте корректность введенных данных для ВК! Вконтакте возвращает ошибку ваших данных!");
	        }
        }
        private static Double CurrentTime => Facepunch.Math.Epoch.Current;
        private void OnServerInitialized()
        {
	        PreLoadedPlugin();
            StartPluginLoad();

            if (IQFakeActive && config.ReferenceSettings.IQFakeActiveUse)
            {
	            foreach (FakePlayer fakePlayer in PlayerBases)
		            SteamAvatarAdd(fakePlayer.UserID.ToString());
            }
		   		 		  						  	   		  	   		  	 				   		 		  				
            permission.RegisterPermission(ModeratorPermissions, this);
            permission.RegisterPermission(HideMenuPermissions, this);
            
            if (!config.CheckControllerSettings.UseSoundAlert) return;
			
            LoadDataSound("ALERT_REPORT_EN");
            LoadDataSound("ALERT_REPORT_RU");
        }

		internal class LocalRepositoryOzProtect
		{
			public List<String> LastBansServers = new List<String>();
		}

                
        
        private void SendReportPlayer(BasePlayer Sender, UInt64 TargetID, Int32 ReasonIndex)
        {
	        CuiHelper.DestroyUi(Sender, "BLURED_POOP_UP");
	        CuiHelper.DestroyUi(Sender, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
	        
	        if (PlayerRepositories.ContainsKey(Sender.userID))
	        {
		        if (PlayerRepositories[Sender.userID].IsRepeatReported(TargetID))
		        {
			        SendChat(GetLang("FUNCIONAL_NO_DUPLE_SEND_REPORT", Sender.UserIDString), Sender);
			        return;
		        }

		        if (PlayerRepositories[Sender.userID].IsCooldown(TargetID))
		        {
			        SendChat(GetLang("FUNCIONAL_COOLDOWN_REPORT", Sender.UserIDString, PlayerRepositories[Sender.userID].GetCooldownLeft(TargetID)), Sender);
			        return;
		        }
	        }

	        PlayerInformations[Sender.userID].SendReports++;

	        PlayerInformations[TargetID].Reports++;
	        
	        Configuration.ReasonReport Reason = config.ReasonList.Where(reasonReport => !reasonReport.HideUser).ToList()[ReasonIndex];
	        PlayerInformations[TargetID].ReasonHistory.Add(Reason.Title);

	        GetPlayerCheckServerRCC(TargetID);
	        GetPlayerCheckServerOzProtect(TargetID);
	        
	        BasePlayer Target = BasePlayer.FindByID(TargetID);
	        if (Target != null)
		        SendChat(GetLang("FUNCIONAL_SEND_REPORT_SUCCESS", Sender.UserIDString, Target.displayName), Sender);
		        
	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifySendReport;
			
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_PlayerSendReport(Sender, TargetID, LanguageEn ? Reason.Title.LanguageEN : Reason.Title.LanguageRU);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_PlayerSendReport(Sender, TargetID, LanguageEn ? Reason.Title.LanguageEN : Reason.Title.LanguageRU));

	        
	        AddCooldown(Sender.userID, TargetID);

	        if (PlayerInformations[TargetID].Reports >= config.ReportContollerModerationSettings.ReportCountTrigger && Target != null)
	        {
		        foreach (BasePlayer mList in BasePlayer.activePlayerList.Where(m => permission.UserHasPermission(m.UserIDString, ModeratorPermissions)))
			        AlertModerator(mList, Target.displayName, PlayerInformations[TargetID].Reports);
		        
		        AlertMaxReportDiscord(Target.displayName, PlayerInformations[TargetID].Reports, TargetID);
	        }
	        
	        Interface.Call("OnSendedReport", Sender, TargetID, LanguageEn ? Reason.Title.LanguageEN : Reason.Title.LanguageRU);
        }

		
		
		private void DrawUI_LeftMenu(BasePlayer player, Boolean IsModerator = false)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_LEFT_MENU");
			if (Interface == null) return;

			CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_LEFT_PANEL);
			CuiHelper.AddUi(player, Interface);

			DrawUI_LeftMenu_Button(player, GetLang("TITLE_LEFT_MENU_BUTTON_REPORTS", player.UserIDString),
				ImageUi.GetImage(config.ImagesSettings.LeftBlockSettings.ReportIcon),
				IsModerator ? config.ColorsSettings.AdditionalColorElements : "0 0 0 0", "-70.33 -34", "55 0",
				IsModerator ? $"report.panel select.type.mod {true}" : "");

			if (_.IsModerator(player))
				DrawUI_LeftMenu_Button(player, GetLang("TITLE_LEFT_MENU_BUTTON_MODERATION", player.UserIDString),
					ImageUi.GetImage(config.ImagesSettings.LeftBlockSettings.ModerationIcon),
					IsModerator ? "0 0 0 0" : config.ColorsSettings.AdditionalColorElements, "-70.33 -71.26",
					"55 -37.26", IsModerator ? "" : $"report.panel select.type.mod {false}");
		}

		public Boolean IsFake(UInt64 userID)
		{
			if (!IQFakeActive || !config.ReferenceSettings.IQFakeActiveUse) return false;
			return (Boolean)IQFakeActive?.Call("IsFake", userID);
		}

        public class NpcSound
        {
	        [JsonConverter(typeof(SoundFileConverter))]
	        public List<byte[]> Data = new List<byte[]>();
        }
        private List<byte[]> FromSaveData(byte[] bytes)
        {
	        List<int> dataSize = new List<int>();
	        List<byte[]> dataBytes = new List<byte[]>();

	        int offset = 0;
	        while (true)
	        {
		        dataSize.Add(BitConverter.ToInt32(bytes, offset));
		        offset += 4;

		        int sum = dataSize.Sum();
		        if (sum == bytes.Length - offset)
		        {
			        break;
		        }

		        if (sum > bytes.Length - offset)
		        {
			        throw new ArgumentOutOfRangeException(nameof(dataSize),
				        $"Voice Data is outside the saved range {dataSize.Sum()} > {bytes.Length - offset}");
		        }
	        }

	        foreach (int size in dataSize)
	        {
		        dataBytes.Add(bytes.Skip(offset).Take(size).ToArray());
		        offset += size;
	        }

	        return dataBytes;
        }

        private void Request(String url, String payload, Action<Int32> callback = null)
        {
            Dictionary<String, String> header = new Dictionary<String, String>();
            header.Add("Content-Type", "application/json");
            webrequest.Enqueue(url, payload, (code, response) =>
            {
                if (code != 200 && code != 204)
                {
                    if (response != null)
                    {
                        try
                        {
                            JObject json = JObject.Parse(response);
                            if (code == 429)
                            {
                                Single seconds = Single.Parse(Math.Ceiling((Double)(Int32)json["retry_after"] / 1000).ToString());
                            }
                            else
                            {
                                PrintWarning($" Discord rejected that payload! Responded with \"{json["message"].ToString()}\" Code: {code}");
                            }
                        }
                        catch
                        {
                            PrintWarning($"Failed to get a valid response from discord! Error: \"{response}\" Code: {code}");
                        }
                    }
                    else
                    {
                        PrintWarning($"Discord didn't respond (down?) Code: {code}");
                    }
                }
                try
                {
                    callback?.Invoke(code);
                }
                catch (Exception ex) { }
		   		 		  						  	   		  	   		  	 				   		 		  				
            }, this, RequestMethod.POST, header, timeout: 10F);
        }

        
        
        private void SendPlayerDiscord(BasePlayer player, String Discord)
        {
	        if (player == null) return;
	        if (!PlayerChecks.ContainsKey(player.userID)) return;
	        
	        if (Discord == null)
	        {
		        SendChat(GetLang("FUNCIONAL_SEND_DISCORD_NULL_DS", player.UserIDString), player);
		        return;
	        }

	        if (String.IsNullOrWhiteSpace(Discord))
	        {
		        SendChat(GetLang("FUNCIONAL_SEND_DISCORD_NULL_DS", player.UserIDString), player);
		        return;
	        }
	        Regex regex = new Regex(@"^(?!(here|everyone))^(?!.*(discord|```))(?:[\w #\.]{2,32#}\d{4}|\@[\w\.]{1,32}|[\w\.]{1,32})$");

	        if (!regex.IsMatch(Discord))
	        {
		        SendChat(GetLang("FUNCIONAL_SEND_DISCORD_NO_REGEX_DS", player.UserIDString), player);
		        return;
	        }

	        PlayerChecks[player.userID].DiscordTarget = Discord;
	        
	        SendChat(GetLang("FUNCIONAL_SEND_DISCORD_SUCCESS", player.UserIDString, Discord), player);
	        
	        BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
	        if (Moderator != null)
	        {
		        DrawUI_Moderator_Checked_Menu_Discord(Moderator, Discord);
		        SendChat(GetLang("FUNCIONAL_SEND_DISCORD_SUCCESS_ALERT_MODERATOR", Moderator.UserIDString, Discord), Moderator);
	        }
	        else Puts(LanguageEn ? $"The player sent you his Discord. Contact : {Discord}" : $"Игрок прислал вам свой Discord. Контакт : {Discord}");

	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyContacts;
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_PlayerSendContact(player, Discord);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }

	        SendVK(VKT_PlayerSendContact(player, Discord));

	        Interface.Call("OnSendedContacts", player, Discord);
        }
		
		private void DrawUI_PlayerPanel(BasePlayer player, Int32 Page = 0, Boolean IsModerator = false, String SearchName = "")
        {
            String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PANEL_PLAYERS");
            if (Interface == null) return;
		   		 		  						  	   		  	   		  	 				   		 		  				
            Interface = Interface.Replace("%TITLE_PLAYER_LIST%", GetLang("TITLE_PLAYER_LIST", player.UserIDString));

            CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_PLAYER_PANEL);
            CuiHelper.AddUi(player, Interface);

            DrawUI_PageController(player, Page, IsModerator, SearchName);
        }

		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				config = Config.ReadObject<Configuration>();
				if (config == null) LoadDefaultConfig();
		   		 		  						  	   		  	   		  	 				   		 		  				
				if (config.NotifyVKSettings.VKTokenGroup == null)
					config.NotifyVKSettings.VKTokenGroup = "";
				
				if (config.NotifyVKSettings.VKChatID == null)
					config.NotifyVKSettings.VKChatID = "";
			}
			catch
			{
				PrintWarning(LanguageEn ? $"Error #58 reading configuration'oxide/config/{Name}', create a new configuration!" : $"Ошибка #58 чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
				LoadDefaultConfig();
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			NextTick(SaveConfig);
		}
        
        private readonly Dictionary<UInt64, ProcessCheckRepository> PlayerChecks = new Dictionary<UInt64, ProcessCheckRepository>();

		
		
		
		private Dictionary<UInt64, LocalRepositoryRCC> RCC_LocalRepository = new Dictionary<UInt64, LocalRepositoryRCC>();
		
		private List<String> GetServersBansOzProtect(UInt64 TargetID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.OzProtectSettings.OzProtectKey)) return null;
			return !OzProtect_LocalRepository.ContainsKey(TargetID) ? new List<String>() : OzProtect_LocalRepository[TargetID].LastBansServers;
		}

		private void DrawUI_TemplatePlayer(BasePlayer player, Int32 X, Int32 Y, String NickName, String UserID)
        {
	        String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_TEMPLATE_PLAYER");
            if (Interface == null) return;

            Interface = Interface.Replace("%STEAMID%",GetImage(UserID));
            Interface = Interface.Replace("%NICK%", NickName.Length > 7 ? NickName.Substring(0, 7).ToUpper() + ".." : NickName.ToUpper());
            Interface = Interface.Replace("%OFFSET_MIN%", $"{-219.21 + (X * 160)} {174.14 - (Y * 50)}");//?cache=26850
            Interface = Interface.Replace("%OFFSET_MAX%", $"{-89.97 + (X * 160)} {210.14 - (Y * 50)}");
            Interface = Interface.Replace("%COMMAND%", $"report.panel select.player {UserID} false");
            
            Interface = Interface.Replace("%TITLE_PLAYER_NICK_NAME%", GetLang("TITLE_PLAYER_NICK_NAME", player.UserIDString));

            CuiHelper.AddUi(player, Interface);
        }	
        private const String HideMenuPermissions = "iqreportsystem.hidemenu";
        private class SoundFileConverter : JsonConverter
        {
	        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	        {
	        }
		   		 		  						  	   		  		 			  			 		   					  		  
	        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	        {
		        JToken value = JToken.Load(reader);
		        return _.FromSaveData(Compression.Uncompress(Convert.FromBase64String(value.ToString())));
	        }

	        public override bool CanConvert(Type objectType)
	        {
		        return typeof(List<Byte>) == objectType;
	        }
        }
        
                private IEnumerator StartAfkCheck(BasePlayer Target, BasePlayer Moderator, Boolean IsConsole = false, Boolean SkipAFK = false)
        {
	        UInt64 TargetID = Target.userID;
	        if (!IsValidStartChecked(Target, Moderator, IsConsole)) yield break;

	        if (!PlayerChecks.ContainsKey(TargetID))
	        {
				PlayerChecks.Add(Target.userID, new ProcessCheckRepository
				{
					DiscordTarget = String.Empty,
					DisplayName = Target.displayName,
					ModeratorID = !IsConsole ? Moderator.userID : 0
				});    
	        }
	        else
	        {
		        PlayerChecks[TargetID].DisplayName = Target.displayName;
		        PlayerChecks[TargetID].ModeratorID = !IsConsole ? Moderator.userID : 0;
		        PlayerChecks[TargetID].DiscordTarget = String.Empty;
	        }

	        if (!SkipAFK)
	        {
		        if (!IsConsole && Moderator != null)
			        SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_STARTING", Moderator.UserIDString), Moderator);
		        else Puts(LanguageEn ? "We start checking the player on AFK" : "Начинаем проверку игрока на AFK");

		        Int32 NoAFK_Amount = 0;
		        for (Int32 TryCheck = 1; TryCheck < 6; TryCheck++)
		        {
			        if (Target == null)
			        {
				        if (!IsConsole && Moderator != null)
					        SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_LEAVE", Moderator.UserIDString), Moderator);
				        else Puts(LanguageEn ? "The player left the server at the stage of checking for AFK. Check canceled, try again later" : "Игрок покинул сервер на стадии проверки на AFK. Проверка отменена, повторите попытку позже");

				        StopCheckedPlayer(TargetID, Moderator, true);
				        yield break;
			        }

			        if (!IsConsole)
				        if (Moderator == null)
				        {
					        PrintWarning(LanguageEn
						        ? $"The moderator who called the player {Target.displayName}({Target.UserIDString}) - left the server, interrupting the check AFK!"
						        : $"Модератор вызвавший игрока {Target.displayName}({Target.UserIDString}) - покинул сервер, прервав проверку на AFK!");
					        StopCheckedPlayer(TargetID, Moderator, true);
					        yield break;
				        }

			        if (Target.IdleTime < 10)
				        NoAFK_Amount++;

			        if (!IsConsole && Moderator != null)
				        SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_TRY", Moderator.UserIDString, TryCheck), Moderator);
			        else Puts(LanguageEn ? $"Checking a player for AFK. Attemp : {TryCheck}" : $"Проверяем игрока на AFK. Попытка : {TryCheck}"); 
			        yield return CoroutineEx.waitForSeconds(5f);
		        }

		        if (NoAFK_Amount <= 3)
		        {
			        if (!IsConsole && Moderator != null)
				        SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_AFK", Moderator.UserIDString), Moderator);
			        else Puts(LanguageEn ? $"Check has not been started. The player is in AFK, please try again later" : "Проверка не была запущена. Игрок находится в AFK, пожалуйста повторите попытку позже");
			        
			        StopCheckedPlayer(TargetID, Moderator, true);
			        yield break;
		        }
	        }

	        StartCheckedPlayer(Target, Moderator, IsConsole);
        }
        
                
        private void SendDiscord(String Webhook, List<Fields> fields, Authors Authors, Int32 Color)
        {
	        if (Webhook == null || String.IsNullOrWhiteSpace(Webhook)) return;
	        FancyMessage newMessage = new FancyMessage(null, false, new FancyMessage.Embeds[1] { new FancyMessage.Embeds(null, Color, fields, Authors) });

	        Request($"{Webhook}", newMessage.toJSON());
        }
		
		
		
		private void ShowPlayersList(BasePlayer player, List<BasePlayer> playersList, List<FakePlayer> fakePlayers, Boolean IsModerator = false)
		{
			Int32 X = 0, Y = 0;
			if (fakePlayers != null)
			{
				foreach (FakePlayer fList in fakePlayers)
				{
					DrawUI_TemplatePlayer(player, X, Y, fList.DisplayName, fList.UserID.ToString());

					X++;
					if (X != 3) continue;
					X = 0;
					Y++;
				}
			}
			else
			{
				foreach (BasePlayer pList in playersList)
				{
					if (IsModerator)
					{
						DrawUI_TemplatePlayer_Moderator(player, Y, pList.UserIDString, CorrectedClanName(pList));
						Y++;
					}
					else
					{
						DrawUI_TemplatePlayer(player, X, Y, CorrectedClanName(pList), pList.UserIDString);
						
						X++;
						if (X != 3) continue;
						X = 0;
						Y++;
					}
				}
			}
		}
        
        
        
        
        
        private String VKT_ChangeStatus(Boolean IsModerator, String PlayerName, String UserID, String StatusConnection)
        {
	        String Message = String.Empty;
	        if (IsModerator)
		        Message = LanguageEn ? $"▣ CONNECTION STATUS ▣\nInformation about the moderator:\n• Nickname: {PlayerName}\n• Steam64ID: {UserID} (https://steamcommunity.com/profiles/{UserID})\n• Status: {StatusConnection}" : $"▣ СТАТУС ПОДКЛЮЧЕНИЯ ▣\nИнформация о модераторе :\n• Ник : {PlayerName}\n• Steam64ID : {UserID} (https://steamcommunity.com/profiles/{UserID})\n• Статус : {StatusConnection}";
	        else Message = LanguageEn ? $"▣ CONNECTION STATUS ▣\nInformation about the suspect:\n• Nickname: {PlayerName}\n• Steam64ID: {UserID} (https://steamcommunity.com/profiles/{UserID})\n• Status: {StatusConnection}" : $"▣ СТАТУС ПОДКЛЮЧЕНИЯ ▣\nИнформация о подозреваемом :\n• Ник : {PlayerName}\n• Steam64ID : {UserID} (https://steamcommunity.com/profiles/{UserID})\n• Статус : {StatusConnection}";

	        return Message;
        }

		private void DrawUI_ModeratorStatistics(BasePlayer Moderator)
		{
			if (!ModeratorInformations.ContainsKey(Moderator.userID))
				ModeratorInformations.Add(Moderator.userID, new ModeratorInformation());
			
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_PROFILE_MODERATION_INFO_PANEL");
			if (Interface == null) return;

			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_STATISTICS_TITLE%",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE", Moderator.UserIDString));
			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_QUALITY_ASSESSMENT%",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_QUALITY_ASSESSMENT", Moderator.UserIDString));
			
			CuiHelper.DestroyUi(Moderator, InterfaceBuilder.UI_REPORT_MODERATOR_STATISTICS);
			CuiHelper.AddUi(Moderator, Interface);

			ModeratorInformation ModeratorInformation = ModeratorInformations[Moderator.userID];
			Int32 AllScoreModerator = ModeratorInformation.GetAverageRaiting();
			
			DrawUI_ModeratorStitistics_Banner(Moderator, "-96.94 -98", "91.72 -44",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_CHECKED", Moderator.UserIDString), $"{ModeratorInformation.AmountChecked}",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_BANS_AND_CHECHKED", Moderator.UserIDString));

			DrawUI_ModeratorStitistics_Banner(Moderator, "-96.94 -166.73", "91.72 -112",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_BANS", Moderator.UserIDString), $"{ModeratorInformation.AmountBans}",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_BANS_AND_CHECHKED", Moderator.UserIDString));

			DrawUI_ModeratorStitistics_Banner(Moderator, "-96.94 -273.66", "91.72 -219.66",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ALLSCORE", Moderator.UserIDString), $"{AllScoreModerator}",
				CountRaiting: AllScoreModerator);
			
			DrawUI_ModeratorStitistics_Banner(Moderator, "-97 -342.53", "91.66 -288.53",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE", Moderator.UserIDString), $"{ModeratorInformation.GetAverageRaitingAchive(ModeratorInformation.OneScore)}",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_ONE_ACHIVE", Moderator.UserIDString));

			DrawUI_ModeratorStitistics_Banner(Moderator, "-97 -411.53", "91.66 -357.53",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_TWO_ACHIVE", Moderator.UserIDString),  $"{ModeratorInformation.GetAverageRaitingAchive(ModeratorInformation.TwoScore)}",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_TWO_ACHIVE", Moderator.UserIDString));

			DrawUI_ModeratorStitistics_Banner(Moderator, "-96.94 -479.66", "91.72 -425.66",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_THREE_ACHIVE", Moderator.UserIDString),  $"{ModeratorInformation.GetAverageRaitingAchive(ModeratorInformation.ThreeScore)}",
				GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_DESCRIPTION_THREE_ACHIVE", Moderator.UserIDString));
		}

		
				
		private void DrawUI_Moderator_Checked_Menu(BasePlayer moderator, UInt64 TargetID)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_MODERATOR_MENU_CHECKED");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%COMMAND_STOP_CHECKED%", $"report.panel stop.check.player {TargetID}");
			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLES%", GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLES", moderator.UserIDString));
			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_STOP%", GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_STOP", moderator.UserIDString));

			CuiHelper.AddUi(moderator, Interface);

			DrawUI_Moderator_Button(moderator, $"report.panel check.show.verdicts {TargetID}");
			DrawUI_Moderator_Checked_Menu_Status(moderator, GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS_DEFAULT", moderator.UserIDString));
			DrawUI_Moderator_Checked_Menu_Discord(moderator, GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD_EMPTY", moderator.UserIDString));
		}		

				
		private void DrawUI_Reason_Raiting_Or_Moderator_Menu(BasePlayer moderator, String Text, String ParentUI, String NameLayer, String OffsetMin, String OffsetMax, String Command)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_REASON_MENU_LABEL");
			if (Interface == null) return;

			Interface = Interface.Replace("%PARENT_UI%", ParentUI);
			Interface = Interface.Replace("%REASON_NAME%", NameLayer);
			Interface = Interface.Replace("%OFFSET_MIN%", OffsetMin);
			Interface = Interface.Replace("%OFFSET_MAX%", OffsetMax);
			Interface = Interface.Replace("%TEXT_TITLE%", Text);
			Interface = Interface.Replace("%COMMAND_REASON%", Command);

			CuiHelper.AddUi(moderator, Interface);
		}
		private void DrawUI_HeaderUI_Search(BasePlayer player, Boolean IsModerator = false)
        {
	        String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_SEARCH_HEADER");
            if (Interface == null) return;

            Interface = Interface.Replace("%ISMODERATOR%", $"{IsModerator}");
            Interface = Interface.Replace("%TITLE_PLAYER_HEADER_TITLE_SEARCH_PLAYER%", GetLang("TITLE_PLAYER_HEADER_TITLE_SEARCH_PLAYER", player.UserIDString));

            CuiHelper.DestroyUi(player, "InputPanelSearch" + ".Input");
            CuiHelper.AddUi(player, Interface);
        }	
        
        private void StartCheckedPlayer(BasePlayer Target, BasePlayer Moderator, Boolean IsConsole = false)
        {
	        if (!IsConsole)
	        {
		        if (Moderator == null)
		        {
			        PrintWarning(LanguageEn
				        ? $"The moderator who called the player {Target.displayName}({Target.UserIDString}) - left the server, interrupting start checking!"
				        : $"Модератор вызвавший игрока {Target.displayName}({Target.UserIDString}) - покинул сервер, прервав запуск проверки!");
			        StopCheckedPlayer(Target.userID, Moderator);
			        return;
		        }

		        DrawUI_Moderator_Checked_Menu(Moderator, Target.userID);
	        }
	        
	        PlayerChecks[Target.userID].DisplayName = Target.displayName;

	        UInt64 ModratorID = !IsConsole ? Moderator.userID : 0;
	        StartCheckRCC(Target.userID, ModratorID);
	        StartCheckOzProtect(Target.userID, ModratorID);
	        DrawUI_Player_Alert(Target);
	        
	        if(config.CheckControllerSettings.UseDemo)
		        Target.StartDemoRecording();
		   		 		  						  	   		  	   		  	 				   		 		  				
	        StopDamageAdd(Target);
	        
	        if (config.NotifyChatSettings.UseNotifyCheck)
	        {
		        if (!IsConsole && Moderator != null)
		        {
			        foreach (BasePlayer player in BasePlayer.activePlayerList)
				        SendChat(GetLang("NOTIFY_PLAYERS_START_CHECK_MODERATOR", player.UserIDString, Moderator.displayName, PlayerChecks[Target.userID].DisplayName), player);
		        }
		        else
		        {
			        foreach (BasePlayer player in BasePlayer.activePlayerList)
				        SendChat(GetLang("NOTIFY_PLAYERS_START_CHECK_NOT_MODERATOR", player.UserIDString, Target.displayName), player);
		        }
	        }

	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyStartCheck;
			
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_StartCheck(Target, Moderator, IsConsole);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }

	        SendVK(VKT_StartCheck(Target, Moderator, IsConsole));
	        
	        if(!IsConsole && Moderator != null)
		        SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_START", Moderator.UserIDString), Moderator);
	        else Puts(LanguageEn ? "The check is started, the player is notified!" : "Проверка запущена, игрок уведомлен!");

	        if (config.ReportSendControllerSettings.NoRepeatReport)
	        {
		        PlayerRepository repository = PlayerRepositories.FirstOrDefault(x => x.Value.IsRepeatReported(Target.userID)).Value;
		        if (repository != null)
			        repository.ReportedList.Remove(Target.userID);
	        }

	        Interface.Call("OnStartedChecked", Target, Moderator, IsConsole);
        }

        public class Authors
        {
            public String name { get; set; }
            public String url { get; set; }
            public String icon_url { get; set; }
            public String proxy_icon_url { get; set; }
            public Authors(String name, String url, String icon_url, String proxy_icon_url)
            {
                this.name = name;
                this.url = url;
                this.icon_url = icon_url;
                this.proxy_icon_url = proxy_icon_url;
            }
        }

		private void Unload()
		{
			WriteData();
			
			InterfaceBuilder.DestroyAll();
			ImageUi.Unload();

			if (config.CheckControllerSettings.UseSoundAlert)
			{
				if (RoutineSounds != null && RoutineSounds.Count != 0)
				{
					foreach (KeyValuePair<BasePlayer, Coroutine> routineSound in RoutineSounds.Where(x => x.Value != null))
						ServerMgr.Instance.StopCoroutine(routineSound.Value);
				}

				SpeakerEntityMgr.Shutdown();
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			if (AfkCheckRoutine != null && AfkCheckRoutine.Count != 0)
			{
				foreach (KeyValuePair<BasePlayer, Coroutine> coroutineList in AfkCheckRoutine.Where(x => x.Value != null))
					ServerMgr.Instance.StopCoroutine(coroutineList.Value);
				
				AfkCheckRoutine.Clear();
				AfkCheckRoutine = null;
			}

			if (PlayerRepositories != null && PlayerRepositories.Count != 0)
			{
				PlayerRepositories.Clear();
				PlayerRepositories = null;
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			if (TimerWaitChecked != null && TimerWaitChecked.Count != 0)
			{
				foreach (Timer timer in TimerWaitChecked.Values.Where(t => !t.Destroyed))
					timer.Destroy();
				
				TimerWaitChecked.Clear();
				TimerWaitChecked = null;
			}

			if (config.CheckControllerSettings.StopCheckLeavePlayer)
			{
				if (TimerWaitPlayer != null && TimerWaitPlayer.Count != 0)
				{
					foreach (Timer timer in TimerWaitPlayer.Values.Where(t => !t.Destroyed))
						timer.Destroy();

					TimerWaitPlayer.Clear();
					TimerWaitPlayer = null;
				}
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			_interface = null;
			_ = null;
		}
		   		 		  						  	   		  	   		  	 				   		 		  				

				
		object OnPlayerChat(BasePlayer player, String message, Chat.ChatChannel channel)
		{
			if (!PlayerChecks.ContainsKey(player.userID)) return null;

			if (config.CheckControllerSettings.TrackChat)
			{
				BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
				if (Moderator != null) 
					SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_CHAT", Moderator.UserIDString, message), Moderator);
			}

			player.ResetInputIdleTime();
			return null;
		}

		public class OzResult
		{
			public string status { get; set; }
			public List<OzResponse> response { get; set; }
		}

				
		
		private void DrawUI_PoopUp_Moderator(BasePlayer player, BasePlayer Target)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_POOPUP_MODERATOR");
			if (Interface == null) return;
			
			PlayerInformation InformationTarget = PlayerInformations[Target.userID];
			String LastModerator = String.IsNullOrWhiteSpace(InformationTarget.LastModerator) ? GetLang("TITLE_POOPUP_MODERATION_NO_CHECKED", player.UserIDString) : InformationTarget.LastModerator;
			String AmountCheck = InformationTarget.AmountChecked == 0 ? GetLang("TITLE_POOPUP_MODERATION_NO_CHECKED", player.UserIDString) : InformationTarget.AmountChecked.ToString();

			Interface = Interface.Replace("%TITLE_POOPUP_MODERATION_REPORTS_TITLE%", GetLang("TITLE_POOPUP_MODERATION_REPORTS_TITLE", player.UserIDString));
			Interface = Interface.Replace("%TITLE_POOPUP_MODERATION_AMOUNT_CHECK_TITLE%", GetLang("TITLE_POOPUP_MODERATION_AMOUNT_CHECK_TITLE", player.UserIDString));
			Interface = Interface.Replace("%TITLE_POOPUP_MODERATION_LAST_CHECK_TITLE%", GetLang("TITLE_POOPUP_MODERATION_LAST_CHECK_TITLE", player.UserIDString));
			Interface = Interface.Replace("%TITLE_PLAYER_STEAMID%", GetLang("TITLE_PLAYER_STEAMID", player.UserIDString));
			Interface = Interface.Replace("%TITLE_PLAYER_NICK_NAME%", GetLang("TITLE_PLAYER_NICK_NAME", player.UserIDString));
			Interface = Interface.Replace("%TITLE_POOPUP_MODERATION_INFO_BUTTON_START_CHECK%", GetLang("TITLE_POOPUP_MODERATION_INFO_BUTTON_START_CHECK", player.UserIDString));
			
			Interface = Interface.Replace("%PLAYER_NAME%", Target.displayName.Length > 7 ? Target.displayName.Substring(0, 7).ToUpper() + ".." : Target.displayName.ToUpper());
			Interface = Interface.Replace("%PLAYER_USERID%", Target.UserIDString);
			Interface = Interface.Replace("%AMOUNT_REPORTS%", InformationTarget.Reports.ToString());
			Interface = Interface.Replace("%AMOUNT_CHECK%", AmountCheck);
			Interface = Interface.Replace("%LAST_MODER_CHECK_NAME%", LastModerator);
			Interface = Interface.Replace("%AVATAR%", GetImage(Target.UserIDString));
			Interface = Interface.Replace("%COMMAND_START%",  $"report.panel start.check.player {Target.UserIDString}" );

			CuiHelper.AddUi(player, Interface);
	
			///История жалоб
			DrawUI_PoopUp_Moderator_Panel_Info(player, Target, GetLang("TITLE_POOPUP_MODERATION_HISTORY_REPORTS_TITLE", player.UserIDString), InformationTarget.ReasonHistory.Take(6).ToList(), "-232.80 -141.2", "-102.14 18.8");
		   		 		  						  	   		  	   		  	 				   		 		  				
			if (!String.IsNullOrEmpty(config.ReferenceSettings.RCCSettings.RCCKey))
			{
				///История проверок на серверах [RCC]
				DrawUI_PoopUp_Moderator_Panel_Info(player, Target,
					GetLang("TITLE_POOPUP_MODERATION_INFO_CHECK_SERVERS_RCC", player.UserIDString), null,
					"-65.33 -141.2", "65.33 18.8", GetServersCheckRCC(Target.userID).Take(6).ToList());
		   		 		  						  	   		  	   		  	 				   		 		  				
				///История банов на серверах [RCC]
				DrawUI_PoopUp_Moderator_Panel_Info(player, Target,
					GetLang("TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_RCC", player.UserIDString), null,
					"102.83 -141.2", "233.5 18.8", GetServersBansRCC(Target.userID).Take(6).ToList());

				return;
			}

			if (!String.IsNullOrWhiteSpace(config.ReferenceSettings.OzProtectSettings.OzProtectKey))
			{
				///Тиммейты игрока
				DrawUI_PoopUp_Moderator_Panel_Info(player, Target,
					GetLang("TITLE_POOPUP_MODERATION_INFO_TEAMS_NAME_PLAYER", player.UserIDString), null,
					"-65.33 -141.2", "65.33 18.8", GetTeamsNames(Target).Take(6).ToList());

				///История банов на серверах [OzProtect]
				DrawUI_PoopUp_Moderator_Panel_Info(player, Target,
					GetLang("TITLE_POOPUP_MODERATION_INFO_BANS_SERVERS_OZPROTECT", player.UserIDString), null,
					"102.83 -141.2", "233.5 18.8", GetServersBansOzProtect(Target.userID).Take(6).ToList());
				
				return;
			}
			
			///Тиммейты игрока
			DrawUI_PoopUp_Moderator_Panel_Info(player, Target,
				GetLang("TITLE_POOPUP_MODERATION_INFO_TEAMS_NAME_PLAYER", player.UserIDString), null,
				"-65.33 -141.2", "65.33 18.8", GetTeamsNames(Target).Take(6).ToList());
		}
        private class PlayerRepository
	    {

		    public Int32 GetCooldownLeft(UInt64 TargetID)
		    {
			    if (config.ReportSendControllerSettings.CooldownRepeatOrAll)
			    {
				    if (IsReportedPlayer(TargetID))
					    return Convert.ToInt32(ReportedList[TargetID] - CurrentTime);
			    }
			    else return Convert.ToInt32(Cooldown - CurrentTime);

			    return 0;
		    }
		    
		    private Boolean IsReportedPlayer(UInt64 TargetID) => ReportedList.ContainsKey(TargetID);
		    public Boolean IsCooldown(UInt64 TargetID)
		    {
			    if (config.ReportSendControllerSettings.CooldownRepeatOrAll)
			    {
				    if (IsReportedPlayer(TargetID))
					    return ReportedList[TargetID] > CurrentTime;
			    }
			    else return Cooldown > CurrentTime;

			    return false;
		    }
		    public Double Cooldown;

		    public void AddCooldown(UInt64 TargetID)
		    {
			    Int32 TimeCooldown = Convert.ToInt32(config.ReportSendControllerSettings.CooldownReport + CurrentTime);
			    
			    if (config.ReportSendControllerSettings.CooldownRepeatOrAll ||
			        config.ReportSendControllerSettings.NoRepeatReport)
			    {
				    if (IsReportedPlayer(TargetID))
					    ReportedList[TargetID] = TimeCooldown;
				    else ReportedList.Add(TargetID, TimeCooldown);
			    }
			    else Cooldown = TimeCooldown;
		    }
		    public Boolean IsRepeatReported(UInt64 TargetID) => config.ReportSendControllerSettings.NoRepeatReport && IsReportedPlayer(TargetID);
		    public Dictionary<UInt64, Double> ReportedList = new Dictionary<UInt64, Double>();
	    }
        
                [PluginReference] Plugin IQChat, ImageLibrary, IQFakeActive, NoEscape, EventHelper, Battles, Duel, Duelist, ArenaTournament, Friends, Clans, MultiFighting, StopDamageMan;
		private void GetPlayerCheckServerOzProtect(UInt64 TargetID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.OzProtectSettings.OzProtectKey)) return;
			if (OzProtect_LocalRepository.ContainsKey(TargetID)) return;
			
			String API = $"https://api.ozliginus.ru/methods/ozprotect.getbans?steamid={TargetID}&ozprotectid={config.ReferenceSettings.OzProtectSettings.OzProtectKey}";
			try
			{
				webrequest.Enqueue(API, null, (code, response) =>
				{
					OzResult resources = JsonConvert.DeserializeObject<OzResult>(response);
					if (resources.response == null || !resources.status.Equals("success"))
						return;
					
					OzProtect_LocalRepository.Add(TargetID, new LocalRepositoryOzProtect());
					foreach (OzResponse ozResponse in resources.response)
					{
						if (!OzProtect_LocalRepository[TargetID].LastBansServers.Contains(ozResponse.server.name))
							OzProtect_LocalRepository[TargetID].LastBansServers.Add(ozResponse.server.name);
					}

				}, this);
			}
			catch (Exception e)
			{
				PrintError(LanguageEn ? "OzProtect : We couldn't find player information with OzProtect, please check if your key is up to date or if OzProtect is available" : "OzProtect : Мы не смогли найти информацию об игроке с помощью OzProtect, проверьте актуальность вашего ключа или доступность OzProtect");
			}
		}
		
		private void GetPlayerCheckServerRCC(UInt64 TargetID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.RCCSettings.RCCKey)) return;
			if (RCC_LocalRepository.ContainsKey(TargetID)) return;
			
			String API = $"https://rustcheatcheck.ru/panel/api?action=getInfo&key={config.ReferenceSettings.RCCSettings.RCCKey}&player={TargetID}";
			try
			{
				webrequest.Enqueue(API, null, (code, response) =>
				{
					Response resources = JsonConvert.DeserializeObject<Response>(response);
					if (resources.last_check == null)
						return;
		   		 		  						  	   		  	   		  	 				   		 		  				
					RCC_LocalRepository.Add(TargetID, new LocalRepositoryRCC());
					RCC_LocalRepository[TargetID].LastChecksServers.AddRange(resources.last_check.Select(resource => resource.serverName));
					RCC_LocalRepository[TargetID].LastBansServers.AddRange(resources.bans.Select(resource => resource.serverName));
					
				}, this);
			}
			catch (Exception ex)
			{
				PrintError(LanguageEn ? "RCC : We couldn't find player information with RCC, please check if your key is up to date or if RCC is available" : "RCC : Мы не смогли найти информацию об игроке с помощью RCC, проверьте актуальность вашего ключа или доступность RCC");
			}
		}
		   		 		  						  	   		  	   		  	 				   		 		  				
		
		private void BanPlayerOzProtect(UInt64 TargetID, UInt64 ModerID, String ReasonBan)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.OzProtectSettings.OzProtectKey)) return;
			String API = $"https://api.ozliginus.ru/methods/ozprotect.useredit?admin={ModerID}&steamid={TargetID}&method=ban&reason={ReasonBan}&ozprotectid={config.ReferenceSettings.OzProtectSettings.OzProtectKey}";
			try
			{
				webrequest.Enqueue(API, null, (code, response) => { }, this);
			}
			catch (Exception e)
			{
				PrintError(LanguageEn ? "OzProtect : We were unable to block the player using OzProtect, please check if your key is up to date or if OzProtect is available" : "OzProtect : Мы не смогли заблокировать игрока с помощью OzProtect, проверьте актуальность вашего ключа или доступность OzProtect");
			}
		}
		
		private void StartCheckOzProtect(UInt64 TargetID, UInt64 ModerID)
		{
			if (ModerID == 0) return;
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.OzProtectSettings.OzProtectKey)) return;
			String API = $"https://api.ozliginus.ru/methods/ozprotect.call?checking={ModerID}&suspect={TargetID}&ozprotectid={config.ReferenceSettings.OzProtectSettings.OzProtectKey}&minutes=30";

			try
			{
				webrequest.Enqueue(API, null, (code, response) => { }, this);
			}
			catch (Exception e)
			{
				PrintError(LanguageEn ? "OzProtect : We were unable to get the player to check with OzProtect, please check if your key is up to date or if OzProtect is available" : "OzProtect : Мы не смогли вызвать игрока на проверку с помощью OzProtect, проверьте актуальность вашего ключа или доступность OzProtect");
			}
		}

	    private class ProcessCheckRepository
        {
	        public String DiscordTarget;
	        public String DisplayName;

	        public UInt64 ModeratorID;
        }

        private String GetUrlVK(String Message)
        {
	        String ApiKey = config.NotifyVKSettings.VKTokenGroup;
	        Int32 RandomID = Oxide.Core.Random.Range(0, 99999);
	        Int32 PeerID = 2000000000 + Convert.ToInt32(config.NotifyVKSettings.VKChatID);
	        
	        String url = $"https://api.vk.com/method/messages.send?chat_id=1&random_id={RandomID}&peer_id={PeerID}&message={Message}&access_token={ApiKey}&v=5.13";
	        return url;
        }

        
        
        private void StopCheckedPlayer(UInt64 TargetID, BasePlayer Moderator, Boolean AutoStop = false, Boolean IsConsole = false)
        {
	        if (!PlayerChecks.ContainsKey(TargetID)) return;
	        StopDamageRemove(TargetID);
	        
	        BasePlayer Target = BasePlayer.FindByID(TargetID);

	        if (Target != null)
	        {
		        if(config.CheckControllerSettings.UseDemo)
			        Target.StopDemoRecording();
		        
		        if (!AutoStop)
			        DrawUI_Raiting_Menu_Player(Target, PlayerChecks[TargetID].ModeratorID);
		        CuiHelper.DestroyUi(Target, InterfaceBuilder.UI_REPORT_PLAYER_ALERT);
		        
		        if (AfkCheckRoutine.ContainsKey(Target))
		        {
			        if (AfkCheckRoutine[Target] != null)
			        {
				        ServerMgr.Instance.StopCoroutine(AfkCheckRoutine[Target]);
				        AfkCheckRoutine[Target] = null;
			        }

			        AfkCheckRoutine.Remove(Target);
		        }
	        }
	        
	        if (!IsConsole)
	        {
		        if (Moderator != null)
		        {
			        CuiHelper.DestroyUi(Moderator, InterfaceBuilder.UI_REPORT_MODERATOR_MENU_CHECKED);
			        ModeratorInformations[Moderator.userID].AmountChecked++;
			        PlayerInformations[TargetID].LastModerator = Moderator.displayName;
		        }
	        }
	        else Puts(LanguageEn ? "Player checked completed" : "Проверка игрока завершена");
	        
	        if (!AutoStop)
	        {
		        if (config.NotifyChatSettings.UseNotifyStopCheck)
		        {
			        if (Moderator != null || !IsConsole)
			        {
				        foreach (BasePlayer player in BasePlayer.activePlayerList)
					        SendChat(GetLang("NOTIFY_PLAYERS_STOP_CHECK_MODERATOR", player.UserIDString, Moderator.displayName, PlayerChecks[TargetID].DisplayName), player);
			        }
			        else
			        {
				        foreach (BasePlayer player in BasePlayer.activePlayerList)
					        SendChat(GetLang("NOTIFY_PLAYERS_STOP_CHECK_NOT_MODERATOR", player.UserIDString, PlayerChecks[TargetID].DisplayName), player);
			        }
		        }
		        
		        PlayerInformations[TargetID].AmountChecked++;
		        PlayerInformations[TargetID].Reports = 0;
	        }

	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyStopCheck;
			
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_StopCheck(TargetID, Moderator, AutoStop, IsConsole);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_StopCheck(TargetID, Moderator, AutoStop, IsConsole));


	        if (PlayerChecks.ContainsKey(TargetID))
		        PlayerChecks.Remove(TargetID);

	        Interface.Call("OnStoppedChecked", Target, Moderator, AutoStop, IsConsole);
        }
        private void SoundPlay(BasePlayer player)
        {
	        SpeakerEntityMgr.SpeakerEntity speaker = SpeakerEntityMgr.Create(player);
            
	        speaker.SendEntitities();
	        String SoundName = lang.GetLanguage(player.UserIDString).Equals("ru") ? "ALERT_REPORT_RU" : "ALERT_REPORT_EN";
	        
	        Coroutine routine = ServerMgr.Instance.StartCoroutine(SendSounds(player, SoundName, speaker));

	        if (!RoutineSounds.ContainsKey(player))
		        RoutineSounds.Add(player, routine);
	        else
	        {
		        if (RoutineSounds[player] != null)
			        ServerMgr.Instance.StopCoroutine(RoutineSounds[player]);
			        
		        RoutineSounds[player] = routine;
	        }
	        timer.Once(15f, () =>
	        {
		        speaker.Kill();
		        
		        if (RoutineSounds[player] != null)
			        ServerMgr.Instance.StopCoroutine(RoutineSounds[player]);
	        });     
        }

		private Boolean IsCombatBlock(BasePlayer Target)
		{
			if (!NoEscape) return false;
			if (!config.ReferenceSettings.NoEscapeSetting.NoCheckedCombatBlock) return false;
			Boolean IsCombatBlock = (Boolean)NoEscape.CallHook("IsCombatBlocked", Target);

			return IsCombatBlock;
		}
        
        private String VKT_PlayerSendReport(BasePlayer Sender, UInt64 TargetID, String Reason)
        {
	        String Message = LanguageEn ? $"▣ NEW COMPLAINT ▣" +
	                                      $"\nInformation about the sender:\n• Nickname: {Sender.displayName}\n• Steam64ID: {Sender.userID} (https://steamcommunity.com/profiles/{Sender.userID})" +
	                                      $"\nInformation about the suspect:\n• Nickname: {covalence.Players.FindPlayerById(TargetID.ToString()).Name ?? "EMPTY"}\n• Steam64ID: {TargetID} (https://steamcommunity.com/profiles/{TargetID})" +
	                                      $"\nComplaint reason: {Reason}" : $"▣ НОВАЯ ЖАЛОБА ▣" +
	                                                                        $"\nИнформация об отправителе :\n• Ник : {Sender.displayName}\n• Steam64ID : {Sender.userID} (https://steamcommunity.com/profiles/{Sender.userID})" +
	                                                                        $"\nИнформация о подозреваемом :\n• Ник : {covalence.Players.FindPlayerById(TargetID.ToString()).Name ?? "EMPTY"}\n• Steam64ID : {TargetID} (https://steamcommunity.com/profiles/{TargetID})" +
	                                                                        $"\nПричина жалобы : {Reason}";

	        return Message;
        }

		
		
		private Boolean IsFriendSendReport(UInt64 userID, UInt64 targetID) => config.ReferenceSettings.FriendsSetting.SendReportFriend && IsFriends(userID, targetID);

        
                
        private void CheckStatusModerator(BasePlayer Moderator, String ReasonDisconnected = null)
        {
	        if (Moderator == null) return;
	        KeyValuePair<UInt64, ProcessCheckRepository> ModeratorCheckeds = PlayerChecks.FirstOrDefault(m => m.Value.ModeratorID.Equals(Moderator.userID));
	        if (ModeratorCheckeds.Value == null) return;
	        
	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyStatusPlayerOrModerator;

	        UInt64 TargetID = ModeratorCheckeds.Key;
	        BasePlayer Target = BasePlayer.FindByID(TargetID);

	        if (ReasonDisconnected != null)
	        {
		        if (Target == null)
		        {
			        StopCheckedPlayer(TargetID, Moderator);
			        return;
		        }
		        
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED", Target.UserIDString), Target);
		        
		        Timer WaitModerator = timer.Once(600f, () =>
		        {
			        StopCheckedPlayer(Target.userID, null, true);
			        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_MODERATOR_DISCONNECTED_FULL_LEAVE", Target.UserIDString), Target);
		        });

		        if (!TimerWaitChecked.ContainsKey(Target.userID))
			        TimerWaitChecked.Add(Target.userID, WaitModerator);
		        else TimerWaitChecked[Target.userID] = WaitModerator;
		        
		        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
		        {
			        List<Fields> fields = DT_ChangeStatus(true, Moderator.displayName, Moderator.UserIDString, ReasonDisconnected);
			        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
		        }
		        
		        SendVK(VKT_ChangeStatus(true, Moderator.displayName, Moderator.UserIDString, ReasonDisconnected));
		        return;
	        }
		   		 		  						  	   		  	   		  	 				   		 		  				
	        if (!TimerWaitChecked.ContainsKey(TargetID)) return;
	        if (TimerWaitChecked[TargetID].Destroyed) return;
	        
	        TimerWaitChecked[TargetID].Destroy();
	        TimerWaitChecked.Remove(TargetID);

	        DrawUI_Moderator_Checked_Menu(Moderator, TargetID);

	        String TargetStatus = GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS_DEFAULT", Moderator.UserIDString);
	        if (Target == null || !Target.IsConnected)
	        {
		        TargetStatus = "Disconnected";
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_PLAYER_ALERT_MODERATOR", Moderator.UserIDString, TargetStatus), Moderator);
	        }

	        DrawUI_Moderator_Checked_Menu_Status(Moderator, TargetStatus);
	        DrawUI_Moderator_Checked_Menu_Discord(Moderator, String.IsNullOrWhiteSpace(PlayerChecks[TargetID].DiscordTarget) ? GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_DISCORD_EMPTY", Moderator.UserIDString) : PlayerChecks[TargetID].DiscordTarget);

	        if (Target != null)
		        SendChat(GetLang("FUNCIONAL_CHANGE_STATUS_MODERATOR_RECONNECTED", Target.UserIDString), Target);
	        
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_ChangeStatus(true, Moderator.displayName, Moderator.UserIDString, "Online");
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_ChangeStatus(true, Moderator.displayName, Moderator.UserIDString, "Online"));

        }
        
        private String VKT_StopCheck(UInt64 TargetID, BasePlayer Moderator, Boolean AutoStop = false, Boolean IsConsole = false, Configuration.ReasonReport Verdict = null)
        { 
	        String ModeratorName = !IsConsole && Moderator != null ? Moderator.displayName : "Console";
	        String ModeratorID = !IsConsole && Moderator != null ? Moderator.UserIDString : "Console";
	        String Message = String.Empty;

	        if (AutoStop)
	        {
		        Message = LanguageEn
			        ? $"▣ PLAYER CHECK AUTOMATICALLY COMPLETED ▣\nInformation about the moderator:\n• Nickname: {ModeratorName}\n• Steam64ID: {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nInformation about the suspect:\n• Nickname: {PlayerChecks[TargetID].DisplayName}\n• Steam64ID: {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nResult: The player's reports are not reset"
			        : $"▣ ПРОВЕРКА ИГРОКА ЗАВЕРШЕНА АВТОМАТИЧЕСКИ ▣\nИнформация о модераторе :\n• Ник : {ModeratorName}\n• Steam64ID : {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nИнформация о подозреваемом :\n• Ник : {PlayerChecks[TargetID].DisplayName}\n• Steam64ID : {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nРезультат : Репорты игрока не сброшены";
	        }
	        else
	        {
		        Message = LanguageEn
			        ? $"▣ PLAYER CHECK COMPLETED ▣\nInformation about the moderator:\n• Nickname: {ModeratorName}\n• Steam64ID: {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nInformation about the suspect:\n• Nickname: {PlayerChecks[TargetID].DisplayName}\n• Steam64ID: {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nResult: {(Verdict == null ? "No violations found" : Verdict.Title.LanguageEN)}"
			        : $"▣ ПРОВЕРКА ИГРОКА ЗАВЕРШЕНА ▣\nИнформация о модераторе :\n• Ник : {ModeratorName}\n• Steam64ID : {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nИнформация о подозреваемом :\n• Ник : {PlayerChecks[TargetID].DisplayName}\n• Steam64ID : {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nРезультат : {(Verdict == null ? "Нарушений не выявлено" : Verdict.Title.LanguageRU)}";
	        }

	        return Message;
        }

		public class OzServer
		{
			public string name { get; set; }
			public string ico { get; set; }
			public string overlay { get; set; }
			public string desc { get; set; }
			public string site { get; set; }
			public bool pirate { get; set; }
			public int game { get; set; }
			public string ip { get; set; }
		}
		
		
		public String FindFakeName(ulong userID)
		{
			if (!IQFakeActive || !config.ReferenceSettings.IQFakeActiveUse) return "PLAYER";
			return (string)IQFakeActive?.Call("FindFakeName", userID);
		}
        
        private Authors GetAuthorDiscord(Configuration.NotifyDiscord.Webhooks.TemplatesNotify templatesNotify) => new Authors(templatesNotify.AuthorName, null, templatesNotify.IconURL, null);
		private Boolean IsFriendStartChecked(UInt64 userID, UInt64 targetID) => config.ReferenceSettings.FriendsSetting.StartCheckedFriend && IsFriends(userID, targetID);
		
				private Boolean IsClansSendReport(String userID, String targetID) => config.ReferenceSettings.ClansSetting.SendReportClan && IsClans(userID, targetID);
        
		[ConsoleCommand("report.panel")]
		private void FuncionalCommandReport(ConsoleSystem.Arg arg)
        {
			BasePlayer player = arg.Player();
			if (player == null) return;
			String ActionPanel = arg.Args[0];

			switch(ActionPanel)
            {
								case "page.controller": 
					{
						Int32 Page = Int32.Parse(arg.Args[1]);
						
						Boolean IsModeratorParam;
						if (!Boolean.TryParse(arg.Args[2], out IsModeratorParam)) return;
						
						DrawUI_PlayerPanel(player, Page, IsModeratorParam);
						break;
                    }
                
				case "close.poopup": //report.panel close.poopup
				{
					CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
					CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_MODERATOR);
					CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
					break;
				}
				
                
				case "select.player":
				{
					UInt64 userID;
					if (!UInt64.TryParse(arg.Args[1], out userID)) return;

					Boolean IsModerator;
					if (!Boolean.TryParse(arg.Args[2], out IsModerator)) return;

					BasePlayer Target = IsFake(userID) ? null : BasePlayer.FindByID(userID);
					String displayName = Target == null ? FindFakeName(userID) : Target.displayName;

					if (IsModerator)
					{
						if (Target == null)
						{
							CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
							CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_MODERATOR);
							DrawUI_PlayerPanel(player, 0, true);
							return;
						}
						DrawUI_PoopUp_Moderator(player, Target);
						return;
					}
					DrawUI_ShowPoopUP(player, displayName, userID.ToString());
					break;
				}

				
				
				case "send.player.report"://report.panel send.player.report userID Reason
				{
					UInt64 TargetID;
					if (!UInt64.TryParse(arg.Args[1], out TargetID))
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
						return;
					}

					if (IsFake(TargetID))
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
						return;
					}
		   		 		  						  	   		  	   		  	 				   		 		  				
					BasePlayer Target = BasePlayer.FindByID(TargetID);
					if (Target == null)
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
						return;
					}

					Int32 ReasonIndex;
					if (!Int32.TryParse(arg.Args[2], out ReasonIndex))
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_PLAYER);
						return;
					}
					
					SendReportPlayer(player, TargetID, ReasonIndex);
					break;
				}

				
				
				case "select.type.mod": //report.panel select.type.mod boolean
				{
					if (!IsModerator(player)) return;
					
					Boolean IsModeratorParam;
					if (!Boolean.TryParse(arg.Args[1], out IsModeratorParam)) return;

					IsModeratorParam = !IsModeratorParam;
					
					DrawUI_LeftMenu(player, IsModeratorParam);
					DrawUI_PlayerPanel(player, 0, IsModeratorParam);
					DrawUI_HeaderUI_Search(player, IsModeratorParam);
					break;
				}
		   		 		  						  	   		  	   		  	 				   		 		  				
				
				
				case "start.check.player": //report.panel start.check.player ID
				{
					if (!IsModerator(player)) return;

					UInt64 TargetID;
					if (!UInt64.TryParse(arg.Args[1], out TargetID))
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_MODERATOR);
						return;
					}

					BasePlayer Target = BasePlayer.FindByID(TargetID);
					if (Target == null)
					{
						CuiHelper.DestroyUi(player, "BLURED_POOP_UP");
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_POOPUP_MODERATOR);
						return;
					}

					if (AfkCheckRoutine.ContainsKey(Target))
					{
						if (AfkCheckRoutine[Target] != null)
						{
							ServerMgr.Instance.StopCoroutine(AfkCheckRoutine[Target]);
							AfkCheckRoutine[Target] = null;
					        
							if(PlayerChecks.ContainsKey(Target.userID))
								PlayerChecks.Remove(Target.userID);
						}
					}
			        
					Coroutine routineAFK = ServerMgr.Instance.StartCoroutine(StartAfkCheck(Target, player, false, !config.CheckControllerSettings.UseCheckAFK));

					if (!AfkCheckRoutine.ContainsKey(Target))
						AfkCheckRoutine.Add(Target, routineAFK);
					else AfkCheckRoutine[Target] = routineAFK;
					
					break;
				}

				
				
				case "stop.check.player": //report.panel stop.check.player TargetID
				{
					if (!IsModerator(player)) return;
					UInt64 TargetID;
					if (!UInt64.TryParse(arg.Args[1], out TargetID)) return;

					StopCheckedPlayer(TargetID, player);
					break;
				}

								
				
				case "check.show.verdicts": 
				{
					if (!IsModerator(player)) return;

					UInt64 TargetID;
					if (!UInt64.TryParse(arg.Args[1], out TargetID)) return;
		   		 		  						  	   		  	   		  	 				   		 		  				
					DrawUI_Moderator_Button(player);
					Int32 Y = 0;
					foreach (Configuration.ReasonReport ReasonBan in config.ReasonList)
					{
						DrawUI_Reason_Raiting_Or_Moderator_Menu(player,
							ReasonBan.Title.GetReasonTitle(player.userID),
							InterfaceBuilder.UI_REPORT_MODERATOR_MENU_CHECKED,
							InterfaceBuilder.UI_REPORT_MODERATOR_MENU_CHECKED + $"_REASON_{Y}",
							$"-102.33 {55 + (Y * 30)}", $"102.33 {79 + (Y * 30)}", $"report.panel check.select.verdict {TargetID} {Y}");

						Y++;
					}
					break;
				}

				
				
				case "check.select.verdict":
				{
					if (!IsModerator(player)) return;
		   		 		  						  	   		  	   		  	 				   		 		  				
					UInt64 TargetID;
					if (!UInt64.TryParse(arg.Args[1], out TargetID)) return;

					Int32 VerdictIndex;
					if (!Int32.TryParse(arg.Args[2], out VerdictIndex)) return;
					
					Configuration.ReasonReport Verdict = config.ReasonList[VerdictIndex];
					if (Verdict == null)
					{
						PrintWarning(LanguageEn ? $"We could not find the index of this verdict! Check the configuration or send this message to the developer, the number of verdicts : {config.ReasonList.Count}" : $"Мы не смогли обнаружить индекс данного вердикта! Проверьте конфигурацию или пришлите это сообщение разработчику, количество вердиктов : {config.ReasonList.Count}");
						return;
					}
					
					SendVerdictPlayer(TargetID, player, Verdict);
					break;
				}

				
				
				case "select.raiting.star": 
				{
					Int32 IndexStar;
					if (!Int32.TryParse(arg.Args[1], out IndexStar))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}

					UInt64 ModeratorID;
					if (!UInt64.TryParse(arg.Args[2], out ModeratorID))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}
					
					DrawUI_Raiting_Menu_Stars(player, IndexStar, ModeratorID);

					DrawUI_Reason_Raiting_Or_Moderator_Menu(player,
						GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE", player.UserIDString),
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL,
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL +
						"_TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE", $"-102.33 37",
						$"102.33 61.6", $"report.panel select.raiting.reason {IndexStar} {ModeratorID} 1");
					
					DrawUI_Reason_Raiting_Or_Moderator_Menu(player,
						GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_TWO_ACHIVE", player.UserIDString),
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL,
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL +
						"_TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE", $"-102.33 67", $"102.33 91.6",
						$"report.panel select.raiting.reason {IndexStar} {ModeratorID} 2");
					
					DrawUI_Reason_Raiting_Or_Moderator_Menu(player,
						GetLang("TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_THREE_ACHIVE", player.UserIDString),
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL,
						InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL +
						"_TITLE_PROFILE_MODERATOR_STATISTICS_TITLE_ONE_ACHIVE", $"-102.33 97", $"102.33 121.6",
						$"report.panel select.raiting.reason {IndexStar} {ModeratorID} 3");
					break;
				}

				
				
				case "select.raiting.reason": 
				{
					Int32 IndexStar;
					if (!Int32.TryParse(arg.Args[1], out IndexStar))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}
					
					UInt64 ModeratorID;
					if (!UInt64.TryParse(arg.Args[2], out ModeratorID))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}

					Int32 IndexAchive;
					if (!Int32.TryParse(arg.Args[3], out IndexAchive))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}

					SendRaitingModerator(ModeratorID, IndexAchive, IndexStar + 1);	
					CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
					
					SendChat(GetLang("FUNCIONAL_MESSAGE_SEND_RAITING", player.UserIDString), player);

					BasePlayer Moderator = BasePlayer.FindByID(ModeratorID);
					if(Moderator != null)
						SendChat(GetLang("FUNCIONAL_MESSAGE_SEND_RAITING_FOR_MODERATOR", Moderator.UserIDString), Moderator);
					break;
				}
		   		 		  						  	   		  	   		  	 				   		 		  				
								
				
				case "close.select.raiting":  //report.panel close.select.raiting ModeratorID
				{
					UInt64 ModeratorID;
					if (!UInt64.TryParse(arg.Args[1], out ModeratorID))
					{
						CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
						return;
					}
					
					BasePlayer Moderator = BasePlayer.FindByID(ModeratorID);
					if (Moderator != null)
						SendChat(GetLang("FUNCIONAL_MESSAGE_NO_SEND_RAITING_FOR_MODERATOR", Moderator.UserIDString), Moderator);
					else
						Puts(LanguageEn
							? $"Player {player.displayName}({player.userID}) refrained from moderator rating"
							: $"Игрок {player.displayName}({player.userID}) воздержался от оценки модератора");

					
					SendChat(GetLang("FUNCIONAL_MESSAGE_NO_SEND_RAITING", player.UserIDString), player);
					CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_RAITING_PLAYER_PANEL);
					break;
				}

								
				
				case "search.player": //report.panel search.player SearchName IsModerator
				{
					Boolean IsModerator;
					if (!Boolean.TryParse(arg.Args[1], out IsModerator)) return;
					
					if (!arg.HasArgs(3))
					{
						DrawUI_PlayerPanel(player, IsModerator: IsModerator);
						return;
					}
					
					String SearchName = arg.Args[2];
					if (String.IsNullOrWhiteSpace(SearchName)) return;

					DrawUI_PlayerPanel(player, 0, IsModerator, SearchName);
					break;
				}

				
                default:
                    {
						break;
                    }
            };
        }

        private class ModeratorInformation
        {
	        public Int32 AmountChecked = 0;
	        public Int32 AmountBans = 0;
	        public Int32 AverageRaiting = 0;
	        public List<Int32> OneScore = new List<Int32>();
	        public List<Int32> TwoScore = new List<Int32>();
	        public List<Int32> ThreeScore = new List<Int32>();
	        
	        public Int32 GetAverageRaiting()
	        {
		        Int32 AchiveRaitingOne = GetAverageRaitingAchive(OneScore);
		        Int32 AchiveRaitingTwo = GetAverageRaitingAchive(TwoScore);
		        Int32 AchiveRaitingThree = GetAverageRaitingAchive(ThreeScore);
		        
		        Int32 FullRaiting = AchiveRaitingOne + AchiveRaitingTwo + AchiveRaitingThree;

		        AverageRaiting = FullRaiting / 3;
		        return AverageRaiting;
	        }
	        public Int32 GetAverageRaitingAchive(List<Int32> Score)
	        {
		        Int32 AverageRaitingAchive = 0;
		        Int32 RaitingFull = Score.Sum();
				
		        Int32 FormulDivision = Score.Count == 0 ? 1 : Score.Count;
		        AverageRaitingAchive = RaitingFull / FormulDivision;
		        return AverageRaitingAchive;
	        }
        }
        private Dictionary<UInt64, PlayerRepository> PlayerRepositories = new Dictionary<UInt64, PlayerRepository>();
				
				private class Response
		{
			public List<String> last_ip;
			public String last_nick;
			public List<UInt64> another_accs;
			public List<last_checks> last_check;
			public class last_checks
			{
				public UInt64 moderSteamID;
				public String serverName;
				public Int32 time;
			}
			public List<RustCCBans> bans;
			public class RustCCBans
			{
				public Int32 banID;
				public String reason;
				public String serverName;
				public Int32 OVHserverID;
				public Int32 banDate;
			}
		}
        
        private String VKT_StartCheck(BasePlayer Target, BasePlayer Moderator, Boolean IsConsole = false)
        { 
	        String ModeratorName = !IsConsole && Moderator != null ? Moderator.displayName : "Console";
	        String ModeratorID = !IsConsole && Moderator != null ? Moderator.UserIDString : "Console";
	        String Message = LanguageEn
		        ? $"▣ PLAYER CHECK HAS STARTED ▣\nInformation about the moderator:\n• Nickname: {ModeratorName}\n• Steam64ID: {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nInformation about the suspect:\n• Nickname: {Target.displayName}\n• Steam64ID: {Target.userID} (https://steamcommunity.com/profiles/{Target.userID})"
		        : $"▣ ЗАПУЩЕНА ПРОВЕРКА ИГРОКА ▣\nИнформация о модераторе :\n• Ник : {ModeratorName}\n• Steam64ID : {ModeratorID} (https://steamcommunity.com/profiles/{ModeratorID})\nИнформация о подозреваемом :\n• Ник : {Target.displayName}\n• Steam64ID : {Target.userID} (https://steamcommunity.com/profiles/{Target.userID})";
		   		 		  						  	   		  	   		  	 				   		 		  				
	        return Message;
        }
		
		private void BanPlayerRCC(UInt64 TargetID, String ReasonBan)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.RCCSettings.RCCKey)) return;
			String API = $"https://rustcheatcheck.ru/panel/api?action=addBan&key={config.ReferenceSettings.RCCSettings.RCCKey}&player={TargetID}&reason={ReasonBan}";
			try
			{
				webrequest.Enqueue(API, null, (code, response) => { }, this);
			}
			catch (Exception e)
			{
				PrintError(LanguageEn ? "RCC : We were unable to block the player using RCC, please check if your key is up to date or if RCC is available" : "RCC : Мы не смогли заблокировать игрока с помощью RCC, проверьте актуальность вашего ключа или доступность RCC");
			}
		}

		
		
		
		private Boolean IsRaidBlock(BasePlayer Target)
		{
			if (!config.ReferenceSettings.NoEscapeSetting.NoCheckedRaidBlock) return false;
			if (!NoEscape)
			{
				String ret = Interface.Call("CanTeleport", Target) as String;
				return ret != null;
			}
			Boolean IsRaidBlock = (Boolean)NoEscape.CallHook("IsRaidBlocked", Target);

			return IsRaidBlock;
		}
        private Dictionary<BasePlayer, Coroutine> AfkCheckRoutine = new Dictionary<BasePlayer, Coroutine>();
        private static IQReportSystem _;
		
		private void DrawUI_LeftMenu_Button(BasePlayer player, String TitleButton, String IconButton, String ColorButton, String OffsetMin, String OffsetMax, String Command)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_LEFT_MENU_BUTTON");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%OFFSET_MIN%", OffsetMin);
			Interface = Interface.Replace("%OFFSET_MAX%", OffsetMax);
			Interface = Interface.Replace("%TITLE_BUTTON%", TitleButton);
			Interface = Interface.Replace("%ICON_BUTTON%", IconButton);
			Interface = Interface.Replace("%COLOR_BUTTON%", ColorButton);
			Interface = Interface.Replace("%COMMAND_BUTTON%", Command);

			CuiHelper.AddUi(player, Interface);
		}
        private List<Fields> DT_PlayerMaxReport(String PlayerName, Int32 Reports, UInt64 TargetID)
        {
	        List<Fields> fields = new List<Fields>
	        {
		        new Fields(LanguageEn ? "Information about the suspect :" : "Информация о подозреваемом :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{PlayerName}", true),
		        new Fields("Steam64ID", $"[{TargetID}](https://steamcommunity.com/profiles/{TargetID})", true),
		        new Fields(LanguageEn ? "Count reports" : "Количество репортов", $"{Reports}", true),
	        };

	        return fields;
        }

        private void RegisteredPlayer(BasePlayer player)
        {
	        if(!PlayerInformations.ContainsKey(player.userID))
		        PlayerInformations.Add(player.userID, new PlayerInformation());

	        if (IsModerator(player))
	        {
		        if (!ModeratorInformations.ContainsKey(player.userID))
			        ModeratorInformations.Add(player.userID, new ModeratorInformation());
	        }
	        else
	        {
		        if(ModeratorInformations.ContainsKey(player.userID))
			        ModeratorInformations.Remove(player.userID);
	        }
        }
		
		
		
		private void DrawUI_TemplatePlayer_Moderator(BasePlayer player, Int32 Y, String UserID, String NickName)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_TEMPLATE_PLAYER_MODERATOR");
			if (Interface == null) return;

			Interface = Interface.Replace("%AVATAR%",GetImage(UserID)); 
			Interface = Interface.Replace("%NAME%", NickName.Length > 7 ? NickName.Substring(0, 7).ToUpper() + ".." : NickName.ToUpper());
			Interface = Interface.Replace("%STEAMID%", UserID);
			Interface = Interface.Replace("%OFFSET_MIN%", $"-219.21 {174.14 - (Y * 62)}");
			Interface = Interface.Replace("%OFFSET_MAX%", $"219.21 {210.14 - (Y * 62)}");
			Interface = Interface.Replace("%REPORT_COUNTS%", $"{PlayerInformations[UInt64.Parse(UserID)].Reports}");
			Interface = Interface.Replace("%COMMAND%", $"report.panel select.player {UserID} true");
			
			Interface = Interface.Replace("%TITLE_PLAYER_NICK_NAME%", GetLang("TITLE_PLAYER_NICK_NAME", player.UserIDString));
			Interface = Interface.Replace("%TITLE_PLAYER_STEAMID%", GetLang("TITLE_PLAYER_STEAMID", player.UserIDString));
			Interface = Interface.Replace("%TITLE_PLAYER_REPORTS%", GetLang("TITLE_PLAYER_REPORTS", player.UserIDString));

			CuiHelper.AddUi(player, Interface);

			if (config.ReferenceSettings.MultiFightingSetting.UseSteamCheck && MultiFighting != null) 
				DrawUI_TemplatePlayer_Moderator_IsSteam(player, UserID);
		}
        
        private void SendSound(UInt64 netId, byte[] data)
        {
	        if (!Net.sv.IsConnected())
		        return;

	        foreach (BasePlayer current in BasePlayer.activePlayerList.Where(current => current.IsConnected))
	        {
		        NetWrite netWrite = Net.sv.StartWrite();
		        netWrite.PacketID(Message.Type.VoiceData);
		        netWrite.UInt64(netId);
		        netWrite.BytesWithSize(data);
		        netWrite.Send(new SendInfo(current.Connection) { priority = Priority.Immediate });
	        }
        }

        public class Fields
        {
            public String name { get; set; }
            public String value { get; set; }
            public bool inline { get; set; }
            public Fields(String name, String value, bool inline)
            {
                this.name = name;
                this.value = value;
                this.inline = inline;
            }
        }
        private Dictionary<UInt64, Timer> TimerWaitChecked = new Dictionary<UInt64, Timer>();
        
        private String VKT_PlayerMaxReport(String PlayerName, Int32 Reports, UInt64 TargetID)
        {
	        String Message = LanguageEn
		        ? $"▣ EXCESS OF COMPLAINTS ▣\nInformation about the suspect:\n• Nickname: {PlayerName}\n• Steam64ID : {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nNumber of reports: {Reports}"
		        : $"▣ ПРЕВЫШЕНИЕ КОЛИЧЕСТВА ЖАЛОБ ▣\nИнформация об подозреваемом :\n• Ник : {PlayerName}\n• Steam64ID : {TargetID} (https://steamcommunity.com/profiles/{TargetID})\nКоличество репортов : {Reports}";

	        return Message;
        }
		   		 		  						  	   		  	   		  	 				   		 		  				
        private List<String> GetTeamsNames(BasePlayer Target)
        {
	        List<String> TeamsName = new List<String>();

	        if (Target.Team == null)
		        return TeamsName;

	        foreach (UInt64 teamMember in Target.Team.members)
	        {
		        IPlayer TeamPlayer = covalence.Players.FindPlayerById(teamMember.ToString());
		        TeamsName.Add(TeamPlayer.Name);
	        }
	        
	        return TeamsName;
        }
		   		 		  						  	   		  	   		  	 				   		 		  				
                
        
        
        private void Init() => ReadData();

		
		private static InterfaceBuilder _interface;
        
        
        public class FancyMessage
        {
            public String content { get; set; }
            public Boolean tts { get; set; }
            public Embeds[] embeds { get; set; }
		   		 		  						  	   		  	   		  	 				   		 		  				
            public class Embeds
            {
                public String title { get; set; }
                public Int32 color { get; set; }
                public List<Fields> fields { get; set; }
                public Authors author { get; set; }

                public Embeds(String title, Int32 color, List<Fields> fields, Authors author)
                {
                    this.title = title;
                    this.color = color;
                    this.fields = fields;
                    this.author = author;

                }
            }

            public FancyMessage(String content, bool tts, Embeds[] embeds)
            {
                this.content = content;
                this.tts = tts;
                this.embeds = embeds;
            }

            public String toJSON() => JsonConvert.SerializeObject(this);
        }
		
		
		
		private void StopDamageAdd(BasePlayer player)
		{
			if (StopDamageMan == null) return;
			if (!config.ReferenceSettings.StopDamageManSetting.UseStopDamage) return;
			
			StopDamageMan.CallHook("AddPlayerSDM", player);
			SendChat(GetLang("FUNCIONAL_PLAYER_STOP_DAMAGE_MAN_ADD", player.UserIDString), player);
		}
		private class Configuration
		{
			[JsonProperty(LanguageEn ? "Setting up compatibility with IQReportSystemr" : "Настройка совместимостей с IQReportSystem")]
			public References ReferenceSettings = new References();
			
			[JsonProperty(LanguageEn ? "Color setting" : "Настройка цветов")]
			public Colors ColorsSettings = new Colors();
			[JsonProperty(LanguageEn ? "Setting images" : "Настройка изображений")]
			public Images ImagesSettings = new Images();
			[JsonProperty(LanguageEn ? "List of reports and reasons for blocking" : "Список жалоб и причин блокировки")]
			public List<ReasonReport> ReasonList = new List<ReasonReport>();
			[JsonProperty(LanguageEn ? "Setting up sending complaints via F7 or the RUST game menu" : "Настройка отправки жалоб через F7 или игровое меню RUST")]
			public ReportF7AndGameMenu ReportF7AndGameMenuSettings = new ReportF7AndGameMenu();
			[JsonProperty(LanguageEn ? "Setting up the Player check process" : "Настройка процесса проверки игрока")]
			public CheckController CheckControllerSettings = new CheckController();
			[JsonProperty(LanguageEn ? "Setting up moderator notifications and the maximum number of reports" : "Настройка уведомления модераторов и максимального количества репортов")]
			public ReportContollerModeration ReportContollerModerationSettings = new ReportContollerModeration();
			[JsonProperty(LanguageEn ? "Setting up sending complaints by players" : "Настройка отправки жалоб игроками")]
			public ReportSendController ReportSendControllerSettings = new ReportSendController();
			[JsonProperty(LanguageEn ? "Additional verdict setting" : "Дополнительная настройка вынесения вердикта")]
			public VerdictController VerdictControllerSettings = new VerdictController();
			[JsonProperty(LanguageEn ? "Configuring notifications for all players about actions in the plugin" : "Настройка уведомлений для всех игроков о действиях в плагине")]
			public NotifyChat NotifyChatSettings = new NotifyChat();
			[JsonProperty(LanguageEn ? "Setting up notifications in Discord" : "Настройка уведомлений в Discord")]
			public NotifyDiscord NotifyDiscordSettings = new NotifyDiscord();
			[JsonProperty(LanguageEn ? "Setting up notifications in VK" : "Настройка уведомлений в VK")]
			public NotifyVK NotifyVKSettings = new NotifyVK();
			[JsonProperty(LanguageEn ? "Command to send data when calling for verification (console and chat)" : "Команда для отправки данных при вызове на проверку (консольная и чатовая)")]
			public String CommandForContact;
			
			internal class VerdictController
			{
				[JsonProperty(LanguageEn ? "Banned all the `Friends` of a player who has been given a verdict by a moderator (true - yes/false - no)" : "Блокировать всех `Друзей` игрока, которому вынес вердикт модератор (true - да/false - нет)")]
				public Boolean UseBanAllTeam;
				[JsonProperty(LanguageEn ? "Index from the list of complaints when blocking a player's `Friends` (From your list - starts from 0)" : "Индекс из списка жалоб при блокировки `Друзей` игрока  (Из вашего списка - начинается от 0)")]
				public Int32 IndexBanReason;
			}
			internal class CheckController
			{
				[JsonProperty(LanguageEn ? "Use sound notification for players when calling for verification (true - yes / false - no) [You must upload sound files to the IQSystem/IQReportSystem/Sounds folder]" : "Использовать звуковое оповещение для игроков при вызове на проверку (true - да/false - нет) [Вы должны загрузить файлы со звуком в папку IQSystem/IQReportSystem/Sounds]")]
				public Boolean UseSoundAlert;
				[JsonProperty(LanguageEn ? "Record a demos of the player during his check" : "Записывать демо игрока во время его проверки")]
				public Boolean UseDemo;
				[JsonProperty(LanguageEn ? "Use AFK validation before calling for check (true - yes / false - no)" : "Использовать проверку на AFK перед вызовом на проверку (true - да/false - нет)")]
				public Boolean UseCheckAFK;
				[JsonProperty(LanguageEn ? "Cancel check for a player automatically with saving reports if he left the server for 15 minutes or more (true - yes/false - no)" : "Отменять проверку игроку автоматически с сохранением репортов если он покинул сервер на 15 минут и более (true - да/false - нет)")]
				public Boolean StopCheckLeavePlayer;

				[JsonProperty(LanguageEn ? "Use tracking of crafting of invaders by the player (will notify the moderator about it) (true - yes / false - no)" : "Использовать отслеживание крафта предметов игроком (будет уведомлять модератора об этом) (true - да/false - нет)")]
				public Boolean TrackCrafting;
				[JsonProperty(LanguageEn ? "Use tracking of messages sent to the chat by the player (will notify the moderator about it) (true - yes / false - no)" : "Использовать отслеживание отправки сообщений в чат игроком (будет уведомлять модератора об этом) (true - да/false - нет)")]
				public Boolean TrackChat;
				[JsonProperty(LanguageEn ? "Use player command usage tracking (will notify the moderator about it) (true - yes / false - no)" : "Использовать отслеживание использования команд игроком (будет уведомлять модератора об этом) (true - да/false - нет)")]
				public Boolean TrackCommand;
			}

			internal class ReportContollerModeration
			{
				[JsonProperty(LanguageEn ? "Maximum number of reports to display the player in the moderator menu and moderator notifications" : "Максимальное количество репортов для отображения игрока в меню модератора и уведомления модератора")]
				public Int32 ReportCountTrigger;
				[JsonProperty(LanguageEn ? "Setting up moderator notifications about the maximum number of player reports" : "Настройка уведомления модератора о максимальном количестве репортов игрока")]
				public AlertModeration AlertModerationSettings = new AlertModeration();
				internal class AlertModeration
				{
					[JsonProperty(LanguageEn ? "Notify the moderator that the player has scored the maximum number of reports" : "Уведомлять модератора о том, что игрок набрал максимальное количество репортов")]
					public Boolean AlertModerator;
					[JsonProperty(LanguageEn ? "Enable an audio notification to the moderator during the notification of the number of reports" : "Включать звуковое уведомление модератору во время уведомления о количестве репортов")]
					public Boolean AlertSound;
					[JsonProperty(LanguageEn ? "The path to the notification sound (this is the path of the prefab of the game - you can see here : https://github.com/OrangeWulf/Rust-Docs/blob/master/Extended/Effects.md)" : "Путь до звука уведомления (это путь префаба игры - посмотреть можно тут : https://github.com/OrangeWulf/Rust-Docs/blob/master/Extended/Effects.md)")]
					public String PathSound;
				}
			}
			internal class ReportSendController
			{
				[JsonProperty(LanguageEn ? "Prohibit a player from sending a complaint against one player several times (true - yes/false - no)" : "Запретить игроку несколько раз отправлять жалобу на одного игрока (true - да/false - нет)")]
				public Boolean NoRepeatReport;
				[JsonProperty(LanguageEn ? "Cooldown before sending a complaint to the players (in seconds) (if you don't need a recharge, leave 0)" : "Перезарядка перед отправкой жалобы на игроков (в секундах) (если вам не нужна перезарядка - оставьте 0)")]
				public Int32 CooldownReport;
				[JsonProperty(LanguageEn ? "Use cooldown before sending a complaint only for a repeated complaint against one player (true) otherwise for all players (false)" : "Использовать перезарядку перед отправкой жалобы только на повторную жалобу на одного игрока (true) иначе на всех игроков (false)")]
				public Boolean CooldownRepeatOrAll;
			}
			internal class ReportF7AndGameMenu
			{
				[JsonProperty(LanguageEn ? "Use sending report via F7 and the RUST game menu (true - yes/false - no)" : "Использовать отправку жалоб через F7 и игровое меню RUST (true - да/false - нет)")]
				public Boolean UseFunction;
				[JsonProperty(LanguageEn ? "Index from the list of complaints when sent via F7 and the RUST game menu (From your list - starts from 0)" : "Индекс из списка жалоб при отправке через F7 и игровое меню RUST (Из вашего списка - начинается от 0)")]
				public Int32 DefaultIndexReason;
			}
			internal class NotifyChat
			{
				[JsonProperty(LanguageEn ? "Notify players when a moderator has started checking a player (configurable in the language file)" : "Уведомлять игроков о том, что модератор начал проверку игрока (настраивается в языковом файле)")]
				public Boolean UseNotifyCheck;
				[JsonProperty(LanguageEn ? "Notify players when a moderator has finished checking a player (configurable in the language file)" : "Уведомлять игроков о том, что модератор завершил проверку игрока (настраивается в языковом файле)")]
				public Boolean UseNotifyStopCheck;
				[JsonProperty(LanguageEn ? "Notify players that the moderator has completed the verification of the player and issued a verdict (banned) (configurable in the language file)" : "Уведомлять игроков о том, что модератор завершил проверку игрока и вынес вердикт (забанил) (настраивается в языковом файле)")]
				public Boolean UseNotifyVerdictCheck;
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			internal class NotifyVK
			{
				[JsonProperty(LanguageEn ? "Token from the VK group (you can find it in the community settings)" : "Токен от группы ВК (вы можете найти его в настройках сообщества)")]
				public String VKTokenGroup;
				[JsonProperty(LanguageEn ? "ID of the conversation the bot is invited to (countdown starts from 1 - every new conversation +1)" : "ID беседы в которую приглашен бот (отсчет начинается с 1 - каждую новую беседу +1)")]
				public String VKChatID;
			}
			
			internal class NotifyDiscord
			{
				[JsonProperty(LanguageEn ? "Set up WebHooks to send to Discord (if you don't need this feature - leave the field blank)" : "Настройка WebHooks для отправки в Discord (если вам не нужна эта функция - оставьте поле пустым)")]
				public Webhooks WebhooksList = new Webhooks();
				internal class Webhooks
				{
					internal class TemplatesNotify
					{
						[JsonProperty("Webhook")]
						public String WebhookNotify;
						[JsonProperty(LanguageEn ? "Discord message color (Can be found on the website - https://old.message.style/dashboard in the JSON section)" : "Цвет сообщения в Discord (Можно найти на сайте - https://old.message.style/dashboard в разделе JSON)")]
						public Int32 Color; 
						[JsonProperty(LanguageEn ? "Title message" : "Заголовок сообщения")]
						public String AuthorName;
						[JsonProperty(LanguageEn ? "Link to the icon for the avatar of the message" : "Ссылка на иконку для аватарки сообщения")]
						public String IconURL;
		   		 		  						  	   		  	   		  	 				   		 		  				
					}

					[JsonProperty(LanguageEn ? "WebHook : Setting up sending information about the start of a check" : "WebHook : Настройка отправки информации о начале проверки")]
					public TemplatesNotify NotifyStartCheck = new TemplatesNotify(); 
					
					[JsonProperty(LanguageEn ? "WebHook : Setting up sending information about the stop of a check" : "WebHook : Настройка отправки информации о завершении проверки")]
					public TemplatesNotify NotifyStopCheck = new TemplatesNotify(); 

					[JsonProperty(LanguageEn ? "WebHook : Settings for sending player contact information (when a player sends their Discord)" : "WebHook : Настройка отправки информации о контактах игрока (когда игрок отправляет свой Discord)")]
					public TemplatesNotify NotifyContacts = new TemplatesNotify(); 
					
					[JsonProperty(LanguageEn ? "WebHook : Setting up sending information about player complaints" : "WebHook : Настройка отправки информации о жалобах игроков")]
					public TemplatesNotify NotifySendReport = new TemplatesNotify();
					
					[JsonProperty(LanguageEn ? "WebHook : Setting up sending information when a player has exceeded the maximum number of complaints" : "WebHook : Настройка отправки информации когда игрок превысил максимальное количество жалоб")]
					public TemplatesNotify NotifyMaxReport = new TemplatesNotify();
					
					[JsonProperty(LanguageEn ? "WebHook : Setting up sending information about changing the status of the player and moderator" : "WebHook : Настройка отправки информации о изменении статуса игрока и модератора")]
					public TemplatesNotify NotifyStatusPlayerOrModerator = new TemplatesNotify();
				}
			}
			internal class ReasonReport
			{
				[JsonProperty(LanguageEn ? "Reason" : "Причина")]
				public LangText Title;
				[JsonProperty(LanguageEn ? "The command from your ban system to block the user ({0} - will be replaced by the player's ID)" : "Команда вашей бан-системы на блокировку пользователя ({0} - заменится на ID игрока)")]
				public String BanCommand;
				[JsonProperty(LanguageEn ? "Hide this reason from the player (true) (will only be seen by the moderator when passing a verdict)" : "Скрыть данную причину от игрока (true) (будет видеть только модератор при вынесении вердикта)")]
				public Boolean HideUser;
			}
			internal class Images
			{
				[JsonProperty(LanguageEn ? "Reports section images" : "Изображения раздела для жалоб")]
				public PlayerListBlock PlayerListBlockSettings = new PlayerListBlock();
				
				[JsonProperty(LanguageEn ? "Images of the statistics section" : "Изображения раздела статистики")]
				public StatisticsBlock StatisticsBlockSettings = new StatisticsBlock();

				[JsonProperty(LanguageEn ? "Left menu images" : "Изображения левого меню")]
				public LeftBlock LeftBlockSettings = new LeftBlock();
				
				[JsonProperty(LanguageEn ? "Moderation section images" : "Изображения раздела модерации")]
				public ModerationBlock ModerationBlockSettings = new ModerationBlock();
				[JsonProperty(LanguageEn ? "Moderator menu images when checking" : "Изображения меню модератора при проверки")]
				public ModeratorMenuChecked ModeratorMenuCheckedSettings = new ModeratorMenuChecked();
				
				[JsonProperty(LanguageEn ? "Images of the player rating menu quality of the moderator's work" : "Изображения меню оценки игроком качество работы модератора")]
				public PlayerMenuRaiting PlayerMenuRaitingSettings = new PlayerMenuRaiting();

				[JsonProperty(LanguageEn ? "PNG of the menu background (1382x950)" : "PNG заднего фона меню (1382x950)")]
				public String Background;
				[JsonProperty(LanguageEn ? "PNG down arrows (page flipping) (10x5)" : "PNG стрелки вниз(перелистывание страниц) (10x5)")]
				public String PageDown;
				[JsonProperty(LanguageEn ? "PNG up arrows (page flipping) (10x5)" : "PNG стрелки вверх(перелистывание страниц) (10x5)")]
				public String PageUp;	
				[JsonProperty(LanguageEn ? "PNG icon search (16x16)" : "PNG иконки поиска (16x16)")]
				public String Search;
				[JsonProperty(LanguageEn ? "PNG : Icon for adjusting avatar (64x64)" : "PNG : Иконка для корректировки автарки (64x64)")]
				public String AvatarBlur;
				[JsonProperty(LanguageEn ? "PNG : Icon for moderation verdict or rating (307x36)" : "PNG : Иконка для вердикта модерации или рейтинга (307x36)")]
				public String ReasonModeratorAndRaiting; 
				[JsonProperty(LanguageEn ? "PNG : Image on the player's screen with text about the start of the checks (1450x559)" : "PNG : Изображение на экране игрока с текстом о начале проверки (1450x559)")]
				public String PlayerAlerts;
				
				internal class PlayerMenuRaiting
				{
					[JsonProperty(LanguageEn ? "PNG : Menu background when evaluating a reviewer (307x98)" : "PNG : Задний фон меню при оценке проверяющего (307x98)")]
					public String PlayerMenuRaitingBackground; 
				}
				internal class ModeratorMenuChecked
				{
					[JsonProperty(LanguageEn ? "PNG : Menu background when checking player (307x148)" : "PNG : Задний фон меню при проверки игрока (307x148)")]
					public String ModeratorCheckedBackground;
					[JsonProperty(LanguageEn ? "PNG : End test button (128x40)" : "PNG : Кнопка завершения проверки (128x40)")]
					public String ModeratorCheckedStopButton;	
					[JsonProperty(LanguageEn ? "PNG : Verdict button (128x40)" : "PNG : Кнопка вердикта (128x40)")]
					public String ModeratorVerdictButton;
					[JsonProperty(LanguageEn ? "PNG : `Licenses` icon (if Lumia support is enabled) (16x16)" : "PNG : Иконка `Лицензии` (если включена поддержка Luma) (16x16)")]
					public String SteamIcoPlayer;
					[JsonProperty(LanguageEn ? "PNG : `Pirate` icon (if Lumia support is enabled) (16x16)" : "PNG : Иконка `Пират` (если включена поддержка Luma) (16x16)")]
					public String PirateIcoPlayer;
				}
				internal class ModerationBlock
				{
					[JsonProperty(LanguageEn ? "PNG : Player information popup background (831x599)" : "PNG : Задний фон всплывающего окна с информацией о игроке (831x599)")]
					public String ModeratorPoopUPBackgorund;
					[JsonProperty(LanguageEn ? "PNG : Element background for text (155x22)" : "PNG : Задний фон элемента для текста (155x22)")]
					public String ModeratorPoopUPTextBackgorund;
					[JsonProperty(LanguageEn ? "PNG : Information panel background (196x240)" : "PNG : Задний фон панели с информацией (196x240)")]
					public String ModeratorPoopUPPanelBackgorund;
				}

				internal class LeftBlock
				{
					[JsonProperty(LanguageEn ? "PNG : Icon for sidebar button (192x55)" : "PNG : Иконка для кнопки в боковом меню (192x55)")]
					public String ButtonBackgorund;
					[JsonProperty(LanguageEn ? "PNG : Icon for the button in `reports` (32x32)" : "PNG : Иконка для кнопки в `жалобы`(32x32)")]
					public String ReportIcon;
					[JsonProperty(LanguageEn ? "PNG : Icon for the button in `moderation` (32x32)" : "PNG : Иконка для кнопки в `модерация`(32x32)")]
					public String ModerationIcon;
				}
				
				internal class PlayerListBlock
				{
					[JsonProperty(LanguageEn ? "PNG : Cause selection popup background (567x599)" : "PNG : Задний фон всплывающего сообщения с выбором причины (567x599)")]
					public String PoopUpBackgorund;
					[JsonProperty(LanguageEn ? "PNG : Reason background in popup (463x87)" : "PNG : Задний фон причины в всплывающем окне (463x87)")]
					public String PoopUpReasonBackgorund;
				}

				internal class StatisticsBlock
                {
					[JsonProperty(LanguageEn ? "PNG Background of the statistics block (283x81)" : "PNG Задний фон блока статистики (283x81)")]
					public String BlockStatsModeration;		
					[JsonProperty(LanguageEn ? "PNG Background of the rating block in statistics (65x28)" : "PNG Задний фон блока рейтинга в статистике (65x28)")]
					public String BlockStatsRaitingModeration;
					[JsonProperty(LanguageEn ? "PNG : Rating icon in statistics (16x15)" : "PNG : Иконка рейтинга в статистике (16x15)")]
					public String RaitingImage;
				}
			}
		   		 		  						  	   		  	   		  	 				   		 		  				
			internal class Colors
			{
				[JsonProperty(LanguageEn ? "RGBA of the main text color" : "RGBA основного цвета текста")]
				public String MainColorText;
				[JsonProperty(LanguageEn ? "RGBA of additional text color" : "RGBA дополнительного цвета текста")]
				public String AdditionalColorText;	
				[JsonProperty(LanguageEn ? "RGBA additional color of elements (Buttons, dies)" : "RGBA дополнительный цвет элементов (Кнопки, плашки)")]
				public String AdditionalColorElements;
				[JsonProperty(LanguageEn ? "RGBA additional color of elements (Buttons, dies) #2" : "RGBA дополнительный цвет элементов (Кнопки, плашки) #2")]
				public String AdditionalColorElementsTwo;	
				[JsonProperty(LanguageEn ? "RGBA additional color of elements (Buttons, dies) #3" : "RGBA дополнительный цвет элементов (Кнопки, плашки) #3")]
				public String AdditionalColorElementsThree;	
				[JsonProperty(LanguageEn ? "RGBA the main color" : "RGBA основной цвет")]
				public String MainColor;
			}
			internal class References
            {
				[JsonProperty(LanguageEn ? "IQFakeActive : Use collaboration (true - yes/false - no)" : "IQFakeActive : Использовать совместную работу (true - да/false - нет)")]
				public Boolean IQFakeActiveUse;
				[JsonProperty(LanguageEn ? "Setting up IQChat" : "Настройка IQChat")]
				public IQChatReference IQChatSetting = new IQChatReference();
				[JsonProperty(LanguageEn ? "Setting up NoEscape" : "Настройка NoEscape")]
				public NoEscapeReference NoEscapeSetting = new NoEscapeReference();
				[JsonProperty(LanguageEn ? "Duels : Reschedule the player's check if he is in a duel (true - yes/false - no)" : "Duels : Перенести проверку игрока если он на дуэли (true - да/false - нет)")]
				public Boolean NoCheckedDuel;
				[JsonProperty(LanguageEn ? "Setting up Friends" : "Настройка Friends")]
				public FriendsReference FriendsSetting = new FriendsReference();
				[JsonProperty(LanguageEn ? "Setting up Clans" : "Настройка Clans")]
				public ClansReference ClansSetting = new ClansReference();
				[JsonProperty(LanguageEn ? "Setting up MultiFighting (Luma)" : "Настройка MultiFighting (Luma)")]
				public MultiFighting MultiFightingSetting = new MultiFighting();
				[JsonProperty(LanguageEn ? "Setting up StopDamageMan" : "Настройка StopDamageMan")]
				public StopDamageMan StopDamageManSetting = new StopDamageMan();
				
				[JsonProperty(LanguageEn ? "Setting up RCC support" : "Настройка поддержки RCC")]
				public RustCheatCheck RCCSettings = new RustCheatCheck();
				[JsonProperty(LanguageEn ? "Setting up OzProtect support" : "Настройка поддержки OzProtect")]
				public OzProtectCheck OzProtectSettings = new OzProtectCheck();

				internal class MultiFighting
				{
					[JsonProperty(LanguageEn ? "MultiFighting (Luma) : Display an icon with the player status - `Steam` / `Pirate`" : "MultiFighting (Luma) : Отображать иконку со статусом игрока - `Steam` / `Пират`")]
					public Boolean UseSteamCheck;
				}

				internal class StopDamageMan
				{
					[JsonProperty(LanguageEn ? "StopDamageMan : Disable player damage during check" : "StopDamageMan : Отключать игроку урон во время проверки")]
					public Boolean UseStopDamage;
				}
				
				internal class RustCheatCheck
				{
					[JsonProperty(LanguageEn ? "RCC key (if you don't need RCC support, leave the key blank)" : "Ключ RCC (если вам не нужна поддержка RCC - оставьте ключ пустым)")]
					public String RCCKey;
				}
				
				internal class OzProtectCheck
				{
					[JsonProperty(LanguageEn ? "OzProtect key (if you don't need OzProtect support, leave the key blank)" : "Ключ OzProtect (если вам не нужна поддержка OzProtect - оставьте ключ пустым)")]
					public String OzProtectKey;
				}
				
				internal class IQChatReference
				{
					[JsonProperty(LanguageEn ? "IQChat : Custom prefix in chat" : "IQChat : Кастомный префикс в чате")]
					public String CustomPrefix;
					[JsonProperty(LanguageEn ? "IQChat : Custom chat avatar (If required)" : "IQChat : Кастомный аватар в чате(Если требуется)")]
					public String CustomAvatar;
					[JsonProperty(LanguageEn ? "IQChat : Use UI notification (true - yes/false - no)" : "IQChat : Использовать UI уведомление (true - да/false - нет)")]
					public Boolean UIAlertUse;
				}

				internal class NoEscapeReference
				{
					[JsonProperty(LanguageEn ? "NoEscape : Reschedule a player's check if he has a `Raid-Block` (true - yes/false - no)" : "NoEscape : Перенести проверку игрока если у него есть `Raid-Блок` (true - да/false - нет)")]
					public Boolean NoCheckedRaidBlock;
					[JsonProperty(LanguageEn ? "NoEscape : Reschedule a player's check if he has a `Combat-Block` (true - yes/false - no)" : "NoEscape : Перенести проверку игрока если у него есть `Комбат-Блок` (true - да/false - нет)")]
					public Boolean NoCheckedCombatBlock;
				}

				internal class FriendsReference
				{
					[JsonProperty(LanguageEn ? "Friends : Prohibit players in the team from sending reports to each other (true - yes/false - no)" : "Friends : Запретить игрокам в команде отправлять репорты друг на друга (true - да/false - нет)")]
					public Boolean SendReportFriend;
					[JsonProperty(LanguageEn ? "Friends : Prohibit the moderator from checking his teammate (true - yes/false - no)" : "Friends : Запретить модератору проверять своего тиммейта (true - да/false - нет)")]
					public Boolean StartCheckedFriend;
				}
				
				internal class ClansReference
				{
					[JsonProperty(LanguageEn ? "Clans : Prohibit players in the same clan from sending reports to each other (true - yes/false - no)" : "Clans : Запретить игрокам в одном клане отправлять репорты друг на друга (true - да/false - нет)")]
					public Boolean SendReportClan;
					[JsonProperty(LanguageEn ? "Clans : Prohibit the moderator from checking the members of his clan (true - yes/false - no)" : "Clans : Запретить модератору проверять участников своего клана (true - да/false - нет)")]
					public Boolean StartCheckedClan;
				}
			}
			
			internal class LangText
			{
				[JsonProperty(LanguageEn ? "Reason title russian" : "Причина на русском")]
				public String LanguageRU;
				[JsonProperty(LanguageEn ? "Reason title english" : "Причина на английском")]
				public String LanguageEN;

				public String GetReasonTitle(UInt64 TargetID) =>
					_.lang.GetLanguage(TargetID.ToString()).Equals("ru") ? LanguageRU : LanguageEN;
			}

			public static Configuration GetNewConfiguration()
			{
				return new Configuration
				{
					CommandForContact = "discord",
					VerdictControllerSettings = new VerdictController()
					{
						UseBanAllTeam = false,
						IndexBanReason = 5,
					},
					CheckControllerSettings = new CheckController
					{
						StopCheckLeavePlayer = false,
						UseDemo = true,
						UseSoundAlert = false,
						UseCheckAFK = true,
						TrackCrafting = false,
						TrackChat = false,
						TrackCommand = false,
					},
					NotifyChatSettings = new NotifyChat()
					{
						UseNotifyCheck = true,
						UseNotifyStopCheck = true,
						UseNotifyVerdictCheck = true,
					},
					NotifyVKSettings = new NotifyVK()
					{
						VKTokenGroup = "",
						VKChatID = ""
					},
					NotifyDiscordSettings = new NotifyDiscord()
					{
						WebhooksList = new NotifyDiscord.Webhooks()
						{
							NotifySendReport = new NotifyDiscord.Webhooks.TemplatesNotify()
							{
								WebhookNotify = "",
								Color = 16728083,
								AuthorName = LanguageEn ? "NEW REPORT" : "НОВАЯ ЖАЛОБА",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662192735883304/2N5je4x.jpg",
							},
							NotifyContacts = new NotifyDiscord.Webhooks.TemplatesNotify()
							{
								WebhookNotify = "",
								Color = 13850622,
								AuthorName = LanguageEn ? "PROVIDED CONTACTS" : "ПРЕДОСТАВЛЕННЫЕ КОНТАКТЫ",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662339565883464/bGJtYB5.jpg",
							},
							NotifyStartCheck = new NotifyDiscord.Webhooks.TemplatesNotify
							{
								WebhookNotify = "",
								Color = 16755200,
								AuthorName = LanguageEn ? "PLAYER CHECK" : "ПРОВЕРКА ИГРОКА",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662192735883304/2N5je4x.jpg",
							},
							NotifyStopCheck = new NotifyDiscord.Webhooks.TemplatesNotify()
							{
								WebhookNotify = "",
								Color = 7846721,
								AuthorName = LanguageEn ? "COMPLETE CHECK" : "ЗАВЕРШЕННАЯ ПРОВЕРКА",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662457719423076/VKwsjXO.jpg",
							},
							NotifyMaxReport = new NotifyDiscord.Webhooks.TemplatesNotify()
							{
								WebhookNotify = "",
								Color = 16728083,
								AuthorName = LanguageEn ? "MAXIMUM NUMBER OF COMPLAINTS" : "МАКСИМАЛЬНОЕ КОЛИЧЕСТВО ЖАЛОБ",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662192735883304/2N5je4x.jpg",
							},
							NotifyStatusPlayerOrModerator = new NotifyDiscord.Webhooks.TemplatesNotify()
							{
								WebhookNotify = "",
								Color = 16752000,
								AuthorName = LanguageEn ? "CONNECTION STATUS CHANGES" : "ИЗМЕНЕНИЯ СТАТУСА ПОДКЛЮЧЕНИЯ",
								IconURL = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662192735883304/2N5je4x.jpg",
							}
						}
					},
					ReasonList = new List<ReasonReport>()
					{
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "Подозрительный",
								LanguageEN = "Suspicious"
							},
							BanCommand = "ban {0} 1d {1}",
							HideUser = false,
						},
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "Макросы",
								LanguageEN = "Macros"
							},
							BanCommand = "ban {0} 14d {1}",
							HideUser = false,
						},
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "Читер",
								LanguageEN = "Cheater"
							},
							BanCommand = "ban {0} {1}",
							HideUser = false,
						},
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "3+",
								LanguageEN = "3+"
							},
							BanCommand = "ban {0} 7d {1}",
							HideUser = false,
						},
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "Отказ от проверки",
								LanguageEN = "Refusal to check"
							},
							BanCommand = "ban {0} 7d {1}",
							HideUser = true,
						},
						new ReasonReport
						{
							Title = new LangText()
							{
								LanguageRU = "Игра с нарушителем",
								LanguageEN = "Playing with the intruder"
							},
							BanCommand = "ban {0} 3d {1}",
							HideUser = false,
						},
					},
					ReportF7AndGameMenuSettings = new ReportF7AndGameMenu()
					{
						UseFunction	= true,
						DefaultIndexReason = 2,
					},
					ReportSendControllerSettings = new ReportSendController()
					{
						CooldownRepeatOrAll	= false,
						CooldownReport = 300,
						NoRepeatReport = true,
					},
					ReportContollerModerationSettings = new ReportContollerModeration()
					{
						ReportCountTrigger = 1,
						AlertModerationSettings = new ReportContollerModeration.AlertModeration
						{
							AlertModerator = true,
							AlertSound = true,
							PathSound = "assets/prefabs/npc/autoturret/effects/targetacquired.prefab"
						}
					},
					ColorsSettings = new Colors()
					{
						MainColorText = "1 1 1 1", 
						AdditionalColorText = "1 1 1 0.7", 
						AdditionalColorElements = "0.20 0.22 0.25 1",  
						MainColor = "0.12 0.14 0.16 1",
						AdditionalColorElementsTwo = "0.28 0.27 0.45 1",
						AdditionalColorElementsThree = "0.30 0.77 0.99 1",
					},
					ImagesSettings = new Images
                    {
	                    Background = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662652804907109/0N6OgXu.png",
						PageDown = "https://cdn.discordapp.com/attachments/1139598345682305164/1141662783973380307/fYZKtuF.png",
						PageUp = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663014928535572/P17Rrjp.png",
						Search = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663109560414290/yVBF1X7.png",
						AvatarBlur = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663233644699698/111.png",
						ReasonModeratorAndRaiting = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663550239162419/Reason-Moderator.png",
						PlayerAlerts = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663660121538580/XMeNBAj.png",
						
						PlayerMenuRaitingSettings = new Images.PlayerMenuRaiting()
						{
							PlayerMenuRaitingBackground = "https://cdn.discordapp.com/attachments/1139598345682305164/1141663937268559962/lLOWzFo.png",
						},
						
						ModeratorMenuCheckedSettings = new Images.ModeratorMenuChecked()
						{
							ModeratorCheckedBackground	= "https://cdn.discordapp.com/attachments/1139598345682305164/1141664408507011083/nBXA5xm_1.png",
							ModeratorCheckedStopButton = "https://cdn.discordapp.com/attachments/1139598345682305164/1141664510961270826/osbdHca.png",
							ModeratorVerdictButton = "https://cdn.discordapp.com/attachments/1139598345682305164/1141664672618139718/1vthtRD.png",
							SteamIcoPlayer = "https://cdn.discordapp.com/attachments/1139598345682305164/1141664792822681620/htRHWNV.png",
							PirateIcoPlayer = "https://cdn.discordapp.com/attachments/1139598345682305164/1141664930190331944/GLZQK5a.png",
						},
						
						ModerationBlockSettings = new Images.ModerationBlock()
						{
							ModeratorPoopUPBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678266688733231/aqjRQqw.png",
							ModeratorPoopUPTextBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678366622236772/ZYEcVG2.png",
							ModeratorPoopUPPanelBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678463317717094/1eSlL3s.png",
						},
						
						LeftBlockSettings = new Images.LeftBlock
						{
							ButtonBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678555877605406/wgYl90C.png",
							ReportIcon = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678646831095860/mayvxja.png",
							ModerationIcon = "https://cdn.discordapp.com/attachments/1139598345682305164/1141678744944246864/UXhlKHq.png",
						},
						
						PlayerListBlockSettings = new Images.PlayerListBlock()
						{
							PoopUpBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141679152160854026/6TGBXIv.png",
							PoopUpReasonBackgorund = "https://cdn.discordapp.com/attachments/1139598345682305164/1141679349788065853/eq76Zc0.png",
						},
						StatisticsBlockSettings = new Images.StatisticsBlock
                        {
							BlockStatsModeration = "https://cdn.discordapp.com/attachments/1139598345682305164/1141679519275696188/iPobuoo.png",
							BlockStatsRaitingModeration = "https://cdn.discordapp.com/attachments/1139598345682305164/1141679717913743391/B17soOi.png",
							RaitingImage = "https://cdn.discordapp.com/attachments/1139598345682305164/1141679787929243768/2Vo6MQ8.png",
						}
					},
					ReferenceSettings = new References
					{
						IQFakeActiveUse = false,
						StopDamageManSetting = new References.StopDamageMan()
						{
							UseStopDamage = false,
						},
						MultiFightingSetting = new References.MultiFighting()
						{
							UseSteamCheck = false,
						},
						IQChatSetting = new References.IQChatReference
						{
							CustomPrefix = "[<color=#FF4B42>IQReportSystem</color>]\n",
							CustomAvatar = "0",
							UIAlertUse = false,
						},
						NoEscapeSetting = new References.NoEscapeReference()
						{
							NoCheckedRaidBlock	= true,
							NoCheckedCombatBlock = false,
						},
						NoCheckedDuel = true,
						FriendsSetting = new References.FriendsReference()
						{
							SendReportFriend = true,
							StartCheckedFriend = true,
						},
						ClansSetting = new References.ClansReference()
						{
							SendReportClan = true,
							StartCheckedClan = true,
						},
						RCCSettings = new References.RustCheatCheck()
						{
							RCCKey = "",
						},
						OzProtectSettings = new References.OzProtectCheck()
						{
							OzProtectKey = "",
						}
					}
				};
			}
		}
		
		private void DrawUI_Moderator_Checked_Menu_Status(BasePlayer moderator, String Status)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_ONLINE_STATUS_CHECKED_MODERATOR");
			if (Interface == null) return;

			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS%", GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_STATUS", moderator.UserIDString, Status));
		   		 		  						  	   		  	   		  	 				   		 		  				
			CuiHelper.DestroyUi(moderator, "InfoStatus");
			CuiHelper.AddUi(moderator, Interface);
		}
        private void SteamAvatarAdd(String userid)
        {
	        if (ImageLibrary == null)
		        return;
	        if (HasImage(userid))
		        return;
	        webrequest.Enqueue($"https://steamcommunity.com/profiles/{userid}?xml=1", null, 
		        (code, response) =>
		        {
			        if (response == null || code != 200) 
				        return;
                    
			        String avatarUrl = _avatarRegex.Match(response).Groups[1].ToString();
			        if (!String.IsNullOrEmpty(avatarUrl))
			        {
				        ImageLibrary?.Call("AddImage", avatarUrl, userid);
			        }
		        }, this);
        }

                
        
        private void PreLoadedPlugin()
        {
			if(!ImageLibrary)
			{
				NextTick(() => {
					PrintError($"ImageLibrary not found! Please, check your plugins list.");
					Interface.Oxide.UnloadPlugin(Name);
				});
				return;	
			}
        }
		public string GetLang(string LangKey, string userID = null, params object[] args)
		{
			sb.Clear();
			if (args != null)
			{
				sb.AppendFormat(lang.GetMessage(LangKey, this, userID), args);
				return sb.ToString();
			}
			return lang.GetMessage(LangKey, this, userID);
		}
		
		void OnItemCraftCancelled(ItemCraftTask task, ItemCrafter crafter)
		{
			BasePlayer player = crafter.owner;
			if (player == null) return;
			
			if (!PlayerChecks.ContainsKey(player.userID)) return;

			if (config.CheckControllerSettings.TrackCrafting)
			{
				BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
				if (Moderator != null)
					SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_CANCELLED_CRAFTING", Moderator.UserIDString), Moderator);
			}

			player.ResetInputIdleTime();;
		}
		
        private Boolean IsModerator(BasePlayer moderator) =>
	        permission.UserHasPermission(moderator.UserIDString, ModeratorPermissions);

        
        
        [ChatCommand("report")]
        private void ChatCommandReport(BasePlayer player, String cmd, String[] args)
        {
			if (player == null) return;
			if (_interface == null) return;
            DrawUI_Report_Panel(player);
        }

		void OnPlayerCommand(BasePlayer player, string command, string[] args)
		{
			if (!PlayerChecks.ContainsKey(player.userID)) return;
			
			if (config.CheckControllerSettings.TrackCommand)
			{
				BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
				if (Moderator != null)
					SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_SEND_COMMAND", Moderator.UserIDString, command), Moderator);
			}

			player.ResetInputIdleTime();
		}
        private List<Fields> DT_PlayerSendReport(BasePlayer Sender, UInt64 TargetID, String Reason)
        {
	        List<Fields> fields = new List<Fields>
	        {
		        new Fields(LanguageEn ? "New complaint received :" : "Получена новая жалоба :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Information about the sender :" : "Информация об отправителе :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{Sender.displayName}", true),
		        new Fields("Steam64ID", $"[{Sender.userID}](https://steamcommunity.com/profiles/{Sender.userID})", true),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Information about the suspect :" : "Информация о подозреваемом :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{covalence.Players.FindPlayerById(TargetID.ToString()).Name ?? "EMPTY"}", true),
		        new Fields("Steam64ID", $"[{TargetID}](https://steamcommunity.com/profiles/{TargetID})", true),
		        new Fields(LanguageEn ? "Reason for complaint :" : "Причина жалобы :", Reason, false),
	        };
	        
	        return fields;
        }

        
                
        private Dictionary<UInt64, PlayerInformation> PlayerInformations = new Dictionary<UInt64, PlayerInformation>();
        
        private void RunEffect(BasePlayer Moderator)
        {
	        if (!config.ReportContollerModerationSettings.AlertModerationSettings.AlertSound || String.IsNullOrWhiteSpace(config.ReportContollerModerationSettings.AlertModerationSettings.PathSound)) return;
	        Effect effect = new Effect(config.ReportContollerModerationSettings.AlertModerationSettings.PathSound, Moderator, 0, new Vector3(), new Vector3());
	        EffectNetwork.Send(effect, Moderator.Connection);
        }

		
		
		private void DrawUI_Raiting_Menu_Player(BasePlayer player, UInt64 ModeratorID)
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_RAITING_MENU_PLAYER");
			if (Interface == null) return;
			
			IPlayer iModerator = covalence.Players.FindPlayerById(ModeratorID.ToString());
			String ModeratorName = iModerator == null ? GetLang("TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR_NOT_NAME", player.UserIDString) : iModerator.Name;

			Interface = Interface.Replace("%TITLE_CLOSE_BUTTON_REPORT%", GetLang("TITLE_CLOSE_BUTTON_REPORT", player.UserIDString));
			Interface = Interface.Replace("%TITLE_RAITING_WORK_MODERATOR_TITLE%", GetLang("TITLE_RAITING_WORK_MODERATOR_TITLE", player.UserIDString));
			Interface = Interface.Replace("%TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR%", GetLang("TITLE_RAITING_WORK_MODERATOR_WHO_MODERATOR", player.UserIDString, ModeratorName.ToUpper()));
			Interface = Interface.Replace("%COMMAND_CLOSE%", $"report.panel close.select.raiting {ModeratorID}");

			CuiHelper.AddUi(player, Interface);
			
			DrawUI_Raiting_Menu_Stars(player, -1, ModeratorID);
		}
        
        private const String ModeratorPermissions = "iqreportsystem.moderation";
		
				void SyncReservedFinish(String JSON)
		{
			if (!config.ReferenceSettings.IQFakeActiveUse) return;
			List<FakePlayer> ContentDeserialize = JsonConvert.DeserializeObject<List<FakePlayer>>(JSON);
			PlayerBases = ContentDeserialize;
			
			foreach (FakePlayer fakePlayer in PlayerBases)
				SteamAvatarAdd(fakePlayer.UserID.ToString());

			PrintWarning("IQReportSystem - успешно синхронизирована с IQFakeActive");
			PrintWarning("=============SYNC==================");
		}
        
        private NpcSound LoadDataSound(String name)
        {
	        NpcSound cache = CachedSound[name];
	        if (cache != null)
		        return cache;

	        if (Interface.Oxide.DataFileSystem.ExistsDatafile("IQSystem/IQReportSystem/Sounds/" + name))
	        {
		        NpcSound data = Interface.GetMod().DataFileSystem.ReadObject<NpcSound>("IQSystem/IQReportSystem/Sounds/" + name);
		        if (data == null)
			        return null;

		        CachedSound[name] = data;
		        return data;
	        }
	        else
	        {
		        PrintWarning(LanguageEn ? $"Could not find file named {name}. It should be located along the path: IQSystem/IQReportSystem/Sounds/{name}.json" : $"Не удалось найти файл с названием {name}. Он должен быть расположен по пути : IQSystem/IQReportSystem/Sounds/{name}.json");
		        return null;
	        }
        }

		
		
		public Boolean IsDuel(UInt64 userID)
		{
			if (!config.ReferenceSettings.NoCheckedDuel) return false;
			if (EventHelper)
			{
				if ((Boolean)EventHelper.CallHook("EMAtEvent", userID))
					return true;
			}

			if (Battles)
				return (Boolean)Battles?.Call("IsPlayerOnBattle", userID);
			if (Duel) return (Boolean)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
			if (Duelist) return (Boolean)Duelist?.Call("inEvent", BasePlayer.FindByID(userID));
			if (ArenaTournament) return ArenaTournament.Call<Boolean>("IsOnTournament", userID);
			return false;
		}
		private Boolean IsFriends(UInt64 userID, UInt64 targetID)
		{
			if (!Friends)
				return RelationshipManager.ServerInstance.playerToTeam.ContainsKey(userID) && RelationshipManager.ServerInstance.playerToTeam[userID].members.Contains(targetID);
			return (Boolean)Friends?.Call("HasFriend", userID, targetID);
		}
		
		object OnItemCraft(ItemCraftTask task, BasePlayer player, Item item)
		{
			if (!PlayerChecks.ContainsKey(player.userID)) return null;

			if (config.CheckControllerSettings.TrackCrafting)
			{
				BasePlayer Moderator = BasePlayer.FindByID(PlayerChecks[player.userID].ModeratorID);
				if (Moderator != null)
					SendChat(GetLang("FUNCIONAL_MESSAGE_CHECK_AFK_PLAYER_START_CRAFTING", Moderator.UserIDString),
						Moderator);
			}

			player.ResetInputIdleTime();
			return null;
		}
        private class PlayerInformation
        {
	        public Int32 Reports;
	        public Int32 SendReports;
	        public Int32 AmountChecked;
	        public String LastModerator;

	        public List<Configuration.LangText> ReasonHistory = new List<Configuration.LangText>();
        }
        
        private void ConsoleCommandDiscord(ConsoleSystem.Arg arg)
        {
	        BasePlayer player = arg.Player();
	        if (player == null) return;
	        
	        String Discord = arg.HasArgs() ? String.Join(" ", arg.Args) : null;
	        SendPlayerDiscord(player, Discord);
        }
	    /// <summary>
	    /// Обновление 2.0.x
		/// - Добавлена поддержка нового формата Discord (с сохранением старого)
		/// - Перенес картинки UI с imgur на другой фото-обменник
	    /// </summary>
	    
	            
        private const Boolean LanguageEn = false;
		
		private void StopDamageRemove(UInt64 playerID)
		{
			if (StopDamageMan == null) return;
			if (!config.ReferenceSettings.StopDamageManSetting.UseStopDamage) return;
			
			StopDamageMan.CallHook("RemovePlayerSDM", playerID);
		}
		private void StartCheckRCC(UInt64 TargetID, UInt64 ModerID)
		{
			if (String.IsNullOrWhiteSpace(config.ReferenceSettings.RCCSettings.RCCKey)) return;
			String API = $"https://rustcheatcheck.ru/panel/api?action=addPlayer&key={config.ReferenceSettings.RCCSettings.RCCKey}&player={TargetID}";
			if (ModerID != 0)
				API += $"&moder={ModerID}";
			
			try
			{
				webrequest.Enqueue(API, null, (code, response) => { }, this);
			}
			catch (Exception e)
			{
				PrintError(LanguageEn ? "RCC : We were unable to get the player to check with RCC, please check if your key is up to date or if RCC is available" : "RCC : Мы не смогли вызвать игрока на проверку с помощью RCC, проверьте актуальность вашего ключа или доступность RCC");
			}
		}
		   		 		  						  	   		  	   		  	 				   		 		  				
		
		
		
		
		
		private void DrawUI_Report_Panel(BasePlayer player)
        {
	        String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_BACKGORUND");
            if (Interface == null) return;
		   		 		  						  	   		  	   		  	 				   		 		  				
            Interface = Interface.Replace("%TITLE_PLAYER_HEADER_TITLE_SEND_REPORT%", GetLang("TITLE_PLAYER_HEADER_TITLE_SEND_REPORT", player.UserIDString));
            Interface = Interface.Replace("%TITLE_PLAYER_HEADER_TITLE_DESC_SEND_REPORT%", GetLang("TITLE_PLAYER_HEADER_TITLE_DESC_SEND_REPORT", player.UserIDString));
            Interface = Interface.Replace("%TITLE_PROFILE_INFO_CHECKED%", GetLang("TITLE_PROFILE_INFO_CHECKED", player.UserIDString, PlayerInformations[player.userID].AmountChecked));
            Interface = Interface.Replace("%NICK_PROFILE%", player.displayName.Length > 7 ? player.displayName.Substring(0, 7).ToUpper() + ".." : player.displayName.ToUpper());
            Interface = Interface.Replace("%AVATAR_PLAYER%", _.GetImage(player.UserIDString));
            Interface = Interface.Replace("%TITLE_NAME_REPORT_SYSTEM%", GetLang("TITLE_NAME_REPORT_SYSTEM", player.UserIDString));
            Interface = Interface.Replace("%TITLE_CLOSE_BUTTON_REPORT%", GetLang("TITLE_CLOSE_BUTTON_REPORT", player.UserIDString));

            CuiHelper.DestroyUi(player, InterfaceBuilder.UI_REPORT_PANEL);
            CuiHelper.AddUi(player, Interface);

            DrawUI_PlayerPanel(player);
            DrawUI_LeftMenu(player);
            DrawUI_HeaderUI_Search(player);
		   		 		  						  	   		  	   		  	 				   		 		  				
            if (IsModerator(player))
	            DrawUI_ModeratorStatistics(player);
        }		
        
        private IEnumerator SendSounds(BasePlayer player, String clipName, SpeakerEntityMgr.SpeakerEntity speakerEntity)
        {
	        NpcSound sound = LoadDataSound(clipName);
	        if (sound == null)
	        {
		        if (RoutineSounds[player] != null)
			        ServerMgr.Instance.StopCoroutine(RoutineSounds[player]);
		        
		        speakerEntity?.Kill();
		        yield break;
	        }
	        yield return CoroutineEx.waitForSeconds(0.1f);

	        foreach (byte[] data in sound.Data)
	        {
		        if (speakerEntity == null)
		        {
			        break;
		        }
		   		 		  						  	   		  		 			  			 		   					  		  
		        SendSound(speakerEntity.UID_SPEAKER, data);
		        yield return CoroutineEx.waitForSeconds(0.07f);
	        }
	        
	        if (RoutineSounds[player] != null)
		        ServerMgr.Instance.StopCoroutine(RoutineSounds[player]);
	        yield break;
        }

        
        
        private static StringBuilder sb = new StringBuilder();
        
                
        
				private List<Fields> DT_ChangeStatus(Boolean IsModerator, String PlayerName, String UserID, String StatusConnection)
		{
			List<Fields> fields;
			if (IsModerator)
			{
				fields = new List<Fields>
				{
					new Fields(LanguageEn ? "Moderator Information :" : "Информация о модераторе :", "", false),
					new Fields("", "", false),
					new Fields(LanguageEn ? "Nick" : "Ник", $"{PlayerName}", true),
					new Fields("Steam64ID", $"[{UserID}](https://steamcommunity.com/profiles/{UserID})", true),
					new Fields(LanguageEn ? "Status" : "Статус", $"{StatusConnection}", true),
				};
			}
			else
			{
				fields = new List<Fields>
				{
					new Fields(LanguageEn ? "Information about the suspect :" : "Информация о подозреваемом :", "", false),
					new Fields("", "", false),
					new Fields(LanguageEn ? "Nick" : "Ник", $"{PlayerName}", true),
					new Fields("Steam64ID", $"[{UserID}](https://steamcommunity.com/profiles/{UserID})", true),
					new Fields(LanguageEn ? "Status" : "Статус", $"{StatusConnection}", true),
				};
			}

			return fields;
		}
        private void AlertModerator(BasePlayer Moderator, String PlayerName, Int32 ReportCount)
        {
	        if (!config.ReportContollerModerationSettings.AlertModerationSettings.AlertModerator) return;
	        SendChat(GetLang("NOTIFY_MODERATOR_MAX_REPORT", Moderator.UserIDString, PlayerName, ReportCount), Moderator);
	        
	        RunEffect(Moderator);
        }

		
				public void StartSysncFakeActive() {
			if (!IQFakeActive) return;
			IQFakeActive?.Call("SyncReserved");
		}

        private readonly Regex _avatarRegex = new Regex(@"<avatarFull><!\[CDATA\[(.*)\]\]></avatarFull>", RegexOptions.Compiled);
		public class FakePlayer
		{
			public UInt64 UserID;
			public String DisplayName;
		}
                
        
        
		public class SpeakerEntityMgr
		{
			private static List<SpeakerEntity> _Entities = new List<SpeakerEntity>();
			public static SpeakerEntity Create(BasePlayer listeners)
			{
				var speaker = new SpeakerEntity();
				speaker.SetListeners(listeners);
				_Entities.Add(speaker);

				return speaker;
			}
			public static void Shutdown()
			{
				if (_Entities != null && _Entities.Count != 0)
					_Entities.ForEach(entity => _.NextTick(() => { entity?.Kill(); }));
			}
			public static void Kill(SpeakerEntity entity)
			{
				_Entities.Remove(entity);
			}
			
			public class SpeakerEntity
			{
				public UInt64 UID_SPEAKER = Network.Net.sv.TakeUID();
				private UInt64 UID_CHAIR = Network.Net.sv.TakeUID();
				public BasePlayer Listeners { get; private set; }
				public void SetListeners(BasePlayer listeners)
				{
					Listeners = listeners;
				}
				public void SendEntitities()
				{
					SendEntity(GetEntityChair);
					SendEntity(GetEntitySpeaker);
				}
				private ProtoBuf.Entity GetEntitySpeaker(BasePlayer player) =>
					new ProtoBuf.Entity()
					{
						baseNetworkable = new ProtoBuf.BaseNetworkable()
						{
							prefabID = player.prefabID,
							@group = BaseNetworkable.GlobalNetworkGroup.ID,
							uid = new NetworkableId(UID_SPEAKER),
						},
						baseEntity = new ProtoBuf.BaseEntity()
						{
							flags = 0,
							pos = new Vector3(0, 0, 0),
							rot = new Vector3(0, 0, 0),
							skinid = 0,
							time = Time.time,
						},
						baseCombat = new ProtoBuf.BaseCombat()
						{
							health = 10000,
							state = (Int32)BaseCombatEntity.LifeState.Alive
						},
						basePlayer = new ProtoBuf.BasePlayer()
						{
							health = 10000,
							modelState = new ModelState()
							{
								mounted = true,
								onground = true,
								ducked = true,
								prone = true
							},
							userid = UID_SPEAKER,
							name = "VOICE_P",
							playerFlags = (Int32)0,
							mounted = new NetworkableId(UID_CHAIR),
						},
						parent = new ProtoBuf.ParentInfo()
						{
							uid = new NetworkableId(UID_CHAIR),
							bone = 0
						}
					};

				private ProtoBuf.Entity GetEntityChair(BasePlayer player) =>
					new ProtoBuf.Entity()
					{
						baseNetworkable = new ProtoBuf.BaseNetworkable()
						{
							prefabID = 624857933, // static chair
							@group = BaseNetworkable.GlobalNetworkGroup.ID,
							uid = new NetworkableId(UID_CHAIR),
						},
						baseEntity = new ProtoBuf.BaseEntity()
						{
							flags = 0,
							pos = new Vector3(0, 0.5f, -2.3f),
							rot = new Vector3(90, 180, 180),
							skinid = 0,
							time = Time.time,
						},
						parent = new ProtoBuf.ParentInfo()
						{
							uid = player.net.ID,
							bone = 2822582055 // head
						}
					};
				
				public void Kill()
				{
					DestroyEntity(UID_SPEAKER);
					DestroyEntity(UID_CHAIR);

					SpeakerEntityMgr.Kill(this);
				}

				private void SendEntity(Func<BasePlayer, ProtoBuf.Entity> entityGetter)
				{
					NetWrite write = Network.Net.sv.StartWrite();

					write.PacketID(Message.Type.Entities);
					write.UInt32(++Listeners.net.connection.validate.entityUpdates);
					entityGetter(Listeners)?.WriteToStream(write);
					write.Send(new SendInfo(Listeners.net.connection));
				}

				private void DestroyEntity(UInt64 uid)
				{
					NetWrite write = Network.Net.sv.StartWrite();

					write.PacketID(Message.Type.EntityDestroy);
					write.UInt64(uid);
					write.Send(new SendInfo(Listeners.Connection) { priority = Priority.Immediate });
				}
			}
		}
        private readonly Hash<String, NpcSound> CachedSound = new Hash<String, NpcSound>();
        private List<Fields> DT_StartCheck(BasePlayer Target, BasePlayer Moderator, Boolean IsConsole = false)
        {
	        String ModeratorName = !IsConsole && Moderator != null ? Moderator.displayName : "Console";
	        String ModeratorID = !IsConsole && Moderator != null ? Moderator.UserIDString : "Console";
	        
	        List<Fields> fields = new List<Fields>
	        {
		        new Fields(LanguageEn ? "A new player check has been launched :" : "Запущена новая проверка игрока :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Moderator Information :" : "Информация о модераторе :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{ModeratorName}", true),
		        new Fields("Steam64ID", $"[{ModeratorID}](https://steamcommunity.com/profiles/{ModeratorID})", true),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Information about the suspect :" : "Информация о подозреваемом :", "", false),
		        new Fields("", "", false),
		        new Fields(LanguageEn ? "Nick" : "Ник", $"{Target.displayName}", true),
		        new Fields("Steam64ID", $"[{Target.userID}](https://steamcommunity.com/profiles/{Target.userID})", true),
	        };

	        return fields;
        }
		

		
		
		private void OnPlayerReported(BasePlayer reporter, String targetName, String targetId, String subject, String message, String type)
		{
			if (!config.ReportF7AndGameMenuSettings.UseFunction) return;
			if (!type.Equals("cheat")) return;
			SendReportPlayer(reporter, UInt64.Parse(targetId), config.ReportF7AndGameMenuSettings.DefaultIndexReason);
		}
		private void DrawUI_Moderator_Button(BasePlayer moderator, String Command = "")
		{
			String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_MODERATOR_MENU_CHECKED_BUTTON_VERDICT");
			if (Interface == null) return;
			
			Interface = Interface.Replace("%TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_RESULT%", GetLang("TITLE_PROFILE_MODERATOR_CHECKED_MENU_TITLE_BUTTON_RESULT", moderator.UserIDString));
			Interface = Interface.Replace("%COMMAND_VERDICT%", Command);

			CuiHelper.DestroyUi(moderator, "ButtonVerdictCheck");
			CuiHelper.AddUi(moderator, Interface);
		}		
		private void DrawUI_ShowPoopUP_Reason(BasePlayer player, String userID)
		{
			Int32 Y = 0;
			foreach (Configuration.ReasonReport reasonReport in config.ReasonList.Where(reasonReport => !reasonReport.HideUser).Take(4))
			{
				String Interface = InterfaceBuilder.GetInterface($"{InterfaceBuilder.UI_LAYER}_TEMPLATE_POOPUP_REASON");
				if (Interface == null) return;

				Interface = Interface.Replace("%OFFSET_MIN%", $"-154.66 {25 - (Y * 63)}");
				Interface = Interface.Replace("%OFFSET_MAX%", $"154.66 {83 - (Y * 63)}");
				Interface = Interface.Replace("%REASON%", reasonReport.Title.GetReasonTitle(player.userID));
				Interface = Interface.Replace("%POOPUP_REASON%", ImageUi.GetImage(config.ImagesSettings.PlayerListBlockSettings.PoopUpReasonBackgorund));
				Interface = Interface.Replace("%COMMAND%", $"report.panel send.player.report {userID} {Y}");
 
				CuiHelper.AddUi(player, Interface);

				Y++;
			}
		}
        
        private String VKT_PlayerSendContact(BasePlayer Sender, String Contact)
        {
	        String Message = LanguageEn
		        ? $"▣ PLAYER CONTACTS ▣\nInformation about the sender:\n• Nickname: {Sender.displayName}\n• Steam64ID: {Sender.userID} (https://steamcommunity.com/profiles/{Sender.userID})\nContact information: {Contact}"
		        : $"▣ КОНТАКТЫ ИГРОКА ▣\nИнформация об отправителе :\n• Ник : {Sender.displayName}\n• Steam64ID : {Sender.userID} (https://steamcommunity.com/profiles/{Sender.userID})\nКонтакты для связи : {Contact}";

	        return Message;
        }

        
        
        private void SendVerdictPlayer(UInt64 TargetID, BasePlayer Moderator, Configuration.ReasonReport Verdict)
        {
			Unsubscribe("OnPlayerBanned");
			Unsubscribe("OnPlayerDisconnected");
			
	        String VerdictReason = Verdict.Title.GetReasonTitle(TargetID);
	        
	        BasePlayer Target = BasePlayer.FindByID(TargetID);
	        if (Target != null)
	        {
		        if (config.VerdictControllerSettings.UseBanAllTeam)
		        {
			        if (Target.Team.members.Count >= 1)
			        {
				        if (config.ReasonList.Count >= config.VerdictControllerSettings.IndexBanReason)
				        {
					        Configuration.ReasonReport ReasonTeamBan = config.ReasonList[config.VerdictControllerSettings.IndexBanReason];
					        foreach (UInt64 TeamMembersIDS in Target.Team.members.Where(x => x != TargetID))
					        {
						        String VerdictReasonTeam = Verdict.Title.GetReasonTitle(TeamMembersIDS);
						        Server.Command(String.Format(ReasonTeamBan.BanCommand, TeamMembersIDS, VerdictReasonTeam));
						        BasePlayer TargetTeam = BasePlayer.FindByID(TeamMembersIDS);
						        if (TargetTeam != null)
							        TargetTeam.Kick(VerdictReasonTeam);
					        }
				        }
			        }
		        }
	        }
	        
	        Server.Command(String.Format(Verdict.BanCommand, TargetID, VerdictReason));
	        if (Target != null)
		        Target.Kick(VerdictReason);
	        
	        StopDamageRemove(TargetID);

	        BanPlayerRCC(TargetID, VerdictReason);
	        BanPlayerOzProtect(TargetID, Moderator == null ? 0 : Moderator.userID, VerdictReason);

	        if (Moderator != null)
	        {
		        SendChat(GetLang("FUNCIONAL_MODERATOR_VERDICT_RESULT", Moderator.UserIDString, Verdict.Title.GetReasonTitle(TargetID)), Moderator);
		        
		        CuiHelper.DestroyUi(Moderator, InterfaceBuilder.UI_REPORT_MODERATOR_MENU_CHECKED);
		        ModeratorInformations[Moderator.userID].AmountChecked++;
		        PlayerInformations[TargetID].LastModerator = Moderator.displayName;
	        }

	        if (config.NotifyChatSettings.UseNotifyVerdictCheck)
	        {
		        if (Moderator != null)
		        {
			        foreach (BasePlayer player in BasePlayer.activePlayerList)
				        SendChat(GetLang("NOTIFY_PLAYERS_STOP_CHECK_VERDICT_MODERATOR", player.UserIDString, Moderator.displayName, PlayerChecks[TargetID].DisplayName, VerdictReason), player);
		        }
		        else
		        {
			        foreach (BasePlayer player in BasePlayer.activePlayerList)
				        SendChat(GetLang("NOTIFY_PLAYERS_STOP_CHECK_NOT_MODERATOR", player.UserIDString, PlayerChecks[TargetID].DisplayName, VerdictReason), player);
		        }
	        }

	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyStopCheck;
			
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_StopCheck(TargetID, Moderator, Verdict: Verdict);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_StopCheck(TargetID, Moderator, Verdict: Verdict));
	        
	        if (PlayerChecks.ContainsKey(TargetID))
		        PlayerChecks.Remove(TargetID);
	        
	        Interface.Call("OnVerdictChecked", TargetID, Moderator, VerdictReason, Verdict.BanCommand);
	        
	        Subscribe("OnPlayerBanned");
	        Subscribe("OnPlayerDisconnected");
        }

		
				
		private Boolean IsSteam(String id)
		{
			if (MultiFighting == null) return true;
			
			BasePlayer player = BasePlayer.Find(id);
			if (player == null)
				return false;

			Object obj = MultiFighting.CallHook("IsSteam", player.Connection);
			if (obj is Boolean)
				return (Boolean)obj;
				
			return false;
		}
		   		 		  						  	   		  	   		  	 				   		 		  				
        
        
        private void AlertMaxReportDiscord(String PlayerName, Int32 ReportCount, UInt64 TargetID)
        {
	        Configuration.NotifyDiscord.Webhooks.TemplatesNotify TemplateDiscord = config.NotifyDiscordSettings.WebhooksList.NotifyMaxReport;
			
	        if (!String.IsNullOrWhiteSpace(TemplateDiscord.WebhookNotify))
	        {
		        List<Fields> fields = DT_PlayerMaxReport(PlayerName, ReportCount, TargetID);
		        SendDiscord(TemplateDiscord.WebhookNotify, fields, GetAuthorDiscord(TemplateDiscord), TemplateDiscord.Color);
	        }
	        
	        SendVK(VKT_PlayerMaxReport(PlayerName, ReportCount, TargetID));
        }
        private Dictionary<UInt64, ModeratorInformation> ModeratorInformations = new Dictionary<UInt64, ModeratorInformation>();
		
		
		public List<FakePlayer> PlayerBases = new List<FakePlayer>();

			}
}

// --- End of file: IQReportSystem-2.23.90.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/EmptyLowFPS.cs ---
// --- Original Local Path: EmptyLowFPS.cs ---

//-----Changelog-----
//Version 0.0.3
//	-Added server.tickrate
//	-Added UseFPSLimit & UseTickrate (true or false)
//
//Version 0.0.2
//	-Added ResourceId
//	-Only triggers at first player join and last player leave

namespace Oxide.Plugins
{
    [Info("EmptyLowFPS", "Dezito", "0.0.3", ResourceId = 1889)]
    [Description("Set low cpu usage when no players connected")]

    class EmptyLowFPS : RustPlugin
    {
		private static bool UseFPSLimit = true;
		private static int MaxFPSLimit = 256;
		private static int EmptyFPSLimit = 30;
		
		private static bool UseTickrate = true;
		private static int MaxTickrate = 30;
		private static int EmptyTickrate = 10;
		
        void LoadDefaultConfig() { }

        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }

        void Init()
        {
            CheckCfg<bool>("UseFPSLimit", ref UseFPSLimit);
            CheckCfg<int>("MaxFPSLimit", ref MaxFPSLimit);
            CheckCfg<int>("EmptyFPSLimit", ref EmptyFPSLimit);
			
            CheckCfg<bool>("UseTickrate", ref UseTickrate);
            CheckCfg<int>("MaxTickrate", ref MaxTickrate);
            CheckCfg<int>("EmptyTickrate", ref EmptyTickrate);
			
            SaveConfig();
			
			
			if (BasePlayer.activePlayerList.Count == 0)
			{
				if (UseFPSLimit)
					ServerEmpty_FPSLimit();
				if (UseTickrate)
					ServerEmpty_Tickrate();
			}
			else
			{
				if (UseFPSLimit)
					ServerNotEmpty_FPSLimit();
				if (UseTickrate)
					ServerNotEmpty_Tickrate();
			}
        }
		
		void OnPlayerConnected(Network.Message packet)
		{
			if (BasePlayer.activePlayerList.Count == 0)
			{
				if (UseFPSLimit)
					ServerNotEmpty_FPSLimit();
				if (UseTickrate)
				ServerNotEmpty_Tickrate();
			}
		}
		
		void OnPlayerDisconnected(BasePlayer player, string reason)
		{
			if (BasePlayer.activePlayerList.Count == 1)
			{
				if (UseFPSLimit)
					ServerEmpty_FPSLimit();
				if (UseTickrate)
					ServerEmpty_Tickrate();
			}
		}
		
        void Unload()
        {
			if (MaxFPSLimit != null)
				ConsoleSystem.Run.Server.Normal("fps.limit "+MaxFPSLimit);
				return;
			if (MaxTickrate != null)
				ConsoleSystem.Run.Server.Normal("server.tickrate "+MaxTickrate);
				return;
			ConsoleSystem.Run.Server.Normal("fps.limit 256");
			ConsoleSystem.Run.Server.Normal("server.tickrate 30");
        }
		
		void ServerNotEmpty_FPSLimit()
		{
			Puts("Server is NOT empty setting fps.limit to " + MaxFPSLimit);
			ConsoleSystem.Run.Server.Normal("fps.limit "+ MaxFPSLimit);
		}
		
		void ServerEmpty_FPSLimit()
		{
			Puts("Server is empty setting fps.limit to " + EmptyFPSLimit);
			ConsoleSystem.Run.Server.Normal("fps.limit " + EmptyFPSLimit);
		}
		
		void ServerNotEmpty_Tickrate()
		{
			Puts("Server is NOT empty setting server.tickrate to " + MaxTickrate);
			ConsoleSystem.Run.Server.Normal("server.tickrate "+ MaxTickrate);
		}
		
		void ServerEmpty_Tickrate()
		{
			Puts("Server is empty setting server.tickrate to " + EmptyTickrate);
			ConsoleSystem.Run.Server.Normal("server.tickrate " + EmptyTickrate);
		}
		
    }
}


// --- End of file: EmptyLowFPS.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BStats.cs ---
// --- Original Local Path: BStats.cs ---

using System.IO;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("BStats", "L&W", "2.0.0")]
    public class BStats : RustPlugin
    {
        #region [Vars]
        [PluginReference] private Plugin ImageLibrary = null;
        private string[] _gatherHooks = {
            "OnDispenserGather",
            "OnDispenserBonus",
            "OnCollectiblePickup",
        };
        private static BStats plugin;
        private const string Layer = "BStats.Layer";

        private readonly Dictionary<ulong, BasePlayer> _lastHeli = new Dictionary<ulong, BasePlayer>();
        private Dictionary<string, int> _itemIds = new Dictionary<string, int>();
        private List<ulong> _lootEntity = new List<ulong>();
        #endregion

        #region [ImageLibrary]
        private bool HasImage(string imageName, ulong imageId = 0) => (bool)ImageLibrary.Call("HasImage", imageName, imageId);
        private bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);
        private string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary?.Call("GetImage", shortname, skin);
        #endregion

        #region [Data]
        Dictionary<ulong, playerData> _playerList = new Dictionary<ulong, playerData>();

        public class playerData
        {
            public string Name;

            public int Point;

            public int PlayTimeInServer = 0;

            public int Kill = 0;

            public int Death = 0;

            public Dictionary<string, int> Gather = new Dictionary<string, int>()
            {
                { "wood", 0 },
                { "stones", 0 },
                { "metal.ore", 0 },
                { "sulfur.ore", 0},
                { "hq.metal.ore", 0 },
                { "cloth", 0},
                { "leather", 0},
                { "fat.animal", 0},
                { "loot-barrel", 0}
            };

            public int TotalFarm() => Gather.Sum(p => p.Value);
        }

        private playerData GetPlayerData(ulong member)
        {
            if (!_playerList.ContainsKey(member))
                _playerList.Add(member, new playerData());

            return _playerList[member];
        }

        private void SavePlayer()
        {
            Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerList", _playerList);
        }

        private void LoadPlayer()
        {
            try
            {
                _playerList = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, playerData>>($"{Name}/PlayerList");
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_playerList == null) _playerList = new Dictionary<ulong, playerData>();
        }
        #endregion

        #region [Oxide]
        private void OnPluginLoaded(Plugin plugin)
        {
            NextTick(() =>
            {
                foreach (string hook in _gatherHooks)
                {
                    Unsubscribe(hook);
                    Subscribe(hook);
                }
            });
        }

        private void Init()
        {
            plugin = this;

            LoadPlayer();
        }

        private void OnServerInitialized()
        {
            cmd.AddChatCommand(config.openMenuTop, this, "cmdOpenStats");

            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);

            if (config._NotifyChatRandom.chatSendTop)
                timer.Every(config._NotifyChatRandom.chatSendTopTime, GetRandomTopPlayer);
            timer.Every(60, TimeHandle);
            ImageLibrary?.Call("AddImage", "https://i.postimg.cc/XqbbjyZs/0a95bc1e7d17deed.png", "avatar.icon");
            ImageLibrary?.Call("AddImage", "https://i.postimg.cc/bwJjwPJf/1.png", "line.icon");
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
            }

            SavePlayer();
            plugin = null;
        }

        private void OnNewSave(string filename)
        {
            WipeEnded();
        }
        #endregion

        #region [Reward]
        private void WipeEnded()
        {
            if (config._GameStoreSettings.GivePrize && !string.IsNullOrEmpty(config._GameStoreSettings.ShopID) && !string.IsNullOrEmpty(config._GameStoreSettings.SecretKey))
            {
                var sortedData = _playerList.OrderByDescending(x => x.Value.Point);
                int pos = 1;

                foreach (var user in sortedData)
                {
                    if (config._GameStoreSettings.RewardSettings.ContainsKey(pos))
                    {
                        var args = new Dictionary<string, string>()
                        {
                            { "action", "moneys" },
                            { "type", "plus" },
                            { "steam_id", user.Key.ToString() },
                            { "amount", config._GameStoreSettings.RewardSettings[pos].ToString() }
                        };
                        string url = $"https://gamestores.ru/api/?shop_id={config._GameStoreSettings.ShopID}&secret={config._GameStoreSettings.SecretKey}" + $"{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
                        webrequest.Enqueue(url, null, (i, s) =>
                        {
                            if (i != 200)
                            {
                                PrintError($"Ошибка {i}: {s}");
                                return;
                            }
                        }, this);
                    }
                    pos++;
                }
            }

            foreach (var playerData in _playerList)
            {
                playerData.Value.Point = 0;
                playerData.Value.PlayTimeInServer = 0;
                playerData.Value.Kill = 0;
                playerData.Value.Death = 0;
                playerData.Value.Gather = new Dictionary<string, int>()
                {
                    ["wood"] = 0,
                    ["stones"] = 0,
                    ["metal.ore"] = 0,
                    ["hq.metal.ore"] = 0,
                    ["sulfur.ore"] = 0,
                    ["cloth"] = 0,
                    ["leather"] = 0,
                    ["fat.animal"] = 0,
                    ["loot-barrel"] = 0
                };
            }
            SavePlayer();
        }
        #endregion

        #region [Gui]
        private void PlayerTop(BasePlayer player, ulong playerID, int page = 0)
        {
            #region [Vars]
            var container = new CuiElementContainer();
            #endregion

            #region [Parrent]
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Material = "assets/content/ui/uibackgroundblur.mat", Color = "0 0 0 0.77" }
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Color = "0 0.33 0.28 0.3", Material = "assets/icons/greyout.mat", Close = Layer }
            }, Layer);
            #endregion

            #region [Main-Gui]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-405 -200", OffsetMax = "50 276" },
                Image = { Color = "0.3773585 0.3755785 0.3755785 0", Material = "assets/icons/greyout.mat" }
            }, Layer, Layer + ".Main");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "52 -200", OffsetMax = "420 80" },
                Image = { Color = "0.00 0.00 0.00 0.5", Material = "assets/icons/greyout.mat" }
            }, Layer, Layer + ".Description");
            #endregion

            #region [Text]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.933", AnchorMax = "0.997 0.997" },
                Image = { Color = "0 0 0 0" }
            }, Layer + ".Main", Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Место", Color = "1 1 1 1", FontSize = 13, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.043 0", AnchorMax = $"1 1" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Статус", Color = "1 1 1 1", FontSize = 13, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.52 0", AnchorMax = $"1 1" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Игрок", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.23 0", AnchorMax = $"1 1" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"ТОП ИГРОКОВ", Color = "1 1 1 1", FontSize = 32, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.75 0", AnchorMax = $"2 3.5" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Награда", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.7 0", AnchorMax = $"1 1" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Очки", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.88 0", AnchorMax = $"1 1" },
            }, Layer + ".Main" + ".Text");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Получение очков", Color = "1 1 1 1", FontSize = 16, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.35 0", AnchorMax = $"1 1.7" },
            }, Layer + ".Description");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Лишение очков", Color = "1 1 1 1", FontSize = 16, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.37 0", AnchorMax = $"1 0.7" },
            }, Layer + ".Description");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Cбитие вертолета\nУничтожение танка\n\nУбийство игрока\nДобыча камня\nДобыча метала\nДобыча серы\nРазрушение бочки", Color = "1 1 1 1", FontSize = 11, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.27 0", AnchorMax = $"1 1.2" },
            }, Layer + ".Description");

            container.Add(new CuiLabel
            {
                Text = { Text = $"<color=#5CFF5CCC>+{config._PointsDestroy.dHeli} очков</color>\n<color=#5CFF5CCC>+{config._PointsDestroy.dBradley} очков</color>\n\n<color=#5CFF5CCC>+{config._PointsKillDeath.pKill} очков</color>\n<color=#5CFF5CCC>+{config._PointsSettings.pStone} очков</color>\n<color=#5CFF5CCC>+{config._PointsSettings.pMetal} очков</color>\n<color=#5CFF5CCC>+{config._PointsSettings.pSulfur} очков</color>\n<color=#5CFF5CCC>+{config._PointsSettings.pBarrel} очков</color>", Color = "1 1 1 1", FontSize = 11, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.58 0", AnchorMax = $"1 1.2" },
            }, Layer + ".Description");

            container.Add(new CuiLabel
            {
                Text = { Text = $"Смерть\nCамоубийство", Color = "1 1 1 1", FontSize = 11, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.27 0", AnchorMax = $"1 0.45" },
            }, Layer + ".Description");
            container.Add(new CuiLabel
            {
                Text = { Text = $"<color=#FD6103CC>-{config._PointsKillDeath.pDeath} очков</color>\n<color=#FD6103CC>-{config._PointsKillDeath.pSuicide} очков</color>", Color = "1 1 1 1", FontSize = 11, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft },
                RectTransform = { AnchorMin = $"0.58 0", AnchorMax = $"1 0.45" },
            }, Layer + ".Description");

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);
            TopPlayerList(player, page);
            PlayerTopInfo(player, playerID);
        }


        private void TopPlayerList(BasePlayer player, int page = 0)
        {

            #region [Vars]
            var playerList = _playerList.OrderByDescending(p => p.Value.Point);
            var container = new CuiElementContainer();
            string colored = "0 0 0 0.5";
            int i = 0;
            #endregion

            #region [Main]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, Layer + ".Main", Layer + ".Main" + "TopPlayerList");


            container.Add(new CuiElement
            {
                Parent = Layer + ".Main" + "TopPlayerList",
                Components =
                        {
                            new CuiRawImageComponent { Png = (string)ImageLibrary?.Call("GetImage", "line.icon") },
                            new CuiRectTransformComponent {AnchorMin = "0.05 0.05", AnchorMax = "1.761 0.95"}
                        }
            });
            container.Add(new CuiElement
            {
                Parent = Layer + ".Main" + "TopPlayerList",
                Components =
                {
                            new CuiRawImageComponent {Png = (string)ImageLibrary?.Call("GetImage", "avatar.icon") },
                            new CuiRectTransformComponent {AnchorMin = "-0.03 -0.015", AnchorMax = "1.813 1"}
                }
            });
            #endregion

            #region [Button]
            container.Add(new CuiButton
            {
                Button = { Color = "0.36 1.00 0.36 0.4", Command = $"UI_BSTATS OpenProfileStats {player.userID}", Material = "assets/icons/greyout.mat" },
                Text = { Text = "МОЯ СТАТИСТИКА", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                RectTransform = { AnchorMin = $"1.23 -0.1085", AnchorMax = $"1.6 -0.035" },
            }, Layer + ".Main" + "TopPlayerList");

            container.Add(new CuiButton
            {
                Button = { Color = "0.46 0.44 0.42 0.85", Material = "assets/icons/greyout.mat", Close = Layer },
                Text = { Text = "ЗАКРЫТЬ", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                RectTransform = { AnchorMin = $"1.6 1.015", AnchorMax = $"1.806 1.07" },
            }, Layer + ".Main" + "TopPlayerList");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.4 -0.1185", AnchorMax = $"0.6 -0.025" },
                Image = { Color = "0.2 0.2 0.2 0.0", Material = "assets/icons/greyout.mat" }
            }, Layer + ".Main" + "TopPlayerList", Layer + ".Main" + "TopPlayerList" + ".Page");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"1 1" },
                Text = { Text = $"{page + 1}", Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.MiddleCenter }
            }, Layer + ".Main" + "TopPlayerList" + ".Page");

            container.Add(new CuiButton
            {
                Button = { Color = "0.46 0.44 0.42 0.85", Material = "assets/icons/greyout.mat", Command = page > 0 ? $"UI_BSTATS ChangeTopPage {page - 1}" : "" },
                Text = { Text = "<", FontSize = 25, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                RectTransform = { AnchorMin = $"0.37 -0.1085", AnchorMax = $"0.449 -0.035" },
            }, Layer + ".Main" + "TopPlayerList");

            container.Add(new CuiButton
            {
                Button = { Color = "0.46 0.44 0.42 0.85", Material = "assets/icons/greyout.mat", Command = playerList.Skip(10 * (page + 1)).Count() > 0 ? $"UI_BSTATS ChangeTopPage {page + 1}" : "" },
                Text = { Text = ">", FontSize = 25, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                RectTransform = { AnchorMin = $"0.551 -0.1085", AnchorMax = $"0.63 -0.035" },
            }, Layer + ".Main" + "TopPlayerList");
            #endregion

            #region [PlayerInfo]
            for (int y = 0; y < 11; y++)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"0.01 {0.858 - y * 0.0795}", AnchorMax = $"0.989 {0.93 - y * 0.0795}" },
                    Image = { Color = colored }
                }, Layer + ".Main" + "TopPlayerList", Layer + ".Main" + "TopPlayerList" + $".TopLine{y}");
            }

            foreach (var key in playerList.Skip(10 * page).Take(playerList.ToList().Count >= 10 ? 10 : playerList.ToList().Count))
            {
                container.Add(new CuiLabel
                {
                    Text = { Text = $"#{i + (1 + (page * 10))}", Color = "1 1 1 1", FontSize = 10, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter },
                    RectTransform = { AnchorMin = $"0.05 0", AnchorMax = $"0.1 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiLabel
                {
                    Text = { Text = BasePlayer.FindByID(key.Key) != null ? "<color=#5CFF5CCC>Online</color>" : "<color=#FD6103CC>Offline</color>", Font = "robotocondensed-regular.ttf", FontSize = 12, Color = "1 1 1 1", Align = TextAnchor.MiddleLeft },
                    RectTransform = { AnchorMin = $"0.52552 0", AnchorMax = $"0.62 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiLabel
                {
                    Text = { Text = $"{key.Value.Name}", Font = "robotocondensed-regular.ttf", FontSize = 12, Color = "1 1 1 1", Align = TextAnchor.MiddleLeft },
                    RectTransform = { AnchorMin = $"0.1785 0", AnchorMax = $"0.55 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                if (config._GameStoreSettings.RewardSettings.ContainsKey(i + (1 + (page * 10))))
                {
                    container.Add(new CuiLabel
                    {
                        Text = { Text = $"{config._GameStoreSettings.RewardSettings[i + (1 + (page * 10))]}", Color = "1 1 1 1", FontSize = 12, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter },
                        RectTransform = { AnchorMin = $"0.695 0", AnchorMax = $"0.8 1" },
                    }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");
                }

                container.Add(new CuiLabel
                {
                    Text = { Text = $"{key.Value.Point}", Font = "robotocondensed-regular.ttf", FontSize = 12, Color = "1 1 1 1", Align = TextAnchor.MiddleCenter },
                    RectTransform = { AnchorMin = $"0.83 0", AnchorMax = $"1 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"UI_BSTATS OpenProfileStats {key.Key}" },
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"1 1" },
                }, Layer + ".Main" + "TopPlayerList" + $".TopLine{i}");

                i++;
            }
            #endregion

            CuiHelper.DestroyUi(player, Layer + ".Main" + "TopPlayerList");
            CuiHelper.AddUi(player, container);
        }

        private void PlayerTopInfo(BasePlayer player, ulong playerID, int page = 0)
        {
            #region [Vars]
            var container = new CuiElementContainer();
            string colored = "0 0 0 0.5";

            var data = GetPlayerData(playerID);
            if (data == null) return;
            #endregion

            #region [Parrent]

            #endregion

            #region [Main-Gui]
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "52 80", OffsetMax = "420 276" },
                Image = { Color = "0.00 0.00 0.00 0.6", Material = "assets/icons/greyout.mat" }
            }, Layer, Layer + ".Main" + "PlayerTopInfo" + ".Profile");
            #endregion

            #region [Avatar]
            container.Add(new CuiElement
            {
                Parent = Layer + ".Main" + "PlayerTopInfo" + ".Profile",
                Components =
                {
                    new CuiRawImageComponent { Png = GetImage($"avatar_{playerID}") },
                    new CuiRectTransformComponent { AnchorMin = $"0.36 0.35", AnchorMax = $"0.67075 0.815" }
                }
            });
            #endregion

            #region [Title]

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.34 0.81", AnchorMax = $"0.99 1", OffsetMax = "0 0" },
                Text = { Text = $"{data.Name}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 20, Font = "robotocondensed-regular.ttf" }
            }, Layer + ".Main" + "PlayerTopInfo" + ".Profile");
            #endregion

            #region [Info]
            Dictionary<string, string> _playerInfo = new Dictionary<string, string>()
            {
                { "МЕСТО В ТОПЕ:", $"{GetTopScore(playerID)}" },
                { "ОЧКОВ:", $"{data.Point}" },
                { "АКТИВНОСТЬ:", $"{data.PlayTimeInServer}м." },
                { "УБИЙСТВ:", $"{data.Kill}" },
                { "СМЕРТЕЙ:", $"{data.Death}" },
                { "К/Д:", $"{(data.Death == 0 ? data.Kill : (float)Math.Round(((float)data.Kill) / data.Death, 2))}" },
            };

            foreach (var check in _playerInfo.Select((i, t) => new { A = i, B = t }))
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"0 {0.70 - Math.Floor((float) check.B/ 1) * 0.0825}",
                                        AnchorMax = $"0.938 {0.9 - Math.Floor((float) check.B / 1) * 0.0825}", },
                    Image = { Color = "0 0 0 0.0", Material = "assets/icons/greyout.mat" }
                }, Layer + ".Main" + "PlayerTopInfo" + ".Profile", Layer + ".Profile" + ".Info" + $".{check.B}");

                container.Add(new CuiElement
                {
                    Parent = Layer + ".Profile" + ".Info" + $".{check.B}",
                    Components =
                    {
                        new CuiTextComponent { Text = $"{check.A.Key}", Color = "1 1 1 1", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" },
                        new CuiRectTransformComponent { AnchorMin = $"0.051 0", AnchorMax = $"1 1" },
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = Layer + ".Profile" + ".Info" + $".{check.B}",
                    Components =
                    {
                        new CuiTextComponent { Text = $"{check.A.Value}", Color = "1 1 1 1", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" },
                        new CuiRectTransformComponent { AnchorMin = $"0 0", AnchorMax = $"0.985 1" },
                    }
                });
            }
            #endregion
            #region [Resourse]
            foreach (var check in data.Gather.OrderByDescending(x => x.Value).Select((i, t) => new { A = i, B = t }))
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{0.025 + check.B * 0.107 - Math.Floor((float) check.B / 9) * 9 * 0.107} 0.100",
                                        AnchorMax = $"{0.115 + check.B * 0.107 - Math.Floor((float) check.B / 9) * 9 * 0.107} 0.280", },
                    Image = { Color = "0 0 0 0.25", Material = "assets/icons/greyout.mat" }
                }, Layer + ".Main" + "PlayerTopInfo" + ".Profile", Layer + ".Profile" + $".{check.B}");

                if (FindItemID(check.A.Key) != 0)
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".Profile" + $".{check.B}",
                        Components =
                        {
                            new CuiImageComponent { ItemId = FindItemID(check.A.Key), SkinId = 0 },
                            new CuiRectTransformComponent {AnchorMin = "0.025 0.025", AnchorMax = "0.975 0.975"}
                        }
                    });
                }
                else
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".Profile" + $".{check.B}",
                        Components =
                        {
                            new CuiRawImageComponent { Png = GetImage(check.A.Key) },
                            new CuiRectTransformComponent {AnchorMin = "0.05 0.05", AnchorMax = "0.95 0.95"}
                        }
                    });
                }

                container.Add(new CuiElement
                {
                    Parent = Layer + ".Profile" + $".{check.B}",
                    Components =
                    {
                        new CuiTextComponent { Text = check.A.Value.ToString(), Color = "1 1 1 1", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" },
                        new CuiRectTransformComponent { AnchorMin = $"0 0", AnchorMax = $"0.89 0.31" },
                    }
                });
            }
            #endregion

            CuiHelper.DestroyUi(player, Layer + ".Main" + "PlayerTopInfo" + ".Profile" + ".Info");
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region [Connect]
        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || !player.userID.IsSteamId()) return;

            GetAvatar(player.UserIDString, avatar => AddImage(avatar, $"avatar_{player.UserIDString}"));

            var data = GetPlayerData(player.userID);
            if (data == null || string.IsNullOrEmpty(player.displayName)) return;

            var Name = covalence.Players.FindPlayerById(player.UserIDString)?.Name;
            if (data.Name != Name)
                data.Name = Name;
        }
        #endregion

        #region [Gather]
        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (!entity.ToPlayer() || entity == null || item == null) return;

            var player = entity.ToPlayer();
            if (player == null || player.IsNpc) return;

            AddResourse(player, item.info.shortname, item.amount);
        }

        private void OnDispenserBonus(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (!entity.ToPlayer() || entity == null || item == null) return;

            var player = entity.ToPlayer();
            if (player == null || player.IsNpc) return;

            AddResourse(player, item.info.shortname, item.amount, true);
        }

        private void OnCollectiblePickup(CollectibleEntity collectible, BasePlayer player)
        {
            if (player == null || collectible == null || collectible.itemList == null) return;

            foreach (var itemAmount in collectible.itemList)
            {
                if (itemAmount.itemDef != null)
                {
                    AddResourse(player, itemAmount.itemDef.shortname, (int)itemAmount.amount);
                }
            }
        }
        #endregion

        #region [Entity]
        private void OnEntityTakeDamage(PatrolHelicopter entity, HitInfo info)
        {
            if (entity != null && entity.net != null && info.InitiatorPlayer != null)
                _lastHeli[entity.net.ID.Value] = info.InitiatorPlayer;
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;

            if (entity is PatrolHelicopter)
            {
                if (_lastHeli.ContainsKey(entity.net.ID.Value))
                {
                    var dataHeli = GetPlayerData(_lastHeli[entity.net.ID.Value].userID);
                    if (dataHeli == null) return;
                    dataHeli.Point += config._PointsDestroy.dHeli;
                }
                return;
            }

            var player = info.InitiatorPlayer;
            if (player == null) return;

            var data = GetPlayerData(player.userID);
            if (data == null) return;

            if (entity is BradleyAPC)
            {
                data.Point += config._PointsDestroy.dBradley;
            }
            else if (entity.name.Contains("barrel"))
            {
                data.Point += config._PointsSettings.pBarrel;
                data.Gather["loot-barrel"]++;
            }
        }
        #endregion

        #region [Loot]
        private void OnLootEntity(BasePlayer player, LootContainer entity)
        {
            if (player == null || entity == null || entity?.net?.ID == null || _lootEntity.Contains(entity.net.ID.Value)) return;

            var data = GetPlayerData(player.userID);
            if (data == null) return;

            data.Point += config._PointsSettings.pBarrel;
            data.Gather["loot-barrel"]++;

            _lootEntity.Add(entity.net.ID.Value);
        }
        #endregion

        #region [Death]
        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (player == null || info == null || !player.userID.IsSteamId()) return;

            if (info.damageTypes.Has(DamageType.Suicide))
            {
                var data = GetPlayerData(player.userID);
                if (data == null) return;

                data.Point -= config._PointsKillDeath.pSuicide;
                data.Death++;
                return;
            }

            var attacker = info.InitiatorPlayer;
            if (attacker == null || !attacker.userID.IsSteamId() || IsTeammates(player.userID, attacker.userID)) return;

            if (player.userID.IsSteamId())
            {
                var data = GetPlayerData(player.userID);
                if (data != null)
                {
                    data.Point -= config._PointsKillDeath.pDeath;
                    data.Death++;
                }

                var dataAttacker = GetPlayerData(attacker.userID);
                if (dataAttacker != null)
                {
                    dataAttacker.Point += config._PointsKillDeath.pKill;
                    dataAttacker.Kill++;
                }
            }
        }
        #endregion

        #region [ConsoleCommand]

        private void cmdOpenStats(BasePlayer player) => PlayerTop(player, player.userID, 0);

        [ConsoleCommand("UI_BSTATS")]
        private void StatsUIHandler(ConsoleSystem.Arg args)
        {
            BasePlayer player = args?.Player();
            if (player == null || !args.HasArgs()) return;
            switch (args.Args[0])
            {
                case "ReturnToPlayerTop":
                    {
                        PlayerTop(player, (ulong)int.Parse(args.Args[1]) - 1, (int)ulong.Parse(args.Args[2]));
                        break;
                    }
                case "ChangeTopPage":
                    {
                        TopPlayerList(player, int.Parse(args.Args[1]));
                        break;
                    }
            }
        }
        #endregion

        #region [Avatar]
        private readonly Regex Regex = new Regex(@"<avatarFull><!\[CDATA\[(.*)\]\]></avatarFull>");
        private void GetAvatar(string userId, Action<string> callback)
        {
            if (callback == null) return;

            try
            {
                webrequest.Enqueue($"http://steamcommunity.com/profiles/{userId}?xml=1", null, (code, response) =>
                {
                    if (code != 200 || response == null)
                        return;

                    var avatar = Regex.Match(response).Groups[1].ToString();
                    if (string.IsNullOrEmpty(avatar))
                        return;

                    callback.Invoke(avatar);
                }, this);
            }
            catch (Exception e)
            {
                PrintError($"{e.Message}");
            }
        }
        #endregion

        #region [NotifyChat]
        private void GetRandomTopPlayer()
        {
            int random = Core.Random.Range(0, 9);

            switch (random)
            {
                case 0:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Kill).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего убийств:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Kill}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 1:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Death).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего смертей:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Death}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 2:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.TotalFarm()).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего фарма:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.TotalFarm()}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 3:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Gather["hq.metal.ore"]).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто МВК:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["hq.metal.ore"]}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 4:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Gather["metal.ore"]).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто Металла:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["metal.ore"]}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 5:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Gather["sulfur.ore"]).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто Серы:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["sulfur.ore"]}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 6:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Gather["loot-barrel"]).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Добыто бочек и залутно ящиков:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Gather["loot-barrel"]}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 7:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.PlayTimeInServer).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Проведено больше всего время на сервере:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{FormatShortTime(TimeSpan.FromSeconds(key.Value.PlayTimeInServer * 60))}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
                case 8:
                    {
                        var playerList = _playerList.OrderByDescending(p => p.Value.Point).Take(5);
                        foreach (var player in BasePlayer.activePlayerList)
                        {
                            int i = 1;
                            ServerBroadcast(player, "<size=18><color=#FFDD2FFF>Больше всего очков:</color></size>", 0);
                            foreach (var key in playerList)
                            {
                                ServerBroadcast(player, $"<size=16>{i}.{key.Value.Name} - <color=#FFDD2FFF>{key.Value.Point}</color></size>", key.Key);
                                i++;
                            }
                        }
                        break;
                    }
            }
        }

        private void ServerBroadcast(BasePlayer player, string message, ulong AvatarID)
        {
            if (player == null || string.IsNullOrEmpty(message)) return;

            Player.Message(player, $"{message}", AvatarID);
        }

        public static string FormatShortTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0)
                result += $"{time.Days} д. ";

            if (time.Hours != 0)
                result += $"{time.Hours} час. ";

            if (time.Minutes != 0)
                result += $"{time.Minutes} мин. ";

            if (time.Seconds != 0)
                result += $"{time.Seconds} сек. ";

            return result;
        }
        #endregion

        #region [Functional]
        private bool IsTeammates(ulong player, ulong friend)
        {
            return player == friend ||
                   RelationshipManager.ServerInstance.FindPlayersTeam(player)?.members?.Contains(friend) == true;
        }

        private void TimeHandle()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                var data = GetPlayerData(player.userID);
                if (data == null) continue;

                data.PlayTimeInServer++;
            }
        }

        private int GetTopScore(ulong userid)
        {
            int Top = 1;
            var RaitingNumber = _playerList.OrderByDescending(x => x.Value.Point);

            foreach (var Data in RaitingNumber)
            {
                if (Data.Key == userid)
                    break;
                Top++;
            }

            return Top;
        }

        private int FindItemID(string shortName)
        {
            int val;
            if (_itemIds.TryGetValue(shortName, out val))
                return val;

            var definition = ItemManager.FindItemDefinition(shortName);
            if (definition == null) return 0;

            val = definition.itemid;
            _itemIds[shortName] = val;
            return val;
        }
        #endregion

        #region [AddResourse]
        private void AddResourse(BasePlayer player, string shortname, int amount, bool GivePoint = false)
        {
            if (player == null || string.IsNullOrEmpty(shortname) || amount <= 0) return;

            var data = GetPlayerData(player.userID);
            if (data == null || !data.Gather.ContainsKey(shortname)) return;

            switch (shortname)
            {
                case "wood":
                    {
                        data.Gather[shortname] += amount;
                        if (GivePoint)
                        {
                            data.Point += config._PointsSettings.pWood;
                        }
                        break;
                    }
                case "stones":
                    {
                        data.Gather[shortname] += amount;
                        if (GivePoint)
                        {
                            data.Point += config._PointsSettings.pStone;
                        }
                        break;
                    }
                case "metal.ore":
                case "metal.fragments":
                    {
                        data.Gather["metal.ore"] += amount;
                        if (GivePoint)
                        {
                            data.Point += config._PointsSettings.pMetal;
                        }
                        break;
                    }
                case "sulfur.ore":
                case "sulfur":
                    {
                        data.Gather["sulfur.ore"] += amount;
                        if (GivePoint)
                        {
                            data.Point += config._PointsSettings.pMetal;
                        }
                        break;
                    }
                case "hq.metal.ore":
                case "metal.refined":
                    {
                        data.Gather["hq.metal.ore"] += amount;
                        break;
                    }
                case "leather":
                    {
                        data.Gather[shortname] += amount;
                        break;
                    }
                case "cloth":
                    {
                        data.Gather[shortname] += amount;
                        break;
                    }
                case "fat.animal":
                    {
                        data.Gather[shortname] += amount;
                        break;
                    }
            }
        }
        #endregion

        #region [Config]
        private PluginConfig config;

        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();

            if (config.PluginVersion < Version)
                UpdateConfigValues();

            Config.WriteObject(config, true);
        }

        private void UpdateConfigValues()
        {
            PluginConfig baseConfig = PluginConfig.DefaultConfig();
            if (config.PluginVersion < Version)
            {
                config.PluginVersion = Version;
                if (Version == new VersionNumber(1, 1, 1))
                {
                    config._NotifyChatRandom.chatSendTop = true;
                    config._NotifyChatRandom.chatSendTopTime = 1200;
                }

                PrintWarning("Config checked completed!");
            }
            config.PluginVersion = Version;
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        public class PointsSettings
        {
            [JsonProperty("Сколько давать очков за дерево")]
            public int pWood = 5;

            [JsonProperty("Сколько давать очков за каменный камень")]
            public int pStone = 5;

            [JsonProperty("Сколько давать очков за металический камень")]
            public int pMetal = 5;

            [JsonProperty("Сколько давать очков за серный камень")]
            public int pSulfur = 5;

            [JsonProperty("Сколько давать очков за уничтожение бочки | Лутание обычного ящика у дороги")]
            public int pBarrel = 5;
        }

        public class PointsDestroy
        {
            [JsonProperty("Сколько давать очков за уничтожение вертолета")]
            public int dHeli = 1500;

            [JsonProperty("Сколько давать очков за уничтожение танка")]
            public int dBradley = 750;
        }

        public class PointsKillDeath
        {
            [JsonProperty("Сколько давать очков за убийство игрока")]
            public int pKill = 40;

            [JsonProperty("Сколько отнимать очков за смерть")]
            public int pDeath = 15;

            [JsonProperty("Сколько отнимать очков за суицид")]
            public int pSuicide = 15;
        }

        public class GameStoreSettings
        {
            [JsonProperty("Включить авто выдачу призов при вайпе сервера?")]
            public bool GivePrize = true;

            [JsonProperty("ИД магазина в сервисе")]
            public string ShopID = "";

            [JsonProperty("Секретный ключ (не распростраяйте его)")]
            public string SecretKey = "";

            [JsonProperty("Место в топе и выдаваемый баланс игроку")]
            public Dictionary<int, float> RewardSettings;
        }

        public class NotifyChatRandom
        {
            [JsonProperty("Отправлять в чат сообщения с топ 5 игроками ?")]
            public bool chatSendTop = true;

            [JsonProperty("Раз в сколько секунд будет отправлятся сообщение ?")]
            public int chatSendTopTime = 1200;
        }

        private class PluginConfig
        {
            [JsonProperty("Команда для открытия топа")]
            public string openMenuTop;

            [JsonProperty("Настройка начисления очков за добычу")]
            public PointsSettings _PointsSettings = new PointsSettings();

            [JsonProperty("Настройка начисления очков за уничтожение")]
            public PointsDestroy _PointsDestroy = new PointsDestroy();

            [JsonProperty("Настройка начисления и отнимания очков за убийства и смерти")]
            public PointsKillDeath _PointsKillDeath = new PointsKillDeath();

            [JsonProperty("Настройка призов")]
            public GameStoreSettings _GameStoreSettings = new GameStoreSettings();

            [JsonProperty("Настройка оповещений в чате")]
            public NotifyChatRandom _NotifyChatRandom = new NotifyChatRandom();

            [JsonProperty("Config version")]
            public VersionNumber PluginVersion = new VersionNumber();

            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    openMenuTop = "top",
                    _PointsDestroy = new PointsDestroy()
                    {
                        dHeli = 1500,
                        dBradley = 750,
                    },
                    _PointsKillDeath = new PointsKillDeath()
                    {
                        pKill = 40,
                        pDeath = 15,
                        pSuicide = 15,
                    },
                    _PointsSettings = new PointsSettings()
                    {
                        pWood = 5,
                        pStone = 5,
                        pMetal = 5,
                        pSulfur = 5,
                        pBarrel = 5,
                    },
                    _GameStoreSettings = new GameStoreSettings()
                    {
                        GivePrize = true,
                        ShopID = "",
                        SecretKey = "",
                        RewardSettings = new Dictionary<int, float>()
                        {
                            [1] = 400f,
                            [2] = 250f,
                            [3] = 150f,
                            [4] = 100f,
                            [5] = 50f,
                            [6] = 50f,
                            [7] = 30f,
                        },
                    },
                    _NotifyChatRandom = new NotifyChatRandom()
                    {
                        chatSendTop = true,
                        chatSendTopTime = 1200,
                    },
                    PluginVersion = new VersionNumber()
                };
            }
            #endregion
        }
        #endregion
    }
}

// --- End of file: BStats.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PlayTimeTracker.cs ---
// --- Original Local Path: PlayTimeTracker.cs ---

/*
* Version 1.4
*/

using System;
using Oxide.Core;
using System.Collections.Generic;
using System.Linq;

namespace Oxide.Plugins {
  [Info("Playtime and AFK Tracker", "ArcaneCraeda", 1.4)]
  [Description("Logs every players' play and afk time, separately.")]
  public class PlayTimeTracker : RustPlugin {

    protected override void LoadDefaultConfig() {
      PrintWarning("Creating a configuration file for PlayTimeTracker.");
      Config.Clear();
      Config["Afk Check Interval"] = 30;
      Config["Cycles Until Afk"] = 4;
      Config["Track AFK Time?"] = true;
      SaveConfig();
    }

    class PlayTimeData {
      public Dictionary<string, PlayTimeInfo> Players = new Dictionary<string, PlayTimeInfo>();

      public PlayTimeData() {  }
    };

    class PlayTimeInfo {
      public string SteamID;
      public string Name;
      public long PlayTime;
      public long AfkTime;
      public string HumanPlayTime;
      public string HumanAfkTime;
      public string LastSeen;

      public PlayTimeInfo() {  }

      public PlayTimeInfo(BasePlayer player) {
        SteamID = player.userID.ToString();
        Name = player.displayName;
        PlayTime = 0;
        AfkTime = 0;
        HumanPlayTime = "00:00:00";
        HumanAfkTime = "00:00:00";
        LastSeen = "Never";
      }
    };

    class PlayerStateData {
      public Dictionary<string, PlayerStateInfo> Players = new Dictionary<string, PlayerStateInfo>();

      public PlayerStateData() {  }
    };

    class PlayerStateInfo {
      public string SteamID;
      public long InitTimeStamp;
      public int AfkCount;
      public long AfkTime;
      public double[] Position;
      public string LiveName;

      public PlayerStateInfo() {  }

      public PlayerStateInfo(BasePlayer player) {
        InitTimeStamp = 0;
        SteamID = player.userID.ToString();
        AfkCount = 0;
        AfkTime = 0;
        Position = new double[3];
        LiveName = player.displayName;
      }
    };

    PlayTimeData playTimeData;
    PlayerStateData playerStateData = new PlayerStateData();

    public string prefix = "PlayTimeTracker: ";

    int afkCheckInterval { get { return Config.Get<int>("Afk Check Interval"); } }
    int cyclesUntilAfk { get { return Config.Get<int>("Cycles Until Afk"); } }
    bool afkCounts { get { return Config.Get<bool>("Track AFK Time?"); } }

    void Init() {
      Puts("PlayTimeTracker Initializing...");
      LoadPermissions();
    }

    void LoadPermissions() {
      string [] permissions = {"PlayTimeTracker.CanCheckPlayTime", "PlayTimeTracker.CanCheckAfkTime", "PlayTimeTracker.CanCheckLastSeen", "PlayTimeTracker.CanCheckSelfPlayTime", "PlayTimeTracker.CanCheckSelfAfkTime", "PlayTimeTracker.CanCheckSelfLastSeen"};
      for (int i = 0; i < permissions.Length; i++){
        if (!permission.PermissionExists(permissions[i])) { permission.RegisterPermission(permissions[i], this); }
      }
    }

    void OnPluginLoaded() {
      playTimeData = Interface.GetMod().DataFileSystem.ReadObject<PlayTimeData>("PlayTimeTracker");
      if (afkCounts) { timer.Repeat(afkCheckInterval, 0, () => afkCheck()); }
      foreach (BasePlayer player in BasePlayer.activePlayerList) { initPlayerState(player); }
    }

    void OnPluginUnloaded() {
      foreach (BasePlayer player in BasePlayer.activePlayerList) {
        savePlayerState(player);
      }
    }

    void OnPlayerInit(BasePlayer player) {
      var info = new PlayTimeInfo(player);
     
      if (!playTimeData.Players.ContainsKey(info.SteamID)) {
        playTimeData.Players.Add(info.SteamID, info);
      }
      playTimeData.Players[info.SteamID].Name = player.displayName;
      playTimeData.Players[info.SteamID].LastSeen = "Now";

      Interface.GetMod().DataFileSystem.WriteObject("PlayTimeTracker", playTimeData);

      initPlayerState(player);
    }

    void OnPlayerDisconnected(BasePlayer player) {
      savePlayerState(player);
    }


    [ChatCommand("playtime")]
    void cmdPlayTime(BasePlayer player, string cmd, string[] args) {
      string target = player.userID.ToString();
      if (args.Length!=0) {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckPlayTime")) { return; }
        var queriedPlayer = args[0];
        string playerSteamID = FindPlayer(queriedPlayer);
        if (String.IsNullOrEmpty(playerSteamID)) {
          SendReply(player, prefix + "The player '" + queriedPlayer + "' does not exist in the system.");
          return; 
        }
        target = playerSteamID.ToString();
      } else {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckSelfPlayTime")) { return; }
      }

      if (playerStateData.Players.ContainsKey(target)) {
        long currentTimestamp = GrabCurrentTimestamp();
        long initTimeStamp = playerStateData.Players[target].InitTimeStamp;
        long totalPlayed = currentTimestamp - initTimeStamp;
        if (playTimeData.Players.ContainsKey(target)){totalPlayed += playTimeData.Players[target].PlayTime;}
        TimeSpan humanPlayTime = TimeSpan.FromSeconds(totalPlayed);
        player.ChatMessage(playerStateData.Players[target].LiveName + "'s total playtime: " + string.Format("{0:c}", humanPlayTime));
      }else{
         player.ChatMessage("The player has never been seen on the server.");
      }
    }

    [ChatCommand("afktime")]
    void cmdAfkTime(BasePlayer player, string cmd, string[] args) {
      string target = player.userID.ToString();
      if (args.Length!=0) {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckAfkTime")) { return; }
        var queriedPlayer = args[0];
        string playerSteamID = FindPlayer(queriedPlayer);
        if (String.IsNullOrEmpty(playerSteamID)) {
          SendReply(player, prefix + "The player '" + queriedPlayer + "' does not exist in the system.");
          return;
        }
        target = playerSteamID.ToString();
      } else {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckSelfAfkTime")) { return; }
      }

      if (playerStateData.Players.ContainsKey(target)) {
        long afkTime = playerStateData.Players[target].AfkTime;
        if (playTimeData.Players.ContainsKey(target)){afkTime += playTimeData.Players[target].AfkTime;}
        TimeSpan humanAfkTime = TimeSpan.FromSeconds(afkTime);
        player.ChatMessage(playerStateData.Players[target].LiveName + "'s time spent AFK: " + string.Format("{0:c}", humanAfkTime));
      }else{
         player.ChatMessage("The player has never been seen on the server.");
      }
    }

    [ChatCommand("lastseen")]
    void cmdLastSeen(BasePlayer player, string command, string[] args) {
      string target = player.userID.ToString();
      if (args.Length!=0) {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckLastSeen")) { return; }
        var queriedPlayer = args[0];
        string playerSteamID = FindPlayer(queriedPlayer);
        if (String.IsNullOrEmpty(playerSteamID)) {
          SendReply(player, prefix + "The player '" + queriedPlayer + "' does not exist in the system.");
          return;
        }
        target = playerSteamID.ToString();
      } else {
        if (!hasPermission(player, "PlayTimeTracker.CanCheckSelfLastSeen")) { return; }
      }

      if (playTimeData.Players.ContainsKey(target)) {
        player.ChatMessage(playTimeData.Players[target].Name + " was last seen " + playTimeData.Players[target].LastSeen);
      }else{
         player.ChatMessage("The player has never been seen on the server.");
      }
    }

    // Master AFK checking function, iterates through all connected players.
    private void afkCheck() {
      foreach (BasePlayer player in BasePlayer.activePlayerList) {
        var state = new PlayerStateInfo(player);

        if (playerStateData.Players.ContainsKey(state.SteamID)) {
          double currentX = Math.Round(player.transform.position.x, 2);
          double currentY = Math.Round(player.transform.position.y, 2);
          double currentZ = Math.Round(player.transform.position.z, 2);

          double[] storedPos = playerStateData.Players[state.SteamID].Position;

          if (currentX == storedPos[0] && currentY == storedPos[1] && currentZ == storedPos[2]) {
            playerStateData.Players[state.SteamID].AfkCount += 1;
          } else {
            playerStateData.Players[state.SteamID].AfkCount = 0;
            playerStateData.Players[state.SteamID].Position[0] = currentX;
            playerStateData.Players[state.SteamID].Position[1] = currentY;
            playerStateData.Players[state.SteamID].Position[2] = currentZ;
          }

          if (playerStateData.Players[state.SteamID].AfkCount > cyclesUntilAfk) {
            playerStateData.Players[state.SteamID].AfkTime += afkCheckInterval;
          }
        }
      }
    }

    private void initPlayerState(BasePlayer player) {
      long currentTimestamp = GrabCurrentTimestamp();
      var state = new PlayerStateInfo(player);

      if (!playerStateData.Players.ContainsKey(state.SteamID))
      {
        playerStateData.Players.Add(state.SteamID, state);
      }
      playerStateData.Players[state.SteamID].InitTimeStamp = currentTimestamp;
      playerStateData.Players[state.SteamID].AfkTime = 0;
      playerStateData.Players[state.SteamID].AfkCount = 0;
      playerStateData.Players[state.SteamID].LiveName = player.displayName;

      playerStateData.Players[state.SteamID].Position[0] = Math.Round(player.transform.position.x, 2);
      playerStateData.Players[state.SteamID].Position[1] = Math.Round(player.transform.position.y, 2);
      playerStateData.Players[state.SteamID].Position[2] = Math.Round(player.transform.position.z, 2);
    }

    private void savePlayerState(BasePlayer player) {
      long currentTimestamp = GrabCurrentTimestamp();
      var info = new PlayTimeInfo(player);
      var state = new PlayerStateInfo(player);

      if (!playTimeData.Players.ContainsKey(info.SteamID)){
        playTimeData.Players.Add(info.SteamID, info);
      }
      long initTimeStamp = playerStateData.Players[state.SteamID].InitTimeStamp;
      long afkTime = playerStateData.Players[state.SteamID].AfkTime;
      long totalPlayed = currentTimestamp - initTimeStamp;

      playTimeData.Players[info.SteamID].AfkTime += afkTime;
      TimeSpan humanAfkTime = TimeSpan.FromSeconds(playTimeData.Players[info.SteamID].AfkTime);
      playTimeData.Players[info.SteamID].HumanAfkTime = string.Format("{0:c}", humanAfkTime);

      playTimeData.Players[info.SteamID].PlayTime += totalPlayed;
      TimeSpan humanPlayTime = TimeSpan.FromSeconds(playTimeData.Players[info.SteamID].PlayTime);
      playTimeData.Players[info.SteamID].HumanPlayTime = string.Format("{0:c}", humanPlayTime);

      playTimeData.Players[info.SteamID].LastSeen = (DateTime.Now).ToString("G");

      Interface.GetMod().DataFileSystem.WriteObject("PlayTimeTracker", playTimeData);
    }

    private static long GrabCurrentTimestamp() {
      long timestamp = 0;
      long ticks = DateTime.UtcNow.Ticks - DateTime.Parse("01/01/1970 00:00:00").Ticks;
      ticks /= 10000000;
      timestamp = ticks;

      return timestamp;
    }

    private bool hasPermission(BasePlayer player, string _permission) {
      if (permission.UserHasPermission(player.userID.ToString(), _permission)) { return true; }
      player.ChatMessage("You do not have access to this command.");
      return false;
    }

    private string FindPlayer(string name) {
      foreach (var player in playTimeData.Players) {
        if (player.Value.Name.ToLower().Contains(name.ToLower())) { return player.Value.SteamID; }
      }
      return "";
    }
  };
};


// --- End of file: PlayTimeTracker.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DonationClaim.cs ---
// --- Original Local Path: DonationClaim.cs ---

using System.Text.RegularExpressions;
using Oxide.Ext.MySql;
using System.Text;
using Oxide.Core;
using Oxide.Game.Rust.Libraries;
using Oxide.Core.Plugins;
using Oxide.Core;
using System;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization.Formatters.Binary;
using System.Collections.Generic;

namespace Oxide.Plugins

{
    [Info("Donation Claim", "LeoCurtss", "0.5")]
    [Description("Player can claim rewards from PayPal donations.")]

    class DonationClaim : RustPlugin
    {

        private readonly Ext.MySql.Libraries.MySql _mySql = Interface.GetMod().GetLibrary<Ext.MySql.Libraries.MySql>();
        private Ext.MySql.Connection _mySqlConnection;

        class DCConfig
        {
            public DCConfig()
            {
                ExampleCommands.Add("grant user {0} some.permission");
                ExampleCommands.Add("grant user {0} another.permission");

                Packages.Add("Example Package", ExampleCommands);
                Packages.Add("Example Package 2", ExampleCommands);
            }
            public string MySQLIP = "localhost";
            public int MySQLPort = 3306;
            public string MySQLDatabase = "rustserver";
            public string MySQLusername = "root";
            public string MySQLpassword = "";

            List<string> ExampleCommands = new List<string>();
            public Dictionary<string, List<string>> Packages = new Dictionary<string, List<string>>();
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file.");
            Config.Clear();

            dc_config = new DCConfig();
            Config.WriteObject(dc_config, true);

            SaveConfig();
        }

        void Loaded()
        {
            try
            {
                dc_config = Config.ReadObject<DCConfig>();
            }
            catch
            {
                Puts("Could not read config, creating new default config.");
                LoadDefaultConfig();
            }

            //Lang API dictionary
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["DC_NoUnclaimed"] = "There are no unclaimed rewards available for that email address: {0}",
                ["DC_Claimed"] = "You have claimed the {0} donation package.  Thank you for your donation!",
                ["DC_NoPackage"] = "Package {0} could not be found in the config file!  Notify an admin to update the configuration."
            }, this);
        }

        private DCConfig dc_config;

        private string GetMessage(string name, string sid = null)
        {
            return lang.GetMessage(name, this, sid);
        }

        [ChatCommand("claimreward")]
        void ClaimRewardCommand(BasePlayer player, string command, string[] args)
        {
            string playerEmail = string.Join("", args);

            playerEmail = playerEmail.Replace("@", "@@");

            string packageClaimed = "";

			_mySqlConnection = _mySql.OpenDb(dc_config.MySQLIP, dc_config.MySQLPort, dc_config.MySQLDatabase, dc_config.MySQLusername, dc_config.MySQLpassword, this);
            var sql = Ext.MySql.Sql.Builder.Append("CALL rustserver.claim_donation('" + playerEmail + "');");
            _mySql.Query(sql, _mySqlConnection, list =>
            {

                var sb = new StringBuilder();
                foreach (var entry in list)
                {
                    sb.AppendFormat("{0}", entry["item_name"]);
                    sb.AppendLine();
                }

                packageClaimed = sb.ToString();

                string packageKey = getPackageKey(packageClaimed, dc_config.Packages);

                if (packageClaimed.Length < 3)
                {
                    SendReply(player, string.Format(GetMessage("DC_NoUnclaimed", player.UserIDString), playerEmail.Replace("@@", "@")));
                }
                else
                {

                    List<string> ConsoleCommands;
					if (dc_config.Packages.TryGetValue(packageKey, out ConsoleCommands))
                    {
						RunConsoleCommands(ConsoleCommands, player.UserIDString);

                        SendReply(player, string.Format(GetMessage("DC_Claimed", player.UserIDString), packageClaimed));
                        Puts(player + " has claimed donation package " + packageClaimed);
                    }
                    else
                    {
                        SendReply(player, string.Format(GetMessage("DC_NoPackage", player.UserIDString), packageClaimed));
                        Puts(player + " tried to claim " + packageClaimed + "but the package could not be found in the config!");
                    }
                }

            });
        }


    private string getPackageKey(string packageName, Dictionary<string, List<string>> packages)
        {
            foreach (KeyValuePair<string, List<string>> entry in packages)
            {
                if (packageName.Contains(entry.Key))
                {
                    return entry.Key;
                }
            }
            return "";
        }

        void RunConsoleCommands(List<string> CommandsList, string playerName)
        {
            foreach (string cmmnd in CommandsList)
            {
                ConsoleSystem.Run.Server.Normal(String.Format(cmmnd, playerName));
            }
        }

    }

}

// --- End of file: DonationClaim.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SwapCoins.cs ---
// --- Original Local Path: SwapCoins.cs ---

using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("SwapCoins", "Aliluya/Sparkless", "1.1.0")]
    class SwapCoins : RustPlugin
    {

        private string NameSilver = "Серебро";
        private string NameGold = "Золото";

        #region Настройка выпадения

        private List<string> listContainersSilver = new List<string>() // Выпадение серебра
        {
            {"loot-barrel-1"},
            {"loot-barrel-2"},
            {"loot_barrel_1"},
            {"loot_barrel_2"},
        };

        private List<string> ListContainersGold = new List<string>() // Выпадение золота!
        {
            {"codelockedhackablecrate"},
            {"crate_basic"},
            {"crate_elite"},
            {"crate_normal"},
            {"supply_drop"},
        };

        #endregion

        [PluginReference] Plugin ImageLibrary;

        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
                CuiHelper.DestroyUi(player, Layer);
        }

        void OnServerInitialized()
        {
            foreach (var check in PluginImages)
                ImageLibrary.Call("AddImage", check.Value, check.Key);
				
				PrintWarning("Спасибо за использование плагина с coderust.space!!");
        }

        private PluginConfig config;

        public class CustomItem
        {
            [JsonProperty(PropertyName = "Shortname")]
            public string target;

            [JsonProperty(PropertyName = "Название предмета")]
            public string name;

            [JsonProperty(PropertyName = "Скин")] public ulong skinid;
        }

        class PluginConfig
        {
            [JsonProperty("Номер магазина gamestores")]
            public string ShopID = "7005";

            [JsonProperty("Секретный ключ")] public string APIKey = "f21311775b88ebca830ffa05f8456151";

            [JsonProperty("Ссылка на магазин")] public string servername = "test3.gamestores.ru";

            [JsonProperty("Мин рублей для обмена")]
            public int ObmenMoneyNeed = 20;

            [JsonProperty("Кол-во золотых монет к рублю")]
            public int gold = 10;

            [JsonProperty("Кол-во серебряных монет к рублю")]
            public int silver = 35;

            [JsonProperty("Кол-во золотых монет к серебряным")]
            public int obmen = 5;

            [JsonProperty("Какой магазин использовать (true = gamestores, false = moscow.ovh)")]
            public bool gamestores = true;

            [JsonProperty("Шанс выпадение серебра из ящиков")]
            public int ChanceSilver = 100;

            [JsonProperty("Мин.выпадение серебра(шт)")]
            public int MinSilver = 1;

            [JsonProperty("Макс.выпадение серебра(шт)")]
            public int MaxSilver = 3;

            [JsonProperty("Шанс выпадение золота из ящика")]
            public int ChanceGold = 100;

            [JsonProperty("Мин.выпадение золота(шт)")]
            public int MinGold = 1;

            [JsonProperty("Макс.выпадение золота(шт)")]
            public int MaxGold = 3;

            [JsonProperty(PropertyName = "Список предметов для замены скинов и имени")]
            public List<CustomItem> items;


        }

        private PluginConfig PanelConfig()
        {
            return new PluginConfig
            {
                items = new List<CustomItem>
                {
                    new CustomItem
                    {
                        target = "sticks",
                        name = "Серебро",
                        skinid = 1707224728
                    },
                    new CustomItem
                    {
                        target = "glue",
                        name = "Золото",
                        skinid = 1707233455
                    },
                }
            };
        }

        [JsonProperty("Изображения плагина")] private Dictionary<string, string> PluginImages =
            new Dictionary<string, string>
            {
                ["GOLD"] = "https://i.imgur.com/xqbDZyw.png",
                ["CASH"] = "https://i.imgur.com/fvyNxZK.png",
                ["SILVER"] = "https://i.imgur.com/e8mXHIA.png"
            };

        private void Init()
        {
            config = Config.ReadObject<PluginConfig>();
            Config.WriteObject(config);
        }

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject(new PluginConfig(), true);
            Config.WriteObject(PanelConfig(), true);
        }

        void OnLootEntity(BasePlayer player, BaseEntity entity, Item item)
        {
            if (!(entity is LootContainer)) return;
            var container = (LootContainer) entity;
            if (handledContainers.Contains(container) || container.ShortPrefabName == "stocking_large_deployed" ||
                container.ShortPrefabName == "stocking_small_deployed") return;
            handledContainers.Add(container);
            List<int> ItemsList = new List<int>();
            if (listContainersSilver.Contains(container.ShortPrefabName))
            {
                if (UnityEngine.Random.Range(0f, 100f) < config.ChanceSilver)
                {
                    var itemContainer = container.inventory;
                    foreach (var i1 in itemContainer.itemList)
                    {
                        ItemsList.Add(i1.info.itemid);
                    }

                    if (!ItemsList.Contains(642482233))
                    {
                        if (container.inventory.itemList.Count == container.inventory.capacity)
                            container.inventory.capacity++;
                        var count = UnityEngine.Random.Range(config.MinSilver, config.MaxSilver + 1);
                        item = ItemManager.CreateByName("sticks");
                        item.name = NameSilver;
                        item.MoveToContainer(itemContainer);
                    }
                }
            }

            if (ListContainersGold.Contains(container.ShortPrefabName))
            {
                if (UnityEngine.Random.Range(0f, 100f) < config.ChanceGold)
                {
                    var itemContainer = container.inventory;
                    foreach (var i1 in itemContainer.itemList)
                    {
                        ItemsList.Add(i1.info.itemid);
                    }

                    if (!ItemsList.Contains(-1899491405))
                    {
                        if (container.inventory.itemList.Count == container.inventory.capacity)
                            container.inventory.capacity++;
                        var count = UnityEngine.Random.Range(config.MinGold, config.MaxGold + 1);
                        item = ItemManager.CreateByName("glue");
                        item.name = NameGold;
                        item.MoveToContainer(itemContainer);
                    }
                }
            }
        }

        private List<LootContainer> handledContainers = new List<LootContainer>();

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info, Item item)
        {
            if (info == null) return;
            if (entity?.net?.ID == null) return;
            var container = entity as LootContainer;
            var player = info?.InitiatorPlayer;
            if (player == null || container == null) return;
            List<int> ItemsList = new List<int>();
            if (ListContainersGold.Contains(container.ShortPrefabName))
            {
                if (UnityEngine.Random.Range(0f, 100f) < config.ChanceGold)
                {
                    var itemContainer = container.inventory;
                    foreach (var i1 in itemContainer.itemList)
                    {
                        ItemsList.Add(i1.info.itemid);
                    }

                    if (!ItemsList.Contains(-1899491405))
                    {
                        if (container.inventory.itemList.Count == container.inventory.capacity)
                            container.inventory.capacity++;
                        var count = UnityEngine.Random.Range(config.MinGold, config.MaxGold + 1);
                        item = ItemManager.CreateByName("glue");
                        item.name = NameGold;
                        item.MarkDirty();
                        item.MoveToContainer(itemContainer);
                    }
                }
            }

            if (listContainersSilver.Contains(container.ShortPrefabName))
            {
                if (UnityEngine.Random.Range(0f, 100f) < config.ChanceSilver)
                {
                    var itemContainer = container.inventory;
                    foreach (var i1 in itemContainer.itemList)
                    {
                        ItemsList.Add(i1.info.itemid);
                    }

                    if (!ItemsList.Contains(642482233))
                    {
                        if (container.inventory.itemList.Count == container.inventory.capacity)
                            container.inventory.capacity++;
                        var count = UnityEngine.Random.Range(config.MinSilver, config.MaxSilver + 1);
                        item = ItemManager.CreateByName("sticks");
                        item.name = NameSilver;
                        item.MarkDirty();
                        item.MoveToContainer(itemContainer);
                    }
                }
            }
            handledContainers.Remove(container);
        }
        [ConsoleCommand("UI_OBMENGOLDSILVER")]
        private void ObmenForGold(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            int amount = player.inventory.GetAmount(-1899491405);
            int result = player.inventory.GetAmount(-1899491405) * config.obmen;
            player.inventory.Take(null, -1899491405, amount);
            Item Give = ItemManager.CreateByItemID(Convert.ToInt32(642482233), result);
            player.GiveItem(Give);
            PrintToChat(player, $"Вы успешно обменяли золотые монеты на {result} серебряных монет!");
        }

        [ConsoleCommand("UI_OBMENRUBSILVER")]
        private void ObmenForRubSilver (ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            int kol = player.inventory.GetAmount(642482233);
            int obmenrub = player.inventory.GetAmount(642482233) / config.silver;
            player.inventory.Take(null, 642482233, kol);
            if (config.gamestores)
            {
                MoneyPlus(player.userID, obmenrub);
            }
            else
            {
                APIChangeUserBalance(player.userID, obmenrub, null);
            }
            PrintToChat(player, $"Вы успешно обменяли монеты на {obmenrub} бонусных рублей");
        }

        [ConsoleCommand("UI_OBMENRUBGOLD")]
        private void ObmenForRubGold(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            int amount = player.inventory.GetAmount(-1899491405);
            int obmenrub = player.inventory.GetAmount(-1899491405) / config.gold;
            player.inventory.Take(null, -1899491405, amount);
            if (config.gamestores)
            {
                MoneyPlus(player.userID, obmenrub);
            }
            else
            {
                APIChangeUserBalance(player.userID, obmenrub, null);
            }
            PrintToChat(player, $"Вы успешно обменяли монеты на {obmenrub} бонусных рублей");
        }

        const string Layer = "lay";
        [ChatCommand("swap")]
        private void DrawGui(BasePlayer player)
        {
            var result = player.inventory.GetAmount(-1899491405) * config.obmen;
            int obmenrub = player.inventory.GetAmount(642482233) / config.silver;
            int obmengoldrub = player.inventory.GetAmount(-1899491405) / config.gold;
            int silverneed = player.inventory.GetAmount(642482233);
            int goldneed = player.inventory.GetAmount(-1899491405);

            CuiHelper.DestroyUi(player, Layer);
            CuiElementContainer container = new CuiElementContainer();

            #region Parent
            container.Add(new CuiPanel
            {
                Image = { Color = HexToCuiColor("#48453EB7"), Material = "assets/content/ui/uibackgroundblur.mat", Sprite = "assets/content/ui/ui.background.tiletex.psd" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-250 -230", OffsetMax = "253 230" },
                CursorEnabled = true,
            }, "Overlay", Layer);
            #endregion

            #region Serebro
            container.Add(new CuiLabel
            {
                Text = { Text = $"КУРС ЗОЛОТА: x{config.gold} = 1р", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 11, Color = HexToCuiColor("#E4BC69FF") },
                RectTransform = { AnchorMin = "0.3759288 0.7588316", AnchorMax = "0.6274216 0.8301631" }
            }, Layer);
            container.Add(new CuiLabel
            {
                Text = { Text = $"КУРС СЕРЕБРА: x{config.silver} = 1р", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 11, Color = HexToCuiColor("#E4BC69FF") },
                RectTransform = { AnchorMin = "0.3759288 0.6059783", AnchorMax = "0.6274209 0.6773098" }
            }, Layer);
            container.Add(new CuiLabel
            {
                Text = { Text = $"КУРС ОБМЕНА: x1 = x{config.obmen}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 11, Color = HexToCuiColor("#E4BC69FF") },
                RectTransform = { AnchorMin = "0.3759288 0.453125", AnchorMax = "0.6274214 0.5244565" }
            }, Layer);
            #endregion

            #region add Amount
            container.Add(new CuiLabel
            {
                Text = { Text = $"x{player.inventory.GetAmount(-1899491405)}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.2511142 0.7404892", AnchorMax = "0.3461225 0.8118207" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"x{player.inventory.GetAmount(-1899491405)}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.2511142 0.438857", AnchorMax = "0.3461225 0.5101894" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"x{player.inventory.GetAmount(642482233)}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.2511142 0.5917107", AnchorMax = "0.3461225 0.6630422" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"x{result}", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.7298793 0.436819", AnchorMax = "0.8248861 0.5081514" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"{obmenrub}р", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.7242907 0.5917107", AnchorMax = "0.8192974 0.6630422" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"{obmengoldrub}р", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.7242907 0.7466034", AnchorMax = "0.8192974 0.8179349" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = $"Минимальная сумма на обмен: {config.ObmenMoneyNeed}р.\nКурс обмена растёт каждый день на протяжении вайпа.\nПеред началом обмена, обязательно авторизируйтесь в магазине <color=#e4bc69>{config.servername}</color> если не делали этого раньше.", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 14, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.02197629 0.2146739", AnchorMax = "0.9739223 0.4164402" }
            }, Layer);
            #endregion

            #region gui
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.2008157 0.7588316", AnchorMax = "0.3219046 0.8913044"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.2008157 0.6100543", AnchorMax = "0.3219047 0.7425272"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.2008157 0.4551631", AnchorMax = "0.3219047 0.587636"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.6814457 0.7588316", AnchorMax = "0.8025347 0.8913044"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.6814457 0.6080163", AnchorMax = "0.8025347 0.7404891"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiImageComponent { Color = HexToCuiColor("#D9D9D935")},
                        new CuiRectTransformComponent {AnchorMin = "0.6814458 0.4551631", AnchorMax = "0.8025348 0.587636"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "GOLD") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.213856 0.7853262", AnchorMax = "0.3070014 0.8872284"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "SILVER") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.213856 0.6324728", AnchorMax = "0.3070014 0.7343751"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "GOLD") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.213856 0.4816553", AnchorMax = "0.3070014 0.5835578"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "SILVER") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.6944845 0.4796185", AnchorMax = "0.7876285 0.5815212"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "CASH") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.6944845 0.7894036", AnchorMax = "0.7876285 0.8913059"}
                    }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                    {
                        new CuiRawImageComponent {Png = (string) ImageLibrary.Call("GetImage", "CASH") , Color = "1 1 1 1"},
                        new CuiRectTransformComponent {AnchorMin = "0.6944845 0.6365489", AnchorMax = "0.7876285 0.7384512"}
                    }
            });

            container.Add(new CuiLabel
            {
                Text = { Text = "Обмен монет", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 20, Color = HexToCuiColor("#C5BCB4FF") },
                RectTransform = { AnchorMin = "", AnchorMax = "" }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = "Обмен на бонусный баланс: средства можно потратить только на предметы и привилегии в магазине, их невозможно обменять на реальные деньги.", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 14, Color = HexToCuiColor("#E4BC69FF") },
                RectTransform = { AnchorMin = "0.02570242 0.1005435", AnchorMax = "0.9795111 0.2207881" }
            }, Layer);

            if (obmengoldrub >= config.ObmenMoneyNeed)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.400525 0.8213329", AnchorMax = "0.6017188 0.8926644" },
                    Button = { Color = HexToCuiColor("#7F7D789C"), Close = Layer, Command = "UI_OBMENRUBGOLD" },
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }
            else
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.400525 0.8213329", AnchorMax = "0.6017188 0.8926644" },
                    Button = { Color = HexToCuiColor("#4E4D4CD4")},
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }

            if (obmenrub >= config.ObmenMoneyNeed)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4001468 0.6711956", AnchorMax = "0.6013407 0.7425271" },
                    Button = { Color = HexToCuiColor("#7F7D789C"), Close = Layer, Command = "UI_OBMENRUBSILVER" },
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }
            else
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4001468 0.6711956", AnchorMax = "0.6013407 0.7425271" },
                    Button = { Color = HexToCuiColor("#4E4D4CD4") },
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }

            if (goldneed > 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4001467 0.5183412", AnchorMax = "0.6013407 0.5896727" },
                    Button = { Color = HexToCuiColor("#7F7D789C"), Close = Layer, Command = "UI_OBMENGOLDSILVER" },
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }
            else
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4001467 0.5183412", AnchorMax = "0.6013407 0.5896727" },
                    Button = { Color = HexToCuiColor("#4E4D4CD4") },
                    Text = { Text = "ОБМЕНЯТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
                }, Layer);
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.7913573 0.01086957", AnchorMax = "0.9925513 0.08220109" },
                Button = { Color = HexToCuiColor("#7F7D789C"), Close = Layer },
                Text = { Text = "ЗАКРЫТЬ", FontSize = 16, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", Font = "robotocondensed-bold.ttf" }
            }, Layer);
            #endregion

            CuiHelper.AddUi(player, container);
        }

        #region Skins
        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            if (item == null || item.info == null) return;

            var name = item.info.shortname.ToLower();

            foreach (var configRow in config.items)
            {
                if (configRow.target.ToLower() != name || configRow.skinid == item.skin) continue;
                item.name = configRow.name;
                item.skin = configRow.skinid;
            }
        }
        #endregion


        #region addmoney
        void APIChangeUserBalance(ulong steam, int balanceChange, Action<string> callback)
        {
            plugins.Find("RustStore").CallHook("APIChangeUserBalance", steam, balanceChange, new Action<string>((result) =>
            {
                if (result == "SUCCESS")
                {
                    Interface.Oxide.LogDebug($"Баланс пользователя {steam} увеличен на {balanceChange}");
                    return;
                }
                Interface.Oxide.LogDebug($"Баланс не был изменен, ошибка: {result}");
            }));
        }
        void MoneyPlus(ulong userId, int amount)
        {
            ExecuteApiRequest(new Dictionary<string, string>()
            {
                { "action", "moneys" },
                { "type", "plus" },
                { "steam_id", userId.ToString() },
                { "amount", amount.ToString() }
            });
        }

        void ExecuteApiRequest(Dictionary<string, string> args)
        {
            string url = $"http://panel.gamestores.ru/api?shop_id={config.ShopID}&secret={config.APIKey}" +
                     $"{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
            webrequest.EnqueueGet(url, (i, s) =>
            {
                if (i != 200)
                {
                    LogToFile("SwapCoins", $"Код ошибки: {i}, подробности:\n{s}", this);
                }
                else
                {
                    if (s.Contains("fail"))
                    {
                        return;
                    }
                }
            }, this);
        }
        #endregion

        private static string HexToCuiColor(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }
    }
}

// --- End of file: SwapCoins.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Grow.cs ---
// --- Original Local Path: Grow.cs ---

using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Grow", "Doldak", "1.2.2")]
    [Description(
        "Allows players to grow plants instantly using ServerRewards, Economics, or Scrap as currency"
    )]
    class Grow : RustPlugin
    {
        [PluginReference]
        Plugin ServerRewards,
            Economics;
        #region Fields
        const string _growUse = "grow.use";
        #endregion

        #region Vars
        private ConfigData config;
        #endregion

        #region Config

        private class ConfigData
        {
            [JsonProperty("currency active?")]
            public bool SRA;

            [JsonProperty("if currency true = ServerRewards")]
            public bool UseServerRewards;

            [JsonProperty("if currency true = Economics")]
            public bool UseEconomics;

            [JsonProperty("if currency true = Scrap")]
            public bool UseScrap;

            [JsonProperty("cost")]
            public int cost;
        }

        private ConfigData GenerateConfig()
        {
            return new ConfigData
            {
                cost = 50,
                SRA = true,
                UseServerRewards = true,
                UseEconomics = false,
                UseScrap = false
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError(
                    "Configuration file is corrupt! Check your config file at https://jsonlint.com/"
                );
                LoadDefaultConfig();
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GenerateConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }
        #endregion

        ///////////////////////////////////////////////////////////////////////////////////

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(
                new Dictionary<string, string>
                {
                    ["growd"] = "Grooow it Baby...",
                    ["costl_sr"] = "You take {0} RP",
                    ["costl_ec"] = "You take {0} Economics",
                    ["costl_scrap"] = "You take {0} Scrap",
                    ["nomoney"] = "You do not have enough {0} for that.",
                },
                this
            );

            lang.RegisterMessages(
                new Dictionary<string, string>
                {
                    ["growd"] = "Grooow it Baby...",
                    ["costl_sr"] = "Dir wurden {0} RP Abgezogen",
                    ["costl_ec"] = "Dir wurden {0} Economics Abgezogen",
                    ["costl_scrap"] = "Dir wurden {0} Scrap Abgezogen",
                    ["nomoney"] = "Du hast nicht genug {0}!",
                },
                this,
                "de"
            );
        }

        #region Oxide
        void OnServerInitialized()
        {
            string growd = lang.GetMessage("growd", this);
            string kosten = lang.GetMessage("costl", this);
            permission.RegisterPermission(_growUse, this);
        }

        [ChatCommand("grow")]
        private void growcomand(BasePlayer player)
        {
            string growd = lang.GetMessage("growd", this);

            if (!permission.UserHasPermission(player.UserIDString, _growUse))
            {
                return;
            }

            if (config.SRA)
            {
                if (!CheckBalance(player, config.cost))
                {
                    player.ChatMessage(Lang("nomoney", player.UserIDString, GetCurrencyName()));
                    return;
                }
                BalanceTake(player, config.cost);
                GrowAll(player);
                player.ChatMessage(growd);
                player.ChatMessage(
                    $"{String.Format(lang.GetMessage(GetCurrencyCostMessageKey(), this), config.cost)}"
                );
            }
            else
            {
                GrowAll(player);
                player.ChatMessage(growd);
            }
        }

        private string GetCurrencyName()
        {
            if (config.UseServerRewards)
                return "RP";
            if (config.UseEconomics)
                return "Economics";
            if (config.UseScrap)
                return "Scrap";
            return "";
        }

        private string GetCurrencyCostMessageKey()
        {
            if (config.UseServerRewards)
                return "costl_sr";
            if (config.UseEconomics)
                return "costl_ec";
            if (config.UseScrap)
                return "costl_scrap";
            return "";
        }

        #endregion
        #region Helpers

        public void GrowAll(BasePlayer player)
        {
            List<GrowableEntity> list = Facepunch.Pool.GetList<GrowableEntity>();
            Vis.Entities<GrowableEntity>(player.ServerPosition, 6f, list);
            foreach (GrowableEntity growableEntity in list)
            {
                if (growableEntity.isServer)
                    growableEntity.ChangeState(growableEntity.currentStage.nextState, false);
            }
            Facepunch.Pool.FreeList<GrowableEntity>(ref list);
        }

        bool CheckBalance(BasePlayer player, int cost)
        {
            if (
                config.UseServerRewards
                && ServerRewards?.Call<int>("CheckPoints", player.userID) >= cost
            )
            {
                return true;
            }

            if (
                config.UseEconomics
                && Economics?.Call<double>("Balance", player.userID) >= (double)cost
            )
            {
                return true;
            }

            if (
                config.UseScrap
                && player.inventory.GetAmount(ItemManager.FindItemDefinition("scrap").itemid)
                    >= cost
            )
            {
                return true;
            }

            return false;
        }

        public void BalanceTake(BasePlayer player, int cost)
        {
            if (config.UseServerRewards)
            {
                ServerRewards?.Call<object>("TakePoints", player.userID, cost, null);
            }

            if (config.UseEconomics)
            {
                Economics?.Call<object>("Withdraw", player.userID, (double)cost);
            }

            if (config.UseScrap)
            {
                player.inventory.Take(null, ItemManager.FindItemDefinition("scrap").itemid, cost);
            }
        }

        string Lang(string key, string id = null, params object[] args) =>
            string.Format(lang.GetMessage(key, this, id), args);
        #endregion
    }
}


// --- End of file: Grow.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/GrandRustPanel.cs ---
// --- Original Local Path: GrandRustPanel.cs ---

﻿using System;
using System.Globalization;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Newtonsoft.Json;
using UnityEngine;
using System.Linq;
using System.Collections.Generic;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("GrandRustPanel", "", "2.0.0")]
    public class GrandRustPanel : RustPlugin
    {
        [PluginReference] private Plugin ImageLibrary;
        public Dictionary<ulong, bool> PanelVisibility = new Dictionary<ulong, bool>();
        string Layer = "GRPLayer";
		string Layer1 = "GRPLayer_Store";

        #region Config

        private PluginConfig cfg;

        public class PluginConfig
        {
            [JsonProperty("Основные настройки")]
            public Settings MainSettings = new Settings();

            [JsonProperty("Эвенты")]
            public ESettings EventSets = new ESettings();

            [JsonProperty("Сообщения")]
            public MessageSettings SettingsMessages = new MessageSettings();


            public class Settings
            {
                [JsonProperty("Включить показ кнопки магазина?")]
                public bool EnableStore = true;
                [JsonProperty("Время обновления поля времени сервера")]
                public float RefreshTimer = 10f;
            }

            public class ESettings
            {
                [JsonProperty("Показывать эвент \"танк\"?")]
                public bool EnableTank = true;
            }

            public class MessageSettings
            {
                [JsonProperty("Время обновления сообщений")]
                public float RefreshTimer = 30f;
                [JsonProperty("Размер текста для автосообщений")]
                public int TextSize = 12;
                [JsonProperty("Список сообщений", ObjectCreationHandling = ObjectCreationHandling.Replace)]
                public List<string> Messages = new List<string>
                {
                    "<color=lime>Пример сообщения 1</color>",
                    "<color=red>Пример сообщения 2</color>",
                    "<color=blue>Пример сообщения 3</color>"
                };
            }
        }

        private void Init()
        {
            cfg = Config.ReadObject<PluginConfig>();
            Config.WriteObject(cfg);
        }

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject(new PluginConfig(), true);
        }

        #endregion

        #region Lang [Локализация]

        Dictionary<string, string> Messages = new Dictionary<string, string>()
        {
            {"PanelHelpMessage", "Вы должны выбрать один из вариантов:\n/panel <color=green>on</color> - включает показ панели\n/panel <color=red>off</color> - выключает показ панели" },
			{"PanelOff", "Вы <color=red>выключили</color> показ панели" },
			{"PanelOn", "Вы <color=green>включили</color> показ панели" },
        };

        #endregion

        #region Hooks

        void InitializeLang()
        {
            lang.RegisterMessages(Messages, this, "ru");
            Messages = lang.GetMessages("ru", this);
        }

        private void OnServerInitialized()
        {
            if (!plugins.Exists("ImageLibrary"))
            {
                PrintWarning("Плагин 'ImageLibrary' не загружен, дальнейшая работа плагина невозможна!");
                Interface.Oxide.UnloadPlugin("ImageLibrary");
                return;
            }
            InitializeLang();

            ImageLibrary.Call("AddImage", "https://ia.wampi.ru/2020/11/07/OO5Bx507.png", "menu");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/5I4CK1F.png", "time");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/OUbRw5Y.png", "players");

            ImageLibrary.Call("AddImage", "https://i.imgur.com/c858A8C.png", "plane");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/Hj79nfP.png", "heli");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/ZJKbaZX.png", "ch47");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/5H4rcv6.png", "cargo");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/hjiqzkH.png", "tank");

            ImageLibrary.Call("AddImage", "https://i.imgur.com/2YSxBtf.png", "plane_called");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/DGZVlHJ.png", "heli_called");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/VR8YaTR.png", "ch47_called");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/FOO3f9E.png", "cargo_called");
            ImageLibrary.Call("AddImage", "https://i.imgur.com/vNziRyx.png", "tank_called");

            InvokeHandler.Instance.InvokeRepeating(UpdateTime, cfg.MainSettings.RefreshTimer, cfg.MainSettings.RefreshTimer);
            InvokeHandler.Instance.InvokeRepeating(DrawNewMessage, cfg.SettingsMessages.RefreshTimer, cfg.SettingsMessages.RefreshTimer);

            foreach (var player in BasePlayer.activePlayerList) OnPlayerConnected(player);
        }

        void Unload()
        {
            InvokeHandler.Instance.CancelInvoke(UpdateTime);
            InvokeHandler.Instance.CancelInvoke(DrawNewMessage);
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
				CuiHelper.DestroyUi(player, Layer1);
                CuiHelper.DestroyUi(player, "Message");
            }
        }

        void OnEntityKill(BaseNetworkable entity)
        {
            if (entity == null) return;
            if (entity is CargoPlane || entity is BaseHelicopter || entity is CargoShip || entity is CH47Helicopter || entity is BradleyAPC)
            {
                var tag = entity is CargoPlane ? "plane" : entity is BradleyAPC ? "tank" : entity is BaseHelicopter ? "heli" : entity is CargoShip ? "cargo" : entity is CH47Helicopter ? "ch47" : "";
                timer.Once(1f, () => { foreach (var players in BasePlayer.activePlayerList) DrawEvents(players, tag); });
            }
            else return;
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerConnected(player));
                return;
            }

            if (!PanelVisibility.ContainsKey(player.userID))
                PanelVisibility.Add(player.userID, true);

            timer.Once(1f, () => {
                foreach (var players in BasePlayer.activePlayerList)
                {
					DrawStoreMenu(players);
					DrawMessage(players);
                    if (PanelVisibility[players.userID] == false) return;
                    DrawMenu(players);
                }
            });
        }

        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            timer.Once(1f, () => {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    if (PanelVisibility[players.userID] == false) return;
                    DrawMenu(players);
                }
            });
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (entity == null || entity.net == null) return;
            if (entity is CargoPlane)
                foreach (var player in BasePlayer.activePlayerList) DrawEvents(player, "plane");
            if (entity is BaseHelicopter)
                foreach (var player in BasePlayer.activePlayerList) DrawEvents(player, "heli");
            if (entity is CargoShip)
                foreach (var player in BasePlayer.activePlayerList) DrawEvents(player, "cargo");
            if (entity is CH47Helicopter)
                foreach (var player in BasePlayer.activePlayerList) DrawEvents(player, "ch47");
            if (entity is BradleyAPC && cfg.EventSets.EnableTank)
                foreach (var player in BasePlayer.activePlayerList) DrawEvents(player, "tank");
            else return;
        }

        #endregion

        #region Custom Bools

        bool HasHeli()
        {
            foreach (var check in BaseNetworkable.serverEntities)
                if (check is BaseHelicopter)
                    return true;
            return false;
        }
        bool HasPlane()
        {
            foreach (var check in BaseNetworkable.serverEntities)
                if (check is CargoPlane)
                    return true;
            return false;
        }
        bool HasCargo()
        {
            foreach (var check in BaseNetworkable.serverEntities)
                if (check is CargoShip)
                    return true;
            return false;
        }

        bool HasCh47()
        {
            foreach (var check in BaseNetworkable.serverEntities)
                if (check is CH47Helicopter)
                    return true;
            return false;
        }

        bool HasBradley()
        {
            foreach (var check in BaseNetworkable.serverEntities)
                if (check is BradleyAPC)
                    return true;
            return false;
        }

        #endregion

        #region Commands

        [ChatCommand("panel")]
        void PanelCommand(BasePlayer player, string command, string[] args)
        {
            int activeplayerscount = 0;
            if (player == null) return;
            if (args.Length < 1)
            {
                player.ChatMessage(Messages["PanelHelpMessage"]);
                return;
            }
            if (args[0] == "off")
            {
                PanelVisibility[player.userID] = false;
                UpdateClose(player);
				player.ChatMessage(Messages["PanelOff"]);
                CuiHelper.DestroyUi(player, Layer);
            }
            else if (args[0] == "on")
            {
                PanelVisibility[player.userID] = true;
                UpdateClose(player);
				player.ChatMessage(Messages["PanelOn"]);
                OnPlayerConnected(player);
            }
            else return;
        }

        [ConsoleCommand("panel")]
        void PanelConsoleCommand(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            int activeplayerscount = 0;
            if (player == null) return;
            if (args.Args.Length < 1)
            {
                player.ChatMessage(Messages["PanelHelpMessage"]);
                return;
            }
            if (args.Args[0] == "off")
            {
                PanelVisibility[player.userID] = false;
				player.ChatMessage(Messages["PanelOff"]);
                CuiHelper.DestroyUi(player, Layer);
                UpdateClose(player);
            }
            else if (args.Args[0] == "on")
            {
                PanelVisibility[player.userID] = true;
				player.ChatMessage(Messages["PanelOn"]);
                OnPlayerConnected(player);
                UpdateClose(player);
            }
            else return;
        }

        #endregion

        #region UI

        void DrawNewMessage()
        {
            foreach (var players in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(players, "Message" + ".Message");
                var container = new CuiElementContainer();
                container.Add(new CuiElement
                {
                    Parent = "Message",
                    Name = "Message" + ".Message",
                    FadeOut = 0.2f,
                    Components =
                    {
                        new CuiTextComponent { Text = cfg.SettingsMessages.Messages[new System.Random().Next(cfg.SettingsMessages.Messages.Count)], Align = TextAnchor.MiddleCenter, FontSize = cfg.SettingsMessages.TextSize, Font = "RobotoCondensed-bold.ttf" },
                        new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"},
                        new CuiOutlineComponent {Color = "0 0 0 1", Distance = "0.5 0.5"},
                    }
                });
                CuiHelper.AddUi(players, container);
            }
        }

        void UpdateTime()
        {
            foreach (var players in BasePlayer.activePlayerList)
            {
                if (PanelVisibility[players.userID] == false) return;
                var time = TOD_Sky.Instance.Cycle.DateTime.ToString("HH:mm");
                CuiHelper.DestroyUi(players, Layer + ".Time");
                var container = new CuiElementContainer();
                container.Add(new CuiElement
                {
                    Parent = Layer,
                    Name = Layer + ".Time",
                    FadeOut = 0.2f,
                    Components =
                    {
                        new CuiTextComponent { Text = time, Color = HexToRustFormat("#ACACACFF"), Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "RobotoCondensed-bold.ttf" },
                        new CuiRectTransformComponent {AnchorMin = "0.1782179 0", AnchorMax = "0.3014302 1"},
                        new CuiOutlineComponent {Color = "0 0 0 0.7", Distance = "0.2 0.2"},
                    }
                });
                CuiHelper.AddUi(players, container);
            }

        }

        void DrawEvents(BasePlayer player, string name)
        {
            if (PanelVisibility[player.userID] == false) return;
            var container = new CuiElementContainer();
            if (name == "plane")
            {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(players, Layer + ".Plane");
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = Layer + ".Plane",
                        FadeOut = 0.1f,
                        Components =
                        {
                            new CuiRawImageComponent { FadeIn = 0.1f, Png = HasPlane() ? (string)ImageLibrary.Call("GetImage", "plane_called") : (string)ImageLibrary.Call("GetImage", "plane") },
                            new CuiRectTransformComponent { AnchorMin = "0.5585056 0.02469136", AnchorMax = "0.6465144 1.012346" }
                        }
                    });
                }
            }
            if (name == "heli")
            {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(players, Layer + ".Heli");
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = Layer + ".Heli",
                        FadeOut = 0.1f,
                        Components =
                        {
                            new CuiRawImageComponent { FadeIn = 0.1f, Png = HasHeli() ? (string)ImageLibrary.Call("GetImage", "heli_called") : (string)ImageLibrary.Call("GetImage", "heli") },
                            new CuiRectTransformComponent { AnchorMin = "0.6465154 0.02469136", AnchorMax = "0.7345243 1.012346" }
                        }
                    });
                }
            }
            if (name == "ch47")
            {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(players, Layer + ".Ch47");
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = Layer + ".Ch47",
                        FadeOut = 0.1f,
                        Components =
                        {
                            new CuiRawImageComponent { FadeIn = 0.1f, Png = HasCh47() ? (string)ImageLibrary.Call("GetImage", "ch47_called") : (string)ImageLibrary.Call("GetImage", "ch47") },
                            new CuiRectTransformComponent { AnchorMin = "0.7345252 0.02469136", AnchorMax = "0.8225342 1.012346" }
                        }
                    });
                }
            }
            if (name == "cargo")
            {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(players, Layer + ".Cargo");
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = Layer + ".Cargo",
                        FadeOut = 0.1f,
                        Components =
                        {
                            new CuiRawImageComponent { FadeIn = 0.1f, Png = HasCargo() ? (string)ImageLibrary.Call("GetImage", "cargo_called") : (string)ImageLibrary.Call("GetImage", "cargo") },
                            new CuiRectTransformComponent { AnchorMin = "0.822535 0.02469136", AnchorMax = "0.910544 1.012346" }
                        }
                    });
                }
            }
            if (name == "tank" && cfg.EventSets.EnableTank)
            {
                foreach (var players in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(players, Layer + ".Tank");
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = Layer + ".Tank",
                        FadeOut = 0.1f,
                        Components =
                        {
                            new CuiRawImageComponent { FadeIn = 0.1f, Png = HasBradley() ? (string)ImageLibrary.Call("GetImage", "tank_called") : (string)ImageLibrary.Call("GetImage", "tank") },
                            new CuiRectTransformComponent { AnchorMin = "0.9127451 0.02469136", AnchorMax = "1.000754 1.012346" }
                        }
                    });
                }
            }
            CuiHelper.AddUi(player, container);
        }

        private void DrawStoreMenu(BasePlayer player)
        {
			if (!cfg.MainSettings.EnableStore) return;
            CuiHelper.DestroyUi(player, Layer1);
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                Image = { Color = HexToRustFormat("#FFFFFF00") },
                RectTransform = { AnchorMin = "0.001041666 0.9648147", AnchorMax = "0.001041666 0.9648147", OffsetMin = "10 -4", OffsetMax = "313 23" },
                CursorEnabled = false,
            }, "Hud", Layer1);
			
                container.Add(new CuiElement
                {
                    Parent = Layer1,
                    Name = Layer1 + ".Store",
                    Components =
                    {
                        new CuiRawImageComponent { Color = HexToRustFormat("#FFFFFFCC"), Png = (string)ImageLibrary.Call("GetImage", "menu") },
                        new CuiRectTransformComponent { AnchorMin = "0.001849664 0.02469136", AnchorMax = "0.08985749 1.012346" }
                    }
                });
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = "chat.say /menu" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = "" }
                }, Layer1 + ".Store");
				
				CuiHelper.AddUi(player, container);
                UpdateClose(player);
		}

        private void UpdateClose(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "Close");
            var container = new CuiElementContainer();
            var command = PanelVisibility[player.userID] == true ? "panel off" : "panel on";
            var text = PanelVisibility[player.userID] == true ? "<" : ">";
            var anchormin = PanelVisibility[player.userID] == true ? "1 0" : "0.1 0";
            var anchormax = PanelVisibility[player.userID] == true ? "1.07 1" : "0.17 1";
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = anchormin, AnchorMax = anchormax, OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0", Command = command },
                Text = { Text = text, Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 20, Font = "robotocondensed-regular.ttf" }
            }, Layer1, "Close");

            CuiHelper.AddUi(player, container);
        }

        private void DrawMenu(BasePlayer player)
        {
            if (PanelVisibility[player.userID] == false) return;
            var online = BasePlayer.activePlayerList.Count().ToString();
            var time = TOD_Sky.Instance.Cycle.DateTime.ToString("HH:mm");

            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                Image = { Color = HexToRustFormat("#FFFFFF00") },
                RectTransform = { AnchorMin = "0.001041666 0.9648147", AnchorMax = "0.001041666 0.9648147", OffsetMin = "10 -4", OffsetMax = "313 23" },
                CursorEnabled = false,
            }, "Hud", Layer);

            if (cfg.MainSettings.EnableStore)
            {
                container.Add(new CuiElement
                {
                    Parent = Layer,
                    Name = Layer + ".Store",
                    Components =
                    {
                        new CuiRawImageComponent { Color = HexToRustFormat("#FFFFFFCC"), Png = (string)ImageLibrary.Call("GetImage", "menu") },
                        new CuiRectTransformComponent { AnchorMin = "0.001849664 0.02469136", AnchorMax = "0.08985749 1.012346" }
                    }
                });
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = "chat.say /menu" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = "" }
                }, Layer + ".Store");
            }

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Color = HexToRustFormat("#FFFFFFCC"), Png = (string)ImageLibrary.Call("GetImage", "time") },
                    new CuiRectTransformComponent { AnchorMin = "0.0898585 0.02469136", AnchorMax = "0.1778662 1.012346" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Name = Layer + ".Time",
                FadeOut = 0.2f,
                Components =
                {
                    new CuiTextComponent { Text = time, Color = HexToRustFormat("#ACACACFF"), Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "RobotoCondensed-bold.ttf" },
                    new CuiRectTransformComponent {AnchorMin = "0.1782179 0", AnchorMax = "0.3014302 1"},
                    new CuiOutlineComponent {Color = "0 0 0 0.7", Distance = "0.2 0.2"},
                }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Color = HexToRustFormat("#FFFFFFCC"), Png = (string)ImageLibrary.Call("GetImage", "players") },
                    new CuiRectTransformComponent { AnchorMin = "0.3032796 0.02469136", AnchorMax = "0.3912872 1.012346" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent { Text = online + "/" + ConVar.Server.maxplayers, Color = HexToRustFormat("#ACACACFF"), Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "RobotoCondensed-bold.ttf" },
                    new CuiRectTransformComponent {AnchorMin = "0.3938391 0", AnchorMax = "0.5522553 1"},
                    new CuiOutlineComponent {Color = "0 0 0 0.7", Distance = "0.2 0.2"},
                }
            });

            container.Add(new CuiElement
            {
                Parent = Layer,
                Name = Layer + ".Plane",
                FadeOut = 0.1f,
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 0.1f, Png = HasPlane() ? (string)ImageLibrary.Call("GetImage", "plane_called") : (string)ImageLibrary.Call("GetImage", "plane") },
                    new CuiRectTransformComponent { AnchorMin = "0.5585056 0.02469136", AnchorMax = "0.6465144 1.012346" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Name = Layer + ".Heli",
                FadeOut = 0.1f,
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 0.1f, Png = HasHeli() ? (string)ImageLibrary.Call("GetImage", "heli_called") : (string)ImageLibrary.Call("GetImage", "heli") },
                    new CuiRectTransformComponent { AnchorMin = "0.6465154 0.02469136", AnchorMax = "0.7345243 1.012346" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Name = Layer + ".Ch47",
                FadeOut = 0.1f,
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 0.1f, Png = HasCh47() ? (string)ImageLibrary.Call("GetImage", "ch47_called") : (string)ImageLibrary.Call("GetImage", "ch47") },
                    new CuiRectTransformComponent { AnchorMin = "0.7345252 0.02469136", AnchorMax = "0.8225342 1.012346" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Name = Layer + ".Cargo",
                FadeOut = 0.1f,
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 0.1f , Png = HasCargo() ? (string)ImageLibrary.Call("GetImage", "cargo_called") : (string)ImageLibrary.Call("GetImage", "cargo") },
                    new CuiRectTransformComponent { AnchorMin = "0.822535 0.02469136", AnchorMax = "0.910544 1.012346" }
                }
            });
            if (cfg.EventSets.EnableTank)
            {
                container.Add(new CuiElement
                {
                    Parent = Layer,
                    Name = Layer + ".Tank",
                    FadeOut = 0.1f,
                    Components =
                    {
                        new CuiRawImageComponent { FadeIn = 0.1f, Png = HasBradley() ? (string)ImageLibrary.Call("GetImage", "tank_called") : (string)ImageLibrary.Call("GetImage", "tank") },
                        new CuiRectTransformComponent { AnchorMin = "0.9127451 0.02469136", AnchorMax = "1.000754 1.012346" }
                    }
                });
            }

            CuiHelper.AddUi(player, container);
        }

        void DrawMessage(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "Message");
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                Image = { Color = HexToRustFormat("#FFFFFF00") },
                RectTransform = { AnchorMin = "0.3453124 -0.0009259344", AnchorMax = "0.6416667 0.0287037" },
                CursorEnabled = false,
            }, "Hud", "Message");

            container.Add(new CuiElement
            {
                Parent = "Message",
                Name = "Message" + ".Message",
                FadeOut = 0.2f,
                Components =
                {
                    new CuiTextComponent { Text = cfg.SettingsMessages.Messages[new System.Random().Next(cfg.SettingsMessages.Messages.Count)], Align = TextAnchor.MiddleCenter, FontSize = cfg.SettingsMessages.TextSize, Font = "RobotoCondensed-bold.ttf" },
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1"},
                    new CuiOutlineComponent {Color = "0 0 0 1", Distance = "0.5 0.5"},
                }
            });
            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Helpers

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex)) hex = "#FFFFFFFF";
            var str = hex.Trim('#');
            if (str.Length == 6) str += "FF";
            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }
            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
            Color color = new Color32(r, g, b, a);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }

        #endregion
    }
}

// --- End of file: GrandRustPanel.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AutoDoorCloser.cs ---
// --- Original Local Path: AutoDoorCloser.cs ---

﻿using System;
using Oxide.Core;
using System.Linq;
using UnityEngine;
using System.Text;
using System.Reflection;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Core.Configuration;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("AutoDoorCloser", "Ryamkk", "1.0.5", ResourceId = 1924)]
	[Description("Переработка плагина AutoDoor с oxide. Почти схожая версия плагина с Moscow.ovh :)")]
	/*
	* Это моя первая пробная работа (доделка плагина) не судите строго :)
	*
	* Планы на следующие обновления:
	* Добавить конфигурацию. ✔
    * Добавить блокировку автоматического закрытия дверей при реидблоке. ✔
    * Добавить блокировку автоматического закрытия дверей при смерти.
    * Добавить отдельный параметр закрытия ворот и ставень.
	*
	*/
    class AutoDoorCloser : RustPlugin
    {
	    [PluginReference]
        Plugin NoEscape;
		
		#region Variables
        readonly DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetFile("AutoDoorCloser");
        List<string> playerPrefs = new List<string>();
		bool CancelOnKill = false;
		#endregion
		
		#region Variables Configuration
		private string Permission; // Названия привилегии для использования команды.
		private bool PermissionSupport; // Разрешить использования функционала плагина только тем игрокам у которых есть привилегия.
		private int DelayDoor; // Задержка перед автоматическим закрытием дверей (в секундах).
		private bool UseRaidBlocker; //Разрешить/Запретить использования автоматического закрытия дверей при РеидБлоке.
		#endregion
		
		#region Configuration
        protected override void LoadDefaultConfig()
        {
            GetVariable(Config, "A. Задержка перед автоматическим закрытием дверей (в секундах).", out DelayDoor, 10);
            GetVariable(Config, "B. (Разрешить/Запретить) использования автоматического закрытия дверей при РеидБлоке.", out UseRaidBlocker, false);
			GetVariable(Config, "C. (Разрешить/Запретить) использования функционала плагина только тем игрокам у которых есть привилегия.", out PermissionSupport, false);
			GetVariable(Config, "D. Названия привилегии для использования команды.", out Permission, "autodoorcloser.access");	
            SaveConfig();
        }
        #endregion

		#region OxideCore
		void OnDoorOpened(Door door, BasePlayer player)
        {
            if (door == null || !door.IsOpen() || door.OwnerID == 0 || door.LookupPrefab().name.Contains("shutter")) return;
            if (PermissionSupport && !IsAllowed(player.UserIDString, Permission)) return;
			if (IsRaidBlocked(player.UserIDString))
			{
                SendReply(player, GetMessage("RAID.BLOCKED", player));
                return;				
			}

            if (playerPrefs.Contains(player.UserIDString)) return;

            timer.Once(DelayDoor, () =>
            {
                if (!door || !door.IsOpen()) return;
                if (CancelOnKill && player.IsDead()) return;

                door.SetFlag(BaseEntity.Flags.Open, false);
                door.SendNetworkUpdateImmediate();
            });
        }
		#endregion
		
		#region Oxide
		void OnServerInitialized() => LoadDefaultConfig();
        void Init()
        {
            LoadDefaultMessages();
            permission.RegisterPermission(Permission, this);
            playerPrefs = dataFile.ReadObject<List<string>>();
        }
		
		bool IsRaidBlocked(string targetId) => UseRaidBlocker && (bool)(NoEscape?.Call("IsRaidBlockedS", targetId) ?? false);
		#endregion

		#region ChatCommand
        [ChatCommand("ad")]
        void AutoDoorCommand(BasePlayer player, string command, string[] args)
        {
            if(PermissionSupport)
			{
			    if (!IsAllowed(player.UserIDString, Permission))
                {
                    SendReply(player, GetMessage("NO.ACCESS", player, command));
                    return;
                }
			}
			
			if (IsRaidBlocked(player.UserIDString))
			{
                SendReply(player, GetMessage("RAID.BLOCKED", player));
                return;				
			}

            if (args.Length == 0)
            {
                SendReply(player, GetMessage("CMD.AD.HELP", player, playerPrefs.Contains(player.UserIDString) ? "<color=#ff0000>Выключен</color>" : "<color=#00ff00>Включено</color>"));
                return;
            }
            if (args.Length == 1)
            {
                switch (args[0])
                {
                    case "on":
                        if (!playerPrefs.Contains(player.UserIDString))
                        {
							SendReply(player, GetMessage("ALREADY.ON", player));
                            return;
                        }

                        playerPrefs.Remove(player.UserIDString);
						SendReply(player, GetMessage("AUTO.CLOSE.ON", player));
                        break;
                    case "off":
                        if (playerPrefs.Contains(player.UserIDString))
                        {
							SendReply(player, GetMessage("ALREADY.OFF", player));
                            return;
                        }
                        playerPrefs.Add(player.UserIDString);
						SendReply(player, GetMessage("AUTO.CLOSE.OFF", player));
                        break;
                }

                dataFile.WriteObject(playerPrefs);
            }
        }
		#endregion
		
	    #region Localization
        void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NO.ACCESS"] = "У вас нет доступа к этой команде.",
				
				["RAID.BLOCKED"] = "Активирован РеидБлок автоматическое закрытия дверей недоступно!",
				
				["ALREADY.ON"] = "Автоматическое закрытие дверей уже включено.", 
                ["AUTO.CLOSE.ON"] = "Вы включили автоматическое закрытие дверей.",
				
				["ALREADY.OFF"] = "Автоматическое закрытия дверей уже выключено.",
                ["AUTO.CLOSE.OFF"] = "Вы выключили автоматическое закрытие дверей.",
				
                ["CMD.AD.HELP"] = "<size=17>Текущее состояние: {0}</size>\n" +
				                  "ДОСТУПНЫЕ КОМАНДЫ:\n" +
				                  "/ad on - Включить автоматическое закрытие дверей.\n" +
				                  "/ad off - Выключить автоматическое закрытие дверей.",
            }, this);
        }
		#endregion
		
		#region Helpers
        string GetMessage(string key, BasePlayer player, params string[] args) => String.Format(lang.GetMessage(key, this, player.UserIDString), args);
		bool IsAllowed(string id, string perm) => permission.UserHasPermission(id, perm);
		T GetConfig<T>(string name, T defaultValue) => Config[name] == null ? defaultValue : (T)Convert.ChangeType(Config[name], typeof(T));
        public static void GetVariable<T>(DynamicConfigFile config, string name, out T value, T defaultValue)
        {
            config[name] = value = config[name] == null ? defaultValue : (T)Convert.ChangeType(config[name], typeof(T));
        }
		#endregion
    }
}


// --- End of file: AutoDoorCloser.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CarCommander.cs ---
// --- Original Local Path: CarCommander.cs ---

﻿//Reference: UnityEngine.VehiclesModule
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using Rust;
using System.Linq;
using System.Globalization;

namespace Oxide.Plugins
{
    [Info("CarCommander", "k1lly0u", "0.2.61")]
    [Description("A custom car controller with many options including persistence")]
    class CarCommander : RustPlugin
    {
        #region Fields
        [PluginReference]
        Plugin Clans, Friends, Spawns, RandomSpawns;

        RestoreData storedData;
        private Dictionary<ulong, double> userCooldowns = new Dictionary<ulong, double>();
        private DynamicConfigFile data, cooldowns;

        private static CarCommander ins;

        private Dictionary<string, string> itemNames = new Dictionary<string, string>();
        private Dictionary<ulong, HotwireManager> isHotwiring = new Dictionary<ulong, HotwireManager>();
        private Dictionary<CommandType, BUTTON> controlButtons;

        private List<CarController> temporaryCars = new List<CarController>();
        private List<CarController> saveableCars = new List<CarController>();

        private bool initialized;
        private bool wipeData = false;

        private int fuelType;        
        private int repairType;
        private string fuelTypeName;
        private string repairTypeName;

        const string carPrefab = "assets/content/vehicles/sedan_a/sedantest.entity.prefab";
        const string boxPrefab = "assets/prefabs/deployable/woodenbox/woodbox_deployed.prefab";
        const string explosionPrefab = "assets/prefabs/npc/m2bradley/effects/bradley_explosion.prefab";

        const string uiHealth = "CCUI_Health";
        const string uiFuel = "CCUI_Fuel";
        #endregion

        #region Oxide Hooks
        private void Loaded()
        {
            permission.RegisterPermission("carcommander.admin", this);
            permission.RegisterPermission("carcommander.use", this);
            permission.RegisterPermission("carcommander.canspawn", this);
            permission.RegisterPermission("carcommander.canbuild", this);
            permission.RegisterPermission("carcommander.ignorecooldown", this);

            lang.RegisterMessages(Messages, this);
            data = Interface.Oxide.DataFileSystem.GetFile("carcommander_data");
            cooldowns = Interface.Oxide.DataFileSystem.GetFile("carcommander_cooldowns");
        }

        private void OnServerInitialized()
        {
            ins = this;
            LoadData();

            ConvertControlButtons();

            fuelType = ItemManager.itemList.Find(x => x.shortname == configData.Fuel.FuelType)?.itemid ?? 0;
            repairType = ItemManager.itemList.Find(x => x.shortname == configData.Repair.Shortname)?.itemid ?? 0;
            fuelTypeName = ItemManager.itemList.Find(x => x.shortname == configData.Fuel.FuelType)?.displayName.english ?? "Invalid fuel shortname set in config!";
            repairTypeName = ItemManager.itemList.Find(x => x.shortname == configData.Repair.Shortname)?.displayName.english ?? "Invalid repair item shortname set in config!";
                       
            initialized = true;

            if (wipeData)
            {
                PrintWarning("Map wipe detected! Wiping previous car data");
                storedData.restoreData.Clear();
                SaveData();
            }

            timer.In(3, RestoreVehicleInventories);
        }

        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;

            if (entity.GetComponent<CarController>())   
                entity.GetComponent<CarController>().ManageDamage(info); 
            else if (entity.GetComponent<StorageContainer>())
            {
                if (entity.GetParentEntity()?.GetComponent<CarController>())
                    NullifyDamage(info);
            }
        }
        
        private void OnHammerHit(BasePlayer player, HitInfo info)
        {
            if (player == null || info == null || info.HitEntity == null || !configData.Repair.Enabled)
                return;

            CarController controller = info.HitEntity.GetComponent<CarController>();
            if (controller != null && controller.entity != null)
            {
                if (controller.entity.health < controller.entity.MaxHealth())
                {
                    if (player.inventory.GetAmount(repairType) >= configData.Repair.Amount)
                    {
                        player.inventory.Take(null, repairType, configData.Repair.Amount);
                        controller.entity.Heal(configData.Repair.Damage);
                        player.Command("note.inv", new object[] { repairType, configData.Repair.Amount * -1 });
                    }
                    else SendReply(player, string.Format(msg("noresources", player.UserIDString), configData.Repair.Amount, repairTypeName));
                }
                else SendReply(player, msg("fullhealth", player.UserIDString));
            }
        }

        private void OnItemDeployed(Deployer deployer, BaseEntity entity)
        {
            if (!configData.Security.Trunk.RequireKey)
                return;

            BasePlayer player = deployer.GetOwnerPlayer();

            if (player == null || entity == null)
                return;

            CarController controller = entity.GetComponentInParent<CarController>();
            if (controller != null)
            {
                Deployable deployable = deployer.GetDeployable();
                if (deployable != null)
                {
                    if (deployable.prefabID == 3518824735 || deployable.prefabID == 2106860026)
                    {
                        if (controller.HasVehicleKey(player)) 
                            return;

                        entity.GetSlot(deployable.slot)?.Kill();

                        if (deployable.prefabID == 3518824735)
                            player.GiveItem(ItemManager.CreateByItemID(1159991980, 1, 0)); // Codelock
                        else player.GiveItem(ItemManager.CreateByItemID(-850982208, 1, 0));

                        SendReply(player, msg("no_key_deploy", player.UserIDString));
                    }
                }
            }            
        }

        private void OnPlayerInput(BasePlayer player, InputState input)
        {
            if (!initialized || player == null) return;

            if (input.WasJustPressed(BUTTON.USE))
            {
                RaycastHit hit;
                if (Physics.SphereCast(player.eyes.position, 0.5f, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward, out hit, 3f))
                {
                    CarController controller = hit.GetEntity()?.GetComponent<CarController>();
                    if (controller != null && controller.HasCommander() && !controller.occupants.Contains(player))
                        CanMountEntity(player, controller.entity);
                }
                return;
            }
            
            if (configData.Fuel.Enabled && input.WasJustPressed(controlButtons[CommandType.FuelTank]))
            {
                RaycastHit hit;
                if (Physics.SphereCast(player.eyes.position, 0.5f, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward, out hit, 3f))
                {
                    CarController controller = hit.GetEntity()?.GetComponent<CarController>();
                    if (controller != null && !controller.HasCommander() && !controller.occupants.Contains(player))
                        OpenInventory(player, controller, controller.fuelTank);
                }
                return;
            }
        }

        private void OnEntityKill(BaseNetworkable networkable)
        {
            BaseCar baseCar = networkable.GetComponent<BaseCar>();
            if (baseCar != null)
            {
                if (storedData.HasRestoreData(baseCar.net.ID))
                    storedData.RemoveData(baseCar.net.ID);
            }
        }

        private void OnNewSave(string filename) => wipeData = true;

        private void OnServerSave()
        {
            for (int i = saveableCars.Count - 1; i >= 0; i--)
            {
                CarController controller = saveableCars[i];
                if (controller == null || controller.entity == null || !controller.entity.IsValid() || controller.entity.IsDestroyed)
                {
                    saveableCars.RemoveAt(i);
                    continue;
                }
                storedData.AddData(controller);
            }
            SaveData();
        }

        private void Unload()
        {

            CarController[] objects = saveableCars.Union(temporaryCars).ToArray();
            for (int i = 0; i < objects.Length; i++)            
                UnityEngine.Object.Destroy(objects[i]);            

            objects = UnityEngine.Object.FindObjectsOfType<CarController>();
            if (objects != null)
            {
                foreach (CarController obj in objects)
                    UnityEngine.Object.Destroy(obj);
            }

            ins = null;
        }

        private object CanPickupEntity(BaseCombatEntity entity, BasePlayer player)
        {
            if (entity.GetComponentInParent<CarController>())
                return false;            
            return null;
        }

        private void OnPlayerDisconnected(BasePlayer player)
        {
            if (isHotwiring.ContainsKey(player.userID))            
                isHotwiring[player.userID].CancelHotwire();            
        }

        private void OnEntityMounted(BaseMountable mountable, BasePlayer player)
        {
            CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
            if (controller != null)
                controller.OnEntityMounted(player, mountable == controller.entity.mountPoints[0].mountable);
        }

        private void OnEntityDismounted(BaseMountable mountable, BasePlayer player)
        {
            CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
            if (controller != null)
            {
                if (controller.Commander?.userID == player.userID)
                {
                    if (isHotwiring.ContainsKey(player.userID))
                    {
                        isHotwiring[player.userID].CancelHotwire();
                        SendReply(player, ins.msg("hotwire_fail_left", player.UserIDString));
                    }
                }
                controller.OnEntityDismounted(player, mountable);
            }            
        }

        private object CanMountEntity(BasePlayer player, BaseMountable mountable)
        {
            CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
            if (controller != null)
            {
                if (player.isMounted)
                    return false;

                if (controller.externallyManaged)
                    return false;

                if (controller.isDieing)
                    return false;

                if (controller.IsFlipped)
                    return false;

                if (!permission.UserHasPermission(player.UserIDString, "carcommander.use"))
                {
                    SendReply(player, msg("nopermission", player.UserIDString));
                    return false;
                }

                if (mountable == controller.entity.mountPoints[0].mountable)                
                    return null;
                else
                {
                    if (configData.Passengers.Enabled)
                    {
                        BasePlayer commander = controller.Commander;

                        if (commander == null)                        
                            return null;                        
                        else
                        {
                            if (!configData.Passengers.UseFriends && !configData.Passengers.UseClans)                            
                                return null;
                            if (configData.Passengers.UseFriends && AreFriends(commander.userID, player.userID))                            
                                return null;
                            if (configData.Passengers.UseClans && IsClanmate(commander.userID, player.userID))                            
                                return null;

                            SendReply(player, msg("not_friend", player.UserIDString));
                            return false;
                        }
                    }
                    else
                    {
                        SendReply(player, msg("not_enabled", player.UserIDString));
                        return false;
                    }
                }
            }            
            return null;
        }

        private object CanDismountEntity(BasePlayer player, BaseMountable mountable)
        {
            CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
            if (controller != null)
            {
                if (controller.externallyManaged)
                    return null;

                // Temporary solution for failed dismount
                controller.DismountPlayer(player, mountable);
                return false;
            }           
            return null;
        }

         
        #endregion

        #region Functions
        private T ParseType<T>(string type)
        {
            try
            {
                return (T)Enum.Parse(typeof(T), type, true);
            }
            catch
            {
                PrintError($"INVALID CONFIG OPTION DETECTED! The value \"{type}\" is an incorrect selection.\nAvailable options are: {Enum.GetNames(typeof(T)).ToSentence()}");
                return default(T);
            }
        }
        private bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm) || permission.UserHasPermission(player.UserIDString, "Carcommander.admin");

        private void ConvertControlButtons()
        {
            controlButtons = new Dictionary<CommandType, BUTTON>
            {
                [CommandType.Accelerate] = ParseType<BUTTON>(configData.Buttons.Accelerate),
                [CommandType.Brake] = ParseType<BUTTON>(configData.Buttons.Brake),
                [CommandType.Left] = ParseType<BUTTON>(configData.Buttons.Left),
                [CommandType.Right] = ParseType<BUTTON>(configData.Buttons.Right),
                [CommandType.Handbrake] = ParseType<BUTTON>(configData.Buttons.HBrake),
                [CommandType.Lights] = ParseType<BUTTON>(configData.Buttons.Lights),
                [CommandType.FuelTank] = ParseType<BUTTON>(configData.Buttons.FuelTank)
            };
        }

        private void NullifyDamage(HitInfo info)
        {
            info.damageTypes = new DamageTypeList();
            info.HitEntity = null;
            info.HitMaterial = 0;
            info.PointStart = Vector3.zero;
        }

        private void OpenInventory(BasePlayer player, CarController controller, ItemContainer container)
        {
            player.inventory.loot.Clear();
            player.inventory.loot.entitySource = controller.entity;
            player.inventory.loot.itemSource = null;
            player.inventory.loot.AddContainer(container);
            player.inventory.loot.SendImmediate();
            player.ClientRPCPlayer(null, player, "RPC_OpenLootPanel", "generic");
            player.SendNetworkUpdate();
        }
        
        private void RestoreVehicleInventories()
        {
            if (storedData.restoreData.Count > 0)
            {
                BaseEntity[] objects = BaseEntity.saveList.Where(x => x is BaseCar).ToArray();
                if (objects != null)
                {
                    foreach (var obj in objects)
                    {
                        if (obj == null || !obj.IsValid() || obj.IsDestroyed)
                            continue;

                        if (storedData.HasRestoreData(obj.net.ID))
                        {
                            obj.gameObject.AddComponent<CarController>();
                        }
                    }
                }
            }
            CheckForSpawns();
        }

        private void CheckForSpawns()
        {
            if (configData.Spawnable.Enabled)
            {
                if (saveableCars.Count < configData.Spawnable.Max)
                {
                    object position = null;
                    if (configData.Spawnable.RandomSpawns)
                    {
                        if (!RandomSpawns)
                        {                            
                            PrintError("RandomSpawns can not be found! Unable to autospawn cars");
                            return;
                        }

                        object success = RandomSpawns.Call("GetSpawnPoint");
                        if (success != null)
                            position = (Vector3)success;
                        else PrintError("Unable to find a valid spawnpoint from RandomSpawns");
                    }
                    else
                    {
                        if (!Spawns)
                        {
                            PrintError("Spawns Database can not be found! Unable to autospawn cars");
                            return;
                        }

                        object success = Spawns.Call("GetSpawnsCount", configData.Spawnable.Spawnfile);
                        if (success is string)
                        {
                            PrintError("An invalid spawnfile has been set in the config. Unable to autospawn cars : " + (string)success);
                            return;
                        }

                        success = Spawns.Call("GetRandomSpawn", configData.Spawnable.Spawnfile);
                        if (success is string)
                        {
                            PrintError((string)success);
                            return;
                        }
                        else position = (Vector3)success;
                    }

                    if (position != null)
                    {
                        List<BaseCar> entities = Facepunch.Pool.GetList<BaseCar>();
                        Vis.Entities((Vector3)position, 5f, entities);
                        if (entities.Count > 0)
                        {
                            timer.In(10, CheckForSpawns);
                            return;
                        }
                        else SpawnAtLocation((Vector3)position, new Quaternion(), true);                            
                        
                        Facepunch.Pool.FreeList(ref entities);
                    }
                }
                timer.In(configData.Spawnable.Time, CheckForSpawns);
            }
        }

        private double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        private string FormatTime(double time)
        {
            TimeSpan dateDifference = TimeSpan.FromSeconds((float)time);
            var days = dateDifference.Days;
            var hours = dateDifference.Hours;
            hours += (days * 24);
            var mins = dateDifference.Minutes;
            var secs = dateDifference.Seconds;
            return string.Format("{0:00}:{1:00}:{2:00}", hours, mins, secs);
        }
        #endregion

        #region API
        private BaseEntity SpawnAtLocation(Vector3 position, Quaternion rotation = default(Quaternion), bool enableSaving = false, bool isExternallyManaged = false, bool repairEnabled = true, bool disableFuel = false, bool disableSecurity = false, bool disableCollision = false)
        {
            BaseEntity entity = GameManager.server.CreateEntity(carPrefab, position + Vector3.up, rotation);
            entity.enableSaving = enableSaving;
            entity.Spawn();

            CarController controller = entity.gameObject.AddComponent<CarController>();

            if (enableSaving)
            {
                saveableCars.Add(controller);
                storedData.AddData(controller);
                SaveData();
            }
            else temporaryCars.Add(controller);

            if (isExternallyManaged)
                controller.SetExternallyManaged();
            else controller.SetFeatures(repairEnabled, disableFuel, disableSecurity, disableCollision);            

            return entity;
        }

        private void ToggleController(BaseCar baseCar, bool enabled)
        {
            if (baseCar == null)
                return;

            CarController controller = baseCar.GetComponent<CarController>();
            if (controller != null)
            {
                controller.enabled = enabled;

                if (!enabled)
                {
                    foreach (var wheel in controller.entity.wheels)
                        wheel.wheelCollider.brakeTorque = 1f;
                }
            }
        }

        private void MountPlayerTo(BasePlayer player, BaseCar baseCar)
        {
            if (player == null)
                return;

            CarController controller = baseCar.GetComponent<CarController>();
            if (controller != null)
            {
                BaseMountable mountable = controller.entity.mountPoints[0].mountable;
                if (mountable != null && mountable.GetMounted() == null)
                {
                    player.EnsureDismounted();
                    mountable._mounted = player;
                    player.MountObject(mountable, 0);
                    player.MovePosition(mountable.mountAnchor.transform.position);
                    player.transform.rotation = mountable.mountAnchor.transform.rotation;
                    player.ServerRotation = mountable.mountAnchor.transform.rotation;
                    player.OverrideViewAngles(mountable.mountAnchor.transform.rotation.eulerAngles);
                    player.eyes.NetworkUpdate(mountable.mountAnchor.transform.rotation);
                    player.ClientRPCPlayer<Vector3>(null, player, "ForcePositionTo", player.transform.position);
                    mountable.SetFlag(BaseEntity.Flags.Busy, true, false);
                    controller.OnEntityMounted(player, true);
                }
            }
        }

        private void EjectAllPlayers(BaseCar baseCar)
        {
            CarController controller = baseCar.GetComponent<CarController>();
            if (controller != null)
                controller.EjectAllPlayers();
        }

        private ItemContainer GetVehicleInventory(BaseCar baseCar)
        {
            CarController controller = baseCar.GetComponent<CarController>();
            if (controller == null)
                return null;

            return controller.container.inventory;
        }

        private ItemContainer GetVehicleFuelTank(BaseCar baseCar)
        {
            CarController controller = baseCar.GetComponent<CarController>();
            if (controller == null)
                return null;

            return controller.fuelTank;
        }
        #endregion

        #region Component
        enum CommandType { Accelerate, Brake, Left, Right, Handbrake, FuelTank, Lights }

        public class CarController : MonoBehaviour
        {
            #region Variables
            public BaseCar entity;

            public StorageContainer container;
            public ItemContainer fuelTank;
            private Rigidbody rb;

            private Dictionary<CommandType, BUTTON> cb;
            private ConfigData.SecurityOptions security;
            private ConfigData.CollisionOptions collision;
            private ConfigData.DecaySettings decay;

            public List<BasePlayer> occupants = new List<BasePlayer>();

            WheelCollider[] allWheels = new WheelCollider[4];
            WheelFrictionCurve sidewaysFriction = new WheelFrictionCurve();
            WheelFrictionCurve sidewaysFrictionHB = new WheelFrictionCurve();

            public ulong ownerId = 0UL;

            private float engineTorque;
            private float brakeTorque;
            private float reverseTorque;

            private float speed;
            private float maxSpeed;

            private bool useDefaultHandling;
            private float maxSteeringAngleSpeed;
            private float maxSteeringAngle;
            private bool applyCounterSteer;
            private float driftAngle;
            private bool isDrifting;

            public float antiRollFrontHorizontal = 5000f; 
            public float antiRollRearHorizontal = 5000f;
            public float antiRollVertical = 500f;

            private float accelInput = 0f;
            private float brakeInput = 0f;
            private float steerInput = 0f;

            private bool repairEnabled;

            private bool fuelEnabled;
            private float consumptionRate;
            private int fuelId;
            private float pendingFuel;
            private float nextFuelCheckTime;
            private bool hasFuel = false;

            private bool isFlipped;
            private float upsideDownTime;

            private int ignitionCode;
            private bool hasBeenHotwired;
            private bool ignitionOn;

            private bool eBrake;
            private bool driftFriction;

            public bool externallyManaged;
            public bool isDieing;
            public bool lightsOn;

            // Temporary solution for dismounting players
            private Vector3[] dismountLocals = new Vector3[]
            {
                new Vector3(-1.4f, 0.1f, 0.5f),
                new Vector3(1.4f, 0.1f, 0.5f),
                new Vector3(-1.4f, 0.1f, -0.5f),
                new Vector3(1.4f, 0.1f, -0.5f)
            };

            public BasePlayer Commander
            {
                get
                {
                    return entity.mountPoints[0].mountable.GetMounted();
                }                
            }

            public bool HasBeenHotwired
            {
                get
                {
                    return hasBeenHotwired;
                }
                set
                {
                    hasBeenHotwired = value;
                }
            }

            public int IgnitionCode
            {
                get
                {
                    return ignitionCode;
                }
                set
                {
                    ignitionCode = value;
                }
            }

            public bool IsFlipped
            {
                get
                {
                    return isFlipped;
                }
            }
            #endregion

            #region Initialization            
            private void Awake()
            {
                entity = GetComponent<BaseCar>();
                entity.enabled = false;

                //if (entity.IsMounted())
                // entity.DismountAllPlayers();
                EjectAllPlayers();

                SetWheelColliders(); 
                InitializeSettings();
                InitializeFuel();
                InitializeInventory();
                InitializeDecay();               
            }

            private void SetWheelColliders()
            {
                if (!ins.configData.Movement.CustomHandling)
                {
                    useDefaultHandling = true;
                    return;
                }

                allWheels = new WheelCollider[] { entity.wheels[0].wheelCollider, entity.wheels[1].wheelCollider, entity.wheels[2].wheelCollider, entity.wheels[3].wheelCollider };

                WheelFrictionCurve forwardFriction = new WheelFrictionCurve();
                forwardFriction.extremumSlip = 0.2f;
                forwardFriction.extremumValue = 1;
                forwardFriction.asymptoteSlip = 0.8f;
                forwardFriction.asymptoteValue = 0.75f;
                forwardFriction.stiffness = 1.5f;

                sidewaysFriction.extremumSlip = 0.2f;
                sidewaysFriction.extremumValue = 0.8f;
                sidewaysFriction.asymptoteSlip = 0.4f;
                sidewaysFriction.asymptoteValue = 0.6f;
                sidewaysFriction.stiffness = 1.0f;

                sidewaysFrictionHB.extremumSlip = 0.15f;
                sidewaysFrictionHB.extremumValue = 0.7f; 
                sidewaysFrictionHB.asymptoteSlip = 0.2f;
                sidewaysFrictionHB.asymptoteValue = 0.5f;
                sidewaysFrictionHB.stiffness = 0.75f;

                var movement = ins.configData.Movement;

                foreach (WheelCollider wc in allWheels)
                {                    
                    JointSpring spring = wc.suspensionSpring;

                    spring.spring = movement.Spring;
                    spring.damper = movement.Damper;
                    spring.targetPosition = movement.Target;

                    wc.suspensionSpring = spring;
                    wc.suspensionDistance = movement.Distance;
                    wc.forceAppPointDistance = 0.1f;
                    wc.mass = 40f;
                    wc.wheelDampingRate = 1f;
                    
                    wc.sidewaysFriction = sidewaysFriction;
                    wc.forwardFriction = forwardFriction;
                }                
            }
           
            private void InitializeSettings()
            {
                rb = entity.GetComponent<Rigidbody>();
                cb = ins.controlButtons;

                security = ins.configData.Security;
                collision = ins.configData.Collision;

                var movement = ins.configData.Movement;
                engineTorque = movement.Acceleration;
                brakeTorque = movement.Brakes;
                reverseTorque = movement.Reverse;

                maxSteeringAngle = movement.Steer;
                maxSteeringAngleSpeed = movement.SteerSpeed;
                applyCounterSteer = movement.CounterSteer;

                antiRollFrontHorizontal = movement.AntiRollFH;
                antiRollRearHorizontal = movement.AntiRollRH;
                antiRollVertical = movement.AntiRollV;

                maxSpeed = movement.Speed;

                repairEnabled = ins.configData.Repair.Enabled;

                entity.mountPoints[0].mountable.canWieldItems = !ins.configData.ActiveItems.DisableDriver;

                for (int i = 1; i < entity.mountPoints.Length; i++)                
                    entity.mountPoints[i].mountable.canWieldItems = !ins.configData.ActiveItems.DisablePassengers;                
            }

            private void InitializeFuel()
            {
                var fuel = ins.configData.Fuel;
                fuelId = ins.fuelType;
                fuelEnabled = fuel.Enabled;
                consumptionRate = fuel.Consumption;

                if (fuelEnabled)
                {
                    fuelTank = new ItemContainer();
                    fuelTank.ServerInitialize(null, 1);
                    if ((int)fuelTank.uid == 0)
                        fuelTank.GiveUID();
                    fuelTank.onlyAllowedItem = ItemManager.itemList.Find(x => x.itemid == fuelId);

                    if (fuel.GiveFuel && !ins.storedData.HasRestoreData(entity.net.ID))
                    {
                        Item fuelItem = ItemManager.CreateByItemID(fuelId, UnityEngine.Random.Range(fuel.FuelAmountMin, fuel.FuelAmountMax));
                        fuelItem.MoveToContainer(fuelTank);
                    }
                }

                hasFuel = fuelEnabled ? GetFuelAmount() < 1 : false;
            }

            private void InitializeInventory()
            {
                if (ins.configData.Inventory.Enabled)
                {
                    container = GameManager.server.CreateEntity(boxPrefab, entity.transform.position, entity.transform.rotation) as StorageContainer;
                    container.enableSaving = false;                    
                    container.skinID = (ulong)1195832261;
                    container.Spawn();

                    Destroy(container.GetComponent<DestroyOnGroundMissing>());
                    Destroy(container.GetComponent<GroundWatch>());
                    Destroy(container.GetComponent<BoxCollider>());

                    container.SetParent(entity);
                    container.transform.localPosition = new Vector3(0, 0.475f, -2.15f);
                    container.transform.localRotation = Quaternion.Euler(-10, 180, 0);

                    
                    container.panelName = "generic";
                    container.inventorySlots = ins.configData.Inventory.Size;
                    container.isLockable = ins.configData.Security.Trunk.CanLock;
                    container.pickup.enabled = false;

                    container.inventory = new ItemContainer();
                    container.inventory.ServerInitialize(null, ins.configData.Inventory.Size);
                    if ((int)container.inventory.uid == 0)
                        container.inventory.GiveUID();
                }

                if (ins.storedData.HasRestoreData(entity.net.ID))
                {
                    ins.storedData.RestoreVehicle(this);
                    ins.saveableCars.Add(this);
                }
            }    
            
            private void InitializeDecay()
            {
                decay = ins.configData.Decay;
                StartDecayTimer();
            }
            #endregion
            
            #region Input
            private void FixedUpdate()
            {               
                if (WaterLevel.Factor(entity.WorldSpaceBounds().ToBounds()) > 0.7f)
                {
                    isDieing = true;
                    enabled = false;

                    if (externallyManaged)
                        Interface.CallHook("OnVehicleUnderwater", entity);
                    else StopToDie();
                    return;
                }

                CheckUpsideDown();
                hasFuel = fuelEnabled ? HasFuel(false) : true;

                BasePlayer player = Commander;
                                
                if (useDefaultHandling)
                {
                    if (player == null || !hasFuel || !ignitionOn)                    
                        entity.NoDriverInput();

                    DoSteering();
                    ApplyForceAtWheels();

                    if (player?.serverInput.WasJustPressed(cb[CommandType.Lights]) ?? false)
                        ToggleLights();

                    entity.SetFlag(BaseEntity.Flags.Reserved1, entity.IsMounted() && hasFuel && ignitionOn, false);
                    entity.SetFlag(BaseEntity.Flags.Reserved2, (!entity.IsMounted() ? false : lightsOn), false);
                                        
                    if (fuelEnabled && ignitionOn)
                        UseFuel(Time.deltaTime * (entity.gasPedal == 0 ? 0.0333f : 1f));
                }
                else
                {
                    if (player == null || !ignitionOn)
                    {
                        accelInput = 0f;
                        brakeInput = 0.5f;
                        eBrake = true;
                    }
                    else
                    {                        
                        rb.drag = rb.velocity.magnitude / 250;

                        if (player.serverInput.WasJustPressed(cb[CommandType.Lights]))
                            ToggleLights();

                        eBrake = player.serverInput.IsDown(cb[CommandType.Handbrake]);

                        if (player.serverInput.IsDown(cb[CommandType.Accelerate]))
                        {
                            accelInput = 1f;
                            brakeInput = 0f;
                        }
                        else if (player.serverInput.IsDown(cb[CommandType.Brake]))
                        {
                            brakeInput = 1f;
                            accelInput = 0f;
                        }
                        else
                        {
                            brakeInput = 0f;
                            accelInput = 0f;
                        }

                        steerInput = player.serverInput.IsDown(cb[CommandType.Left]) ? -1f : player.serverInput.IsDown(cb[CommandType.Right]) ? 1f : 0f;

                        if (fuelEnabled && ignitionOn)
                            UseFuel(Time.deltaTime * (accelInput == 0 ? 0.0333f : 1f));
                    }

                    speed = rb.velocity.magnitude * 3.6f;

                    ApplyAcceleration();
                    AntiRollBars();
                    CheckForDrift();
                    AdjustSteering();

                    entity.SetFlag(BaseEntity.Flags.Reserved1, player != null && hasFuel && ignitionOn, false);
                }
            }
            #endregion

            #region Movement
            #region Default Handling
            private void ApplyForceAtWheels()
            {
                if (entity.rigidBody == null)                
                    return;
                
                Vector3 vector3 = entity.rigidBody.velocity;
                float single = vector3.magnitude * Vector3.Dot(vector3.normalized, base.transform.forward);
                float single1 = entity.brakePedal;
                float single2 = entity.gasPedal;
                if (single > 0f && single2 < 0f)
                {
                    single1 = 100f;
                }
                else if (single < 0f && single2 > 0f)
                {
                    single1 = 100f;
                }
                BaseWheeledVehicle.VehicleWheel[] vehicleWheelArray = entity.wheels;
                for (int i = 0; i < vehicleWheelArray.Length; i++)
                {
                    BaseWheeledVehicle.VehicleWheel vehicleWheel = vehicleWheelArray[i];
                    if (vehicleWheel.wheelCollider.isGrounded)
                    {
                        if (vehicleWheel.powerWheel)
                        {
                            vehicleWheel.wheelCollider.motorTorque = single2 * entity.motorForceConstant;
                        }
                        if (vehicleWheel.brakeWheel)
                        {
                            vehicleWheel.wheelCollider.brakeTorque = single1 * entity.brakeForceConstant;
                        }
                    }
                }
                entity.SetFlag(BaseEntity.Flags.Reserved3, (single1 < 100f ? false : entity.IsMounted()), false);
            }
            
            private void DoSteering()
            {
                BaseWheeledVehicle.VehicleWheel[] vehicleWheelArray = entity.wheels;
                for (int i = 0; i < vehicleWheelArray.Length; i++)
                {
                    BaseWheeledVehicle.VehicleWheel vehicleWheel = vehicleWheelArray[i];
                    if (vehicleWheel.steerWheel)
                    {
                        vehicleWheel.wheelCollider.steerAngle = entity.steering;
                    }
                }
                entity.SetFlag(BaseEntity.Flags.Reserved4, entity.steering < -2f, false);
                entity.SetFlag(BaseEntity.Flags.Reserved5, entity.steering > 2f, false);
            }
            #endregion

            private void ApplyAcceleration()
            {
                if (accelInput > 0 && speed > maxSpeed)
                    accelInput = 0;

                float velocity = rb.velocity.magnitude * Vector3.Dot(rb.velocity.normalized, entity.transform.forward);

                float _motorTorque = hasFuel ? engineTorque * accelInput : 0;
                float _reverseTorque = hasFuel ? -reverseTorque : 0;
                float _brakeTorque = brakeTorque * brakeInput;

                if (velocity < 0.01f && brakeInput > 0.5f)
                {
                    for (int i = 0; i < allWheels.Length; i++)
                    {
                        WheelCollider wc = allWheels[i];
                        wc.brakeTorque = 0;
                        if (i < 2)
                            wc.motorTorque = _reverseTorque * 0.8f;
                        else wc.motorTorque = _reverseTorque;
                    } 
                }
                else
                {
                    if (eBrake)
                    {
                        for (int i = 2; i < allWheels.Length; i++)
                        {
                            WheelCollider wc = allWheels[i];
                            wc.motorTorque = 0;
                            wc.brakeTorque = brakeTorque;

                            if (steerInput != 0 && allWheels[i].isGrounded)
                            {
                                rb.angularVelocity = new Vector3(rb.angularVelocity.x, rb.angularVelocity.y + (steerInput / 60f), rb.angularVelocity.z);
                                wc.sidewaysFriction = sidewaysFrictionHB;
                                driftFriction = true;
                            }
                        }                       
                    }
                    else
                    {
                        for (int i = 0; i < allWheels.Length; i++)
                        {
                            WheelCollider wc = allWheels[i];
                            if (i > 1 && driftFriction)
                            {
                                wc.sidewaysFriction = sidewaysFriction;
                                driftFriction = false;
                            }
                            wc.motorTorque = _motorTorque;
                            wc.brakeTorque = _brakeTorque;                            
                        }
                    }

                    entity.SetFlag(BaseEntity.Flags.Reserved3, Commander == null ? false : (velocity > 0f && accelInput < 0f) || (velocity < 0f && brakeInput > 0f), false);
                }
            }

            private void AdjustSteering()
            {               
                var steerAngle = Mathf.Lerp(maxSteeringAngle, maxSteeringAngleSpeed, (speed / maxSpeed)) * steerInput;

                if (applyCounterSteer)
                    steerAngle = Mathf.Clamp((steerAngle * (steerInput + driftAngle)), -steerAngle, steerAngle);

                allWheels[0].steerAngle = steerAngle;
                allWheels[1].steerAngle = steerAngle;

                entity.SetFlag(BaseEntity.Flags.Reserved4, steerInput == -1f, false);
                entity.SetFlag(BaseEntity.Flags.Reserved5, steerInput == 1f, false);
            }

            private void AntiRollBars()
            {                
                WheelHit FrontWheelHit;

                float travelFL = 1.0f;
                float travelFR = 1.0f;

                bool groundedFL = allWheels[0].GetGroundHit(out FrontWheelHit);

                if (groundedFL)
                    travelFL = (-allWheels[0].transform.InverseTransformPoint(FrontWheelHit.point).y - allWheels[0].radius) / allWheels[0].suspensionDistance;

                bool groundedFR = allWheels[1].GetGroundHit(out FrontWheelHit);

                if (groundedFR)
                    travelFR = (-allWheels[1].transform.InverseTransformPoint(FrontWheelHit.point).y - allWheels[1].radius) / allWheels[1].suspensionDistance;

                float antiRollForceFrontHorizontal = (travelFL - travelFR) * antiRollFrontHorizontal;

                if (groundedFL)
                    rb.AddForceAtPosition(allWheels[0].transform.up * -antiRollForceFrontHorizontal, allWheels[0].transform.position);
                if (groundedFR)
                    rb.AddForceAtPosition(allWheels[1].transform.up * antiRollForceFrontHorizontal, allWheels[1].transform.position);

                WheelHit RearWheelHit;

                float travelRL = 1.0f;
                float travelRR = 1.0f;

                bool groundedRL = allWheels[2].GetGroundHit(out RearWheelHit);

                if (groundedRL)
                    travelRL = (-allWheels[2].transform.InverseTransformPoint(RearWheelHit.point).y - allWheels[2].radius) / allWheels[2].suspensionDistance;

                bool groundedRR = allWheels[3].GetGroundHit(out RearWheelHit);

                if (groundedRR)
                    travelRR = (-allWheels[3].transform.InverseTransformPoint(RearWheelHit.point).y - allWheels[3].radius) / allWheels[3].suspensionDistance;

                float antiRollForceRearHorizontal = (travelRL - travelRR) * antiRollRearHorizontal;

                if (groundedRL)
                    rb.AddForceAtPosition(allWheels[2].transform.up * -antiRollForceRearHorizontal, allWheels[2].transform.position);
                if (groundedRR)
                    rb.AddForceAtPosition(allWheels[3].transform.up * antiRollForceRearHorizontal, allWheels[3].transform.position);
                                
                float antiRollForceFrontVertical = (travelFL - travelRL) * antiRollVertical;

                if (groundedFL)
                    rb.AddForceAtPosition(allWheels[0].transform.up * -antiRollForceFrontVertical, allWheels[0].transform.position);
                if (groundedRL)
                    rb.AddForceAtPosition(allWheels[2].transform.up * antiRollForceFrontVertical, allWheels[2].transform.position);

                float antiRollForceRearVertical = (travelFR - travelRR) * antiRollVertical;

                if (groundedFR)
                    rb.AddForceAtPosition(allWheels[1].transform.up * -antiRollForceRearVertical, allWheels[1].transform.position);
                if (groundedRR)
                    rb.AddForceAtPosition(allWheels[3].transform.up * antiRollForceRearVertical, allWheels[3].transform.position);                                
            }

            private void CheckForDrift()
            {
                WheelHit hit;
                allWheels[3].GetGroundHit(out hit);

                if (speed > 1f && isDrifting && !eBrake)
                    driftAngle = hit.sidewaysSlip * 1f;
                else
                    driftAngle = 0f;

                if (Mathf.Abs(hit.sidewaysSlip) > .25f)
                    isDrifting = true;
                else
                    isDrifting = false;

            }

            private void CheckUpsideDown()
            {
                if (externallyManaged)
                    return;

                if (Vector3.Dot(entity.transform.up, Vector3.down) > 0)
                {
                    if (!isFlipped)
                    {
                        upsideDownTime += Time.deltaTime;

                        if (upsideDownTime > 3f)
                            OnCarFlipped();
                    }
                }
                else
                {
                    upsideDownTime = 0;
                    if (isFlipped)
                        isFlipped = false;
                }
            }

            private void OnCarFlipped()
            {
                isFlipped = true;
                BasePlayer player = Commander;
                if (ins.configData.Repair.CanFlip && player != null)
                    player.ChatMessage(ins.msg("carFlipped", player.UserIDString));
                EjectAllPlayers();
            }

            public void ResetCar()
            {
                entity.GetComponent<Rigidbody>().velocity = Vector3.zero;
                entity.transform.rotation = Quaternion.Euler(0, entity.transform.eulerAngles.y, 0);
                entity.SendNetworkUpdate();
                isFlipped = false;
            }
            #endregion

            #region Collision           
            private void OnCollisionEnter(Collision col)
            {
                if (!collision.Enabled)
                    return;
                
                bool damage = false;
                foreach(var cp in col.contacts)
                {
                    float local = cp.point.y - entity.transform.position.y;
                    if (local > 0.4f)
                    {
                        damage = true;
                        break;
                    }                    
                }

                if (damage)
                {
                    float force = col.relativeVelocity.magnitude;
                    if (force > 2)
                        entity.Hurt(new HitInfo(null, entity, DamageType.Explosion, force * collision.Multiplier));
                }
            }
            #endregion

            #region Decay
            private void StartDecayTimer()
            {
                if (decay.Enabled && occupants.Count == 0)
                    InvokeHandler.Invoke(this, DealDecayDamage, decay.Time);
            }

            private void DealDecayDamage()
            {
                if (entity.IsOutside())
                {
                    float decayDamage = entity.MaxHealth() * (decay.Amount / 100);

                    if (decayDamage >= entity.health)
                    {
                        entity.Die();
                        return;
                    }
                    else entity.Hurt(decayDamage, DamageType.Decay, null, false);                                     
                }
                InvokeHandler.Invoke(this, DealDecayDamage, decay.Time);
            }
            #endregion

            #region Functions
            private void ToggleLights()
            {
                lightsOn = !lightsOn;
                entity.SetFlag(BaseEntity.Flags.Reserved2, lightsOn, false);
            }

            private int GetFuelAmount() => fuelTank.GetAmount(fuelId, true);

            private bool HasFuel(bool forceCheck = false)
            {
                if (Time.time > nextFuelCheckTime || forceCheck)
                {
                    hasFuel = (float)GetFuelAmount() > 0f;
                    nextFuelCheckTime = Time.time + UnityEngine.Random.Range(1f, 2f);

                    if (Commander != null)
                        ins.CreateFuelUI(Commander, this);
                }
                return hasFuel;
            }

            private void UseFuel(float seconds)
            {                
                Item slot = fuelTank.GetSlot(0);
                if (slot == null || slot.amount < 1)                
                    return;
                
                pendingFuel = pendingFuel + seconds * consumptionRate;
                if (pendingFuel >= 1f)
                {
                    int num = Mathf.FloorToInt(pendingFuel);
                    slot.UseItem(num);
                    pendingFuel -= (float)num;
                }
                return;
            }

            public bool HasCommander() => Commander != null;
           
            public void OnDriverMounted(BasePlayer player)
            {
                string message = useDefaultHandling ? string.Format(ins.msg("controls2", player.UserIDString), cb[CommandType.Accelerate], cb[CommandType.Brake], cb[CommandType.Left], cb[CommandType.Right], cb[CommandType.Lights]) : string.Format(ins.msg("controls1", player.UserIDString), cb[CommandType.Accelerate], cb[CommandType.Brake], cb[CommandType.Left], cb[CommandType.Right], cb[CommandType.Handbrake], cb[CommandType.Lights]);

                if (container != null)
                    message += $"\n{ins.msg("access_inventory1", player.UserIDString)}";

                if (fuelEnabled)
                {
                    message += $"\n{string.Format(ins.msg("access_fuel", player.UserIDString), cb[CommandType.FuelTank])}";
                    message += $"\n{string.Format(ins.msg("fuel_type", player.UserIDString), ins.fuelTypeName)}";
                    ins.CreateFuelUI(player, this);
                }
                if (repairEnabled)
                    message += $"\n{string.Format(ins.msg("repairhelp", player.UserIDString), ins.configData.Repair.Amount, ins.repairTypeName)}";

                player.ChatMessage(message);
                CheckIgnitionSystems();
            }

            public void OnPassengerMounted(BasePlayer player)
            {
                string message = string.Empty;

                if (container != null)
                    message += ins.msg("access_inventory1", player.UserIDString);

                if (fuelEnabled)
                {
                    message += $"\n{string.Format(ins.msg("access_fuel", player.UserIDString), cb[CommandType.FuelTank])}";
                    message += $"\n{string.Format(ins.msg("fuel_type", player.UserIDString), ins.fuelTypeName)}";
                }
                if (repairEnabled)
                    message += $"\n{string.Format(ins.msg("repairhelp", player.UserIDString), ins.configData.Repair.Amount, ins.repairTypeName)}";

                if (!string.IsNullOrEmpty(message))
                    player.ChatMessage(message);
            }
            #endregion

            #region Security
            private void CheckIgnitionSystems()
            {
                if (security.Enabled && !hasBeenHotwired)
                {
                    BasePlayer player = Commander;                   
                    if (ignitionCode == 0)
                    {
                        ignitionCode = UnityEngine.Random.Range(100, int.MaxValue);

                        if (security.Ignition.KeyOnEnter && (security.Ignition.KeyChance == 1 || UnityEngine.Random.Range(1, security.Ignition.KeyChance) == 1))
                        {
                            CreateVehicleKey(player);

                            if (ins.configData.Security.Owners)
                                ownerId = player.userID;

                            player.ChatMessage(ins.msg("key_created", player.UserIDString));

                            if (security.Ignition.CanCopy)
                                player.ChatMessage(ins.msg("key_copy", player.UserIDString));
                            ignitionOn = true;
                        }
                        else CheckIgnitionSystems();
                    }
                    else
                    {
                        if (!HasVehicleKey(player))
                        {
                            if (security.Hotwire.Enabled)
                            {
                                player.ChatMessage(ins.msg("no_key_hotwire", player.UserIDString));
                                ignitionOn = false;
                            }
                            else
                            {
                                player.ChatMessage(ins.msg("no_key", player.UserIDString));
                                ignitionOn = false;
                            }
                        }
                        else ignitionOn = true;
                    }
                }
                else ignitionOn = true;
            }

            public void CreateVehicleKey(BasePlayer player)
            {                
                Item keyItem = ItemManager.CreateByItemID(-1112793865, 1, 0);
                keyItem.instanceData = new ProtoBuf.Item.InstanceData
                {
                    dataInt = ignitionCode,
                    ShouldPool = false
                };

                player.GiveItem(keyItem, BaseEntity.GiveItemReason.Crafted);                
            }

            public bool HasVehicleKey(BasePlayer keyHolder)
            {
                if (ins.configData.Security.Owners && keyHolder.userID == ownerId)
                    return true;

                List<Item> items = keyHolder.inventory.FindItemIDs(-1112793865);
                List<Item>.Enumerator enumerator = items.GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        if (!IsCorrectKey(enumerator.Current))                        
                            continue;
                        return true;
                    }
                    return false;
                }
                finally
                {
                    ((IDisposable)enumerator).Dispose();
                }                
            }

            private bool IsCorrectKey(Item key)
            {
                if (key.instanceData == null || key.instanceData.dataInt != ignitionCode)                
                    return false;               
                return true;
            }

            public void OnVehicleHotwired()
            {
                hasBeenHotwired = true;
                ignitionOn = true;
            }
            #endregion

            #region Damage and Destruction
            private void OnDestroy()
            {
                EjectAllPlayers();

                if (container != null)
                {
                    container.inventory.Clear();
                    container.Kill();
                }

                if (entity != null && !entity.IsDestroyed && !entity.enableSaving)
                    entity.Kill();
            }

            public void EjectAllPlayers()
            {                
                ignitionOn = false;

                for (int i = occupants.Count - 1; i >= 0; i--)
                {
                    BasePlayer occupant = occupants.ElementAt(i);
                    BaseMountable mountable = occupant.GetMounted();

                    DismountPlayer(occupant, mountable);                   
                }
            }           
          
            public void ManageDamage(HitInfo info)
            {
                if (isDieing)
                {
                    ins.NullifyDamage(info);
                    return;
                }

                if (info.damageTypes.GetMajorityDamageType() == DamageType.Bullet)
                    info.damageTypes.ScaleAll(200);

                if (info.damageTypes.Total() >= entity.health)
                {
                    isDieing = true;
                    ins.NullifyDamage(info);
                    OnDeath();
                    return;
                }
              
                foreach (var occupant in occupants)
                    ins.CreateHealthUI(occupant, this);
            }

            public void StopToDie()
            {
                enabled = false;
                isDieing = true;

                if (entity != null)
                {
                    entity.SetFlag(BaseEntity.Flags.Reserved1, false, false);

                    foreach (var wheel in entity.wheels)
                    {
                        wheel.wheelCollider.motorTorque = 0;
                        wheel.wheelCollider.brakeTorque = float.MaxValue;
                    }

                    rb.velocity = Vector3.zero;
                } 

                EjectAllPlayers();
                InvokeHandler.Invoke(this, OnDeath, 5f);
            }
           
            private void OnDeath()
            {
                enabled = false;

                EjectAllPlayers();

                if (ins.configData.Death.Enabled && ins.configData.Death.Amount > 0)                
                    RadiusDamage(ins.configData.Death.Amount, ins.configData.Death.Radius, transform.position);                

                Effect.server.Run(explosionPrefab, transform.position);                

                if (ins.configData.Inventory.DropInv)
                {
                    if (container != null)
                        container.inventory.Drop("assets/prefabs/misc/item drop/item_drop.prefab", transform.position + Vector3.up + (UnityEngine.Random.onUnitSphere * UnityEngine.Random.Range(2f, 3f)), new Quaternion());
                    if (fuelTank != null)
                        fuelTank.Drop("assets/prefabs/misc/item drop/item_drop.prefab", transform.position + Vector3.up + (UnityEngine.Random.onUnitSphere * UnityEngine.Random.Range(2f, 3f)), new Quaternion());
                }

                ins.NextTick(() =>
                {
                    if (entity != null && !entity.IsDestroyed)
                        entity.DieInstantly();
                    Destroy(this);
                });
            }

            private void RadiusDamage(float amount, float radius, Vector3 position)
            {
                List<BaseCombatEntity> entities = Facepunch.Pool.GetList<BaseCombatEntity>();
                Vis.Entities(position, radius, entities);

                if (entities.Count > 0)
                {
                    for (int i = entities.Count - 1; i >= 0; i--)
                    {
                        BaseCombatEntity baseCombatEntity = entities[i];                     
                        if (baseCombatEntity == null || baseCombatEntity == entity || (baseCombatEntity.GetParentEntity() != null && baseCombatEntity.GetParentEntity() == entity))
                            continue;

                        float distance = Vector3.Distance(position, baseCombatEntity.transform.position);
                        baseCombatEntity.Hurt(amount * (1 - (distance / radius)), DamageType.Explosion, null);
                    }
                }

                Facepunch.Pool.FreeList(ref entities);
            }
            #endregion

            #region External Toggles
            public void SetExternallyManaged()
            {
                externallyManaged = true;
                repairEnabled = false;
                DisableFuelConsumption();
                DisableSecuritySettings();
                DisableCollisionSettings();
            }

            public void SetFeatures(bool repairEnabled, bool disableFuel, bool disableSecurity, bool disableCollision)
            {
                this.repairEnabled = repairEnabled;
                if (disableFuel)
                    DisableFuelConsumption();

                if (disableSecurity)
                    DisableSecuritySettings();

                if (disableCollision)
                    DisableCollisionSettings();
            }            

            public void DisableFuelConsumption()
            {
                if (fuelEnabled)
                {
                    fuelEnabled = false;
                    hasFuel = true;

                    foreach (var occupant in occupants)
                        ins.DestroyUI(occupant, uiFuel);
                }
            }

            public void DisableSecuritySettings()
            {                
                security.Enabled = false;
                security.Hotwire.Enabled = false;
                security.Trunk.CanLock = false;
            }

            public void DisableCollisionSettings()
            {
                collision.Enabled = false;
            }
            #endregion

            #region Mounting
            public void OnEntityMounted(BasePlayer player, bool isDriver)
            {
                occupants.Add(player);

                ins.CreateHealthUI(player, this);

                if (isDriver)                
                    OnDriverMounted(player);                
                else OnPassengerMounted(player);                

                if (InvokeHandler.IsInvoking(this, DealDecayDamage))
                    InvokeHandler.CancelInvoke(this, DealDecayDamage);
            }

            // Temporary solution for dismounting players until death on fail is fixed
            public void DismountPlayer(BasePlayer player, BaseMountable mountable)
            {
                if (player == null)
                    return;

                Vector3 dismountPosition = GetDismountPosition(mountable);
                Quaternion dismountRotation = Quaternion.Euler(0, entity.dismountAnchor.rotation.y, 0);

                player.DismountObject();

                player.transform.rotation = dismountRotation;
                player.MovePosition(dismountPosition);
                player.SendNetworkUpdateImmediate(false);
                player.ClientRPCPlayer(null, player, "ForcePositionTo", dismountPosition);
                mountable._mounted = null;
                entity.SetFlag(BaseEntity.Flags.Busy, false, false);
                player.EnsureDismounted();

                ins.OnEntityDismounted(mountable, player);
                //OnEntityDismounted(player, mountable);
            }

            private Vector3 GetDismountPosition(BaseMountable mountable)
            {
                int index = entity.mountPoints.Select(x => x.mountable).ToList().IndexOf(mountable);
                Vector3 dismountLocal = dismountLocals[index];

                Vector3 dismountPosition = mountable.transform.position + (mountable.transform.right * dismountLocal.x) + (mountable.transform.up * 0.1f) + (mountable.transform.forward * dismountLocal.z);

                if (TerrainMeta.HeightMap.GetHeight(dismountPosition) > dismountPosition.y)
                    dismountPosition.y = TerrainMeta.HeightMap.GetHeight(dismountPosition) + 0.5f;

                if (!Physics.CheckCapsule(dismountPosition + new Vector3(0f, 0.41f, 0f), dismountPosition + new Vector3(0f, 1.39f, 0f), 0.5f, LayerMask.GetMask("Construction", "Default", "Vehicle_Movement", "World")))
                {
                    Vector3 vector3 = dismountPosition + new Vector3(0f, 0.9f, 0f);
                    if (mountable.IsVisible(vector3) && !Physics.Linecast(mountable.transform.position + new Vector3(0f, 1f, 0f), vector3, 1075904513))
                        return dismountPosition;
                }
                return mountable.transform.position + new Vector3(0f, 1.5f, 0f);
            }
            // End of temporary solution

            public void OnEntityDismounted(BasePlayer player, BaseMountable mountable)
            {
                occupants.Remove(player);
                ins.DestroyAllUI(player);

                if (mountable != null && entity.mountPoints[0].mountable == mountable)                
                    ignitionOn = false;                

                if (occupants.Count == 0)
                    StartDecayTimer();
            }      
            #endregion
        }

        class HotwireManager
        {
            public BasePlayer player;
            public CarController controller;
            public Timer hwTimer;

            public HotwireManager() { }

            public HotwireManager(BasePlayer player, CarController controller)
            {
                this.player = player;
                this.controller = controller;
                BeginHotwire();
            }

            private void BeginHotwire()
            {
                int chance = ins.configData.Security.Hotwire.Chance;
                int time = ins.configData.Security.Hotwire.Time;

                hwTimer = ins.timer.In(ins.configData.Security.Hotwire.Time, () =>
                {
                    if (player == null || controller == null)
                        return;

                    if (controller.Commander != player)                    
                        player.ChatMessage(ins.msg("hotwire_fail_left", player.UserIDString));
                    else
                    {
                        if (UnityEngine.Random.Range(1, ins.configData.Security.Hotwire.Chance) == 1)
                        {
                            controller.OnVehicleHotwired();
                            player.ChatMessage(ins.msg("hotwire_success", player.UserIDString));
                        }
                        else
                        {
                            if (ins.configData.Security.Hotwire.DealDamage)
                            {
                                Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.shock.prefab", player.transform.position, new Vector3(), null, true);
                                player.Hurt(15f, DamageType.ElectricShock, controller.entity, false);
                            }
                            player.ChatMessage(ins.msg("hotwire_fail", player.UserIDString));
                        }
                    }
                    ins.isHotwiring.Remove(player.userID);
                });
            }

            public void CancelHotwire()
            {
                if (hwTimer != null)
                    hwTimer.Destroy();

                ins.isHotwiring.Remove(player.userID);
            }
        }
        #endregion

        #region UI
        #region UI Elements
        public static class UI
        {
            static public CuiElementContainer ElementContainer(string panelName, string color, UI4 dimensions, bool useCursor = false, string parent = "Overlay")
            {
                var NewElement = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color},
                            RectTransform = {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax()},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                return NewElement;
            }
            static public void Panel(ref CuiElementContainer container, string panel, string color, UI4 dimensions, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() },
                    CursorEnabled = cursor
                },
                panel);
            }
            static public void Label(ref CuiElementContainer container, string panel, string text, int size, UI4 dimensions, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                {
                    Text = { FontSize = size, Align = align, Text = text, Font = "droidsansmono.ttf" },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() }
                },
                panel);

            }
            public static string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                    hexColor = hexColor.Substring(1);
                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double)red / 255} {(double)green / 255} {(double)blue / 255} {alpha}";
            }
        }
        public class UI4
        {
            public float xMin, yMin, xMax, yMax;
            public UI4(float xMin, float yMin, float xMax, float yMax)
            {
                this.xMin = xMin;
                this.yMin = yMin;
                this.xMax = xMax;
                this.yMax = yMax;
            }
            public string GetMin() => $"{xMin} {yMin}";
            public string GetMax() => $"{xMax} {yMax}";
        }
        #endregion

        #region UI Creation        
        private void CreateHealthUI(BasePlayer player, CarController controller)
        {
            var opt = configData.UI.Health;
            if (!opt.Enabled)
                return;

            var container = UI.ElementContainer(uiHealth, UI.Color(opt.Color1, opt.Color1A), new UI4(opt.Xmin, opt.YMin, opt.XMax, opt.YMax));
            UI.Label(ref container, uiHealth, msg("health", player.UserIDString), 12, new UI4(0.03f, 0, 1, 1), TextAnchor.MiddleLeft);
            var percentHealth = System.Convert.ToDouble((float)controller.entity.health / (float)controller.entity.MaxHealth());
            float yMaxHealth = 0.25f + (0.73f * (float)percentHealth);
            UI.Panel(ref container, uiHealth, UI.Color(opt.Color2, opt.Color2A), new UI4(0.25f, 0.1f, yMaxHealth, 0.9f));
            DestroyUI(player, uiHealth);
            CuiHelper.AddUi(player, container);
        }

        private void CreateFuelUI(BasePlayer player, CarController controller)
        {
            if (configData.Fuel.Enabled)
            {
                var opt = configData.UI.Fuel;
                if (!opt.Enabled)
                    return;

                int fuelAmount = controller.fuelTank.GetAmount(fuelType, false);
                var container = UI.ElementContainer(uiFuel, UI.Color(opt.Color1, opt.Color1A), new UI4(opt.Xmin, opt.YMin, opt.XMax, opt.YMax));
                UI.Label(ref container, uiFuel, string.Format(msg("fuel", player.UserIDString), $"<color={opt.Color2}>{(fuelAmount == 0 ? msg("fuel_empty", player.UserIDString) : fuelAmount.ToString())}</color>"), 12, new UI4(0.03f, 0, 1, 1), TextAnchor.MiddleLeft);
                DestroyUI(player, uiFuel);
                CuiHelper.AddUi(player, container);
            }
        }

        private void DestroyUI(BasePlayer player, string panel) => CuiHelper.DestroyUi(player, panel);

        private void DestroyAllUI(BasePlayer player)
        {
            DestroyUI(player, uiHealth);
            DestroyUI(player, uiFuel);
        }
        #endregion
        #endregion

        #region Feature Commands
        [ChatCommand("copykey")]
        void cmdCopyKey(BasePlayer player, string command, string[] args)
        {
            if (!configData.Security.Enabled || !configData.Security.Ignition.CanCopy)
                return;

            if (player.isMounted)
            {
                BaseMountable mountable = player.GetMounted();
                if (mountable != null)
                {
                    CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
                    if (controller != null && controller.Commander == player)
                    {
                        if (!controller.HasVehicleKey(player))
                            SendReply(player, msg("not_has_key", player.UserIDString));
                        else
                        {
                            controller.CreateVehicleKey(player);
                            SendReply(player, msg("key_copied", player.UserIDString));
                        }
                        return;
                    }
                }
            }
            SendReply(player, msg("not_commander", player.UserIDString));
        }

        [ChatCommand("hotwire")]
        void cmdHotwire(BasePlayer player, string command, string[] args)
        {
            if (!configData.Security.Enabled || !configData.Security.Hotwire.Enabled)
                return;

            if (player.isMounted)
            {
                BaseMountable mountable = player.GetMounted();
                if (mountable != null)
                {
                    CarController controller = mountable.VehicleParent()?.GetComponent<CarController>();
                    if (controller != null && controller.Commander == player)
                    {                      
                        if (controller.HasBeenHotwired)
                        {
                            SendReply(player, msg("already_hotwired", player.UserIDString));
                            return;
                        }

                        if (controller.HasVehicleKey(player))
                        {
                            SendReply(player, msg("has_key", player.UserIDString));
                            return;
                        }

                        if (isHotwiring.ContainsKey(player.userID))
                        {
                            SendReply(player, msg("already_hotwiring", player.UserIDString));
                            return;
                        }

                        isHotwiring.Add(player.userID, new HotwireManager(player, controller));
                        SendReply(player, string.Format(msg("begun_hotwiring", player.UserIDString), configData.Security.Hotwire.Time, configData.Security.Hotwire.Chance));
                        return;
                    }
                }
            }
            SendReply(player, msg("not_commander", player.UserIDString));
        }
        #endregion

        #region Commands
        [ChatCommand("spawncar")]
        void cmdSpawnCar(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "carcommander.canspawn")) return;            

            RaycastHit hit;
            if (Physics.SphereCast(player.eyes.position, 0.1f, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward, out hit, 20f))
            {
                BaseEntity entity = hit.GetEntity();
                if (entity != null && entity is BaseCar)
                {
                    SendReply(player, msg("noStacking", player.UserIDString));
                    return;
                }
            }

            if (!permission.UserHasPermission(player.UserIDString, "carcommander.ignorecooldown"))
            {
                double time = GrabCurrentTime();
                if (!userCooldowns.ContainsKey(player.userID))
                    userCooldowns.Add(player.userID, time + configData.Spawnable.Cooldown);
                else
                {
                    double nextUseTime = userCooldowns[player.userID];
                    if (nextUseTime > time)
                    {
                        SendReply(player, string.Format(msg("onCooldown", player.UserIDString), FormatTime(nextUseTime - time)));
                        return;
                    }
                    else userCooldowns[player.userID] = time + configData.Spawnable.Cooldown;
                }
            }

            Vector3 position = player.eyes.position + (player.eyes.MovementForward() * 5f);

            float y = TerrainMeta.HeightMap.GetHeight(position);
            if (y > position.y)
                position.y = y;

            SpawnAtLocation(position, Quaternion.Euler(0, player.eyes.rotation.eulerAngles.y - 90f, 0), true);
        }

        [ChatCommand("admincar")]
        void cmdAdminCar(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "carcommander.admin")) return;
                   
            RaycastHit hit;
            if (Physics.SphereCast(player.eyes.position, 0.1f, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward, out hit, 20f))
            {
                BaseEntity entity = hit.GetEntity();
                if (entity != null && entity is BaseCar)
                {
                    SendReply(player, msg("noStacking", player.UserIDString));
                    return;
                }
            }

            Vector3 position = player.eyes.position + (player.eyes.MovementForward() * 5f);

            float y = TerrainMeta.HeightMap.GetHeight(position);
            if (y > position.y)
                position.y = y;

            SpawnAtLocation(position, Quaternion.Euler(0, player.eyes.rotation.eulerAngles.y - 90f, 0), (args.Length == 1 && args[0].ToLower() == "save"));
        }

        [ChatCommand("clearcars")]
        void cmdClearCars(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "carcommander.admin")) return;

            for (int i = saveableCars.Count - 1; i >= 0; i--)
            {
                var car = saveableCars[i];
                if (car != null && car.entity != null && !car.entity.IsDestroyed)
                    car.StopToDie();
            }

            for (int i = temporaryCars.Count - 1; i >= 0; i--)
            {
                var car = temporaryCars[i];
                if (car != null && car.entity != null && !car.entity.IsDestroyed)
                    car.StopToDie();
            }

            saveableCars.Clear();
            temporaryCars.Clear();
            SaveData();
        }

        [ChatCommand("flipcar")]
        void cmdFlipCar(BasePlayer player, string command, string[] args)
        {
            if (!configData.Repair.CanFlip)
                return;

            RaycastHit hit;
            if (Physics.SphereCast(player.eyes.position, 0.1f, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward, out hit, 3))
            {
                BaseEntity entity = hit.GetEntity();
                if (entity != null)
                {
                    CarController controller = entity.GetComponent<CarController>();
                    if (controller != null && controller.IsFlipped)
                    {
                        controller.ResetCar();
                    }
                }
            }                       
        }

        [ChatCommand("buildcar")]
        private void cmdBuildHeli(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "carcommander.canbuild"))
            {
                SendReply(player, msg("nopermissionbuild", player.UserIDString));
                return;
            }

            if (!configData.Build.Enabled)
                return;

            if (args.Length > 0)
            {
                if (args[0].ToLower() == "costs")
                {
                    string str = msg("costs", player.UserIDString);
                    foreach (ConfigData.BuildOptions.BuildOption cost in configData.Build.Costs)
                    {
                        ItemDefinition itemDefinition = ItemManager.FindItemDefinition(cost.Shortname);
                        if (itemDefinition == null)
                            continue;

                        str += $"\n- {cost.Amount} x {itemDefinition.displayName.translated}";
                    }
                    SendReply(player, str);                   
                }
                return;
            }
            
            List<ItemCost> requiredItems = new List<ItemCost>();

            foreach (ConfigData.BuildOptions.BuildOption cost in configData.Build.Costs)
            {
                ItemDefinition itemDefinition = ItemManager.FindItemDefinition(cost.Shortname);
                if (itemDefinition == null)
                    continue;

                if (player.inventory.GetAmount(itemDefinition.itemid) < cost.Amount)
                {
                    SendReply(player, string.Format(msg("notenoughres", player.UserIDString), cost.Amount, itemDefinition.displayName.translated));
                    return;
                }

                requiredItems.Add(new ItemCost(itemDefinition.itemid, cost.Amount));
            }

            if (configData.Build.Cooldown)
            {
                if (!permission.UserHasPermission(player.UserIDString, "carcommander.ignorecooldown"))
                {
                    double time = GrabCurrentTime();
                    if (!userCooldowns.ContainsKey(player.userID))
                        userCooldowns.Add(player.userID, time + configData.Spawnable.Cooldown);
                    else
                    {
                        double nextUseTime = userCooldowns[player.userID];
                        if (nextUseTime > time)
                        {
                            SendReply(player, string.Format(msg("onCooldown", player.UserIDString), FormatTime(nextUseTime - time)));
                            return;
                        }
                        else userCooldowns[player.userID] = time + configData.Spawnable.Cooldown;
                    }
                }
            }

            foreach (ItemCost cost in requiredItems)
                player.inventory.Take(null, cost.itemId, cost.amount);

            Vector3 position = player.eyes.position + (player.eyes.MovementForward() * 5f);

            float y = TerrainMeta.HeightMap.GetHeight(position);
            if (y > position.y)
                position.y = y;

            SpawnAtLocation(position, Quaternion.Euler(0, player.eyes.rotation.eulerAngles.y - 90f, 0), true);
        }
        #endregion

        #region Console Commands
        [ConsoleCommand("clearcars")]
        void ccmdClearCars(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null || arg.Args == null)
                return;

            for (int i = saveableCars.Count - 1; i >= 0; i--)
            {
                var car = saveableCars[i];
                if (car != null && car.entity != null && !car.entity.IsDestroyed)
                    car.StopToDie();
            }

            for (int i = temporaryCars.Count - 1; i >= 0; i--)
            {
                var car = temporaryCars[i];
                if (car != null && car.entity != null && !car.entity.IsDestroyed)
                    car.StopToDie();
            }

            saveableCars.Clear();
            temporaryCars.Clear();
            SaveData();
        }

        [ConsoleCommand("spawncar")]
        void ccmdSpawnCar(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null || arg.Args == null)
                return;

            if (arg.Args.Length == 1 || arg.Args.Length == 2)
            {
                BasePlayer player = covalence.Players.Connected.FirstOrDefault(x => x.Id == arg.GetString(0))?.Object as BasePlayer;
                if (player != null)
                {
                    Vector3 position = player.eyes.position + (player.eyes.MovementForward() * 5f);

                    float y = TerrainMeta.HeightMap.GetHeight(position);
                    if (y > position.y)
                        position.y = y;

                    SpawnAtLocation(position, Quaternion.Euler(0, player.eyes.rotation.eulerAngles.y - 90f, 0), (arg.Args.Length == 2 && arg.Args[1].ToLower() == "save"));
                }
                return;
            }
            if (arg.Args.Length > 2)
            {
                float x;
                float y;
                float z;

                float rotation = 0;

                if (float.TryParse(arg.GetString(0), out x))
                {
                    if (float.TryParse(arg.GetString(1), out y))
                    {
                        if (float.TryParse(arg.GetString(2), out z))
                        {
                            if (arg.Args.Length > 4)
                                float.TryParse(arg.GetString(4), out rotation);

                            SpawnAtLocation(new Vector3(x, y, z), rotation == 0 ? new Quaternion() : Quaternion.Euler(0, rotation, 0), (arg.Args.Length >= 4 && arg.Args[3].ToLower() == "save"));
                            return;
                        }
                    }
                }
                PrintError($"Invalid arguments supplied to spawn a car at position : (x = {arg.GetString(0)}, y = {arg.GetString(1)}, z = {arg.GetString(2)})");
            }
        }
        #endregion

        #region Friends
        private bool AreFriends(ulong playerId, ulong friendId)
        {
            if (Friends && configData.Passengers.UseFriends)
                return (bool)Friends?.Call("AreFriends", playerId.ToString(), friendId.ToString());
            return true;
        }
        private bool IsClanmate(ulong playerId, ulong friendId)
        {
            if (Clans && configData.Passengers.UseClans)
            {
                object playerTag = Clans?.Call("GetClanOf", playerId);
                object friendTag = Clans?.Call("GetClanOf", friendId);
                if (playerTag is string && friendTag is string)
                {
                    if (!string.IsNullOrEmpty((string)playerTag) && !string.IsNullOrEmpty((string)friendTag) && (playerTag == friendTag))
                        return true;
                }
                return false;
            }
            return true;
        }
        #endregion

        #region Config        
        private ConfigData configData;
        class ConfigData
        {
            [JsonProperty(PropertyName = "Movement Settings")]
            public MovementSettings Movement { get; set; }
            [JsonProperty(PropertyName = "Button Configuration")]
            public ButtonConfiguration Buttons { get; set; }
            [JsonProperty(PropertyName = "Passenger Options")]
            public PassengerOptions Passengers { get; set; }
            [JsonProperty(PropertyName = "Inventory Options")]
            public InventoryOptions Inventory { get; set; }
            [JsonProperty(PropertyName = "Spawnable Options")]
            public SpawnableOptions Spawnable { get; set; }
            [JsonProperty(PropertyName = "Fuel Options")]
            public FuelOptions Fuel { get; set; }
            [JsonProperty(PropertyName = "Repair Options")]
            public RepairSettings Repair { get; set; }
            [JsonProperty(PropertyName = "Death Options")]
            public DeathOptions Death { get; set; }
            [JsonProperty(PropertyName = "Active Item Options")]
            public ActiveItemOptions ActiveItems { get; set; }
            [JsonProperty(PropertyName = "Security Options")]
            public SecurityOptions Security { get; set; }
            [JsonProperty(PropertyName = "Collision Options")]
            public CollisionOptions Collision { get; set; }
            [JsonProperty(PropertyName = "Decay Options")]
            public DecaySettings Decay { get; set; }
            [JsonProperty(PropertyName = "UI Options")]
            public UIOptions UI { get; set; }
            [JsonProperty(PropertyName = "Build Options")]
            public BuildOptions Build { get; set; }

            public class BuildOptions
            {
                [JsonProperty(PropertyName = "Allow users to build a car")]
                public bool Enabled { get; set; }

                [JsonProperty(PropertyName = "Use cooldown timers")]
                public bool Cooldown { get; set; }

                [JsonProperty(PropertyName = "Build Costs")]
                public List<BuildOption> Costs { get; set; }

                public class BuildOption
                {
                    [JsonProperty(PropertyName = "Item Shortname")]
                    public string Shortname { get; set; }
                    [JsonProperty(PropertyName = "Amount")]
                    public int Amount { get; set; }
                }
            }
            public class ButtonConfiguration
            {
                [JsonProperty(PropertyName = "Open inventory")]
                public string Inventory { get; set; }
                public string Accelerate { get; set; }
                [JsonProperty(PropertyName = "Brake / Reverse")]
                public string Brake { get; set; }
                [JsonProperty(PropertyName = "Turn Left")]
                public string Left { get; set; }
                [JsonProperty(PropertyName = "Turn Right")]
                public string Right { get; set; }
                [JsonProperty(PropertyName = "Hand Brake")]
                public string HBrake { get; set; }
                [JsonProperty(PropertyName = "Open fuel tank")]
                public string FuelTank { get; set; }
                [JsonProperty(PropertyName = "Toggle lights")]
                public string Lights { get; set; }
            }
            public class DecaySettings
            {
                [JsonProperty(PropertyName = "Enable decay system")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Amount of decay per decay tick (percentage of maximum health)")]
                public float Amount { get; set; }
                [JsonProperty(PropertyName = "Time between decay ticks (seconds)")]
                public int Time { get; set; }
            }
            public class RepairSettings
            {
                [JsonProperty(PropertyName = "Repair system enabled")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Shortname of item required to repair")]
                public string Shortname { get; set; }
                [JsonProperty(PropertyName = "Amount of item required to repair")]
                public int Amount { get; set; }
                [JsonProperty(PropertyName = "Amount of damage repaired per hit")]
                public int Damage { get; set; }
                [JsonProperty(PropertyName = "Allow players to flip cars that are on their roof")]
                public bool CanFlip { get; set; }
            }
            public class MovementSettings
            {
                [JsonProperty(PropertyName = "Use custom handling options")]
                public bool CustomHandling { get; set; }
                [JsonProperty(PropertyName = "Engine - Acceleration torque")]
                public float Acceleration { get; set; }
                [JsonProperty(PropertyName = "Engine - Brake  torque")]
                public float Brakes { get; set; }
                [JsonProperty(PropertyName = "Engine - Reverse  torque")]
                public float Reverse { get; set; }
                [JsonProperty(PropertyName = "Engine - Maximum speed")]
                public float Speed { get; set; }

                [JsonProperty(PropertyName = "Steering - Max angle")]
                public float Steer { get; set; }
                [JsonProperty(PropertyName = "Steering - Max angle at speed")]
                public float SteerSpeed { get; set; }
                [JsonProperty(PropertyName = "Steering - Automatically counter steer")]
                public bool CounterSteer { get; set; }                

                [JsonProperty(PropertyName = "Suspension - Force")]
                public float Spring { get; set; }
                [JsonProperty(PropertyName = "Suspension - Damper")]
                public float Damper { get; set; }
                [JsonProperty(PropertyName = "Suspension - Target position (min 0, max 1)")]                
                public float Target { get; set; }
                [JsonProperty(PropertyName = "Suspension - Distance")]
                public float Distance { get; set; }


                [JsonProperty(PropertyName = "Anti Roll - Front horizontal force")]
                public float AntiRollFH { get; set; }
                [JsonProperty(PropertyName = "Anti Roll - Rear horizontal force")]
                public float AntiRollRH { get; set; }
                [JsonProperty(PropertyName = "Anti Roll - Vertical force")]
                public float AntiRollV { get; set; }                             
            }            
            public class PassengerOptions
            {
                [JsonProperty(PropertyName = "Allow passengers")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Require passenger to be a friend (FriendsAPI)")]
                public bool UseFriends { get; set; }
                [JsonProperty(PropertyName = "Require passenger to be a clan mate (Clans)")]
                public bool UseClans { get; set; }
            }
            public class CollisionOptions
            {
                [JsonProperty(PropertyName = "Enable collision damage system")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Collision damage multiplier")]
                public float Multiplier { get; set; }
            }
            public class DeathOptions
            {
                [JsonProperty(PropertyName = "Enable explosion damage on death")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Damage radius")]
                public float Radius { get; set; }
                [JsonProperty(PropertyName = "Damage Amount")]
                public float Amount { get; set; }
            }
            public class SecurityOptions
            {             
                [JsonProperty(PropertyName = "Enable ignition systems")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Set first player with a key as vehicle owner (doesn't require a key to drive)")]
                public bool Owners { get; set; }
                [JsonProperty(PropertyName = "Ignition options")]
                public IgnitionOptions Ignition { get; set; }
                [JsonProperty(PropertyName = "Hotwire options")]
                public HotwireOptions Hotwire { get; set; }
                [JsonProperty(PropertyName = "Trunk lock options")]
                public TrunkOptions Trunk { get; set; }

                public class TrunkOptions
                {
                    [JsonProperty(PropertyName = "Allow locks to be placed on the trunk")]
                    public bool CanLock { get; set; }
                    [JsonProperty(PropertyName = "Only allow locks to be placed if the player has the ignition key")]
                    public bool RequireKey { get; set; }
                }
                public class IgnitionOptions
                {
                    [JsonProperty(PropertyName = "Allow players to copy a ignition key")]
                    public bool CanCopy { get; set; }
                    [JsonProperty(PropertyName = "Give the first player to enter the vehicle a key")]
                    public bool KeyOnEnter { get; set; }                    
                    [JsonProperty(PropertyName = "Chance of getting a key on entrance (1 in X)")]
                    public int KeyChance { get; set; }
                }
                public class HotwireOptions
                {
                    [JsonProperty(PropertyName = "Allow players to hotwire vehicles")]
                    public bool Enabled { get; set; }
                    [JsonProperty(PropertyName = "Deal shock damage on failed hotwire attempts")]
                    public bool DealDamage { get; set; }
                    [JsonProperty(PropertyName = "Amount of time it takes per hotwire attempt (seconds)")]
                    public int Time { get; set; }
                    [JsonProperty(PropertyName = "Chance of successfully hotwiring a vehicle (1 in X chance)")]
                    public int Chance { get; set; }
                }
            }
            public class InventoryOptions
            {
                [JsonProperty(PropertyName = "Enable inventory system")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Drop inventory on death")]
                public bool DropInv { get; set; }               
                [JsonProperty(PropertyName = "Inventory size (max 36)")]
                public int Size { get; set; }
            }
            public class SpawnableOptions
            {
                [JsonProperty(PropertyName = "Enable automatic vehicle spawning")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Use RandomSpawns for spawn locations")]
                public bool RandomSpawns { get; set; }
                [JsonProperty(PropertyName = "Spawnfile name")]
                public string Spawnfile { get; set; }
                [JsonProperty(PropertyName = "Maximum spawned vehicles at any time")]
                public int Max { get; set; }
                [JsonProperty(PropertyName = "Time between autospawns (seconds)")]
                public int Time { get; set; }
                [JsonProperty(PropertyName = "Cooldown time for player spawned vehicles via chat command (seconds)")]
                public int Cooldown { get; set; }
            }
            public class FuelOptions
            {
                [JsonProperty(PropertyName = "Requires fuel")]
                public bool Enabled { get; set; }
                [JsonProperty(PropertyName = "Fuel type (item shortname)")]
                public string FuelType { get; set; }
                [JsonProperty(PropertyName = "Fuel consumption rate (litres per second)")]
                public float Consumption { get; set; }
                [JsonProperty(PropertyName = "Spawn vehicles with fuel")]
                public bool GiveFuel { get; set; }
                [JsonProperty(PropertyName = "Amount of fuel to give spawned vehicles (minimum)")]
                public int FuelAmountMin { get; set; }
                [JsonProperty(PropertyName = "Amount of fuel to give spawned vehicles (maximum)")]
                public int FuelAmountMax { get; set; }
            }
            public class ActiveItemOptions
            {
                [JsonProperty(PropertyName = "Driver - Disable all held items")]
                public bool DisableDriver { get; set; }
                [JsonProperty(PropertyName = "Passenger - Disable all held items")]
                public bool DisablePassengers { get; set; }               
                
            }
            public class UIOptions
            {
                [JsonProperty(PropertyName = "Health settings")]
                public UICounter Health { get; set; }
                [JsonProperty(PropertyName = "Fuel settings")]
                public UICounter Fuel { get; set; }

                public class UICounter
                {
                    [JsonProperty(PropertyName = "Display to player")]
                    public bool Enabled { get; set; }
                    [JsonProperty(PropertyName = "Position - X minimum")]
                    public float Xmin { get; set; }
                    [JsonProperty(PropertyName = "Position - X maximum")]
                    public float XMax { get; set; }
                    [JsonProperty(PropertyName = "Position - Y minimum")]
                    public float YMin { get; set; }
                    [JsonProperty(PropertyName = "Position - Y maximum")]
                    public float YMax { get; set; }
                    [JsonProperty(PropertyName = "Background color (hex)")]
                    public string Color1 { get; set; }
                    [JsonProperty(PropertyName = "Background alpha")]
                    public float Color1A { get; set; }
                    [JsonProperty(PropertyName = "Status color (hex)")]
                    public string Color2 { get; set; }
                    [JsonProperty(PropertyName = "Status alpha")]
                    public float Color2A { get; set; }
                }
            }
            public Oxide.Core.VersionNumber Version { get; set; }
        }
       
        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                ActiveItems = new ConfigData.ActiveItemOptions
                {
                    DisableDriver = true,
                    DisablePassengers = false                    
                },
                Buttons = new ConfigData.ButtonConfiguration
                {
                    Inventory = "RELOAD",
                    Accelerate = "FORWARD",
                    Brake = "BACKWARD",
                    Left = "LEFT",
                    Right = "RIGHT",
                    HBrake = "SPRINT",
                    FuelTank = "FIRE_THIRD",
                    Lights = "RELOAD"
                },
                Build = new ConfigData.BuildOptions
                {
                    Enabled = false,
                    Cooldown = true,
                    Costs = new List<ConfigData.BuildOptions.BuildOption>
                        {
                            new ConfigData.BuildOptions.BuildOption
                            {
                                Amount = 500,
                                Shortname = "metal.refined"
                            },
                            new ConfigData.BuildOptions.BuildOption
                            {
                                Amount = 100,
                                Shortname = "techparts"
                            }
                        }
                },
                Collision = new ConfigData.CollisionOptions
                {
                    Enabled = true,
                    Multiplier = 1.0f
                },
                Death = new ConfigData.DeathOptions
                {
                    Amount = 75,
                    Enabled = true,
                    Radius = 6
                },
                Decay = new ConfigData.DecaySettings
                {
                    Amount = 5,
                    Time = 3600,
                    Enabled = true
                },
                Inventory = new ConfigData.InventoryOptions
                {
                    DropInv = true,
                    Enabled = true,
                    Size = 36
                },
                Movement = new ConfigData.MovementSettings
                {
                    Acceleration = 600f,
                    Brakes = 800f,
                    Reverse = 500f,
                    Steer = 60f,
                    SteerSpeed = 20f,
                    CounterSteer = false,
                    Speed = 90f,
                    Damper = 2000f,
                    Distance = 0.2f,
                    Spring = 40000f,
                    Target = 0.4f,
                    AntiRollFH = 3500f,
                    AntiRollRH = 3500f,
                    AntiRollV = 500f,
                    CustomHandling = true
                },
                Passengers = new ConfigData.PassengerOptions
                {
                    Enabled = true,
                    UseClans = true,
                    UseFriends = true
                },
                Security = new ConfigData.SecurityOptions
                {
                    Enabled = true,
                    Ignition = new ConfigData.SecurityOptions.IgnitionOptions
                    {
                        CanCopy = true,
                        KeyChance = 1,
                        KeyOnEnter = true
                    },
                    Hotwire = new ConfigData.SecurityOptions.HotwireOptions
                    {
                        Enabled = true,
                        Chance = 5,
                        Time = 45,
                        DealDamage = true
                    },
                    Trunk = new ConfigData.SecurityOptions.TrunkOptions
                    {
                        CanLock = false,
                        RequireKey = true
                    }
                },
                Spawnable = new ConfigData.SpawnableOptions
                {
                    Enabled = true,
                    Max = 5,
                    Time = 1800,
                    Spawnfile = "",
                    RandomSpawns = false,
                    Cooldown = 86400
                },
                Fuel = new ConfigData.FuelOptions
                {
                    Enabled = true,
                    Consumption = 0.5f,
                    FuelType = "lowgradefuel",
                    FuelAmountMin = 10,
                    FuelAmountMax = 50,
                    GiveFuel = true                    
                },
                Repair = new ConfigData.RepairSettings
                {
                    Amount = 10,
                    CanFlip = true,
                    Damage = 30,
                    Enabled = true,
                    Shortname = "scrap"
                },
                UI = new ConfigData.UIOptions
                {
                    Fuel = new ConfigData.UIOptions.UICounter
                    {
                        Color1 = "#F2F2F2",
                        Color1A = 0.05f,
                        Color2 = "#ce422b",
                        Color2A = 1,
                        Enabled = true,
                        Xmin = 0.69f,
                        XMax = 0.83f,
                        YMin = 0.06f,
                        YMax = 0.096f
                    },
                    Health = new ConfigData.UIOptions.UICounter
                    {
                        Color1 = "#F2F2F2",
                        Color1A = 0.05f,
                        Color2 = "#ce422b",
                        Color2A = 0.6f,
                        Enabled = true,
                        Xmin = 0.69f,
                        XMax = 0.83f,
                        YMin = 0.1f,
                        YMax = 0.135f
                    }
                },
                Version = Version
            };
        }

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            ConfigData baseConfig = GetBaseConfig();
            if (configData.Version < new VersionNumber(0, 2, 20))            
                configData.Decay = baseConfig.Decay;

            if (configData.Version < new VersionNumber(0, 2, 25))
            {
                configData.Spawnable.Cooldown = baseConfig.Spawnable.Cooldown;
                configData.Movement.CustomHandling = baseConfig.Movement.CustomHandling;
            }

            if (configData.Version < new VersionNumber(0, 2, 35))
            {
                configData.Repair.CanFlip = baseConfig.Repair.CanFlip;
            }

            if (configData.Version < new VersionNumber(0, 2, 37))
            {
                configData.Death = baseConfig.Death;
            }

            if (configData.Version < new VersionNumber(0, 2, 54))
                configData.Fuel.Consumption = baseConfig.Fuel.Consumption;

            if (configData.Version < new VersionNumber(0, 2, 58))
                configData.Build = baseConfig.Build;

            configData.Version = Version;

            PrintWarning("Config update completed!");
        }
        #endregion

        #region Data Management
        private void SaveData()
        {
            data.WriteObject(storedData);
            cooldowns.WriteObject(userCooldowns);
        }

        private void LoadData()
        {
            try
            {
                storedData = data.ReadObject<RestoreData>();

                if (storedData == null || storedData.restoreData == null)
                    storedData = new RestoreData();
            }
            catch
            {
                storedData = new RestoreData();
            }
            try
            {
                userCooldowns = cooldowns.ReadObject<Dictionary<ulong, double>>();
            }
            catch
            {
                userCooldowns = new Dictionary<ulong, double>();
            }
        }

        public class RestoreData
        {
            public Hash<uint, InventoryData> restoreData = new Hash<uint, InventoryData>();
            public Hash<uint, SecurityData> securityData = new Hash<uint, SecurityData>();

            public void AddData(CarController controller)
            {
                restoreData[controller.entity.net.ID] = new InventoryData(controller);
                securityData[controller.entity.net.ID] = new SecurityData(controller);
            }

            public void RemoveData(uint netId)
            {
                if (HasRestoreData(netId))
                    restoreData.Remove(netId);

                if (HasSecurityData(netId))
                    securityData.Remove(netId);
            }

            public bool HasRestoreData(uint netId) => restoreData.ContainsKey(netId);

            public bool HasSecurityData(uint netId) => securityData.ContainsKey(netId);

            public void RestoreVehicle(CarController controller)
            {
                if (controller == null)
                    return;

                InventoryData inventoryData;
                if (restoreData.TryGetValue(controller.entity.net.ID, out inventoryData))
                {
                    if (controller.container != null && controller.container.inventory != null)
                        RestoreAllItems(controller, inventoryData);
                }

                SecurityData securityDat;
                if (securityData.TryGetValue(controller.entity.net.ID, out securityDat))
                {
                    securityDat.RestoreVehicleSecurity(controller);
                }
            }

            private void RestoreAllItems(CarController controller, InventoryData inventoryData)
            {
                if (controller == null)
                    return;

                RestoreItems(controller, inventoryData.vehicleContainer, true);
                RestoreItems(controller, inventoryData.fuelContainer, false);
            }

            private bool RestoreItems(CarController controller, ItemData[] itemData, bool isInventory)
            {
                if ((!isInventory && !ins.configData.Fuel.Enabled) || (isInventory && !ins.configData.Inventory.Enabled) || itemData == null || itemData.Length == 0)
                    return true;

                for (int i = 0; i < itemData.Length; i++)
                {
                    Item item = CreateItem(itemData[i]);
                    item.MoveToContainer(isInventory ? controller.container.inventory : controller.fuelTank, itemData[i].position, true);
                }
                return true;
            }

            private Item CreateItem(ItemData itemData)
            {
                Item item = ItemManager.CreateByItemID(itemData.itemid, itemData.amount, itemData.skin);
                item.condition = itemData.condition;
                if (itemData.instanceData != null)
                    itemData.instanceData.Restore(item);

                item.blueprintTarget = itemData.blueprintTarget;

                BaseProjectile weapon = item.GetHeldEntity() as BaseProjectile;
                if (weapon != null)
                {
                    if (!string.IsNullOrEmpty(itemData.ammotype))
                        weapon.primaryMagazine.ammoType = ItemManager.FindItemDefinition(itemData.ammotype);
                    weapon.primaryMagazine.contents = itemData.ammo;
                }
                if (itemData.contents != null)
                {
                    foreach (var contentData in itemData.contents)
                    {
                        Item newContent = ItemManager.CreateByItemID(contentData.itemid, contentData.amount);
                        if (newContent != null)
                        {
                            newContent.condition = contentData.condition;
                            newContent.MoveToContainer(item.contents);
                        }
                    }
                }
                return item;
            }

            public class InventoryData
            {
                public ItemData[] vehicleContainer = new ItemData[0];
                public ItemData[] fuelContainer = new ItemData[0];

                public InventoryData() { }

                public InventoryData(CarController controller)
                {
                    if (ins.configData.Inventory.Enabled && controller.container != null)
                        vehicleContainer = GetItems(controller.container.inventory).ToArray();
                    if (ins.configData.Fuel.Enabled && controller.fuelTank != null)
                        fuelContainer = GetItems(controller.fuelTank).ToArray();
                }

                private IEnumerable<ItemData> GetItems(ItemContainer container)
                {
                    return container.itemList.Select(item => new ItemData
                    {
                        itemid = item.info.itemid,
                        amount = item.amount,
                        ammo = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.contents ?? 0,
                        ammotype = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.ammoType.shortname ?? null,
                        position = item.position,
                        skin = item.skin,
                        condition = item.condition,
                        instanceData = new ItemData.InstanceData(item),
                        blueprintTarget = item.blueprintTarget,
                        contents = item.contents?.itemList.Select(item1 => new ItemData
                        {
                            itemid = item1.info.itemid,
                            amount = item1.amount,
                            condition = item1.condition
                        }).ToArray()
                    });
                }
            }

            public class ItemData
            {
                public int itemid;
                public ulong skin;
                public int amount;
                public float condition;
                public int ammo;
                public string ammotype;
                public int position;
                public int blueprintTarget;
                public InstanceData instanceData;
                public ItemData[] contents;

                public class InstanceData
                {                    
                    public int dataInt;
                    public int blueprintTarget;
                    public int blueprintAmount;

                    public InstanceData() { }
                    public InstanceData(Item item)
                    {
                        if (item.instanceData == null)
                            return;

                        dataInt = item.instanceData.dataInt;
                        blueprintAmount = item.instanceData.blueprintAmount;
                        blueprintTarget = item.instanceData.blueprintTarget;
                    }

                    public void Restore(Item item)
                    {
                        item.instanceData = new ProtoBuf.Item.InstanceData();
                        item.instanceData.blueprintAmount = blueprintAmount;
                        item.instanceData.blueprintTarget = blueprintTarget;
                        item.instanceData.dataInt = dataInt;
                    }
                }
            }

            public class SecurityData
            {
                public int ignitionCode;
                public float health;
                public bool hasBeenHotwired;

                public bool hasCodeLock;
                public bool hasKeyLock;
                public bool isLocked;

                public string lockCode;
                public string guestCode;

                public ulong ownerId;

                public List<ulong> whiteListPlayers = new List<ulong>();
                public List<ulong> guestPlayers = new List<ulong>();

                public SecurityData() { }
                public SecurityData(CarController controller)
                {
                    this.ignitionCode = controller.IgnitionCode;
                    this.hasBeenHotwired = controller.HasBeenHotwired;
                    this.ownerId = controller.ownerId;
                    this.health = controller.entity.health;

                    if (controller.container != null)
                    {                       
                        BaseEntity lockEntity = controller.container.GetSlot(BaseEntity.Slot.Lock);
                        if (lockEntity != null)
                        {
                            if (lockEntity.prefabID == 3518824735)
                            {
                                hasCodeLock = true;
                                lockCode = (lockEntity as CodeLock).code;
                                guestCode = (lockEntity as CodeLock).guestCode;

                                whiteListPlayers = (lockEntity as CodeLock).whitelistPlayers;
                                guestPlayers = (lockEntity as CodeLock).guestPlayers;                                
                            }
                            else if (lockEntity.prefabID == 2106860026)
                            {
                                hasKeyLock = true;
                                lockCode = (lockEntity as KeyLock).keyCode.ToString();
                            }
                            isLocked = lockEntity.HasFlag(BaseEntity.Flags.Locked);
                        }
                    }
                }

                public void RestoreVehicleSecurity(CarController controller)
                {
                    controller.HasBeenHotwired = hasBeenHotwired;
                    controller.ownerId = ownerId;
                    controller.IgnitionCode = ignitionCode;
                    controller.entity.ChangeHealth(health);

                    if (controller.container == null)
                        return;

                    if (hasCodeLock)
                    {
                        BaseEntity lockEntity = GameManager.server.CreateEntity("assets/prefabs/locks/keypad/lock.code.prefab", new Vector3(), new Quaternion(), true);
                        if (lockEntity != null)
                        {
                            lockEntity.SetParent(controller.container, controller.container.GetSlotAnchorName(BaseEntity.Slot.Lock));
                            lockEntity.OnDeployed(controller.container);
                            lockEntity.Spawn();
                            controller.container.SetSlot(BaseEntity.Slot.Lock, lockEntity);

                            (lockEntity as CodeLock).whitelistPlayers = whiteListPlayers;
                            (lockEntity as CodeLock).guestPlayers = guestPlayers;
                            (lockEntity as CodeLock).code = lockCode;
                            (lockEntity as CodeLock).guestCode = guestCode;
                            (lockEntity as CodeLock).SetFlag(BaseEntity.Flags.Locked, isLocked, false);
                        }
                    }
                    else if (hasKeyLock)
                    {
                        BaseEntity lockEntity = GameManager.server.CreateEntity("assets/prefabs/locks/keylock/lock.key.prefab", new Vector3(), new Quaternion(), true);
                        if (lockEntity != null)
                        {
                            lockEntity.SetParent(controller.container, controller.container.GetSlotAnchorName(BaseEntity.Slot.Lock));
                            lockEntity.OnDeployed(controller.container);
                            lockEntity.Spawn();
                            controller.container.SetSlot(BaseEntity.Slot.Lock, lockEntity);

                            (lockEntity as KeyLock).keyCode = int.Parse(lockCode);
                            (lockEntity as KeyLock).SetFlag(BaseEntity.Flags.Locked, isLocked, false);
                        }
                    }
                }
            }
        }

        public struct ItemCost
        {
            public int itemId;
            public int amount;

            public ItemCost(int itemId, int amount)
            {
                this.itemId = itemId;
                this.amount = amount;
            }
        }
        #endregion

        #region Localization
        string msg(string key, string playerId = null) => lang.GetMessage(key, this, playerId);

        Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            ["not_friend"] = "<color=#D3D3D3>You must be a friend or clanmate with the operator</color>",
            ["controls1"] = "<color=#ce422b>Car Controls:</color>\n<color=#D3D3D3>Accelerate:</color> <color=#ce422b>{0}</color>\n<color=#D3D3D3>Brake/Reverse:</color> <color=#ce422b>{1}</color>\n<color=#D3D3D3>Turn Left:</color> <color=#ce422b>{2}</color>\n<color=#D3D3D3>Turn Right:</color> <color=#ce422b>{3}</color>\n<color=#D3D3D3>Hand Brake:</color> <color=#ce422b>{4}</color>\n<color=#D3D3D3>Toggle Lights:</color> <color=#ce422b>{5}</color>",
            ["controls2"] = "<color=#ce422b>Car Controls:</color>\n<color=#D3D3D3>Accelerate:</color> <color=#ce422b>{0}</color>\n<color=#D3D3D3>Brake/Reverse:</color> <color=#ce422b>{1}</color>\n<color=#D3D3D3>Turn Left:</color> <color=#ce422b>{2}</color>\n<color=#D3D3D3>Turn Right:</color> <color=#ce422b>{3}</color>\n<color=#D3D3D3>Toggle Lights:</color> <color=#ce422b>{4}</color>",
            ["access_inventory1"] = "<color=#D3D3D3>You can access the inventory from the trunk of the vehicle</color>",
            ["access_fuel"] = "<color=#D3D3D3>Access Fuel Tank (from outside of the vehicle) </color><color=#ce422b>{0}</color>",
            ["fuel_type"] = "<color=#D3D3D3>This vehicle requires </color><color=#ce422b>{0}</color> <color=#D3D3D3>to run!</color>",
            ["not_enabled"] = "<color=#D3D3D3>Passengers is not enabled</color>",
            ["nopermission"] = "<color=#D3D3D3>You do not have permission to drive this car</color>",
            ["nopermissionbuild"] = "<color=#D3D3D3>You do not have permission to build a car</color>",
            ["health"] = "HLTH: ",
            ["fuel"] = "FUEL: {0} L",
            ["fullhealth"] = "<color=#D3D3D3>This vehicle is already at full health</color>",
            ["noresources"] = "<color=#D3D3D3>You need atleast </color><color=#ce422b>{0}x {1}</color> <color=#D3D3D3>to make repairs</color>",
            ["repairhelp"] = "<color=#D3D3D3>You can make repairs to this vehicle using a hammer which costs </color><color=#ce422b>{0}x {1}</color> <color=#D3D3D3>per hit</color>",
            ["itemnotallowed"] = "<color=#D3D3D3>You can not use that item whilst you are in a car</color>",
            ["key_created"] = "<color=#ce422b>This vehicle requires a key to start.</color><color=#D3D3D3> Lucky for you it was in the ignition! You must have this key in your </color><color=#ce422b>inventory</color><color=#D3D3D3> to start the car</color>",
            ["key_copy"] = "<color=#D3D3D3>You can make copies of this key by typing </color><color=#ce422b>/copykey</color><color=#D3D3D3> whilst sitting in the drivers seat</color>",
            ["no_key"] = "<color=#D3D3D3>You do not have the </color><color=#ce422b>correct key</color> <color=#D3D3D3>to start this vehicle</color>",
            ["no_key_hotwire"] = "<color=#D3D3D3>You can attempt to hotwire this vehicle by typing </color><color=#ce422b>/hotwire</color><color=#D3D3D3> whilst sitting in the drivers seat</color>",
            ["hotwire_success"] = "<color=#D3D3D3>You have successfully hotwired this vehicle!</color>",
            ["hotwire_fail"] = "<color=#D3D3D3>You have failed to hotwire this vehicle!</color>",
            ["hotwire_fail_left"] = "<color=#D3D3D3>Hotwiring has been cancelled because you left the vehicle</color>",
            ["not_commander"] = "<color=#D3D3D3>You must be the driver of a vehicle to use that command</color>",
            ["no_key_deploy"] = "<color=#D3D3D3>You must have the vehicle key to place a lock on the trunk</color>",
            ["already_hotwired"] = "<color=#D3D3D3>This vehicle has already been hotwired</color>",
            ["has_key"] = "<color=#D3D3D3>You have the key for this vehicle in your possession</color>",
            ["not_has_key"] = "<color=#D3D3D3>You do not have the key for this vehicle in your possession</color>",
            ["already_hotwiring"] = "<color=#D3D3D3>You are already hotwiring a vehicle</color>",
            ["begun_hotwiring"] = "<color=#D3D3D3>You have begun to hotwire this vehicle. It will take </color><color=#ce422b>{0} seconds</color><color=#D3D3D3> with a</color><color=#ce422b> 1 in {1}</color> <color=#D3D3D3>chance of success</color>",
            ["key_copied"] = "<color=#D3D3D3>You have made a copy of the ignition key</color>",
            ["fuel_empty"] = "EMPTY",
            ["onCooldown"] = "<color=#D3D3D3>You must wait another </color><color=#ce422b>{0}</color><color=#D3D3D3> before you can spawn another car</color>",
            ["noStacking"] = "<color=#D3D3D3>That space is occupied by another vehicle</color>",
            ["carFlipped"] = "<color=#D3D3D3>You have flipped the vehicle! You can unflip it by looking at it and typing <color=#ce422b>/flipcar</color></color>",
            ["costs"] = "<color=#ce422b>Cost to build:</color>",
            ["notenoughres"] = "<color=#D3D3D3>You do not have enough resources to build! Type <color=#ce422b>/buildcar costs</color> to see what you need</color>"
        };
        #endregion
    }
}


// --- End of file: CarCommander.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BlessOfTheGods.cs ---
// --- Original Local Path: BlessOfTheGods.cs ---

using System;
using UnityEngine;  
using Random=System.Random;
using Rust;
using Rust.Xp;
using System.Collections.Generic;

namespace Oxide.Plugins {
  
  [Info("Blessing of the Gods", "Dora", "1.0.4", ResourceId = 2022)]
  [Description("Player get blessed by the gods.")]
  
  class BlessOfTheGods : RustPlugin {

  	Random rng = new Random();
  	int number;

    void LoadDefaultMessages() {
      lang.RegisterMessages(new Dictionary<string, string> {
        ["blessNotice"] = ": It is time for the blessing!",
        ["noPermission"] = ": You do not have the permission to use this.",
        ["blessHelp"] = "\n<color=green>God of Life</color> - Recover 100% HP\n<color=red>God of Damnation</color> - Take away 25% of your current HP\n<color=orange>God of Gluttony</color> - Recover 100% Food & Water\n<color=grey>God of Poverty</color> - Does nothing\n<color=black>God of Death</color> - Instant KO\n<color=purple>God of Plague</color> - Poison you slowly\n<color=yellow>God of War</color> - Give 10% extra XP based on current XP",
        ["blessList"] = ": Invalid blessing.\n<color=green>God of Life</color> - /bless <name> hp\n<color=red>God of Damnation</color> - /bless <name> damn\n<color=orange>God of Gluttony</color> - /bless <name> food\n<color=grey>God of Poverty</color> - /bless <name> poverty\n<color=black>God of Death</color> - /bless <name> death\n<color=purple>God of Plague</color> - /bless <name> poison\n<color=yellow>God of War</color> - /bless <name> xp",
        ["playerNotFound"] = ": Player not found.",
        ["invalidParams"] = ": Invalid parameters. /bless <name> <blessing>",
        ["godOfLife"] = "<color=green>God of Life</color> has blessed you with full health recovery.",
        ["godOfDamn"] = "<color=red>God of Damnation</color> has damned you by taking away 25% of your health.",
        ["godOfGluttony"] = "<color=orange>God of Gluttony</color> has filled your belly with great food & wine.",
        ["godOfPoverty"] = "<color=grey>God of Poverty</color> has looked at you and decided there is nothing he can give you.",
        ["godOfDeath"] = "<color=black>God of Death</color> has claimed {0}'s life...",
        ["godOfPlague"] = "<color=purple>God of Plague</color> has defiled you with slow poison.",
        ["godOfWar"] = "<color=yellow>God of War</color> has bestowed {0} with war experiences.",
        ["pluginPrefix"] = "<color=orange>Blessing of The Gods</color>"
      }, this);
    }

    private ConfigData configData;
    class ConfigData {
      public int repeatInterval { get; set; }
      public bool autoBless { get; set; }
      public int godOfGluttonyFood { get; set; }
      public int godOfGluttonyWater { get; set; }
      public float godOfDamnHPDeduction { get; set; }
      public int godOfPlaguePoison { get; set; }
      public bool godOfWarPercentEnabler { get; set; }
      public float godOfWarPercentXP { get; set; }
      public int godOfWarFixedXP { get; set; }
      public bool enableGodOfLife { get; set; }
      public bool enableGodOfDamn { get; set; }
      public bool enableGodOfGluttony { get; set; }
      public bool enableGodOfPlague { get; set; }
      public bool enableGodOfWar { get; set; }
      public bool enableGodOfDeath { get; set; }
    }

    private void LoadVariables() {
      LoadConfigVariables();
      SaveConfig();
    }

    protected override void LoadDefaultConfig() {
      Config.Clear();
      Config["repeatInterval"] = 900;
      Config["autoBless"] = true;
      Config["godOfDamnHPDeduction"] = 0.75;
      Config["godOfGluttonyWater"] = 500;
      Config["godOfGluttonyFood"] = 500;
      Config["godOfPlaguePoison"] = 20;
      Config["godOfWarPercentEnabler"] = true;
      Config["godOfWarPercentXP"] = 0.10;
      Config["godOfWarFixedXP"] = 10;
      Config["enableGodOfLife"] = true;
      Config["enableGodOfDamn"] = true;
      Config["enableGodOfGluttony"] = true;
      Config["enableGodOfWar"] = true;
      Config["enableGodOfDeath"] = true;
      SaveConfig();
    }

    private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
    private void SaveConfig(ConfigData config) => Config.WriteObject(config, true);

		private void OnServerInitialized() {
      permission.RegisterPermission("blessofthegods.bless", this);
      permission.RegisterPermission("blessofthegods.rebless", this);
      LoadDefaultMessages();
      LoadVariables();

      if(configData.autoBless == true) {
        repeatBless();
      }
		}

		private void repeatBless() {
			timer.Repeat(configData.repeatInterval, 0, () => blessPlayers());
		}

		private void blessPlayers() {
      broadcastChat(Lang("pluginPrefix", null), Lang("blessNotice", null));
      foreach (BasePlayer current in BasePlayer.activePlayerList) {
      	number = rng.Next(1,101);

      	if(number >= 86) {
          if(configData.enableGodOfLife) {
            godOfLife(current);
          } else {
            godOfPoverty(current);
          }
      	} else if(number >= 76 && number <= 85) {
          if(configData.enableGodOfDamn) {
            godOfDamn(current);
          } else {
            godOfPoverty(current);
          }
      	} else if(number >= 61  && number <= 75) {
          if(configData.enableGodOfGluttony) {
            godOfGluttony(current);
          } else {
            godOfPoverty(current);
          }
      	} else if(number >= 51 && number <= 60) {
          if(configData.enableGodOfPlague) {
            godOfPlague(current);
          } else {
            godOfPoverty(current);
          }
      	} else if(number >= 46 && number <= 50) {
          if(configData.enableGodOfWar) {
            godOfWar(current);
          } else {
            godOfPoverty(current);
          }
      	} else if(number >= 2 && number <= 45) {
      		godOfPoverty(current);
      	} else if(number == 1) {
          if(configData.enableGodOfDeath) {
            godOfDeath(current);
          } else {
            godOfPoverty(current);
          }
      	}
      }
		}

		private void godOfLife(BasePlayer player) {
			player.InitializeHealth(100,100);
      sendChatMessage(player, null, Lang("godOfLife", player.UserIDString));
		}

		private void godOfDamn(BasePlayer player) {
      float deductedHP = player.health * (float) configData.godOfDamnHPDeduction;
      player.InitializeHealth(deductedHP, 100);
      sendChatMessage(player, null, Lang("godOfDamn", player.UserIDString));
		}

		private void godOfGluttony(BasePlayer player) {
			player.metabolism.hydration.value = configData.godOfGluttonyWater;
      player.metabolism.calories.value = configData.godOfGluttonyFood;
      sendChatMessage(player, null, Lang("godOfGluttony", player.UserIDString));
		}

		private void godOfPoverty(BasePlayer player) {
      sendChatMessage(player, null, Lang("godOfPoverty", player.UserIDString)); 
		}

		private void godOfDeath(BasePlayer player) {
    	player.Die();
      broadcastChat(null, Lang("godOfDeath", player.UserIDString, player.displayName));	
		}

		private void godOfPlague(BasePlayer player) {
			player.metabolism.poison.value = configData.godOfPlaguePoison;
      sendChatMessage(player, null, Lang("godOfPlague", player.UserIDString));
		}

		private void godOfWar(BasePlayer player) {
      float amtToAdd;
      if(configData.godOfWarPercentEnabler == true) {
          amtToAdd = player.xp.UnspentXp * (float) configData.godOfWarPercentXP;
        } else {
          amtToAdd = configData.godOfWarFixedXP;
        }
      player.xp.Add(Definitions.Cheat, amtToAdd);
      broadcastChat(null, Lang("godOfWar", player.UserIDString, player.displayName));
		}
    
    [ChatCommand("rebless")]
    private void blessPlayer(BasePlayer player) {      
    	if(!hasPermission(player, "blessofthegods.rebless")) {
        sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("noPermission", player.UserIDString));
    		return;
    	}
    	blessPlayers();
    }

    [ChatCommand("blesshelp")]
    private void blessHelp(BasePlayer player) {
    	sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("blessHelp", player.UserIDString));
    }

    [ChatCommand("bless")]
    private void blessing(BasePlayer player, string command, string[] args) {
      if(!hasPermission(player, "blessofthegods.bless")) {
        sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("noPermission", player.UserIDString));
        return;
      }

      if(args.Length < 2) {
        sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("invalidParams", player.UserIDString));
        return;
      }

      BasePlayer targetPlayer = getPlayerName(args[0]);
      if(targetPlayer == null) {
        sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("playerNotFound", player.UserIDString));
        return;
      }

      if(args[1] == "hp") {
        godOfLife(targetPlayer);
      } else if(args[1] == "damn") {
        godOfDamn(targetPlayer);
      } else if(args[1] == "food") {
        godOfGluttony(targetPlayer);
      } else if(args[1] == "death") {
        godOfDeath(targetPlayer);
      } else if(args[1] == "xp") {
        godOfWar(targetPlayer);
      } else if(args[1] == "poison") {
        godOfPlague(targetPlayer);
      } else if(args[1] == "poverty") {
        godOfPoverty(targetPlayer);
      } else {
        sendChatMessage(player, Lang("pluginPrefix", player.UserIDString), Lang("blessList", player.UserIDString));
      }
    }

    private void sendChatMessage(BasePlayer player, string prefix, string msg) {
      SendReply(player, prefix + msg);
    }

    private void broadcastChat(string prefix, string msg) {
      PrintToChat(prefix +  msg);
    }

    private void broadcastSuccess(BasePlayer player, String godName, String action, String msg, string color) {
    	PrintToChat("<color=" + color + ">" + godName + "</color> " + action + " <color=orange>" + player.displayName + "</color> " + msg);
    }

    private void sendToPlayer(BasePlayer player, String godName, String action, String msg, string color) {
    	SendReply(player, "<color=" + color + ">" + godName + "</color> " + action + " " + msg);
    }

    string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

    private BasePlayer getPlayerName(string name) {
      string currentName;
      string lastName;
      BasePlayer foundPlayer = null;
      name = name.ToLower();
    
      foreach(BasePlayer player in BasePlayer.activePlayerList) {
        currentName = player.displayName.ToLower();
        
        if(currentName.Contains(name)) {
          if(foundPlayer != null) {
            lastName = foundPlayer.displayName;  
            if(currentName.Replace(name, "").Length < lastName.Replace(name, "").Length) {
              foundPlayer = player;
            }
          }  
          foundPlayer = player;
        }
      }
      return foundPlayer;
    }

    private bool hasPermission(BasePlayer player, string perm) {
      if(player.net.connection.authLevel > 1) {
        return true;
      }
      return permission.UserHasPermission(player.userID.ToString(), perm);
    }

  }
}


// --- End of file: BlessOfTheGods.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/NameFix.cs ---
// --- Original Local Path: NameFix.cs ---

﻿using System.Text.RegularExpressions;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("NameFix", "Visagalis", "1.0.0")]
    [Description("Removes advertisements from player names when they login.")]

    class NameFix : CovalencePlugin
    {
        void OnUserConnected(IPlayer player)
        {
			string pattern = "[A-Za-z0-9-А-Яа-я]+\\.(com|lt|net|org|gg|ru|рф|int|info|ru.com|ru.net|com.ru|net.ru|рус|org.ru|moscow|biz|орг|москва|msk.ru|su|msk.su|md|tj|kz|tm|pw|travel|name|de|eu|eu.com|com.de|me|org.lv|pl|nl|at|co.at|be|wien|info.pl|cz|ch|com.pl|or.at|net.pl|org.pl|hamburg|cologne|koeln|berlin|de.com|es|biz.pl|bayern|scot|edu|edu.pl|com.es|nom.es|nom|nom.pl|brussels|org.es|gb|gb.net|shop|shop.pl|waw|waw.pl|wales|vlaanderen|gr.com|hu|hu.net|si|se|se.net|cymru|melbourne|im|sk|lat|gent|co.uk|uk|com.im|co.im|co|org.uk|me.uk|ist|saarland|org.im|istanbul|uk.net|uk.com|li|lu|gr|london|eu.com|lv|ro|com.ro|fi|net.fv|fv|com.lv|net.lv|as|asia|ind.in|net.ph|org.ph|io|jp|qa|ae.org|ae|ph|ind|af|jp.net|sa.com|sa|tl|tw|tv|tokyo|jpn.com|jpn|net.af|com.af|nagoya|org.af|com.tw|cn|cn.com|cx|la|club|club.tw|idv.tw|idv|yokohama|ebiz|ebiz.tw|mn|christmas|in|game|game.tw|to|com.my|co.in|in.net|net.in|net.my|org.my|ist|istanbul|pk|org.in|in.net|ph|com.ph|firm|firm.in|gen|gen.in|us|us.com|net.ec|ec|info.ec|co.lc|lc|com.lc|net.lc|org.lc|pro|pro.ec|med|med.ec|la|us.org|ag|gl|mx|com.mx|fin|fin.ec|co.ag|gl|mx|com.mx|pe|co.gl|com.gl|com.ag|net.ag|org.ag|net.gl|org.gl|net.pe|com.pe|gs|org.pe|nom|nom.ag|gy|sr|sx|bz|br|br.com|co.gy|co.bz|com.gy|vc|com.vc|net.vc|net.gy|hn|net.bz|com.bz|org.bz|com.hn|org.vc|co.ve|ve|net.hn|quebec|cl|org.hn|com.ve|ht|vegas|com.co|nyc|co.com|com.ht|us.com|miami|net.ht|org.ht|nom.co|nom|net.co|ec|info.ht|us.org|lc|com.ec|ac|as|mu|com.mu|tk|ws|net.mu|cc|cd|nf|org.mu|za|za.com|co.za|org.za|net.za|com.nf|net.nf|co.cm|cm|com.cm|org.nf|web|web.za|net.cm|ps|nu|net.so|nz|fm|irish|co.nz|radio|radio.fm|gg|net.nz|ml|com.ki|net.ki|ki|cf|org.nz|sb|com.sb|net.sb|tv|mg|srl|fm|sc|org.sb|biz.ki|org.ki|je|info.ki|net.sc|com.sc|durban|joburg|cc|capetown|sh|org.sc|ly|com.ly|ms|so|st|xyz|north-kazakhstan.su|nov|nov.su|ru.com|ru.net|com.ru|net.ru|org.ru|pp|pp.ru|msk.ru|msk|msk.su|spb|spb.ru|spb.su|tselinograd.su|ashgabad.su|abkhazia.su|adygeya.ru|adygeya.su|arkhangelsk.su|azerbaijan.su|balashov.su|bashkiria.ru|bashkiria.su|bir|bir.ru|bryansk.su|obninsk.su|penza.su|pokrovsk.su|pyatigorsk.ru|sochi.su|tashkent.su|termez.su|togliatti.su|troitsk.su|tula.su|tuva.su|vladikavkaz.su|vladikavkaz.ru|vladimir.ru|vladimir.su|spb.su|tatar|com.ua|kiev.ua|co.ua|biz.ua|pp.ua|am|co.am|com.am|net.am|org.am|net.am|radio.am|armenia.su|georgia.su|com.kz|bryansk.su|bukhara.su|cbg|cbg.ru|dagestan.su|dagestan.ru|grozny.su|grozny.ru|ivanovo.su|kalmykia.ru|kalmykia.su|kaluga.su|karacol.su|karelia.su|khakassia.su|krasnodar.su|kurgan.su|lenug.su|com.ua|ru.com|ялта.рф|тарханкут.рф|симфи.рф|севастополь.рф|ореанда.рф|массандра.рф|коктебель.рф|казантип.рф|инкерман.рф|евпатория.рф|донузлав.рф|балаклава.рф|vologda.su|org.kz|aktyubinsk.su|chimkent.su|east-kazakhstan.su|jambyl.su|karaganda.su|kustanal.ru|mangyshlak.su|kiev.ua|co.ua|biz.ua|radio.am|nov.ru|navoi.sk|nalchik.su|nalchik.ru|mystis.ru|murmansk.su|mordovia.su|mordovia.ru|marine.ru|tel|aero|mobi|xxx|aq|ax|az|bb|ba|be|bg|bi|bj|bh|bo|bs|bt|ca|cat|cd|cf|cg|ch|ci|ck|co.ck|co.ao|co.bw|co.id|id|co.fk|co.il|co.in|il|ke|ls|co.ls|mz|no|co.mz|co.no|th|tz|co.th|co.tz|uz|uk|za|zm|zw|co.uz|co.uk|co.za|co.zm|co.zw|ar|au|cy|eg|et|fj|gt|gu|gn|gh|hk|jm|kh|kw|lb|lr|com.ai|com.ar|com.au|com.bd|com.bn|com.br|com.cn|com.cy|com.eg|com.et|com.fj|com.gh|com.gu|com.gn|com.gt|com.hk|com.jm|com.kh|com.kw|com.lb|com.lr|com.|com.|bd|mt|mv|ng|ni|np|nr|om|pa|py|qa|sa|sb|sg|sv|sy|tr|tw|ua|uy|ve|vi|vn|ye|coop|com.mt|com.mv|com.ng|com.ni|com.np|com.nr|com.om|com.pa|com.pl|com.py|com.qa|com.sa|com.sb|com.sv|com.sg|com.sy|com.tr|com.tw|com.ua|com.uy|com.ve|com.vi|com.vn|com.ye|cr|cu|cx|cv|cz|de|de.com|dj|dk|dm|do|dz|ec|edu|ee|es|eu|eu.com|fi|fo|fr|qa|qd|qf|gi|gl|gm|gp|gr|gs|gy|hk|hm|hr|ht|hu|ie|im|in|in.ua|io|ir|is|it|je|jo|jobs|jp|kg|ki|kn|kr|la|li|lk|lt|lu|lv|ly|ma|mc|md|me.uk|mg|mk|mo|mp|ms|mu|museum|mw|mx|my|na|nc|ne|nl|no|nf|nu|pe|ph|pk|pl|pn|pr|ps|pt|re|ro|rs|rw|sd|se|sg|sh|si|sk|sl|sm|sn|so|sr|st|sz|tc|td|tg|tj|tk|tl|tn|to|tt|tw|ug|us|vg|vn|vu|ws)";
            Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase);
            string oldName = player.Name;
            string newName = rgx.Replace(oldName, "").Trim();
            if (oldName != newName)
            {
                player.Rename(newName);
            }
        }
    }
}


// --- End of file: NameFix.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RaidNotice.cs ---
// --- Original Local Path: RaidNotice.cs ---

using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using Oxide.Core;  
using Oxide.Core.Plugins;
using System.IO;
using System.Reflection;
using System.Text;
using System.Linq.Expressions;
using Oxide.Core.Libraries;
using System.Linq;
using System.Globalization;
namespace Oxide.Plugins
{
    [Info("RaidNotice", "S1m0n", "1.0.0")]
    [Description("RaidNotice for players")]
	class RaidNotice : RustPlugin 
    {
		string permissionvk = "raidnotice.allowed.vk";
		string permissionphone = "raidnotice.allowed.phone";
		string raidnotice = "На ваш дом напали!";
		Dictionary<ulong, int> playersCodePhone = new Dictionary<ulong, int>();
		Dictionary<ulong, int> playersCodeVk = new Dictionary<ulong, int>();
		Dictionary<BasePlayer, float> lastTimeSended = new Dictionary<BasePlayer, float>();
		public Dictionary<ulong, string> tempvk = new Dictionary<ulong, string>();
		public Dictionary<ulong, string> tempphone = new Dictionary<ulong, string>();
		
		List<string> allowedentity = new List<string>()
		{
			"door",
			"wall.window.bars.metal",
			"wall.window.bars.toptier",
			"wall.external",
			"gates.external.high",
			"floor.ladder",
			"embrasure",
			"floor.grill",
			"wall.frame.fence",
			"wall.frame.cell",
		};
		
		class StoredData
		{ 
			public Dictionary<ulong, DateTime> raidCDVK = new Dictionary<ulong, DateTime>();
			public Dictionary<ulong, DateTime> raidCDPHONE = new Dictionary<ulong, DateTime>();
			public Dictionary<ulong, DateTime> msgVKCD = new Dictionary<ulong, DateTime>();
			public Dictionary<ulong, DateTime> msgPHONECD = new Dictionary<ulong, DateTime>();
			public Dictionary<ulong, int> addMAX = new Dictionary<ulong, int>();
			public Dictionary<ulong, string> vkids = new Dictionary<ulong, string>();
			public Dictionary<ulong, string> phones = new Dictionary<ulong, string>();
		}
		  
		StoredData db;  
		
		void SaveData()
        {
			Interface.Oxide.DataFileSystem.WriteObject("RaidNotice", db);
		}
		
		void Loaded()
		{
			db = Interface.GetMod().DataFileSystem.ReadObject<StoredData>("RaidNotice");
		}
		
		void Unloaded()
		{
			SaveData();
		}
		
		void OnServerSave()
		{
			SaveData();
		}
		
		void OnEntityDeath(BaseCombatEntity entity, HitInfo hitInfo)
		{
			if (hitInfo == null) return;
			if (hitInfo.Initiator?.ToPlayer() == null) return;
			if (hitInfo.Initiator?.ToPlayer().userID == entity.OwnerID) return;
			if (hitInfo.damageTypes.GetMajorityDamageType() != Rust.DamageType.Explosion && hitInfo.damageTypes.GetMajorityDamageType() != Rust.DamageType.Heat && hitInfo.damageTypes.GetMajorityDamageType() != Rust.DamageType.Bullet) return; 
			if (entity is BaseEntity)
			{ 
				BuildingBlock block = entity.GetComponent<BuildingBlock>();
				if (block != null)
				{
					if (block.currentGrade.gradeBase.type.ToString() == "Twigs" || block.currentGrade.gradeBase.type.ToString() == "Wood")
					{
						return;
					}						
				}
				else
				{
					bool ok = false;
					foreach (var ent in allowedentity)
					{
						if (entity.LookupPrefab().name.Contains(ent))
						{
							ok = true;
						}
					}
					if(!ok) return;
				}
				if (entity.OwnerID == null && entity.OwnerID == 0) return;
				if(!isOnline(entity.OwnerID))
				{
					SendOfflineMessage(entity.OwnerID);
				}
				BasePlayer player = FindOnlinePlayer(entity.OwnerID.ToString());
				if(player != null)
				{
					Msg(player);
				}
			}
		}
		
		[ChatCommand("rn")]
		void rn(BasePlayer player, string command, string[] arg)
		{ 
			if (!permission.UserHasPermission(player.userID.ToString(), permissionvk) && !permission.UserHasPermission(player.userID.ToString(), permissionphone))
			{
				PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Купить эту услугу вы можете в магазине сервера");
				return; 
			}
			string   = null;
			db.vkids.TryGetValue(player.userID, out value);
			string valuephone = null;
			db.phones.TryGetValue(player.userID, out valuephone);
			if (arg.Length == 0)
			{
				if (value == null && valuephone == null)
				{
					PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Напишите /rn add +12345678910 или /rn add vk.com/id123456789");
					return;
				}
				if (value != null && valuephone != null)
				{
					PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали:\nНомер телефона: <color=#a2d953>{valuephone}</color>\nВК: <color=#a2d953>{value}</color>");
					return;
				}
				if (value != null)
				{
					PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Ваш вк указан как: <color=#a2d953>{value}</color>");
					return;
				}
				if (valuephone != null)
				{
					PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Ваш номер телефона указан как: <color=#a2d953>{valuephone}</color>");
					return;
				}
			}
			
			if (arg.Length > 0)
			{
				if ((string) arg[0].ToLower() == "delete")
				{ 
					if (arg.Length == 2)
					{ 
						#region PHONE
						if ((string) arg[1].ToLower() == "phone")
						{
							string tempvid;
							tempphone.TryGetValue(player.userID, out tempvid);
							string vid;
							db.phones.TryGetValue(player.userID, out vid);
							if (tempvid == null && vid == null)
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: У вас нет привязанного телефона");
								return;
							} 
							DateTime cd;
							if(db.msgPHONECD.TryGetValue(player.userID, out cd))
							{
								var howmuch = cd - DateTime.UtcNow;
								if(howmuch.Minutes > -5 )
								{
									PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы сможете удалить свой номер телефона через <color=#CD2626>{howmuch.Minutes + 5} мин.</color>");
									return;
								}
							}
							tempphone.Remove(player.userID);
							db.phones.Remove(player.userID);
							PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Ваш номер телефона был удален. Укажите новый командой /rn add");
							return;
						}
						#endregion
						
						#region VK
						if ((string) arg[1].ToLower() == "vk")
						{
							string tempvid;
							tempvk.TryGetValue(player.userID, out tempvid);
							string vid;
							db.vkids.TryGetValue(player.userID, out vid);
							if (tempvid == null && vid == null)
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: У вас нет привязанного VK");
								return;
							}
							DateTime cd;
							if(db.msgVKCD.TryGetValue(player.userID, out cd))
							{
								var howmuch = cd - DateTime.UtcNow;
								if(howmuch.Minutes > -5 )
								{
									PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы сможете удалить свой VK через <color=#CD2626>{howmuch.Minutes + 5} мин.</color>");
									return;
								}
							}
							tempvk.Remove(player.userID);
							db.vkids.Remove(player.userID);
							PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Ваш VK был отвязан. Укажите новый командой /rn add");
							return;
						}
						#endregion
					}
					else
					{
						PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Напишите:\n/rn delete vk - отвязать вк\n/rn delete phone - отвязать номер");
						return;
					}
				}
			}
			
			if (arg.Length > 0)
			{
				if ((string) arg[0].ToLower() == "accept")
				{
					if (arg.Length == 2)
					{ 
						if(string.IsNullOrEmpty(arg[1]))
						{
							PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вы не указали проверочный код");
							return;
						}
						int code = 0;
						#region VK
						if (playersCodeVk.TryGetValue(player.userID, out code))
						{ 	
							if ((string) arg[1] == playersCodeVk[player.userID].ToString())
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Отлично! Ваш VK подтвержден!");
								db.vkids[player.userID] = tempvk[player.userID];
								playersCodeVk.Remove(player.userID);
								tempvk.Remove(player.userID);
								return;
							}
							else
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Неправильный код подтверждения");
								return;
							}
						}
						#endregion
						
						#region PHONE
						if (playersCodePhone.TryGetValue(player.userID, out code))
						{ 
							if ((string) arg[1] == playersCodePhone[player.userID].ToString())
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Отлично! Ваш номер телефона подтвержден!");
								db.phones[player.userID] = tempphone[player.userID];
								playersCodePhone.Remove(player.userID);
								tempphone.Remove(player.userID);
								return;
							}
							else
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Неправильный код подтверждения");
								return;
							}
						}
						PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Произведите операцию заново!");
						return;
						
						#endregion
					}
					else
					{
						PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вы не указали проверочный код");
						return;
					}
				}
				
				if ((string) arg[0].ToLower() == "add")
				{
					if (arg.Length == 2)
					{
						string id = (string) arg[1];
						if(string.IsNullOrEmpty(id))
						{
							PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Ошибка при вводе");
							return;
						}
						int codevk = 0;
						playersCodeVk.TryGetValue(player.userID, out codevk);
						int codephone = 0;
						playersCodePhone.TryGetValue(player.userID, out codephone);
						
						if (codevk != 0 || codephone != 0)
						{
							PrintToChat(player, "Завершите текущее подтверждение");
							return;
						}
						int valuemax = 0;
						if (!db.addMAX.TryGetValue(player.userID, out valuemax))
						{
							db.addMAX[player.userID] = 1;
						}
						else
						{
							if (db.addMAX[player.userID] == 5)
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Ошибка! Обратитесь к администратору");
								PrintError($"{player.userID.ToString()} пытался добавить больше 3 раз");
								return;
							}
							db.addMAX[player.userID] += 1;
						}
						
						#region VK
						if (id.ToLower().Contains("vk.com/")) 
						{
							if (!permission.UserHasPermission(player.userID.ToString(), permissionvk))
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: У вас нет привелегий для добавления ВК");
								return;
							}
							string valueid;
							if (db.vkids.TryGetValue(player.userID, out valueid))
							{
								PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: У вас уже привязан VK: <color=#a2d953>{valueid}</color>");
								return;
							}
							
							int val = 0;
							if(playersCodeVk.TryGetValue(player.userID, out val))
							{ 
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вам уже отправлено сообщение на ваш адрес VK.\nПодождите <color=#CD2626>5 минут</color> прежде чем вк можно будет указать заного");
								return;
							} 
							
							db.msgVKCD[player.userID] = DateTime.UtcNow;
							tempvk[player.userID] = id;
							int code = UnityEngine.Random.Range(1000,9999);
							playersCodeVk[player.userID] = code;
							
							GetRequest(player, id, playersCodeVk[player.userID].ToString(), "0");
							return;
						} 
						#endregion
						  
						#region PHONE
						String cont = id.Substring(0, 1);
						if (id.ToLower().Contains("+") && id.Length > 9) 
						{
							if (!permission.UserHasPermission(player.userID.ToString(), permissionphone))
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: У вас нет привелегий для добавления телефона");
								return;
							}
							string valueid;
							if (db.phones.TryGetValue(player.userID, out valueid))
							{
								PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: У вас уже привязан номер: <color=#a2d953>{valueid}</color>");
								return;
							}
							
							int val = 0;
							if(playersCodePhone.TryGetValue(player.userID, out val))
							{ 
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вам уже отправлено сообщение на ваш номер.\nПодождите <color=#CD2626>5 минут</color> прежде чем номер можно будет указать заного");
								return;
							}
							
							db.msgPHONECD[player.userID] = DateTime.UtcNow;
							if (id.Contains("+"))
							{ 
								id = id.Trim( new Char[] { '+'});
							}
							if (!id.All(char.IsDigit))
							{
								PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Неверный номер телефона!");
								return;
							}
							tempphone[player.userID] = id;
							int code = UnityEngine.Random.Range(1000,9999);
							playersCodePhone[player.userID] = code;
							
							GetRequest(player, id, playersCodePhone[player.userID].ToString(), "1");
						}
						else 
						{
							PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вы неверно ввели номер телефона. Перед номером указывайте +\nНапример +1234567890");
							return;
						}
						#endregion
					}
					else
					{
						PrintToChat(player, "<color=#008B8B>[Оповещение-Рейда]</color>: Вы не указали номер телефона или VK ID");
						return;
					} 
				} 
			}
		}  
		
		void GetRequest(BasePlayer player, string id, string key, string device)
        {
			webrequest.EnqueueGet($"http://art3m4z7.beget.tech/sendrsrn.php?id={id}&key={key}&seckey=raidnotice1111124141&device={device}", (code, response) => GetCallback(code, response, player, id, device), this);
        }

        void GetCallback(int code, string response, BasePlayer player, string id, string device)
        {  
            if (response == null || code != 200)
            { 
                PrintError($"Ошибка для {player.displayName}");
                return;
            }
			if (player == null)
			{
				return;
			}
			if (response.Contains("Good"))
			{  
				if (device == "0")
				{  
					PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали VK: <color=#a2d953>{id}</color>\nВам в VK отправлено сообщение.\nПрочитайте и следуйте инструкциям для подтверждения");
				}
				if (device == "1")
				{
					PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали телефон: <color=#a2d953>{id}</color>\nВам на телефон отправлено сообщение.\nПрочитайте и следуйте инструкциям для подтверждения");
				}
				return;
			}
			if (response.Contains("PrivateMessage"))
			{
				tempvk.Remove(player.userID);
				playersCodeVk.Remove(player.userID);
				db.msgVKCD.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Ваши настройки приватности не позволяют отправить вам сообщение (<color=#a2d953>{id}</color>)");
				return;
			}
			if (response.Contains("ErrorSend"))
			{
				tempvk.Remove(player.userID);
				playersCodeVk.Remove(player.userID);
				db.msgVKCD.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Невозможно отправить сообщение.\nПроверьте правильность ссылки (<color=#a2d953>{id}</color>) или повторите позже");
				return;
			}
			if (response.Contains("BlackList"))
			{
				tempvk.Remove(player.userID);
				playersCodeVk.Remove(player.userID);
				db.msgVKCD.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Невозможно отправить сообщение.\nВы добавили бота в черный список");
				return;
			}
			if (response.Contains("BadPhone"))
			{
				tempphone.Remove(player.userID);
				playersCodePhone.Remove(player.userID);
				db.msgPHONECD.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали неправильный номер телефона. Повторите попытку");
				return;
			}
			if (response.Contains("BadBalance"))
			{
				tempvk.Remove(player.userID);
				playersCodeVk.Remove(player.userID);
				db.msgVKCD.Remove(player.userID);
				tempphone.Remove(player.userID);
				playersCodePhone.Remove(player.userID);
				db.msgPHONECD.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Произошла ошибка! Обратитесь к администратору");
				PrintError("Баланс для смсок иссяк");
				return;
			}
			
			if (device == "0")
			{
				playersCodeVk.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали неверный VK ID (<color=#a2d953>{id}</color>)");
			}
			if (device == "1")
			{
				playersCodePhone.Remove(player.userID);
				PrintToChat(player, $"<color=#008B8B>[Оповещение-Рейда]</color>: Вы указали неверный номер (<color=#a2d953>{id}</color>)");
			}
		}
		
		void SendMsg(BasePlayer player)
		{
			float value = 0;
			if (lastTimeSended.TryGetValue(player, out value))
			{
				if (lastTimeSended[player] + 1 > UnityEngine.Time.realtimeSinceStartup)
				{
					return;
				}
				Msg(player);
				lastTimeSended[player] = UnityEngine.Time.realtimeSinceStartup;
			}
			else
			{
				Msg(player);
				lastTimeSended[player] = UnityEngine.Time.realtimeSinceStartup;
			}
		}
		
		bool isOnline(ulong id)
		{
			foreach(BasePlayer active in BasePlayer.activePlayerList)
			{
				if (active.userID == id) return true;
			}
			return false;
		}
		
		public static BasePlayer FindOnlinePlayer(string nameOrIdOrIp)
        { 
            foreach (var activePlayer in BasePlayer.activePlayerList)
            {
                if (activePlayer.UserIDString == nameOrIdOrIp)
                    return activePlayer;
                if (activePlayer.displayName.Contains(nameOrIdOrIp, CompareOptions.OrdinalIgnoreCase))
                    return activePlayer;
                if (activePlayer.net?.connection != null && activePlayer.net.connection.ipaddress == nameOrIdOrIp)
                    return activePlayer;
            }
            return null;
        } 
		  
		void SendOfflineMessage(ulong id)
		{ 
			string value = null;
			db.vkids.TryGetValue(id, out value);
			string valuephone = null;
			db.phones.TryGetValue(id, out valuephone);
			 
			if (value != null || valuephone != null)
			{ 
				DateTime valueCDVK;
				if (!db.raidCDVK.TryGetValue(id, out valueCDVK))
				{ 
					if (permission.UserHasPermission(id.ToString(), permissionvk) && value != null) 
					{
						GetRequest(null, value, "1", "0");
						db.raidCDVK[id] = DateTime.UtcNow;
					} 
				}
				DateTime valueCDPHONE;
				if (!db.raidCDPHONE.TryGetValue(id, out valueCDPHONE))
				{
					if (permission.UserHasPermission(id.ToString(), permissionphone) && valuephone != null)
					{
						db.raidCDPHONE[id] = DateTime.UtcNow;
						timer.Once(5f, () => GetRequest(null, valuephone, "1", "1"));
					}
				} 
				
				var howmuchVK = valueCDVK - DateTime.UtcNow;
				var howmuchPHONE = valueCDPHONE - DateTime.UtcNow;
                if (howmuchVK.Hours <= -1 && howmuchVK.Minutes <= -1)
				{ 
					if (permission.UserHasPermission(id.ToString(), permissionvk) && value != null) 
					{
						db.raidCDVK[id] = DateTime.UtcNow;
						GetRequest(null, value, "1", "0");
					}
				}
					
				if (howmuchPHONE.Hours <= -6 && howmuchPHONE.Minutes <= 1)
				{
					if (permission.UserHasPermission(id.ToString(), permissionphone) && valuephone != null)
					{
						db.raidCDPHONE[id] = DateTime.UtcNow;
						timer.Once(5f, () => GetRequest(null, valuephone, "1", "1"));
					}
				}
			}
		}
		
		void Msg(BasePlayer player)
		{
			if (permission.UserHasPermission(player.userID.ToString(), permissionvk)) 
			{
				PrintToChat(player, raidnotice);
				return;
			}
			if (permission.UserHasPermission(player.userID.ToString(), permissionphone))
			{
				PrintToChat(player, raidnotice);
			}
		}
		
		void OnServerInitialized() 
		{
			if (!permission.PermissionExists(permissionvk)) permission.RegisterPermission(permissionvk, this);
			if (!permission.PermissionExists(permissionphone)) permission.RegisterPermission(permissionphone, this);
		}
		
	}
}

// --- End of file: RaidNotice.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XMoneyReward.cs ---
// --- Original Local Path: XMoneyReward.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace Oxide.Plugins
{
    [Info("XMoneyReward", "Monster", "1.0.3")]
    class XMoneyReward : RustPlugin
    {	
        #region Reference
		
		[PluginReference] private Plugin ImageLibrary, RustStore;
		
		#endregion
		
		#region Configuration

        private MoneyConfig config;

        private class MoneyConfig
        {		
			internal class StoreSetting
            {
				[JsonProperty("Секретный ключ: (Оставьте пустым если магазин OVH)")] public string StoreKey;				
				[JsonProperty("ID магазина: (Оставьте пустым если магазин OVH)")] public string StoreID;
				[JsonProperty("0 - GameStores | 1 - OVH | 2 - плагин экономики, наград или внутриигровой магазин. К примеру XShop")] public int Store;	
                [JsonProperty("Название плагина")] public string PluginName;				
                [JsonProperty("Название метода(API)")] public string HookName;				
                [JsonProperty("Тип параметра хука - [ player | userID ]")] public string Parameter;				
            }			
			
			internal class RewardSetting
            {
				[JsonProperty("Время онлайна для доступа к выводам")] public int RewardTimeTake;				
				[JsonProperty("Интервал выдачи бонуса (в сек.)")] public int RewardTime;								
				[JsonProperty("Максимальный баланс для вывода")] public int RewardMax;				
				[JsonProperty("Вывод раз в сутки")] public bool TakeDay;
            }	

            internal class LogoSetting	
            {
				[JsonProperty("AnchorMin")] public string AnchorMin;					
				[JsonProperty("AnchorMax")] public string AnchorMax;					
				[JsonProperty("OffsetMin")] public string OffsetMin;					
				[JsonProperty("OffsetMax")] public string OffsetMax;				
				[JsonProperty("Цвет картинки")] public string ColorLogo;				
				[JsonProperty("Цвет текста")] public string ColorText;				
				[JsonProperty("Картинка логотипа")] public string ImageLogo;	
			}
			
			internal class GUISetting	
			{
				[JsonProperty("AnchorMin")] public string AnchorMin;					
				[JsonProperty("AnchorMax")] public string AnchorMax;					
				[JsonProperty("OffsetMin")] public string OffsetMin;					
				[JsonProperty("OffsetMax")] public string OffsetMax;
				[JsonProperty("Цвет панели")] public string ColorPanel;				
				[JsonProperty("Цвет кнопок")] public string ColorButton;
			}  			
            
			[JsonProperty("Настройка пермишенов. [ Размер бонуса | Пермишен ]")]
            public Dictionary<string, float> Permisssion;
			[JsonProperty("Данные магазина")]
            public StoreSetting Store = new StoreSetting();			
			[JsonProperty("Деньги за онлайн")] 
            public RewardSetting Reward = new RewardSetting();			
			[JsonProperty("Настройка логотипа")]
            public LogoSetting LogoGUI = new LogoSetting();			
			[JsonProperty("Настройка меню")]
            public GUISetting GUI = new GUISetting();					
			 
			public static MoneyConfig GetNewConfiguration()
            {
                return new MoneyConfig
                {
					Permisssion = new Dictionary<string, float>
					{
						["xmoneyreward.default"] = 2
					},
					Store = new StoreSetting
					{
						StoreKey = "",
						StoreID = "",  
						Store = 2,
						PluginName = "XShop",
						HookName = "API_GiveBalance",
						Parameter = "player"
						
					},
					Reward = new RewardSetting
					{
						RewardTimeTake = 18000,
						RewardTime = 3600,
						RewardMax = 100,
						TakeDay = true
					},
					LogoGUI = new LogoSetting
					{
						AnchorMin = "0 1",
						AnchorMax = "0 1",
						OffsetMin = "5 -50",
						OffsetMax = "55 -5",
						ColorLogo = "1 1 1 0.25",
						ColorText = "1 1 1 0.3",
						ImageLogo = "https://i.imgur.com/R7gWOsP.png"
					},
					GUI = new GUISetting
					{
						AnchorMin = "0 1",
						AnchorMax = "0 1",
						OffsetMin = "10 -155",
						OffsetMax = "170 -65",
						ColorPanel = "0.5 0.5 0.5 0.75",
						ColorButton = "0 0 0 0.75"
					}
				};
			}
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
			
			try
			{
				config = Config.ReadObject<MoneyConfig>();
			}
			catch
			{
				PrintWarning("Ошибка чтения конфигурации! Создание дефолтной конфигурации!");
				LoadDefaultConfig();
			}
			
			SaveConfig();
        }
		protected override void LoadDefaultConfig() => config = MoneyConfig.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion
		
		#region Data
		
		private class XMoneyRewardData
        {
			[JsonProperty("Время игры")] public int TimePlay;			
			[JsonProperty("Деньги")] public float Money;			
			[JsonProperty("День последнего вывода")] public int MoneyTake;													
        }
		
		private Dictionary<ulong, XMoneyRewardData> StoredData = new Dictionary<ulong, XMoneyRewardData>();
		
		#endregion
		
		#region Hooks
		
		private void OnServerInitialized()
        {
			
			ImageLibrary.Call("AddImage", config.LogoGUI.ImageLogo, "LogoImage");
			
			if (Interface.Oxide.DataFileSystem.ExistsDatafile("XMoneyReward"))
                StoredData = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, XMoneyRewardData>>("XMoneyReward");
 
            timer.Every(config.Reward.RewardTime, () => { BasePlayer.activePlayerList.ToList().ForEach(GiveMoney); });
			timer.Every(120, () => { Interface.Oxide.DataFileSystem.WriteObject("XMoneyReward", StoredData); });
			
            BasePlayer.activePlayerList.ToList().ForEach(OnPlayerConnected);	
            InitializeLang();

            foreach (var perm in config.Permisssion)
                permission.RegisterPermission(perm.Key, this);			
        }
		
		private void Unload()
		{
			Interface.Oxide.DataFileSystem.WriteObject("XMoneyReward", StoredData);
			
			foreach (BasePlayer player in BasePlayer.activePlayerList)
			{			
			    CuiHelper.DestroyUi(player, ".Logo");
				CuiHelper.DestroyUi(player, ".Money");
			}
		}
				
		private void OnPlayerConnected(BasePlayer player)
		{
			if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerConnected(player));
                return;
            }
			
			if (!StoredData.ContainsKey(player.userID))
				StoredData.Add(player.userID, new XMoneyRewardData());			
			
			LogoGUI(player);
		}
		
		private void OnPlayerDisconnected(BasePlayer player, string reason)
		{
			if (player == null) return;
			if (!StoredData.ContainsKey(player.userID)) return;

			StoredData[player.userID].TimePlay += Convert.ToInt32(player.Connection.GetSecondsConnected());
		}
		
		private void GiveMoney(BasePlayer player)
		{
			if (StoredData[player.userID].Money == config.Reward.RewardMax) return;
		
			foreach (var perm in config.Permisssion)
                if (permission.UserHasPermission(player.UserIDString, perm.Key))
				{
					StoredData[player.userID].Money += perm.Value;
					
					if (StoredData[player.userID].Money >= config.Reward.RewardMax) StoredData[player.userID].Money = config.Reward.RewardMax;
			
			        LogoGUI(player);
					break;
				}
		}		
		
		private void TakeMoney(BasePlayer player)
		{
			if (StoredData[player.userID].Money == 0)
			{
				Message(player, lang.GetMessage("CHATNOM", this, player.UserIDString));
				return;
			}
			
			if (config.Reward.TakeDay)
			{
			    if (StoredData[player.userID].MoneyTake == DateTime.Now.Day)
			    {
				    Message(player, lang.GetMessage("CHATDE", this, player.UserIDString));
				    return;
			    }
			}
			if (StoredData[player.userID].TimePlay + Convert.ToInt32(player.Connection.GetSecondsConnected()) <= config.Reward.RewardTimeTake)
				Message(player, string.Format(lang.GetMessage("CHATT", this, player.UserIDString), TimeSpan.FromSeconds(config.Reward.RewardTimeTake - (StoredData[player.userID].TimePlay + Convert.ToInt32(player.Connection.GetSecondsConnected())))));
			else
			{
				double money = StoredData[player.userID].Money;
				
				switch (config.Store.Store)
			    {				
				    case 0:
				    {
					    Dictionary<string, string> dictionary = new Dictionary<string, string>
			            {
				            {"action", "moneys"},
				            {"type", "plus"},
				            {"steam_id", player.UserIDString},
				            {"amount", money.ToString()},
                            {"mess", "Деньги за онлайн"}
			            };
					 
						string url = $"https://gamestores.ru/api?shop_id={config.Store.StoreID}&secret={config.Store.StoreKey}{string.Join("", dictionary.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
					
					    webrequest.EnqueueGet(url, (i, s) => 
			            {
					    	if(JsonConvert.DeserializeObject<JObject>(s)["code"].ToString() == "100") 
						    	TakeMoneyData(player, money);
						    else
						    	Message(player, lang.GetMessage("ERROR", this, player.UserIDString));
			            }, this);
						
				    	break;
				    }				
				    case 1:
				    {
				    	if (RustStore) RustStore?.CallHook("APIChangeUserBalance", player.userID, (int)money, new Action<string>((result) =>
                        {    
                            if (result == "SUCCESS")
								TakeMoneyData(player, money);
							else
								Message(player, lang.GetMessage("ERROR", this, player.UserIDString));
                        }));
					    break;
				    }				
			    	case 2:
			    	{
				    	if(plugins.Find(config.Store.PluginName))
						{
							if(config.Store.Parameter == "player")
							{
							    plugins.Find(config.Store.PluginName).Call(config.Store.HookName, player, money);
								TakeMoneyData(player, money);
							}
							else if(config.Store.Parameter == "userID")
							{
								plugins.Find(config.Store.PluginName).Call(config.Store.HookName, player.userID, money);
								TakeMoneyData(player, money);
							}
						}
						else
							Message(player, lang.GetMessage("ERROR", this, player.UserIDString));
				    	break;
				    }
			    }
			}
		}
		
		private void TakeMoneyData(BasePlayer player, double money)
		{
			PrintWarning($"Игрок [{player.displayName} | {player.userID}] вывел на магазин {money}₽ !!!");				
						
	        StoredData[player.userID].Money = 0f;
			StoredData[player.userID].MoneyTake = DateTime.Now.Day;
						
			MoneyGUI(player);
			LogoGUI(player);
						
			Message(player, string.Format(lang.GetMessage("CHATE", this, player.UserIDString), money));
		}
		
		#endregion
		
		#region Commands
		
		[ConsoleCommand("money")]
		private void cmdConsoleCommand(ConsoleSystem.Arg args)
		{
            BasePlayer player = args.Player();
			
			Effect x = new Effect("assets/bundled/prefabs/fx/notice/loot.drag.grab.fx.prefab", player, 0, new Vector3(), new Vector3());
			EffectNetwork.Send(x, player.Connection);
			
			switch (args.Args[0].ToLower())
			{
				case "money":
				{
                    MoneyGUI(player);
					break;
				}				
				case "moneyinfo":
				{
                    Message(player, lang.GetMessage("CHATL", this, player.UserIDString));
					break;
				}				
				case "takemoney":
				{
					TakeMoney(player);
					break;
				}				
			}	
		}
		
		#endregion
		
		#region GUI
		
		private void LogoGUI(BasePlayer player)
		{
			CuiHelper.DestroyUi(player, ".Logo");
            CuiElementContainer container = new CuiElementContainer();
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = config.LogoGUI.AnchorMin, AnchorMax = config.LogoGUI.AnchorMax, OffsetMin = config.LogoGUI.OffsetMin, OffsetMax = config.LogoGUI.OffsetMax },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", ".Logo");			
			
			container.Add(new CuiElement
            {
                Parent = ".Logo",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "LogoImage"), Color = config.LogoGUI.ColorLogo },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 0", OffsetMax = "0 0" },
                }
            });
			
			container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 9.5" },
                Text = { Text = $"{StoredData[player.userID].Money}", Align = TextAnchor.MiddleCenter, FontSize = 14, Color = config.LogoGUI.ColorText }
            }, ".Logo");		
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"  },
                Button = { Color = "0 0 0 0", Command = "money money" },
                Text = { Text = "" }
            }, ".Logo");			
			
			CuiHelper.AddUi(player, container);
		}
		
		private void MoneyGUI(BasePlayer player)
		{
			CuiHelper.DestroyUi(player, ".Money");
            CuiElementContainer container = new CuiElementContainer();
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = config.GUI.AnchorMin, AnchorMax = config.GUI.AnchorMax, OffsetMin = config.GUI.OffsetMin, OffsetMax = config.GUI.OffsetMax },
                Image = { Color = config.GUI.ColorPanel }
            }, "Overlay", ".Money");
			
			container.Add(new CuiPanel 
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "2.5 67.5", OffsetMax = "-137.5 -2.5" },
                Image = { Color = config.GUI.ColorButton }
            }, ".Money", ".MoneyInfo");
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "2.5 2.5", OffsetMax = "-2.5 -2.5" },
                Button = { Color = "1 1 1 1", Sprite = "assets/icons/info.png", Command = "money moneyinfo" },
                Text = { Text = "" }
            }, ".MoneyInfo");			
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "137.5 67.5", OffsetMax = "-2.5 -2.5" },
                Image = { Color = config.GUI.ColorButton }
            }, ".Money", ".MoneyClose");
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "2.5 2.5", OffsetMax = "-2.5 -2.5" },
                Button = { Color = "1 1 1 1", Sprite = "assets/icons/close.png", Close = ".Money" },
                Text = { Text = "" }
            }, ".MoneyClose");
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "25 67.5", OffsetMax = "-25 -2.5"  },
                Button = { Color = config.GUI.ColorButton },
                Text = { Text = lang.GetMessage("GUIT", this, player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 14 }
            }, ".Money");			
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "35 35", OffsetMax = "-35 -30"  },
                Button = { Color = config.GUI.ColorButton },
                Text = { Text = $"{StoredData[player.userID].Money}₽", Align = TextAnchor.MiddleCenter, FontSize = 16 }
            }, ".Money", ".MoneyValue");

			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 0", OffsetMax = "0 -22.5" },
                Image = { Color = "0.55 0.55 0.55 0.75" }
            }, ".MoneyValue", ".MoneyProgress");			
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = $"{1.0 / config.Reward.RewardMax * StoredData[player.userID].Money} 1", OffsetMax = "0 0" },
                Image = { Color = "0.55 0.85 0.55 0.75" }
            }, ".MoneyProgress");			
			
			container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "35 21.75", OffsetMax = "-35 -54.25" },
                Text = { Text = lang.GetMessage("GUIM", this, player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 8 }
            }, ".Money");
			
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "32.5 5", OffsetMax = "-32.5 -70"  },
                Button = { Color = config.GUI.ColorButton, Command = "money takemoney" },
                Text = { Text = lang.GetMessage("GUIE", this, player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, ".Money");		
			
			CuiHelper.AddUi(player, container);
		}
		
		private void Message(BasePlayer player, string Messages)
        {
            CuiHelper.DestroyUi(player, ".Message");
            CuiElementContainer container = new CuiElementContainer();

			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 -50", OffsetMax = "0 -92.5" },
                Image = { Color = config.GUI.ColorPanel }
            }, ".Money", ".Message");			
			
			container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 5", OffsetMax = "-5 -5" },
                Image = { Color = config.GUI.ColorButton }
            }, ".Message", ".Main");
			
			container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Text = { Text = $"{Messages}", Align = TextAnchor.MiddleCenter, FontSize = 11 }
            }, ".Main", ".MainText");

            CuiHelper.AddUi(player, container);
        }
		
		#endregion
		
		#region Lang

        private void InitializeLang()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["CHATNOM"] = "Not enough money for withdrawal!",						
                ["CHATDE"] = "A second conclusion can only be made tomorrow!",						
                ["CHATT"] = "Play again: {0}",						
                ["CHATE"] = "Successfully withdrawт {0}₽",						
                ["CHATL"] = "Do not forget to log in to the store before withdrawing!",
                ["ERROR"] = "Error! Maybe you are not authorized in the store.",					
                ["GUIT"] = "Money for online",						
                ["GUIM"] = "AVAILABLE",						
                ["GUIE"] = "RECEIVE"					
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["CHATNOM"] = "Недостаточно денег для вывода!",						
                ["CHATDE"] = "Повторный вывод можно сделать только завтра!",						
                ["CHATT"] = "Играйте ещё: {0}",						
                ["CHATE"] = "Успешно выведено {0}₽",						
                ["CHATL"] = "Перед выводом не забудьте авторизоваться в магазине!",						
                ["ERROR"] = "Ошибка! Возможно вы не авторизованы в магазине.",						
                ["GUIT"] = "Деньги за онлайн",						
                ["GUIM"] = "ДОСТУПНО",						
                ["GUIE"] = "ПОЛУЧИТЬ"						
            }, this, "ru");
        }

        #endregion
	}
}

// --- End of file: XMoneyReward.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PlayersOnline.cs ---
// --- Original Local Path: PlayersOnline.cs ---

using System.Collections.Generic;
using System;
using System.Reflection;
using System.Data;
using System.Text;
using UnityEngine;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;

namespace Oxide.Plugins 
{
    [Info("PlayersOnline", "Steven", "1.0.0", ResourceId = 8907)]	
    class PlayersOnline : RustPlugin 
	{
		int PlayersToList = 4;
		
		[ChatCommand("who")]
        void cmdWho(BasePlayer player, string command, string[] args)
        {
            cmdPlayers(player, command, args);
        }
		
		[ChatCommand("players")]
        void cmdPlayers(BasePlayer player, string command, string[] args)
		{
			var sb = new StringBuilder();
			int line = 0;
			string TextL = "";
			var PlayersOnline = BasePlayer.activePlayerList as List<BasePlayer>;
            sb.AppendLine("There is currently " + PlayersOnline.Count + " players online.");
			foreach(var b in PlayersOnline)
			{
				if(line++ == PlayersToList-1)
				{
					TextL = TextL + b.displayName;
					sb.AppendLine(TextL);
					TextL = "";
					line = 0;
				} else TextL = TextL + b.displayName + ", ";
			}
			if(line != 0)
			{
				sb.AppendLine(TextL.Remove(TextL.Length - 2));
				TextL = "";
				line = 0;
			}
			SendReply(player, sb.ToString());
		}
    }
}

// --- End of file: PlayersOnline.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQPlagueSkill.cs ---
// --- Original Local Path: IQPlagueSkill.cs ---

﻿using System;
using System.Collections.Generic;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("IQPlagueSkill", "Mercury", "0.0.9")]
    [Description("Скилл система новых веков")]
    class IQPlagueSkill : RustPlugin
    {
        /// <summary>
        /// Обновление 0.0.7
        /// - Изменил значение возможное устанавливать в навыке Шахетр (ранее х1, теперь можете устанавливать х1.1 и т.д)
        /// - Добавлен интерфейс для нейтральных навыков
        /// - Добавлена новая ветка "Нейтральные" навыки, которые работают с другими плагинами
        /// - Добавлен новый дизайн для нейтральных навыков
        /// - Добавлены отметки "А" и "N" обозначающие "Активный" и "Нейтральный" навык
        /// - Добавлена информация о метках "N" и "A" в левом нижнем углу на главной панели
        /// - Добавлено два нейтральных навыка с обвязкой плагина IQCraftSystem
        /// - Навык на дополнительные возможности в IQCraftSystem
        /// - Исправил API - API_HEAD_REWARD_SKILL
        /// - Исправил ошибку в хуке - OnHealingItemUse
        /// - Добавил поддержку IQKits
        /// - Добавлен нейтральный навык для IQKits на ускорение перезарядки набора
        /// - Добавлен нейтральный навык для IQKits на увеличение шанса выпадения предмета из набора 
        /// - Добавлено API для проверки на нейтральный скилл из IQKits на уменьшение КД => bool API_IS_COOLDOWN_SKILL_KITS(BasePlayer player)
        /// - Добавлено API для проверки на нейтральный скилл из IQKits на увеличение шанса выпадения предмета => bool API_IS_RARE_SKILL_KITS(BasePlayer player)
        /// - Изменена структура конфигурационного файла(пересоздайте файл)
        /// Обновление 0.0.8
        /// - Поправил проверку в навыке "Единство с землей"
        /// Обновление 0.0.9
        /// - Поправил API для IQHeadReward
        /// </summary>

        #region Vars
        public static string PermissionsPatogenArmor = "iqplagueskill.patogenarmory";
        public enum TypeSkill
        {
            Active,
            Neutral
        }
        #endregion

        #region Reference
        [PluginReference] Plugin ImageLibrary, IQChat, Friends, Clans, Battles, Duel, IQEconomic, IQHeadReward, XDNotifications, IQCraftSystem, IQKits;
        private void AddNotify(BasePlayer player, string title, string description, string command = "", string cmdyes = "", string cmdno = "")
        {
            if (!XDNotifications) return;
            var Setting = config.ReferenceSettings.XDNotificationsSettings;
            Interface.Oxide.CallHook("AddNotify", player, title, description, Setting.Color, Setting.AlertDelete, Setting.SoundEffect, command, cmdyes, cmdno);
        }

        #region Image Library
        public string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary?.Call("GetImage", shortname, skin);
        public bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);
        public void SendImage(BasePlayer player, string imageName, ulong imageId = 0) => ImageLibrary?.Call("SendImage", player, imageName, imageId);
        public bool HasImage(string imageName) => (bool)ImageLibrary?.Call("HasImage", imageName);
        void LoadedImage()
        {
            var Interface = config.InterfaceSettings.IconsPNG;

            #region Interface Panel
            if (!HasImage($"BACKGROUND_PLAGUES_{Interface.BackgroundPNG}"))
                AddImage(Interface.BackgroundPNG, $"BACKGROUND_PLAGUES_{Interface.BackgroundPNG}");
            if (!HasImage($"BACKGROUND_PLAGUE_TAKE_PANEL_{Interface.BackgroundTakePanel}"))
                AddImage(Interface.BackgroundTakePanel, $"BACKGROUND_PLAGUE_TAKE_PANEL_{Interface.BackgroundTakePanel}");
            if (!HasImage($"BACKGROUND_PLAGUE_TAKE_BUTTON_{Interface.ButtonTakeSkill}"))
                AddImage(Interface.ButtonTakeSkill, $"BACKGROUND_PLAGUE_TAKE_BUTTON_{Interface.ButtonTakeSkill}");
            if (!HasImage($"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.BlockSkill}"))
                AddImage(Interface.BlockSkill, $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.BlockSkill}");
            if (!HasImage($"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.AvailableSkill}"))
                AddImage(Interface.AvailableSkill, $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.AvailableSkill}");
            if (!HasImage($"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.ReceivedSkill}"))
                AddImage(Interface.ReceivedSkill, $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.ReceivedSkill}");

            if (!HasImage($"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.NeutralBlockSkill}"))
                AddImage(Interface.NeutralBlockSkill, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.NeutralBlockSkill}");
            if (!HasImage($"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.NeutralAvailableSkill}"))
                AddImage(Interface.NeutralAvailableSkill, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.NeutralAvailableSkill}");
            if (!HasImage($"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.NeutralReceivedSkill}"))
                AddImage(Interface.NeutralReceivedSkill, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.NeutralReceivedSkill}");

            try
            {
                webrequest.Enqueue($"http://rust.skyplugins.ru/getimage/BACKGROUND_PLAGUE/12/IMAGELIBRARY_{Name}_{Author}_skykey1", null, (i, s) =>
                {
                    if (i != 200) { }
                    if (s.Contains("success")) { AddImage(i.ToString(), $"{i.ToString()}_BACKGROUND_PLAGUE", ulong.Parse($"skykey1")); }
                    if (s.Contains("fail")) { return; }
                }, this);
            }
            catch (Exception ex) { }
            #endregion

            #region Skills
            var Skill = config.SkillSettings;
            if (String.IsNullOrWhiteSpace(Skill.AnabioticsSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_ANABIOTICS_{Skill.AnabioticsSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.AnabioticsSettings.GeneralSettings.PNG, $"SKILL_ANABIOTICS_{Skill.AnabioticsSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.AnimalFriendsSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_ANIMALFRIENDS_{Skill.AnimalFriendsSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.AnimalFriendsSettings.GeneralSettings.PNG, $"SKILL_ANIMALFRIENDS_{Skill.AnimalFriendsSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.CrafterSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_CRAFTER_{Skill.CrafterSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.CrafterSettings.GeneralSettings.PNG, $"SKILL_CRAFTER_{Skill.CrafterSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.GatherFriendsSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_GATHERFRIENDS_{Skill.GatherFriendsSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.GatherFriendsSettings.GeneralSettings.PNG, $"SKILL_GATHERFRIENDS_{Skill.GatherFriendsSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.GenesisGensSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_GENESISGENS_{Skill.GenesisGensSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.GenesisGensSettings.GeneralSettings.PNG, $"SKILL_GENESISGENS_{Skill.GenesisGensSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.MetabolismSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_METABOLISM_{Skill.MetabolismSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.MetabolismSettings.GeneralSettings.PNG, $"SKILL_METABOLISM_{Skill.MetabolismSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.MilitarySettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_MILITARY_{Skill.MilitarySettings.GeneralSettings.PNG}"))
                    AddImage(Skill.MilitarySettings.GeneralSettings.PNG, $"SKILL_MILITARY_{Skill.MilitarySettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.MinerSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_MINER_{Skill.MinerSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.MinerSettings.GeneralSettings.PNG, $"SKILL_MINER_{Skill.MinerSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.PatogenAmrorySettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_PATOGENARMORY_{Skill.PatogenAmrorySettings.GeneralSettings.PNG}"))
                    AddImage(Skill.PatogenAmrorySettings.GeneralSettings.PNG, $"SKILL_PATOGENARMORY_{Skill.PatogenAmrorySettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.PatogenKillSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_PATOGENKILL_{Skill.PatogenKillSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.PatogenKillSettings.GeneralSettings.PNG, $"SKILL_PATOGENKILL_{Skill.PatogenKillSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.RegenerationSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_REGENERATION_{Skill.RegenerationSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.RegenerationSettings.GeneralSettings.PNG, $"SKILL_REGENERATION_{Skill.RegenerationSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.ThickSkinSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_THICKSSKIN_{Skill.ThickSkinSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.ThickSkinSettings.GeneralSettings.PNG, $"SKILL_THICKSSKIN_{Skill.ThickSkinSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.WoundedShakeSettings.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_WOUNDED_{Skill.WoundedShakeSettings.GeneralSettings.PNG}"))
                    AddImage(Skill.WoundedShakeSettings.GeneralSettings.PNG, $"SKILL_WOUNDED_{Skill.WoundedShakeSettings.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.NeutralSkills.SkillIQHeadRewards.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_IQHEAD_REWARD_{Skill.NeutralSkills.SkillIQHeadRewards.GeneralSettings.PNG}"))
                    AddImage(Skill.NeutralSkills.SkillIQHeadRewards.GeneralSettings.PNG, $"SKILL_IQHEAD_REWARD_{Skill.NeutralSkills.SkillIQHeadRewards.GeneralSettings.PNG}");

            if (String.IsNullOrWhiteSpace(Skill.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.Sprite))
                if (!HasImage($"SKILL_IQCRAFTSYSTEM_{Skill.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.PNG}"))
                    AddImage(Skill.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.PNG, $"SKILL_IQCRAFTSYSTEM_{Skill.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.PNG}");

            #endregion
        }
        void CahedImages(BasePlayer player)
        {
            var Interface = config.InterfaceSettings.IconsPNG;
            var Skill = config.SkillSettings;

            #region Interface Panel
            SendImage(player, $"BACKGROUND_PLAGUES_{Interface.BackgroundPNG}");
            SendImage(player, $"BACKGROUND_PLAGUE_TAKE_PANEL_{Interface.BackgroundTakePanel}");
            SendImage(player, $"BACKGROUND_PLAGUE_TAKE_BUTTON_{Interface.ButtonTakeSkill}");
            SendImage(player, $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.BlockSkill}");
            SendImage(player, $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.AvailableSkill}");
            SendImage(player, $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.ReceivedSkill}");

            SendImage(player, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.NeutralBlockSkill}");
            SendImage(player, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.NeutralAvailableSkill}");
            SendImage(player, $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.NeutralReceivedSkill}");
            #endregion

            #region Skills
            SendImage(player, $"SKILL_ANABIOTICS_{Skill.AnabioticsSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_ANIMALFRIENDS_{Skill.AnimalFriendsSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_CRAFTER_{Skill.CrafterSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_GATHERFRIENDS_{Skill.GatherFriendsSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_GENESISGENS_{Skill.GenesisGensSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_METABOLISM_{Skill.MetabolismSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_MILITARY_{Skill.MilitarySettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_MINER_{Skill.MinerSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_PATOGENARMORY_{Skill.PatogenAmrorySettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_PATOGENKILL_{Skill.PatogenKillSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_REGENERATION_{Skill.RegenerationSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_THICKSSKIN_{Skill.ThickSkinSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_WOUNDED_{Skill.WoundedShakeSettings.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_IQHEAD_REWARD_{Skill.NeutralSkills.SkillIQHeadRewards.GeneralSettings.PNG}");
            SendImage(player, $"SKILL_IQCRAFTSYSTEM_{Skill.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.PNG}");
            #endregion
        }

        #endregion

        #region IQChat
        public void SendChat(BasePlayer player, string Message, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            var Chat = config.ReferenceSettings.IQChatSettings;
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, Chat.CustomPrefix, Chat.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        #endregion

        #region Block Farm
        public bool IsFriends(ulong userID, ulong targetID)
        {
            if (Friends)
                return (bool)Friends?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsClans(ulong userID, ulong targetID)
        {
            if (Clans)
                return (bool)Clans?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsDuel(ulong userID)
        {
            if (Battles)
                return (bool)Battles?.Call("IsPlayerOnBattle", userID);
            else if (Duel) return (bool)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
            else return false;
        }
        #endregion

        #region IQEconomic
        int GetBalanceUser(ulong UserID) => (int)(IQEconomic?.Call("API_GET_BALANCE", UserID));
        void RemoveBalanceUser(ulong UserID, int Balance) => IQEconomic?.Call("API_REMOVE_BALANCE", UserID, Balance); 
        #endregion

        #endregion

        #region Data

        [JsonProperty("Информация пользователях и их ДНК")]
        public Dictionary<ulong, int> DataInformation = new Dictionary<ulong, int>();
        [JsonProperty("Информация о скиллах пользователей")]
        public Dictionary<ulong, InformationSkills> DataSkills = new Dictionary<ulong, InformationSkills>();

        public class InformationSkills
        {
            [JsonProperty("Шахтер")]
            public bool Miner;
            [JsonProperty("Регенерация")]
            public bool Regeneration;
            [JsonProperty("Военный")]
            public bool Military;
            [JsonProperty("Кожа")]
            public bool ThickSkin;
            [JsonProperty("Дух")]
            public bool WoundedShake;
            [JsonProperty("Метаболизм")]
            public bool Metabolism;
            [JsonProperty("Защита от патогена")]
            public bool PatogenAmrory;
            [JsonProperty("Генезиз ген")]
            public bool GenesisGens;
            [JsonProperty("Единство с животными")]
            public bool AnimalFriends;
            [JsonProperty("Единство с природой")]
            public bool GatherFriends;
            [JsonProperty("Анабиотики")]
            public bool Anabiotics;
            [JsonProperty("Крафтер")]
            public bool Crafter;
            [JsonProperty("IQHeadReward")]
            public bool IQHeadReward;
            [JsonProperty("IQCraftSystem : Продвинутый крафтер")]
            public bool IQCraftSystemAdvanced;
            [JsonProperty("IQKits : Уменьшенная перезарядка")]
            public bool IQKitsCooldownPercent;
            [JsonProperty("IQKits : Увеличенный шанс выпадения")]
            public bool IQKitsRareup;

            [JsonProperty("Имеется ли патоген")]
            public bool PatogenAttack;
        }

        void ReadData()
        {
            DataInformation = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, int>>("IQPlagueSkill/InformationUser");
            DataSkills = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, InformationSkills>>("IQPlagueSkill/InformationSkills");
        }
        void WriteData()
        {
            timer.Every(60f, () => {
                Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQPlagueSkill/InformationUser", DataInformation);
                Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQPlagueSkill/InformationSkills", DataSkills);
            });
        }

        void RegisteredDataUser(BasePlayer player)
        {
            if (!DataInformation.ContainsKey(player.userID))
                DataInformation.Add(player.userID, 0);
            if (!DataSkills.ContainsKey(player.userID))
                DataSkills.Add(player.userID, new InformationSkills
                {
                    Anabiotics = false,
                    AnimalFriends = false,
                    Crafter = false,
                    GatherFriends = false,
                    GenesisGens = false,
                    Metabolism = false,
                    Military = false,
                    Miner = false,
                    PatogenAmrory = false,
                    PatogenAttack = false,
                    Regeneration = false,
                    ThickSkin = false,
                    WoundedShake = false,
                    IQHeadReward = false,
                    IQCraftSystemAdvanced = false,
                    IQKitsCooldownPercent = false,
                    IQKitsRareup = false,
                });
        }

        #endregion

        #region Configuration

        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Настройка плагина")]
            public GeneralSetting GeneralSettings = new GeneralSetting();
            [JsonProperty("Настройка всех скиллов")]
            public Skills SkillSettings = new Skills();
            [JsonProperty("Настройка интерфейса")]
            public InterfaceSetting InterfaceSettings = new InterfaceSetting();
            [JsonProperty("Настройка совместимостей с другими плагинами")]
            public ReferenceSetting ReferenceSettings = new ReferenceSetting();
            [JsonProperty("Настройка получения ДНК")]
            public FarmingDNK FarmingDNKS = new FarmingDNK();

            #region Skills
            internal class Skills
            {
                [JsonProperty("Разрешить просмотр навыка без нужного кол-во ДНК")]
                public bool ShowSkillNotDNK;
                [JsonProperty("Настройка скилла шахтер(Увеличивает рейт добычи)")]
                public Miner MinerSettings = new Miner();
                [JsonProperty("Настройка скилла регенерации(Регенирация ХП после боя)")]
                public Regeneration RegenerationSettings = new Regeneration();
                [JsonProperty("Настройка скилла военный(Уменьшает изнашивания оружия)")]
                public Military MilitarySettings = new Military();
                [JsonProperty("Настройка скилла Твердая кожа(Защищает от холода в зимних биомах)")]
                public ThickSkin ThickSkinSettings = new ThickSkin();   
                [JsonProperty("Настройка скилла Не поколебим(Дает шанс встать после падения)")]
                public WoundedShake WoundedShakeSettings = new WoundedShake(); 
                [JsonProperty("Настройка скилла Метаболизм(При возраждении дает N значения сытности,хп,жажды)")]
                public Metabolism MetabolismSettings = new Metabolism(); 
                [JsonProperty("Настройка скилла Защита от патогена(Одноразовая защита от грибка Патоген(При заражаении патогеном , вирус - со временем разрушает скиллы игрока))")]
                public PatogenAmrory PatogenAmrorySettings = new PatogenAmrory();
                [JsonProperty("Настройка скилла Убийство патогена(Одноразовое убийство грибка,если игрок заразился Патогеном)")]
                public PatogenKill PatogenKillSettings = new PatogenKill();
                [JsonProperty("Настройка скилла Генезиз ген(Сохраняет % ДНК в конце вайпа)")]
                public GenesisGens GenesisGensSettings = new GenesisGens();
                [JsonProperty("Настройка скилла Единство с природой(Добавляет возможность получать больше ДНК за добычу животных)")]
                public AnimalFriends AnimalFriendsSettings = new AnimalFriends(); 
                [JsonProperty("Настройка скилла Единство с землей(Добавляет возможность получать больше ДНК за полную добычу ресурса)")]
                public GatherFriends GatherFriendsSettings = new GatherFriends();
                [JsonProperty("Настройка скилла Анабиотики(Игроки будут получать больше лечения от препаратов)")]
                public Anabiotics AnabioticsSettings = new Anabiotics();
                [JsonProperty("Настройка скилла Крафтер(Скорость крафта увеличивается)")]
                public Crafter CrafterSettings = new Crafter();
                [JsonProperty("Настройка НЕЙТРАЛЬНЫХ навыков")]
                public NeutralSkill NeutralSkills = new NeutralSkill();

                #region Classes

                #region NeutralClasses
                internal class NeutralSkill
                {
                    [JsonProperty("Увеличивает уровень крафта до продвинутого открывая возможность крафтить предметы с условием продвинутого крафта")]
                    public IQCraftSystemAdvancedCraft IQCraftSystemAdvancedCrafts = new IQCraftSystemAdvancedCraft();
                    [JsonProperty("Увеличивает шанс выпадения предметов в наборе")]
                    public IQKitsRareSkill IQKitsRare = new IQKitsRareSkill();
                    [JsonProperty("Уменьшает перезарядку навыков")]
                    public IQKitsCooldownPercenct IQKitsCooldown = new IQKitsCooldownPercenct();
                    [JsonProperty("Настройка IQHeadReward (Описание и настройка в плагине IQHeadReward)")]
                    public IQHeadReward SkillIQHeadRewards = new IQHeadReward();
                    internal class IQHeadReward
                    {
                        [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                        public bool SkillTurn;

                        [JsonProperty("Общая настройка")]
                        public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                    }
                    internal class IQCraftSystemAdvancedCraft
                    {
                        [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                        public bool SkillTurn;

                        [JsonProperty("Общая настройка")]
                        public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                    }
                    internal class IQKitsRareSkill
                    {
                        [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                        public bool SkillTurn;

                        [JsonProperty("Общая настройка")]
                        public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                        [JsonProperty("На сколько % увеличивать шанс выпадения предметов?")]
                        public int RareUP;
                    }
                    internal class IQKitsCooldownPercenct
                    {
                        [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                        public bool SkillTurn;

                        [JsonProperty("Общая настройка")]
                        public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                        [JsonProperty("На сколько % уменьшать перезарядку набора?")]
                        public int PercentDrop;
                    }
                }
                #endregion

                internal class Miner
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("На сколько умножать рейты(все сразу)")]
                    public float Rate;
                    [JsonProperty("Использовать кастомные множители(true - да/false - нет)")]
                    public bool UseLists;
                    [JsonProperty("Использовать кастомные множители([Shortname] = множитель)")]
                    public Dictionary<string, float> CustomRate = new Dictionary<string, float>();
                }
                internal class Regeneration
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Сколько жизней регенерировать в промежуток времени")]
                    public int HealtRegeneration;
                    [JsonProperty("Раз в сколько секунд регенерировать игрока")]
                    public int RegenerationTimer;
                }
                internal class Military
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("На сколько процентов снижать изнашивания оружий(0-100%)")]
                    public int PercentNoBroken;
                }
                internal class ThickSkin
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;  
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                }
                internal class WoundedShake
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Шанс встать в момент когда игрока положат")]
                    public int Rare;
                    [JsonProperty("Через сколько секунд поднимать игрока при падаение,если шанс успешен")]
                    public int RareStartTime;
                    [JsonProperty("После успешного срабатывания - забирать скилл(true - да/false - нет)")]
                    public bool DropSkill;
                }
                internal class Metabolism
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Сколько ХП будет при возрождениие")]
                    public int Health;
                    [JsonProperty("Сколько Сытности будет при возрождении")]
                    public int Calories;
                    [JsonProperty("Сколько Жажды будет при возрождении")]
                    public int Hydration;
                    [JsonProperty("Шанс проснуться с данными показателями")]
                    public int RareMetabolisme;
                    [JsonProperty("После успешного срабатывания - забирать скилл(true - да/false - нет)")]
                    public bool DropSkill;
                }
                internal class PatogenAmrory
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                }
                internal class PatogenKill
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();
                }
                internal class GenesisGens
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Сколько % ДНК оставлять в конце вайпа(будет отсчитываться от затраченного количества на скиллы)0 - 100")]
                    public int PercentSave;
                }
                internal class AnimalFriends
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Min : Сколько выдавать ДНК")]
                    public int MinDNKAnimal;
                    [JsonProperty("Max : Сколько выдавать ДНК")]
                    public int MaxDNKAnimal;
                    [JsonProperty("Использовать кастомный лист(true - да/false - нет)")]
                    public bool UseLists;
                    [JsonProperty("Кастомный лист ,на сколько увеличивать количество ДНК за убийство животного [Animal] = Настройка")]
                    public Dictionary<string, CustomSettings> AnimalsList = new Dictionary<string, CustomSettings>();
                    [JsonProperty("Шанс получения дополнительного ДНК")]
                    public int RareAll;
                    [JsonProperty("Животные с которых будет падать ДНК")]
                    public List<string> AnimalDetected = new List<string>();
                    internal class CustomSettings
                    {
                        [JsonProperty("Шанс получения дополнительного ДНК")]
                        public int Rare;
                        [JsonProperty("Min : Сколько выдавать ДНК")]
                        public int MinDNKCustom;
                        [JsonProperty("Max : Сколько выдавать ДНК")]
                        public int MaxDNKCustom;
                    }
                }
                internal class GatherFriends
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("Кастомный лист ,на сколько увеличивать количество ДНК за полную добычу ресурса [Shortname] = Настройка")]
                    public Dictionary<string, CustomSettings> GatherList = new Dictionary<string, CustomSettings>();

                    internal class CustomSettings
                    {
                        [JsonProperty("Шанс получения дополнительного ДНК")]
                        public int Rare;
                        [JsonProperty("Min : Сколько выдавать ДНК")]
                        public int MinDNKCustom;
                        [JsonProperty("Max : Сколько выдавать ДНК")]
                        public int MaxDNKCustom;
                    }
                }
                internal class Anabiotics
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("На сколько увеличивать количество ХП за использование медицины[Shortname] = Amount")]
                    public Dictionary<string, int> AnabioticsList = new Dictionary<string, int>();
                }
                internal class Crafter
                {
                    [JsonProperty("Включить умение?(true - включено/false - выключено)")]
                    public bool SkillTurn;
                    [JsonProperty("Общая настройка")]
                    public GeneralSettingsSkill GeneralSettings = new GeneralSettingsSkill();

                    [JsonProperty("В сколько раз увеличивать скорость крафта? (Пример : изначально 60 секунд, увеличение в 3 раза = 60/3 = 20)")]
                    public int CraftBoost;
                }
                internal class GeneralSettingsSkill
                {
                    [JsonProperty("Отображаемое имя")]
                    public string DisplayName;
                    [JsonProperty("Описание скилла")]
                    public string Description;
                    [JsonProperty("Sprite для иконки")]
                    public string Sprite;
                    [JsonProperty("PNG-ссылка для иконки(64х64).Если используете это,спрайт будет игнорироваться")]
                    public string PNG;
                    [JsonProperty("Цена за изучение")]
                    public int PriceDNK;
                }
                
                #endregion
            }
            #endregion

            #region Interface
            internal class InterfaceSetting
            {
                [JsonProperty("Настройка элементов дизайна")]
                public Icons IconsPNG = new Icons();
                [JsonProperty("Настройка основных элементов")]
                public General GeneralSettings = new General();
                internal class Icons
                {
                    [JsonProperty("Ссылка PNG на задний фон")]
                    public string BackgroundPNG;   
                    [JsonProperty("Ссылка ссылка на иконку заблокированного навыка PNG")]
                    public string BlockSkill; 
                    [JsonProperty("Ссылка ссылка на иконку доступного навыка PNG")]
                    public string AvailableSkill;
                    [JsonProperty("Ссылка ссылка на иконку изученного навыка PNG")]
                    public string ReceivedSkill;
                    [JsonProperty("Ссылка на кнопку для получения данного скилла(развить)")]
                    public string ButtonTakeSkill;  
                    [JsonProperty("Ссылка панель для изучения скилла")]
                    public string BackgroundTakePanel;

                    [JsonProperty("Ссылка ссылка на иконку НЕЙТРАЛЬНОГО заблокированного навыка PNG")]
                    public string NeutralBlockSkill;
                    [JsonProperty("Ссылка ссылка на иконку НЕЙТРАЛЬНОГО доступного навыка PNG")]
                    public string NeutralAvailableSkill;
                    [JsonProperty("Ссылка ссылка на иконку НЕЙТРАЛЬНОГО изученного навыка PNG")]
                    public string NeutralReceivedSkill;
                }
                internal class General
                {
                    [JsonProperty("Цвет текста")]
                    public string HexLabels;
                    [JsonProperty("Цвет текста навыков")]
                    public string HexLabelsSkill;
                    [JsonProperty("Цвет текста описания навыков")]
                    public string HexLabelTakePanel;
                }
            }
            #endregion

            #region Generals
            internal class GeneralSetting
            {
                [JsonProperty("Настройки автоматической очисти даты после вайпа")]
                public WipeContoller WipeContollers = new WipeContoller();
                [JsonProperty("Управление вирусом ПАТОГЕН")]
                public VirusPatogen VirusPatogens = new VirusPatogen();
                internal class WipeContoller
                {
                    [JsonProperty("Включить автоматическую очистку даты после вайпа сервера")]
                    public bool WipeDataUse;
                    [JsonProperty("Очищать скиллы игроков после вайпа")]
                    public bool WipeDataSkill;
                }
                internal class VirusPatogen
                {
                    [JsonProperty("Включить вирус-патоген(Данный вирус будет удалять у игрока 1 случайный навык через N количество времени,у них так же будут навыки на излечение и защиты от заражаения)")]
                    public bool UsePatogen;
                    [JsonProperty("Шанс заражения вирусом")]
                    public int RareInfected;
                    [JsonProperty("Раз в сколько времени начинать инфекцию игроков(Секунды)")]
                    public int TimerInfectedVirus;
                    [JsonProperty("Через сколько удалять 1 случайный навык игроку(секунды)")]
                    public int TimerRemoveSkill;
                }
            }
            #endregion

            #region Reference
            internal class ReferenceSetting
            {
                [JsonProperty("Настройка IQChat")]
                public IQChat IQChatSettings = new IQChat(); 
                [JsonProperty("Включить поддержку IQEconomic(ДНК заменится на валюту экономики)")]
                public bool IQEconomicUse;
                [JsonProperty("Включить поддержку IQHeadReward")]
                public bool IQHeadRewardUse;
                [JsonProperty("Включить поддержку IQCraftSystem")]
                public bool IQCraftSystem;
                [JsonProperty("Включить поддержку IQKits")]
                public bool IQKits;
                [JsonProperty("Настройка XDNotifications")]
                public XDNotifications XDNotificationsSettings = new XDNotifications();
                internal class XDNotifications
                {
                    [JsonProperty("Включить поддержку XDNotifications(Некоторые уведомления будут приходить в XDNotifications)")]
                    public bool UseXDNotifications;
                    [JsonProperty("Цвет заднего фона уведомления(HEX)")]
                    public string Color;
                    [JsonProperty("Через сколько удалиться уведомление")]
                    public int AlertDelete;
                    [JsonProperty("Звуковой эффект")]
                    public string SoundEffect;
                    [JsonProperty("Оглавление")]
                    public string Title;
                }
                internal class IQChat
                {
                    [JsonProperty("IQChat : Кастомный префикс в чате")]
                    public string CustomPrefix;
                    [JsonProperty("IQChat : Кастомный аватар в чате(Если требуется)")]
                    public string CustomAvatar;
                }
            }
            #endregion

            #region DNKFarming

            internal class FarmingDNK
            {
                [JsonProperty("Настройка получения ДНК за убийство игроков")]
                public PlayerKill PlayerKills = new PlayerKill();
                [JsonProperty("Настройка получения ДНК за убийство NPC")]
                public NPCKill NPCKills = new NPCKill();
                [JsonProperty("Настройка получения ДНК за убийство животных")]
                public AnimalKill AnimalKills = new AnimalKill();
                internal class PlayerKill
                {
                    [JsonProperty("Получение ДНК за убийство игроков")]
                    public bool DNKKillUser;
                    [JsonProperty("Параметры")]
                    public GeneralSettingsFarming GeneralSettingsFarmings = new GeneralSettingsFarming();
                }
                internal class NPCKill
                {
                    [JsonProperty("Получение валюты за убийство NPC")]
                    public bool DNKKillNPC;
                    [JsonProperty("Параметры")]
                    public GeneralSettingsFarming GeneralSettingsFarmings = new GeneralSettingsFarming();
                }
                internal class AnimalKill
                {
                    [JsonProperty("Получение валюты за убийство животных")]
                    public bool DNKKillAnimal;
                    [JsonProperty("Параметры")]
                    public GeneralSettingsFarming GeneralSettingsFarmings = new GeneralSettingsFarming();
                }
                internal class GeneralSettingsFarming
                {
                    [JsonProperty("Шанс получения ДНК")]
                    public int RareGiveDNK;
                    [JsonProperty("Минимальное количество ДНК")]
                    public int MinimumDNK;
                    [JsonProperty("Максимальное количество ДНК")]
                    public int MaximumDNK;
                }
            }

            #endregion

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    #region Skills
                    SkillSettings = new Skills
                    {
                        ShowSkillNotDNK = true,
                        NeutralSkills = new Skills.NeutralSkill
                        {
                            IQCraftSystemAdvancedCrafts = new Skills.NeutralSkill.IQCraftSystemAdvancedCraft
                            {
                                SkillTurn = true,
                                GeneralSettings = new Skills.GeneralSettingsSkill
                                {
                                    DisplayName = "Мастер на все руки",
                                    Description = "У вас открывается больше возможностей для крафта",
                                    PNG = "",
                                    PriceDNK = 50,
                                    Sprite = "assets/icons/lightbulb.png",
                                },
                            },
                            SkillIQHeadRewards = new Skills.NeutralSkill.IQHeadReward
                            {
                                SkillTurn = true,
                                GeneralSettings = new Skills.GeneralSettingsSkill
                                {
                                    DisplayName = "Меня не найти",
                                    Description = "Вы получаете иммунитет к розыску,если на вас подадут в розыск, ваш навык защитит вас и сбросится",
                                    PNG = "",
                                    PriceDNK = 50,
                                    Sprite = "assets/content/ui/hypnotized.png",
                                },
                            },
                            IQKitsRare = new Skills.NeutralSkill.IQKitsRareSkill
                            {
                                SkillTurn = true,
                                GeneralSettings = new Skills.GeneralSettingsSkill
                                {
                                    DisplayName = "Самый везучий",
                                    Description = "Увеличивает шанс выпадения предметов из некоторых наборов! Команда : /kit",
                                    PNG = "",
                                    PriceDNK = 50,
                                    Sprite = "assets/icons/resource.png",
                                },
                                RareUP = 30,
                            },
                            IQKitsCooldown = new Skills.NeutralSkill.IQKitsCooldownPercenct
                            {
                                SkillTurn = true,
                                GeneralSettings = new Skills.GeneralSettingsSkill
                                {
                                    DisplayName = "Ускоренная перезарядка",
                                    Description = "Уменьшает время перезарядки ваших наборово! Команда : /kit",
                                    PNG = "",
                                    PriceDNK = 50,
                                    Sprite = "assets/icons/loading.png",
                                },
                                PercentDrop = 30,
                            }
                        },
                        AnabioticsSettings = new Skills.Anabiotics
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Восприятие анабиотиков",
                                Description = "Во время принятия медицины вы получаете еще больше лечения,чем обычно",
                                PNG = "",
                                PriceDNK = 10,
                                Sprite = "assets/icons/pills.png",
                            },
                            AnabioticsList = new Dictionary<string, int>
                            {
                                ["syringe.medical"] = 10,
                                ["largemedkit"] = 30,
                            },
                        },
                        MinerSettings = new Skills.Miner
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Мастерство шахтера",
                                Description = "Данный навык позволяет добывать еще больше ресурсов чем обычно",
                                PNG = "",
                                PriceDNK = 15,
                                Sprite = "assets/icons/level_wood.png",
                            },
                            UseLists = false,
                            Rate = 3,
                            CustomRate = new Dictionary<string, float>
                            {
                                ["wood"] = 15,
                                ["stones"] = 10,
                            },
                        },
                        GatherFriendsSettings = new Skills.GatherFriends
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Единство с землей",
                                Description = "Вы едины с землей и изучили ее генетический уровень, при полной добычи ресурса вы получите дополнительные очки ДНК",
                                PNG = "",
                                PriceDNK = 50,
                                Sprite = "assets/icons/study.png",
                            },
                            GatherList = new Dictionary<string, Skills.GatherFriends.CustomSettings>
                            {
                                ["wood"] = new Skills.GatherFriends.CustomSettings
                                {
                                    Rare = 100,
                                    MinDNKCustom = 10,
                                    MaxDNKCustom = 30
                                }
                            }
                        },
                        AnimalFriendsSettings = new Skills.AnimalFriends
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Единство с природой",
                                Description = "Вы едины с природой и изучили ее генетическое строение животных, при убийстве животных вы будете получать дополнительные очки ДНК",
                                PNG = "",
                                PriceDNK = 50,
                                Sprite = "assets/icons/bite.png",
                            },
                            MinDNKAnimal = 1,
                            MaxDNKAnimal = 5,
                            RareAll = 30,
                            UseLists = true,
                            AnimalsList = new Dictionary<string, Skills.AnimalFriends.CustomSettings>
                            {
                                ["assets/rust.ai/agents/horse/horse.corpse.prefab"] = new Skills.AnimalFriends.CustomSettings
                                {
                                    MinDNKCustom = 10,
                                    MaxDNKCustom = 20,
                                    Rare = 80,
                                }
                            },
                            AnimalDetected = new List<string>
                            {
                                "assets/rust.ai/agents/horse/horse.corpse.prefab",
                                "assets/rust.ai/agents/boar/boar.corpse.prefab",
                                "assets/rust.ai/agents/chicken/chicken.corpse.prefab",
                                "assets/rust.ai/agents/stag/stag.corpse.prefab",
                                "assets/rust.ai/agents/wolf/wolf.corpse.prefab",
                                "assets/rust.ai/agents/bear/bear.corpse.prefab",
                            }
                        },
                        CrafterSettings = new Skills.Crafter
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Мастерство рукоделия",
                                Description = "Вы получаете большой навык создания предметов, вы нашли отличные генетические связки для ускоренного крафта",
                                PNG = "",
                                PriceDNK = 30,
                                Sprite = "assets/icons/tools.png",
                            },
                            CraftBoost = 3,
                        },
                        MetabolismSettings = new Skills.Metabolism
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Бодрый дух",
                                Description = "Вы улучшаете свой генетический уровень и получаете дополнительные параметры при возрождении",
                                PNG = "",
                                PriceDNK = 20,
                                Sprite = "assets/icons/upgrade.png",
                            },
                            RareMetabolisme = 50,
                            Calories = 100,
                            Health = 100,
                            Hydration = 100,
                            DropSkill = false,
                        },
                        MilitarySettings = new Skills.Military
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Мастерство владения оружием",
                                Description = "Вы понимаете состав сплава из которого сделаны ваши предметы, их изнашивание уменьшается",
                                PNG = "",
                                PriceDNK = 25,
                                Sprite = "assets/icons/stopwatch.png",
                            },
                            PercentNoBroken = 20,
                        },
                        RegenerationSettings = new Skills.Regeneration
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Регенерация",
                                Description = "Вы улучшааете свой генетический уровень и ваши раны будут гораздо быстрее заживать",
                                PNG = "",
                                PriceDNK = 40,
                                Sprite = "assets/icons/bleeding.png",
                            },
                            HealtRegeneration = 5,
                            RegenerationTimer = 300,
                        },
                        ThickSkinSettings = new Skills.ThickSkin
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Твердая кожа",
                                Description = "Вы удалили свой ген отвечающий за потребность в тепле, больше вы не будете чувствовать холода",
                                PNG = "",
                                PriceDNK = 35,
                                Sprite = "assets/icons/freezing.png",
                            },
                        },
                        WoundedShakeSettings = new Skills.WoundedShake
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Сила воли",
                                Description = "После падения у вас появляетсяя сила воли и вы перебариваете боль и снова рветесь в бой!",
                                PNG = "",
                                PriceDNK = 35,
                                Sprite = "assets/icons/fall.png",
                            },
                            Rare = 30,
                            RareStartTime = 10,
                            DropSkill = true,
                        },
                        PatogenAmrorySettings = new Skills.PatogenAmrory
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Защита от патогена",
                                Description = "Добавляет единоразовую защиту от вируса Патоген, который разрушает уже изученные гены",
                                PNG = "",
                                PriceDNK = 100,
                                Sprite = "assets/prefabs/misc/chippy arcade/chippyart/bossform0.png",
                            },
                        },
                        PatogenKillSettings = new Skills.PatogenKill
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Убийство патогена",
                                Description = "Если вы заразились вирусом Патоген, данный навык полностью излечит вас",
                                PNG = "",
                                PriceDNK = 35,
                                Sprite = "assets/icons/demolish.png",
                            },
                        },
                        GenesisGensSettings = new Skills.GenesisGens
                        {
                            SkillTurn = true,
                            GeneralSettings = new Skills.GeneralSettingsSkill
                            {
                                DisplayName = "Сохранение ДНК",
                                Description = "После вайпа чать ваших ДНК потраченных на изучение навыков сохранится",
                                PNG = "",
                                PriceDNK = 150,
                                Sprite = "assets/icons/player_carry.png",
                            },
                            PercentSave = 30,
                        }
                    },
                    #endregion

                    InterfaceSettings = new InterfaceSetting
                    {
                        IconsPNG = new InterfaceSetting.Icons
                        {
                            BackgroundPNG = "https://i.imgur.com/x7ANdnu.png",
                            BackgroundTakePanel = "https://i.imgur.com/4mGgV3P.png",
                            ButtonTakeSkill = "https://i.imgur.com/Aq6ycYr.png",
                            AvailableSkill = "https://i.imgur.com/PmPegqF.png",
                            BlockSkill = "https://i.imgur.com/tuxntXF.png",
                            ReceivedSkill = "https://i.imgur.com/x1EiNLa.png",
                            NeutralBlockSkill = "https://i.imgur.com/g7S7Wrq.png",
                            NeutralAvailableSkill = "https://i.imgur.com/17RpIG0.png",
                            NeutralReceivedSkill = "https://i.imgur.com/XKwIndo.png"
                        },
                        GeneralSettings = new InterfaceSetting.General
                        {
                            HexLabels = "#DAD1C7FF",
                            HexLabelsSkill = "#FFFFFFFF",
                            HexLabelTakePanel = "#FFFFFFFF"
                        }
                    },

                    #region General Settings
                    GeneralSettings = new GeneralSetting
                    {
                        WipeContollers = new GeneralSetting.WipeContoller
                        {
                            WipeDataUse = true,
                            WipeDataSkill = true,
                        },
                        VirusPatogens = new GeneralSetting.VirusPatogen
                        {
                            UsePatogen = true,
                            TimerInfectedVirus = 120,
                            RareInfected = 30,
                            TimerRemoveSkill = 50,
                        }
                    },
                    #endregion

                    #region Reference Setting

                    ReferenceSettings = new ReferenceSetting
                    {
                        IQChatSettings = new ReferenceSetting.IQChat
                        {
                            CustomPrefix = "",
                            CustomAvatar = ""
                        },
                        IQEconomicUse = false,
                        IQHeadRewardUse = false,
                        IQCraftSystem = false,
                        IQKits = false,
                        XDNotificationsSettings = new ReferenceSetting.XDNotifications
                        {
                            UseXDNotifications = false,
                            AlertDelete = 5,
                            Color = "#762424FF",
                            SoundEffect = "",
                            Title = "Генезис"
                        }
                    },

                    #endregion

                    #region FarmingDNK Settings
                    FarmingDNKS = new FarmingDNK
                    {
                        PlayerKills = new FarmingDNK.PlayerKill
                        {
                            DNKKillUser = true,
                            GeneralSettingsFarmings = new FarmingDNK.GeneralSettingsFarming
                            {
                                RareGiveDNK = 10,
                                MinimumDNK = 10,
                                MaximumDNK = 20,
                            }
                        },
                        AnimalKills = new FarmingDNK.AnimalKill
                        {
                            DNKKillAnimal = true,
                            GeneralSettingsFarmings = new FarmingDNK.GeneralSettingsFarming
                            {
                                RareGiveDNK = 10,
                                MinimumDNK = 10,
                                MaximumDNK = 20,
                            }
                        },
                        NPCKills = new FarmingDNK.NPCKill
                        {
                            DNKKillNPC = true,
                            GeneralSettingsFarmings = new FarmingDNK.GeneralSettingsFarming
                            {
                                RareGiveDNK = 10,
                                MinimumDNK = 10,
                                MaximumDNK = 20,
                            }
                        }
                    }
                    #endregion
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #87" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию! #45");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Hooks

        #region Server Hooks
        private void Init() => RedistributionHooks();
        private void OnServerInitialized()
        {
            ReadData();
            foreach (var p in BasePlayer.activePlayerList)
                OnPlayerConnected(p);

            if (config.SkillSettings.CrafterSettings.SkillTurn)
                foreach (var bp in ItemManager.bpList)
                    Blueprints.Add(bp.targetItem.shortname, bp.time);

            LoadedImage();
            WriteData();
            PatogenInfected();
            StartRegeneration();

            if (!permission.PermissionExists(PermissionsPatogenArmor, this))
                permission.RegisterPermission(PermissionsPatogenArmor, this);
        }
        void OnPlayerConnected(BasePlayer player)
        {
            CahedImages(player);
            RegisteredDataUser(player);
        }
        void Unload()
        {
            foreach(BasePlayer player in BasePlayer.activePlayerList)
                CuiHelper.DestroyUi(player, PLAGUE_PARENT_MAIN);
        }
        #endregion

        #region Farming DNK Hooks
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;
            if (config.ReferenceSettings.IQEconomicUse) return;
            BasePlayer player = info.InitiatorPlayer;
            if (player == null
                || player.IsNpc
                || player.GetComponent<NPCPlayer>() != null
                || player.GetComponent<Zombie>() != null
                || player.GetComponent<NPCMurderer>() != null)
                return;
            var FarmingDNK = config.FarmingDNKS;

            if (FarmingDNK.NPCKills.DNKKillNPC)
                if ((bool)(entity as NPCPlayer) || (bool)(entity as NPCMurderer))
                {
                    var FarmingNPC = FarmingDNK.NPCKills.GeneralSettingsFarmings;
                    if (!IsRare(FarmingNPC.RareGiveDNK)) return;

                    GiveDNK(player, FarmingNPC.MinimumDNK, FarmingNPC.MaximumDNK);
                }

            if (FarmingDNK.PlayerKills.DNKKillUser)
                if ((bool)(entity as BasePlayer))
                {
                    if ((bool)(entity as NPCPlayer) || (bool)(entity as NPCMurderer)) return;

                    BasePlayer targetPlayer = entity.ToPlayer();
                    if (targetPlayer == null) return;

                    if (targetPlayer.userID != player.userID)
                    {
                        if (IsFriends(player.userID, targetPlayer.userID)) return;
                        if (IsClans(player.userID, targetPlayer.userID)) return;
                        if (IsDuel(player.userID)) return;

                        var FarmingPlayer = FarmingDNK.PlayerKills.GeneralSettingsFarmings;
                        if (!IsRare(FarmingPlayer.RareGiveDNK)) return;

                        GiveDNK(player, FarmingPlayer.MinimumDNK, FarmingPlayer.MaximumDNK);
                    }
                }
            if (FarmingDNK.AnimalKills.DNKKillAnimal)
                if ((bool)(entity as BaseAnimalNPC))
                {
                    var FarmingAmimals = FarmingDNK.AnimalKills.GeneralSettingsFarmings;
                    if (!IsRare(FarmingAmimals.RareGiveDNK)) return;

                    GiveDNK(player, FarmingAmimals.MinimumDNK, FarmingAmimals.MaximumDNK);
                }
        }
        #endregion

        #region Skills Hooks

        #region Anabiotics
        Dictionary<ulong, double> Cd = new Dictionary<ulong, double>();
        object OnHealingItemUse(MedicalTool tool, BasePlayer player)
        {
            if (tool == null) return null;
            if (player == null) return null;
            if (player?.GetActiveItem() == null) return null;
            string Shortname = player?.GetActiveItem()?.info.shortname;

            Anabiotics(player, Shortname);
            return null;
        }
        object OnItemAction(Item item, string action, BasePlayer player)
        {
            if (action == "consume")
            {
                if (Cd.ContainsKey(player.userID))
                {
                    if (Cd[player.userID] > CurrentTime()) return null;
                    Cd[player.userID] = CurrentTime() + 1.0;
                    Anabiotics(player, item?.info?.shortname);
                }
                else
                {
                    Cd.Add(player.userID, CurrentTime() + 1.0);
                    Anabiotics(player, item?.info?.shortname);
                }
            }
            return null;
        }
        #endregion

        #region Gather & Animal Friends & Miner
        
        object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (player == null) return null;
            if (dispenser == null) return null;
            if (item == null) return null;

            GatherFriends(player,item.info.shortname);

            item.amount = Miner(player, item.info.shortname, item.amount);
            return null;
        }
        object OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player = entity as BasePlayer;
            if (player == null) return null;
            
            AnimalFriends(player, dispenser.name);

            item.amount = Miner(player, item.info.shortname, item.amount);
            return null;
        }

        #endregion

        #region Metabolism
        private void OnPlayerRespawned(BasePlayer player)
        {
            if (player == null) return;
            Metabolism(player);
        }
        #endregion

        #region Wounded
        private void OnPlayerWound(BasePlayer player)
        {
            if (player == null 
                || player.IsNpc 
                || player.GetComponent<NPCPlayer>() != null 
                || player.GetComponent<Zombie>() != null 
                || player.GetComponent<NPCMurderer>() != null)
                return;
            if (IsDuel(player.userID))
                return;

            NextTick(() =>
            {
                if (player.IsDead())
                    return;

                Wounded(player);
            });
            return;
        }
        #endregion

        #region Genesis Gens
        void OnNewSave(string filename)
        {
            GenesisGens();
            WipeController();
        }
        #endregion

        #region Thicks Skin
        void OnRunPlayerMetabolism(PlayerMetabolism metabolism, BaseCombatEntity combat)
        {
            if (metabolism == null) return;
            BasePlayer player = combat as BasePlayer;
            if (player == null) return;

            ThicksSkin(player);
            return;
        }
        #endregion

        #region Military
        void OnLoseCondition(Item item, ref float amount)
        {
            if (item == null) return;
            BasePlayer player = item.GetOwnerPlayer();
            if (player == null) return;
            amount = Military(player, item, amount);
        }
        #endregion

        #region Crafter
        public Dictionary<string, float> Blueprints { get; } = new Dictionary<string, float>();
        private object OnItemCraft(ItemCraftTask item, BasePlayer crafter) => OnCraft(item, crafter);
        private object OnCraft(ItemCraftTask task, BasePlayer crafter)
        {
            if (crafter == null) return null;
            if (task == null) return null;
            var Crafter = config.SkillSettings.CrafterSettings;
            if (!Crafter.SkillTurn) return null;
            if (!DataSkills[crafter.userID].Crafter)
            {
                if (!Blueprints.ContainsKey(task.blueprint.targetItem.shortname)) return null;
                task.blueprint.time = Blueprints[task.blueprint.targetItem.shortname];
                return null;
            }

            if (task.cancelled == true)
                return null;
            float Time = GetTime(crafter, task.blueprint.targetItem.shortname, Crafter.CraftBoost);
            task.blueprint.time = Time;
            return null;
        }
        public float GetTime(BasePlayer crafter, string CraftItem, float Time)
        {
            float Result = (float)(Blueprints[CraftItem] / Time);
            return Result;
        }

        #endregion

        #endregion

        #endregion

        #region Commands

        [ChatCommand("skill")]
        void ChatCommandSkill(BasePlayer player)
        {
            Interface_Panel(player);
        }

        [ConsoleCommand("iqps")]
        void IQPlagueSkillCommands(ConsoleSystem.Arg arg)
        {
            if (arg.Args == null || arg.Args == null) return;
            switch(arg.Args[0])
            {
                case "give":  
                    {
                        ulong userID = ulong.Parse(arg.Args[1]);
                        if(!userID.IsSteamId())
                        {
                            PrintWarning("Вы неверно указали SteamID");
                            return;
                        }
                        int Amount = Convert.ToInt32(arg.Args[2]);
                        if(!DataInformation.ContainsKey(userID))
                        {
                            PrintWarning("Такого игрока нет");
                            return;
                        }
                        DataInformation[userID] += Amount;
                        PrintWarning("Успешно");
                        break;
                    }
                case "study_all":
                    {
                        ulong UserID = ulong.Parse(arg.Args[1]);
                        if (!UserID.IsSteamId())
                        {
                            PrintError("Неверно указан SteamID");
                            return;
                        }
                        if(!DataSkills.ContainsKey(UserID))
                        {
                            PrintError("Такого игрока нет в датафайле");
                            return;
                        }
                        var UserSkills = DataSkills[UserID];
                        UserSkills.Anabiotics = true;
                        UserSkills.AnimalFriends = true;
                        UserSkills.Crafter = true;
                        UserSkills.GatherFriends = true;
                        UserSkills.GenesisGens = true;
                        UserSkills.Metabolism = true;
                        UserSkills.Military = true;
                        UserSkills.Miner = true;
                        UserSkills.PatogenAmrory = true;
                        UserSkills.Regeneration = true;
                        UserSkills.ThickSkin = true;
                        UserSkills.WoundedShake = true;
                        UserSkills.IQCraftSystemAdvanced = true;
                        UserSkills.IQHeadReward = true;
                        UserSkills.IQKitsCooldownPercent = true;
                        UserSkills.IQKitsRareup = true;


                        if (BasePlayer.FindByID(UserID) != null)
                            SendChat(BasePlayer.FindByID(UserID), lang.GetMessage("STUDY_ALL_YES", this, UserID.ToString()));
                        break;
                    }
                case "study":
                    {
                        BasePlayer player = arg.Player();
                        if (player == null) return;
                        string Skill = arg.Args[1];
                        int Price = Convert.ToInt32(arg.Args[2]);
                        bool IsInfo = Convert.ToBoolean(arg.Args[3]);
                        StudySkill(player, Skill, Price, IsInfo);
                        break;
                    }
                case "debug":
                    {
                        GenesisGens();
                        WipeController();
                        foreach (BasePlayer player in BasePlayer.allPlayerList)
                        {
                            RegisteredDataUser(player);
                            DataInformation[player.userID] += 100;
                            WriteData();
                        }
                        PrintWarning("Debug end..");
                        break;
                    }
                case "close": 
                    {
                        BasePlayer player = arg.Player();
                        if (player == null) return;
                        CuiHelper.DestroyUi(player, PLAGUE_PARENT_MAIN);
                        if (IsOpenSkill.Contains(player.userID))
                            IsOpenSkill.Remove(player.userID);
                        break;
                    }
            }
        }

        #endregion

        #region Metods

        #region Skills

        #region Anabiotics
        public void Anabiotics(BasePlayer player, string Shortname)
        {
            var Anabiotics = config.SkillSettings.AnabioticsSettings;
            if (!Anabiotics.SkillTurn) return;
            if (!DataSkills.ContainsKey(player.userID)) return;
            if (!DataSkills[player.userID].Anabiotics) return;
            if (!Anabiotics.AnabioticsList.ContainsKey(Shortname)) return;

            player.Heal(Anabiotics.AnabioticsList[Shortname]);
        }
        #endregion

        #region AnimalFriends 

        void AnimalFriends(BasePlayer player, string Animal)
        {
            var AnimalFriends = config.SkillSettings.AnimalFriendsSettings;
            if (!AnimalFriends.SkillTurn) return;
            if (!DataSkills[player.userID].AnimalFriends) return;
            if (AnimalFriends.UseLists)
                if(AnimalFriends.AnimalsList.ContainsKey(Animal))
                    if (IsRare(AnimalFriends.AnimalsList[Animal].Rare))
                    {
                        GiveDNK(player, AnimalFriends.AnimalsList[Animal].MinDNKCustom, AnimalFriends.AnimalsList[Animal].MaxDNKCustom);
                        return;
                    }
            if (AnimalFriends.AnimalDetected.Contains(Animal))
            {
                if (IsRare(AnimalFriends.RareAll))
                    GiveDNK(player, AnimalFriends.MinDNKAnimal, AnimalFriends.MaxDNKAnimal);
            }
        }

        #endregion

        #region GatherFriends

        void GatherFriends(BasePlayer player, string Shortname)
        {
            var GatherFriends = config.SkillSettings.GatherFriendsSettings;
            if (!GatherFriends.SkillTurn) return;
            if (!DataSkills[player.userID].GatherFriends) return;
            if (GatherFriends.GatherList.ContainsKey(Shortname))
                if (IsRare(GatherFriends.GatherList[Shortname].Rare))
                {
                    GiveDNK(player, GatherFriends.GatherList[Shortname].MinDNKCustom, GatherFriends.GatherList[Shortname].MaxDNKCustom);
                    return;
                }
        }

        #endregion

        #region Metabolism

        public void Metabolism(BasePlayer player)
        {
            var Metabolism = config.SkillSettings.MetabolismSettings;
            if (!Metabolism.SkillTurn) return;
            if (!DataSkills[player.userID].Metabolism) return;
            if (!IsRare(Metabolism.RareMetabolisme)) return;
            player.health = Metabolism.Health;
            player.metabolism.calories.value = Metabolism.Calories;
            player.metabolism.hydration.value = Metabolism.Hydration;

            if (Metabolism.DropSkill)
                DataSkills[player.userID].Metabolism = false;
        }

        #endregion

        #region Miner

        int Miner(BasePlayer player, string Shortname, int Amount)
        {
            var Miner = config.SkillSettings.MinerSettings;
            int ReturnAmount = Amount;
            if (!Miner.SkillTurn) return ReturnAmount;
            if (!DataSkills[player.userID].Miner) return ReturnAmount;
            if (Miner.UseLists)
                if (Miner.CustomRate.ContainsKey(Shortname))
                {
                    ReturnAmount = (int)(Amount * Miner.CustomRate[Shortname]);
                    return ReturnAmount;
                }
            ReturnAmount = Convert.ToInt32(Amount * Miner.Rate);
            return ReturnAmount;
        }

        #endregion

        #region Wounded

        public void Wounded(BasePlayer player)
        {
            if (player == null) return;
            var Wounded = config.SkillSettings.WoundedShakeSettings;
            if (!Wounded.SkillTurn) return;
            if (!DataSkills[player.userID].WoundedShake) return;
            if (!IsRare(Wounded.Rare)) return;

            timer.Once(Wounded.RareStartTime, () => 
            {
                if (player.IsWounded())
                {
                    player.StopWounded();
                    SendChat(player, String.Format(lang.GetMessage("CHAT_SKILL_WOUNDED", this, player.UserIDString), Wounded.GeneralSettings.DisplayName));
                    if (Wounded.DropSkill)
                        DataSkills[player.userID].WoundedShake = false;
                }
            });
        }

        #endregion

        #region Genesis Gen

        void GenesisGens()
        {
            var SkillSettings = config.SkillSettings;
            if (!SkillSettings.GenesisGensSettings.SkillTurn) return;

            foreach (var PlayerList in DataSkills)
            {
                var Skill = PlayerList.Value;
                ulong userID = PlayerList.Key;

                if (!Skill.GenesisGens)
                {
                    DataInformation[userID] = 0;
                    return;
                }

                int SpentDNK = 0;
                int SaveDNK = 0;

                if (Skill.Anabiotics)
                    SpentDNK += SkillSettings.AnabioticsSettings.GeneralSettings.PriceDNK;
                if (Skill.AnimalFriends)
                    SpentDNK += SkillSettings.AnimalFriendsSettings.GeneralSettings.PriceDNK;
                if (Skill.Crafter)
                    SpentDNK += SkillSettings.CrafterSettings.GeneralSettings.PriceDNK;
                if (Skill.GatherFriends)
                    SpentDNK += SkillSettings.GatherFriendsSettings.GeneralSettings.PriceDNK;
                if (Skill.GenesisGens)
                    SpentDNK += SkillSettings.GenesisGensSettings.GeneralSettings.PriceDNK;
                if (Skill.Metabolism)
                    SpentDNK += SkillSettings.MetabolismSettings.GeneralSettings.PriceDNK;
                if (Skill.Military)
                    SpentDNK += SkillSettings.MilitarySettings.GeneralSettings.PriceDNK;
                if (Skill.Miner)
                    SpentDNK += SkillSettings.MinerSettings.GeneralSettings.PriceDNK;
                if (Skill.PatogenAmrory)
                    SpentDNK += SkillSettings.PatogenAmrorySettings.GeneralSettings.PriceDNK;
                if (Skill.Regeneration)
                    SpentDNK += SkillSettings.RegenerationSettings.GeneralSettings.PriceDNK;
                if (Skill.ThickSkin)
                    SpentDNK += SkillSettings.ThickSkinSettings.GeneralSettings.PriceDNK;
                if (Skill.WoundedShake)
                    SpentDNK += SkillSettings.WoundedShakeSettings.GeneralSettings.PriceDNK;

                SaveDNK = SpentDNK / 100 * SkillSettings.GenesisGensSettings.PercentSave;
                DataInformation[userID] = SaveDNK;
                PrintWarning($"Игроку {userID} по навыку Генезиз ген было сохранено {SaveDNK} ДНК");
            }
        }

        #endregion

        #region Thicks Skin
        void ThicksSkin(BasePlayer player)
        {
            if (player == null) return;
            var ThicksSkin = config.SkillSettings.ThickSkinSettings;
            if (!ThicksSkin.SkillTurn) return;
            if (!DataSkills[player.userID].ThickSkin) return;

            if (player.currentTemperature <= 1)
                player.metabolism.temperature.value = 21;
        }

        #endregion

        #region Military

        public float Military(BasePlayer player, Item item, float amount)
        {
            float Damage = amount;
            if (player == null) return Damage;
            var Military = config.SkillSettings.MilitarySettings;
            if (!Military.SkillTurn) return Damage;
            if (!DataSkills.ContainsKey(player.userID))
            {
                RegisteredDataUser(player);
                return Damage;
            }
            if (!DataSkills[player.userID].Military) return Damage;
            var ItemCategory = ItemManager.FindItemDefinition(item.info.itemid).category;
            if (ItemCategory != ItemCategory.Weapon) return Damage;
            Damage = amount - (amount / 100 * Military.PercentNoBroken);
            return Damage;
        }

        #endregion

        #region Regeneration       
        public void StartRegeneration()
        {
            timer.Every(config.SkillSettings.RegenerationSettings.RegenerationTimer, () =>
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                        Regeneration(player);
            });
        }
        public void Regeneration(BasePlayer player)
        {
            if (player == null) return;
            var Regeneration = config.SkillSettings.RegenerationSettings;
            if (!Regeneration.SkillTurn) return;
            if (!DataSkills[player.userID].Regeneration) return;

            player.Heal(Regeneration.HealtRegeneration);
        }
        #endregion

        #endregion

        #region RedistributionHooks

        void RedistributionHooks()
        {
            var Skill = config.SkillSettings;
            if (!Skill.AnabioticsSettings.SkillTurn)
            {
                Unsubscribe("OnHealingItemUse");
                Unsubscribe("OnItemAction");
            }
            if (!Skill.MetabolismSettings.SkillTurn)
                Unsubscribe("OnPlayerRespawned");
            if (!Skill.GatherFriendsSettings.SkillTurn && !Skill.AnimalFriendsSettings.SkillTurn && !Skill.MinerSettings.SkillTurn)
            {
                Unsubscribe("OnDispenserBonus");
                Unsubscribe("OnDispenserGather");
            }
            if (!Skill.WoundedShakeSettings.SkillTurn)
                Unsubscribe("CanBeWounded");
            if (!Skill.ThickSkinSettings.SkillTurn)
                Unsubscribe("OnRunPlayerMetabolism");
            if (!Skill.MilitarySettings.SkillTurn)
                Unsubscribe("OnLoseCondition");
            if (!Skill.CrafterSettings.SkillTurn)
                Unsubscribe("OnItemCraft");
        }

        #endregion

        #region Wipe Controller

        void WipeController()
        {
            var Controller = config.GeneralSettings.WipeContollers;
            if (!Controller.WipeDataUse) return;
            PrintWarning("Обнаружен вайп сервера!");
            if (Controller.WipeDataSkill)
            {
                DataSkills.Clear();
                PrintWarning("Скиллы игроков успешно сброшены");
            }
            PrintWarning("Плагин успешно закончил автоматическую очистку");
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQPlagueSkill/InformationUser", DataInformation);
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQPlagueSkill/InformationSkills", DataSkills);
        }

        #endregion

        #region StudySkill
        public void StudySkill(BasePlayer player, string Skill, int Price, bool IsInfo)
        {
            var UserSkills = DataSkills[player.userID];
            string DisplayName = string.Empty;

            switch (Skill)
            {
                case "anabiotics":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.AnabioticsSettings.GeneralSettings, Skill,TypeSkill.Active);
                            return;
                        }
                        UserSkills.Anabiotics = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.AnabioticsSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "animalfriends":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.AnimalFriendsSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.AnimalFriends = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.AnimalFriendsSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "crafter":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.CrafterSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.Crafter = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.CrafterSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "gatherfriends":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.GatherFriendsSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.GatherFriends = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.GatherFriendsSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "genesisgens":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.GenesisGensSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.GenesisGens = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.GenesisGensSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "metabolism":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.MetabolismSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.Metabolism = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.MetabolismSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "military":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.MilitarySettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.Military = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.MilitarySettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "miner":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.MinerSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.Miner = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.MinerSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "patogenarmory":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.PatogenAmrorySettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.PatogenAmrory = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.PatogenAmrorySettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "patogenkill":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.PatogenKillSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        PatogenRecovered(player);
                        DisplayName = config.SkillSettings.PatogenKillSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "regeneration":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.RegenerationSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.Regeneration = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.RegenerationSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "thicksskin":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.ThickSkinSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.ThickSkin = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.ThickSkinSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "wounded":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.WoundedShakeSettings.GeneralSettings, Skill, TypeSkill.Active);
                            return;
                        }
                        UserSkills.WoundedShake = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.WoundedShakeSettings.GeneralSettings.DisplayName;
                        break;
                    }
                case "iqheadreward": 
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.NeutralSkills.SkillIQHeadRewards.GeneralSettings, Skill, TypeSkill.Neutral);
                            return;
                        }
                        UserSkills.IQHeadReward = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.NeutralSkills.SkillIQHeadRewards.GeneralSettings.DisplayName;
                        break;
                    }
                case "iqcraftsystem.advanced":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings, Skill, TypeSkill.Neutral);
                            return;
                        }
                        UserSkills.IQCraftSystemAdvanced = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.NeutralSkills.IQCraftSystemAdvancedCrafts.GeneralSettings.DisplayName;
                        break;
                    }
               case "iqkits.cooldown":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.NeutralSkills.IQKitsCooldown.GeneralSettings, Skill, TypeSkill.Neutral);
                            return;
                        }
                        UserSkills.IQKitsCooldownPercent = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.NeutralSkills.IQKitsCooldown.GeneralSettings.DisplayName;
                        break;
                    }
                case "iqkits.rare":
                    {
                        if (IsInfo)
                        {
                            Interface_Show_Information(player, config.SkillSettings.NeutralSkills.IQKitsRare.GeneralSettings, Skill, TypeSkill.Neutral);
                            return;
                        }
                        UserSkills.IQKitsRareup = true;
                        RemoveBalance(player, Price);
                        LoadedSkills(player);
                        DisplayName = config.SkillSettings.NeutralSkills.IQKitsRare.GeneralSettings.DisplayName;
                        break;
                    }
            }
            Interface.Oxide.CallHook("StudySkill", player, DisplayName);
        }
        void RemoveBalance(BasePlayer player, int Price, bool SkillEconomic = false)
        {
            if(SkillEconomic)
                if(IQEconomic)
                {
                    RemoveBalanceUser(player.userID, Price);
                    return;
                }
            if (config.ReferenceSettings.IQEconomicUse)
                if (IQEconomic)
                {
                    RemoveBalanceUser(player.userID, Price);
                    return;
                }
            DataInformation[player.userID] -= Price;          
        }
        #endregion

        #region Patogen
        public void PatogenInfected()
        {
            var PatogenController = config.GeneralSettings.VirusPatogens;
            if (!PatogenController.UsePatogen) return;

            timer.Every(PatogenController.TimerInfectedVirus, () =>
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                {
                    if (permission.UserHasPermission(player.UserIDString, PermissionsPatogenArmor)) continue;

                    var DataSkill = DataSkills[player.userID];
                    var Notification = config.ReferenceSettings.XDNotificationsSettings;

                    if (DataSkill.PatogenAttack) return;
                    if(IsRare(PatogenController.RareInfected))
                    {
                        if(DataSkill.PatogenAmrory)
                        {
                            DataSkill.PatogenAmrory = false;
                            if (Notification.UseXDNotifications && XDNotifications)
                                AddNotify(player, Notification.Title, lang.GetMessage("CHAT_VIRUS_PATOGEN_RETURNED", this, player.UserIDString));
                            else SendChat(player, lang.GetMessage("CHAT_VIRUS_PATOGEN_RETURNED", this, player.UserIDString));
                            return;
                        }
                        DataSkill.PatogenAttack = true;
                        if (Notification.UseXDNotifications && XDNotifications)
                            AddNotify(player, Notification.Title, lang.GetMessage("CHAT_VIRUS_PATOGEN_INFECTED", this, player.UserIDString));
                        else SendChat(player, lang.GetMessage("CHAT_VIRUS_PATOGEN_INFECTED", this, player.UserIDString));
                    }
                }
                PrintWarning($"Прошла волна заражений вирусом ПАТОГЕН");
            });
            PatogenAttack();
        }
        public void PatogenAttack()
        {
            var PatogenController = config.GeneralSettings.VirusPatogens;
            if (!PatogenController.UsePatogen) return;

            timer.Every(PatogenController.TimerRemoveSkill, () =>
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                {
                    var DataSkill = DataSkills[player.userID];
                    if (!DataSkill.PatogenAttack) return;
                    int Rare = UnityEngine.Random.Range(0, 100);

                    if (DataSkill.Anabiotics)
                        if (IsRare(Rare))
                        {
                            DataSkill.Anabiotics = false;
                            return;
                        }
                    if (DataSkill.AnimalFriends)
                        if (IsRare(Rare))
                        {
                            DataSkill.AnimalFriends = false;
                            return;
                        }
                    if (DataSkill.Crafter)
                        if (IsRare(Rare))
                        {
                            DataSkill.Crafter = false;
                            return;
                        }
                    if (DataSkill.GatherFriends)
                        if (IsRare(Rare))
                        {
                            DataSkill.GatherFriends = false;
                            return;
                        }
                    if (DataSkill.GenesisGens)
                        if (IsRare(Rare))
                        {
                            DataSkill.GenesisGens = false;
                            return;
                        }
                    if (DataSkill.Metabolism)
                        if (IsRare(Rare))
                        {
                            DataSkill.Metabolism = false;
                            return;
                        }
                    if (DataSkill.Military)
                        if (IsRare(Rare))
                        {
                            DataSkill.Military = false;
                            return;
                        }
                    if (DataSkill.Miner)
                        if (IsRare(Rare))
                        {
                            DataSkill.Miner = false;
                            return;
                        }
                    if (DataSkill.PatogenAmrory)
                        if (IsRare(Rare))
                        {
                            DataSkill.PatogenAmrory = false;
                            return;
                        }
                    if (DataSkill.Regeneration)
                        if (IsRare(Rare))
                        {
                            DataSkill.Regeneration = false;
                            return;
                        }
                    if (DataSkill.ThickSkin)
                        if (IsRare(Rare))
                        {
                            DataSkill.ThickSkin = false;
                            return;
                        }
                    if (DataSkill.WoundedShake)
                        if (IsRare(Rare))
                        {
                            DataSkill.WoundedShake = false;
                            return;
                        }
                    if(config.ReferenceSettings.IQHeadRewardUse)
                        if(IQHeadReward)
                            if(DataSkill.IQHeadReward)
                                if (IsRare(Rare))
                                {
                                    DataSkill.IQHeadReward = false;
                                    return;
                                }
                    if (config.ReferenceSettings.IQCraftSystem)
                        if (IQCraftSystem)
                        {
                            if (DataSkill.IQCraftSystemAdvanced)
                                if (IsRare(Rare))
                                {
                                    DataSkill.IQCraftSystemAdvanced = false;
                                    return;
                                }
                        }
                }
            });
        }
        public void PatogenRecovered(BasePlayer player)
        {
            var DataSkill = DataSkills[player.userID];

            DataSkill.PatogenAttack = false;
            var Notification = config.ReferenceSettings.XDNotificationsSettings;
            if (Notification.UseXDNotifications && XDNotifications)
                AddNotify(player, Notification.Title, lang.GetMessage("CHAT_VIRUS_PATOGEN_RECOVERED", this, player.UserIDString));
            else SendChat(player, lang.GetMessage("CHAT_VIRUS_PATOGEN_RECOVERED", this, player.UserIDString));

            Interface_Skill_PatogenKill(player);
            CuiHelper.DestroyUi(player, "PATOGEN_TITLE");
            CuiHelper.DestroyUi(player, "PATOGEN_DESCRIPTION");

            PrintWarning($"Игрок {player.displayName} излечился от ПАТОГЕНА");
        }

        #endregion

        #region Helps
        public List<ulong> IsOpenSkill = new List<ulong>();

        static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0);
        static double CurrentTime() => DateTime.UtcNow.Subtract(epoch).TotalSeconds;
        #endregion

        #region Bool Metods

        public bool IsAvailable(int Balance, int Price)
        {
            if (Balance > 0 && Balance >= Price)
                return true;
            else return false;
        }

        public bool IsRare(int Rare)
        {
            if (UnityEngine.Random.Range(0, 100) >= (100 - Rare))
                return true;
            else return false;
        }

        #endregion

        #region Farming DNK

        public void GiveDNK(BasePlayer player,int Min, int Max)
        {
            int DNK = UnityEngine.Random.Range(Min, Max);
            DataInformation[player.userID] += DNK;

            var Notification = config.ReferenceSettings.XDNotificationsSettings;
            if (Notification.UseXDNotifications && XDNotifications)
                AddNotify(player,Notification.Title, String.Format(lang.GetMessage("CHAT_TAKE_DNK", this, player.UserIDString), DNK));
            else SendChat(player, String.Format(lang.GetMessage("CHAT_TAKE_DNK", this, player.UserIDString), DNK));
        }
        public void GiveDNK(BasePlayer player, int Amount)
        {
            DataInformation[player.userID] += Amount;
            var Notification = config.ReferenceSettings.XDNotificationsSettings;
            if (Notification.UseXDNotifications && XDNotifications)
                AddNotify(player, Notification.Title, String.Format(lang.GetMessage("CHAT_TAKE_DNK", this, player.UserIDString), Amount));
            else SendChat(player, String.Format(lang.GetMessage("CHAT_TAKE_DNK", this, player.UserIDString), Amount));
        }
        #endregion

        #endregion

        #region Interface
        static string PLAGUE_PARENT_MAIN = "PLAGUE_PARENT_MAIN";
        static string PLAGUE_PARENT_PANEL_INFORMATION = "PLAGUE_PARENT_PANEL_INFORMATION";

        #region Interface Panel
        public void Interface_Panel(BasePlayer player)
        {
            if (IsOpenSkill.Contains(player.userID)) return;

            var Interface = config.InterfaceSettings;
            var Balance = DataInformation[player.userID];
            var DataSkill = DataSkills[player.userID];
            var PatogenController = config.GeneralSettings.VirusPatogens;

            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_MAIN);

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                FadeOut = 0.15f,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { FadeIn = 0.15f, Color = "0 0 0 0" }
            }, "Overlay", PLAGUE_PARENT_MAIN);

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage($"BACKGROUND_PLAGUES_{Interface.IconsPNG.BackgroundPNG}")},
                        new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "1 1"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.3619792 0", AnchorMax = "0.6354166 0.06944445" },
                Button = { Command = "iqps close", Color = "0 0 0 0" },
                Text = { Text = lang.GetMessage("EXIT_BTN",this, player.UserIDString), Color = HexToRustFormat(Interface.GeneralSettings.HexLabels), Align = TextAnchor.MiddleCenter }
            }, PLAGUE_PARENT_MAIN);

            if (PatogenController.UsePatogen)
                if (DataSkill.PatogenAttack)
                {
                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0 0.9518518", AnchorMax = "0.1609375 0.9962962" },
                        Text = { Text = lang.GetMessage("VIRUS_PATOGEN_TITLE", this, player.UserIDString), Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleRight }
                    }, PLAGUE_PARENT_MAIN, "PATOGEN_TITLE");

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.00729166 0.7962962", AnchorMax = "0.1609375 0.9592603" },
                        Text = { Text = lang.GetMessage("VIRUS_PATOGEN_DESCRIPTION", this, player.UserIDString), Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.UpperRight }
                    }, PLAGUE_PARENT_MAIN, "PATOGEN_DESCRIPTION"); 
                }

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "CIRCLE_NEUTRAL",
                Components =
                    {
                         new CuiRawImageComponent { Png = GetImage($"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}") },
                        new CuiRectTransformComponent{ AnchorMin = "0.01458329 0.02315771", AnchorMax = "0.03281246 0.05278735"},
                    }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { Text = "<b>N</b>", Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, "CIRCLE_NEUTRAL", "CIRCLE_NEUTRAL_LABEL");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.03124995 0.02223178", AnchorMax = "0.2911459 0.05186141" },
                Text = { Text = lang.GetMessage("NEUTRAL_HELP_INFO", this, player.UserIDString), FontSize = 10, Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft }
            }, PLAGUE_PARENT_MAIN, "CIRCLE_NEUTRAL_LABEL_HELP");

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "CIRCLE_ACTIVE",
                Components =
                    {
                         new CuiRawImageComponent { Png = GetImage($"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}") }, 
                        new CuiRectTransformComponent{ AnchorMin = "0.02343746 0.0009354877", AnchorMax = "0.04166662 0.03056512"},
                    }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { Text = "<b>A</b>", Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, "CIRCLE_ACTIVE", "CIRCLE_ACTIVE_LABEL");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.04114577 0.0009354877", AnchorMax = "0.3010417 0.03056512" },
                Text = { Text = lang.GetMessage("ACTIVE_HELP_INFO", this, player.UserIDString), FontSize = 10, Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleLeft }
            }, PLAGUE_PARENT_MAIN, "CIRCLE_ACTIVE_LABEL_HELP");

            CuiHelper.AddUi(player, container);
            LoadedSkills(player);

            IsOpenSkill.Add(player.userID);
        }

        #endregion

        #region Skills UI
        public void LoadedSkills(BasePlayer player)
        {
            var Reference = config.ReferenceSettings;
            var DataSkill = DataSkills[player.userID];
            var PatogenController = config.GeneralSettings.VirusPatogens;

            Interface_Skill_Crafter(player);
            Interface_Skill_Anabiotics(player);
            Interface_Skill_AnimalFriends(player);
            Interface_Skill_GatherFriends(player);
            Interface_Skill_GenesisGen(player);
            Interface_Skill_Metabolism(player);
            Interface_Skill_Military(player);
            Interface_Skill_Miner(player);
            Interface_Skill_Regeneration(player);
            Interface_Skill_ThicksSkin(player);
            Interface_Skill_Wounded(player);

            if (Reference.IQHeadRewardUse)
                if (IQHeadReward)
                    if(config.SkillSettings.NeutralSkills.SkillIQHeadRewards.SkillTurn)
                    Interface_Skill_IQHeadReward(player);

            if(Reference.IQCraftSystem)
                if (IQCraftSystem)
                    if (config.SkillSettings.NeutralSkills.IQCraftSystemAdvancedCrafts.SkillTurn)
                        Interface_Skill_Advanced_IQCraftSystem(player);
                  
            if(Reference.IQKits)
                if (IQKits)
                {
                    if (config.SkillSettings.NeutralSkills.IQKitsRare.SkillTurn)
                        Interface_Skill_Rare_IQKits(player);
                    if (config.SkillSettings.NeutralSkills.IQKitsCooldown.SkillTurn)
                        Interface_Skill_DropPercent_IQKits(player);
                }
            if (PatogenController.UsePatogen)
            {
                Interface_Skill_PatogenArmory(player);
                if (DataSkill.PatogenAttack)
                    Interface_Skill_PatogenKill(player);
            }

            Interface_Balance(player);
        }

        #region Crafter
        void Interface_Skill_Crafter(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_CRAFTER");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            var Skill = Skills.CrafterSettings;

            string SkillIcon = Skill.SkillTurn ? UserSkills.Crafter ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_CRAFTER_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Crafter ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study crafter {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study crafter {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_CRAFTER",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.1546875 0.7685167", AnchorMax = "0.2520857 0.9203678"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_CRAFTER",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_CRAFTER");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Anabiotics
        void Interface_Skill_Anabiotics(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_ANABIOTICS");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.AnabioticsSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.Anabiotics ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_ANABIOTICS_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Anabiotics ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study anabiotics {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study anabiotics {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_ANABIOTICS",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.0249997 0.4648148", AnchorMax = "0.1447917 0.6574074"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_ANABIOTICS",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_ANABIOTICS");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Animal Friends
        void Interface_Skill_AnimalFriends(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_ANIMALFRIENDS");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.AnimalFriendsSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.AnimalFriends ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_ANIMALFRIENDS_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.AnimalFriends ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study animalfriends {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study animalfriends {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_ANIMALFRIENDS",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.2593771 0.06944337", AnchorMax = "0.332289 0.1870369"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_ANIMALFRIENDS",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_ANIMALFRIENDS");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Gather Friends
        void Interface_Skill_GatherFriends(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_GATHERFRIENDS");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.GatherFriendsSettings;

            string SkillIcon = Skill.SkillTurn ? UserSkills.GatherFriends ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_GATHERFRIENDS_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.GatherFriends ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study gatherfriends {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study gatherfriends {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_GATHERFRIENDS",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.1812513 0.2555555", AnchorMax = "0.2494792 0.3648151"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_GATHERFRIENDS",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_GATHERFRIENDS");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Genesis Gen
        void Interface_Skill_GenesisGen(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_GENESISGENS");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.GenesisGensSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.GenesisGens ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_GENESISGENS_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.GenesisGens ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study genesisgens {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study genesisgens {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_GENESISGENS",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.5697917 0.3074074", AnchorMax = "0.6718751 0.4722229"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_GENESISGENS",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_GENESISGENS");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Metabolism Gen
        void Interface_Skill_Metabolism(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_METABOLISM");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.MetabolismSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.Metabolism ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_METABOLISM_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Metabolism ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study metabolism {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study metabolism {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_METABOLISM",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.9369792 0", AnchorMax = "1 0.1074074"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_METABOLISM",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_METABOLISM");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Military
        void Interface_Skill_Military(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_MILITARY");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.MilitarySettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.Military ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_MILITARY_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Military ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study military {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study military {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_MILITARY",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.4614567 0.6472288", AnchorMax = "0.543224 0.7750065"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_MILITARY",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_MILITARY");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Miner
        void Interface_Skill_Miner(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_MINER");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.MinerSettings;
              
            string SkillIcon = Skill.SkillTurn ? UserSkills.Miner ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_MINER_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Miner ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study miner {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study miner {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_MINER",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.3359377 0.8611", AnchorMax = "0.4239583 0.9953704"}, //skykey
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_MINER",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.78260"},  //skykey
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_MINER");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Patogen Armory
        void Interface_Skill_PatogenArmory(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_PATOGENARMORY");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.PatogenAmrorySettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.PatogenAmrory ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_PATOGENARMORY_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.PatogenAmrory ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study patogenarmory {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study patogenarmory {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_PATOGENARMORY",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.8755208 0.2861111", AnchorMax = "1 0.4861257"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_PATOGENARMORY",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_PATOGENARMORY");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Patogen Kill
        void Interface_Skill_PatogenKill(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_PATOGENKILL");
            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.PatogenKillSettings;
            if (Skill.SkillTurn)
            {
                if (!UserSkills.PatogenAttack) return;
                
                string SkillIcon = UserSkills.PatogenAttack ? IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
                CuiImageComponent Comp = String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_PATOGENKILL_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite };
                string Command = UserSkills.PatogenAttack ? config.SkillSettings.ShowSkillNotDNK ? $"iqps study patogenkill {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study patogenkill {Skill.GeneralSettings.PriceDNK} true" : "" : "";

                container.Add(new CuiElement
                {
                    Parent = PLAGUE_PARENT_MAIN,
                    Name = "SKILL_PATOGENKILL",
                    Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.6380165 0.6805555", AnchorMax = "0.7234375 0.8166"}, //skykey
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = "SKILL_PATOGENKILL",
                    Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = Command, Color = "0 0 0 0" },
                    Text = { Text = "", Color = "0 0 0 0" }
                }, "SKILL_PATOGENKILL");

                CuiHelper.AddUi(player, container);
            }
        }
        #endregion

        #region Regeneration
        void Interface_Skill_Regeneration(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_REGENERATION");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.RegenerationSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.Regeneration ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_REGENERATION_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.Regeneration ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study regeneration {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study regeneration {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_REGENERATION",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.7552022 0.903703", AnchorMax = "0.8151039 0.9953704"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_REGENERATION",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_REGENERATION");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Thicks Skin
        void Interface_Skill_ThicksSkin(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_THICKSSKIN");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.ThickSkinSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.ThickSkin ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_THICKSSKIN_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.ThickSkin ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study thicksskin {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study thicksskin {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_THICKSSKIN",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.8229095 0.688889", AnchorMax = "0.8947917 0.8037094"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_THICKSSKIN",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_THICKSSKIN");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Wounded Shake
        void Interface_Skill_Wounded(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_WOUNDED");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];

            var Skill = Skills.WoundedShakeSettings;
            
            string SkillIcon = Skill.SkillTurn ? UserSkills.WoundedShake ? $"BACKGROUND_PLAGUE_SKILL_RECEIVED_{Interface.IconsPNG.ReceivedSkill}" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}" : $"BACKGROUND_PLAGUE_SKILL_BLOCK_{Interface.IconsPNG.BlockSkill}";
            CuiImageComponent Comp = Skill.SkillTurn ? String.IsNullOrWhiteSpace(Skill.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_WOUNDED_{Skill.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skill.GeneralSettings.Sprite } : new CuiImageComponent { Sprite = "assets/icons/lock.png" };
            string Command = Skill.SkillTurn ? UserSkills.WoundedShake ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study wounded {Skill.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skill.GeneralSettings.PriceDNK) ? $"iqps study wounded {Skill.GeneralSettings.PriceDNK} true" : "" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_WOUNDED",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.2067708 0.523148", AnchorMax = "0.2885418 0.653703"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_WOUNDED",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_WOUNDED");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region IQHeadReward
        void Interface_Skill_IQHeadReward(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_IQHEAD_REWARD");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings.NeutralSkills.SkillIQHeadRewards;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string SkillIcon = Skills.SkillTurn ? UserSkills.IQHeadReward ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.IconsPNG.NeutralReceivedSkill}" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}";

            CuiImageComponent Comp = String.IsNullOrWhiteSpace(Skills.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_IQHEAD_REWARD_{Skills.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skills.GeneralSettings.Sprite };
            string Command = UserSkills.IQHeadReward ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study iqheadreward {Skills.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"iqps study iqheadreward {Skills.GeneralSettings.PriceDNK} true" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_IQHEAD_REWARD",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.4557309 0.118518", AnchorMax = "0.5421875 0.2592593"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_IQHEAD_REWARD",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_IQHEAD_REWARD");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region IQCraftSystem
        void Interface_Skill_Advanced_IQCraftSystem(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_IQCRAFTSYSTEM");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings.NeutralSkills.IQCraftSystemAdvancedCrafts;
            var UserSkills = DataSkills[player.userID]; 
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string SkillIcon = Skills.SkillTurn ? UserSkills.IQCraftSystemAdvanced ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.IconsPNG.NeutralReceivedSkill}" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}";
            CuiImageComponent Comp = String.IsNullOrWhiteSpace(Skills.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_IQCRAFTSYSTEM_{Skills.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skills.GeneralSettings.Sprite };
            string Command = UserSkills.IQCraftSystemAdvanced ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study iqcraftsystem.advanced {Skills.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"iqps study iqcraftsystem.advanced {Skills.GeneralSettings.PriceDNK} true" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_IQCRAFTSYSTEM",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.4906229 0.8444452", AnchorMax = "0.5723902 0.9722228"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_IQCRAFTSYSTEM",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_IQCRAFTSYSTEM");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region IQKits
        void Interface_Skill_DropPercent_IQKits(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_IQKITS_PERCENT");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings.NeutralSkills.IQKitsCooldown;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string SkillIcon = Skills.SkillTurn ? UserSkills.IQKitsCooldownPercent ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.IconsPNG.NeutralReceivedSkill}" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}";
            CuiImageComponent Comp = String.IsNullOrWhiteSpace(Skills.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_IQCRAFTSYSTEM_{Skills.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skills.GeneralSettings.Sprite };
            string Command = UserSkills.IQKitsCooldownPercent ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study iqkits.cooldown {Skills.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"iqps study iqkits.cooldown {Skills.GeneralSettings.PriceDNK} true" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_IQKITS_PERCENT",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.7119737 0.1592593", AnchorMax = "0.7744792 0.2574214"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_IQKITS_PERCENT",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2499933 0.2260868", AnchorMax = "0.749979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_IQKITS_PERCENT");

            CuiHelper.AddUi(player, container);
        }

        void Interface_Skill_Rare_IQKits(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            CuiHelper.DestroyUi(player, "SKILL_IQKITS_RARE");

            var Interface = config.InterfaceSettings;
            var Skills = config.SkillSettings.NeutralSkills.IQKitsRare;
            var UserSkills = DataSkills[player.userID];
            var Balance = config.ReferenceSettings.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string SkillIcon = Skills.SkillTurn ? UserSkills.IQKitsRareup ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_RECEIVED_{Interface.IconsPNG.NeutralReceivedSkill}" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_BLOCK_{Interface.IconsPNG.NeutralBlockSkill}";
            CuiImageComponent Comp = String.IsNullOrWhiteSpace(Skills.GeneralSettings.Sprite) ? new CuiImageComponent { Png = GetImage($"SKILL_IQCRAFTSYSTEM_{Skills.GeneralSettings.PNG}") } : new CuiImageComponent { Sprite = Skills.GeneralSettings.Sprite };
            string Command = UserSkills.IQKitsRareup ? "" : config.SkillSettings.ShowSkillNotDNK ? $"iqps study iqkits.rare {Skills.GeneralSettings.PriceDNK} true" : IsAvailable(Balance, Skills.GeneralSettings.PriceDNK) ? $"iqps study iqkits.rare {Skills.GeneralSettings.PriceDNK} true" : "";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = "SKILL_IQKITS_RARE",
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage(SkillIcon) },
                        new CuiRectTransformComponent{ AnchorMin = "0.7807226 0.3379634", AnchorMax = "0.8432281 0.4361256"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = "SKILL_IQKITS_RARE",
                Components =
                    {
                        Comp,
                        new CuiRectTransformComponent{ AnchorMin = "0.2299933 0.2260868", AnchorMax = "0.729979 0.782609"},
                    }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Command = Command, Color = "0 0 0 0" },
                Text = { Text = "", Color = "0 0 0 0" }
            }, "SKILL_IQKITS_RARE");

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #endregion

        #region Balance UI
        void Interface_Balance(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, "BALANCE");
            var Reference = config.ReferenceSettings;
            int Balance = Reference.IQEconomicUse ? IQEconomic ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string LangBalance = Reference.IQEconomicUse ? IQEconomic ? "SHOW_DNK_ECONOMIC" : "SHOW_DNK" : "SHOW_DNK";
            var Interface = config.InterfaceSettings;

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.6354166 0.0601852", AnchorMax = "0.8682292 0.1157407" },
                Text = { Text = String.Format(lang.GetMessage(LangBalance, this,player.UserIDString), Balance), Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            },  PLAGUE_PARENT_MAIN, "BALANCE");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Show Information

        void Interface_Show_Information(BasePlayer player, Configuration.Skills.GeneralSettingsSkill Information, string Skill, TypeSkill typeSkill)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PLAGUE_PARENT_PANEL_INFORMATION);
            var Interface = config.InterfaceSettings;
            var Balance = IQEconomic ? config.ReferenceSettings.IQEconomicUse ? GetBalanceUser(player.userID) : DataInformation[player.userID] : DataInformation[player.userID];
            string LogoTypeSkill = typeSkill == TypeSkill.Active ? $"BACKGROUND_PLAGUE_SKILL_AVAILABLE_{Interface.IconsPNG.AvailableSkill}" : $"BACKGROUND_PLAGUE_NEUTRAL_SKILL_AVAILABLE_{Interface.IconsPNG.NeutralAvailableSkill}";
            string LabelTypeSkill = typeSkill == TypeSkill.Active ? "<b>A</b>" : "<b>N</b>";
            string CMD = $"iqps study {Skill} {Information.PriceDNK} false";

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_MAIN,
                Name = PLAGUE_PARENT_PANEL_INFORMATION,
                Components =
                    {
                        new CuiRawImageComponent {  Png = GetImage($"BACKGROUND_PLAGUE_TAKE_PANEL_{Interface.IconsPNG.BackgroundTakePanel}")},
                        new CuiRectTransformComponent{ AnchorMin = "0.3333333 0.3935185", AnchorMax = "0.65 0.6453695"},
                    }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.06085521 0.7536785", AnchorMax = "0.7664474 0.9264706"},
                Text = { Text = $"<size=25><b>{Information.DisplayName}</b></size>", Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.UpperLeft }
            },  PLAGUE_PARENT_PANEL_INFORMATION);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.06085521 0.1029415", AnchorMax = "0.7664474 0.7499998" },
                Text = { Text = $"<size=15><b>{Information.Description}</b></size>", Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.UpperLeft }
            },  PLAGUE_PARENT_PANEL_INFORMATION);

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_PANEL_INFORMATION,
                Name = "CIRCLE",
                Components =
                    {
                         new CuiImageComponent { Sprite = "assets/icons/circle_open.png" },
                        new CuiRectTransformComponent{ AnchorMin = "0.8355262 0.7022083", AnchorMax = "0.9539473 0.9669153"},
                    }
            });

            container.Add(new CuiElement
            {
                Parent = PLAGUE_PARENT_PANEL_INFORMATION,
                Name = "TYPE_SKILL",
                Components =
                    {
                         new CuiRawImageComponent { Png = GetImage(LogoTypeSkill) },
                        new CuiRectTransformComponent{ AnchorMin = "0.8355262 0.4191192", AnchorMax = "0.9539473 0.6580915"},
                    }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { Text = LabelTypeSkill, Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, "TYPE_SKILL", "TYPE");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { Text = $"<size=25><b>{Information.PriceDNK}</b></size>", Color = HexToRustFormat(Interface.GeneralSettings.HexLabelTakePanel), Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, "CIRCLE");

            if (Balance >= Information.PriceDNK)
            {
                container.Add(new CuiElement
                {
                    Parent = PLAGUE_PARENT_PANEL_INFORMATION,
                    Name = "BTN_INFO",
                    Components =
                    {
                        new CuiRawImageComponent { Png = GetImage($"BACKGROUND_PLAGUE_TAKE_BUTTON_{Interface.IconsPNG.ButtonTakeSkill}") },
                        new CuiRectTransformComponent{ AnchorMin = "0.7055923 0.08088271", AnchorMax = "0.9424341 0.2132361" },
                    }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = CMD, Color = "0 0 0 0" },
                    Text = { Text = "", Color = "0 0 0 0" }
                }, "BTN_INFO");
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "-30 0", OffsetMax = "-2 182" },
                Button = { Close = PLAGUE_PARENT_PANEL_INFORMATION, Color = HexToRustFormat("#1B0103E1") },
                Text = { Text = lang.GetMessage("EXIT_TAKE_PANEL",this,player.UserIDString), Color = HexToRustFormat("#FFFFFFFF"), Align = TextAnchor.MiddleCenter }
            },  PLAGUE_PARENT_PANEL_INFORMATION);

            CuiHelper.AddUi(player, container);
        }

        #endregion

        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        #endregion

        #region Lang
        private new void LoadDefaultMessages()
        {
            PrintWarning("Языковой файл загружается...");
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["EXIT_BTN"] = "<size=30><b>LEAVE GENESISE</b></size>",
                ["SHOW_DNK"] = "<size=20><b>SCORE DNK : {0}</b></size>",
                ["SHOW_DNK_ECONOMIC"] = "<size=20><b>Balance : {0}</b></size>",
                ["EXIT_TAKE_PANEL"] = "<size=20><b>C\nL\nO\nS\nE</b></size>",

                ["VIRUS_PATOGEN_TITLE"] = "<size=18><b>ATTENTION PATHOGEN</b></size>",
                ["VIRUS_PATOGEN_DESCRIPTION"] = "<size=10>Pathogen virus detected in your genetic compound\nThe virus will destroy your learned skills over time\nYou have the skill to destroy the pathogen, be careful</size>",

                ["CHAT_VIRUS_PATOGEN_INFECTED"] = "You have become infected with the PATHOGEN virus. Your skills will be destroyed by him over time, you can recover by getting a certain skill",
                ["CHAT_VIRUS_PATOGEN_RECOVERED"] = "You are cured of the PATHOGEN virus, congratulations",
                ["CHAT_VIRUS_PATOGEN_RETURNED"] = "The PATHOGEN virus has bypassed you due to your ability to protect against the virus",

                ["CHAT_TAKE_DNK"] = "You discovered the DNK : +{0}",
                ["CHAT_SKILL_WOUNDED"] = "{0} successfully worked! You were able to recover",

                ["STUDY_ALL_YES"] = "You have successfully received a full set of skills!",

                ["REFERENCE_IQHEADREWARD"] = "Your skill has protected you from ordering for your head!",
                ["NEUTRAL_HELP_INFO"] = "This label means that the skill is a neutral skill",
                ["ACTIVE_HELP_INFO"] = "This label means that the skill is an active skill",

            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["EXIT_BTN"] = "<size=30><b>ПОКИНУТЬ ГЕНЕЗИС</b></size>",
                ["SHOW_DNK"] = "<size=20><b>СОЕДИНЕНИЯ ДНК : {0}</b></size>",
                ["SHOW_DNK_ECONOMIC"] = "<size=20><b>БАЛАНС : {0}</b></size>",
                ["EXIT_TAKE_PANEL"] = "<size=20><b>З\nА\nК\nР\nЫ\nТ\nЬ</b></size>",

                ["VIRUS_PATOGEN_TITLE"] = "<size=18><b>ВНИМАНИЕ ПАТОГЕН</b></size>",
                ["VIRUS_PATOGEN_DESCRIPTION"] = "<size=10>В вашем генетическом соединение был обнаружен вирус-патоген\nВирус со временем будет разрушать ваши изученные навыки\nВам доступен навык на уничтожение патогена,будьте бдительны</size>",

                ["CHAT_VIRUS_PATOGEN_INFECTED"] = "Вы заразились вирусом ПАТОГЕН. Ваши навыки со временем будут уничтожаться им,вы можете вылечиться получив определенный навык",
                ["CHAT_VIRUS_PATOGEN_RECOVERED"] = "Вы излечились от вируса ПАТОГЕН, поздравляем",
                ["CHAT_VIRUS_PATOGEN_RETURNED"] = "Вирус ПАТОГЕН обошел вас стороной благодаря вашему навыку на защиту от вируса",

                ["CHAT_TAKE_DNK"] = "Вы обнаружили ДНК : +{0}",

                ["CHAT_SKILL_WOUNDED"] = "{0} успешно сработал! Вы смогли придти в себя",

                ["STUDY_ALL_YES"] = "Вы успешно получили полный набор умений!",

                ["REFERENCE_IQHEADREWARD"] = "Ваш навык защитил вас от заказа за вашу голову!",

                ["NEUTRAL_HELP_INFO"] = "Данная метка означает,что навык относится к нейтральному навыку",
                ["ACTIVE_HELP_INFO"] = "Данная метка означает,что навык относится к активному навыку",
            }, this, "ru");

            PrintWarning("Языковой файл загружен успешно");
        }
        #endregion

        #region API

        bool API_HEAD_REWARD_SKILL(BasePlayer player)
        {
            if (IQHeadReward)
            {
                if (!config.ReferenceSettings.IQHeadRewardUse)
                    return false;

                if (DataSkills[player.userID].IQHeadReward)
                {
                    SendChat(player, lang.GetMessage("REFERENCE_IQHEADREWARD", this, player.UserIDString));
                    DataSkills[player.userID].IQHeadReward = false;
                    return true;
                }
                else return false;
            }
            else
            {
                PrintWarning("Не найден плагин IQHEADREWARD");
                return false;
            }
        }
        bool API_IS_RARE_SKILL_KITS(BasePlayer player)
        {
            if (!config.ReferenceSettings.IQKits) return false;
            if (!IQKits) return false;
            if (!DataSkills.ContainsKey(player.userID)) return false;
            return DataSkills[player.userID].IQKitsRareup;
        }
        bool API_IS_COOLDOWN_SKILL_KITS(BasePlayer player)
        {
            if (!config.ReferenceSettings.IQKits) return false;
            if (!IQKits) return false;
            if (!DataSkills.ContainsKey(player.userID)) return false;
            return DataSkills[player.userID].IQKitsCooldownPercent;
        }
        bool API_IS_ADVANCED_CRAFT(BasePlayer player)
        {
            if (!config.ReferenceSettings.IQCraftSystem) return false;
            if (!IQCraftSystem) return false;
            if (!DataSkills.ContainsKey(player.userID)) return false;
            return DataSkills[player.userID].IQCraftSystemAdvanced;
        }
        int API_GET_RARE_IQKITS() => config.SkillSettings.NeutralSkills.IQKitsRare.RareUP;
        int API_GET_COOLDOWN_IQKITS() => config.SkillSettings.NeutralSkills.IQKitsCooldown.PercentDrop;
        #endregion
    }
}


// --- End of file: IQPlagueSkill.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/LootLogs.cs ---
// --- Original Local Path: LootLogs.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;
using System.Reflection;

namespace Oxide.Plugins
{
    [Info("LootLogs", "k1lly0u", "0.1.3", ResourceId = 2065)]
    class LootLogs : RustPlugin
    {
        #region Fields
        Dictionary<uint, StorageType> itemTracker = new Dictionary<uint, StorageType>();
        private FieldInfo serverinput;
        private bool isInit = false;
        #endregion

        #region Oxide Hooks
        void Loaded() => lang.RegisterMessages(Messages, this);
        void OnServerInitialized()
        {
            serverinput = typeof(BasePlayer).GetField("serverInput", (BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.NonPublic));
            isInit = true;
        }

        private void OnEntityDeath(BaseEntity entity, HitInfo hitInfo)
        {
            try
            {
                if (isInit)
                {
                    if (entity != null)
                    {
                        if (entity is StorageContainer || entity is BaseOven || entity is StashContainer)
                        {
                            var killer = "";
                            if (hitInfo?.InitiatorPlayer != null)
                                killer = hitInfo.InitiatorPlayer.displayName;
                            DeathLog(entity.GetType().ToString(), entity.PrefabName, entity.net.ID.ToString(), entity.transform.position.ToString(), killer);
                        }
                    }
                }
            }
            catch { }
        }
        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            if (isInit)
            {
                if (item == null) return;
                if (item.uid == 0) return;
                if (container.playerOwner != null)
                {
                    if (itemTracker.ContainsKey(item.uid))
                    {
                        var player = container.playerOwner;
                        var data = itemTracker[item.uid];
                        if (string.IsNullOrEmpty(data.type) || data.type == "BasePlayer") return;
                        Log(player.displayName, $"{data.itemAmount}x {data.itemName}", data.type, data.entityID, data.entityName, true);
                        itemTracker.Remove(item.uid);
                    }
                }
                else if (container.entityOwner != null)
                {
                    if (itemTracker.ContainsKey(item.uid))
                    {
                        var data = itemTracker[item.uid];
                        string type = "";
                        if (container.entityOwner is StorageContainer)
                            type = "StorageContainer";
                        if (container.entityOwner.GetComponentInParent<BaseOven>())
                            type = "BaseOven";
                        if (container.entityOwner is StashContainer)
                            type = "StashContainer";
                        if (string.IsNullOrEmpty(type) || type == "BasePlayer") return;

                        Log(data.entityName, $"{data.itemAmount}x {data.itemName}", type, container.entityOwner.net.ID.ToString(), container.entityOwner.ShortPrefabName, false);
                        itemTracker.Remove(item.uid);
                    }
                }
            }
        }
        void OnItemRemovedFromContainer(ItemContainer container, Item item)
        {
            if (isInit)
            {
                if (item == null) return;
                if (item.uid == 0) return;
                if (container.entityOwner != null)
                {
                    var entity = container.entityOwner;
                    var storageData = new StorageType
                    {
                        entityName = entity.ShortPrefabName,
                        entityID = entity.net.ID.ToString(),
                        itemAmount = item.amount,
                        itemName = item.info.displayName.english
                    };

                    if (entity is StorageContainer)
                        storageData.type = "StorageContainer";
                    if (entity.GetComponentInParent<BaseOven>())
                        storageData.type = "BaseOven";
                    if (entity is StashContainer)
                        storageData.type = "StashContainer";

                    if (string.IsNullOrEmpty(storageData.type)) return;

                    if (!itemTracker.ContainsKey(item.uid))
                    {
                        itemTracker.Add(item.uid, storageData);

                        timer.Once(5, () =>
                        {
                            if (itemTracker.ContainsKey(item.uid))
                                itemTracker.Remove(item.uid);
                        });
                    }
                }
                else if (container.playerOwner != null)
                {
                    var entity = container.playerOwner;
                    var storageData = new StorageType
                    {
                        entityName = entity.displayName,
                        entityID = entity.net.ID.ToString(),
                        itemAmount = item.amount,
                        itemName = item.info.displayName.english,
                        type = "BasePlayer"
                    };
                    if (!itemTracker.ContainsKey(item.uid))
                    {
                        itemTracker.Add(item.uid, storageData);

                        timer.Once(5, () =>
                        {
                            if (itemTracker.ContainsKey(item.uid))
                                itemTracker.Remove(item.uid);
                        });
                    }
                }
            }
        }
        class StorageType
        {
            public string entityName;
            public string entityID;
            public string itemName;
            public int itemAmount;
            public string type;            
        }
        #endregion

        #region Functions
        private BaseEntity FindEntity(BasePlayer player)
        {
            var input = serverinput.GetValue(player) as InputState;
            var currentRot = Quaternion.Euler(input.current.aimAngles) * Vector3.forward;
            Vector3 eyesAdjust = new Vector3(0f, 1.5f, 0f);

            var rayResult = Ray(player.transform.position + eyesAdjust, currentRot);
            if (rayResult is BaseEntity)
            {
                var target = rayResult as BaseEntity;
                return target;
            }
            return null;
        }
        private object Ray(Vector3 Pos, Vector3 Aim)
        {
            var hits = Physics.RaycastAll(Pos, Aim);
            float distance = 100f;
            object target = null;

            foreach (var hit in hits)
            {
                if (hit.collider.GetComponentInParent<BaseEntity>() != null)
                {
                    if (hit.distance < distance)
                    {
                        distance = hit.distance;
                        target = hit.collider.GetComponentInParent<BaseEntity>();
                    }
                }
            }
            return target;
        }
        void Log(string playername, string item, string type, string id, string entityname, bool take)
        {
            if (!Interface.Oxide.DataFileSystem.ExistsDatafile($"LootLogs/{type}/foldercreator"))
                Interface.Oxide.DataFileSystem.SaveDatafile($"LootLogs/{type}/foldercreator");
            var dateTime = DateTime.Now.ToString("yyyy-MM-dd");            
            var taketype = "looted";
            if (!take) taketype = "deposited";
            ConVar.Server.Log($"oxide/data/LootLogs/{type}/{entityname}_{id}_{dateTime}.txt", $"{playername} {taketype} {item}");
        }
        void DeathLog(string type, string entityname, string id, string position, string killer)
        {
            if (!Interface.Oxide.DataFileSystem.ExistsDatafile($"LootLogs/DestroyedContainers/{type}/foldercreator"))
                Interface.Oxide.DataFileSystem.SaveDatafile($"LootLogs/DestroyedContainers/{type}/foldercreator");
            var dateTime = DateTime.Now.ToString("yyyy-MM-dd");
            ConVar.Server.Log($"oxide/data/LootLogs/DestroyedContainers/{type}/DeathLog_{dateTime}.txt", $"Name:{entityname} | BoxID:{id} | Position:{position} | Killer: {killer} | LogFile: oxide/data/LootLogs/{type}/{entityname}_{id}_xxxxxxxx.txt");
            ConVar.Server.Log($"oxide/data/LootLogs/DestroyedContainers/{type}/DeathLog_{dateTime}.txt", "-------------------------------------------------------------------------");
        }
        #endregion

        #region Chat Commands
        [ChatCommand("findid")]
        void cmdFindID(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin()) return;
            var entity = FindEntity(player);
            if (entity == null || ( !(entity is StorageContainer) && !(entity is StashContainer) && !(entity is BaseOven)))
            {
                SendReply(player, $"<color=orange>{msg("noEntity", player.UserIDString)}</color>");
                return;
            }
            else
            {
                SendReply(player, string.Format(msg("foundBox", player.UserIDString), entity.GetType(), entity.net.ID, entity.ShortPrefabName, "<color=#939393>", "<color=orange>"));
                return;
            }
        }
        #endregion

        #region Messaging
        string msg(string key, string id = null) => lang.GetMessage(key, this, id);
        Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            {"noEntity", "You are either not looking at at a entity or you are not looking at the correct type of entity" },
            {"foundBox", "{3}The box you are looking at is of the type:</color>{4} {0}</color>{3} with the ID:</color>{4} {1}.</color>{3} You can find the log for this box in </color>{4}'oxide/data/LootLogs/{0}/{2}_{1}_xxdatexx.txt'</color>" }
        };
        #endregion
    }
}


// --- End of file: LootLogs.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/LimitedTurrets.cs ---
// --- Original Local Path: LimitedTurrets.cs ---

using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins {
	[Info("LimitedTurrets", "own3r/rever", "1.0.1")]
	[Description("Ограничение турелей")]
	class LimitedTurrets : RustPlugin {
		#region Поля

		[PluginReference] private Plugin ImageLibrary;

		public Dictionary<string, string> turretTypes = new Dictionary<string, string>() {
			{"autoturret_deployed", "Автоматическая турель"},
			{"guntrap.deployed", "Гантрап"},
			{"flameturret.deployed", "Огненная турель"}
		};

		public Dictionary<ulong, Dictionary<string, int>> turrets = new Dictionary<ulong, Dictionary<string, int>>();

		#endregion

		#region Конфигурация

		public class Configuration {
			[JsonProperty(PropertyName = "Версия конфига (не менять)")]
			public int version;

			[JsonProperty(PropertyName = "Привилегии")]
			public Dictionary<string, Dictionary<string, int>> privelegies { get; set; } = new Dictionary<string, Dictionary<string, int>>();

			[JsonProperty(PropertyName = "Разрешить привилегию limitedturrets.bypass для игнорирования лимитов")]
			public bool useBypass;

			[JsonProperty(PropertyName = "Разрешить админам игнорировать лимиты")]
			public bool allowAdmin;

			[JsonProperty(PropertyName = "Команда для открытия UI")]
			public string showUICmd;

			[JsonProperty(PropertyName = "Разрешить UI")]
			public bool allowUI;

			[JsonProperty(PropertyName = "Разрешить информирование в чате о изменении лимита")]
			public bool allowNotify;
		}

		public Configuration config;

		protected override void LoadDefaultConfig() {
			config = new Configuration {
				version = 1,
				privelegies = {
					{
						"limitedturrets.default", new Dictionary<string, int> {
							{"autoturret_deployed", 5},
							{"guntrap.deployed", 5},
							{"flameturret.deployed", 5}
						}
					}, {
						"limitedturrets.vip", new Dictionary<string, int> {
							{"autoturret_deployed", 15},
							{"guntrap.deployed", 15},
							{"flameturret.deployed", 15}
						}
					}
				},
				useBypass   = true,
				allowAdmin  = true,
				showUICmd   = "turret",
				allowUI     = true,
				allowNotify = true
			};
			SaveConfig();
		}

		protected override void SaveConfig() => Config.WriteObject(config);

		#endregion

		#region Инициализаця и выгрузка

		private void Loaded() {
			try {
				config = Config.ReadObject<Configuration>();
			} catch {
				LoadDefaultConfig();
			}

			if (config.useBypass) {
				permission.RegisterPermission($"limitedturrets.bypass", this);
			}

			foreach (var privelegy in config.privelegies) {
				permission.RegisterPermission(privelegy.Key, this);
			}

			if (config.allowUI) {
				cmd.AddChatCommand(config.showUICmd ?? "turret", this, cmdShowUI);
			}
		}

		private void OnServerInitialized() {
			if (!Interface.Oxide.DataFileSystem.ExistsDatafile(Title)) return;

			turrets = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Dictionary<string, int>>>(Title);

			if (!ImageLibrary) {
				PrintError("Не найден плагин ImageLibrary - UI работать не будет!");
				return;
			}

			foreach (var type in turretTypes) {
				//@todo: словарь с URL иконок
				var name = type.Key.Replace("_deployed", "").Replace(".deployed", "");
				ImageLibrary.Call("AddImage", $"https://rustlabs.com/img/items180/{name}.png", type.Key);
			}
		}

		void Unload() {
			SaveState();
		}

		#endregion

		#region Права/Привилегия

		void UpdatePermissions(string id, string name) {
			ulong intId;
			ulong.TryParse(id, out intId);
			if (!turrets.ContainsKey(intId)) return;

			foreach (var type in turretTypes) {
				var cnt = GetTurretCount(id, type.Key);
				if (!turrets[intId].ContainsKey(type.Key)) continue;

				var curr = turrets[intId][type.Key];

				if (cnt < curr) turrets[intId][type.Key] = cnt;
			}
		}

		void OnUserPermissionRevoked(string id, string perm) {
			UpdatePermissions(id, perm);
		}

		void OnUserPermissionGranted(string id, string perm) {
			UpdatePermissions(id, perm);
		}

		bool CheckBypass(BasePlayer player) {
			if (player == null) return false;
			if (config.allowAdmin && player.IsAdmin) return true;
			if (config.useBypass  && permission.UserHasPermission(player.UserIDString, "limitedturrets.bypass")) return true;

			return false;
		}

		#endregion

		#region UI

		public void ShowUIPanel(BasePlayer player) {
			if (player == null || !player.IsConnected || !ImageLibrary) return;

			if (player.IsReceivingSnapshot) {
				timer.Once(0.1f, () => { ShowUIPanel(player); });
				return;
			}

			var json =
				"[{\"name\":\"LTUIPanel\",\"parent\":\"Hud\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"0.05274077 0.05567554 0.06511204 0.552046\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.315625 0.4370371\",\"anchormax\":\"0.5914066 0.6661676\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPImg1\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\",\"png\":\"{p1}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04157076 0.199005\",\"anchormax\":\"0.3002312 0.747377\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPTxt1\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{t1}/{t1m}\",\"fontSize\":21,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04618971 0.004484296\",\"anchormax\":\"0.3002312 0.202052\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPImg2\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\",\"png\":\"{p2}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.3672055 0.1990049\",\"anchormax\":\"0.6258663 0.747377\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPTxt2\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{t2}/{t2m}\",\"fontSize\":21,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.3718243 0\",\"anchormax\":\"0.6258663 0.202052\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPImg3\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\",\"png\":\"{p3}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.6928407 0.199005\",\"anchormax\":\"0.9515015 0.747377\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIPTxt3\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{t3}/{t3m}\",\"fontSize\":21,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.6817745 0\",\"anchormax\":\"0.9121802 0.1939699\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUITitle\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Установлено турелей:\",\"fontSize\":22,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.01154769 0.7668161\",\"anchormax\":\"0.9815242 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{\"name\":\"LTUIBtn\",\"parent\":\"LTUIPanel\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"LTUIPClose\",\"color\":\"1 1 1 0\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2796875 0.4521484\",\"anchormax\":\"0.615625 0.6679688\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]}]";
			var cb = new StringBuilder(json);

			var i = 1;

			foreach (var type in turretTypes) {
				var curr = 0;

				if (turrets.ContainsKey(player.userID)) {
					curr = turrets[player.userID][type.Key];
				}

				cb.Replace("{t" + i + "}", curr.ToString());
				cb.Replace("{t" + i + "m}", GetTurretCount(player.UserIDString, type.Key).ToString());
				cb.Replace("{p" + i + "}", (string)ImageLibrary?.Call("GetImage", type.Key) ?? "");
				i++;
			}

			CuiHelper.AddUi(player, cb.ToString());
		}

		#endregion

		#region Комманды

		private void cmdShowUI(BasePlayer player, string command, string[] args) {
			if (CheckBypass(player)) {
				SendReply(player, "У вас нет лимита на туррели!");
				return;
			}

			ShowUIPanel(player);
		}

		[ConsoleCommand("LTUIPClose")]
		void cmdLTUIPClose(ConsoleSystem.Arg arg) {
			var player = arg.Player();

			if (player == null || !player.IsConnected) return;

			CuiHelper.DestroyUi(player, "LTUIPanel");
		}

		[ConsoleCommand("lt.add")]
		void cmdAddPrivelege(ConsoleSystem.Arg arg) {
			//@todo: Доработать для автоформирования в соответствии с turretTypes
			var player = arg.Player();
			if (player == null || !player.IsAdmin) return;

			if (!arg.HasArgs() || arg.Args.Length != turretTypes.Count + 1) {
				SendReply(arg, "Синтаксис: lt.add ИмяПривилегии Автоматическая Гантрап Огненная");
				SendReply(arg, $"Пример: lt.add {Title.ToLower()}.premium 10 30 20");
				return;
			}

			var newRow = new Dictionary<string, int>();

			var i = 1;

			foreach (var type in turretTypes) {
				int cInt;
				int.TryParse(arg.Args[i], out cInt);
				newRow.Add(type.Key, cInt);
				i++;
			}

			config.privelegies.Add(arg.Args[0], newRow);
			SaveConfig();
			covalence.Server.Command($"o.reload {Title}");
		}

		[ConsoleCommand("lt.remove")]
		void cmdRemovePrivelege(ConsoleSystem.Arg arg) {
			var player = arg.Player();
			if (player == null || !player.IsAdmin) return;

			if (!arg.HasArgs() || arg.Args.Length != 1) {
				SendReply(arg, "Синтаксис: lt.remove ИмяПривилегии");
				SendReply(arg, $"Пример: lt.remove {Title.ToLower()}.premium");
				return;
			}

			if (!config.privelegies.ContainsKey(arg.Args[0])) {
				SendReply(arg, $"В конфиге не найдена привилегия '{arg.Args[0]}'");
				return;
			}

			config.privelegies.Remove(arg.Args[0]);
			SaveConfig();
			covalence.Server.Command($"o.reload {Title}");
		}

		[ConsoleCommand("lt.flush")]
		void cmdFlushUser(ConsoleSystem.Arg arg) {
			var player = arg.Player();
			if (player == null || !player.IsAdmin) return;

			if (!arg.HasArgs() || arg.Args.Length != 1) {
				SendReply(arg, "Синтаксис: lt.flush SteamId");
				SendReply(arg, "Пример: lt.flush 76561198058966464");
				return;
			}

			ulong steamId;
			ulong.TryParse(arg.Args[0], out steamId);

			if (steamId == 0) {
				SendReply(arg, $"Ошибка: '{arg.Args[0]}' не SteamId");
				return;
			}

			if (!turrets.ContainsKey(steamId)) {
				SendReply(arg, $"Ошибка: пользователь не найден");
				return;
			}
			turrets.Remove(steamId);
			SaveState();
			SendReply(arg, "Лимиты для пользователя сброшены");
		}

		#endregion

		#region Методы - основная реализация функционала

		string GetTurretType(string turretName) {
			foreach (var turretType in turretTypes) {
				if (turretName.Contains(turretType.Key)) return turretType.Key;
			}

			return null;
		}

		public int GetTurretCount(string playerId, string type) {
			var cntMax = 0;
			Puts("GetTurretCount");
			foreach (var privelegy in config.privelegies) {
				Puts(privelegy.Key);
				if (!permission.UserHasPermission(playerId, privelegy.Key) && privelegy.Key != "limitedturrets.default") continue;
				
				if (!privelegy.Value.ContainsKey(type)) {
					PrintWarning($"Для привилегии '{privelegy.Key}' не указанна турель '{type}!'");
					continue;
				}

				if (cntMax > privelegy.Value[type]) continue;

				cntMax = privelegy.Value[type];
			}

			return cntMax;
		}

		void CheckTurret(BaseEntity entity) {
			if (entity == null) return;

			var type = GetTurretType(entity.PrefabName);
			if (type == null) return;

			var player = BasePlayer.activePlayerList.Find(f => f.userID == entity.OwnerID);
			if (CheckBypass(player)) return;

			if (!turrets.ContainsKey(entity.OwnerID)) {
				PrintWarning($"Аномальная ситуация №1! Сообщите разработчику это число - [{entity.OwnerID}] и предоставьте файл data/{Title}.json");
				return;
			}

			if (turrets[entity.OwnerID][type] > 0) turrets[entity.OwnerID][type]--;
			if (!config.allowNotify) return;
			if (player == null || !player.IsConnected) return;

			var sum = GetTurretCount(player.UserIDString, type) - turrets[entity.OwnerID][type];
			SendReply(player,
				$"Количество размещенных '{turretTypes[type]}' уменьшилось!\n{(sum <= 0 ? "Больше установить нельзя!" : "Можно установить еще " + sum)}");
		}

		void SaveState() {
			Interface.Oxide.DataFileSystem.WriteObject(Title, turrets);
		}

		#endregion

		#region Хуки Oxide

		object CanBuild(Planner planner, Construction prefab, Construction.Target target) {
			if (prefab == null) return null;

			var type = GetTurretType(prefab.fullName);
			if (type == null) return null;

			var player = planner.GetOwnerPlayer();
			if (player == null) return false;
			if (CheckBypass(player)) return null;

			var userId = planner.GetOwnerPlayer().userID;

			if (!turrets.ContainsKey(userId)) {
				turrets.Add(userId, new Dictionary<string, int>());

				foreach (var turretType in turretTypes) {
					turrets[userId].Add(turretType.Key, 0);
				}
			}

			var currentCount = turrets[userId][type];

			var cntMax = GetTurretCount(player.UserIDString, type);

			if (currentCount > cntMax - 1) {
				if (player.IsConnected) {
					SendReply(player, $"Вы достигли лимита размещенных '{turretTypes[type]}', больше установить нельзя!");
				}

				return false;
			}

			turrets[userId][type]++;

			if (player.IsConnected && config.allowNotify) {
				var sum = cntMax - turrets[userId][type];
				SendReply(player,
					$"Количество размещенных '{turretTypes[type]}' увеличилось!\n{(sum <= 0 ? "Больше установить нельзя!" : "Можно установить еще " + sum)}");
			}

			return null;
		}

		void OnEntityDeath(BaseCombatEntity entity, HitInfo info) {
			CheckTurret(entity);
		}

		bool CanPickupEntity(BasePlayer player, BaseCombatEntity entity) {
			CheckTurret(entity);
			return true;
		}

		void OnNewSave(string filename) {
			turrets = new Dictionary<ulong, Dictionary<string, int>>();
			SaveState();
		}

		void OnServerSave() {
			SaveState();
		}

		#endregion
	}
}


// --- End of file: LimitedTurrets.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/NoSigns.cs ---
// --- Original Local Path: NoSigns.cs ---

using UnityEngine;

namespace Oxide.Plugins
{
    [Info("No Signs", "bawNg", 0.4)]
    class NoSigns : RustPlugin
    {
        string notAllowedMessage = "<color=red>You are not allowed to use signs on this server</color>";

        void Loaded()
        {
            var signs = UnityEngine.Object.FindObjectsOfType<Signage>();
            Puts($"[No Signs] Removing {signs.Length} signs from the map...");
            foreach (var sign in signs) sign.Kill();
        }

        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            var player = container.playerOwner;
            if (!player || !item.info) return;
            
            if (!player.IsAdmin() && item.info.shortname.StartsWith("sign."))
            {
                PrintToChat(player, notAllowedMessage);
                item.Remove(0f);
            }
        }

        object OnCanCraft(ItemCrafter item_crafter, ItemBlueprint blueprint, int amount)
        {
            if (item_crafter.containers.Count < 1) return false;

            var item = blueprint.targetItem;
            if (!item) return null;

            var player = item_crafter.containers[0].playerOwner;
            if (!player) return null;

            if (!player.IsAdmin() && item.shortname.StartsWith("sign."))
            {
                PrintToChat(player, notAllowedMessage);
                return false;
            }

            return null;
        }

        void OnEntityBuilt(Planner planner, GameObject game_object)
        {
            if (game_object == null) return; // sphere check failed

            var player = planner.ownerPlayer;
            var entity = game_object.GetComponent<Signage>();
            if (!player || !entity) return;

            if (!player.IsAdmin() && entity.LookupPrefabName().StartsWith("signs/"))
            {
                PrintToChat(player, notAllowedMessage);
                entity.Kill();
            }
        }
    }
}


// --- End of file: NoSigns.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XIcyJackhammer.cs ---
// --- Original Local Path: XIcyJackhammer.cs ---

using Newtonsoft.Json;
using UnityEngine;
using System.Linq;
using Oxide.Core.Plugins;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("XIcyJackhammer", "Sempai#3239", "1.0.801")]
	class XIcyJackhammer : RustPlugin
	{
		
		private void OnLootEntity(BasePlayer player, BaseEntity entity)
		{
			if (config.Settings.CrateJackhammer)
			{
				if (config.Settings.PermissionJackhammer)
					if (!permission.UserHasPermission(player.UserIDString, "xicyjackhammer.jackhammer")) return;
			
			    if (!(entity is LootContainer) || player == null || entity.OwnerID != 0) return;
			
			    var inventory = entity.GetComponent<LootContainer>().inventory;
			    var lootcontainer = entity.GetComponent<LootContainer>();
						
				foreach(var crate in config.Crate)
					if(crate.NameCrate == lootcontainer.ShortPrefabName)
						if (UnityEngine.Random.Range(0, 100) <= crate.ChanceDrop)
						{
							Item item = ItemManager.CreateByName("jackhammer", 1, config.Jackhammer.SkinIDJackhammer);
							item.name = config.Jackhammer.NameJackhammer;
								
							item.MoveToContainer(inventory);
							entity.OwnerID = player.userID;
						}
		   		 		  						  	   		  	  			  	 				  			 		  		  
			}
		}
		
				
		
        private void InitializeLang()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ICE"] = "You have mined <color=#00BFFF>ice</color>!"					
            }, this);
		   		 		  						  	   		  	  			  	 				  			 		  		  
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ICE"] = "Вы добыли <color=#00BFFF>глыбу льда</color>!"						
            }, this, "ru");
        }
		
				
				
		private Item OnItemSplit(Item item, int amount)
        {
			if (StackSizeController) return null;
			
            if (item.skin == config.Ice.SkinIDIce)
            {
                item.amount -= amount;
				
                var Item = ItemManager.Create(item.info, amount, item.skin);
					
                Item.name = item.name;
                Item.skin = item.skin;
                Item.amount = amount;
				item.MarkDirty();
				
                return Item;
            }
			
            return null;
        }
				
		[PluginReference] private Plugin StackSizeController;

        		
				
		[ConsoleCommand("j_give")]
        private void IceGive(ConsoleSystem.Arg args)
        {
			if (args.Player() == null || args.Player().IsAdmin)
			{
				BasePlayer player = BasePlayer.FindByID(ulong.Parse(args.Args[0]));
			
				if (player == null) return;
			
				switch (args.Args[1].ToLower())
				{
					case "jackhammer":
					{
						Item item = ItemManager.CreateByName("jackhammer", int.Parse(args.Args[2]), config.Jackhammer.SkinIDJackhammer);
						item.name = config.Jackhammer.NameJackhammer;
						player.GiveItem(item);
			
						break;
					}				
					case "ice":
					{
						Item item = ItemManager.CreateByName("sticks", int.Parse(args.Args[2]), config.Ice.SkinIDIce);
						item.name = config.Ice.NameIce;
						player.GiveItem(item);
					
						break;
					}
				}
			}
        }
		protected override void LoadDefaultConfig() => config = IceConfig.GetNewConfiguration();
		   		 		  						  	   		  	  			  	 				  			 		  		  
		protected override void LoadConfig()
        { 
            base.LoadConfig();
			
			try
			{
				config = Config.ReadObject<IceConfig>();
			}
			catch
			{
				PrintWarning("Ошибка чтения конфигурации! Создание дефолтной конфигурации!");
				LoadDefaultConfig();
			}
			
			SaveConfig();
        }
		
		private object CanCombineDroppedItem(DroppedItem item, DroppedItem targetItem)
		{
            if (item.GetItem().skin == config.Ice.SkinIDIce)
				if (!targetItem.GetItem().skin.Equals(item.GetItem().skin)) return false;
			
            if (targetItem.GetItem().skin == config.Ice.SkinIDIce)
				if (!item.GetItem().skin.Equals(targetItem.GetItem().skin)) return false; 

            return null;
		}

        private class IceConfig
        {		
			
			internal class JackhammerSetting
            {
                [JsonProperty("SkinID бура")] public ulong SkinIDJackhammer;
				[JsonProperty("Имя бура")] public string NameJackhammer;				
            }					
			[JsonProperty("Настройка шанса выпадения ледяного бура в ящиках")]
            public List<Crates> Crate = new List<Crates>();
			
			internal class Crates
			{
				[JsonProperty("Имя ящика")] public string NameCrate;				
				[JsonProperty("Шанс выпадения")] public float ChanceDrop;	
				
				public Crates(string namecrate, float chancedrop)
				{
					NameCrate = namecrate; ChanceDrop = chancedrop;
				}
			}
			
			internal class IceRecycler
            {
			    [JsonProperty("Shortname предмета")] public string ShortNameItem;
				[JsonProperty("Скин предмета")] public ulong SkinIDItem;	
				[JsonProperty("Кастомное имя предмета")] public string ItemNameItem;				
				[JsonProperty("Шанс выпасть при переработки льда. 100.0 - 100%")] public float ChanceItem;			    
				[JsonProperty("Минимальное количество предмета")] public int AmountMinItem;				
				[JsonProperty("Максимальное количество предмета")] public int AmountMaxItem;	
		   		 		  						  	   		  	  			  	 				  			 		  		  
				public IceRecycler(string shortnameitem, ulong skiniditem, string itemnameitem, float chanceitem, int amountminitem, int amountmaxitem)
				{
					ShortNameItem = shortnameitem; SkinIDItem = skiniditem; ItemNameItem = itemnameitem; ChanceItem = chanceitem; AmountMinItem = amountminitem; AmountMaxItem = amountmaxitem;
				}
            }
			
			internal class WorkSetting
            {				
				[JsonProperty("Включить выпадение ледяного бура из ящиков с определенным шансом")] public bool CrateJackhammer;				
				[JsonProperty("Включить добычу глыб льда только в зимнем биоме")] public bool GatherIce;				
				[JsonProperty("Использовать разрешение на шанс найти ледяной бур в ящиках: xicyjackhammer.jackhammer")] public bool PermissionJackhammer;				
				[JsonProperty("Использовать разрешение на шанс добыть глыбу льда: xicyjackhammer.ice")] public bool PermissionIce;				
				[JsonProperty("Ипользовать сообщение в чат при добыче глыбы льда")] public bool Message;		
			}
			[JsonProperty("Переработка")]
            public List<IceRecycler> Recycler = new List<IceRecycler>();
			internal class IceSetting
            {
                [JsonProperty("SkinID льда")] public ulong SkinIDIce;
				[JsonProperty("Имя льда")] public string NameIce;				
            }			
			[JsonProperty("Добыча льда")]
            public List<IceGather> Gather = new List<IceGather>();			
			
			internal class IceGather
            {
			    [JsonProperty("Ресурс вместе с каким будет выпадать лед")] public string TypeGather;			    
				[JsonProperty("Шанс выпасть льда при бонусной добыче")] public float ChanceGather;			    
				[JsonProperty("Минимальное количество льда")] public int AmountMinGather;				
				[JsonProperty("Максимальное количество льда")] public int AmountMaxGather;	

				public IceGather(string typegather, float chancegather, int amountmingather, int amountmaxgather)
				{
					TypeGather = typegather; ChanceGather = chancegather; AmountMinGather = amountmingather; AmountMaxGather = amountmaxgather;
				}
            }			
			[JsonProperty("Ледяной бур")]
            public JackhammerSetting Jackhammer = new JackhammerSetting();									
			[JsonProperty("Общее")]
            public WorkSetting Settings = new WorkSetting();			
            
			[JsonProperty("Глыба льда")]
            public IceSetting Ice = new IceSetting();			
			
			public static IceConfig GetNewConfiguration()
            {
                return new IceConfig
                {
					Ice = new IceSetting
					{
						SkinIDIce = 2215768109,
						NameIce = "ГЛЫБА ЛЬДА"
					},					
					Jackhammer = new JackhammerSetting
					{
						SkinIDJackhammer = 2215780465,
						NameJackhammer = "ЛЕДЯНОЙ БУР"
					},
					Settings = new WorkSetting
					{
						CrateJackhammer = false,
						GatherIce = false,
						PermissionJackhammer = false,
						PermissionIce = false,
						Message = false
					},
					Gather = new List<IceGather>
					{
						new IceGather("stones", 75.0f, 1, 3),
						new IceGather("sulfur.ore", 75.0f, 1, 3),
						new IceGather("metal.ore", 75.0f, 1, 3)
					},
					Recycler = new List<IceRecycler>
					{
						new IceRecycler("stones", 0, "", 50.0f, 5, 50),
						new IceRecycler("lowgradefuel", 0, "", 50.0f, 5, 50)
					},
                    Crate = new List<Crates>
					{
						new Crates("foodbox", 15.0f),
						new Crates("crate_normal_2", 5.0f)
					}
				};
			}
        }
		
				
				
		private void OnServerInitialized()
        {
			
			permission.RegisterPermission("xicyjackhammer.jackhammer", this);
			permission.RegisterPermission("xicyjackhammer.ice", this);
			
			InitializeLang();
        }
		
		private void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
		{
			Item tools = player?.GetActiveItem();
			
			if (dispenser == null || player == null || item == null || tools == null) return;
			
			if (config.Settings.PermissionIce)
				if (!permission.UserHasPermission(player.UserIDString, "xicyjackhammer.ice")) return;
			
			if (tools.skin == config.Jackhammer.SkinIDJackhammer)
			    for (int i = 0; i < config.Gather.Count(); i++)
			        if (item.info.shortname.Contains(config.Gather[i].TypeGather))
			        {
					    if (UnityEngine.Random.Range(0f, 100f) < config.Gather[i].ChanceGather)
					    {
							if (config.Settings.GatherIce)
							{
								if (TerrainMeta.BiomeMap.GetBiome(player.transform.position, TerrainBiome.ARCTIC) > 0.15f )
									GiveIce(player, Random.Range(config.Gather[i].AmountMinGather, config.Gather[i].AmountMaxGather));
							}
							else
								GiveIce(player, Random.Range(config.Gather[i].AmountMinGather, config.Gather[i].AmountMaxGather));
							
							if (config.Settings.Message) SendReply(player, lang.GetMessage("ICE", this, player.UserIDString));
					    }
			        }
		}
		
				
		
        private IceConfig config;
        protected override void SaveConfig() => Config.WriteObject(config);
		
		object OnRecycleItem(Recycler recycler, Item item)
        {
		    if (item.info.shortname.Equals("sticks") && item.skin.Equals(config.Ice.SkinIDIce))
            {
				recycler.inventory.Take(null, ItemManager.FindItemDefinition("sticks").itemid, 1);
				
				foreach(var i in config.Recycler)
					if (UnityEngine.Random.Range(0f, 100f) < i.ChanceItem)
					{
                        Item itemc = ItemManager.CreateByName(i.ShortNameItem, Random.Range(i.AmountMinItem, i.AmountMaxItem), i.SkinIDItem);
						itemc.name = i.ItemNameItem;
						
                        recycler.MoveItemToOutput(itemc);
					}
				
                return false;
            }
				
			return null;
        }
		
		private void GiveIce(BasePlayer player, int amount)
		{
			Item items = ItemManager.CreateByName("sticks", amount, config.Ice.SkinIDIce);
            items.name = config.Ice.NameIce;
            player.GiveItem(items);
		}

        	}
}


// --- End of file: XIcyJackhammer.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/FHitMarker.cs ---
// --- Original Local Path: FHitMarker.cs ---

using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;

namespace Oxide.Plugins 
{ 
    [Info("FHitMarker", "Molik", "1.0.4")]
    class FHitMarker : RustPlugin
    {
	    #region Cfg
        
	    private ConfigData _config;
	    public class ConfigData
	    {
		    [JsonProperty("Использовать иконку попадания: ")]
		    public bool UseHit = true;
            
		    [JsonProperty("Через сколько пропадет маркер: ")]
		    public float TimeToDestroy = 1.0f;
            
		    [JsonProperty("Цвет которым отмечаются друзья: ")]
		    public string ColorToFriend = "#9ACD32";

		    public static ConfigData GetNewCong()
		    {
			    ConfigData newConfig = new ConfigData();
			    newConfig.UseHit = true;
			    newConfig.TimeToDestroy = 1.0f;
			    newConfig.ColorToFriend = "#9ACD32";
			    return newConfig;
		    }
	    }
	    protected override void LoadConfig()
	    {
		    base.LoadConfig();
		    try
		    {
			    _config = Config.ReadObject<ConfigData>();
                
		    }
		    catch
		    {
			    LoadDefaultConfig();
		    }

		    NextTick(SaveConfig);
	    }
	    protected override void LoadDefaultConfig() => _config = ConfigData.GetNewCong();
	    protected override void SaveConfig() => Config.WriteObject(_config);
        
	    #endregion
	    
		#region Hooks
		[PluginReference] private Plugin ImageLibrary;
		private void OnServerInitialized()
		{
			LoadImages();
		}
		void LoadImages()
		{
			foreach (var imgKey in Images)
			{
				ImageLibrary.Call("AddImage", imgKey.Value, imgKey.Key);
			}
		}
		Dictionary<string, string> Images = new Dictionary<string, string>()
		{
			{ "hitmarker.kill", "https://i.postimg.cc/Jn71NV8g/R0NeHWp.png" },
			{ "hitmarker.hit.normal", "https://i.postimg.cc/k56SSRT2/LXglZUq.png" },
			{ "hitmarker.hit.wound", "https://i.postimg.cc/153f6Nty/ZjLZmzu.png" },
		};
		private void OnPlayerAttack(BasePlayer attacker, HitInfo info)
		{
			BaseEntity entity = info.HitEntity;
			
			if (entity == null || !(entity is BasePlayer)) return;
			
			NextTick(() =>
			{
				BasePlayer victim = entity as BasePlayer;
				if (victim.IsDead() || victim.IsWounded()) return;
				if (attacker.currentTeam == victim.currentTeam && attacker.currentTeam != 0)
                {
					HitGUI(attacker, $"<color={_config.ColorToFriend}>{victim.displayName}</color>");
				}
				else if (info.isHeadshot)
				{
					HitGUI(attacker, $"<color=#ffffff>{info.damageTypes.Total().ToString("F0")}</color>");
					HitPng(attacker, "hitmarker.hit.normal", "1 1 1 0.6");
				}
				else
				{
					HitGUI(attacker, info.damageTypes.Total().ToString("F0"));
					HitPng(attacker, "hitmarker.hit.normal", "1 1 1 0.6");
				}
			});
		}
		void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
		{
			var player = entity.ToPlayer();
			if (player == null) return;
			var attacker = info?.Initiator as BasePlayer;
			if (attacker == null) return;
			bool check = false;
			if (info.isHeadshot)
				check = true;
			CuiHelper.DestroyUi(attacker, "normalhit");
			HitPng(attacker, "hitmarker.kill", check == true ? "1 0 0 0.6" : "1 1 1 0.6");
		}
		void OnPlayerWound(BasePlayer player)
		{
			var attacker = player?.lastAttacker as BasePlayer;
			if (attacker == null) return;
			CuiHelper.DestroyUi(attacker, "normalhit");
			HitPng(attacker, "hitmarker.hit.wound", "1 1 1 0.6");
		}

		#endregion

		#region GUI

		private void HitGUI(BasePlayer attacker, string text)
		{
			CuiHelper.DestroyUi(attacker, "normalhit");
            CuiElementContainer container = new CuiElementContainer();
			
			container.Add(new CuiElement
            {
                Parent = "Hud",
				Name = "normalhit",
				FadeOut = 0.2f,
                Components =
                {
			        new CuiTextComponent { Text = text, Align = TextAnchor.MiddleCenter, FontSize = 13, FadeIn = 0.4f },
                    new CuiRectTransformComponent { AnchorMin = $"0.5 0.5", AnchorMax = $"0.5 0.5", OffsetMin = "-100 -25", OffsetMax = "100 -5" },
					new CuiOutlineComponent { Color = "0 0 0 0", Distance = "0.15 0.15" }
                }
            });	
			
			CuiHelper.AddUi(attacker, container);
			attacker.Invoke(() => CuiHelper.DestroyUi(attacker, "normalhit"), _config.TimeToDestroy);
		}

		private void HitPng(BasePlayer attacker, string png, string check)
		{
			CuiHelper.DestroyUi(attacker, "hitpng");
			CuiElementContainer container = new CuiElementContainer();
			string ID = CuiHelper.GetGuid().ToString();
			string offmax = "20 20";
			string offmin = "-20 -20";
			float Fade = 0.5f;
			if (png == "hitmarker.hit.normal")
            {
				offmax = "10 10";
				offmin = "-10 -10";
				Fade = 0.1f;
				if (!_config.UseHit)
					return;
			}
			container.Add(new CuiElement
			{
				Parent = "Hud",
				Name = "hitpng",
				FadeOut = Fade,
				Components =
				{
					new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", png), Color = check },
					new CuiRectTransformComponent { AnchorMin = $"0.5 0.5", AnchorMax = $"0.5 0.5", OffsetMin = offmin, OffsetMax = offmax }
				}
			});

			CuiHelper.AddUi(attacker, container);
			attacker.Invoke(() => CuiHelper.DestroyUi(attacker, "hitpng"), _config.TimeToDestroy);
		}
		#endregion
	}
}

// --- End of file: FHitMarker.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQEconomic.cs ---
// --- Original Local Path: IQEconomic.cs ---

﻿using System;
using System.Collections.Generic;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("IQEconomic", "Mercury", "0.1.3")]
    [Description("Экономика на ваш сервер")]
    class IQEconomic : RustPlugin
    {
        #region Reference
        [PluginReference] Plugin IQChat, Friends, Clans, Battles, Duel, RustStore, ImageLibrary;
        public void SendChat(string Message, BasePlayer player, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            var Chat = config.ReferenceSettings.ChatSettings;
            if (IQChat)
                if (Chat.UIAlertUse)
                    IQChat?.Call("API_ALERT_PLAYER_UI", player, Message);                    
                else IQChat?.Call("API_ALERT_PLAYER", player, Message, Chat.CustomPrefix, Chat.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        private string GetImage(string fileName, ulong skin = 0)
        {
            var imageId = (string)plugins.Find("ImageLibrary").CallHook("GetImage", fileName, skin);
            if (!string.IsNullOrEmpty(imageId))
                return imageId;
            return string.Empty;
        }
        public bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);

        public void AddAllImage()
        {
            var Images = config.TransferSettings;
            if (string.IsNullOrEmpty(Images.URLMoney) || string.IsNullOrEmpty(Images.URLStores)) return;
            if (!ImageLibrary)
            {
                PrintError("Не установлен плагин ImageLibrary!");
                return;
            }

            AddImage(Images.URLMoney, "URLMoney");
            AddImage(Images.URLStores, "URLStores");
        }

        public bool IsFriends(ulong userID, ulong targetID)
        {
            if (Friends)
                return (bool)Friends?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsClans(ulong userID, ulong targetID)
        {
            if (Clans)
                return (bool)Clans?.Call("IsClanMember", userID, targetID);
            else return false;
        }
        public bool IsDuel(ulong userID)
        {
            if (Battles)
                return (bool)Battles?.Call("IsPlayerOnBattle", userID);
            else if (Duel) return (bool)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
            else return false;
        }
        public void MoscovOVHBalanceSet(ulong userID, int Balance, int MoneyTake)
        {
            if (!RustStore)
            {
                PrintWarning("У вас не установлен магазин MoscovOVH");
                return;
            }
            plugins.Find("RustStore").CallHook("APIChangeUserBalance", userID, Balance, new Action<string>((result) =>
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (result == "SUCCESS")
                {
                    Puts($"Пользователю {userID} успешно зачислен баланс - {Balance}");
                    RemoveBalance(userID, MoneyTake);
                    if (player == null) return;
                    SendChat(lang.GetMessage("CHAT_STORE_SUCCESS", this, player.UserIDString), player);
                    return;
                }
                Puts($"Пользователь {userID} не авторизован в магазине");
                if (player == null) return;
                SendChat(lang.GetMessage("CHAT_NO_AUTH_STORE", this, player.UserIDString), player);
            }));
        }
        public void GameStoresBalanceSet(ulong userID, int Balance,int MoneyTake)
        {
            var GameStores = config.ReferenceSettings.GameStoresSettings;
            if (String.IsNullOrEmpty(GameStores.GameStoresAPIStore) || String.IsNullOrEmpty(GameStores.GameStoresIDStore))
            {
                PrintWarning("Магазин GameStores не настроен! Невозможно выдать баланс пользователю");
                return;
            }
            webrequest.Enqueue($"https://gamestores.ru/api?shop_id={GameStores.GameStoresIDStore}&secret={GameStores.GameStoresAPIStore}&action=moneys&type=plus&steam_id={userID}&amount={Balance}&mess={GameStores.GameStoresMessage}", null, (i, s) =>
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (i != 200) { }
                if (s.Contains("success"))
                {
                    Puts($"Пользователю {userID} успешно зачислен баланс - {Balance}");
                    RemoveBalance(userID, MoneyTake);
                    if (player == null) return;
                    SendChat(lang.GetMessage("CHAT_STORE_SUCCESS", this, player.UserIDString), player);
                    return;
                }
                if (s.Contains("fail"))
                {
                    Puts($"Пользователь {userID} не авторизован в магазине");
                    if (player == null) return;
                    SendChat(lang.GetMessage("CHAT_NO_AUTH_STORE", this, player.UserIDString),player);
                }
            }, this);
        }
        #endregion

        #region Configuration
        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Монетки будут и гроков на руках - false / Иначе будет чат или интерфейсе - true")]
            public bool UseUI;
            [JsonProperty("Использовать UI интерфейс для отображения баланса(true - да(Если вы не поставили , чтобы монетки были на руках))/false - информация будет в чате по команде и при входе)")]
            public bool UseUIMoney;
            [JsonProperty("Включить обмен валюты на баланс в магазине(GameStores/MoscovOVH)")]
            public bool TransferStoreUse;
            [JsonProperty("Отображение интерфейса с балансом(true - отображает/false - скрывает)")]
            public bool ShowUI;
            [JsonProperty("Настройки обмена валют на баланс в магазине")]
            public TransferSetting TransferSettings = new TransferSetting();
            [JsonProperty("Основные настройки")]
            public GeneralSettings GeneralSetting = new GeneralSettings();
            [JsonProperty("Настройки валюты(Если вид экономикик - false)")]
            public CustomMoney CustomMoneySetting = new CustomMoney();
            [JsonProperty("Настройки совместной работы с другими плагинами")]
            public ReferenceSetting ReferenceSettings = new ReferenceSetting();
            internal class CustomMoney
            {
                [JsonProperty("Название валюты")]
                public string DisplayName;
                [JsonProperty("Shortname монетки")]
                public string Shortname;
                [JsonProperty("SkinID монетки")]
                public ulong SkinID;
            }
                
            internal class GeneralSettings
            {
                [JsonProperty("Получение валюты за убийство игроков")]
                public bool BPlayerKillUse;
                [JsonProperty("Получение валюты за убийство животных")]
                public bool BPlayerAnimalUse;
                [JsonProperty("Получение валюты за убийство NPC")]
                public bool BPlayerNPCUse;
                [JsonProperty("Получение валюты за добычу ресурсов")]
                public bool BPlayerGatherUse;
                [JsonProperty("Получение валюты за уничтожение танка")]
                public bool BPlayerBradleyUse;
                [JsonProperty("Получение валюты за уничтожение вертолета")]
                public bool BPlayerHelicopterUse;
                [JsonProperty("Получение валюты за уничтожение бочек")]
                public bool BPLayerBarrelUse;
                [JsonProperty("Получение валюты проведенное время на сервере")]
                public bool BPLayerOnlineUse;
                [JsonProperty("Сколько нужно провести времени,чтобы выдали награду")]
                public int BPlayerOnlineTime;
                [JsonProperty("Сколько начислять валюты за проведенное время на сервере")]
                public int BPlayerOnlineGive;
                [JsonProperty("Настройка зачисления баланса за убийство игроков")]
                public AdvancedSetting BPlayerKillGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за убийство животных")]
                public AdvancedSetting BPlayerAnimalGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за убийство NPC")]
                public AdvancedSetting BPlayerNPCGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за уничтожение танка")]
                public AdvancedSetting BPlayerBradleyGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за уничтожение вертолета")]
                public AdvancedSetting BPlayerHelicopterGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за уничтожение бочек")]
                public AdvancedSetting BPlayerBarrelGive = new AdvancedSetting();
                [JsonProperty("Сколько начислять валюты за добычу ресурсов ( [за какой ресурс давать] = { остальная настройка }")]
                public Dictionary<string,AdvancedSetting> BPlayerGatherGive = new Dictionary<string, AdvancedSetting>();

                internal class AdvancedSetting
                {
                    [JsonProperty("Шанс получить валюту")]
                    public int Rare;
                    [JsonProperty("Сколько выдавать валюты")]
                    public int BPlayerGive;
                }
            }
            internal class TransferSetting
            {
                [JsonProperty("URL вашей монеты")]
                public string URLMoney;
                [JsonProperty("URL валюты для магазина")]
                public string URLStores;
                [JsonProperty("Сколько монет требуется для обмена")]
                public int MoneyCount;
                [JsonProperty("Сколько баланса получит игрок после обмена")]
                public int StoresMoneyCount;
            }
            internal class ReferenceSetting
            {
                [JsonProperty("Friends : Запретить получение монет за убийство друзей")]
                public bool FriendsBlockUse;
                [JsonProperty("Clans : Запретить получение монет за убийство сокланов")]
                public bool ClansBlockUse;
                [JsonProperty("Duel/Battles : Запретить получение монет за убийство на дуэлях")]
                public bool DuelBlockUse;
                [JsonProperty("MoscovOVH : Включить использование магазина(Должен быть включен обмен валют)")]
                public bool MoscovOvhUse;
                [JsonProperty("GameStores : Включить использование магазина(Должен быть включен обмен валют)")]
                public bool GameStoreshUse;
                [JsonProperty("GameStores : Настройки магазина GameStores")]
                public GameStores GameStoresSettings = new GameStores();
                [JsonProperty("IQChat : Настройки чата")]
                public ChatSetting ChatSettings = new ChatSetting();
                internal class ChatSetting
                {
                    [JsonProperty("IQChat : Кастомный префикс в чате")]
                    public string CustomPrefix;
                    [JsonProperty("IQChat : Кастомный аватар в чате(Если требуется)")]
                    public string CustomAvatar;
                    [JsonProperty("IQChat : Использовать UI уведомления")]
                    public bool UIAlertUse;
                }
                internal class GameStores
                {
                    [JsonProperty("API Магазина(GameStores)")]
                    public string GameStoresAPIStore;
                    [JsonProperty("ID Магазина(GameStores)")]
                    public string GameStoresIDStore;
                    [JsonProperty("Сообщение в магазин при выдаче баланса(GameStores)")]
                    public string GameStoresMessage;
                }
            }

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    UseUI = true,
                    ShowUI = true,
                    UseUIMoney = true,
                    TransferStoreUse = true,
                    TransferSettings = new TransferSetting
                    {
                        MoneyCount = 3,
                        StoresMoneyCount = 1,
                        URLMoney = "https://i.imgur.com/1dXVda4.png",
                        URLStores = "https://i.imgur.com/vPjkizs.png",
                    },
                    GeneralSetting = new GeneralSettings
                    {
                        BPLayerOnlineUse = true,
                        BPLayerBarrelUse = true,
                        BPlayerKillUse = true,
                        BPlayerAnimalUse = true,
                        BPlayerNPCUse = true,
                        BPlayerGatherUse = true,
                        BPlayerBradleyUse = true,
                        BPlayerHelicopterUse = true,
                        BPlayerOnlineTime = 60,
                        BPlayerOnlineGive = 5,
                        BPlayerAnimalGive = new GeneralSettings.AdvancedSetting { Rare = 53, BPlayerGive = 3 },
                        BPlayerKillGive = new GeneralSettings.AdvancedSetting { Rare = 40, BPlayerGive = 5 },
                        BPlayerNPCGive = new GeneralSettings.AdvancedSetting { Rare = 20, BPlayerGive = 2 },
                        BPlayerBradleyGive = new GeneralSettings.AdvancedSetting { Rare = 100 , BPlayerGive = 15},
                        BPlayerHelicopterGive = new GeneralSettings.AdvancedSetting { Rare = 90, BPlayerGive = 10 },
                        BPlayerBarrelGive = new GeneralSettings.AdvancedSetting { Rare = 10, BPlayerGive = 3 },
                        BPlayerGatherGive = new Dictionary<string, GeneralSettings.AdvancedSetting>
                        {
                            ["sulfur.ore"] = new GeneralSettings.AdvancedSetting
                            {
                                BPlayerGive = 10,
                                Rare = 10,
                            },
                            ["stones"] = new GeneralSettings.AdvancedSetting
                            {
                                Rare = 20,
                                BPlayerGive = 1,
                            }
                        },
                    },
                    CustomMoneySetting = new CustomMoney
                    {
                        DisplayName = "Монета удачи",
                        Shortname = "bleach",
                        SkinID = 1337228,
                    },
                    ReferenceSettings = new ReferenceSetting
                    {
                        FriendsBlockUse = true,
                        ClansBlockUse = true,
                        DuelBlockUse = true,
                        MoscovOvhUse = true,
                        GameStoreshUse = false,
                        GameStoresSettings = new ReferenceSetting.GameStores
                        {
                            GameStoresAPIStore = "",
                            GameStoresIDStore = "",
                            GameStoresMessage = "Успешный обмен"
                        },
                        ChatSettings = new ReferenceSetting.ChatSetting
                        {
                            CustomAvatar = "",
                            CustomPrefix = "",
                            UIAlertUse = true,
                        }
                    }

                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #49" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию! #33");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        #region Data
        [JsonProperty("Система экономики")] public Dictionary<ulong, InformationData> DataEconomics = new Dictionary<ulong, InformationData>();
        void ReadData() { 
            DataEconomics = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, InformationData>>("IQEconomic/DataEconomics");
        }
        void WriteData() {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQEconomic/DataEconomics", DataEconomics);
        }
        void RegisteredDataUser(ulong player)
        {
            if (!DataEconomics.ContainsKey(player))
                DataEconomics.Add(player, new InformationData { Balance = 0, Time = 0 });
        }
        public class InformationData
        {
            [JsonProperty("Баланс игрока")]
            public int Balance;
            [JsonProperty("Счетчик времени")]
            public int Time;
        }
        #endregion

        #region Command

        [ChatCommand("transfer")]
        void ChatCommandTransfer(BasePlayer player, string cmd, string[] arg)
        {
            if (player == null) return;
            if (!config.TransferStoreUse && arg.Length == 0 || arg == null)
            {
                SendChat(lang.GetMessage("TRANSFER_COMMAND_NO_ARGS", this, player.UserIDString),player);
                return;
            }
            else if(config.TransferStoreUse && arg.Length == 0 || arg == null)
            {
                Interface_Changer(player);
                return;
            }
            BasePlayer transferPlayer = FindPlayer(arg[0]);
            if (transferPlayer == null)
            {
                SendChat(lang.GetMessage("BALANCE_CUSTOM_MONEY_NOT_PLAYER", this, player.UserIDString), player);
                return;
            }
            if(transferPlayer.IsDead())
            {
                SendChat(lang.GetMessage("BALANCE_TRANSFER_TRANSFERPLAYER_DIE", this, player.UserIDString), player);
                return;
            }

            int TransferBalance = Convert.ToInt32(arg[1]);
            TransferPlayer(player.userID, transferPlayer.userID, TransferBalance);
        }
        
        [ConsoleCommand("transfer")]
        void ConsoleCommandTransfer(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            if (player == null) return;
            int Balance = GetBalance(player.userID);
            var Reference = config.ReferenceSettings;

            if (!IsTransfer(Balance)) return;
            var Transfer = config.TransferSettings;

            if (Reference.GameStoreshUse)
                GameStoresBalanceSet(player.userID, Transfer.StoresMoneyCount, Transfer.MoneyCount);

            if(Reference.MoscovOvhUse)
                MoscovOVHBalanceSet(player.userID, Transfer.StoresMoneyCount, Transfer.MoneyCount);

            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, "MY_INFO_TRANSFERS");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-130 5", OffsetMax = "60 50" },
                Text = { Text = String.Format(lang.GetMessage("UI_CHANGER_MY_INFO", this, player.UserIDString), GetBalance(player.userID) - Transfer.MoneyCount), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FadeIn = 0.3f }
            }, UI_CHANGER_PARENT, "MY_INFO_TRANSFERS");

            CuiHelper.AddUi(player, container);

        }

        //[ConsoleCommand("migration")]
        //void MigrationDataFile(ConsoleSystem.Arg args)
        //{
        //    PrintWarning("Начинаем миграцию..Ищем файл . . .");
        //    string path = $"IQEconomic/DataEconomicsOLD";
        //    var data = Interface.GetMod().DataFileSystem.GetDatafile(path);
        //    if(data == null)
        //    {
        //        PrintError("Старый файл не найден!");
        //        return;
        //    }
        //    Dictionary<ulong,int> OldStructure = new Dictionary<ulong, int>();
        //    OldStructure = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, int>>(path);
        //    PrintWarning("Считали старую структуру....");
        //    foreach(var Old in OldStructure)
        //    {
        //        if (!DataEconomics.ContainsKey(Old.Key))
        //            DataEconomics.Add(Old.Key, new InformationData { Balance = Old.Value, Time = 0 });
        //        else DataEconomics[Old.Key].Balance += Old.Value;
        //    }
        //    WriteData();
        //    PrintWarning("Миграция прошла успешно, выгрузите плагин и удалите старый файл");
        //}

        [ConsoleCommand("iq.eco")]
        void IQEconomicCommandsAdmin(ConsoleSystem.Arg arg)
        {
            switch(arg.Args[0])
            {
                case "give":
                    {
                        ulong userID = ulong.Parse(arg.Args[1]);
                        int Balance = Convert.ToInt32(arg.Args[2]);
                        SetBalance(userID, Balance);
                        Puts($"Игроку {userID} успешно зачислено {Balance} монет");
                        break;
                    }
                case "remove":
                    {
                        ulong userID = ulong.Parse(arg.Args[1]);
                        int Balance = Convert.ToInt32(arg.Args[2]);
                        RemoveBalance(userID, Balance);
                        Puts($"Игроку {userID} успешно снято {Balance} монет");
                        break;
                    }
            }
        }

        #endregion

        #region Metods
        public void TrackerTime()
        {
            foreach (var player in BasePlayer.activePlayerList)
                if (DataEconomics[player.userID].Time <= CurrentTime())
                {
                    int SetTime = Convert.ToInt32(config.GeneralSetting.BPlayerOnlineTime + CurrentTime());
                    SetBalance(player.userID, config.GeneralSetting.BPlayerOnlineGive);
                    DataEconomics[player.userID].Time = SetTime;
                }
        }

        public void ConnectedPlayer(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => ConnectedPlayer(player));
                return;
            }

            RegisteredDataUser(player.userID);

            if (config.UseUI)
                if (config.UseUIMoney)
                {
                    if (config.ShowUI)
                        Interface_Balance(player);
                }
                else SendChat(String.Format(lang.GetMessage("CHAT_MY_BALANCE", this), GetBalance(player.userID)), player);
        }
        public void TransferPlayer(ulong userID, ulong transferUserID, int Balance )
        {
            BasePlayer player = BasePlayer.FindByID(userID);
            BasePlayer transferPlayer = BasePlayer.FindByID(transferUserID);
            if (player == null) return;
            if (transferPlayer == null) return;

            if (!IsRemoveBalance(player.userID, Balance))
            {
                SendChat(lang.GetMessage("BALANCE_TRANSFER_NO_BALANCE", this, player.UserIDString), player);
                return;
            }

            RemoveBalance(player.userID, Balance);
            SetBalance(transferPlayer.userID, Balance);
            SendChat(String.Format(lang.GetMessage("BALANCE_TRANSFER_PLAYER", this, player.UserIDString), transferPlayer.displayName, Balance),player);
            SendChat(String.Format(lang.GetMessage("BALANCE_TRANSFER_TRANSFERPLAYER", this, transferPlayer.UserIDString), Balance, player.displayName),transferPlayer);
        }
        public void SetBalance(ulong userID, int SetBalance, ItemContainer cont = null)
        {
            if(!config.UseUI)
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (player == null)
                {
                    PrintWarning(lang.GetMessage("BALANCE_CUSTOM_MONEY_NOT_PLAYER",this));
                    return;
                }
                Item Money = CreateCustomMoney(SetBalance);
                ItemContainer itemContainer = cont == null ? player.inventory.containerMain : cont;

                if (player.inventory.containerMain.itemList.Count == 24)
                {
                    SendChat(lang.GetMessage("BALANCE_CUSTOM_MONEY_INVENTORY_FULL", this, player.UserIDString), player);
                    Money.Drop(player.transform.position, Vector3.zero);
                    return;
                }
                Money.MoveToContainer(itemContainer);
                SendChat(String.Format(lang.GetMessage("BALANCE_SET", this), SetBalance), player);
            }
            else
            {
                if (IsData(userID))
                {
                    DataEconomics[userID].Balance += SetBalance;
                    BasePlayer player = BasePlayer.FindByID(userID);
                    if (player == null) return;
                    SendChat(String.Format(lang.GetMessage("BALANCE_SET", this), SetBalance), player);
                    if (config.ShowUI)
                        Interface_Balance(player);
                }
                else RegisteredDataUser(userID);
                WriteData();
            }
            Interface.Oxide.CallHook("SET_BALANCE_USER", userID, SetBalance);
        }
        public void RemoveBalance(ulong userID, int RemoveBalance)
        {
            if (!config.UseUI)
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (player == null)
                {
                    PrintWarning(lang.GetMessage("BALANCE_CUSTOM_MONEY_NOT_PLAYER", this));
                    return;
                }
                if(!IsRemoveBalance(userID,RemoveBalance))
                {
                    PrintWarning(lang.GetMessage("BALANCE_CUSTOM_MONEY_NO_COUNT_TAKE", this));
                    return;
                }
                player.inventory.Take(null, ItemManager.FindItemDefinition(config.CustomMoneySetting.Shortname).itemid, RemoveBalance);
            }
            else
            {
                if (IsData(userID))
                {
                    DataEconomics[userID].Balance -= RemoveBalance;
                    BasePlayer player = BasePlayer.FindByID(userID);
                    if (player == null) return;
                    if (config.ShowUI)
                        Interface_Balance(player);
                }
                else RegisteredDataUser(userID);
                WriteData();
            }
        }

        #region ReturnMetods

        public bool IsRare(int Rare)
        {
            if (Rare >= UnityEngine.Random.Range(0, 100))
                return true;
            else return false;
        }
        public bool IsData(ulong userID)
        {
            if (DataEconomics.ContainsKey(userID))
                return true;
            else return false;
        }
        public int GetBalance(ulong userID)
        {
            if (config.UseUI)
            {
                if (IsData(userID))
                    return DataEconomics[userID].Balance;
                else return 0;
            }
            else
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (player == null)
                {
                    PrintWarning(lang.GetMessage("BALANCE_CUSTOM_MONEY_NOT_PLAYER", this));
                    return 0;
                }
                var PMoney = player.inventory.GetAmount(ItemManager.FindItemDefinition(config.CustomMoneySetting.Shortname).itemid);
                return PMoney;
            }
        }
        Item CreateCustomMoney(int Amount)
        {
            var CustomMoney = config.CustomMoneySetting;
            Item Money = ItemManager.CreateByName(CustomMoney.Shortname, Amount, CustomMoney.SkinID);
            Money.name = CustomMoney.DisplayName;
            return Money;
        }

        public bool IsRemoveBalance(ulong userID,int Amount)
        {
            if (GetBalance(userID) >= Amount)
                return true;
            else return false;
        }

        private BasePlayer FindPlayer(string nameOrId)
        {
            foreach (var check in BasePlayer.activePlayerList)
            {
                if (check.displayName.ToLower().Contains(nameOrId.ToLower()) || check.userID.ToString() == nameOrId)
                    return check;
            }

            return null;
        }

        public bool IsTransfer(int Balance)
        {
            var TransferCurse = config.TransferSettings;

            if (Balance <= 0) 
                return false;
            if (Balance >= TransferCurse.MoneyCount) 
                return true;
            else
                return false;
        }
        #endregion

        #endregion

        #region Hooks
        void Unload()
        {
            WriteData();
            foreach(BasePlayer player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, UI_BALANCE_PARENT);
                CuiHelper.DestroyUi(player, UI_CHANGER_PARENT);
            }
        }
        private void OnServerInitialized()
        {
            ReadData();
            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
            WriteData();
            AddAllImage();
            if (config.GeneralSetting.BPLayerOnlineUse)
                timer.Every(120f, () => TrackerTime());
        }
        void OnPlayerConnected(BasePlayer player) => ConnectedPlayer(player);
        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null) return;
            if (player == null) return;
            if (item == null) return;
            var General = config.GeneralSetting;
            if (!General.BPlayerGatherUse) return;
            var GatherGeneral = config.GeneralSetting.BPlayerGatherGive;
            if (!GatherGeneral.ContainsKey(item.info.shortname)) return;
            var Gather = GatherGeneral[item.info.shortname];
            if (!IsRare(Gather.Rare)) return;

            SetBalance(player.userID, Gather.BPlayerGive);
        }
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;
            BasePlayer player = info.InitiatorPlayer;
            if (info.InitiatorPlayer != null)
                player = info.InitiatorPlayer;
            else if (entity.GetComponent<BaseHelicopter>() != null)
                player = BasePlayer.FindByID(GetLastAttacker(entity.net.ID));
            if (player == null) return;

            var General = config.GeneralSetting;
            var ReferenceGeneral = config.ReferenceSettings;

            if ((bool)(entity as NPCPlayer) || (bool)(entity as NPCMurderer))
                if (General.BPlayerNPCUse)
                {
                    var Setting = General.BPlayerNPCGive;
                    if (!IsRare(Setting.Rare)) return;
                    SetBalance(player.userID, Setting.BPlayerGive);
                }
            if ((bool)(entity as BasePlayer))
            {
                if ((bool)(entity as NPCPlayer) || (bool)(entity as NPCMurderer)) return;

                BasePlayer targetPlayer = entity.ToPlayer();
                if (targetPlayer == null) return;
                if (targetPlayer.userID != player.userID)
                    if (General.BPlayerKillUse)
                    {
                        if (ReferenceGeneral.FriendsBlockUse)
                            if (IsFriends(player.userID, targetPlayer.userID)) return;
                        if (ReferenceGeneral.ClansBlockUse)
                            if (IsClans(player.userID, targetPlayer.userID)) return;
                        if (ReferenceGeneral.DuelBlockUse)
                            if (IsDuel(player.userID)) return;

                        var Setting = General.BPlayerKillGive;
                        if (!IsRare(Setting.Rare)) return;
                        SetBalance(player.userID, Setting.BPlayerGive);
                    }
            }
            if ((bool)(entity as BaseAnimalNPC))
                if (General.BPlayerAnimalUse)
                {
                    var Setting = General.BPlayerAnimalGive;
                    if (!IsRare(Setting.Rare)) return;
                    SetBalance(player.userID, Setting.BPlayerGive);
                }
            if ((bool)(entity as BaseHelicopter))
                if (General.BPlayerHelicopterUse)
                {
                    var Setting = General.BPlayerHelicopterGive;
                    if (!IsRare(Setting.Rare)) return;
                    SetBalance(player.userID, Setting.BPlayerGive);
                }
            if ((bool)(entity as BradleyAPC))
                if (General.BPlayerBradleyUse)
                {
                    var Setting = General.BPlayerBradleyGive;
                    if (!IsRare(Setting.Rare)) return;
                    SetBalance(player.userID, Setting.BPlayerGive);
                }
            if(entity.PrefabName.Contains("barrel"))
                if(General.BPLayerBarrelUse)
                {
                    var Setting = General.BPlayerBarrelGive;
                    if (!IsRare(Setting.Rare)) return;
                    SetBalance(player.userID, Setting.BPlayerGive);
                }
        }

        private Dictionary<uint, Dictionary<ulong, int>> HeliAttackers = new Dictionary<uint, Dictionary<ulong, int>>();
        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            if (victim.GetComponent<BaseHelicopter>() != null && info?.Initiator?.ToPlayer() != null)
            {
                var heli = victim.GetComponent<BaseHelicopter>();
                var player = info.Initiator.ToPlayer();
                NextTick(() =>
                {
                    if (heli == null) return;
                    if (!HeliAttackers.ContainsKey(heli.net.ID))
                        HeliAttackers.Add(heli.net.ID, new Dictionary<ulong, int>());
                    if (!HeliAttackers[heli.net.ID].ContainsKey(player.userID))
                        HeliAttackers[heli.net.ID].Add(player.userID, 0);
                    HeliAttackers[heli.net.ID][player.userID]++;
                });
            }
        }

        private ulong GetLastAttacker(uint id)
        {
            int hits = 0;
            ulong majorityPlayer = 0U;
            if (HeliAttackers.ContainsKey(id))
            {
                foreach (var score in HeliAttackers[id])
                {
                    if (score.Value > hits)
                        majorityPlayer = score.Key;
                }
            }
            return majorityPlayer;
        }

        #region HelpHooks
        private Item OnItemSplit(Item item, int amount)
        {
            if (plugins.Find("Stacks") || plugins.Find("CustomSkinsStacksFix") || plugins.Find("SkinBox")) return null; 
            var CustomMoney = config.CustomMoneySetting;
            if (CustomMoney.SkinID == 0) return null;
            if (item.skin == CustomMoney.SkinID)
            {
                Item x = ItemManager.CreateByPartialName(CustomMoney.Shortname, amount);
                x.name = CustomMoney.DisplayName;
                x.skin = CustomMoney.SkinID;
                x.amount = amount;
                item.amount -= amount;
                return x;
            }
            return null;
        }
        object CanCombineDroppedItem(DroppedItem item, DroppedItem targetItem)
        {
            if (item.GetItem().skin != targetItem.GetItem().skin) return false;

            return null;
        }
        object CanStackItem(Item item, Item targetItem)
        {
            if (item.skin != targetItem.skin) return false;

            return null;
        }
        #endregion

        #endregion

        #region Interface

        public static string UI_BALANCE_PARENT = "BALANCE_PLAYER_PARENT";
        public static string UI_CHANGER_PARENT = "CHANGER_PLAYER_PARENT";
        public void Interface_Balance(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, UI_BALANCE_PARENT);

            var Balance = GetBalance(player.userID);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"1 0", AnchorMax = $"1 0", OffsetMin = "-390 15", OffsetMax = "-212 42" },
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#FFFFFF05"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, "Hud", UI_BALANCE_PARENT);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.01932367 0.04938272", AnchorMax = $"0.15415406 0.9382406" },
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#b1b1b1"), Sprite = "assets/icons/connection.png" }
            }, UI_BALANCE_PARENT);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.1835208 0.1358024", AnchorMax = $"0.9625472 0.8518519" },
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#CCD045FF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, UI_BALANCE_PARENT);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.22 0", AnchorMax = "1 1" },
                Text = { Text = String.Format(lang.GetMessage("UI_MY_BALANCE", this), Balance), Color = HexToRustFormat("#FEFFDDFF"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleLeft, FadeIn = 0.3f }
            }, UI_BALANCE_PARENT); 

            CuiHelper.AddUi(player, container); 
        }

        public void Interface_Changer(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, UI_CHANGER_PARENT);
            var Balance = GetBalance(player.userID);
            var Transfer = config.TransferSettings;

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.5 0.5", AnchorMax = $"0.5 0.5", OffsetMin = "-150 -280", OffsetMax = "20 -230" },
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#292A2140"), Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", UI_CHANGER_PARENT);

            container.Add(new CuiButton
            {
                FadeOut = 0.2f,
                RectTransform = { AnchorMin = $"1 1", AnchorMax = $"1 1", OffsetMin = "2 -50", OffsetMax = "161 0" },
                Button = { Command = $"transfer", Color = HexToRustFormat("#89b63b"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                Text = { Text = lang.GetMessage("UI_CHANGER_TRANSFER", this, player.UserIDString), Color = HexToRustFormat("#d7eba8"), Align = TextAnchor.MiddleCenter }
            },  UI_CHANGER_PARENT);

            container.Add(new CuiButton
            {
                FadeOut = 0.2f,
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0 0", OffsetMin = "-50 0", OffsetMax = "-2 50" },
                Button = { Close = UI_CHANGER_PARENT, Color = HexToRustFormat("#b03825"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                Text = { Text = "<b>✖</b>", Color = HexToRustFormat("#c8a097"),FontSize = 30, Align = TextAnchor.MiddleCenter }
            }, UI_CHANGER_PARENT);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-130 5", OffsetMax = "60 50" },
                Text = { Text = String.Format(lang.GetMessage("UI_CHANGER_MY_INFO", this,player.UserIDString),Balance), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FadeIn = 0.3f }
            }, UI_CHANGER_PARENT,"MY_INFO_TRANSFERS");

            #region TransferInterface

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.01866667 0.06666667", AnchorMax = $"0.2696471 0.92" },
                Image = { Color = HexToRustFormat("#8A847E3D"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, UI_CHANGER_PARENT, "MY_MONEY");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.7351995 0.06666667", AnchorMax = $"0.9861803 0.92" },
                Image = { Color = HexToRustFormat("#8A847E3D"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, UI_CHANGER_PARENT, "TRANSFER_MONEY");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.2151515 0.1200001", AnchorMax = "0.7757577 0.8800001" },
                Text = { Text = $"<b>{Transfer.MoneyCount} > {Transfer.StoresMoneyCount} </b>", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, FadeIn = 0.3f }
            },  UI_CHANGER_PARENT);

            container.Add(new CuiElement
            {
                Parent = "MY_MONEY",
                Components =
                        {
                        new CuiRawImageComponent { Png = GetImage("URLMoney") },
                        new CuiRectTransformComponent{  AnchorMin = $"0.125 0.125", AnchorMax = $"0.875 0.875" },
                        }
            });

            container.Add(new CuiElement
            {
                Parent = "TRANSFER_MONEY",
                Components =
                        {
                        new CuiRawImageComponent { Png = GetImage("URLStores") },
                        new CuiRectTransformComponent{  AnchorMin = $"0.125 0.125", AnchorMax = $"0.875 0.875" },
                        }
            });

            #endregion

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Lang
        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MY_BALANCE"] = "<b><size=12>Balance : {0}</size></b>",

                ["CHAT_MY_BALANCE"] = "Your Balance : <color=yellow>{0}</color>",
                ["BALANCE_CUSTOM_MONEY_NOT_PLAYER"] = "Player not found",
                ["BALANCE_CUSTOM_MONEY_INVENTORY_FULL"] = "Your inventory is full, coins fell to the floor",

                ["BALANCE_SET"] = "You have successfully received : {0} money",
                ["BALANCE_TRANSFER_NO_BALANCE"] = "You do not have so many coins to transfer",
                ["BALANCE_TRANSFER_PLAYER"] = "You have successfully submitted {0} {1} money",
                ["BALANCE_TRANSFER_TRANSFERPLAYER"] = "You have successfully received {0} money from {1}",
                ["BALANCE_CUSTOM_MONEY_NO_COUNT_TAKE"] = "The player does not have as many coins available",
                ["BALANCE_TRANSFER_TRANSFERPLAYER_DIE"] = "The player is dead, you can’t give him coins",

                ["TRANSFER_COMMAND_NO_ARGS"] = "Invalid Command\nEnter the correct transfer command transfer [Nick] [Amount Money]",

                ["UI_CHANGER_TRANSFER"] = "<b><size=20>TRANSFER</size>  </b>",
                ["UI_CHANGER_MY_INFO"] = "<b><size=16>TRANSFERS\nYour Balance : {0}</size></b>",

                ["CHAT_NO_AUTH_STORE"] = "You no auth stores",
                ["CHAT_STORE_SUCCESS"] = "You succes transfers",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_MY_BALANCE"] = "<b><size=12>Ваш баланс : {0}</size></b>",

                ["CHAT_MY_BALANCE"] = "Ваш баланс на данный момент : <color=yellow>{0}</color>",

                ["BALANCE_SET"] = "Вы успешно получили : {0} монет",
                ["BALANCE_CUSTOM_MONEY_NOT_PLAYER"] = "Такого игрока нет",
                ["BALANCE_CUSTOM_MONEY_INVENTORY_FULL"] = "Ваш инвентарь полон, монеты выпали на пол",
                ["BALANCE_CUSTOM_MONEY_NO_COUNT_TAKE"] = "У игрока нет столько монет в наличии",

                ["BALANCE_TRANSFER_NO_BALANCE"] = "У вас нет столько монет для передачи",
                ["BALANCE_TRANSFER_PLAYER"] = "Вы успешно передали {0} {1} монет(ы)",
                ["BALANCE_TRANSFER_TRANSFERPLAYER"] = "Вы успешно получили {0} монет(ы) от {1}",
                ["BALANCE_TRANSFER_TRANSFERPLAYER_DIE"] = "Игрок мертв,вы не можете передать ему монеты",

                ["TRANSFER_COMMAND_NO_ARGS"] = "Неверная команда\nВведите корректную команду transfer [Ник] [Количество монет]",

                ["UI_CHANGER_TRANSFER"] = "<b><size=20>ОБМЕНЯТЬ</size></b>",
                ["UI_CHANGER_MY_INFO"] = "<b><size=16>ОБМЕННИК\nВАШ БАЛАНС : {0}</size></b>",

                ["CHAT_NO_AUTH_STORE"] = "Вы не аваторизованы в магазине",
                ["CHAT_STORE_SUCCESS"] = "Вы успешно обменяли валюту",
            }, this, "ru");
            PrintWarning("Языковой файл загружен успешно");
        }
        #endregion

        #region Helps
        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0);
        static double CurrentTime() => DateTime.UtcNow.Subtract(epoch).TotalSeconds;
        #endregion

        #region API
        bool API_IS_USER(ulong userID) => IsData(userID);
        bool API_IS_REMOVED_BALANCE(ulong userID, int Amount) => IsRemoveBalance(userID, Amount);
        int API_GET_BALANCE(ulong userID) => GetBalance(userID);
        Item API_GET_ITEM(int Amount) => CreateCustomMoney(Amount);
        string API_GET_MONEY_IL() { return "URLMoney"; }
        string API_GET_STORES_IL() { return "URLStores"; }
        void API_SET_BALANCE(ulong userID, int Balance, ItemContainer itemContainer = null)
        {
            SetBalance(userID, Balance, itemContainer);
            Puts("Успешно зачислен баланс");
        }
        void API_REMOVE_BALANCE(ulong userID, int Balance)
        {
            RemoveBalance(userID, Balance);
            Puts("Успешно списан баланс");
        }
        void API_TRANSFERS(ulong userID, ulong trasferUserID, int Balance) => TransferPlayer(userID, trasferUserID, Balance);
        bool API_MONEY_TYPE()
        {
            if (!config.UseUI)
                return true;
            else return false;
        }
        #endregion
    }
}


// --- End of file: IQEconomic.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ColliderCount.cs ---
// --- Original Local Path: ColliderCount.cs ---

using System;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Collider Count", "Cheeze www.ukwasteland.co.uk", "0.0.3", ResourceId = 1306)]
    class ColliderCount : RustPlugin
    {

        private const string ChatPrefix = "Server Status";
        private const string ChatPrefixColor = "#ffa500ff";

        private readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0);
        private DateTime wipeDate;

        IFormatProvider culture = new System.Globalization.CultureInfo("en-GB", true);

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file.");
            Config.Clear();
            Config["Settings", "LastWipe"] = "17.8.2015";
            Config["Settings", "MaxColliders"] = 270000;
            Config["Settings", "Color1"] = "<color=#ff0000ff>";
            Config["Settings", "Color2"] = "<color=#008000ff>";
            SaveConfig();
        }
        void Loaded()
        {
            var date = Config["Settings", "LastWipe"].ToString();
            wipeDate = DateTime.Parse(date, culture, System.Globalization.DateTimeStyles.AssumeLocal);
        }

        [ChatCommand("wipeinfo")]
        private void WipeInfoChat(BasePlayer player, string command, string[] args)
        {
            SendMessage(player, $"{GetColor1()}There are currently</color>{GetColor2()} {GetColliderCount()}</color> {GetColor1()}colliders on the server out of a max of</color>{GetColor2()} {GetMaxColliders()}</color>");
            SendMessage(player, GetTimeToWipe());
        }

        [ConsoleCommand("wipeinfo")]
        private void WipeInfoConsole(ConsoleSystem.Arg arg)
        {
            if (arg.Player() != null && !arg.Player().IsAdmin())
            {
                string NotAllowed = null;
                arg.ReplyWith(NotAllowed);
                return;
            }
            PrintToChat($"{GetColor1()}There are currently</color>{GetColor2()} {GetColliderCount()}</color> {GetColor1()}colliders on the server out of a max of</color>{GetColor2()} {GetMaxColliders()}</color>");
            PrintToChat(GetTimeToWipe());
        }

        private int GetColliderCount()
        {
            var colliders = UnityEngine.Object.FindObjectsOfType<Collider>().Count(x => x.enabled);
            return colliders;
        }

        
        private int GetMaxColliders()
        {
            var maxColliders = int.Parse(Config["Settings", "MaxColliders"].ToString());
            return maxColliders;
        }

        private string GetColor1()
        {   
           string color1 = (Config["Settings", "Color1"].ToString());
           return color1;        
        }

        private string GetColor2()
        {
            string color2 = (Config["Settings", "Color2"].ToString());
            return color2;
        }

        private string GetTimeToWipe()
        {
            var days = (int)Math.Floor((DateTime.UtcNow - wipeDate).TotalDays);
            if (days > 0)
            {
                var mapSize = TerrainMeta.Size.x;
                var initialColliders = (int)(((mapSize * mapSize) / 1000000) * 1500);
                var colliders = UnityEngine.Object.FindObjectsOfType<Collider>().Count(x => x.enabled);
                var postEnts = (colliders - initialColliders);
                var entsDaily = (postEnts / days);
                var maxColliders = int.Parse(Config["Settings", "MaxColliders"].ToString());
                var timetowipe = (maxColliders - colliders) / entsDaily;
                var wipeDays = $"{GetColor1()}We estimate needing to wipe in </color>{GetColor2()}" + timetowipe + $"</color> {GetColor1()}days!</color>";
                return wipeDays;
            }

            var nodays = $"{GetColor1()}We only just recently wiped and cannot estimate next wipe yet!</color>";
            return nodays;
        }

        private static void SendMessage(BasePlayer player, string message, params object[] args) => player?.SendConsoleCommand("chat.add", -1, string.Format($"<color={ChatPrefixColor}>{ChatPrefix}</color>: {message}", args), 1.0);

        private long GetTimestamp(DateTime date) => Convert.ToInt64(date.Subtract(epoch).TotalSeconds);
    }
}

// --- End of file: ColliderCount.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SoFriends.cs ---
// --- Original Local Path: SoFriends.cs ---

﻿﻿﻿using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System;
 using Facepunch.Extend;
  using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
  using ProtoBuf;
  using UnityEngine;
 using Pool = Facepunch.Pool;

 namespace Oxide.Plugins
{
    [Info("SoFriends", "https://topplugin.ru/", "1.1.2")]
    public class SoFriends : RustPlugin
    {
        #region [DATA&CONFIG]

        private Dictionary<ulong, FriendData> friendData = new Dictionary<ulong, FriendData>();
        private Dictionary<ulong, ulong> playerAccept = new Dictionary<ulong, ulong>();
        private static Configs cfg { get; set; }

        private class FriendData
        {
            [JsonProperty("Ник")] public string Name;

            [JsonProperty("Список друзей")]
            public Dictionary<ulong, FriendAcces> friendList = new Dictionary<ulong, FriendAcces>();

            public class FriendAcces
            {
                [JsonProperty("Ник")] public string name;
                [JsonProperty("Урон по человеку")] public bool Damage;

                [JsonProperty("Авторизациия в турелях")]
                public bool Turret;

                [JsonProperty("Авторизациия в дверях")]
                public bool Door;

                [JsonProperty("Авторизациия в пво")] public bool Sam;
                
                [JsonProperty("Авторизациия в шкафу")] public bool bp;
            }
        }

        private class Configs
        {
            [JsonProperty("Включить настройку авто авторизации турелей?")]
            public bool Turret;

            [JsonProperty("Включить настройку урона по своим?")]
            public bool Damage;

            [JsonProperty("Включить настройку авто авторизации в дверях?")]
            public bool Door;

            [JsonProperty("Включить настройку авто авторизации в пво?")]
            public bool Sam;
            
            [JsonProperty("Включить настройку авто авторизации в шкафу?")]
            public bool build;
            
            [JsonProperty("Сколько максимум людей может быть в друзьях?")]
            public int MaxFriends;

            [JsonProperty("Урон по человеку(По стандрату у игрока включена?)")]
            public bool SDamage;

            [JsonProperty("Авторизациия в турелях(По стандрату у игрока включена?)")]
            public bool STurret;

            [JsonProperty("Авторизациия в дверях(По стандрату у игрока включена?)")]
            public bool SDoor;

            [JsonProperty("Авторизациия в пво(По стандрату у игрока включена?)")]
            public bool SSam;
            
            [JsonProperty("Авторизациия в шкафу(По стандрату у игрока включена?)")]
            public bool bp;
            
            [JsonProperty("Время ожидания  ответа на запроса в секнудах")]
            public int otvet;

            [JsonProperty("Вообще включать пво настройку?")]
            public bool SSamOn; 

            public static Configs GetNewConf()
            {
                var newconfig = new Configs();
                newconfig.Damage = true;
                newconfig.Door = true;
                newconfig.build = true;
                newconfig.Turret = true;
                newconfig.Sam = true;
                newconfig.MaxFriends = 5;
                newconfig.SDamage = false;
                newconfig.SDoor = true;
                newconfig.STurret = true;
                newconfig.SSam = true;
                newconfig.SSamOn = true;
                newconfig.otvet = 10;
                return newconfig;
            }
        }

        protected override void LoadDefaultConfig() => cfg = Configs.GetNewConf();
        protected override void SaveConfig() => Config.WriteObject(cfg);

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                cfg = Config.ReadObject<Configs>();
            }
            catch
            {
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }
        protected override void LoadDefaultMessages()
         {
             var ru = new Dictionary<string, string>();
             foreach (var rus in new Dictionary<string, string>()
             {
                 ["SYNTAX"] = "/fmenu - Открыть меню друзей\n/f(riend) add - Добавить в друзья\n/f(riend) remove - Удалить из друзей\n/f(riend) list - Список друзей\n/f(riend) team - Пригласить в тиму всех друзей онлайн\n/f(riend) set - Настройка друзей по отдельности\n/f(riend) setall - Настройка друзей всех сразу",
                 ["NPLAYER"] = "Игрок не найден!",
                 ["CANTADDME"] = "Нельзя добавить себя в друзья!",
                 ["ONFRIENDS"] = "Игрок уже у вас в друзьях!",
                 ["MAXFRIENDSPLAYERS"] = "У игрока максимальное кол-во друзей!",
                 ["MAXFRIENDYOU"] = "У вас максимальное кол-во друзей!",
                 ["HAVEINVITE"] = "Игрок уже имеет запрос в друзья!",
                 ["SENDADD"] = "Вы отправили запрос, ждем ответа!",
                 ["YOUHAVEINVITE"] = "Вам пришел запрос в друзья напишите /f(riend) accept",
                 ["TIMELEFT"] = "Вы не ответили на запрос!",
                 ["HETIMELEFT"] = "Вам не ответили на запрос!",
                 ["DONTHAVE"] = "У вас нет запросов!",
                 ["ADDFRIEND"] = "Успешное добавление в друзья!",
                 ["DENYADD"] = "Отклонение запроса в друзья!",
                 ["PLAYERDHAVE"] = "У тебя нету такого игрока в друзьях!",
                 ["REMOVEFRIEND"] = "Успешное удаление из друзей!",
                 ["LIST"] = "Список пуст!",
                 ["LIST2"] = "Список друзей",
                 ["SYNTAXSET"] = "/f(riend) set damage [Name] - Урон по человеку\n/f(riend) set door [NAME] - Авторизация в дверях для человека\n/f(riend) set turret [NAME] - Авторизация в турелях для человека\n/f(riend) set sam [NAME] - Авторизация в пво для человека",
                 ["SETOFF"] = "Настройка отключена",
                 ["DAMAGEOFF"] = "Урон по игроку {0} выключен!",
                 ["DAMAGEON"] = "Урон по игроку {0} включен!",
                 ["AUTHDOORON"] = "Авторизация в дверях для {0} включена!",
                 ["AUTHDOOROFF"] = "Авторизация в дверях для {0} выключена!",
                 ["AUTHTURRETON"] = "Авторизация в терелях для {0} включена!",
                 ["AUTHTURRETOFF"] = "Авторизация в терелях для {0} выключена!",
                 ["AUTHBUILDON"] = "Авторизация в шкафу для {0} включена!",
                 ["AUTHBUILDOFF"] = "Авторизация в шкафу для {0} выключена!",
                 ["AUTHSAMON"] = "Авторизация в ПВО для {0} включена!",
                 ["AUTHSAMOFF"] = "Авторизация в ПВО для {0} выключена!",
                 ["SYNTAXSETALL"] = "/f(riend) setall damage 0/1 - Урон по всех друзей\n/f(riend) setall door 0/1 - Авторизация в дверях для всех друзей\n/f(riend) setall turret 0/1 - Авторизация в турелях для всех друзей\n/f(riend) setall sam 0/1 - Авторизация в пво для всех друзей",
                 ["DAMAGEOFFALL"] = "Урон по всем друзьям выключен!",
                 ["DAMAGEONALL"] = "Урон по всем друзьям включен!",
                 ["AUTHDOORONALL"] = "Авторизация в дверях для всех друзей включена!",
                 ["AUTHDOOROFFALL"] = "Авторизация в дверях для всех друзей выключена!",
                 ["AUTHBUILDONALL"] = "Авторизация в шкафу для всех друзей включена!",
                 ["AUTHBUILDOFFALL"] = "Авторизация в шкафу для всех друзей выключена!",
                 ["AUTHTURRETONALL"] = "Авторизация в терелях для всех друзей включена!",
                 ["AUTHTURRETOFFALL"] = "Авторизация в терелях для всех друзей выключена!",
                 ["AUTHSAMONALL"] = "Авторизация в ПВО для всех друзей включена!",
                 ["AUTHSAMOFFALL"] = "Авторизация в ПВО для всех друзей выключена!",
                 ["SENDINVITETEAM"] = "Приглашение отправлено: ",
                 ["SENDINVITE"] = "Вам пришло приглашение в команду от",
                 ["DAMAGE"] = "Нельзя аттаковать {0} это ваш друг!",
             }) ru.Add(rus.Key, rus.Value);
             lang.RegisterMessages(ru, this, "ru");
             lang.RegisterMessages(ru, this, "en");
         }
        #endregion

        #region [Func]

        private string PlugName = "<color=red>[SOFRIEND]</color> ";

        [ChatCommand("f")]
        private void FriendCmd(BasePlayer player, string command, string[] arg)
        {
            ulong ss;
            FriendData player1;
            FriendData targetPlayer;
            if (!friendData.TryGetValue(player.userID, out player1)) return;
            if (arg.Length < 1)
            {
                SendReply(player,
                    $"<size=22>{PlugName}</size>\n{lang.GetMessage("SYNTAX", this, player.UserIDString)}");
                return;
            }

            switch (arg[0])
            {
                case "add":
                    if (arg.Length < 2)
                    {
                        SendReply(player, $"{PlugName}/f(riend) add [NAME or SteamID]");
                        return;
                    }

                    var argLists = arg.ToList();
                    argLists.RemoveRange(0, 1);
                    var name = string.Join(" ", argLists.ToArray()).ToLower();
                    var target = BasePlayer.Find(name);
                    if (target == null || !friendData.TryGetValue(target.userID, out targetPlayer))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("NPLAYER", this, player.UserIDString)}");
                        return;
                    }
                    
                    if (target.userID == player.userID)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("CANTADDME", this, player.UserIDString)}");
                        return;
                    }
                    
                    if (player1.friendList.Count >= cfg.MaxFriends)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("MAXFRIENDYOU", this, player.UserIDString)}");
                        return;
                    }
                     
                    if (player1.friendList.ContainsKey(target.userID))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("ONFRIENDS", this, player.UserIDString)}");
                        return;
                    }
                    
                    if (targetPlayer.friendList.Count >= cfg.MaxFriends)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("MAXFRIENDSPLAYERS", this, player.UserIDString)}");
                        return;
                    }
                    
                    if (playerAccept.ContainsKey(target.userID))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("HAVEINVITE", this, player.UserIDString)}");
                        return;
                    }

                    playerAccept.Add(target.userID, player.userID);
                    SendReply(player, $"{PlugName}{lang.GetMessage("SENDADD", this, player.UserIDString)}");
                    SendReply(target, $"{PlugName}{lang.GetMessage("YOUHAVEINVITE", this, target.UserIDString)}");
                    InivteStart(player, target);
                    ss = target.userID;
                    timer.Once(cfg.otvet, () =>
                    {
                        if (!playerAccept.ContainsKey(target.userID) || !playerAccept.ContainsValue(player.userID)) return;
                        if (target != null)
                        {
                            CuiHelper.DestroyUi(target, LayerInvite);
                            SendReply(target, $"{PlugName}{lang.GetMessage("TIMELEFT", this, target.UserIDString)}");
                        }
                        
                        SendReply(player, $"{PlugName}{lang.GetMessage("HETIMELEFT", this, player.UserIDString)}");
                        playerAccept.Remove(ss);
                    });
                    break;
                case "accept":

                    if (!playerAccept.TryGetValue(player.userID, out ss))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("DONTHAVE", this, player.UserIDString)}");
                        return;
                    }

                    if (!friendData.TryGetValue(ss, out targetPlayer))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("NPLAYER", this, player.UserIDString)}");
                        return;
                    }

                    if (player1.friendList.Count >= cfg.MaxFriends)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("MAXFRIENDYOU", this, player.UserIDString)}");
                        return;
                    }

                    if (targetPlayer.friendList.Count >= cfg.MaxFriends)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("MAXFRIENDSPLAYERS", this, player.UserIDString)}!");
                        return;
                    }

                    target = BasePlayer.FindByID(ss);
                    player1.friendList.Add(target.userID,
                        new FriendData.FriendAcces()
                        {
                            name = target.displayName, Damage = cfg.SDamage, Door = cfg.SDoor, Turret = cfg.STurret,
                            Sam = cfg.SSam, bp = cfg.bp
                        });
                    targetPlayer.friendList.Add(player.userID,
                        new FriendData.FriendAcces()
                        {
                            name = player.displayName, Damage = cfg.SDamage, Door = cfg.SDoor, Turret = cfg.STurret,
                            Sam = cfg.SSam, bp = cfg.bp
                        });
                    SendReply(player, $"{PlugName}{lang.GetMessage("ADDFRIEND", this, player.UserIDString)}");
                    playerAccept.Remove(player.userID);
                    SendReply(target, $"{PlugName}{lang.GetMessage("ADDFRIEND", this, target.UserIDString)}");
                    if(cfg.bp) AuthBuild(target, player.userID);
                    CuiHelper.DestroyUi(player, LayerInvite);
                    break;
                case "deny":
                    if (!playerAccept.TryGetValue(player.userID, out ss))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("DONTHAVE", this, player.UserIDString)}");
                        return;
                    }

                    if (!friendData.TryGetValue(ss, out targetPlayer))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("NPLAYER", this, player.UserIDString)}");
                        return;
                    }

                    target = BasePlayer.FindByID(ss);
                    playerAccept.Remove(player.userID);
                    SendReply(player, $"{PlugName}{lang.GetMessage("DENYADD", this, player.UserIDString)}");
                    SendReply(target, $"{PlugName}{lang.GetMessage("DENYADD", this, target.UserIDString)}");
                    CuiHelper.DestroyUi(player, LayerInvite);
                    break;
                case "remove":
                    if (arg.Length < 2)
                    {
                        SendReply(player, $"{PlugName}/f(riend) remove [NAME or SteamID]");
                        return;
                    }

                    argLists = arg.ToList();
                    argLists.RemoveRange(0, 1);
                    name = string.Join(" ", argLists.ToArray()).ToLower();
                    ulong tt;
                    if (ulong.TryParse(arg[1], out tt)) { }else tt = player1.friendList.FirstOrDefault(p => p.Value.name.ToLower().Contains(name)).Key;

                    if (!player1.friendList.ContainsKey(tt))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("PLAYERDHAVE", this, player.UserIDString)}");
                        return;
                    }

                    if (!friendData.TryGetValue(tt, out targetPlayer))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("NPLAYER", this, player.UserIDString)}");
                        return;
                    }

                    player1.friendList.Remove(tt);
                    targetPlayer.friendList.Remove(player.userID);
                    SendReply(player, $"{PlugName}{lang.GetMessage("REMOVEFRIEND", this, player.UserIDString)}");
                    target = tt.IsSteamId() ? BasePlayer.FindByID(tt) : BasePlayer.Find(arg[1].ToLower());
                    if (target != null)
                        SendReply(target, $"{PlugName}{lang.GetMessage("REMOVEFRIEND", this, player.UserIDString)}");
                    break;
                case "list":
                    if (player1.friendList.Count < 1)
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("LIST", this, player.UserIDString)}");
                        return;
                    }
                    
                    var argList = player1.friendList;
                    var friendlist = $"{PlugName}{lang.GetMessage("LIST2", this, player.UserIDString)}\n";
                    foreach (var keyValuePair in argList)
                        friendlist += keyValuePair.Value.name + $"({keyValuePair.Key})\n";
                    SendReply(player, friendlist);
                    break;
                case "set":
                    if (arg.Length < 3)
                    {
                        SendReply(player, $"<size=22>{PlugName}</size>\n{lang.GetMessage("SYNTAXSET", this, player.UserIDString)}");
                        return;
                    }

                    argLists = arg.ToList();
                    argLists.RemoveRange(0, 2);
                    name = string.Join(" ", argLists.ToArray()).ToLower();
                    FriendData.FriendAcces access;
                    if (ulong.TryParse(arg[2], out ss)) {}else ss = player1.friendList.FirstOrDefault(p => p.Value.name.ToLower().Contains(name)).Key;

                    if (!player1.friendList.TryGetValue(ss, out access))
                    {
                        SendReply(player, $"{PlugName}{lang.GetMessage("NPLAYER", this, player.UserIDString)}");
                        return;
                    }

                    switch (arg[1])
                    {
                        case "damage":
                            if (!cfg.Damage)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }

                            if (access.Damage)
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("DAMAGEOFF", this, player.UserIDString), access.name)}");
                                access.Damage = false;
                            }
                            else
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("DAMAGEON", this, player.UserIDString), access.name)}");
                                access.Damage = true;
                            }

                            break;
                        case "build":
                            if (!cfg.build)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }

                            if (access.bp)
                            {
                                SendReply(player,
                                    $"{PlugName}{String.Format(lang.GetMessage("AUTHBUILDOFF", this, player.UserIDString), access.name)}");
                                access.bp = false;
                            }
                            else
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("AUTHBUILDON", this, player.UserIDString), access.name)}");
                                access.bp = true;
                                AuthBuild(player, ss);
                            }

                            break;  
                        case "door":
                            if (!cfg.Door)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }

                            if (access.Door)
                            {
                                SendReply(player,
                                    $"{PlugName}{String.Format(lang.GetMessage("AUTHDOOROFF", this, player.UserIDString), access.name)}");
                                access.Door = false;
                            }
                            else
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("AUTHDOORON", this, player.UserIDString), access.name)}");
                                access.Door = true;
                            }

                            break;
                        case "turret":
                            if (!cfg.Turret)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }

                            if (access.Turret)
                            {
                                SendReply(player,
                                    $"{PlugName}{String.Format(lang.GetMessage("AUTHTURRETOFF", this, player.UserIDString), access.name)}");
                                access.Turret = false;
                            }
                            else
                            {
                                SendReply(player,
                                    $"{PlugName}{String.Format(lang.GetMessage("AUTHTURRETON", this, player.UserIDString), access.name)}");
                                access.Turret = true;
                            }

                            break;
                        case "sam":
                            if (!cfg.SSamOn) return;
                            if (!cfg.Sam)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }

                            if (access.Sam)
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("AUTHSAMOFF", this, player.UserIDString), access.name)}");
                                access.Sam = false;
                            }
                            else
                            {
                                SendReply(player, $"{PlugName}{String.Format(lang.GetMessage("AUTHSAMON", this, player.UserIDString), access.name)}");
                                access.Sam = true;
                            }

                            break;
                    }

                    break;
                case "setall":
                    if (arg.Length < 3)
                    {
                        SendReply(player,
                            $"<size=22>{PlugName}</size>\n{lang.GetMessage("SYNTAXSETALL", this, player.UserIDString)}");
                        return;
                    }

                    switch (arg[1])
                    {
                        case "door":
                            if (!cfg.Door)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }
                            if (arg[2] == "1")
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Door = true;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHDOORONALL", this, player.UserIDString)}");
                            }
                            else
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Door = false;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHDOOROFFALL", this, player.UserIDString)}");
                            }

                            break;
                        
                        case "damage":
                            if (!cfg.Damage)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }
                            if (arg[2] == "1")
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Damage = true;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("DAMAGEON", this, player.UserIDString)}");
                            }
                            else
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Damage = false;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("DAMAGEOFF", this, player.UserIDString)}");
                            }

                            break;
                        case "build":
                            if (!cfg.Turret)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }
                            if (arg[2] == "1")
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Turret = true;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHBUILDONALL", this, player.UserIDString)}");
                            }
                            else
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Turret = false;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHBUILDOFFALL", this, player.UserIDString)}");
                            }

                            break;
                        case "turret":
                            if (!cfg.Turret)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }
                            if (arg[2] == "1")
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Turret = true;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHTURRETONALL", this, player.UserIDString)}");
                            }
                            else
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Turret = false;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHTURRETOFFALL", this, player.UserIDString)}");
                            }

                            break;
                        case "sam":
                            if (!cfg.SSamOn) return;
                            if (!cfg.Sam)
                            {
                                SendReply(player, $"{PlugName}{lang.GetMessage("SETOFF", this, player.UserIDString)}");
                                return;
                            }
                            if (arg[2] == "1")
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Sam = true;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHSAMONALL", this, player.UserIDString)}");
                            }
                            else
                            {
                                foreach (var friends in player1.friendList)
                                {
                                    friends.Value.Sam = false;
                                }

                                SendReply(player, $"{PlugName}{lang.GetMessage("AUTHSAMOFFALL", this, player.UserIDString)}");
                            }

                            break;
                    }

                    break;
                case "team":
                    var team = player.Team;
                    if (team == null || player.currentTeam == 0)
                    {
                        team = RelationshipManager.ServerInstance.CreateTeam();
                        team.AddPlayer(player);
                    }

                    var text = $"{PlugName}{lang.GetMessage("SENDINVITETEAM", this, player.UserIDString)}";
                    foreach (var ts in player1.friendList)
                    {
                        target = BasePlayer.Find(ts.Key.ToString());
                        if (target != null)
                        {
                            if (target.currentTeam == 0)
                            {
                                team.SendInvite(target);
                                text += $"{target.displayName}[{target.userID}] ";
                                SendReply(target,
                                    $"{PlugName}{lang.GetMessage("SENDINVITE", this, player.UserIDString)} {player.displayName}[{player.userID}]");
                            }
                        }
                    }

                    SendReply(player, text);
                    break;
            }
        }

        [ConsoleCommand("friendui2")]
        private void FriendConsole(ConsoleSystem.Arg arg)
        {
            if(arg.Args == null || arg.Args.Length < 1) return;
            FriendCmd(arg.Player(), "friend", arg.Args);
            if (arg.Args[0] == "set")
            {
                SettingInit(arg.Player(), ulong.Parse(arg.Args[2]));
            }
            if (arg.Args[0] == "remove")
            {
                StartUi(arg.Player());
            }
        }

        [ChatCommand("friend")]
        private void FriendCmd2(BasePlayer player, string command, string[] arg) => FriendCmd(player, command, arg);

        #endregion

        #region [Hooks]

        private void OnEntitySpawned(BuildingPrivlidge entity)
        {
            FriendData fData;
            if(!friendData.TryGetValue(entity.OwnerID, out fData)) return;
            foreach (var ids in fData.friendList.Where(p => p.Value.bp == true))
            {
                entity.authorizedPlayers.Add(new PlayerNameID()
                {
                    ShouldPool = true,
                    userid = ids.Key, 
                    username = ids.Value.name
                });
            }
        }
        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return null;
            FriendData player1;
            var targetplayer = entity as BasePlayer;
            var attackerplayer = info.Initiator as BasePlayer;
            if (attackerplayer == null || targetplayer == null) return null;
            if (!friendData.TryGetValue(attackerplayer.userID, out player1)) return null;
            FriendData.FriendAcces ss;
            if (!player1.friendList.TryGetValue(targetplayer.userID, out ss)) return null;
            if (ss.Damage) return null;
            SendReply(attackerplayer, string.Format(lang.GetMessage("DAMAGE",this, attackerplayer.UserIDString),targetplayer.displayName ));
            return false;
        }

        private object OnTurretTarget(AutoTurret turret, BaseCombatEntity entity)
        {
            if (entity == null || turret == null) return null;
            FriendData targetPlayer;
            var targetplayer = entity as BasePlayer;
            if (targetplayer == null) return null;
            if (!friendData.TryGetValue(turret.OwnerID, out targetPlayer)) return null;
            FriendData.FriendAcces ss;
            var owner = turret.authorizedPlayers.Exists(p => p.userid == turret.OwnerID);
            if (!owner) return null;
            if (!targetPlayer.friendList.TryGetValue(targetplayer.userID, out ss)) return null;
            if (!ss.Turret) return null;
            return false;
        }

        private object CanUseLockedEntity(BasePlayer player, BaseLock baseLock)
        {
            if (player == null || baseLock == null) return null;
            FriendData targetPlayer2;
            if (!friendData.TryGetValue(baseLock.OwnerID, out targetPlayer2)) return null;
            FriendData.FriendAcces ss;
            if (!targetPlayer2.friendList.TryGetValue(player.userID, out ss)) return null;
            if (!ss.Door) return null;
            return true;
        }

        private object OnSamSiteTarget(SamSite entity, BaseCombatEntity target)
        {
            if (!cfg.SSamOn) return null;
            if (entity == null || target == null) return null;
            FriendData targetPlayer;
            var targetpcopter = target as MiniCopter;
            var targetpcopterBig = target as ScrapTransportHelicopter;
            if (targetpcopter != null || targetpcopterBig != null)
            {
                var build = entity.GetBuildingPrivilege();
                if (build == null) return null;
                if (!build.authorizedPlayers.Exists(p => p.userid == entity.OwnerID)) return null;
                BasePlayer targePlayer = null;
                if(targetpcopter != null)targePlayer = targetpcopter.mountPoints[0].mountable._mounted;
                if(targetpcopterBig != null)targePlayer = targetpcopterBig.mountPoints[0].mountable._mounted;
                if (targePlayer == null) return null;
                if (entity.OwnerID == targePlayer.userID) return false;
                if (!friendData.TryGetValue(entity.OwnerID, out targetPlayer)) return null;
                FriendData.FriendAcces ss;
                if (!targetPlayer.friendList.TryGetValue(targePlayer.userID, out ss)) return null;
                if (!ss.Sam) return null; 
            }
            else
            {
                return null;
            }
            return false;
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (!friendData.ContainsKey(player.userID))
                friendData.Add(player.userID, new FriendData() {Name = player.displayName, friendList = { }});
        }

        private void OnServerInitialized()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile("SoFriends/FriendData"))
            {
                friendData = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, FriendData>>("SoFriends/FriendData");
            }
            else
            {
                friendData = new Dictionary<ulong, FriendData>();
            }
            foreach (var basePlayer in BasePlayer.activePlayerList)
                OnPlayerConnected(basePlayer);
        }

        private void Unload() 
        {
            Interface.Oxide.DataFileSystem.WriteObject("SoFriends/FriendData", friendData);
            foreach (var basePlayer in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(basePlayer, LayerInvite);
                CuiHelper.DestroyUi(basePlayer, Layer);
            }
        }

        #endregion

        #region [UI]

        private static string Layer = "UISoFriends";
        private string LayerInvite = "UISoFriendsInv";
        private string Hud = "Hud";
        private string Overlay = "Overlay";
        private CuiPanel Fon = new CuiPanel()
        {
            RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
            CursorEnabled = true,
            Image = {Color = "0 0 0 0.87", Material = "assets/content/ui/uibackgroundblur.mat"}
        };

        private CuiPanel MainFon = new CuiPanel()
        {
            RectTransform = {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-1920 -1080", OffsetMax = "1920 1080"},
            CursorEnabled = true,
            Image = {Color = "0 0 0 0"}
        };

        private CuiPanel MainPanel = new CuiPanel()
        {
            RectTransform = {AnchorMin = "0.3333333 0.3333333", AnchorMax = "0.6664931 0.67"},
            Image = {Color = "0 0 0 0"}
        };
        
        private CuiElement ButtonList = new CuiElement()
        {
            Parent = Layer + "Panel",
            Components =
            {
                new CuiButtonComponent(){Color = "0.40 0.40 0.40 0", Command = "chat.say /fmenu", Sprite = "assets/content/ui/ui.background.tile.psd", Material = "assets/content/ui/uibackgroundblur.mat"},
                new CuiOutlineComponent() {Color = HexToRustFormat("#00fff7"), Distance = "1 1"},
                new CuiRectTransformComponent(){AnchorMin = "0.223554 0.70132"