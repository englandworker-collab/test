        }
    }
}


// --- End of file: PsyArrows.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ServerPop.cs ---
// --- Original Local Path: ServerPop.cs ---

/*
Copyright © 2024 Mabel

All rights reserved. This plugin is protected by copyright law.

You may not modify, redistribute, or resell this software without explicit written permission from the copyright owner.

For any support please message me directly via Discord `mabel8686` or join my discord https://discord.gg/YWzEJVt89V

███╗   ███╗ █████╗ ██████╗ ███████╗██╗
████╗ ████║██╔══██╗██╔══██╗██╔════╝██║
██╔████╔██║███████║██████╔╝█████╗  ██║
██║╚██╔╝██║██╔══██║██╔══██╗██╔══╝  ██║
██║ ╚═╝ ██║██║  ██║██████╔╝███████╗███████╗
╚═╝     ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝
*/
using ConVar;
using Network;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Libraries;
using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Server Pop", "Mabel", "1.1.3")]
    [Description("Show server pop in chat with !pop trigger.")]

    public class ServerPop : RustPlugin
    {
        static Configuration config;
        static Dictionary<ulong, DateTime> cooldowns = new Dictionary<ulong, DateTime>();

        public class Configuration
        {
            [JsonProperty(PropertyName = "Cooldown Settings")]
            public CooldownSettings CooldownSettings { get; set; }

            [JsonProperty(PropertyName = "Chat Settings")]
            public ChatSettings ChatSettings { get; set; }

            [JsonProperty(PropertyName = "Messgae Settings")]
            public MessageSettings MessageSettings { get; set; }

            [JsonProperty(PropertyName = "Response Settings")]
            public ResponseSettings ResponseSettings { get; set; }

            [JsonProperty(PropertyName = "Connect Settings")]
            public ConnectSettings ConnectSettings { get; set; }

            [JsonProperty(PropertyName = "Wipe Response Settings")]
            public WipeSettings WipeSettings { get; set; }

            [JsonProperty(PropertyName = "Discord Response Settings")]
            public DiscordSettings DiscordSettings { get; set; }

            public Core.VersionNumber Version { get; set; }
        }

        public class CooldownSettings
        {
            [JsonProperty(PropertyName = "Cooldown (seconds)")]
            public int cooldownSeconds { get; set; } = 60;
        }

        public class ChatSettings
        {
            [JsonProperty(PropertyName = "Chat Prefix")]
            public string chatPrefix { get; set; }

            [JsonProperty(PropertyName = "Chat Icon SteamID")]
            public ulong chatSteamID { get; set; } = 76561199216745239;
        }

        public class MessageSettings
        {
            [JsonProperty(PropertyName = "Global Response (true = global response, false = player response)")]
            public bool globalResponse { get; set; }

            [JsonProperty(PropertyName = "Use Chat Response")]
            public bool chat { get; set; }

            [JsonProperty(PropertyName = "Use Game Tip Response")]
            public bool toast { get; set; }

            [JsonProperty(PropertyName = "Use Single Line Chat Pop Response")]
            public bool oneLine { get; set; } = false;

            [JsonProperty(PropertyName = "Value Color (HEX)")]
            public string valueColor { get; set; }
        }

        public class ResponseSettings
        {
            [JsonProperty(PropertyName = "Show Online Players")]
            public bool showOnlinePlayers { get; set; }

            [JsonProperty(PropertyName = "Show Sleeping Players")]
            public bool showSleepingPlayers { get; set; }

            [JsonProperty(PropertyName = "Show Joining Players")]
            public bool showJoiningPlayers { get; set; }

            [JsonProperty(PropertyName = "Show Queued Players")]
            public bool showQueuedPlayers { get; set; }
        }

        public class ConnectSettings
        {
            [JsonProperty(PropertyName = "Show Pop On Connect")]
            public bool showPopOnConnect { get; set; }

            [JsonProperty(PropertyName = "Show Welcome Message")]
            public bool showWelcomeMessage { get; set; }

            [JsonProperty(PropertyName = "Show Wipe On Connect")]
            public bool showWipeOnConnect { get; set; }
        }

        public class WipeSettings
        {
            [JsonProperty(PropertyName = "Wipe Timer Enabled")]
            public bool wipeTimerEnabled { get; set; }

            [JsonProperty(PropertyName = "Wipe Timer (epoch)")]
            public long wipeTimer { get; set; }
        }

        public class DiscordSettings
        {
            [JsonProperty(PropertyName = "Discord Enabled")]
            public bool discordEnabled { get; set; }

            [JsonProperty(PropertyName = "Discord Invite Link")]
            public string discordLink { get; set; }
        }

        public static Configuration DefaultConfig()
        {
            return new Configuration
            {
                CooldownSettings = new CooldownSettings()
                {
                    cooldownSeconds = 60,
                },
                ChatSettings = new ChatSettings()
                {
                    chatPrefix = "<size=16><color=#FFA500>| Server Pop |</color></size>",
                    chatSteamID = 76561199216745239,
                },
                MessageSettings = new MessageSettings()
                {
                    globalResponse = true,
                    chat = false,
                    toast = true,
                    oneLine = false,
                    valueColor = "#FFA500",
                },
                ResponseSettings = new ResponseSettings()
                {
                    showOnlinePlayers = true,
                    showSleepingPlayers = true,
                    showJoiningPlayers = true,
                    showQueuedPlayers = true,
                },
                ConnectSettings = new ConnectSettings()
                {
                    showPopOnConnect = false,
                    showWelcomeMessage = false,
                    showWipeOnConnect = false,
                },
                WipeSettings = new WipeSettings()
                {
                    wipeTimerEnabled = false,
                    wipeTimer = 0,
                },
                DiscordSettings = new DiscordSettings()
                {
                    discordEnabled = false,
                    discordLink = "",
                },
                Version = new Core.VersionNumber()
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
                SaveConfig();

                if (config.DiscordSettings == null)
                {
                    config.DiscordSettings = new DiscordSettings();
                    config.DiscordSettings.discordEnabled = false;
                    config.DiscordSettings.discordLink = "";
                }

                if (config.Version < Version)
                    UpdateConfig();

                Config.WriteObject(config, true);
            }
            catch (Exception ex)
            {
                Debug.LogException(ex);
                PrintWarning("Creating new configuration file....");
                LoadDefaultConfig();
            }
        }

        private void UpdateConfig()
        {
            PrintWarning("Config update detected! Updating config values...");

            Configuration baseConfig = DefaultConfig();

            if (config.Version < new Core.VersionNumber(1, 0, 6))
                config = baseConfig;

            config.Version = Version;

            PrintWarning("Config update completed!");
        }

        protected override void LoadDefaultConfig()
        {
            config = DefaultConfig();
            PrintWarning("Default configuration has been loaded....");
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Online"] = "{0} / {1} players online",
                ["Sleeping"] = "{0} players sleeping",
                ["Joining"] = "{0} players joining",
                ["Queued"] = "{0} players queued",
                ["WelcomeMessage"] = "Welcome to the server {0}!",
                ["CooldownMessage"] = "You must wait {0} seconds before using this command again.",
                ["WipeMessage"] = "Next wipe in: {0}",
                ["DiscordMessage"] = "Join Us @ {0}",
                ["OneLine"] = "{0} / {1} players with {2} joining! {3} queued"
            }, this);
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            List<string> toastMessages = new List<string>();

            if (config.ConnectSettings.showWelcomeMessage)
            {
                string welcomeMessage = lang.GetMessage("WelcomeMessage", this, player.UserIDString);

                if (!string.IsNullOrEmpty(welcomeMessage))
                {
                    welcomeMessage = string.Format(welcomeMessage, ApplyColor(player.displayName.ToString(), config.MessageSettings.valueColor));

                    if (config.MessageSettings.chat)
                    {
                        string chatWelcomeMessage = $"{config.ChatSettings.chatPrefix} {welcomeMessage}";
                        Player?.Message(player, chatWelcomeMessage, config.ChatSettings.chatSteamID);
                    }
                    if (config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, welcomeMessage);
                    }
                }
            }

            if (config.ConnectSettings.showPopOnConnect) timer.Once(8f, () =>
            {
                if (config.ConnectSettings.showPopOnConnect && config.MessageSettings.oneLine)
                {
                    string oneLineMessage = $"{config.ChatSettings.chatPrefix}  {lang.GetMessage("OneLine", this, player.UserIDString)}";
                    oneLineMessage = string.Format(oneLineMessage,
                        ApplyColor(BasePlayer.activePlayerList.Count.ToString(), config.MessageSettings.valueColor),
                        ApplyColor(ConVar.Server.maxplayers.ToString(), config.MessageSettings.valueColor),
                        ApplyColor(ServerMgr.Instance.connectionQueue.Joining.ToString(), config.MessageSettings.valueColor),
                        ApplyColor(ServerMgr.Instance.connectionQueue.Queued.ToString(), config.MessageSettings.valueColor)
                    );

                    Player?.Message(player, oneLineMessage.ToString(), null, config.ChatSettings.chatSteamID);
                }
                else
                {
                    if (config.ConnectSettings.showPopOnConnect && config.MessageSettings.chat)
                    {
                        SendMessage(player);
                    }
                }

                if (config.ConnectSettings.showPopOnConnect && config.MessageSettings.toast)
                {
                    if (config.ResponseSettings.showOnlinePlayers)
                    {
                        string onlineMessage = $"{lang.GetMessage("Online", this, player.UserIDString)}";
                        onlineMessage = string.Format(onlineMessage, ApplyColor(BasePlayer.activePlayerList.Count.ToString(), config.MessageSettings.valueColor), ApplyColor(ConVar.Server.maxplayers.ToString(), config.MessageSettings.valueColor));
                        toastMessages.Add(onlineMessage);
                    }

                    if (config.ResponseSettings.showSleepingPlayers)
                    {
                        string sleepingMessage = $"{lang.GetMessage("Sleeping", this, player.UserIDString)}";
                        sleepingMessage = string.Format(sleepingMessage, ApplyColor(BasePlayer.sleepingPlayerList.Count.ToString(), config.MessageSettings.valueColor));
                        toastMessages.Add(sleepingMessage);
                    }

                    if (config.ResponseSettings.showJoiningPlayers)
                    {
                        string joiningMessage = $"{lang.GetMessage("Joining", this, player.UserIDString)}";
                        joiningMessage = string.Format(joiningMessage, ApplyColor(ServerMgr.Instance.connectionQueue.Joining.ToString(), config.MessageSettings.valueColor));
                        toastMessages.Add(joiningMessage);
                    }

                    if (config.ResponseSettings.showQueuedPlayers)
                    {
                        string queuedMessage = $"{lang.GetMessage("Queued", this, player.UserIDString)}";
                        queuedMessage = string.Format(queuedMessage, ApplyColor(ServerMgr.Instance.connectionQueue.Queued.ToString(), config.MessageSettings.valueColor));
                        toastMessages.Add(queuedMessage);
                    }

                    string toastMessage = string.Join("  ", toastMessages);
                    player?.ShowToast(GameTip.Styles.Blue_Long, toastMessage);
                }
            });

            if (config.ConnectSettings.showWipeOnConnect) timer.Once(16f, () =>
            {
                string wipeTimerDisplay = GetWipeTime(config.WipeSettings);
                string wipeMessage = lang.GetMessage("WipeMessage", this, player.UserIDString);
                wipeMessage = string.Format(wipeMessage, wipeTimerDisplay);

                if (config.ConnectSettings.showWipeOnConnect && config.MessageSettings.chat)
                {
                    string chatConnectWipeMessage = $"{config.ChatSettings.chatPrefix} {wipeMessage}";
                    Player?.Message(player, chatConnectWipeMessage, null, config.ChatSettings.chatSteamID);
                }

                if (config.ConnectSettings.showWipeOnConnect && config.MessageSettings.toast)
                {
                    player?.ShowToast(GameTip.Styles.Blue_Long, wipeMessage);
                }
            });
        }

        private void OnPlayerChat(BasePlayer player, string message, Chat.ChatChannel channel)
        {
            if (message.ToLower() == "!pop")
            {
                if (CanUseTrigger(player.userID))
                {
                    if (!config.MessageSettings.globalResponse && config.MessageSettings.oneLine)
                    {
                        string oneLineMessage = $"{config.ChatSettings.chatPrefix}  {lang.GetMessage("OneLine", this, player.UserIDString)}";
                        oneLineMessage = string.Format(oneLineMessage,
                            ApplyColor(BasePlayer.activePlayerList.Count.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ConVar.Server.maxplayers.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ServerMgr.Instance.connectionQueue.Joining.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ServerMgr.Instance.connectionQueue.Queued.ToString(), config.MessageSettings.valueColor)
                        );

                        Player?.Message(player, oneLineMessage, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.globalResponse && config.MessageSettings.oneLine)
                    {
                        string oneLineMessage = $"{config.ChatSettings.chatPrefix}  {lang.GetMessage("OneLine", this, player.UserIDString)}";
                        oneLineMessage = string.Format(oneLineMessage,
                            ApplyColor(BasePlayer.activePlayerList.Count.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ConVar.Server.maxplayers.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ServerMgr.Instance.connectionQueue.Joining.ToString(), config.MessageSettings.valueColor),
                            ApplyColor(ServerMgr.Instance.connectionQueue.Queued.ToString(), config.MessageSettings.valueColor)
                        );

                        Server.Broadcast(oneLineMessage.ToString(), null, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.chat || config.MessageSettings.toast)
                    {
                        SendMessage(player);
                    }

                    cooldowns[player.userID] = DateTime.Now.AddSeconds(config.CooldownSettings.cooldownSeconds);
                    return;
                }
                else
                {
                    TimeSpan remainingCooldown = cooldowns[player.userID] - DateTime.Now;
                    string cooldownMessage = lang.GetMessage("CooldownMessage", this, player.UserIDString);
                    cooldownMessage = string.Format(cooldownMessage, ApplyColor(Math.Round(remainingCooldown.TotalSeconds).ToString(), config.MessageSettings.valueColor));

                    if (config.MessageSettings.chat)
                    {
                        string chatCooldownMessage = $"{config.ChatSettings.chatPrefix} {cooldownMessage}";
                        Player?.Message(player, chatCooldownMessage, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, cooldownMessage);
                    }
                    return;
                }
            }
            else if (config.WipeSettings.wipeTimerEnabled && message.ToLower() == "!wipe")
            {
                if (CanUseTrigger(player.userID))
                {
                    string wipeTimerDisplay = GetWipeTime(config.WipeSettings);
                    string wipeMessage = lang.GetMessage("WipeMessage", this, player.UserIDString);
                    wipeMessage = string.Format(wipeMessage, wipeTimerDisplay);

                    if (config.MessageSettings.globalResponse && config.MessageSettings.chat)
                    {
                        string chatWipeMessage = $"{config.ChatSettings.chatPrefix} {wipeMessage}";
                        Player?.Message(player, chatWipeMessage, null, config.ChatSettings.chatSteamID);
                    }

                    if (!config.MessageSettings.globalResponse && config.MessageSettings.chat)
                    {
                        string chatWipeMessage = $"{config.ChatSettings.chatPrefix} {wipeMessage}";
                        Player?.Message(player, chatWipeMessage, null, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.globalResponse && config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, wipeMessage);
                    }

                    if (!config.MessageSettings.globalResponse && config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, wipeMessage);
                    }

                    cooldowns[player.userID] = DateTime.Now.AddSeconds(config.CooldownSettings.cooldownSeconds);
                    return;
                }
                else
                {
                    TimeSpan remainingCooldown = cooldowns[player.userID] - DateTime.Now;
                    string cooldownMessage = lang.GetMessage("CooldownMessage", this, player.UserIDString);
                    cooldownMessage = string.Format(cooldownMessage, ApplyColor(Math.Round(remainingCooldown.TotalSeconds).ToString(), config.MessageSettings.valueColor));

                    if (config.MessageSettings.chat)
                    {
                        string chatCooldownMessage = $"{config.ChatSettings.chatPrefix} {cooldownMessage}";
                        Player?.Message(player, chatCooldownMessage, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, cooldownMessage);
                    }
                    return;
                }
            }
            else if (config.DiscordSettings.discordEnabled && message.ToLower() == "!discord")
            {
                if (CanUseTrigger(player.userID))
                {
                    string discordMessage = lang.GetMessage("DiscordMessage", this, player.UserIDString);
                    discordMessage = string.Format(discordMessage, config.DiscordSettings.discordLink);

                    if (config.MessageSettings.chat)
                    {
                        string chatDiscordMessage = $"{config.ChatSettings.chatPrefix} {discordMessage}";
                        Player?.Message(player, chatDiscordMessage, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, discordMessage);
                    }

                    cooldowns[player.userID] = DateTime.Now.AddSeconds(config.CooldownSettings.cooldownSeconds);
                    return;
                }
                else
                {
                    TimeSpan remainingCooldown = cooldowns[player.userID] - DateTime.Now;
                    string cooldownMessage = lang.GetMessage("CooldownMessage", this, player.UserIDString);
                    cooldownMessage = string.Format(cooldownMessage, ApplyColor(Math.Round(remainingCooldown.TotalSeconds).ToString(), config.MessageSettings.valueColor));

                    if (config.MessageSettings.chat)
                    {
                        string chatCooldownMessage = $"{config.ChatSettings.chatPrefix} {cooldownMessage}";
                        Player?.Message(player, cooldownMessage, config.ChatSettings.chatSteamID);
                    }

                    if (config.MessageSettings.toast)
                    {
                        player?.ShowToast(GameTip.Styles.Blue_Long, cooldownMessage);
                    }
                    return;
                }
            }
        }

        private bool CanUseTrigger(ulong userID)
        {
            if (!cooldowns.ContainsKey(userID))
                return true;
            return cooldowns[userID] <= DateTime.Now;
        }
        private void SendMessage(BasePlayer player)
        {
            StringBuilder popMessage = new StringBuilder($"{config.ChatSettings.chatPrefix}\n\n");

            List<string> toastMessages = new List<string>();

            if (config.ResponseSettings.showOnlinePlayers)
            {
                string onlineMessage = $"{lang.GetMessage("Online", this, player.UserIDString)}";
                onlineMessage = string.Format(onlineMessage, ApplyColor(BasePlayer.activePlayerList.Count.ToString(), config.MessageSettings.valueColor), ApplyColor(ConVar.Server.maxplayers.ToString(), config.MessageSettings.valueColor));
                popMessage.AppendLine($"{onlineMessage}\n");
                toastMessages.Add(onlineMessage);
            }

            if (config.ResponseSettings.showSleepingPlayers)
            {
                string sleepingMessage = $"{lang.GetMessage("Sleeping", this, player.UserIDString)}";
                sleepingMessage = string.Format(sleepingMessage, ApplyColor(BasePlayer.sleepingPlayerList.Count.ToString(), config.MessageSettings.valueColor));
                popMessage.AppendLine($"{sleepingMessage}\n");
                toastMessages.Add(sleepingMessage);
            }

            if (config.ResponseSettings.showJoiningPlayers)
            {
                string joiningMessage = $"{lang.GetMessage("Joining", this, player.UserIDString)}";
                joiningMessage = string.Format(joiningMessage, ApplyColor(ServerMgr.Instance.connectionQueue.Joining.ToString(), config.MessageSettings.valueColor));
                popMessage.AppendLine($"{joiningMessage}\n");
                toastMessages.Add(joiningMessage);
            }

            if (config.ResponseSettings.showQueuedPlayers)
            {
                string queuedMessage = $"{lang.GetMessage("Queued", this, player.UserIDString)}";
                queuedMessage = string.Format(queuedMessage, ApplyColor(ServerMgr.Instance.connectionQueue.Queued.ToString(), config.MessageSettings.valueColor));
                popMessage.AppendLine($"{queuedMessage}\n");
                toastMessages.Add(queuedMessage);
            }

            if (config.MessageSettings.globalResponse && config.MessageSettings.toast && toastMessages.Count > 0)
            {
                SendToastToActivePlayers(toastMessages);
            }

            if (!config.MessageSettings.globalResponse && config.MessageSettings.toast && toastMessages.Count > 0)
            {
                string toastMessage = string.Join("  ", toastMessages);
                player?.ShowToast(GameTip.Styles.Blue_Long, toastMessage);
            }

            if (config.MessageSettings.oneLine) return;

            if (config.MessageSettings.globalResponse && config.MessageSettings.chat)
            {
                Server.Broadcast(popMessage.ToString(), null, config.ChatSettings.chatSteamID);
            }

            if (!config.MessageSettings.globalResponse && config.MessageSettings.chat)
            {
                Player.Message(player, popMessage.ToString(), null, config.ChatSettings.chatSteamID);
            }
        }

        void SendToastToActivePlayers(List<string> toastMessages)
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (player != null)
                {
                    string toastMessage = string.Join("  ", toastMessages);
                    player?.ShowToast(GameTip.Styles.Blue_Long, toastMessage);
                }
            }
        }

        private string ApplyColor(string text, string hexColor)
        {
            return $"<color={hexColor}>{text}</color>";
        }

        private object OnBetterChat(Dictionary<string, object> messageData) => Filter(messageData);

        private object Filter(Dictionary<string, object> messageData)
        {
            IPlayer player = (IPlayer)messageData["Player"];

            if (RemoveMessage((string)messageData["Message"]))
            {
                messageData["CancelOption"] = 2;
            }

            return messageData;
        }

        private bool RemoveMessage(string message)
        {
            return message.ToLower().Contains("!pop") || message.ToLower().Contains("!wipe") || message.ToLower().Contains("!discord");
        }

        private string GetWipeTime(WipeSettings timer)
        {
            if (timer.wipeTimer <= 0)
                return ApplyColor("0", config.MessageSettings.valueColor);

            TimeSpan timeSpan = TimeSpan.FromSeconds(timer.wipeTimer - DateTimeOffset.UtcNow.ToUnixTimeSeconds());
            if (timeSpan.TotalSeconds <= 0)
                return ApplyColor("0", config.MessageSettings.valueColor);

            return $"{ApplyColor(timeSpan.Days.ToString(), config.MessageSettings.valueColor)} Days " +
                   $"{ApplyColor(timeSpan.Hours.ToString(), config.MessageSettings.valueColor)} Hours " +
                   $"{ApplyColor(timeSpan.Minutes.ToString(), config.MessageSettings.valueColor)} Minutes";
        }
    }
}

// --- End of file: ServerPop.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/GUIAnnouncements.cs ---
// --- Original Local Path: GUIAnnouncements.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;

using UnityEngine;

using Oxide.Core;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("GUIAnnouncements", "JoeSheep", "1.17.48", ResourceId = 1222)]
    [Description("Creates announcements with custom messages by command across the top of every player's screen in a banner.")]

    public class GUIAnnouncements : RustPlugin
    {
        #region Configuration

        #region Permissions
        const string PermAnnounce = "GUIAnnouncements.announce";
        const string PermAnnounceToggle = "GUIAnnouncements.toggle";
        #endregion
        #region Global Declerations
        private string AnnouncementGUI = String.Empty;
        private string AnnouncementText = String.Empty;
        private Dictionary<ulong, string> Exclusions = new Dictionary<ulong, string>();
        private List<ulong> JustJoined = new List<ulong>();
        private List<ulong> GlobalTimerList = new List<ulong>();
        private Dictionary<BasePlayer, Timer> PrivateTimers = new Dictionary<BasePlayer, Timer>();
        private Dictionary<BasePlayer, Timer> NewPlayerPrivateTimers = new Dictionary<BasePlayer, Timer>();
        private Dictionary<BasePlayer, Timer> PlayerRespawnedTimers = new Dictionary<BasePlayer, Timer>();
        private Timer PlayerTimer;
        private Timer GlobalTimer;
        private Timer NewPlayerTimer;
        private Timer PlayerRespawnedTimer;
        private Timer RealTimeTimer;
        private Timer SixtySecondsTimer;
        private Timer AutomaticAnnouncementsTimer;
        private string LastHitPlayer = String.Empty;
        private bool ConfigUpdated;
        private List<DateTime> RestartTimes;
        private Dictionary<DateTime, TimeSpan> CalcNextRestartDict = new Dictionary<DateTime, TimeSpan>();
        private DateTime NextRestart;
        private int LastHour;
        private int LastMinute;
        private bool RestartCountdown;
        private IEnumerator<string> ATALEnum;
        private bool RestartJustScheduled = false;
        private bool RestartScheduled = false;
        private List<string> RestartAnnouncementsWhenStrings;
        private DateTime ScheduledRestart;
        private TimeSpan AutomaticTimedAnnouncementsRepeat;
        private bool RestartSuspended = false;

        string BannerTintGrey = "0.1 0.1 0.1 0.7";
        string BannerTintRed = "0.5 0.1 0.1 0.7";
        string BannerTintGreen = "0.1 0.4 0.1 0.5";
        string TextYellow = "0.7 0.7 0.1";
        string TextOrange = "0.8 0.5 0.1";
        string TextWhite = "1 1 1";
        string BannerAnchorMaxX()
        {
            if (doNotOverlayLustyMap == true)
                if (lustyMapPosition.ToLower() == "right")
                    return "0.868 ";
            return "1.026 ";
        }
        string BannerAnchorMaxY = "0.9643";
        string BannerAnchorMinX()
        {
            if (doNotOverlayLustyMap == true)
                if (lustyMapPosition.ToLower() == "left")
                    return "0.131 ";
            return "-0.027 ";
        }
        string BannerAnchorMinY = "0.92";
        string TextAnchorMaxX = "0.868 ";
        string TextAnchorMaxY = "0.9643";
        string TextAnchorMinX = "0.131 ";
        string TextAnchorMinY = "0.92";
        #endregion
        //============================================================================================================
        #region Config Option Declerations
        #region Formatting
        public float announcementDuration { get; private set; } = 10f;
        public float welcomeAnnouncementDuration { get; private set; } = 20f;
        public int fontSize { get; private set; } = 18;
        public float fadeOutTime { get; private set; } = 0.5f;
        public float fadeInTime { get; private set; } = 0.5f;
        #endregion
        //============================================================================================================
        #region Automatic Announcements
        public bool automaticTimedAnnouncements { get; private set; } = false;
        public static List<object> automaticTimedAnnouncementsList { get; private set; } = new List<object>
        {
            "Automatic Timed Announcement 1",
            "Automatic Timed Announcement 2",
            "Automatic Timed Announcement 3"
        };
        public string automaticTimedAnnouncementsRepeat { get; private set; } = "00:30:00";
        public bool helicopterAnnouncement { get; private set; } = true;
        public bool helicopterDeathAnnouncement { get; private set; } = true;
        public bool helicopterDeathAnnouncementWithKiller { get; private set; } = true;
        public bool airdropAnnouncement { get; private set; } = true;
        public bool airdropAnnouncementLocation { get; private set; } = true;
        public bool welcomeAnnouncement { get; private set; } = true;
        public bool welcomeBackAnnouncement { get; private set; } = true;
        public bool newPlayerAnnouncements { get; private set; } = true;
        public int newPlayerAnnouncementsShowTimes { get; private set; } = 4;
        public List<object> newPlayerAnnouncementsList { get; private set; } = new List<object>
        {
                    "New player announcement 1.",
                    "New player announcement 2.",
                    "New player announcement 3."
        };
        public bool respawnAnnouncements { get; private set; } = false;
        public List<object> respawnAnnouncementsList { get; private set; } = new List<object>
        {
                    "Respawn announcement 1.",
                    "Respawn announcement 2.",
                    "Respawn announcement 3."
        };
        public bool restartAnnouncements { get; private set; } = false;
        public List<object> restartTimes { get; private set; } = new List<object>
        {
            "08:00:00",
            "20:00:00"
        };
        public List<object> restartAnnouncementsWhen { get; private set; } = new List<object>
        {
            "12:00:00",
            "11:00:00",
            "10:00:00",
            "09:00:00",
            "08:00:00",
            "07:00:00",
            "06:00:00",
            "05:00:00",
            "04:00:00",
            "03:00:00",
            "02:00:00",
            "01:00:00",
            "00:45:00",
            "00:30:00",
            "00:15:00",
            "00:05:00"
        };
        public bool restartServer { get; private set; } = false;
        #endregion
        //============================================================================================================
        #region Third Party Plugin Support
        public bool doNotOverlayLustyMap { get; private set; } = false;
        public string lustyMapPosition { get; private set; } = "Left";
        #endregion
        #endregion

        private void LoadGUIAnnouncementsConfig()
        {
            announcementDuration = GetConfig("Formatting", "AnnouncementShowDuration", 10f);
            if (announcementDuration == 0)
            {
                PrintWarning("Config AnnouncementShowDuration set to 0, resetting to 10f.");
                Config["Formatting", "AnnouncementShowDuration"] = 10f;
                ConfigUpdated = true;
            }

            welcomeAnnouncementDuration = GetConfig("Formatting", "WelcomeAnnouncementDuration", 20f);
            if (welcomeAnnouncementDuration == 0)
            {
                PrintWarning("Config WelcomeAnnouncementDuration set to 0, resetting to 20f.");
                Config["Formatting", "WelcomeAnnouncementDuration"] = 20f;
                ConfigUpdated = true;
            }

            fontSize = GetConfig("Formatting", "FontSize", 18);
            if (fontSize > 33 | fontSize == 0)
            {
                PrintWarning("Config FontSize greater than 28 or 0, resetting to 18.");
                Config["Formatting", "FontSize"] = 18;
                ConfigUpdated = true;
            }

            fadeInTime = GetConfig("Formatting", "FadeInTime", 0.5f);
            if (fadeInTime > announcementDuration / 2)
            {
                PrintWarning("Config FadeInTime is greater than half of AnnouncementShowDuration, resetting to half of AnnouncementShowDuration.");
                Config["Formatting", "FadeInTime"] = announcementDuration / 2;
                ConfigUpdated = true;
            }

            fadeOutTime = GetConfig("Formatting", "FadeOutTime", 0.5f);
            if (fadeOutTime > announcementDuration / 2)
            {
                PrintWarning("Config FadeOutTime is greater than half of AnnouncementShowDuration, resetting to half of AnnouncementShowDuration.");
                Config["Formatting", "FadeOutTime"] = announcementDuration / 2;
                ConfigUpdated = true;
            }

            automaticTimedAnnouncements = GetConfig("Automatic Announcements", "AutomaticTimedAnnouncements", false);
            automaticTimedAnnouncementsList = GetConfig("Automatic Announcements", "AutomaticTimedAnnouncementsList", automaticTimedAnnouncementsList);
            automaticTimedAnnouncementsRepeat = GetConfig("Automatic Announcements", "AutomaticTimedAnnouncementsRepeat", automaticTimedAnnouncementsRepeat);
            try
            {
                AutomaticTimedAnnouncementsRepeat = TimeSpan.Parse(automaticTimedAnnouncementsRepeat);
            }
            catch (FormatException) { PrintWarning("Config AutomaticTimedAnnouncementsRepeat is not of the correct format ie. HH:MM:SS. Resetting to default"); }
            catch (OverflowException) { PrintWarning("Config AutomaticTimedAnnouncementsRepeat has numbers out of range and should not be higher than: 23:59:59. Resetting to default"); }
            helicopterAnnouncement = GetConfig("Automatic Announcements", "HelicopterAnnouncement", true);
            helicopterDeathAnnouncement = GetConfig("Automatic Announcements", "HelicopterDeathAnnouncement", true);
            helicopterDeathAnnouncementWithKiller = GetConfig("Automatic Announcements", "HelicopterDeathAnnouncementWithKiller", true);
            airdropAnnouncement = GetConfig("Automatic Announcements", "AirdropAnnouncement", true);
            airdropAnnouncementLocation = GetConfig("Automatic Announcements", "AirdropAnnouncementLocation", false);
            welcomeAnnouncement = GetConfig("Automatic Announcements", "WelcomeAnnouncement", true);
            welcomeBackAnnouncement = GetConfig("Automatic Announcements", "WelcomeBackAnnouncement", true);
            newPlayerAnnouncements = GetConfig("Automatic Announcements", "NewPlayerAnnouncements", false);
            newPlayerAnnouncementsShowTimes = GetConfig("Automatic Announcements", "NewPlayerAnnouncementsShowTimes", 4);
            newPlayerAnnouncementsList = GetConfig("Automatic Announcements", "NewPlayerAnnouncementsList", newPlayerAnnouncementsList);
            respawnAnnouncements = GetConfig("Automatic Announcements", "RespawnAnnouncements", false);
            respawnAnnouncementsList = GetConfig("Automatic Announcements", "RespawnAnnouncementsList", respawnAnnouncementsList);
            restartAnnouncements = GetConfig("Automatic Announcements", "RestartAnnouncements", restartAnnouncements);
            restartTimes = GetConfig("Automatic Announcements", "RestartTimes", restartTimes);
            restartAnnouncementsWhen = GetConfig("Automatic Announcements", "RestartAnnouncementsWhen", restartAnnouncementsWhen);
            restartServer = GetConfig("Automatic Announcements", "RestartServer", restartServer);
            doNotOverlayLustyMap = GetConfig("Third Party Plugin Support", "DoNotOverlayLustyMap", false);

            lustyMapPosition = GetConfig("Third Party Plugin Support", "LustyMapPosition", "Left");
            if (lustyMapPosition.ToLower() != "left" && lustyMapPosition.ToLower() != "right" || lustyMapPosition == string.Empty || lustyMapPosition == null)
            {
                PrintWarning("Config LustyMapPosition is not left or right, resetting to left.");
                Config["Third Party Plugin Support", "LustyMapPosition"] = "Left";
                ConfigUpdated = true;
            }

            if (!ConfigUpdated) return;
            Puts("Configuration file has been updated.");
            SaveConfig();
        }

        protected override void LoadDefaultConfig() => PrintWarning("A new configuration file has been created.");

        private T GetConfig<T>(string category, string setting, T defaultValue)
        {
            var data = Config[category] as Dictionary<string, object>;
            object value;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[category] = data;
                ConfigUpdated = true;
            }
            if (data.TryGetValue(setting, out value)) return (T)Convert.ChangeType(value, typeof(T));
            value = defaultValue;
            data[setting] = value;
            ConfigUpdated = true;
            return (T)Convert.ChangeType(value, typeof(T));
        }

        private List<string> ConvertList(object value)
        {
            if (value is List<object>)
            {
                List<object> list = (List<object>)value;
                List<string> strings = list.Select(s => (string)s).ToList();
                return strings;
            }
            else { return (List<string>)value; }
        }

        #endregion
        //============================================================================================================
        #region PlayerData

        void SaveData() => Interface.Oxide.DataFileSystem.WriteObject("GUIAnnouncementsPlayerData", storedData);

        void LoadSavedData()
        {
            storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>("GUIAnnouncementsPlayerData");
            if (storedData == null)
            {
                PrintWarning("GUIAnnouncement's datafile is null. Recreating data file...");
                storedData = new StoredData();
                SaveData();
                timer.Once(5, () =>
                {
                    PrintWarning("Reloading...");
                    ConsoleSystem.Run.Server.Normal("reload GUIAnnouncements");
                });
            }
        }

        class StoredData
        {
            public Dictionary<ulong, PlayerData> PlayerData = new Dictionary<ulong, PlayerData>();
            public StoredData()
            {
            }
        }

        class PlayerData
        {
            public string Name;
            public string UserID;
            public int TimesJoined;
            public bool Dead;
            public PlayerData()
            {
            }
        }

        void CreatePlayerData(BasePlayer player)
        {
            var Data = new PlayerData();
            Data.Name = player.displayName;
            Data.UserID = player.userID.ToString();
            Data.TimesJoined = 0;
            storedData.PlayerData.Add(player.userID, Data);
            SaveData();
        }

        StoredData storedData;
        void OnServerSave() => SaveData();

        #endregion
        //============================================================================================================
        #region Localization

        void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
                {
                    {"ChatCommandAnnounce", "announce"},
                    {"ChatCommandAnnounceTo", "announceto"},
                    {"ChatCommandAnnounceTest", "announcetest"},
                    {"ChatCommandDestroyAnnouncement", "destroyannouncement"},
                    {"ChatCommandAnnouncementsToggle", "announcementstoggle" },
                    {"ChatCommandScheduleRestart", "announceschedulerestart" },
                    {"ChatCommandSuspendRestart", "announcesuspendrestart" },
                    {"ChatCommandResumeRestart", "announceresumerestart" },
                    {"ChatCommandGetNextRestart", "announcegetnextrestart" },
                    {"ChatCommandCancelScheduledRestart", "announcecancelscheduledrestart" },
                    {"ChatCommandCancelRestart", "announcecancelrestart" },
                    {"ChatCommandHelp", "announcehelp"},
                    {"ConsoleCommandAnnounce", "announce.announce"},
                    {"ConsoleCommandAnnounceTo", "announce.announceto"},
                    {"ConsoleCommandDestroyAnnouncement", "announce.destroy"},
                    {"ConsoleCommandAnnouncementsToggle", "announce.toggle"},
                    {"ConsoleCommandScheduleRestart", "announce.schedulerestart" },
                    {"ConsoleCommandSuspendRestart", "announce.suspendrestart" },
                    {"ConsoleCommandResumeRestart", "announce.resumerestart" },
                    {"ConsoleCommandGetNextRestart", "announce.getnextrestart" },
                    {"ConsoleCommandCancelScheduledRestart", "announce.cancelscheduledrestart" },
                    {"ConsoleCommandCancelRestart", "announce.cancelrestart" },
                    {"ConsoleCommandHelp", "announce.help"},
                    {"PlayerNotFound", "Player not found, check the name and if they are online."},
                    {"NoPermission", "You do not possess the required permissions."},
                    {"ChatCommandAnnounceUsage", "Usage: /announce <message>."},
                    {"ChatCommandAnnounceToUsage", "Usage: /announceto <player> <message>."},
                    {"ChatCommandAnnouncementsToggleUsage", "Usage: /announcementstoggle [player]."},
                    {"ChatCommandScheduleRestartUsage", "Usage: /announceschedulerestart <hh:mm:ss>." },
                    {"ChatCommandCancelScheduledRestartUsage", "Usage: /announcecancelscheduledrestart" },
                    {"ConsoleCommandAnnounceUsage", "Usage: announce.announce <message>."},
                    {"ConsoleCommandAnnounceToUsage", "Usage: announce.announceto <player> <message>."},
                    {"ConsoleCommandAnnouncementsToggleUsage", "Usage: announce.toggle <player>."},
                    {"ConsoleCommandScheduleRestartUsage", "Usage: announce.schedulerestart <hh:mm:ss>." },
                    {"ConsoleCommandCancelScheduledRestartUsage", "Usage: announce.cancelscheduledrestart." },
                    {"RestartAlreadyScheduled", "A restart has already been scheduled for {time}, please cancel that restart first with /announcecancelscheduledrestart or announce.cancelscheduledrestart" },
                    {"LaterThanNextRestart", "Your time will be scheduled later than the next restart at {time}, please make sure you schedule a restart before the aforementioned time." },
                    {"RestartNotScheduled", "A restart has not been scheduled for you to cancel." },
                    {"ScheduledRestartCancelled", "A manually scheduled restart for {time} has been cancelled." },
                    {"Excluded", "{playername} has been excluded from announcements."},
                    {"ExcludedTo", "You have been excluded from announcements."},
                    {"Included", "{playername} is being included in announcements."},
                    {"IncludedTo", "You are being included in announcements."},
                    {"IsExcluded", "{playername} is currently excluded from announcements."},
                    {"YouAreExcluded", "You are excluded from announcements and cannot see that test announcement"},
                    {"PlayerHelp", "Chat commands: /announcementstoggle"},
                    {"AnnounceHelp", "Chat commands: /announce <message>, /announceto <player> <message>, /announcementstoggle [player], /destroyannouncement, /announcecancelrestart | Console commands: announce.announce <message>, announce.announceto <player> <message>, announce.toggle <player>, announce.destroy, announce.cancelrestart"},
                    {"HelicopterAnnouncement", "Patrol helicopter inbound!"},
                    {"HelicopterDeathAnnouncement", "The patrol helicopter has been taken down!"},
                    {"HelicopterDeathAnnouncementWithPlayer", "{playername} got the last shot on the helicopter taking it down!"},
                    {"AirdropAnnouncement", "Airdrop en route!"},
                    {"AirdropAnnouncementWithLocation", "Airdrop en route to x{x}, z{z}!"},
                    {"WelcomeAnnouncement", "Welcome {playername}!"},
                    {"WelcomeBackAnnouncement", "Welcome back {playername}!"},
                    {"RestartAnnouncementsFormat", "Restarting in {time}."},
                    {"GetNextRestart", "Next restart is in {time1} at {time2}" },
                    {"RestartSuspendedChat", "The next restart at {time} has been suspended. Type /announceresumerestart to resume that restart." },
                    {"RestartSuspendedConsole", "The next restart at {time} has been suspended. Type announce.resumerestart to resume that restart." },
                    {"RestartResumed", "The previously suspended restart at {time} has been resumed." },
                    {"SuspendedRestartPassed", "The previously suspended restart at {time} has passed." },
            }, this);
        }

        #endregion
        //============================================================================================================
        #region Initialization

        void OnServerInitialized()
        {
            #if !RUST
            throw new NotSupportedException("This plugin does not support this game.");
            #endif

            LoadGUIAnnouncementsConfig();
            LoadSavedData();
            LoadDefaultMessages();
            permission.RegisterPermission(PermAnnounce, this);
            permission.RegisterPermission(PermAnnounceToggle, this);

            foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
            {
                if (!storedData.PlayerData.ContainsKey(activePlayer.userID))
                {
                    CreatePlayerData(activePlayer);
                    storedData.PlayerData[activePlayer.userID].TimesJoined = storedData.PlayerData[activePlayer.userID].TimesJoined + 1;
                    SaveData();
                }
            }
            foreach (BasePlayer sleepingPlayer in BasePlayer.sleepingPlayerList)
            {
                if (!storedData.PlayerData.ContainsKey(sleepingPlayer.userID))
                {
                    CreatePlayerData(sleepingPlayer);
                    storedData.PlayerData[sleepingPlayer.userID].TimesJoined = storedData.PlayerData[sleepingPlayer.userID].TimesJoined + 1;
                    SaveData();
                }
            }

            if (automaticTimedAnnouncements)
            {
                List<string> automaticTimedAnnouncementsList = ConvertList(Config.Get("Automatic Announcements", "AutomaticTimedAnnouncementsList"));
                ATALEnum = automaticTimedAnnouncementsList.GetEnumerator();
                AutomaticAnnouncementsTimer = timer.Repeat((float)AutomaticTimedAnnouncementsRepeat.TotalSeconds, 0, () =>
                {
                    AutomaticTimedAnnouncements();
                });
            }

            if (restartAnnouncements)
				RestartAnnouncementsStart();

            cmd.AddChatCommand(Lang("ChatCommandAnnounce"), this, "cmdAnnounce");
            cmd.AddChatCommand(Lang("ChatCommandAnnounceTo"), this, "cmdAnnounceTo");
            cmd.AddChatCommand(Lang("ChatCommandAnnounceTest"), this, "cmdAnnounceTest");
            cmd.AddChatCommand(Lang("ChatCommandDestroyAnnouncement"), this, "cmdDestroyAnnouncement");
            cmd.AddChatCommand(Lang("ChatCommandAnnouncementsToggle"), this, "cmdAnnouncementsToggle");
            cmd.AddChatCommand(Lang("ChatCommandScheduleRestart"), this, "cmdScheduleRestart");
            cmd.AddChatCommand(Lang("ChatCommandSuspendRestart"), this, "cmdSuspendRestart");
            cmd.AddChatCommand(Lang("ChatCommandResumeRestart"), this, "cmdResumeRestart");
            cmd.AddChatCommand(Lang("ChatCommandGetNextRestart"), this, "cmdGetNextRestart");
            cmd.AddChatCommand(Lang("ChatCommandCancelScheduledRestart"), this, "cmdCancelScheduledRestart");
            cmd.AddChatCommand(Lang("ChatCommandCancelRestart"), this, "cmdCancelRestart");
            cmd.AddChatCommand(Lang("ChatCommandHelp"), this, "cmdAnnounceHelp");
            cmd.AddConsoleCommand(Lang("ConsoleCommandAnnounce"), this, "ccmdAnnounce");
            cmd.AddConsoleCommand(Lang("ConsoleCommandAnnounceTo"), this, "ccmdAnnounceTo");
            cmd.AddConsoleCommand(Lang("ConsoleCommandDestroyAnnouncement"), this, "ccmdAnnounceDestroy");
            cmd.AddConsoleCommand(Lang("ConsoleCommandAnnouncementsToggle"), this, "ccmdAnnouncementsToggle");
            cmd.AddConsoleCommand(Lang("ConsoleCommandScheduleRestart"), this, "ccmdScheduleRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandSuspendRestart"), this, "ccmdSuspendRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandResumeRestart"), this, "ccmdResumeRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandGetNextRestart"), this, "ccmdGetNextRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandCancelScheduledRestart"), this, "ccmdCancelScheduledRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandCancelRestart"), this, "ccmdCancelRestart");
            cmd.AddConsoleCommand(Lang("ConsoleCommandHelp"), this, "ccmdAnnounceHelp");
        }
        #endregion
        //============================================================================================================
        #region GUI

        public void CreateMsgGUI(string Msg, string bannerTintColor, string textColor, BasePlayer player = null, bool isWelcomeAnnouncement = false, bool isRestartAnnouncement = false)
        {
            var GUI = new CuiElementContainer();
            GUI.Add(new CuiElement
            {
                Name = AnnouncementGUI,
                Components =
                        {
                            new CuiImageComponent {Color = bannerTintColor, FadeIn = fadeInTime},
                            new CuiRectTransformComponent {AnchorMin = BannerAnchorMinX() + BannerAnchorMinY, AnchorMax = BannerAnchorMaxX() + BannerAnchorMaxY}
                        },
                FadeOut = fadeOutTime
            });
            GUI.Add(new CuiElement
            {
                Name = AnnouncementText,
                Components =
                        {
                             new CuiTextComponent {Text = Msg, FontSize = fontSize, Align = TextAnchor.MiddleCenter, FadeIn = fadeInTime, Color = textColor},
                             new CuiRectTransformComponent {AnchorMin = TextAnchorMinX + TextAnchorMinY, AnchorMax = TextAnchorMaxX + TextAnchorMaxY}
                        },
                FadeOut = fadeOutTime
            });
            if (player == null)
            {
                destroyAllGUI();
                var e = BasePlayer.activePlayerList.GetEnumerator();
                for (var i = 0; e.MoveNext(); i++)
                {
                    if (!Exclusions.ContainsKey(e.Current.userID))
                    {
                        GlobalTimerList.Add(e.Current.userID);
                        CuiHelper.AddUi(e.Current, GUI);
                    }
                    else if (isRestartAnnouncement)
                    {
                        SendReply(e.Current, Msg, e.Current.userID);
                    }
                }
                GlobalTimer = timer.Once(announcementDuration, () => destroyGlobalGUI());
                return;
            }
            if (player != null)
            {
                destroyPrivateGUI(player);
                CuiHelper.AddUi(player, GUI);
                if (JustJoined.Contains(player.userID) && welcomeAnnouncement && isWelcomeAnnouncement)
                {
                    JustJoined.Remove(player.userID);
                    PrivateTimers[player] = timer.Once(welcomeAnnouncementDuration, () => destroyPrivateGUI(player));
                    return;
                }
                PrivateTimers[player] = timer.Once(announcementDuration, () => destroyPrivateGUI(player));
            }
        }

        #endregion
        //============================================================================================================
        #region Functions

        void OnPlayerInit(BasePlayer player)
        {
            if (welcomeAnnouncement || newPlayerAnnouncements || respawnAnnouncements)
            {
                JustJoined.Add(player.userID);
            }
            if (!storedData.PlayerData.ContainsKey(player.userID))
            {
                CreatePlayerData(player);
            }
            if (storedData.PlayerData.ContainsKey(player.userID))
            {
                storedData.PlayerData[player.userID].TimesJoined = storedData.PlayerData[player.userID].TimesJoined + 1;
                SaveData();
            }
        }

        void OnPlayerDisconnected(BasePlayer player)
        {
            if (JustJoined.Contains(player.userID))
            {
                JustJoined.Remove(player.userID);
            }
            NewPlayerPrivateTimers.TryGetValue(player, out NewPlayerTimer);
            if (NewPlayerTimer != null && !NewPlayerTimer.Destroyed)
            {
                NewPlayerTimer.Destroy();
            }
            PlayerRespawnedTimers.TryGetValue(player, out PlayerRespawnedTimer);
            if (PlayerRespawnedTimer != null && !PlayerRespawnedTimer.Destroyed)
            {
                PlayerRespawnedTimer.Destroy();
            }
			if (GlobalTimerList.Contains(player.userID))
			{
				GlobalTimerList.Remove(player.userID);
			}
            destroyPrivateGUI(player);
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            if (!storedData.PlayerData.ContainsKey(player.userID))
            {
                CreatePlayerData(player);
                storedData.PlayerData[player.userID].TimesJoined = storedData.PlayerData[player.userID].TimesJoined + 1;
                SaveData();
            }
            if (JustJoined.Contains(player.userID))
            {
                if (welcomeAnnouncement)
                {
                    WelcomeAnnouncement(player);
                    if (!newPlayerAnnouncements && storedData.PlayerData[player.userID].Dead == true && respawnAnnouncements)
                    {
                        storedData.PlayerData[player.userID].Dead = false;
                        timer.Once(welcomeAnnouncementDuration, () => RespawnedAnnouncements(player));
                    }
                }
                if (newPlayerAnnouncements)
                {
                    if (storedData.PlayerData[player.userID].TimesJoined <= newPlayerAnnouncementsShowTimes)
                    {
                        if (welcomeAnnouncement)
                        {
                            timer.Once(welcomeAnnouncementDuration, () => NewPlayerAnnouncements(player));
                        }
                        else
                        {
                            NewPlayerAnnouncements(player);
                        }
                    }
                    else
                    if (storedData.PlayerData[player.userID].Dead == true && respawnAnnouncements)
                    {
                        RespawnedAnnouncements(player);
                        storedData.PlayerData[player.userID].Dead = false;
                    }
                }
                if (!newPlayerAnnouncements && !welcomeAnnouncement && storedData.PlayerData[player.userID].Dead == true && respawnAnnouncements)
                {
                    RespawnedAnnouncements(player);
                    storedData.PlayerData[player.userID].Dead = false;
                }
            }
            else
            if (!JustJoined.Contains(player.userID) && storedData.PlayerData[player.userID].Dead == true && respawnAnnouncements)
            {
                RespawnedAnnouncements(player);
                storedData.PlayerData[player.userID].Dead = false;
            }
            if (!JustJoined.Contains(player.userID) && storedData.PlayerData[player.userID].Dead == true && !welcomeAnnouncement && !newPlayerAnnouncements && respawnAnnouncements)
            {
                RespawnedAnnouncements(player);
                storedData.PlayerData[player.userID].Dead = false;
            }
            if (storedData.PlayerData[player.userID].Dead == true && !respawnAnnouncements)
            {
                storedData.PlayerData[player.userID].Dead = false;
            }
        }

        void destroyAllGUI()
        {
            if (GlobalTimer != null && !GlobalTimer.Destroyed)
            {
                GlobalTimer.Destroy();
            }
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (GlobalTimerList.Contains(player.userID))
                {
                    GlobalTimerList.Remove(player.userID);
                }
                PrivateTimers.TryGetValue(player, out PlayerTimer);
                if (PlayerTimer != null && !PlayerTimer.Destroyed)
                {
                    PlayerTimer.Destroy();
                }
				CuiHelper.DestroyUi(player, AnnouncementGUI);
                CuiHelper.DestroyUi(player, AnnouncementText);
            }
        }

        void destroyGlobalGUI()
        {
			if (GlobalTimer != null && !GlobalTimer.Destroyed)
            {
                GlobalTimer.Destroy();
            }
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (GlobalTimerList.Contains(player.userID))
                {
                    GlobalTimerList.Remove(player.userID);
					CuiHelper.DestroyUi(player, AnnouncementGUI);
                    CuiHelper.DestroyUi(player, AnnouncementText);
                }
            }
        }

        void destroyPrivateGUI(BasePlayer player)
        {
            if (GlobalTimerList.Contains(player.userID))
            {
                GlobalTimerList.Remove(player.userID);
            }
            PrivateTimers.TryGetValue(player, out PlayerTimer);
            if (PlayerTimer != null && !PlayerTimer.Destroyed)
            {
                PlayerTimer.Destroy();
            }
			CuiHelper.DestroyUi(player, AnnouncementGUI);
            CuiHelper.DestroyUi(player, AnnouncementText);
        }

        void Unload()
        {
			destroyAllGUI();
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                NewPlayerPrivateTimers.TryGetValue(player, out NewPlayerTimer);
                if (NewPlayerTimer != null && !NewPlayerTimer.Destroyed)
                    NewPlayerTimer.Destroy();
                PlayerRespawnedTimers.TryGetValue(player, out PlayerRespawnedTimer);
                if (PlayerRespawnedTimer != null && !PlayerRespawnedTimer.Destroyed)
                    PlayerRespawnedTimer.Destroy();
            }
            if (SixtySecondsTimer != null && !SixtySecondsTimer.Destroyed)
                SixtySecondsTimer.Destroy();
            if (AutomaticAnnouncementsTimer != null && !AutomaticAnnouncementsTimer.Destroyed)
                AutomaticAnnouncementsTimer.Destroy();
            if (RealTimeTimer != null && !RealTimeTimer.Destroyed)
                RealTimeTimer.Destroy();
            SaveData();
        }

        void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (helicopterDeathAnnouncementWithKiller && entity is BaseHelicopter && info.Initiator is BasePlayer)
            {
                LastHitPlayer = info.Initiator.ToPlayer().displayName;
            }
        }

        private static BasePlayer FindPlayer(string IDName)
        {
            foreach (BasePlayer targetPlayer in BasePlayer.activePlayerList)
            {
                if (targetPlayer.UserIDString == IDName)
                    return targetPlayer;
                if (targetPlayer.displayName.Contains(IDName, CompareOptions.OrdinalIgnoreCase))
                    return targetPlayer;
            }
            return null;
        }

        private bool hasPermission(BasePlayer player, string perm)
        {
            if (!permission.UserHasPermission(player.userID.ToString(), perm))
            {
                SendReply(player, Lang("NoPermission", player.UserIDString));
                return false;
            }
            return true;
        }
		
		void RestartAnnouncementsStart()
		{
            if (RealTimeTimer != null && !RealTimeTimer.Destroyed)
                RealTimeTimer.Destroy();
            List<string> restartTimes = ConvertList(Config.Get("Automatic Announcements", "RestartTimes"));
            RestartTimes = restartTimes.Select(date => DateTime.Parse(date)).ToList();
            RestartAnnouncementsWhenStrings = ConvertList(Config.Get("Automatic Announcements", "RestartAnnouncementsWhen"));
            List<TimeSpan> RestartAnnouncementsWhen = RestartAnnouncementsWhenStrings.Select(date => TimeSpan.Parse(date)).ToList();
            GetNextRestart(RestartTimes);
            RealTimeTimer = timer.Repeat(0.5f, 0, () => RestartAnnouncements(RestartAnnouncementsWhen));
        }
		

        void GetNextRestart(List<DateTime> DateTimes)
        {
            var e = DateTimes.GetEnumerator();
            for (var i = 0; e.MoveNext(); i++)
            {
                if (DateTime.Compare(DateTime.Now, e.Current) < 0)
                {
                    CalcNextRestartDict.Add(e.Current, e.Current.Subtract(DateTime.Now));
                }
                if (DateTime.Compare(DateTime.Now, e.Current) > 0)
                {
                    CalcNextRestartDict.Add(e.Current.AddDays(1), e.Current.AddDays(1).Subtract(DateTime.Now));
                }
            }
            NextRestart = CalcNextRestartDict.Aggregate((l, r) => l.Value < r.Value ? l : r).Key;
            CalcNextRestartDict.Clear();
            Puts("Next restart is at " + NextRestart.ToLongTimeString());
            Puts("Time until next restart is " + NextRestart.Subtract(DateTime.Now).ToShortString());
        }
		
		string Lang(string key, string userId = null) => lang.GetMessage(key, this, userId);

        #endregion
        //============================================================================================================
        #region Auto Announcements

        void RestartAnnouncements(List<TimeSpan> RestartAnnouncementsWhen)
        {
            var currentTime = DateTime.Now;
            if (NextRestart <= currentTime)
            {
                if (RestartSuspended)
                {
                    Puts(Lang("SuspendedRestartPassed").Replace("{time}", NextRestart.ToLongTimeString()));
                    RestartSuspended = false;
                }
                RestartAnnouncementsStart();
                return;
            }
            if (!RestartSuspended)
            {
                TimeSpan timeLeft = NextRestart.Subtract(currentTime);
                string secondsString = String.Empty;
                int hoursLeft = timeLeft.Hours;
                int minutesLeft = timeLeft.Minutes;
                int secondsLeft = timeLeft.Seconds;
                if ((!RestartCountdown && RestartAnnouncementsWhenStrings.Contains(timeLeft.ToShortString()) && ((LastHour != currentTime.Hour) || (LastMinute != currentTime.Minute))) || RestartJustScheduled)
                {
                    string timeLeftString = String.Empty;
                    if (RestartJustScheduled)
                        RestartJustScheduled = false;
                    if (hoursLeft > 0)
                    {
                        timeLeftString = timeLeftString + hoursLeft + " hours";
                        LastHour = currentTime.Hour;
                    }
                    if (hoursLeft == 1)
                    {
                        timeLeftString = timeLeftString + hoursLeft + " hour";
                        LastHour = currentTime.Hour;
                    }
                    if (minutesLeft > 0)
                    {
                        timeLeftString = timeLeftString + minutesLeft + " minutes";
                        LastMinute = currentTime.Minute;
                    }
                    Puts(Lang("RestartAnnouncementsFormat").Replace("{time}", timeLeftString));
                    CreateMsgGUI(Lang("RestartAnnouncementsFormat").Replace("{time}", timeLeftString), BannerTintGrey, TextWhite, null, false, true);
                }
                if (timeLeft <= new TimeSpan(00, 01, 00) && !RestartCountdown)
                {
                    int countDown = timeLeft.Seconds;
                    RestartCountdown = true;
                    CreateMsgGUI(Lang("RestartAnnouncementsFormat").Replace("{time}", countDown.ToString() + " seconds"), BannerTintGrey, TextWhite);
                    SixtySecondsTimer = timer.Repeat(1, countDown + 1, () =>
                        {
                            if (countDown == 1)
                                secondsString = " second";
                            else
                                secondsString = " seconds";
                            CreateMsgGUI(Lang("RestartAnnouncementsFormat").Replace("{time}", countDown.ToString() + secondsString), BannerTintGrey, TextWhite);
                            countDown = countDown - 1;
                            if (countDown == 0 && restartServer)
                            {
                                rust.RunServerCommand("saveall");
                                timer.Once(3, () => rust.RunServerCommand("restart 0"));
                            }
                        });
                }
            }
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (helicopterAnnouncement && entity is BaseHelicopter)
            {
                CreateMsgGUI(Lang("HelicopterAnnouncement"), BannerTintRed, TextOrange);
            }
        }

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (helicopterDeathAnnouncement && entity is BaseHelicopter)
            {
                if (helicopterDeathAnnouncementWithKiller)
                {
                    CreateMsgGUI(Lang("HelicopterDeathAnnouncementWithPlayer").Replace("{playername}", LastHitPlayer), BannerTintRed, TextWhite);
                    LastHitPlayer = String.Empty;
                }
                else
                {
                    CreateMsgGUI(Lang("HelicopterDeathAnnouncement"), BannerTintRed, TextWhite);
                }
            }
            if (entity is BasePlayer)
            {
                if (storedData.PlayerData.ContainsKey(entity.ToPlayer().userID))
                {
                    storedData.PlayerData[entity.ToPlayer().userID].Dead = true;
                    SaveData();
                }
            }
        }

        void OnAirdrop(CargoPlane plane, Vector3 location)
        {
            if (airdropAnnouncement)
            {
                if (airdropAnnouncementLocation)
                {
                    string x = location.x.ToString(), z = location.z.ToString();
                    CreateMsgGUI(Lang("AirdropAnnouncementWithLocation").Replace("{x}", x).Replace("{z}", z), BannerTintGreen, TextYellow);
                }
                else CreateMsgGUI(Lang("AirdropAnnouncement"), BannerTintGreen, TextYellow);
            }
        }

        void WelcomeAnnouncement(BasePlayer player)
        {
            if (welcomeAnnouncement)
            {
                if (welcomeBackAnnouncement && storedData.PlayerData[player.userID].TimesJoined > 1)
                {
                    CreateMsgGUI(Lang("WelcomeBackAnnouncement").Replace("{playername}", player.displayName), BannerTintGrey, TextWhite, player, true);
                }
                else
                {
                    CreateMsgGUI(Lang("WelcomeAnnouncement").Replace("{playername}", player.displayName), BannerTintGrey, TextWhite, player, true);
                }
            }
        }

        void NewPlayerAnnouncements(BasePlayer player)
        {
			if (JustJoined.Contains(player.userID))
            {
                JustJoined.Remove(player.userID);
            }
			List<string> newPlayerAnnouncementsList = ConvertList(Config.Get("Automatic Announcements", "NewPlayerAnnouncementsList"));
			List<string>.Enumerator e = newPlayerAnnouncementsList.GetEnumerator();
			if (storedData.PlayerData[player.userID].Dead == true && respawnAnnouncements)
            {
                PlayerRespawnedTimers[player] = timer.Once(announcementDuration * newPlayerAnnouncementsList.Count, () => RespawnedAnnouncements(player));
                storedData.PlayerData[player.userID].Dead = false;
                SaveData();
            }
            e.MoveNext();
            CreateMsgGUI(e.Current, BannerTintGrey, TextWhite, player);
            NewPlayerPrivateTimers[player] = timer.Repeat(announcementDuration, newPlayerAnnouncementsList.Count - 1, () =>
            {
                e.MoveNext();
                CreateMsgGUI(e.Current, BannerTintGrey, TextWhite, player);
            });
        }

        void RespawnedAnnouncements(BasePlayer player)
        {
            if(JustJoined.Contains(player.userID))
            {
                JustJoined.Remove(player.userID);
            }
            List<string> respawnAnnouncementsList = ConvertList(Config.Get("Automatic Announcements", "RespawnAnnouncementsList"));
            List<string>.Enumerator e = respawnAnnouncementsList.GetEnumerator();
            e.MoveNext();
            CreateMsgGUI(e.Current, BannerTintGrey, TextWhite, player);
            PlayerRespawnedTimers[player] = timer.Repeat(announcementDuration, respawnAnnouncementsList.Count - 1, () =>
            {
                e.MoveNext();
                CreateMsgGUI(e.Current, BannerTintGrey, TextWhite, player);
            });
        }

        void AutomaticTimedAnnouncements()
        {
            if (ATALEnum.MoveNext() == false)
            {
                ATALEnum.Reset();
                ATALEnum.MoveNext();
            }
            CreateMsgGUI(ATALEnum.Current, BannerTintGrey, TextWhite);
        }

        #endregion
        //============================================================================================================
        #region Commands

        void cmdAnnounce(BasePlayer player, string cmd, string[] args)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (args.Length >= 1)
                {
                    string Msg = "";
                    for (int i = 0; i < args.Length; i++)
                        Msg = Msg + " " + args[i];
                    CreateMsgGUI(Msg, BannerTintGrey, TextWhite);
                }
                else SendReply(player, Lang("ChatCommandAnnounceUsage", player.UserIDString));
            }
        }

        void ccmdAnnounce(ConsoleSystem.Arg arg)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                if (arg.Args == null || arg?.Args?.Length <= 0)
                {
                    SendReply(arg, Lang("ConsoleCommandAnnounceUsage"));
                    return;
                }
                if (arg.Args.Length >= 1)
                {
                    string Msg = "";
                    for (int i = 0; i < arg.Args.Length; i++)
                        Msg = Msg + " " + arg.Args[i];
                    CreateMsgGUI(Msg, BannerTintGrey, TextWhite);
                }
            }
        }

        void cmdAnnounceTo(BasePlayer player, string cmd, string[] args)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (args.Length >= 2)
                {
                    string targetPlayer = args[0].ToLower(), Msg = "";
                    for (int i = 1; i < args.Length; i++)
                        Msg = Msg + " " + args[i];
                    BasePlayer targetedPlayer = FindPlayer(targetPlayer);
                    if (targetedPlayer != null)
                    {
                        if (!Exclusions.ContainsKey(targetedPlayer.userID))
                        {
                            CreateMsgGUI(Msg, BannerTintGrey, TextWhite, targetedPlayer);
                        }
                        else SendReply(player, Lang("IsExcluded", player.UserIDString).Replace("{playername}", targetedPlayer.displayName));
                    }
                    else SendReply(player, Lang("PlayerNotFound", player.UserIDString));
                }
                else SendReply(player, Lang("ChatCommandAnnounceToUsage", player.UserIDString));
            }
        }

        void ccmdAnnounceTo(ConsoleSystem.Arg arg, string[] args)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                if (arg.Args == null || arg?.Args?.Length <= 1)
                {
                    SendReply(arg, Lang("ConsoleCommandAnnounceToUsage"));
                    return;
                }
                string targetPlayer = arg.Args[0].ToLower(), Msg = "";
                for (int i = 1; i < arg.Args.Length; i++)
                    Msg = Msg + " " + arg.Args[i];
                BasePlayer targetedPlayer = FindPlayer(targetPlayer);
                if (targetedPlayer != null)
                {
                    if (!Exclusions.ContainsKey(targetedPlayer.userID))
                    {
                        CreateMsgGUI(Msg, BannerTintGrey, TextWhite, targetedPlayer);
                    }
                    else SendReply(arg, Lang("IsExcluded").Replace("{playername}", targetedPlayer.displayName));
                }
                else SendReply(arg, Lang("PlayerNotFound"));
            }
        }

        void cmdAnnounceTest(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (!Exclusions.ContainsKey(player.userID))
                {
                    string Msg = "GUIAnnouncements Test Announcement";
                    CreateMsgGUI(Msg, BannerTintGrey, TextWhite, player);
                }
                else SendReply(player, Lang("YouAreExcluded"), player.displayName);
            }
        }

        void cmdDestroyAnnouncement(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                destroyAllGUI();
            }
        }

        void ccmdAnnounceDestroy(ConsoleSystem.Arg arg)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                destroyAllGUI();
            }
        }

        void cmdAnnouncementsToggle(BasePlayer player, string cmd, string[] args)
        {
            if (args == null || args.Length < 1)
            {
                if (Exclusions.ContainsKey(player.userID))
                {
                    Exclusions.Remove(player.userID);
                    SendReply(player, Lang("IncludedTo", player.UserIDString));
                    return;
                }
                else
                {
                    if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounceToggle) || hasPermission(player, PermAnnounce))
                    {
                        Exclusions.Add(player.userID, player.displayName);
                        SendReply(player, Lang("ExcludedTo", player.UserIDString));
                    }
                }
            }
            if (args.Length > 0)
            {
                if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
                {
                    string targetPlayer = args[0].ToLower();
                    ulong targetPlayerUID64; ulong.TryParse(targetPlayer, out targetPlayerUID64);
                    BasePlayer targetedPlayer = FindPlayer(targetPlayer);
                    var GetKey = Exclusions.FirstOrDefault(x => x.Value.Contains(targetPlayer, CompareOptions.OrdinalIgnoreCase)).Key;
                    if (Exclusions.ContainsKey(GetKey) || Exclusions.ContainsKey(targetPlayerUID64))
                    {
                        string PlayerName = Exclusions[GetKey];
                        Exclusions.Remove(GetKey); Exclusions.Remove(targetPlayerUID64);
                        SendReply(player, Lang("Included", player.UserIDString).Replace("{playername}", PlayerName));
                        if (targetedPlayer != null)
                        {
                            SendReply(targetedPlayer, Lang("IncludedTo", targetedPlayer.UserIDString));
                        }
                    }
                    else
                    if (targetedPlayer != null)
                    {
                        Exclusions.Add(targetedPlayer.userID, targetedPlayer.displayName);
                        SendReply(player, Lang("Excluded", player.UserIDString).Replace("{playername}", targetedPlayer.displayName));
                        SendReply(targetedPlayer, Lang("ExcludedTo", targetedPlayer.UserIDString));
                    }
                    else SendReply(player, Lang("PlayerNotFound", player.UserIDString));
                }
            }
        }

        void ccmdAnnouncementsToggle(ConsoleSystem.Arg arg, string[] args)
        {
            if (arg?.Args?.Length > 0)
            {
                if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
                {
                    string targetPlayer = arg.Args[0].ToLower();
                    ulong targetPlayerUID64; ulong.TryParse(targetPlayer, out targetPlayerUID64);
                    BasePlayer targetedPlayer = FindPlayer(targetPlayer);
                    var GetKey = Exclusions.FirstOrDefault(x => x.Value.Contains(targetPlayer, CompareOptions.OrdinalIgnoreCase)).Key;
                    if (Exclusions.ContainsKey(GetKey) || Exclusions.ContainsKey(targetPlayerUID64))
                    {
                        string PlayerName = Exclusions[GetKey];
                        Exclusions.Remove(GetKey); Exclusions.Remove(targetPlayerUID64);
                        SendReply(arg, Lang("Included").Replace("{playername}", PlayerName));
                        if (targetedPlayer != null)
                        {
                            SendReply(targetedPlayer, Lang("IncludedTo", targetedPlayer.UserIDString));
                        }
                    }
                    else
                        if (targetedPlayer != null)
                    {
                        Exclusions.Add(targetedPlayer.userID, targetedPlayer.displayName);
                        SendReply(arg, Lang("Excluded").Replace("{playername}", targetedPlayer.displayName));
                        SendReply(targetedPlayer, Lang("ExcludedTo", targetedPlayer.UserIDString));
                    }
                    else SendReply(arg, Lang("PlayerNotFound"));
                }
            }
            else SendReply(arg, Lang("ConsoleCommandAnnouncementsToggleUsage"));
        }

        void cmdScheduleRestart(BasePlayer player, string cmd, string[] args)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (args.Length == 1)
                {
                    if (!RestartCountdown)
                    {
                        if (!RestartScheduled)
                        {
                            var currentTime = DateTime.Now;
                            TimeSpan scheduleRestart;
                            if (TimeSpan.TryParse(args[0], out scheduleRestart))
                            {
                                if (restartAnnouncements && currentTime.Add(scheduleRestart) < NextRestart)
                                {
                                    Puts("Restart scheduled in " + scheduleRestart.ToShortString());
                                    RestartTimes.Add(currentTime.Add(scheduleRestart + new TimeSpan(00, 00, 01)));
                                    ScheduledRestart = currentTime.Add(scheduleRestart + new TimeSpan(00, 00, 01));
                                    RestartScheduled = true;
                                    RestartJustScheduled = true;
                                    GetNextRestart(RestartTimes);
                                }
                                else SendReply(player, Lang("LaterThanNextRestart", player.UserIDString).Replace("{time}", NextRestart.ToShortTimeString()));
                            }
                            else SendReply(player, Lang("ChatCommandScheduleRestartUsage", player.UserIDString));
                        }
                        else SendReply(player, Lang("RestartAlreadyScheduled").Replace("{time}", NextRestart.ToShortTimeString()));
                    }
                }
                else SendReply(player, Lang("ChatCommandScheduleRestartUsage", player.UserIDString));
            }
        }

        void ccmdScheduleRestart(ConsoleSystem.Arg arg, string[] args)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                if (arg?.Args?.Length == 1)
                {
                    if (!RestartCountdown)
                    {
                        if (!RestartScheduled)
                        {
                            var currentTime = DateTime.Now;
                            TimeSpan scheduleRestart; TimeSpan.TryParse(arg.Args[0], out scheduleRestart);
                            if (restartAnnouncements && currentTime.Add(scheduleRestart) < NextRestart)
                            {
                                Puts("Restart scheduled in" + scheduleRestart.ToShortString());
                                RestartTimes.Add(currentTime.Add(scheduleRestart + new TimeSpan(00, 00, 01)));
                                ScheduledRestart = currentTime.Add(scheduleRestart + new TimeSpan(00, 00, 01));
                                RestartScheduled = true;
                                RestartJustScheduled = true;
                                GetNextRestart(RestartTimes);
                            }
                            else SendReply(arg, Lang("LaterThanNextRestart").Replace("{time}", NextRestart.ToShortTimeString()));
                        }
                        else SendReply(arg, Lang("RestartAlreadyScheduled").Replace("{time}", NextRestart.ToShortTimeString()));
                    }
                }
                else SendReply(arg, Lang("ChatCommandScheduleRestartUsage"));
            }
        }

        void cmdCancelScheduledRestart(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (RestartScheduled)
                {
                    RestartTimes.Remove(ScheduledRestart);
                    GetNextRestart(RestartTimes);
                    Puts(Lang("ScheduledRestartCancelled").Replace("{time}", ScheduledRestart.ToShortTimeString()));
                    SendReply(player, (Lang("ScheduledRestartCancelled", player.UserIDString).Replace("{time}", ScheduledRestart.ToShortTimeString())));
                }
                else SendReply(player, Lang("RestartNotScheduled", player.UserIDString));
            }
        }

        void ccmdCancelScheduledRestart(ConsoleSystem.Arg arg, string cmd)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                if (RestartScheduled)
                {
                    RestartTimes.Remove(ScheduledRestart);
                    GetNextRestart(RestartTimes);
                    SendReply(arg, (Lang("ScheduledRestartCancelled").Replace("{time}", ScheduledRestart.ToShortTimeString())));
                }
                else SendReply(arg, Lang("RestartNotScheduled"));
            }
        }

        void cmdSuspendRestart(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                RestartSuspended = true;
                SendReply(player, Lang("RestartSuspendedChat", player.UserIDString).Replace("{time}", NextRestart.ToLongTimeString()));
            }
        }

        void ccmdSuspendRestart(ConsoleSystem.Arg arg, string cmd)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                RestartSuspended = true;
                SendReply(arg, Lang("RestartSuspendedConsole").Replace("{time}", NextRestart.ToLongTimeString()));
            }
        }

        void cmdResumeRestart(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                RestartSuspended = false;
                SendReply(player, Lang("RestartResumed", player.UserIDString).Replace("{time}", NextRestart.ToLongTimeString()));
            }
        }

        void ccmdResumeRestart(ConsoleSystem.Arg arg, string cmd)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                RestartSuspended = false;
                SendReply(arg, Lang("RestartResumed").Replace("{time}", NextRestart.ToLongTimeString()));
            }
        }

        void cmdGetNextRestart(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                var timeLeft = NextRestart.Subtract(DateTime.Now);
                SendReply(player, Lang("GetNextRestart", player.UserIDString).Replace("{time1}", timeLeft.ToShortString()).Replace("{time2}", NextRestart.ToLongTimeString()));
            }
        }

        void ccmdGetNextRestart(ConsoleSystem.Arg arg, string cmd)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                var timeLeft = NextRestart.Subtract(DateTime.Now);
                SendReply(arg, Lang("GetNextRestart").Replace("{time1}", timeLeft.ToShortString()).Replace("{time2}", NextRestart.ToLongTimeString()));
            }
        }

        void cmdCancelRestart(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                if (SixtySecondsTimer != null && !SixtySecondsTimer.Destroyed)
                {
                    SixtySecondsTimer.Destroy();
                    SendReply(player, Lang("RestartTimerCanceled", player.UserIDString));
                    PrintWarning(Lang("RestartTimeCanceled"));
					timer.Once(60, () => RestartCountdown = false);
                }
            }
        }

        void ccmdCancelRestart(ConsoleSystem.Arg arg)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                if (SixtySecondsTimer != null && !SixtySecondsTimer.Destroyed)
                {
                    SixtySecondsTimer.Destroy();
                    SendReply(arg, Lang("RestartTimerCanceled"));
                    PrintWarning(Lang("RestartTimeCanceled"));
					timer.Once(60, () => RestartCountdown = false);
                }
            }
        }

        void cmdAnnounceHelp(BasePlayer player, string cmd)
        {
            if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounce))
            {
                SendReply(player, Lang("AnnounceHelp", player.UserIDString));
            }
            else
                if (player.net.connection.authLevel > 0 || hasPermission(player, PermAnnounceToggle))
            {
                SendReply(player, Lang("PlayerHelp", player.UserIDString));
            }
        }

        void ccmdAnnounceHelp(ConsoleSystem.Arg arg)
        {
            if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounce))
            {
                SendReply(arg, Lang("AnnounceHelp"));
            }
            else
                if (arg.isAdmin || hasPermission(arg.connection.player as BasePlayer, PermAnnounceToggle))
            {
                SendReply(arg, Lang("PlayerHelp"));
            }
        }
        #endregion
    }
}

// --- End of file: GUIAnnouncements.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/NPCGrenades.cs ---
// --- Original Local Path: NPCGrenades.cs ---

using Facepunch;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Rust;
using System;
using System.Linq;
using System.Collections;
using System.Globalization;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

namespace Oxide.Plugins
{
    [Info("NPC Grenades", "Sempai#3239", "1.2.2")]
    [Description("F1 grenades spawn various NPCs when thrown.")]
    public class NPCGrenades: CovalencePlugin
    {
        #region plugin refs

        [PluginReference]
        private Plugin Friends, Clans, Kits;

        #endregion

        #region Consts

        private static NPCGrenades plugin;
        private static System.Random random = new System.Random();
        private static VersionNumber previousVersion;

        public const int f1GrenadeId = 143803535;
        public const ulong scientistSkinID = 2640541557;
        public const ulong heavySkinID = 2640541496;
        public const ulong juggernautSkinID = 2647297156;
        public const ulong tunnelSkinID = 2676146196;
        public const ulong underwaterSkinID = 2676146329;
        public const ulong murdererSkinID = 2643502595;
        public const ulong scarecrowSkinID = 2647297210;
        public const ulong mummySkinID = 2643385137;
        public const ulong bearSkinID = 2647301111;
        public const ulong polarbearSkinID = 2868239755;
        public const ulong wolfSkinID = 2647303718;
        public const ulong boarSkinID = 2643502513;
        public const ulong stagSkinID = 2647297256;
        public const ulong chickenSkinID = 2647297056;
        public const ulong bradleySkinID = 2643385052;
        
        public const string scientistPrefab = "assets/rust.ai/agents/npcplayer/humannpc/scientist/scientistnpc_roam.prefab";
        public const string heavyPrefab = "assets/rust.ai/agents/npcplayer/humannpc/scientist/scientistnpc_heavy.prefab";
        public const string scarecrowPrefab = "assets/prefabs/npc/scarecrow/scarecrow.prefab";
        public const string bearPrefab = "assets/rust.ai/agents/bear/bear.prefab";
        public const string polarbearPrefab = "assets/rust.ai/agents/bear/polarbear.prefab";
        public const string wolfPrefab = "assets/rust.ai/agents/wolf/wolf.prefab";
        public const string boarPrefab = "assets/rust.ai/agents/boar/boar.prefab";
        public const string stagPrefab = "assets/rust.ai/agents/stag/stag.prefab";
        public const string chickenPrefab = "assets/rust.ai/agents/chicken/chicken.prefab";
        public const string bradleyPrefab = "assets/prefabs/npc/m2bradley/bradleyapc.prefab";
        
        public const string murdererChatter = "assets/prefabs/npc/murderer/sound/breathing.prefab";
        public const string murdererDeath = "assets/prefabs/npc/murderer/sound/death.prefab";
        public const string fleshBloodImpact = "assets/bundled/prefabs/fx/impacts/slash/flesh/fleshbloodimpact.prefab";
        public const string explosionSound = "assets/prefabs/weapons/f1 grenade/effects/f1grenade_explosion.prefab";
        public const string bradleyExplosion = "assets/prefabs/npc/m2bradley/effects/bradley_explosion.prefab";

        public const string permScientist = "npcgrenades.scientist";
        public const string permHeavy = "npcgrenades.heavy";
        public const string permJuggernaut = "npcgrenades.juggernaut";
        public const string permTunnel = "npcgrenades.tunnel";
        public const string permUnderwater = "npcgrenades.underwater";
        public const string permMurderer = "npcgrenades.murderer";
        public const string permScarecrow = "npcgrenades.scarecrow";
        public const string permMummy = "npcgrenades.mummy";
        public const string permBear = "npcgrenades.bear";
        public const string permPolarbear = "npcgrenades.polarbear";
        public const string permWolf = "npcgrenades.wolf";
        public const string permBoar = "npcgrenades.boar";
        public const string permStag = "npcgrenades.stag";
        public const string permChicken = "npcgrenades.chicken";
        public const string permBradley = "npcgrenades.bradley";
        public const string permAdmin = "npcgrenades.admin";

        #endregion

        #region Language

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Syntax"] = "Invalid syntax, use: /npcnade.give <type> <SteamID/PlayerName>",
                ["WrongType"] = "Grenade type \"{0}\" not recognised, please check & try again.",
                ["Received"] = "You received a {0}!",
                ["PlayerReceived"] = "Player {0} ({1}) received a {2}!",
                ["Permission"] = "You do not have permission to use {0}!",
                ["NotEnabled"] = "{0} is not enabled!",
                ["NotAdmin"] = "You do not have permission to use that command!",
                ["PlayerNotFound"] = "Can't find a player with the name or ID: {0}",
                ["PlayersFound"] = "Multiple players found, please be more specific: {0}",
                ["UnderWater"] = "{0} ({1}) spawned under water and was killed.",
                ["InSafeZone"] = "{0} ({1}) spawned in as Safe Zone and was killed.",
                ["Outside"] = "{0} ({1}) spawned inside and was killed.",
                ["OnStructure"] = "{0} ({1}) spawned on a building and was killed.",
                ["IsInRock"] = "{0} ({1}) spawned inside terrain and was killed.",
                ["ConsoleSyntax"] = "Invalid syntax, use: npcnade.give <type> <SteamID/PlayerName>",
                ["InvalidNade"] = "Grenade type \"{0}\" not recognised, please check and try again!"
            }, this);
        }

        private string GetMessage(string messageKey, string playerID, params object[] args) {
            return string.Format(lang.GetMessage(messageKey, this, playerID), args);
        }

        private void Message(IPlayer player, string messageKey, params object[] args)
        {
            var message = GetMessage(messageKey, player.Id, args);
            if (config.options.usePrefix)
            {
                player.Reply(config.options.chatPrefix + message);
            }
            else
            {
                player.Reply(message);
            }
        }

        private void Message(BasePlayer player, string messageKey, params object[] args)
        {
            if (player is NPCPlayer)
            {
                return;
            }
            var message = GetMessage(messageKey, player.UserIDString, args);
            if (config.options.usePrefix && config.options.chatPrefix != string.Empty)
            {
                player.ChatMessage(config.options.chatPrefix + message);
            }
            else
            {
                player.ChatMessage(message);
            }
        }

        #endregion

        #region Oxide Hooks

        private void OnServerInitialized()
        {
            plugin = this;
        }

        private void Init()
        {
            LoadNadeInfo();
            permission.RegisterPermission(permAdmin, this);
            foreach (var item in NadeInfo.Keys)
            {
                permission.RegisterPermission(NadeInfo[item].Perm, this);
            }
            try
            {
                storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);
                if (storedData == null)
                {
                    Puts("Data file is blank. Creating default data file.");
                    LoadDefaultData();
                }
            }
            catch (Exception ex)
            {
                if (ex is JsonSerializationException || ex is NullReferenceException || ex is JsonReaderException)
                {
                    Puts($"Exception Type: {ex.GetType()}");
                    Puts("Data file contains errors. Either fix the errors or delete the data file and reload the plugin for default values.");
                    return;
                }
                throw;
            }
            LoadDefaultData();
        }

        private void Unload()
        {
            plugin = null;
            NadeInfo = null;
            GrenadeNPCData = null;
            BaseNpcData = null;
            BradleyAPCData = null;
            NPCInventories = null;
        }

        private void OnServerSave()
        {
            int delay  = random.Next(10, 30);
            timer.Once(delay, () =>
            {
                SaveData();
            });
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (IsNpcGrenade(entity.skinID))
            {
                NPCPlayer npc = entity as NPCPlayer;
                if (npc is ScientistNPC || npc is ScarecrowNPC)
                {
                    if (npc?.userID != null && GrenadeNPCData.ContainsKey(npc.userID) && !NPCInventories.ContainsKey(npc.userID)) 
                    {
                        npc.children.Clear();
                        ItemContainer[] source = { npc.inventory.containerMain, npc.inventory.containerWear, npc.inventory.containerBelt };
                        Inv npcInv = new Inv() { name = npc.displayName, };
                        NPCInventories.Add(npc.userID, npcInv);
                        for (int i = 0; i < source.Length; i++)
                        {
                            foreach (var item in source[i].itemList)
                            {
                                npcInv.inventory[i].Add(new InvContents
                                {
                                    ID = item.info.itemid,
                                    amount = item.amount,
                                    skinID = item.skin,
                                });
                            }
                        }
                    }
                    timer.Once(5.0f, () =>
                    {
                        RemoveNpcData(npc.userID);
                    });
                }
                else
                {
                    RemoveNpcData(entity.net.ID);
                }
            }
        }

        // Below adds proper grenade names to items added via kits/loadouts by plugins which don't specify a name
        // in the config. This means when players click on the item in inventory it keeps the NPC Nade name.
        // It is also needed for checks later on.
        private void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            if (IsNpcGrenade(item.skin))
            {
                if (item.name == null)
                {
                    if (NadeInfo.ContainsKey(item.skin))
                    {
                        item.name = NadeInfo[item.skin].Name;
                    }
                }
            }
        }

        // This hook works regardless of whether player or NPC player. OnExplosiveThrown only hooks for players.
        private void OnExplosiveFuseSet(TimedExplosive explosive, float fuseLength)
        {
            var npc = explosive.creatorEntity as BasePlayer;
            if (npc == null || !npc.IsAlive())
                return;

            var item = npc.GetActiveItem();
            if (item == null || explosive == null)
                return;

            if (IsNpcGrenade(item.skin))
            {
                OnNpcNadeThrown(npc, explosive, item);
            }
        }

        // Changed to a custom call due to OnExplosiveThrown not hooking NPC throws
        private void OnNpcNadeThrown(BaseEntity thrower, BaseEntity entity, Item npcNade)
        {
            var player = thrower as BasePlayer;
            if (!IsNpcGrenade(npcNade.skin))
            {
                return;
            }
            else if (!NadeInfo[npcNade.skin].Enabled)
            {
                NextTick(() => {
                    entity.Kill();
                });
                if (player is NPCPlayer)
                {
                    Puts($"An NPC player is trying to throw an NPCGrenade which is not enabled in the config: {npcNade.name}");
                    return;
                }
                else
                {
                    GiveNade(player, npcNade.skin, npcNade.name, "refund");
                    Message(player, "NotEnabled", npcNade.name);
                    return;
                }
            }
            if (config.options.usePerms && !HasPermission(player, npcNade))
            {
                NextTick(() => {
                    entity.Kill();
                });
                GiveNade(player, npcNade.skin, npcNade.name, "refund");
                Message(player, "Permission", npcNade.name);
                return;
            }
            timer.Once(2.4f, () =>
            {
                if (entity != null)
                {
                    var position = entity.transform.position;
                    NextTick(() => {
                        entity.Kill();
                    });
                    if (player == null || !player.IsAlive())
                    {
                        return;
                    }
                    if (storedData.HumanNPC.ContainsKey(npcNade.name))
                    {
                        NPCPlayerData settings = new NPCPlayerData
                        {
                            Name = storedData.HumanNPC[npcNade.name].Name,
                            Prefab = storedData.HumanNPC[npcNade.name].Prefab,
                            Health = storedData.HumanNPC[npcNade.name].Health,
                            MaxRoamRange = storedData.HumanNPC[npcNade.name].MaxRoamRange,
                            SenseRange = storedData.HumanNPC[npcNade.name].SenseRange,
                            ListenRange = storedData.HumanNPC[npcNade.name].ListenRange,
                            AggroRange = storedData.HumanNPC[npcNade.name].AggroRange,
                            DeAggroRange = storedData.HumanNPC[npcNade.name].DeAggroRange,
                            TargetLostRange = storedData.HumanNPC[npcNade.name].TargetLostRange,
                            MemoryDuration = storedData.HumanNPC[npcNade.name].MemoryDuration,
                            VisionCone = storedData.HumanNPC[npcNade.name].VisionCone,
                            CheckVisionCone = storedData.HumanNPC[npcNade.name].CheckVisionCone,
                            CheckLOS = storedData.HumanNPC[npcNade.name].CheckLOS,
                            IgnoreNonVisionSneakers = storedData.HumanNPC[npcNade.name].IgnoreNonVisionSneakers,
                            DamageScale = storedData.HumanNPC[npcNade.name].DamageScale,
                            PeaceKeeper = storedData.HumanNPC[npcNade.name].PeaceKeeper,
                            IgnoreSafeZonePlayers = storedData.HumanNPC[npcNade.name].IgnoreSafeZonePlayers,
                            RadioChatter = storedData.HumanNPC[npcNade.name].RadioChatter,
                            DeathSound = storedData.HumanNPC[npcNade.name].DeathSound,
                            NumberToSpawn = storedData.HumanNPC[npcNade.name].NumberToSpawn,
                            SpawnRadius = storedData.HumanNPC[npcNade.name].SpawnRadius,
                            DespawnTime = storedData.HumanNPC[npcNade.name].DespawnTime,
                            KillInSafeZone = storedData.HumanNPC[npcNade.name].KillInSafeZone,
                            StripCorpseLoot = storedData.HumanNPC[npcNade.name].StripCorpseLoot,
                            KitList = storedData.HumanNPC[npcNade.name].KitList,
                            Speed = storedData.HumanNPC[npcNade.name].Speed,
                            Acceleration = storedData.HumanNPC[npcNade.name].Acceleration,
                            FastSpeedFraction = storedData.HumanNPC[npcNade.name].FastSpeedFraction,
                            NormalSpeedFraction = storedData.HumanNPC[npcNade.name].NormalSpeedFraction,
                            SlowSpeedFraction = storedData.HumanNPC[npcNade.name].SlowSpeedFraction,
                            SlowestSpeedFraction = storedData.HumanNPC[npcNade.name].SlowestSpeedFraction,
                            LowHealthMaxSpeedFraction = storedData.HumanNPC[npcNade.name].LowHealthMaxSpeedFraction,
                            TurnSpeed = storedData.HumanNPC[npcNade.name].TurnSpeed,
                            ExplosionSound = storedData.HumanNPC[npcNade.name].ExplosionSound
                        };
                        if (settings.Prefab.Contains("scarecrow"))
                        {
                            SpawnScarecrow(player, npcNade, position, settings);
                            return;
                        }
                        else
                        {
                            SpawnScientist(player, npcNade, position, settings);
                            return;
                        }
                    }
                    else if (storedData.AnimalNPC.ContainsKey(npcNade.name))
                    {
                        SpawnAnimal(player, npcNade, position);
                        return;
                    }
                    else if (storedData.BradleyNPC.ContainsKey(npcNade.name))
                    {
                        SpawnBradley(player, npcNade, position);
                        return;
                    }
                }
            });
        }

        private void OnExplosiveDropped(BasePlayer player, BaseEntity entity, Item item)
        {
            if (item.skin == null)
            {
                return;
            }
            else if (!IsNpcGrenade(item.skin))
            {
                return;
            }
            OnNpcNadeThrown(player, entity, item);
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null)
            {
                return null;
            }
            if (IsNpcGrenade(entity.skinID))
            {
                // Stop melee armed NPC injuring themselves which happens when their swing misses the target
                if (info.Initiator == info.HitEntity)
                {
                    return true;
                }
            }
            if (!config.bradley.bradleyBaseDamage)
            {
                var damageType = info.damageTypes.GetMajorityDamageType();
                if (entity is BasePlayer)
                {
                    return null;
                }
                else if (damageType == DamageType.Blunt)
                {
                    if(entity.GetBuildingPrivilege() && info.WeaponPrefab.name == "MainCannonShell")
                    {
                        // Blunt damage from APC cannon shells blocked
                        CancelHit(info);
                        return true;
                    }
                }
                else if (damageType == DamageType.Bullet && info.Initiator is BradleyAPC)
                {
                    // Bullet damage from APC machine gun bullets blocked
                    CancelHit(info);
                    return true;
                }
            }

            return null;
        }

        private object OnNpcTarget(BaseEntity entity, BaseEntity target)
        {
            if (entity != null && target != null)
            {
                var isEntityNade = IsNpcGrenade(entity.skinID);
                var isTargetNade = IsNpcGrenade(target.skinID);

                if (isEntityNade && isTargetNade)
                {
                    return true;
                }
                else if (isEntityNade && !isTargetNade)
                {
                    // Target is Player
                    if (target is BasePlayer)
                    {
                        var player = target as BasePlayer;
                        if (player.IsSleeping() && config.options.sleeperSafe)
                        {
                            return true;
                        }
                        if (!config.options.attackOwner && entity.OwnerID == player.userID)
                        {
                            return true;
                        }
                        if (config.options.useFriends || config.options.useClans || config.options.useTeams)
                        {
                            if (entity.OwnerID != player.userID && IsFriend(entity.OwnerID, player.userID))
                            {
                                return true;
                            }
                            return null;
                        }
                    }
                    else if (target is NPCPlayer)
                    {
                        if (config.options.npcSafe)
                        {
                            return true;
                        }
                    }
                    else if (target is BaseNpc)
                    {
                        if (config.options.npcSafe)
                        {
                            return true;
                        }
                    }
                }
                else if (!isEntityNade && isTargetNade)
                {
                    if (entity is NPCPlayer && config.options.npcSafe)
                    {
                        return true;
                    }
                    else if (entity is BaseNpc && config.options.animalSafe)
                    {
                        return true;
                    }
                }
            }
            return null;
        }

        private object OnTurretTarget(AutoTurret turret, BaseEntity target)
        {
            if (target != null)
            {
                if (config.options.turretSafe && IsNpcGrenade(target.skinID))
                {
                    return true;
                }
            }
            return null;
        }

        private object CanBradleyApcTarget(BradleyAPC bradley, BaseEntity target)
        {
            if (target != null)
            {
                if (IsNpcGrenade(target.skinID))
                {
                    if (config.options.bradleySafe)
                    {
                        return false;
                    }
                }
                var player = target as BasePlayer;
                if (IsNpcGrenade(bradley.skinID))
                {
                    if (player.IsSleeping() && config.options.sleeperSafe)
                    {
                        return false;
                    }
                    if (!config.options.attackOwner && bradley.OwnerID == player.userID)
                    {
                        return false;
                    }
                    if (config.options.useFriends || config.options.useClans || config.options.useTeams)
                    {
                        if (bradley.OwnerID != player.userID && IsFriend(bradley.OwnerID, player.userID))
                        {
                            return true;
                        }
                    }
                }
            }
            return null;
        }

        private object OnBradleyApcInitialize(BradleyAPC bradley)
        {
            if (!IsNpcGrenade(bradley.skinID))
            {
                return null;
            }
            else
            {
                var key = "Bradley Grenade";
                bradley.health = storedData.BradleyNPC[key].Health;
                bradley._maxHealth = storedData.BradleyNPC[key].Health;
                bradley.searchRange = storedData.BradleyNPC[key].SearchRange;
                bradley.viewDistance = storedData.BradleyNPC[key].ViewDistance;
                bradley.maxCratesToSpawn = storedData.BradleyNPC[key].CratesToSpawn;
                bradley.throttle = storedData.BradleyNPC[key].ThrottleResponse;
                bradley.leftThrottle = bradley.throttle;
                bradley.rightThrottle = bradley.throttle;
                bradley.ClearPath();
                bradley.currentPath.Clear();
                bradley.currentPathIndex = 0;
                bradley.DoAI = true;
                bradley.DoSimpleAI();

                var position = bradley.transform.position;
                for (int i = 0; i < storedData.BradleyNPC[key].PatrolPathNodes; i++)
                {
                    position = position + UnityEngine.Random.onUnitSphere * storedData.BradleyNPC[key].PatrolRange;
                    position.y = TerrainMeta.HeightMap.GetHeight(position);
                    bradley.currentPath.Add(position);
                }
                return true;
            }
            return null;
        }

        void OnEntitySpawned(NPCPlayerCorpse corpse)
        {
            if (corpse == null)
            {
                return;
            }

            Inv npcInv = new Inv();
            timer.Once(0.2f, () =>
            {

                if (corpse == null || corpse.IsDestroyed)
                {
                    return;
                }
                ulong id = corpse.playerSteamID;
                if (!NPCInventories.ContainsKey(id))
                {
                    return;
                }
                npcInv = NPCInventories[id];

                corpse._playerName = npcInv.name;
                corpse.lootPanelName = npcInv.name;

                var key = corpse._playerName + " Grenade";
                if (storedData.HumanNPC[key].StripCorpseLoot)
                {
                    corpse.containers[0].Clear();
                }
                else
                {
                    for (int i = 0; i < npcInv.inventory.Length; i++)
                    {
                        foreach (var item in npcInv.inventory[i])
                        {
                            var giveItem = ItemManager.CreateByItemID(item.ID, item.amount, item.skinID);
                            if (!giveItem.MoveToContainer(corpse.containers[i], -1, true))
                                giveItem.Remove();
                        }
                    }
                }
                timer.Once(5f, () => NPCInventories?.Remove(id));
            });
        }

        #endregion

        #region Main

        private void SpawnScientist(BasePlayer player, Item npcNade, Vector3 position, NPCPlayerData settings)
        {
            if (player == null || npcNade == null || position == null || settings == null)
            {
                return;
            }
            DoExplosion(settings.ExplosionSound, position);
            for (int i = 0; i < settings.NumberToSpawn; i++)
            {
                if (settings.NumberToSpawn > 1)
                {
                    position = position + UnityEngine.Random.onUnitSphere * settings.SpawnRadius;
                    position.y = TerrainMeta.HeightMap.GetHeight(position);
                }
                var npc = (ScientistNPC)GameManager.server.CreateEntity(settings.Prefab, position + new Vector3(0, 0.1f, 0), new Quaternion(), true);
                if (npc == null)
                {
                    return;
                }
                npc.Spawn();

                var nav = npc.GetComponent<BaseNavigator>(); 
                if (nav == null)
                {
                    return;
                }
                npc.NavAgent.enabled = true;
                nav.CanUseNavMesh = true; 
                nav.DefaultArea = "Walkable";
                npc.NavAgent.areaMask = 1;
                npc.NavAgent.agentTypeID = -1372625422;  
                npc.NavAgent.autoTraverseOffMeshLink = true; 
                npc.NavAgent.autoRepath = true;
                nav.CanUseCustomNav = true; 
                npc.NavAgent.baseOffset = -0.1f;
                nav.PlaceOnNavMesh();

                var brain = npc.gameObject.AddComponent<ScientistAI>();
                brain.Settings = settings;

                var move = npc.gameObject.AddComponent<ScientistMovement>();
                move.HomeLoc = position;
                move.Settings = settings;

                npc.enableSaving = false;
                npc.skinID = npcNade.skin;
                npc.OwnerID = player.userID;
                npc.displayName = settings.Name;
                npc.damageScale = settings.DamageScale;
                npc.startHealth = settings.Health;
                npc.InitializeHealth(settings.Health, settings.Health);
                npc.EnablePlayerCollider();

                timer.Once(0.2f, () =>
                {
                    if (npc == null || npc.IsDestroyed)
                    {
                        return;
                    }
                    if (SpawnAborted(player, npc, npcNade, position, npc.userID))
                    {
                        return;
                    }
                    GiveGrenadeNpcKit(npc, npcNade);
                    if (settings.DespawnTime > 0)
                    {
                        DespawnNPC(npc, npc.userID, settings.DespawnTime);
                    }
                    GrenadeNPCData.Add(npc.userID, npc);
                });
            }
        }

        private void SpawnScarecrow(BasePlayer player, Item npcNade, Vector3 position, NPCPlayerData settings)
        {
            if (player == null || npcNade == null || position == null || settings == null)
            {
                return;
            }
            DoExplosion(settings.ExplosionSound, position);
            for (int i = 0; i < settings.NumberToSpawn; i++)
            {
                if (settings.NumberToSpawn > 1)
                {
                    position = position + UnityEngine.Random.onUnitSphere * settings.SpawnRadius;
                    position.y = TerrainMeta.HeightMap.GetHeight(position);
                }

                var npc = (ScarecrowNPC)GameManager.server.CreateEntity(settings.Prefab, position + new Vector3(0, 0.1f, 0), new Quaternion(), true);
                
                if (npc == null)
                {
                    return;
                }
                npc.Spawn();

                var nav = npc.GetComponent<BaseNavigator>(); 
                if (nav == null)
                {
                    return;
                }
                npc.NavAgent.enabled = true;
                nav.CanUseNavMesh = true; 
                nav.DefaultArea = "Walkable";
                npc.NavAgent.areaMask = 1;
                npc.NavAgent.agentTypeID = -1372625422;  
                npc.NavAgent.autoTraverseOffMeshLink = true; 
                npc.NavAgent.autoRepath = true;
                nav.CanUseCustomNav = true; 
                npc.NavAgent.baseOffset = -0.1f;
                nav.PlaceOnNavMesh();

                var brain = npc.gameObject.AddComponent<ScarecrowAI>();
                brain.Settings = settings;

                var move = npc.gameObject.AddComponent<ScarecrowMovement>();
                move.HomeLoc = position;
                move.Settings = settings;

                npc.enableSaving = false;
                npc.skinID = npcNade.skin;
                npc.OwnerID = player.userID;
                npc.displayName = settings.Name;
                npc.damageScale = settings.DamageScale;
                npc.startHealth = settings.Health;
                npc.InitializeHealth(settings.Health, settings.Health);
                npc.EnablePlayerCollider();

                timer.Once(0.2f, () =>
                {
                    if (npc == null || npc.IsDestroyed)
                    {
                        return;
                    }
                    if (SpawnAborted(player, npc, npcNade, position, npc.userID))
                    {
                        return;
                    }
                    GiveGrenadeNpcKit(npc, npcNade);

                    if (settings.DespawnTime > 0)
                    {
                        DespawnNPC(npc, npc.userID, settings.DespawnTime);
                    }
                    GrenadeNPCData.Add(npc.userID, npc);
                });
            }
        }

        private void SpawnAnimal(BasePlayer player, Item npcNade, Vector3 position)
        {
            if (storedData.AnimalNPC.ContainsKey(npcNade.name))
            {
                string npcPrefab = storedData.AnimalNPC[npcNade.name].Prefab;
                string npcName = storedData.AnimalNPC[npcNade.name].Name;
                int spawnAmount = storedData.AnimalNPC[npcNade.name].NumberToSpawn;
                string exploSound = storedData.AnimalNPC[npcNade.name].ExplosionSound;

                DoExplosion(exploSound, position);

                for (int i = 0; i < spawnAmount; i++)
                {
                    if (spawnAmount > 1)
                    {
                        position = position + UnityEngine.Random.onUnitSphere * storedData.AnimalNPC[npcNade.name].SpawnRadius;
                        position.y = TerrainMeta.HeightMap.GetHeight(position);
                    }
                    BaseNpc npc = (BaseNpc)GameManager.server.CreateEntity(npcPrefab, position);
                    npc.Spawn();

                    npc.startHealth = storedData.AnimalNPC[npcNade.name].Health;
                    npc.InitializeHealth(storedData.AnimalNPC[npcNade.name].Health, storedData.AnimalNPC[npcNade.name].Health);
                    npc.OwnerID = player.userID;
                    npc.skinID = npcNade.skin;
                    npc.CurrentBehaviour = BaseNpc.Behaviour.Attack;
                    npc.SetFact(BaseNpc.Facts.CanTargetEnemies, 1, true, true);
                    npc.SetFact(BaseNpc.Facts.IsAggro, 1, true, true);

                    if (SpawnAborted(player, npc, npcNade, position, npc.net.ID))
                    {
                        return;
                    }
                    float despawnTime = storedData.AnimalNPC[npcNade.name].DespawnTime;
                    if (despawnTime > 0)
                    {
                        DespawnNPC(npc, npc.net.ID, despawnTime);
                    }
                    BaseNpcData.Add(npc.net.ID, npc);
                }
            }
        }
            
        private void SpawnBradley(BasePlayer player, Item npcNade, Vector3 position)
        {
            if (storedData.BradleyNPC.ContainsKey(npcNade.name))
            {
                string npcPrefab = storedData.BradleyNPC[npcNade.name].Prefab;
                string npcName = storedData.BradleyNPC[npcNade.name].Name;
                int spawnAmount = storedData.BradleyNPC[npcNade.name].NumberToSpawn;
                string exploSound = storedData.BradleyNPC[npcNade.name].ExplosionSound;

                DoExplosion(exploSound, position);

                for (int i = 0; i < spawnAmount; i++)
                {
                    if (spawnAmount > 1)
                    {
                        position = position + UnityEngine.Random.onUnitSphere * storedData.BradleyNPC[npcNade.name].SpawnRadius;
                        position.y = TerrainMeta.HeightMap.GetHeight(position);
                    }

                    BradleyAPC npc = (BradleyAPC)GameManager.server.CreateEntity(npcPrefab, position);
                    npc.OwnerID = player.userID;
                    npc.skinID = npcNade.skin;
                    npc.Spawn();

                    if (SpawnAborted(player, npc, npcNade, position, npc.net.ID))
                    {
                        return;
                    }
                    float despawnTime = storedData.BradleyNPC[npcNade.name].DespawnTime;
                    if (despawnTime > 0)
                    {
                        DespawnNPC(npc, npc.net.ID, despawnTime);
                    }
                    BradleyAPCData.Add(npc.net.ID, npc);
                }
            }
        }

        private void DespawnNPC(BaseEntity npc, ulong botId, float despawnTime)
        {
            timer.Once(despawnTime, () =>
            {
                if (npc != null && !npc.IsDestroyed)
                {
                    NextTick(() =>
                    {
                        npc.Kill();
                        RemoveNpcData(botId);
                    });
                    return;
                }
            });
        }

        #endregion

        #region Helpers

        private void CancelHit(HitInfo info)
        {
            info.damageTypes = new DamageTypeList();
            info.DidHit = false;
            info.DoHitEffects = false;
        }

        private object OnNpcKits(ulong npcUserID) // Prevents conflict with NPCKits.
        {
            return GrenadeNPCData.ContainsKey(npcUserID) ? true : (object)null;
        }

        private void GiveNade(BasePlayer player, ulong skinId, string nadeName, string reason)
        {
            if (player == null && skinId == null || nadeName == null || reason == null)
            {
                return;
            }
            Item npcNade = ItemManager.CreateByItemID(f1GrenadeId, 1, skinId);
            npcNade.name = nadeName;

            if (reason == "give")
            {
                player.inventory.GiveItem(npcNade);
                Message(player, "Received", nadeName);
            }
            else if (reason == "refund")
            {
                player.inventory.GiveItem(npcNade);
            }
        }

        public Item GiveInventoryItem(ItemContainer itemContainer, string shortName, int itemAmount, ulong skinId)
        {
            Item item = ItemManager.CreateByName(shortName, itemAmount, skinId);
            if (item == null) return null;
            if (!item.MoveToContainer(itemContainer))
            {
                item.Remove(0f);
                return null;
            }
            return item;
        }

        private bool HasPermission(BasePlayer player, Item npcNade)
        {
            if (player == null || npcNade == null)
            {
                return false;
            }
            if (player is NPCPlayer)
            {
                // Allow NPCs spawned by plugins which arm with NPCGrenades to work regardless of perms
                return true;
            }
            else if (storedData.HumanNPC.ContainsKey(npcNade.name))
            {
                string humanPerm = storedData.HumanNPC[npcNade.name].Permission;
                if (permission.UserHasPermission(player.UserIDString, humanPerm))
                {
                    return true;
                }
            }
            else if (storedData.AnimalNPC.ContainsKey(npcNade.name))
            {
                string animalPerm = storedData.AnimalNPC[npcNade.name].Permission;
                if (permission.UserHasPermission(player.UserIDString, animalPerm))
                {
                    return true;
                }
            }
            else if (storedData.BradleyNPC.ContainsKey(npcNade.name))
            {
                string apcPerm = storedData.BradleyNPC[npcNade.name].Permission;
                if (permission.UserHasPermission(player.UserIDString, apcPerm))
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsNpcGrenade(ulong skinId)
        {
            if(NadeInfo.ContainsKey(skinId))
            {
                return true;
            }
            return false;
        }

        public Vector3 GetNavPoint(Vector3 position)
        {
            NavMeshHit hit;
            if (!NavMesh.SamplePosition(position, out hit, 5, -1))
            {
                return position;
            }
            else if (Physics.RaycastAll(hit.position + new Vector3(0, 100, 0), Vector3.down, 99f, 1235288065).Any())
            {
                return position;
            }
            else if (hit.position.y < TerrainMeta.WaterMap.GetHeight(hit.position))
            {
                return position;
            }
            position = hit.position;
            return position;
        }

        private bool IsInSafeZone(Vector3 position)
        {
            int loop = Physics.OverlapSphereNonAlloc(position, 1f, Vis.colBuffer, 1 << 18, QueryTriggerInteraction.Collide);
            for (int i = 0; i < loop; i++)
            {
                Collider collider = Vis.colBuffer[i];
                if (collider.GetComponent<TriggerSafeZone>())
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsOnStructure(Vector3 position)
        {
            RaycastHit hit;
            var heightOffset = new Vector3(0, 0.1f, 0);
            if (Physics.Raycast(position + heightOffset, Vector3.down,
                    out hit, 4f, LayerMask.GetMask("Construction")) && hit.GetEntity().IsValid())
            {
                if (hit.GetEntity().name.Contains("building"))
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsInRock(Vector3 position)
        {
            RaycastHit hit;
            string[] colliders = new string[] { "rock", "cliff", "junk", "range", "invisible" };
            Physics.queriesHitBackfaces = true;
            if (Physics.Raycast(position, Vector3.up, out hit, 25f, 65536, QueryTriggerInteraction.Ignore))
            {
                if (colliders.Any(x => hit.collider?.gameObject?.name.Contains(x, CompareOptions.OrdinalIgnoreCase) != null))
                {
                    return true;
                }
            }
            Physics.queriesHitBackfaces = false;
            return false;
        }

        private void DoExplosion(string sound, Vector3 position)
        {
            try
            {
                Effect.server.Run(sound, position);
            }
            catch
            {
                Puts($"Invalid explosion effect path specified.");
            }
        }

        private IPlayer FindPlayer(string nameOrIdOrIp)
        {
            foreach (var activePlayer in covalence.Players.Connected)
            {
                if (activePlayer.Id == nameOrIdOrIp)
                    return activePlayer;
                if (activePlayer.Name.Contains(nameOrIdOrIp))
                    return activePlayer;
                if (activePlayer.Name.ToLower().Contains(nameOrIdOrIp.ToLower()))
                    return activePlayer;
                if (activePlayer.Address == nameOrIdOrIp)
                    return activePlayer;
            }
            return null;
        }

        private bool IsFriend(ulong playerId, ulong targetId)
        {
            if (playerId == 0 || targetId == 0)
            {
                return false;
            }
            if (playerId == targetId)
            {
                return true;
            }
            if (Clans)
            {
                var result = Clans?.Call("IsMemberOrAlly", playerId, targetId);
                if (result != null && Convert.ToBoolean(result))
                {
                    return true;
                }
            }
            if (Friends)
            {
                var result = Friends?.Call("AreFriends", playerId, targetId);
                if (result != null && Convert.ToBoolean(result))
                {
                    return true;
                }
            }
            RelationshipManager.PlayerTeam team;
            RelationshipManager.ServerInstance.playerToTeam.TryGetValue(playerId, out team);
            if (team == null)
            {
                return false;
            }
            if (team.members.Contains(targetId))
            {
                return true;
            }
            return false;
        }

        private bool SpawnAborted(BasePlayer player, BaseEntity npc, Item npcNade, Vector3 position, ulong npcId)
        {
            if (npc == null || npc.IsDestroyed)
            {
                return true;
            }
            if (npc.WaterFactor() > 0.7f)
            {
                npc.Kill();
                Message(player, "UnderWater", npcNade.name, npcId);
                return true;
            }
            else if (IsInSafeZone(position))
            {
                npc.Kill();
                Message(player, "InSafeZone", npcNade.name, npcId);
                return true;
            }
            else if (!npc.IsOutside())
            {
                npc.Kill();
                Message(player, "Outside", npcNade.name, npcId);
                return true;
            }
            else if (IsOnStructure(position))
            {
                npc.Kill();
                Message(player, "OnStructure", npcNade.name, npcId);
                return true;
            }
            else if (IsInRock(position))
            {
                npc.Kill();
                Message(player, "IsInRock", npcNade.name, npcId);
                return true;
            }
            return false;
        }

        private void RemoveNpcData(ulong npcId)
        {
            if (GrenadeNPCData.ContainsKey(npcId))
            {
                GrenadeNPCData.Remove(npcId);
            }
            else if (BaseNpcData.ContainsKey(npcId))
            {
                BaseNpcData.Remove(npcId);
            }
            else if (BradleyAPCData.ContainsKey(npcId))
            {
                BradleyAPCData.Remove(npcId);
            }
        }

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, storedData);
        }
        #endregion

        #region Kits

        private void GiveGrenadeNpcKit(NPCPlayer npc, Item npcNade)
        {
            if (storedData.HumanNPC.ContainsKey(npcNade.name))
            {
                int kitCount = storedData.HumanNPC[npcNade.name].KitList.Count();
                if (Kits)
                {
                    if (kitCount > 0)
                    {
                        var kit = storedData.HumanNPC[npcNade.name].KitList[random.Next(kitCount)];
                        object kitCheck = Kits?.CallHook("GetKitInfo", kit, true);
                        if (kitCheck == null)
                        {
                            Puts($"Kit: \"{kit}\" does not exist, using default kit.");
                        }
                        else
                        {
                            npc.inventory.Strip();
                            Kits?.Call($"GiveKit", npc, kit, true);
                            return;
                        }
                    }
                }

                if (npc == null) return;
                npc.inventory.Strip();

                foreach (var item in storedData.HumanNPC[npcNade.name].DefaultLoadout)
                {
                    var container = item.Container.ToLower();
                    if (container == "belt")
                    {
                        GiveInventoryItem(npc.inventory.containerBelt, item.Shortname, item.Amount, item.SkinID);
                    }
                    else if (container == "wear")
                    {
                        GiveInventoryItem(npc.inventory.containerWear, item.Shortname, item.Amount, item.SkinID);
                    }
                    else
                    {
                        GiveInventoryItem(npc.inventory.containerMain, item.Shortname, item.Amount, item.SkinID);
                    }
                }
            }
        }

        #endregion

        #region Commands

        [Command("npcnade.give")]
        private void CmdGiveNpcNade(IPlayer player, string command, string[] args)
        {
            if (!player.HasPermission(permAdmin))
            {
                Message(player, "NotAdmin");
                return;
            }
            else if (args.Length < 2)
            {
                if (player.IsServer)
                {
                    Message(player, "ConsoleSyntax");
                    return;
                }
                else
                {
                    Message(player, "Syntax");
                    return;
                }
            }
            var target = FindPlayer(args[1])?.Object as BasePlayer;
            if (target == null)
            {
                Message(player, "PlayerNotFound", args[1]);
                return;
            }
            string npcCmd = args[0].ToLower();
            ulong skinId = 0;
            string nadeName = string.Empty;
            bool isEnabled = false;
            foreach (var item in NadeInfo.Keys)
            {
                if (npcCmd == NadeInfo[item].Cmd)
                {
                    skinId = NadeInfo[item].ID;
                    nadeName = NadeInfo[item].Name;
                    isEnabled = NadeInfo[item].Enabled;
                    break;
                }
            }
            if (skinId == 0)
            {
                Message(player, "InvalidNade", npcCmd);
                return;
            }
            else if (nadeName != null && !isEnabled)
            {
                Message(player, "NotEnabled", nadeName);
                return;
            }
            GiveNade(target, skinId, nadeName, "give");
            Message(player, "PlayerReceived", target.displayName, target.userID, nadeName);
        }

        #endregion

        #region Brain AI

        private class ScarecrowAI : FacepunchBehaviour
        {
            private ScarecrowNPC Scarecrow;
            public NPCPlayerData Settings;
            public bool isEquippingWeapon = false;
            public AttackEntity CurrentWeapon { get; private set; }

            private void Start()
            {
                Scarecrow = GetComponent<ScarecrowNPC>();
                Invoke(nameof(InitBrain), 0.25f);
                Invoke(nameof(EquipWeapon), 1f);
                InvokeRepeating(nameof(MeleeAttack), 1f, 1f);
            }

            private void InitBrain()
            {
                Scarecrow.Brain.Navigator.MaxRoamDistanceFromHome = Settings.MaxRoamRange;
                Scarecrow.Brain.Navigator.BestRoamPointMaxDistance = Settings.MaxRoamRange;
                Scarecrow.Brain.Navigator.BestMovementPointMaxDistance = Settings.MaxRoamRange;
                Scarecrow.Brain.Navigator.Speed = Settings.Speed;
                Scarecrow.Brain.Navigator.Acceleration = Settings.Acceleration;
                Scarecrow.Brain.Navigator.FastSpeedFraction = Settings.FastSpeedFraction;
                Scarecrow.Brain.Navigator.NormalSpeedFraction = Settings.NormalSpeedFraction;
                Scarecrow.Brain.Navigator.SlowSpeedFraction = Settings.SlowSpeedFraction;
                Scarecrow.Brain.Navigator.SlowestSpeedFraction = Settings.SlowestSpeedFraction;
                Scarecrow.Brain.Navigator.LowHealthMaxSpeedFraction = Settings.LowHealthMaxSpeedFraction;
                Scarecrow.Brain.Navigator.TurnSpeed = Settings.TurnSpeed;

                Scarecrow.Brain.AllowedToSleep = false;
                Scarecrow.Brain.sleeping = false;
                Scarecrow.Brain.ForceSetAge(0);
                Scarecrow.Brain.SenseRange = Settings.SenseRange;
                Scarecrow.Brain.ListenRange = Settings.ListenRange;
                Scarecrow.Brain.HostileTargetsOnly = Settings.PeaceKeeper;
                Scarecrow.Brain.TargetLostRange = Settings.TargetLostRange;
                Scarecrow.Brain.CheckVisionCone = Settings.CheckVisionCone;
                Scarecrow.Brain.IgnoreSafeZonePlayers = Settings.IgnoreSafeZonePlayers;
                Scarecrow.Brain.IgnoreNonVisionSneakers = Settings.IgnoreNonVisionSneakers;
                Scarecrow.Brain.VisionCone = Vector3.Dot(Vector3.forward, Quaternion.Euler(0f, Settings.VisionCone, 0f) * Vector3.forward);

                Scarecrow.Brain.Senses.Init(Scarecrow, Settings.MemoryDuration, Settings.AggroRange, Settings.DeAggroRange, Settings.VisionCone,
                                            Settings.CheckVisionCone, Settings.CheckLOS, Settings.IgnoreNonVisionSneakers, Settings.ListenRange,
                                            Settings.PeaceKeeper, Scarecrow.Brain.MaxGroupSize > 0, Settings.IgnoreSafeZonePlayers, EntityType.Player, true);
            }

            private void MeleeAttack()
            {
                BaseEntity target = Scarecrow.Brain.Senses.GetNearestTarget(Settings.AggroRange);
                BaseMelee heldEntity = Scarecrow?.GetActiveItem()?.GetHeldEntity() as BaseMelee;

                if (target != null && Vector3.Distance(target.transform.position, Scarecrow.transform.position) < 1.5f)
                {
                    Scarecrow.StartAttacking(target);
                    Scarecrow.Brain.Navigator.SetFacingDirectionEntity(target);

                    Vector3 serverPos = target.ServerPosition - Scarecrow.ServerPosition;
                    Scarecrow.ServerRotation = Quaternion.LookRotation(serverPos.normalized);

                    heldEntity.StartAttackCooldown(heldEntity.repeatDelay * 2f);
                    Scarecrow.SignalBroadcast(BaseEntity.Signal.Attack, string.Empty, null);

                    if (!(heldEntity is Chainsaw))
                    {
                        if (heldEntity.swingEffect.isValid)
                        {
                            Effect.server.Run(heldEntity.swingEffect.resourcePath, heldEntity.transform.position, Vector3.forward, Scarecrow.net.connection, false);
                        }

                        plugin.timer.Once(0.4f, () =>
                        {
                            if (Scarecrow == null)
                            {
                                return;
                            }
                            Vector3 position = Scarecrow.eyes.position;
                            Vector3 direction = Scarecrow.eyes.BodyForward();
                            for (int i = 0; i < 2; ++i)
                            {
                                List<RaycastHit> list = Pool.GetList<RaycastHit>();
                                GamePhysics.TraceAll(new Ray(position - direction * (i == 0 ? 0.0f : 0.2f), direction), i == 0 ? 0.0f : heldEntity.attackRadius,
                                                    list, heldEntity.effectiveRange + 0.2f, 1219701521, QueryTriggerInteraction.UseGlobal);
                                bool flag = false;
                                for (int j = 0; j < list.Count; ++j)
                                {
                                    RaycastHit item = list[j];
                                    BaseEntity entity = item.GetEntity();
                                    if (entity != null && Scarecrow != null)
                                    {
                                        float single = 0.0f;
                                        foreach (Rust.DamageTypeEntry damageType in heldEntity.damageTypes)
                                        {
                                            single += damageType.amount;
                                        }
                                        entity.OnAttacked(new HitInfo(Scarecrow, entity, Rust.DamageType.Slash, single * Scarecrow.damageScale));
                                        HitInfo hitInfo = Pool.Get<HitInfo>();
                                        hitInfo.HitEntity = entity;
                                        hitInfo.HitPositionWorld = item.point;
                                        hitInfo.HitNormalWorld = -direction;
                                        if (entity is BaseNpc || entity is NPCPlayer || entity is BasePlayer)
                                        {
                                            hitInfo.HitMaterial = StringPool.Get("Flesh");
                                        }
                                        else
                                        {
                                            hitInfo.HitMaterial = StringPool.Get((item.GetCollider().sharedMaterial != null ? item.GetCollider().sharedMaterial.GetName() : "generic"));
                                        }
                                        string strikeEffectPath = heldEntity.GetStrikeEffectPath(heldEntity.name);
                                        if (strikeEffectPath == null)
                                        {
                                            Effect.server.ImpactEffect(hitInfo);
                                        }
                                        else
                                        {
                                            Effect.server.Run(strikeEffectPath, hitInfo.HitEntity, hitInfo.HitBone, hitInfo.HitPositionLocal, hitInfo.HitNormalLocal);
                                            Effect.server.Run(fleshBloodImpact, hitInfo.HitEntity, hitInfo.HitBone, hitInfo.HitPositionLocal, hitInfo.HitNormalLocal);
                                        }
                                        Pool.Free<HitInfo>(ref hitInfo);
                                        flag = true;
                                        if (!(entity != null) || entity.ShouldBlockProjectiles())
                                        {
                                            break;
                                        }
                                    }
                                }
                                Pool.FreeList<RaycastHit>(ref list);
                                if (flag)
                                {
                                    break;
                                }
                            }
                        });
                    }
                    else if (heldEntity is Chainsaw)
                    {
                        if (!(heldEntity as Chainsaw).EngineOn())
                        {
                            (heldEntity as Chainsaw).ServerNPCStart();
                        }
                        heldEntity.SetFlag(BaseEntity.Flags.Busy, true, false, true);
                        heldEntity.SetFlag(BaseEntity.Flags.Reserved8, true, false, true);
                    }
                }
                else if (target != null && Vector3.Distance(target.transform.position, Scarecrow.transform.position) > 2.0f)
                {
                    if (heldEntity is Chainsaw)
                    {
                        if (!(heldEntity as Chainsaw).EngineOn())
                        {
                            (heldEntity as Chainsaw).ServerNPCStart();
                        }
                        heldEntity.SetFlag(BaseEntity.Flags.Busy, false, false, true);
                        heldEntity.SetFlag(BaseEntity.Flags.Reserved8, false, false, true);

                    }
                }
            }

            private void EquipWeapon()
            {
                if (!isEquippingWeapon)
                {
                    StartCoroutine(EquippingWeapon());
                }
            }

            private IEnumerator EquippingWeapon()
            {
                Item slot = null;
                if (Scarecrow.inventory.containerBelt != null)
                {
                    isEquippingWeapon = true;
                    if (slot == null)
                    {
                        for (int i = 0; i < Scarecrow.inventory.containerBelt.itemList.Count; i++)
                        {
                            Item item = Scarecrow.inventory.containerBelt.GetSlot(i);
                            if (item != null && item.GetHeldEntity() is AttackEntity)
                            {
                                slot = item;
                                break;
                            }
                        }
                    }
                    if (slot != null)
                    {
                        HeldEntity heldEntity = slot.GetHeldEntity() as HeldEntity;
                        if (heldEntity != null)
                        {
                            if (heldEntity is AttackEntity)
                            {
                                (heldEntity as AttackEntity).TopUpAmmo();
                            }
                            if (heldEntity is Chainsaw)
                            {
                                (heldEntity as Chainsaw).ServerNPCStart();
                            }
                        }
                        CurrentWeapon = heldEntity as AttackEntity;
                    }
                    isEquippingWeapon = false;
                    yield return null;
                }
            }
        }

        private class ScientistAI : FacepunchBehaviour
        {
            private ScientistNPC Scientist;
            public NPCPlayerData Settings;
            public bool isEquippingWeapon = false;
            public AttackEntity CurrentWeapon { get; private set; }

            private void Start()
            {
                Scientist = GetComponent<ScientistNPC>();
                Invoke(nameof(InitBrain), 0.1f);
                Invoke(nameof(EquipWeapon), 1f);
            }

            private void InitBrain()
            {
                Scientist.Brain.SwitchToState(AIState.Combat, 0);

                Scientist.Brain.Navigator.MaxRoamDistanceFromHome = Settings.MaxRoamRange;
                Scientist.Brain.Navigator.BestRoamPointMaxDistance = Settings.MaxRoamRange;
                Scientist.Brain.Navigator.BestMovementPointMaxDistance = Settings.MaxRoamRange;
                Scientist.Brain.Navigator.Speed = Settings.Speed;
                Scientist.Brain.Navigator.Acceleration = Settings.Acceleration;
                Scientist.Brain.Navigator.FastSpeedFraction = Settings.FastSpeedFraction;
                Scientist.Brain.Navigator.NormalSpeedFraction = Settings.NormalSpeedFraction;
                Scientist.Brain.Navigator.SlowSpeedFraction = Settings.SlowSpeedFraction;
                Scientist.Brain.Navigator.SlowestSpeedFraction = Settings.SlowestSpeedFraction;
                Scientist.Brain.Navigator.LowHealthMaxSpeedFraction = Settings.LowHealthMaxSpeedFraction;
                Scientist.Brain.Navigator.TurnSpeed = Settings.TurnSpeed;

                Scientist.Brain.AllowedToSleep = false;
                Scientist.Brain.sleeping = false;
                Scientist.Brain.ForceSetAge(0);
                Scientist.Brain.SenseRange = Settings.SenseRange;
                Scientist.Brain.ListenRange = Settings.ListenRange;
                Scientist.Brain.HostileTargetsOnly = Settings.PeaceKeeper;
                Scientist.Brain.TargetLostRange = Settings.TargetLostRange;
                Scientist.Brain.CheckVisionCone = Settings.CheckVisionCone;
                Scientist.Brain.IgnoreSafeZonePlayers = Settings.IgnoreSafeZonePlayers;
                Scientist.Brain.IgnoreNonVisionSneakers = Settings.IgnoreNonVisionSneakers;
                Scientist.Brain.VisionCone = Vector3.Dot(Vector3.forward, Quaternion.Euler(0f, Settings.VisionCone, 0f) * Vector3.forward);

                Scientist.Brain.Navigator.Init(Scientist, Scientist.NavAgent);
                Scientist.Brain.Senses.Init(Scientist, Settings.MemoryDuration, Settings.AggroRange, Settings.DeAggroRange, Settings.VisionCone,
                                        Settings.CheckVisionCone, Settings.CheckLOS, Settings.IgnoreNonVisionSneakers, Settings.ListenRange,
                                        Settings.PeaceKeeper, Scientist.Brain.MaxGroupSize > 0, Settings.IgnoreSafeZonePlayers, EntityType.Player, true);
            }

            private void EquipWeapon()
            {
                if (!isEquippingWeapon)
                {
                    StartCoroutine(EquippingWeapon());
                }
            }

            private IEnumerator EquippingWeapon()
            {
                Item slot = null;
                if (Scientist.inventory.containerBelt != null)
                {
                    isEquippingWeapon = true;

                    if (slot == null)
                    {
                        for (int i = 0; i < Scientist.inventory.containerBelt.itemList.Count; i++)
                        {
                            Item item = Scientist.inventory.containerBelt.GetSlot(i);
                            if (item != null && item.GetHeldEntity() is AttackEntity)
                            {
                                slot = item;
                                break;
                            }
                        }
                    }

                    if (slot != null)
                    {
                        HeldEntity heldEntity = slot.GetHeldEntity() as HeldEntity;
                        if (heldEntity != null)
                        {
                            if (heldEntity is AttackEntity)
                            {
                                (heldEntity as AttackEntity).TopUpAmmo();
                            }
                            if (heldEntity is Chainsaw)
                            {
                                (heldEntity as Chainsaw).ServerNPCStart();
                            }
                        }
                        CurrentWeapon = heldEntity as AttackEntity;
                    }
                    isEquippingWeapon = false;
                    yield return null;
                }
            }
        }

        #endregion

        #region Scientist Movement

        private class ScientistMovement : MonoBehaviour
        {
            public ScientistNPC Scientist;
            public Vector3 HomeLoc;
            public NPCPlayerData Settings;
            public bool returningHome = false;
            public bool isRoaming = true;

            private void Start()
            {
                Scientist = GetComponent<ScientistNPC>();
                Invoke(nameof(Init), 1f);
                InvokeRepeating(nameof(MoveScientist), 2f, 8f);
            }

            private void Init()
            {
                Scientist.Brain.Navigator.Destination = HomeLoc;
            }

            private void ClearSenses()
            {
                if (!Scientist.HasBrain)
                {
                    return;
                }
                Scientist.Brain.Senses.Players.Clear();
                Scientist.Brain.Senses.Memory.Players.Clear();
                Scientist.Brain.Senses.Memory.Targets.Clear();
                Scientist.Brain.Senses.Memory.Threats.Clear();  
                Scientist.Brain.Senses.Memory.LOS.Clear();
                Scientist.Brain.Senses.Memory.All.Clear();
                //Scientist.Brain.SwitchToState(AIState.Idle, 0);
                Scientist.Brain.SwitchToState(AIState.Roam, 0);
            }
            private void MoveScientist()
            {
                if (Scientist == null || Scientist.IsDestroyed || !Scientist.HasBrain)
                {
                    return;
                }

                if (Scientist.WaterFactor() > 0.7f)
                {
                    Scientist.Kill();
                    return;
                }

                if (Scientist.Brain.Senses.Memory.Targets.Count > 0)
                {
                    for (var i = 0; i < Scientist.Brain.Senses.Memory.Targets.Count; i++)
                    {
                        BaseEntity target = Scientist.Brain.Senses.Memory.Targets[i];
                        BasePlayer player = target as BasePlayer;
                        if (target == null || !player.IsAlive())
                        {
                            ClearSenses();
                            returningHome = true;
                            isRoaming = false;
                            return;
                        }
                        if (Scientist.Distance(player.transform.position) > Settings.TargetLostRange)
                        {
                            ClearSenses();
                            returningHome = true;
                            isRoaming = false;
                            return;
                        }
                        if (config.options.attackOwner == true && Scientist.OwnerID == player.userID)
                        {
                            Scientist.Brain.SwitchToState(AIState.Attack, 0);
                            return;
                        }
                        if (config.options.useFriends || config.options.useClans || config.options.useTeams)
                        {
                            if (Scientist.OwnerID != player.userID && !plugin.IsFriend(Scientist.OwnerID, player.userID))
                            {
                                Scientist.Brain.SwitchToState(AIState.Attack, 0);
                                return;
                            }
                        }
                    }
                }
                var distanceHome = Vector3.Distance(Scientist.transform.position, HomeLoc);
                if (returningHome == false)
                {
                    if (isRoaming == true && distanceHome > Settings.MaxRoamRange)
                    {
                        returningHome = true;
                        isRoaming = false;
                        return;
                    }
                    if (isRoaming == true && distanceHome < Settings.MaxRoamRange)
                    {
                        Vector3 random = UnityEngine.Random.insideUnitCircle.normalized * Settings.MaxRoamRange;
                        Vector3 newPos = plugin.GetNavPoint(Scientist.transform.position + new Vector3(random.x, 0f, random.y));
                        SetDest(newPos);
                        return;
                    }
                }
                if (returningHome && distanceHome > 2)
                {
                    if (Scientist.Brain.Navigator.Destination == HomeLoc)
                    {
                        return;
                    }
                    ClearSenses();
                    SetDest(HomeLoc);
                    return;
                }
                returningHome = false;
                isRoaming = true;
            }

            private void SetDest(Vector3 position)
            {
                Scientist.Brain.Navigator.Destination = position;
                Scientist.Brain.Navigator.SetDestination(position, BaseNavigator.NavigationSpeed.Slow, 0f, 0f);
                Scientist.Brain.SwitchToState(AIState.Roam, 0);
            }

            private void OnDestroy()
            {
                if (Scientist != null && !Scientist.IsDestroyed)
                {
                    Scientist.Kill();
                }
                CancelInvoke(nameof(MoveScientist));
            }
        }

        #endregion

        #region Scarecrow Movement

        private class ScarecrowMovement : MonoBehaviour
        {
            public ScarecrowNPC Scarecrow;
            public Vector3 HomeLoc;
            public Vector3 TargetPos;
            public NPCPlayerData Settings;
            public bool returningHome = false;
            public bool isRoaming = true;
            public StateStatus status = StateStatus.Error;

            private void Start()
            {
                Scarecrow = GetComponent<ScarecrowNPC>();
                Invoke(nameof(Init), 1f);
                InvokeRepeating(nameof(MoveScarecrow), 2f, 4f);
                InvokeRepeating(nameof(CheckPosition), 1f, 1f);
                if (Settings.RadioChatter)
                {
                    InvokeRepeating(nameof(BreathingChatter), 2f, 10f);
                }
            }

            private void Init()
            {
                Scarecrow.Brain.Navigator.Destination = HomeLoc;
                Scarecrow.Brain.SwitchToState(AIState.Roam, 0);
            }

            private void CheckPosition()
            {
                if (Scarecrow.Brain.Navigator.Destination == HomeLoc)
                {
                    var distanceToHome = Vector3.Distance(Scarecrow.transform.position, HomeLoc);
                    if (distanceToHome < 2)
                    {
                        Scarecrow.Brain.Navigator.Stop();
                        Scarecrow.Brain.SwitchToState(AIState.Idle, 0);
                        status = StateStatus.Finished;
                        returningHome = false;
                        isRoaming = true;
                        return;
                    }
                }
                else if (Scarecrow.Brain.Navigator.Destination == TargetPos)
                {
                    var distanceToTarget = Vector3.Distance(Scarecrow.transform.position, TargetPos);
                    if (distanceToTarget < 2)
                    {
                        Scarecrow.Brain.Navigator.Stop();
                        Scarecrow.Brain.SwitchToState(AIState.Idle, 0);
                        status = StateStatus.Finished;
                        return;
                    }
                }
            }

            private void ClearSenses()
            {
                if (!Scarecrow.HasBrain)
                {
                    return;
                }
                Scarecrow.Brain.Senses.Players.Clear();
                Scarecrow.Brain.Senses.Memory.Players.Clear();
                Scarecrow.Brain.Senses.Memory.Targets.Clear();
                Scarecrow.Brain.Senses.Memory.Threats.Clear();  
                Scarecrow.Brain.Senses.Memory.LOS.Clear();
                Scarecrow.Brain.Senses.Memory.All.Clear();
                Scarecrow.Brain.Navigator.ClearFacingDirectionOverride();
                Scarecrow.Brain.SwitchToState(AIState.Roam, 0);
                status = StateStatus.Finished;
            }

            private void MoveScarecrow()
            {
                if (Scarecrow.WaterFactor() > 0.8f)
                {
                    Scarecrow.Kill();
                    return;
                }
                if (Scarecrow.Brain.Senses.Memory.Targets.Count > 0)
                {
                    for (var i = 0; i < Scarecrow.Brain.Senses.Memory.Targets.Count; i++)
                    {
                        BasePlayer player = Scarecrow.Brain.Senses.Memory.Targets[i] as BasePlayer;
                        if (player == null || !player.IsAlive())
                        {
                            ClearSenses();
                            returningHome = true;
                            isRoaming = false;
                            return;
                        }
                        else if (Scarecrow.Distance(player.transform.position) > Settings.TargetLostRange)
                        {
                            ClearSenses();
                            returningHome = true;
                            isRoaming = false;
                            return;
                        }
                        else if (config.options.attackOwner && Scarecrow.OwnerID == player.userID)
                        {
                            Scarecrow.Brain.SwitchToState(AIState.Attack, 0);
                            return;
                        }
                        else if (config.options.useFriends || config.options.useClans || config.options.useTeams)
                        {
                            if (Scarecrow.OwnerID != player.userID && !plugin.IsFriend(Scarecrow.OwnerID, player.userID))
                            {
                                Scarecrow.Brain.SwitchToState(AIState.Attack, 0);
                                return;
                            }
                        }
                    }
                }

                if (status == StateStatus.Finished || status == StateStatus.Error)
                {
                    var distanceHome = Vector3.Distance(Scarecrow.transform.position, HomeLoc);
                    if (!returningHome)
                    {
                        if (isRoaming && distanceHome > Settings.MaxRoamRange)
                        {
                            returningHome = true;
                            isRoaming = false;
                            return;
                        }
                        if (isRoaming && distanceHome < Settings.MaxRoamRange)
                        {
                            Vector3 random = UnityEngine.Random.insideUnitCircle.normalized * Settings.MaxRoamRange;
                            Vector3 newPos = plugin.GetNavPoint(Scarecrow.transform.position + new Vector3(random.x, 0f, random.y));
                            SetDest(newPos, Scarecrow);
                            return;
                        }
                    }
                    else if (returningHome)
                    {
                        ClearSenses();
                        SetDest(HomeLoc, Scarecrow);
                        return;
                    }
                }
            }

            private void SetDest(Vector3 position, ScarecrowNPC scarecrow)
            {
                TargetPos = position;
                scarecrow.Brain.Navigator.Destination = position;
                Scarecrow.Brain.SwitchToState(AIState.Roam, 0);
                scarecrow.Brain.Navigator.SetDestination(position, BaseNavigator.NavigationSpeed.Slow, 0f, 0f);
                status = StateStatus.Running;
            }

            private void BreathingChatter()
            {
                BaseEntity target = Scarecrow.Brain.Senses.GetNearestTarget(Settings.AggroRange);
                if (target != null && Scarecrow.IsAlive() && Vector3.Distance(Scarecrow.transform.position, target.transform.position) < Settings.AggroRange)
                {
                    Effect.server.Run(murdererChatter, Scarecrow, StringPool.Get("head"), Vector3.zero, Vector3.zero, null, false);
                }
            }

            private void OnDestroy()
            {
                if (Scarecrow != null && !Scarecrow.IsDestroyed)
                {
                    Scarecrow.Kill();
                }
                if (Settings.DeathSound)
                {
                    Effect.server.Run(murdererDeath, Scarecrow.transform.position);
                }
                CancelInvoke(nameof(MoveScarecrow));
                CancelInvoke(nameof(BreathingChatter));
                CancelInvoke(nameof(CheckPosition));
            }
        }

        #endregion

        #region Config

        private static ConfigData config;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "General Options")]
            public Options options;
            [JsonProperty(PropertyName = "Human NPC Options")]
            public Human human;
            [JsonProperty(PropertyName = "Animal NPC Options")]
            public Animal animal;
            [JsonProperty(PropertyName = "Bradley APC Options")]
            public Bradley bradley;
            
            public class Options
            {
                [JsonProperty(PropertyName = "Attack Owner")]
                public bool attackOwner;
                [JsonProperty(PropertyName = "Use Friends")]
                public bool useFriends;
                [JsonProperty(PropertyName = "Use Clans")]
                public bool useClans;
                [JsonProperty(PropertyName = "Use Teams")]
                public bool useTeams;
                [JsonProperty(PropertyName = "Use Permissions")]
                public bool usePerms;
                [JsonProperty(PropertyName = "Chat Prefix")]
                public string chatPrefix;
                [JsonProperty(PropertyName = "Use Chat Prefix")]
                public bool usePrefix;
                [JsonProperty(PropertyName = "NPC Safe")]
                public bool npcSafe;
                [JsonProperty(PropertyName = "Bradley Safe")]
                public bool bradleySafe;
                [JsonProperty(PropertyName = "Turret Safe")]
                public bool turretSafe;
                [JsonProperty(PropertyName = "Animal Safe")]
                public bool animalSafe;
                [JsonProperty(PropertyName = "Sleeper Safe")]
                public bool sleeperSafe;
            }
            public class Human
            {
                [JsonProperty(PropertyName = "Scientist Enabled")]
                public bool npcScientist;
                [JsonProperty(PropertyName = "Heavy Scientist Enabled")]
                public bool npcHeavy;
                [JsonProperty(PropertyName = "Juggernaut Enabled")]
                public bool npcJuggernaut;
                [JsonProperty(PropertyName = "Tunnel Dweller Enabled")]
                public bool npcTunnel;
                [JsonProperty(PropertyName = "Underwater Dweller Enabled")]
                public bool npcUnderwater;
                [JsonProperty(PropertyName = "Murderer Enabled")]
                public bool npcMurderer;
                [JsonProperty(PropertyName = "Scarecrow Enabled")]
                public bool npcScarecrow;
                [JsonProperty(PropertyName = "Mummy Enabled")]
                public bool npcMummy;
            }
            public class Animal
            {
                [JsonProperty(PropertyName = "Bear Enabled")]
                public bool npcBear;
                [JsonProperty(PropertyName = "Polar Bear Enabled")]
                public bool npcPolarbear;
                [JsonProperty(PropertyName = "Wolf Enabled")]
                public bool npcWolf;
                [JsonProperty(PropertyName = "Boar Enabled")]
                public bool npcBoar;
                [JsonProperty(PropertyName = "Stag Enabled")]
                public bool npcStag;
                [JsonProperty(PropertyName = "Chicken Enabled")]
                public bool npcChicken;
            }
            public class Bradley
            {
                [JsonProperty(PropertyName = "Bradley APC Enabled")]
                public bool npcBradley;
                [JsonProperty(PropertyName = "Bradley Can Damage Player Bases")]
                public bool bradleyBaseDamage;
            }
            public VersionNumber Version { get; set; }
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                options = new ConfigData.Options
                {
                    attackOwner = false,
                    useFriends = true,
                    useClans = true,
                    useTeams = true,
                    usePerms = true,
                    chatPrefix = "[NPC Grenades]: ",
                    usePrefix = true,
                    npcSafe = true,
                    bradleySafe = true,
                    turretSafe = true,
                    animalSafe = true,
                    sleeperSafe = true
                },
                human = new ConfigData.Human
                {
                    npcScientist = true,
                    npcHeavy = true,
                    npcJuggernaut = true,
                    npcTunnel = true,
                    npcUnderwater = true,
                    npcMurderer = true,
                    npcScarecrow = true,
                    npcMummy = true
                },
                animal = new ConfigData.Animal
                {
                    npcBear = true,
                    npcPolarbear = true,
                    npcWolf = true,
                    npcBoar = true,
                    npcStag = true,
                    npcChicken = true
                },
                bradley = new ConfigData.Bradley
                {
                    npcBradley = true,
                    bradleyBaseDamage = false
                },
                Version = Version
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<ConfigData>();
                if (config == null)
                {
                    LoadDefaultConfig();
                }
                else
                {
                    UpdateConfigValues();
                }
            }
            catch (Exception ex)
            {
                if (ex is JsonSerializationException || ex is NullReferenceException || ex is JsonReaderException)
                {
                    Puts($"Exception Type: {ex.GetType()}");
                    LoadDefaultConfig();
                    return;
                }
                throw;
            }
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Configuration file missing or corrupt, creating default config file.");
            config = GetDefaultConfig();
            SaveConfig();
        }
        
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        private void UpdateConfigValues()
        {
            previousVersion = config.Version;

            ConfigData defaultConfig = GetDefaultConfig();
            if (config.Version < Version)
            {
                Puts("Config update detected! Updating config file...");
                if (config.Version < new VersionNumber(1, 1, 0))
                {
                    config.options.useFriends = defaultConfig.options.useFriends;
                    config.options.useClans = defaultConfig.options.useClans;
                    config.options.useTeams = defaultConfig.options.useTeams;
                    config.options.usePerms = defaultConfig.options.usePerms;
                    config.human.npcScientist = defaultConfig.human.npcScientist;
                    config.human.npcHeavy = defaultConfig.human.npcHeavy;
                    config.human.npcJuggernaut = defaultConfig.human.npcJuggernaut;
                    config.human.npcMurderer = defaultConfig.human.npcMurderer;
                    config.human.npcScarecrow = defaultConfig.human.npcScarecrow;
                    config.human.npcMummy = defaultConfig.human.npcMummy;
                    config.animal.npcBear = defaultConfig.animal.npcBear;
                    config.animal.npcWolf = defaultConfig.animal.npcWolf;
                    config.animal.npcBoar = defaultConfig.animal.npcBoar;
                    config.animal.npcStag = defaultConfig.animal.npcStag;
                    config.animal.npcChicken = defaultConfig.animal.npcChicken;
                    config.bradley.npcBradley = defaultConfig.bradley.npcBradley;
                }
                if (config.Version < new VersionNumber(1, 1, 4))
                {
                    config.options.chatPrefix = defaultConfig.options.chatPrefix;
                    config.options.usePrefix = defaultConfig.options.usePrefix;
                    config.options.npcSafe = defaultConfig.options.npcSafe;
                    config.options.bradleySafe = defaultConfig.options.bradleySafe;
                    config.options.turretSafe = defaultConfig.options.turretSafe;
                    config.options.animalSafe = defaultConfig.options.animalSafe;
                }
                if (config.Version < new VersionNumber(1, 1, 5))
                {
                    config.options.attackOwner = defaultConfig.options.attackOwner;
                    config.options.sleeperSafe = defaultConfig.options.sleeperSafe;
                }
                if (config.Version < new VersionNumber(1, 1, 8))
                {
                    config.human.npcTunnel = defaultConfig.human.npcTunnel;
                    config.human.npcUnderwater = defaultConfig.human.npcUnderwater;
                    config.human.npcMurderer = defaultConfig.human.npcMurderer;
                    config.human.npcMummy = defaultConfig.human.npcMummy;
                    config.human.npcScarecrow = defaultConfig.human.npcScarecrow;
                }
                if (config.Version < new VersionNumber(1, 1, 12))
                {
                    config.human.npcMurderer = defaultConfig.human.npcMurderer;
                    config.human.npcMummy = defaultConfig.human.npcMummy;
                    config.human.npcScarecrow = defaultConfig.human.npcScarecrow;
                }
                if (config.Version < new VersionNumber(1, 1, 19))
                {
                    config.bradley.bradleyBaseDamage = defaultConfig.bradley.bradleyBaseDamage;
                }
                if (config.Version < new VersionNumber(1, 2, 1))
                {
                    config.animal.npcPolarbear = defaultConfig.animal.npcPolarbear;
                }
                Puts("Config update complete!");
            }
            config.Version = Version;
            SaveConfig();
        }

        #endregion

        #region Temporary Data

        private Dictionary<ulong, NPCPlayer> GrenadeNPCData = new Dictionary<ulong, NPCPlayer>();
        private Dictionary<ulong, BaseNpc> BaseNpcData = new Dictionary<ulong, BaseNpc>();
        private Dictionary<ulong, BradleyAPC> BradleyAPCData = new Dictionary<ulong, BradleyAPC>();
        private Dictionary<ulong, Inv> NPCInventories = new Dictionary<ulong, Inv>();
        private Dictionary<ulong, GrenadeData> NadeInfo = new Dictionary<ulong, GrenadeData>();

        private class Inv
        {
            public string name;
            public List<InvContents>[] inventory = { new List<InvContents>(), new List<InvContents>(), new List<InvContents>() };
        }

        private class InvContents
        {
            public int ID;
            public int amount; 
            public ulong skinID;
        }

        private class GrenadeData
        {
            public string Name;
            public ulong ID;
            public string Cmd;
            public bool Enabled;
            public string Perm;
            public string Prefab;
        }

        private void LoadNadeInfo()
        {
            NadeInfo.Add(scientistSkinID, new GrenadeData());
            NadeInfo[scientistSkinID].Name = "Scientist Grenade";
            NadeInfo[scientistSkinID].ID = scientistSkinID;
            NadeInfo[scientistSkinID].Cmd = "scientist";
            NadeInfo[scientistSkinID].Enabled = config.human.npcScientist;
            NadeInfo[scientistSkinID].Perm = permScientist;
            NadeInfo[scientistSkinID].Prefab = scientistPrefab;

            NadeInfo.Add(heavySkinID, new GrenadeData());
            NadeInfo[heavySkinID].Name = "Heavy Scientist Grenade";
            NadeInfo[heavySkinID].ID = heavySkinID;
            NadeInfo[heavySkinID].Cmd = "heavy";
            NadeInfo[heavySkinID].Enabled = config.human.npcHeavy;
            NadeInfo[heavySkinID].Perm = permHeavy;
            NadeInfo[heavySkinID].Prefab = heavyPrefab;

            NadeInfo.Add(juggernautSkinID, new GrenadeData());
            NadeInfo[juggernautSkinID].Name = "Juggernaut Grenade";
            NadeInfo[juggernautSkinID].ID = juggernautSkinID;
            NadeInfo[juggernautSkinID].Cmd = "juggernaut";
            NadeInfo[juggernautSkinID].Enabled = config.human.npcJuggernaut;
            NadeInfo[juggernautSkinID].Perm = permJuggernaut;
            NadeInfo[juggernautSkinID].Prefab = heavyPrefab;

            NadeInfo.Add(tunnelSkinID, new GrenadeData());
            NadeInfo[tunnelSkinID].Name = "Tunnel Dweller Grenade";
            NadeInfo[tunnelSkinID].ID = tunnelSkinID;
            NadeInfo[tunnelSkinID].Cmd = "tunnel";
            NadeInfo[tunnelSkinID].Enabled = config.human.npcTunnel;
            NadeInfo[tunnelSkinID].Perm = permTunnel;
            NadeInfo[tunnelSkinID].Prefab = scientistPrefab;

            NadeInfo.Add(underwaterSkinID, new GrenadeData());
            NadeInfo[underwaterSkinID].Name = "Underwater Dweller Grenade";
            NadeInfo[underwaterSkinID].ID = underwaterSkinID;
            NadeInfo[underwaterSkinID].Cmd = "underwater";
            NadeInfo[underwaterSkinID].Enabled = config.human.npcUnderwater;
            NadeInfo[underwaterSkinID].Perm = permUnderwater;
            NadeInfo[underwaterSkinID].Prefab = scientistPrefab;

            NadeInfo.Add(murdererSkinID, new GrenadeData());
            NadeInfo[murdererSkinID].Name = "Murderer Grenade";
            NadeInfo[murdererSkinID].ID = murdererSkinID;
            NadeInfo[murdererSkinID].Cmd = "murderer";
            NadeInfo[murdererSkinID].Enabled = config.human.npcMurderer;
            NadeInfo[murdererSkinID].Perm = permMurderer;
            NadeInfo[murdererSkinID].Prefab = scarecrowPrefab;

            NadeInfo.Add(scarecrowSkinID, new GrenadeData());
            NadeInfo[scarecrowSkinID].Name = "Scarecrow Grenade";
            NadeInfo[scarecrowSkinID].ID = scarecrowSkinID;
            NadeInfo[scarecrowSkinID].Cmd = "scarecrow";
            NadeInfo[scarecrowSkinID].Enabled = config.human.npcScarecrow;
            NadeInfo[scarecrowSkinID].Perm = permScarecrow;
            NadeInfo[scarecrowSkinID].Prefab = scarecrowPrefab;

            NadeInfo.Add(mummySkinID, new GrenadeData());
            NadeInfo[mummySkinID].Name = "Mummy Grenade";
            NadeInfo[mummySkinID].ID = mummySkinID;
            NadeInfo[mummySkinID].Cmd = "mummy";
            NadeInfo[mummySkinID].Enabled = config.human.npcMummy;
            NadeInfo[mummySkinID].Perm = permMummy;
            NadeInfo[mummySkinID].Prefab = scarecrowPrefab;

            NadeInfo.Add(bearSkinID, new GrenadeData());
            NadeInfo[bearSkinID].Name = "Bear Grenade";
            NadeInfo[bearSkinID].ID = bearSkinID;
            NadeInfo[bearSkinID].Cmd = "bear";
            NadeInfo[bearSkinID].Enabled = config.animal.npcBear;
            NadeInfo[bearSkinID].Perm = permBear;
            NadeInfo[bearSkinID].Prefab = bearPrefab;

            NadeInfo.Add(polarbearSkinID, new GrenadeData());
            NadeInfo[polarbearSkinID].Name = "Polar Bear Grenade";
            NadeInfo[polarbearSkinID].ID = polarbearSkinID;
            NadeInfo[polarbearSkinID].Cmd = "polarbear";
            NadeInfo[polarbearSkinID].Enabled = config.animal.npcPolarbear;
            NadeInfo[polarbearSkinID].Perm = permPolarbear;
            NadeInfo[polarbearSkinID].Prefab = polarbearPrefab;

            NadeInfo.Add(wolfSkinID, new GrenadeData());
            NadeInfo[wolfSkinID].Name = "Wolf Grenade";
            NadeInfo[wolfSkinID].ID = wolfSkinID;
            NadeInfo[wolfSkinID].Cmd = "wolf";
            NadeInfo[wolfSkinID].Enabled = config.animal.npcWolf;
            NadeInfo[wolfSkinID].Perm = permWolf;
            NadeInfo[wolfSkinID].Prefab = wolfPrefab;

            NadeInfo.Add(boarSkinID, new GrenadeData());
            NadeInfo[boarSkinID].Name = "Boar Grenade";
            NadeInfo[boarSkinID].ID = boarSkinID;
            NadeInfo[boarSkinID].Cmd = "boar";
            NadeInfo[boarSkinID].Enabled = config.animal.npcBoar;
            NadeInfo[boarSkinID].Perm = permBoar;
            NadeInfo[boarSkinID].Prefab = boarPrefab;

            NadeInfo.Add(stagSkinID, new GrenadeData());
            NadeInfo[stagSkinID].Name = "Stag Grenade";
            NadeInfo[stagSkinID].ID = stagSkinID;
            NadeInfo[stagSkinID].Cmd = "stag";
            NadeInfo[stagSkinID].Enabled = config.animal.npcStag;
            NadeInfo[stagSkinID].Perm = permStag;
            NadeInfo[stagSkinID].Prefab = stagPrefab;

            NadeInfo.Add(chickenSkinID, new GrenadeData());
            NadeInfo[chickenSkinID].Name = "Chicken Grenade";
            NadeInfo[chickenSkinID].ID = chickenSkinID;
            NadeInfo[chickenSkinID].Cmd = "chicken";
            NadeInfo[chickenSkinID].Enabled = config.animal.npcChicken;
            NadeInfo[chickenSkinID].Perm = permChicken;
            NadeInfo[chickenSkinID].Prefab = chickenPrefab;

            NadeInfo.Add(bradleySkinID, new GrenadeData());
            NadeInfo[bradleySkinID].Name = "Bradley Grenade";
            NadeInfo[bradleySkinID].ID = bradleySkinID;
            NadeInfo[bradleySkinID].Cmd = "bradley";
            NadeInfo[bradleySkinID].Enabled = config.bradley.npcBradley;
            NadeInfo[bradleySkinID].Perm = permBradley;
            NadeInfo[bradleySkinID].Prefab = bradleyPrefab;
        }

        #endregion

        #region Stored Data

        private StoredData storedData;

        private class StoredData
        {
            public Dictionary<string, NPCPlayerData> HumanNPC = new Dictionary<string, NPCPlayerData>();
            public Dictionary<string, AnimalData> AnimalNPC = new Dictionary<string, AnimalData>();
            public Dictionary<string, APCData> BradleyNPC = new Dictionary<string, APCData>();
        }

        private class NPCPlayerData
        {
            public string Name;
            public string Prefab;
            public float Health;
            public float MaxRoamRange;
            public float SenseRange;
            public float ListenRange;
            public float AggroRange;
            public float DeAggroRange;
            public float TargetLostRange;
            public float MemoryDuration;
            public float VisionCone;
            public bool CheckVisionCone;
            public bool CheckLOS;
            public bool IgnoreNonVisionSneakers;
            public float DamageScale;
            public bool PeaceKeeper;
            public bool IgnoreSafeZonePlayers;
            public bool RadioChatter;
            public bool DeathSound;
            public int NumberToSpawn;
            public int SpawnRadius;
            public float DespawnTime;
            public bool KillInSafeZone;
            public bool StripCorpseLoot;
            public List<string> KitList = new List<string>();
            public float Speed;
            public float Acceleration;
            public float FastSpeedFraction;
            public float NormalSpeedFraction;
            public float SlowSpeedFraction;
            public float SlowestSpeedFraction;
            public float LowHealthMaxSpeedFraction;
            public float TurnSpeed;
            public ulong GrenadeSkinID;
            public string Permission;
            public string ExplosionSound;
            public List<Loadout> DefaultLoadout = new List<Loadout>();
        }

        private class AnimalData
        {
            public string Name;
            public string Prefab;
            public float Health;
            public bool KillInSafeZone;
            public float DespawnTime;
            public int NumberToSpawn;
            public int SpawnRadius;
            public ulong GrenadeSkinID;
            public string Permission;
            public string ExplosionSound;
        }

        private class APCData
        {
            public string Name;
            public string Prefab;
            public float Health;
            public float ViewDistance;
            public float SearchRange;
            public float PatrolRange;
            public int PatrolPathNodes;
            public float ThrottleResponse;
            public int CratesToSpawn;
            public bool KillInSafeZone;
            public float DespawnTime;
            public int NumberToSpawn;
            public int SpawnRadius;
            public ulong GrenadeSkinID;
            public string Permission;
            public string ExplosionSound;
        }

        private class Loadout
        {
            public string Shortname;
            public ulong SkinID;
            public int Amount;
            [JsonProperty(PropertyName = "Container Type (Belt, Main, Wear)")]
            public string Container;
        }

        private void UpdateStoredData()
        {
            if (previousVersion < new VersionNumber(1, 2, 1))
            {
                Puts($"Updating new data values, all existing values will remain unchanged.");
                string key = "Scientist Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = ScientistLoadout();
                }
                key = "Heavy Scientist Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = HeavyLoadout();
                }
                key = "Juggernaut Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = JuggernautLoadout();
                }
                key = "Tunnel Dweller Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = TunnelLoadout();
                }
                key = "Underwater Dweller Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = UnderwaterLoadout();
                }
                key = "Murderer Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = MurdererLoadout();
                }
                key = "Scarecrow Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = ScarecrowLoadout();
                }
                key = "Mummy Grenade";
                if(storedData.HumanNPC.ContainsKey(key))
                {
                    storedData.HumanNPC[key].DefaultLoadout = MummyLoadout();
                }
                key = String.Empty;
            }
        }

        private void LoadDefaultData()
        {
            string key = "Scientist Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Scientist";
                storedData.HumanNPC[key].Prefab = scientistPrefab;
                storedData.HumanNPC[key].Health = 150f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = scientistSkinID;
                storedData.HumanNPC[key].Permission = permScientist;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = ScientistLoadout();
            }
            key = "Heavy Scientist Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Heavy Scientist";
                storedData.HumanNPC[key].Prefab = heavyPrefab;
                storedData.HumanNPC[key].Health = 300f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 2f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = heavySkinID;
                storedData.HumanNPC[key].Permission = permHeavy;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = HeavyLoadout();
            }
            key = "Juggernaut Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Juggernaut";
                storedData.HumanNPC[key].Prefab = heavyPrefab;
                storedData.HumanNPC[key].Health = 900f;
                storedData.HumanNPC[key].MaxRoamRange = 40f;
                storedData.HumanNPC[key].SenseRange = 60f;
                storedData.HumanNPC[key].ListenRange = 50f;
                storedData.HumanNPC[key].AggroRange = 50f;
                storedData.HumanNPC[key].DeAggroRange = 60f;
                storedData.HumanNPC[key].TargetLostRange = 70f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 180f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 3f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = juggernautSkinID;
                storedData.HumanNPC[key].Permission = permJuggernaut;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = JuggernautLoadout();
            }
            key = "Tunnel Dweller Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Tunnel Dweller";
                storedData.HumanNPC[key].Prefab = scientistPrefab;
                storedData.HumanNPC[key].Health = 150f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = false;
                storedData.HumanNPC[key].DeathSound = false;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = tunnelSkinID;
                storedData.HumanNPC[key].Permission = permTunnel;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = TunnelLoadout();
            }
            key = "Underwater Dweller Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Underwater Dweller";
                storedData.HumanNPC[key].Prefab = scientistPrefab;
                storedData.HumanNPC[key].Health = 150f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = false;
                storedData.HumanNPC[key].DeathSound = false;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = underwaterSkinID;
                storedData.HumanNPC[key].Permission = permUnderwater;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = UnderwaterLoadout();
            }
            key = "Murderer Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Murderer";
                storedData.HumanNPC[key].Prefab = scarecrowPrefab;
                storedData.HumanNPC[key].Health = 200f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = murdererSkinID;
                storedData.HumanNPC[key].Permission = permMurderer;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = MurdererLoadout();
            }
            key = "Scarecrow Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Scarecrow";
                storedData.HumanNPC[key].Prefab = scarecrowPrefab;
                storedData.HumanNPC[key].Health = 200f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = scarecrowSkinID;
                storedData.HumanNPC[key].Permission = permScarecrow;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = ScarecrowLoadout();
            }
            key = "Mummy Grenade";
            if(!storedData.HumanNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.HumanNPC.Add(key, new NPCPlayerData());
                storedData.HumanNPC[key].Name = "Mummy";
                storedData.HumanNPC[key].Prefab = scarecrowPrefab;
                storedData.HumanNPC[key].Health = 200f;
                storedData.HumanNPC[key].MaxRoamRange = 30f;
                storedData.HumanNPC[key].SenseRange = 40f;
                storedData.HumanNPC[key].ListenRange = 30f;
                storedData.HumanNPC[key].AggroRange = 30f;
                storedData.HumanNPC[key].DeAggroRange = 40f;
                storedData.HumanNPC[key].TargetLostRange = 50f;
                storedData.HumanNPC[key].MemoryDuration = 10f;
                storedData.HumanNPC[key].VisionCone = 135f;
                storedData.HumanNPC[key].CheckVisionCone = true;
                storedData.HumanNPC[key].CheckLOS = true;
                storedData.HumanNPC[key].IgnoreNonVisionSneakers = true;
                storedData.HumanNPC[key].DamageScale = 1f;
                storedData.HumanNPC[key].PeaceKeeper = false;
                storedData.HumanNPC[key].IgnoreSafeZonePlayers = true;
                storedData.HumanNPC[key].RadioChatter = true;
                storedData.HumanNPC[key].DeathSound = true;
                storedData.HumanNPC[key].NumberToSpawn = 1;
                storedData.HumanNPC[key].SpawnRadius = 10;
                storedData.HumanNPC[key].DespawnTime = 300f;
                storedData.HumanNPC[key].KillInSafeZone = true;
                storedData.HumanNPC[key].StripCorpseLoot = false;
                storedData.HumanNPC[key].KitList = new List<string>();
                storedData.HumanNPC[key].Speed = 6.2f;
                storedData.HumanNPC[key].Acceleration = 12f;
                storedData.HumanNPC[key].FastSpeedFraction = 1f;
                storedData.HumanNPC[key].NormalSpeedFraction = 0.5f;
                storedData.HumanNPC[key].SlowSpeedFraction = 0.3f;
                storedData.HumanNPC[key].SlowestSpeedFraction = 0.1f;
                storedData.HumanNPC[key].LowHealthMaxSpeedFraction = 0.5f;
                storedData.HumanNPC[key].TurnSpeed = 120f;
                storedData.HumanNPC[key].GrenadeSkinID = mummySkinID;
                storedData.HumanNPC[key].Permission = permMummy;
                storedData.HumanNPC[key].ExplosionSound = explosionSound;
                storedData.HumanNPC[key].DefaultLoadout = MummyLoadout();
            }
            /////////////////////// BaseNPC ////////////////////////
            key = "Bear Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Bear";
                storedData.AnimalNPC[key].Prefab = bearPrefab;
                storedData.AnimalNPC[key].Health = 400f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = bearSkinID;
                storedData.AnimalNPC[key].Permission = permBear;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            key = "Polar Bear Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Polar Bear";
                storedData.AnimalNPC[key].Prefab = polarbearPrefab;
                storedData.AnimalNPC[key].Health = 400f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = polarbearSkinID;
                storedData.AnimalNPC[key].Permission = permPolarbear;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            key = "Wolf Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Wolf";
                storedData.AnimalNPC[key].Prefab = wolfPrefab;
                storedData.AnimalNPC[key].Health = 150f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = wolfSkinID;
                storedData.AnimalNPC[key].Permission = permWolf;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            key = "Boar Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Boar";
                storedData.AnimalNPC[key].Prefab = boarPrefab;
                storedData.AnimalNPC[key].Health = 150f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = boarSkinID;
                storedData.AnimalNPC[key].Permission = permBoar;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            key = "Stag Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Stag";
                storedData.AnimalNPC[key].Prefab = stagPrefab;
                storedData.AnimalNPC[key].Health = 150f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = stagSkinID;
                storedData.AnimalNPC[key].Permission = permStag;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            key = "Chicken Grenade";
            if(!storedData.AnimalNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.AnimalNPC.Add(key, new AnimalData());
                storedData.AnimalNPC[key].Name = "Chicken";
                storedData.AnimalNPC[key].Prefab = chickenPrefab;
                storedData.AnimalNPC[key].Health = 25f;
                storedData.AnimalNPC[key].KillInSafeZone = true;
                storedData.AnimalNPC[key].DespawnTime = 300f;
                storedData.AnimalNPC[key].NumberToSpawn = 1;
                storedData.AnimalNPC[key].SpawnRadius = 10;
                storedData.AnimalNPC[key].GrenadeSkinID = chickenSkinID;
                storedData.AnimalNPC[key].Permission = permChicken;
                storedData.AnimalNPC[key].ExplosionSound = explosionSound;
            }
            //////////////////////// BradleyAPC /////////////////////////
            key = "Bradley Grenade";
            if(!storedData.BradleyNPC.ContainsKey(key))
            {
                Puts($"Data contains no entries for {key}, populating default values.");
                storedData.BradleyNPC.Add(key, new APCData());
                storedData.BradleyNPC[key].Name = "Bradley APC";
                storedData.BradleyNPC[key].Prefab = bradleyPrefab;
                storedData.BradleyNPC[key].Health = 1000f;
                storedData.BradleyNPC[key].ViewDistance = 60f;
                storedData.BradleyNPC[key].SearchRange = 40f;
                storedData.BradleyNPC[key].PatrolRange = 20f;
                storedData.BradleyNPC[key].PatrolPathNodes = 6;
                storedData.BradleyNPC[key].ThrottleResponse = 1f;
                storedData.BradleyNPC[key].CratesToSpawn = 3;
                storedData.BradleyNPC[key].KillInSafeZone = true;
                storedData.BradleyNPC[key].DespawnTime = 300f;
                storedData.BradleyNPC[key].NumberToSpawn = 1;
                storedData.BradleyNPC[key].SpawnRadius = 20;
                storedData.BradleyNPC[key].GrenadeSkinID = bradleySkinID;
                storedData.BradleyNPC[key].Permission = permBradley;
                storedData.BradleyNPC[key].ExplosionSound = bradleyExplosion;
            }
            UpdateStoredData();
            SaveData();
        }

        #endregion

        #region Default Loadouts

        private static List<Loadout> ScientistLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "hazmatsuit_scientist", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "rifle.ak", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "ammo.rifle", SkinID = 0, Amount = 30, Container = "Main"}
            };
        }

        private static List<Loadout> HeavyLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "scientistsuit_heavy", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "lmg.m249", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "ammo.rifle", SkinID = 0, Amount = 50, Container = "Main"}
            };
        }

        private static List<Loadout> JuggernautLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "heavy.plate.helmet", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "heavy.plate.jacket", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "heavy.plate.pants", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "shoes.boots", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "lmg.m249", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "ammo.rifle", SkinID = 0, Amount = 100, Container = "Main"}
            };
        }

        private static List<Loadout> TunnelLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "hat.gas.mask", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "jumpsuit.suit", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "shoes.boots", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "pistol.m92", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "ammo.pistol", SkinID = 0, Amount = 20, Container = "Main"}
            };
        }

        private static List<Loadout> UnderwaterLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "hat.gas.mask", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "jumpsuit.suit.blue", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "shoes.boots", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "pistol.m92", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "ammo.pistol", SkinID = 0, Amount = 20, Container = "Main"}
            };
        }

        private static List<Loadout> MurdererLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "burlap.headwrap", SkinID = 807624505, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "gloweyes", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "tshirt", SkinID = 795997221, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "burlap.gloves", SkinID = 1132774091, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "burlap.trousers", SkinID = 806966575, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "shoes.boots", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "machete", SkinID = 0, Amount = 1, Container = "Belt" }
            };
        }

        private static List<Loadout> ScarecrowLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "scarecrow.suit", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "chainsaw", SkinID = 0, Amount = 1, Container = "Belt" },
                new Loadout { Shortname = "lowgradefuel", SkinID = 0, Amount = 30, Container = "Main"}
            };
        }

        private static List<Loadout> MummyLoadout()
        {
            return new List<Loadout>
            {
                new Loadout { Shortname = "halloween.mummysuit", SkinID = 0, Amount = 1, Container = "Wear" },
                new Loadout { Shortname = "sickle", SkinID = 0, Amount = 1, Container = "Belt" }
            };
        }

        #endregion
    }
}

// --- End of file: NPCGrenades.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/FireArrows.cs ---
// --- Original Local Path: FireArrows.cs ---

using System;
using System.Collections.Generic;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("FireArrows", "Colon Blow", "1.2.3")]
    class FireArrows : RustPlugin
    {

        [PluginReference]
        Plugin ZoneManager;

	bool Changed;
	
	Dictionary<ulong, FireArrowData> FireArrowOn = new Dictionary<ulong, FireArrowData>();
	Dictionary<ulong, FireBallData> FireBallOn = new Dictionary<ulong, FireBallData>();
	Dictionary<ulong, FireBombData> FireBombOn = new Dictionary<ulong, FireBombData>();
	Dictionary<ulong, string> GuiInfoFA = new Dictionary<ulong, string>();

        class FireArrowData
        {
             	public BasePlayer player;
        }

        class FireBombData
        {
             	public BasePlayer player;
        }

        class FireBallData
        {
             	public BasePlayer player;
        }

        void Loaded()
        {         
		LoadVariables();
            	lang.RegisterMessages(messagesFA, this);
		permission.RegisterPermission("firearrows.allowed", this);
		permission.RegisterPermission("firearrows.ball.allowed", this);
		permission.RegisterPermission("firearrows.bomb.allowed", this);
        }

        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
		string guiInfo;
		if (GuiInfoFA.TryGetValue(player.userID, out guiInfo)) CuiHelper.DestroyUi(player, guiInfo);
            }
        }

        void LoadDefaultConfig()
        {
            	Puts("Creating a new config file");
            	Config.Clear();
            	LoadVariables();
        }
	

////////Configuration Stuff////////////////////////////////////////////////////////////////////////////

	static bool ShowArrowTypeIcon = true;
	static bool BlockinRestrictedZone = false;
	static bool UseProt = true;
	static float DamageFireArrow = 50f;
	static float DamageFireBall = 200f;
	static float DamageFireBomb = 500f;
	static float DamageRadius = 1f;
	static float DurationFireArrow = 10f;
	static float DurationFireBallArrow = 10f;
	static float DurationFireBombArrow = 10f;

	static string RestrictedZoneID = "24072018";
	static int cloth = 5;
	static int fuel = 5;
	static int oil = 5;
	static int explosives = 5;

	private string IconFireArrow = "http://i.imgur.com/3e8FWvt.png";
	private string IconFireBall = "http://i.imgur.com/USdpXGT.png";
	private string IconFireBomb = "http://i.imgur.com/0DpAHMn.png";

	bool isRestricted;
        private void LoadVariables()
        {
            	LoadConfigVariables();
            	SaveConfig();
        }

        private void LoadConfigVariables()
        {
        	CheckCfg("Icon - Show Arrow Type", ref ShowArrowTypeIcon);
		CheckCfg("Restriction - Block usage in Restricted Zone", ref BlockinRestrictedZone);
		CheckCfg("Damage Protection - Use Entity Protection Values", ref UseProt);
        	CheckCfgFloat("Damage - Fire Arrow", ref DamageFireArrow);
        	CheckCfgFloat("Damage - Fire Ball Arrow", ref DamageFireBall);
        	CheckCfgFloat("Damage - Fire Bomb Arrow", ref DamageFireBomb);
		CheckCfgFloat("Damage - Radius", ref DamageRadius);
		CheckCfgFloat("Duration - Fire Arrow", ref DurationFireArrow);
		CheckCfgFloat("Duration - Fire Ball Arrow", ref DurationFireBallArrow);
		CheckCfgFloat("Duration - Fire Bomb Arrow", ref DurationFireBombArrow);
		CheckCfg("Zone - Restricted Zone ID", ref RestrictedZoneID);
		CheckCfg("Required - All Arrows - Cloth Amount", ref cloth);
		CheckCfg("Required - All Arrows- Low Grade Fuel Amount", ref fuel);
		CheckCfg("Required - FireBall & FireBomb Arrows - Crude Oil", ref oil);
		CheckCfg("Required - FireBomb Arrows - Explosives", ref explosives);
        	CheckCfg("Icon - Fire Arrow", ref IconFireArrow);
        	CheckCfg("Icon - Fire Ball Arrow", ref IconFireBall);
        	CheckCfg("Icon - Fire Bomb Arrow", ref IconFireBomb);
        }

        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }

        private void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }

        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

////////Language Settings////////////////////////////////////////////////////////////////////////////

       	Dictionary<string, string> messagesFA = new Dictionary<string, string>()
            	{
                	{"firearrowtxt", "Your Arrows are set for Fire."},
			{"fireballarrowtxt", "Your Arrows are set for FireBall."},
			{"firebombarrowtxt", "Your Arrows are set for FireBomb."},
                	{"doesnothavemattxt", "You don't have required materials..."},
               	 	{"defaultarrowtxt", "Your Arrows are set for Normal."},
			{"restricted", "You are not allowed FireArrows in this Zone"},
			{"deniedarrowtxt", "No Access to This Arrow Tier."}
            	};

////////Arrow Damage and FX control////////////////////////////////////////////////////////////////////

	void OnPlayerAttack(BasePlayer player, HitInfo hitInfo)
	{
           	if (usingCorrectWeapon(player))
		{

				ArrowFX(player, hitInfo);
				return;
		}
	}

	void ArrowFX(BasePlayer player, HitInfo hitInfo)
	{

		if (FireArrowOn.ContainsKey(player.userID))
			{
			FireArrowFX(player, hitInfo);
			return;
			}
		if (FireBallOn.ContainsKey(player.userID))
			{
			FireBallFX(player, hitInfo);
			return;			
			}
		if (FireBombOn.ContainsKey(player.userID))
			{
			FireBombFX(player, hitInfo);
			return;
			}
		else
		return;
	}

	void FireArrowFX(BasePlayer player, HitInfo hitInfo)
	{
		if (!hasResources(player)) { tellDoesNotHaveMaterials(player); return; }
		applyBlastDamage(player, DamageFireArrow, Rust.DamageType.Heat, hitInfo);

		Effect.server.Run("assets/bundled/prefabs/fx/impacts/additive/fire.prefab", hitInfo.HitPositionWorld);
		BaseEntity FireArrow = GameManager.server.CreateEntity("assets/bundled/prefabs/fireball.prefab", hitInfo.HitPositionWorld);
		FireArrow?.Spawn();
		timer.Once(DurationFireArrow, () => FireArrow.Kill());
		return;
	}

	void FireBallFX(BasePlayer player, HitInfo hitInfo)
	{
		if (!notZoneRestricted(player)) { tellRestricted(player); return; }
		if (!hasResources(player)) { tellDoesNotHaveMaterials(player); return; }

		applyBlastDamage(player, DamageFireBall, Rust.DamageType.Heat, hitInfo);
		timer.Once(1, () => applyBlastDamage(player, DamageFireBall, Rust.DamageType.Heat, hitInfo));
		timer.Once(2, () => applyBlastDamage(player, DamageFireBall, Rust.DamageType.Heat, hitInfo));
		timer.Once(3, () => applyBlastDamage(player, DamageFireBall, Rust.DamageType.Heat, hitInfo));

		Effect.server.Run("assets/bundled/prefabs/fx/survey_explosion.prefab", hitInfo.HitPositionWorld);
		BaseEntity FireBallArrow = GameManager.server.CreateEntity("assets/bundled/prefabs/napalm.prefab", hitInfo.HitPositionWorld);
		FireBallArrow?.Spawn();
		timer.Once(DurationFireBallArrow, () => FireBallArrow.Kill());
		return;
	}

	void FireBombFX(BasePlayer player, HitInfo hitInfo)
	{
		if (!notZoneRestricted(player)) { tellRestricted(player); return; }
		if (!hasResources(player)) { tellDoesNotHaveMaterials(player); return; }

		applyBlastDamage(player, DamageFireBomb, Rust.DamageType.Explosion, hitInfo);

		Effect.server.Run("assets/bundled/prefabs/fx/weapons/landmine/landmine_explosion.prefab", hitInfo.HitPositionWorld);
		BaseEntity FireBombArrow = GameManager.server.CreateEntity("assets/bundled/prefabs/oilfireballsmall.prefab", hitInfo.HitPositionWorld);
		FireBombArrow?.Spawn();
		timer.Once(DurationFireBombArrow, () => FireBombArrow.Kill());
		return;
	}

	void applyBlastDamage(BasePlayer player, float damageamount, Rust.DamageType damagetype, HitInfo hitInfo)
	{
	playerBlastDamage(player, damageamount, damagetype, hitInfo);
	}

	void playerBlastDamage(BasePlayer player, float damageamount, Rust.DamageType damagetype, HitInfo hitInfo)
	{
	
        List<BaseCombatEntity> playerlist = new List<BaseCombatEntity>();
        Vis.Entities<BaseCombatEntity>(hitInfo.HitPositionWorld, DamageRadius, playerlist);

		foreach (BaseCombatEntity p in playerlist)
                {
		if (!(p is BuildingPrivlidge))
			{
			p.Hurt(damageamount, damagetype, player, UseProt);
			}
                }
	}

////////Arrow Toggle Control ////////////////////////////////////////////////////////////////////////////

	void OnPlayerInput(BasePlayer player, InputState input)
        {
        	if (input.WasJustPressed(BUTTON.FIRE_THIRD))
		{
			ToggleArrowType(player);
		}
	}

	[ChatCommand("firearrow")]
        void cmdChatfirearrow(BasePlayer player, string command, string[] args)
	{
		ToggleArrowType(player);
	}

	[ConsoleCommand("firearrow")]
        void cmdConsolefirearrow(ConsoleSystem.Arg arg)
	{
            if (arg.connection == null)
            {
                SendReply(arg, "You can't use this command from the server console");
                return;
            }
		var player = arg.Player();
		ToggleArrowType(player);
	}

	void ToggleArrowType(BasePlayer player)
       	{
		if (!usingCorrectWeapon(player)) return;

		if (FireArrowOn.ContainsKey(player.userID))
		{
			FireBallToggle(player);
			return;	
		}
		if (FireBallOn.ContainsKey(player.userID))
		{
			FireBombToggle(player);
			return;
		}
		if (FireBombOn.ContainsKey(player.userID))
		{
			NormalArrowToggle(player);
			return;
		}
		if ((!FireArrowOn.ContainsKey(player.userID)) || (!FireBallOn.ContainsKey(player.userID)) || (!FireBombOn.ContainsKey(player.userID)))
		{
			FireArrowToggle(player);
			return;
		}
		else
		NormalArrowToggle(player);
		return;
        }

	void NormalArrowToggle(BasePlayer player)
	{
		DestroyArrowData(player);
		SendReply(player, lang.GetMessage("defaultarrowtxt", this));
		DestroyCui(player);
		return;
	}

	void FireArrowToggle(BasePlayer player)
	{
		if (!IsAllowed(player, "firearrows.allowed"))
			{
			FireBallToggle(player);
			return;
			}
		DestroyArrowData(player);
		FireArrowOn.Add(player.userID, new FireArrowData
		{
		player = player,
		});
		SendReply(player, lang.GetMessage("firearrowtxt", this));
		DestroyCui(player);
		ArrowGui(player);
		return;
	}

	void FireBallToggle(BasePlayer player)
	{
		if (!IsAllowed(player, "firearrows.ball.allowed"))
			{
			FireBombToggle(player);
			return;
			}
		DestroyArrowData(player);
		FireBallOn.Add(player.userID, new FireBallData
		{
		player = player,
		});
		SendReply(player, lang.GetMessage("fireballarrowtxt", this));
		DestroyCui(player);
		ArrowGui(player);
		return;
	}

	void FireBombToggle(BasePlayer player)
	{
		if (!IsAllowed(player, "firearrows.bomb.allowed"))
			{
			NormalArrowToggle(player);
			return;
			}
		DestroyArrowData(player);
		FireBombOn.Add(player.userID, new FireBombData
		{
		player = player,
		});
		SendReply(player, lang.GetMessage("firebombarrowtxt", this));
		DestroyCui(player);
		ArrowGui(player);
		return;
	}

///////////Checks to see if player has resources for Arrow///////////////////////////////////////

	bool hasResources(BasePlayer player)
	{
		int cloth_amount = player.inventory.GetAmount(94756378);
		int fuel_amount = player.inventory.GetAmount(28178745);
		int oil_amount = player.inventory.GetAmount(1983936587);
		int explosives_amount = player.inventory.GetAmount(1755466030);

		if (FireArrowOn.ContainsKey(player.userID))
			{
			if (cloth_amount >= cloth && fuel_amount >= fuel)
				{
				player.inventory.Take(null, 28178745, fuel);
				player.inventory.Take(null, 94756378, cloth);
				player.Command("note.inv", 28178745, -fuel);
				player.Command("note.inv", 94756378, -cloth);
				return true;
				}
			return false;
			}
		if (FireBallOn.ContainsKey(player.userID))
			{
			if (cloth_amount >= cloth && fuel_amount >= fuel && oil_amount >= oil)
				{
				player.inventory.Take(null, 28178745, fuel);
				player.inventory.Take(null, 94756378, cloth);
				player.inventory.Take(null, 1983936587, oil);
				player.Command("note.inv", 28178745, -fuel);
				player.Command("note.inv", 94756378, -cloth);
				player.Command("note.inv", 1983936587, -oil);
				return true;
				}
			return false;
			}
		if (FireBombOn.ContainsKey(player.userID))
			{
			if (cloth_amount >= cloth && fuel_amount >= fuel && oil_amount >= oil && explosives_amount >= explosives)
				{
				player.inventory.Take(null, 28178745, fuel);
				player.inventory.Take(null, 94756378, cloth);
				player.inventory.Take(null, 1983936587, oil);
				player.inventory.Take(null, 1755466030, explosives);
				player.Command("note.inv", 28178745, -fuel);
				player.Command("note.inv", 94756378, -cloth);
				player.Command("note.inv", 1983936587, -oil);
				player.Command("note.inv", 1755466030, -explosives);
				return true;
				}
			return false;
			}

	return false;
	}

////////Shows Arrow type icons on player screen////////////////////////////////////////////////////////////////

	void ArrowCui(BasePlayer player)
	{
	if (ShowArrowTypeIcon) ArrowGui(player);
	}

        void ArrowGui(BasePlayer player)
        {
	DestroyCui(player);

        var elements = new CuiElementContainer();
        GuiInfoFA[player.userID] = CuiHelper.GetGuid();

        if (ShowArrowTypeIcon)
	{
		if (FireArrowOn.ContainsKey(player.userID))
        	{
        	elements.Add(new CuiElement
                	{
                    	Name = GuiInfoFA[player.userID],
			Parent = "Overlay",
                    	Components =
                    		{
                        	new CuiRawImageComponent { Color = "1 1 1 1", Url = IconFireArrow, Sprite = "assets/content/textures/generic/fulltransparent.tga" },
                        	new CuiRectTransformComponent { AnchorMin = "0.165 0.025",  AnchorMax = "0.210 0.095"}
                    		}
                	});
         	}
        	if (FireBallOn.ContainsKey(player.userID))
        	{
        	elements.Add(new CuiElement
                	{
                    	Name = GuiInfoFA[player.userID],
			Parent = "Overlay",
                    	Components =
                    		{
                        	new CuiRawImageComponent { Color = "1 1 1 1", Url = IconFireBall, Sprite = "assets/content/textures/generic/fulltransparent.tga" },
                        	new CuiRectTransformComponent { AnchorMin = "0.165 0.025",  AnchorMax = "0.210 0.095"}
                    		}
                	});
         	}
		if (FireBombOn.ContainsKey(player.userID))
        	{
        	elements.Add(new CuiElement
                	{
                    	Name = GuiInfoFA[player.userID],
			Parent = "Overlay",
                    	Components =
                    		{
                        	new CuiRawImageComponent { Color = "1 1 1 1", Url = IconFireBomb, Sprite = "assets/content/textures/generic/fulltransparent.tga" },
                        	new CuiRectTransformComponent { AnchorMin = "0.165 0.025",  AnchorMax = "0.210 0.095"}
                    		}
                	});
         	}

	}
         CuiHelper.AddUi(player, elements);
        }

////////Helpers////////////////////////////////////////////////////////////////////////////////

	bool notZoneRestricted(BasePlayer player)
	{
		isRestricted = false;
		var ZoneManager = plugins.Find("ZoneManager");
		bool Zone1Check = Convert.ToBoolean(ZoneManager?.Call("isPlayerInZone", RestrictedZoneID, player));
		if (Zone1Check)
		{
		isRestricted = true;
		}
		if (isRestricted) return false;
		return true;
	}
	
	void tellNotGrantedArrow(BasePlayer player)
	{
		SendReply(player, lang.GetMessage("deniedarrowtxt", this));
	}

	void tellDoesNotHaveMaterials(BasePlayer player)
	{
		SendReply(player, lang.GetMessage("doesnothavemattxt", this));
	}
        
	void tellRestricted(BasePlayer player)
	{
		SendReply(player, lang.GetMessage("restricted", this));
	}

	bool IsAllowed(BasePlayer player, string perm)
        {
        	if (permission.UserHasPermission(player.userID.ToString(), perm)) return true;
        	return false;
        }

	bool usingCorrectWeapon(BasePlayer player)
	{
	Item activeItem = player.GetActiveItem();
        if (activeItem != null && activeItem.info.shortname == "crossbow") return true;
	if (activeItem != null && activeItem.info.shortname == "bow.hunting") return true;
	return false;
	}

	void DestroyCui(BasePlayer player)
	{
		string guiInfo;
		if (GuiInfoFA.TryGetValue(player.userID, out guiInfo)) CuiHelper.DestroyUi(player, guiInfo);
	}

	void DestroyArrowData(BasePlayer player)
		{
		if (FireArrowOn.ContainsKey(player.userID))
			{
			FireArrowOn.Remove(player.userID);
			}
		if (FireBallOn.ContainsKey(player.userID))
			{
			FireBallOn.Remove(player.userID);
			}
		if (FireBombOn.ContainsKey(player.userID))
			{
			FireBombOn.Remove(player.userID);
			}
		else
		return;
		}

	void OnPlayerRespawned(BasePlayer player)
	{
                DestroyCui(player);
		DestroyArrowData(player);
	}

	void OnPlayerDisconnected(BasePlayer player, string reason)
	{
                DestroyCui(player);
		DestroyArrowData(player);
	}

    }


}

// --- End of file: FireArrows.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AutoDoors.cs ---
// --- Original Local Path: AutoDoors.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Auto Doors", "Wulf/lukespragg/Arainrr/James/Bushhy", "3.3.10", ResourceId = 1924)]
    [Description("Automatically closes doors behind players after X seconds")]
    public class AutoDoors : RustPlugin
    {
        #region Fields

        [PluginReference] private Plugin RustTranslationAPI;
        private const string PERMISSION_USE = "autodoors.use";
        private readonly Hash<ulong, Timer> doorTimers = new Hash<ulong, Timer>();
        private readonly Dictionary<string, string> supportedDoors = new Dictionary<string, string>();
        private HashSet<DoorManipulator> doorManipulators;

        #endregion Fields

        #region Oxide Hooks

        private void Init()
        {
            LoadData();
            Unsubscribe(nameof(OnEntitySpawned));
            permission.RegisterPermission(PERMISSION_USE, this);
            if (configData.chatS.commands.Length == 0)
            {
                configData.chatS.commands = new[] { "ad" };
            }
            foreach (var command in configData.chatS.commands)
            {
                cmd.AddChatCommand(command, this, nameof(CmdAutoDoor));
            }
        }

        private void OnServerInitialized()
        {
            UpdateConfig();
            if (configData.globalS.excludeDoorController)
            {
                doorManipulators = new HashSet<DoorManipulator>();
                Subscribe(nameof(OnEntitySpawned));
                foreach (var doorManipulator in BaseNetworkable.serverEntities.OfType<DoorManipulator>())
                {
                    OnEntitySpawned(doorManipulator);
                }
            }
        }

        private void OnEntitySpawned(DoorManipulator doorManipulator)
        {
            if (doorManipulator == null || doorManipulator.OwnerID == 0) return;
            doorManipulators.Add(doorManipulator);
        }

        private void OnEntityKill(DoorManipulator doorManipulator)
        {
            if (doorManipulator == null || doorManipulators == null) return;
            doorManipulators.RemoveWhere(x => x == doorManipulator);
        }

        private void OnEntityKill(Door door)
        {
            if (door == null || door.net == null) return;
            var doorID = door.net.ID.Value;
            Timer value;
            if (doorTimers.TryGetValue(doorID, out value))
            {
                value?.Destroy();
                doorTimers.Remove(doorID);
            }
            foreach (var playerData in storedData.playerData.Values)
            {
                playerData.theDoorS.Remove(doorID);
            }
        }

        private void OnServerSave() => timer.Once(UnityEngine.Random.Range(0f, 60f), SaveData);

        private void Unload()
        {
            foreach (var value in doorTimers.Values)
            {
                value?.Destroy();
            }
            SaveData();
        }

        private void OnDoorOpened(Door door, BasePlayer player)
        {
            if (door == null || door.net == null || !door.IsOpen()) return;
            if (!supportedDoors.ContainsKey(door.ShortPrefabName)) return;
            if (!configData.globalS.useUnownedDoor && door.OwnerID == 0) return;
            if (configData.globalS.excludeDoorController && HasDoorController(door)) return;
            if (configData.usePermission && !permission.UserHasPermission(player.UserIDString, PERMISSION_USE)) return;

            var playerData = GetPlayerData(player.userID, true);
            if (!playerData.doorData.enabled) return;
            float autoCloseTime;
            var doorID = door.net.ID.Value;
            StoredData.DoorData doorData;
            if (playerData.theDoorS.TryGetValue(doorID, out doorData))
            {
                if (!doorData.enabled) return;
                autoCloseTime = doorData.time;
            }
            else if (playerData.doorTypeS.TryGetValue(door.ShortPrefabName, out doorData))
            {
                if (!doorData.enabled) return;
                autoCloseTime = doorData.time;
            }
            else autoCloseTime = playerData.doorData.time;

            if (autoCloseTime <= 0) return;
            if (Interface.CallHook("OnDoorAutoClose", player, door) != null) return;

            Timer value;
            if (doorTimers.TryGetValue(doorID, out value))
            {
                value?.Destroy();
            }
            doorTimers[doorID] = timer.Once(autoCloseTime, () =>
            {
                doorTimers.Remove(doorID);
                if (door == null || !door.IsOpen()) return;
                if (configData.globalS.cancelOnKill && player != null && player.IsDead()) return;
                door.SetFlag(BaseEntity.Flags.Open, false);
                door.SendNetworkUpdateImmediate();
            });
        }

        private void OnDoorClosed(Door door, BasePlayer player)
        {
            if (door == null || door.net == null || door.IsOpen()) return;
            Timer value;
            if (doorTimers.TryGetValue(door.net.ID.Value, out value))
            {
                value?.Destroy();
                doorTimers.Remove(door.net.ID.Value);
            }
        }

        #endregion Oxide Hooks

        #region Methods

        private bool HasDoorController(Door door)
        {
            foreach (var doorManipulator in doorManipulators)
            {
                if (doorManipulator != null && doorManipulator.targetDoor == door)
                {
                    return true;
                }
            }
            return false;
        }

        private StoredData.PlayerData GetPlayerData(ulong playerID, bool readOnly = false)
        {
            StoredData.PlayerData playerData;
            if (!storedData.playerData.TryGetValue(playerID, out playerData))
            {
                playerData = new StoredData.PlayerData
                {
                    doorData = new StoredData.DoorData
                    {
                        enabled = configData.globalS.defaultEnabled,
                        time = configData.globalS.defaultDelay,
                    }
                };
                if (readOnly)
                {
                    return playerData;
                }
                storedData.playerData.Add(playerID, playerData);
            }

            return playerData;
        }

        private static Door GetLookingAtDoor(BasePlayer player)
        {
            RaycastHit rHit;
            if (Physics.Raycast(player.eyes.HeadRay(), out rHit, 10f, Rust.Layers.Mask.Construction))
            {
                return rHit.GetEntity() as Door;
            }
            return null;
        }

        private void UpdateConfig()
        {
            foreach (var itemDefinition in ItemManager.GetItemDefinitions())
            {
                var itemModDeployable = itemDefinition.GetComponent<ItemModDeployable>();
                if (itemModDeployable == null) continue;
                var door = GameManager.server.FindPrefab(itemModDeployable.entityPrefab.resourcePath)?.GetComponent<Door>();
                if (door == null || string.IsNullOrEmpty(door.ShortPrefabName)) continue;
                ConfigData.DoorSettings doorSettings;
                if (!configData.doorS.TryGetValue(itemDefinition.shortname, out doorSettings))
                {
                    doorSettings = new ConfigData.DoorSettings
                    {
                        enabled = true,
                        displayName = itemDefinition.displayName.english
                    };
                    configData.doorS.Add(itemDefinition.shortname, doorSettings);
                }
                if (doorSettings.enabled && !supportedDoors.ContainsKey(door.ShortPrefabName))
                {
                    supportedDoors.Add(door.ShortPrefabName, doorSettings.displayName);
                }
            }
            SaveConfig();
        }

        #region RustTranslationAPI

        private string GetDeployableTranslation(string language, string deployable) => (string)RustTranslationAPI.Call("GetDeployableTranslation", language, deployable);

        private string GetDeployableDisplayName(BasePlayer player, string deployable, string displayName)
        {
            if (RustTranslationAPI != null)
            {
                displayName = GetDeployableTranslation(lang.GetLanguage(player.UserIDString), deployable);
                if (!string.IsNullOrEmpty(displayName))
                {
                    return displayName;
                }
            }
            return displayName;
        }

        #endregion RustTranslationAPI

        #endregion Methods

        #region ChatCommand

        private void CmdAutoDoor(BasePlayer player, string command, string[] args)
        {
            if (configData.usePermission && !permission.UserHasPermission(player.UserIDString, PERMISSION_USE))
            {
                Print(player, Lang("NotAllowed", player.UserIDString));
                return;
            }
            var playerData = GetPlayerData(player.userID);
            if (args == null || args.Length == 0)
            {
                playerData.doorData.enabled = !playerData.doorData.enabled;
                Print(player, Lang("AutoDoor", player.UserIDString, playerData.doorData.enabled ? Lang("Enabled", player.UserIDString) : Lang("Disabled", player.UserIDString)));
                return;
            }
            float time;
            if (float.TryParse(args[0], out time))
            {
                if (time <= configData.globalS.maximumDelay && time >= configData.globalS.minimumDelay)
                {
                    playerData.doorData.time = time;
                    if (!playerData.doorData.enabled) playerData.doorData.enabled = true;
                    Print(player, Lang("AutoDoorDelay", player.UserIDString, time));
                    return;
                }
                Print(player, Lang("AutoDoorDelayLimit", player.UserIDString, configData.globalS.minimumDelay, configData.globalS.maximumDelay));
                return;
            }
            switch (args[0].ToLower())
            {
                case "a":
                case "all":
                    {
                        if (args.Length > 1)
                        {
                            if (float.TryParse(args[1], out time))
                            {
                                if (time <= configData.globalS.maximumDelay && time >= configData.globalS.minimumDelay)
                                {
                                    playerData.doorData.time = time;
                                    playerData.doorTypeS.Clear();
                                    playerData.theDoorS.Clear();
                                    Print(player, Lang("AutoDoorDelayAll", player.UserIDString, time));
                                    return;
                                }

                                Print(player,
                                    Lang("AutoDoorDelayLimit", player.UserIDString, configData.globalS.minimumDelay,
                                        configData.globalS.maximumDelay));
                                return;
                            }
                        }

                        break;
                    }
                case "s":
                case "single":
                    {
                        var door = GetLookingAtDoor(player);
                        if (door == null || door.net == null)
                        {
                            Print(player, Lang("DoorNotFound", player.UserIDString));
                            return;
                        }

                        string doorDisplayName;
                        if (!supportedDoors.TryGetValue(door.ShortPrefabName, out doorDisplayName))
                        {
                            Print(player, Lang("DoorNotSupported", player.UserIDString));
                            return;
                        }

                        StoredData.DoorData doorData;
                        if (!playerData.theDoorS.TryGetValue(door.net.ID.Value, out doorData))
                        {
                            doorData = new StoredData.DoorData
                            { enabled = true, time = configData.globalS.defaultDelay };
                            playerData.theDoorS.Add(door.net.ID.Value, doorData);
                        }

                        if (args.Length <= 1)
                        {
                            doorData.enabled = !doorData.enabled;
                            Print(player,
                                Lang("AutoDoorSingle", player.UserIDString,
                                    GetDeployableDisplayName(player, door.ShortPrefabName, doorDisplayName),
                                    doorData.enabled
                                        ? Lang("Enabled", player.UserIDString)
                                        : Lang("Disabled", player.UserIDString)));
                            return;
                        }

                        if (float.TryParse(args[1], out time))
                        {
                            if (time <= configData.globalS.maximumDelay && time >= configData.globalS.minimumDelay)
                            {
                                doorData.time = time;
                                Print(player, Lang("AutoDoorSingleDelay", player.UserIDString,
                                    GetDeployableDisplayName(player, door.ShortPrefabName, doorDisplayName), time));
                                return;
                            }

                            Print(player,
                                Lang("AutoDoorDelayLimit", player.UserIDString, configData.globalS.minimumDelay,
                                    configData.globalS.maximumDelay));
                            return;
                        }

                        break;
                    }

                case "t":
                case "type":
                    {
                        var door = GetLookingAtDoor(player);
                        if (door == null || door.net == null)
                        {
                            Print(player, Lang("DoorNotFound", player.UserIDString));
                            return;
                        }

                        string doorDisplayName;
                        if (!supportedDoors.TryGetValue(door.ShortPrefabName, out doorDisplayName))
                        {
                            Print(player, Lang("DoorNotSupported", player.UserIDString));
                            return;
                        }

                        StoredData.DoorData doorData;
                        if (!playerData.doorTypeS.TryGetValue(door.ShortPrefabName, out doorData))
                        {
                            doorData = new StoredData.DoorData
                            { enabled = true, time = configData.globalS.defaultDelay };
                            playerData.doorTypeS.Add(door.ShortPrefabName, doorData);
                        }

                        if (args.Length <= 1)
                        {
                            doorData.enabled = !doorData.enabled;
                            Print(player,
                                Lang("AutoDoorType", player.UserIDString, GetDeployableDisplayName(player, door.ShortPrefabName, doorDisplayName),
                                    doorData.enabled
                                        ? Lang("Enabled", player.UserIDString)
                                        : Lang("Disabled", player.UserIDString)));
                            return;
                        }

                        if (float.TryParse(args[1], out time))
                        {
                            if (time <= configData.globalS.maximumDelay && time >= configData.globalS.minimumDelay)
                            {
                                doorData.time = time;
                                Print(player, Lang("AutoDoorTypeDelay", player.UserIDString,
                                    GetDeployableDisplayName(player, door.ShortPrefabName, doorDisplayName), time));
                                return;
                            }

                            Print(player,
                                Lang("AutoDoorDelayLimit", player.UserIDString, configData.globalS.minimumDelay,
                                    configData.globalS.maximumDelay));
                            return;
                        }

                        break;
                    }

                case "h":
                case "help":
                    {
                        StringBuilder stringBuilder = Pool.Get<StringBuilder>();
                        stringBuilder.AppendLine();
                        var firstCmd = configData.chatS.commands[0];
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax", player.UserIDString, firstCmd));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax1", player.UserIDString, firstCmd,
                            configData.globalS.minimumDelay, configData.globalS.maximumDelay));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax2", player.UserIDString, firstCmd));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax3", player.UserIDString, firstCmd,
                            configData.globalS.minimumDelay, configData.globalS.maximumDelay));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax4", player.UserIDString, firstCmd));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax5", player.UserIDString, firstCmd,
                            configData.globalS.minimumDelay, configData.globalS.maximumDelay));
                        stringBuilder.AppendLine(Lang("AutoDoorSyntax6", player.UserIDString, firstCmd,
                            configData.globalS.minimumDelay, configData.globalS.maximumDelay));
                        Print(player, stringBuilder.ToString());
                        stringBuilder.Clear();
                        Pool.Free(ref stringBuilder);
                        return;
                    }
            }
            Print(player, Lang("SyntaxError", player.UserIDString, configData.chatS.commands[0]));
        }

        #endregion ChatCommand

        #region ConfigurationFile

        private ConfigData configData;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Use permissions")]
            public bool usePermission = false;

            [JsonProperty(PropertyName = "Clear data on map wipe")]
            public bool clearDataOnWipe = false;

            [JsonProperty(PropertyName = "Global settings")]
            public GlobalSettings globalS = new GlobalSettings();

            [JsonProperty(PropertyName = "Chat settings")]
            public ChatSettings chatS = new ChatSettings();

            [JsonProperty(PropertyName = "Door Settings")]
            public Dictionary<string, DoorSettings> doorS = new Dictionary<string, DoorSettings>();

            public class DoorSettings
            {
                public bool enabled;
                public string displayName;
            }

            public class GlobalSettings
            {
                [JsonProperty(PropertyName = "Allows automatic closing of unowned doors")]
                public bool useUnownedDoor = false;

                [JsonProperty(PropertyName = "Exclude door controller")]
                public bool excludeDoorController = true;

                [JsonProperty(PropertyName = "Cancel on player dead")]
                public bool cancelOnKill = false;

                [JsonProperty(PropertyName = "Default enabled")]
                public bool defaultEnabled = true;

                [JsonProperty(PropertyName = "Default delay")]
                public float defaultDelay = 5f;

                [JsonProperty(PropertyName = "Maximum delay")]
                public float maximumDelay = 10f;

                [JsonProperty(PropertyName = "Minimum delay")]
                public float minimumDelay = 5f;
            }

            public class ChatSettings
            {
                [JsonProperty(PropertyName = "Chat command")]
                public string[] commands = { "ad", "autodoor" };

                [JsonProperty(PropertyName = "Chat prefix")]
                public string prefix = "<color=#00FFFF>[AutoDoors]</color>: ";

                [JsonProperty(PropertyName = "Chat steamID icon")]
                public ulong steamIDIcon = 0;
            }

            [JsonProperty(PropertyName = "Version")]
            public VersionNumber version;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                configData = Config.ReadObject<ConfigData>();
                if (configData == null)
                {
                    LoadDefaultConfig();
                }
                else
                {
                    UpdateConfigValues();
                }
            }
            catch (Exception ex)
            {
                PrintError($"The configuration file is corrupted. \n{ex}");
                LoadDefaultConfig();
            }
            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file");
            configData = new ConfigData();
            configData.version = Version;
        }

        protected override void SaveConfig() => Config.WriteObject(configData);

        private void UpdateConfigValues()
        {
            if (configData.version < Version)
            {
                if (configData.version <= default(VersionNumber))
                {
                    string prefix, prefixColor;
                    if (GetConfigValue(out prefix, "Chat Settings", "Chat Prefix") && GetConfigValue(out prefixColor, "Chat Settings", "Chat Prefix Color"))
                    {
                        configData.chatS.prefix = $"<color={prefixColor}>{prefix}</color>: ";
                    }
                }
                configData.version = Version;
            }
        }

        private bool GetConfigValue<T>(out T value, params string[] path)
        {
            var configValue = Config.Get(path);
            if (configValue == null)
            {
                value = default(T);
                return false;
            }
            value = Config.ConvertValue<T>(configValue);
            return true;
        }

        #endregion ConfigurationFile

        #region DataFile

        private StoredData storedData;

        private class StoredData
        {
            public readonly Dictionary<ulong, PlayerData> playerData = new Dictionary<ulong, PlayerData>();

            public class PlayerData
            {
                public DoorData doorData = new DoorData();
                public readonly Dictionary<ulong, DoorData> theDoorS = new Dictionary<ulong, DoorData>();
                public readonly Dictionary<string, DoorData> doorTypeS = new Dictionary<string, DoorData>();
            }

            public class DoorData
            {
                public bool enabled;
                public float time;
            }
        }

        private void LoadData()
        {
            try
            {
                storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);
            }
            catch
            {
                storedData = null;
            }
            finally
            {
                if (storedData == null)
                {
                    ClearData();
                }
            }
        }

        private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(Name, storedData);

        private void ClearData()
        {
            storedData = new StoredData();
            SaveData();
        }

        private void OnNewSave(string filename)
        {
            if (configData.clearDataOnWipe)
            {
                ClearData();
            }
            else
            {
                foreach (var value in storedData.playerData.Values)
                {
                    value.theDoorS.Clear();
                }
                SaveData();
            }
        }

        #endregion DataFile

        #region LanguageFile

        private void Print(BasePlayer player, string message)
        {
            Player.Message(player, message, configData.chatS.prefix, configData.chatS.steamIDIcon);
        }

        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NotAllowed"] = "You do not have permission to use this command",
                ["Enabled"] = "<color=#8ee700>Enabled</color>",
                ["Disabled"] = "<color=#ce422b>Disabled</color>",
                ["AutoDoor"] = "Automatic door closing is now {0}",
                ["AutoDoorDelay"] = "Automatic door closing delay set to {0}s. (Doors set by 'single' and 'type' are not included)",
                ["AutoDoorDelayAll"] = "Automatic closing delay of all doors set to {0}s",
                ["DoorNotFound"] = "You need to look at a door",
                ["DoorNotSupported"] = "This type of door is not supported",
                ["AutoDoorDelayLimit"] = "Automatic door closing delay allowed is between {0}s and {1}s",
                ["AutoDoorSingle"] = "Automatic closing of this <color=#4DFF4D>{0}</color> is {1}",
                ["AutoDoorSingleDelay"] = "Automatic closing delay of this <color=#4DFF4D>{0}</color> is {1}s",
                ["AutoDoorType"] = "Automatic closing of <color=#4DFF4D>{0}</color> door is {1}",
                ["AutoDoorTypeDelay"] = "Automatic closing delay of <color=#4DFF4D>{0}</color> door is {1}s",
                ["SyntaxError"] = "Syntax error, type '<color=#ce422b>/{0} <help | h></color>' to view help",

                ["AutoDoorSyntax"] = "<color=#ce422b>/{0} </color> - Enable/Disable automatic door closing",
                ["AutoDoorSyntax1"] = "<color=#ce422b>/{0} [time (seconds)]</color> - Set automatic closing delay for doors, the allowed time is between {1}s and {2}s. (Doors set by 'single' and 'type' are not included)",
                ["AutoDoorSyntax2"] = "<color=#ce422b>/{0} <single | s></color> - Enable/Disable automatic closing of the door you are looking at",
                ["AutoDoorSyntax3"] = "<color=#ce422b>/{0} <single | s> [time (seconds)]</color> - Set automatic closing delay for the door you are looking at, the allowed time is between {1}s and {2}s",
                ["AutoDoorSyntax4"] = "<color=#ce422b>/{0} <type | t></color> - Enable/disable automatic door closing for the type of door you are looking at. ('type' is just a word, not the type of door)",
                ["AutoDoorSyntax5"] = "<color=#ce422b>/{0} <type | t> [time (seconds)]</color> - Set automatic closing delay for the type of door you are looking at, the allowed time is between {1}s and {2}s. ('type' is just a word, not the type of door)",
                ["AutoDoorSyntax6"] = "<color=#ce422b>/{0} <all | a> [time (seconds)]</color> - Set automatic closing delay for all doors, the allowed time is between {1}s and {2}s.",
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NotAllowed"] = "您没有权限使用该命令",
                ["Enabled"] = "<color=#8ee700>已启用</color>",
                ["Disabled"] = "<color=#ce422b>已禁用</color>",
                ["AutoDoor"] = "自动关门现在的状态为 {0}",
                ["AutoDoorDelay"] = "自动关门延迟设置为 {0}秒",
                ["AutoDoorDelayAll"] = "全部门的自动关闭延迟设置为 {0}秒",
                ["DoorNotFound"] = "请您看着一条门再输入指令",
                ["DoorNotSupported"] = "不支持您看着的这种门",
                ["AutoDoorDelayLimit"] = "自动关门延迟应该在 {0}秒 和 {1}秒 之间",
                ["AutoDoorSingle"] = "这条 <color=#4DFF4D>{0}</color> 的自动关闭状态为 {1}",
                ["AutoDoorSingleDelay"] = "这条 <color=#4DFF4D>{0}</color> 的自动关闭延迟为 {1}秒",
                ["AutoDoorType"] = "这种 <color=#4DFF4D>{0}</color> 的自动关闭状态为 {1}",
                ["AutoDoorTypeDelay"] = "这种 <color=#4DFF4D>{0}</color> 的自动关闭延迟为 {1}秒",
                ["SyntaxError"] = "语法错误, 输入 '<color=#ce422b>/{0} <help | h></color>' 查看帮助",

                ["AutoDoorSyntax"] = "<color=#ce422b>/{0} </color> - 启用/禁用自动关门",
                ["AutoDoorSyntax1"] = "<color=#ce422b>/{0} [时间 (秒)]</color> - 设置自动关门延迟。(时间在 {1}秒 和 {2}秒 之间) (不包括'single'和'type'设置的门)",
                ["AutoDoorSyntax2"] = "<color=#ce422b>/{0} <single | s></color> - 为您看着的这条门，启用/禁用自动关门",
                ["AutoDoorSyntax3"] = "<color=#ce422b>/{0} <single | s> [时间 (秒)]</color> - 为您看着的这条门设置自动关闭延迟。(时间在 {1}秒 和 {2}秒 之间)",
                ["AutoDoorSyntax4"] = "<color=#ce422b>/{0} <type | t></color> - 为您看着的这种门，启用/禁用自动关门",
                ["AutoDoorSyntax5"] = "<color=#ce422b>/{0} <type | t> [时间 (秒)]</color> - 为您看着的这种门设置自动关闭延迟。(时间在 {1}秒 和 {2}秒 之间)",
                ["AutoDoorSyntax6"] = "<color=#ce422b>/{0} <all | a> [时间 (秒)]</color> - 为所有门设置自动关闭延迟。(时间在 {1}秒 和 {2}秒 之间)",
            }, this, "zh-CN");
        }

        #endregion LanguageFile
    }
}

// --- End of file: AutoDoors.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AdminMenu-1.1.11.cs ---
// --- Original Local Path: AdminMenu-1.1.11.cs ---

using HarmonyLib;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Reflection;
using Network;
using Newtonsoft.Json;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using UnityEngine.UI;
using Facepunch;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Rust;
using System.IO;
using System.Text.RegularExpressions;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Libraries;
using System.Xml;
using System.Text;
using System.Globalization;
using Newtonsoft.Json.Linq;

namespace Oxide.Plugins
{
    [Info("AdminMenu", "0xF // dsc.gg/0xf-plugins", "1.1.11")]
    [Description("Multifunctional in-game admin menu.")]
    public class AdminMenu : RustPlugin
    {
        [PluginReference]
        private Plugin ImageLibrary, Economics, ServerRewards, Clans;
        private const string PERMISSION_USE = "adminmenu.use";
        private const string PERMISSION_FULLACCESS = "adminmenu.fullaccess";
        private const string PERMISSION_CONVARS = "adminmenu.convars";
        private const string PERMISSION_PERMISSIONMANAGER = "adminmenu.permissionmanager";
        private const string PERMISSION_PLUGINMANAGER = "adminmenu.pluginmanager";
        private const string PERMISSION_GIVE = "adminmenu.give";
        private const string PERMISSION_USERINFO_IP = "adminmenu.userinfo.ip";
        private const string PERMISSION_USERINFO_STEAMINFO = "adminmenu.userinfo.steaminfo";
        private const string ADMINMENU_IMAGEBASE64 = "iVBORw0KGgoAAAANSUhEUgAAAWcAAAD3CAYAAADBqZV6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAYeSURBVHgB7d3hbdtWGIbRj0EG8AZxJ4g3qLJBN4g7QZMJ6kyQdgNng2wQeQNtUI3gTMBeoilQFKKc2CT1mjoHIAj4/mDuFfWEoAmzCgAAAAAAAAAAAAAAAAAAAAAAAIDz1fV9f1Mcsu26bntooK3Zpu02tQ67Ns/PtSDn3JPs2+d1e2igretF272r6Y2eI+2YV233S63D5zbP3aGBGec5esyXbfu9GLMd+fmmVrRu7cS7bifIp1qOc+7x7tp2OzI2xHmOtb1t29h/4Fe1ns9z37bdyNhc89yPHfNFQfvytUC/LSCGOPMvgYYg4sx/CTSEEGf+T6AhgDhziEDDiYkzYwQaTkicOUag4UTEmYcINJyAOPM9BBoWJs58L4GGBYkzP0KgYSHizI8SaFiAOPMYAg0zE2ceS6BhRuLMUwg0zESceSqBhhmIM1MQaJiYODMVgYYJiTNTEmiYiDgzNYGGCbysaQ0vKnxfyxpevPix1mFYu11N77ptSwbztm1LvjB28NC596XWccxj7tv2pqa3r+X9WeMvld3UGbwkeOo4f+26blsLaldptSK7mdZv+22d1nxFe/Tcm+k8OcUxR7V/yxDnba3D6HehretlnQG3Nc5EO9Gva/mrWeCRxPmMCDQ8H+J8ZgQangdxPkMCDfnE+UwJNGSb+mkNnpEh0O0336/rn8cReebaZ3nRdu9qesOTE5+LRYkz98VaDHGe4/nf2xp/5piZuK0BEEicAQKJM0AgcQYIJM4AgcQZIJA4AwQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAIHEGCDT1C15f933/pZZ1UQArM3Wch1BuCoAncVsDIJA4AwQSZ4BA4gwQSJwBAk39tAak+lDT2xfMRJw5C13X3RQ8I25rAAQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAoKnjfNctrB3zTQGsjCtngEDiDBBInAECiTNAIHEGCCTOAIG84DXLx77v72tZVwUMfmvfv7cjY5e1MHHOIpRwOlHfP7c1AAKJM0AgcQYIJM4AgcQZIJA4AwQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAIHEGCCTOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwpuv7/qb4Ufuu624PDbT1vGy76+KY27Z++0MDbf2u2+6yVqDN8WZsbK55PnDMd213UdO6b8f8oxbU5jHM4V1Nb9fm8rlCDHHuix911z7EzaGBtpzDz78Ux7xp67c9NNDWb1i7Ta1Am2M3NjbXPB845r7tXtW0hguVn2pB3y6A/qrpDRcNv1aIFwVAHHEGCCTOAIHEGSCQOAMEEmeAQOIMEEicAQKJM0AgcQYIJM4AgcQZIJA4AwQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkg0Mua1q5t74+Mz/Hi01Mc8xQ+te221mFXy3tzZOxj264Kgkwd569jb1UezPSi71Mc8xT2x+bJcQ+cI/cFYdzWAAgkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAIHEGCCTOAIHEGSCQOAMEmvoPHzGfV33fb2oddl3X+WNDcIQ4Px/X37Y1GP5857aAUW5rAAQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAIHEGCCTOAIHEGSCQOAMEEmeAQOIMEEicAQIt/YLXDzW9fZ2Hbdvuah32BRy1aJy7rrspHuvO+sH5cFsDIJA4AwQSZ4BA4gwQSJwBAokzQCBxBggkzgCBxBkgkDgDBBJngEDiDBBInAECiTNAIHEGCCTOAIHEGSCQOAMEEmeAQOIMEGjpt2/zeG/7vv+51uF913W7Wrn2eX05MnxV63DxwDxnOWadAXF+Pi6/bWtwFl+uZlPrN3yWm2JybmsABBJngEDiDBBInAECiTNAIHEGCCTOAIHEGSCQOAMEEmeAQOIMEEicAQKJM0AgcQYIJM4AgcQZIJA4AwQSZ4BA4gwQSJwBAv0Nie8vXooXAzkAAAAOZVhJZk1NACoAAAAIAAAAAAAAANJTkwAAAABJRU5ErkJggg==";
        private static Dictionary<string, string> HEADERS = new Dictionary<string, string>
        {
            {
                "Content-Type",
                "application/json"
            }
        };
#if !CARBON
        private static FieldInfo PERMISSIONS_DICTIONARY_FIELD = typeof(Oxide.Core.Libraries.Permission).GetField("registeredPermissions", BindingFlags.NonPublic | BindingFlags.Instance);
        private static FieldInfo CONSOLECOMMANDS_DICTIONARY_FIELD = typeof(Oxide.Game.Rust.Libraries.Command).GetField("consoleCommands", BindingFlags.NonPublic | BindingFlags.Instance);
        private static FieldInfo CONSOLECOMMAND_CALLBACK_FIELD = CONSOLECOMMANDS_DICTIONARY_FIELD.FieldType.GetGenericArguments()[1].GetField("Callback", BindingFlags.Public | BindingFlags.Instance);
        private static FieldInfo PLUGINCALLBACK_PLUGIN_FIELD = CONSOLECOMMAND_CALLBACK_FIELD.FieldType.GetField("Plugin", BindingFlags.Public | BindingFlags.Instance);
        private static FieldInfo CHATCOMMANDS_DICTIONARY_FIELD = typeof(Oxide.Game.Rust.Libraries.Command).GetField("chatCommands", BindingFlags.NonPublic | BindingFlags.Instance);
        private static FieldInfo CHATCOMMAND_PLUGIN_FIELD = CHATCOMMANDS_DICTIONARY_FIELD.FieldType.GetGenericArguments()[1].GetField("Plugin", BindingFlags.Public | BindingFlags.Instance);
#endif
        private static AdminMenu Instance;
        private static Dictionary<string, Panel> panelList;
        private static Dictionary<ulong, SteamInfo> cachedSteamInfo = new Dictionary<ulong, SteamInfo>();
        private static string ADMINMENU_IMAGECRC;
        private MainMenu mainMenu;
        private Dictionary<string, string> defaultLang = new Dictionary<string, string>();
        private Dictionary<PlayerLoot, Item> viewingBackpacks = new Dictionary<PlayerLoot, Item>();
        static Configuration config;
        public AdminMenu()
        {
            Instance = this;
        }

        public class ButtonArray<T> : List<T> where T : Button
        {
            public ButtonArray() : base()
            {
            }

            public ButtonArray(IEnumerable<T> collection) : base(collection)
            {
            }

            public IEnumerable<T> GetAllowedButtons(Connection connection)
            {
                return GetAllowedButtons(connection.userid.ToString());
            }

            public IEnumerable<T> GetAllowedButtons(string userId)
            {
                return this.Where(b => b == null || b.UserHasPermission(userId));
            }
        }

        public class ButtonGrid<T> : List<ButtonGrid<T>.Item> where T : Button
        {
            public class Item
            {
                public int row;
                public int column;
                public T button;
                public Item(int row, int column, T button)
                {
                    this.row = row;
                    this.column = column;
                    this.button = button;
                }
            }

            public IEnumerable<Item> GetAllowedButtons(Connection connection)
            {
                return GetAllowedButtons(connection.userid.ToString());
            }

            public IEnumerable<Item> GetAllowedButtons(string userId)
            {
                return this.Where(b => b.button == null || b.button.UserHasPermission(userId));
            }
        }

        public class ButtonArray : ButtonArray<Button>
        {
        }

        public class Button
        {
            public enum State
            {
                None,
                Normal,
                Pressed,
                Toggled
            }

            private string label = null;
            private string permission = null;
            public string Command { get; set; }
            public string[] Args { get; set; }
            public Label Label { get; set; }
            public virtual int FontSize { get; set; } = 14;
            public ButtonStyle Style { get; set; } = ButtonStyle.Default;

            public string Permission
            {
                get
                {
                    return permission;
                }

                set
                {
                    if (string.IsNullOrEmpty(value))
                        return;
                    permission = string.Format("adminmenu.{0}", value);
                    if (!Instance.permission.PermissionExists(permission))
                        Instance.permission.RegisterPermission(permission, Instance);
                }
            }

            public string FullCommand
            {
                get
                {
                    return $"{Command} {string.Join(" ", Args)}";
                }
            }

            public Button()
            {
            }

            public Button(string label, string command, params string[] args)
            {
                Label = new Label(label);
                Command = command;
                Args = args;
                if (!all.ContainsKey(FullCommand))
                    all.Add(FullCommand, this);
            }

            public virtual Button.State GetState(ConnectionData connectionData)
            {
                if (connectionData.userData.TryGetValue($"button_{this.GetHashCode()}.state", out object state))
                    return (Button.State)state;
                return Button.State.None;
            }

            public virtual void SetState(ConnectionData connectionData, Button.State state)
            {
                connectionData.userData[$"button_{this.GetHashCode()}.state"] = state;
            }

            public bool UserHasPermission(Connection connection)
            {
                return UserHasPermission(connection.userid.ToString());
            }

            public bool UserHasPermission(string userId)
            {
                return Permission == null || Instance.UserHasPermission(userId, Permission);
            }

            public virtual bool IsPressed(ConnectionData connectionData)
            {
                return GetState(connectionData) == State.Pressed;
            }

            public virtual bool IsHidden(ConnectionData connectionData)
            {
                return false;
            }

            internal static Dictionary<string, Button> all = new Dictionary<string, Button>();
        }

        public class ButtonStyle : ICloneable
        {
            public string BackgroundColor { get; set; }
            public string ActiveBackgroundColor { get; set; }
            public string TextColor { get; set; }

            public object Clone()
            {
                return this.MemberwiseClone();
            }

            public static ButtonStyle Default => new ButtonStyle
            {
                BackgroundColor = "0.3 0.3 0.3 0.6",
                ActiveBackgroundColor = "0.2 0.4 0.2 0.6",
                TextColor = "1 1 1 1",
            };
        }

        public class CategoryButton : Button
        {
            public override int FontSize { get; set; } = 22;

            public CategoryButton(string label, string command, params string[] args) : base(label, command, args)
            {
            }
        }

        public class HideButton : Button
        {
            public HideButton(string label, string command, params string[] args) : base(label, command, args)
            {
            }

            public override bool IsHidden(ConnectionData connectionData)
            {
                return connectionData.userData["backcommand"] == null;
            }
        }

        public class ToggleButton : Button
        {
            public ToggleButton(string label, string command, params string[] args) : base(label, command, args)
            {
            }

            public virtual void Toggle(ConnectionData connectionData)
            {
                Button.State currentState = GetState(connectionData);
                SetState(connectionData, (currentState == State.Normal || currentState == State.None ? Button.State.Toggled : Button.State.Normal));
            }
        }

        public class ConditionToggleButton : ToggleButton
        {
            public Func<ConnectionData, bool> Condition { get; set; }

            public ConditionToggleButton(string label, string command, params string[] args) : base(label, command, args)
            {
            }

            public override State GetState(ConnectionData connectionData)
            {
                if (Condition == null)
                    return State.Normal;
                return Condition(connectionData) ? State.Toggled : State.Normal;
            }

            public override void Toggle(ConnectionData connectionData)
            {
            }
        }

        [JsonObject(MemberSerialization.OptIn)]
        public class BaseCustomButton
        {
            [JsonProperty]
            public string Label { get; set; } = string.Empty;

            [JsonProperty("Execution as server")]
            public bool ExecutionAsServer { get; set; }

            [JsonProperty("Commands")]
            public string[] Commands { get; set; } = new string[0];

            [JsonProperty("Commands for Toggled state")]
            public string[] ToggledStateCommands { get; set; } = new string[0];

            [JsonProperty]
            public string Permission { get; set; } = string.Empty;

            [JsonProperty]
            public ButtonStyle Style { get; set; } = ButtonStyle.Default;

            [JsonProperty]
            public int[] Position { get; set; } = new int[2]
            {
                0,
                0
            };
            protected virtual string BaseCommand => "custombutton";

            private Button _button;
            public Button Button
            {
                get
                {
                    if (_button == null)
                        _button = GetButton();
                    return _button;
                }
            }

            private Button GetButton()
            {
                if (ToggledStateCommands != null && ToggledStateCommands.Length > 0)
                    return new ToggleButton(Label, BaseCommand, "cb.exec", this.GetHashCode().ToString())
                    {
                        Permission = Permission.ToLower(),
                        Style = Style
                    };
                return new Button(Label, BaseCommand, "cb.exec", this.GetHashCode().ToString())
                {
                    Permission = Permission.ToLower(),
                    Style = Style
                };
            }
        }

        public class QMCustomButton : BaseCustomButton
        {
            public enum Recievers
            {
                None,
                Online,
                Offline,
                Everyone
            }

            protected override string BaseCommand => "quickmenu.action";

            [JsonProperty("Bulk sending of command to each player. Available values: None, Online, Offline, Everyone")]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Recievers PlayerReceivers { get; set; }
        }

        public class UserInfoCustomButton : BaseCustomButton
        {
            protected override string BaseCommand => "userinfo.action";
        }

        public class Configuration
        {
            [JsonProperty(PropertyName = "Text under the ADMIN MENU")]
            public string Subtext { get; set; } = "BY 0XF";

            [JsonProperty(PropertyName = "Button to hook (X | F | OFF)")]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public ButtonHook ButtonToHook { get; set; } = ButtonHook.X;

            [JsonProperty(PropertyName = "Chat command to show admin menu")]
            public string ChatCommand { get; set; } = "admin";

            [JsonProperty(PropertyName = "Theme")]
            [JsonConverter(typeof(ThemeConverter))]
            public Theme Theme { get => Themes.CurrentTheme; set => Themes.CurrentTheme = value; }

            [JsonProperty(PropertyName = "Custom Quick Buttons")]
            public List<QMCustomButton> CustomQuickButtons { get; set; } = new List<QMCustomButton>();

            [JsonProperty(PropertyName = "User Custom Buttons")]
            public List<UserInfoCustomButton> UserInfoCustomButtons { get; set; } = new List<UserInfoCustomButton>();

            [JsonProperty(PropertyName = "Give menu item presets (add your custom items for easy give)")]
            public List<ItemPreset> GiveItemPresets { get; set; } = new List<ItemPreset>();

            [JsonProperty(PropertyName = "Favorite Plugins")]
            public HashSet<string> FavoritePlugins { get; set; } = new HashSet<string>();

            [JsonProperty(PropertyName = "Logs Properties")]
            public LogsProperties Logs { get; set; } = new LogsProperties();

            [JsonIgnore]
            public Dictionary<int, string[]> HashedCommands { get; set; } = new Dictionary<int, string[]>();

            public static Configuration DefaultConfig()
            {
                return new Configuration()
                {
                    CustomQuickButtons = new List<QMCustomButton>
                    {
                        new QMCustomButton
                        {
                            Label = "Custom Button",
                            Commands = new[]
                            {
                                "chat.say \"/custom\"",
                                "adminmenu openinfopanel custom_buttons"
                            },
                            Permission = "fullaccess",
                            Style = new ButtonStyle()
                            {
                                BackgroundColor = "1 0.2 0.2 0.6",
                                TextColor = "0.95 0.6 0 1",
                            },
                            Position = new int[2]
                            {
                                0,
                                4
                            }
                        }
                    },
                    UserInfoCustomButtons = new List<UserInfoCustomButton>
                    {
                        new UserInfoCustomButton
                        {
                            Label = "Custom Button",
                            Commands = new[]
                            {
                                "chat.say \"/custom {steamID}\"",
                                "adminmenu openinfopanel custom_buttons"
                            },
                            Permission = "fullaccess",
                            Position = new int[2]
                            {
                                9,
                                0
                            }
                        }
                    },
                    GiveItemPresets = new List<ItemPreset>()
                    {
                        ItemPreset.Example
                    }
                };
            }

            public class ItemPreset
            {
                [JsonProperty(PropertyName = "Short Name")]
                public string ShortName { get; set; }

                [JsonProperty(PropertyName = "Skin Id")]
                public ulong SkinId { get; set; }

                [JsonProperty(PropertyName = "Name")]
                public string Name { get; set; }

                [JsonProperty(PropertyName = "Category Name")]
                public string Category { get; set; }

                [JsonIgnore]
                public static ItemPreset Example
                {
                    get
                    {
                        return new ItemPreset
                        {
                            ShortName = "chocolate",
                            SkinId = 3161523786,
                            Name = "Delicious cookies with chocolate",
                            Category = "Food",
                        };
                    }
                }
            }

            public class LogsProperties
            {
                [JsonProperty(PropertyName = "Discord Webhook URL for logs (https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)")]
                public string WebhookURL { get; set; } = string.Empty;

                [JsonProperty(PropertyName = "Give")]
                public bool Give { get; set; } = true;

                [JsonProperty(PropertyName = "Admin teleports")]
                public bool AdminTeleport { get; set; } = true;

                [JsonProperty(PropertyName = "Spectate")]
                public bool Spectate { get; set; } = true;

                [JsonProperty(PropertyName = "Heal")]
                public bool Heal { get; set; } = true;

                [JsonProperty(PropertyName = "Kill")]
                public bool Kill { get; set; } = true;

                [JsonProperty(PropertyName = "Look inventory")]
                public bool LookInventory { get; set; } = true;

                [JsonProperty(PropertyName = "Strip inventory")]
                public bool StripInventory { get; set; } = true;

                [JsonProperty(PropertyName = "Blueprints")]
                public bool Blueprints { get; set; } = true;

                [JsonProperty(PropertyName = "Mute/Unmute")]
                public bool MuteUnmute { get; set; } = true;

                [JsonProperty(PropertyName = "Toggle Creative")]
                public bool ToggleCreative { get; set; } = true;

                [JsonProperty(PropertyName = "Cuff")]
                public bool Cuff { get; set; } = true;

                [JsonProperty(PropertyName = "Kick the player")]
                public bool Kick { get; set; } = true;

                [JsonProperty(PropertyName = "Ban the player")]
                public bool Ban { get; set; } = true;

                [JsonProperty(PropertyName = "Using custom buttons")]
                public bool CustomButtons { get; set; } = true;

                [JsonProperty(PropertyName = "Spawn entities")]
                public bool SpawnEntities { get; set; } = true;

                [JsonProperty(PropertyName = "Set time")]
                public bool SetTime { get; set; } = true;

                [JsonProperty(PropertyName = "ConVars")]
                public bool ConVars { get; set; } = true;

                [JsonProperty(PropertyName = "Plugin Manager")]
                public bool PluginManager { get; set; } = true;
            }
        }

        public class ConnectionData
        {
            public Connection connection;
            public MainMenu currentMainMenu;
            public Panel currentPanel;
            public Sidebar currentSidebar;
            public Content currentContent;
            public Translator15 translator;
            public Dictionary<string, object> userData;
            public ConnectionData(BasePlayer player) : this(player.Connection)
            {
            }

            public ConnectionData(Connection connection)
            {
                this.connection = connection;
                this.translator = new Translator15(connection.userid);
                this.translator.Get("test");
                this.userData = new Dictionary<string, object>()
                {
                    {
                        "userId",
                        connection.userid
                    },
                    {
                        "userinfo.lastuserid",
                        connection.userid
                    },
                    {
                        "backcommand",
                        null
                    },
                };
                this.UI = new ConnectionUI(this);
                try
                {
                    Init();
                }
                catch (Exception ex)
                {
                    UnityEngine.Debug.LogException(ex);
                }
            }

            public ConnectionUI UI { get; private set; }
            public bool IsAdminMenuDisplay { get; set; }
            public bool IsDestroyed { get; set; }

            public void Init()
            {
                UI.RenderMainMenu(Instance.mainMenu);
                this.currentMainMenu = Instance.mainMenu;
            }

            public void ShowAdminMenu()
            {
                UI.ShowAdminMenu();
                IsAdminMenuDisplay = true;
            }

            public void HideAdminMenu()
            {
                UI.HideAdminMenu();
                IsAdminMenuDisplay = false;
            }

            public ConnectionData OpenPanel(string panelName)
            {
                if (panelList.TryGetValue(panelName, out Panel panel))
                {
                    if (currentPanel == panel)
                        return null;
                    if (currentContent != null)
                        currentContent.RestoreUserData(userData);
                    currentContent = null;
                    if (currentPanel != null)
                        currentPanel.OnClose(this);
                    currentPanel = panel;
                    currentSidebar = currentPanel.Sidebar;
                    UI.RenderPanel(currentPanel);
                    currentPanel.OnOpen(this);
                    Content defaultPanelContent = panel.DefaultContent;
                    if (defaultPanelContent != null)
                        ShowPanelContent(defaultPanelContent);
                    if (panel.Sidebar != null && panel.Sidebar.AutoActivateCategoryButtonIndex.HasValue)
                        Instance.HandleCommand(connection, "uipanel.sidebar.button_pressed", panel.Sidebar.AutoActivateCategoryButtonIndex.Value.ToString(), panel.Sidebar.CategoryButtons.GetAllowedButtons(connection).Count().ToString());
                    return this;
                }
                else
                {
                    Instance.PrintError($"Panel with name \"{panelName}\" not founded!");
                    return null;
                }
            }

            public void SetSidebar(Sidebar sidebar)
            {
                bool needsChangeContentSize = (currentSidebar != sidebar);
                currentSidebar = sidebar;
                CUI.Root root = new CUI.Root("AdminMenu_Panel");
                if (sidebar != null)
                    UI.AddSidebar(root, sidebar);
                else
                    root.Add(new CUI.Element { DestroyUi = "AdminMenu_Panel_Sidebar" });
                root.Render(connection);
                if (needsChangeContentSize)
                {
                    CUI.Root updateRoot = new CUI.Root();
                    updateRoot.Add(new CUI.Element { Components = { new CuiRectTransformComponent { OffsetMin = $"{(sidebar != null ? 250 : 0)} 0", } }, Name = "AdminMenu_Panel_Content" });
                    updateRoot.Update(connection);
                }
            }

            public void ShowPanelContent(Content content)
            {
                if (content == null)
                {
                    CUI.Root root = new CUI.Root();
                    root.Add(new CUI.Element { DestroyUi = "AdminMenu_Panel_TempContent" });
                    root.Render(connection);
                    return;
                }

                if (currentContent != null)
                    currentContent.RestoreUserData(userData);
                currentContent = content;
                currentContent.LoadDefaultUserData(userData);
                UI.RenderContent(content);
            }

            public void ShowPanelContent(string contentId)
            {
                ShowPanelContent(currentPanel.TryGetContent(contentId));
            }

            public void Dispose()
            {
                all.Remove(connection);
            }

            public static Dictionary<Connection, ConnectionData> all = new Dictionary<Connection, ConnectionData>();
            public static ConnectionData Get(Connection connection)
            {
                if (connection == null)
                    return null;
                ConnectionData data;
                if (all.TryGetValue(connection, out data))
                    return data;
                return null;
            }

            public static ConnectionData Get(BasePlayer player)
            {
                return Get(player.Connection);
            }

            public static ConnectionData GetOrCreate(Connection connection)
            {
                if (connection == null)
                    return null;
                ConnectionData data = Get(connection);
                if (data == null)
                    data = all[connection] = new ConnectionData(connection);
                return data;
            }

            public static ConnectionData GetOrCreate(BasePlayer player)
            {
                return GetOrCreate(player.Connection);
            }
        }

        public class ConnectionUI
        {
            Connection connection;
            ConnectionData connectionData;
            public ConnectionUI(ConnectionData connectionData)
            {
                this.connectionData = connectionData;
                this.connection = connectionData.connection;
            }

            public void ShowAdminMenu()
            {
                CUI.Root root = new CUI.Root();
                root.Add(new CUI.Element { Components = { new CuiRectTransformComponent { AnchorMin = "0 0.00001", AnchorMax = "1 1.00001" } }, Name = "AdminMenu", Update = true });
                root.Add(new CUI.Element { Components = { new CuiNeedsCursorComponent() }, Parent = "AdminMenu", Name = "AdminMenu_Cursor" });
                root.Render(connection);
            }

            public void HideAdminMenu()
            {
                CUI.Root root = new CUI.Root();
                root.Add(new CUI.Element { Components = { new CuiRectTransformComponent { AnchorMin = "1000 1000", AnchorMax = "1001 1001" } }, DestroyUi = "AdminMenu_Cursor", Name = "AdminMenu", Update = true });
                root.Render(connection);
            }

            public void DestroyAdminMenu()
            {
                CuiHelper.DestroyUi(connection.player as BasePlayer, "AdminMenu");
                CuiHelper.DestroyUi(connection.player as BasePlayer, "AdminMenu_Cursor");
                connectionData.IsDestroyed = true;
            }

            public void DestroyAll()
            {
                DestroyAdminMenu();
                CuiHelper.DestroyUi(connection.player as BasePlayer, "AdminMenu_OpenButton");
            }

            public void AddSidebar(CUI.Element element, Sidebar sidebar)
            {
                if (sidebar == null)
                    return;
                var sidebarPanel = element.AddPanel(color: Themes.CurrentTheme.GetColorString(Theme.KeyCollection.PANEL_SIDEBAR_BACKGROUND), material: "assets/content/ui/uibackgroundblur-ingamemenu.mat", imageType: Image.Type.Tiled, anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "250 0", name: "AdminMenu_Panel_Sidebar").AddDestroySelfAttribute();
                sidebarPanel.AddPanel(color: "0.217 0.217 0.217 0.796", sprite: "assets/content/ui/ui.background.transparent.linear.psd", material: "assets/content/ui/namefontmaterial.mat", anchorMin: "0 0", anchorMax: "1 1", name: "UIPanel_SideBar_Linear");
                IEnumerable<CategoryButton> categoryButtons = sidebar.CategoryButtons.GetAllowedButtons(connection);
                if (categoryButtons != null)
                {
                    int categoryButtonsCount = categoryButtons.Count();
                    if (categoryButtonsCount == 0)
                        return;
                    var sidebarButtonGroup = sidebarPanel.AddPanel(color: "0 0 0 0", name: "UIPanel_SideBar_Scrollview");
                    sidebarButtonGroup.Components.AddScrollView(vertical: true, anchorMin: "0 1", offsetMin: $"0 -{categoryButtonsCount * 48}");
                    for (int i = 0; i < categoryButtonsCount; i++)
                    {
                        CategoryButton categoryButton = categoryButtons.ElementAt(i);
                        sidebarButtonGroup.AddButton(command: $"adminmenu uipanel.sidebar.button_pressed {i} {categoryButtonsCount}", color: $"0 0 0 0", anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"16 -{(i + 1) * 48}", offsetMax: $"0 -{i * 48}", name: $"UIPanel_SideBar_Button{i}").AddText(text: categoryButton.Label.Localize(connection), color: "0.969 0.922 0.882 1", font: CUI.Font.RobotoCondensedBold, fontSize: categoryButton.FontSize, align: TextAnchor.MiddleRight, offsetMin: "16 0", offsetMax: "-16 0");
                    }
                }
            }

            private void AddNavButtons(CUI.Element element, MainMenu mainMenu)
            {
                IEnumerable<Button> navButtons = mainMenu.NavButtons.GetAllowedButtons(connection);
                int navButtonsCount = navButtons.Count();
                var navButtonGroup = element.AddContainer(anchorMin: "0 0", anchorMax: "1 0", offsetMin: "64 64", offsetMax: $"0 {64 + navButtonsCount * 42}", name: "Navigation ButtonGroup").AddDestroySelfAttribute();
                for (int i = 0; i < navButtonsCount; i++)
                {
                    Button navButton = navButtons.ElementAtOrDefault(i);
                    if (navButton == null)
                        continue;
                    navButtonGroup.AddButton(command: navButton.IsHidden(connectionData) ? null : $"adminmenu navigation.button_pressed {i} {navButtonsCount}", color: "0 0 0 0", anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"0 -{(i + 1) * 42}", offsetMax: $"0 -{i * 42}").AddText(text: navButton.Label.Localize(connection).ToUpper(), color: $"0.969 0.922 0.882 {(navButton.IsHidden(connectionData) ? 0 : (navButton.IsPressed(connectionData) ? 1 : 0.180f))}", fontSize: 28, font: CUI.Font.RobotoCondensedBold, align: TextAnchor.LowerLeft, overflow: VerticalWrapMode.Truncate, offsetMin: "10 5", name: $"NavigationButtonText{i}");
                }
            }

            public void UpdateNavButtons(MainMenu mainMenu)
            {
                CUI.Root root = new CUI.Root("AdminMenu_Navigation");
                AddNavButtons(root, mainMenu);
                root.Render(connection);
            }

            public void RenderOverlayOpenButton()
            {
                CUI.Root root = new CUI.Root("Overlay");
                root.AddButton(command: "adminmenu", color: "0.969 0.922 0.882 0.035", material: "assets/icons/greyout.mat", anchorMin: "0 0", anchorMax: "0 0", offsetMin: "0 0", offsetMax: "100 30", name: "AdminMenu_OpenButton").AddDestroySelfAttribute().AddText(text: "ADMIN MENU", color: "0.969 0.922 0.882 0.45", font: CUI.Font.RobotoCondensedBold, fontSize: 14, align: TextAnchor.MiddleCenter);
                root.Render(connection);
            }

            public void RenderMainMenu(MainMenu mainMenu)
            {
                if (mainMenu == null)
                    return;
                CUI.Root root = new CUI.Root("Overall");
                var container = root.AddPanel(color: "0.169 0.162 0.143 1", material: "assets/content/ui/uibackgroundblur-mainmenu.mat", imageType: Image.Type.Tiled, anchorMin: "1000 1000", anchorMax: "1001 1001", name: "AdminMenu").AddDestroySelfAttribute();
                container.AddPanel(color: "0.301 0.283 0.235 1", sprite: "assets/content/ui/ui.background.transparent.radial.psd", material: "assets/content/ui/namefontmaterial.mat", anchorMin: "0 0", anchorMax: "1 1");
                container.AddPanel(color: "0.169 0.162 0.143 0.384", sprite: "assets/content/ui/ui.background.transparent.radial.psd", material: "assets/content/ui/namefontmaterial.mat", anchorMin: "0 0", anchorMax: "1 1");
                var navigation = container.AddContainer(anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "350 0", name: "AdminMenu_Navigation");
                var homeButton = navigation.AddContainer(//command: "adminmenu homebutton",
                anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"64 -{102f + 32}", offsetMax: "0 -32");
                homeButton.AddImage(content: ADMINMENU_IMAGECRC, color: "0.811 0.811 0.811 1", material: "assets/content/ui/namefontmaterial.mat", anchorMin: "0 0", anchorMax: "0 1", offsetMax: $"146.4 0");
                homeButton.AddText(text: config.Subtext, color: "0.824 0.824 0.824 1", font: CUI.Font.RobotoCondensedBold, fontSize: 16, anchorMin: "0 0", anchorMax: "0 0", offsetMin: "0 -35", offsetMax: "146.4 -10");
                container.AddText(text: $"v{Instance.Version}", color: "0.5 0.5 0.5 0.2", font: CUI.Font.RobotoCondensedBold, fontSize: 12, align: TextAnchor.MiddleRight, anchorMin: "1 0", anchorMax: "1 0", offsetMin: "-100 0", offsetMax: "-10 20");
                AddNavButtons(navigation, mainMenu);
                var body = container.AddContainer(anchorMin: "0 0", anchorMax: "1 1", offsetMin: "350 0", offsetMax: "-64 0", name: "AdminMenu_Body");
                var right = container.AddContainer(anchorMin: "1 0", anchorMax: "1 1", offsetMin: "-64 0", offsetMax: "0 0");
                root.Render(connection);
                connectionData.IsDestroyed = false;
            }

            public void RenderPanel(Panel panel)
            {
                if (panel == null)
                    return;
                CUI.Root root = new CUI.Root("AdminMenu_Body");
                var container = root.AddContainer(anchorMin: "0 0", anchorMax: "1 1", name: "AdminMenu_Panel").AddDestroySelfAttribute();
                Sidebar sidebar = panel.Sidebar;
                if (sidebar != null)
                    AddSidebar(container, sidebar);
                CUI.Element panelBackground = container.AddContainer(anchorMin: "0 0", anchorMax: "1 1", offsetMin: $"{(sidebar != null ? 250 : 0)} 0", offsetMax: "0 0", name: "AdminMenu_Panel_Content");
                if (true)
                {
                    panelBackground = panelBackground.AddPanel(color: "1 1 1 1", material: "assets/content/ui/menuui/mainmenu.panel.mat", imageType: Image.Type.Tiled);
                }

                root.Render(connection);
            }

            public void RenderContent(Content content)
            {
                if (content == null)
                    return;
                CUI.Root root = new CUI.Root("AdminMenu_Panel_Content");
                var container = root.AddContainer(name: "AdminMenu_Panel_TempContent").AddDestroySelfAttribute();
                root.Render(connection);
                content.Render(connectionData);
            }
        }

        public static class Extensions
        {
            public static string ToCuiString(Color color)
            {
                return string.Format("{0} {1} {2} {3}", new object[] { color.r, color.g, color.b, color.a });
            }
        }

        [HarmonyPatch(typeof(BasePlayer), "Tick_Spectator")]
        private static class SpectatorStaff
        {
            private static bool Prefix(BasePlayer __instance)
            {
                if (__instance.serverInput.WasJustPressed(BUTTON.RELOAD))
                {
                    __instance.Respawn();
                    return false;
                }

                int num = 0;
                if (__instance.serverInput.WasJustPressed(BUTTON.LEFT))
                {
                    num--;
                }
                else if (__instance.serverInput.WasJustPressed(BUTTON.RIGHT))
                {
                    num++;
                }

                if (num != 0)
                {
                    __instance.SpectateOffset += num;
                    using (TimeWarning.New("UpdateSpectateTarget", 0))
                        __instance.UpdateSpectateTarget(__instance.spectateFilter);
                }

                return true;
            }
        }

        public class Label
        {
            private static readonly Regex richTextRegex = new Regex(@"<[^>]*>");
            string label;
            string langKey;
            public Label(string label)
            {
                this.label = label;
                if (!string.IsNullOrEmpty(label))
                {
                    this.langKey = richTextRegex.Replace(label.ToPrintable(), string.Empty).Trim();
                    if (!Instance.defaultLang.ContainsKey(this.langKey))
                        Instance.defaultLang.Add(this.langKey, label);
                }
            }

            public override string ToString()
            {
                return label;
            }

            public string Localize(string userId)
            {
                return this.langKey != null ? Instance.lang.GetMessage(this.langKey, Instance, userId) : this.label;
            }

            public string Localize(Connection connection)
            {
                return Localize(connection.userid.ToString());
            }
        }

        public class MainMenu
        {
            public ButtonArray NavButtons { get; set; }
        }

        public class Panel
        {
            public virtual Sidebar Sidebar { get; set; }
            public virtual Dictionary<string, Content> Content { get; set; }
            public Content DefaultContent { get => TryGetContent("default"); }

            public Content TryGetContent(string id)
            {
                if (Content == null)
                    return null;
                if (Content.TryGetValue(id, out Content content))
                    return content;
                return null;
            }

            public virtual void OnOpen(ConnectionData connectionData)
            {
                connectionData.UI.UpdateNavButtons(connectionData.currentMainMenu);
            }

            public virtual void OnClose(ConnectionData connectionData)
            {
                connectionData.userData["backcommand"] = null;
            }
        }

        public class UserInfoPanel : Panel
        {
        }

        public class PermissionPanel : Panel
        {
            public override Sidebar Sidebar { get => null; }

            public override void OnClose(ConnectionData connectionData)
            {
                connectionData.userData["backcommand"] = null;
            }
        }

        public class Sidebar
        {
            public ButtonArray<CategoryButton> CategoryButtons { get; set; }
            public int? AutoActivateCategoryButtonIndex { get; set; } = 0;
        }

        public class SteamInfo
        {
            public string Location { get; set; }
            public string[] Avatars { get; set; }
            public string RegistrationDate { get; set; }
            public string RustHours { get; set; }

            public override string ToString()
            {
                return string.Join(", ", Location, RegistrationDate, RustHours);
            }
        }

        public class Translator15
        {
            public static void Init(string language)
            {
                Dictionary<string, string> lang = new Dictionary<string, string>();
                TextAsset textAsset = FileSystem.Load<TextAsset>($"assets/localization/{language}/engine.json", true);
                if (textAsset == null)
                    return;
                Dictionary<string, string> @object = JsonConvert.DeserializeObject<Dictionary<string, string>>(textAsset.text);
                if (@object == null)
                    return;
                foreach (ItemDefinition itemDefinition in ItemManager.itemList)
                {
                    string key = itemDefinition.displayName.token;
                    if (@object.ContainsKey(key))
                        lang[key] = @object[key];
                }

                translations[language] = lang;
            }

            private static Dictionary<string, Dictionary<string, string>> translations = new Dictionary<string, Dictionary<string, string>>();
            public class Phrase : Translate.Phrase
            {
                private Translator15 translator;
                public Phrase(Translator15 translator)
                {
                    this.translator = translator;
                }

                public override string translated
                {
                    get
                    {
                        if (string.IsNullOrEmpty(this.token))
                        {
                            return this.english;
                        }

                        return translator.Get(this.token, this.english);
                    }
                }
            }

            protected ulong userID;
            public Translator15(ulong userID)
            {
                this.userID = userID;
            }

            public Translator15.Phrase Convert(Translate.Phrase phrase)
            {
                if (phraseCache.TryGetValue(phrase, out Translator15.Phrase phrase1))
                    return phrase1;
                else
                    return phraseCache[phrase] = new Translator15.Phrase(this)
                    {
                        english = phrase.english,
                        token = phrase.token
                    };
            }

            private string GetLanguage()
            {
                return Instance.lang.GetLanguage(userID.ToString());
            }

            public string Get(string key, string def = null)
            {
                if (def == null)
                    def = "#" + key;
                if (string.IsNullOrEmpty(key))
                    return def;
                string language = GetLanguage();
                if (!Translator15.translations.ContainsKey(language))
                    Translator15.Init(language);
                if (Translator15.translations[language].TryGetValue(key, out string result))
                    return result;
                return def;
            }

            private Dictionary<Translate.Phrase, Translator15.Phrase> phraseCache = new Dictionary<Translate.Phrase, Phrase>();
        }

        public class CUI
        {
            public enum Font
            {
                RobotoCondensedBold,
                RobotoCondensedRegular,
                RobotoMonoRegular,
                DroidSansMono,
                PermanentMarker,
                PressStart2PRegular,
                LSD,
                NotoSansArabicBold,
                NotoSansArabicRegular,
                NotoSansHebrewBold,
            }

            private static readonly Dictionary<Font, string> FontToString = new Dictionary<Font, string>
            {
                {
                    Font.RobotoCondensedBold,
                    "RobotoCondensed-Bold.ttf"
                },
                {
                    Font.RobotoCondensedRegular,
                    "RobotoCondensed-Regular.ttf"
                },
                {
                    Font.RobotoMonoRegular,
                    "RobotoMono-Regular.ttf"
                },
                {
                    Font.DroidSansMono,
                    "DroidSansMono.ttf"
                },
                {
                    Font.PermanentMarker,
                    "PermanentMarker.ttf"
                },
                {
                    Font.PressStart2PRegular,
                    "PressStart2P-Regular.ttf"
                },
                {
                    Font.LSD,
                    "lcd.ttf"
                },
                {
                    Font.NotoSansArabicBold,
                    "_nonenglish/arabic/notosansarabic-bold.ttf"
                },
                {
                    Font.NotoSansArabicRegular,
                    "_nonenglish/arabic/notosansarabic-regular.ttf"
                },
                {
                    Font.NotoSansHebrewBold,
                    "_nonenglish/notosanshebrew-bold.ttf"
                },
            };
            public enum InputType
            {
                None,
                Default,
                HudMenuInput
            }

            private static readonly Dictionary<TextAnchor, string> TextAnchorToString = new Dictionary<TextAnchor, string>
            {
                {
                    TextAnchor.UpperLeft,
                    TextAnchor.UpperLeft.ToString()
                },
                {
                    TextAnchor.UpperCenter,
                    TextAnchor.UpperCenter.ToString()
                },
                {
                    TextAnchor.UpperRight,
                    TextAnchor.UpperRight.ToString()
                },
                {
                    TextAnchor.MiddleLeft,
                    TextAnchor.MiddleLeft.ToString()
                },
                {
                    TextAnchor.MiddleCenter,
                    TextAnchor.MiddleCenter.ToString()
                },
                {
                    TextAnchor.MiddleRight,
                    TextAnchor.MiddleRight.ToString()
                },
                {
                    TextAnchor.LowerLeft,
                    TextAnchor.LowerLeft.ToString()
                },
                {
                    TextAnchor.LowerCenter,
                    TextAnchor.LowerCenter.ToString()
                },
                {
                    TextAnchor.LowerRight,
                    TextAnchor.LowerRight.ToString()
                }
            };
            private static readonly Dictionary<VerticalWrapMode, string> VWMToString = new Dictionary<VerticalWrapMode, string>
            {
                {
                    VerticalWrapMode.Truncate,
                    VerticalWrapMode.Truncate.ToString()
                },
                {
                    VerticalWrapMode.Overflow,
                    VerticalWrapMode.Overflow.ToString()
                },
            };
            private static readonly Dictionary<Image.Type, string> ImageTypeToString = new Dictionary<Image.Type, string>
            {
                {
                    Image.Type.Simple,
                    Image.Type.Simple.ToString()
                },
                {
                    Image.Type.Sliced,
                    Image.Type.Sliced.ToString()
                },
                {
                    Image.Type.Tiled,
                    Image.Type.Tiled.ToString()
                },
                {
                    Image.Type.Filled,
                    Image.Type.Filled.ToString()
                },
            };
            private static readonly Dictionary<InputField.LineType, string> LineTypeToString = new Dictionary<InputField.LineType, string>
            {
                {
                    InputField.LineType.MultiLineNewline,
                    InputField.LineType.MultiLineNewline.ToString()
                },
                {
                    InputField.LineType.MultiLineSubmit,
                    InputField.LineType.MultiLineSubmit.ToString()
                },
                {
                    InputField.LineType.SingleLine,
                    InputField.LineType.SingleLine.ToString()
                },
            };
            private static readonly Dictionary<ScrollRect.MovementType, string> MovementTypeToString = new Dictionary<ScrollRect.MovementType, string>
            {
                {
                    ScrollRect.MovementType.Unrestricted,
                    ScrollRect.MovementType.Unrestricted.ToString()
                },
                {
                    ScrollRect.MovementType.Elastic,
                    ScrollRect.MovementType.Elastic.ToString()
                },
                {
                    ScrollRect.MovementType.Clamped,
                    ScrollRect.MovementType.Clamped.ToString()
                },
            };
            public static class Defaults
            {
                public const string VectorZero = "0 0";
                public const string VectorOne = "1 1";
                public const string Color = "1 1 1 1";
                public const string OutlineColor = "0 0 0 1";
                public const string Sprite = "assets/content/ui/ui.background.tile.psd";
                public const string Material = "assets/content/ui/namefontmaterial.mat";
                public const string IconMaterial = "assets/icons/iconmaterial.mat";
                public const Image.Type ImageType = Image.Type.Simple;
                public const CUI.Font Font = CUI.Font.RobotoCondensedRegular;
                public const int FontSize = 14;
                public const TextAnchor Align = TextAnchor.UpperLeft;
                public const VerticalWrapMode VerticalOverflow = VerticalWrapMode.Overflow;
                public const InputField.LineType LineType = InputField.LineType.SingleLine;
            }

            public static Color GetColor(string colorStr)
            {
                return ColorEx.Parse(colorStr);
            }

            public static string GetColorString(Color color)
            {
                return string.Format("{0} {1} {2} {3}", color.r, color.g, color.b, color.a);
            }

            public static void AddUI(Connection connection, string json)
            {
                CommunityEntity.ServerInstance.ClientRPCEx<string>(new SendInfo { connection = connection }, null, "AddUI", json);
            }

            private static void SerializeType(ICuiComponent component, JsonWriter jsonWriter)
            {
                jsonWriter.WritePropertyName("type");
                jsonWriter.WriteValue(component.Type);
            }

            private static void SerializeField(string key, object value, object defaultValue, JsonWriter jsonWriter)
            {
                if (value != null && !value.Equals(defaultValue))
                {
                    if (value is string && defaultValue != null && string.IsNullOrEmpty(value as string))
                        return;
                    jsonWriter.WritePropertyName(key);
                    if (value is ICuiComponent)
                        SerializeComponent(value as ICuiComponent, jsonWriter);
                    else
                        jsonWriter.WriteValue(value ?? defaultValue);
                }
            }

            private static void SerializeField(string key, CuiScrollbar scrollbar, JsonWriter jsonWriter)
            {
                const string defaultHandleSprite = "assets/content/ui/ui.rounded.tga";
                const string defaultHandleColor = "0.15 0.15 0.15 1";
                const string defaultHighlightColor = "0.17 0.17 0.17 1";
                const string defaultPressedColor = "0.2 0.2 0.2 1";
                const string defaultTrackSprite = "assets/content/ui/ui.background.tile.psd";
                const string defaultTrackColor = "0.09 0.09 0.09 1";
                if (scrollbar == null)
                    return;
                jsonWriter.WritePropertyName(key);
                jsonWriter.WriteStartObject();
                SerializeField("invert", scrollbar.Invert, false, jsonWriter);
                SerializeField("autoHide", scrollbar.AutoHide, false, jsonWriter);
                SerializeField("handleSprite", scrollbar.HandleSprite, defaultHandleSprite, jsonWriter);
                SerializeField("size", scrollbar.Size, 20f, jsonWriter);
                SerializeField("handleColor", scrollbar.HandleColor, defaultHandleColor, jsonWriter);
                SerializeField("highlightColor", scrollbar.HighlightColor, defaultHighlightColor, jsonWriter);
                SerializeField("pressedColor", scrollbar.PressedColor, defaultPressedColor, jsonWriter);
                SerializeField("trackSprite", scrollbar.TrackSprite, defaultTrackSprite, jsonWriter);
                SerializeField("trackColor", scrollbar.TrackColor, defaultTrackColor, jsonWriter);
                jsonWriter.WriteEndObject();
            }

            private static void SerializeComponent(ICuiComponent IComponent, JsonWriter jsonWriter)
            {
                const string vector2zero = "0 0";
                const string vector2one = "1 1";
                const string colorWhite = "1 1 1 1";
                const string backgroundTile = "assets/content/ui/ui.background.tile.psd";
                const string iconMaterial = "assets/icons/iconmaterial.mat";
                const string fontBold = "RobotoCondensed-Bold.ttf";
                const string defaultOutlineDistance = "1.0 -1.0";
                void SerializeType() => CUI.SerializeType(IComponent, jsonWriter);
                void SerializeField(string key, object value, object defaultValue) => CUI.SerializeField(key, value, defaultValue, jsonWriter);
                void SerializeScrollbar(string key, CuiScrollbar value) => CUI.SerializeField(key, value, jsonWriter);
                switch (IComponent.Type)
                {
                    case "RectTransform":
                    {
                        CuiRectTransformComponent component = IComponent as CuiRectTransformComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("anchormin", component.AnchorMin, vector2zero);
                        SerializeField("anchormax", component.AnchorMax, vector2one);
                        SerializeField("offsetmin", component.OffsetMin, vector2zero);
                        SerializeField("offsetmax", component.OffsetMax, vector2zero);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.Image":
                    {
                        CuiImageComponent component = IComponent as CuiImageComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("sprite", component.Sprite, backgroundTile);
                        SerializeField("material", component.Material, iconMaterial);
                        SerializeField("imagetype", ImageTypeToString[component.ImageType], ImageTypeToString[Image.Type.Simple]);
                        SerializeField("png", component.Png, null);
                        SerializeField("itemid", component.ItemId, 0);
                        SerializeField("skinid", component.SkinId, 0UL);
                        SerializeField("fadeIn", component.FadeIn, 0f);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.RawImage":
                    {
                        CuiRawImageComponent component = IComponent as CuiRawImageComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("sprite", component.Sprite, backgroundTile);
                        SerializeField("material", component.Material, iconMaterial);
                        SerializeField("url", component.Url, null);
                        SerializeField("png", component.Png, null);
                        SerializeField("steamid", component.SteamId, null);
                        SerializeField("fadeIn", component.FadeIn, 0f);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.Text":
                    {
                        CuiTextComponent component = IComponent as CuiTextComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("text", component.Text, null);
                        SerializeField("font", component.Font, fontBold);
                        SerializeField("fontSize", component.FontSize, 14);
                        SerializeField("align", TextAnchorToString[component.Align], TextAnchorToString[TextAnchor.UpperLeft]);
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("verticalOverflow", VWMToString[component.VerticalOverflow], VWMToString[VerticalWrapMode.Truncate]);
                        SerializeField("fadeIn", component.FadeIn, 0f);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.Button":
                    {
                        CuiButtonComponent component = IComponent as CuiButtonComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("sprite", component.Sprite, backgroundTile);
                        SerializeField("material", component.Material, iconMaterial);
                        SerializeField("imagetype", ImageTypeToString[component.ImageType], ImageTypeToString[Image.Type.Simple]);
                        SerializeField("command", component.Command, null);
                        SerializeField("close", component.Close, null);
                        SerializeField("fadeIn", component.FadeIn, 0f);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.InputField":
                    {
                        CuiInputFieldComponent component = IComponent as CuiInputFieldComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("text", component.Text, null);
                        SerializeField("font", component.Font, fontBold);
                        SerializeField("fontSize", component.FontSize, 14);
                        SerializeField("align", TextAnchorToString[component.Align], TextAnchorToString[TextAnchor.UpperLeft]);
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("command", component.Command, null);
                        SerializeField("characterLimit", component.CharsLimit, 0);
                        SerializeField("lineType", LineTypeToString[component.LineType], LineTypeToString[InputField.LineType.SingleLine]);
                        SerializeField("readOnly", component.ReadOnly, false);
                        SerializeField("password", component.IsPassword, false);
                        SerializeField("needsKeyboard", component.NeedsKeyboard, false);
                        SerializeField("hudMenuInput", component.HudMenuInput, false);
                        SerializeField("autofocus", component.Autofocus, false);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.ScrollView":
                    {
                        CuiScrollViewComponent component = IComponent as CuiScrollViewComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("contentTransform", component.ContentTransform, null);
                        SerializeField("horizontal", component.Horizontal, false);
                        SerializeField("vertical", component.Vertical, false);
                        SerializeField("movementType", MovementTypeToString[component.MovementType], MovementTypeToString[ScrollRect.MovementType.Clamped]);
                        SerializeField("elasticity", component.Elasticity, 0.1f);
                        SerializeField("inertia", component.Inertia, false);
                        SerializeField("decelerationRate", component.DecelerationRate, 0.135f);
                        SerializeField("scrollSensitivity", component.ScrollSensitivity, 1f);
                        SerializeScrollbar("horizontalScrollbar", component.HorizontalScrollbar);
                        SerializeScrollbar("verticalScrollbar", component.VerticalScrollbar);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "UnityEngine.UI.Outline":
                    {
                        CuiOutlineComponent component = IComponent as CuiOutlineComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("color", component.Color, colorWhite);
                        SerializeField("distance", component.Distance, defaultOutlineDistance);
                        SerializeField("useGraphicAlpha", component.UseGraphicAlpha, false);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "Countdown":
                    {
                        CuiCountdownComponent component = IComponent as CuiCountdownComponent;
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        SerializeField("endTime", component.EndTime, 0);
                        SerializeField("startTime", component.StartTime, 0);
                        SerializeField("step", component.Step, 1);
                        SerializeField("command", component.Command, null);
                        SerializeField("fadeIn", component.FadeIn, 0f);
                        jsonWriter.WriteEndObject();
                        break;
                    }

                    case "NeedsKeyboard":
                    case "NeedsCursor":
                    {
                        jsonWriter.WriteStartObject();
                        SerializeType();
                        jsonWriter.WriteEndObject();
                        break;
                    }
                }
            }

            [JsonObject(MemberSerialization.OptIn)]
            public class Element : CuiElement
            {
                public new string Name { get; set; } = null;
                public Element ParentElement { get; set; }
                public virtual List<Element> Container => ParentElement?.Container;
                public ComponentList Components { get; set; } = new ComponentList();

                [JsonProperty("name")]
                public string JsonName
                {
                    get
                    {
                        if (Name == null)
                        {
                            string result = this.GetHashCode().ToString();
                            if (ParentElement != null)
                                result.Insert(0, ParentElement.JsonName);
                            return result.GetHashCode().ToString();
                        }

                        return Name;
                    }
                }

                public Element()
                {
                }

                public Element(Element parent)
                {
                    AssignParent(parent);
                }

                public CUI.Element AssignParent(Element parent)
                {
                    if (parent == null)
                        return this;
                    ParentElement = parent;
                    Parent = ParentElement.JsonName;
                    return this;
                }

                public Element AddDestroy(string elementName)
                {
                    this.DestroyUi = elementName;
                    return this;
                }

                public Element AddDestroySelfAttribute()
                {
                    return AddDestroy(this.Name);
                }

                public virtual void WriteJson(JsonWriter jsonWriter)
                {
                    jsonWriter.WriteStartObject();
                    jsonWriter.WritePropertyName("name");
                    jsonWriter.WriteValue(this.JsonName);
                    if (!string.IsNullOrEmpty(Parent))
                    {
                        jsonWriter.WritePropertyName("parent");
                        jsonWriter.WriteValue(this.Parent);
                    }

                    if (!string.IsNullOrEmpty(this.DestroyUi))
                    {
                        jsonWriter.WritePropertyName("destroyUi");
                        jsonWriter.WriteValue(this.DestroyUi);
                    }

                    if (this.Update)
                    {
                        jsonWriter.WritePropertyName("update");
                        jsonWriter.WriteValue(this.Update);
                    }

                    if (this.FadeOut > 0f)
                    {
                        jsonWriter.WritePropertyName("fadeOut");
                        jsonWriter.WriteValue(this.FadeOut);
                    }

                    jsonWriter.WritePropertyName("components");
                    jsonWriter.WriteStartArray();
                    for (int i = 0; i < this.Components.Count; i++)
                    {
                        SerializeComponent(this.Components[i], jsonWriter);
                    }

                    jsonWriter.WriteEndArray();
                    jsonWriter.WriteEndObject();
                }

                public Element Add(Element element)
                {
                    if (element.ParentElement == null)
                        element.AssignParent(this);
                    Container.Add(element);
                    return element;
                }

                public Element AddEmpty(string name = null)
                {
                    return Add(new Element(this) { Name = name });
                }

                public Element AddUpdateElement(string name = null)
                {
                    Element element = AddEmpty(name);
                    element.Parent = null;
                    element.Update = true;
                    return element;
                }

                public Element AddText(string text, string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, VerticalWrapMode overflow = Defaults.VerticalOverflow, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateText(text, color, font, fontSize, align, overflow, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddOutlinedText(string text, string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, VerticalWrapMode overflow = Defaults.VerticalOverflow, string outlineColor = Defaults.OutlineColor, int outlineWidth = 1, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateOutlinedText(text, color, font, fontSize, align, overflow, outlineColor, outlineWidth, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddInputfield(string command = null, string text = "", string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, InputField.LineType lineType = Defaults.LineType, CUI.InputType inputType = CUI.InputType.Default, bool @readonly = false, bool autoFocus = false, bool isPassword = false, int charsLimit = 0, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateInputfield(command, text, color, font, fontSize, align, lineType, inputType, @readonly, autoFocus, isPassword, charsLimit, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddPanel(string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, bool cursorEnabled = false, bool keyboardEnabled = false, string name = null)
                {
                    return Add(ElementContructor.CreatePanel(color, sprite, material, imageType, anchorMin, anchorMax, offsetMin, offsetMax, cursorEnabled, keyboardEnabled, name));
                }

                public Element AddButton(string command = null, string close = null, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateButton(command, close, color, sprite, material, imageType, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddImage(string content, string color = Defaults.Color, string material = null, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateImage(content, color, material, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddHImage(string content, string color = Defaults.Color, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return AddImage(content, color, Defaults.IconMaterial, anchorMin, anchorMax, offsetMin, offsetMax, name);
                }

                public Element AddIcon(int itemId, ulong skin = 0, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.IconMaterial, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateIcon(itemId, skin, color, sprite, material, imageType, anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public Element AddContainer(string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Add(ElementContructor.CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name));
                }

                public CUI.Element WithRect(string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero)
                {
                    if (this.Components.Count > 0)
                        this.Components.RemoveAll(c => c is CuiRectTransformComponent);
                    this.Components.Add(new CuiRectTransformComponent() { AnchorMin = anchorMin, AnchorMax = anchorMax, OffsetMin = offsetMin, OffsetMax = offsetMax });
                    return this;
                }

                public CUI.Element WithFade(float @in = 0f, float @out = 0f)
                {
                    this.FadeOut = @out;
                    foreach (ICuiComponent component in this.Components)
                    {
                        CuiImageComponent imageComponent = component as CuiImageComponent;
                        if (imageComponent != null)
                        {
                            imageComponent.FadeIn = @in;
                            continue;
                        }

                        CuiButtonComponent buttonComponent = component as CuiButtonComponent;
                        if (buttonComponent != null)
                        {
                            buttonComponent.FadeIn = @in;
                            continue;
                        }

                        CuiTextComponent textComponent = component as CuiTextComponent;
                        if (textComponent != null)
                        {
                            textComponent.FadeIn = @in;
                            continue;
                        }
                    }

                    return this;
                }

                public void AddComponents(params ICuiComponent[] components)
                {
                    this.Components.AddRange(components);
                }

                public CUI.Element WithComponents(params ICuiComponent[] components)
                {
                    AddComponents(components);
                    return this;
                }

                public CUI.Element CreateChild(string name = null, params ICuiComponent[] components)
                {
                    return CUI.Element.Create(name, components).AssignParent(this);
                }

                public static CUI.Element Create(string name = null, params ICuiComponent[] components)
                {
                    return new CUI.Element()
                    {
                        Name = name
                    }.WithComponents(components);
                }

                public class ComponentList : List<ICuiComponent>
                {
                    public T Get<T>()
                        where T : ICuiComponent
                    {
                        return (T)this.Find(c => c.GetType() == typeof(T));
                    }

                    public ComponentList AddImage(string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType, int itemId = 0, ulong skinId = 0UL)
                    {
                        Add(new CuiImageComponent { Color = color, Sprite = sprite, Material = material, ImageType = imageType, ItemId = itemId, SkinId = skinId, });
                        return this;
                    }

                    public ComponentList AddRawImage(string content, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.IconMaterial)
                    {
                        CuiRawImageComponent rawImageComponent = new CuiRawImageComponent
                        {
                            Color = color,
                            Sprite = sprite,
                            Material = material,
                        };
                        if (!string.IsNullOrEmpty(content))
                        {
                            if (content.Contains("://"))
                            {
                                rawImageComponent.Url = content;
                            }
                            else if (content.IsNumeric())
                            {
                                if (content.IsSteamId())
                                    rawImageComponent.SteamId = content;
                                else
                                    rawImageComponent.Png = content;
                            }
                        }

                        Add(rawImageComponent);
                        return this;
                    }

                    public ComponentList AddButton(string command = null, string close = null, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType)
                    {
                        Add(new CuiButtonComponent { Command = command, Close = close, Color = color, Sprite = sprite, Material = material, ImageType = imageType, });
                        return this;
                    }

                    public ComponentList AddText(string text, string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, VerticalWrapMode overflow = Defaults.VerticalOverflow)
                    {
                        Add(new CuiTextComponent { Text = text, Color = color, Font = FontToString[font], FontSize = fontSize, Align = align, VerticalOverflow = overflow });
                        return this;
                    }

                    public ComponentList AddInputfield(string command = null, string text = "", string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, InputField.LineType lineType = Defaults.LineType, CUI.InputType inputType = CUI.InputType.Default, bool @readonly = false, bool autoFocus = false, bool isPassword = false, int charsLimit = 0)
                    {
                        Add(new CuiInputFieldComponent { Command = command, Text = text, Color = color, Font = FontToString[font], FontSize = fontSize, Align = align, NeedsKeyboard = inputType == InputType.Default, HudMenuInput = inputType == InputType.HudMenuInput, Autofocus = autoFocus, ReadOnly = @readonly, CharsLimit = charsLimit, IsPassword = isPassword, LineType = lineType });
                        return this;
                    }

                    public ComponentList AddScrollView(bool horizontal = false, CuiScrollbar horizonalScrollbar = null, bool vertical = false, CuiScrollbar verticalScrollbar = null, bool inertia = false, ScrollRect.MovementType movementType = ScrollRect.MovementType.Clamped, float decelerationRate = 0.135f, float elasticity = 0.1f, float scrollSensitivity = 1f, string anchorMin = "0 0", string anchorMax = "1 1", string offsetMin = "0 0", string offsetMax = "0 0")
                    {
                        Add(new CuiScrollViewComponent() { ContentTransform = new CuiRectTransformComponent() { AnchorMin = anchorMin, AnchorMax = anchorMax, OffsetMin = offsetMin, OffsetMax = offsetMax }, Horizontal = horizontal, HorizontalScrollbar = horizonalScrollbar, Vertical = vertical, VerticalScrollbar = verticalScrollbar, Inertia = inertia, DecelerationRate = decelerationRate, Elasticity = elasticity, ScrollSensitivity = scrollSensitivity, MovementType = movementType, });
                        return this;
                    }

                    public ComponentList AddOutline(string color = Defaults.OutlineColor, int width = 1)
                    {
                        Add(new CuiOutlineComponent { Color = color, Distance = string.Format("{0} -{0}", width) });
                        return this;
                    }

                    public ComponentList AddNeedsKeyboard()
                    {
                        Add(new CuiNeedsKeyboardComponent());
                        return this;
                    }

                    public ComponentList AddNeedsCursor()
                    {
                        Add(new CuiNeedsCursorComponent());
                        return this;
                    }

                    public ComponentList AddCountdown(string command = null, int endTime = 0, int startTime = 0, int step = 1)
                    {
                        Add(new CuiCountdownComponent { Command = command, EndTime = endTime, StartTime = startTime, Step = step });
                        return this;
                    }
                }
            }

            public static class ElementContructor
            {
                public static CUI.Element CreateText(string text, string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, VerticalWrapMode overflow = Defaults.VerticalOverflow, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    CUI.Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddText(text, color, font, fontSize, align, overflow);
                    return element;
                }

                public static CUI.Element CreateOutlinedText(string text, string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, VerticalWrapMode overflow = Defaults.VerticalOverflow, string outlineColor = Defaults.OutlineColor, int outlineWidth = 1, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    CUI.Element element = CreateText(text, color, font, fontSize, align, overflow, anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddOutline(outlineColor, outlineWidth);
                    return element;
                }

                public static CUI.Element CreateInputfield(string command = null, string text = "", string color = Defaults.Color, CUI.Font font = Defaults.Font, int fontSize = Defaults.FontSize, TextAnchor align = Defaults.Align, InputField.LineType lineType = Defaults.LineType, CUI.InputType inputType = CUI.InputType.Default, bool @readonly = false, bool autoFocus = false, bool isPassword = false, int charsLimit = 0, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    CUI.Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddInputfield(command, text, color, font, fontSize, align, lineType, inputType, @readonly, autoFocus, isPassword, charsLimit);
                    return element;
                }

                public static CUI.Element CreateButton(string command = null, string close = null, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    CUI.Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddButton(command, close, color, sprite, material, imageType);
                    return element;
                }

                public static CUI.Element CreatePanel(string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.Material, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, bool cursorEnabled = false, bool keyboardEnabled = false, string name = null)
                {
                    Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddImage(color, sprite, material, imageType);
                    if (cursorEnabled)
                        element.Components.AddNeedsCursor();
                    if (keyboardEnabled)
                        element.Components.AddNeedsKeyboard();
                    return element;
                }

                public static CUI.Element CreateImage(string content, string color = Defaults.Color, string material = null, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddRawImage(content, color, material: material);
                    return element;
                }

                public static CUI.Element CreateIcon(int itemId, ulong skin = 0, string color = Defaults.Color, string sprite = Defaults.Sprite, string material = Defaults.IconMaterial, Image.Type imageType = Defaults.ImageType, string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    Element element = CreateContainer(anchorMin, anchorMax, offsetMin, offsetMax, name);
                    element.Components.AddImage(color, sprite, material, imageType, itemId, skin);
                    return element;
                }

                public static Element CreateContainer(string anchorMin = Defaults.VectorZero, string anchorMax = Defaults.VectorOne, string offsetMin = Defaults.VectorZero, string offsetMax = Defaults.VectorZero, string name = null)
                {
                    return Element.Create(name).WithRect(anchorMin, anchorMax, offsetMin, offsetMax);
                }
            }

            public class Root : Element
            {
                public bool wasRendered = false;
                private static StringBuilder stringBuilder = new StringBuilder();
                public Root()
                {
                    Name = string.Empty;
                }

                public Root(string rootObjectName = "Overlay")
                {
                    Name = rootObjectName;
                }

                public override List<Element> Container { get; } = new List<Element>();

                public string ToJson(List<Element> elements)
                {
                    stringBuilder.Clear();
                    try
                    {
                        using (StringWriter stringWriter = new StringWriter(stringBuilder))
                        {
                            using (JsonWriter jsonWriter = new JsonTextWriter(stringWriter))
                            {
                                jsonWriter.WriteStartArray();
                                foreach (Element element in elements)
                                    element.WriteJson(jsonWriter);
                                jsonWriter.WriteEndArray();
                            }
                        }

                        return stringBuilder.ToString().Replace("\\n", "\n");
                    }
                    catch (Exception ex)
                    {
                        UnityEngine.Debug.LogError(ex.Message + "\n" + ex.StackTrace);
                        return string.Empty;
                    }
                }

                public string ToJson()
                {
                    return ToJson(Container);
                }

                public void Render(Connection connection)
                {
                    if (connection == null || !connection.connected)
                        return;
                    wasRendered = true;
                    CUI.AddUI(connection, ToJson(Container));
                }

                public void Render(BasePlayer player)
                {
                    Render(player.Connection);
                }

                public void Update(Connection connection)
                {
                    foreach (Element element in Container)
                        element.Update = true;
                    CUI.AddUI(connection, ToJson(Container));
                }

                public void Update(BasePlayer player)
                {
                    Update(player.Connection);
                }
            }
        }

        public class CenteredTextContent : TextContent
        {
            public CenteredTextContent()
            {
                font = CUI.Font.RobotoCondensedBold;
                fontSize = 24;
                align = TextAnchor.MiddleCenter;
                margin = Vector2.zero;
            }
        }

        public class Content
        {
            public virtual void Render(ConnectionData connectionData)
            {
                CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                Render(root, connectionData, connectionData.userData);
                root.Render(connectionData.connection);
            }

            protected virtual void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
            }

            public virtual void LoadDefaultUserData(Dictionary<string, object> userData)
            {
            }

            public virtual void RestoreUserData(Dictionary<string, object> userData)
            {
            }
        }

        public class ConvarsContent : Content
        {
            private static readonly Label SEARCH_LABEL = new Label("Search..");
            public static readonly Button SAVE_BUTTON = new Button("Save", "convars.save")
            {
                Permission = "convars.save",
                Style = new ButtonStyle
                {
                    BackgroundColor = "0.455 0.667 0.737 1"
                }
            };
            private static List<Timer> sequentialLoad = new List<Timer>();
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["convars.searchQuery"] = string.Empty;
            }

            public override void RestoreUserData(Dictionary<string, object> userData)
            {
                base.RestoreUserData(userData);
                StopSequentialLoad();
            }

            public void StopSequentialLoad()
            {
                foreach (Timer timer in sequentialLoad)
                    if (!timer.Destroyed)
                        timer.Destroy();
                sequentialLoad.Clear();
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                string searchQuery = (string)userData["convars.searchQuery"];
                var container = root.AddContainer(anchorMin: "0.03 0.04", anchorMax: "0.97 0.99", name: "AdminMenu_Convars").AddDestroySelfAttribute();
                int rows = 16;
                float width = 1f / rows;
                List<ConsoleSystem.Command> commands = ConsoleGen.All.Where(command => command.ServerAdmin && command.Variable && (string.IsNullOrEmpty(searchQuery) || command.FullName.Contains(searchQuery.ToLower()))).ToList();
                int pageCount = Mathf.CeilToInt(commands.Count / (float)rows);
                var layout = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.04", anchorMax: "0.99 0.99", name: "AdminMenu_Convars_Layout").AddDestroySelfAttribute();
                layout.Components.AddScrollView(vertical: true, scrollSensitivity: 20, anchorMin: $"0 -{pageCount - 1}", anchorMax: $"1 1");
                var bottom = root.AddContainer(anchorMin: "0.02 0", anchorMax: "0.98 0.035", name: "AdminMenu_Convars_Bottom").AddDestroySelfAttribute();
                var searchPanel = bottom.AddButton(command: "adminmenu convars.opensearch", color: "0.15 0.15 0.15 1", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "250 0", name: "Search");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "-2 0", offsetMax: "0 0");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "1 0", anchorMax: "1 1", offsetMin: "0 0", offsetMax: "2 0");
                if (string.IsNullOrEmpty(searchQuery))
                {
                    searchPanel.AddText(text: SEARCH_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Placeholder");
                }
                else
                {
                    searchPanel.AddInputfield(command: "adminmenu convars.search.input", text: searchQuery, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Inputfield");
                }

                if (SAVE_BUTTON.UserHasPermission(connectionData.connection))
                {
                    bottom.AddButton(command: $"adminmenu {SAVE_BUTTON.Command}", sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, color: SAVE_BUTTON.Style.BackgroundColor, anchorMin: "1 0", anchorMax: "1 1", offsetMin: $"-100 0", offsetMax: $"0 0").AddText(text: SAVE_BUTTON.Label.Localize(connectionData.connection), align: TextAnchor.MiddleCenter, offsetMin: "10 0", offsetMax: "-10 0");
                }

                StopSequentialLoad();
                for (int i = 0; i < pageCount; i++)
                {
                    CUI.Root layoutRoot = new CUI.Root(layout.Name);
                    var screenContainer = layoutRoot.AddContainer(anchorMin: $"0 {(pageCount - (i + 1)) / (float)pageCount}", anchorMax: $"1 {(pageCount - i) / (float)pageCount}", name: $"{layoutRoot.Name}_Screen_{i}").AddDestroySelfAttribute();
                    for (int j = 0; j < rows; j++)
                    {
                        ConsoleSystem.Command command = commands.ElementAtOrDefault((i * rows) + j);
                        if (command == null)
                            break;
                        var convarContainer = screenContainer.AddContainer(anchorMin: $"0 {1f - width * (j + 1)}", anchorMax: $"1 {1f - width * j}");
                        convarContainer.AddText(text: $"<b>{command.FullName}</b>{(!string.IsNullOrEmpty(command.Description) ? $"\n<color=#7A7A7A><size=11>{command.Description}</size></color>" : string.Empty)}", align: TextAnchor.MiddleLeft, anchorMax: "0.7 1");
                        convarContainer.AddPanel(sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, color: "0.2 0.2 0.2 1", anchorMin: "0.75 0.1", anchorMax: "1 0.9").AddInputfield(command: $"adminmenu convar.setvalue {command.FullName} ", text: command.String, align: TextAnchor.MiddleCenter, offsetMin: "10 0", offsetMax: "-10 0");
                    }

                    sequentialLoad.Add(Instance.timer.Once(i * 0.1f, () => layoutRoot.Render(connectionData.connection)));
                }
            }

            public void OpenSearch(Connection connection)
            {
                CUI.Root root = new CUI.Root("Search");
                root.AddInputfield(command: "adminmenu convars.search.input", text: "", align: TextAnchor.MiddleLeft, autoFocus: true, offsetMin: "10 0", name: "Search_Inputfield").DestroyUi = "Search_Placeholder";
                root.Render(connection);
            }
        }

        public class GiveMenuContent : Content
        {
            private static readonly Label NAME_LABEL = new Label("NAME");
            private static readonly Label SKINID_LABEL = new Label("SKIN ID");
            private static readonly Label AMOUNT_LABEL = new Label("AMOUNT");
            private static readonly Label GIVE_LABEL = new Label("GIVE");
            private static readonly Label BLUEPRINT_LABEL = new Label("BLUEPRINT?");
            private static readonly Label SEARCH_LABEL = new Label("Search..");
            private static readonly Label ITEM_COUNTER_LABEL = new Label("{0} items");
            private static List<Timer> sequentialLoad = new List<Timer>();
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["givemenu.category"] = ItemCategory.All;
                userData["givemenu.searchQuery"] = string.Empty;
                userData["givemenu.popup.shown"] = false;
            }

            public override void RestoreUserData(Dictionary<string, object> userData)
            {
                base.RestoreUserData(userData);
                StopSequentialLoad();
            }

            public void StopSequentialLoad()
            {
                foreach (Timer timer in sequentialLoad)
                    if (!timer.Destroyed)
                        timer.Destroy();
                sequentialLoad.Clear();
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                if ((bool)userData["givemenu.popup.shown"])
                {
                    Popup(root, connectionData, userData);
                    return;
                }
                else
                {
                    root.AddEmpty().AddDestroy("AdminMenu_GiveMenu_GivePopup");
                }

                ItemCategory category = (ItemCategory)userData["givemenu.category"];
                string searchQuery = (string)userData["givemenu.searchQuery"];
                const int columns = 10;
                const int rows = 11;
                const int itemsPerPage = columns * rows;
                const float width = 1f / columns;
                const float height = 1f / rows;
                const float panelSize = 60;
                const float dividedPanelSize = panelSize / 2;
                List<ItemDefinition> itemList = ItemManager.itemList.Where(def => (category == ItemCategory.All || def.category == category) && (string.IsNullOrEmpty(searchQuery) || def.shortname.Contains(searchQuery, CompareOptions.IgnoreCase) || connectionData.translator.Convert(def.displayName).translated.Contains(searchQuery, CompareOptions.IgnoreCase))).ToList();
                foreach (Configuration.ItemPreset preset in config.GiveItemPresets)
                {
                    if (!Enum.TryParse<ItemCategory>(preset.Category, out ItemCategory presetCategory) || category != ItemCategory.All && category != presetCategory)
                        continue;
                    if (!string.IsNullOrEmpty(searchQuery) && !preset.Name.Contains(searchQuery, CompareOptions.IgnoreCase))
                        continue;
                    itemList.Add(new ItemDefinition { itemid = preset.ShortName.GetHashCode(), shortname = preset.Name, category = presetCategory });
                }

                int pageCount = Mathf.CeilToInt(itemList.Count / (float)itemsPerPage);
                var layout = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.04", anchorMax: "0.99 0.99", name: "AdminMenu_ItemList_Layout").AddDestroySelfAttribute();
                layout.Components.AddScrollView(vertical: true, scrollSensitivity: 60, anchorMin: $"0 -{pageCount - 1}", anchorMax: $"1 1");
                layout.AddEmpty().AddDestroy("AdminMenu_GiveMenu_Give");
                var bottom = root.AddPanel(color: "0.25 0.25 0.25 0", anchorMin: "0.02 0", anchorMax: "0.98 0.035", name: "AdminMenu_ItemList_Bottom").AddDestroySelfAttribute();
                bottom.AddText(text: string.Format(ITEM_COUNTER_LABEL.Localize(connectionData.connection), itemList.Count), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleRight, offsetMax: "-10 0");
                var searchPanel = bottom.AddButton(command: "adminmenu givemenu.opensearch", color: "0.15 0.15 0.15 1", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "250 0", name: "Search");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "-2 0", offsetMax: "0 0");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "1 0", anchorMax: "1 1", offsetMin: "0 0", offsetMax: "2 0");
                if (string.IsNullOrEmpty(searchQuery))
                {
                    searchPanel.AddText(text: SEARCH_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Placeholder");
                }
                else
                {
                    searchPanel.AddInputfield(command: "adminmenu givemenu.search.input", text: searchQuery, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Inputfield");
                }

                StopSequentialLoad();
                for (int i = 0; i < pageCount; i++)
                {
                    CUI.Root layoutRoot = new CUI.Root(layout.Name);
                    var screenContainer = layoutRoot.AddContainer(anchorMin: $"0 {(pageCount - (i + 1)) / (float)pageCount}", anchorMax: $"1 {(pageCount - i) / (float)pageCount}", name: $"{layoutRoot.Name}_Screen_{i}").AddDestroySelfAttribute();
                    for (int a = 0; a < rows; a++)
                    {
                        for (int b = 0; b < columns; b++)
                        {
                            int index = (i * itemsPerPage) + a * columns + b;
                            if (index > itemList.Count - 1)
                                break;
                            ItemDefinition itemDef = itemList.ElementAtOrDefault(index);
                            ulong skinId = 0UL;
                            string command = $"adminmenu givemenu.popup show {itemDef.itemid}";
                            if (itemDef == null)
                            {
                                Configuration.ItemPreset preset = config.GiveItemPresets.Find(p => p.ShortName.GetHashCode() == itemDef.itemid && p.Name == itemDef.shortname);
                                command = $"adminmenu givemenu.popup show_custom {itemDef.itemid} {preset.SkinId} {preset.Name}";
                                skinId = preset.SkinId;
                            }

                            var itemButton = screenContainer.AddContainer(anchorMin: $"{b * width} {1 - (a + 1) * height}", anchorMax: $"{(b + 1) * width} {1 - a * height}").AddButton(command: command, color: "0.25 0.25 0.25 0.6", sprite: "assets/content/ui/ui.rounded.tga", anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: $"-{dividedPanelSize} -{dividedPanelSize}", offsetMax: $"{dividedPanelSize} {dividedPanelSize}");
                            itemButton.AddIcon(itemId: itemDef.itemid, skin: skinId, offsetMin: "4 4", offsetMax: "-4 -4");
                        }
                    }

                    sequentialLoad.Add(Instance.timer.Once(i * 0.1f, () => layoutRoot.Render(connectionData.connection)));
                }
            }

            private void Popup(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                int itemId = (int)userData["givemenu.popup.itemid"];
                ItemDefinition itemDefinition = ItemManager.FindItemDefinition(itemId);
                if (itemDefinition == null)
                    return;
                int amount = (int)userData["givemenu.popup.amount"];
                ulong skinId = (ulong)userData["givemenu.popup.skin"];
                string name = (string)userData["givemenu.popup.name"];
                bool isBluprint = (bool)userData["givemenu.popup.isblueprint"];
                string itemTranslatedDisplayName = connectionData.translator.Convert(itemDefinition.displayName).translated;
                var backgroundButton = root.AddButton(color: "0 0 0 0.8", command: "adminmenu givemenu.popup close", close: "AdminMenu_GiveMenu_GivePopup", anchorMin: "0 0", anchorMax: "1 1", name: "AdminMenu_GiveMenu_GivePopup").AddDestroySelfAttribute();
                var panel = backgroundButton.AddButton(command: null, anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: "-200 -250", offsetMax: "200 250").AddPanel(color: "0.05 0.05 0.05 1");
                var header = panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0 1", anchorMax: "1 1", offsetMin: "0 -40", offsetMax: "0 0");
                header.AddText(text: itemTranslatedDisplayName.ToUpper(), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate);
                var iconContainer = panel.AddContainer(anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-100 -265", offsetMax: "100 -65", name: "GiveMenu_ItemIconContainer");
                if (skinId == 0UL && Instance.ImageLibrary != null && !itemDefinition.HasFlag((ItemDefinition.Flag)128))
                {
                    string iconCRC = Instance.ImageLibrary.Call<string>("GetImage", itemDefinition.shortname, 0UL);
                    if (iconCRC is string)
                    {
                        iconContainer.AddImage(iconCRC, name: "GiveMenu_ItemIcon");
                    }
                    else
                    {
                        Instance.ImageLibrary.Call("AddImage", $"https://carbonmod.gg/assets/media/items/{itemDefinition.shortname}.png", itemDefinition.shortname, 0UL, new Action(() =>
                        {
                            if (!(bool)userData["givemenu.popup.shown"] || (int)userData["givemenu.popup.itemid"] != itemDefinition.itemid)
                                return;
                            string iconCRC = Instance.ImageLibrary.Call<string>("GetImage", itemDefinition.shortname, 0UL);
                            if (iconCRC is string)
                            {
                                CUI.Root root = new CUI.Root("GiveMenu_ItemIconContainer");
                                root.AddImage(iconCRC, name: "GiveMenu_ItemIcon").AddDestroySelfAttribute();
                                root.Render(connectionData.connection);
                            }
                        }));
                        iconContainer.AddIcon(itemDefinition.itemid, name: "GiveMenu_ItemIcon");
                    }
                }
                else
                    iconContainer.AddIcon(itemDefinition.itemid, skinId, name: "GiveMenu_ItemIcon");
                var outer = panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0 0", anchorMax: "1 0", offsetMin: "0 0", offsetMax: "0 200");
                outer.AddInputfield(command: null, text: itemDefinition.shortname, color: "0.25 0.25 0.25 0.8", font: CUI.Font.NotoSansArabicBold, fontSize: 16, align: TextAnchor.MiddleCenter, @readonly: true, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "10 0", offsetMax: "-10 35");
                outer.AddText(text: NAME_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -40", offsetMax: "-60 -15");
                outer.AddPanel(color: "0.05 0.05 0.05 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -40", offsetMax: "170 -15").AddInputfield(command: "adminmenu givemenu.popup set_name", text: name ?? itemTranslatedDisplayName, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                outer.AddText(text: SKINID_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -75", offsetMax: "-60 -50");
                outer.AddPanel(color: "0.05 0.05 0.05 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -75", offsetMax: "170 -50").AddInputfield(command: "adminmenu givemenu.popup set_skin", text: skinId.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                outer.AddText(text: AMOUNT_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -110", offsetMax: "-60 -85");
                outer.AddPanel(color: "0.05 0.05 0.05 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -110", offsetMax: "50 -85").AddInputfield(command: "adminmenu givemenu.popup set_amount", text: amount.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                outer.AddButton(color: "0.2 0.2 0.2 1", command: $"adminmenu givemenu.popup set_amount {amount + 1}", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "55 -110", offsetMax: "78.75 -85").AddText(text: "+1", font: CUI.Font.RobotoCondensedBold, fontSize: 10, align: TextAnchor.MiddleCenter);
                outer.AddButton(color: "0.2 0.2 0.2 1", command: $"adminmenu givemenu.popup set_amount {amount + 100}", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "83.75 -110", offsetMax: "107.5 -85").AddText(text: "+100", font: CUI.Font.RobotoCondensedBold, fontSize: 10, align: TextAnchor.MiddleCenter);
                outer.AddButton(color: "0.2 0.2 0.2 1", command: $"adminmenu givemenu.popup set_amount {amount + 1000}", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "112.5 -110", offsetMax: "136.25 -85").AddText(text: "+1k", font: CUI.Font.RobotoCondensedBold, fontSize: 10, align: TextAnchor.MiddleCenter);
                outer.AddButton(color: "0.2 0.2 0.2 1", command: $"adminmenu givemenu.popup set_amount {amount + 10000}", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "141.25 -110", offsetMax: "170 -85").AddText(text: "+10k", font: CUI.Font.RobotoCondensedBold, fontSize: 10, align: TextAnchor.MiddleCenter);
                outer.AddText(text: BLUEPRINT_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -145", offsetMax: "-60 -120");
                var blueprintCheckbox = outer.AddButton(command: "adminmenu givemenu.popup isblueprint_toggle", color: "0.05 0.05 0.05 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -145", offsetMax: "-15 -120");
                if (isBluprint)
                {
                    blueprintCheckbox.AddPanel(color: "0.698 0.878 0.557 0.6", offsetMin: "4 4", offsetMax: "-4 -4").WithFade(0.2f);
                }

                outer.AddButton(color: "0.2 0.2 0.2 1", command: "adminmenu givemenu.popup give", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-80 10", offsetMax: "80 37").AddText(text: GIVE_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter);
            }

            public void OpenSearch(Connection connection)
            {
                CUI.Root root = new CUI.Root("Search");
                root.AddInputfield(command: "adminmenu givemenu.search.input", text: "", align: TextAnchor.MiddleLeft, autoFocus: true, offsetMin: "10 0", name: "Search_Inputfield").DestroyUi = "Search_Placeholder";
                root.Render(connection);
            }
        }

        public class GroupInfoContent : Content
        {
            private static readonly Label GROUPNAME_LABEL = new Label("Group Name: {0}");
            private static readonly Label USERS_LABEL = new Label("Users: {0}");
            private static readonly CloneGroupPopup CloneGroupPopup = new CloneGroupPopup();
            private static readonly RemoveGroupPopup ConfirmRemovePopup = new RemoveGroupPopup();
            public ButtonArray[] buttons;
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["groupinfo[popup:clonegroup]"] = false;
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                if ((bool)userData["groupinfo[popup:clonegroup]"])
                {
                    CloneGroupPopup.AddUI(root, connectionData, userData);
                    return;
                }
                else
                {
                    root.Add(new CUI.Element { DestroyUi = "AdminMenu_Popup_CloneGroupPopup" });
                }

                if (buttons == null)
                    return;
                string connectionUserId = ((ulong)userData["userId"]).ToString();
                string groupName = userData["groupinfo.groupName"].ToString();
                if (groupName == null)
                    return;
                if (!Instance.permission.GroupExists(groupName))
                    return;
                var container = root.AddContainer(name: "AdminMenu_GroupInfo_Info").AddDestroySelfAttribute();
                var basic_info_container = container.AddContainer(anchorMin: "0 1", anchorMax: "1 1", offsetMin: "30 -180", offsetMax: "-30 -30");
                basic_info_container.AddInputfield(command: null, text: string.Format(GROUPNAME_LABEL.Localize(connectionData.connection), groupName), font: CUI.Font.RobotoCondensedBold, fontSize: 24, align: TextAnchor.MiddleLeft, @readonly: true, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "20 -30", offsetMax: "0 0");
                basic_info_container.AddText(text: string.Format(USERS_LABEL.Localize(connectionData.connection), Instance.permission.GetUsersInGroup(groupName).Length), font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleLeft, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "20 -60", offsetMax: "0 -35");
                var actionButtonsContainer = container.AddContainer(anchorMin: "0 0", anchorMax: "1 1", offsetMin: "30 10", offsetMax: "-30 -230");
                float offset = 10f;
                for (int a = 0; a < buttons.Length; a++)
                {
                    IEnumerable<Button> rowButtons = buttons[a].GetAllowedButtons(connectionUserId);
                    for (int b = 0; b < rowButtons.Count(); b++)
                    {
                        Button button = rowButtons.ElementAtOrDefault(b);
                        if (button == null)
                            continue;
                        actionButtonsContainer.AddButton(color: "0.3 0.3 0.3 0.6", command: $"adminmenu {button.Command} {string.Join(" ", button.Args)}", anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{b * 150 + b * offset} -{(a + 1) * 35 + a * offset}", offsetMax: $"{(b + 1) * 150 + b * offset} -{a * 35 + a * offset}").AddText(text: button.Label.Localize(connectionUserId), font: CUI.Font.RobotoMonoRegular, fontSize: 12, align: TextAnchor.MiddleCenter);
                    }
                }
            }

            public void RemoveConfirmPopup(ConnectionData connectionData)
            {
                CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                ConfirmRemovePopup.AddUI(root, connectionData, connectionData.userData);
                root.Render(connectionData.connection);
            }
        }

        public class GroupListContent : Content
        {
            private static readonly Label CREATEGROUP_LABEL = new Label("CREATE GROUP");
            private static readonly CreateGroupPopup CreateGroupPopup = new CreateGroupPopup();
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["grouplist[popup:creategroup]"] = false;
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                const int columns = 4;
                const int rows = 16;
                const int perPage = rows * columns;
                const float width = 1f / columns;
                const float height = 1f / rows;
                if ((bool)userData["grouplist[popup:creategroup]"])
                {
                    CreateGroupPopup.AddUI(root, connectionData, userData);
                    return;
                }
                else
                {
                    root.Add(new CUI.Element { DestroyUi = "AdminMenu_Popup_CreateGroupPopup" });
                }

                string[] groups = Instance.permission.GetGroups();
                int pageCount = Mathf.CeilToInt(groups.Length / (float)perPage);
                var layout = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.04", anchorMax: "0.99 0.99", name: "AdminMenu_GroupList_Layout").AddDestroySelfAttribute();
                layout.Components.AddScrollView(vertical: true, scrollSensitivity: 20, anchorMin: $"0 -{pageCount - 1}", anchorMax: $"1 1");
                for (int page = 0; page < pageCount; page++)
                {
                    var screenContainer = layout.AddContainer(anchorMin: $"0 {(pageCount - (page + 1)) / (float)pageCount}", anchorMax: $"1 {(pageCount - page) / (float)pageCount}").AddDestroySelfAttribute();
                    for (int a = 0; a < rows; a++)
                    {
                        for (int b = 0; b < columns; b++)
                        {
                            int index = page * perPage + a * columns + b;
                            if (index >= groups.Length)
                                break;
                            string group = groups[index];
                            var container = screenContainer.AddContainer(anchorMin: $"{b * width} {1 - (a + 1) * height}", anchorMax: $"{(b + 1) * width} {1 - a * height}");
                            var button = container.AddButton(command: $"adminmenu permissionmanager.select_group {group}", color: "0.25 0.25 0.25 0.6", anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: $"-73 -20", offsetMax: $"73 20");
                            button.AddText(text: group, fontSize: 12, align: TextAnchor.MiddleCenter, offsetMin: "6 0", offsetMax: "-6 0");
                        }
                    }

                    root.AddButton(command: "adminmenu grouplist[popup:creategroup] show", color: "0.25 0.25 0.25 0.6", anchorMin: "0 0", anchorMax: "1 0.035").AddText(text: CREATEGROUP_LABEL.Localize(connectionData.connection), fontSize: 12, align: TextAnchor.MiddleCenter, offsetMin: "6 0", offsetMax: "-6 0");
                }
            }
        }

        public class NewPermissionManagerContent : Content
        {
            const float buttonHeight = 30;
            const float halfbuttonHeight = buttonHeight * 0.5f;
            const float lineThickness = 2f;
            const float halfLineThickness = lineThickness * 0.5f;
            private static Label GROUP_LABEL = new Label("GROUP");
            private static Label USER_LABEL = new Label("USER");
            private static Label GROUPS_LABEL = new Label("Groups");
            private static Label PERMISSIONS_LABEL = new Label("Permissions");
            private static Label MANAGE_LABEL = new Label("Manage");
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                base.LoadDefaultUserData(userData);
                userData["permissions.target_type"] = null;
                userData["permissions.target"] = null;
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var layout = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.01", anchorMax: "0.99 0.99", name: "AdminMenu_PermissionManager_Layout").AddDestroySelfAttribute();
                string type = userData["permissions.target_type"]?.ToString();
                string target = userData["permissions.target"]?.ToString();
                int x = 30;
                int y = 30;
                int totalY = 0;
                bool isTargetNull = type == null || target == null;
                float targetContainerHeight = isTargetNull ? buttonHeight * 2 + 5 : buttonHeight + 10;
                float halfTargetContainerHeight = targetContainerHeight * 0.5f;
                var targetContainer = layout.AddContainer(anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{x} -{y + targetContainerHeight}", offsetMax: $"{x += 150} -{y}");
                if (isTargetNull)
                {
                    targetContainer.AddButton(command: $"adminmenu permissionmanager.show_groups", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"0 -{buttonHeight}").AddText(text: GROUP_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleCenter);
                    targetContainer.AddButton(command: $"adminmenu permissionmanager.show_players", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"0 -{buttonHeight * 2 + 5}", offsetMax: $"0 -{buttonHeight + 5}").AddText(text: USER_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleCenter);
                    return;
                }

                string targetButtonText;
                switch (type)
                {
                    case "group":
                        targetButtonText = $"{GROUP_LABEL.Localize(connectionData.connection)}\n<b>{target}</b>";
                        break;
                    case "user":
                        targetButtonText = $"{USER_LABEL.Localize(connectionData.connection)}\n<b>{ServerMgr.Instance.persistance.GetPlayerName(ulong.Parse(target))}</b>";
                        break;
                    default:
                        return;
                }

                targetContainer.AddButton(command: "adminmenu permissionmanager.reset", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "0 -40").AddText(text: targetButtonText, align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate);
                y += (int)halfTargetContainerHeight;
                switch (type)
                {
                    case "group":
                    {
                        targetContainer.AddPanel(anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: $"-{halfLineThickness} -{buttonHeight + 35}", offsetMax: $"{halfLineThickness} -{buttonHeight + 15}");
                        targetContainer.AddButton(command: $"adminmenu groupinfo.open {target}", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"0 -{buttonHeight * 2 + 40}", offsetMax: $"0 -{buttonHeight + 40}").AddText(text: MANAGE_LABEL.Localize(connectionData.connection), align: TextAnchor.MiddleCenter, overflow: VerticalWrapMode.Truncate);
                        AddPluginsBranch(layout, userData, ref x, ref y, out totalY);
                        break;
                    }

                    case "user":
                    {
                        AddButtonBranch(layout, new string[] { GROUPS_LABEL.Localize(connectionData.connection), PERMISSIONS_LABEL.Localize(connectionData.connection) }.Select((text, index) =>
                        {
                            CUI.Root root = new CUI.Root();
                            root.AddButton(command: $"adminmenu permissionmanager.show_user_category {index} {x + 200} {y + index * 35 + halfLineThickness}", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "0 1", offsetMax: $"150 {buttonHeight}").AddText(text: text, overflow: VerticalWrapMode.Truncate, align: TextAnchor.MiddleCenter, offsetMin: "3 0", offsetMax: "-3 0");
                            return root;
                        }).ToList(), ref x, ref y, out totalY, "Branch1");
                        break;
                    }
                }

                userData["permissionmanager.totalY"] = totalY;
                layout.Components.AddScrollView(vertical: true, horizontal: true, scrollSensitivity: 50, anchorMin: "0 1", anchorMax: "0 1", offsetMin: "0 -10000", offsetMax: "10000 0");
            }

            private static void AddButtonBranch(CUI.Element parent, List<CUI.Root> buttons, ref int x, ref int y, out int totalY, string name = null)
            {
                totalY = y;
                Vector2 maxButtonSize = default(Vector2);
                var container = parent.AddContainer(name: name).AddDestroySelfAttribute();
                container.AddPanel(anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{x += 5} -{y + halfLineThickness}", offsetMax: $"{x += 30} -{y - halfLineThickness}");
                for (int i = 0; i < buttons.Count; i++)
                {
                    CUI.Root root = buttons[i];
                    CUI.Element button = root.Container.First();
                    CuiRectTransformComponent rect = button.Components.Get<CuiRectTransformComponent>();
                    Vector2 offsetMin = Vector2Ex.Parse(rect.OffsetMin);
                    Vector2 offsetMax = Vector2Ex.Parse(rect.OffsetMax);
                    Vector2 difference = offsetMax - offsetMin;
                    if (i > 0)
                    {
                        container.AddPanel(anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{x - halfLineThickness} -{y + i * (difference.y + 5) + 1}", offsetMax: $"{x + halfLineThickness} -{y + (i - 1) * (difference.y + 5)}");
                    }

                    if (difference.x > maxButtonSize.x)
                        maxButtonSize = difference;
                    container.AddPanel(anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{x} -{y + i * (difference.y + 5) + halfLineThickness}", offsetMax: $"{x + 10} -{y + i * (difference.y + 5) - halfLineThickness}");
                    rect.AnchorMin = "0 1";
                    rect.AnchorMax = "0 1";
                    rect.OffsetMin = $"{x + 15} -{y + i * (difference.y + 5) + halfLineThickness + difference.y * 0.5f}";
                    rect.OffsetMax = $"{x + 15 + difference.x} -{y + i * (difference.y + 5) - halfLineThickness - difference.y * 0.5f}";
                    button.AssignParent(container);
                    container.Container.AddRange(root.Container);
                }

                x += 15 + (int)maxButtonSize.x;
                totalY = y + buttons.Count * ((int)maxButtonSize.y + 5);
            }

            public static void AddGroupsBranch(CUI.Element parent, ConnectionData connectionData, ref int x, ref int y, out int totalY)
            {
                string userIdString = connectionData.userData["permissions.target"].ToString();
                int xx = x;
                int yy = y;
                AddButtonBranch(parent, Instance.permission.GetGroups().OrderBy(s => s).OrderBy(s => s).Select((groupName, index) =>
                {
                    bool hasGroup = Instance.permission.UserHasGroup(userIdString, groupName);
                    CUI.Root root = new CUI.Root();
                    CUI.Element button = root.AddButton(command: $"adminmenu permissionmanager.usergroups {(!hasGroup ? "grant" : "revoke")} {groupName}", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "0 1", offsetMax: $"150 {buttonHeight}", name: groupName);
                    button.AddText(text: groupName, overflow: VerticalWrapMode.Truncate, align: TextAnchor.MiddleCenter, offsetMin: "3 0", offsetMax: "-3 0");
                    string color = hasGroup ? "0.3 0.6 0.7 1" : "0 0 0 0";
                    button.AddPanel(color: color, anchorMin: "0 0", anchorMax: "1 0", offsetMin: "0 0", offsetMax: "0 2", name: $"{groupName} - COLOR");
                    return root;
                }).ToList(), ref x, ref y, out totalY, "Branch2");
                connectionData.userData["permissionmanager.totalY"] = totalY;
            }

            public static void AddPluginsBranch(CUI.Element parent, Dictionary<string, object> userData, ref int x, ref int y, out int totalY)
            {
                int xx = x;
                int yy = y;
                AddButtonBranch(parent, Instance.plugins.GetAll().Select(p => p.Name).Where(name => Instance.GetPermissions(name)?.Length > 0).OrderBy(s => s).OrderBy(s => s).Select((pluginName, index) =>
                {
                    CUI.Root root = new CUI.Root();
                    root.AddButton(command: $"adminmenu permissionmanager.show_permissions {pluginName} {xx + 200} {yy + index * 35 + halfLineThickness}", color: ButtonStyle.Default.BackgroundColor, anchorMin: "0 1", anchorMax: "0 1", offsetMax: $"150 {buttonHeight}").AddText(text: pluginName, overflow: VerticalWrapMode.Truncate, align: TextAnchor.MiddleCenter, offsetMin: "3 0", offsetMax: "-3 0");
                    return root;
                }).ToList(), ref x, ref y, out totalY, "Branch2");
                userData["permissionmanager.totalY"] = totalY;
            }

            public static void AddPermissionsBranch(CUI.Element parent, Dictionary<string, object> userData, string pluginName, ref int x, ref int y, out int totalY)
            {
                string type = userData["permissions.target_type"]?.ToString();
                string target = userData["permissions.target"]?.ToString();
                bool isTargetUser = false;
                if (type == "user")
                    isTargetUser = true;
                string[] permissions = Instance.GetPermissions(pluginName);
                if (permissions == null || permissions.Length == 0)
                {
                    parent.AddDestroy("PermissionsBranch");
                    totalY = y;
                    return;
                }

                AddButtonBranch(parent, permissions.OrderBy(s => s).Select(permission =>
                {
                    CUI.Root root = new CUI.Root();
                    CUI.Element button = root.AddButton(color: ButtonStyle.Default.BackgroundColor, offsetMax: "300 30", name: permission);
                    string permissionPrefix = $"{pluginName.ToLower()}.";
                    string visualName;
                    if (permission.StartsWith(permissionPrefix))
                        visualName = permission.Replace(permissionPrefix, string.Empty);
                    else
                        visualName = $"<i>{permission}</i>";
                    button.AddText(text: visualName, align: TextAnchor.MiddleCenter, offsetMin: "3 0", offsetMax: "-3 0");
                    if (target != null)
                    {
                        const string userColor = "0.5 0.7 0.4 1";
                        const string groupColor = "0.3 0.6 0.7 1";
                        bool hasUser = false;
                        bool hasGroup = false;
                        if (isTargetUser)
                        {
                            var permUserData = Instance.permission.GetUserData(target);
                            if (permUserData.Perms.Contains(permission, StringComparer.OrdinalIgnoreCase))
                            {
                                hasUser = true;
                            }
                            else if (Instance.permission.GroupsHavePermission(permUserData.Groups, permission))
                            {
                                hasGroup = true;
                            }
                        }
                        else
                        {
                            hasGroup = Instance.permission.GroupHasPermission(target, permission);
                        }

                        string color = "0 0 0 0";
                        if (hasUser || hasGroup)
                            color = hasGroup ? groupColor : userColor;
                        button.AddPanel(color: color, anchorMin: "0 0", anchorMax: "1 0", offsetMin: "0 0", offsetMax: "0 2", name: $"{permission} - COLOR");
                        button.Components.Get<CuiButtonComponent>().Command = $"adminmenu permission.action {(isTargetUser && !hasUser || !isTargetUser && !hasGroup ? "grant" : "revoke")} {permission}";
                    }

                    return root;
                }).ToList(), ref x, ref y, out totalY, "PermissionsBranch");
            }
        }

        public class PlayerListContent : Content
        {
            private static readonly Label SEARCH_LABEL = new Label("Search..");
            private static List<Timer> sequentialLoad = new List<Timer>();
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["playerlist.executeCommand"] = "adminmenu userinfo.open";
                if (!userData.ContainsKey("playerlist.filter"))
                    userData["playerlist.filter"] = (Func<IPlayer, bool>)((IPlayer player) => true);
                userData["playerlist.searchQuery"] = string.Empty;
            }

            public override void RestoreUserData(Dictionary<string, object> userData)
            {
                userData["playerlist.filter"] = (Func<IPlayer, bool>)((IPlayer player) => true);
                StopSequentialLoad();
            }

            public void StopSequentialLoad()
            {
                foreach (Timer timer in sequentialLoad)
                    if (!timer.Destroyed)
                        timer.Destroy();
                sequentialLoad.Clear();
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                Func<IPlayer, bool> filter = (Func<IPlayer, bool>)userData["playerlist.filter"];
                string searchQuery = (string)userData["playerlist.searchQuery"];
                int columns = 4;
                int rows = 16;
                int playersPerPage = columns * rows;
                List<IPlayer> players = Instance.covalence.Players.All.Where(filter).OrderBy(p => p.Name).ToList();
                if (!string.IsNullOrEmpty(searchQuery))
                    players = players.Where(player => player.Name.ToLower().Contains(searchQuery.ToLower()) || player.Id == searchQuery).ToList();
                int pageCount = Mathf.CeilToInt(players.Count / (float)playersPerPage);
                int playersCount = players.Count;
                var layout = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.04", anchorMax: "0.99 0.99", name: "AdminMenu_PlayerList_Layout").AddDestroySelfAttribute();
                layout.Components.AddScrollView(vertical: true, scrollSensitivity: 20, anchorMin: $"0 -{pageCount - 1}", anchorMax: $"1 1");
                float width = 1f / columns;
                float height = 1f / rows;
                var bottom = root.AddContainer(anchorMin: "0.02 0", anchorMax: "0.98 0.035", name: "AdminMenu_PlayerList_Bottom").AddDestroySelfAttribute();
                var searchPanel = bottom.AddButton(command: "adminmenu playerlist.opensearch", color: "0.15 0.15 0.15 1", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "200 0", name: "Search");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "-2 0", offsetMax: "0 0");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "1 0", anchorMax: "1 1", offsetMin: "0 0", offsetMax: "2 0");
                if (string.IsNullOrEmpty(searchQuery))
                {
                    searchPanel.AddText(text: SEARCH_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Placeholder");
                }
                else
                {
                    searchPanel.AddInputfield(command: "adminmenu playerlist.search.input", text: searchQuery, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Inputfield");
                }

                StopSequentialLoad();
                for (int i = 0; i < pageCount; i++)
                {
                    CUI.Root layoutRoot = new CUI.Root(layout.Name);
                    var screenContainer = layoutRoot.AddContainer(anchorMin: $"0 {(pageCount - (i + 1)) / (float)pageCount}", anchorMax: $"1 {(pageCount - i) / (float)pageCount}", name: $"{layoutRoot.Name}_Screen_{i}").AddDestroySelfAttribute();
                    for (int a = 0; a < rows; a++)
                    {
                        for (int b = 0; b < columns; b++)
                        {
                            int index = i * playersPerPage + a * columns + b;
                            IPlayer player = players.ElementAtOrDefault(index);
                            if (player == null)
                                break;
                            var container = screenContainer.AddContainer(anchorMin: $"{b * width} {1 - (a + 1) * height}", anchorMax: $"{(b + 1) * width} {1 - a * height}");
                            var button = container.AddButton(command: $"{userData["playerlist.executeCommand"]} {player.Id}", color: "0.25 0.25 0.25 0.6", anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: $"-73 -20", offsetMax: $"73 20");
                            string frameColor = null;
                            var serverUser = ServerUsers.Get(ulong.Parse(player.Id));
                            if (serverUser != null)
                            {
                                switch (serverUser.group)
                                {
                                    case ServerUsers.UserGroup.Owner:
                                        frameColor = "0.8 0.2 0.2 0.6";
                                        break;
                                    case ServerUsers.UserGroup.Moderator:
                                        frameColor = "1 0.6 0.3 0.6";
                                        break;
                                    case ServerUsers.UserGroup.Banned:
                                        frameColor = "0 0 0 1";
                                        break;
                                }
                            }

                            if (frameColor != null)
                            {
                                button.AddPanel(color: frameColor, anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "1.5 0");
                                button.AddPanel(color: frameColor, anchorMin: "1 0", anchorMax: "1 1", offsetMin: "-1.5 0", offsetMax: "0 0");
                                button.AddPanel(color: frameColor, anchorMin: "0 0", anchorMax: "1 0", offsetMin: "0 0", offsetMax: "0 1.5");
                                button.AddPanel(color: frameColor, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "0 -1.5", offsetMax: "0 0");
                            }

                            button.AddText(text: player.Name, fontSize: 12, align: TextAnchor.MiddleCenter, offsetMin: "6 0", offsetMax: "-6 0");
                        }
                    }

                    sequentialLoad.Add(Instance.timer.Once(i * 0.1f, () => layoutRoot.Render(connectionData.connection)));
                }
            }

            public void OpenSearch(Connection connection)
            {
                CUI.Root root = new CUI.Root("Search");
                root.AddInputfield(command: "adminmenu playerlist.search.input", text: "", align: TextAnchor.MiddleLeft, autoFocus: true, offsetMin: "10 0", name: "Search_Inputfield").DestroyUi = "Search_Placeholder";
                root.Render(connection);
            }
        }

        public class PluginManagerContent : Content
        {
            private static readonly MethodInfo GetPluginMethod = typeof(PluginLoader).GetMethod("GetPlugin", (BindingFlags)(-1));
            public static readonly Button COMMANDS_BUTTON = new Button("Commands", "pluginmanager.check_commands")
            {
                Permission = "pluginmanager.check_commands"
            };
            public static readonly Button PERMISSIONS_BUTTON = new Button("Permissions", "pluginmanager.check_permissions")
            {
                Permission = "permissionmanager"
            };
            public static readonly Button LOAD_BUTTON = new Button("Load", "pluginmanager.load")
            {
                Permission = "pluginmanager.load",
                Style = new ButtonStyle
                {
                    BackgroundColor = "0.451 0.737 0.349 1"
                }
            };
            public static readonly Button UNLOAD_BUTTON = new Button("Unload", "pluginmanager.unload")
            {
                Permission = "pluginmanager.unload",
                Style = new ButtonStyle
                {
                    BackgroundColor = "0.737 0.353 0.349 1"
                }
            };
            public static readonly Button RELOAD_BUTTON = new Button("Reload", "pluginmanager.reload")
            {
                Permission = "pluginmanager.reload",
                Style = new ButtonStyle
                {
                    BackgroundColor = "0.455 0.667 0.737 1"
                }
            };
            public static readonly Button RELOADALL_BUTTON = new Button("Reload All", "pluginmanager.reload_all")
            {
                Permission = "pluginmanager.reload_all",
                Style = new ButtonStyle
                {
                    BackgroundColor = "0.455 0.667 0.737 1"
                }
            };
            public static readonly Button FAVORITE_BUTTON = new Button(null, "pluginmanager.favorite")
            {
                Permission = "pluginmanager.favorite"
            };
            public static readonly Button UNFAVORITE_BUTTON = new Button(null, "pluginmanager.unfavorite")
            {
                Permission = "pluginmanager.favorite",
                Style = new ButtonStyle
                {
                    BackgroundColor = ButtonStyle.Default.BackgroundColor,
                    TextColor = "1 0.85 0.5 1"
                }
            };
            private static readonly Label SEARCH_LABEL = new Label("Search..");
            private static List<Timer> sequentialLoad = new List<Timer>();
            private const string BAR_BACKGROUND_COLOR = "0.25 0.25 0.25 0.4";
            private const string BAR_BACKGROUND_COLOR_LAST = "0.1 0.1 0.1 1";
            public override void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["pluginmanager.searchQuery"] = string.Empty;
                userData["pluginmanager.array"] = new string[0];
            }

            public override void RestoreUserData(Dictionary<string, object> userData)
            {
                base.RestoreUserData(userData);
                StopSequentialLoad();
            }

            public void StopSequentialLoad()
            {
                foreach (Timer timer in sequentialLoad)
                    if (!timer.Destroyed)
                        timer.Destroy();
                sequentialLoad.Clear();
            }

            public void UpdateForPlugin(ConnectionData connectionData, string pluginName)
            {
                CUI.Root root = new CUI.Root($"{pluginName} Bar");
                if (connectionData.userData.TryGetValue("pluginmanager.array", out object @obj) && connectionData.userData.TryGetValue("pluginmanager.lastusedplugin", out object @obj2))
                {
                    string[] array = (string[])@obj;
                    string lastusedplugin = (string)@obj2;
                    foreach (string pluginName2 in array)
                    {
                        root.AddUpdateElement($"{pluginName2} Bar").Components.AddImage(color: (pluginName2 == lastusedplugin) ? BAR_BACKGROUND_COLOR_LAST : BAR_BACKGROUND_COLOR, sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled);
                    }
                }

                AddButtons(root, pluginName, Core.Interface.Oxide.RootPluginManager.GetPlugin(pluginName), connectionData, out _);
                root.Render(connectionData.connection);
            }

            private void AddButtons(CUI.Element root, string pluginName, Plugin plugin, ConnectionData connectionData, out int count)
            {
                var buttonsContainer = root.AddContainer(name: $"{pluginName} Buttons").AddDestroySelfAttribute();
                ;
                List<Button> buttonsToRender = new List<Button>();
                if (plugin != null && plugin.IsLoaded)
                {
                    if (UNLOAD_BUTTON.UserHasPermission(connectionData.connection))
                        buttonsToRender.Add(UNLOAD_BUTTON);
                    if (RELOAD_BUTTON.UserHasPermission(connectionData.connection))
                        buttonsToRender.Add(RELOAD_BUTTON);
                    if (COMMANDS_BUTTON.UserHasPermission(connectionData.connection) && (Instance.GetConsoleCommands(pluginName).Length > 0 || Instance.GetChatCommands(pluginName).Length > 0))
                        buttonsToRender.Add(COMMANDS_BUTTON);
                    if (PERMISSIONS_BUTTON.UserHasPermission(connectionData.connection) && Instance.GetPermissions(pluginName)?.Length > 0)
                        buttonsToRender.Add(PERMISSIONS_BUTTON);
                }
                else
                {
                    if (LOAD_BUTTON.UserHasPermission(connectionData.connection))
                        buttonsToRender.Add(LOAD_BUTTON);
                }

                for (int k = 0; k < buttonsToRender.Count; k++)
                {
                    Button button = buttonsToRender[k];
                    buttonsContainer.AddButton(command: $"adminmenu {button.Command} {pluginName}", sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, color: button.Style.BackgroundColor, anchorMin: "0.99 0.1", anchorMax: "0.99 0.9", offsetMin: $"-{(k + 1) * 100 + k * 5} 0", offsetMax: $"-{k * 100 + k * 5} 0").AddText(text: button.Label.Localize(connectionData.connection), align: TextAnchor.MiddleCenter, offsetMin: "10 0", offsetMax: "-10 0");
                }

                count = buttonsToRender.Count;
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                const int rows = 15;
                const float width = 1f / rows;
                string searchQuery = (string)userData["pluginmanager.searchQuery"];
                string lastUsedPluginName = null;
                if (userData.TryGetValue("pluginmanager.lastusedplugin", out object obj))
                    lastUsedPluginName = obj as string;
                var container = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.045", anchorMax: "0.99 0.99", name: "AdminMenu_PluginManager").AddDestroySelfAttribute();
                IEnumerable<FileInfo> enumerable =
                    from f in new DirectoryInfo(Core.Interface.Oxide.PluginDirectory).GetFiles("*.cs")
                    where (f.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden
                    select f;
                List<string> pluginNames = enumerable.Select(fileInfo => Path.GetFileNameWithoutExtension(fileInfo.FullName)).Where(name => name.Contains(searchQuery, System.Globalization.CompareOptions.IgnoreCase)).OrderByDescending(name => config.FavoritePlugins.Contains(name)).ToList();
                int pageCount = Mathf.CeilToInt(pluginNames.Count / (float)rows);
                container.Components.AddScrollView(vertical: true, scrollSensitivity: 20, anchorMin: $"0 -{pageCount - 1}", anchorMax: $"1 1");
                var bottom = root.AddContainer(anchorMin: "0.01 0", anchorMax: "0.99 0.035", name: "AdminMenu_PluginManager_Bottom").AddDestroySelfAttribute();
                if (RELOADALL_BUTTON.UserHasPermission(connectionData.connection))
                {
                    bottom.AddButton(command: $"adminmenu {RELOADALL_BUTTON.Command}", sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, color: RELOADALL_BUTTON.Style.BackgroundColor, anchorMin: "1 0", anchorMax: "1 1", offsetMin: $"-100 0", offsetMax: $"0 0").AddText(text: RELOADALL_BUTTON.Label.Localize(connectionData.connection), align: TextAnchor.MiddleCenter, offsetMin: "10 0", offsetMax: "-10 0");
                }

                var searchPanel = bottom.AddButton(command: "adminmenu pluginmanager.opensearch", color: "0.15 0.15 0.15 0.7", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "0 0", offsetMax: "250 0", name: "Search");
                if (string.IsNullOrEmpty(searchQuery))
                {
                    searchPanel.AddText(text: SEARCH_LABEL.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Placeholder");
                }
                else
                {
                    searchPanel.AddInputfield(command: "adminmenu pluginmanager.search.input", text: searchQuery, align: TextAnchor.MiddleLeft, offsetMin: "10 0", name: "Search_Inputfield");
                }

                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "0 0", anchorMax: "0 1", offsetMin: "-2 0", offsetMax: "0 0");
                searchPanel.AddPanel(color: "0.9 0.4 0.4 0.5", anchorMin: "1 0", anchorMax: "1 1", offsetMin: "0 0", offsetMax: "2 0");
                StopSequentialLoad();
                for (int i = 0; i < pageCount; i++)
                {
                    CUI.Root layoutRoot = new CUI.Root(container.Name);
                    var screenContainer = layoutRoot.AddContainer(anchorMin: $"0 {(pageCount - (i + 1)) / (float)pageCount}", anchorMax: $"1 {(pageCount - i) / (float)pageCount}", name: $"{layoutRoot.Name}_Screen_{i}").AddDestroySelfAttribute();
                    for (int j = 0; j < rows; j++)
                    {
                        string pluginName = pluginNames.ElementAtOrDefault(i * rows + j);
                        if (pluginName == null)
                            break;
                        Plugin plugin = Core.Interface.Oxide.RootPluginManager.GetPlugin(pluginName);
                        var convarContainer = screenContainer.AddContainer(anchorMin: $"0 {1f - width * (j + 1)}", anchorMax: $"1 {1f - width * j}");
                        var panel = convarContainer.AddPanel(color: (pluginName == lastUsedPluginName ? BAR_BACKGROUND_COLOR_LAST : BAR_BACKGROUND_COLOR), sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, anchorMin: $"0 0.045", anchorMax: $"1 0.955", name: $"{pluginName} Bar");
                        AddButtons(panel, pluginName, plugin, connectionData, out int rightButtonCount);
                        Button favoriteButton = null;
                        string favoriteButtonSprite = null;
                        if (!config.FavoritePlugins.Contains(pluginName))
                        {
                            if (FAVORITE_BUTTON.UserHasPermission(connectionData.connection))
                            {
                                favoriteButton = FAVORITE_BUTTON;
                                favoriteButtonSprite = "assets/icons/favourite_inactive.png";
                            }
                        }
                        else
                        {
                            if (UNFAVORITE_BUTTON.UserHasPermission(connectionData.connection))
                            {
                                favoriteButton = UNFAVORITE_BUTTON;
                                favoriteButtonSprite = "assets/icons/favourite_active.png";
                            }
                        }

                        if (favoriteButton != null)
                        {
                            string command;
                            if (favoriteButton.UserHasPermission(connectionData.connection))
                                command = $"adminmenu {favoriteButton.Command} {pluginName}";
                            else
                                command = null;
                            panel.AddButton(command: command, sprite: "assets/content/ui/ui.background.rounded.png", imageType: UnityEngine.UI.Image.Type.Tiled, color: favoriteButton.Style.BackgroundColor, anchorMin: "0.005 0.1", anchorMax: "0.025 0.9").AddPanel(sprite: favoriteButtonSprite, material: CUI.Defaults.IconMaterial, color: favoriteButton.Style.TextColor, anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: "-6 -6", offsetMax: "6 6");
                        }

                        panel.AddText(text: $"<b>{(plugin != null ? $"{plugin.Name} v{plugin.Version} by {plugin.Author}" : pluginName)}</b>{(plugin != null && !string.IsNullOrEmpty(plugin.Description) ? $"\n<color=#7A7A7A><size=11>{plugin.Description}</size></color>" : string.Empty)}", align: TextAnchor.MiddleLeft, overflow: VerticalWrapMode.Truncate, anchorMin: $"0.035 0.1", anchorMax: "0.99 0.9", offsetMax: $"-{rightButtonCount * 100 + (rightButtonCount - 1) * 5} 0");
                    }

                    sequentialLoad.Add(Instance.timer.Once(i * 0.1f, () => layoutRoot.Render(connectionData.connection)));
                    userData["pluginmanager.array"] = pluginNames.ToArray();
                }
            }

            public void OpenSearch(Connection connection)
            {
                CUI.Root root = new CUI.Root("Search");
                root.AddInputfield(command: "adminmenu pluginmanager.search.input", text: "", align: TextAnchor.MiddleLeft, autoFocus: true, offsetMin: "10 0", name: "Search_Inputfield").DestroyUi = "Search_Placeholder";
                root.Render(connection);
            }
        }

        public class QuickMenuContent : Content
        {
            public ButtonGrid<Button> buttonGrid;
            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                const float offset = 10f;
                if (this.buttonGrid == null)
                    return;
                string connectionUserId = ((ulong)userData["userId"]).ToString();
                var container = root.AddPanel(color: "0 0 0 0", anchorMin: "0.01 0.01", anchorMax: "0.99 0.99", name: "AdminMenu_QuickMenu").AddDestroySelfAttribute();
                var buttons = this.buttonGrid.GetAllowedButtons(connectionUserId);
                container.Components.AddScrollView(vertical: true, scrollSensitivity: 10, verticalScrollbar: new Game.Rust.Cui.CuiScrollbar() { Size = 20, HandleColor = ButtonStyle.Default.BackgroundColor, HandleSprite = "assets/content/ui/ui.background.rounded.png", HighlightColor = ButtonStyle.Default.BackgroundColor, TrackColor = "0 0 0 0.2", TrackSprite = "assets/content/ui/ui.background.rounded.png", AutoHide = true }, offsetMin: $"0 -{(buttons.Max(b => b.row) - 15) * (35 + offset)}");
                foreach (var item in buttons)
                {
                    Button button = item.button;
                    if (button == null)
                        continue;
                    string backgroundColor;
                    if (button is ToggleButton toggleButton)
                    {
                        if (toggleButton.GetState(connectionData) == Button.State.Toggled)
                            backgroundColor = toggleButton.Style.ActiveBackgroundColor ?? ButtonStyle.Default.ActiveBackgroundColor;
                        else
                            backgroundColor = button.Style.BackgroundColor;
                    }
                    else
                    {
                        backgroundColor = button.Style.BackgroundColor;
                    }

                    container.AddButton(color: backgroundColor, command: $"adminmenu {button.Command} {string.Join(" ", button.Args)}", anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{item.column * 150 + item.column * offset} -{(item.row + 1) * 35 + item.row * offset}", offsetMax: $"{(item.column + 1) * 150 + item.column * offset} -{item.row * 35 + item.row * offset}").AddText(text: button.Label.Localize(connectionUserId), color: button.Style.TextColor, font: CUI.Font.RobotoMonoRegular, fontSize: 12, align: TextAnchor.MiddleCenter);
                }
            }
        }

        public class TextContent : Content
        {
            public string text = string.Empty;
            public CUI.Font font = CUI.Font.RobotoCondensedRegular;
            public TextAnchor align = TextAnchor.UpperLeft;
            public Vector2 margin = new Vector2(10, 10);
            public int fontSize = 18;
            public bool allowCopy = false;
            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                if (allowCopy)
                {
                    int textHashCode = text.GetHashCode();
                    root.AddInputfield(command: null, text: null, font: font, fontSize: fontSize, align: align, lineType: UnityEngine.UI.InputField.LineType.MultiLineNewline, @readonly: true, anchorMin: "0 0", anchorMax: "1 1", offsetMin: $"{margin.x} {margin.y}", offsetMax: $"-{margin.x} -{margin.y}", name: textHashCode.ToString()).AddDestroySelfAttribute();
                    root.Add(new CUI.Element { Components = { new CuiInputFieldComponent { Text = text } }, Name = textHashCode.ToString(), Update = true });
                }
                else
                {
                    root.AddText(text: text, font: font, fontSize: fontSize, align: align, offsetMin: $"{margin.x} {margin.y}", offsetMax: $"-{margin.x} -{margin.y}").AddDestroySelfAttribute();
                }
            }
        }

        public class UserInfoContent : Content
        {
            private static readonly Label HEALTH_LABEL = new Label("Health: {0}/{1}");
            private static readonly Label GRID_LABEL = new Label("Grid: {0}");
            private static readonly Label CONNECTIONTIME_LABEL = new Label("CTIME: {0:D2}h {1:D2}m {2:D2}s");
            private static readonly Label BALANCE_LABEL = new Label("Balance: {0}$");
            private static readonly Label CLAN_LABEL = new Label("Clan: {0}");
            private static readonly Label UNKNOWN_LABEL = new Label("Unknown");
            private static readonly Label NOTCONNECTED_LABEL = new Label("Not connected");
            private static readonly Label STEAMINFO_LOCATION_LABEL = new Label("[Location: {0}]");
            private static readonly Label STEAMINFO_REGISTRATION_LABEL = new Label("[Registration: {0}]");
            private static readonly Label STEAMINFO_HOURSINRUST_LABEL = new Label("[{0}h in Rust]");
            private static readonly KickPopup kickPopup = new KickPopup();
            private static readonly BanPopup banPopup = new BanPopup();
            public ButtonGrid<Button> buttonGrid;
            public static string GetDisplayName(IPlayer player)
            {
                string name = player.Name;
                var serverUser = ServerUsers.Get(ulong.Parse(player.Id));
                if (serverUser != null)
                {
                    switch (serverUser.group)
                    {
                        case ServerUsers.UserGroup.Owner:
                            name = "[Admin] " + name;
                            break;
                        case ServerUsers.UserGroup.Moderator:
                            name = "[Moderator] " + name;
                            break;
                        case ServerUsers.UserGroup.Banned:
                            name = "[Banned] " + name;
                            break;
                    }
                }

                return name;
            }

            protected override void Render(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                if (buttonGrid == null)
                    return;
                string connectionUserId = ((ulong)userData["userId"]).ToString();
                string userid = userData["userinfo.userid"].ToString();
                if (userid == null)
                    return;
                IPlayer player = Instance.covalence.Players.FindPlayerById(userid);
                if (player == null)
                    return;
                ulong playerIdUlong = ulong.Parse(player.Id);
                SteamInfo steamInfo = null;
                if (playerIdUlong.IsSteamId())
                    Instance.RequestSteamInfo(playerIdUlong, out steamInfo, new Action<SteamInfo>((steamInfo) => Render(connectionData)));
                BasePlayer playerInWorld = BasePlayer.FindAwakeOrSleeping(userid);
                Vector3 position = Vector3.zero;
                float health = 0f;
                float maxHealth = 0f;
                bool isMuted = false;
                if (playerInWorld != null)
                {
                    position = playerInWorld.transform.position;
                    health = playerInWorld.health;
                    maxHealth = playerInWorld.MaxHealth();
                    isMuted = playerInWorld.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute);
                }

                var container = root.AddContainer(name: "AdminMenu_UserInfo_Info").AddDestroySelfAttribute();
                var basic_info_container = container.AddContainer(anchorMin: "0 1", anchorMax: "1 1", offsetMin: "30 -180", offsetMax: "-30 -30");
                var avatarContainer = basic_info_container.AddContainer(anchorMin: "0 0", anchorMax: "0 0", offsetMin: "0 0", offsetMax: "150 150", name: "AdminMenu_UserInfo_AvatarContainer");
                string avatarId = string.Format("adm_{0}_H", player.Id);
                bool hasAvatar = Instance.ImageLibrary?.Call<bool>("HasImage", avatarId, 0UL) == true;
                if (hasAvatar)
                {
                    string avatar = Instance.ImageLibrary?.Call<string>("GetImage", avatarId, 0UL);
                    if (avatar != null)
                    {
                        avatarContainer.AddImage(content: avatar, color: "1 1 1 1", name: "AdminMenu_UserInfo_Avatar").AddDestroySelfAttribute();
                    }
                }
                else
                {
                    avatarContainer.AddPanel(color: "0.3 0.3 0.3 0.5", name: "AdminMenu_UserInfo_Avatar").AddDestroySelfAttribute().AddOutlinedText(text: "NO\nAVATAR", outlineWidth: 2, outlineColor: "0 0 0 0.5", font: CUI.Font.RobotoCondensedBold, fontSize: 25, align: TextAnchor.MiddleCenter);
                    if (steamInfo != null && Instance.ImageLibrary != null)
                    {
                        string hAvatar = steamInfo.Avatars[2];
                        if (!string.IsNullOrEmpty(hAvatar))
                            Instance.ImageLibrary.Call("AddImage", hAvatar, avatarId, 0UL, new Action(() => Render(connectionData)));
                    }
                }

                string name = GetDisplayName(player);
                var text_info_container = basic_info_container.AddContainer(anchorMin: "0 0", anchorMax: "1 1", offsetMin: "180 0");
                text_info_container.AddPanel(color: "1 1 1 1", sprite: $"assets/icons/flags/{Instance.lang.GetLanguage(player.Id)}.png", material: "assets/content/ui/namefontmaterial.mat", anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"0 -30", offsetMax: $"35 0");
                text_info_container.AddInputfield(command: null, text: name, font: CUI.Font.RobotoCondensedBold, fontSize: 24, align: TextAnchor.MiddleLeft, @readonly: true, inputType: CUI.InputType.HudMenuInput, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "40 -30", offsetMax: "0 0");
                text_info_container.AddText(text: "Steam ID:", font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleLeft, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "0 -60", offsetMax: "0 -35");
                text_info_container.AddInputfield(command: null, color: "1 1 1 1", text: player.Id, font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleLeft, @readonly: true, inputType: CUI.InputType.HudMenuInput, anchorMin: "0 1", anchorMax: "1 1", offsetMin: "90 -60", offsetMax: "0 -35");
                List<string> leftColumn = new List<string>
                {
                    string.Format(HEALTH_LABEL.Localize(connectionUserId), Mathf.Round(health), Mathf.Round(maxHealth)),
                    string.Format(GRID_LABEL.Localize(connectionUserId), (position != Vector3.zero ? MapHelper.PositionToGrid(position) : UNKNOWN_LABEL.Localize(connectionUserId))),
                    string.Format("{0} (P: {1})", player.Address != null ? (Instance.UserHasPermission(connectionUserId, PERMISSION_USERINFO_IP) ? player.Address : "***.***.*.**") : NOTCONNECTED_LABEL.Localize(connectionUserId), (player.IsConnected ? player.Ping : -1))
                };
                List<string> rightColumn = new List<string>();
                if (Instance.Economics || Instance.ServerRewards)
                {
                    double? balance = null;
                    if (Instance.Economics)
                    {
                        balance = Instance.Economics.Call<double>("Balance", new object[] { playerIdUlong });
                    }
                    else if (Instance.ServerRewards)
                    {
                        object points = Instance.ServerRewards.Call("CheckPoints", new object[] { playerIdUlong });
                        if (points is int)
                            balance = (int)points;
                    }

                    if (balance.HasValue)
                        rightColumn.Add(string.Format(BALANCE_LABEL.Localize(connectionUserId), balance.Value));
                }

                if (Instance.Clans != null)
                {
                    string clanTag = Instance.Clans.Call<string>("GetClanOf", userid);
                    if (!string.IsNullOrEmpty(clanTag))
                        rightColumn.Add(string.Format(CLAN_LABEL.Localize(connectionUserId), clanTag));
                }

                if (playerInWorld != null && playerInWorld.IsConnected)
                {
                    TimeSpan timeSpan = TimeSpan.FromSeconds(playerInWorld.Connection.GetSecondsConnected());
                    rightColumn.Add(string.Format(CONNECTIONTIME_LABEL.Localize(connectionUserId), timeSpan.Hours, timeSpan.Minutes, timeSpan.Seconds));
                }

                for (int i = 0; i < leftColumn.Count; i++)
                {
                    text_info_container.AddText(text: leftColumn[i], font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleLeft, overflow: VerticalWrapMode.Truncate, anchorMin: "0 1", anchorMax: "0.49 1", offsetMin: $"0 -{65 + (i + 1) * 25}", offsetMax: $"0 -{65 + i * 25}");
                }

                for (int i = 0; i < rightColumn.Count; i++)
                {
                    text_info_container.AddText(text: rightColumn[i], font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleLeft, overflow: VerticalWrapMode.Truncate, anchorMin: "0.51 1", anchorMax: "1 1", offsetMin: $"0 -{65 + (i + 1) * 25}", offsetMax: $"0 -{65 + i * 25}");
                }

                if (steamInfo != null)
                {
                    List<string> info = new List<string>();
                    if (Instance.UserHasPermission(connectionUserId, PERMISSION_USERINFO_STEAMINFO))
                    {
                        if (!string.IsNullOrEmpty(steamInfo.Location))
                            info.Add(string.Format(STEAMINFO_LOCATION_LABEL.Localize(connectionUserId), steamInfo.Location));
                        if (!string.IsNullOrEmpty(steamInfo.RegistrationDate))
                            info.Add(string.Format(STEAMINFO_REGISTRATION_LABEL.Localize(connectionUserId), steamInfo.RegistrationDate));
                        if (!string.IsNullOrEmpty(steamInfo.RustHours))
                            info.Add(string.Format(STEAMINFO_HOURSINRUST_LABEL.Localize(connectionUserId), steamInfo.RustHours));
                    }

                    if (info.Count > 0)
                    {
                        basic_info_container.AddButton(command: "adminmenu userinfo.action steaminfo_update", color: "0 0 0 0", anchorMin: "0 0", anchorMax: "1 0", offsetMin: "0 -35", offsetMax: "0 -10").AddText(text: string.Format("<color=#4755BD>[</color><color=#4859BD>S</color><color=#495DBE>t</color><color=#4A61BE>e</color><color=#4B65BF>a</color><color=#4C69BF>m</color><color=#4E6DC0>I</color><color=#4F71C0>n</color><color=#5075C1>f</color><color=#5179C1>o</color><color=#527DC2>]</color><color=#5381C2>:</color> {0}", string.Join(" ", info)), color: "0.8 0.8 0.8 1", fontSize: 14, align: TextAnchor.MiddleCenter);
                    }
                }

                const float offset = 10f;
                int lastRow = buttonGrid.Max(b => b.row);
                var actionButtonsContainer = container.AddPanel(color: "0 0 0 0", anchorMin: "0 0", anchorMax: "1 1", offsetMin: "30 10", offsetMax: "-30 -230");
                actionButtonsContainer.Components.AddScrollView(vertical: true, scrollSensitivity: 10, verticalScrollbar: new Game.Rust.Cui.CuiScrollbar() { Size = 20, HandleColor = ButtonStyle.Default.BackgroundColor, HandleSprite = "assets/content/ui/ui.background.rounded.png", HighlightColor = ButtonStyle.Default.BackgroundColor, TrackColor = "0 0 0 0.2", TrackSprite = "assets/content/ui/ui.background.rounded.png", AutoHide = true }, offsetMin: $"0 -{(lastRow - 10) * (35 + offset)}");
                foreach (var item in buttonGrid.GetAllowedButtons(connectionUserId))
                {
                    Button button = item.button;
                    if (button == null)
                        continue;
                    string backgroundColor;
                    if (button is ToggleButton)
                    {
                        ToggleButton toggleButton = button as ToggleButton;
                        backgroundColor = toggleButton.GetState(connectionData) == Button.State.Toggled ? toggleButton.Style.ActiveBackgroundColor : button.Style.BackgroundColor;
                    }
                    else
                    {
                        backgroundColor = button.Style.BackgroundColor;
                    }

                    actionButtonsContainer.AddButton(color: backgroundColor, command: $"adminmenu {button.Command} {string.Join(" ", button.Args)}", anchorMin: "0 1", anchorMax: "0 1", offsetMin: $"{item.column * 150 + item.column * offset} -{(item.row + 1) * 35 + item.row * offset}", offsetMax: $"{(item.column + 1) * 150 + item.column * offset} -{item.row * 35 + item.row * offset}").AddText(text: button.Label.Localize(connectionUserId), color: button.Style.TextColor, font: CUI.Font.RobotoMonoRegular, fontSize: 12, align: TextAnchor.MiddleCenter);
                }
            }

            public void ShowKickPopup(ConnectionData connectionData)
            {
                CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                KickPopup.LoadDefaultUserData(connectionData.userData);
                kickPopup.AddUI(root, connectionData, connectionData.userData);
                root.Render(connectionData.connection);
            }

            public void ShowBanPopup(ConnectionData connectionData)
            {
                CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                BanPopup.LoadDefaultUserData(connectionData.userData);
                banPopup.AddUI(root, connectionData, connectionData.userData);
                root.Render(connectionData.connection);
            }
        }

        public class Theme : Dictionary<string, Color>
        {
            public static class KeyCollection
            {
                public static string PANEL_SIDEBAR_BACKGROUND = nameof(PANEL_SIDEBAR_BACKGROUND);
                public static string PANEL_SIDEBAR_SELECTED = nameof(PANEL_SIDEBAR_SELECTED);
                public static string POPUP_HEADER = nameof(POPUP_HEADER);
                public static string POPUP_HEADER_TEXT = nameof(POPUP_HEADER_TEXT);
            }

            public string GetColorString(string key)
            {
                Color color = this[key];
                return string.Format("{0} {1} {2} {3}", color.r, color.g, color.b, color.a);
            }
        }

        public class ThemeConverter : JsonConverter
        {
            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    writer.WriteNull();
                    return;
                }

                Theme theme = (Theme)value;
                writer.WriteStartObject();
                foreach (var pair in theme)
                {
                    Color color = pair.Value;
                    writer.WritePropertyName(pair.Key);
                    writer.WriteValue(string.Format("{0} {1} {2} {3}", color.r, color.g, color.b, color.a));
                }

                writer.WriteEndObject();
            }

            public override bool CanConvert(Type objectType) => objectType == typeof(Theme);
            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                    return default(Dictionary<string, Color>);
                JObject jobject = JObject.Load(reader);
                Theme result = new Theme();
                foreach (var pair in jobject)
                    result.Add(pair.Key, ColorEx.Parse(pair.Value.ToString()));
                return result;
            }

            public override bool CanRead
            {
                get
                {
                    return true;
                }
            }
        }

        public static class Themes
        {
            public static Theme dark;
            public static Theme current;
            public static Theme CurrentTheme
            {
                get => current;
                set
                {
                    foreach (var pair in value)
                        current[pair.Key] = pair.Value;
                }
            }

            static Themes()
            {
                dark = new Theme();
                dark[Theme.KeyCollection.PANEL_SIDEBAR_BACKGROUND] = new Color(0.784f, 0.329f, 0.247f, 0.427f);
                dark[Theme.KeyCollection.PANEL_SIDEBAR_SELECTED] = new Color(0f, 0f, 0f, 0.6f);
                dark[Theme.KeyCollection.POPUP_HEADER] = new Color(0.1f, 0.1f, 0.1f, 1);
                dark[Theme.KeyCollection.POPUP_HEADER_TEXT] = new Color(0.85f, 0.85f, 0.85f, 0.8f);
                current = new Theme();
                foreach (var pair in dark)
                    current[pair.Key] = pair.Value;
            }
        }

        public class BanPopup : BasePopup
        {
            private static readonly Label REASON_LABEL = new Label("REASON");
            private static readonly Button BAN_BUTTON = new Button("BAN", "userinfo.action", "ban")
            {
                Permission = "userinfo.ban"
            };
            public BanPopup()
            {
                Width = 400;
                Height = 180;
                Modules.Add(new HeaderModule("BAN", 30) { TextColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER_TEXT], BackgroundColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER] });
            }

            public static void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["userinfo[popup:ban].reason"] = "No reason given";
                userData["userinfo[popup:ban].weeks"] = 0;
                userData["userinfo[popup:ban].days"] = 0;
                userData["userinfo[popup:ban].hours"] = 0;
                userData["userinfo[popup:ban].minutes"] = 0;
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                string reason = (string)userData["userinfo[popup:ban].reason"];
                int weeks = (int)userData["userinfo[popup:ban].weeks"];
                int days = (int)userData["userinfo[popup:ban].days"];
                int hours = (int)userData["userinfo[popup:ban].hours"];
                int minutes = (int)userData["userinfo[popup:ban].minutes"];
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-180 -90", offsetMax: "-130 -55").AddInputfield(command: "adminmenu userinfo[popup:ban] set_weeks", text: weeks.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 24, align: TextAnchor.MiddleCenter, charsLimit: 2, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: "W", color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 32, align: TextAnchor.MiddleLeft, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-125 -90", offsetMax: "-100 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-90 -90", offsetMax: "-40 -55").AddInputfield(command: "adminmenu userinfo[popup:ban] set_days", text: days.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 24, align: TextAnchor.MiddleCenter, charsLimit: 2, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: "D", color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 32, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-30 -90", offsetMax: "-10 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "0 -90", offsetMax: "50 -55").AddInputfield(command: "adminmenu userinfo[popup:ban] set_hours", text: hours.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 24, align: TextAnchor.MiddleCenter, charsLimit: 2, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: "H", color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 32, align: TextAnchor.MiddleLeft, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "60 -90", offsetMax: "85 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "95 -90", offsetMax: "145 -55").AddInputfield(command: "adminmenu userinfo[popup:ban] set_minutes", text: minutes.ToString(), font: CUI.Font.RobotoCondensedRegular, fontSize: 24, align: TextAnchor.MiddleCenter, charsLimit: 2, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: "M", color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 32, align: TextAnchor.MiddleLeft, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "155 -90", offsetMax: "180 -55");
                panel.AddText(text: REASON_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -130", offsetMax: "-60 -105");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -130", offsetMax: "170 -105").AddInputfield(command: "adminmenu userinfo[popup:ban] set_reason", text: reason ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddButton(color: "0.1 0.1 0.1 1", command: $"adminmenu {BAN_BUTTON.FullCommand}", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-80 10", offsetMax: "80 37").AddText(text: BAN_BUTTON.Label.Localize(connectionData.connection), color: "0.8 0.8 0.8 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter);
                return panel;
            }
        }

        public abstract class BasePopup : IUIModule
        {
            public float Width { get; set; } = 300;
            public float Height { get; set; } = 150;
            public Color Color { get; set; } = new Color(0.05f, 0.05f, 0.05f, 1);
            public List<IUIModule> Modules { get; set; } = new List<IUIModule>();
            public string CloseCommand { get; set; }

            public virtual CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                string typeName = GetType().Name;
                string elementName = $"AdminMenu_Popup_{typeName}";
                var container = parent.AddContainer(name: elementName).AddDestroySelfAttribute();
                container.AddButton(color: "0 0 0 0.8", command: CloseCommand ?? $"adminmenu popup {typeName} onClose", close: CloseCommand == null ? elementName : null, anchorMin: "0 0", anchorMax: "1 1");
                var panel = container.AddPanel(color: Extensions.ToCuiString(Color), anchorMin: "0.5 0.5", anchorMax: "0.5 0.5", offsetMin: $"-{Width / 2} -{Height / 2}", offsetMax: $"{Width / 2} {Height / 2}");
                foreach (IUIModule module in Modules)
                {
                    module.AddUI(panel, connectionData, userData);
                }

                return panel;
            }
        }

        public class CloneGroupPopup : BasePopup
        {
            private static readonly Label CGP_CLONE_LABEL = new Label("CLONE");
            private static readonly Label CGP_NAME_LABEL = new Label("NAME <color=#bb0000>*</color>");
            private static readonly Label CGP_TITLE_LABEL = new Label("TITLE   ");
            private static readonly Label CGP_CLONEUSERS_LABEL = new Label("CLONE USERS");
            public CloneGroupPopup()
            {
                Width = 400;
                Height = 210;
                CloseCommand = "adminmenu groupinfo[popup:clonegroup] close";
                Modules.Add(new HeaderModule("CLONE GROUP", 30) { TextColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER_TEXT], BackgroundColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER] });
            }

            public static void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["groupinfo[popup:clonegroup].name"] = null;
                userData["groupinfo[popup:clonegroup].title"] = null;
                userData["groupinfo[popup:clonegroup].cloneusers"] = false;
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                string name = (string)userData["groupinfo[popup:clonegroup].name"];
                string title = (string)userData["groupinfo[popup:clonegroup].title"];
                bool cloneUsers = (bool)userData["groupinfo[popup:clonegroup].cloneusers"];
                panel.AddText(text: CGP_NAME_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -80", offsetMax: "-60 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -80", offsetMax: "170 -55").AddInputfield(command: "adminmenu groupinfo[popup:clonegroup] set_name", text: name ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: CGP_TITLE_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -120", offsetMax: "-60 -95");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -120", offsetMax: "170 -95").AddInputfield(command: "adminmenu groupinfo[popup:clonegroup] set_title", text: title ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: CGP_CLONEUSERS_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -160", offsetMax: "-60 -135");
                var cloneUsersCheckbox = panel.AddButton(command: "adminmenu groupinfo[popup:clonegroup] cloneusers_toggle", color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -160", offsetMax: "-15 -135");
                if (cloneUsers)
                {
                    cloneUsersCheckbox.AddPanel(color: "0.698 0.878 0.557 0.6", offsetMin: "4 4", offsetMax: "-4 -4").WithFade(0.2f);
                }

                panel.AddButton(color: "0.1 0.1 0.1 1", command: "adminmenu groupinfo[popup:clonegroup] clone", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-80 10", offsetMax: "80 37").AddText(text: CGP_CLONE_LABEL.Localize(connectionData.connection), color: "0.8 0.8 0.8 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter);
                return panel;
            }
        }

        public class CreateGroupPopup : BasePopup
        {
            private static readonly Label CGP_NAME_LABEL = new Label("NAME <color=#bb0000>*</color>");
            private static readonly Label CGP_TITLE_LABEL = new Label("TITLE   ");
            private static readonly Label CGP_CREATE_LABEL = new Label("CREATE");
            public CreateGroupPopup()
            {
                Width = 400;
                Height = 210;
                CloseCommand = "adminmenu grouplist[popup:creategroup] close";
                Modules.Add(new HeaderModule("CREATE GROUP", 30) { TextColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER_TEXT], BackgroundColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER] });
            }

            public static void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["grouplist[popup:creategroup].name"] = null;
                userData["grouplist[popup:creategroup].title"] = null;
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                string name = (string)userData["grouplist[popup:creategroup].name"];
                string title = (string)userData["grouplist[popup:creategroup].title"];
                panel.AddText(text: CGP_NAME_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -80", offsetMax: "-60 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -80", offsetMax: "170 -55").AddInputfield(command: "adminmenu grouplist[popup:creategroup] set_name", text: name ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddText(text: CGP_TITLE_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -120", offsetMax: "-60 -95");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -120", offsetMax: "170 -95").AddInputfield(command: "adminmenu grouplist[popup:creategroup] set_title", text: title ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddButton(color: "0.1 0.1 0.1 1", command: "adminmenu grouplist[popup:creategroup] create", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-80 10", offsetMax: "80 37").AddText(text: CGP_CREATE_LABEL.Localize(connectionData.connection), color: "0.8 0.8 0.8 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter);
                return panel;
            }
        }

        public class HeaderModule : IUIModule
        {
            public Label Label { get; set; }
            public CUI.Font Font { get; set; }
            public float Height { get; set; }
            public int FontSize { get; set; }
            public Color TextColor { get; set; } = Color.white;
            public Color BackgroundColor { get; set; } = Color.black;

            public HeaderModule(string label, float height, CUI.Font font = CUI.Font.RobotoCondensedBold, int fontSize = 14)
            {
                Label = new Label(label);
                Height = height;
                Font = font;
                FontSize = fontSize;
            }

            public CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                return parent.AddPanel(color: Extensions.ToCuiString(BackgroundColor), anchorMin: "0 1", anchorMax: "1 1", offsetMin: $"0 -{Height}").AddText(text: Label.Localize(connectionData.connection), font: CUI.Font.RobotoCondensedBold, fontSize: FontSize, align: TextAnchor.MiddleCenter);
            }
        }

        public class KickPopup : BasePopup
        {
            private static readonly Label REASON_LABEL = new Label("REASON");
            private static readonly Button KICK_BUTTON = new Button("KICK", "userinfo.action", "kick")
            {
                Permission = "userinfo.kick"
            };
            public KickPopup()
            {
                Width = 400;
                Height = 140;
                Modules.Add(new HeaderModule("KICK", 30) { TextColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER_TEXT], BackgroundColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER] });
            }

            public static void LoadDefaultUserData(Dictionary<string, object> userData)
            {
                userData["userinfo[popup:kick].reason"] = "No reason given";
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                string reason = (string)userData["userinfo[popup:kick].reason"];
                panel.AddText(text: REASON_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 16, align: TextAnchor.MiddleCenter, anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-170 -80", offsetMax: "-60 -55");
                panel.AddPanel(color: "0.1 0.1 0.1 1", anchorMin: "0.5 1", anchorMax: "0.5 1", offsetMin: "-40 -80", offsetMax: "170 -55").AddInputfield(command: "adminmenu userinfo[popup:kick] set_reason", text: reason ?? string.Empty, font: CUI.Font.RobotoCondensedRegular, fontSize: 14, align: TextAnchor.MiddleLeft, offsetMin: "10 0", offsetMax: "-10 0");
                panel.AddButton(color: "0.1 0.1 0.1 1", command: $"adminmenu {KICK_BUTTON.FullCommand}", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-80 10", offsetMax: "80 37").AddText(text: KICK_BUTTON.Label.Localize(connectionData.connection), color: "0.8 0.8 0.8 0.8", font: CUI.Font.RobotoCondensedBold, fontSize: 18, align: TextAnchor.MiddleCenter);
                ;
                return panel;
            }
        }

        public class Popup : BasePopup
        {
            public override CUI.Element AddUI(CUI.Element root, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                return base.AddUI(root, connectionData, userData);
            }
        }

        public class RemoveGroupPopup : BasePopup
        {
            private static readonly Label REMOVECONFIRM_LABEL = new Label("Are you sure you want to <color=red>remove the group</color>?");
            private static readonly Label REMOVE_LABEL = new Label("Remove");
            private static readonly Label CANCEL_LABEL = new Label("Cancel");
            public RemoveGroupPopup()
            {
                Width = 400;
                Height = 170;
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                panel.AddText(text: REMOVECONFIRM_LABEL.Localize(connectionData.connection), color: "0.8 0.8 0.8 1", font: CUI.Font.RobotoCondensedBold, fontSize: 20, align: TextAnchor.MiddleCenter, anchorMin: "0.1 0.5", anchorMax: "0.9 0.5", offsetMin: "0 -20", offsetMax: "0 40");
                panel.AddButton(command: "adminmenu groupinfo.action remove.confirmed", color: "0.749 0.243 0.243 1", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "-150 20", offsetMax: "-30 50").AddText(text: REMOVE_LABEL.Localize(connectionData.connection), color: "1 0.8 0.8 1", align: TextAnchor.MiddleCenter);
                panel.AddButton(command: null, close: "AdminMenu_Popup_RemoveGroupPopup", color: "0.25 0.25 0.25 1", anchorMin: "0.5 0", anchorMax: "0.5 0", offsetMin: "30 20", offsetMax: "150 50").AddText(text: CANCEL_LABEL.Localize(connectionData.connection), color: "0.9 0.9 0.9 1", align: TextAnchor.MiddleCenter);
                return panel;
            }
        }

        public class TextPopup : BasePopup
        {
            public string title;
            public string text;
            public TextPopup(string title, string text)
            {
                this.title = title;
                this.text = text;
                Width = 400;
                Height = 210;
                if (!string.IsNullOrEmpty(title))
                    Modules.Add(new HeaderModule(title, 30) { TextColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER_TEXT], BackgroundColor = Themes.CurrentTheme[Theme.KeyCollection.POPUP_HEADER] });
            }

            public override CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData)
            {
                var panel = base.AddUI(parent, connectionData, userData);
                var body = panel.AddPanel(color: "0 0 0 0", offsetMin: "10 10", offsetMax: "-10 -40");
                body.Components.AddScrollView(vertical: true, scrollSensitivity: 30, anchorMin: "0 -9");
                body.AddText(text: text);
                return panel;
            }
        }

        private void adminmenu_chatcmd(BasePlayer player)
        {
            HandleCommand(player.Connection, "");
        }

        [ConsoleCommand("adminmenu")]
        private void adminmenu_cmd(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null)
                return;
            HandleCommand(player.Connection, arg.GetString(0), arg.Args?.Skip(1).ToArray());
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null)
                    LoadDefaultConfig();
                if (config.GiveItemPresets.Count == 0)
                    config.GiveItemPresets.Add(Configuration.ItemPreset.Example);
                SaveConfig();
            }
            catch (Exception e)
            {
                UnityEngine.Debug.LogException(e);
                PrintWarning("Creating new config file.");
                LoadDefaultConfig();
            }
        }

        protected override void LoadDefaultConfig() => config = Configuration.DefaultConfig();
        protected override void SaveConfig() => Config.WriteObject(config);
        public enum ButtonHook
        {
            OFF,
            X,
            F
        }

        private bool CanUseCommand(Connection connection, string permission)
        {
            string userId = connection.userid.ToString();
            return UserHasPermission(userId, permission);
        }

        private string FormatCommand(string command, BasePlayer admin)
        {
            string result = command;
            if (command.Contains("{adminUID}"))
                result = result.Replace("{adminUID}", admin.UserIDString);
            if (command.Contains("{position}"))
            {
                Vector3 position = admin.transform.position;
                result = result.Replace("{position}", $"\"{position}\"");
            }

            if (command.Contains("{view_position}"))
            {
                Vector3 viewPosition;
                Ray ray = admin.eyes.HeadRay();
                float distance = 100f;
                if (Physics.Raycast(ray, out RaycastHit raycastHit, distance, 229731073))
                    viewPosition = raycastHit.point;
                else
                    viewPosition = ray.origin + ray.direction * distance;
                result = result.Replace("{view_position}", $"\"{viewPosition}\"");
            }

            if (command.Contains("{view_direction_forward}"))
                result = result.Replace("{view_direction_forward}", $"\"{(admin.eyes.GetLookRotation() * Vector3.forward).XZ3D()}\"");
            if (command.Contains("{view_direction_backward}"))
                result = result.Replace("{view_direction_backward}", $"\"{(admin.eyes.GetLookRotation() * -Vector3.forward).XZ3D()}\"");
            if (command.Contains("{view_direction_left}"))
                result = result.Replace("{view_direction_left}", $"\"{(admin.eyes.GetLookRotation() * Vector3.left).XZ3D()}\"");
            if (command.Contains("{view_direction_right}"))
                result = result.Replace("{view_direction_left}", $"\"{(admin.eyes.GetLookRotation() * Vector3.right).XZ3D()}\"");
            return result;
        }

        private string FormatCommandToUser(string command, BasePlayer user, BasePlayer admin)
        {
            return FormatCommand(command, admin).Replace("{steamid}", user.UserIDString).Replace("{steamID}", user.UserIDString).Replace("{userID}", user.UserIDString).Replace("{STEAMID}", user.UserIDString).Replace("{USERID}", user.UserIDString).Replace("{target_position}", $"\"{user.transform.position}\"");
            ;
        }

        private void HandleCommand(Connection connection, string command, params string[] args)
        {
            if (connection == null || !CanUseAdminMenu(connection))
                return;
            ConnectionData connectionData;
            switch (command)
            {
                case "":
                case "True":
                {
                    connectionData = ConnectionData.GetOrCreate(connection);
                    if (!connectionData.IsAdminMenuDisplay)
                    {
                        connectionData.ShowAdminMenu();
                        BasePlayer player = connection.player as BasePlayer;
                        if (player)
                        {
                            BasePlayer spectatingTarget = GetSpectatingTarget(player);
                            if (spectatingTarget != null && spectatingTarget.IsConnected)
                                HandleCommand(connection, "userinfo.open", spectatingTarget.UserIDString);
                            else
                                OpenUserInfoAtCrosshair(connection.player as BasePlayer);
                        }
                    }
                    else
                    {
                        HandleCommand(connection, "close");
                    }

                    break;
                }

                case "show":
                    connectionData = ConnectionData.GetOrCreate(connection);
                    connectionData.ShowAdminMenu();
                    break;
                case "close":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        foreach (Button navButton in connectionData.currentMainMenu.NavButtons)
                            if (navButton != null)
                                navButton.SetState(connectionData, Button.State.Normal);
                        connectionData.HideAdminMenu();
                    }

                    break;
                case "openpanel":
                    ConnectionData.GetOrCreate(connection).OpenPanel(args[0]);
                    break;
                case "openinfopanel":
                    ConnectionData.GetOrCreate(connection).OpenPanel("info").ShowPanelContent(args[0]);
                    break;
                case "homebutton":
                    // Action when clicking on the AdminMenu inscription at the top left
                    break;
                case "uipanel.sidebar.button_pressed":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        int buttonIndex = int.Parse(args[0]);
                        int buttonCount = int.Parse(args[1]);
                        UpdateOneActiveImageElement(connection, "UIPanel_SideBar_Button", buttonIndex, buttonCount, Themes.CurrentTheme.GetColorString(Theme.KeyCollection.PANEL_SIDEBAR_SELECTED), "0 0 0 0");
                        if (buttonIndex >= 0)
                        {
                            Button button = connectionData.currentSidebar.CategoryButtons.GetAllowedButtons(connection).ElementAt(buttonIndex);
                            if (!button.UserHasPermission(connection))
                                return;
                            HandleCommand(connection, button.Command, button.Args);
                        }
                    }

                    break;
                case "navigation.button_pressed":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        int buttonIndex2 = int.Parse(args[0]);
                        int buttonCount2 = int.Parse(args[1]);
                        IEnumerable<Button> navButtons = connectionData.currentMainMenu.NavButtons.GetAllowedButtons(connection);
                        if (buttonIndex2 != 0)
                        {
                            for (int i = 0; i < navButtons.Count(); i++)
                            {
                                Button navButton = navButtons.ElementAtOrDefault(i);
                                if (navButton == null)
                                    continue;
                                if (i == buttonIndex2)
                                    navButton.SetState(connectionData, Button.State.Pressed);
                                else
                                    navButton.SetState(connectionData, Button.State.Normal);
                            }
                        }

                        if (buttonIndex2 >= 0)
                        {
                            Button navButton = navButtons.ElementAt(buttonIndex2);
                            if (navButton != null && navButton.UserHasPermission(connection))
                                HandleCommand(connection, navButton.Command, navButton.Args);
                        }

                        connectionData.UI.UpdateNavButtons(connectionData.currentMainMenu);
                    }

                    break;
                case "showcontent":
                    ConnectionData.GetOrCreate(connection).ShowPanelContent(args[0]);
                    break;
                case "back":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string backcommand = (string)connectionData.userData["backcommand"];
                        if (backcommand != null)
                        {
                            string[] a = backcommand.Split(' ');
                            HandleCommand(connection, a[0], a.Skip(1).ToArray());
                            connectionData.userData["backcommand"] = null;
                        }
                    }

                    break;
                case "playerlist.opensearch":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        (connectionData.currentContent as PlayerListContent)?.OpenSearch(connection);
                    break;
                case "playerlist.search.input":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string searchQuery = string.Empty;
                        if (args.Length > 0)
                            searchQuery = string.Join(" ", args);
                        connectionData.userData["playerlist.searchQuery"] = searchQuery;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "playerlist.filter":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        Func<IPlayer, bool> filterFunc;
                        switch (args[0])
                        {
                            case "online":
                                filterFunc = (IPlayer player) => player.IsConnected;
                                break;
                            case "offline":
                                filterFunc = (IPlayer player) => !player.IsConnected && BasePlayer.FindSleeping(player.Id);
                                break;
                            case "banned":
                                filterFunc = (IPlayer player) => player.IsBanned;
                                break;
                            case "admins":
                                filterFunc = (IPlayer player) => ServerUsers.Get(ulong.Parse(player.Id))?.group == ServerUsers.UserGroup.Owner;
                                break;
                            case "moders":
                                filterFunc = (IPlayer player) => ServerUsers.Get(ulong.Parse(player.Id))?.group == ServerUsers.UserGroup.Moderator;
                                break;
                            default:
                                filterFunc = (IPlayer player) => true;
                                break;
                        }

                        connectionData.userData["playerlist.filter"] = filterFunc;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "permissionmanager.reset":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.currentContent.LoadDefaultUserData(connectionData.userData);
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "permissionmanager.show_user_category":
                {
                    if (args.Length != 3)
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        int categoryIndex = int.Parse(args[0]);
                        int x = int.Parse(args[1]);
                        int y = int.Parse(args[2]);
                        CUI.Root root = new CUI.Root("AdminMenu_PermissionManager_Layout");
                        switch (categoryIndex)
                        {
                            case 0:
                            {
                                NewPermissionManagerContent.AddGroupsBranch(root, connectionData, ref x, ref y, out int totalY);
                                root.AddEmpty().AddDestroy("PermissionsBranch");
                                break;
                            }

                            case 1:
                            {
                                NewPermissionManagerContent.AddPluginsBranch(root, connectionData.userData, ref x, ref y, out int totalY);
                                break;
                            }

                            default:
                                return;
                        }

                        root.Render(connection);
                    }

                    break;
                }

                case "permissionmanager.show_permissions":
                {
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    if (args.Length != 3)
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string pluginName = args[0];
                        if (!plugins.Exists(pluginName))
                            return;
                        int x = int.Parse(args[1]);
                        int y = int.Parse(args[2]);
                        CUI.Root root = new CUI.Root("AdminMenu_PermissionManager_Layout");
                        NewPermissionManagerContent.AddPermissionsBranch(root, connectionData.userData, pluginName, ref x, ref y, out int totalY);
                        root.Render(connection);
                    }

                    break;
                }

                case "permissionmanager.show_groups":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.userData["permissions.target_type"] = "group";
                        connectionData.ShowPanelContent("groups");
                    }

                    break;
                case "permissionmanager.show_players":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.userData["permissions.target_type"] = "user";
                        connectionData.OpenPanel("playerlist");
                        connectionData.userData["playerlist.executeCommand"] = "adminmenu permissionmanager.select_user";
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "permissionmanager.select_group":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.ShowPanelContent("default");
                        connectionData.userData["permissions.target_type"] = "group";
                        connectionData.userData["permissions.target"] = args[0];
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "permissionmanager.select_user":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.OpenPanel("permissionmanager");
                        connectionData.userData["permissions.target_type"] = "user";
                        connectionData.userData["permissions.target"] = args[0];
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "permissionmanager.usergroups":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string type = connectionData.userData["permissions.target_type"]?.ToString();
                        string target = connectionData.userData["permissions.target"]?.ToString();
                        if (type != "user" || string.IsNullOrEmpty(target))
                            return;
                        bool isGrant;
                        switch (args[0])
                        {
                            case "grant":
                                isGrant = true;
                                break;
                            case "revoke":
                                isGrant = false;
                                break;
                            default:
                                return;
                        }

                        string groupName = args[1];
                        if (isGrant)
                            Instance.permission.AddUserGroup(target, groupName);
                        else
                            Instance.permission.RemoveUserGroup(target, groupName);
                        LogToDiscord(connection, isGrant ? "Grant user group to the player" : "Revoke user group from the player", $"The administrator change **{groupName}** user group to **[{ServerMgr.Instance.persistance.GetPlayerName(ulong.Parse(target))}](<https://steamcommunity.com/profiles/{target}>)** player!");
                        bool hasGroup = Instance.permission.UserHasGroup(target, groupName);
                        string color = hasGroup ? "0.3 0.6 0.7 1" : "0 0 0 0";
                        CUI.Root root = new CUI.Root();
                        root.AddUpdateElement(groupName).Components.AddButton($"adminmenu permissionmanager.usergroups {(!hasGroup ? "grant" : "revoke")} {groupName}");
                        root.AddUpdateElement($"{groupName} - COLOR").Components.AddImage(color: color);
                        root.Render(connection);
                    }

                    break;
                case "grouplist[popup:creategroup]":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "show":
                                connectionData.userData["grouplist[popup:creategroup]"] = true;
                                CreateGroupPopup.LoadDefaultUserData(connectionData.userData);
                                break;
                            case "close":
                                connectionData.userData["grouplist[popup:creategroup]"] = false;
                                break;
                            case "set_name":
                                connectionData.userData["grouplist[popup:creategroup].name"] = string.Join(" ", args.Skip(1));
                                break;
                            case "set_title":
                                connectionData.userData["grouplist[popup:creategroup].title"] = string.Join(" ", args.Skip(1));
                                break;
                            case "create":
                                bool creategroup_result = false;
                                string name = (string)connectionData.userData["grouplist[popup:creategroup].name"];
                                string title = (string)connectionData.userData["grouplist[popup:creategroup].title"];
                                if (permission.GroupExists(name))
                                {
                                    connectionData.userData["grouplist[popup:creategroup].name"] = null;
                                    creategroup_result = false;
                                }
                                else
                                {
                                    creategroup_result = permission.CreateGroup(name, title, 0);
                                }

                                if (creategroup_result)
                                    connectionData.userData["grouplist[popup:creategroup]"] = false;
                                break;
                        }

                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "groupinfo.open":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.userData["groupinfo.groupName"] = args[0];
                        if (connectionData.currentContent is GroupInfoContent)
                            connectionData.currentContent.Render(connectionData);
                        else
                            connectionData.OpenPanel("groupinfo");
                    }

                    break;
                case "groupinfo.permissions":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.OpenPanel("permissionmanager");
                        connectionData.userData["backcommand"] = $"groupinfo.open {connectionData.userData["groupinfo.groupName"]}";
                        connectionData.UI.UpdateNavButtons(connectionData.currentMainMenu);
                        connectionData.userData["permissions.target"] = connectionData.userData["groupinfo.groupName"];
                        connectionData.userData["permissions.target_type"] = "group";
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "groupinfo.users.open":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.userData["playerlist.filter"] = (Func<IPlayer, bool>)((IPlayer player) => permission.UserHasGroup(player.Id, connectionData.userData["groupinfo.groupName"].ToString()));
                        connectionData.ShowPanelContent("users");
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "groupinfo.action":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "remove":
                                (connectionData.currentContent as GroupInfoContent).RemoveConfirmPopup(connectionData);
                                break;
                            case "remove.confirmed":
                                string groupName = (string)connectionData.userData["groupinfo.groupName"];
                                if (groupName == null)
                                    return;
                                if (permission.RemoveGroup(groupName))
                                    connectionData.OpenPanel("permissionmanager");
                                break;
                        }
                    }

                    break;
                case "groupinfo[popup:clonegroup]":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "show":
                                connectionData.userData["groupinfo[popup:clonegroup]"] = true;
                                CloneGroupPopup.LoadDefaultUserData(connectionData.userData);
                                break;
                            case "close":
                                connectionData.userData["groupinfo[popup:clonegroup]"] = false;
                                break;
                            case "set_name":
                                connectionData.userData["groupinfo[popup:clonegroup].name"] = string.Join(" ", args.Skip(1));
                                break;
                            case "set_title":
                                connectionData.userData["groupinfo[popup:clonegroup].title"] = string.Join(" ", args.Skip(1));
                                break;
                            case "cloneusers_toggle":
                                connectionData.userData["groupinfo[popup:clonegroup].cloneusers"] = !(bool)connectionData.userData["groupinfo[popup:clonegroup].cloneusers"];
                                break;
                            case "clone":
                                string groupName = (string)connectionData.userData["groupinfo.groupName"];
                                if (groupName == null)
                                    return;
                                bool creategroup_result = false;
                                string name = (string)connectionData.userData["groupinfo[popup:clonegroup].name"];
                                string title = (string)connectionData.userData["groupinfo[popup:clonegroup].title"];
                                bool cloneUsers = (bool)connectionData.userData["groupinfo[popup:clonegroup].cloneusers"];
                                if (permission.GroupExists(name))
                                {
                                    connectionData.userData["groupinfo[popup:clonegroup].name"] = null;
                                    creategroup_result = false;
                                }
                                else
                                {
                                    if (permission.CreateGroup(name, title, 0))
                                    {
                                        string[] perms = permission.GetGroupPermissions(groupName);
                                        for (int i = 0; i < perms.Length; i++)
                                            permission.GrantGroupPermission(name, perms[i], null);
                                        if (cloneUsers)
                                        {
                                            string[] users = permission.GetUsersInGroup(groupName);
                                            for (int i = 0; i < users.Length; i++)
                                            {
                                                string userId = users[i].Split(' ')?[0];
                                                if (!string.IsNullOrEmpty(userId))
                                                    permission.AddUserGroup(userId, name);
                                            }
                                        }

                                        creategroup_result = true;
                                    }
                                }

                                if (creategroup_result)
                                {
                                    connectionData.userData["groupinfo[popup:clonegroup]"] = false;
                                    HandleCommand(connection, "groupinfo.open", name);
                                }

                                break;
                        }

                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "userinfo.open":
                    connectionData = ConnectionData.GetOrCreate(connection);
                    if (connectionData != null)
                    {
                        ulong userid;
                        switch (args[0])
                        {
                            case "self":
                                userid = connection.userid;
                                break;
                            case "last":
                                userid = (ulong)connectionData.userData["userinfo.lastuserid"];
                                break;
                            default:
                                ulong.TryParse(args[0], out userid);
                                break;
                        }

                        if (userid == 0)
                            return;
                        if (!connectionData.IsAdminMenuDisplay)
                            connectionData.ShowAdminMenu();
                        connectionData.userData["userinfo.userid"] = userid;
                        connectionData.userData["userinfo.lastuserid"] = userid;
                        if (connectionData.currentContent is UserInfoContent)
                            connectionData.currentContent.Render(connectionData);
                        else
                            connectionData.OpenPanel("userinfo");
                    }

                    break;
                case "userinfo.givemenu.open":
                    if (!CanUseCommand(connection, PERMISSION_GIVE))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.userData["givemenu.targets"] = new ulong[]
                        {
                            (ulong)connectionData.userData["userinfo.userid"]
                        };
                        connectionData.ShowPanelContent("give");
                    }

                    break;
                case "userinfo.permissions":
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        connectionData.OpenPanel("permissionmanager");
                        connectionData.userData["backcommand"] = $"userinfo.open {connectionData.userData["userinfo.userid"]}";
                        connectionData.UI.UpdateNavButtons(connectionData.currentMainMenu);
                        connectionData.userData["permissions.target"] = connectionData.userData["userinfo.userid"];
                        connectionData.userData["permissions.target_type"] = "user";
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "userinfo.action":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string userid = connectionData.userData["userinfo.userid"].ToString();
                        if (userid == null)
                            return;
                        UserInfoContent userInfoContent = (connectionData.currentContent as UserInfoContent);
                        Button button = null;
                        if (!Button.all.TryGetValue($"{command} {string.Join(" ", args)}", out button))
                        {
                            if (button == null)
                            {
                                ConsoleNetwork.SendClientCommand(connection, "echo Button not found.");
                                return;
                            }
                        }

                        if (!button.UserHasPermission(connection))
                        {
                            ConsoleNetwork.SendClientCommand(connection, "echo You don't have permission to use it.");
                            return;
                        }

                        BasePlayer admin = connection.player as BasePlayer;
                        BasePlayer user = BasePlayer.FindAwakeOrSleeping(userid);
                        if (admin == null || user == null)
                            return;
                        string action = args[0];
                        switch (action)
                        {
                            case "steaminfo_update":
                                RequestSteamInfo(user.userID, out SteamInfo steamInfo, (s) => connectionData.currentContent.Render(connectionData), true);
                                connectionData.currentContent.Render(connectionData);
                                break;
                            case "teleportselfto":
                                admin.Teleport(user);
                                if (config.Logs.AdminTeleport)
                                    LogToDiscord(connection, "Teleport admin to player", $"The administrator teleported to **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "teleporttoself":
                                user.Teleport(admin);
                                if (config.Logs.AdminTeleport)
                                    LogToDiscord(connection, "Teleport player to admin", $"The administrator teleported **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player to himself!");
                                break;
                            case "teleporttoauth":
                                BaseEntity[] entities = BaseEntity.Util.FindTargetsAuthedTo(user.userID, string.Empty);
                                if (entities.Length > 0)
                                    admin.Teleport(entities.GetRandom().transform.position);
                                break;
                            case "teleporttodeathpoint":
                                ProtoBuf.MapNote UserDeathNote = user.ServerCurrentDeathNote;
                                if (UserDeathNote != null)
                                    admin.Teleport(UserDeathNote.worldPosition);
                                break;
                            case "heal":
                                if (user.IsWounded())
                                    user.StopWounded();
                                user.Heal(user.MaxHealth());
                                user.metabolism.calories.value = user.metabolism.calories.max;
                                user.metabolism.hydration.value = user.metabolism.hydration.max;
                                user.metabolism.radiation_level.value = 0;
                                user.metabolism.radiation_poison.value = 0;
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.Heal)
                                    LogToDiscord(connection, "Full healing of the player", $"The administrator heal **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "heal50":
                                if (user.IsWounded())
                                    user.StopWounded();
                                user.Heal(user.MaxHealth() / 50);
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.Heal)
                                    LogToDiscord(connection, "Half healing of the player", $"The administrator heal **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "kill":
                                user.DieInstantly();
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.Kill)
                                    LogToDiscord(connection, "Kill the player", $"The administrator kill **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "viewinv":
                                PlayerLoot playerLoot = admin.inventory.loot;
                                bool IsLooting = playerLoot.IsLooting();
                                playerLoot.containers.Clear();
                                playerLoot.entitySource = null;
                                playerLoot.itemSource = null;
                                if (IsLooting)
                                    playerLoot.SendImmediate();
                                NextFrame(() =>
                                {
                                    playerLoot.PositionChecks = false;
                                    playerLoot.entitySource = RelationshipManager.ServerInstance;
                                    playerLoot.AddContainer(user.inventory.containerMain);
                                    playerLoot.AddContainer(user.inventory.containerWear);
                                    playerLoot.AddContainer(user.inventory.containerBelt);
                                    playerLoot.SendImmediate();
                                    admin.ClientRPC<string>(RpcTarget.Player("RPC_OpenLootPanel", admin), "player_corpse");
                                    Item backpackWithInventory = user.inventory.GetBackpackWithInventory();
                                    if (backpackWithInventory != null)
                                        AddViewingBackpack(playerLoot, backpackWithInventory);
                                });
                                HandleCommand(connection, "close");
                                if (config.Logs.LookInventory)
                                    LogToDiscord(connection, "Look the player's inventory", $"The administrator look the **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)**'s inventory!");
                                break;
                            case "stripinventory":
                                user.inventory.Strip();
                                if (config.Logs.StripInventory)
                                    LogToDiscord(connection, "Strip the player's inventory", $"The administrator strip the **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)**'s inventory!");
                                break;
                            case "unlockblueprints":
                                user.blueprints.UnlockAll();
                                if (config.Logs.Blueprints)
                                    LogToDiscord(connection, "Unlock the player's blueprints", $"The administrator unlock the **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)**'s blueprints!");
                                break;
                            case "revokeblueprints":
                                user.blueprints.Reset();
                                if (config.Logs.Blueprints)
                                    LogToDiscord(connection, "Revoke the player's blueprints", $"The administrator revoke the **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)**'s blueprints!");
                                break;
                            case "spectate":
                                if (!admin.IsDead())
                                    admin.DieInstantly();
                                if (admin.IsDead())
                                {
                                    admin.StartSpectating();
                                    admin.UpdateSpectateTarget(user.userID);
                                }

                                if (config.Logs.Spectate)
                                    LogToDiscord(connection, "Spectate to the player", $"The administrator spectate to **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "mute":
                                user.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, true);
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.MuteUnmute)
                                    LogToDiscord(connection, "Mute the player", $"The administrator mute **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "unmute":
                                user.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false);
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.MuteUnmute)
                                    LogToDiscord(connection, "Unmute the player", $"The administrator unmute **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "creative":
                                user.SetPlayerFlag(BasePlayer.PlayerFlags.CreativeMode, !user.HasPlayerFlag(BasePlayer.PlayerFlags.CreativeMode));
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.ToggleCreative)
                                    LogToDiscord(connection, "Toggle creative mode for player", $"The administrator toggle creative mode for **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player to **{user.IsInCreativeMode}**!");
                                break;
                            case "cuff":
                                user.SetPlayerFlag(BasePlayer.PlayerFlags.IsRestrained, !user.HasPlayerFlag(BasePlayer.PlayerFlags.IsRestrained));
                                user.inventory.SetLockedByRestraint(user.IsRestrained);
                                connectionData.currentContent.Render(connectionData);
                                if (user.IsRestrained)
                                {
                                    user.Server_CancelGesture();
                                    Item slot = user.inventory.containerBelt.GetSlot(0);
                                    if (slot != null)
                                    {
                                        if (!slot.MoveToContainer(user.inventory.containerMain, -1, true, false, null, true))
                                        {
                                            slot.DropAndTossUpwards(user.transform.position, 2f);
                                        }
                                    }

                                    user.ClientRPC<int, ItemId>(RpcTarget.Player("SetActiveBeltSlot", user), 0, default(ItemId));
                                }

                                if (config.Logs.Cuff)
                                    LogToDiscord(connection, "Toggle cuff for player", $"The administrator toggle cuff for **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player to **{user.IsRestrained}**!");
                                break;
                            case "kick":
                                if (args.Length == 2 && args[1] == "showpopup")
                                {
                                    (connectionData.currentContent as UserInfoContent).ShowKickPopup(connectionData);
                                    return;
                                }

                                string kickReason = "No reason given";
                                if (connectionData.userData.TryGetValue("userinfo[popup:kick].reason", out object kickReasonObj))
                                    kickReason = (string)kickReasonObj;
                                user.Kick(kickReason);
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.Kick)
                                    LogToDiscord(connection, "Kick the player", $"The administrator kick **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            case "ban":
                                if (args.Length == 2 && args[1] == "showpopup")
                                {
                                    (connectionData.currentContent as UserInfoContent).ShowBanPopup(connectionData);
                                    return;
                                }

                                int banWeeks = 0;
                                int banDays = 0;
                                int banHours = 0;
                                int banMinutes = 0;
                                string banReason = "No reason given";
                                if (connectionData.userData.TryGetValue("userinfo[popup:ban].reason", out object banReasonObj))
                                    banReason = (string)banReasonObj;
                                if (connectionData.userData.TryGetValue("userinfo[popup:ban].weeks", out object banWeeksObj))
                                    banWeeks = (int)banWeeksObj;
                                if (connectionData.userData.TryGetValue("userinfo[popup:ban].days", out object banDaysObj))
                                    banDays = (int)banDaysObj;
                                if (connectionData.userData.TryGetValue("userinfo[popup:ban].hours", out object banHoursObj))
                                    banHours = (int)banHoursObj;
                                if (connectionData.userData.TryGetValue("userinfo[popup:ban].minutes", out object banMinutesObj))
                                    banMinutes = (int)banMinutesObj;
                                long expiry = -1L;
                                if (!(banWeeks == 0 && banDays == 0 && banHours == 0 && banMinutes == 0))
                                    expiry = (long)(DateTimeOffset.UtcNow.ToUnixTimeSeconds() + new TimeSpan(banWeeks * 7 + banDays, banHours, banMinutes).TotalSeconds);
                                global::ServerUsers.User serverUser = global::ServerUsers.Get(user.userID);
                                if (serverUser != null && serverUser.group == global::ServerUsers.UserGroup.Banned)
                                {
                                    admin.ConsoleMessage(string.Format("User {0} is already banned", user.userID));
                                    return;
                                }

                                ServerUsers.Set(user.userID, global::ServerUsers.UserGroup.Banned, user.displayName, banReason);
                                if (user.IsConnected && user.net.connection.ownerid != 0UL && user.net.connection.ownerid != user.net.connection.userid)
                                    global::ServerUsers.Set(user.net.connection.ownerid, global::ServerUsers.UserGroup.Banned, user.displayName, string.Format("Family share owner of {0}", user.net.connection.userid), expiry);
                                ServerUsers.Save();
                                Net.sv.Kick(user.net.connection, banReason, false);
                                connectionData.currentContent.Render(connectionData);
                                if (config.Logs.Ban)
                                    LogToDiscord(connection, "Ban the player", $"The administrator ban **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player for {expiry} with the reason {banReason}!");
                                break;
                            case "cb.exec":
                                int hashCode = int.Parse(args[1]);
                                UserInfoCustomButton uicb = config.UserInfoCustomButtons.Find(button => button.GetHashCode() == hashCode);
                                if (uicb == null)
                                    break;
                                if (!uicb.Button.UserHasPermission(connection))
                                    break;
                                foreach (string cmd in uicb.Commands)
                                {
                                    string formatedCmd = FormatCommandToUser(cmd, user, admin);
                                    if (uicb.ExecutionAsServer)
                                        ConsoleSystem.Run(ConsoleSystem.Option.Server, formatedCmd);
                                    else
                                        admin.SendConsoleCommand(formatedCmd);
                                }

                                if (config.Logs.CustomButtons)
                                    LogToDiscord(connection, "Using a custom button", $"The administrator used a custom button with name **{uicb.Label}** at **[{user.displayName}](<https://steamcommunity.com/profiles/{user.UserIDString}>)** player!");
                                break;
                            default:
                                break;
                        }
                    }

                    break;
                case "userinfo[popup:kick]":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "set_reason":
                                connectionData.userData["userinfo[popup:kick].reason"] = string.Join(" ", args.Skip(1));
                                break;
                        }
                    }

                    break;
                case "userinfo[popup:ban]":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "show":
                                connectionData.userData["userinfo[popup:ban]"] = true;
                                BanPopup.LoadDefaultUserData(connectionData.userData);
                                break;
                            case "close":
                                connectionData.userData["userinfo[popup:ban]"] = false;
                                break;
                            case "set_reason":
                                connectionData.userData["userinfo[popup:ban].reason"] = string.Join(" ", args.Skip(1));
                                break;
                            case "set_weeks":
                                int.TryParse(args[1], out int weeks);
                                connectionData.userData["userinfo[popup:ban].weeks"] = Mathf.Clamp(weeks, 0, 99);
                                break;
                            case "set_days":
                                int.TryParse(args[1], out int days);
                                connectionData.userData["userinfo[popup:ban].days"] = Mathf.Clamp(days, 0, 6);
                                break;
                            case "set_hours":
                                int.TryParse(args[1], out int hours);
                                connectionData.userData["userinfo[popup:ban].hours"] = Mathf.Clamp(hours, 0, 23);
                                break;
                            case "set_minutes":
                                int.TryParse(args[1], out int minutes);
                                connectionData.userData["userinfo[popup:ban].minutes"] = Mathf.Clamp(minutes, 0, 59);
                                break;
                        }
                    }

                    break;
                case "permission.action":
                {
                    if (!CanUseCommand(connection, PERMISSION_PERMISSIONMANAGER))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string type = connectionData.userData["permissions.target_type"].ToString();
                        string target = connectionData.userData["permissions.target"].ToString();
                        if (type == null || target == null)
                            return;
                        bool isTargetUser;
                        switch (type)
                        {
                            case "user":
                                isTargetUser = true;
                                break;
                            case "group":
                                isTargetUser = false;
                                break;
                            default:
                                return;
                        }

                        bool isGrant;
                        switch (args[0])
                        {
                            case "grant":
                                isGrant = true;
                                break;
                            case "revoke":
                                isGrant = false;
                                break;
                            default:
                                return;
                        }

                        string permission = args[1];
                        if (permission == "adminmenu.fullaccess")
                            return;
                        if (isTargetUser)
                        {
                            if (isGrant)
                                Instance.permission.GrantUserPermission(target, permission, null);
                            else
                                Instance.permission.RevokeUserPermission(target, permission);
                            LogToDiscord(connection, isGrant ? "Grant permission to the player" : "Revoke permission from the player", $"The administrator change **{permission}** permission to **[{ServerMgr.Instance.persistance.GetPlayerName(ulong.Parse(target))}](<https://steamcommunity.com/profiles/{target}>)** player!");
                        }
                        else
                        {
                            if (isGrant)
                                Instance.permission.GrantGroupPermission(target, permission, null);
                            else
                                Instance.permission.RevokeGroupPermission(target, permission);
                            LogToDiscord(connection, isGrant ? "Grant permission to the group" : "Revoke permission from the group", $"The administrator change **{permission}** permission to **{target}** group!");
                        }

                        const string userColor = "0.5 0.7 0.4 1";
                        const string groupColor = "0.3 0.6 0.7 1";
                        bool hasUser = false;
                        bool hasGroup = false;
                        if (isTargetUser)
                        {
                            var permUserData = Instance.permission.GetUserData(target);
                            if (permUserData.Perms.Contains(permission, StringComparer.OrdinalIgnoreCase))
                            {
                                hasUser = true;
                            }
                            else if (Instance.permission.GroupsHavePermission(permUserData.Groups, permission))
                            {
                                hasGroup = true;
                            }
                        }
                        else
                        {
                            hasGroup = Instance.permission.GroupHasPermission(target, permission);
                        }

                        string color = "0 0 0 0";
                        if (hasUser || hasGroup)
                            color = hasGroup ? groupColor : userColor;
                        CUI.Root root = new CUI.Root();
                        root.AddUpdateElement(permission).Components.AddButton($"adminmenu permission.action {(isTargetUser && !hasUser || !isTargetUser && !hasGroup ? "grant" : "revoke")} {permission}");
                        root.AddUpdateElement($"{permission} - COLOR").Components.AddImage(color: color);
                        root.Render(connection);
                    }

                    break;
                }

                case "givemenu.open":
                    if (!CanUseCommand(connection, PERMISSION_GIVE))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        ulong userid;
                        switch (args[0])
                        {
                            case "self":
                                userid = connection.userid;
                                break;
                            default:
                                ulong.TryParse(args[0], out userid);
                                break;
                        }

                        connectionData.userData["givemenu.targets"] = new ulong[]
                        {
                            userid
                        };
                        connectionData.OpenPanel("givemenu");
                    }

                    break;
                case "givemenu.opensearch":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        (connectionData.currentContent as GiveMenuContent)?.OpenSearch(connection);
                    break;
                case "givemenu.search.input":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string searchQuery = string.Empty;
                        if (args.Length > 0)
                            searchQuery = string.Join(" ", args);
                        connectionData.userData["givemenu.searchQuery"] = searchQuery;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "givemenu.filter":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        ItemCategory recievedCategory = (ItemCategory)int.Parse(args[0]);
                        ItemCategory currentCategory = (ItemCategory)connectionData.userData["givemenu.category"];
                        connectionData.userData["givemenu.category"] = recievedCategory;
                        connectionData.userData["givemenu.page"] = 1;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "givemenu.popup":
                    if (!CanUseCommand(connection, PERMISSION_GIVE))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        switch (args[0])
                        {
                            case "show":
                                connectionData.userData["givemenu.popup.shown"] = true;
                                connectionData.userData["givemenu.popup.itemid"] = int.Parse(args[1]);
                                connectionData.userData["givemenu.popup.amount"] = 1;
                                connectionData.userData["givemenu.popup.skin"] = 0UL;
                                connectionData.userData["givemenu.popup.name"] = null;
                                connectionData.userData["givemenu.popup.isblueprint"] = false;
                                break;
                            case "show_custom":
                                connectionData.userData["givemenu.popup.shown"] = true;
                                connectionData.userData["givemenu.popup.itemid"] = int.Parse(args[1]);
                                connectionData.userData["givemenu.popup.amount"] = 1;
                                connectionData.userData["givemenu.popup.skin"] = ulong.Parse(args[2]);
                                connectionData.userData["givemenu.popup.name"] = string.Join(" ", args.Skip(3));
                                connectionData.userData["givemenu.popup.isblueprint"] = false;
                                break;
                            case "close":
                                connectionData.userData["givemenu.popup.shown"] = false;
                                return;
                            case "set_amount":
                                if (int.TryParse(args[1], out int set_amount))
                                    connectionData.userData["givemenu.popup.amount"] = set_amount;
                                break;
                            case "set_skin":
                                if (ulong.TryParse(args[1], out ulong set_skinid))
                                    connectionData.userData["givemenu.popup.skin"] = set_skinid;
                                break;
                            case "set_name":
                                connectionData.userData["givemenu.popup.name"] = string.Join(" ", args.Skip(1));
                                break;
                            case "isblueprint_toggle":
                                connectionData.userData["givemenu.popup.isblueprint"] = !(bool)connectionData.userData["givemenu.popup.isblueprint"];
                                break;
                            case "give":
                                connectionData = ConnectionData.Get(connection);
                                if (connectionData != null)
                                {
                                    int give_itemId = (int)connectionData.userData["givemenu.popup.itemid"];
                                    int give_amount = (int)connectionData.userData["givemenu.popup.amount"];
                                    ulong give_skin = (ulong)connectionData.userData["givemenu.popup.skin"];
                                    string give_name = (string)connectionData.userData["givemenu.popup.name"];
                                    bool isBlueprint = (bool)connectionData.userData["givemenu.popup.isblueprint"];
                                    ulong[] targets = (ulong[])connectionData.userData["givemenu.targets"];
                                    foreach (ulong targetUserId in targets)
                                    {
                                        BasePlayer playerToGive = BasePlayer.FindAwakeOrSleeping(targetUserId.ToString());
                                        if (playerToGive == null)
                                            continue;
                                        Item newItem = ItemManager.CreateByItemID(isBlueprint ? ItemManager.blueprintBaseDef.itemid : give_itemId, give_amount, give_skin);
                                        if (newItem != null)
                                        {
                                            if (isBlueprint)
                                            {
                                                newItem.blueprintTarget = give_itemId;
                                                newItem.OnVirginSpawn();
                                            }
                                            else
                                            {
                                                if (give_name != null)
                                                    newItem.name = give_name;
                                            }

                                            playerToGive.GiveItem(newItem);
                                            LogToDiscord(connection, targetUserId == connection.userid ? "Giving an item to yourself" : "Giving an item to a player", $"The item \"**{newItem.info.displayName.english}**\" with the skin **{newItem.skin}** in the amount of **{newItem.amount}** was given to **[{playerToGive.displayName}](<https://steamcommunity.com/profiles/{playerToGive.UserIDString}>)** player!\n||[{newItem.info.shortname}:{newItem.skin}]x{newItem.amount}||", $"https://rustlabs.com/img/items40/{newItem.info.shortname}.png");
                                        }
                                    }

                                    connectionData.userData["givemenu.popup.shown"] = false;
                                }

                                break;
                        }

                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "quickmenu.action":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        BasePlayer admin = connection.player as BasePlayer;
                        if (admin == null)
                            return;
                        QuickMenuContent quickMenuContent = (connectionData.currentContent as QuickMenuContent);
                        Button button = null;
                        if (!Button.all.TryGetValue($"{command} {string.Join(" ", args)}", out button))
                        {
                            if (button == null)
                            {
                                ConsoleNetwork.SendClientCommand(connection, "echo Button not found.");
                                return;
                            }
                        }

                        if (!button.UserHasPermission(connection))
                        {
                            ConsoleNetwork.SendClientCommand(connection, "echo You don't have permission to use it.");
                            return;
                        }

                        string action = args[0];
                        switch (action)
                        {
                            case "teleportto_000":
                                admin.Teleport(Vector3.zero);
                                if (config.Logs.AdminTeleport)
                                    LogToDiscord(connection, "Teleport admin to 0 0 0", $"The administrator teleported to 0 0 0 coordinates!");
                                break;
                            case "teleportto_deathpoint":
                                var deathMapNote = admin.ServerCurrentDeathNote;
                                if (deathMapNote != null)
                                    admin.Teleport(deathMapNote.worldPosition);
                                if (config.Logs.AdminTeleport)
                                    LogToDiscord(connection, "Teleported to death point", $"The administrator teleported to his point of death.");
                                break;
                            case "teleportto_randomspawnpoint":
                                global::BasePlayer.SpawnPoint spawnPoint = global::ServerMgr.FindSpawnPoint(admin);
                                if (spawnPoint != null)
                                    admin.Teleport(spawnPoint.pos);
                                break;
                            case "toggle_teleport_to_marker":
                                (button as ToggleButton).Toggle(connectionData);
                                connectionData.currentContent.Render(connectionData);
                                break;
                            case "healself":
                                if (admin.IsWounded())
                                    admin.StopWounded();
                                admin.Heal(admin.MaxHealth());
                                admin.metabolism.calories.value = admin.metabolism.calories.max;
                                admin.metabolism.hydration.value = admin.metabolism.hydration.max;
                                admin.metabolism.radiation_level.value = 0;
                                admin.metabolism.radiation_poison.value = 0;
                                if (config.Logs.Heal)
                                    LogToDiscord(connection, "Heal self", $"The administrator healed himself.");
                                break;
                            case "killself":
                                admin.DieInstantly();
                                if (config.Logs.Kill)
                                    LogToDiscord(connection, "Kill self", $"The administrator killed himself.");
                                break;
                            case "helicall":
                                global::BaseEntity heliEntity = global::GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab", default(Vector3), default(Quaternion), true);
                                if (heliEntity)
                                {
                                    heliEntity.GetComponent<global::PatrolHelicopterAI>().SetInitialDestination(admin.transform.position + new Vector3(0f, 10f, 0f), 0.25f);
                                    heliEntity.Spawn();
                                }

                                if (config.Logs.SpawnEntities)
                                    LogToDiscord(connection, "Heli call", $"The administrator called a **patrol helicopter**!");
                                break;
                            case "spawnbradley":
                                GameManager.server.CreateEntity("assets/prefabs/npc/m2bradley/bradleyapc.prefab", admin.CenterPoint(), default(Quaternion), true).Spawn();
                                if (config.Logs.SpawnEntities)
                                    LogToDiscord(connection, "Spawn Bradley", $"The administrator spawned a **bradley**!");
                                break;
                            case "spawncargo":
                                BaseEntity cargo = global::GameManager.server.CreateEntity("assets/content/vehicles/boats/cargoship/cargoshiptest.prefab", default(Vector3), default(Quaternion), true);
                                if (cargo != null)
                                {
                                    cargo.SendMessage("TriggeredEventSpawn", SendMessageOptions.DontRequireReceiver);
                                    cargo.Spawn();
                                    return;
                                }

                                if (config.Logs.SpawnEntities)
                                    LogToDiscord(connection, "Spawn Cargo", $"The administrator spawned a **cargo**!");
                                break;
                            case "giveaway_online":
                                connectionData.userData["givemenu.targets"] = BasePlayer.activePlayerList.Select(p => p.userID.Get()).ToArray();
                                connectionData.OpenPanel("givemenu");
                                break;
                            case "giveaway_everyone":
                                connectionData.userData["givemenu.targets"] = BasePlayer.allPlayerList.Select(p => p.userID.Get()).ToArray();
                                connectionData.OpenPanel("givemenu");
                                break;
                            case "settime":
                                float time = float.Parse(args[1]);
                                ConVar.Env.time = time;
                                if (config.Logs.SetTime)
                                    LogToDiscord(connection, "Set Time", $"The administrator set the time at **{time}**!");
                                break;
                            case "cb.exec":
                                int hashCode = int.Parse(args[1]);
                                QMCustomButton qmcb = config.CustomQuickButtons.Find(button => button.GetHashCode() == hashCode);
                                if (qmcb == null)
                                    break;
                                if (!qmcb.Button.UserHasPermission(connection))
                                    break;
                                string[] commands;
                                ToggleButton toggleButton = qmcb.Button as ToggleButton;
                                if (toggleButton != null && toggleButton.GetState(connectionData) == Button.State.Toggled)
                                    commands = qmcb.ToggledStateCommands;
                                else
                                    commands = qmcb.Commands;
                                List<string> commandsToExec = new List<string>();
                                switch (qmcb.PlayerReceivers)
                                {
                                    case QMCustomButton.Recievers.Online:
                                        foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
                                            commandsToExec.AddRange(commands.Select(cmd => FormatCommandToUser(cmd, activePlayer, admin)));
                                        break;
                                    case QMCustomButton.Recievers.Offline:
                                        foreach (BasePlayer sleeper in BasePlayer.sleepingPlayerList)
                                            commandsToExec.AddRange(commands.Select(cmd => FormatCommandToUser(cmd, sleeper, admin)));
                                        break;
                                    case QMCustomButton.Recievers.Everyone:
                                        foreach (BasePlayer player in BasePlayer.allPlayerList)
                                            commandsToExec.AddRange(commands.Select(cmd => FormatCommandToUser(cmd, player, admin)));
                                        break;
                                    case QMCustomButton.Recievers.None:
                                        commandsToExec.AddRange(commands.Select(cmd => FormatCommand(cmd, admin)));
                                        break;
                                }

                                foreach (string cmd in commandsToExec)
                                {
                                    if (qmcb.ExecutionAsServer)
                                        ConsoleSystem.Run(ConsoleSystem.Option.Server, cmd);
                                    else
                                        admin.SendConsoleCommand(cmd);
                                }

                                if (toggleButton != null)
                                {
                                    toggleButton.Toggle(connectionData);
                                    connectionData.currentContent.Render(connectionData);
                                }

                                if (config.Logs.CustomButtons)
                                    LogToDiscord(connection, "Using a custom button", $"The administrator used a custom button with name **{qmcb.Label}** from quick menu!");
                                break;
                        }
                    }

                    break;
                case "convars.opensearch":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        (connectionData.currentContent as ConvarsContent)?.OpenSearch(connection);
                    break;
                case "convars.save":
                    if (ConvarsContent.SAVE_BUTTON.UserHasPermission(connection))
                    {
                        ConsoleSystem.Run(ConsoleSystem.Option.Server, "server.writecfg", Array.Empty<object>());
                        if (config.Logs.ConVars)
                            LogToDiscord(connection, "Config save", $"The administrator saved config with convars!");
                    }

                    break;
                case "convars.search.input":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string searchQuery = string.Empty;
                        if (args.Length > 0)
                            searchQuery = string.Join(" ", args);
                        connectionData.userData["convars.searchQuery"] = searchQuery;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "convar.setvalue":
                    var convar = ConsoleGen.All.FirstOrDefault(c => c.FullName == args[0]);
                    if (convar != null)
                    {
                        convar.Set(string.Join(" ", args.Skip(1)));
                        convar.Saved = (convar.String != convar.DefaultValue);
                        connectionData = ConnectionData.Get(connection);
                        if (connectionData != null)
                            connectionData.currentContent?.Render(connectionData);
                        if (config.Logs.ConVars)
                            LogToDiscord(connection, "ConVar set value", $"The administrator set convar **{convar.FullName}** to **{convar.String}**!");
                    }

                    break;
                case "pluginmanager.opensearch":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        (connectionData.currentContent as PluginManagerContent)?.OpenSearch(connection);
                    break;
                case "pluginmanager.search.input":
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string searchQuery = string.Empty;
                        if (args.Length > 0)
                            searchQuery = string.Join(" ", args);
                        connectionData.userData["pluginmanager.searchQuery"] = searchQuery;
                        connectionData.currentContent.Render(connectionData);
                    }

                    break;
                case "pluginmanager.check_commands":
                {
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string pluginName = args[0];
                        if (string.IsNullOrEmpty(pluginName))
                            return;
                        CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                        string text = string.Empty;
                        IEnumerable<string> consoleCommands = GetConsoleCommands(pluginName);
                        if (consoleCommands.Count() > 0)
                            text += "Console Commands:\n" + string.Join(string.Empty, consoleCommands.Select(s => string.Format("   {0}\n", s)));
                        IEnumerable<string> chatCommands = GetChatCommands(pluginName);
                        if (chatCommands.Count() > 0)
                            text += "Chat Commands:\n" + string.Join(string.Empty, chatCommands.Select(s => string.Format("   {0}\n", s)));
                        new TextPopup($"{pluginName} Commands", text).AddUI(root, connectionData, connectionData.userData);
                        root.Render(connection);
                    }

                    break;
                }

                case "pluginmanager.check_permissions":
                {
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        string pluginName = args[0];
                        if (string.IsNullOrEmpty(pluginName))
                            return;
                        CUI.Root root = new CUI.Root("AdminMenu_Panel_TempContent");
                        new TextPopup($"{pluginName} Permissions", string.Join("\n", Instance.GetPermissions(pluginName) ?? new string[0])).AddUI(root, connectionData, connectionData.userData);
                        root.Render(connection);
                    }

                    break;
                }

                case "pluginmanager.favorite":
                    if (args.Length > 1)
                        return;
                    if (!PluginManagerContent.FAVORITE_BUTTON.UserHasPermission(connection))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        if (config.FavoritePlugins.Add(args[0]))
                        {
                            SaveConfig();
                            connectionData.currentContent.Render(connectionData);
                        }

                        if (config.Logs.PluginManager)
                            LogToDiscord(connection, "Favorite plugin", $"The administrator favorite **{args[0]}** plugin!");
                    }

                    break;
                case "pluginmanager.unfavorite":
                    if (args.Length > 1)
                        return;
                    if (!PluginManagerContent.UNFAVORITE_BUTTON.UserHasPermission(connection))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                    {
                        if (config.FavoritePlugins.Remove(args[0]))
                        {
                            SaveConfig();
                            connectionData.currentContent.Render(connectionData);
                        }

                        if (config.Logs.PluginManager)
                            LogToDiscord(connection, "Unfavorite plugin", $"The administrator unfavorite **{args[0]}** plugin!");
                    }

                    break;
                case "pluginmanager.load":
                    if (args.Length > 1)
                        return;
                    if (!PluginManagerContent.LOAD_BUTTON.UserHasPermission(connection))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        connectionData.userData["pluginmanager.lastusedplugin"] = args[0];
                    Oxide.Core.Interface.Oxide.LoadPlugin(args[0]);
                    if (config.Logs.PluginManager)
                        LogToDiscord(connection, "Load plugin", $"The administrator load **{args[0]}** plugin!");
                    break;
                case "pluginmanager.unload":
                    if (args.Length > 1)
                        return;
                    if (!PluginManagerContent.UNLOAD_BUTTON.UserHasPermission(connection))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        connectionData.userData["pluginmanager.lastusedplugin"] = args[0];
                    Oxide.Core.Interface.Oxide.UnloadPlugin(args[0]);
                    if (config.Logs.PluginManager)
                        LogToDiscord(connection, "Unload plugin", $"The administrator unload **{args[0]}** plugin!");
                    break;
                case "pluginmanager.reload":
                    if (args.Length > 1)
                        return;
                    if (!PluginManagerContent.RELOAD_BUTTON.UserHasPermission(connection))
                        return;
                    connectionData = ConnectionData.Get(connection);
                    if (connectionData != null)
                        connectionData.userData["pluginmanager.lastusedplugin"] = args[0];
                    Oxide.Core.Interface.Oxide.ReloadPlugin(args[0]);
                    if (config.Logs.PluginManager)
                        LogToDiscord(connection, "Reload plugin", $"The administrator reload **{args[0]}** plugin!");
                    break;
                case "pluginmanager.reload_all":
                    if (!PluginManagerContent.RELOADALL_BUTTON.UserHasPermission(connection))
                        return;
#if CARBON
                    Carbon.Community.Runtime.ReloadPlugins();
#else
                    Oxide.Core.Interface.Oxide.ReloadAllPlugins();
#endif
                    if (config.Logs.PluginManager)
                        LogToDiscord(connection, "Reload all plugins", $"The administrator reload **all** plugins!");
                    break;
                case "changename":
                {
                    if (!UserHasPermission(connection.userid.ToString(), "adminmenu.changename"))
                        return;
                    BasePlayer admin2 = connection.player as BasePlayer;
                    string name2 = null;
                    if (args.Length > 0)
                    {
                        switch (args[0])
                        {
                            case "random":
                                IEnumerable<IPlayer> offlinePlayers = Instance.covalence.Players.All.Where(player => !player.IsConnected);
                                if (offlinePlayers.Count() > 1)
                                {
                                    IPlayer player = offlinePlayers.ElementAtOrDefault(UnityEngine.Random.Range(0, offlinePlayers.Count() - 1));
                                    if (player != null)
                                        name2 = player.Name;
                                }
                                else
                                {
                                    name2 = RandomUsernames.Get(UnityEngine.Random.Range(0, 34647853));
                                }

                                break;
                            case "reset":
                            default:
                                name2 = ServerMgr.Instance.persistance.GetPlayerName(connection.userid);
                                break;
                        }
                    }

                    admin2.displayName = name2;
                    admin2.SendNetworkUpdateImmediate(false);
                    if (admin2.net.group == BaseNetworkable.LimboNetworkGroup)
                    {
                        return;
                    }

                    List<Connection> list = Pool.GetList<Connection>();
                    for (int i = 0; i < Net.sv.connections.Count; i++)
                    {
                        Connection c = Net.sv.connections[i];
                        if (c.connected && c.isAuthenticated && c.player is BasePlayer && c.player != admin2)
                        {
                            list.Add(connection);
                        }
                    }

                    admin2.OnNetworkSubscribersLeave(list);
                    Pool.FreeList<Connection>(ref list);
                    if (admin2.limitNetworking)
                    {
                        return;
                    }

                    admin2.syncPosition = false;
                    admin2._limitedNetworking = true;
                    Interface.Oxide.NextTick(delegate
                    {
                        admin2.syncPosition = true;
                        admin2._limitedNetworking = false;
                        admin2.UpdateNetworkGroup();
                        admin2.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                    });
                    break;
                }

                default:
                    break;
            }
        }

        void Init()
        {
            permission.RegisterPermission(PERMISSION_USE, this);
            permission.RegisterPermission(PERMISSION_FULLACCESS, this);
            permission.RegisterPermission(PERMISSION_CONVARS, this);
            permission.RegisterPermission(PERMISSION_PERMISSIONMANAGER, this);
            permission.RegisterPermission(PERMISSION_PLUGINMANAGER, this);
            permission.RegisterPermission(PERMISSION_GIVE, this);
            permission.RegisterPermission(PERMISSION_USERINFO_IP, this);
            permission.RegisterPermission(PERMISSION_USERINFO_STEAMINFO, this);
            switch (config.ButtonToHook)
            {
                case ButtonHook.X:
                    cmd.AddConsoleCommand("swapseats", this, "swapseats_hook");
                    break;
                case ButtonHook.F:
                    cmd.AddConsoleCommand("lighttoggle", this, "lighttoggle_hook");
                    break;
            }

            cmd.AddChatCommand(config.ChatCommand, this, "adminmenu_chatcmd");
            FormatMainMenu();
            FormatPanelList();
            Unsubscribe(nameof(OnPlayerLootEnd));
            Unsubscribe(nameof(CanMoveItem));
        }

        void OnServerInitialized()
        {
            ADMINMENU_IMAGECRC = FileStorage.server.Store(Convert.FromBase64String(ADMINMENU_IMAGEBASE64), FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID).ToString();
            lang.RegisterMessages(defaultLang, this);
            foreach (var pair in ConnectionData.all)
            {
                Connection connection = pair.Key;
                ConnectionData data = pair.Value;
                if (connection?.connected == true && data.IsDestroyed)
                    data.Init();
            }
        }

        void Loaded()
        {
            foreach (Type type in this.GetType().GetNestedTypes(BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic))
            {
                object[] attribute = type.GetCustomAttributes(typeof(HarmonyPatch), false);
                if (attribute.Length >= 1)
                {
                    PatchClassProcessor patchClassProcessor = this.HarmonyInstance.CreateClassProcessor(type);
                    patchClassProcessor.Patch();
                }
            }
        }

        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
                ConnectionData.Get(player)?.UI.DestroyAll();
            Button.all.Clear();
        }

        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            ConnectionData.Get(player)?.Dispose();
        }

        void OnPluginLoaded(Plugin plugin)
        {
            string fileName = Path.GetFileNameWithoutExtension(plugin.Filename);
            foreach (ConnectionData connectionData in ConnectionData.all.Values)
            {
                if (!connectionData.connection.connected)
                    continue;
                if (connectionData.currentContent is PluginManagerContent content)
                {
                    string[] array = (string[])connectionData.userData["pluginmanager.array"];
                    if (array.Contains(fileName))
                        content.UpdateForPlugin(connectionData, fileName);
                    else
                        connectionData.currentContent.Render(connectionData);
                }
            }
        }

        void OnPluginUnloaded(Plugin plugin)
        {
            OnPluginLoaded(plugin);
        }

        object OnMapMarkerAdd(BasePlayer player, ProtoBuf.MapNote note)
        {
            ConnectionData connectionData = ConnectionData.Get(player);
            if (connectionData == null)
                return null;
            Button teleportToMarkerButton = (panelList["quickmenu"].DefaultContent as QuickMenuContent).buttonGrid.Find(b => b.button.Args[0] == "toggle_teleport_to_marker")?.button;
            if (teleportToMarkerButton == null)
                return null;
            if (teleportToMarkerButton.GetState(connectionData) == Button.State.Toggled)
            {
                float y = TerrainMeta.HeightMap.GetHeight(note.worldPosition) + 2.5f;
                float highestPoint = TerrainMeta.HighestPoint.y + 250f;
                RaycastHit[] hits = Physics.RaycastAll(note.worldPosition.WithY(highestPoint), Vector3.down, ++highestPoint, Layers.Mask.World | Layers.Mask.Terrain | Layers.Mask.Default, QueryTriggerInteraction.Ignore);
                if (hits.Length > 0)
                {
                    GamePhysics.Sort(hits);
                    y = hits.Max(hit => hit.point.y);
                }

                if (player.IsFlying)
                    y = Mathf.Max(y, player.transform.position.y);
                player.Teleport(note.worldPosition.WithY(y));
                return false;
            }

            return null;
        }

        void OnPlayerLootEnd(PlayerLoot loot)
        {
            RemoveViewingBackpack(loot);
        }

        object CanMoveItem(Item item, PlayerInventory playerInventory, ItemContainerId targetContainer, int targetSlot, int amount, ItemMoveModifier itemMoveModifier)
        {
            if (!item.IsBackpack())
                return null;
            PlayerLoot loot = playerInventory.loot;
            if (!loot.IsLooting() || loot.entitySource != RelationshipManager.ServerInstance || !viewingBackpacks.TryGetValue(loot, out Item backpackItem) || backpackItem != item)
                return null;
            if (item.IsBackpack())
            {
                ItemContainer contents = item.contents;
                if (contents != null && !contents.IsEmpty())
                {
                    ViewContainer(loot.baseEntity, contents);
                    return false;
                }
            }

            return null;
        }

        void FormatMainMenu()
        {
            mainMenu = new MainMenu
            {
                NavButtons = new ButtonArray
                {
                    new HideButton("BACK", "back"),
                    null,
                    new Button("QUICK MENU", "openpanel", "quickmenu"),
                    new Button("PLAYER LIST", "openpanel", "playerlist"),
                    new Button("CONVARS", "openpanel", "convars")
                    {
                        Permission = "convars"
                    },
                    new Button("PERMISSION MANAGER", "openpanel", "permissionmanager")
                    {
                        Permission = "permissionmanager"
                    },
                    new Button("PLUGIN MANAGER", "openpanel", "pluginmanager")
                    {
                        Permission = "pluginmanager"
                    },
                    null,
                    new Button("GIVE SELF", "givemenu.open", "self")
                    {
                        Permission = "give"
                    },
                    new Button("SELECT LAST USER", "userinfo.open", "last"),
                    null,
                    new Button("CLOSE", "close"),
                }
            };
        }

        private void OpenUserInfoAtCrosshair(BasePlayer player)
        {
            if (player == null)
                return;
            ConnectionData connectionData = ConnectionData.Get(player.Connection);
            if (connectionData == null)
                return;
            ulong lastUserId = (ulong)connectionData.userData["userinfo.lastuserid"];
            Ray ray = player.eyes.HeadRay();
            RaycastHit raycastHit;
            if (Physics.Raycast(ray, out raycastHit, 10, 1218652417))
            {
                BasePlayer hitPlayer = null;
                BaseEntity hitEntity = raycastHit.GetEntity();
                if (hitEntity != null)
                {
                    hitPlayer = hitEntity as BasePlayer;
                    if (hitPlayer == null)
                    {
                        BaseVehicle hitVehicle = hitEntity as BaseVehicle;
                        if (hitVehicle != null)
                        {
                            hitPlayer = hitVehicle.GetMounted();
                        }
                    }
                }

                if (hitPlayer == null)
                {
                    List<BasePlayer> list = Facepunch.Pool.GetList<global::BasePlayer>();
                    Vis.Entities<BasePlayer>(raycastHit.point, 3, list, 131072, QueryTriggerInteraction.UseGlobal);
                    list = list.Where(basePlayer => basePlayer != null && !basePlayer.IsNpc && basePlayer.userID.IsSteamId() && basePlayer.userID != player.userID && basePlayer.userID != lastUserId).ToList();
                    hitPlayer = list.GetRandom();
                    Facepunch.Pool.FreeList<BasePlayer>(ref list);
                }

                if (hitPlayer == null || hitPlayer.IsNpc || !hitPlayer.userID.IsSteamId())
                    return;
                if (hitPlayer.userID == player.userID)
                    return;
                HandleCommand(player.Connection, "userinfo.open", hitPlayer.UserIDString);
            }
        }

        private void ToggleMenu(BasePlayer player)
        {
            Connection connection = player.Connection;
            if (connection == null)
                return;
            HandleCommand(connection, "");
        }

        private void RequestSteamInfo(ulong steamId, out SteamInfo steamInfo, Action<SteamInfo> callback, bool force_update = false)
        {
            if (!force_update && cachedSteamInfo.TryGetValue(steamId, out steamInfo))
                return;
            steamInfo = null;
            cachedSteamInfo.Remove(steamId);
            webrequest.Enqueue($"https://steamcommunity.com/profiles/{steamId}?xml=1", null, (code, response) =>
            {
                if (code != 200 || response == null)
                    return;
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(response);
                string location = xmlDoc.SelectSingleNode("//location")?.InnerText.Trim();
                string avatarLow = xmlDoc.SelectSingleNode("//avatarIcon")?.InnerText.Trim();
                string avatarMedium = xmlDoc.SelectSingleNode("//avatarMedium")?.InnerText.Trim();
                string avatarFull = xmlDoc.SelectSingleNode("//avatarFull")?.InnerText.Trim();
                string memberSince = xmlDoc.SelectSingleNode("//memberSince")?.InnerText.Trim();
                XmlNode mostPlayedGameNode = xmlDoc.SelectSingleNode("//mostPlayedGames/mostPlayedGame[contains(gameLink, 'https://steamcommunity.com/app/252490')]");
                string hoursOnRecord = mostPlayedGameNode?.SelectSingleNode("hoursOnRecord")?.InnerText.Trim().Replace(",", "");
                SteamInfo steamInfo = new SteamInfo
                {
                    Location = location,
                    Avatars = new string[3]
                    {
                        avatarLow,
                        avatarMedium,
                        avatarFull
                    },
                    RegistrationDate = memberSince,
                    RustHours = hoursOnRecord
                };
                cachedSteamInfo[steamId] = steamInfo;
                if (callback != null && steamInfo != null)
                    callback(steamInfo);
            }, this);
        }

        public long GetTimestamp(string timestampSTR, long def = 0L)
        {
            if (timestampSTR == null)
            {
                return def;
            }

            int num = 3600;
            if (timestampSTR.Length > 1 && char.IsLetter(timestampSTR[timestampSTR.Length - 1]))
            {
                char c = timestampSTR[timestampSTR.Length - 1];
                if (c <= 'd')
                {
                    if (c != 'M')
                    {
                        if (c != 'Y')
                        {
                            if (c == 'd')
                            {
                                num = 86400;
                            }
                        }
                        else
                        {
                            num = 31536000;
                        }
                    }
                    else
                    {
                        num = 2592000;
                    }
                }
                else if (c <= 'm')
                {
                    if (c != 'h')
                    {
                        if (c == 'm')
                        {
                            num = 60;
                        }
                    }
                    else
                    {
                        num = 3600;
                    }
                }
                else if (c != 's')
                {
                    if (c == 'w')
                    {
                        num = 604800;
                    }
                }
                else
                {
                    num = 1;
                }

                timestampSTR = timestampSTR.Substring(0, timestampSTR.Length - 1);
            }

            long num2;
            if (long.TryParse(timestampSTR, out num2))
            {
                if (num2 > 0L && num2 <= 315360000L)
                {
                    num2 = DateTimeOffset.UtcNow.ToUnixTimeSeconds() + num2 * (long)num;
                }

                return num2;
            }

            return def;
        }

        private bool CanUseAdminMenu(Connection connection)
        {
            return UserHasPermission(connection.userid.ToString(), PERMISSION_USE);
        }

        private bool CanUseAdminMenu(BasePlayer player)
        {
            return CanUseAdminMenu(player.Connection);
        }

        public bool UserHasPermission(string userId, string permission)
        {
            if (!permission.StartsWith("adminmenu."))
                permission = $"adminmenu.{permission}";
            return Instance.permission.UserHasPermission(userId, PERMISSION_FULLACCESS) || Instance.permission.UserHasPermission(userId, permission);
        }

        private void LogToDiscord(Connection author, string title, string content, string thumbnail = null, string image = null)
        {
            if (string.IsNullOrEmpty(config.Logs.WebhookURL))
                return;
            string jsonString = @$"{{
                  ""content"": null,
                  ""embeds"": [
                    {{
                      ""title"": ""{title}"",
                      ""description"": ""{content.Replace("\"", "\\\"").Replace("\n", "\\n")}"",
                      ""color"": 56266,
                      ""author"": {{
                        ""name"": ""{UserInfoContent.GetDisplayName(covalence.Players.FindPlayerById(author.userid.ToString()))}"",
                        ""url"": ""https://steamcommunity.com/profiles/{author.userid}""
                      }},
                      ""thumbnail"": {{
                        ""url"": ""{thumbnail}""
                      }},
                      ""image"": {{
                        ""url"": ""{image}""
                      }}
                    }}
                  ],
                  ""attachments"": []
                }}";
            webrequest.Enqueue(config.Logs.WebhookURL, jsonString, DiscordSendMessageCallback, this, RequestMethod.POST, HEADERS);
        }

        private void DiscordSendMessageCallback(int code, string message)
        {
            switch (code)
            {
                case 204:
                {
                    return;
                }

                case 401:
                    var objectJson = JsonConvert.DeserializeObject<Dictionary<string, object>>(message);
                    int messageCode;
                    if (objectJson["code"] != null && int.TryParse(objectJson["code"].ToString(), out messageCode))
                        if (messageCode == 50027)
                        {
                            PrintError("Invalid Webhook Token");
                            return;
                        }

                    break;
                case 404:
                    PrintError("Invalid Webhook (404: Not Found)");
                    return;
                case 405:
                    PrintError("Invalid Webhook (405: Method Not Allowed)");
                    return;
                case 429:
                    message = "You are being rate limited. To avoid this try to increase queue interval in your config file.";
                    break;
                case 500:
                    message = "There are some issues with Discord server (500 Internal Server Error)";
                    break;
                case 502:
                    message = "There are some issues with Discord server (502 Bad Gateway)";
                    break;
                default:
                    message = $"DiscordSendMessageCallback: code = {code} message = {message}";
                    break;
            }

            PrintError(message);
        }

        private BasePlayer GetSpectatingTarget(BasePlayer spectator)
        {
            if (!spectator.IsSpectating())
                return null;
            return spectator.parentEntity.Get(true) as BasePlayer;
        }

        private string[] GetPermissions(string pluginName)
        {
#if CARBON
            HashSet<string> permissions = permission.permset.FirstOrDefault(p => p.Key.Name == pluginName).Value;
#else
            HashSet<string> permissions = ((Dictionary<Core.Plugins.Plugin, HashSet<string>>)PERMISSIONS_DICTIONARY_FIELD.GetValue(permission)).FirstOrDefault(p => p.Key.Name == pluginName).Value;
#endif
            return permissions?.ToArray();
        }

        private string[] GetConsoleCommands(string pluginName)
        {
            List<string> commands = new List<string>();
#if CARBON
            foreach (API.Commands.Command command in Carbon.Community.Runtime.CommandManager.ClientConsole)
            {
                Carbon.Base.BaseHookable plugin = (Carbon.Base.BaseHookable)command.Reference;
                if (plugin == null)
                   continue;
                if (plugin.Name == pluginName)
                    commands.Add(command.Name);
            }
#else
            var dictionary = (IDictionary)CONSOLECOMMANDS_DICTIONARY_FIELD.GetValue(cmd);
            foreach (DictionaryEntry entry in dictionary)
            {
                string command = (string)entry.Key;
                object consoleCommand = entry.Value;
                object callback = CONSOLECOMMAND_CALLBACK_FIELD.GetValue(consoleCommand);
                Plugin plugin = (Plugin)PLUGINCALLBACK_PLUGIN_FIELD.GetValue(callback);
                if (plugin.Name == pluginName)
                    commands.Add(command);
            }

#endif
            return commands.ToArray();
        }

        private string[] GetChatCommands(string pluginName)
        {
            List<string> commands = new List<string>();
#if CARBON
            foreach (API.Commands.Command command in Carbon.Community.Runtime.CommandManager.Chat)
            {
                Carbon.Base.BaseHookable plugin = (Carbon.Base.BaseHookable)command.Reference;
                if (plugin == null)
                   continue;
                if (plugin.Name == pluginName)
                    commands.Add(command.Name);
            }
#else
            var dictionary = (IDictionary)CHATCOMMANDS_DICTIONARY_FIELD.GetValue(cmd);
            foreach (DictionaryEntry entry in dictionary)
            {
                string command = (string)entry.Key;
                object chatCommand = entry.Value;
                Plugin plugin = (Plugin)CHATCOMMAND_PLUGIN_FIELD.GetValue(chatCommand);
                if (plugin.Name == pluginName)
                    commands.Add(command);
            }

#endif
            return commands.ToArray();
        }

        void AddViewingBackpack(PlayerLoot loot, Item item)
        {
            viewingBackpacks.Add(loot, item);
            Subscribe(nameof(OnPlayerLootEnd));
            Subscribe(nameof(CanMoveItem));
        }

        void RemoveViewingBackpack(PlayerLoot loot)
        {
            viewingBackpacks.Remove(loot);
            if (viewingBackpacks.Count == 0)
            {
                Unsubscribe(nameof(OnPlayerLootEnd));
                Unsubscribe(nameof(CanMoveItem));
            }
        }

        void ViewContainer(BasePlayer player, ItemContainer container)
        {
            PlayerLoot playerLoot = player.inventory.loot;
            bool IsLooting = playerLoot.IsLooting();
            playerLoot.containers.Clear();
            playerLoot.entitySource = null;
            playerLoot.itemSource = null;
            if (IsLooting)
                playerLoot.SendImmediate();
            NextFrame(() =>
            {
                playerLoot.PositionChecks = false;
                playerLoot.entitySource = RelationshipManager.ServerInstance;
                playerLoot.AddContainer(container);
                playerLoot.SendImmediate();
                player.ClientRPC<string>(RpcTarget.Player("RPC_OpenLootPanel", player), "generic_resizable");
            });
        }

        void UpdateOneActiveImageElement(Connection connection, string baseId, int activeButtonIndex, int buttonCount, string activeColor, string disableColor) => UpdateOneActiveElement(connection, baseId, activeButtonIndex, buttonCount, activeColor, disableColor, true);
        void UpdateOneActiveTextElement(Connection connection, string baseId, int activeButtonIndex, int buttonCount, string activeColor, string disableColor) => UpdateOneActiveElement(connection, baseId, activeButtonIndex, buttonCount, activeColor, disableColor, false);
        void UpdateOneActiveElement(Connection connection, string baseId, int activeButtonIndex, int buttonCount, string activeColor, string disableColor, bool isImage)
        {
            CUI.Root root = new CUI.Root();
            for (int i = 0; i < buttonCount; i++)
            {
                CUI.Element element = new CUI.Element
                {
                    Name = $"{baseId}{i}"};
                if (isImage)
                {
                    element.Components.Add(new CuiImageComponent { Color = (i == activeButtonIndex ? activeColor : disableColor) });
                }
                else
                {
                    element.Components.Add(new CuiTextComponent { Color = (i == activeButtonIndex ? activeColor : disableColor) });
                }

                root.Add(element);
            }

            root.Update(connection);
        }

        void FormatPanelList()
        {
            Button.all.Clear();
            ButtonArray<CategoryButton> givemenuCategories = new ButtonArray<CategoryButton>()
            {
                new CategoryButton("ALL", "showcontent", "all")
            };
            string[] categoryNames = Enum.GetNames(typeof(ItemCategory));
            for (int i = 0; i < categoryNames.Length; i++)
            {
                string categoryName = categoryNames[i];
                if (categoryName == "All" || categoryName == "Search" || categoryName == "Favourite" || categoryName == "Common")
                    continue;
                givemenuCategories.Add(new CategoryButton(categoryName.ToUpper(), "givemenu.filter", i.ToString()));
            }

            GiveMenuContent giveMenuContent = new GiveMenuContent();
            QuickMenuContent quickMenuContent = new QuickMenuContent()
            {
                buttonGrid = new ButtonGrid<Button>()
                {
                    new ButtonGrid<Button>.Item(0, 0, new Button("Teleport to 0 0 0", "quickmenu.action", "teleportto_000") { Permission = "quickmenu.teleportto000" }),
                    new ButtonGrid<Button>.Item(0, 1, new Button("Teleport to\nDeathpoint", "quickmenu.action", "teleportto_deathpoint") { Permission = "quickmenu.teleporttodeath" }),
                    new ButtonGrid<Button>.Item(0, 2, new Button("Teleport to\nSpawn point", "quickmenu.action", "teleportto_randomspawnpoint") { Permission = "quickmenu.teleporttospawnpoint" }),
                    new ButtonGrid<Button>.Item(0, 3, new ToggleButton("Teleport to Marker", "quickmenu.action", "toggle_teleport_to_marker") { Permission = "quickmenu.teleport_to_marker" }),
                    new ButtonGrid<Button>.Item(1, 0, new Button("Kill Self", "quickmenu.action", "killself")),
                    new ButtonGrid<Button>.Item(1, 1, new Button("Heal Self", "quickmenu.action", "healself") { Permission = "quickmenu.healself" }),
                    new ButtonGrid<Button>.Item(1, 2, new Button("Time to 12", "quickmenu.action", "settime", "12") { Permission = "quickmenu.settime" }),
                    //new ButtonGrid<Button>.Item(1, 3, new Button("Random Nickname\n(Beta)", "changename", "random") { Permission = "changename" }),
                    new ButtonGrid<Button>.Item(2, 0, new Button("Giveaway\nto online players", "quickmenu.action", "giveaway_online") { Permission = "quickmenu.giveaway" }),
                    new ButtonGrid<Button>.Item(2, 1, new Button("Giveaway\nto everyone", "quickmenu.action", "giveaway_everyone") { Permission = "quickmenu.giveaway" }),
                    new ButtonGrid<Button>.Item(2, 2, new Button("Time to 0", "quickmenu.action", "settime", "0") { Permission = "quickmenu.settime" }),
                    //new ButtonGrid<Button>.Item(2, 3, new Button("Reset Nickname", "changename", "reset") { Permission = "changename" }),
                    new ButtonGrid<Button>.Item(3, 0, new Button("Call Heli", "quickmenu.action", "helicall") { Permission = "quickmenu.helicall" }),
                    new ButtonGrid<Button>.Item(3, 1, new Button("Spawn Bradley", "quickmenu.action", "spawnbradley") { Permission = "quickmenu.spawnbradley" }),
                    new ButtonGrid<Button>.Item(3, 2, new Button("Spawn Cargo", "quickmenu.action", "spawncargo") { Permission = "quickmenu.spawncargo" }),
                }
            };
            foreach (QMCustomButton cb in config.CustomQuickButtons)
            {
                int row = cb.Position[0];
                int index = cb.Position[1];
                ButtonGrid<Button>.Item existButton = quickMenuContent.buttonGrid.Find(t => t.row == row && t.column == index);
                if (existButton != null)
                {
                    foreach (var item in quickMenuContent.buttonGrid)
                    {
                        if (item.row == row && item.column >= index)
                            item.column++;
                    }
                }

                quickMenuContent.buttonGrid.Add(new ButtonGrid<Button>.Item(row, index, cb.Button));
            }

            UserInfoContent userInfoContent = new UserInfoContent()
            {
                buttonGrid = new ButtonGrid<Button>()
                {
                    new ButtonGrid<Button>.Item(0, 0, new Button("Teleport Self To", "userinfo.action", "teleportselfto") { Permission = "userinfo.teleportselfto" }),
                    new ButtonGrid<Button>.Item(0, 1, new Button("Teleport To Self", "userinfo.action", "teleporttoself") { Permission = "userinfo.teleporttoself" }),
                    new ButtonGrid<Button>.Item(0, 2, new Button("Teleport To Auth", "userinfo.action", "teleporttoauth") { Permission = "userinfo.teleporttoauth" }),
                    new ButtonGrid<Button>.Item(1, 0, new Button("Heal", "userinfo.action", "heal") { Permission = "userinfo.fullheal" }),
                    new ButtonGrid<Button>.Item(1, 1, new Button("Heal 50%", "userinfo.action", "heal50") { Permission = "userinfo.halfheal" }),
                    new ButtonGrid<Button>.Item(1, 2, new Button("Teleport to\nDeathpoint", "userinfo.action", "teleporttodeathpoint") { Permission = "userinfo.teleporttodeath" }),
                    new ButtonGrid<Button>.Item(2, 0, new Button("View Inventory", "userinfo.action", "viewinv") { Permission = "userinfo.viewinv" }),
                    new ButtonGrid<Button>.Item(2, 1, new Button("Unlock Blueprints", "userinfo.action", "unlockblueprints") { Permission = "userinfo.unlockblueprints" }),
                    new ButtonGrid<Button>.Item(2, 2, new Button("Spectate", "userinfo.action", "spectate") { Permission = "userinfo.spectate" }),
                    new ButtonGrid<Button>.Item(3, 0, new Button("Mute", "userinfo.action", "mute") { Permission = "userinfo.mute" }),
                    new ButtonGrid<Button>.Item(3, 1, new Button("Unmute", "userinfo.action", "unmute") { Permission = "userinfo.unmute" }),
                    new ButtonGrid<Button>.Item(3, 2, new ConditionToggleButton("Toggle Creative", "userinfo.action", "creative") { Permission = "userinfo.creative", Condition = (ConnectionData connectionData) => BasePlayer.FindAwakeOrSleeping(connectionData.userData["userinfo.userid"].ToString())?.IsInCreativeMode ?? false }),
                    new ButtonGrid<Button>.Item(5, 0, new ConditionToggleButton("Cuff", "userinfo.action", "cuff") { Permission = "userinfo.cuff", Condition = (ConnectionData connectionData) => BasePlayer.FindAwakeOrSleeping(connectionData.userData["userinfo.userid"].ToString())?.IsRestrained ?? false }),
                    new ButtonGrid<Button>.Item(5, 1, new Button("<color=olive>Strip Inventory</color>", "userinfo.action", "stripinventory") { Permission = "userinfo.stripinventory" }),
                    new ButtonGrid<Button>.Item(5, 2, new Button("<color=olive>Revoke Blueprints</color>", "userinfo.action", "revokeblueprints") { Permission = "userinfo.revokeblueprints" }),
                    new ButtonGrid<Button>.Item(6, 0, new Button("Kill", "userinfo.action", "kill") { Permission = "userinfo.kill" }),
                    new ButtonGrid<Button>.Item(6, 1, new Button("<color=red>Kick</color>", "userinfo.action", "kick", "showpopup") { Permission = "userinfo.kick" }),
                    new ButtonGrid<Button>.Item(6, 2, new Button("<color=red>Ban</color>", "userinfo.action", "ban", "showpopup") { Permission = "userinfo.ban" }),
                }
            };
            foreach (UserInfoCustomButton cb in config.UserInfoCustomButtons)
            {
                int row = cb.Position[0];
                int index = cb.Position[1];
                ButtonGrid<Button>.Item existButton = userInfoContent.buttonGrid.Find(t => t.row == row && t.column == index);
                if (existButton != null)
                {
                    foreach (var item in userInfoContent.buttonGrid)
                    {
                        if (item.row == row && item.column >= index)
                            item.column++;
                    }
                }

                userInfoContent.buttonGrid.Add(new ButtonGrid<Button>.Item(row, index, cb.Button));
            }

            GroupInfoContent groupInfoContent = new GroupInfoContent
            {
                buttons = new ButtonArray[1]
                {
                    new ButtonArray
                    {
                        new Button("<color=#dd0000>Remove Group</color>", "groupinfo.action", "remove")
                        {
                            Permission = "groupinfo.removegroup"
                        },
                        new Button("<color=olive>Clone Group</color>", "groupinfo[popup:clonegroup]", "show")
                        {
                            Permission = "groupinfo.clonegroup"
                        },
                    }
                }
            };
            panelList = new Dictionary<string, Panel>()
            {
                {
                    "empty",
                    new Panel
                    {
                        Sidebar = null,
                        Content = null
                    }
                },
                {
                    "quickmenu",
                    new Panel
                    {
                        Sidebar = null,
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "default",
                                quickMenuContent
                            }
                        }
                    }
                },
                {
                    "permissionmanager",
                    new Panel
                    {
                        Sidebar = null,
                        Content = new Dictionary<string, Content>
                        {
                            {
                                "default",
                                new NewPermissionManagerContent()
                            },
                            {
                                "groups",
                                new GroupListContent()
                            },
                            {
                                "players",
                                new PlayerListContent()
                            },
                        }
                    //Sidebar = new Sidebar
                    //{
                    //    CategoryButtons = new ButtonArray<CategoryButton>
                    //    {
                    //        new CategoryButton("GROUPS", "showcontent", "groups"),
                    //        new CategoryButton("USERS", "showcontent", "users"),
                    //    }
                    //},
                    //Content = new Dictionary<string, Content>
                    //{
                    //    {
                    //        "groups", new GroupListContent()
                    //    },
                    //    {
                    //        "users", new PlayerListContent()
                    //    }
                    //}
                    }
                },
                {
                    "pluginmanager",
                    new Panel
                    {
                        Sidebar = null,
                        Content = new Dictionary<string, Content>
                        {
                            {
                                "default",
                                new PluginManagerContent()
                            }
                        }
                    }
                },
                {
                    "permissions",
                    new PermissionPanel
                    {
                        Content = new Dictionary<string, Content>
                        {
                            {
                                "default",
                                new CenteredTextContent()
                                {
                                    text = "Please select the plugin from left side",
                                }
                            }
                        }
                    }
                },
                {
                    "userinfo",
                    new Panel
                    {
                        Sidebar = new Sidebar()
                        {
                            CategoryButtons = new ButtonArray<CategoryButton>
                            {
                                new CategoryButton("INFO", "showcontent", "info"),
                                new CategoryButton("GIVE", "userinfo.givemenu.open")
                                {
                                    Permission = "give"
                                },
                                new CategoryButton("PERMISSIONS", "userinfo.permissions")
                                {
                                    Permission = "permissionmanager"
                                }
                            }
                        },
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "info",
                                userInfoContent
                            },
                            {
                                "give",
                                giveMenuContent
                            }
                        }
                    }
                },
                {
                    "groupinfo",
                    new Panel
                    {
                        Sidebar = new Sidebar()
                        {
                            CategoryButtons = new ButtonArray<CategoryButton>
                            {
                                new CategoryButton("INFO", "showcontent", "info"),
                                new CategoryButton("USERS", "groupinfo.users.open"),
                                new CategoryButton("PERMISSIONS", "groupinfo.permissions")
                                {
                                    Permission = "permissionmanager"
                                }
                            }
                        },
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "info",
                                groupInfoContent
                            },
                            {
                                "users",
                                new PlayerListContent()
                            }
                        }
                    }
                },
                {
                    "playerlist",
                    new Panel
                    {
                        Sidebar = new Sidebar
                        {
                            CategoryButtons = new ButtonArray<CategoryButton>
                            {
                                new CategoryButton("ONLINE", "playerlist.filter", "online"),
                                new CategoryButton("OFFLINE", "playerlist.filter", "offline"),
                                new CategoryButton("BANNED", "playerlist.filter", "banned"),
                                new CategoryButton("ADMINS", "playerlist.filter", "admins"),
                                new CategoryButton("MODERS", "playerlist.filter", "moders"),
                                new CategoryButton("ALL", "playerlist.filter", "all"),
                            },
                        },
                        Content = new Dictionary<string, Content>
                        {
                            {
                                "default",
                                new PlayerListContent()
                            }
                        }
                    }
                },
                {
                    "givemenu",
                    new Panel
                    {
                        Sidebar = new Sidebar
                        {
                            CategoryButtons = givemenuCategories
                        },
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "all",
                                giveMenuContent
                            }
                        }
                    }
                },
                {
                    "convars",
                    new Panel
                    {
                        Sidebar = null,
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "default",
                                new ConvarsContent()
                            }
                        }
                    }
                },
                {
                    "info",
                    new Panel
                    {
                        Sidebar = null,
                        Content = new Dictionary<string, Content>()
                        {
                            {
                                "custom_buttons",
                                new TextContent()
                                {
                                    text = "<b><size=16>CUSTOM BUTTONS</size></b>\n" + "Custom buttons are buttons that when pressed will execute commands on behalf of the administrator, commands can be several, below will be the details.\n" + "At the moment, custom buttons can be created in two places: in the quick menu and in the menu when selecting a player. These places are separated in the config.\n" + "\n<b><size=14>Button Fields:</size></b>\n" + "   'Label' - Text that will be on the button, for each such inscription creates a field in the lang file, accordingly you can translate this text into several languages.\n" + "   'Commands' - Array of commands that will be executed on behalf of the administrator. Chat commands require a special entry, see examples.\n" + "   'Permission' - permission to display and use the button. You need to write the permission that will be after   '<b>adminmenu.</b>'. Example: if you enter the permission 'test' the permission will be <b>adminmenu.test</b>\n" + "   'Position' - The location for the button, the first number is responsible for the row number, the second for the position within the row, starts from 0.\nThere are limits of locations, if you have gone beyond the limit - the button will not be displayed.\n" + "   Common Tags:\n" + "        <b>​​​​​​​​​​​​​​{adminUID}</b> - administrator's id.\n" + "        <b>​​​​​​​​​​​​​​{position}</b> - administrator coordinates (underfoot)\n" + "        <b>{view_position}</b> - the position where the administrator is looking (can be used for spawning or something similar)\n" + "        <b>{view_direction_forward}</b> - forward view direction of the administrator\n" + "        <b>{view_direction_backward}</b> - the direction the administrator is looking backwards\n" + "        <b>{view_direction_left}</b> - direction of the administrator’s view to the left\n" + "        <b>{view_direction_right}</b> - administrator’s view direction to the right\n" + "   Tags for target only:\n" + "        <b>{steamid}, {steamID}, {userID}, {STEAMID}, {USERID}</b> - mean the same thing, namely the id of the selected player.\n" + "        <b>{target_position}</b> - target coordinates (underfoot)\n" + "\n<b><size=14>Example of commands:</size></b>\n" + "chat.say \"/{chat command}\"\n" + "vanish\n" + "ban {steamID}\n" + "teleport {steamID} {adminUID}\n",
                                    font = CUI.Font.RobotoMonoRegular,
                                    fontSize = 12,
                                    allowCopy = true,
                                }
                            }
                        }
                    }
                }
            };
        }

        private void swapseats_hook(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null)
                return;
            Connection connection = player.Connection;
            if (connection != null && CanUseAdminMenu(connection) && !player.isMounted)
                ToggleMenu(player);
            else
                ConVar.vehicle.swapseats(arg);
        }

        private void lighttoggle_hook(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null)
                return;
            Connection connection = player.Connection;
            if (connection != null && CanUseAdminMenu(connection) && !player.IsDucked())
                ToggleMenu(player);
            else
                ConVar.Inventory.lighttoggle_sv(arg);
        }

        public interface IUIModule
        {
            public abstract CUI.Element AddUI(CUI.Element parent, ConnectionData connectionData, Dictionary<string, object> userData);
        }
    }
}

// --- End of file: AdminMenu-1.1.11.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/HomeProtection.cs ---
// --- Original Local Path: HomeProtection.cs ---

namespace Oxide.Plugins
{
    [Info("HomeProtection", "Wulf/lukespragg", 0.1, ResourceId = 1391)]
    [Description("Protects you and your home from intruders.")]

    class HomeProtection : RustPlugin
    {
        object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if ((entity is BuildingBlock) && (info.Initiator is BasePlayer))
                if (!info.Initiator.ToPlayer().CanBuild())
                    return false;

            if ((entity is BasePlayer))
                if (entity.ToPlayer().CanBuild())
                    return false;

            return null;
        }
    }
}


// --- End of file: HomeProtection.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/WeatherController.cs ---
// --- Original Local Path: WeatherController.cs ---

/******************************************************************************
* Version 1.3 Changelog
*** Added /weather auto command to turn weather back to automatic.
******************************************************************************/

using UnityEngine;
using System;

namespace Oxide.Plugins
{
    [Info("Weather Controller", "Waizujin", 1.4)]
    [Description("Allows you to control the weather.")]
    public class WeatherController : RustPlugin
    {
        private void Loaded()
        {
            permission.RegisterPermission("weathercontroller.canUseWeather", this);
        }

        [ChatCommand("weather")]
        private void WeatherCommand(BasePlayer player, string command, string[] args)
        {
            if (!hasPermission(player, "weathercontroller.canUseWeather"))
            {
                SendReply(player, "You do not have access to this command.");

                return;
            }

            if (args.Length == 0)
            {
                SendReply(player, "Syntax Error: Please use /weather [weather_type] [on/off] [Optional: weather duration (in seconds)]");
                SendReply(player, "Or use /weather off to turn all weather off.");
                SendReply(player, "(Weather Types: clouds, fog, wind, rain, mild, average, heavy, max)");

                return;
            }

            if (args[0] == "clouds")
            {
                if (args[1] == "on")
                {
                    weather(player, "clouds", 1);
                }
                else if (args[1] == "off")
                {
                    weather(player, "clouds", 0);
                }
            }
            else if (args[0] == "fog")
            {
                if (args[1] == "on")
                {
                    weather(player, "fog", 1);
                }
                else if (args[1] == "off")
                {
                    weather(player, "fog", 0);
                }
            }
            else if (args[0] == "rain")
            {
                if (args[1] == "on")
                {
                    weather(player, "rain", 1);
                }
                else if (args[1] == "off")
                {
                    weather(player, "rain", 0);
                }
            }
            else if (args[0] == "wind")
            {
                if (args[1] == "on")
                {
                    weather(player, "wind", 1);
                }
                else if (args[1] == "off")
                {
                    weather(player, "wind", 0);
                }
            }
            else if (args[0] == "mild")
            {
                if (args[1] == "on")
                {
                    mild(player, 1);
                }
                else if (args[1] == "off")
                {
                    mild(player, 0);
                }
            }
            else if (args[0] == "average")
            {
                if (args[1] == "on")
                {
                    average(player, 1);
                }
                else if (args[1] == "off")
                {
                    average(player, 0);
                }
            }
            else if (args[0] == "heavy")
            {
                if (args[1] == "on")
                {
                    heavy(player, 1);
                }
                else if (args[1] == "off")
                {
                    heavy(player, 0);
                }
            }
            else if (args[0] == "max")
            {
                if (args[1] == "on")
                {
                    max(player, 1);
                }
                else if (args[1] == "off")
                {
                    max(player, 0);
                }
            }
			else if (args[0] == "off")
			{
				weather(player, "all", 0, true);
			}
			else if (args[0] == "auto")
			{
				weather(player, "auto", -1, true);
			}
			else
            {
                SendReply(player, "Syntax Error: Please use /weather [weather_type] [on/off] [Optional: weather duration (in seconds)]");
                SendReply(player, "Or use /weather off to turn all weather off.");
                SendReply(player, "(Weather Types: clouds, fog, wind, rain, mild, average, heavy, max)");

                return;
            }

            if (args.Length == 3)
            {
                long durationSeconds;

                if (!Int64.TryParse(args[2], out durationSeconds))
                {
                    SendReply(player, "Syntax Error: Please use /weather [weather_type] [on/off] [Optional: weather duration (in seconds)]");
                    SendReply(player, "Or use /weather off to turn all weather off.");
                    SendReply(player, "(Weather Types: clouds, fog, wind, rain, mild, average, heavy, max)");
                }

                timer.Once(durationSeconds, () => weather(player, args[0], 0));
            }
        }

        public void weather(BasePlayer player, string type, int status, bool quiet = false)
        {
            if (status == 0)
            {
                if (type == "clouds") { ConsoleSystem.Run.Server.Normal("weather.clouds " + status); if (!quiet) { SendReply(player, "Clouds have been disabled!"); } }
                if (type == "rain") { ConsoleSystem.Run.Server.Normal("weather.rain " + status); if (!quiet) { SendReply(player, "Rain has been disabled!"); } }
                if (type == "wind") { ConsoleSystem.Run.Server.Normal("weather.wind " + status); if (!quiet) { SendReply(player, "Wind has been disabled!"); } }
                if (type == "fog") { ConsoleSystem.Run.Server.Normal("weather.fog " + status); if (!quiet) { SendReply(player, "Fog has been disabled!"); } }
                if (type == "mild") { mild(player, status); }
                if (type == "average") { average(player, status); }
                if (type == "heavy") { heavy(player, status); }
                if (type == "max") { max(player, status); }
				if (type == "all")
				{
					weather(player, "clouds", status, quiet);
					weather(player, "rain", status, quiet);
					weather(player, "wind", status, quiet);
					weather(player, "fog", status, quiet);

					SendReply(player, "The weather returns to normal.");
				}
			}
            else if (status == -1 && type == "auto")
			{
				weather(player, "clouds", status, quiet);
				weather(player, "rain", status, quiet);
				weather(player, "wind", status, quiet);
				weather(player, "fog", status, quiet);

				SendReply(player, "The weather has been set to automatic.");
			}
			else
			{
                if (type == "clouds") { ConsoleSystem.Run.Server.Normal("weather.clouds " + status); if (!quiet) { SendReply(player, "Clouds have been enabled!"); } }
                if (type == "rain") { ConsoleSystem.Run.Server.Normal("weather.rain " + status); if (!quiet) { SendReply(player, "Rain has been enabled!"); } }
                if (type == "wind") { ConsoleSystem.Run.Server.Normal("weather.wind " + status); if (!quiet) { SendReply(player, "Wind has been enabled!"); } }
                if (type == "fog") { ConsoleSystem.Run.Server.Normal("weather.fog " + status); if (!quiet) { SendReply(player, "Fog has been enabled!"); } }
                if (type == "mild") { mild(player, status); }
                if (type == "average") { average(player, status); }
                if (type == "heavy") { heavy(player, status); }
                if (type == "max") { max(player, status); }
            }
        }

        public void mild(BasePlayer player, int status)
        {
            if (status == 1)
            {
                weather(player, "rain", 1, true);
                SendReply(player, "A mild storm has begun.");
            }
            else if (status == 0)
            {
                weather(player, "rain", 0, true);
                SendReply(player, "A mild storm has ended.");
            }
        }

        public void average(BasePlayer player, int status)
        {
            if (status == 1)
            {
                weather(player, "rain", 1, true);
                weather(player, "wind", 1, true);
                SendReply(player, "A storm has begun.");
            }
            else if (status == 0)
            {
                weather(player, "rain", 0, true);
                weather(player, "wind", 0, true);
                SendReply(player, "The storm has ended.");
            }
        }

        public void heavy(BasePlayer player, int status)
        {
            if (status == 1)
            {
                weather(player, "clouds", 1, true);
                weather(player, "rain", 1, true);
                weather(player, "wind", 1, true);
                SendReply(player, "A heavy storm has begun.");
            }
            else if (status == 0)
            {
                weather(player, "clouds", 0, true);
                weather(player, "rain", 0, true);
                weather(player, "wind", 0, true);
                SendReply(player, "The heavy storm has ended.");
            }
        }

        public void max(BasePlayer player, int status)
        {
            if (status == 1)
            {
                weather(player, "clouds", 1, true);
                weather(player, "rain", 1, true);
                weather(player, "wind", 1, true);
                weather(player, "fog", 1, true);
                SendReply(player, "The weather becomes vicious and visibility decreases.");
            }
            else if (status == 0)
            {
                weather(player, "clouds", 0, true);
                weather(player, "rain", 0, true);
                weather(player, "wind", 0, true);
                weather(player, "fog", 0, true);
                SendReply(player, "The vicious storm comes to an end.");
            }
        }

        bool hasPermission(BasePlayer player, string perm)
        {
            if (player.net.connection.authLevel > 1)
            {
                return true;
            }

            return permission.UserHasPermission(player.userID.ToString(), perm);
        }
    }
}


// --- End of file: WeatherController.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SlidingDoors.cs ---
// --- Original Local Path: SlidingDoors.cs ---

﻿using Network;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("SlidingDoors", "k1lly0u", "2.0.2")]
    class SlidingDoors : RustPlugin
    {
        #region Fields
        private StoredData storedData;
        private DynamicConfigFile data;

        private static SlidingDoors Instance { get; set; }

        private bool wipeData = false;

        private const string PERMISSION_WOOD = "slidingdoors.wood";
        private const string PERMISSION_METAL = "slidingdoors.metal";
        private const string PERMISSION_ARMOUR = "slidingdoors.armour";
        private const string PERMISSION_USE = "slidingdoors.use";
        private const string PERMISSION_ALL = "slidingdoors.all";
        private const string PERMISSION_AUTO_DOOR = "slidingdoors.autodoor";
        private const string PERMISSION_AUTO_DEPLOY = "slidingdoors.autodeploy";

        private const string DOOR_WOOD_SPN = "door.hinged.wood";
        private const string DOOR_METAL_SPN = "door.hinged.metal";
        private const string DOOR_ARMOUR_SPN = "door.hinged.toptier";

        private const string EFFECT_WOOD = "assets/prefabs/building/door.hinged/effects/door-wood-open-end.prefab";
        private const string EFFECT_METAL = "assets/prefabs/building/door.hinged/effects/door-metal-open-end.prefab";

        private FieldInfo OwnerItemUID = typeof(Deployer).GetField("ownerItemUID", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        #endregion

        #region Oxide Hooks
        private void Loaded()
        {
            data = Interface.Oxide.DataFileSystem.GetFile("slidingdoors_data");

            permission.RegisterPermission(PERMISSION_ALL, this);
            permission.RegisterPermission(PERMISSION_ARMOUR, this);
            permission.RegisterPermission(PERMISSION_AUTO_DEPLOY, this);
            permission.RegisterPermission(PERMISSION_AUTO_DOOR, this);
            permission.RegisterPermission(PERMISSION_METAL, this);
            permission.RegisterPermission(PERMISSION_USE, this);
            permission.RegisterPermission(PERMISSION_WOOD, this);

            lang.RegisterMessages(Messages, this);

            if (!configData.Door.ApplyToAll)
                Unsubscribe(nameof(OnEntitySpawned));

            Instance = this;
        }

        private void OnNewSave() => wipeData = true;

        private void OnServerSave()
        {
            if (!Interface.Oxide.IsShuttingDown)
            {
                for (int i = SlidingDoor._allDoors.Count - 1; i >= 0; i--)                
                    SlidingDoor._allDoors[i]?.CloseForGameSave();

                SaveRestore.Instance.StartCoroutine(RestoreOnSaveFinished());
            }
        }        
        
        private void OnServerInitialized()
        {
            LoadData();

            if (wipeData)
            {
                storedData.ids.Clear();
                SaveData();
            }

            ServerMgr.Instance.StartCoroutine(LoadSlidingDoors());
        }

        private void OnDoorOpened(Door door, BasePlayer player)
        {
            SlidingDoor slidingDoor = door.GetComponent<SlidingDoor>();

            if (slidingDoor == null)
                return;

            door.SetOpen(false);

            slidingDoor.OnDoorToggled();                        
        }

        private void OnItemDeployed(Deployer deployer, BaseEntity entity)
        {
            SlidingDoor slidingDoor = entity.GetComponent<SlidingDoor>();

            if (slidingDoor == null)
                return;

            if (slidingDoor.IsOpen)
            {
                Deployable deployable = deployer.GetDeployable();
                if (deployable != null)
                {
                    entity.GetSlot(deployable.slot)?.Kill();

                    BasePlayer ownerPlayer = deployer.GetOwnerPlayer();
                    if (ownerPlayer == null || ownerPlayer.inventory == null)
                        return;

                    ownerPlayer.ChatMessage(msg("Error.DoorOpen", ownerPlayer.userID));

                    int itemId = GetOwnerItemID(deployer);
                    if (itemId != 0)
                        ownerPlayer.GiveItem(ItemManager.CreateByItemID(itemId, 1, 0));
                }                    
            }
        }

        private int GetOwnerItemID(Deployer deployer)
        {
            BasePlayer ownerPlayer = deployer.GetOwnerPlayer();
            if (ownerPlayer == null || ownerPlayer.inventory == null)            
                return 0;
            
            return ownerPlayer.inventory.FindItemUID((uint)OwnerItemUID.GetValue(deployer))?.info?.itemid ?? 0;
        }

        private void OnEntitySpawned(BaseNetworkable baseNetworkable)
        {            
            Door door = baseNetworkable as Door;
            if (door == null || !door.IsValid() || door.OwnerID == 0UL)
                return;

            if (!HasPermission(door.OwnerID, PERMISSION_AUTO_DEPLOY))
                return;

            SlidingDoor.DoorType doorType = ToDoorType(door.ShortPrefabName);
            if (doorType == SlidingDoor.DoorType.Invalid)
                return;

            door.gameObject.AddComponent<SlidingDoor>();
            storedData.ids.Add(door.net.ID);
        }

        private void OnEntityKill(BaseNetworkable baseNetworkable)
        {
            if (baseNetworkable == null || baseNetworkable.net == null)
                return;

            if (storedData?.ids?.Contains(baseNetworkable.net.ID) ?? false)
            {
                storedData.ids.Remove(baseNetworkable.net.ID);
                SaveData();
            }
        }

        private void Unload()
        {
            for (int i = SlidingDoor._allDoors.Count - 1; i >= 0; i--)
            {
                SlidingDoor slidingDoor = SlidingDoor._allDoors[i];
                slidingDoor?.ResetDoorState();
                UnityEngine.Object.Destroy(slidingDoor);
            }

            configData = null;
            Instance = null;
        }
        #endregion

        #region Functions
        private IEnumerator LoadSlidingDoors()
        {
            if (storedData.ids.Count > 0)
            {                
                Door[] doors = BaseNetworkable.serverEntities.Where(x => x is Door).Cast<Door>().ToArray();
                
                Stopwatch sw = Stopwatch.StartNew();

                for (int i = 0; i < doors.Length; i++)
                {
                    if (sw.Elapsed.TotalMilliseconds > 0.1)
                    {
                        yield return CoroutineEx.waitForEndOfFrame;
                        yield return CoroutineEx.waitForEndOfFrame;
                        sw.Reset();
                    }

                    Door door = doors[i];
                    if (door == null || !door.IsValid())
                        continue;

                    if (storedData.ids.Contains(door.net.ID))                    
                        door.gameObject.AddComponent<SlidingDoor>();                    
                }

                Puts(string.Format("Loaded {0} sliding doors from data", SlidingDoor._allDoors.Count));
            }
        }

        private IEnumerator RestoreOnSaveFinished()
        {
            while (SaveRestore.IsSaving)            
                yield return null;            

            yield return CoroutineEx.waitForEndOfFrame;
            yield return CoroutineEx.waitForEndOfFrame;

            for (int i = SlidingDoor._allDoors.Count - 1; i >= 0; i--)            
                SlidingDoor._allDoors[i]?.RestoreAfterGameSave();            
        }

        private static T FindEntityFromRay<T>(BasePlayer player) where T : Component
        {
            Ray ray = new Ray(player.eyes.position, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward);

            RaycastHit hit;
            if (!Physics.Raycast(ray, out hit, 1.5f))
                return null;

            return hit.collider.GetComponentInParent<T>();            
        }

        private static bool HasPermission(ulong ownerId, string perm) => Instance.permission.UserHasPermission(ownerId.ToString(), PERMISSION_ALL) || Instance.permission.UserHasPermission(ownerId.ToString(), perm);

        private static SlidingDoor.DoorType ToDoorType(string shortPrefabName)
        {
            return shortPrefabName.Equals(DOOR_WOOD_SPN) ? SlidingDoor.DoorType.Wood :
                shortPrefabName.Equals(DOOR_METAL_SPN) ? SlidingDoor.DoorType.Metal :
                shortPrefabName.Equals(DOOR_ARMOUR_SPN) ? SlidingDoor.DoorType.Armoured : SlidingDoor.DoorType.Invalid;
        }
        #endregion

        #region Component
        private class SlidingDoor : MonoBehaviour
        {
            public static List<SlidingDoor> _allDoors = new List<SlidingDoor>();

            protected Door Entity { get; private set; }

            private List<DoorEntity> Children = new List<DoorEntity>();

            private Transform tr;

            private Vector3 originalPosition;

            private Vector3 openPosition;

            private bool isOpening = false;

            private bool isPaused = false;

            private DoorType doorType;

            private float timeTaken = 0f;

            private float timeToTake;


            public bool IsOpen { get { return tr.position != originalPosition; } }


            private void Awake()
            {                
                Entity = GetComponent<Door>();

                doorType = ToDoorType(Entity.ShortPrefabName);
                if (doorType == DoorType.Invalid)
                {
                    Destroy(this);
                    return;
                }

                Entity.CloseRequest();

                Entity.syncPosition = true;  
                
                tr = Entity.transform;

                originalPosition = tr.position;
                openPosition = originalPosition + (-tr.forward * 1.15f);                

                timeTaken = timeToTake = doorType == DoorType.Wood ? configData.Door.WoodSpeed : doorType == DoorType.Metal ? configData.Door.MetalSpeed : configData.Door.ArmourSpeed;

                UpdateCurrentChildren();

                SendNetworkUpdate();
                
                enabled = false;

                _allDoors.Add(this);
            }
            
            private void Update()
            {
                if (isPaused)
                    return;

                timeTaken += UnityEngine.Time.deltaTime;

                float delta = Mathf.InverseLerp(0f, timeToTake, timeTaken);

                tr.position = isOpening ? Vector3.Lerp(originalPosition, openPosition, delta) : Vector3.Lerp(openPosition, originalPosition, delta);
                tr.hasChanged = true;

                for (int i = 0; i < Children.Count; i++)                
                    Children[i].Move(isOpening, delta);

                SendNetworkUpdate();

                if (timeTaken >= timeToTake)
                {
                    timeTaken = timeToTake;

                    enabled = false;

                    if (configData.AutoDoor.Enabled && HasPermission(Entity.OwnerID, PERMISSION_AUTO_DOOR) && isOpening)
                        InvokeHandler.Invoke(this, OnDoorToggled, configData.AutoDoor.OpenTime);
                    return;
                }
            }

            private void OnDestroy()
            {
                Children.Clear();
                Children = null;

                _allDoors.Remove(this);
            }

            #region Hackery
            private bool onSave_enabled;
            private float onSave_timeTaken;
            private Vector3 onSave_currentPosition;

            internal void CloseForGameSave()
            {
                if (Entity != null && !Entity.IsDestroyed)
                {
                    onSave_enabled = enabled;
                    onSave_timeTaken = timeTaken;
                    onSave_currentPosition = tr.position;

                    enabled = false;

                    tr.position = originalPosition;
                    tr.hasChanged = true;

                    for (int i = 0; i < Children?.Count; i++)
                        Children[i].ResetForGameSave();
                }
            }

            internal void RestoreAfterGameSave()
            {
                if (Entity != null && !Entity.IsDestroyed)
                {
                    tr.position = onSave_currentPosition;
                    tr.hasChanged = true;

                    for (int i = 0; i < Children?.Count; i++)
                        Children[i].Restore();

                    timeTaken = onSave_timeTaken;
                    enabled = onSave_enabled;
                }
            }
            #endregion

            internal void ResetDoorState()
            {
                enabled = false;

                InvokeHandler.CancelInvoke(this, OnDoorToggled);

                if (Entity != null && !Entity.IsDestroyed)
                {
                    tr.position = originalPosition;
                    tr.hasChanged = true;

                    for (int i = 0; i < Children?.Count; i++)
                        Children[i].Reset();

                    SendNetworkUpdate();
                }
            }

            internal void OnDoorToggled()
            {
                if (enabled && !isPaused)
                {
                    enabled = false;
                    isPaused = true;
                    return;
                }

                InvokeHandler.CancelInvoke(this, OnDoorToggled);

                UpdateCurrentChildren();

                isOpening = !isOpening;
                timeTaken = Mathf.Abs(timeToTake - timeTaken);

                isPaused = false;
                enabled = true;

                Effect.server.Run((int)doorType == 0 ? EFFECT_WOOD : EFFECT_METAL, tr.position);
            }

            private void UpdateCurrentChildren()
            {
                for (int i = Children.Count - 1; i >= 0; i--)
                {
                    DoorEntity doorEntity = Children[i];

                    if (doorEntity.Entity == null || doorEntity.Entity.IsDestroyed)
                        Children.RemoveAt(i);
                }

                Entity.children.ForEach(x =>
                {
                    if (!Children.Any(y => y.Entity == x))
                        Children.Add(new DoorEntity(x));
                });
            }

            private void SendNetworkUpdate()
            {               
                if (!Entity.IsValid())
                    return;

                if (Net.sv.write.Start())
                {
                    Net.sv.write.PacketID(Message.Type.EntityDestroy);
                    Net.sv.write.EntityID(Entity.net.ID);
                    Net.sv.write.UInt8((byte)0);
                    Net.sv.write.Send(new SendInfo(Entity.net.@group.subscribers));
                }

                List<Connection> connections = Entity.net.@group.subscribers;
                for (int i = 0; i < connections.Count; i++)
                {
                    BasePlayer player = connections[i].player as BasePlayer;
                    if (player != null)
                    {
                        player.SendEntitySnapshot(Entity);
                        Entity.children.ForEach(x => player.SendEntitySnapshot(x));
                    }
                }

                Entity.SendNetworkUpdateImmediate();
            }

            private struct DoorEntity
            {
                public BaseEntity Entity { get; private set; }

                private Transform tr;

                private Vector3 originalPosition;

                private Vector3 openPosition;

                private Vector3 onSave_position;

                public DoorEntity(BaseEntity entity)
                {
                    Entity = entity;

                    tr = entity.transform;

                    onSave_position = originalPosition = tr.position;

                    openPosition = originalPosition + (-tr.forward * 1.15f);
                }

                internal void Move(bool isOpening, float delta)
                {
                    if (tr == null)
                        return;

                    tr.position = isOpening ? Vector3.Lerp(originalPosition, openPosition, delta) : Vector3.Lerp(openPosition, originalPosition, delta);
                    tr.hasChanged = true;
                }

                internal void Reset()
                {
                    if (tr == null)
                        return;

                    tr.position = originalPosition;
                    tr.hasChanged = true;
                }

                internal void ResetForGameSave()
                {
                    if (tr == null)
                        return;

                    onSave_position = tr.position;

                    tr.position = originalPosition;
                    tr.hasChanged = true;
                }

                internal void Restore()
                {
                    if (tr == null)
                        return;

                    tr.position = onSave_position;
                    tr.hasChanged = true;
                }
            }

            internal enum DoorType { Wood, Metal, Armoured, Invalid }
        }
        #endregion

        #region Commands
        [ChatCommand("sdoor")]
        private void cmdSDoor(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player.userID, PERMISSION_USE))
            {
                player.ChatMessage("You do not have permission to use this command");
                return;
            }
            
            Door door = FindEntityFromRay<Door>(player);
            if (door == null || !door.IsValid())
            {
                player.ChatMessage(msg("Error.NoDoor", player.userID));
                return;
            }

            if (configData.Door.BuildingAuth && !player.IsBuildingAuthed())
            {
                player.ChatMessage(msg("Error.NoBuildingPriv", player.userID));
                return;
            }

            BaseEntity doorLock = door.GetSlot(BaseEntity.Slot.Lock);
            if (doorLock is CodeLock && configData.Door.CodeLockAuth)
            {
                if (!(doorLock as CodeLock).whitelistPlayers.Contains(player.userID))
                {
                    player.ChatMessage(msg("Error.NoCodeLock", player.userID));
                    return;
                }
            }

            SlidingDoor.DoorType doorType = ToDoorType(door.ShortPrefabName);
            if (doorType == SlidingDoor.DoorType.Invalid)
            {
                player.ChatMessage(msg("Error.InvalidDoorType", player.userID));
                return;
            }

            if (!HasPermission(player.userID, doorType == SlidingDoor.DoorType.Wood ? PERMISSION_WOOD : doorType == SlidingDoor.DoorType.Metal ? PERMISSION_METAL : PERMISSION_ARMOUR))
            {
                player.ChatMessage(msg("Error.NoPermission.Other", player.userID));
                return;
            }

            SlidingDoor slidingDoor = door.GetComponent<SlidingDoor>();
            if (slidingDoor != null)
            {
                slidingDoor.ResetDoorState();
                UnityEngine.Object.Destroy(slidingDoor);
                storedData.ids.Remove(door.net.ID);
                SaveData();

                player.ChatMessage(msg("Notification.Success.Add", player.userID));
            }
            else
            {
                door.gameObject.AddComponent<SlidingDoor>();
                storedData.ids.Add(door.net.ID);
                SaveData();

                player.ChatMessage(msg("Notification.Success.Remove", player.userID));
            }
        }
        #endregion

        #region Config        
        private static ConfigData configData;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Auto-Close Settings")]
            public AutoDoorSettings AutoDoor { get; set; }

            [JsonProperty(PropertyName = "Door Settings")]
            public DoorSettings Door { get; set; }

            public class AutoDoorSettings
            {
                [JsonProperty(PropertyName = "Amount of time before auto-closing a door (seconds)")]
                public float OpenTime { get; set; }

                [JsonProperty(PropertyName = "Enable automatic door closing")]
                public bool Enabled { get; set; }
            }

            public class DoorSettings
            {
                [JsonProperty(PropertyName = "Door Speed (Wood)")]
                public float WoodSpeed { get; set; }

                [JsonProperty(PropertyName = "Door Speed (Metal)")]
                public float MetalSpeed { get; set; }

                [JsonProperty(PropertyName = "Door Speed (Armour)")]
                public float ArmourSpeed { get; set; }

                [JsonProperty(PropertyName = "Require code lock authentication")]
                public bool CodeLockAuth { get; set; }

                [JsonProperty(PropertyName = "Require building privilege")]
                public bool BuildingAuth { get; set; }

                [JsonProperty(PropertyName = "Automatically apply to all doors")]
                public bool ApplyToAll { get; set; }
            }


            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                AutoDoor = new ConfigData.AutoDoorSettings
                {
                    Enabled = false,
                    OpenTime = 3f
                },
                Door = new ConfigData.DoorSettings
                {
                    ApplyToAll = false,
                    ArmourSpeed = 1f,
                    BuildingAuth = true,
                    CodeLockAuth = false,
                    MetalSpeed = 1f,
                    WoodSpeed = 1f
                },
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        #endregion

        #region Data Management
        private void SaveData() => data.WriteObject(storedData);

        private void LoadData()
        {
            try
            {
                storedData = data.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        private class StoredData
        {
            public List<uint> ids = new List<uint>();
        }
        #endregion

        #region Localization
        private string msg(string key, ulong playerId = 0U) => lang.GetMessage(key, this, playerId == 0U ? null : playerId.ToString());

        private Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            ["Error.NoPermission.Simple"] = "You do not have <color=#ce422b>permission</color> to use this command",
            ["Error.NoDoor"] = "<color=#ce422b>No door found...</color>",
            ["Error.NoBuildingPriv"] = "You must have <color=#ce422b>Building Privilege</color> to use this command",
            ["Error.NoCodeLock"] = "You must be authed on the <color=#ce422b>Code Lock</color>",
            ["Error.InvalidDoorType"] = "<color=#ce422b>Invalid door type</color>. This plugin only works with player deployable single doors",
            ["Error.NoPermission.Other"] = "You do not have <color=#ce422b>permission</color> apply/remove a sliding door to this door type",
            ["Error.DoorOpen"] = "You can not place a deployable on this door whilst it is open",
            ["Notification.Success.Add"] = "You have <color=#ce422b>removed</color> the sliding door component from this door",
            ["Notification.Success.Remove"] = "You have <color=#ce422b>installed</color> a sliding door component on this door",
        };
        #endregion
    }
}


// --- End of file: SlidingDoors.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AdminProtect.cs ---
// --- Original Local Path: AdminProtect.cs ---

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("AdminProtect", "Ryamkk", "1.0.0")]
    public class AdminProtect : RustPlugin
    {
        public Configuration config;

        public class Configuration
        {
            [JsonProperty("Список SteamID админов которым разрешено заходить на сервер")]
            public List<ulong> AdminProtectList = new List<ulong>(){ };
        }
        
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
            }
            catch
            {
                PrintError("Конфигурационный файл повреждён, проверьте правильность ведённых данных!");
            }
        }

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject(new Configuration(), true);
        }

        void OnPlayerInit(BasePlayer player)
        {
            if(player.Connection.authLevel > 1)
            {
                if (!config.AdminProtectList.Contains(player.userID))
                {
                    SendVKLogs($"Игрок {player.displayName} ({player.userID}) попытался зайти с уровнем авторизации {player.Connection.authLevel} и был кикнут!");
                    player.Kick("Если вы реально являетесь администратором отпишите в вк @zaharkotov!");
                }
            }
        }

        [ConsoleCommand("admin.protect")]
        void CmdACIgnore(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null && arg.Connection.authLevel < 1) return;
            if (arg.Args == null) return;
            
            string steamidSTR = arg.Args[0];
            ulong steamid = 0;
            
            if (steamidSTR.Length == 17 && ulong.TryParse(steamidSTR, out steamid))
            {
                if (!config.AdminProtectList.Contains(steamid))
                {
                    config.AdminProtectList.Add(steamid);
                    Puts($"[AdminProtect]: Player [{steamidSTR}] added to AdminList");
                    SaveConfig();
                }
                else
                {
                    config.AdminProtectList.Remove(steamid);
                    Puts($"[AdminProtect]: Player [{steamidSTR}] removed from AdminList");
                    SaveConfig();
                }
                Config.WriteObject(config, true);
            }
            else
            {
                Puts($"[AdminProtect]: You write steamid [{steamidSTR}] is not correct!");
            }
        }
        
        private string URLEncode(string input)
        {
            if (input.Contains("#")) input = input.Replace("#", "%23");
            if (input.Contains("$")) input = input.Replace("$", "%24");
            if (input.Contains("+")) input = input.Replace("+", "%2B");
            if (input.Contains("/")) input = input.Replace("/", "%2F");
            if (input.Contains(":")) input = input.Replace(":", "%3A");
            if (input.Contains(";")) input = input.Replace(";", "%3B");
            if (input.Contains("?")) input = input.Replace("?", "%3F");
            if (input.Contains("@")) input = input.Replace("@", "%40");
            return input;
        }
        
        #region VK
        private void SendVKLogs(string msg, params object[] args)
            {
            int RandomID = UnityEngine.Random.Range(0, 9999);
            int id = 11;
            string token = "vk1.a.gRWKIa_kC-IGL5pFkb_iIY7xYY8h6yiUzniSxDRBOw9191_p0KPUethDtwHf3eKPftMHgRXF9Upiv94udeDTzFIpkkLKR7jCFB8LEg19-PlNRTEeSRjc6QkCzdx8_LMIf5P_O7L3PxsuR_4xT62iW_-L9R3EDEgl_qmRv7h3wIyWfM1GK7PwO9d1k6tvR7TI";
            while (msg.Contains("#"))
                msg = msg.Replace("#", "%23");
            webrequest.Enqueue($"https://api.vk.com/method/messages.send?chat_id={id}&random_id={RandomID}&message={msg}&access_token={token}&v=5.92", null, (code, response) => { }, this);
        }

        #endregion
    }
}

// --- End of file: AdminProtect.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CapsuleSystem.cs ---
// --- Original Local Path: CapsuleSystem.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins  
{
    [Info("CapsuleSystem", "https://topplugin.ru/", "1.0.0")]
    public class CapsuleSystem : RustPlugin
    {
        #region Fields
        public string Layer = "UI.Capsule";
        public HashSet<uint> openCrates = new HashSet<uint>();
        #endregion

        #region Hooks
		#region Experience
        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (entity is LootContainer && entity.net != null)
            {
                if (!openCrates.Add(entity.net.ID)) return;                
                var openName = "OpenCrate";
                if (entity.name.Contains("crate_elite.prefab"))
                    openName = "OpenEliteCrate";
                else if (entity.name.Contains("crate_normal.prefab"))
                    openName = "OpenMilitaryCrate";                
                GiveExperiencePlayer(player, _config.gainingExperience[openName]); 
            }
        }

        object OnCollectiblePickup(Item item, BasePlayer player)
        {
            GiveExperiencePlayer(player, _config.gainingExperience["Crop"]); 
            return null;
        }
        
        object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            GiveExperiencePlayer(player, _config.gainingExperience["Gather"]);
            return null;
        }
        
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (info == null) return; 
            var player = info.InitiatorPlayer;
 
            if (player == null) return;
            if (player.IsNpc) return; 
            if (entity == null) return;

            if (entity.name.Contains("corpse"))
                return; 

            if (entity.name.Contains("npc")) GiveExperiencePlayer(player, _config.gainingExperience["KillNPC"]);
            else if (entity.name.Contains("barrel"))
            {
                GiveExperiencePlayer(player, _config.gainingExperience["DestroyBarrel"]);
            }
            else if (entity.name.Contains("agents/"))
            {
                GiveExperiencePlayer(player, _config.gainingExperience["KillAnimal"]);
            }
            else if (entity is BradleyAPC)
            {
                GiveExperiencePlayer(player, _config.gainingExperience["DestroyBradley"]);
            }
            else if (entity is BaseHelicopter)
            {
                GiveExperiencePlayer(player, _config.gainingExperience["DestroyHeli"]); 
            }
        }
		
        private void GiveExperiencePlayer(BasePlayer player, double amount)
        {
            if (player.IsNpc) return;
            var playerInfo = GetPlayerInfo(player.userID);
            var multi = _config.permission?.Max(p => permission.UserHasPermission(player.UserIDString, p.Key) ? p.Value : 0f);
            if (multi > 0f) amount *= (float)multi;
            if (amount > 0.5)
            {
                player?.SendConsoleCommand("gametip.hidegametip");
            }

            var currentlyXP = playerInfo.XP;
            if (currentlyXP + amount >= 150)
            {
                amount = (currentlyXP + amount) - 150;
                playerInfo.balance += 5;
                playerInfo.XP = 0;
                player.Command("chat.add2", 0, 0, $"<color=#afafaf>Вам было выдано 5$ на /capsule</color>", "Система", "#af5", 1);
            }            
            playerInfo.XP += amount;
            if (amount > 0.5)
            {
                player?.SendConsoleCommand("gametip.showgametip", $"Получено {amount} XP для капсул");
                timer.Once(2f, () => player?.SendConsoleCommand("gametip.hidegametip"));
            }
        }

		#endregion

        object OnItemAction(Item item, string action, BasePlayer player)
        {
			if (!action.Contains("unwrap")) return null;
            if (player == null) return null;
            if (player.IsNpc) return null;
            if (item == null) return null;
            if (item.name == null) return null;
			CapsuleInfo capsule = _config.items.FirstOrDefault(x => x.name.Equals(item.name)) as CapsuleInfo;			
			if (capsule == null) return null;
			if (item.skin!=capsule.skinID) return null;
			var rnd = UnityEngine.Random.RandomRange(0, 100);
			DropInfo randomItem = null;
			foreach (var capsItem in capsule.drop)
			{
				if (rnd >= capsItem.minChance && rnd <= capsItem.maxChance) randomItem = capsItem;
			}
			if (randomItem == null) return null;
			if (randomItem.isCommand)
			{
				var cmdFormatted = randomItem.command.Replace("{steamid}", player.UserIDString);
				Server.Command(cmdFormatted);
				item.Remove();
				if (!string.IsNullOrEmpty(randomItem.chatText))					
					player.Command("chat.add2", 0, 0, randomItem.chatText, "Система", "#af5", 1);
				return false;
			}
			else
			{
				var NewItem = ItemManager.CreateByName(randomItem.shortname, randomItem.amount, randomItem.skinID);
				if (NewItem==null) return null;
				item.UseItem(1);
				NewItem.name = randomItem.name;
				player.GiveItem(NewItem);
				return false;
			}
            return null;
        }
        void Unload()
        {
            SaveData();
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, Layer);
        }
        
        void Loaded()
        {
            LoadConfig();

            foreach (var capsule in _config.items)
            {
				AddImage(capsule.png,Translit("CAPS_"+capsule.name));
				//Puts($">>> {capsule.name} = {}");
                foreach (var item in capsule.drop.Where(x => !string.IsNullOrEmpty(x.image)))
                {
                    AddImage(item.image,Translit("CAPS_ITEM_"+item.name));
                }
            }
			AddImage("https://i.ibb.co/1ZZHfnL/xp-status.png","CAPS_XP_STATUS");
			AddImage("https://i.ibb.co/g6bwMTn/exit.png","CAPS_EXIT_IMG");
			AddImage("https://i.ibb.co/xgMg8CL/bonus.png","CAPS_BONUS_IMG");
			AddImage("https://i.ibb.co/nQG6p33/lines.png","CAPS_LINE_IMG");
            foreach (var p in _config.permission) permission.RegisterPermission(p.Key, this);
        }

        void OnServerInitialized()
        { 
            timer.Every(305f, SaveData);
            
            LoadData();
            
            var minChance = 0;
            var maxChance = 100;
            var id = 0;
    
            foreach (var capsule in _config.items)
            {   
                var commonItems = capsule.drop.Where(x => x.rare.Equals("Common"));
                var unCommonItems = capsule.drop.Where(x => x.rare.Equals("Uncommon"));
                var rareItems = capsule.drop.Where(x => x.rare.Equals("Rare"));
                var mythicalItems = capsule.drop.Where(x => x.rare.Equals("Mythical"));
                
                id = 0;
                foreach (var item in commonItems)
                {
                    item.id = id;
                    id += 1;
                    item.minChance = minChance;
                    item.maxChance = minChance + (Convert.ToInt32(100 / capsule.drop.Count) + 3);
                    minChance = item.maxChance;
                    minChance += 1; 
                }
                
                foreach (var item in unCommonItems)
                {
                    item.id = id;
                    id += 1;
                    item.minChance = minChance;
                    item.maxChance = minChance + (Convert.ToInt32(100 / capsule.drop.Count) - 2);
                    minChance = item.maxChance;
                    minChance += 1;
                }
                 
                foreach (var item in rareItems) 
                {
                    item.id = id;
                    id += 1;
                    item.minChance = minChance;
                    item.maxChance = minChance + (Convert.ToInt32(100 / capsule.drop.Count) - 2);
                    minChance = item.maxChance;
                    minChance += 1;
                }

                foreach (var item in mythicalItems)
                {
                    item.id = id;
                    id += 1;
                    item.minChance = minChance;
                    item.maxChance = minChance + (Convert.ToInt32(100 / capsule.drop.Count) - 4);
                    minChance = item.maxChance;
                    minChance += 1;
                }
                
                SaveConfig();
                minChance = 0;
            }
        }

        #endregion
        
        #region Commands

        [ChatCommand("adddropcapsule")]
        void adddrop(BasePlayer player, string command, string[] args)
        {
			if (player==null) return;
            if (!player.IsAdmin) return;
       
            var activeItem = player.GetActiveItem();
            var capsuleInfo = _config.items.First(x => x.name.Equals(activeItem.name));
            capsuleInfo.drop.Clear();
            var id = 0; 
            
            foreach (var item in player.inventory.containerMain.itemList)
            {
                id++;
                capsuleInfo.drop.Add(new DropInfo()
                {
                    amount = item.amount,
                    command = "",
                    id = id,
                    image = "",
                    shortname = item.info.shortname,
                    skinID = item.skin,
                    isCommand = false,
                    name = item.info.displayName.english,
                });
            } 
            SaveConfig();
        }
        
        [ChatCommand("capsule")]
        void chatCmdCapsule(BasePlayer player, string command, string[] args)
        {
            CuiHelper.DestroyUi(player, Layer); 
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                Image =
                {
                    FadeIn = 0.2f,
                    Sprite = "assets/content/ui/ui.background.transparent.radial.psd",
                    Color = "0 0 0 1"
                }
            }, "Overlay", Layer);
            container.Add(new CuiPanel
            {
                Image =
                {
                    FadeIn = 0.2f,
                    Color = "0.2 0.2 0.16 0.7",
                    Material = "assets/content/ui/uibackgroundblur.mat"
                }
            }, Layer);

            var playerInfo = GetPlayerInfo(player.userID);

            container.Add(new CuiLabel
            {
                Text = { Text = "КАПСУЛЫ", Align = TextAnchor.UpperCenter, FontSize = 40, Font = "robotocondensed-bold.ttf" },
                RectTransform = { AnchorMin = "0.3 1", AnchorMax = "0.7 1", OffsetMin = "0 -135", OffsetMax = "0 -71.6" }
            }, Layer);
            container.Add(new CuiLabel
            {
                Text = { Text = "Испытай свою удачу открыв одну из капсул.", Align = TextAnchor.UpperCenter, FontSize = 18, Font = "robotocondensed-regular.ttf" },
                RectTransform = { AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -135", OffsetMax = "0 -113" }
            }, Layer);

            container.Add(new CuiLabel()
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "30 66", OffsetMax = "209 90" },
                Text =
                {
                    Align = TextAnchor.LowerCenter,
                    FontSize = 20,
                    Text = $"Ваш баланс: {playerInfo.balance}$",
                    Font = "RobotoCondensed-Bold.ttf"
                }
            }, Layer, Layer + ".Balance");

            container.Add(new CuiPanel()
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "30 18.6", OffsetMax = $"{30 + 179.3 * (storedData.players[player.userID].XP / 150f)} 56.6" },
                Image = { Color = "0.33 0.87 0.59 0.6" }
            }, Layer, Layer + "BackgroundBarProgress");

            container.Add(new CuiElement
            {
                Name = Layer + "BackgroundBar",
                Parent = Layer,
                Components =
                {
					GetImageComponent("https://i.ibb.co/1ZZHfnL/xp-status.png","CAPS_XP_STATUS"),
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "30 18.6", OffsetMax = "209.3 56.6"},
                }
            });
            container.Add(new CuiLabel()
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text =
                {
                    Text = $"<b>{($"{Math.Round(storedData.players[player.userID].XP, 3)} / 150 XP")}</b>",
                    Font = "RobotoCondensed-Bold.ttf",
                    FontSize = 20,
                    Align = TextAnchor.MiddleCenter
                }
            }, Layer + "BackgroundBar");

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    GetImageComponent("https://i.ibb.co/g6bwMTn/exit.png","CAPS_EXIT_IMG"),
                    new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-73.9 20", OffsetMax = "-28.6 80"},
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {Color = "0.33 0.87 0.59 0.6"},
                    new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 25.2"}
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Close = Layer
                },
                Text = { Text = "Покинуть страницу", Align = TextAnchor.UpperCenter, FontSize = 18 },
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 49.2" },
            }, Layer);
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "UI_Capsule close",
                    Close = Layer
                },
                Text = { Text = "" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
            }, Layer);
            
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    GetImageComponent("https://i.ibb.co/xgMg8CL/bonus.png","CAPS_BONUS_IMG"),
                    new CuiRectTransformComponent {AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "60 26.6", OffsetMax = "134.6 94.6"}
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {Color = "0.33 0.87 0.59 0.6"},
                    new CuiRectTransformComponent {AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-66 22.6", OffsetMax = "66 25.2"}
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "getdailymoney",
                },
                Text = { Text = "Получить бонус", Align = TextAnchor.UpperCenter, FontSize = 18 },
                RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-66 22.6", OffsetMax = "66 49.2" },
            }, Layer);

            var capSizeX = 115.3f;
            var capSepX = 29.3f;
            var capSizeY = 166f;

            var num = _config.items.Count;
            var posX = -(capSizeX * num + capSepX * (num - 1)) / 2f;
            var posY = -(capSizeY / 2f);

            for (var i = 0; i < _config.items.Count; i++)
            {
                var item = _config.items[i];
                container.Add(new CuiButton
                {
                    RectTransform =
                    {
                        AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{posX} {posY}", OffsetMax = $"{posX + capSizeX} {posY + capSizeY}"
                    },
                    Button =
                    {
                        Color = "0 0 0 0",
                        Command = $"UI_Capsule showfullcapsule {item.name}"
                    },
                    Text = { Text = "" }
                }, Layer, Layer + $".Image.{i}");

                container.Add(new CuiElement
                {
                    Name = Layer + $".Image.{i}.Icon",
                    Parent = Layer + $".Image.{i}",
                    Components =
                    {
                        GetImageComponent(item.png,Translit("CAPS_"+item.name)),
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" },
                    }
                });

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-45 -28", OffsetMax = "-2 -4" },
                    Text =
                    {
                        Align = TextAnchor.MiddleCenter,
                        FontSize = 18,
                        Text = $"<b>{item.price}$</b>",
                        Font = "RobotoCondensed-Bold.ttf"
                    }
                }, Layer + $".Image.{i}");
                posX += capSizeX + capSepX;
            }

            CuiHelper.AddUi(player, container);
        }

        [ConsoleCommand("capsule_givebalance")]
        void consoleGivebalance(ConsoleSystem.Arg arg)
        {
            if (arg.IsRcon || arg.IsAdmin)
            {
                var userid = arg.GetULong(0);
                var amount = arg.GetInt(1);

                GetPlayerInfo(userid).balance += amount;
                PrintError($"Выдали валюту в капсулы игроку {userid} в размере {amount}"); 
            }
        }

        [ConsoleCommand("getdailymoney")]
        void consoleGetDailyMoney(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            var playerInfo = GetPlayerInfo(player.userID);
            var dayofyear = DateTime.Now.DayOfYear;
            var container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, Layer + "GetDailyMoney");
            if (playerInfo.lastday == dayofyear)
            {
                container.Add(new CuiLabel
                {
                    Text = { Text = "Вы уже получили бонус сегодня", Align = TextAnchor.LowerCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" },
                    RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-150 104", OffsetMax = "150 130" }
                }, Layer, Layer + "GetDailyMoney");
                CuiHelper.AddUi(player, container);
                return;
            }
            playerInfo.lastday = dayofyear;
            playerInfo.balance += 5;

            container.Add(new CuiLabel
            {
                Text = { Text = "На ваш баланс было зачислено 5$", Align = TextAnchor.LowerCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" },
                RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-150 104", OffsetMax = "150 130" }
            }, Layer, Layer + "GetDailyMoney");

            CuiHelper.DestroyUi(player, Layer + ".Balance");
            container.Add(new CuiLabel()
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "30 68", OffsetMax = "209 90" },
                Text =
                {
                    Align = TextAnchor.LowerCenter,
                    FontSize = 18,
                    Text = $"Ваш баланс: {playerInfo.balance}$",
                    Font = "RobotoCondensed-Bold.ttf"
                }
            }, Layer, Layer + ".Balance");
            CuiHelper.AddUi(player, container);
        }

        [ConsoleCommand("UI_Capsule")]
        void consoleCmdCapsule(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection?.player as BasePlayer;
            if (player == null) return;

            switch (arg.GetString(0))
            {
                case "prev":
                {
                    chatCmdCapsule(player, "", new string[0]);
                    break;
                }
                case "buycapsule":
                {
                    var capsule = _config.items.First(x => x.name.Equals(arg.GetString(1) + " капсула"));
                    var playerInfo = GetPlayerInfo(player.userID);
                    var container = new CuiElementContainer();
                    CuiHelper.DestroyUi(player, Layer + "Status");
                    if (playerInfo.balance < capsule.price)
                    {
                        container.Add(new CuiLabel
                        {
                            Text = { Text = "У вас недостаточно $ для покупки капсулы", Align = TextAnchor.LowerCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" },
                            RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-200 104", OffsetMax = "200 130" }
                        }, Layer, Layer + "Status");
                        CuiHelper.AddUi(player, container);
                        return;
                    }

                    var buyItem = ItemManager.CreateByName(capsule.shortname, 1, capsule.skinID);
                    buyItem.name = capsule.name;

                    playerInfo.balance -= capsule.price;
                    player.GiveItem(buyItem);
                        
                    CuiHelper.DestroyUi(player, Layer + "Status");
                    container.Add(new CuiLabel
                    {
                        Text = { Text = "Капсула успешно куплена!", Align = TextAnchor.LowerCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" },
                        RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "-200 104", OffsetMax = "200 130" }
                    }, Layer, Layer + "Status");
                    CuiHelper.AddUi(player, container);
                    break;
                }
                case "showfullcapsule":
                {
                    var capsule = _config.items.First(x => x.name.Equals(arg.GetString(1) + " капсула"));
                    CuiHelper.DestroyUi(player, Layer);

                    var container = new CuiElementContainer();

                    container.Add(new CuiPanel
                    {
                        CursorEnabled = true,
                        Image =
                        {
                            FadeIn = 0.2f,
                            Sprite = "assets/content/ui/ui.background.transparent.radial.psd",
                            Color = "0 0 0 1"
                        }
                    }, "Overlay", Layer);
                    container.Add(new CuiPanel
                    {
                        Image =
                        {
                            FadeIn = 0.2f,
                            Color = "0.2 0.2 0.16 0.7",
                            Material = "assets/content/ui/uibackgroundblur.mat"
                        }
                    }, Layer);
                    container.Add(new CuiLabel
                    {
                        Text = { Text = $"{capsule.name.ToUpper()}", Align = TextAnchor.UpperCenter, FontSize = 40, Font = "robotocondensed-bold.ttf" },
                        RectTransform = { AnchorMin = "0.3 1", AnchorMax = "0.7 1", OffsetMin = "0 -135", OffsetMax = "0 -71.6" }
                    }, Layer);
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Components =
                        {
                            GetImageComponent("https://i.ibb.co/g6bwMTn/exit.png","CAPS_EXIT_IMG"),
                            new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-73.9 20", OffsetMax = "-28.6 80"},
                        }
                    });
                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Components =
                    {
                        new CuiImageComponent {Color = "0.33 0.87 0.59 0.6"},
                        new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 25.2"}
                    }
                    });
                    container.Add(new CuiButton
                    {
                        Button =
                        {
                            Color = "0 0 0 0",
                            Command = "UI_Capsule prev"
                        },
                        Text = { Text = "Вернуться назад", Align = TextAnchor.UpperCenter, FontSize = 18 },
                        RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 49.2" },
                    }, Layer);
                    container.Add(new CuiButton
                    {
                        Button =
                        {
                            Color = "0 0 0 0",
                            Command = "UI_Capsule prev",
                            Close = Layer
                        },
                        Text = { Text = "" },
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    }, Layer);

                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Components =
                        {
                            GetImageComponent("https://i.ibb.co/nQG6p33/lines.png","CAPS_LINE_IMG"),
                            new CuiRectTransformComponent {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-127.6 -155.6", OffsetMax = "127.6 155.6"},
                        }
                    });

                    container.Add(new CuiElement()
                    {
                        Parent = Layer,
                        Name = Layer + ".Image",
                        Components =
                        {
                            GetImageComponent(capsule.png,Translit("CAPS_"+capsule.name)),
                            new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-49.3 -56", OffsetMax = "66 110" },
                        }
                    });
                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-45 -28", OffsetMax = "-2 -4" },
                        Text =
                        {
                            Align = TextAnchor.MiddleCenter,
                            FontSize = 18,
                            Text = $"<b>{capsule.price}$</b>",
                            Font = "RobotoCondensed-Bold.ttf"
                        }
                    }, Layer + ".Image");
                    
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-51.6 -106", OffsetMax = "51.6 -70" },
                        Button =
                        {
                            Color = "0.33 0.87 0.59 0.6",
                            Command = $"UI_Capsule buycapsule {capsule.name}",
                        },
                        Text = { Text = "КУПИТЬ", Align = TextAnchor.MiddleCenter, FontSize = 20 }
                    }, Layer);

                    var itemSize = 89.3f;
                    var itemSep = 11.3f;
                    var itemSepBig = 252f;
                    var posStartX = -((itemSize * 4 + itemSep * 2 + itemSepBig) / 2f);
                    var posX = posStartX;
                    var posY = (itemSize * 4 + itemSep * 3) / 2f;
                    var itemCount = capsule.drop.Count;

                    for (var i = 0; i < 16; i++)
                    {
                        container.Add(new CuiPanel
                        {
                            RectTransform = {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{posX} {posY - itemSize}", OffsetMax = $"{posX + itemSize} {posY}"},
                            Image = { Color = "0 0 0 0.6" }
                        }, Layer, Layer + $".Item{i}");
                        if (i < itemCount)
                        {
                            var dropItem = capsule.drop[i];
                            container.Add(new CuiElement()
                            {
                                Name = Layer + $".Item{i}.IMG",
                                Parent = Layer + $".Item{i}",
                                Components =
                                {
                                    string.IsNullOrEmpty(dropItem.image) ? GetItemImageComponent(dropItem.shortname) : GetImageComponent(dropItem.image,Translit("CAPS_ITEM_"+dropItem.name)),
                                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "2 2", OffsetMax = "-2 -2"},
                                }
                            });
                            if (dropItem.name.Contains("Набор") || dropItem.name.Contains("Привилегия"))
                            {
                                container.Add(new CuiLabel()
                                {
                                    RectTransform = { AnchorMin = "0 0.029199", AnchorMax = "0.946665 1" },
                                    Text =
                                    {
                                        Align = TextAnchor.LowerRight,
                                        FontSize = 12,
                                        Text = $"{(dropItem.name.Contains("Набор") ? "<b>НАБОР</b>" : "<b>ПРИВИЛЕГИЯ</b>")}",
                                        Font = "RobotoCondensed-Bold.ttf"
                                    }
                                }, Layer + $".Item{i}.IMG");

                                container.Add(new CuiLabel()
                                {
                                    RectTransform = { AnchorMin = "0 0.029199", AnchorMax = "0.946665 1", OffsetMax = "0 -2" },
                                    Text =
                                    {
                                        Align = TextAnchor.UpperRight,
                                        FontSize = 10,
                                        Text = dropItem.name.Contains("Набор") ? $"<b>x{dropItem.amount}</b>" : $"<b>{dropItem.amount} DAY</b>",
                                        Font = "RobotoCondensed-Bold.ttf"
                                    }
                                }, Layer + $".Item{i}.IMG");
                            }
                            else
                            {
                                container.Add(new CuiLabel()
                                {
                                    RectTransform = { AnchorMin = "0 0.029199", AnchorMax = "0.946665 1", OffsetMax = "0 -2" },
                                    Text =
                                    {
                                        Align = TextAnchor.UpperRight,
                                        FontSize = 10,
                                        Text = $"<b>x{dropItem.amount}</b>",
                                        Font = "RobotoCondensed-Bold.ttf"
                                    }
                                }, Layer + $".Item{i}.IMG");
                            }
                        }
                        var num = i + 1;
                        if (num % 4 == 0)
                        {
                            posX = posStartX;
                            posY -= itemSize + itemSep;
                        }
                        else if (num % 2 == 0) posX += itemSize + itemSepBig;
                        else posX += itemSize + itemSep;
                    }

                    CuiHelper.AddUi(player, container);

                    break;
                }
            }
        }

        #endregion

        #region Data

        class StoredData
        {
           public Dictionary<ulong, PlayerInfo> players = new Dictionary<ulong, PlayerInfo>();    
        }
        
        class PlayerInfo
        {
            [JsonProperty("Баланс")] public int balance = 0;
            [JsonProperty("Опыта")] public double XP = 0d;
            [JsonProperty("d")] public int lastday = 0;
        }

        void SaveData()
        {
            CapsuleData.WriteObject(storedData);
        }

        void LoadData()
        {
            CapsuleData = Interface.Oxide.DataFileSystem.GetFile("CapsuleSystem/capsuleData");
            try
            {
                storedData = CapsuleData.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        StoredData storedData;
        private DynamicConfigFile CapsuleData;
        
        #endregion

        #region Config

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<Configuration>();
			if (_config==null )	LoadDefaultConfig();
        } 

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration()
            {
                startBalance = 0,
                gainingExperience = new Dictionary<string, double>()
                {
                    ["Gather"] = 0.1d,
                    ["KillNPC"] = 1d,
                    ["KillAnimal"] = 0.5d,
                    ["DestroyBradley"] = 20d,
                    ["DestroyHeli"] = 30d,
                    ["DestroyBarrel"] = 0.1d,
                    ["OpenCrate"] = 0.1d,
                    ["OpenMilitaryCrate"] = 1d,
                    ["OpenEliteCrate"] = 5d,
                    ["GatherDetail"] = 1d,
                    ["Crop"] = 0.1d,
                },
                items = new List<CapsuleInfo>()
                {
                    new CapsuleInfo()
                    { 
                        name = "Lite капсула",
                        amount = 1,
                        price = 10,
						shortname = "xmas.present.large",
						skinID = 1592814551,
						png = "https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/capsulesystem/capsule_1.png",
                        drop = new List<DropInfo>()
                        {
                            new DropInfo()
                            {
                                name = "Sulfur",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "sulfur.ore", 
                                skinID = 0,
                                amount = 5000,
								minChance = 0,
								maxChance = 6
                            },
                            new DropInfo()
                            {
                                name = "Satchel Charge",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "explosive.satchel", 
                                skinID = 0,
                                amount = 1,
								minChance = 6,
								maxChance = 10
                            },
                            new DropInfo()
                            {
                                name = "Огненая кирка",
                                isCommand = true,
                                rare = "",
                                command = "customitem.give {steamid} pickaxe.fire",
                                shortname = "", 
                                skinID = 0,
                                amount = 1,
								minChance = 11,
								maxChance = 13,
								image = "https://i.ibb.co/TPHXcpg/753379c6288723283809ec46b330fa9d.png",
								chatText = "Вы получили <color=green>Огненную кирку</color>"
                            },
                            new DropInfo()
                            {
                                name = "Python Revolver",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "pistol.python", 
                                skinID = 0,
                                amount = 1,
								minChance = 14,
								maxChance = 19
                            },
                            new DropInfo()
                            {
                                name = "Garage Door",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "wall.frame.garagedoor", 
                                skinID = 0,
                                amount = 1,
								minChance = 20,
								maxChance = 27
                            },
                            new DropInfo()
                            {
                                name = "Double Barrel Shotgun",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "shotgun.double", 
                                skinID = 0,
                                amount = 1,
								minChance = 28,
								maxChance = 33
                            },
                            new DropInfo()
                            {
                                name = "Revolver",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "pistol.revolver", 
                                skinID = 0,
                                amount = 1,
								minChance = 34,
								maxChance = 43
                            },
                            new DropInfo()
                            {
                                name = "Salvaged Icepick",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "icepick.salvaged", 
                                skinID = 0,
                                amount = 1,
								minChance = 44,
								maxChance = 52
                            },
                            new DropInfo()
                            {
                                name = "hazmat suit",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "hazmatsuit", 
                                skinID = 0,
                                amount = 1,
								minChance = 53,
								maxChance = 60
                            },
                            new DropInfo()
                            {
                                name = "blueberries",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "blueberries", 
                                skinID = 0,
                                amount = 25,
								minChance = 61,
								maxChance = 67
                            },
                            new DropInfo()
                            {
                                name = "tactical gloves",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "tactical.gloves", 
                                skinID = 0,
                                amount = 1,
								minChance = 68,
								maxChance = 75
                            },
                            new DropInfo()
                            {
                                name = "Scrap",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "scrap", 
                                skinID = 0,
                                amount = 500,
								minChance = 76,
								maxChance = 82
                            },
                            new DropInfo()
                            {
                                name = "Дождь на сервере",
                                isCommand = true,
                                rare = "",
                                command = "rain 0.8",
                                shortname = "", 
                                skinID = 0,
                                amount = 1,
								minChance = 83,
								maxChance = 85,
								image = "https://i.ibb.co/5TdNWBK/cloud-rain.png"
                            },
                            new DropInfo()
                            {
                                name = "Golden Eggs",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "easter.goldegg", 
                                skinID = 0,
                                amount = 1,
								minChance = 86,
								maxChance = 90
                            },
                            new DropInfo()
                            {
                                name = "Semi-Automatic Rifle",
                                isCommand = false,
                                rare = "",
                                command = "",
                                shortname = "rifle.semiauto", 
                                skinID = 0,
                                amount = 1,
								minChance = 91,
								maxChance = 95
                            },
                            new DropInfo()
                            {
                                name = "SAY В ЧАТ",
                                isCommand = true,
                                rare = "",
                                command = "chat.say ТЕСТ",
                                shortname = "TEST COMMAND",
                                skinID = 97,
                                amount = 100,
                                image = "https://www.iconfinder.com/data/icons/kameleon-free-pack-rounded/110/Chat-2-512.png"
                            },
                        },
                    },
                    
                }
               
            };
        }

        public Configuration _config;

        public class Configuration
        {
            [JsonProperty("Стартовый баланс")] public int startBalance = 0;

            [JsonProperty("Получение XP")] public Dictionary<string, double> gainingExperience = new Dictionary<string, double>();
            [JsonProperty("Капсулы на продажу")] public List<CapsuleInfo> items = new List<CapsuleInfo>();
            [JsonProperty("Рейт для капсул")] public Dictionary<string, float> permission = new Dictionary<string, float>
            {
                { "capsulesystem.xp2", 2f },
                { "capsulesystem.xp3", 3f }
            };
        }

        public class CapsuleInfo
        {
            [JsonProperty("Название предмета")] public string name = "";
            [JsonProperty("Цена за 1шт")] public int price = 0;
            [JsonProperty("Шортнейм")] public string shortname = "";
            [JsonProperty("Количество")] public int amount = 1;
            [JsonProperty("СкинИД")] public ulong skinID = 0U;
            [JsonProperty("Дроп с капсулы")] public List<DropInfo> drop = new List<DropInfo>();
            [JsonProperty("Изображение")] public string png = "";
        }

        public class DropInfo
        {
            [JsonProperty("Это команда?")] public bool isCommand = false;
            [JsonProperty("Айди")] public int id = 0;
            [JsonProperty("Название")] public string name = "";
            [JsonProperty("Редкость")] public string rare = "Common";
            [JsonProperty("Шортнейм")] public string shortname;
            [JsonProperty("Команда")] public string command = "";
            [JsonProperty("Количество")] public int amount = 0;
            [JsonProperty("СкинИД")] public ulong skinID = 0;
            [JsonProperty("Ссылка на изображение")] public string image = "";
            [JsonProperty("Минимальный шанс")] public int minChance = 0;
            [JsonProperty("Максимальный шанс")] public int maxChance = 0;
            [JsonProperty("Сообщение в чат")] public string chatText;
        }
        #endregion
		
        #region Helpers

        private PlayerInfo GetPlayerInfo(ulong userid)
        {
            PlayerInfo result;
            if (!storedData.players.TryGetValue(userid, out result))
            {
                result = storedData.players[userid] = new PlayerInfo();
            }            
            return result;
        }

        private static string HexToRGB(string hex)
        {
            if (string.IsNullOrEmpty(hex)) hex = "#FFFFFFFF";
            var str = hex.Trim('#');
            if (str.Length == 6)   str += "FF";
            if (str.Length != 8) throw new Exception(hex);
            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
            Color color = new Color32(r, g, b, a);
            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }

		public CuiRawImageComponent GetAvatarImageComponent(ulong user_id, string color = "1.0 1.0 1.0 1.0"){
			
			if (plugins.Find("ImageLoader")) return plugins.Find("ImageLoader").Call("BuildAvatarImageComponent",user_id) as CuiRawImageComponent;
			if (plugins.Find("ImageLibrary")) {
				return new CuiRawImageComponent { Png = (string)plugins.Find("ImageLibrary").Call("GetImage", user_id.ToString()), Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga" };
			}
			return new CuiRawImageComponent {Url = "https://image.flaticon.com/icons/png/512/37/37943.png", Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
		}
		public CuiRawImageComponent GetImageComponent(string url, string shortName="", string color = "1.0 1.0 1.0 1.0"){
			
			if (plugins.Find("ImageLoader")) return plugins.Find("ImageLoader").Call("BuildImageComponent",url) as CuiRawImageComponent;
			if (plugins.Find("ImageLibrary")) {
				if (!string.IsNullOrEmpty(shortName)) url = shortName;
				//Puts($"{url}: "+ (string)plugins.Find("ImageLibrary").Call("GetImage", url));
				return new CuiRawImageComponent { Png = (string)plugins.Find("ImageLibrary").Call("GetImage", url), Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
			}
			return new CuiRawImageComponent {Url = url, Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
		}
		public CuiRawImageComponent GetItemImageComponent(string shortName){
			string itemUrl = shortName;
			if (plugins.Find("ImageLoader")) {itemUrl = $"https://static.moscow.ovh/images/games/rust/icons/{shortName}.png";}
            return GetImageComponent(itemUrl, shortName);
		}
		public bool AddImage(string url,string shortName=""){
			if (plugins.Find("ImageLoader")){				
				plugins.Find("ImageLoader").Call("CheckCachedOrCache", url);
				return true;
			}else
			if (plugins.Find("ImageLibrary")){
				if (string.IsNullOrEmpty(shortName)) shortName=url;
				plugins.Find("ImageLibrary").Call("AddImage", url, shortName);
				//Puts($"Add Image {shortName}");
				return true;
			}	
			return false;		
		}
		
		public static string Translit(string str)
       {

           str = str.Replace("б", "b");
           str = str.Replace("Б", "B");

           str = str.Replace("в", "v");
           str = str.Replace("В", "V");

           str = str.Replace("г", "h");
           str = str.Replace("Г", "H");

           str = str.Replace("ґ", "g");
           str = str.Replace("Ґ", "G");

           str = str.Replace("д", "d");
           str = str.Replace("Д", "D");

           str = str.Replace("є", "ye");
           str = str.Replace("Э", "Ye");

           str = str.Replace("ж", "zh");
           str = str.Replace("Ж", "Zh");

           str = str.Replace("з", "z");
           str = str.Replace("З", "Z");

           str = str.Replace("и", "y");
           str = str.Replace("И", "Y");

           str = str.Replace("ї", "yi");
           str = str.Replace("Ї", "YI");

           str = str.Replace("й", "j");
           str = str.Replace("Й", "J");

           str = str.Replace("к", "k");
           str = str.Replace("К", "K");

           str = str.Replace("л", "l");
           str = str.Replace("Л", "L");

           str = str.Replace("м", "m");
           str = str.Replace("М", "M");

           str = str.Replace("н", "n");
           str = str.Replace("Н", "N");

           str = str.Replace("п", "p");
           str = str.Replace("П", "P");

           str = str.Replace("р", "r");
           str = str.Replace("Р", "R");

           str = str.Replace("с", "s");
           str = str.Replace("С", "S");

           str = str.Replace("ч", "ch");
           str = str.Replace("Ч", "CH");

           str = str.Replace("ш", "sh");
           str = str.Replace("Щ", "SHH");

           str = str.Replace("ю", "yu");
           str = str.Replace("Ю", "YU");

           str = str.Replace("Я", "YA");
           str = str.Replace("я", "ya");

           str = str.Replace('ь', '"');
           str = str.Replace("Ь", "");

           str = str.Replace('т', 't');
           str = str.Replace("Т", "T");

           str = str.Replace('ц', 'c');
           str = str.Replace("Ц", "C");

           str = str.Replace('о', 'o');
           str = str.Replace("О", "O");

           str = str.Replace('е', 'e');
           str = str.Replace("Е", "E");

           str = str.Replace('а', 'a');
           str = str.Replace("А", "A");

           str = str.Replace('ф', 'f');
           str = str.Replace("Ф", "F");

           str = str.Replace('і', 'i');
           str = str.Replace("І", "I");

           str = str.Replace('У', 'U');
           str = str.Replace("у", "u");

           str = str.Replace('х', 'x');
           str = str.Replace("Х", "X");
           str = str.Replace(" ", "_");
           str = str.Replace("~", "_");
           str = str.Replace(":", "_");
           str = str.Replace("'", "_");
           str = str.Replace(">", "_");
           str = str.Replace("<", "_");
           return str;
       }
        #endregion
    }
}

// --- End of file: CapsuleSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SignManager.cs ---
// --- Original Local Path: SignManager.cs ---

﻿using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using System.Linq;
using System;
using System.Drawing;
using System.IO;
 
namespace Oxide.Plugins
{
    [Info("SignManager", "Sempai#3239", "1.0.2", ResourceId = 0)]  
    [Description("User/Admin image management plugin.")]

    class SignManager : RustPlugin  
    {
        const string Font = "robotocondensed-regular.ttf";
        string sprite = "assets/content/textures/generic/fulltransparent.tga";
        
        List<ulong> Buffer = new List<ulong>(); 
        public List<BaseEntity> signs = new List<BaseEntity>();
        Dictionary<ulong, BaseEntity> Back = new Dictionary<ulong, BaseEntity>();
        bool exists(uint ID, uint texture) => storedData.Signs[ID].Where(x => x.InsCRC == texture).Any();

        bool loaded = false;
        void OnServerInitialized() 
        {
            loaded = true;
            cmd.AddChatCommand($"{configData.CommandAlias}", this, "SM");
            cmd.AddChatCommand($"{configData.AdminCommandAlias}", this, "SMA");

            foreach (var sign in BaseNetworkable.serverEntities.OfType<Signage>())
                AddSign(sign);

            foreach (var sign in BaseNetworkable.serverEntities.OfType<PhotoFrame>())
                AddSign(sign);

            foreach (var player in BasePlayer.allPlayerList)  
                OnPlayerConnected(player);

            if (storedData.Export.Count > 0)
                Import(); 

            SaveData();
        }

        private void OnServerSave() => timer.Once(UnityEngine.Random.Range(0f, 10f), SaveData);
         
        void OnPlayerConnected(BasePlayer player)
        {
            if (!storedData.UserID.ContainsKey(player.userID))
                storedData.UserID.Add(player.userID, new List<SignData>());
        }

        void OnSignUpdated(Signage sign, BasePlayer player) => DoSign(sign, player);
        void OnSignUpdated(PhotoFrame frame, BasePlayer player) => DoSign(frame, player);
        void OnEntitySpawned(Signage sign) => AddSign(sign);
        void OnEntitySpawned(PhotoFrame sign) => AddSign(sign);
        void OnEntityDeath(Signage sign) => RemoveSign(sign);
        void OnEntityDeath(PhotoFrame sign) => RemoveSign(sign);
        void OnEntityKill(Signage sign) => RemoveSign(sign);
        void OnEntityKill(PhotoFrame sign) => RemoveSign(sign);

        void DoSign(BaseEntity e, BasePlayer player)
        {
            var id = player.userID;
            Buffer.Add(id);
            Buffer = Buffer.Distinct().ToList();

            timer.Once(0.1f, () =>
            {
                if (player == null || e == null)
                {
                    Buffer.Remove(id);
                    return;
                }
                if (Buffer.Contains(player.userID))
                {
                    bool forplayer = permission.UserHasPermission(player.UserIDString, permAuto) && storedData.UserID[player.userID].Count() < 25;
                    SavePlayerSign(player, e, true, -1, forplayer);
                    Buffer.Remove(id);
                }
            });
        }

        void AddSign(BaseEntity e)  
        {
            if (!loaded)
                return;

            NextTick(() => 
            {
                if (e == null) 
                    return;

                signs.Add(e);
          
                Signage sign = e as Signage; 
                PhotoFrame frame = e as PhotoFrame;
                 
                if (!storedData.Signs.ContainsKey(e.net.ID))
                    storedData.Signs.Add(e.net.ID, new List<SignData>());

                if (sign != null)
                {
                    for (int i = 0; i < sign.textureIDs.Count(); i++)
                    {
                        if (sign.textureIDs[i] != 0)
                        {
                            if (exists(e.net.ID, sign.textureIDs[i]))
                                continue; 

                            var Crcs = ReplaceSign(sign.textureIDs[i], e.net.ID, CommunityEntity.ServerInstance.net.ID, Convert.ToUInt32(i));
                            if (Crcs == null)
                                continue;
                            sign.textureIDs[i] = Crcs[0];
                            storedData.Signs[e.net.ID].Add(new SignData()
                            {
                                InsCRC = Crcs[0],
                                PermaCRC = Crcs[1],
                                layer = Convert.ToUInt32(i),
                                time = DateTime.Now,
                                creator = 0
                            });
                        }
                    }
                }

                if (frame != null && frame._overlayTextureCrc != 0)
                {
                    if (exists(e.net.ID, frame._overlayTextureCrc))
                        return;

                    var Crcs = ReplaceSign(frame._overlayTextureCrc, e.net.ID, CommunityEntity.ServerInstance.net.ID, 0);
                    if (Crcs == null)
                        return;

                    frame._overlayTextureCrc = Crcs[0];
                    storedData.Signs[e.net.ID].Add(new SignData()
                    {
                        InsCRC = Crcs[0],
                        PermaCRC = Crcs[1],
                        layer = 0,
                        time = DateTime.Now,
                        creator = 0
                    });
                }
                sign?.SendNetworkUpdate();
                frame?.SendNetworkUpdate();
           });
        }

        void RemoveSign(BaseEntity sign)
        {
            if (signs.Contains(sign))
                signs.Remove(sign);
        }
        
        bool SavePlayerSign(BasePlayer player, BaseEntity e, bool drawn, int layer, bool p) 
        {
            e = e == null ? GetClosestSign(player) : e;
            if (e == null) 
            {
                MsgUI(player, lang.GetMessage("MoveCloser", this));
                return false;
            }

            if (player.IsBuildingBlocked() && player.userID != e.OwnerID)
            {
                MsgUI(player, lang.GetMessage("NotOwner", this));
                return false;
            }

            var frame = e as PhotoFrame; 
            var sign = e as Signage;
            if (frame == null && sign == null)
            {
                MsgUI(player, lang.GetMessage("MoveCloser", this));
                return false;
            }

            uint[] ids = {0};

            ids = sign == null ? new uint[]{ frame._overlayTextureCrc } : sign.textureIDs;
            for (int i = 0; i < ids.Count(); i++)
            {
                if (layer != -1 && layer != i)
                    continue;

                bool update = storedData.Signs[e.net.ID].Where(x => x.PermaCRC == ids[i]).Any();
                var sds = storedData.Signs[e.net.ID].Where(x => x.InsCRC == ids[i]).ToList();

                if (sds.Any())
                {
                    foreach (var entry in storedData.UserID[player.userID].Where(x => x.PermaCRC == sds[0].PermaCRC))
                        return true;

                    storedData.UserID[player.userID].Add(new SignData()
                    {
                        PermaCRC = sds[0].PermaCRC,
                        time = DateTime.Now,
                        creator = sds[0].creator
                    });
                    return true;
                }

                var Crcs = ReplaceSign(ids[i], e.net.ID, CommunityEntity.ServerInstance.net.ID, Convert.ToUInt32(i)); 
                if (Crcs == null) 
                    continue;

                if (sign == null)
                    frame._overlayTextureCrc = Crcs[0];
                else
                    sign.textureIDs[i] = Crcs[0];

                if (!update)
                {
                    storedData.Signs[e.net.ID].Add(new SignData() 
                    {
                        InsCRC = Crcs[0],
                        PermaCRC = Crcs[1],
                        layer = Convert.ToUInt32(i),
                        time = DateTime.Now,
                        creator = player.userID
                    });

                    if (p) 
                    {
                        MsgUI(player, lang.GetMessage("AutoSaved", this));
                        storedData.UserID[player.userID].Add(new SignData()
                        {
                            PermaCRC = Crcs[1],
                            time = DateTime.Now,
                            creator = player.userID
                        });
                    }
                }
                 
                e.SendNetworkUpdate(); 
            }  
            return true; 
        }

        uint[] ReplaceSign(uint ID, uint entity, uint server, uint layer) 
        {
            var image = FileStorage.server.Get(ID, FileStorage.Type.png, entity, layer); 
            if (image == null)
                return null;

            using (var ms = new MemoryStream(image)) 
            {
                var bmp = new Bitmap(ms);
                var SignSave = FileStorage.server.Store(image.Concat(BitConverter.GetBytes(entity)).ToArray<byte>(), FileStorage.Type.png, entity, layer);
                var ServerSave = FileStorage.server.Store(image, FileStorage.Type.png, server, 0);
                return new uint[] { SignSave, ServerSave };
            }
        }

        bool RestoreSign(BasePlayer player, BaseEntity e, uint ID, uint layer)
        {
            e = e == null ? GetClosestSign(player) : e; 
            if (e == null)
            {
                MsgUI(player, lang.GetMessage("MoveCloser", this));
                return false;
            }

            if (player.IsBuildingBlocked() && player.userID != e.OwnerID)
            {
                MsgUI(player, lang.GetMessage("NotOwner", this)); 
                return false;
            }

            var frame = e as PhotoFrame; 
            var sign = e as Signage;
            
            if (frame == null && sign == null)
            {
                MsgUI(player, lang.GetMessage("MoveCloser", this));
                return false;
            }

            var Crcs = ReplaceSign(ID, e.net.ID, CommunityEntity.ServerInstance.net.ID, layer);
            if (Crcs == null)
                return false;

            if (sign != null)
                sign.textureIDs[layer] = Crcs[0];
            else
                frame._overlayTextureCrc = Crcs[0];
            e.SendNetworkUpdate();

            var record = storedData.Signs[e.net.ID].Where(x => x.PermaCRC == ID && x.layer == layer).ToList();
            if (record.Any())
            {
                record[0].time = DateTime.Now;
                record[0].creator = player.userID;
                return true;
            }

            storedData.Signs[e.net.ID].Add(new SignData()
            {
                InsCRC = Crcs[0],
                PermaCRC = Crcs[1],
                layer = layer,
                time = DateTime.Now,
                creator = player.userID  
            });

            return true;
        }

        BaseEntity GetClosestSign(BasePlayer player)
        {
            List<BaseEntity> signs = new List<BaseEntity>();
            Vis.Entities<BaseEntity>(player.transform.position, 2f, signs);
            BaseEntity s = null;
            var distance = 2.1f;
            foreach (var sign in signs.Where(x=> x is Signage || x is PhotoFrame))
            {
                var d = Vector3.Distance(sign.transform.position, player.transform.position);
                if (d < distance)
                {
                    distance = d;
                    s = sign;
                }
            }
            return s; 
        }

        void Import() 
        {
            storedData.Signs.Clear();
            int counter = 0;
            foreach (var image in storedData.Export)
            {
                foreach (var entry in image.Value)
                {
                    if (entry.data == null)
                        continue;
                    var ID = FileStorage.server.Store(entry.data, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID, entry.layer);
                    counter++;
                }
            }
            if (counter > 0)
            {
                storedData.Export.Clear();
                PrintWarning($"{counter} images have been restored.");
            }
        }

        void Export()  
        {
            List<uint> PermasInUse = new List<uint>();

            foreach (var sign in storedData.Signs)
            {
                foreach (var image in sign.Value)
                    if (FileStorage.server.Get(image.InsCRC, FileStorage.Type.png, sign.Key, 0) != null)
                        PermasInUse.Add(image.PermaCRC);

                foreach (var record in storedData.UserID)
                    foreach (var image in record.Value)
                        PermasInUse.Add(image.PermaCRC);
            }

            PermasInUse = PermasInUse.Distinct().ToList();

            int counter = 0;
            if (PermasInUse.Count > 0)
            {
                storedData.Export.Clear();
                foreach (var image in PermasInUse)
                {
                    if (!storedData.Export.ContainsKey(image))
                        storedData.Export.Add(image, new List<ExportInfo>());

                    for (int i = 0; i < 5; i++)
                    {
                        var file = FileStorage.server.Get(image, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID, Convert.ToUInt32(i));
                        if (file != null)
                        {
                            storedData.Export[image].Add(new ExportInfo() { data = FileStorage.server.Get(image, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID, Convert.ToUInt32(i)), layer = Convert.ToUInt32(i) });
                            counter++;
                        }
                    }
                }
            }
            if (counter > 0)
            {
                PrintWarning($"{counter} images will be restored the next time the server starts.");
                SaveData();
            }
            else
                PrintWarning($"There were no images to save.");
        }

        #region CUI
        void MsgUI(BasePlayer player, string message)
        {
            CuiHelper.DestroyUi(player, "MsgUI");
            timer.Once(2f, () =>
            {
                if (player != null)
                    CuiHelper.DestroyUi(player, "MsgUI");
            });
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { FadeIn = 0.3f, Color = $"0.1 0.1 0.1 0.8" }, RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = "0.95 0.9" }, CursorEnabled = false, FadeOut = 0.3f }, "Overlay", "MsgUI");
            elements.Add(new CuiLabel { FadeOut = 0.5f, Text = { FadeIn = 0.5f, Text = message, Color = "1 1 1 1", FontSize = 28, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" } }, mainName);
            CuiHelper.AddUi(player, elements);
        }

        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
                DestroyMenu(player);

            if (storedData != null)
                SaveData();
        }

        void OnPlayerDisconnected(BasePlayer player) => DestroyMenu(player);

        void DestroyMenu(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "SMUI");
            CuiHelper.DestroyUi(player, "SMAUI");
        } 

        void SMUI(BasePlayer player)
        {
            var sign = GetClosestSign(player);

            if (sign == null)
            {
                MsgUI(player, lang.GetMessage("MoveCloser", this));
                return;
            }

            DestroyMenu(player); 
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = $"0.1 0.1 0.1 0.94" }, RectTransform = { AnchorMin = "0.05 0.15", AnchorMax = "0.95 0.9" }, CursorEnabled = true, FadeOut = 0.1f }, "Overlay", "SMUI");
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0.95", AnchorMax = $"0.999 1" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.999 0.05" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiLabel { Text = { Text = $"{player.displayName} : Sign Manager", FontSize = 16, Font = Font, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            double l1 = 0.11, l2 = 0.25,  h1 = 0.78, h2 = 0.92;
            int column = 0, counter = 0;
            Signage s = sign as Signage;
            PhotoFrame p = sign as PhotoFrame;
            var neon = sign == null ? null : sign as NeonSign;
            var first = s != null ? s.textureIDs[0] : p != null ? p._overlayTextureCrc : 0;

            foreach (var entry in storedData.UserID[player.userID].ToList())
            {
                elements.Add(new CuiButton { Button = { Color = "1 1 1 0.3" }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h1}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, Text = { Text = String.Empty } }, mainName);
                elements.Add(new CuiElement { Parent = mainName, Components = { new CuiRawImageComponent { Png = entry.PermaCRC.ToString(), Sprite = sprite }, new CuiRectTransformComponent { AnchorMin = $"{l1 + column * 0.16} {h1}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, }, });

                if (sign != null)
                {
                    if (neon != null && neon.paintableSources.Count() > 1)
                    {
                        elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 0", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.013} {h2}" }, Text = { Text = "1", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 1", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.015} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.027} {h2}" }, Text = { Text = "2", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 2", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.030} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.042} {h2}" }, Text = { Text = "3", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.paintableSources.Count() > 3)
                        {
                            elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 3", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.045} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.057} {h2}" }, Text = { Text = "4", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                            elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 4", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.060} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.072} {h2}" }, Text = { Text = "5", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        }
                    }
                    else
                        elements.Add(new CuiButton { Button = { Command = $"SM Restore {entry.PermaCRC} 0", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.016} {h2}" }, Text = { Text = "Set" , Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter} }, mainName);
                }  

                elements.Add(new CuiButton { Button = { Command = $"SM Delete {entry.PermaCRC}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l2 + column * 0.16 - 0.014} {h2 - 0.020}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, Text = { Text = "X", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                elements.Add(new CuiButton { Button = { Command = $"", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h1 - 0.02}", AnchorMax = $"{l2 + column * 0.16} {h1}" }, Text = { Text = $"{entry.time}", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

                h1 -= 0.17; h2 -= 0.17;
                counter++;

                if (counter % 5 == 0)
                {
                    column++;
                    h1 = 0.78; h2 = 0.92;
                }
            }

            if (HasPermission(player.UserIDString, permManual)) 
            {
                if (storedData.UserID[player.userID].Count() < 25)
                { 
                    if (neon != null && neon.paintableSources.Count() == 3)
                    {
                        if (neon.textureIDs[0] != 0 && !GotSign(player.userID, neon.textureIDs[0]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 0", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.3 0", AnchorMax = $"0.4 0.05" }, Text = { Text = "Save 1", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[1] != 0 && !GotSign(player.userID, neon.textureIDs[1]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 1", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.45 0", AnchorMax = $"0.55 0.05" }, Text = { Text = "Save 2", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[2] != 0 && !GotSign(player.userID, neon.textureIDs[2]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 2", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.6 0", AnchorMax = $"0.7 0.05" }, Text = { Text = "Save 3", Align = TextAnchor.MiddleCenter } }, mainName);
                    }
                    else if (neon != null && neon.paintableSources.Count() == 5)
                    {
                        if (neon.textureIDs[0] != 0 && !GotSign(player.userID, neon.textureIDs[0]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 0", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.15 0", AnchorMax = $"0.25 0.05" }, Text = { Text = "Save 1", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[1] != 0 && !GotSign(player.userID, neon.textureIDs[1]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 1", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.3 0", AnchorMax = $"0.4 0.05" }, Text = { Text = "Save 2", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[2] != 0 && !GotSign(player.userID, neon.textureIDs[2]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 2", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.45 0", AnchorMax = $"0.55 0.05" }, Text = { Text = "Save 3", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[3] != 0 && !GotSign(player.userID, neon.textureIDs[3]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 3", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.6 0", AnchorMax = $"0.7 0.05" }, Text = { Text = "Save 4", Align = TextAnchor.MiddleCenter } }, mainName);
                        if (neon.textureIDs[4] != 0 && !GotSign(player.userID, neon.textureIDs[4]))
                            elements.Add(new CuiButton { Button = { Command = "SM Save 4", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.75 0", AnchorMax = $"0.85 0.05" }, Text = { Text = "Save 5", Align = TextAnchor.MiddleCenter } }, mainName);
                    }
                    else if (first != 0 && !GotSign(player.userID, first))
                        elements.Add(new CuiButton { Button = { Command = "SM Save -1", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.4 0", AnchorMax = $"0.6 0.05" }, Text = { Text = "Save Image", Align = TextAnchor.MiddleCenter } }, mainName);
                }

            }
            elements.Add(new CuiButton { Button = { Command = "SM Close", Color = configData.ButtonColour }, RectTransform = { AnchorMin = "0.97 0.95", AnchorMax = "1 1" }, Text = { Text = "X", FontSize = 12, Font = Font, Align = TextAnchor.MiddleCenter } }, mainName);
            CuiHelper.AddUi(player, elements);
        }

        bool GotSign(ulong playerid, uint id)
        {
            foreach (var sign in storedData.Signs)
                foreach (var entry in sign.Value.Where(x => x.InsCRC == id))
                    if (storedData.UserID[playerid].Where(x => x.PermaCRC == entry.PermaCRC).Any())
                        return true;
            return false;
        }

        [ConsoleCommand("SM")]
        private void SMCmd(ConsoleSystem.Arg arg)
        {
            if (arg.Player() == null)
                return;

            DestroyMenu(arg.Player());

            switch (arg.Args[0])
            {
                case "Close":
                    break;
                case "Save":
                    if (SavePlayerSign(arg.Player(), null, false, Convert.ToInt16(arg.Args[1]), true))
                        SMUI(arg.Player());
                    break;
                case "Restore":
                    if (RestoreSign(arg.Player(), null, Convert.ToUInt32(arg.Args[1]), Convert.ToUInt32(arg.Args[2])))
                        SMUI(arg.Player());
                    break;
                case "Delete":
                    foreach (var record in storedData.UserID[arg.Player().userID])
                    {
                        if (record.PermaCRC == Convert.ToUInt32(arg.Args[1]))
                        {
                            storedData.UserID[arg.Player().userID].Remove(record);
                            break;
                        }
                    }
                    SMUI(arg.Player());
                    break;
            }
        }

        //// ADMIN
        void SMAUI(BasePlayer player, BaseEntity sign, ulong userID) 
        {
            if (sign == null)
                sign = GetClosestSign(player);

            if (sign == null && userID == 0)
            {
                MsgUI(player, lang.GetMessage("MoveCloserOrSpecify", this));
                return;
            }

            DestroyMenu(player);
            BasePlayer target = BasePlayer.FindAwakeOrSleeping(userID.ToString());
            string name = userID == 0 ? sign.net.ID.ToString() : target == null ? userID.ToString() : target.displayName;
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = $"0.1 0.1 0.1 0.94" }, RectTransform = { AnchorMin = "0.05 0.15", AnchorMax = "0.95 0.9" }, CursorEnabled = true, FadeOut = 0.1f }, "Overlay", "SMAUI");
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0.95", AnchorMax = $"0.999 1" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.999 0.05" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiLabel { Text = { Text = $"{name} : Sign Manager (ADMIN)", FontSize = 16, Font = Font, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            double l1 = 0.11, l2 = 0.25, h1 = 0.78, h2 = 0.92;
            int column = 0, counter = 0;

            List<SignData> record = new List<SignData>();
            if (userID != 0)
                record = storedData.UserID[userID];
            else
            {
                Back[player.userID] = sign;
                record = storedData.Signs[sign.net.ID];
            }

            if (record.Count == 0)
            {
                if (userID != 0)
                    MsgUI(player, lang.GetMessage("NoPlayerHistory", this));
                else
                    MsgUI(player, lang.GetMessage("NoHistory", this));
                return;
            }

            var neon = sign as NeonSign; 
            for (int i = 0; i < Mathf.Min(25, record.Count); i++)
            {
                elements.Add(new CuiButton { Button = { Color = "1 1 1 0.3" }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h1}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, Text = { Text = String.Empty } }, mainName);
                elements.Add(new CuiElement { Parent = mainName, Components = { new CuiRawImageComponent { Png = record[i].PermaCRC.ToString(), Sprite = sprite }, new CuiRectTransformComponent { AnchorMin = $"{l1 + column * 0.16} {h1}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, }, });

                if (neon != null && neon.paintableSources.Count() > 1)
                {  
                    elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 0 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h2 - 0.025}", AnchorMax = $"{l1 + column * 0.16 + 0.015} {h2}" }, Text = { Text = "1", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                    elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 1 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.016} {h2 - 0.025}", AnchorMax = $"{l1 + column * 0.16 + 0.030} {h2}" }, Text = { Text = "2", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                    elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 2 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.031} {h2 - 0.025}", AnchorMax = $"{l1 + column * 0.16 + 0.045} {h2}" }, Text = { Text = "3", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                    if (neon.paintableSources.Count() > 3)
                    {
                        elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 3 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.046} {h2 - 0.025}", AnchorMax = $"{l1 + column * 0.16 + 0.060} {h2}" }, Text = { Text = "4", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 4 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16 + 0.061} {h2 - 0.025}", AnchorMax = $"{l1 + column * 0.16 + 0.075} {h2}" }, Text = { Text = "5", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                    }
                }
                else
                    elements.Add(new CuiButton { Button = { Command = $"SMA Restore {record[i].PermaCRC} 0 {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h2 - 0.02}", AnchorMax = $"{l1 + column * 0.16 + 0.016} {h2}" }, Text = { Text = "Set", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
   
                elements.Add(new CuiButton { Button = { Command = $"SMA Delete {record[i].PermaCRC} {userID}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l2 + column * 0.16 - 0.015} {h2 - 0.025}", AnchorMax = $"{l2 + column * 0.16} {h2}" }, Text = { Text = "X", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                elements.Add(new CuiButton { Button = { Command = $"SMA Player {record[i].creator}", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"{l1 + column * 0.16} {h1 - 0.02}", AnchorMax = $"{l2 + column * 0.16} {h1}" }, Text = { Text = $"{record[i].creator}", Font = Font, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

                h1 -= 0.17; h2 -= 0.17;
                counter++;
                 
                if (counter % 5 == 0)
                {
                    column++;
                    h1 = 0.78; h2 = 0.92;
                }
            }

            if (userID != 0 && Back.ContainsKey(player.userID) && Back[player.userID] != null)
                elements.Add(new CuiButton { Button = { Command = "SMA Back", Color = configData.ButtonColour }, RectTransform = { AnchorMin = $"0.2 0", AnchorMax = $"0.3 0.05" }, Text = { Text = "<-", Align = TextAnchor.MiddleCenter } }, mainName);

            elements.Add(new CuiButton { Button = { Command = "SMA Close", Color = configData.ButtonColour }, RectTransform = { AnchorMin = "0.97 0.95", AnchorMax = "1 1" }, Text = { Text = "X", FontSize = 12, Font = Font, Align = TextAnchor.MiddleCenter } }, mainName);
            CuiHelper.AddUi(player, elements);
        }

        [ConsoleCommand("SMA")]
        private void SMACmd(ConsoleSystem.Arg arg)  
        {
            if (arg.Player() == null)
            {
                if (arg.Args[0] == "export")
                    Export();
                return;
            }

            DestroyMenu(arg.Player());

            switch (arg.Args[0])
            {
                case "Close":
                    if (Back.ContainsKey(arg.Player().userID)) 
                        Back.Remove(arg.Player().userID);
                    break;
                case "Back":
                    SMAUI(arg.Player(), Back[arg.Player().userID], 0);
                    break;
                case "Player":
                    SMAUI(arg.Player(), null, Convert.ToUInt64(arg.Args[1]));
                    break;
                case "Restore": 
                    if (RestoreSign(arg.Player(), null, Convert.ToUInt32(arg.Args[1]), Convert.ToUInt32(arg.Args[2])))
                        SMAUI(arg.Player(), GetClosestSign(arg.Player()), Convert.ToUInt64(arg.Args[3]));
                    break;
                case "Delete": ////Does the whole sign?
                    var id = Convert.ToUInt32(arg.Args[1]);

                    foreach (var record in storedData.UserID.ToList())
                        foreach (var entry in record.Value.ToList())
                            if (entry.PermaCRC == id)
                                storedData.UserID[record.Key].Remove(entry);

                    foreach (var record in storedData.Signs.ToList()) 
                        foreach (var s in record.Value.ToList())
                            if (s.PermaCRC == id)
                            {
                                FileStorage.server.Remove(s.InsCRC, FileStorage.Type.png, record.Key);
                                storedData.Signs[record.Key].Remove(s);
                            }

                    FileStorage.server.Remove(id, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID);

                    Signage sign; 
                    PhotoFrame frame;
                    foreach (var s in signs) 
                    {
                        sign = s as Signage;
                        frame = s as PhotoFrame;
                        if (sign != null)
                            for (int i = 0; i < sign.textureIDs.Count(); i++)
                                if (FileStorage.server.Get(sign.textureIDs[i], FileStorage.Type.png, s.net.ID, Convert.ToUInt32(i)) == null)
                                    sign.textureIDs[i] = 0;

                        if (frame != null)
                            if (FileStorage.server.Get(frame._overlayTextureCrc, FileStorage.Type.png, s.net.ID, 0) == null)
                                frame._overlayTextureCrc = 0;

                        s.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                    }
                    SMAUI(arg.Player(), GetClosestSign(arg.Player()), Convert.ToUInt64(arg.Args[2]));
                    break;
            }
        }
        #endregion

        #region Permissions and Lang
        const string permAdmin = "SignManager.admin";
        const string permAuto = "SignManager.autosave";  
        const string permManual = "SignManager.manualsave";

        bool HasPermission(string id, string perm) => permission.UserHasPermission(id, perm);

        readonly Dictionary<string, string> Messages = new Dictionary<string, string>()
        {
            {"Title", "SignManager : " },
            {"MoveCloser", "Move closer to a sign or frame." },
            {"MoveCloserOrSpecify", "Move closer to a sign or frame, or specify a SteamID." },
            {"Blank", "This sign or frame is blank." },
            {"NoHistory", "This sign has no image history." },
            {"NoPlayerHistory", "This player has no image history." },
            {"NotOwner", "You need to own this sign, or have building priv." },
            {"AutoSaved", "Your image has been autosaved. Use /sm to view or manage." },
        };

        void Init()
        {
            if (!LoadConfigVariables())
            {
                Puts("Config file issue detected. Please delete file, or check syntax and fix.");
                return;
            }

            lang.RegisterMessages(Messages, this);
            permission.RegisterPermission(permAdmin, this);
            permission.RegisterPermission(permAuto, this);
            permission.RegisterPermission(permManual, this);
        }
        #endregion

        #region Commands
        [ChatCommand("sm")]
        void SM(BasePlayer player, string command, string[] args) 
        {
            if (!HasPermission(player.UserIDString, permAuto) && !HasPermission(player.UserIDString, permManual))
                return;
            SMUI(player);
        }

        [ChatCommand("sma")]
        void SMA(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player.UserIDString, permAdmin) && !player.IsAdmin)
                return;

            ulong id = 0;
            if (args.Length == 1)
            {
                if (args[0] == "export") 
                {
                    Export();
                    return;
                }
                ulong.TryParse(args[0], out id); 
            }
              
            SMAUI(player, GetClosestSign(player), id);
        }
        #endregion

        #region Data
        StoredData storedData;
        class StoredData
        {
            public Dictionary<uint, List<SignData>> Signs = new Dictionary<uint, List<SignData>>();
            public Dictionary<ulong, List<SignData>> UserID = new Dictionary<ulong, List<SignData>>();
            public Dictionary<uint, List<ExportInfo>> Export = new Dictionary<uint, List<ExportInfo>>();
        }

        public class ExportInfo
        {
            public byte[] data;
            public UInt32 layer;
        }

        public class SignData
        {
            public uint PermaCRC;
            public uint InsCRC;
            public UInt32 layer;
            public DateTime time;
            public ulong creator = 0;
        }

        void Loaded() => storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>("SignManager");
        void SaveData() => Interface.Oxide.DataFileSystem.WriteObject("SignManager", storedData);
        #endregion

        #region Config
        //LoadConfigVariables - See Init()
        private ConfigData configData;

        class ConfigData
        {
            public string CommandAlias = "SignManager";
            public string AdminCommandAlias = "SignManagerAdmin";
            public string ButtonColour = "0.7 0.32 0.17 1";
        }

        private bool LoadConfigVariables()
        {
            try { configData = Config.ReadObject<ConfigData>(); }
            catch { return false; }
            SaveConf();
            return true;
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Creating new config file.");
            configData = new ConfigData();
            SaveConf();
        }

        void SaveConf() => Config.WriteObject(configData, true);
        #endregion
    }
}

// --- End of file: SignManager.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TPBattlePass.cs ---
// --- Original Local Path: TPBattlePass.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using Oxide.Plugins.TPExtensionMethods;

namespace Oxide.Plugins
{
    [Info("TPBattle Pass", "Sempai#3239", "2.0.2")]
    internal class  TPBattlePass : RustPlugin
    {
        #region Static

        [PluginReference] private Plugin ImageLibrary, TPApi;
        private Configuration _config;
        private const string Layer = "UI_BATTLEPASS_MAINLAYER";
        private const string perm = "tpbattlepass.vip";
        private const string perm1 = "tpbattlepass.exp";

        #endregion

        #region Config

        private class Configuration
        {
            [JsonProperty("Настройка очков")] public readonly PointSettings Point = new PointSettings();

            [JsonProperty("Настройка уровней")]
            public readonly LevelSettings LevelDefault = new LevelSettings();

            [JsonProperty("Настройка для донатеров")]
            public readonly LevelSettings LevelDonate = new LevelSettings();

            internal class LevelSettings
            {

                [JsonProperty(PropertyName = "Список уровней", ObjectCreationHandling = ObjectCreationHandling.Replace)]
                public readonly List<Settings> LevelList = new List<Settings>
                {
                    new Settings
                    {
                        Level = 1,
                        Exp = 1000,
                        DisplayName = "Хуй",
                        Image = "https://imgur.com/v6ukkYu.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 2,
                        Exp = 1000,
                        DisplayName = "Калашик x1",
                        Image = "https://imgur.com/v6ukkYu.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 3,
                        Exp = 1000,
                        DisplayName = "Пизда",
                        Image = "https://imgur.com/TLnshuH.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 4,
                        Exp = 1000,
                        DisplayName = "Залупа",
                        Image = "https://imgur.com/rDKxKR9.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 5,
                        Exp = 1000,
                        DisplayName = "Бомба x5",
                        Image = "https://imgur.com/rDKxKR9.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 6,
                        Exp = 1000,
                        DisplayName = "Хуй x2",
                        Image = "https://imgur.com/n5q3CGI.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 7,
                        Exp = 1000,
                        DisplayName = "Пенис",
                        Image = "https://imgur.com/nzNBKTf.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 8,
                        Exp = 1000,
                        DisplayName = "Точка G",
                        Image = "https://imgur.com/n5q3CGI.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 9,
                        Exp = 1000,
                        DisplayName = "Дорого",
                        Image = "https://imgur.com/nzNBKTf.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 10,
                        Exp = 1000,
                        DisplayName = "Блядина",
                        Image = "https://imgur.com/rDKxKR9.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 11,
                        Exp = 1000,
                        DisplayName = "Шмара x5",
                        Image = "https://imgur.com/n5q3CGI.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    },
                    new Settings
                    {
                        Level = 12,
                        Exp = 1000,
                        DisplayName = "Мужик",
                        Image = "https://imgur.com/nzNBKTf.png",
                        Reward = new Settings.RewardSettings
                        {
                            ShortName = "rifle.ak",
                            Amount = 1,
                            SkinID = 0,
                            command = new List<string>()
                            {
                                "givecoin %STEAMID% 10",
                                "o.grant user %STEAMID% kits.vip"
                            }

                        }
                    }
                };

                internal class Settings
                {
                    [JsonProperty("Level Number")] public int Level;

                    [JsonProperty("Number Of Exp To Get This Level")]
                    public int Exp;

                    [JsonProperty("DisplayName")] public string DisplayName;

                    [JsonProperty("Award Display Image")]
                    public string Image;

                    [JsonProperty("Level Award")] public RewardSettings Reward;

                    internal class RewardSettings
                    {
                        [JsonProperty("ShortName")] public string ShortName;
                        [JsonProperty("Amount")] public int Amount;
                        [JsonProperty("SkinID")] public ulong SkinID;

                        [JsonProperty("Commands To Be Executed")]
                        public List<string> command;
                    }
                }
            }

            internal class PointSettings
            {
                [JsonProperty("Donator Point Multiplier")]
                public readonly int DonateAmount = 1;

                [JsonProperty("Количество Очков За Убийство Игрока")]
                public readonly int killPlayer = 1;

                [JsonProperty("Количество Очков За Убийство Животных")]
                public readonly int killHuman = 1;

                [JsonProperty("Количество Очков За Уничтожение вертолета")]
                public readonly int killHeli = 1;

                [JsonProperty("Количество Очков за Убийство NPC")]
                public readonly int killNPC = 1;

                [JsonProperty("Количество Очков за Уничтожение Танка")]
                public readonly int killBredly = 1;

                [JsonProperty("Количество Очков, Вычитаемых За Смерть")]
                public readonly int deathPlayer = 1;

                [JsonProperty("Настройки фарма")] public readonly GatherSettings Gather = new GatherSettings();
            }

            internal class GatherSettings
            {
                [JsonProperty(PropertyName = "Настройка фарма(Краткое название/Количество Очков)", ObjectCreationHandling = ObjectCreationHandling.Replace)]
                public readonly Dictionary<string, int> GatherList = new Dictionary<string, int>
                {
                    ["wood"] = 2
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration();
        }

        #endregion

        #region OxideHooks

        void OnServerInitialized()
        {
            PrintWarning("CUSTOM PLUGINS========Discord: Sempai#3239");
            ImageLibrary.Call("AddImage", "https://i.ibb.co/Y73v4mG/65a18f7d8d721-1705086895-65a18f7d8d719-1.png", "4oktSYU");
            ImageLibrary.Call("AddImage", "https://i.ibb.co/sVwYjx2/VLVR47D.png", "VLVR47D");
            ImageLibrary.Call("AddImage", "https://i.ibb.co/fGGpZp9/NcpsEhm.png", "NcpsEhm");
            ImageLibrary.Call("AddImage", "https://i.ibb.co/r72XTfx/mbdM6pM.png", "mbdM6pM");
            ImageLibrary.Call("AddImage", "https://i.ibb.co/r50g4CF/HNOe293.png", "HNOe293");
            LoadData();
            permission.RegisterPermission(perm, this);
            permission.RegisterPermission(perm1, this);
            foreach (var check in _config.LevelDefault.LevelList)
                ImageLibrary?.Call("AddImage", check.Image, check.Image);
            foreach (var check in _config.LevelDonate.LevelList)
                ImageLibrary?.Call("AddImage", check.Image, check.Image);
            foreach (var check in BasePlayer.activePlayerList)
                OnPlayerConnected(check);
        }

        void OnPlayerConnected(BasePlayer player)
        {
            if (player == null) return;
            if (!_data.ContainsKey(player.userID))
                _data.Add(player.userID, new Data());
        }

        private void Unload()
        {
            SaveData();
        }

        private object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (item == null || player == null) return null;
            if (!_config.Point.Gather.GatherList.ContainsKey(item.info.shortname)) return null;
            GivePoint(player.userID, _config.Point.Gather.GatherList[item.info.shortname]);
            return null;
        }

      

        private readonly Dictionary<NetworkableId, ulong> LastHeliHit = new Dictionary<NetworkableId, ulong>();

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return null;
            var player = info.InitiatorPlayer;
            if (player == null) return null;
            if (entity is BaseHelicopter && info.Initiator is BasePlayer)
            {
                if (!LastHeliHit.ContainsKey(entity.net.ID))
                    LastHeliHit.Add(entity.net.ID, info.InitiatorPlayer.userID);
                LastHeliHit[entity.net.ID] = info.InitiatorPlayer.userID;
            }

            return null;
        }
        private void OnEntityDeath(PatrolHelicopter entity, HitInfo info)
        {
            if (entity is null || info is null) return;
            
            BasePlayer player = info.InitiatorPlayer ? info.InitiatorPlayer : entity.myAI?._targetList?.TPLast()?.ply;

            if (player is not null && !player.IsNpc && entity.ToPlayer() != player)
            {
                GivePoint(player.userID, _config.Point.killHeli);
                return;
            }
        }
        private void OnEntityDeath(BaseEntity entity, HitInfo info)
        {
            if (entity == null || info == null || info.InitiatorPlayer == null) return;
            var player = info.InitiatorPlayer;
            if (entity as BaseAnimalNPC)
            {
                GivePoint(player.userID, _config.Point.killHuman);
                return;
            }

            if (entity as BaseHelicopter)
            {
                if (!LastHeliHit.ContainsKey(entity.net.ID)) return;
                GivePoint(LastHeliHit[entity.net.ID], _config.Point.killHeli);
                return;
            }

            if (entity as BradleyAPC)
            {
                GivePoint(player.userID, _config.Point.killBredly);
                return;
            }

            if (entity as NPCPlayer || entity as ScientistNPC || entity.IsNpc)
            {
                GivePoint(player.userID, _config.Point.killNPC);
                return;
            }

            if (entity.ToPlayer() == null) return;
            if (entity.ToPlayer().userID != player.userID)
            {
                GivePoint(player.userID, _config.Point.killPlayer);
            }

            if (!_data.ContainsKey(entity.ToPlayer().userID)) return;
            if (info.InitiatorPlayer == null) return;
            if (info.InitiatorPlayer.IsNpc) return;
            _data[entity.ToPlayer().userID].Score -= _config.Point.deathPlayer;
        }

        #endregion

        #region Data

        private Dictionary<ulong, Data> _data;

        private class Data
        {
            public int Level;
            public int Score;
            public readonly List<int> DefaultRewardID = new List<int>();
            public readonly List<int> DonateRewardID = new List<int>();
        }

        private void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile($"{Name}/PlayerData"))
                _data = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Data>>(
                    $"{Name}/PlayerData");
            else _data = new Dictionary<ulong, Data>();
            Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerData", _data);
        }

        private void OnServerSave()
        {
            SaveData();
        }

        private void SaveData()
        {
            if (_data != null)
                Interface.Oxide.DataFileSystem.WriteObject($"{Name}/PlayerData", _data);
        }

        #endregion

        #region Commands

        [ConsoleCommand("UI_BATTLEPASS_GETREWARDDEFULT")]
        private void cmdChatUI_BATTLEPASS_GETREWARD(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            var id = int.Parse(arg.Args[0]);
            var page = int.Parse(arg.Args[1]);
            var settings = _config.LevelDefault.LevelList.FirstOrDefault(p => p.Level == id);
            var reward = settings.Reward;
            _data[player.userID].DefaultRewardID.Add(id);
            ShowUIMain(player, page);

            if (!string.IsNullOrEmpty(reward.ShortName))
            {
                var item = ItemManager.CreateByName(reward.ShortName, reward.Amount, reward.SkinID);
                player.GiveItem(item);
            }

            if (reward.command.Count <= 0) return;
            for (var index = 0; index < reward.command.Count; index++)
            {
                var check = reward.command[index];
                rust.RunServerCommand(check.Replace("%STEAMID%", player.UserIDString));
            }

        }

        [ChatCommand("pass")]
        private void cmdChatpass(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ChatCommand("lvl")]
        private void cmdChatpa22ss(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ChatCommand("level")]
        private void cmdChatpas2s(BasePlayer player, string command, string[] args)
        {
            ShowUIMain(player, 0);
        }

        [ConsoleCommand("UI_BATTLEPASS_GETREWARDDONATE")]
        private void cmdChatUI_BATTLEPASS_DDONATE(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            var id = int.Parse(arg.Args[0]);
            var page = int.Parse(arg.Args[1]);
            var settings = _config.LevelDonate.LevelList.FirstOrDefault(p => p.Level == id);
            var reward = settings.Reward;
            _data[player.userID].DonateRewardID.Add(id);
            ShowUIMain(player, page);
            if (!string.IsNullOrEmpty(reward.ShortName))
            {
                var item = ItemManager.CreateByName(reward.ShortName, reward.Amount, reward.SkinID);
                player.GiveItem(item);
            }

            if (reward.command.Count <= 0) return;
            for (var index = 0; index < reward.command.Count; index++)
            {
                var check = reward.command[index];
                rust.RunServerCommand(check.Replace("%STEAMID%", player.UserIDString));
            }
        }

        [ConsoleCommand("givepoint")]
        private void cmdChatgivepoint(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.Args?.Length != 2)
            {
                PrintError(
                    "You are not using the command correctly. Example: givepoint STEAMID Quantity");
                return;
            }

            var player = arg.Player();
            if (arg.Connection != null)
                if (!player.IsAdmin)
                    return;
            var userID = ulong.Parse(arg.Args[0]);
            var amount = int.Parse(arg.Args[1]);
            GivePoint(userID, amount);

        }

        [ConsoleCommand("UI_BATTLEPASS_CHANGEPAGE")]
        private void cmdChatUI_BATTLEPASS_CHANGEPAGE(ConsoleSystem.Arg arg)
        {
            var player = arg?.Player();
            if (arg == null || arg.Args.Length == 0)
            {
                player.ChatMessage("Wrong number");
                return;
            }

            var page = int.Parse(arg.Args[0]);
            ShowUIMain(player, page);
        }

        #endregion

        #region Function

        private void GivePoint(ulong userid, int amount)
        {
            if (!_data.ContainsKey(userid)) return;
            if (permission.UserHasPermission(userid.ToString(), perm1))
                amount *= _config.Point.DonateAmount;
            var data = _data[userid];
            var settings = _config.LevelDefault.LevelList.FirstOrDefault(p => p.Level == data.Level + 1);
            if (settings == null) return;

            data.Score += amount;
            if (data.Score < settings.Exp) return;
            data.Level++;
            data.Score -= settings.Exp;
            GivePoint(userid, 0);
            TPApi.Call("ShowGameTipForPlayer", BasePlayer.FindByID(userid), 1, "Вы получили новый уровень");
        }

        #endregion
        
        void ShowUIMain(BasePlayer player, int page)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();
            var d = _data[player.userID];
            
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0", Material = "assets/content/ui/uibackgroundblur.mat", Sprite = "assets/content/ui/ui.background.transparent.radial.psd" }
            }, "Overlay", Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiElement
            {
                Name = Layer + ".Main",
                Parent = Layer,
                Components = {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "4oktSYU"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-640 -360", OffsetMax = "642 362" },
                }
            }); 

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.193 0.455", AnchorMax = "0.21 0.59", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer + ".Main", "standart");

            container.Add(new CuiElement
            {
                Parent = "standart",
                Components = {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "NcpsEhm"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                }
            }); 

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.193 0.275", AnchorMax = "0.21 0.41", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer + ".Main", "prem");

            container.Add(new CuiElement
            {
                Parent = "prem",
                Components = {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", permission.UserHasPermission(player.UserIDString, perm) ? "mbdM6pM" : "HNOe293"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                }
            }); 

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8 0.804", AnchorMax = "0.817 0.832", OffsetMax = "0 0" },
                Button = { Close = Layer, Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer + ".Main");

            #region body

            var levels = _config.LevelDefault.LevelList.Skip(page * 8).Take(8);
            var donate = _config.LevelDonate.LevelList.Skip(page * 8).Take(8);

            container.Add(new CuiPanel
            {
                RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "198 -561", OffsetMax = "1087 -290"},
                //RectTransform = {AnchorMin = "0.165 0.3", AnchorMax = "0.8 0.55", OffsetMax = "0 0"},
                Image = {Color = "0 0 0 0"}
            }, Layer, Layer + ".rewards");

            float width = 0.1038f, height = 0.35f, startxBox = 0.09f, startyBox = 0.98f - height, xmin = startxBox, ymin = startyBox;
            foreach (var check in levels)
            {
                var lvl = check.Level;
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin} {ymin}", AnchorMax = $"{xmin + width} {ymin + height * 1}", OffsetMin = "2 1", OffsetMax = "-2 0" },
                    Image = { Color = "0 0 0 0" },
                }, Layer + ".rewards", Layer + ".rewards" + lvl);
                xmin += width + 0.003f;
                if (xmin + width >= 1)
                {
                    xmin = startxBox;
                    ymin -= height;
                }

                var color = d.DefaultRewardID.Contains(check.Level) ? "1 1 1 0.3" : "1 1 1 1";
                container.Add(new CuiElement
                {
                    Parent = Layer + ".rewards" + lvl,
                    Components =
                    {
                        new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), Color = color, FadeIn = 0.5f},
                        new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"}
                    }
                });

                var text = !d.DefaultRewardID.Contains(check.Level) && check.Level <= d.Level ? "Получить" : check.DisplayName;
                container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 0.03", AnchorMax = "1 1", OffsetMax = "0 0"},
                    Text =
                    {
                        Text = text, Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.LowerCenter,
                        Color = "1 1 1 1", FadeIn = 0.5f
                    }
                }, Layer + ".rewards" + lvl);

                if (!d.DefaultRewardID.Contains(check.Level) && check.Level <= d.Level)
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", "VLVR47D"), FadeIn = 0.5f},
                            new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"}
                        }
                    });
                    container.Add(new CuiButton
                    {
                        RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"},
                        Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDEFULT {check.Level} {page}", FadeIn = 0.5f},
                        Text = {Text = ""}
                    }, Layer + ".rewards" + lvl);
                }
            }

            float width1 = 0.1038f, height1 = 0.35f, startxBox1 = 0.09f, startyBox1 = 0.5f - height1, xmin1 = startxBox1, ymin1 = startyBox1;
            foreach (var check in donate)
            {
                var lvl = check.Level;
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin1} {ymin1}", AnchorMax = $"{xmin1 + width1} {ymin1 + height1 * 1}", OffsetMin = "2 2", OffsetMax = "-2 0" },
                    Image = { Color = "0 0 0 0" },
                }, Layer + ".rewards", Layer + ".rewards" + lvl);
                xmin1 += width1 + 0.003f;
                if (xmin1 + width1 >= 1)
                {
                    xmin1 = startxBox1;
                    ymin1 -= height1;
                }

                var color = d.DonateRewardID.Contains(check.Level) ? "1 1 1 0.3" : permission.UserHasPermission(player.UserIDString, perm) ? "1 1 1 1" : "1 1 1 0.3";
                container.Add(new CuiElement
                {
                    Parent = Layer + ".rewards" + lvl,
                    Components =
                    {
                        new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", check.Image), Color = color, FadeIn = 0.5f},
                        new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"}
                    }
                });

                var text = !d.DonateRewardID.Contains(check.Level) && check.Level <= d.Level && permission.UserHasPermission(player.UserIDString, perm) ? "Получить" : check.DisplayName;
                container.Add(new CuiLabel
                {
                    RectTransform = {AnchorMin = "0 0.03", AnchorMax = "1 1", OffsetMax = "0 0"},
                    Text =
                    {
                        Text = text, Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.LowerCenter,
                        Color = "1 1 1 1", FadeIn = 0.5f
                    }
                }, Layer + ".rewards" + lvl);

                if (!d.DonateRewardID.Contains(check.Level) && check.Level <= d.Level && permission.UserHasPermission(player.UserIDString, perm))
                {
                    container.Add(new CuiElement
                    {
                        Parent = Layer + ".rewards" + lvl,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (String) ImageLibrary.Call("GetImage", "VLVR47D"), FadeIn = 0.5f},
                            new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"}
                        }
                    });
                    container.Add(new CuiButton
                    {
                        RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0"},
                        Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_GETREWARDDONATE {check.Level} {page}", FadeIn = 0.5f},
                        Text = {Text = ""}
                    }, Layer + ".rewards" + lvl);
                }
            }

            float width2 = 0.02f, height2 = 0.035f, startxBox2 = 0.182f, startyBox2 = 0.125f - height2, xmin2 = startxBox2, ymin2 = startyBox2;
            foreach (var check in levels)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin2} {ymin2}", AnchorMax = $"{xmin2 + width2} {ymin2 + height2 * 1}", OffsetMin = "2 0", OffsetMax = "-2 0" },
                    Image = { Color = "0 0 0 0" },
                }, Layer + ".rewards", Layer + ".rewards" + check.Level);
                xmin2 += width2 + 0.087f;

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Level}", Color = "1 1 1 0.4", Align = TextAnchor.MiddleCenter, FontSize = 8, Font = "robotocondensed-regular.ttf" }
                }, Layer + ".rewards" + check.Level);
            }

            #endregion
            string text1 = "";
            if(d.Level < _config.LevelDefault.LevelList.Last().Level)
                text1 = $"{d.Score}/{_config.LevelDefault.LevelList[d.Level].Exp}Exp";
            container.Add(new CuiElement
            {
                Parent = Layer + ".Main",
                Components =
                {
                    new CuiTextComponent
                    {
                        Text = $"{text1}",
                        FontSize = 12,
                        Align = TextAnchor.MiddleCenter,
                        Color = "1 1 1 1",
                    },

                    new CuiRectTransformComponent
                    {
                       AnchorMin = "0.68 0.608", AnchorMax = "0.755 0.637"
                    },
                }
            });
            if (page > 0)
                container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "0.7627 0.601", AnchorMax = "0.785 0.644", OffsetMax = "0 0"},
                    Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_CHANGEPAGE {page - 1}"},
                    Text = {Text = ""}
                }, Layer + ".Main");
            
            if (_config.LevelDefault.LevelList.Count - 8 * (page + 1) > 0)
                container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "0.787 0.601", AnchorMax = "0.8101 0.644", OffsetMax = "0 0"},
                    Button = {Color = "0 0 0 0", Command = $"UI_BATTLEPASS_CHANGEPAGE {page + 1}"},
                    Text = {Text = ""}
                }, Layer + ".Main");

            CuiHelper.AddUi(player, container);
        }
    }
}

namespace Oxide.Plugins.TPExtensionMethods
{
    public static class ExtensionMethods
    {
        public static TSource TPLast<TSource>(this IList<TSource> source) => source[source.Count - 1];
    }
}

// --- End of file: TPBattlePass.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/VisualCupboard.cs ---
// --- Original Local Path: VisualCupboard.cs ---

using System;

using Oxide.Core;
using UnityEngine;
using System.Collections.Generic;
using Oxide.Core.Plugins;
namespace Oxide.Plugins
{
     	[Info("VisualCupboard", "Colon Blow", "1.0.7", ResourceId = 2030)]
    	class VisualCupboard : RustPlugin
     	{
		void OnServerInitialized() { serverInitialized = true; }

        	void Loaded()
        	{
			LoadVariables();
			serverInitialized = true;
			lang.RegisterMessages(messages, this);
			permission.RegisterPermission("visualcupboard.allowed", this);
			permission.RegisterPermission("visualcupboard.admin", this);
		}

        	void LoadDefaultConfig()
        	{
            		Puts("Creating a new config file");
            		Config.Clear();
            		LoadVariables();
        	}

       	 	Dictionary<string, string> messages = new Dictionary<string, string>()
        	{
			{"notallowed", "You are not allowed to access that command." }
        	};

	////////////////////////////////////////////////////////////////////////////////////////////
	//	Configuration File
	////////////////////////////////////////////////////////////////////////////////////////////

		bool Changed;

		private static float UseCupboardRadius = 25f;

		bool ShowOnlyOwnCupboards = false;
		bool ShowRadiusWhenDeploying = false;

		float DurationToShowRadius = 60f;
		float ShowCupboardsWithinRangeOf = 50f;

		bool AdminShowOwnerID = false;

		private static bool serverInitialized = false;

        	private void LoadConfigVariables()
        	{
        		CheckCfgFloat("My Cupboard Radius is (25 is default)", ref UseCupboardRadius);
			
        		CheckCfg("Show Visuals On OWN Cupboards Only", ref ShowOnlyOwnCupboards);
			CheckCfg("Show Visuals When Placing Cupboard", ref ShowRadiusWhenDeploying);

        		CheckCfgFloat("Show Visuals On Cupboards Withing Range Of", ref ShowCupboardsWithinRangeOf);
			CheckCfgFloat("Show Visuals For This Long", ref DurationToShowRadius);

			CheckCfg("Admin : Show Cupboard Owners ID", ref AdminShowOwnerID);
        	}

        	private void LoadVariables()
        	{
            		LoadConfigVariables();
            		SaveConfig();
        	}

        	private void CheckCfg<T>(string Key, ref T var)
        	{
            	if (Config[Key] is T)
              		var = (T)Config[Key];
           	else
                	Config[Key] = var;
        	}

        	private void CheckCfgFloat(string Key, ref float var)
        	{

            	if (Config[Key] != null)
                	var = Convert.ToSingle(Config[Key]);
            	else
                	Config[Key] = var;
        	}

        	object GetConfig(string menu, string datavalue, object defaultValue)
        	{
            		var data = Config[menu] as Dictionary<string, object>;
            		if (data == null)
            		{
                		data = new Dictionary<string, object>();
                		Config[menu] = data;
                		Changed = true;
           		}

            		object value;
            		if (!data.TryGetValue(datavalue, out value))
            		{
                		value = defaultValue;
                		data[datavalue] = value;
                		Changed = true;
            		}
            		return value;
       		}

	////////////////////////////////////////////////////////////////////////////////////////////
	//	Sphere entity used for Visual Cupboard Radius
	////////////////////////////////////////////////////////////////////////////////////////////

	class ToolCupboardSphere : MonoBehaviour
		{

			
			BaseEntity sphere;
			BaseEntity entity;

			Vector3 pos = new Vector3(0, 0, 0);
			Quaternion rot = new Quaternion();
			string strPrefab = "assets/prefabs/visualization/sphere.prefab";

			void Awake()
			{
				entity = GetComponent<BaseEntity>();
				sphere = GameManager.server.CreateEntity(strPrefab, pos, rot, true);
				SphereEntity ball = sphere.GetComponent<SphereEntity>();
				ball.currentRadius = 1f;
				ball.lerpRadius = 2.0f*UseCupboardRadius;
				ball.lerpSpeed = 100f;

				sphere.SetParent(entity, "");
				sphere?.Spawn();
			}

           	 	void OnDestroy()
            		{
				if (sphere == null) return;
               			sphere.Kill(BaseNetworkable.DestroyMode.None);
            		}

		}

	////////////////////////////////////////////////////////////////////////////////////////////
	//	When player places a cupbaord, a Visual cupboard radius will pop up
	////////////////////////////////////////////////////////////////////////////////////////////

		void OnEntitySpawned(BaseEntity entity, UnityEngine.GameObject gameObject)
		{
			if (!serverInitialized) return;
			if (!ShowRadiusWhenDeploying) return;
			if (entity == null) return;

			if (ShowRadiusWhenDeploying) 
			{
				if (entity.name.Contains("cupboard.tool"))
				{
					var player = BasePlayer.FindByID(entity.OwnerID);
					if (player != null)
					{
						if (!isAllowed(player, "visualcupboard.allowed")) return;
            					var sphereobj = entity.gameObject.AddComponent<ToolCupboardSphere>();
						GameManager.Destroy(sphereobj, DurationToShowRadius);	
						return;
					}
				}
			}
			else return;
		}

	////////////////////////////////////////////////////////////////////////////////////////////
	//	When player runs chat command, shows Cupboard Radius of nearby Tool Cupboards
	////////////////////////////////////////////////////////////////////////////////////////////
		
		[ChatCommand("showsphere")]
        	void cmdChatShowSphere(BasePlayer player, string command)
		{	
			if (isAllowed(player, "visualcupboard.allowed"))
			{
				bool ShowAdmin = false;
				if (isAllowed(player, "visualcupboard.admin")) { ShowAdmin = true; }

				List<BaseCombatEntity> cblist = new List<BaseCombatEntity>();
				Vis.Entities<BaseCombatEntity>(player.transform.position, ShowCupboardsWithinRangeOf, cblist);
			
				foreach (BaseCombatEntity bp in cblist)
				{
					if (bp is BuildingPrivlidge)
					{
						if (bp.GetComponent<ToolCupboardSphere>() == null)
						{
							Vector3 pos = bp.transform.position;
							
							if (!ShowAdmin)
							{
								if ((ShowOnlyOwnCupboards) && (player.userID != bp.OwnerID)) return;
								var sphereobj = bp.gameObject.AddComponent<ToolCupboardSphere>();
								GameManager.Destroy(sphereobj, DurationToShowRadius);
							}
							if (ShowAdmin)
							{
								var sphereobj = bp.gameObject.AddComponent<ToolCupboardSphere>();
								GameManager.Destroy(sphereobj, DurationToShowRadius);
								if (AdminShowOwnerID)
								{
									string tcradius = "Radius: " + UseCupboardRadius;							
									player.SendConsoleCommand("ddraw.text", 10, UnityEngine.Color.red, pos+Vector3.up, FindPlayerName(bp.OwnerID));
									PrintWarning("Tool Cupboard Owner " + bp.OwnerID + " : " + FindPlayerName(bp.OwnerID));
								}
							}	
						}
					}
				}
			}
			if (!isAllowed(player, "visualcupboard.allowed"))
			{
				SendReply(player, lang.GetMessage("notallowed", this));
			 	return;	
			}
			else return;
		}

		[ChatCommand("killsphere")]
        	void cmdChatDestroySphere(BasePlayer player, string command)
		{
			if (isAllowed(player, "visualcupboard.admin"))
			{
				DestroyAll<ToolCupboardSphere>();
				return;
			}
			else if (!isAllowed(player, "visualcupboard.admin"))
			{
				SendReply(player, lang.GetMessage("notallowed", this));
			 	return;	
			}
		}

	////////////////////////////////////////////////////////////////////////////////////////////

        	private string FindPlayerName(ulong userId)
        	{
           	 BasePlayer player = BasePlayer.FindByID(userId);
           	 if (player)
                return player.displayName;

            	player = BasePlayer.FindSleeping(userId);
           	 if (player)
                return player.displayName;

           	 var iplayer = covalence.Players.FindPlayer(userId.ToString());
            	if (iplayer != null)
                return iplayer.Name;

            	return "Unknown Entity Owner";
       		}

        	void Unload()
        	{
            		DestroyAll<ToolCupboardSphere>();
        	}
		
        	static void DestroyAll<T>()
        	{
            		var objects = GameObject.FindObjectsOfType(typeof(T));
            		if (objects != null)
                		foreach (var gameObj in objects)
                    		GameObject.Destroy(gameObj);
       		 }

		bool isAllowed(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);
	}
}

// --- End of file: VisualCupboard.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XDCasino.cs ---
// --- Original Local Path: XDCasino.cs ---

using Newtonsoft.Json;
using Oxide.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using VLB;
using Rust;
using System.Text;

namespace Oxide.Plugins
{
    [Info("XDCasino", "SkuliDropek", "1.7.34")]
    [Description("Casino, play for resources :3")]
    public class XDCasino : RustPlugin
    {
        #region Var
        private const string TerminalLayer = "UI_TerminalLayer";
        private const string NotiferLayer = "UI_NotiferLayers";
        private readonly ulong Id = 23556438051;
        private const string FileName = "CasinoRoomNew1";
        List<BaseEntity> CasinoEnt = new List<BaseEntity>();
        BigWheelGame bigWheelGame;
        BaseEntity WoodenTrigger;
        MonumentInfo monument;
        [PluginReference] Plugin CopyPaste;
        #endregion

        #region Configuration
        private Configuration config;
        private class Configuration
        {
            [JsonProperty("Запретить вставать игроку со стула если он учавствует в ставке | Forbid a player to get up from a chair if he participates in a bet")]
            public bool mountUse = true;
            [JsonProperty("Нужен ли шкаф в постройке ? | Do you need a closet in the building?")]
            public bool cupboardSpawn = false;
            [JsonProperty("Включить ли радио в здании ? | Should I turn on the radio in the building ?")]
            public bool useRadio = true;
            [JsonProperty("Включите этот параметр если у вас гниет постройка | Enable this option if your building is rotting")]
            public Boolean useDecay = false;
            [JsonProperty("Ссылка на радио станцию которая будет играть в доме | Link to the radio station that will play in the house")]
            public String RadioStation = "http://radio.skyplugins.ru:8030/casino.mp3";
            [JsonProperty("идентификатор для подключения к камере | ID to connect to the camera")]
            public string identifier = "casino";
            [JsonProperty("Список предметов для ставок (ShortName/максимальное количество за 1 ставку) | List of items for bets (ShortName / maximum quantity for 1 bet)")]
            public Dictionary<string, int> casinoItems = new Dictionary<string, int>();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null)
                    throw new Exception();
                SaveConfig();
            }
            catch
            {
                for (var i = 0; i < 3; i++)
                    PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                LoadDefaultConfig();
            }
            ValidateConfig();
            SaveConfig();
        }

        private void ValidateConfig()
        {
            if (config.casinoItems.Count == 0)
            {
                config.casinoItems = new Dictionary<string, int>
                {
                    ["cloth"] = 100,
                    ["metal.refined"] = 10,
                    ["lowgradefuel"] = 50,
                    ["wood"] = 1000,
                    ["stones"] = 1000,
                    ["metal.fragments"] = 300,
                };
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        protected override void LoadDefaultConfig()
        {
            config = new Configuration();
        }
        #endregion

        #region Lang
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["CASINO_PRIZE"] = "Collect your winnings first!",
                ["CASINO_NOTGAMEITEM"] = "This item is not on the approved list.",
                ["CASINO_ITEMAMOUNTFULL"] = "You are trying to put more than the allowed amount (Maximum for this item {0})",
                ["CASINO_MOUNTNOT"] = "You cannot get up during an active bet! Also, don't forget to take your prize",
                ["CASINO_ERROR"] = "Something went wrong. Move the item to another slot and try again!",
                ["CASINO_UITITLE"] = "<b>Roulette for resources</b>",
                ["CASINO_KEYAUTH"] = "The plugin did not pass the authentication on the server!\nCheck the plugin version or contact the developer\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_UITITLEITEM"] = "<b><color=#EAD093FF>ALLOWED ITEMS AND RESTRICTIONS</color></b>\n",
                ["CASINO_UIRULES"] = "<b><color=#EAD093FF>REGULATIONS</color></b>\n" +
                "1. You will not be able to place a new bet without collecting your winnings.\n" +
                "2. You can only use certain resources for betting,\nthere is also a limit on the maximum rate.",
                ["CASINO_UIRULES3"] = "\n3. You cannot get up from your chair during a bet or if you have not collected your winnings",
                ["CASINO_NOT_COPYPASTE"] = "Check if you have installed the CopyPaste plugin",
                ["CASINO_V_COPYPASTE"] = "You have an old version of CopyPaste!\nPlease update the plugin to the latest version (4.1.27 or higher) - https://umod.org/plugins/copy-paste",
                ["CASINO_NOT_OUTPOST"] = "You do not have the 'OUTPOST' on the campaign !\nPlease contact the developer\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_NOT_SPAWN_BUILDING"] = "Error #1 \nPlugin won't work, Contact the developer\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_PASTE_SUCC"] = "Construction processed successfully {0}",
                ["CASINO_BUILDING_SETUP_ERROR"] = "Error loading building! Details in the log file!!\nContact the developer\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_ServerNotResponse"] = "Unable to load the file {0}, Server response: {1}. Retrying to download...",
                ["CASINO_FileNotLoad"] = "Downloading the file {0} was unsuccessful. Contact the developer\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_BuildingLoad"] = "Initializing building for casino...",
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["CASINO_PRIZE"] = "Сначала забери выигрыш!",
                ["CASINO_NOTGAMEITEM"] = "Этого предмета нет в списке разрешенных",
                ["CASINO_ITEMAMOUNTFULL"] = "Вы пытаетесь положить больше чем разрешено (Максимум для этого предмета {0})",
                ["CASINO_MOUNTNOT"] = "Нельзя вставать во время активной ставки! Так же не забудьте забрать приз",
                ["CASINO_ERROR"] = "Что то пошло не так. Перенесите предмет в другой слот и попробуйте еще раз!",
                ["CASINO_UITITLE"] = "<b>Рулетка на ресурсы</b>",
                ["CASINO_KEYAUTH"] = "Плагин не смог пройти аунтефикацию на сервере!\n Сверьте версию плагина или свяжитесь с разработчиком\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_UITITLEITEM"] = "<b><color=#EAD093FF>РАЗРЕШЕННЫЕ ПРЕДМЕТЫ И ОГРАНИЧЕНИЯ</color></b>\n",
                ["CASINO_UIRULES"] = "<b><color=#EAD093FF>ПРАВИЛА</color></b>\n" +
                "1. Вы не сможете сделать новую ставку не забрав выигрыш.\n" +
                "2. Для ставок вы сможете использовать только определенные ресурсы,\nтак же существует ограничения на максимальную ставку.",
                ["CASINO_UIRULES3"] = "\n3. Вы не можете вставать со стула во время ставки или если вы не забрали свой выигрыш",
                ["CASINO_NOT_COPYPASTE"] = "Проверьте установлен ли у вас плагин 'CopyPaste'",
                ["CASINO_V_COPYPASTE"] = "У вас старая версия CopyPaste!\nПожалуйста обновите плагин до последней версии (4.1.27 или выше) - https://umod.org/plugins/copy-paste",
                ["CASINO_NOT_OUTPOST"] = "Походу у вас отсутствует 'Город НПС' !\nПожалуйста обратитесь к разработчику\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_NOT_SPAWN_BUILDING"] = "Ошибка #1 \nПлагин не будет работать, Обратитесь к разработчику\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_PASTE_SUCC"] = "Постройка обработана успешно {0}",
                ["CASINO_BUILDING_SETUP_ERROR"] = "Ошибка при загрузке постройки! Подробности в лог файле!!\nОбратитесь к разработчику\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_ServerNotResponse"] = "Невозможно загрузить файл {0}, Ответ сервера: {1}. Пробуем повторить загрузку...",
                ["CASINO_FileNotLoad"] = "Повторная загрузка файла {0}, не увенчалась успехом. Обратитесь к разработчику\nSkuliDropek#1480\nvk.com/dezlife",
                ["CASINO_BuildingLoad"] = "Инициализация постройки для казино...",



            }, this, "ru");
        }

        #endregion

        #region Hooks
        void Init()
        {
            Unsubscribe("CanDismountEntity");
            Unsubscribe("OnEntityTakeDamage");
        }
        private void OnServerInitialized()
        {
            monument = TerrainMeta.Path.Monuments.FirstOrDefault(p => p.name.ToLower() == "assets/bundled/prefabs/autospawn/monument/medium/compound.prefab");
            if (!CopyPaste)
            {
                PrintError(GetLang("CASINO_NOT_COPYPASTE"));
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }
            else if (CopyPaste.Version < new VersionNumber(4, 1, 27))
            {
                PrintError(GetLang("CASINO_V_COPYPASTE"));
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }
            if (monument == null)
            {
                PrintError(GetLang("CASINO_NOT_OUTPOST"));
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }
            LoadDataCopyPaste();
           
            if (config.mountUse)
                Subscribe("CanDismountEntity");
            if (config.useDecay)
                Subscribe(nameof(OnEntityTakeDamage));
        }

        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            if (info.damageTypes.Has(DamageType.Decay))
            {
                if (victim?.OwnerID == Id)
                {
                    info.damageTypes.Scale(DamageType.Decay, 0);
                }
            }
        }
        ItemContainer.CanAcceptResult? CanAcceptItem(ItemContainer container, Item item, int targetPos)
        {
            if (container?.entityOwner is BigWheelBettingTerminal && container?.entityOwner?.OwnerID == Id && !container.IsLocked())
            {
                BasePlayer player = container.playerOwner;          
                if (player == null)
                    return ItemContainer.CanAcceptResult.CannotAccept;

                if (targetPos == 5)
                    return ItemContainer.CanAcceptResult.CannotAccept;
                
                if (!config.casinoItems.ContainsKey(item.info.shortname))
                {
                    HelpUiNottice(player, GetLang("CASINO_NOTGAMEITEM",player.UserIDString));
                    return ItemContainer.CanAcceptResult.CannotAccept;
                }
                int maxAmount = config.casinoItems[item.info.shortname];
                if (container.GetSlot(5) != null)
                {
                    HelpUiNottice(player, GetLang("CASINO_PRIZE", player.UserIDString));
                    return ItemContainer.CanAcceptResult.CannotAccept;
                }
                int s = 0;
                for (int i = 0; i < 5; i++)
                {
                    Item slot = container.GetSlot(i);
                    if (slot != null)
                    {
                        if (slot.info.shortname == item.info.shortname)
                            s += slot.amount;
                    }
                }
                if (item.GetRootContainer()?.entityOwner?.OwnerID == Id)
                {
                    if (item.GetRootContainer()?.GetSlot(5) != null || targetPos == 5)
                        return ItemContainer.CanAcceptResult.CannotAccept;
                }
                else if (item.amount + s > maxAmount)
                {
                    HelpUiNottice(player, GetLang("CASINO_ITEMAMOUNTFULL", player.UserIDString, maxAmount));
                    return ItemContainer.CanAcceptResult.CannotAccept;
                }
            }
            return null;
        }

        object CanDismountEntity(BasePlayer player, BaseMountable entity)
        {
            if (entity?.OwnerID == Id)
            {
                foreach (var item in bigWheelGame?.terminals?.Where(x => x.skinID == player.userID))
                {
                    for (int i = 0; i < 6; i++)
                    {
                        var s = item.inventory.GetSlot(i);
                        if (s != null)
                        {
                            HelpUiNottice(player, GetLang("CASINO_MOUNTNOT", player.UserIDString));
                            return false;
                        }
                    }
                    item.skinID = 0;
                }
            }
            return null;
        }
        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (entity is BigWheelBettingTerminal && entity.OwnerID == Id)
            {
                if (player == null)
                    return;
                var sss = entity as BigWheelBettingTerminal;
                sss.GetComponent<StorageContainer>().inventory.playerOwner = player;
                entity.skinID = player.userID;

                CuiHelper.DestroyUi(player, TerminalLayer);
                CuiElementContainer container = new CuiElementContainer();

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "192 475", OffsetMax = "573 660" },
                    Image = { Color = "0.968627453 0.921631568632 0.882352948 0.03529412", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                }, "Overlay", TerminalLayer);

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0.8090092", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Text = { Text = GetLang("CASINO_UITITLE", player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 16, Color = HexToRustFormat("#d6ccc3"), }
                }, TerminalLayer);

                string rules = GetLang("CASINO_UIRULES", player.UserIDString);
                if (config.mountUse)
                    rules += GetLang("CASINO_UIRULES3", player.UserIDString);
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0.01924771 0.3405407", AnchorMax = "0.9833772 0.8018017", OffsetMax = "0 0" },
                    Text = { Text = rules, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf", FontSize = 12, Color = HexToRustFormat("#FFFFFFFF"), }
                }, TerminalLayer);

                string itemRules = GetLang("CASINO_UITITLEITEM", player.UserIDString);
                int i = 0;
                foreach (var cfg in config.casinoItems)
                {
                    i++;
                    string Zapitaya = i == config.casinoItems.Count ? "" : ",";
                    itemRules += ItemManager.itemList.First(x => x.shortname == cfg.Key).displayName.english + $":{cfg.Value}{Zapitaya} ";
                }

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0.01924774 0.01081081", AnchorMax = "0.9833772 0.3369368", OffsetMax = "0 0" },
                    Text = { Text = itemRules, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf", FontSize = 12, Color = HexToRustFormat("#FFFFFFFF"), }
                }, TerminalLayer);

                CuiHelper.AddUi(player, container);
            }
        }
        private void OnLootEntityEnd(BasePlayer player, BaseCombatEntity entity) 
        {
            CuiHelper.DestroyUi(player, TerminalLayer); 
            CuiHelper.DestroyUi(player, NotiferLayer);
            CuiHelper.DestroyUi(player, "NotiferLayer2");
            CuiHelper.DestroyUi(player, "NotiferLayer1");
        }
        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.allPlayerList)
            {
                CuiHelper.DestroyUi(player, TerminalLayer);
                CuiHelper.DestroyUi(player, NotiferLayer);        
            }
            foreach (BaseEntity ent in CasinoEnt)
            {
                if (ent == null || ent.IsDestroyed)
                    continue;
                ent.Kill();
            }
        }

        #endregion

        #region UiNotifer
        private void HelpUiNottice(BasePlayer player, string msg, string sprite = "assets/icons/info.png")
        {
            CuiHelper.DestroyUi(player, NotiferLayer);
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                FadeOut = 0.30f,
                RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = "192 664", OffsetMax = "573 710" },
                Image = { Color = "0.968627453 0.921631568632 0.882352948 0.035294121455", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat", FadeIn = 0.40f },
            }, "Overlay", NotiferLayer);
           
            container.Add(new CuiElement
            {
                Parent = NotiferLayer,
                Name = "NotiferLayer1",
                FadeOut = 0.30f,
                Components =
                {
                    new CuiImageComponent {Sprite = sprite, Color = HexToRustFormat("#AA7575FF"), FadeIn = 0.45f },
                    new CuiRectTransformComponent{ AnchorMin = "0.02672293 0.192029", AnchorMax = "0.09671418 0.7717391"},
                }
            });

            container.Add(new CuiLabel
            {
                FadeOut = 0.30f,
                RectTransform = { AnchorMin = "0.1139241 0.08999", AnchorMax = "0.9423349 0.89999", OffsetMax = "0 0" },
                Text = { Text = msg, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf", FontSize = 14, Color = HexToRustFormat("#d6ccc3"), FadeIn = 0.50f }
            }, NotiferLayer, "NotiferLayer2");

            CuiHelper.AddUi(player, container);
            timer.Once(3.5f, () => 
            { 
                CuiHelper.DestroyUi(player, NotiferLayer); 
                CuiHelper.DestroyUi(player, "NotiferLayer1"); 
                CuiHelper.DestroyUi(player, "NotiferLayer2"); 
            });
        }
        #endregion

        #region Metods
        void GenerateBuilding()
        {
            var options = new List<string> { "stability", "true", "deployables", "true", "autoheight", "false", "entityowner", "false" };

            Vector3 resultVector = GetResultVector();

            WoodenTrigger = GameManager.server.CreateEntity("assets/prefabs/deployable/woodenbox/woodbox_deployed.prefab", new Vector3(resultVector.x - 2.3f, resultVector.y + 6.0f, resultVector.z - 2.1f));
            WoodenTrigger.OwnerID = Id;
            WoodenTrigger.Spawn();
            UnityEngine.Object.Destroy(WoodenTrigger.GetComponent<DestroyOnGroundMissing>());
            UnityEngine.Object.Destroy(WoodenTrigger.GetComponent<GroundWatch>());
            CasinoEnt.Add(WoodenTrigger);

            var success = CopyPaste.Call("TryPasteFromVector3", resultVector, (monument.transform.rotation.eulerAngles * Mathf.Deg2Rad).y - 1.69f, FileName, options.ToArray());

            if (success is string)
            {
                PrintWarning(GetLang("CASINO_NOT_SPAWN_BUILDING"));
                return;
            }  
        }
        void PreSpawnEnt()
        {
            List<BaseEntity> obj = new List<BaseEntity>();
            Vis.Entities(GetResultVector(), 25f, obj, LayerMask.GetMask("Construction", "Deployable", "Deployed", "Debris"));
            foreach (BaseEntity item in obj?.Where(x => x.OwnerID == Id))
            {
                if (item == null) continue;
                item.Kill();
            }
           NextTick(() => { GenerateBuilding(); });
        }

        void OnPasteFinished(List<BaseEntity> pastedEntities, string fileName)
        {
            try
            {
                if (fileName != FileName)
                    return;
                CasinoEnt.AddRange(pastedEntities);
                foreach (BaseEntity item in CasinoEnt)
                {
                    if (item == null) continue;
                    item.OwnerID = Id;
                    if (item is CardTable)
                        continue;
                    if (item.prefabID == 1560881570 && item != WoodenTrigger)
                    {
                        SlotMachine slotM = GameManager.server.CreateEntity("assets/prefabs/misc/casino/slotmachine/slotmachine.prefab") as SlotMachine;
                        slotM.transform.position = item.transform.position;
                        slotM.transform.rotation = item.transform.rotation;
                        slotM.Spawn();
                        NextTick(() => { CasinoEnt.Add(slotM); CasinoEnt.Remove(item); item?.Kill(); });
                        continue;
                    }
                    if (item is BaseChair || item is BigWheelBettingTerminal || item is RepairBench || item is BaseArcadeMachine)
                    {
                        var ent = item as BaseCombatEntity;
                        if (ent == null) continue;
                        ent.pickup.enabled = false;
                        continue;
                    }
                    if (item is DeployableBoomBox)
                    {
                        if (config.useRadio)
                        {
                            NextTick(() => {
                                var boomBox = item as DeployableBoomBox;
                                boomBox.BoxController.CurrentRadioIp = config.RadioStation;
                                boomBox.BoxController.ConditionLossRate = 0;
                                boomBox.BoxController.baseEntity.ClientRPC(null, "OnRadioIPChanged", boomBox.BoxController.CurrentRadioIp);
                                if (!boomBox.BoxController.IsOn())
                                {
                                    boomBox.BoxController.ServerTogglePlay(true);
                                }
                                boomBox.BoxController.baseEntity.SendNetworkUpdate(global::BasePlayer.NetworkQueue.Update);
                            });
                        }
                    }
                    if (item.prefabID == 2476970476)
                    {
                        if (!config.cupboardSpawn)
                        {
                            item?.AdminKill();
                            continue;
                        }
                    }
                    if (item is DecayEntity)
                    {
                        var decayEntety = item as DecayEntity;
                        decayEntety.decay = null;
                        decayEntety.decayVariance = 0;
                        decayEntety.ResetUpkeepTime();
                        decayEntety.DecayTouch();
                    }
                    if (item is CCTV_RC)
                    {
                        var ent = item as CCTV_RC;
                        if (ent == null)
                            continue;
                        ent.UpdateIdentifier(config.identifier);
                        ent.pickup.enabled = false;
                        ent?.SetFlag(BaseEntity.Flags.Reserved8, true);
                        continue;
                    }
                    if (item is ElectricGenerator)
                    {
                        WoodenTrigger.transform.position = item.transform.position;
                        WoodenTrigger.transform.rotation = item.transform.rotation;
                        WoodenTrigger.SendNetworkUpdate();
                    }
                    if (item is Door)
                    {
                        var ent = item as Door;
                        if (ent == null)
                            continue;
                        ent.pickup.enabled = false;
                        ent.canTakeLock = false;
                        ent.canTakeCloser = false;
                        continue;
                    }
                    if (item is BuildingBlock)
                    {
                        var build = item as BuildingBlock;
                        build?.SetFlag(BaseEntity.Flags.Reserved1, false);
                        build?.SetFlag(BaseEntity.Flags.Reserved2, false);
                    }
                    if (item as ElectricalHeater)
                    {
                        item?.SetFlag(BaseEntity.Flags.Reserved8, true);
                    }
                    if (item as HBHFSensor)
                    {
                        bigWheelGame = GameManager.server.CreateEntity("assets/prefabs/misc/casino/bigwheel/big_wheel.prefab") as BigWheelGame;
                        bigWheelGame.SetParent(item, false, true);
                        bigWheelGame.transform.position = item.transform.position;
                        bigWheelGame.transform.rotation = item.transform.rotation * Quaternion.Euler(0f, 270f, -90f);
                        bigWheelGame.gameObject.GetOrAddComponent<SphereCollider>();
                        bigWheelGame.Spawn();
                    }
                    else if (item.prefabID == 1392608348 || item.prefabID == 3887352222 || item.prefabID == 3953213470 || item is NeonSign)
                    {
                        item.enableSaving = true;
                        item?.SendNetworkUpdate();
                        item?.SetFlag(BaseEntity.Flags.Reserved8, true);
                        item?.SetFlag(BaseEntity.Flags.On, true);
                    }
                    item?.SetFlag(BaseEntity.Flags.Busy, true);
                    item?.SetFlag(BaseEntity.Flags.Locked, true);
                }
                PrintWarning(GetLang("CASINO_PASTE_SUCC", null, CasinoEnt.Count));
                NextTick(() =>
                {
                    CheckEnt();
                });
            }
            catch (Exception ex)
            {
                PrintError(GetLang("CASINO_BUILDING_SETUP_ERROR"));
                Log($"exception={ex}", "LogError");
            }
        }

        private void CheckEnt()
        {
            foreach (var item in CasinoEnt)
            {
                if (item.PrefabName == "assets/prefabs/misc/xmas/pookie/pookie_deployed.prefab")
                {
                    BigWheelBettingTerminal bettingTerminal = GameManager.server.CreateEntity("assets/prefabs/misc/casino/bigwheel/bigwheelbettingterminal.prefab") as BigWheelBettingTerminal;
                    bettingTerminal.allowedItem = null;
                    bettingTerminal.OwnerID = Id;
                    bettingTerminal.SetParent(WoodenTrigger, false, true);
                    bettingTerminal.transform.position = item.transform.position;
                    bettingTerminal.transform.rotation = item.transform.rotation;
                    bigWheelGame.terminals.Add(bettingTerminal);
                    bettingTerminal.Spawn();
                    bettingTerminal.SendNetworkUpdate();
                    item.Kill();
                }
            }
        }
        #endregion

        #region Data
        private void LoadDataCopyPaste(Boolean repeat = false)
        {
            if (!Interface.Oxide.DataFileSystem.ExistsDatafile("copypaste/" + FileName))
            {
                PrintError(GetLang("CASINO_BuildingLoad"));
                webrequest.Enqueue($"https://xdquest.skyplugins.ru/api/getbuilding/SDBfgs094siTPasF", null, (code, response) =>
                {
                    switch (code)
                    {
                        case 200:
                            {
                                PasteData obj = JsonConvert.DeserializeObject<PasteData>(response);
                                Interface.Oxide.DataFileSystem.WriteObject("copypaste/" + FileName, obj);
                                NextTick(() => {
                                    PreSpawnEnt();
                                });
                                break;
                            }
                        case 502:
                            {
                                PrintError(GetLang("CASINO_KEYAUTH"));
                                break;
                            }
                        default:
                            {
                                if (!repeat)
                                {
                                    PrintError(GetLang("CASINO_FileNotLoad", null, "CasinoRoomNew1.json"));
                                    Log(code.ToString(), "LogError");
                                    timer.Once(10f, () => LoadDataCopyPaste());
                                }
                                else
                                {
                                    PrintError(GetLang("CASINO_ServerNotResponse", null, "CasinoRoomNew1.json", code));
                                }
                                return;
                            }
                    }
                }, this, RequestMethod.GET);
            }
            else
            {
                PreSpawnEnt();
            }
        }  

        public class PasteData
        {
            public Dictionary<string, object> @default;
            public ICollection<Dictionary<string, object>> entities;
            public Dictionary<string, object> protocol;
        }

        #endregion

        #region Helps
        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        void Log(string msg, string file)
        {
            LogToFile(file, $"[{DateTime.Now}] {msg}", this);
        }
        private Vector3 GetResultVector()
        {
            return monument.transform.position + monument.transform.rotation * new Vector3(-30.62f, 1.87f, 20.95f);
        }
        public static StringBuilder sb = new StringBuilder();
        public string GetLang(string LangKey, string userID = null, params object[] args)
        {
            sb.Clear();
            if (args != null)
            {
                sb.AppendFormat(lang.GetMessage(LangKey, this, userID), args);
                return sb.ToString();
            }
            return lang.GetMessage(LangKey, this, userID);
        }
        #endregion
    }
}


// --- End of file: XDCasino.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TPLotterySystem.cs ---
// --- Original Local Path: TPLotterySystem.cs ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("TPLotterySystem", "Sempai#3239", "5.0.0")]
    class TPLotterySystem : RustPlugin
    {
        #region Вар
        private string Layer = "MainStats" + ".Main";
        private string Inventory = "INVENTORY_UI";

        [PluginReference] Plugin ImageLibrary;
        private Hash<ulong, PlayersSettings> Settings = new Hash<ulong, PlayersSettings>();
        #endregion

        #region Класс
        public class LotterySettings
        {
            [JsonProperty("ID предмета")] public string ID;
            [JsonProperty("Название предмета")] public string DisplayName;
            [JsonProperty("Короткое название предмета")] public string ShortName;
            [JsonProperty("SkinID предмета")] public ulong SkinID;
            [JsonProperty("Дополнительная команда")] public string Command;
            [JsonProperty("Сколько нужно одинаковых предметов, чтобы забрать из инвентаря?")] public int Amount;
            [JsonProperty("Количество")] public int Count;
            [JsonProperty("Изображение")] public string Url;
        }

        public class PlayersSettings
        {
            [JsonProperty("Сколько игрок открыл ячеек")] public int Count;
            [JsonProperty("Откат")] public double Time;
            [JsonProperty("Список предметов")] public Dictionary<string, InventorySettings> Inventory = new Dictionary<string, InventorySettings>();
        }

        public class InventorySettings
        {
            [JsonProperty("ID предмета")] public string ID;
            [JsonProperty("Название предмета")] public string DisplayName;
            [JsonProperty("Короткое название предмета")] public string ShortName;
            [JsonProperty("SkinID предмета")] public ulong SkinID;
            [JsonProperty("Дополнительная команда")] public string Command;
            [JsonProperty("Собранно одинаковых предметов")] public int Amount;
            [JsonProperty("Количество")] public int Count;
            [JsonProperty("Изображение")] public string Url;
        }
        #endregion

        #region Конфиг
        public Configuration config;
        public class Configuration
        {
            [JsonProperty("Название")] public string Name = "<b><size=30>ЕЖЕДНЕВНАЯ ЛОТЕРЕЯ</size></b>\nКаждые 24 часа у вас есть возможность забрать три вещи!";
            [JsonProperty("Откат на открытие ячеек(в секундах)")] public int Time = 1;
            [JsonProperty("Список призов")] public List<LotterySettings> Settings;
            public static Configuration GetNewConfig()
            {
                return new Configuration
                {
                    Settings  = new List<LotterySettings>
                    {
                        new LotterySettings
                        {
                            ID = "1",
                            DisplayName = "Дерево",
                            ShortName = "wood",
                            SkinID = 0,
                            Command = null,
                            Amount = 1,
                            Count = 1000,
                            Url = null
                        },  
                        new LotterySettings
                        {
                            ID = "2",
                            DisplayName = "Вип",
                            ShortName = null,
                            SkinID = 0,
                            Command = "123",
                            Amount = 50,
                            Count = 1,
                            Url = ""
                        },
                    }
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config?.Settings == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfig();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        #region Хуки
        private void OnServerInitialized()
        {
            PrintWarning("\n-----------------------------\n " +" Author - Sempai#3239\n " +" VK - https://vk.com/rustnastroika\n " +" Forum - https://topplugin.ru\n " +" Discord - https://discord.gg/5DPTsRmd3G\n" +"-----------------------------"); 
            foreach (var check in config.Settings)
            {
                ImageLibrary.Call("AddImage", check.Url, check.Url);
            }

            ImageLibrary.Call("AddImage", $"https://rustage.su/img/server/ui/lottery_bg.png", "d118a4862771842a");

            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            var Data = Interface.Oxide.DataFileSystem.ReadObject<PlayersSettings>($"TPLotterySystem/{player.userID}");

            if (!Settings.ContainsKey(player.userID))
                Settings.Add(player.userID, new PlayersSettings());

            Settings[player.userID] = Data ?? new PlayersSettings();
        }

        private void SaveData(BasePlayer player) => SaveData(player.userID);
        private void SaveData(ulong userID)
        {
            Interface.Oxide.DataFileSystem.WriteObject($"TPLotterySystem/{userID}", Settings[userID]);
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            SaveData(player);
        }

        private InventorySettings GetItem(ulong userID, string name)
        {
            if (!Settings.ContainsKey(userID))
                Settings[userID].Inventory = new Dictionary<string, InventorySettings>();

            if (!Settings[userID].Inventory.ContainsKey(name))
                Settings[userID].Inventory[name] = new InventorySettings();

            return Settings[userID].Inventory[name];
        }

        private void AddItem(BasePlayer player, LotterySettings settings)
        {
            var data = GetItem(player.userID, settings.ID);
            data.ID = settings.ID;
            data.DisplayName = settings.DisplayName;
            data.ShortName = settings.ShortName;
            data.SkinID = settings.SkinID;
            data.Command = settings.Command;
            data.Amount += 1;
            data.Count = settings.Count;
            data.Url = settings.Url;
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
                CuiHelper.DestroyUi(player, Inventory);
                SaveData(player);
            }
        }
        #endregion

        #region Команды
        [ConsoleCommand("lottery")]
        private void ConsoleLottery(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            if (player != null && args.HasArgs(1))
            {
                if (args.Args[0] == "random")
                {
                    var time = CurrentTime();
                    if (Settings[player.userID].Time < time)
                    {
                        Settings[player.userID].Count += 1;
                        if (Settings[player.userID].Count <= 3)
                        {
                            var random = config.Settings.ToList().GetRandom();
                            PrizUI(player, args.Args[1], random);
                            AddItem(player, random);
                        }

                        if (Settings[player.userID].Count == 3)
                        {
                            Settings[player.userID].Time = time + config.Time;
                            Settings[player.userID].Count = 0;

                            CuiHelper.DestroyUi(player, "Time");
                            var container = new CuiElementContainer();

                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0.44 0.19", AnchorMax = "0.56 0.22", OffsetMax = "0 0" },
                                Button = { Color = "0 0 0 0" },
                                Text = { Text = $"ПОДОЖДИТЕ {FormatShortTime(TimeSpan.FromSeconds(Settings[player.userID].Time - time))}", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
                            }, Layer, "Time");

                            CuiHelper.AddUi(player, container);
                        }
                    }
                }
                if (args.Args[0] == "take")
                {
                    var item = GetItem(player.userID, Settings[player.userID].Inventory.ElementAt(int.Parse(args.Args[1])).Key);
                    var check = config.Settings.FirstOrDefault(p => p.ID == item.ID);
                    if (item.Amount >= check.Amount)
                    {
                        if (!string.IsNullOrEmpty(item.Command))
                        {
                            Server.Command(item.Command.Replace("%STEAMID%", player.UserIDString));
                            SendReply(player, $"Вы получили услугу <color=#ee3e61>{item.DisplayName}</color>");
                        }
                        if (!string.IsNullOrEmpty(item.ShortName))
                        {
                            var items = ItemManager.CreateByName(item.ShortName, check.Count);
                            items.skin = item.SkinID;
                            player.inventory.GiveItem(items);
                            SendReply(player, $"Вы получили <color=#ee3e61>{item.DisplayName}</color>\nВ размере <color=#ee3e61>{check.Count}</color>");
                        }
                        item.Amount -= check.Amount;
                        if (item.Amount == 0)
                        {
                            Settings[player.userID].Inventory.Remove(check.ID);
                        }
                        InventoryUI(player);
                    }
                }
                if (args.Args[0] == "ui")
                {
                    LotteryUI(player, 0);
                }
                if (args.Args[0] == "inventory")
                {
                    InventoryUI(player);
                }
                if (args.Args[0] == "page")
                {
                    LotteryUI(player, int.Parse(args.Args[1]));
                }
            }
        }
        #endregion 

        #region Интерфейс
        private void LotteryUI(BasePlayer player, int page = 0)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = Layer,
                Parent = ".Mains",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "d118a4862771842a"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "-0.315 -0.27", AnchorMax = "1.3 1.275", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8 0.804", AnchorMax = "0.817 0.832" },
                Button = { Close = "Menu_UI", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.5 0.24", AnchorMax = "0.502 0.72", OffsetMax = "0 0" },
                Button = { Color = "1 1 1 0.3" },
                Text = { Text = "", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-bold.ttf", FadeIn = 0.5f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.23 0.73", AnchorMax = "0.44 0.78", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "Ежедневная <b>ЛОТЕРЕЯ</b> Каждые n времени у\nвас есть возможность забрать три вещи!", Color = "1 1 1 0.5", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf", FadeIn = 0.5f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.57 0.73", AnchorMax = "0.76 0.78", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "СПИСОК ВОЗМОЖНЫХ ПРИЗОВ!", Color = "1 1 1 0.5", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf", FadeIn = 0.5f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.505 0.19", AnchorMax = "0.76 0.715", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf", FadeIn = 0.5f }
            }, Layer, "Items");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.676 0.24", AnchorMax = "0.757 0.28" },
                Button = { Color = "1 1 1 0.1", Command = "lottery inventory", Close = Layer },
                Text = { Text = "ИНВЕНТАРЬ", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-bold.ttf", FadeIn = 0.5f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.23 0.19", AnchorMax = "0.497 0.72", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Layer, "Priz");

            if (Settings[player.userID].Time >= CurrentTime())
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.44 0.19", AnchorMax = "0.56 0.22", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0" },
                    Text = { Text = $"ПОДОЖДИТЕ {FormatShortTime(TimeSpan.FromSeconds(Settings[player.userID].Time - CurrentTime()))}", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
                }, Layer, "Time");
            }

            float gap = 0f, width = 0.332f, height = 0.3f, startxBox = 0.003f, startyBox = 1f - height, xmin = startxBox, ymin = startyBox;
            for (int z = 0; z < 9; z++)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"{xmin} {ymin}", AnchorMax = $"{xmin + width} {ymin + height * 1}", OffsetMin = "3 3", OffsetMax = "-3 -3" },
                    Button = { Color = "1 1 1 0.1" },
                    Text = { Text = $"" }
                }, "Priz", $"Button.{z}");
                xmin += width + gap;
                if (xmin + width >= 1)
                {
                    xmin = startxBox;
                    ymin -= height + gap;
                }

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0", Command = $"lottery random {z}" },
                    Text = { Text = $"✔", Color = "1 1 1 0.3", Align = TextAnchor.MiddleCenter, FontSize = 50, Font = "robotocondensed-bold.ttf" }
                }, $"Button.{z}", $"Gal.{z}");
            }

            float gap1 = 0f, width1 = 0.332f, height1 = 0.27f, startxBox1 = 0f, startyBox1 = 1f - height1, xmin1 = startxBox1, ymin1 = startyBox1;
            foreach (var check in config.Settings.Skip(page * 9).Take(9))
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"{xmin1} {ymin1}", AnchorMax = $"{xmin1 + width1} {ymin1 + height1 * 1}", OffsetMin = "2 2", OffsetMax = "-2 -2" },
                    Button = { Color = "1 1 1 0.1" },
                    Text = { Text = $"", Color = "1 1 1 0.3", Align = TextAnchor.MiddleCenter, FontSize = 50, Font = "robotocondensed-bold.ttf" }
                }, "Items", "Image");
                xmin1 += width1 + gap1;
                if (xmin1 + width1 >= 1)
                {
                    xmin1 = startxBox1;
                    ymin1 -= height1 + gap1;
                }

                var image = check.Url != null ? check.Url : check.ShortName;
                container.Add(new CuiElement
                {
                    Parent = "Image",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", image), FadeIn = 0.5f },
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                    }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0" },
                    Text = { Text = $"{check.Count}x ", Color = "1 1 1 0.3", Align = TextAnchor.LowerRight, FontSize = 16, Font = "robotocondensed-regular.ttf", FadeIn = 0.5f }
                }, "Image");
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.507 0.24", AnchorMax = "0.587 0.28" },
                Button = { Color = "1 1 1 0.1", Command = page >= 1 ? $"lottery page {page - 1}" : "", FadeIn = 0.5f},
                Text = { Text = $"-", Color = "1 1 1 0.65", Align = TextAnchor.MiddleCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" }
            }, Layer, $"Items.page");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.5905 0.24", AnchorMax = "0.6725 0.28" },
                Button = { Color = "1 1 1 0.1", Command = config.Settings.Count() > (page + 1) * 9 ? $"lottery page {page + 1}" : "", FadeIn = 0.5f},
                Text = { Text = $"+", Color = "1 1 1 0.65", Align = TextAnchor.MiddleCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" }
            }, Layer, $"Items.page");

            CuiHelper.AddUi(player, container);
        }

        private void PrizUI(BasePlayer player, string z, LotterySettings settings)
        {
            CuiHelper.DestroyUi(player, $"Gal.{z}");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.58 0.44 0.3" },
                Text = { Text = "" }
            }, $"Button.{z}", "Layers");

            var image = settings.Url != null ? settings.Url : settings.ShortName;
            container.Add(new CuiElement
            {
                Parent = "Layers",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", image), FadeIn = 2f},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        private void InventoryUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Inventory);
            CuiElementContainer container = new CuiElementContainer();
            int ItemCount = Settings[player.userID].Inventory.Count(), CountItem = 0, Count = 5;
            float Position = 0.5f, Width = 0.08f, Height = 0.13f, Margin = 0.005f, MinHeight = 0.5f;

            if (ItemCount >= Count) Position = 0.5f - Count / 2f * Width - (Count - 1) / 2f * Margin;
            else Position = 0.5f - ItemCount / 2f * Width - (ItemCount - 1) / 2f * Margin;
            ItemCount -= Count;

            container.Add(new CuiElement
            {
                Name = Inventory,
                Parent = ".Mains",
                Components = 
                {
                    new CuiRawImageComponent { Png = (string)ImageLibrary.Call("GetImage", "d118a4862771842a"), Color = "1 1 1 1" },
                    new CuiRectTransformComponent { AnchorMin = "-0.315 -0.27", AnchorMax = "1.3 1.275", OffsetMax = "0 0" },
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8 0.804", AnchorMax = "0.817 0.832" },
                Button = { Close = "Menu_UI", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, Inventory);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.44 0.65", AnchorMax = "0.56 0.7", OffsetMax = "0 0" },
                Button = { Color = "1 1 1 0.1", Command = "lottery ui", Close = Inventory },
                Text = { Text = "ОТКРЫТЬ ЛОТЕРЕЮ", Color = "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf", FadeIn = 0.5f }
            }, Inventory);

            var list = Settings[player.userID].Inventory;
            for (int z = 0; z < list.Count(); z++)
            {
                var data = GetItem(player.userID, list.ElementAt(z).Key);
                var check = config.Settings.FirstOrDefault(x => x.ID == list.ElementAt(z).Key);

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"{Position} {MinHeight}", AnchorMax = $"{Position + Width} {MinHeight + Height}", OffsetMax = "0 0" },
                    Button = { Color = "1 1 1 0.1" },
                    Text = { Text = "" }
                }, Inventory, $"{z}");

                var image = data.Url != null ? data.Url : data.ShortName;
                container.Add(new CuiElement
                {
                    Parent = $"{z}",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", image) },
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                    }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0" },
                    Text = { Text = $"{data.Amount}/{check.Amount} ", Color = "1 1 1 0.5", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.UpperRight }
                }, $"{z}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0", Command = $"lottery take {z}" },
                    Text = { Text = $"X{data.Count} ", Color = "1 1 1 0.5", Font = "robotocondensed-regular.ttf", FontSize = 12, Align = TextAnchor.LowerRight }
                }, $"{z}");

                CountItem += 1;
                if (CountItem % Count == 0)
                {
                    if (ItemCount > Count)
                    {
                        Position = 0.5f - Count / 2f * Width - (Count - 1) / 2f * Margin;
                        ItemCount -= Count;
                    }
                    else
                    {
                        Position = 0.5f - ItemCount / 2f * Width - (ItemCount - 1) / 2f * Margin;
                    }
                    MinHeight -= ((Margin * 2) + Height);
                }
                else
                {
                    Position += (Width + Margin);
                }
            }

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Хелпер
        static double CurrentTime() => new TimeSpan(DateTime.UtcNow.Ticks).TotalSeconds;
        public static string FormatShortTime(TimeSpan time)
        {
            string result = string.Empty;
            result += $"{time.Hours.ToString("00")}:";
            result += $"{time.Minutes.ToString("00")}";
            return result;
        }
        #endregion
    }
}

// --- End of file: TPLotterySystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RustMap (1).cs ---
// --- Original Local Path: RustMap (1).cs ---

﻿using Network;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("RustMap", "Ernieleo", "1.3.42")]
    class RustMap : RustPlugin
    {
        [PluginReference]
        Plugin Clans, Friends, MutualPermission, NTeleportation, Teleport, Teleportation, CustomQuarry, HomesGUI, PlayersClasses;

        class MapMarker
        {
            public Transform transform;
            public int Rotation = -1;
            public Vector2 anchorPosition { get { return m_Instance.ToScreenCoords(position); } }
            public Vector2 position = Vector2.zero;
            public string name;
            public string png;
            public bool rotSupport = false;
            public string text;
            public float size;
            public float alpha;
            public int fontsize;
            public ulong counter = 0;
            public bool inMap = true;
            protected MapMarker(Transform transform)
            {
                this.transform = transform;
            }

            public virtual bool NeedRedraw()
            {
                if (transform == null) return false;
                var lastRot = Rotation;
                if (rotSupport) Rotation = GetRotation(transform.eulerAngles.y);
                var lastPos = position;
                position = transform.position;
                position.y = 0;
                if (rotSupport && Rotation != lastRot)
                {
                    position = lastPos;
                    return true;
                }
                if (Vector3.Distance(position, lastPos) > 0.5) return true;
                position = lastPos;
                return false;
            }

            public static MapMarker Create(Transform transform)
            {
                return new MapMarker(transform);
            }
        }

        class MapPlayer : MapMarker
        {
            public BasePlayer player;
            public List<MapPlayer> clanTeam = new List<MapPlayer>();

            protected MapPlayer(BasePlayer player) : base(player.transform)
            {
                this.player = player;
            }

            public override bool NeedRedraw()
            {
                var lastRot = Rotation;
                if (player == null || transform == null) return false;
                Rotation = GetRotation(player.eyes.rotation.eulerAngles.y);
                var lastPos = position;
                position = transform.position;
                position.y = 0;
                if (Rotation != lastRot)
                {
                    position = lastPos;
                    return true;
                }
                if (Vector3.Distance(position, lastPos) > 0.5)
                {
                    return true;
                }
                position = lastPos;
                return false;
            }

            public void OnCloseMap()
            {
                Rotation = -1;
                position = Vector2.zero;
                clanTeam?.ForEach(p => p.OnCloseMap());
            }

            public static MapPlayer Create(BasePlayer player)
            {
                return new MapPlayer(player) { alpha = m_Instance.playerIconAlpha, size = m_Instance.playerIconSize };
            }
        }

        string beancanKey;
        float mapAlpha;
        float mapSize;
        bool clanSupport;
        bool TeamSupport;
        bool friendsSupport;
        float playerIconSize;
        float playerIconAlpha;
        bool playerCoordinates;
        bool monuments;
        bool caves;
        bool water;
        bool powersub;
        float monumentIconSize;
        float monumentIconAlpha;
        bool monumentIconNames;
        float MapUpdate;
        bool raidhomes;
        float raidhomeSIze;
        int monumentsFontSize;
        bool bradley;
        float bradleyIconSize;
        float bradleyIconAlpha;
        bool car;
        bool plane;
        float planeIconSize;
        float planeIconAlpha;
        float TimeToClose;
        bool NewHeli;
        float NewheliIconSize;
        float NewheliIconAlpha;
        bool ship;
        float CargoIconSize;
        float CargoIconAlpha;
        bool swamp;
		bool Oilrig;
        bool NewHeliCrate;
        float NewHeliCrateIconSize;
        float NewHeliCrateIconAlpha;

        bool planeDrop;
        bool sethome;
        float sethomeIconSize;
        float deathIconSize;
        float planeDropIconSize;
        float planeDropIconAlpha;
        bool heli;
        float heliIconSize;
        float heliIconAlpha;
        bool heliDrop;
        bool quarry;
        float quarryIconAlpha;
        float quarryIconSize;
        float heliDropIconSize;
        float heliDropIconAlpha;
        bool vendingMachine;
        bool vendingMachineEmpty;
        float vendingMachineIconSize;
        float vendingMachineIconAlpha;
        string textColor;
        string textColor1;
        float bannedSize;
        string mapUrl;
        string MapText;
        private string version;
        bool NPCVendingMachine;

        protected override void LoadDefaultConfig()
        {
			Config["Ключ Beancan (Генерация карты с beancan.io)"] = beancanKey = GetConfig("Ключ Beancan (Генерация карты с beancan.io)", "");
            Config["Кастомная карта (http:// или с папки data/RustMap)"] = mapUrl = GetConfig("Кастомная карта (http:// или с папки data/RustMap)", "");
            Config["Прозрачность карты"] = mapAlpha = GetConfig("Прозрачность карты", 1f);
            Config["Размер карты"] = mapSize = GetConfig("Размер карты", 0.48f);
            Config["Отображать местоположение магазинов с Сompound (Аванпост)"] = NPCVendingMachine = GetConfig("Отображать местоположение магазинов с Сompound (Аванпост)", false);
            Config["Отображать местоположение карьеров (CustomQuarry)"] = quarry = GetConfig("Отображать местоположение карьеров(CustomQuarry)", false);
            Config["Размер иконки карьера"] = quarryIconSize = GetConfig("Размер иконки карьера", 0.03f);
            Config["Прозрачность иконки карьера"] = quarryIconAlpha = GetConfig("Прозрачность иконки карьера", 0.99f);
            Config["Версия конфигурации карты"] = version = GetConfig("Версия конфигурации карты ", Version.ToString());
            Config["Отображать дома, который рейдят"] = raidhomes = GetConfig("Отображать дома, который рейдят", false);
            Config["Размер иконок домов, которые рейдят"] = raidhomeSIze = GetConfig("Размер иконок домов, которые рейдят", 0.06f);
            Config["Отображать местоположение соклановцев"] = clanSupport = GetConfig("Отображать местоположение соклановцев", false);
            Config["Отображать местоположение друзей"] = friendsSupport = GetConfig("Отображать местоположение друзей", false);

            Config["Отображать местоположение команды игрока (Team)"] = TeamSupport = GetConfig("Отображать местоположение команды игрока (Team)", true);


            Config["Цвет текста (RED, GREEN, BLUE, ALPHA)"] = textColor = GetConfig("Цвет текста (RED, GREEN, BLUE, ALPHA)", "0 0.7 0 0.7");
            Config["Цвет текста кастомных иконок (Homes)"] = textColor1 = GetConfig("Цвет текста кастомных иконок (Homes)", "1 1 1 1");
            Config["Текст внизу карты (советуем оставить /map help)"] = MapText = GetConfig("Текст внизу карты (советуем оставить /map help)", "Помощь по карте <color=#FFA500>/map help</color>");
            Config["Отображать местоположение SETHOME игроков? (Поддержка NTeleportation, Teleport, HomesGUI)"] = sethome = GetConfig("Отображать местоположение SETHOME игроков? (Поддержка NTeleportation, Teleport, HomesGUI)", false);
            Config["Размер иконок SETHOME"] = sethomeIconSize = GetConfig("Размер иконок SETHOME", 0.03f);
            Config["Размер иконки DEATH"] = deathIconSize = GetConfig("Размер иконки DEATH", 0.03f);
            Config["Размер иконки игрока"] = playerIconSize = GetConfig("Размер иконки игрока", 0.03f);
            Config["Прозрачность иконки игрока"] = playerIconAlpha = GetConfig("Прозрачность иконки игрока", 0.99f);
            Config["Показывать текущие координаты игрока"] = playerCoordinates = GetConfig("Показывать текущие координаты игрока", false);
            Config["Отображать местоположение монументов"] = monuments = GetConfig("Отображать местоположение монументов", true);
            Config["Показывать пещеры"] = caves = GetConfig("Показывать пещеры", true);
            Config["Показывать водонапорные башни"] = water = GetConfig("Показывать водонапорные башни", true);
            Config["Показывать подстанции"] = powersub = GetConfig("Показывать подстанции", true);
            Config["Размер иконок монументов"] = monumentIconSize = GetConfig("Размер иконок монументов", 0.03f);
            Config["Размер иконки забаненого игрока"] = bannedSize = GetConfig("Размер иконки забаненого игрока", 0.04f);
            Config["Прозрачность иконок монументов"] = monumentIconAlpha = GetConfig("Прозрачность иконок монументов", 0.99f);
            Config["Показывать название монументов"] = monumentIconNames = GetConfig("Показывать название монументов", true);
            Config["Размер шрифта монументов"] = monumentsFontSize = GetConfig("Размер шрифта монументов", 13);
            Config["Отображать местоположение самолета"] = plane = GetConfig("Отображать местоположение самолета", true);
            Config["Размер иконок самолёта"] = planeIconSize = GetConfig("Размер иконок самолёта", 0.035f);
            Config["Прозрачность иконок самолёта"] = planeIconAlpha = GetConfig("Прозрачность иконок самолёта", 0.99f);
            Config["Отображать местоположение cброшенного груза с грузового вертолёта"] = NewHeliCrate = GetConfig("Отображать местоположение cброшенного груза с грузового вертолёта", true);
            Config["Размер иконки груза с грузового вертолёта"] = NewHeliCrateIconSize = GetConfig("Размер иконки груза с грузового вертолёта", 0.05f);
            Config["Прозрачность иконки груза с грузового вертолёта"] = NewHeliCrateIconAlpha = GetConfig("Прозрачность иконки груза с грузового вертолёта", 0.99f);
            Config["Частота обновлений карты"] = MapUpdate = GetConfig("Частота обновлений карты", 0.3f);
            Config["Время до автоматического закрытия карты после ее открытия"] = TimeToClose = GetConfig("Время до автоматического закрытия карты после ее открытия", 10f);
            Config["Отображать местоположение грузового вертолёта"] = NewHeli = GetConfig("Отображать местоположение самолета", true);
            Config["Размер иконки грузового вертолёта"] = NewheliIconSize = GetConfig("Размер иконки грузового вертолёта", 0.035f);
            Config["Прозрачность иконки грузового вертолёта"] = NewheliIconAlpha = GetConfig("Прозрачность иконок самолёта", 0.99f);
            Config["Отображать местоположение танка"] = bradley = GetConfig("Отображать местоположение танка", false);
            Config["Размер иконки танка"] = bradleyIconSize = GetConfig("Размер иконки танка", 0.05f);
            Config["Прозрачность иконки танка"] = bradleyIconAlpha = GetConfig("Прозрачность иконки танка", 0.99f);
            Config["Отображать местоположение вертолёта"] = heli = GetConfig("Отображать местоположение вертолёта", true);
            Config["Размер иконок вертолёта"] = heliIconSize = GetConfig("Размер иконок вертолёта", 0.035f);
            Config["Прозрачность иконок вертолёта"] = heliIconAlpha = GetConfig("Прозрачность иконок вертолёта", 0.99f);
            Config["Отображать местоположение cброшенного груза"] = planeDrop = GetConfig("Отображать местоположение cброшенного груза", true);
            Config["Размер иконок cброшенного груза"] = planeDropIconSize = GetConfig("Размер иконок cброшенного груза", 0.045f);
            Config["Прозрачность иконок cброшенного груза"] = planeDropIconAlpha = GetConfig("Прозрачность иконок cброшенного груза", 0.95f);
            Config["Отображать местоположение ящиков с вертолёта"] = heliDrop = GetConfig("Отображать местоположение ящиков с вертолёта", true);
            Config["Размер иконок ящиков с вертолёта"] = heliDropIconSize = GetConfig("Размер иконок ящиков с вертолёта", 0.03f);
            Config["Прозрачность иконок ящиков с вертолёта"] = heliDropIconAlpha = GetConfig("Прозрачность иконок ящиков с вертолёта", 0.99f);

            Config["Отображать местоположение корабля"] = ship = GetConfig("Отображать местоположение корабля", true);
            Config["Размер иконки корабля"] = CargoIconSize = GetConfig("Размер иконки корабля ", 0.05f);
            Config["Прозрачность иконки корабля"] = CargoIconAlpha = GetConfig("Прозрачность иконки корабля", 0.99f);
            Config["Отображать местоположение болот"] = swamp = GetConfig("Отображать местоположение болот", true);
			Config["Отображать местоположение OilRig(Тестая функция - Выходит за границы!)"] = Oilrig = GetConfig("Отображать местоположение OilRig(Тестовая функция - Выходит за границы!)", false);
            Config["Отображать местоположение торговых автоматов"] = vendingMachine = GetConfig("Отображать местоположение торговых автоматов", false);
            Config["Отображать местоположение пустых торговых автоматов"] = vendingMachineEmpty = GetConfig("Отображать местоположение пустых торговых автоматов", false);
            Config["Размер иконок торговых автоматов"] = vendingMachineIconSize = GetConfig("Размер иконок торговых автоматов", 0.02f);
            Config["Прозрачность иконок торговых автоматов"] = vendingMachineIconAlpha = GetConfig("Прозрачность иконок торговых автоматов", 0.99f);

            SaveConfig();
            if (!string.IsNullOrEmpty(mapUrl))
            {
                if (!mapUrl.ToLower().Contains("http"))
                {
                    mapUrl = "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + mapUrl;
                }
            }
        }

        T GetConfig<T>(string name, T defaultValue)
            => Config[name] == null ? defaultValue : (T)Convert.ChangeType(Config[name], typeof(T));

        static RustMap m_Instance;
        private string mapIconJson = @"[{""name"":""{0}"",""parent"":""map_mainImage"",""components"":[{""type"":""UnityEngine.UI.RawImage"",""sprite"":""assets/content/textures/generic/fulltransparent.tga"",""png"":""{3}"",""color"":""1 1 1 {4}""},{""type"":""RectTransform"",""anchormin"":""{1}"",""anchormax"":""{2}""}]}]";
        private string mapIconTextJson = @"[{""name"":""{0}"",""parent"":""map_mainImage"",""components"":[{""type"":""UnityEngine.UI.Text"",""text"":""{3}"",""align"":""MiddleCenter"",""fontSize"":12,""color"":""{color}""},{""type"": ""UnityEngine.UI.Outline"",""color"": ""0 0 0 1""},{""type"":""RectTransform"",""anchormin"":""{1}"",""anchormax"":""{2}""}]}]";
        private string mapIconTextJsonIcon = @"[{""name"":""{0}"",""parent"":""map_mainImage"",""components"":[{""type"":""UnityEngine.UI.Text"",""text"":""{3}"",""align"":""MiddleCenter"",""fontSize"":9,""color"":""{color1}""},{""type"": ""UnityEngine.UI.Outline"",""color"": ""0 0 0 1""},{""type"":""RectTransform"",""anchormin"":""{1}"",""anchormax"":""{2}""}]}]";
        private string mapJson = "[{\"name\":\"map_mainImage\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"1 1 1 {1}\",\"png\":\"{0}\"},{\"type\":\"RectTransform\",\"anchormin\":\"{2}\",\"anchormax\":\"{3}\"}]}]";
        private string mapCoordsTextJson = @"[{""name"":""map_coordinates"",""parent"":""map_mainImage"",""components"":[{""type"":""UnityEngine.UI.Text"",""text"":""{0}"",""align"":""MiddleCenter"",""fontSize"":18},{""type"": ""UnityEngine.UI.Outline"",""color"": ""0 0 0 1"",""distance"": ""0.5 -0.5""},{""type"":""RectTransform"",""anchormin"":""0 0.95"",""anchormax"":""1 1""}]}]";
        private string mapHelpJson = @"[{""name"":""map_help"",""parent"":""map_mainImage"",""components"":[{""type"":""UnityEngine.UI.Text"",""text"":""{0}"",""align"":""MiddleLeft"",""fontSize"":16},{""type"": ""UnityEngine.UI.Outline"",""color"": ""0 0 0 1"",""distance"": ""0.5 -0.5""},{""type"":""RectTransform"",""anchormin"":""0.02 0.001"",""anchormax"":""1 0.05""}]}]";

        Dictionary<BasePlayer, MapPlayer> mapPlayers = new Dictionary<BasePlayer, MapPlayer>();
        Dictionary<BasePlayer, MapPlayer> subscribers = new Dictionary<BasePlayer, MapPlayer>();
        List<MapMarker> temporaryMarkers = new List<MapMarker>();

        const string MAP_ADMIN = "rustmap.admin";
        static float mapSize1;
        static string mapSeed;
        static int worldSize;
        static string level;
        string monumentsJson;
        bool init = false;

        private List<BasePlayer> AllPlayerUsers = new List<BasePlayer>();

        private Timer CloseMapTimer;

        [ChatCommand("map")]
        void cmdMapControl(BasePlayer player, string command, string[] args)
        {
            if (!init || player == null)
            {
                SendReply(player, "Извините! В данный момент карта не активирована");
                return;
            }
            CuiHelper.DestroyUi(player, "maphelp_2");
            //if (args.Count() >= 1 && args[0] == "here")
            //{
            //    data.MapPlayerData[player.userID].CustomIcon = data.MapPlayerData[player.userID].CustomIcon = player.transform.position;
            //    return;
            //}
            if (sethome)
            {
                if (args.Count() >= 1 && args[0] == "homes")
                {
                    if (data.MapPlayerData[player.userID].Homes == true)
                    {
                        data.MapPlayerData[player.userID].Homes = data.MapPlayerData[player.userID].Homes = false;
                        SendReply(player, $"<color=orange>Map homes</color>: False");
                        return;

                    }
                    if (data.MapPlayerData[player.userID].Homes == false)
                    {
                        data.MapPlayerData[player.userID].Homes = data.MapPlayerData[player.userID].Homes = true;
                        SendReply(player, $"<color=orange>Map homes</color>: True");
                        return;
                    }
                }
            }
            if (friendsSupport)
            {
                if (args.Count() >= 1 && args[0] == "friends")
                {
                    if (data.MapPlayerData[player.userID].Friends == true)
                    {
                        data.MapPlayerData[player.userID].Friends = data.MapPlayerData[player.userID].Friends = false;
                        SendReply(player, $"<color=orange>Map friends</color>: False");
                        return;

                    }
                    if (data.MapPlayerData[player.userID].Friends == false)
                    {
                        data.MapPlayerData[player.userID].Friends = data.MapPlayerData[player.userID].Friends = true;
                        SendReply(player, $"<color=orange>Map Friends</color>: True");
                        return;
                    }
                }
            }
            if (clanSupport)
            {
                if (args.Count() >= 1 && args[0] == "clans")
                {
                    if (data.MapPlayerData[player.userID].Clans == true)
                    {
                        data.MapPlayerData[player.userID].Clans = data.MapPlayerData[player.userID].Clans = false;
                        SendReply(player, $"<color=orange>Map Clans</color>: False");
                        return;

                    }
                    if (data.MapPlayerData[player.userID].Clans == false)
                    {
                        data.MapPlayerData[player.userID].Clans = data.MapPlayerData[player.userID].Clans = true;
                        SendReply(player, $"<color=orange>Map Clans</color>: True");
                        return;
                    }
                }
            }
            if (permission.UserHasPermission(player.UserIDString, MAP_ADMIN))
            {
                if (args.Count() >= 1 && args[0] == "players")
                {
                    if (data.MapPlayerData[player.userID].AllPlayers == true)
                    {
                        data.MapPlayerData[player.userID].AllPlayers = data.MapPlayerData[player.userID].AllPlayers = false;
                        SendReply(player, $"<color=orange>Map AllPlayers</color>: False");
                        return;

                    }
                    if (data.MapPlayerData[player.userID].AllPlayers == false)
                    {
                        data.MapPlayerData[player.userID].AllPlayers = data.MapPlayerData[player.userID].AllPlayers = true;
                        SendReply(player, $"<color=orange>Map AllPlayers</color>: True");
                        return;
                    }
                }
                if (args.Count() >= 1 && args[0] == "bans")
                {
                    if (data.MapPlayerData[player.userID].BanPlayers == true)
                    {
                        data.MapPlayerData[player.userID].BanPlayers = data.MapPlayerData[player.userID].BanPlayers = false;
                        SendReply(player, $"<color=orange>Map BanPlayers</color>: False");
                        return;

                    }
                    if (data.MapPlayerData[player.userID].BanPlayers == false)
                    {
                        data.MapPlayerData[player.userID].BanPlayers = data.MapPlayerData[player.userID].BanPlayers = true;
                        SendReply(player, $"<color=orange>Map BanPlayers</color>: True");
                        return;
                    }
                }
                //if (args.Count() >= 1 && args[0] == "here")
                //{
                //    data.MapPlayerData[player.userID].CustomIcon = data.MapPlayerData[player.userID].CustomIcon = player.transform.position;
                //    return;
                //}

            }
            if (subscribers.Keys.Contains(player))
            {
                CloseMap(player);
            }
            else
            {
                if (permission.UserHasPermission(player.UserIDString, MAP_ADMIN))
                {
                    if (args.Count() >= 1 && args[0] == "help")
                    {
                        HelpUI(player);
                        return;
                    }

                    if (data.MapPlayerData[player.userID].AllPlayers == true)
                    {
                        AllPlayerUsers.Add(player);
                    }
                    if (data.MapPlayerData[player.userID].AllPlayers == false)
                    {
                        if (AllPlayerUsers.Contains(player))
                            AllPlayerUsers.Remove(player);
                    }
                    OpenMap(player);
                    return;
                }
                if (!permission.UserHasPermission(player.UserIDString, MAP_ADMIN))
                {
                    if (args.Count() >= 1 && args[0] == "help")
                    {
                        HelpUI(player);
                        return;
                    }
                    OpenMap(player);
                }
            }
        }

        string button = "[{\"name\":\"CuiElement\",\"parent\":\"maphelp_2\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"{color}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.03 {amin}\",\"anchormax\":\"0.97 {amax}\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElement\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{text}\",\"fontSize\":16,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2784314\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElement\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"{command}\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";
        private string MapHelp = "[{\"name\":\"maphelp_2\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.1647059 0.1647059 0.1647059 1\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.3704246 0.1914063\",\"anchormax\":\"0.6222548 0.7773438\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_3\",\"parent\":\"maphelp_2\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.8431373 0.3372549 0.2509804 1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.9359605\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_4\",\"parent\":\"maphelp_3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"<b>RustMap v{version}</b>\",\"fontSize\":18,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2784314\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_5\",\"parent\":\"maphelp_2\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"<b>Oxide-Russia.ru</b>   \",\"align\":\"MiddleRight\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.01492521 0.004926026\",\"anchormax\":\"1 0.06896545\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_6\",\"parent\":\"maphelp_2\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.2728048 0.2728048 0.2728048 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0.8431373 0.3372549 0.2509804 1\",\"distance\":\"0 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.51 0.07635458\",\"anchormax\":\"0.97 0.135468\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_7\",\"parent\":\"maphelp_6\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"☓ <b>Закрыть</b>\",\"fontSize\":16,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2784314\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"button1\",\"parent\":\"maphelp_6\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"maphelp_2\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\"}]},{\"name\":\"maphelp_8\",\"parent\":\"maphelp_2\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.8431373 0.3372549 0.2509804 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0.8431373 0.3372549 0.2509804 1\",\"distance\":\"0 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.03 0.07731612\",\"anchormax\":\"0.48 0.1364295\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"maphelp_9\",\"parent\":\"maphelp_8\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"♦ <b>Открыть карту</b>\",\"fontSize\":16,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2784314\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"button2\",\"parent\":\"maphelp_8\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"map.open\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\"}]}]";

        void HelpUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "maphelp_2");
            CuiHelper.AddUi(player, MapHelp.Replace("{version}", Version.ToString()));
            var container = new CuiElementContainer();
            double amin = 0.82;
            double amax = 0.91;
            if (friendsSupport)
            {
                var color = data.MapPlayerData[player.userID].Friends ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Друзья на карте").Replace("{command}", "cmd.help friends").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color));

                amin = (amin - 0.11);
                amax = (amax - 0.11);
            }
            if (clanSupport)
            {
                var color = data.MapPlayerData[player.userID].Clans ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Соклановцы на карте").Replace("{command}", "cmd.help clans").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
            }
            if (TeamSupport)
            {
                var color = data.MapPlayerData[player.userID].Teams ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Команда на карте").Replace("{command}", "cmd.help team").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
            }
            if (sethome)
            {
                var color = data.MapPlayerData[player.userID].Homes ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Отображение домов на карте").Replace("{command}", "cmd.help homes").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
            }
            var color1 = data.MapPlayerData[player.userID].Death ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
            CuiHelper.AddUi(player, button.Replace("{text}", "Отображение последней смерти на карте").Replace("{command}", "cmd.help death").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color1));
            amin = (amin - 0.11);
            amax = (amax - 0.11);
            if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, MAP_ADMIN))
            {
                CuiHelper.AddUi(player, button.Replace("{text}", "Админ раздел").Replace("{command}", "").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", "0.85 0.34 0.25 0"));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
                var color = data.MapPlayerData[player.userID].AllPlayers ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Отобразить всех игроков на карте").Replace("{command}", "cmd.help allplayers").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
                var color2 = data.MapPlayerData[player.userID].BanPlayers ? "0.85 0.34 0.25 1.00" : "0.33 0.33 0.33 1.00";
                CuiHelper.AddUi(player, button.Replace("{text}", "Отобразить забаненых игроков на карте").Replace("{command}", "cmd.help banplayers").Replace("{amin}", amin.ToString()).Replace("{amax}", amax.ToString()).Replace("{color}", color2));
                amin = (amin - 0.11);
                amax = (amax - 0.11);
            }

        }

        [ConsoleCommand("cmd.help")]
        private void CmdHelpControll(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            switch (arg.Args[0])
            {
                case "friends":
                    if (data.MapPlayerData[player.userID].Friends)
                    {
                        data.MapPlayerData[player.userID].Friends = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].Friends = true;
                    }
                    break;
                case "team":
                    if (data.MapPlayerData[player.userID].Teams)
                    {
                        data.MapPlayerData[player.userID].Teams = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].Teams = true;
                    }
                    break;
                case "clans":
                    if (data.MapPlayerData[player.userID].Clans)
                    {
                        data.MapPlayerData[player.userID].Clans = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].Clans = true;
                    }
                    break;
                case "homes":
                    if (data.MapPlayerData[player.userID].Homes)
                    {
                        data.MapPlayerData[player.userID].Homes = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].Homes = true;
                    }
                    break;
                case "allplayers":
                    if (data.MapPlayerData[player.userID].AllPlayers)
                    {
                        data.MapPlayerData[player.userID].AllPlayers = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].AllPlayers = true;
                    }
                    break;
                case "banplayers":
                    if (data.MapPlayerData[player.userID].BanPlayers)
                    {
                        data.MapPlayerData[player.userID].BanPlayers = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].BanPlayers = true;
                    }
                    break;
                case "death":
                    if (data.MapPlayerData[player.userID].Death)
                    {
                        data.MapPlayerData[player.userID].Death = false;
                    }
                    else
                    {
                        data.MapPlayerData[player.userID].Death = true;
                    }
                    break;
            }
            HelpUI(player);
        }

        [ConsoleCommand("map.wipe")]
        private void CmdTest(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null) return;
            LoadData();
            m_FileManager.WipeData();
            Interface.Oxide.ReloadPlugin(Title);
        }

        [ConsoleCommand("map.open")]
        void ConsoleMap(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (!init) return;
            if (subscribers.Keys.Contains(player))
            {
                CloseMap(player);
            }
            else
            {
                OpenMap(player);
            }
            return;
        }

        private Timer mtimer;

        void OnServerInitialized()
        {
            m_Instance = this;

            worldSize = (int)World.Size;
            mapSeed = World.Seed.ToString();
            level = ConVar.Server.level;
            mapSize1 = TerrainMeta.Size.x;
            MapPlayerData = Interface.Oxide.DataFileSystem.GetFile("RustMap/MapPlayerData");
            LoadData();
            PermissionService.RegisterPermissions(this, new List<string>() { MAP_ADMIN, permissionName });
            LoadDefaultConfig();
            worldSize = (int)World.Size;
            var anchorMin = new Vector2(0.5f - mapSize * 0.5f, 0.5f - mapSize * 0.800f);
            var anchorMax = new Vector2(0.5f + mapSize * 0.5f, 0.5f + mapSize * 0.930f);
            mapJson = mapJson.Replace("{2}", $"{anchorMin.x} {anchorMin.y}").Replace("{3}", $"{anchorMax.x} {anchorMax.y}");
            mapIconTextJson = mapIconTextJson.Replace("{color}", textColor);
            mapIconTextJsonIcon = mapIconTextJsonIcon.Replace("{color1}", textColor1);

            InitFileManager();
            m_FileManager.StartCoroutine(DownloadMapImage());

            foreach (var player in BasePlayer.activePlayerList)
            {
                OnPlayerInit(player);
            }

            mtimer = timer.Every(MapUpdate, () =>
            {
                foreach (var mm in temporaryMarkers)
                    if (mm.NeedRedraw())
                    {
                        ++mm.counter;
                        foreach (var sub in subscribers)
                            DrawMapMarker(sub.Key, mm);
                    }
                foreach (var sub in subscribers)
                {
                    RedrawPlayers(sub.Value);
                }
            });
            BansUpdate();
            timer.Every(20f, BansUpdate);

            foreach (var entity in BaseNetworkable.serverEntities.Select(p => p as BaseEntity).Where(p => p != null))
                OnEntitySpawned(entity);
        }

        void LoadData()
        {
            try
            {
                data = Interface.GetMod().DataFileSystem.ReadObject<DataStorage>("RustMap/MapPlayerData");
            }

            catch
            {
                data = new DataStorage();
            }
        }

        void OnServerSave()
        {
            PlayerSaveData();
        }

        private void PlayerSaveData()
        {
            MapPlayerData.WriteObject(data);
        }

        class DataStorage
        {
            public Dictionary<ulong, MAPDATA> MapPlayerData = new Dictionary<ulong, MAPDATA>();
            public DataStorage() { }
        }

        class MAPDATA
        {
            public string Name;
            public bool Homes;
            public bool Friends;
            public bool Clans;
            public bool Death;
            public bool AllPlayers;
            public bool Teams;
            public bool BanPlayers;
            public Vector3 CustomIcon;
        }

        DataStorage data;

        private DynamicConfigFile MapPlayerData;

        void OnPlayerInit(BasePlayer player)
        {
            if (!mapPlayers.ContainsKey(player)) mapPlayers[player] = MapPlayer.Create(player);
            if (!data.MapPlayerData.ContainsKey(player.userID))
            {

                data.MapPlayerData.Add(player.userID, new MAPDATA()
                {
                    Name = player.displayName,
                    Homes = false,
                    Friends = false,
                    Clans = false,
                    AllPlayers = false,
                    BanPlayers = false,
                    Death = true,
                    Teams = false,
                    CustomIcon = Vector3.zero
                });
            }
            else
            {
                data.MapPlayerData[player.userID].Name = player.displayName.ToString();
            }
        }

        void OnNewSave()
        {
            LoadData();
            PrintWarning("Обнаружен вайп. Обновляем карту!");
            Interface.Oxide.DataFileSystem.WriteObject("RustMap/Images", new Dictionary<string, FileInfo>());
            Interface.Oxide.ReloadPlugin(Title);
        }

        void Unload()
        {
            if (m_FileManager != null)
            {
                m_FileManager.SaveData();

            }
            foreach (var pl in data.MapPlayerData)
            {
                if (pl.Value.CustomIcon != Vector3.zero)
                    pl.Value.CustomIcon = pl.Value.CustomIcon = Vector3.zero;
            }
            PlayerSaveData();

            if (!init) return;
            foreach (var sub in subscribers.Keys)
            {
                CuiHelper.DestroyUi(sub, "map_mainImage");
            }
            if (FileManagerObject != null)
                UnityEngine.Object.Destroy(FileManagerObject);

        }

        void OnEntitySpawned(BaseEntity entity)
        {
            if (entity == null) return;
            if (plane && entity is CargoPlane)
                AddTemporaryMarker("plane", true, planeIconSize, planeIconAlpha, entity.transform);

            if (planeDrop && entity is SupplyDrop)
            {
                AddTemporaryMarker("mapsupply", false, planeDropIconSize, planeDropIconAlpha, entity.transform, "name");
            }

            if (NewHeli && entity is CH47Helicopter)
            {
                AddTemporaryMarker("newheli", true, NewheliIconSize, NewheliIconAlpha, entity.transform);
            }
            if (NewHeliCrate && entity is HackableLockedCrate)
            {
                if (!(entity.GetParentEntity() is CargoShip))
                AddTemporaryMarker("newhelicreate", false, NewHeliCrateIconSize, NewHeliCrateIconAlpha, entity.transform);
            }
            if (bradley && entity is BradleyAPC)
            {
                AddTemporaryMarker("bradley", true, bradleyIconSize, bradleyIconAlpha, entity.transform);
            }
            if (heli && entity is BaseHelicopter)
            {
                AddTemporaryMarker("heli", true, heliIconSize, heliIconAlpha, entity.transform);
            }
            if (ship && entity is CargoShip)
            {
                AddTemporaryMarker("ship", true, CargoIconSize, CargoIconAlpha, entity.transform);
            }
            if (heliDrop && entity is HelicopterDebris)
            {
                AddTemporaryMarker("helidebris", false, heliDropIconSize, heliDropIconAlpha, entity.transform);
            }
            if (vendingMachine && entity is VendingMachine)
            {
                if (!NPCVendingMachine)
                    if (entity is NPCVendingMachine) return;

                if (vendingMachineEmpty || !((VendingMachine)entity).IsInventoryEmpty())
                {
                    AddTemporaryMarker("vending", false, vendingMachineIconSize, vendingMachineIconAlpha, entity.transform);
                }
            }
        }

        void OnEntityKill(BaseNetworkable entity)
        {
            if (entity?.net?.ID == null) return;
            if (entity is CargoPlane || entity is SupplyDrop || entity is BaseHelicopter || entity is HelicopterDebris || entity is VendingMachine)
            {
                var transform = entity.transform;
                var mm = temporaryMarkers.Find(p => p.transform == transform);
                if (mm != null)
                    RemoveTemporaryMarker(mm);
            }
        }

        void OpenMap(BasePlayer player)
        {
            if (!init || player == null)
            {
                SendReply(player, "Извините! В данный момент карта не активирована");
                return;
            }
            if (CloseMapTimer != null) CloseMapTimer.Destroy();
            CuiHelper.AddUi(player, mapJson);
            CuiHelper.AddUi(player, monumentsJson);
            foreach (var mm in temporaryMarkers)
                DrawMapMarker(player, mm);
            List<ulong> members = new List<ulong>();
            if (PermissionService.HasPermission(player.userID, MAP_ADMIN))
            {
                if (data.MapPlayerData[player.userID].BanPlayers == true)
                {
                    foreach (var mm in bannedMarkers.Values)
                        DrawMapMarker(player, mm);
                }
            }
            if (data.MapPlayerData[player.userID].AllPlayers)
            {
                mapPlayers[player].clanTeam = BasePlayer.activePlayerList.Where(p => p != player).Select(MapPlayer.Create).ToList();

            }
            else
            {
                mapPlayers[player].clanTeam = new List<MapPlayer>();
                if (clanSupport)
                {
                    if (data.MapPlayerData[player.userID].Clans)
                    {
                        var clanmates = Clans.Call("GetClanMembers", player.userID);
                        if (clanmates != null)
                            members.AddRange(clanmates as List<ulong>);
                    }
                }
                if (TeamSupport)
                {
                    if (data.MapPlayerData[player.userID].Teams)
                    {
                        var teams = GetTeamMembers(player);
                        if (teams != null)
                            members.AddRange(teams);
                    }
                }
                if (friendsSupport)
                {
                    if (data.MapPlayerData[player.userID].Friends)
                    {
                        var friends = Friends?.Call("GetFriends", player.userID);
                        if (friends != null)
                            members.AddRange(friends as ulong[]);

                        var classes = PlayersClasses?.Call("GetPlayers", player.userID);
                        if (classes != null)
                            members.AddRange(classes as List<ulong>);
                        var MutualFr = MutualPermission?.Call("GetFriends", player.userID, "Map") as ulong[];
                        if (MutualFr != null)
                        {
                            members.AddRange(MutualFr as ulong[]);
                        }
                    }
                }
            }
            var homes = GetHomes(player);
            if (sethome && homes != null)

                foreach (var home in homes)
                {
                    var anchors = ToAnchors(home.Value, sethomeIconSize);
                    if (data.MapPlayerData[player.userID].Homes == true)
                    {
                        DrawIconNull(player, "sethome" + home.Key, "sethome" + home.Key, anchors, images["sethome"], 1.0f, $"Дом: \"{home.Key}\"", 8, false);
                    }
                }
            if (quarry && CustomQuarry != null)
            {
                var playerQuarries = GetPlayerQuarries(player.userID);
                if (playerQuarries != null)
                {
                    foreach (var quarry in playerQuarries)
                    {
                        var anchors = ToAnchors(quarry.Key, quarryIconSize);
                        DrawIconNull(player, "quarry" + quarry.Value, "quarry" + quarry.Value, anchors, images["quarry"], 1.0f, "Топливо: " + quarry.Value, 2, false);
                    }
                }
            }
            if (data.MapPlayerData[player.userID].CustomIcon != Vector3.zero)
            {

                var anchors = ToAnchors(data.MapPlayerData[player.userID].CustomIcon, 0.03f, "yes");
                DrawIconNull(player, "custom", "custom", anchors, images["custom"], 1.0f, "Ваша метка", 4, false);
            }
            if (members != null && members.Count > 0)
            {
                var onlineMembers = BasePlayer.activePlayerList.Where(p => members.Contains(p.userID) && p != player).ToList();
                mapPlayers[player].clanTeam.AddRange(onlineMembers.Select(MapPlayer.Create).ToList());
            }
            if (raidhomes)
            {
                var zones = GetRaidZones(player);
                if (zones != null)
                    foreach (var zone in zones)
                    {
                        var anchors = ToAnchors(zone, raidhomeSIze);
                        DrawIcon(player, "raidhome" + zone, "raidhome" + zone, anchors, images["raidhome"], 0.95f, null, 12, false);
                    }
            }

            if (playerDic.ContainsKey(player.userID))
            {
                if (data.MapPlayerData[player.userID].Death)
                {
                    var anchors = ToAnchors(playerDic[player.userID].ToVector3(), deathIconSize);
                    DrawIconNull(player, "death" + player.userID, "death" + player.userID, anchors, images["death"], 1.0f, $"Ты умер здесь", 10, false);
                }
            }
            subscribers[player] = mapPlayers[player];
            RedrawPlayers(mapPlayers[player]);

            CloseMapTimer = timer.Once(TimeToClose, () =>
            {
                if (player == null) return;
                CloseMap(player);
            });
        }


        private List<ulong> GetTeamMembers(BasePlayer player)
        {
            if (player.currentTeam == 0)
                return null;
            return RelationshipManager._instance.FindTeam(player.currentTeam).members.Where(p => p.ToString() != player.UserIDString).ToList();
        }

        private Dictionary<ulong, string> playerDic = new Dictionary<ulong, string>();

        string permissionName = "rustmap.death";

        private object OnPlayerDie(BasePlayer player, HitInfo info)
        {
            if (!permission.UserHasPermission(player.UserIDString, permissionName))
                return null;
            if (playerDic.ContainsKey(player.userID))
            {
                playerDic.Remove(player.userID);
            }
            playerDic.Add(player.userID, player.transform.position.ToString());
            return null;
        }

        [PluginReference]
        Plugin NoEscape;

        List<Vector3> GetRaidZones(BasePlayer player)
        {
            return (List<Vector3>)NoEscape?.Call("ApiGetOwnerRaidZones", player.userID);
        }

        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            subscribers.Remove(player);
            mapPlayers.Remove(player);
            foreach (var sub in mapPlayers)
            {
                var toRemove = sub.Value.clanTeam.Where(p => p.player == player).ToList();
                foreach (var teammate in toRemove)
                {
                    CuiHelper.DestroyUi(sub.Key, teammate.name + teammate.counter);
                    CuiHelper.DestroyUi(sub.Key, teammate.name + teammate.counter + "text");
                }
                toRemove.ForEach(p => sub.Value.clanTeam.Remove(p));
            }
            data.MapPlayerData[player.userID].CustomIcon = data.MapPlayerData[player.userID].CustomIcon = Vector3.zero;
        }

        void RedrawPlayers(MapPlayer mapPlayer)
        {
            var player = mapPlayer.player;
            if (mapPlayer.clanTeam != null)
            {
                foreach (var tmMapPlayer in mapPlayer.clanTeam)
                {
                    DrawMapPlayer(player, tmMapPlayer, true);
                }
            }
            DrawMapPlayer(player, mapPlayer);
        }

        void CloseMap(BasePlayer player)
        {
            if (CloseMapTimer != null) timer.Destroy(ref CloseMapTimer);
            subscribers.Remove(player);
            mapPlayers[player].OnCloseMap();
            CuiHelper.DestroyUi(player, "map_mainImage");
        }

        void DrawMapPlayer(BasePlayer player, MapPlayer mp, bool friend = false)
        {

            if (mp.NeedRedraw())
            {
                if (!friend && playerCoordinates)
                {
                    CuiHelper.DestroyUi(player, "map_coordinates");
                    var curX = ((float)Math.Round(mp.transform.position.x, 1)).ToString();
                    var curZ = ((float)Math.Round(mp.transform.position.z, 1)).ToString();
                    CuiHelper.AddUi(player, Format(mapCoordsTextJson, "<size=20>" + curX + " <color=#EF015A>/</color> " + curZ + "</size>"));

                }
                var pos = mp.player.transform.position;
                var anchors = ToAnchors(pos, playerIconSize);
                var png = !friend ? PlayerPng(mp.Rotation) : FriendPng(mp.Rotation);
                if (png == null)
                {
                    PrintError($"{friend}", mp.Rotation.ToString());
                    png = FriendPng(mp.Rotation - 2);
                }
                if (!InMap(pos))
                {
                    CuiHelper.DestroyUi(player, "mapPlayer" + mp.player.userID + (mp.counter));
                    CuiHelper.DestroyUi(player, "mapPlayer" + mp.player.userID + (mp.counter) + "text");
                    return;
                }

                DrawIcon(player, "mapPlayer" + mp.player.userID + (mp.counter), "mapPlayer" + mp.player.userID + (++mp.counter), anchors, png, mp.alpha, mp.player.displayName);
            }
        }

        void AddTemporaryMarker(string png, bool rotSupport, float size, float alpha, Transform transform, string name = "")
        {
            var mm = MapMarker.Create(transform);
            mm.name = string.IsNullOrEmpty(name) ? transform.GetInstanceID().ToString() : name;
            mm.png = png;
            mm.rotSupport = rotSupport;
            mm.size = size;
            mm.alpha = alpha;
            mm.fontsize = 12;
            mm.position = transform.position;
            temporaryMarkers.Add(mm);
            foreach (var sub in subscribers)
                DrawMapMarker(sub.Key, mm);
        }

        void RemoveTemporaryMarkerByName(string name)
        {
            var mm = temporaryMarkers.FirstOrDefault(p => p.name == name);
            if (mm != null)
                RemoveTemporaryMarker(mm);
        }

        void RemoveTemporaryMarker(MapMarker mm)
        {
            temporaryMarkers.Remove(mm);
            foreach (var sub in subscribers)
                CuiHelper.DestroyUi(sub.Key, mm.transform.GetInstanceID().ToString() + mm.counter);
        }

        void DrawIcon(BasePlayer player, string lastName, string name, string[] anchors, string png, float alpha, string text = null, int fontsize = 12, bool destroy = true)
        {
            if (destroy)
            {
                timer.Once(0.05f, () =>
                {
                    CuiHelper.DestroyUi(player, lastName);
                });
                CuiHelper.DestroyUi(player, lastName + "text");
            }
            CuiHelper.AddUi(player, Format(mapHelpJson, $"{MapText}"));
            CuiHelper.AddUi(player, Format(mapIconJson, name, anchors[0], anchors[1], png, alpha));
            if (!string.IsNullOrEmpty(text))
                CuiHelper.AddUi(player, Format(mapIconTextJson, name + "text", anchors[2], anchors[3], text.Replace("\"", ""), fontsize));
        }

        void DrawIconNull(BasePlayer player, string lastName, string name, string[] anchors, string png, float alpha, string text = null, int fontsize = 12, bool destroy = true)
        {
            if (destroy)
            {
                timer.Once(0.05f, () =>
                {
                    CuiHelper.DestroyUi(player, lastName);
                });
                CuiHelper.DestroyUi(player, lastName + "text");
            }
            CuiHelper.AddUi(player, Format(mapIconJson, name, anchors[0], anchors[1], png, alpha));
            if (!string.IsNullOrEmpty(text))
                CuiHelper.AddUi(player, Format(mapIconTextJsonIcon, name + "text", anchors[2], anchors[3], text.Replace("\"", ""), fontsize));
        }

        void DrawDeath(BasePlayer player, string lastName, string name, string[] anchors, string png, float alpha, string text = null, int fontsize = 12, bool destroy = true)
        {
            if (destroy)
            {
                timer.Once(0.05f, () =>
                {
                    CuiHelper.DestroyUi(player, lastName);
                });
                CuiHelper.DestroyUi(player, lastName + "text");
            }
            CuiHelper.AddUi(player, Format(mapIconJson, name, anchors[0], anchors[1], png, alpha));
            if (!string.IsNullOrEmpty(text))
                CuiHelper.AddUi(player, Format(mapIconTextJsonIcon, name + "text", anchors[2], anchors[3], text.Replace("\"", ""), fontsize));
        }

        void DrawMapMarker(BasePlayer player, MapMarker mm)
        {
            if (mm.transform == null) return;
            var pos = mm.transform.position;
            var anchors = ToAnchors(pos, mm.size);
            var png = mm.png;
            if (mm.rotSupport)
                png += GetRotation(mm.transform.rotation.eulerAngles.y);

            if (images[png] == null)
            {
                PrintError("PNG = NULL: " + png);
                return;
            }
            if (mm.inMap && !InMap(pos))
            {
                CuiHelper.DestroyUi(player, mm.name + (mm.counter - 1) + "text");
                CuiHelper.DestroyUi(player, mm.name + (mm.counter - 1));

                mm.inMap = false;
                return;
            }
            mm.inMap = InMap(pos);
            if (!mm.inMap)
            {
                return;
            }
            DrawIcon(player, mm.name + (mm.counter - 1), mm.name + (mm.counter), anchors, images[png], mm.alpha, mm.text);
        }

        bool InMap(Vector3 pos)
        {
            float halfSize = (int)TerrainMeta.Size.x * 0.5f;
            return pos.x < halfSize && pos.x > -halfSize && pos.z < halfSize && pos.z > -halfSize;
        }

        List<ulong> bannedCache = new List<ulong>();
        Dictionary<BasePlayer, MapMarker> bannedMarkers = new Dictionary<BasePlayer, MapMarker>();

        void AddBannedMarker(BasePlayer player)
        {
            var transform = player.transform;
            var mm = MapMarker.Create(transform);
            mm.png = "banned";
            mm.rotSupport = false;
            mm.name = transform.GetInstanceID().ToString();
            mm.alpha = 1f;
            mm.size = bannedSize;
            mm.position = transform.position;
            bannedMarkers[player] = mm;

            foreach (var sub in subscribers)
                if (PermissionService.HasPermission(sub.Key.userID, MAP_ADMIN))
                    DrawMapMarker(sub.Key, mm);
        }

        void RemoveBannedMarker(BasePlayer player)
        {
            var mm = bannedMarkers[player];
            bannedMarkers.Remove(player);
            foreach (var sub in subscribers)
                CuiHelper.DestroyUi(sub.Key, mm.transform.GetInstanceID().ToString() + mm.counter);
        }

        void BansUpdate()
        {
            var unlisted = ServerUsers.GetAll(ServerUsers.UserGroup.Banned).Select(p => p.steamid).Except(bannedCache).ToList();
            bannedCache.AddRange(unlisted);
            if (unlisted.Count == 0) return;
            foreach (var player in BasePlayer.sleepingPlayerList)
            {
                if (unlisted.Contains(player.userID))
                {
                    AddBannedMarker(player);
                }
            }
        }

        void OnPlayerBanned(Connection connection, string reason)
        {
            var userId = connection.userid;
            if (bannedCache.Contains(userId)) return;

            var user = BasePlayer.activePlayerList.Find(p => p.userID == userId);
            if (user == null)
            {
                user = BasePlayer.sleepingPlayerList.Find(p => p.userID == userId);
                if (user == null) return;
                AddBannedMarker(user);
                return;
            }
            AddBannedMarker(user);
        }

        void OnEntityDeath(BaseCombatEntity entity)
        {
            var player = entity as BasePlayer;
            if (player == null || !player.IsSleeping()) return;
            if (bannedMarkers.ContainsKey(player))
            {
                RemoveBannedMarker(player);
            }
        }

        void FindStaticMarkers()
        {
            if (!this.monuments)
            {
                monumentsJson = "";
                return;
            }
            var monuments = UnityEngine.Object.FindObjectsOfType<MonumentInfo>();
            var container = new CuiElementContainer();
            foreach (var monument in monuments)
            {
                var anchors = ToAnchors(monument.transform.position, monumentIconSize);
                string png;
                string text = null;
                if (monument.Type == MonumentType.Cave && caves)
                    png = "cave";
                else
                if (monument.name.Contains("lighthouse"))
                {
                    png = "lighthouse";
                    text = "Маяк";
                }

                else if (monument.name.Contains("powerplant_1"))
                {
                    png = "powerplant";
                    text = "АЭС";
                }
                else if (monument.name.Contains("military_tunnel_1"))
                {
                    png = "militarytunnel";
                    text = "Военные Туннели";
                }
                else if (monument.name.Contains("airfield_1"))
                {
                    png = "airfield";
                    text = "Аэропорт";
                }
                else if (monument.name.Contains("trainyard_1"))
                {
                    png = "trainyard";
                    text = "Депо";
                }
                else if (monument.name.Contains("junkyard_1"))
                {
                    png = "dump";
                    text = "Свалка";
                }
                else if (monument.name.Contains("compound"))
                {
                    png = "avanpost";
                    text = "Аванпост";
                }
                else if (monument.name.Contains("water_treatment_plant_1"))
                {
                    png = "watertreatment";
                    text = "Водоочистные";
                }
                else if (monument.name.Contains("water_well") && water)
                {
                    png = "water";
                }
                else if (monument.name.Contains("warehouse"))
                {
                    png = "warehouse";
                    text = "Склад";
                }
                else if (monument.name.Contains("satellite_dish"))
                {
                    png = "satellitedish";
                    text = "Антены";
                }
                else if (monument.name.Contains("gas_station"))
                {
                    png = "gasstation";
                    text = "Заправка";
                }
                else if (monument.name.Contains("supermarket"))
                {
                    png = "supermarket";
                    text = "Супермаркет";
                }
                else if (monument.name.Contains("sphere_tank"))
                {
                    png = "spheretank";
                    text = "Сфера";
                }
                else if (monument.name.Contains("harbor"))
                {
                    png = "harbor";
                    text = "Порт";
                }
                else if (monument.name.Contains("bandit_town"))
                {
                    png = "bandit";
                    text = "Город Бандитов";
                }
                else if (monument.name.Contains("radtown_small_3"))
                {
                    png = "radtown";
                    text = "РедТаун";
                }
                else if (monument.name.Contains("power_sub") && powersub)
                    png = "powersub";

                else if (monument.name.Contains("swamp") && swamp)
                    png = "swamp";

                else if (monument.name.Contains("mining_quarry_a"))
                {
                    png = "cquarry";
                    text = "Cерный карьер";
                }

                else if (monument.name.Contains("mining_quarry_b"))
                {
                    png = "cquarry";
                    text = "Каменный Карьер";
                }

                else if (monument.name.Contains("mining_quarry_c"))
                {
                    png = "cquarry";
                    text = "МВК Карьер";
                }

                else if (monument.name.Contains("launch_site_1"))

                {
                    png = "launchsite";
                    text = "Космодром";
                }
				
                else if (monument.name.Contains("OilrigAI2") && Oilrig)

                {
                    png = "OilrigAI";
                    text = "Нефтяная вышка 2";
                }
				
                else if (monument.name.Contains("OilrigAI") && Oilrig)

                {
                    png = "OilrigAI";
                    text = "Нефтяная вышка 1";
                }
				
                else if (monument.name.Contains("excavator_1"))

                {
                    png = "excavator";
                    text = "Экскаватор";
                }
                else
                {
                    Puts($"Выключенные объекты согласно конфигурации: {monument.name}");
                    continue;
                }
                container.Add(new CuiElement()
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = "map_mainImage",
                    Components =
                    {
                new CuiRawImageComponent()
                {
                    Sprite = "assets/content/textures/generic/fulltransparent.tga",
                    Png = images[png],
                    Color = $"1 1 1 {monumentIconAlpha}"
                },

                        new CuiRectTransformComponent() { AnchorMin = anchors[0], AnchorMax = anchors[1] }
                    }
                });
                if (!string.IsNullOrEmpty(text) && monumentIconNames)
                {
                    container.Add(new CuiElement()
                    {
                        Name = CuiHelper.GetGuid(),
                        Parent = "map_mainImage",
                        Components =
                    {
        new CuiTextComponent()
        {
            Text = text,
            FontSize = monumentsFontSize,
            Align = TextAnchor.MiddleCenter,
        },
                        new CuiOutlineComponent()
                        {
                            Color = "0 0 0 1"
                        },
                        new CuiRectTransformComponent() { AnchorMin = anchors[2], AnchorMax = anchors[3] }
                    }
                    });
                }
            }
            if (SpawnsControl != null)
            {
                bool left = true;
                container.AddRange(
                    GetSpawnZones()
                                        .Select(spawn => ToAnchors(spawn.Key, (float)spawn.Value * 2 / worldSize))
                                        .Select(anchors =>
                                        {
                                            var element = new CuiElement()
                                            {
                                                Name = CuiHelper.GetGuid(),
                                                Parent = "map_mainImage",
                                                Components =
                                                {
                                    new CuiRawImageComponent()
                                    {
                                        Sprite = "assets/content/textures/generic/fulltransparent.tga",
                                        Png = left ? images["spawnLeft"] : images["spawnRight"]
                                    },
                                    new CuiRectTransformComponent() {AnchorMin = anchors[0], AnchorMax = anchors[1]}
                                                }
                                            };
                                            left = false;
                                            return element;
                                        }));
            }
            this.monumentsJson = container.ToJson();
        }

        [PluginReference]
        Plugin SpawnsControl;

        Dictionary<Vector3, int> GetSpawnZones() => SpawnsControl.Call<Dictionary<Vector3, int>>("GetSpawnZones");

        Dictionary<string, Vector3> GetHomes(BasePlayer player)
        {
            var a1 = (Dictionary<string, Vector3>)NTeleportation?.Call("GetHomes", player.userID) ?? new Dictionary<string, Vector3>();
            var a2 = (Dictionary<string, Vector3>)Teleport?.Call("ApiGetHomes", player.userID) ?? new Dictionary<string, Vector3>();
            var a3 = (Dictionary<string, Vector3>)Teleportation?.Call("GetHomes", player.userID) ?? new Dictionary<string, Vector3>();
            var a4 = (Dictionary<string, Vector3>)HomesGUI?.Call("GetPlayerHomes", player.UserIDString) ?? new Dictionary<string, Vector3>();
            return a1.Concat(a2).Concat(a3).Concat(a4).GroupBy(p => p.Key).ToDictionary(p => p.Key, p => p.First().Value);
        }

        Dictionary<Vector3, int> GetPlayerQuarries(ulong userId)
        {
            return CustomQuarry.Call("GetPlayerQuarries", userId) as Dictionary<Vector3, int>;
        }

        string[] ToAnchors(Vector3 position, float size, string yes = "")
        {
            Vector2 center = ToScreenCoords(position);
            if (yes == "yes") center.y = center.y + 0.02f;
            size *= 0.5f;
            return new[]
            {
                $"{center.x - size} {center.y - size}",
                $"{center.x + size} {center.y + size}",
                $"{center.x - 0.1} {center.y - size-0.04f}",
                $"{center.x + 0.1} {center.y - size+0.02}"
            };
        }

        Vector2 ToScreenCoords(Vector3 vec)
        {
            return new Vector2((vec.x + (int)World.Size * 0.5f) / (int)World.Size, (vec.z + (int)World.Size * 0.5f) / (int)World.Size);
        }

        static int GetRotation(float angle)
        {
            if (angle > 348.75f && angle < 11.25f)
                return 16;
            if (angle > 11.25f && angle < 33.75f)
                return 1;
            if (angle > 33.75f && angle < 56.25f)
                return 2;
            if (angle > 56.25f && angle < 78.75f)
                return 3;
            if (angle > 78.75f && angle < 101.25f)
                return 4;
            if (angle > 101.25f && angle < 123.75f)
                return 5;
            if (angle > 123.75f && angle < 146.25F)
                return 6;
            if (angle > 146.25F && angle < 168.75D)
                return 7;
            if (angle > 168.75F && angle < 191.25D)
                return 8;
            if (angle > 191.25F && angle < 213.4D)
                return 9;
            if (angle > 213.75F && angle < 236.25D)
                return 10;
            if (angle > 236.25F && angle < 258.75D)
                return 11;
            if (angle > 258.75D && angle < 281.25D)
                return 12;
            if (angle > 281.25D && angle < 303.75D)
                return 13;
            if (angle > 303.75D && angle < 326.25D)
                return 14;
            if (angle > 326.25D && angle < 348.75D)
                return 15;
            return 16;
        }

        private void DisableMaps(BasePlayer player)
        {
            if (subscribers.Keys.Contains(player))
            {
                CloseMap(player);
            }
        }

		bool mapLoaded = true;
		
		IEnumerator DownloadMapImage()
        {
            if (!string.IsNullOrEmpty(mapUrl))
            {
                images[MapFilename] = mapUrl;
            }
            if (images.ContainsKey(MapFilename))
            {
                yield return CommunityEntity.ServerInstance.StartCoroutine(LoadImages());
                mapLoaded = true;
                yield break;
            }
            if (string.IsNullOrEmpty(beancanKey))
            {
                PrintError("Вы должны указать действительный ключ API (Beancan.io) или указать ссылку на картинку в <Кастомная карта> (http:// или Data)!\nЧто бы получить ключ Beanсan посетите сайт 'beancan.io'!");
                yield break;
            }
            PrintWarning("Подключение к BeanCan.io для генерации карты!");
            GetQueueID();
        }

        void GetQueueID()
        {
            var reply = 230;
            if (reply == 0) { }

            var url = "http://beancan.io/map-queue-generate?"+$"level={ConVar.Server.level}&seed={World.Seed}&size={TerrainMeta.Size.x}&key={beancanKey}";
            webrequest.Enqueue(url, null, (code, response) =>
            {
                if (code == 201)
                {
                    PrintError("У вас старая версия карты. Обновите ее на сайте Oxide-Russia.ru");
                    Interface.Oxide.UnloadPlugin(Title);
                    return;
                }
                if (code != 200 || string.IsNullOrEmpty(response))
                {
                    if (code == 403)
                        PrintError($"Error:  - Invalid API key. Unable to download map image");
                    else
                    {
                        PrintWarning($"Ошибка подключения к BeanCan.io для генерации карты!\nЕсли генерация карты не происходит используйте картинку карты - добавте ее в oxide/data/RustMap\nПолучить картинку карты можно на сайте PlayRust.io");
                        PrintWarning("Повторное подключение через 2 минуты");
                        timer.Once(120, () => GetQueueID());
                    }
                }
                else CheckAvailability(response);

            }, this);
        }

        void CheckAvailability(string queueId)
        {
            webrequest.Enqueue("http://beancan.io/map-queue/"+$"{queueId}", null, (code, response) =>
            {
                if (string.IsNullOrEmpty(response))
                {
                    PrintWarning($"Error:  - Couldn't get an answer from beancan.io");
                }
                else ProcessResponse(queueId, response);
            }, this);
        }
		
		void ProcessResponse(string queueId, string response)
        {
            switch (response)
            {
                case "-1":
                    PrintWarning("Your map is still in the queue to be generated. Checking again in 10 seconds");
                    break;
                case "0":
                    PrintWarning("Your map is still being generated. Checking again in 10 seconds");
                    break;
                case "1":
                    GetMapURL(queueId);
                    return;
                default:
                    PrintWarning($"Error retrieving map: Invalid response from beancan.io: Response code {response}");
                    return;
            }
            timer.Once(10, () => CheckAvailability(queueId));
        }
		
        void GetMapURL(string queueId)
        {
            var url = "http://beancan.io/map-queue-image/"+$"{queueId}";
            webrequest.Enqueue(url, null, (code, response) =>
            {
                if (string.IsNullOrEmpty(response))
                {
                    PrintWarning($"Error:  - Couldn't get an answer from beancan.io");
                    PrintWarning("Повторное подключение через 1 минуту");
                    timer.Once(60, () => GetMapURL(queueId));
                }
                else
                {
                    images[MapFilename] = response;
                    Puts(response);
                    CommunityEntity.ServerInstance.StartCoroutine(DownloadMapImage());
                }
            }, this);
        }

        string Format(string value, params object[] args)
        {
            var result = new StringBuilder(value);
            for (int i = 0; i < args.Length; i++)
                if (args[i] == null)
                {
                    throw new NullReferenceException();
                }
                else
                {
                    result.Replace("{" + i + "}", args[i].ToString());
                }
            return result.ToString();
        }

        private System.Random random = new System.Random();
        IEnumerator LoadImages()
		{
			foreach(var name in imagesKeys)
			{
				yield return m_FileManager.StartCoroutine(m_FileManager.LoadFile(name, images[name], name == MapFilename + 1 ? 1440 : -1));
				images[name] = m_FileManager.GetPng(name);
			}
			mapJson = Format(mapJson, MapPng(), mapAlpha);
			FindStaticMarkers();
			init = true;
			mapLoaded = true;
			Puts("Изображения карты успешно загружены!");
			Interface.Call("OnMapInitialized");
			m_FileManager.SaveData();
		}

        string MapFilename => $"{ConVar.Server.level}_{World.Seed}_{TerrainMeta.Size.x}";
        List<string> imagesKeys => images.Keys.ToList();
        string PlayerPng(int rot) => images[imagesKeys[rot - 1]];
        string FriendPng(int rot) => images[imagesKeys[14 + rot]];

        string PlanePng(int rot) => images[imagesKeys[31 + rot]];

        string MapPng() => images[MapFilename];
        [HookMethod("RaidHomePng")]
        string RaidHomePng() => images["raidhome"];
		
        Dictionary<string, string> images = new Dictionary<string, string>()
        {
            {"player1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player1.png"},
            {"player2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player2.png"},
            {"player3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player3.png"},
            {"player4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player4.png"},
            {"player5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player5.png"},
            {"player6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player6.png"},
            {"player7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player7.png"},
            {"player8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player8.png"},
            {"player9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player9.png"},
            {"player10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player10.png"},
            {"player11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player11.png"},
            {"player12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player12.png"},
            {"player13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player13.png"},
            {"player14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player14.png"},
            {"player15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player15.png"},
            {"player16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "player16.png"},

            {"friend1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend1.png"},
            {"friend2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend2.png"},
            {"friend3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend3.png"},
            {"friend4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend4.png"},
            {"friend5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend5.png"},
            {"friend6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend6.png"},
            {"friend7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend7.png"},
            {"friend8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend8.png"},
            {"friend9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend9.png"},
            {"friend10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend10.png"},
            {"friend11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend11.png"},
            {"friend12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend12.png"},
            {"friend13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend13.png"},
            {"friend14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend14.png"},
            {"friend15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend15.png"},
            {"friend16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "friend16.png"},

            {"plane1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane1.png"},
            {"plane2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane2.png"},
            {"plane3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane3.png"},
            {"plane4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane4.png"},
            {"plane5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane5.png"},
            {"plane6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane6.png"},
            {"plane7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane7.png"},
            {"plane8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane8.png"},
            {"plane9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane9.png"},
            {"plane10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane10.png"},
            {"plane11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane11.png"},
            {"plane12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane12.png"},
            {"plane13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane13.png"},
            {"plane14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane14.png"},
            {"plane15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane15.png"},
            {"plane16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "plane16.png"},

            {"bradley1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley1.png"},
            {"bradley2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley2.png"},
            {"bradley3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley3.png"},
            {"bradley4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley4.png"},
            {"bradley5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley5.png"},
            {"bradley6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley6.png"},
            {"bradley7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley7.png"},
            {"bradley8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley8.png"},
            {"bradley9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley9.png"},
            {"bradley10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley10.png"},
            {"bradley11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley11.png"},
            {"bradley12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley12.png"},
            {"bradley13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley13.png"},
            {"bradley14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley14.png"},
            {"bradley15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley15.png"},
            {"bradley16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bradley16.png"},

            { "newheli1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli1.png"},
            {"newheli2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli2.png"},
            {"newheli3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli3.png"},
            {"newheli4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli4.png"},
            {"newheli5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli5.png"},
            {"newheli6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli6.png"},
            {"newheli7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli7.png"},
            {"newheli8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli8.png"},
            {"newheli9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli9.png"},
            {"newheli10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli10.png"},
            {"newheli11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli11.png"},
            {"newheli12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli12.png"},
            {"newheli13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli13.png"},
            {"newheli14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli14.png"},
            {"newheli15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli15.png"},
            {"newheli16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newheli16.png"},

            { "ship1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship1.png"},
            {"ship2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship2.png"},
            {"ship3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship3.png"},
            {"ship4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship4.png"},
            {"ship5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship5.png"},
            {"ship6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship6.png"},
            {"ship7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship7.png"},
            {"ship8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship8.png"},
            {"ship9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship9.png"},
            {"ship10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship10.png"},
            {"ship11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship11.png"},
            {"ship12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship12.png"},
            {"ship13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship13.png"},
            {"ship14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship14.png"},
            {"ship15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship15.png"},
            {"ship16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "ship16.png"},
            {"newhelicreate", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "newhelicreate.png"},
            {"heli1", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli1.png"},
            {"heli2", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli2.png"},
            {"heli3", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli3.png"},
            {"heli4", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli4.png"},
            {"heli5", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli5.png"},
            {"heli6", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli6.png"},
            {"heli7", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli7.png"},
            {"heli8", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli8.png"},
            {"heli9", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli9.png"},
            {"heli10", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli10.png"},
            {"heli11", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli11.png"},
            {"heli12", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli12.png"},
            {"heli13", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli13.png"},
            {"heli14", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli14.png"},
            {"heli15", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli15.png"},
            {"heli16", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "heli16.png"},
            {"lighthouse", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "lighthouse.png" },
            { "special", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "special.png" },
            { "militarytunnel", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "militarytunnel.png"},
            { "airfield", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "airfield.png" },
            { "trainyard", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "trainyard.png" },
            { "gasstation", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "gasstation.png" },
            { "supermarket", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "supermarket.png" },
            { "watertreatment", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "watertreatment.png" },
            { "warehouse", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "warehouse.png" },
            { "satellitedish", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "satellitedish.png" },
            { "spheretank", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "spheretank.png" },
            { "radtown", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "radtown.png" },
            { "powerplant", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "powerplant.png" },
            { "harbor", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "harbor.png" },
            { "powersub", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "powersub.png" },
            { "cave", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "cave.png" },
            { "launchsite", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "launchsite.png" },
			{ "OilrigAI", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "OilrigAI.png" },
			{ "excavator", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + P