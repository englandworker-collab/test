ath.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "excavator.png" },
            { "spawnRight", "http://i.imgur.com/gUpyctl.png" },
            { "spawnLeft", "http://i.imgur.com/mmabTrn.png" },
             { "raidhome", "http://i.imgur.com/fdLjkq7.png" },
            { "mapsupply","file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "mapsupply.png" },
             { "avanpost","file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "avanpost.png" },
            { "helidebris", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "helidebris.png" },
            { "banned", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "banned.png" },
            { "vending", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "vending.png" },
            { "sethome", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "homes.png" },
            { "treasurebox", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "treasurebox.png" },
            { "death", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "death.png" },
            { "meteor", "https://i.imgur.com/BFCdsOx.png" },
            { "rad", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "radhouse.png" },
            { "quarry", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "quarry.png" },
            { "cquarry", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "cquarry.png" },
            { "dump", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "dump.png" },
            { "water", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "water.png" },
             { "custom", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "custom.png" },
             { "bandit", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "bandit.png" },
             { "swamp", "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar + "RustMap" + Path.DirectorySeparatorChar + "icons" + Path.DirectorySeparatorChar + "swamp.png" }

        };

        private GameObject FileManagerObject;
        private FileManager m_FileManager;

        /// <summary>
        /// Инициализация скрипта взаимодействующего с файлами сервера
        /// </summary>
        void InitFileManager()
        {
            FileManagerObject = new GameObject("MAP_FileManagerObject");
            m_FileManager = FileManagerObject.AddComponent<FileManager>();
        }

        class FileManager : MonoBehaviour
        {
            int loaded = 0;
            int needed = 0;

            public bool IsFinished => needed == loaded;
            const ulong MaxActiveLoads = 10;
            Dictionary<string, FileInfo> files = new Dictionary<string, FileInfo>();

            DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetFile("RustMap/Images");

            private class FileInfo
            {
                public string Url;
                public string Png;
            }

            public void SaveData()
            {
                dataFile.WriteObject(files);

            }

            public void WipeData()
            {
                files.Clear();
                SaveData();
            }

            public string GetPng(string name) => files[name].Png;

            private void Awake()
            {
                files = dataFile.ReadObject<Dictionary<string, FileInfo>>() ?? new Dictionary<string, FileInfo>();
            }

            public IEnumerator LoadFile(string name, string url, int size = -1)
            {
                if (files.ContainsKey(name) && files[name].Url == url && !string.IsNullOrEmpty(files[name].Png)) yield break;
                files[name] = new FileInfo() { Url = url };
                needed++;
                yield return StartCoroutine(LoadImageCoroutine(name, url, size));
            }

            IEnumerator LoadImageCoroutine(string name, string url, int size = -1)
            {
                using (WWW www = new WWW(url))
                {
                    yield return www;

                    {
                        if (string.IsNullOrEmpty(www.error))
                        {
                            var bytes = size == -1 ? www.bytes : Resize(www.bytes, size);
                            var entityId = CommunityEntity.ServerInstance.net.ID;
                            var crc32 = FileStorage.server.Store(www.bytes, FileStorage.Type.png, entityId).ToString();
                            files[name].Png = crc32;
                        }
                    }
                }
                loaded++;
            }

            static byte[] Resize(byte[] bytes, int size)
            {
                Image img = (Bitmap)(new ImageConverter().ConvertFrom(bytes));
                Bitmap cutPiece = new Bitmap(size, size);
                System.Drawing.Graphics graphic = System.Drawing.Graphics.FromImage(cutPiece);
                graphic.DrawImage(img, new Rectangle(0, 0, size, size), 0, 0, img.Width, img.Height, GraphicsUnit.Pixel);
                graphic.Dispose();
                MemoryStream ms = new MemoryStream();
                cutPiece.Save(ms, ImageFormat.Jpeg);
                return ms.ToArray();
            }
        }

        public static class PermissionService
        {
            public static Permission permission = Interface.GetMod().GetLibrary<Permission>();

            public static bool HasPermission(ulong uid, string permissionName)
            {
                return !string.IsNullOrEmpty(permissionName) && permission.UserHasPermission(uid.ToString(), permissionName);
            }

            public static void RegisterPermissions(Plugin owner, List<string> permissions)
            {
                if (owner == null) throw new ArgumentNullException("owner");
                if (permissions == null) throw new ArgumentNullException("commands");

                foreach (var permissionName in permissions.Where(permissionName => !permission.PermissionExists(permissionName)))
                {
                    permission.RegisterPermission(permissionName, owner);
                }
            }
        }
    }
}
                                    

// --- End of file: RustMap (1).cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BradleyTiers.cs ---
// --- Original Local Path: BradleyTiers.cs ---

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Rust;
using UnityEngine;

#region Changelogs and ToDo
/**********************************************************************
* 
* 1.0.0 :       -   Initial release
* 1.0.1 :       -   Added support for GUIAnnouncements
*               -   Added Estemated GridLocations to messages
*               -   Made messages more dynamic
*               -   Vanilla Bradleys will now spawn on random (true false setting)
* 1.0.2 :       -   Added dmg and accuracy
*               -   Added support for Economics and ServerRewards
* 1.0.3 :       -   Added Lootprofiles per tier
* 1.0.4 :       -   Added chatmessage on 1st hit to show tier (2 minutes between messages)
*               -   Added Chat/announcement options to cfg (true false)
*               -   Fixed a typo in the language section
* 1.0.5         -   Fix for NRE when bradley inflicts selfdamage
* 1.0.6         -   crates Should now be removing the vanilla loot better before adding custom profile loot
*                   Vanilla Bradley loot and crates will now remain vanilla
*                   Option to custom rename the tiers
* 1.0.7         -   Possible fix for top 2 tiers having wrong HP on occasion
* 1.0.8         -   Patch for nov 4 rust update
* 1.0.9         -   Extra nullcheck (OnEntityTakeDamage)
* 1.1.0         -   Improved GridLocation call
*               -   Added Attackmessage to lang file
*               -   Added support for Notify and UINotify
*               -   Cleaned up and refractured the Bradley spawning modifiers
*               -   Cleaned up and refractured the Bradley Spawning messagesystem
*               -   Cleaned up and refractured the Bradley Kills messagesystem
*               -   Optimised colorscheme
* 1.1.1         -   Added KillNotification that was previously hardcoded to lang file
*               -   Fixed Notifcations when it is a Convoy Bradley
*               -   Fixed Vanilla Bradley colors in messages
* 1.1.2         -   Added SpawnMessage to Lang file
*               -   Single message line is now used from Lang file on bradley spawns
*               -   Pre patched for Armored Train plugin update
* 1.1.3         -   Fixed ServerRewards not handing out rewards
*               -   Fixed the console notification for Convoy check
*               -   fixed Exploit upgrading leftover crates from previous bradley
* 1.1.4         -   Delayed checks for ArmoredTrain apc spawns
*               -   Possible fix for messages forcing themselves when not a tiered apc
*               -   Fixed Targeting ArmoredTrain apc
* 1.2.0         -   Added bulletdamage
*               -   Added probability to the lootsystem
*               -   Added custom item names to the loot system
*               -   Added Add Custom Loot (true/false) for each profile
*               -   Added implementation for SatDishEvent BradleyAPC
*               -   Added better implementation for ArmoredTrain BradleyAPC being updated
*               -   Added better implementation for Convoy BradleyAPC being updated
*               -   Added ignore triggers when included APC is set to false
*               -   Added include ArmoredTrain APC to main cfg (true/false)
*               -   Added include Convoy APC to main cfg (true/false)
*               -   Added include SatDishEvent APC to main cfg (true/false)
*               -   Added Bradley can interact with npc to main cfg (true/false)
*               -   Added Bradley can Target npc when hostile towards Bradley
*               -   Fix for Rewards not being handed out
*   1.2.1       -   Patched for ArmoredTrain
*
*   1.2.2       -   Added OnBradleyTiersVanillaSpawned(BradleyAPC bradley) Hook
*               -   Added OnBradleyTiersEasySpawned(BradleyAPC bradley) Hook
*               -   Added OnBradleyTiersMediumSpawned(BradleyAPC bradley) Hook
*               -   Added OnBradleyTiersHardSpawned(BradleyAPC bradley) Hook
*               -   Added OnBradleyTiersNightmareSpawned(BradleyAPC bradley) Hook
*
*               -   Added OnDestroyBradleyTiersVanilla(BradleyAPC apc, HitInfo info) Hook
*               -   Added OnDestroyBradleyTiersEasy(BradleyAPC apc, HitInfo info) Hook
*               -   Added OnDestroyBradleyTiersMedium(BradleyAPC apc, HitInfo info) Hook
*               -   Added OnDestroyBradleyTiersHard(BradleyAPC apc, HitInfo info) Hook
*               -   Added OnDestroyBradleyTiersNightmare(BradleyAPC apc, HitInfo info) Hook
*
*               -   Added OnBradleyTiersHitVanilla(BradleyAPC bradley, HitInfo info) Hook
*               -   Added OnBradleyTiersHitEasy(BradleyAPC bradley, HitInfo info) Hook
*               -   Added OnBradleyTiersHitMedium(BradleyAPC bradley, HitInfo info) Hook
*               -   Added OnBradleyTiersHitHard(BradleyAPC bradley, HitInfo info) Hook
*               -   Added OnBradleyTiersHitNightmare(BradleyAPC bradley, HitInfo info) Hook
*               
*               -   Added support for BradleyDrops
*               -   Updated Include SatDish/Harbor Event Bradley inside the cfg
*
*   TODO :
*
*               -   Add a spawn probability
*               -   Add buyable bradley tiered APC
*                              
**********************************************************************/
#endregion

namespace Oxide.Plugins
{
    [Info("BradleyTiers", "Krungh Crow", "1.2.2")]
    [Description("Bradley with difficulties and events")]

    class BradleyTiers : RustPlugin
    {
        [PluginReference]
        Plugin ArmoredTrain, Convoy ,Economics, GUIAnnouncements, Notify, UINotify, ServerRewards;

        #region Variables
        const string Use_Perm = "bradleytiers.use";

        private System.Random random = new System.Random();
        private Dictionary<string, List<ulong>> Skins { get; set; } = new Dictionary<string, List<ulong>>();

        ulong chaticon = 76561199183246772;
        string prefix;

        float accuracy;
        string _announce;
        int CaseCount;
        string color1;
        string color2;
        float damagescale;
        string difficulty;
        string _vanilla;
        string _easy;
        string _medium;
        string _hard;
        string _nightmare;
        string lootprofile;
        int reward;
        int total;
        int Pid = 0;

        bool Debug = false;
        bool showchat = true;
        bool showchatannouncement = true;
        bool showchatreward = true;
        bool UseNotify = false;
        bool IsConvoyAPC = false;


        #endregion

        #region Timers

        Dictionary<string, CooldownTimer> CoolDowns = new Dictionary<string, CooldownTimer>();
        public class CooldownTimer
        {
            public Timer timer;
            public float start;
            public float countdown;
        }

        #endregion

        #region Configuration
        void Init()
        {
            if (!LoadConfigVariables())
            {
            Puts("Config file issue detected. Please delete file, or check syntax and fix.");
            return;
            }

            permission.RegisterPermission(Use_Perm, this);

            Debug = configData.PlugCFG.Debug;
            showchat = configData.PlugCFG.ChatUse;
            showchatannouncement = configData.PlugCFG.ChatAnnounceUse;
            showchatreward = configData.PlugCFG.ChatRewardUse;
            UseNotify = configData.PlugCFG.UseNotify;
            Pid = configData.PlugCFG.PiD;
            prefix = configData.PlugCFG.Prefix;
            _vanilla = configData.Naming.Vanilla;
            _easy = configData.Naming.Easy;
            _medium = configData.Naming.Medium;
            _hard = configData.Naming.Hard;
            _nightmare = configData.Naming.Nightmare;
            if (Debug) Puts($"[Debug] Debug is Activated ,if unintentional check cfg and set to false");
        }

        private ConfigData configData;

        class ConfigData
        {
            [JsonProperty(PropertyName = "Main config")]
            public SettingsPlugin PlugCFG = new SettingsPlugin();
            [JsonProperty(PropertyName = "Tier Names")]
            public SettingsNames Naming = new SettingsNames();
            [JsonProperty(PropertyName = "Kill Rewards")]
            public SettingsReward Rewards = new SettingsReward();
            [JsonProperty(PropertyName = "Loot Tables")]
            public SettingsLoot Loot = new SettingsLoot();
            [JsonProperty(PropertyName = "Easy Bradley")]
            public SettingsBradEasy Easy = new SettingsBradEasy();
            [JsonProperty(PropertyName = "Medium Bradley")]
            public SettingsBradMedium Medium = new SettingsBradMedium();
            [JsonProperty(PropertyName = "Hard Bradley")]
            public SettingsBradHard Hard = new SettingsBradHard();
            [JsonProperty(PropertyName = "Nightmare Bradley")]
            public SettingsBradNightmare Nightmare = new SettingsBradNightmare();
        }

        class SettingsPlugin
        {
            [JsonProperty(PropertyName = "Debug")]
            public bool Debug = false;
            [JsonProperty(PropertyName = "Chat Prefix")]
            public string Prefix = "[<color=yellow>Bradley Tiers</color>] ";
            [JsonProperty(PropertyName = "Use GUIAnnouncement")]
            public bool GUIAUse = false;
            [JsonProperty(PropertyName = "Reply to player in chat on attack")]
            public bool ChatUse = true;
            [JsonProperty(PropertyName = "Reply to player in chat on reward")]
            public bool ChatRewardUse = true;
            [JsonProperty(PropertyName = "Show kills/spawns in Global chat")]
            public bool ChatAnnounceUse = true;
            [JsonProperty(PropertyName = "Use Notify")]
            public bool UseNotify = false;
            [JsonProperty(PropertyName = "Notify profile ID")]
            public int PiD = 0;
            [JsonProperty(PropertyName = "Include Vanilla Bradley")]
            public bool VanillaUse = false;
            [JsonProperty(PropertyName = "Include ArmoredTrain Bradley")]
            public bool TrainUse = false;
            [JsonProperty(PropertyName = "Include Convoy Bradley")]
            public bool ConvoyUse = false;
            [JsonProperty(PropertyName = "Include SatDish/Harbor Event Bradley")]
            public bool SatdishUse = false;
            [JsonProperty(PropertyName = "Bradley Tiers can interact with NPC")]
            public bool DmgNPCUse = false;
        }

        class SettingsNames
        {
            [JsonProperty(PropertyName = "Vanilla")]
            public string Vanilla = "Vanilla";
            [JsonProperty(PropertyName = "Easy")]
            public string Easy = "Easy";
            [JsonProperty(PropertyName = "Medium")]
            public string Medium = "Medium";
            [JsonProperty(PropertyName = "Hard")]
            public string Hard = "Hard";
            [JsonProperty(PropertyName = "Nightmare")]
            public string Nightmare = "Nightmare";
        }

        class SettingsReward
        {
            [JsonProperty(PropertyName = "Use Economics?")]
            public bool UseEco = false;
            [JsonProperty(PropertyName = "Use ServerRewards?")]
            public bool UseSR = false;
            [JsonProperty(PropertyName = "Vanilla amount")]
            public int Vanilla = 500;
            [JsonProperty(PropertyName = "Easy amount")]
            public int Easy = 1000;
            [JsonProperty(PropertyName = "Medium amount")]
            public int Medium = 1500;
            [JsonProperty(PropertyName = "Hard amount")]
            public int Hard = 2000;
            [JsonProperty(PropertyName = "Nightmare amount")]
            public int Nightmare = 2500;
        }

        class SettingsBradEasy
        {
            [JsonProperty(PropertyName = "Bradley Health")]
            public int BradleyHealth = 2000;
            [JsonProperty(PropertyName = "Bradley Max Fire Range")]
            public int BradleyMaxFireRange = 100;
            [JsonProperty(PropertyName = "Bradley Bulletdamage (15 is vanilla)")]
            public float BradleyBDamage = 15f;
            [JsonProperty(PropertyName = "Bradley Throttle Responce")]
            public float BradleySpeed = 1.0f;
            [JsonProperty(PropertyName = "Bradley Accuracy (0-1)")]
            public float BradleyAccuracy = 0.6f;
            [JsonProperty(PropertyName = "Bradley Damage scale (0-1)")]
            public float BradleyDamageScale = 0.6f;
            [JsonProperty(PropertyName = "Add Custom Loot")]
            public bool UpdateCratesLoot = true;
            [JsonProperty(PropertyName = "Bradley Max crates after kill")]
            public int BradleyCratesAmount = 4;
            [JsonProperty(PropertyName = "Spawn Min Amount Items")]
            public int MinAmount { get; set; } = 2;
            [JsonProperty(PropertyName = "Spawn Max Amount Items")]
            public int MaxAmount { get; set; } = 6;
            [JsonProperty(PropertyName = "Loot Table", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<BradleyItem> Loot { get; set; } = DefaultLoot;
        }

        class SettingsBradMedium
        {
            [JsonProperty(PropertyName = "Bradley Health")]
            public int BradleyHealth = 4000;
            [JsonProperty(PropertyName = "Bradley Max Fire Range")]
            public int BradleyMaxFireRange = 100;
            [JsonProperty(PropertyName = "Bradley Bulletdamage (15 is vanilla)")]
            public float BradleyBDamage = 15f;
            [JsonProperty(PropertyName = "Bradley Throttle Responce")]
            public float BradleySpeed = 1.0f;
            [JsonProperty(PropertyName = "Bradley Accuracy (0-1)")]
            public float BradleyAccuracy = 0.75f;
            [JsonProperty(PropertyName = "Bradley Damage scale (0-1)")]
            public float BradleyDamageScale = 0.7f;
            [JsonProperty(PropertyName = "Add Custom Loot")]
            public bool UpdateCratesLoot = true;
            [JsonProperty(PropertyName = "Bradley Max crates after kill")]
            public int BradleyCratesAmount = 5;
            [JsonProperty(PropertyName = "Spawn Min Amount Items")]
            public int MinAmount { get; set; } = 2;
            [JsonProperty(PropertyName = "Spawn Max Amount Items")]
            public int MaxAmount { get; set; } = 6;
            [JsonProperty(PropertyName = "Loot Table", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<BradleyItem> Loot { get; set; } = DefaultLoot;
        }

        class SettingsBradHard
        {
            [JsonProperty(PropertyName = "Bradley Health")]
            public int BradleyHealth = 10000;
            [JsonProperty(PropertyName = "Bradley Max Fire Range")]
            public int BradleyMaxFireRange = 100;
            [JsonProperty(PropertyName = "Bradley Bulletdamage (15 is vanilla)")]
            public float BradleyBDamage = 15f;
            [JsonProperty(PropertyName = "Bradley Throttle Responce")]
            public float BradleySpeed = 1.0f;
            [JsonProperty(PropertyName = "Bradley Accuracy (0-1)")]
            public float BradleyAccuracy = 0.8f;
            [JsonProperty(PropertyName = "Bradley Damage scale (0-1)")]
            public float BradleyDamageScale = 0.85f;
            [JsonProperty(PropertyName = "Add Custom Loot")]
            public bool UpdateCratesLoot = true;
            [JsonProperty(PropertyName = "Bradley Max crates after kill")]
            public int BradleyCratesAmount = 8;
            [JsonProperty(PropertyName = "Spawn Min Amount Items")]
            public int MinAmount { get; set; } = 2;
            [JsonProperty(PropertyName = "Spawn Max Amount Items")]
            public int MaxAmount { get; set; } = 6;
            [JsonProperty(PropertyName = "Loot Table", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<BradleyItem> Loot { get; set; } = DefaultLoot;
        }

        class SettingsBradNightmare
        {
            [JsonProperty(PropertyName = "Bradley Health")]
            public int BradleyHealth = 15000;
            [JsonProperty(PropertyName = "Bradley Max Fire Range")]
            public int BradleyMaxFireRange = 100;
            [JsonProperty(PropertyName = "Bradley Bulletdamage (15 is vanilla)")]
            public float BradleyBDamage = 15f;
            [JsonProperty(PropertyName = "Bradley Throttle Responce")]
            public float BradleySpeed = 1.0f;
            [JsonProperty(PropertyName = "Bradley Accuracy (0-1)")]
            public float BradleyAccuracy = 0.85f;
            [JsonProperty(PropertyName = "Bradley Damage scale (0-1)")]
            public float BradleyDamageScale = 1.0f;
            [JsonProperty(PropertyName = "Add Custom Loot")]
            public bool UpdateCratesLoot = true;
            [JsonProperty(PropertyName = "Bradley Max crates after kill")]
            public int BradleyCratesAmount = 12;
            [JsonProperty(PropertyName = "Spawn Min Amount Items")]
            public int MinAmount { get; set; } = 2;
            [JsonProperty(PropertyName = "Spawn Max Amount Items")]
            public int MaxAmount { get; set; } = 6;
            [JsonProperty(PropertyName = "Loot Table", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<BradleyItem> Loot { get; set; } = DefaultLoot;
        }

        class SettingsLoot
        {
            [JsonProperty(PropertyName = "Use lootsystem")]
            public bool UseLoot = false;
            [JsonProperty(PropertyName = "Use Random Skins")]
            public bool RandomSkins { get; set; } = true;
        }

        private bool LoadConfigVariables()
        {
            try
            {
            configData = Config.ReadObject<ConfigData>();
            }
            catch
            {
            return false;
            }
            SaveConf();
            return true;
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Fresh install detected Creating a new config file.");
            configData = new ConfigData();
            SaveConf();
        }

        void SaveConf() => Config.WriteObject(configData, true);
        #endregion

        #region LanguageAPI
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Bradley"] = "Bradley",
                ["SpawnMessage"] = "A {0} Bradley has spawned around {1}",
                ["Destroyed"] = "finally destroyed the",
                ["Info"] = "\n<color=green>Available Commands</color>\n<color=green>/bt info</color> : Shows info on version/author and commands",
                ["InvalidInput"] = "<color=red>Please enter a valid command!</color>",
                ["KillRewardMessage"] = "You recieved {0}$ for Destroying the {1} BradleyApc",
                ["KillNotification"] = "<color=orange>{0}</color> Destroyed a {1} BradleyApc",
                ["AttackMessage"] = "You are taking on a {0} Bradleyapc",
                ["Version"] = "Version : V",
                ["NoPermission"] = "<color=green>You do not have permission to use that command!</color>",
            }, this);
        }

        #endregion

        #region Commands

        [ChatCommand("bt")]
        private void cmdPrimary(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, Use_Perm))
            {
                Player.Message(player, prefix + string.Format(msg("NoPermission", player.UserIDString)), chaticon);
                if (Debug) Puts($"[Debug] {player} had no permission for using Commands");
                return;
            }

            if (args.Length == 0)
            {
                Player.Message(player, prefix + string.Format(msg("InvalidInput", player.UserIDString)), chaticon);
            }
            else
            {
                if (args[0].ToLower() == "info")
                {
                    Player.Message(player, prefix + string.Format(msg("Version", player.UserIDString)) + this.Version.ToString() + " By : " + this.Author.ToString()
                    + msg("Info")
                    , chaticon);
                    return;
                }
                else
                {
                    Player.Message(player, prefix + string.Format(msg("InvalidInput", player.UserIDString)), chaticon);
                }

            }
        }
        #endregion

        #region Message helper

        private string msg(string key, string id = null) => lang.GetMessage(key, this, id);

        #endregion

        #region Hooks

        private void OnBradleyApcInitialize(BradleyAPC bradley)
        {
            var dropposition = bradley.transform.position;
            string Grid = GetGrid(dropposition);
            int CaseCount = 4;
            if (configData.PlugCFG.VanillaUse) CaseCount = 5;
            timer.Once(0.5f, () =>
            {
                if (Interface.CallHook("IsTrainBradley", bradley) != null && configData.PlugCFG.TrainUse == false)
                {
                    Puts($"Disabled Tiered apc spawn Settings for Armored Train {bradley}");
                    return;
                }

                if (Interface.CallHook("IsConvoyVehicle", bradley) != null && bradley.skinID == 755446 && configData.PlugCFG.ConvoyUse == false)
                {
                    Puts($"Disabled Tiered apc spawn Settings for Convoy {bradley}");
                    return;
                }

                if (Interface.CallHook("CanBradleyTiersEdit", bradley) != null && configData.PlugCFG.SatdishUse == false)
                {
                        if (Debug) Puts($"Disabled Tiered apc for SatDishEvent {bradley}");
                        return;
                }
                if (Interface.CallHook("IsBradleyDrop" , bradley) != null)
                {
                    if (Debug) Puts($"Disabled Tiered apc for BradleyDrops {bradley}");
                    return;
                }

                switch (UnityEngine.Random.Range(0, CaseCount))
            {
                case 0:
                    bradley._maxHealth = configData.Easy.BradleyHealth;
                    bradley.health = configData.Easy.BradleyHealth;
                    bradley.bulletDamage = configData.Easy.BradleyBDamage;
                    bradley.viewDistance = configData.Easy.BradleyMaxFireRange;
                    bradley.searchRange = configData.Easy.BradleyMaxFireRange;
                    bradley.throttle = configData.Easy.BradleySpeed;
                    bradley.leftThrottle = bradley.throttle;
                    bradley.rightThrottle = bradley.throttle;
                    bradley.maxCratesToSpawn = configData.Easy.BradleyCratesAmount;
                    bradley.name = $"{_easy} BradleyApc[{bradley.net.ID}]";
                    Interface.CallHook("OnBradleyTiersEasySpawned", bradley);
                    difficulty = _easy;
                    color1 = "green";
                    _announce = "BradEasy";
                    break;
                case 1:
                    bradley._maxHealth = configData.Medium.BradleyHealth;
                    bradley.health = configData.Medium.BradleyHealth;
                    bradley.bulletDamage = configData.Medium.BradleyBDamage;
                    bradley.viewDistance = configData.Medium.BradleyMaxFireRange;
                    bradley.searchRange = configData.Medium.BradleyMaxFireRange;
                    bradley.throttle = configData.Medium.BradleySpeed;
                    bradley.leftThrottle = bradley.throttle;
                    bradley.rightThrottle = bradley.throttle;
                    bradley.maxCratesToSpawn = configData.Medium.BradleyCratesAmount;
                    bradley.name = $"{_medium} BradleyApc[{bradley.net.ID}]";
                    Interface.CallHook("OnBradleyTiersMediumSpawned", bradley);
                    difficulty = _medium;
                    color1 = "purple";
                    _announce = "BradMedium";
                    break;
                case 2:
                    bradley._maxHealth = configData.Hard.BradleyHealth;
                    bradley.health = configData.Hard.BradleyHealth;
                    bradley.bulletDamage = configData.Hard.BradleyBDamage;
                    bradley.viewDistance = configData.Hard.BradleyMaxFireRange;
                    bradley.searchRange = configData.Hard.BradleyMaxFireRange;
                    bradley.throttle = configData.Hard.BradleySpeed;
                    bradley.leftThrottle = bradley.throttle;
                    bradley.rightThrottle = bradley.throttle;
                    bradley.maxCratesToSpawn = configData.Hard.BradleyCratesAmount;
                    bradley.name = $"{_hard} BradleyApc[{bradley.net.ID}]";
                    Interface.CallHook("OnBradleyTiersHardSpawned", bradley);
                    difficulty = _hard;
                    color1 = "red";
                    _announce = "BradHard";
                    break;
                case 3:
                    bradley._maxHealth = configData.Nightmare.BradleyHealth;
                    bradley.health = configData.Nightmare.BradleyHealth;
                    bradley.bulletDamage = configData.Nightmare.BradleyBDamage;
                    bradley.viewDistance = configData.Nightmare.BradleyMaxFireRange;
                    bradley.searchRange = configData.Nightmare.BradleyMaxFireRange;
                    bradley.throttle = configData.Nightmare.BradleySpeed;
                    bradley.leftThrottle = bradley.throttle;
                    bradley.rightThrottle = bradley.throttle;
                    bradley.maxCratesToSpawn = configData.Nightmare.BradleyCratesAmount;
                    bradley.name = $"{_nightmare} BradleyApc[{bradley.net.ID}]";
                    Interface.CallHook("OnBradleyTiersNightmareSpawned", bradley);
                    difficulty = _nightmare;
                    color1 = "yellow";
                    _announce = "BradNightmare";
                    break;
                default:
                    bradley._maxHealth = 1000;
                    bradley.health = 1000;
                    bradley.maxCratesToSpawn = 3;
                    Interface.CallHook("OnBradleyTiersVanillaSpawned", bradley);
                    difficulty = _vanilla;
                    color1 = "#EC1349";
                    _announce = "BradVanilla";
                    break;
            }

                bradley.SendNetworkUpdate();
                var bradleytype = $"<color={color1}>{difficulty}</color>";
                var Gridcolor = $"<color={color1}>{Grid}</color>";
                string _MSG = $"A {bradleytype} BradleyAPC spawned at {Grid}";
                if ((Notify || UINotify) && UseNotify == true) foreach (var player in BasePlayer.activePlayerList)
                {
                    if (Notify) Notify.Call("SendNotify", player, Pid, _MSG);
                    if (UINotify) UINotify.Call("SendNotify", player, Pid, _MSG);
                }
                if (showchatannouncement) Server.Broadcast(prefix + string.Format(msg($"SpawnMessage"), bradleytype, Gridcolor), chaticon);
                if (_announce == "BradVanilla") color1 = "green";
                if (GUIAnnouncements != null && configData.PlugCFG.GUIAUse) GUIAnnouncements?.Call("CreateAnnouncement", string.Format(msg($"SpawnMessage"), difficulty, Grid), color1, "white");
                if (difficulty != _vanilla) Puts($"Upgraded a BradleyApc to a [{difficulty}] Tier");
                if (difficulty == _vanilla) Puts($"Allowed a Vanilla BradleyApc to spawn");
            });
        }

        void OnEntityDeath(BradleyAPC apc, HitInfo info)
        {
            if (apc == null) return;

            if (Interface.CallHook("IsTrainBradley", apc) != null && configData.PlugCFG.TrainUse == false)
            {
                Puts($"Disabled Tiered apc loot for Armored Train {apc}");
                return;
            }

            if (Interface.CallHook("IsConvoyVehicle", apc) != null && apc.skinID == 755446 && configData.PlugCFG.ConvoyUse == false)
            {
                Puts($"Disabled Tiered apc loot for Convoy {apc}");
                return;
            }

            if (Interface.CallHook("CanBradleyTiersEdit", apc) != null && configData.PlugCFG.SatdishUse == false)
            {
                if (Debug) Puts($"Disabled Tiered apc loot for SatDishEvent {apc}");
                return;
            }

            if (Interface.CallHook("IsBradleyDrop" , apc) != null)
            {
                if (Debug) Puts($"Disabled Tiered apc loot for BradleyDrops {apc}");
                return;
            }

            if (apc._maxHealth == 1000)
            {
                Interface.CallHook("OnDestroyBradleyTiersVanilla", apc, info);
                difficulty = _vanilla;
                reward = configData.Rewards.Vanilla;
                color1 = "#EC1349";
                color2 = "white";
            }

            else if (apc._maxHealth == configData.Easy.BradleyHealth)
            {
                Interface.CallHook("OnDestroyBradleyTiersEasy", apc, info);
                difficulty = _easy;
                reward = configData.Rewards.Easy;
                color1 = "green";
                color2 = "white";
            }

            else if (apc._maxHealth == configData.Medium.BradleyHealth)
            {
                Interface.CallHook("OnDestroyBradleyTiersMedium", apc, info);
                difficulty = _medium;
                reward = configData.Rewards.Medium;
                color1 = "purple";
                color2 = "white";
            }

            else if (apc._maxHealth == configData.Hard.BradleyHealth)
            {
                Interface.CallHook("OnDestroyBradleyTiersHard", apc, info);
                difficulty = _hard;
                reward = configData.Rewards.Hard;
                color1 = "red";
                color2 = "white";
            }

            else if (apc._maxHealth == configData.Nightmare.BradleyHealth)
            {
                Interface.CallHook("OnDestroyBradleyTiersNightmare", apc, info);
                difficulty = _nightmare;
                reward = configData.Rewards.Nightmare;
                color1 = "yellow";
                color2 = "red";
            }
            var killer = info.InitiatorPlayer.displayName;
            var bradleytype = $"<color={color1}>{difficulty}</color>";

            var _MSG = string.Format(msg("KillNotification"), killer, $" <color={color1}>{bradleytype}</color>");
            Puts($"{difficulty} {apc} at {GetGrid(apc.transform.position)} {apc.transform.position} was destroyed by {killer}");

            if (showchatannouncement) Server.Broadcast(prefix
            + _MSG
            , chaticon);
            if (GUIAnnouncements != null && configData.PlugCFG.GUIAUse)
            {
                if (apc._maxHealth == 1000) color1 = "green";
                GUIAnnouncements?.Call("CreateAnnouncement", (_MSG), color1, color2);
            }
            if (apc._maxHealth == 1000) color1 = "#EC1349";

            if ((Notify || UINotify) && UseNotify == true) foreach (var player in BasePlayer.activePlayerList)
                {
                    if (Notify) Notify.Call("SendNotify", player, Pid, _MSG);
                    if (UINotify) UINotify.Call("SendNotify", player, Pid, _MSG);
                }

            if (ServerRewards != null && configData.Rewards.UseSR == true)
            {
                ServerRewards?.Call("AddPoints", info.InitiatorPlayer.userID, reward);
                if (Debug) Puts($"[Debug] ServerRewards reward : {reward}RP handed out to {info.InitiatorPlayer}");
                if (showchatreward) Player.Message(info.InitiatorPlayer, prefix + string.Format(msg($"KillRewardMessage", info.InitiatorPlayer.UserIDString), $"<color={color1}>{reward}</color>", $"<color={color1}>{difficulty}</color>"), chaticon);
            }

            else if (Economics != null && configData.Rewards.UseEco == true)
            {
                if ((bool)Economics?.Call("Deposit", info.InitiatorPlayer.userID, (double)reward));
                if (Debug) Puts($"[Debug] Economics reward : {reward}$ handed out to {info.InitiatorPlayer}");
                if (showchatreward) Player.Message(info.InitiatorPlayer, prefix + string.Format(msg($"KillRewardMessage", info.InitiatorPlayer.UserIDString), $"<color={color1}>{reward}</color>", $"<color={color1}>{difficulty}</color>"), chaticon);
            }

            Vector3 position = apc.transform.position;
            int count = 0;

            if (configData.Loot.UseLoot == true)
            {
                timer.Once(1f, () =>
                {
                    float distance = 15f;
                    List<LootContainer> list = new List<LootContainer>();
                    Vis.Entities<LootContainer>(position, distance, list);

                    foreach (LootContainer crate in list)

                        if (crate.PrefabName.Contains("bradley_crate") && crate.skinID != 290578)
                        {
                            count++;
                            //crate.inventory.itemList.Clear();
                            if (difficulty == _vanilla)
                            {
                                crate.panelName = "generic_resizable";
                                crate.name = $"{difficulty}_Crate[{crate.net.ID}]";
                                crate.skinID = 290578;
                                return;
                            }
                            else if (difficulty == _easy && configData.Easy.UpdateCratesLoot == true)
                            {
                                crate.inventory.itemList.Clear();
                                SpawnLoot(crate.inventory, configData.Easy.Loot.ToList());

                            }
                            else if (difficulty == _medium && configData.Medium.UpdateCratesLoot == true)
                            {
                                crate.inventory.itemList.Clear();
                                SpawnLoot(crate.inventory, configData.Medium.Loot.ToList());

                            }
                            else if (difficulty == _hard && configData.Hard.UpdateCratesLoot == true)
                            {
                                crate.inventory.itemList.Clear();
                                SpawnLoot(crate.inventory, configData.Hard.Loot.ToList());

                            }
                            else if (difficulty == _nightmare && configData.Nightmare.UpdateCratesLoot == true)
                            {
                                crate.inventory.itemList.Clear();
                                SpawnLoot(crate.inventory, configData.Nightmare.Loot.ToList());

                                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
                            }
                            crate.panelName = "generic_resizable";
                            crate.name = $"{difficulty}_Crate[{crate.net.ID}]";
                            crate.skinID = 290578;
                        }
                    Puts($"{count.ToString()} vanilla crates upgraded with {difficulty} Loot");
                });
                return;
            }
            if (Debug) Puts($"[Debug] Lootsystem skipped");
            return;
        }

        void OnEntityTakeDamage(BradleyAPC bradley, HitInfo info)
        {
            if (info.Initiator.IsValid())
            {
                if (Interface.CallHook("IsTrainBradley", bradley) != null && configData.PlugCFG.TrainUse == false) return;

                if (Interface.CallHook("IsConvoyVehicle", bradley) != null && bradley.skinID == 755446 && configData.PlugCFG.ConvoyUse == false) return;

                if (Interface.CallHook("CanBradleyTiersEdit", bradley) != null && configData.PlugCFG.SatdishUse == false) return;

                if (Interface.CallHook("IsBradleyDrop" , bradley) != null) return;

                BasePlayer player = info.InitiatorPlayer;
                if (!player ) return;
                string id = player.UserIDString;
                var Cooldown = new CooldownTimer();

                if (info?.Initiator is BasePlayer && info != null)
                {
                    if (bradley._maxHealth == 1000)
                    {
                        Interface.CallHook("OnBradleyTiersHitVanilla", bradley, info);
                        difficulty = _vanilla;
                        color1 = "#EC1349";
                    }

                    else if (bradley._maxHealth == configData.Easy.BradleyHealth)
                    {
                        Interface.CallHook("OnBradleyTiersHitEasy", bradley, info);
                        difficulty = _easy;
                        color1 = "green";
                    }

                    else if (bradley._maxHealth == configData.Medium.BradleyHealth)
                    {
                        Interface.CallHook("OnBradleyTiersHitMedium", bradley, info);
                        difficulty = _medium;
                        color1 = "purple";
                    }

                    else if (bradley._maxHealth == configData.Hard.BradleyHealth)
                    {
                        Interface.CallHook("OnBradleyTiersHitHard", bradley, info);
                        difficulty = _hard;
                        color1 = "red";
                    }

                    else if (bradley._maxHealth == configData.Nightmare.BradleyHealth)
                    {
                        Interface.CallHook("OnBradleyTiersHitNightmare", bradley, info);
                        difficulty = _nightmare;
                        color1 = "yellow";
                    }
                }

                if (!CoolDowns.ContainsKey(player.UserIDString) && info != null)
                {
                    if (player != null)
                    {
                        Cooldown.timer = timer.Once((float)120, () =>
                        {
                            CoolDowns.Remove(id);
                            if (Debug) Puts($"[Debug] Removed cooldown for {player}");

                        });
                        Cooldown.start = Time.realtimeSinceStartup;
                        Cooldown.countdown = 120f;
                        CoolDowns.Add(id, Cooldown);
                        if (Debug) Puts($"[Debug] Added cooldown for {player}");
                        var BradType = $" <color={color1}>{difficulty}</color>";
                        if (showchat) Player.Message(player, prefix + string.Format(msg($"AttackMessage"), BradType), chaticon);
                        if (Debug) Puts($"[Debug] {player} hit on a {difficulty} Bradleyapc");
                    }
                }
                string timesince = Math.Floor((CoolDowns[player.UserIDString].start + CoolDowns[player.UserIDString].countdown - Time.realtimeSinceStartup)).ToString();

                if (Debug) Puts($"[Debug] Msg cooldown {player} on a {difficulty} Bradleyapc with {timesince} sec left");
                //Player.Message(player, prefix + string.Format(msg($"[Debug] msg cooldown {player.displayName}\nOn a {$"<color={color1}>{difficulty}</color>"} Bradleyapc with {timesince} sec left", player.UserIDString)), chaticon);//dev debugging
            }
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (info?.Initiator is BradleyAPC && entity.IsNpc && configData.PlugCFG.DmgNPCUse == false) return null;
            
            if (info?.Initiator is BradleyAPC && entity is BasePlayer)
            {
                var bradley = info?.Initiator.GetComponent<BradleyAPC>() ?? null;
                {
                    if (Interface.CallHook("IsTrainBradley", bradley) != null && configData.PlugCFG.TrainUse == false) return null;

                    if (Interface.CallHook("IsConvoyVehicle", bradley) != null && bradley.skinID == 755446 && configData.PlugCFG.ConvoyUse == false) return null;

                    if (Interface.CallHook("CanBradleyTiersEdit", bradley) != null && configData.PlugCFG.SatdishUse == false) return null;

                    if (bradley._maxHealth == 1000)
                    {
                        accuracy = 1;
                        difficulty = _vanilla;
                        damagescale = 1;
                    }

                    else if (bradley._maxHealth == configData.Easy.BradleyHealth)
                    {
                        accuracy = configData.Easy.BradleyAccuracy;
                        difficulty = _easy;
                        damagescale = configData.Easy.BradleyDamageScale;
                    }

                    else if (bradley._maxHealth == configData.Medium.BradleyHealth)
                    {
                        accuracy = configData.Medium.BradleyAccuracy;
                        difficulty = _medium;
                        damagescale = configData.Medium.BradleyDamageScale;
                    }

                    else if (bradley._maxHealth == configData.Hard.BradleyHealth)
                    {
                        accuracy = configData.Hard.BradleyAccuracy;
                        difficulty = _hard;
                        damagescale = configData.Hard.BradleyDamageScale;
                    }

                    else if (bradley._maxHealth == configData.Nightmare.BradleyHealth)
                    {
                        accuracy = configData.Nightmare.BradleyAccuracy;
                        difficulty = _nightmare;
                        damagescale = configData.Nightmare.BradleyDamageScale;
                    }
                }

                float rand = (float)random.Next(1, 100) / 100f;

                if (accuracy < rand)
                {
                    if (Debug) Puts($"[Debug] Accuracy randomiser is {rand * 100}% with {accuracy * 100}% in cfg : skipped dmg dealing");
                    return true;
                }
                else
                {
                    if (Debug) Puts($"[Debug] A {difficulty} BradleyApc dealth {info.damageTypes.Total() * damagescale} Damage to {entity} with {damagescale * 100}% force");
                    info.damageTypes.ScaleAll(damagescale);
                    return null;
                }
            }

            return null;
        }

        private object CanBradleyApcTarget(BradleyAPC bradley, NPCPlayer npc)
        {
            if (Interface.CallHook("IsTrainBradley", bradley) != null && configData.PlugCFG.TrainUse == false) return null;

            if (Interface.CallHook("IsConvoyVehicle", bradley) != null && bradley.skinID == 755446 && configData.PlugCFG.ConvoyUse == false) return null;

            if (Interface.CallHook("CanBradleyTiersEdit", bradley) != null && configData.PlugCFG.SatdishUse == false) return null;

            if (Interface.CallHook("IsBradleyDrop" , bradley) != null) return null;

            if (npc != null && configData.PlugCFG.DmgNPCUse) return true;
            return null;
        }

        #endregion

        #region Event helpers

        private static string GetGrid(Vector3 position) => PhoneController.PositionToGridCoord(position);

        #endregion

        #region Loot System

        private static List<BradleyItem> DefaultLoot
        {
            get
            {
                return new List<BradleyItem>
                {
                    new BradleyItem { probability = 1f, shortname = "ammo.pistol", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.pistol.fire", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.rifle.explosive", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.rifle.hv", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.rifle.incendiary", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.shotgun", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "ammo.shotgun", name = "", amountMin = 128, amount = 256, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "explosive.timed", name = "", amountMin = 1, amount = 5, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "explosives", name = "", amountMin = 200, amount = 200, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "pistol.m92", name = "", amountMin = 1, amount = 1, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "shotgun.spas12", name = "", amountMin = 1, amount = 1, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "pickaxe", name = "", amountMin = 1, amount = 1, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "hatchet", name = "", amountMin = 1, amount = 1, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "can.beans", name = "", amountMin = 3, amount = 5, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "can.tuna", name = "", amountMin = 3, amount = 5, skin = 0 },
                    new BradleyItem { probability = 1f, shortname = "black.raspberries", name = "", amountMin = 3, amount = 5, skin = 0 },
                    new BradleyItem { probability = 0.6f, shortname = "hmlmg", name = "", amountMin = 1, amount = 1, skin = 0 },
                    new BradleyItem { probability = 0.6f, shortname = "supply.signal", name = "", amountMin = 1, amount = 1, skin = 0 },
                };
            }
        }

        public class BradleyItem
        {
            public float probability { get; set; } = 1f;
            public string shortname { get; set; }
            public string name { get; set; } = "";
            public ulong skin { get; set; }
            public int amountMin { get; set; }
            public int amount { get; set; }
        }

        private void SpawnLoot(ItemContainer container, List<BradleyItem> loot)
        {
            if (difficulty == _vanilla)
            {
                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
            }
            else if (difficulty == _easy)
            {
                total = UnityEngine.Random.Range(Math.Min(loot.Count, configData.Easy.MinAmount), Math.Min(loot.Count, configData.Easy.MaxAmount));
                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
            }
            else if (difficulty == _medium)
            {
                total = UnityEngine.Random.Range(Math.Min(loot.Count, configData.Medium.MinAmount), Math.Min(loot.Count, configData.Medium.MaxAmount));
                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
            }
            else if (difficulty == _hard)
            {
                total = UnityEngine.Random.Range(Math.Min(loot.Count, configData.Hard.MinAmount), Math.Min(loot.Count, configData.Hard.MaxAmount));
                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
            }
            else if (difficulty == _nightmare)
            {
                total = UnityEngine.Random.Range(Math.Min(loot.Count, configData.Nightmare.MinAmount), Math.Min(loot.Count, configData.Nightmare.MaxAmount));
                if (Debug) Puts($"[Debug] {difficulty} bradley loot test trigger");
            }

            if (total == 0 || loot.Count == 0)
            {
                return;
            }
            if (Debug) Puts($"[Debug] Upgraded a {difficulty} crate with {total} items");
            container.Clear();

            container.capacity = total;
            ItemDefinition def;
            List<ulong> skins;
            BradleyItem lootItem;

            for (int j = 0; j < total; j++)
            {
                if (loot.Count == 0)
                {
                    break;
                }

                lootItem = loot.GetRandom();

                loot.Remove(lootItem);

                if (lootItem.amount <= 0)
                {
                    continue;
                }

                string shortname = lootItem.shortname;
                if (UnityEngine.Random.value > lootItem.probability)
                {
                    if (!string.IsNullOrEmpty(lootItem.name)) Puts($"Skipping Custom({j + 1}) : {lootItem.name} : probability = {lootItem.probability}");
                    else if (string.IsNullOrEmpty(lootItem.name)) Puts($"Skipping Normal({j + 1}) : {lootItem.shortname} : probability = {lootItem.probability}");
                    j--;
                    continue;
                }

                bool isBlueprint = shortname.EndsWith(".bp");

                if (isBlueprint)
                {
                    shortname = shortname.Replace(".bp", string.Empty);
                }

                def = ItemManager.FindItemDefinition(shortname);

                if (def == null)
                {
                    Puts("Invalid shortname: {0}", lootItem.shortname);
                    continue;
                }

                ulong skin = lootItem.skin;

                if (configData.Loot.RandomSkins && skin == 0)
                {
                    skins = GetItemSkins(def);

                    if (skins.Count > 0)
                    {
                        skin = skins.GetRandom();
                    }
                }

                int amount = lootItem.amount;

                if (amount <= 0)
                {
                    continue;
                }

                if (lootItem.amountMin > 0 && lootItem.amountMin < lootItem.amount)
                {
                    amount = UnityEngine.Random.Range(lootItem.amountMin, lootItem.amount);
                }

                Item item;

                if (isBlueprint)
                {
                    item = ItemManager.CreateByItemID(-996920608, 1, 0);

                    if (item == null) continue;

                    item.blueprintTarget = def.itemid;
                    item.amount = amount;
                }
                else item = ItemManager.Create(def, amount, skin);

                if (!item.MoveToContainer(container, -1, false))
                {
                    item.Remove();
                }

                if (!string.IsNullOrEmpty(lootItem.name)) { item.name = lootItem.name; }
                if (Debug)
                {
                    if (string.IsNullOrEmpty(item.name))
                    {
                        Puts($"Normal({j + 1}) : {item.info.shortname} : Amount {item.amount} SkinID : {item.skin}");
                    }
                    if (!string.IsNullOrEmpty(item.name))
                    {
                        Puts($"Custom({j + 1}) : {item.name} : Amount : {item.amount} SkinID : {item.skin}");
                    }
                }
            }
        }

        private List<ulong> GetItemSkins(ItemDefinition def)
        {
            List<ulong> skins;
            if (!Skins.TryGetValue(def.shortname, out skins))
            {
                Skins[def.shortname] = skins = ExtractItemSkins(def, skins);
            }

            return skins;
        }

        private List<ulong> ExtractItemSkins(ItemDefinition def, List<ulong> skins)
        {
            skins = new List<ulong>();

            foreach (var skin in def.skins)
            {
                skins.Add(Convert.ToUInt64(skin.id));
            }
            foreach (var asi in Rust.Workshop.Approved.All.Values)
            {
                if (!string.IsNullOrEmpty(asi.Skinnable.ItemName) && asi.Skinnable.ItemName == def.shortname)
                {
                    skins.Add(Convert.ToUInt64(asi.WorkshopdId));
                }
            }

            return skins;
        }
        #endregion
    }
}

// --- End of file: BradleyTiers.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RankMe.cs ---
// --- Original Local Path: RankMe.cs ---

﻿using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using System.Globalization;
using UnityEngine;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("RankMe", "NameTAG", "0.0.1")]
	//
    class RankMe : RustPlugin
    {	
        [PluginReference]
        private Plugin Friends,	TimedItemBlocker;
		
		//	Создаем чат команды
		[ChatCommand("stats")]
        void TurboRankCommand(BasePlayer player, string command)
        {
			var TopPlayer = (from x in Tops where x.UID == player.UserIDString select x);
			PrintToChat(player, "<size=14><color=#00FF00>Статистика игрока</color></size>");
			foreach (var top in TopPlayer)
            { 
				PrintToChat(player, $"<size=14> <color=#FFFFFF>Убито Людей</color> <color=#FF0000>{top.УбийствPVP}</color></size>",null,"0");
				PrintToChat(player, $"<size=14> <color=#FFFFFF>Убито в голову</color> <color=#FF0000>{top.Хедшоты}</color></size>", null, "0");
                PrintToChat(player, $"<size=14> <color=#FFFFFF>Смертей</color> <color=#FF0000>{top.Смертей}</color></size>", null, "0");
                PrintToChat(player, $"<size=14> <color=#FFFFFF>Убито Животных</color> <color=#FF0000>{top.УбийствЖивотных}</color></size>", null, "0");
                PrintToChat(player, $"<size=14> <color=#FFFFFF>Добыто дерево</color> <color=#FF0000>{top.Дерево}</color></size>",null,"0");
                PrintToChat(player, $"<size=14> <color=#FFFFFF>Добыто камня</color> <color=#FF0000>{top.Камень}</color></size>", null, "0");
            }
			return;
		}
		
		void OnEntityDeath(BaseCombatEntity victim, HitInfo info)
		{

			if (victim == null || info == null) return;
			
            // Смерть Животных
            if (victim is BaseNpc)
            {
                if (!(bool)victim?.name?.Contains("agents/")) return;
                
                var hunter = info.InitiatorPlayer;
            
                if (hunter == null) return;
            
                TopData con1 = (from x in Tops where x.UID == hunter.UserIDString select x).FirstOrDefault();

                if (con1 == null) return;

                con1.УбийствЖивотных +=1;
            }
            //  Смерть Игрока
            else if (victim is BasePlayer)
            {
                var playerV = victim as BasePlayer;
                
                if (playerV == null || playerV.IsSleeping()) return;
                
                TopData con2 = (from x in Tops where x.UID == playerV.UserIDString select x).FirstOrDefault();
            
                if (con2 == null) return;
                
                con2.Смертей += 1;
                
                var initiator = info.InitiatorPlayer;
                
                if (initiator == null || initiator == playerV /*|| AreFriendsAPIFriend(initiator.UserIDString, playerV.UserIDString)*/) return;
                
                TopData con3 = (from x in Tops where x.UID == initiator.UserIDString select x).FirstOrDefault();
                
                if (con3 == null) return;
                
                //	Считаем убийства игроков / хедшоты / дистанцию
                        
                con3.УбийствPVP += 1;
					
                var distance = Vector3.Distance(initiator.transform.position, playerV.transform.position);
                        
                if ((int)distance > con3.Дистанция)
                {
                    con3.Дистанция = (int)distance;
                }
            
                if (info.isHeadshot)
                    con3.Хедшоты += 1;
            }
		}
        
        private bool AreFriendsAPIFriend(string playerId, string friendId)
        {
            try
            {
                bool result = (bool)Friends?.CallHook("AreFriends", playerId, friendId);
                return result;
            }
            catch
            {
                return false;
            }
        }
		
		//	Считаем взрывчатку
		void OnExplosiveThrown(BasePlayer player, BaseEntity entity)
		{
			if (TimedItemBlocker) return;
            
            if (entity.ShortPrefabName == "survey_charge.deployed" || entity.ShortPrefabName == "grenade.smoke.deployed") return;

			TopData con = (from x in Tops where x.UID == player.UserIDString select x).FirstOrDefault();
			con.ВзрывчатокИспользовано += 1;
			//Saved();
		}
		
		//	Считаем ракеты
		void OnRocketLaunched(BasePlayer player, BaseEntity entity)
		{
            if (TimedItemBlocker) return;
			
			TopData con = (from x in Tops where x.UID == player.UserIDString select x).FirstOrDefault();
			con.РакетВыпущено += 1;
			//Saved();
		}

		//	Считаем строительство
        void OnEntityBuilt(Planner plan, GameObject go)
        {
            var player = plan.GetOwnerPlayer();
            
			if (player == null) return;
            
			TopData con = (from x in Tops where x.UID == player.UserIDString select x).FirstOrDefault();
			con.Построек += 1;
			//Saved();
        }
		
		//	Дерево / Камень
		void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
		{
            var player = entity.ToPlayer();
            if (player == null || dispenser == null || item == null) return;
			
			TopData con = (from x in Tops where x.UID == player.UserIDString select x).FirstOrDefault();

            if (dispenser.gatherType == ResourceDispenser.GatherType.Tree)
			{
                con.Дерево += item.amount;
				//Saved();
				return;
			}
            else if (dispenser.gatherType == ResourceDispenser.GatherType.Ore)
			{
                con.Камень += item.amount;
				//Saved();
				return;
			}
		}
		
		void CreateInfo(BasePlayer player)
        {
			//if (player == null) return;
			Tops.Add(new TopData((string)player.displayName, player.UserIDString, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));
			//Saved();
		}
		
		//	Добавляем игрока в Базу Данных
		void OnPlayerInit(BasePlayer player)
		{
			//if (player == null) return;
			
			var check = (from x in Tops where x.UID == player.UserIDString select x).Count(); 
			if (check == 0)
				CreateInfo(player);
		}
		
		//	Загружаем TopData.json и проверяем есть ли все игроки в Базе Данных
		void Loaded()
        { 
			int place;
			int rr = 0;
			int r;
			
			Tops = Interface.Oxide.DataFileSystem.ReadObject<HashSet<TopData>>("TopData"); 
			foreach (var player in BasePlayer.activePlayerList)
			{	
				var check = (from x in Tops where x.UID == player.UserIDString select x).Count(); 
				if(check==0)CreateInfo(player);
			}
			//	Показываем в чат каждые 10мин трех лучших из одной случайной категории
			timer.Repeat (300, 0, ()=>
			{	
				place = 0;
				//	Выбираем случайную категорию
				r = Core.Random.Range(1,10);
				//	антиповтор	//////////////////////
				if (r == rr)
				{
					if (r >= 9)
					{
						r--;
					}
					else
					{
						r++;
					}
				}
				//////////////////////////////////////
				if(r==1)
				{
					rr = 1;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.УбийствPVP).Take(5);
					PrintToChat($"<size=14>     <color=#00FF00>УБИЙЦЫ</color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.УбийствPVP}</color></size>");
						Puts($"[ТОП Убийца] {top.Ник}  [{top.УбийствPVP}]");
					}
				}
				else if(r==2)
				{
					rr = 2;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.УбийствЖивотных).Take(5);
					PrintToChat($"<size=14>     <color=#00FF00>ОХОТНИКИ</color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.УбийствЖивотных}</color></size>");
						Puts($"[ТОП Охотник] {top.Ник}  [{top.УбийствЖивотных}]");
					}
				}
				else if(r==3)
				{
					rr = 3;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.Дерево).Take(5);	
					PrintToChat($"<size=14>     <color=#00FF00>ДРОВОСЕКИ </color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.Дерево}</color></size>");
						Puts($"[ТОП Дровосек] {top.Ник}  [{top.Дерево}]");
					}
				}
				else if(r==4)
				{
					rr = 4;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.Смертей).Take(5);
					PrintToChat($"<size=14>     <color=#00FF00>СМЕРТНИКИ</color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.Смертей}</color></size>");
						Puts($"[ТОП Смертник] {top.Ник}  [{top.Смертей}]");
					}
				}
				else if(r==5)
				{
					rr = 5;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.Хедшоты).Take(5);
					PrintToChat($"<size=14>     <color=#00FF00>ГОЛОВОСТРЕЛЫ</color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.Хедшоты}</color></size>");
						Puts($"[ТОП Головострел] {top.Ник}  [{top.Хедшоты}]");
					}
				}
				else if(r==6)
				{
					rr = 6;
					var TopPlayer = (from x in Tops select x).OrderByDescending(x => x.Камень).Take(5);
					PrintToChat($"<size=14>     <color=#00FF00>ШАХТЕРЫ</color></size>");
					foreach (var top in TopPlayer)
					{
						place += 1;
						PrintToChat($"<size=14><color=#FFFFFF>{place}.</color>  <color=#FFFFFF>{top.Ник}</color> <color=#00FF00>{top.Камень}</color></size>");
						Puts($"[ТОП Шахтер] {top.Ник}  [{top.Камень}]");
					}
				}
			}); 
		}
		
		//	Сохраняем инфу в TopData
		
        Timer saveDataBatchedTimer = null;

        // Collects all save calls within delay and saves once there are no more updates.
        void Saved(float delay = 3f)
        {
            if (saveDataBatchedTimer == null)
                saveDataBatchedTimer = timer.Once(delay, saveDataImmediate);
            else
                saveDataBatchedTimer.Reset(delay);
        }
		
        void Unload()
        {
			saveDataImmediate();
        }
		
        void OnServerShutdown()
        {
			saveDataImmediate();
        }

        void saveDataImmediate()
        {
            if (saveDataBatchedTimer != null)
            {
                saveDataBatchedTimer.DestroyToPool();
                saveDataBatchedTimer = null;
            }
            Interface.Oxide.DataFileSystem.WriteObject("TopData", Tops);
        }
		
		//	Вместо list используем hashset -> работа с большим количеством данных будет быстрее
		public HashSet<TopData> Tops = new HashSet<TopData>();
        public class TopData
        {
            public TopData(string Ник, string UID, int РакетВыпущено, int УбийствPVP, int Хедшоты, int Дистанция, int ВзрывчатокИспользовано, int УбийствЖивотных, int Смертей, int Дерево, int Камень, int Построек )
            {
                this.Ник = Ник;
                this.UID = UID;
				this.РакетВыпущено = РакетВыпущено;
				this.УбийствPVP = УбийствPVP;
				this.Хедшоты = Хедшоты;
				this.Дистанция = Дистанция;
                this.ВзрывчатокИспользовано = ВзрывчатокИспользовано;
				this.УбийствЖивотных = УбийствЖивотных; 
				this.Смертей = Смертей;
				this.Камень = Камень;
				this.Дерево = Дерево;
				this.Построек = Построек;
            }
			
			public string Ник { get; set; }
			public string UID { get; set; }
            public int РакетВыпущено { get; set; }
            public int УбийствPVP { get; set; }
			public int Хедшоты { get; set; }
			public int Дистанция { get; set; }
			public int ВзрывчатокИспользовано { get; set; }
			public int УбийствЖивотных { get; set; }
			public int Смертей { get; set; }
			public int Камень { get; set; }
			public int Дерево { get; set; }
			public int Построек { get; set; }
        }
    }
}


// --- End of file: RankMe.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RaidMarkers.cs ---
// --- Original Local Path: RaidMarkers.cs ---

﻿/*
 ########### README ####################################################
                                                                             
  !!! DON'T EDIT THIS FILE !!!
                                                                     
 ########### CHANGES ###################################################

 1.0.0
    - Plugin release
 1.0.1
    - Added Localization
 1.0.2
    - Added permissions to see markers
    - Added hook CanNetworkTo
 1.0.3
    - Added option grid position
    - Added config update
    - Added option for entity owner
    - Added option for authorized players
    - Added option show online/offline raid
    - Change CanNetworkTo to object

 #######################################################################
*/

using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;
using System;
using Rust;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("Raid Markers", "KACAT КОРМИТ", "1.0.3")]
    [Description("Raid Markers on the map")]
    class RaidMarkers : RustPlugin
    {
        #region [Fields]

        private const string permAllow = "raidmarkers.allow";
        private Configuration config;
        private HashSet<MapMarkerGenericRadius> raidMarkers = new HashSet<MapMarkerGenericRadius>();

        #endregion

        #region [Oxide Hooks]

        private void Init() => permission.RegisterPermission(permAllow, this);

        private void Unload() => ClearRaidMarkers();

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null)
                return;

            if (entity.lastDamage != DamageType.Explosion)
                return;

            if (config.blacklistedPrefab.Contains(entity.ShortPrefabName))
                return;

            if (entity.name.Contains("building") || config.additionalPrefab.Contains(entity.ShortPrefabName))
            {
                if (!IsFar(entity.ServerPosition))
                    return;

                var attacker = info.InitiatorPlayer;
                if (attacker == null)
                    return;

                var buildingPrivlidge = entity.GetBuildingPrivilege();
                if (buildingPrivlidge != null && buildingPrivlidge.authorizedPlayers.Count > 0)
                {
                    if (config.authorizedPlayer && IsAuthed(attacker, buildingPrivlidge))
                        return;

                    var online = IsOnlineRaid(buildingPrivlidge);
                    if (!config.showOnline && online)
                        return;

                    if (!config.showOffline && !online)
                        return;
                }

                if (config.chatGridPosition)
                    Server.Broadcast(GetLang("GridPosition", null, GetGridPosition(entity.ServerPosition)));

                CreateRaidMarker(entity.ServerPosition);
            }
        }

        private object CanNetworkTo(MapMarkerGenericRadius marker, BasePlayer player)
        {
            if (marker == null || player == null)
                return null;

            if (raidMarkers.Contains(marker) && !permission.UserHasPermission(player.UserIDString, permAllow))
                return false;

            return null;
        }

        #endregion

        #region [Hooks]   

        private void CreateRaidMarker(Vector3 position)
        {
            MapMarkerGenericRadius marker = GameManager.server.CreateEntity("assets/prefabs/tools/map/genericradiusmarker.prefab", position) as MapMarkerGenericRadius;
            if (marker == null)
                return;

            raidMarkers.Add(marker);
            marker.alpha = config.markerConfiguration.markerAlpha;
            marker.radius = config.markerConfiguration.markerRadius;
            marker.color1 = ParseColor(config.markerConfiguration.markerColor1);
            marker.color2 = ParseColor(config.markerConfiguration.markerColor2);
            marker.Spawn();
            marker.SendUpdate();

            timer.In(config.markerConfiguration.markerDuration, () =>
            {
                marker.Kill();
                marker.SendUpdate();
                raidMarkers.Remove(marker);
            });
        }

        private void ClearRaidMarkers()
        {
            foreach (var marker in raidMarkers)
            {
                if (marker != null)
                {
                    marker.Kill();
                    marker.SendUpdate();
                }
            }

            raidMarkers.Clear();
        }

        private bool IsFar(Vector3 position)
        {
            bool isFar = true;
            foreach (var marker in raidMarkers)
            {
                if (GetDistance(marker.ServerPosition, position) < config.markerDistance)
                {
                    isFar = false;
                    break;
                }
            }

            return isFar;
        }

        private bool IsAuthed(BasePlayer player, BuildingPrivlidge buildingPrivlidge)
        {
            return buildingPrivlidge.IsAuthed(player);
        }

        private bool IsOnlineRaid(BuildingPrivlidge buildingPrivlidge)
        {
            foreach (var authPlayer in buildingPrivlidge.authorizedPlayers)
            {
                BasePlayer player = BasePlayer.FindByID(authPlayer.userid);
                if (player != null && player.IsConnected)
                    return true;
            }

            return false;
        }

        private double GetDistance(Vector3 pos1, Vector3 pos2)
        {
            return Math.Round(Vector3.Distance(pos1, pos2), 0);
        }

        private Color ParseColor(string hexColor)
        {
            if (!hexColor.StartsWith("#"))
                hexColor = $"#{hexColor}";

            Color color;
            if (ColorUtility.TryParseHtmlString(hexColor, out color))
                return color;

            return Color.white;
        }

        public static string GetGridPosition(Vector3 position)
        {
            Vector2 vector = new Vector2(TerrainMeta.NormalizeX(position.x), TerrainMeta.NormalizeZ(position.z));
            float num = TerrainMeta.Size.x / 1024f;
            int num2 = 7;
            Vector2 vector2 = vector * num * num2;
            float num3 = Mathf.Floor(vector2.x) + 1f;
            float num4 = Mathf.Floor(num * (float)num2 - vector2.y);
            string text = string.Empty;
            float num5 = num3 / 26f;
            float num6 = num3 % 26f;
            if (num6 == 0f)
            {
                num6 = 26f;
            }

            if (num5 > 1f)
            {
                text += Convert.ToChar(64 + (int)num5);
            }

            text += Convert.ToChar(64 + (int)num6);
            return $"{text}{num4}";
        }

        #endregion 

        #region [Chat Commands]

        [ChatCommand("rmtest")]
        private void cmdRaidMarker(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin)
            {
                SendReply(player, GetLang("NoPerm", player.UserIDString));
                return;
            }

            CreateRaidMarker(player.ServerPosition);
            SendReply(player, GetLang("TestRaidMarker", player.UserIDString));
        }

        #endregion

        #region [Classes]

        private class Configuration
        {
            [JsonProperty(PropertyName = "Blaclisted prefabs")]
            public List<string> blacklistedPrefab = new List<string>();

            [JsonProperty(PropertyName = "Additional prefabs")]
            public List<string> additionalPrefab = new List<string>();

            [JsonProperty(PropertyName = "Distance when place new marker from another marker")]
            public int markerDistance;

            [JsonProperty("Enable write grid position to chat")]
            public bool chatGridPosition;

            [JsonProperty("Disable marker for authorized players in cupboard")]
            public bool authorizedPlayer;

            [JsonProperty("Create marker for online raid")]
            public bool showOnline;

            [JsonProperty("Create marker for offline raid")]
            public bool showOffline;

            [JsonProperty(PropertyName = "Marker configuration")]
            public MarkerConfiguration markerConfiguration;

            public VersionNumber version;
        }

        private class MarkerConfiguration
        {
            [JsonProperty(PropertyName = "Alpha")]
            public float markerAlpha;

            [JsonProperty(PropertyName = "Radius")]
            public float markerRadius;

            [JsonProperty(PropertyName = "Color1")]
            public string markerColor1;

            [JsonProperty(PropertyName = "Color2")]
            public string markerColor2;

            [JsonProperty(PropertyName = "Duration")]
            public float markerDuration;
        }

        #endregion

        #region [Config]

        private Configuration GetDefaultConfig()
        {
            return new Configuration
            {
                blacklistedPrefab = new List<string>
                {
                    "wall.external.high.wood",
                    "wall.external.high.stone"
                },
                additionalPrefab = new List<string>
                {
                    "cupboard.tool.deployed"
                },
                markerDistance = 100,
                chatGridPosition = true,
                authorizedPlayer = true,
                showOnline = true,
                showOffline = true,
                markerConfiguration = new MarkerConfiguration
                {
                    markerAlpha = 0.6f,
                    markerRadius = 0.7f,
                    markerDuration = 90f,
                    markerColor1 = "#000000",
                    markerColor2 = "#FF0000",
                },
                version = Version
            };
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
            Puts("Generating new configuration file........");
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<Configuration>();

                if (config == null)
                    LoadDefaultConfig();

                if (config.version < Version)
                    UpdateConfig();
            }
            catch
            {
                PrintError("######### Configuration file is not valid! #########");
                return;
            }

            SaveConfig();
        }

        private void UpdateConfig()
        {
            Puts("Updating configuration values.....");
            config.version = Version;
            Puts("Configuration updated");
        }

        #endregion

        #region [Localization]

        private string GetLang(string key, string playerID, params object[] args) => string.Format(lang.GetMessage(key, this, playerID), args);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                { "NoPerm", "You don't have permissions" },
                { "TestRaidMarker", "Test Raid Marker created on your position" },
                { "GridPosition", "Starting raid at {0} position" }

            }, this);
        }

        #endregion
    }
}

// --- End of file: RaidMarkers.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RPSBattles.cs ---
// --- Original Local Path: RPSBattles.cs ---

using System.Collections.Generic;
using System.Reflection;
using System;
using Oxide.Core; 
using UnityEngine;
using System.Linq;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
 
namespace Oxide.Plugins
{
    [Info("RPS Battles", "PaiN", "0.3", ResourceId = 1929)] 
    [Description("Rock Paper Scissors game")]
    class RPSBattles : RustPlugin 
    { 
		[PluginReference]
        Plugin Economics;
		
		private static FieldInfo _condition = typeof(Item).GetField("_condition", (BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.GetField));
		
		void Loaded()
		{	
			data = Interface.GetMod().DataFileSystem.ReadObject<Data>("RPSBattles");		
			LoadDefaultMessages();
			LoadDefaultConfig();
		}
		
		string sendlang(string key, string userID = null)
        {
            return lang.GetMessage(key, this, userID);
        }

		void LoadDefaultMessages()
        {
			Dictionary<string, string> messages = new Dictionary<string, string>
			{
				{"CONNECT_DRAW_ITEMS_BACK", "The items from your battle are back in your inventory since it was a draw."},
				{"CONNECT_DRAW_ITEMS_MSG", "NAME: {0} AMMOUNT: {1} CONDITION: {2}"},
				{"CONNECT_WIN_ITEMS_MSG", "Won Items from your battles: \nNAME: {0} AMMOUNT: {1} CONDITION: {2}"},
				{"RPS_LIST", "ID:{0} | Item-Name:{1} | Amount: {2}"},
				{"CMD_CREATE_INCORRECT_SYNTAX", "Incorrect Syntax! || /rps create <RPSchoice> || Example: /rps create r (<r> == rock.)"},
				{"CMD_CREATE_PUT_ITEM", "Please put the item that you want to set a battle for in your first slot of your belt."},
				{"CMD_CREATE_MAX_BATTLES", "You currently have max allowed battles running. Wait for them to finish"},
				{"CMD_CREATE_BATTLE_CREATED", "Battle created."},
				{"CMD_CREATE_RPS_SYNTAX", "Syntax: /rps create <r/p/s>"},
				{"CMD_PLAY_INCORRECT_SYNTAX", "Incorrect Syntax! || /rps play <BattleID> <RPSchoice>"},
				{"CMD_PLAY_DRAW_MSG", "It's a draw!"},
				{"CMD_PLAY_WIN_MSG", "You WON a RPS Battle."},
				{"BROADCAST_WIN","<color=lime>{0}</color> <color=#91FFB5>WON</color> against <color=red>{1}</color> in a RPS Battle"},
				{"BROADCAST_LOSE", "<color=red>{0}</color> <color=yellow>LOST</color> against <color=lime>{1}</color> in a RPS Battle"},
				{"CMD_PLAY_LOSE_MSG", "You have lost a RPS Battle."},
				{"DONT_HAVE_ITEMS", "You dont have that item/item amount"},
				{"RPS_CHOICE_MSG", "RPSchoice must be <r/p/s> || Example: /rps play 1 s  (<s> == scissors)"},
				{"RPS_CREATE_NOT_ENOUGH_MONEY", "You dont have enough money to create a battle! || Battle Cost: {0}"},
				{"RPS_CREATE_PAID", "You paid <color=#91FFB5>{0}</color>$ to create a RPS Battle."},
				{"YOU_NEED_TO_BE_CLOSER", "You need to be closer!"},
				{"CANT_PLAY_OWN_BATTLE", "You can not play your own battle!"}
			};
				
	 
            lang.RegisterMessages(messages, this);
        }
		
		
		protected override void LoadDefaultConfig()
		{ 
			Dictionary<string, object> dict = new Dictionary<string, object>
			{
				{"Assault Rifle", "http://vignette3.wikia.nocookie.net/play-rust/images/d/d1/Assault_Rifle_icon.png/revision/latest/scale-to-width-down/100?cb=20160211200609"},
				{"Bolt Action Rifle", "http://vignette1.wikia.nocookie.net/play-rust/images/5/55/Bolt_Action_Rifle_icon.png/revision/latest/scale-to-width-down/100?cb=20160211200415"},
				{"Camp Fire", "http://vignette4.wikia.nocookie.net/play-rust/images/3/35/Camp_Fire_icon.png/revision/latest/scale-to-width-down/100?cb=20151106060846"},
				{"Wood", "http://vignette4.wikia.nocookie.net/play-rust/images/f/f2/Wood_icon.png/revision/latest/scale-to-width-down/100?cb=20151106061551"}
			}; 
			Config["RPS_CREATE_COST"] = GetConfig("RPS_CREATE_COST", 100);
			Config["Item-Images"] = GetConfig("Item-Images", dict);
			Config["SafeMode-Activated"] = GetConfig("SafeMode-Activated", false);
			Config["SafeBattle-Distance"] = GetConfig("SafeBattle-Distance", 5);
		    SaveConfig();
		}
		
		
			
		void Unloaded()
		{
			foreach(BasePlayer player in BasePlayer.activePlayerList)
			CuiHelper.DestroyUi(player, "BackroundGUI");
		}
		
		class Data
		{
			public List<BattleInfo> Battles = new List<BattleInfo>{};
		}
		Data data;
		
		void SaveData() => Interface.GetMod().DataFileSystem.WriteObject("RPSBattles", data);

		
		public class BattleInfo
		{
			
			
			public int battleid;
			//Creator
			public string ccreatorname;
			public string citemtype;
			public string citemfullname;
			public int citemid;
			public int ciamount;
			public bool cisbp;
			public string cRPSbet;
			public ulong csteamid;
			public string citemshortname;
			public int cicondition;
			//--------------
			//Enemy
			public string eplayername;
			public string eitemtype;
			public string eitemfullname;
			public int eitemid;
			public int eiamount;
			public bool eisbp;
			public string eRPSbet;
			public ulong esteamid;
			public string eitemshortname;
			public int eicondition;
			//--------------
			public bool enabled;
			public string status;
			
			public BattleInfo(string stats, string bet, int id, BasePlayer player, Item item, bool rpsenabled)
			{
				status = stats;
				enabled = rpsenabled;
				battleid = id;
				//Creator
				ccreatorname = player.displayName;
				cisbp = item.IsBlueprint();
				csteamid = player.userID;
				citemid = item.info.itemid;
				citemshortname = item.info.shortname;
				citemfullname = item.info.displayName.english.ToString();
				ciamount = item.amount;
				citemtype = item.info.category.ToString();
				cicondition = Convert.ToInt32(_condition.GetValue(item));
				cRPSbet = bet;
				//--------
				//Enemy
				eplayername = "";
				eisbp = false;
				esteamid = 0;
				eitemid = 0;
				eitemshortname = "";
				eitemfullname = "";
				eiamount = 0;
				eitemtype = "";
				eicondition = 0;
				eRPSbet = "";
				//--------
			}
			
			public BattleInfo()
			{}
		}
		
		
		void UseUI(BasePlayer player, string itemurl, string itemurl2, string rightginfo, string leftginfo)
		{

			CuiElementContainer elements = new CuiElementContainer();
			var backround = elements.Add(new CuiPanel
			{
				Image =
				{
					Color = "0.1 0.1 0.1 0.7"
				},
				RectTransform =
				{
					AnchorMin = "0.8 0.32",
					AnchorMax = "1 0.8"
				},
				CursorEnabled = true
			}, "HUD/Overlay", "BackroundGUI"); 
			elements.Add(new CuiElement
            {
				Parent = "BackroundGUI",
                Components =
				{
					new CuiRawImageComponent
					{
						Url = itemurl,
						Sprite = "assets/content/textures/generic/fulltransparent.tga"
					},
					new CuiRectTransformComponent
					{
						AnchorMin = "0 0.55",
						AnchorMax = "0.3 0.9"
					}
				}
            });
			elements.Add(new CuiElement
            {
				Parent = "BackroundGUI",
                Components =
				{
					new CuiRawImageComponent
					{
						Url = itemurl2,
						Sprite = "assets/content/textures/generic/fulltransparent.tga"
					},
					new CuiRectTransformComponent
					{
						AnchorMin = "0.7 0.55",
						AnchorMax = "1 0.9"
					}
				}
            });
			elements.Add(new CuiLabel
			{
				Text =
                {
					Text = leftginfo, 
                    FontSize = 14,
                    Align = TextAnchor.UpperLeft
                },
                RectTransform =
                {
                    AnchorMin = "0.05 0",
                    AnchorMax = "0.45 0.55"
                }
			}, "BackroundGUI");
			elements.Add(new CuiLabel
			{
				Text =
                {
					Text = rightginfo, 
                    FontSize = 14,
                    Align = TextAnchor.UpperRight
                },
                RectTransform =
                {
                    AnchorMin = "0.55 0",
                    AnchorMax = "0.95 0.55"
                }
			}, "BackroundGUI");
			var closeback = new CuiButton
            {
                Button =
                {
                    Close = "BackroundGUI",
                    Color = "255 0 0 1"
                },
                RectTransform =
                {
                    AnchorMin = "0.9 0.9",
					AnchorMax = "1 1"
                },
                Text =
                {
                    Text = "x",
                    FontSize = 22,
                    Align = TextAnchor.MiddleCenter
                }
            };
			elements.Add(closeback, backround);
			CuiHelper.AddUi(player, elements);
		}
		
		void OnPlayerDisconnected(BasePlayer player, string reason)
		{
			if(Convert.ToBoolean(Config["SafeMode-Activated"]) == true)
			{ 
				for (int i = 0; i < data.Battles.Count; i++)
				{
					BattleInfo info = data.Battles[i];
					if(data.Battles.Any(x => x.csteamid == player.userID))
					{
						info.enabled = false;
						SaveData();
						return;
						break;
					}
				}
			}
		}

		
		void OnPlayerInit(BasePlayer player)
		{

			for (int i = 0; i < data.Battles.Count; i++)
			{
				BattleInfo info = data.Battles[i];
				if(Convert.ToBoolean(Config["SafeMode-Activated"]) == true)
				{ 
					if(data.Battles.Any(x => x.csteamid == player.userID))
					{
						info.enabled = true;
						SaveData();
						return;
						break;
					}
				}
				if(info.csteamid == player.userID)
				{
					if(info.status == "Draw")
					{
						SendReply(player, sendlang("CONNECT_DRAW_ITEMS_BACK", player.userID.ToString()));
						SendReply(player,  sendlang("CONNECT_DRAW_ITEMS_MSG", player.userID.ToString()), info.citemfullname, info.ciamount, info.cicondition);
						Item item = ItemManager.CreateByItemID(info.citemid, info.ciamount, info.cisbp, 0);
						player.inventory.GiveItem(item);
						data.Battles.Remove(info);
						SaveData();
					}
					if(info.status == "Win")
					{
						Item hisitem = ItemManager.CreateByItemID(info.citemid, info.ciamount, info.cisbp, 0);
						player.inventory.GiveItem(hisitem);
						Item item = ItemManager.CreateByItemID(info.eitemid, info.eiamount, info.eisbp, 0);
						player.inventory.GiveItem(item);
						data.Battles.Remove(info);
						SendReply(player, sendlang("CONNECT_WIN_ITEMS_MSG", player.userID.ToString()), info.eitemfullname, info.eiamount + info.ciamount, info.cicondition);
						SaveData();
					}
					if(info.status == "Lose")
					{
						data.Battles.Remove(info);
						SaveData();
					}
				}
			}
		}
		
		int GetNewId(string battle)
		{
			int id = 0;
			if(battle == "Items")
			{
				foreach(BattleInfo info in data.Battles)
				{
					id = Math.Max(0, info.battleid);
				}
			}
			/*if(battle == "Money")
			foreach(MoneyBattleInfo minfo in data.MoneyBattles)
			{
				id = Math.Max(0, minfo.mbattleid);
			}*/
			return id + 1;
		} 
		
		int GetPlayerBattleCount(BasePlayer player)
		{
			int count = 0;
			foreach(BattleInfo info in data.Battles)
			if(info.csteamid == player.userID)
			count++;
			
			return count;
		}
		 
		[ChatCommand("rps")]
		void cmdRPS(BasePlayer player, string cmd, string[] args)
		{
			switch(args[0])
			{
				case "help":
				SendReply(player, "<color=#91FFB5>Available Commands</color>");
				SendReply(player, "<color=#91FFB5>-</color> /rps list => Shows the current RPS Battles.");
				SendReply(player, "<color=#91FFB5>-</color> /rps list <namepart_of_item> => Shows the RPS Battles that contain the item that you put in the argument.");
				SendReply(player, "<color=#91FFB5>-</color> /rps create <r/p/s> => Create RPS Battles | r = rock, p = paper, s = scissors");
				SendReply(player, "<color=#91FFB5>-</color> /rps play <BattleId> <r/p/s> => Play against already made Battles from players | /rps list");
				break;
				case "list":
				if(args.Length == 1)
				{
					foreach(BattleInfo info in data.Battles)
					{
						if(info.enabled == true)
						SendReply(player, sendlang("RPS_LIST", player.userID.ToString()), info.battleid, info.citemfullname, info.ciamount);
					}
				}
				else if(args.Length == 2)
				{
					foreach(BattleInfo info in data.Battles)
					{
						if(info.citemfullname.ToLower().Contains(args[1].ToLower()))
						SendReply(player, sendlang("RPS_LIST", player.userID.ToString()), info.battleid, info.citemfullname, info.ciamount);
					}
				}
				break;
				case "create": 
				
				if(args.Length != 2)
				{
					SendReply(player, sendlang("CMD_CREATE_INCORRECT_SYNTAX", player.userID.ToString()));
					return;
				}
				if(player.inventory.containerBelt.SlotTaken(0) == false)
				{
					SendReply(player, sendlang("CMD_CREATE_PUT_ITEM", player.userID.ToString()));
					return;
				}
				if(GetPlayerBattleCount(player) >= 3)
				{
					SendReply(player, sendlang("CMD_CREATE_MAX_BATTLES", player.userID.ToString()));
					return;
				}
				if(Convert.ToInt32(Config["RPS_CREATE_COST"]) > 0 && plugins.Find("Economics"))
				{ 
					var playermoney = (double) Economics?.CallHook("GetPlayerMoney", player.userID);
					if(playermoney < Convert.ToInt32(Config["RPS_CREATE_COST"]))
					{
						SendReply(player, sendlang("RPS_CREATE_NOT_ENOUGH_MONEY", player.userID.ToString()), Config["RPS_CREATE_COST"].ToString());
						return;
					}
					Economics?.CallHook("Withdraw", player.userID, Convert.ToInt32(Config["RPS_CREATE_COST"]));
					SendReply(player, sendlang("RPS_CREATE_PAID", player.userID.ToString()), Convert.ToInt32(Config["RPS_CREATE_COST"]).ToString());
				} 
				if(args[1] == "r" || args[1] == "p" || args[1] == "s")
				{ 
					
					Item torps = player.inventory.containerBelt.GetSlot(0);
					string rps = args[1].ToString();
					var idata = new BattleInfo("Awaiting", rps, GetNewId("Items"), player, torps, true);
					data.Battles.Add(idata);
					SendReply(player, sendlang("CMD_CREATE_BATTLE_CREATED", player.userID.ToString()));
					player.inventory.containerBelt.Take(new List<Item>{}, torps.info.itemid, torps.amount);
					SaveData();
				} 
			/*	else if(args[1].ToString().All(char.IsDigit) && plugins.Find("Economics"))
				{
					string rps = args[1].ToString();
					var idata = new MoneyBattleInfo("Awaiting", player, GetNewId("Money"), player, );
					data.Battles.Add(idata);
					SendReply(player, sendlang("CMD_CREATE_BATTLE_CREATED", player.userID.ToString()));
					SaveData();
				} */
				else
				{
					SendReply(player, sendlang("CMD_CREATE_RPS_SYNTAX", player.userID.ToString()));
					return;
				}

				break;
				
				case "play":
				if(args.Length != 3)
				{
					SendReply(player, sendlang("CMD_PLAY_INCORRECT_SYNTAX", player.userID.ToString()));
					return;
				}
				if(args[2] == "r" || args[2] == "p" || args[2] == "s")
				{
					
					for (int i = 0; i < data.Battles.Count; i++)
					{
						BattleInfo info = data.Battles[i];
						if(info.battleid == Convert.ToInt32(args[1]))
						{
							if(Convert.ToBoolean(Config["SafeMode-Activated"]) == true)
							{ 
								BasePlayer cr = BasePlayer.Find(info.csteamid.ToString());
								if(info.enabled == false && cr == null)
								{
									SendReply(player, "Incorrect BattleID");
									return;
								}
								if(Vector3.Distance(player.transform.position, cr.transform.position) <= Convert.ToInt32(Config["SafeBattle-Distance"]))	
								goto Finish;
								else
								{
									SendReply(player, sendlang("YOU_NEED_TO_BE_CLOSER", player.userID.ToString()));
									return;
								}
							}
							Finish:
							if(info.csteamid == player.userID)
							{
								SendReply(player, "You can not play your own battle!");
								return;
							}

							if(player.inventory.GetAmount(info.citemid) >= info.ciamount)
							{
							
								info.status = "In Progress";
								string rpschoice = args[2].ToString();
								if(rpschoice == info.cRPSbet)// Draw
								{
									info.status = "Draw";
									SendReply(player, sendlang("CMD_PLAY_DRAW_MSG", player.userID.ToString()));
									BasePlayer creator = BasePlayer.Find(info.csteamid.ToString());
									if(BasePlayer.activePlayerList.Contains(creator))
									{
										SendReply(creator, sendlang("CMD_PLAY_DRAW_MSG", creator.userID.ToString()));
										Item item = ItemManager.CreateByItemID(info.citemid, info.ciamount, info.cisbp, 0);
										creator.inventory.GiveItem(item);
										data.Battles.Remove(info);
										SaveData();
									}
									else
									info.enabled = false;
									
								}
								if(info.cRPSbet == "r")
								{
									if(rpschoice == "p")//LOSE
									{
										Lose(player, info);
										
									}
									if(rpschoice == "s")//WIN
									{
										Win(player, info, rpschoice);
									}
									
								}
								if(info.cRPSbet == "p")
								{
									if(rpschoice == "s")//LOSE
									{
										Lose(player, info);
										
									}
									if(rpschoice == "r")//WIN
									{
										
										Win(player, info, rpschoice);
									}
									
								}
								if(info.cRPSbet == "s")
								{
									if(rpschoice == "r")//LOSE
									{
										Lose(player, info);
										
									}
									if(rpschoice == "p")//WIN
									{
										Win(player, info, rpschoice);
									}
								}
							}
							else
							{
								SendReply(player, sendlang("DONT_HAVE_ITEMS", player.userID.ToString()));
								return;
							}
						}
					}	
				}
				else
				{
					SendReply(player, sendlang("RPS_CHOICE_MSG", player.userID.ToString()));
					return;
				}
				break;				
			}
		}
		string GetItemImage(string itemname)
		{
			string itemurl = "";
			foreach(var v in Config["Item-Images"] as Dictionary<string, object>)
			{
				if(itemname == v.Key.ToString())
				itemurl = v.Value.ToString();
			}
			return itemurl;
		}
		
		string GetFullChoise(string s)
		{
			string fullchoice = "";
			if(s == "r")
				return "ROCK";
			else if(s == "p")
				return "PAPER";
			else if(s == "s")
				return "SCISSORS";
			return "ERROR";
		}
		
		void Win(BasePlayer player, BattleInfo info, string rpschoice)
		{
			Item eitem = player.inventory.containerMain.FindItemByItemID(info.citemid);
			info.eisbp = eitem.IsBlueprint();
			info.esteamid = player.userID;
			info.eitemid = eitem.info.itemid;
			info.eplayername = player.displayName;
			info.eitemshortname = eitem.info.shortname;
			info.eitemfullname = eitem.info.displayName.english.ToString();
			info.eiamount = eitem.amount;
			info.eitemtype = eitem.info.category.ToString();
			info.eicondition = Convert.ToInt32(_condition.GetValue(eitem));
			DisplayGUI(player, info.eitemfullname, info.eiamount, info.eicondition, info.citemfullname, info.ciamount, Convert.ToInt32(info.cicondition), GetFullChoise(rpschoice).ToString(), GetFullChoise(info.cRPSbet).ToString());
			info.status = "Win";
			SendReply(player, sendlang("CMD_PLAY_LOSE_MSG", player.userID.ToString()));
			player.inventory.containerMain.Take(new List<Item>{}, eitem.info.itemid, eitem.amount);
			BasePlayer creator = BasePlayer.Find(info.csteamid.ToString());
			PrintToChat(sendlang("BROADCAST_WIN", null), creator.displayName, player.displayName);
			if(BasePlayer.activePlayerList.Contains(creator))
			{
				SendReply(creator, sendlang("CMD_PLAY_WIN_MSG", creator.userID.ToString()));
				Item item = ItemManager.CreateByItemID(info.citemid, info.ciamount, info.cisbp, 0);
				Item wonitem = ItemManager.CreateByItemID(info.eitemid, info.eiamount, info.eisbp, 0);
				creator.inventory.GiveItem(item); 
				creator.inventory.GiveItem(wonitem);
				data.Battles.Remove(info);
				SaveData();
			}
			else
			info.enabled = false;
		}
		
		void Lose(BasePlayer player, BattleInfo info)
		{
			info.status = "Lose";
			SendReply(player, sendlang("CMD_PLAY_WIN_MSG", player.userID.ToString()));
			Item wonitem = ItemManager.CreateByItemID(info.citemid, info.ciamount, info.cisbp, 0);
			player.inventory.GiveItem(wonitem);
			BasePlayer creator = BasePlayer.Find(info.csteamid.ToString());
			PrintToChat(sendlang("BROADCAST_LOSE", null), creator.displayName, player.displayName);										
			if(BasePlayer.activePlayerList.Contains(creator))
			{
				SendReply(creator, sendlang("CMD_PLAY_LOSE_MSG", creator.userID.ToString()));
				data.Battles.Remove(info);
				SaveData();
			} 
			else
			info.enabled = false;
		}
		
		
		void DisplayGUI(BasePlayer player, string enifullname, int eniamount, int enicondition, string crifullname, int criamount, int cricondition, string lchoice, string rchoice)
		{
			string leftm = "";
			string rightm = "";
			List<object> left = new List<object>{
				"NAME-LEFT",
				$"{enifullname}",
				"--------------",
				"AMOUNT",
				$"{eniamount}",
				"--------------",
				"CONDITION",
				$"{enicondition}",
				"***************\n",
				$"<size=16><color=yellow>YOU</color>: <color=lime>{lchoice}</color></size>"
			};
			List<object> right = new List<object>{
				"NAME-RIGHT",
				$"{crifullname}",
				"--------------",
				"AMOUNT",
				$"{criamount}",
				"--------------",
				"CONDITION",
				$"{cricondition}",
				"***************\n",
				$"<size=16><color=magenta>{rchoice}</color></size>"
			};
			foreach(var l in left as List<object>)
			leftm = leftm + l.ToString() + "\n";
			foreach(var r in right as List<object>)
			rightm = rightm + r.ToString() + "\n";
			UseUI(player, GetItemImage(enifullname),GetItemImage(crifullname), rightm, leftm);
		}
		
		T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }
	}
}


// --- End of file: RPSBattles.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Logo.cs ---
// --- Original Local Path: Logo.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Logo", "poof", "1.0.0")]
    public class Logo : RustPlugin
    {
		#region Settings [Настройка]
		
		string LogoName = "GGT RUST • MAX 5";
		
		#endregion
		
		#region Hooks [Хуки]
		
        private void OnServerInitialized()
        {
            BasePlayer.activePlayerList.ForEach(OnPlayerInit);
        }
		
        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, "LogoPanel");  
            }   
        }
		
        private void OnPlayerInit(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerInit(player));
                return;
            }
			
            foreach (var players in BasePlayer.activePlayerList)
            {
			    timer.Once(1, () =>
			    {
                    DrawInterface(players);
			    });
            }
        }
		
        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            foreach (var players in BasePlayer.activePlayerList)
            {
			    timer.Once(1, () =>
			    {
				    DrawInterface(players);
			    });
            }
        }
		
		#endregion
		
		#region UI [Визуальная часть]
		
        void DrawInterface(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "LogoPanel");
            
			var QueueCount = ServerMgr.Instance.connectionQueue.Queued.ToString();
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                Image = { Color = $"0 0 0 0" },
                RectTransform = { AnchorMin = "0.0359375 0.9388888", AnchorMax = "0.203125 0.9875" },
                CursorEnabled = false,
            }, "Overlay", "LogoPanel");
            
            container.Add(new CuiElement
            {
                Parent = "LogoPanel",
                Components = {
                    new CuiTextComponent() { Color = HexToRustFormat("#FFFFFF91"), FadeIn = 1f, Text = LogoName, FontSize = 20, Align = TextAnchor.UpperLeft, Font = "robotocondensed-bold.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.0140186 0.1428578", AnchorMax = "0.9859813 1.057143" },
                }
            });
            
            container.Add(new CuiElement
            {
                Parent = "LogoPanel",
                Components = {
                    new CuiTextComponent() { Color = HexToRustFormat("#FFFFFF91"), FadeIn = 1f, Text = $"ОНЛАЙН: {BasePlayer.activePlayerList.Count} (+{QueueCount}) ЧЕЛ.", FontSize = 15, Align = TextAnchor.UpperLeft, Font = "robotocondensed-regular.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.0140186 -0.02857186", AnchorMax = "0.9859813 0.5428569" },
                }
            });
            
            CuiHelper.AddUi(player, container);
        }
		
		#endregion
		
		#region Helpers [Доп. методы]
		
		private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
		
		#endregion
	}
}

// --- End of file: Logo.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SuicideBomber.cs ---
// --- Original Local Path: SuicideBomber.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("SuicideBomber", "Calytic @ cyclone.network", "0.0.2", ResourceId = 1425)]
    class SuicideBomber : RustPlugin
    {
        private float damage;
        private float radius;
        private int explosives;
        private int c4;
        private bool flare;
        private bool scream;

        private Dictionary<string, string> messages = new Dictionary<string, string>();

        private List<string> texts = new List<string>() {
            "You lack the required {0} timed explosives",
            "You lack the required {0} explosives",
            "You lack the required flare",
            "You will explode shortly..",
        };

        void OnServerInitialized()
        {
            damage = this.GetConfig<float>("damage", 1200f);
            radius = this.GetConfig<float>("radius", 12f);
            c4 = this.GetConfig<int>("c4", 1);
            explosives = this.GetConfig<int>("explosives", 10);
            scream = this.GetConfig<bool>("scream", true);
            flare = this.GetConfig<bool>("flare", true);

            Dictionary<string, object> customMessages = GetConfig<Dictionary<string, object>>("messages", null);
            if (customMessages != null)
            {
                foreach (KeyValuePair<string, object> kvp in customMessages)
                {
                    messages[kvp.Key] = kvp.Value.ToString();
                }
            }

            LoadData();
        }

        void LoadData()
        {
            if (this.Config["VERSION"] == null)
            {
                // FOR COMPATIBILITY WITH INITIAL VERSIONS WITHOUT VERSIONED CONFIG
                this.ReloadConfig();
            }
            else if (this.GetConfig<string>("VERSION", this.Version.ToString()) != this.Version.ToString())
            {
                // ADDS NEW, IF ANY, CONFIGURATION OPTIONS
                this.ReloadConfig();
            }
        }

        protected void ReloadConfig()
        {
            Dictionary<string, object> messages = new Dictionary<string, object>();

            foreach (string text in texts)
            {
                if (!messages.ContainsKey(text))
                {
                    messages.Add(text, text);
                }
            }

            Config["messages"] = messages;
            Config["VERSION"] = this.Version.ToString();

            // NEW CONFIGURATION OPTIONS HERE
            Config["c4"] = 1;
            Config["flare"] = true;
            // END NEW CONFIGURATION OPTIONS

            PrintWarning("Upgrading Configuration File");
            this.SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating new configuration");
            Config.Clear();

            Dictionary<string, object> messages = new Dictionary<string, object>();

            foreach (string text in texts)
            {
                if (messages.ContainsKey(text))
                {
                    PrintWarning("Duplicate translation string: " + text);
                }
                else
                {
                    messages.Add(text, text);
                }
            }

            Config["messages"] = messages;
            Config["damage"] = 1200f;
            Config["radius"] = 12f;
            Config["explosives"] = 10;
            Config["c4"] = 1;
            Config["scream"] = true;
            Config["flare"] = true;
            Config["VERSION"] = this.Version.ToString();
        }

        private T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null)
            {
                return defaultValue;
            }

            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        void OnPlayerInput(BasePlayer player, InputState input)
        {
            Item activeItem = player.GetActiveItem();

            if (activeItem != null && activeItem.info.shortname == "targeting.computer" && input.WasJustPressed(BUTTON.USE))
            {
                bool fail = false;
                if (c4 > 0)
                {
                    int c4_amount = player.inventory.GetAmount(498591726);
                    if (c4_amount < c4)
                    {
                        Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.denied.prefab", player.transform.position);
                        SendReply(player, messages["You lack the required {0} timed explosives"], c4);
                        fail = true;
                    }
                }

                if (explosives > 0)
                {
                    int explosives_amount = player.inventory.GetAmount(1755466030);
                    if (explosives_amount < explosives)
                    {
                        Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.denied.prefab", player.transform.position);
                        SendReply(player, messages["You lack the required {0} explosives"], explosives);
                        fail = true;
                    }
                }

                if (flare)
                {
                    int flare_amount = player.inventory.GetAmount(97513422);
                    if (flare_amount < 1)
                    {
                        Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.denied.prefab", player.transform.position);
                        SendReply(player, messages["You lack the required flare"]);
                        fail = true;
                    }
                }

                if (fail)
                {
                    return;
                }
                else
                {
                    player.inventory.Take(null, 498591726, c4);
                    player.inventory.Take(null, 1755466030, explosives);
                    player.inventory.Take(null, 97513422, 1);
                }

                SendReply(player, messages["You will explode shortly.."]);

                activeItem.Remove(0f);
                activeItem.RemoveFromContainer();

                Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.updated.prefab", player.transform.position);

                timer.Once(2f, delegate()
                {
                    Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.lock.prefab", player.transform.position);
                });

                if (scream)
                {
                    timer.Once(3f, delegate()
                    {
                        Effect.server.Run("assets/bundled/prefabs/fx/player/beartrap_scream.prefab", player.transform.position);
                    });
                }

                timer.Once(4f, delegate()
                {
                    Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.lock.prefab", player.transform.position);
                });

                timer.Once(6f, delegate()
                {
                    Effect.server.Run("assets/bundled/prefabs/fx/firebomb.prefab", player.transform.position);
                    Effect.server.Run("assets/bundled/prefabs/fx/gas_explosion_small.prefab", player.transform.position);

                    Effect.server.Run("assets/prefabs/npc/patrol helicopter/effects/rocket_explosion.prefab", player.transform.position);
                    Effect.server.Run("assets/prefabs/npc/patrol helicopter/effects/rocket_explosion.prefab", player.transform.position);
                    Effect.server.Run("assets/prefabs/npc/patrol helicopter/effects/rocket_explosion.prefab", player.transform.position);
                });

                timer.Once(6.2f, delegate() {
                    Effect.server.Run("assets/prefabs/tools/c4/effects/c4_explosion.prefab", player.transform.position);

                    List<BaseCombatEntity> entities = new List<BaseCombatEntity>();
                    Vis.Entities<BaseCombatEntity>(player.transform.position, radius/3, entities);

                    foreach (BaseCombatEntity e in entities)
                    {
                        e.Hurt(damage, global::Rust.DamageType.Explosion, player, true);
                    }

                    List<BaseCombatEntity> entities2 = new List<BaseCombatEntity>();
                    Vis.Entities<BaseCombatEntity>(player.transform.position, radius/2, entities2);

                    foreach (BaseCombatEntity e in entities2)
                    {
                        if (entities.Contains(e))
                        {
                            continue;
                        }
                        e.Hurt(damage/2, global::Rust.DamageType.Explosion, player, true);
                    }

                    List<BaseCombatEntity> entities3 = new List<BaseCombatEntity>();
                    Vis.Entities<BaseCombatEntity>(player.transform.position, radius, entities3);

                    foreach (BaseCombatEntity e in entities3)
                    {
                        if (entities.Contains(e) || entities2.Contains(e))
                        {
                            continue;
                        }

                        e.Hurt(damage/4, global::Rust.DamageType.Explosion, player, true);
                    }

                    if (player.net.connection.authLevel == 0)
                    {
                        player.Die();
                    }
                });

                timer.Once(6.4f, delegate()
                {
                    Effect.server.Run("assets/prefabs/tools/c4/effects/c4_explosion.prefab", player.transform.position);
                });
            }
        }
    }
}


// --- End of file: SuicideBomber.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/QuestSystem.cs ---
// --- Original Local Path: QuestSystem.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Plugins.SignArtistClasses;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using UnityEngine;
using Oxide.Core.Plugins;
using Color = UnityEngine.Color;
using System.Globalization;
using Oxide.Game.Rust.Cui;
using ProtoBuf;
using ConVar;
using Oxide.Core.Libraries;
using VLB;

namespace Oxide.Plugins
{
    [Info("QuestSystem", "http://topplugin.ru/ DezLife - НУ ты и лошара", "2.0.7")]
    public class QuestSystem : RustPlugin
    {
        public static QuestSystem instance;
        [PluginReference] Plugin IQChat, RustMap;

        #region eNums
        private enum QuestType
        {
            убить,
            добыть,
            скрафтить,
            найти,
            улучшить
        }

        #endregion

        #region Classes

        private class Quest
        {
            internal class Prize
            {
                [JsonProperty("Это кастом предмет ? (Если это обычный предмет ставим false)")]
                public bool CustomItem;
                [JsonProperty("Отображаемое имя (Для кастом)")]
                public string DisplayName;
                [JsonProperty("Skin id (Для кастом но можно и для обычного предмета чтоб дать ему скин)")]
                public ulong Skin;
                [JsonProperty("Shortname выдаваемого предмета")]
                public string Shortname;
                [JsonProperty("количество")]
                public int Amount;
                [JsonProperty("Ссылка на картинку (Если используете команду для выдачи то обязательно!)")]
                public string ExternalURL;
                [JsonProperty("Команда")]
                public string Command;
            }

            [JsonProperty("Названия квеста")]
            public string DisplayName;
            [JsonProperty("Описания")]
            public string Description;
            [JsonProperty("Тип квеста (0 - убить, 1 - добыть, 2 - скрафтить, 3 - найти, 4 - улучшить)")]
            public QuestType QuestType;
            [JsonProperty("То чего добыть (На русском)")]
            public string NiceTarget;
            [JsonProperty("В зависимости от квеста. Если убить человека то player. Если добыть дерева то wood; Если это улучшения то 1 - дерево, 2 - камень и тд")]
            public string Target;
            [JsonProperty("Количевство")]
            public int Amount;




            [JsonProperty("Настройка награды")]
            public List<Prize> PrizeList = new List<Prize>();
            public List<ulong> FinishedPlayers = new List<ulong>();
        }

        private class PlayerQuest
        {
            public Quest parentQuest;

            public ulong UserID;

            public bool Finished;
            public int Count;

            public void AddCount(int amount = 1)
            {
                Count += amount;
                if (parentQuest.Amount <= Count)
                {

                    BasePlayer player = BasePlayer.FindByID(UserID);
                    if (player != null && player.IsConnected)
                    {
                        if (config.SoundEff)
                            instance.RunEffect(player, config.SoundEffPath);
                        instance.SendChat(instance.lang.GetMessage("QUEST", instance, player.UserIDString), String.Format(instance.lang.GetMessage("QUEST_Finished", instance, player.UserIDString), parentQuest.DisplayName), player);
                    }

                    Finished = true;
                }
            }

            public int LeftAmount() => parentQuest.Amount - Count;
        }

        #endregion

        #region Lang

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["QUEST_ACTIVE"] = "<size=16>Your active tasks:</ size>",
                ["QUEST"] = "<size=16>Tasks:</size>",
                ["QUEST_ACTIVE_comp"] = "You <color=#4286f4>are absent</color> active tasks, take them to the city!",
                ["QUEST_ACTIVE_PROGRESS"] = "You can <color=#4286f4>to complete</color> the task!",
                ["QUEST_ACTIVE_PROGRESS_GO"] = "Left: {0} {1} {2}\n",
                ["QUEST_ACTIVE_LIMIT"] = "You have too much <color=#4286f4>not finished</color> tasks!",
                ["QUEST_took_tasks"] = "You already <color=#4286f4>have taken</color> this task!",
                ["QUEST_completed_tasks"] = "You already <color=#4286f4>performed</color> this task!",
                ["QUEST_completed_took"] = "You <color=#4286f4>successfully</color> took the task {0}",
                ["QUEST_tasks_completed"] = "Thanks hold your <color=#4286f4>reward</color>!",
                ["QUEST_no_place"] = "Hey wait you everything <color=#4286f4>you will not carry away</color>, make room!",
                ["QUEST_did_not_cope"] = "Sorry you <color=#4286f4>did not cope</color> with the task!\n" +
                 $"Anyway, you can try again!",
                ["QUEST_back"] = "FORWARD",
                ["QUEST_next"] = "BACK",
                ["QUEST_prize"] = "REWARD FOR PERFORMANCE OF THE TASK",
                ["QUEST_done"] = "DONE",
                ["QUEST_take"] = "TAKE",
                ["QUEST_turn"] = "FOR RENT",
                ["QUEST_REFUSE"] = "REFUSE",
                ["QUEST_Finished"] = "You have completed the task: <color=#4286f4>{0}</color>",

            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["QUEST_ACTIVE"] = "<size=16>Ваши активные задачи:</size>",
                ["QUEST"] = "<size=16>Задания:</size>",
                ["QUEST_ACTIVE_comp"] = "У вас <color=#4286f4>отсутствуют</color> активные задачи, возьмите их в городе!",
                ["QUEST_ACTIVE_PROGRESS"] = "Вы можете <color=#4286f4>завершить</color> задачу!",
                ["QUEST_ACTIVE_PROGRESS_GO"] = "Осталось: {0} {1} {2}\n",
                ["QUEST_ACTIVE_LIMIT"] = "У тебя слишком много <color=#4286f4>не законченных</color> заданий!",
                ["QUEST_took_tasks"] = "Вы уже <color=#4286f4>взяли</color> это задание!",
                ["QUEST_completed_tasks"] = "Вы уже <color=#4286f4>выполняли</color> это задание!",
                ["QUEST_completed_took"] = "Вы <color=#4286f4>успешно</color> взяли задание {0}",
                ["QUEST_tasks_completed"] = "Спасибо, держи свою <color=#4286f4>награду</color>!",
                ["QUEST_no_place"] = "Эй, погоди, ты всё <color=#4286f4>не унесёшь</color>, освободи место!",
                ["QUEST_did_not_cope"] = "Жаль что ты <color=#4286f4>не справился</color> с заданием!\n" +
                 $"В любом случае, ты можешь попробовать ещё раз!",
                ["QUEST_back"] = "ВПЕРЕД",
                ["QUEST_next"] = "НАЗАД",
                ["QUEST_prize"] = "НАГРАДА ЗА ВЫПОЛНЕНИЕ ЗАДАНИЯ",
                ["QUEST_done"] = "ГОТОВО",
                ["QUEST_take"] = "ВЗЯТЬ",
                ["QUEST_turn"] = "СДАТЬ",
                ["QUEST_REFUSE"] = "ОТКАЗАТЬСЯ",
                ["QUEST_Finished"] = "Вы закончили задание: <color=#4286f4>{0}</color>",

            }, this, "ru");
        }

        #endregion

        #region Configuration

        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Можно ли повторно брать квесты ?")]
            public bool QuestGo;
            [JsonProperty("Картинка для доски заданий (Желательный размер 256 на 128)")]
            public string ImageURL;
            [JsonProperty("Максимум квестов которых игрок сможет взять за раз")]
            public int MaxQuestAmount;
            [JsonProperty("Оповестить игрока звуковым оповещением о том что он выполнил квест?")]
            public bool SoundEff;
            [JsonProperty("Эфект для проигрования")]
            public string SoundEffPath;
            [JsonProperty("Делать маркер на карте j?")]
            public bool MapMarkers;
            [JsonProperty("Сбрасывать прогрес квестов у игроков во время вайпа:?")]
            public bool WipeData;
            [JsonProperty("Включить прогресс бар для игроков ?")]
            public bool ProgressBar;
            [JsonProperty("SteamWebApiKey (Получить можно тут https://steamcommunity.com/dev/apikey)")]
            public string SteamWebApiKey;


            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    QuestGo = true,
                    ImageURL = "https://i.imgur.com/Zd10HwE.png",
                    MaxQuestAmount = 3,
                    SoundEff = true,
                    SoundEffPath = "assets/prefabs/locks/keypad/effects/lock.code.unlock.prefab",
                    MapMarkers = false,
                    WipeData = true,
                    ProgressBar = true,
                    SteamWebApiKey = ""


                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #153" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Variables

        [PluginReference] private Plugin ImageLibrary;
        private BaseEntity Sign = null;

        private List<Quest> QuestList = new List<Quest>
        {
            {
                new Quest
                {
                    DisplayName = "Тупая железяка!!",
                    Description = "Как же меня достал этот Танк,я не могу ходить в космодром!\nУничтожь танк и приходи за наградой",

                    QuestType = QuestType.убить,
                    NiceTarget = "танк",
                    Target = "bradleyapc",
                    Amount = 1,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "rifle.l96",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "weapon.mod.small.scope",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "jackhammer",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/9OJhuKj.png",
                            Command = "emerald.give %STEAMID% Рубин 15",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Нужно срочно отстроить дом!",
                    Description = "Нам нужно где то складывать свои ресурсы!\n Добудь 1000 камня и возвращайся за наградой",

                    QuestType = QuestType.добыть,
                    NiceTarget = "камня",
                    Target = "stones",
                    Amount = 1000,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = true,
                            DisplayName = "Радиактивная сера",
                            Skin = 1681986132,
                            Shortname = "glue",
                            Amount = 10,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "supply.signal",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "door.hinged.toptier",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/9OJhuKj.png",
                            Command = "emerald.give %STEAMID% Рубин 25",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Хммм... Нужно сделать гараж для мини-коптера!",
                    Description = "Нужно побольше места для коптеров\nСкрафти 1 гаражных дверей",

                    QuestType = QuestType.скрафтить,
                    NiceTarget = "гаражных дверей",
                    Target = "wall.frame.garagedoor",
                    Amount = 1,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/PoeTa16.png",
                            Command = "give_minicopter %STEAMID%",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "floor.ladder.hatch",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Shortname = "keycard_blue",
                            Amount = 2,

                            ExternalURL = "",
                            Command = "",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Мне нужно больше изучений!",
                    Description = "Мне нужно изучить множество вещей,но у меня не хватает скрапа\nНайди 100 скрапа и приходи за наградой!",

                    QuestType = QuestType.найти,
                    NiceTarget = "скрап(-а)",
                    Target = "scrap",
                    Amount = 100,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "smg.thompson",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "ammo.pistol.fire",
                            Amount = 64,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/9OJhuKj.png",
                            Command = "emerald.give %STEAMID% Рубин 15",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Нужно укрепить свою строения в камень!",
                    Description = "Улучши 15 разных построек в камень",

                    QuestType = QuestType.улучшить,
                    NiceTarget = "раз в камень",
                    Target = "2",
                    Amount = 3,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "gates.external.high.stone",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "bed",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "furnace.large",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Мой дом, моя крепость",
                    Description = "Нужно лучше защитить свою базу\nСкрафти 10 заборов",

                    QuestType = QuestType.скрафтить,
                    NiceTarget = "забор(-ов)",
                    Target = "wall.external.high.stone",
                    Amount = 10,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "wall.window.glass.reinforced",
                            Amount = 3,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "metal.fragments",
                            Amount = 5000,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/JnPNvJi.png",
                            Command = "givetool %STEAMID% pickaxe",
                        },
                    }
                }
            },
            {
                new Quest
                {
                    DisplayName = "Мои любимые часы",
                    Description = "Мои любимые часы барахлят,опять эти шестеренки..\nНайди 40 шестеренок и приходи за наградой!",

                    QuestType = QuestType.найти,
                    NiceTarget = "шестеренка(-ок)",
                    Target = "gears",
                    Amount = 40,

                    PrizeList = new List<Quest.Prize>
                    {
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "autoturret",
                            Amount = 1,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "supply.signal",
                            Amount = 2,

                            ExternalURL = "",
                            Command = "",
                        },
                        new Quest.Prize
                        {
                            CustomItem = false,
                            DisplayName = "",
                            Skin = 0,
                            Shortname = "",
                            Amount = 1,

                            ExternalURL = "https://i.imgur.com/9OJhuKj.png",
                            Command = "emerald.give %STEAMID% Рубин 15",
                        },
                    }
                }
            },
        };
        private Dictionary<ulong, List<PlayerQuest>> PlayerQuests = new Dictionary<ulong, List<PlayerQuest>>();
        private Dictionary<string, List<ulong>> PlayerQuestsFinish = new Dictionary<string, List<ulong>>();

        #endregion
        
        
        #region Метка на g карте 
        private void CreateMarker(Vector3 position, float refreshRate, string name, string displayName,
           float radius = 0.10f, string colorMarker = "ff60df", string colorOutline = "00FFFFFF")
        {
            var marker = new GameObject().AddComponent<CustomMapMarker>();
            marker.name = name;
            marker.displayName = displayName;
            marker.radius = radius;
            marker.position = position;
            marker.refreshRate = refreshRate;
            ColorUtility.TryParseHtmlString($"#{colorMarker}", out marker.color1);
            ColorUtility.TryParseHtmlString($"#{colorOutline}", out marker.color2);
        }

        private void RemoveMarkers()
        {
            foreach (var marker in UnityEngine.Object.FindObjectsOfType<CustomMapMarker>())
            {
                UnityEngine.Object.Destroy(marker);
            }
        }

        private const string genericPrefab = "assets/prefabs/tools/map/genericradiusmarker.prefab";
        private const string vendingPrefab = "assets/prefabs/deployable/vendingmachine/vending_mapmarker.prefab";

        #region Scripts

        private class CustomMapMarker : MonoBehaviour
        {
            private VendingMachineMapMarker vending;
            private MapMarkerGenericRadius generic;
            public BaseEntity parent;
            private bool asChild;

            public float radius;
            public Color color1;
            public Color color2;
            public string displayName;
            public float refreshRate;
            public Vector3 position;
            public bool placedByPlayer;

            private void Start()
            {
                transform.position = position;
                asChild = parent != null;
                CreateMarkers();
            }

            private void CreateMarkers()
            {
                vending = GameManager.server.CreateEntity(vendingPrefab, position)
                    .GetComponent<VendingMachineMapMarker>();
                vending.markerShopName = displayName;
                vending.enableSaving = false;
                vending.Spawn();

                generic = GameManager.server.CreateEntity(genericPrefab).GetComponent<MapMarkerGenericRadius>();
                generic.color1 = color1;
                generic.color2 = color2;
                generic.radius = radius;
                generic.alpha = 1f;
                generic.enableSaving = false;
                generic.SetParent(vending);
                generic.Spawn();

                UpdateMarkers();

                if (refreshRate > 0f)
                {
                    if (asChild)
                    {
                        InvokeRepeating(nameof(UpdatePosition), refreshRate, refreshRate);
                    }
                    else
                    {
                        InvokeRepeating(nameof(UpdateMarkers), refreshRate, refreshRate);
                    }
                }
            }

            private void UpdatePosition()
            {
                if (asChild == true)
                {
                    if (parent.IsValid() == false)
                    {
                        Destroy(this);
                        return;
                    }
                    else
                    {
                        var pos = parent.transform.position;
                        transform.position = pos;
                        vending.transform.position = pos;
                    }
                }

                UpdateMarkers();
            }

            private void UpdateMarkers()
            {
                vending.SendNetworkUpdate();
                generic.SendUpdate();
            }

            private void DestroyMakers()
            {
                if (vending.IsValid())
                {
                    vending.Kill();
                }

                if (generic.IsValid())
                {
                    generic.Kill();
                }


            }

            private void OnDestroy()
            {
                DestroyMakers();
            }
        }

        #endregion

        #endregion

        #region Initialization

        private void OnServerInitialized()
        {
            instance = this;
            LoadData("Quest", ref QuestList, false);
            LoadData("Players", ref PlayerQuests, true);


            for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
            {
                OnPlayerInit(BasePlayer.activePlayerList[i]);
            }
            if (!ImageLibrary)
            {
                PrintError($"ERROR! Plugin ImageLibrary not found!");
                return;
            }

            if (PlayerQuestsFinish.Count == 0 && !config.QuestGo)
            {
                for(int i = 0; i < QuestList.Count(); i++)
                {
                    PlayerQuestsFinish.Add(QuestList[i].DisplayName, new List<ulong>());
                } 
            }
            LoadData("PlayersFinish", ref PlayerQuestsFinish, true);
            for(int i = 0; i < QuestList.Count; i++)
            {
                for(int u = 0; u < QuestList[i].PrizeList.Count; u++)
                {
                    ImageLibrary.Call("AddImage", QuestList[i].PrizeList[u].ExternalURL, QuestList[i].PrizeList[u].ExternalURL);
                }      
            }

            Unsubscribe("OnPlayerInput");
            if (!TryPlaceSign())
            {
                PrintError($"ERROR! Plugin could not place sign!");
                return;
            }
        }


        #endregion

        #region Functions

        private bool TryPlaceSign()
        {
            var monument = UnityEngine.Object.FindObjectsOfType<MonumentInfo>().FirstOrDefault(p => p.name.Contains("compound"));

            if (monument == null)
            {
                return false;
            }

            timer.Once(1, () =>
            {
                Vector3 resultVector = monument.transform.position;

                Sign = GameManager.server.CreateEntity("assets/prefabs/deployable/signs/sign.post.town.roof.prefab", monument.transform.position + monument.transform.rotation * new Vector3(-5.4f, 0, -0.5f), monument.transform.rotation);
                Sign.SetFlag(BaseEntity.Flags.Locked, true);
                Sign.Spawn();
                if (config.MapMarkers)
                    CreateMarker(Sign.transform.position, 5, "ЗАДАНИЯ", "ЗАДАНИЯ");
                RustMap?.Call("AddTemporaryMarker", "https://i.imgur.com/UtXBFFQ.png", "ЗАДАНИЯ", Sign.transform.position);
                ServerMgr.Instance.StartCoroutine(DownloadImage(config.ImageURL, Sign as Signage));
                Subscribe("OnPlayerInput");
            });
            return true;
        }

        #endregion

        #region Hooks

        void OnNewSave(string filename)
        {
            if (config.WipeData)
            {
                PlayerQuests.Clear();
                PrintWarning("Обнаружен WIPE . Дата игроков сброшена");
            }
        }

        private void OnPlayerInput(BasePlayer player, InputState input)
        {
            if (input.WasJustPressed(BUTTON.USE) && Vector3.Distance(Sign.transform.position, player.transform.position) < 5)
            {
                UI_DrawInterface(player);
            }
        }

        private void Unload()
        {
            if (Sign != null && !Sign.IsDestroyed)
                Sign.Kill();
            LoadData("Quest", ref QuestList, false);
            SaveData("Players", PlayerQuests, false);
            SaveData("PlayersFinish", PlayerQuestsFinish, false);
            if (config.MapMarkers)
                RemoveMarkers();
        }

        private void OnPlayerInit(BasePlayer player)
        {
            if (!PlayerQuests.ContainsKey(player.userID))
                PlayerQuests.Add(player.userID, new List<PlayerQuest>());
        }


        #region Type Upgrade
        private void CanAffordUpgrade(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)
        {
            List<PlayerQuest> playerQuests = null;
            if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                for(int i = 0; i < playerQuests.Count; i++)
                {
                    if (playerQuests[i].parentQuest.QuestType == QuestType.улучшить && playerQuests[i].Finished == false)
                    {
                        if ((int)grade == Convert.ToInt16(playerQuests[i].parentQuest.Target))
                        {
                            playerQuests[i].AddCount();
                        }
                    }
                }  
            }
        }
        #endregion

        #region Type death
        private Dictionary<uint, Dictionary<ulong, int>> HeliAttackers = new Dictionary<uint, Dictionary<ulong, int>>();

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            try
            {
                if (entity == null || info == null) return;

                BasePlayer player = null;

                if (info.InitiatorPlayer != null)
                    player = info.InitiatorPlayer;
                else if (entity.GetComponent<BaseHelicopter>() != null)
                    player = BasePlayer.FindByID(GetLastAttacker(entity.net.ID));

                List<PlayerQuest> playerQuests = null;

                if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
                {
                    for (int i = 0; i < playerQuests.Count; i++)
                    {
                        if (playerQuests[i].parentQuest.QuestType == QuestType.убить && playerQuests[i].Finished == false)
                        {
                            if (entity.PrefabName.Contains(playerQuests[i].parentQuest.Target))
                            {
                                playerQuests[i].AddCount();
                            }
                        }
                    }     
                }
            }
            catch (Exception ex)
            {

            }
        }
        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            if (victim.GetComponent<BaseHelicopter>() != null && info?.Initiator?.ToPlayer() != null)
            {
                var heli = victim.GetComponent<BaseHelicopter>();
                var player = info.Initiator.ToPlayer();
                NextTick(() =>
                {
                    if (heli == null) return;
                    if (!HeliAttackers.ContainsKey(heli.net.ID))
                        HeliAttackers.Add(heli.net.ID, new Dictionary<ulong, int>());
                    if (!HeliAttackers[heli.net.ID].ContainsKey(player.userID))
                        HeliAttackers[heli.net.ID].Add(player.userID, 0);
                    HeliAttackers[heli.net.ID][player.userID]++;
                });
            }
        }

        private ulong GetLastAttacker(uint id)
        {
            int hits = 0;
            ulong majorityPlayer = 0U;
            if (HeliAttackers.ContainsKey(id))
            {
                foreach (var score in HeliAttackers[id])
                {
                    if (score.Value > hits)
                        majorityPlayer = score.Key;
                }
            }
            return majorityPlayer;
        }

        #endregion

        #region Type loot
        private void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (entity.OwnerID == 1337228 || entity.OwnerID >= 7656000000 || entity.GetComponent<StorageContainer>() == null)
                return;


            List<PlayerQuest> playerQuests = null;
            if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                for (int i = 0; i < playerQuests.Count; i++)
                {
                    if (playerQuests[i].parentQuest.QuestType == QuestType.найти && playerQuests[i].Finished == false)
                    {
                        for (int u = 0; u < entity.GetComponent<StorageContainer>().inventory.itemList.Count(); u++)
                        {
                            if (entity.GetComponent<StorageContainer>().inventory.itemList[u].info.shortname.Contains(playerQuests[i].parentQuest.Target))
                                playerQuests[i].AddCount(entity.GetComponent<StorageContainer>().inventory.itemList[u].amount);
                        }
                    }
                }   
            }
            entity.OwnerID = 1337228;
        }
        #endregion

        #region Type Gather

        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player;
            if (entity is BasePlayer)
            {
                player = entity as BasePlayer;
                List<PlayerQuest> playerQuests = null;
                if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
                {
                    for (int i = 0; i < playerQuests.Count; i++)
                    {
                        if (playerQuests[i].parentQuest.QuestType == QuestType.добыть && playerQuests[i].Finished == false)
                        {
                            if (item.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                            {
                                playerQuests[i].AddCount(item.amount);
                            }
                        }
                    }
                }
            }
        }
        void OnDispenserBonus(ResourceDispenser dispenser, BaseEntity entity, Item item) => OnDispenserGather(dispenser, entity, item);

        void OnCollectiblePickup(Item item, BasePlayer player)
        {

            List<PlayerQuest> playerQuests = null;
            if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                for (int i = 0; i < playerQuests.Count; i++)
                {
                    if (playerQuests[i].parentQuest.QuestType == QuestType.добыть && playerQuests[i].Finished == false)
                    {
                        if (item.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                        {
                            playerQuests[i].AddCount(item.amount);
                        }
                    }
                }
            }
        }
        #endregion

        #region Type craft
        void OnItemCraftFinished(ItemCraftTask task, Item item)
        {
            List<PlayerQuest> playerQuests = null;
            BasePlayer player = task.owner;

            if (player != null && PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                for (int i = 0; i < playerQuests.Count; i++)
                {
                    if (playerQuests[i].parentQuest.QuestType == QuestType.скрафтить && playerQuests[i].Finished == false)
                    {
                        if (task.blueprint.targetItem.shortname.Contains(playerQuests[i].parentQuest.Target))
                        {
                            playerQuests[i].AddCount(item.amount);
                        }
                    }
                }
            }
        }

        #endregion

        #endregion

        #region Commands

        [ChatCommand("quest")]
        private void CmdChatQuest(BasePlayer player, string command, string[] args)
        {
            List<PlayerQuest> playerQuests = null;
            if (PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                if (args.Length > 0)
                {
                    switch (args[0].ToLower())
                    {
                        case "list":
                            {
                                if (playerQuests.Count == 0)
                                {
                                    SendChat(lang.GetMessage("QUEST_ACTIVE", this, player.UserIDString), lang.GetMessage("QUEST_ACTIVE_comp", this, player.UserIDString), player);
                                    return;
                                }
                                else
                                {
                                    string message = "";
                                    for(int i = 0; i < playerQuests.Count; i++)
                                    {
                                        message += $"\n{i + 1}. {playerQuests[i].parentQuest.DisplayName}\n\n" +
                                                   $"{playerQuests[i].parentQuest.Description}\n";

                                        if (playerQuests[i].Finished)
                                        {
                                            message += lang.GetMessage("QUEST_ACTIVE_PROGRESS", this, player.UserIDString);
                                        }
                                        else
                                        {
                                            message += String.Format(lang.GetMessage("QUEST_ACTIVE_PROGRESS_GO", this, player.UserIDString), playerQuests[i].parentQuest.QuestType.ToString(), playerQuests[i].LeftAmount(), playerQuests[i].parentQuest.NiceTarget);
                                        }
                                    }      
                                    SendChat(lang.GetMessage("QUEST_ACTIVE", this, player.UserIDString), message, player);
                                    break;
                                }
                            }
                    }
                }
            }
        }

        [ConsoleCommand("UI_Handler")]
        private void CmdConsoleHandler(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            List<PlayerQuest> playerQuests = null;

            if (player != null && args.HasArgs(1) && PlayerQuests.TryGetValue(player.userID, out playerQuests))
            {
                switch (args.Args[0])
                {
                    case "get":
                        {
                            int questIndex;
                            if (args.HasArgs(2) && int.TryParse(args.Args[1], out questIndex))
                            {
                                var currentQuest = QuestList.ElementAtOrDefault(questIndex);
                                if (currentQuest != null)
                                {
                                    if (playerQuests.Count >= config.MaxQuestAmount)
                                    {
                                        SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_ACTIVE_LIMIT", this, player.UserIDString), player);
                                        return;
                                    }
                                    if (playerQuests.Any(p => p.parentQuest.DisplayName == currentQuest.DisplayName))
                                    {
                                        SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_took_tasks", this, player.UserIDString), player);
                                        return;
                                    }

                                    if (!config.QuestGo && PlayerQuestsFinish[currentQuest.DisplayName].Contains(player.userID))
                                    {
                                        SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_completed_tasks", this, player.UserIDString), player);
                                        return;
                                    }

                                    playerQuests.Add(new PlayerQuest() { UserID = player.userID, parentQuest = currentQuest });
                                    SendChat(lang.GetMessage("QUEST", this, player.UserIDString), String.Format(lang.GetMessage("QUEST_completed_took", this, player.UserIDString), currentQuest.DisplayName), player);
                                    UI_DrawInterface(player, 0, questIndex.ToString());
                                }
                            }

                            break;
                        }
                    case "page":
                        {
                            int pageIndex;
                            if (int.TryParse(args.Args[1], out pageIndex))
                            {
                                UI_DrawInterface(player, pageIndex);
                            }

                            break;
                        }
                    case "finish":
                        {
                            int questIndex;
                            if (args.HasArgs(2) && int.TryParse(args.Args[1], out questIndex))
                            {
                                var globalQuest = QuestList.ElementAtOrDefault(questIndex);
                                if (globalQuest != null)
                                {
                                    var currentQuest = playerQuests.FirstOrDefault(p => p.parentQuest.DisplayName == globalQuest.DisplayName);
                                    if (currentQuest == null)
                                        return;

                                    if (currentQuest.Finished)
                                    {
                                        SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_tasks_completed", this, player.UserIDString), player);

                                        if (24 - player.inventory.containerMain.itemList.Count < currentQuest.parentQuest.PrizeList.Count)
                                        {
                                            SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_no_place", this, player.UserIDString), player);
                                            return;
                                        }
                                        else
                                        {
                                            currentQuest.Finished = false;
                                            for(int i = 0; i < currentQuest.parentQuest.PrizeList.Count; i++)
                                            {
                                                var check = currentQuest.parentQuest.PrizeList[i];
                                                if (check.Shortname != "")
                                                {
                                                    if (check.CustomItem)
                                                    {
                                                        Item newItem = ItemManager.CreateByPartialName(check.Shortname, check.Amount, check.Skin);
                                                        newItem.name = check.DisplayName;
                                                        newItem.MoveToContainer(player.inventory.containerMain);
                                                    }
                                                    else
                                                    {
                                                        Item newItem = ItemManager.CreateByPartialName(check.Shortname, check.Amount);
                                                        if (check.Skin != 0)
                                                            newItem.skin = check.Skin;
                                                        newItem.MoveToContainer(player.inventory.containerMain);
                                                    }

                                                }
                                                if (check.Command != "")
                                                {
                                                    Server.Command(check.Command.Replace("%STEAMID%", player.UserIDString));
                                                }
                                            }
                                        }
                                        if (!config.QuestGo)
                                        {
                                            PlayerQuestsFinish[globalQuest.DisplayName].Add(player.userID);
                                        }

                                        playerQuests.Remove(currentQuest);
                                    }
                                    else
                                    {
                                        SendChat(lang.GetMessage("QUEST", this, player.UserIDString), lang.GetMessage("QUEST_did_not_cope", this, player.UserIDString), player);


                                        playerQuests.Remove(currentQuest);
                                    }
                                    UI_DrawInterface(player, 0, questIndex.ToString());
                                }
                                else
                                {
                                    SendChat(lang.GetMessage("QUEST", this, player.UserIDString), $"Вы <color=#4286f4>не брали</color> этого задания!", player);
                                }
                            }

                            break;
                        }
                }
            }
        }

        #endregion

        #region Interface

        private const string Layer = "UI_Layer";
        private void UI_DrawInterface(BasePlayer player, int page = 0, string questUpdate = "")
        {
            List<PlayerQuest> playerQuests;
            if (!PlayerQuests.TryGetValue(player.userID, out playerQuests))
                return;

            CuiElementContainer container = new CuiElementContainer();

            if (questUpdate == "")
            {
                CuiHelper.DestroyUi(player, Layer);
                container.Add(new CuiPanel
                {
                    CursorEnabled = true,
                    RectTransform = { AnchorMin = "0.09687495 0.093518253", AnchorMax = "0.903125 0.9064815", OffsetMax = "0 0" },
                    Image = { Color = "0 0 0 0" }
                }, "Overlay", Layer);

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "-1 -1", AnchorMax = "2 2", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0.9", Close = Layer },
                    Text = { Text = "" }
                }, Layer);

                if (page != 0)
                {
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 -0.08", AnchorMax = "0 -0.08", OffsetMax = "100 25" },
                        Button = { Color = HexToRustFormat("8686862A"), Command = $"UI_Handler page {page - 1}" },
                        Text = { Text = lang.GetMessage("QUEST_next", this, player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 16 }
                    }, Layer);
                }

                if (QuestList.Count > 6)
                {
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "1 -0.08", AnchorMax = "1 -0.08", OffsetMin = "-100 0", OffsetMax = "0 25" },
                        Button = { Color = HexToRustFormat("8686862A"), Command = $"UI_Handler page {page + 1}" },
                        Text = { Text = lang.GetMessage("QUEST_back", this, player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 16 }
                    }, Layer);
                }

                var firstPosition = 0.01769468 - (double)page * 0.49;
                for (int i = 0; i < QuestList.Count(); i++)
                {
                    var check = QuestList[i];
                    var currentPlayerQuest = playerQuests.FirstOrDefault(p => p.parentQuest.DisplayName == check.DisplayName);

                    string questLayer = Layer + $".{i}";

                    container.Add(new CuiElement
                    {
                        Parent = Layer,
                        Name = questLayer,
                        Components =
                        {
                            new CuiImageComponent { Color = HexToRustFormat("#8686862A"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = $"{firstPosition + Math.Floor((double) i / 3) * 0.49} {0.6743472 - i * 0.34 + Math.Floor((double) i / 3) * 3 * 0.34}",
                                AnchorMax = $"{firstPosition + 0.4870099 + Math.Floor((double) i / 3) * 0.49} {1 - i * 0.34 + Math.Floor((double) i / 3) * 3 * 0.34}",
                                OffsetMax = "0 0"
                            }
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.01805133 0.8251275", AnchorMax = "0.7714755 1", OffsetMax = "0 0" },
                        Text = { Text = check.DisplayName, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 18, Color = HexToRustFormat("#E5DCD5FF") }
                    }, questLayer);

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.01009262 0.6047886", AnchorMax = "1 0.8251275", OffsetMax = "0 0" },
                        Text = { Text = check.Description, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 14, Color = HexToRustFormat("#9E9791FF") }
                    }, questLayer);

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.1870269 0.4172195", AnchorMax = "0.8129731 0.52784253", OffsetMax = "0 0" },
                        Text = { Text = lang.GetMessage("QUEST_prize", this, player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 15, Color = HexToRustFormat("#D0BC84FF") }
                    }, questLayer);

                    var currentList = check.PrizeList;
                    float minPosition = 0.53f - (float)currentList.Count / 2 * 0.12f - (float)(currentList.Count - 1) / 2 * 0.04f;

                    for (int o = 0; o < currentList.Count(); o++)
                    {
                        string prizeLayer = questLayer + $".{o}";
                        var prize = currentList[o];
                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = $"{minPosition + o * 0.12f} 0.1291364", AnchorMax = $"{minPosition + (o + 1) * 0.12f} 0.4194313", OffsetMax = "0 0" },
                            Button = { Color = HexToRustFormat("#73737370") },
                            Text = { Text = "" }
                        }, questLayer, prizeLayer);

                        var trueImage = prize.Shortname == "" ? (string)ImageLibrary.Call("GetImage", prize.ExternalURL) : GetItemImage(prize.Shortname, prize.Skin);
                        container.Add(new CuiElement
                        {
                            Parent = prizeLayer,
                            Components =
                            {
                                new CuiRawImageComponent { Png = trueImage },
                                new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                            }
                        });

                        container.Add(new CuiLabel
                        {
                            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "-2 0", OffsetMin = "0 2" },
                            Text = { Text = $"x{prize.Amount}", Font = "robotocondensed-bold.ttf", Align = TextAnchor.LowerRight, FontSize = 16, Color = HexToRustFormat("#CDCDCDFF") }
                        }, prizeLayer);

                        minPosition += 0.01f;
                    }

                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.7812921 0.802927", AnchorMax = "0.9858913 0.966369", OffsetMax = "0 0" },
                        Button = { Color = "0 0 0 0" },
                        Text = { Text = "" }
                    }, questLayer, questLayer + ".BtnHolder");

                    string command = "";
                    string color = "";
                    string text = "";
                    if (config.ProgressBar)
                    {
                        if (currentPlayerQuest != null)
                        {
                            float y = (float)currentPlayerQuest.Count / currentPlayerQuest.parentQuest.Amount;

                            if (currentPlayerQuest.Count > currentPlayerQuest.parentQuest.Amount)
                            {
                                currentPlayerQuest.Count = currentPlayerQuest.parentQuest.Amount;
                            }
                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0.1865106 0.01372072", AnchorMax = "0.8046368 0.1116493", OffsetMax = "0 0" },
                                Button = { Color = HexToRustFormat("#FFFFFF3E") },
                                Text = { Text = "" }
                            }, questLayer, questLayer + "bar");


                            container.Add(new CuiElement
                            {
                                Parent = questLayer + "bar",
                                Components =
                        {
                             new CuiImageComponent { Color = HexToRustFormat("#A8E6008A"),Sprite = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                            new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = $"{y} 1", OffsetMin = "1 1", OffsetMax = "-2 -1"  },
                        }
                            });

                            container.Add(new CuiLabel
                            {
                                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "1 1", OffsetMax = "-2 -1" },
                                Text = { Text = $"{currentPlayerQuest.Count}" + "/" + $"{currentPlayerQuest.parentQuest.Amount}" + $" ({Math.Floor(y * 100).ToString()}%)", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FontSize = 10, Color = HexToRustFormat("#FFFFFFFF") }
                            }, questLayer + "bar");

                        }
                    }

                    if (currentPlayerQuest == null)
                    {
                        if (!config.QuestGo && PlayerQuestsFinish[check.DisplayName].Contains(player.userID))
                        {
                            text = lang.GetMessage("QUEST_done", this, player.UserIDString);
                            color = "#61a9a5";
                            command = $"UI_Handler get {i}";
                        }
                        else
                        {
                            text = lang.GetMessage("QUEST_take", this, player.UserIDString);
                            color = "#6d854bFF";
                            command = $"UI_Handler get {i}";
                        }
                    }
                    else if (currentPlayerQuest.Finished)
                    {

                        text = lang.GetMessage("QUEST_turn", this, player.UserIDString);
                        color = "#4B6785FF";
                        command = $"UI_Handler finish {QuestList.IndexOf(QuestList.FirstOrDefault(p => p.DisplayName == currentPlayerQuest.parentQuest.DisplayName))}";
                    }
                    else
                    {

                        text = lang.GetMessage("QUEST_REFUSE", this, player.UserIDString);
                        color = "#854B4BFF";
                        command = $"UI_Handler finish {QuestList.IndexOf(QuestList.FirstOrDefault(p => p.DisplayName == currentPlayerQuest.parentQuest.DisplayName))}";
                    }

                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Button = { Color = HexToRustFormat(color), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat", Command = command },
                        Text = { Text = text, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 16, Color = HexToRustFormat("#d9e1c6") }
                    }, questLayer + ".BtnHolder", questLayer + ".Btn");
                }
            }
            else
            {
                string questLayer = Layer + $".{questUpdate}";
                CuiHelper.DestroyUi(player, questLayer + ".Btn");
                CuiHelper.DestroyUi(player, questLayer + "bar");
               
                var updateQuest = QuestList.ElementAt(Convert.ToInt32(questUpdate));
                var currentPlayerQuest = playerQuests.FirstOrDefault(p => p.parentQuest.DisplayName == updateQuest.DisplayName);

                string command = "";
                string color = "";
                string text = "";
                if (config.ProgressBar)
                {
                    if (currentPlayerQuest != null)
                    {
                        float y = (float)currentPlayerQuest.Count / currentPlayerQuest.parentQuest.Amount;

                        if (currentPlayerQuest.Count > currentPlayerQuest.parentQuest.Amount)
                        {
                            currentPlayerQuest.Count = currentPlayerQuest.parentQuest.Amount;
                        }
                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = "0.1865106 0.01372072", AnchorMax = "0.8046368 0.1116493", OffsetMax = "0 0" },
                            Button = { Color = HexToRustFormat("#FFFFFF3E") },
                            Text = { Text = "" }
                        }, questLayer, questLayer + "bar");


                        container.Add(new CuiElement
                        {
                            Parent = questLayer + "bar",
                            Components =
                        {
                             new CuiImageComponent { Color = HexToRustFormat("#A8E6008A"),Sprite = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                            new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = $"{y} 1", OffsetMin = "1 1", OffsetMax = "-2 -1"  },
                        }
                        });

                        container.Add(new CuiLabel
                        {
                            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "1 1", OffsetMax = "-2 -1" },
                            Text = { Text = $"{currentPlayerQuest.Count}" + "/" + $"{currentPlayerQuest.parentQuest.Amount}" + $" ({Math.Floor(y * 100).ToString()}%)", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter, FontSize = 10, Color = HexToRustFormat("#FFFFFFFF") }
                        }, questLayer + "bar");

                    }
                }


                if (currentPlayerQuest == null)
                {   
                    if (!config.QuestGo && PlayerQuestsFinish[updateQuest.DisplayName].Contains(player.userID))
                    {
                        text = lang.GetMessage("QUEST_done", this, player.UserIDString);
                        color = "#61a9a5";
                        command = $"UI_Handler get {questUpdate}";
                    }
                    else
                    {
                        text = lang.GetMessage("QUEST_take", this, player.UserIDString);
                        color = "#6d854bFF";
                        command = $"UI_Handler get {questUpdate}";
                    }
                }
                else if (currentPlayerQuest.Finished)
                {
                    text = lang.GetMessage("QUEST_turn", this, player.UserIDString);
                    color = "#4B6785FF";
                    command = $"UI_Handler finish {QuestList.IndexOf(QuestList.FirstOrDefault(p => p.DisplayName == currentPlayerQuest.parentQuest.DisplayName))}";
                }
                else
                {
                    text = lang.GetMessage("QUEST_REFUSE", this, player.UserIDString);
                    color = "#854B4BFF";
                    command = $"UI_Handler finish {QuestList.IndexOf(QuestList.FirstOrDefault(p => p.DisplayName == currentPlayerQuest.parentQuest.DisplayName))}";
                }

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Button = { Color = HexToRustFormat(color), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat", Command = command, Close = questLayer + "bar" },
                    Text = { Text = text, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 16, Color = HexToRustFormat("#d9e1c6") }
                }, questLayer + ".BtnHolder", questLayer + ".Btn");
            }

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Helps   

        public void SendChat(string Descrip, string Message, BasePlayer player, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, Descrip);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        #endregion

        #region PlayerValidatorModule

        void RunEffect(BasePlayer player, string path)
        {
            Effect effect = new Effect();
            effect.Init(Effect.Type.Generic, player.transform.position, player.transform.forward, (Network.Connection)null);
            effect.pooledString = path; EffectNetwork.Send(effect, player.net.connection);
        }

        private bool IsEntityPlayer(BaseEntity entity, out BasePlayer result)
        {
            result = null;
            if (entity is BasePlayer)
            {
                BasePlayer player = entity as BasePlayer;
                if (player.IsNpc)
                {
                    return false;
                }
                if (player.GetComponent<BaseNPC>() != null)
                    return false;

                result = player;
                return true;
            }

            return false;
        }

        #endregion

        #region DataWorkerModule

        private void LoadData<T>(string name, ref T data, bool enableSaving)
        {
            string resultName = this.Name + $"/{name}";

            if (Interface.Oxide.DataFileSystem.ExistsDatafile(resultName))
            {
                data = Interface.Oxide.DataFileSystem.ReadObject<T>(resultName);
            }
            else
            {
                Interface.Oxide.DataFileSystem.WriteObject(resultName, data);
            }

            if (enableSaving)
            {
                SaveData(name, data, true);
            }
        }

        private void SaveData<T>(string name, T data, bool autoSave)
        {
            string resultName = this.Name + $"/{name}";

            Interface.Oxide.DataFileSystem.WriteObject(resultName, data);

            if (autoSave)
            {
                timer.Every(60, () => SaveData<T>(name, data, false));
            }
        }

        #endregion

        #region UIWorkerModule

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }

        #endregion

        #region CoroutinesModule

        private IEnumerator DownloadImage(string url, Signage sign)
        {
            using (WWW www = new WWW(url))
            {
                yield return www;

                if (www.error != null)
                {
                    PrintError("ERROR!!! Can't connect to host with image!");
                    yield break;
                }
                byte[] imageBytes;
                imageBytes = www.bytes;
                byte[] resizedImageBytes = imageBytes.ResizeImage(256, 128, 256, 128, false);

                if (sign.textureID > 0)
                {
                    FileStorage.server.Remove(sign.textureID, FileStorage.Type.png, sign.net.ID);
                }

                sign.textureID = FileStorage.server.Store(resizedImageBytes, FileStorage.Type.png, sign.net.ID);

                sign.SendNetworkUpdate();
            }
        }

        #endregion

        #region LoadSkins

        #region SteampoweredAPI 
        private class SteampoweredResult
        {
            public Response response;
            public class Response
            {
                [JsonProperty("result")]
                public int result;

                [JsonProperty("resultcount")]
                public int resultcount;

                [JsonProperty("publishedfiledetails")]
                public List<PublishedFiled> publishedfiledetails;
                public class PublishedFiled
                {
                    [JsonProperty("publishedfileid")]
                    public ulong publishedfileid;

                    [JsonProperty("result")]
                    public int result;

                    [JsonProperty("creator")]
                    public string creator;

                    [JsonProperty("creator_app_id")]
                    public int creator_app_id;

                    [JsonProperty("consumer_app_id")]
                    public int consumer_app_id;

                    [JsonProperty("filename")]
                    public string filename;

                    [JsonProperty("file_size")]
                    public int file_size;

                    [JsonProperty("preview_url")]
                    public string preview_url;

                    [JsonProperty("hcontent_preview")]
                    public string hcontent_preview;

                    [JsonProperty("title")]
                    public string title;

                    [JsonProperty("description")]
                    public string description;

                    [JsonProperty("time_created")]
                    public int time_created;

                    [JsonProperty("time_updated")]
                    public int time_updated;

                    [JsonProperty("visibility")]
                    public int visibility;

                    [JsonProperty("banned")]
                    public int banned;

                    [JsonProperty("ban_reason")]
                    public string ban_reason;

                    [JsonProperty("subscriptions")]
                    public int subscriptions;

                    [JsonProperty("favorited")]
                    public int favorited;

                    [JsonProperty("lifetime_subscriptions")]
                    public int lifetime_subscriptions;

                    [JsonProperty("lifetime_favorited")]
                    public int lifetime_favorited;

                    [JsonProperty("views")]
                    public int views;

                    [JsonProperty("tags")]
                    public List<Tag> tags;
                    public class Tag
                    {
                        [JsonProperty("tag")]
                        public string tag;
                    }
                }
            }
        }
        #endregion
        public string GetItemImage(string shortname, ulong skinID = 0)
        {
            if (skinID > 0)
            {
                if (ImageLibrary.Call<bool>("HasImage", shortname, skinID) == false && ImageLibrary.Call<Dictionary<string, object>>("GetSkinInfo", shortname, skinID) == null)
                {
                    if (config.SteamWebApiKey == null || config.SteamWebApiKey == string.Empty || config.SteamWebApiKey.Length != 32)
                    {
                        PrintError($"Steam Web API key not set! Check the configuration!");
                        return ImageLibrary.Call<string>("GetImage", shortname);
                    }
                    else
                    {
                        webrequest.Enqueue("https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/", $"key={config.SteamWebApiKey}&itemcount=1&publishedfileids%5B0%5D={skinID}", (code, response) =>
                        {
                            if (code != 200 || response == null)
                            {
                                PrintError($"Image failed to download! Code HTTP error: {code} - Image Name: {shortname} - Image skinID: {skinID} - Response: {response}");
                                return;
                            }

                            SteampoweredResult sr = JsonConvert.DeserializeObject<SteampoweredResult>(response);
                            if (sr == null || !(sr is SteampoweredResult) || sr.response.result == 0 || sr.response.resultcount == 0)
                            {
                                PrintError($"Image failed to download! Error: Parse JSON response - Image Name: {shortname} - Image skinID: {skinID} - Response: {response}");
                                return;
                            }

                            foreach (SteampoweredResult.Response.PublishedFiled publishedfiled in sr.response.publishedfiledetails)
                            {
                                ImageLibrary.Call("AddImage", publishedfiled.preview_url, shortname, skinID);
                            }

                        }, this, RequestMethod.POST);

                        return ImageLibrary.Call<string>("GetImage", "LOADING");
                    }
                }
            }

            return ImageLibrary.Call<string>("GetImage", shortname, skinID);
        }

        #endregion
    }


    namespace SignArtistClasses
    {
        /// <summary>
        /// Extension class with extension methods used by the <see cref="SignArtist"/> plugin.
        /// </summary>
        public static class Extensions
        {
            /// <summary>
            /// Resizes an image from the <see cref="byte"/> array to a new image with a specific width and height.
            /// </summary>
            /// <param name="bytes">Source image. </param>
            /// <param name="width">New image canvas width. </param>
            /// <param name="height">New image canvas height. </param>
            /// <param name="targetWidth">New image width. </param>
            /// <param name="targetHeight">New image height. </param>
            /// <param name="enforceJpeg"><see cref="bool"/> value, true to save the images as JPG, false for PNG. </param>
            public static byte[] ResizeImage(this byte[] bytes, int width, int height, int targetWidth, int targetHeight, bool enforceJpeg)
            {
                byte[] resizedImageBytes;

                using (MemoryStream originalBytesStream = new MemoryStream(), resizedBytesStream = new MemoryStream())
                {
                    // Write the downloaded image bytes array to the memorystream and create a new Bitmap from it.
                    originalBytesStream.Write(bytes, 0, bytes.Length);
                    Bitmap image = new Bitmap(originalBytesStream);

                    // Check if the width and height match, if they don't we will have to resize this image.
                    if (image.Width != width || image.Height != height)
                    {
                        // Create a new Bitmap with the target size.
                        Bitmap resizedImage = new Bitmap(width, height);

                        // Draw the original image onto the new image and resize it accordingly.
                        using (System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(resizedImage))
                        {
                            graphics.DrawImage(image, new Rectangle(0, 0, targetWidth, targetHeight));
                        }

                        // Save the bitmap to a MemoryStream as either Jpeg or Png.
                        if (enforceJpeg)
                        {
                            resizedImage.Save(resizedBytesStream, ImageFormat.Jpeg);
                        }
                        else
                        {
                            resizedImage.Save(resizedBytesStream, ImageFormat.Png);
                        }

                        // Grab the bytes array from the new image's MemoryStream and dispose of the resized image Bitmap.
                        resizedImageBytes = resizedBytesStream.ToArray();
                        resizedImage.Dispose();
                    }
                    else
                    {
                        // The image has the correct size so we can just return the original bytes without doing any resizing.
                        resizedImageBytes = bytes;
                    }

                    // Dispose of the original image Bitmap.
                    image.Dispose();
                }

                // Return the bytes array.
                return resizedImageBytes;
            }

            /// <summary>
            /// Converts a string to its escaped representation for the image placeholder text value.
            /// </summary>
            /// <param name="stringToEscape">The string to escape.</param>
            public static string EscapeForUrl(this string stringToEscape)
            {
                // Escape initial values.
                stringToEscape = Uri.EscapeDataString(stringToEscape);

                // Convert \r\n, \r and \n into linebreaks.
                stringToEscape = stringToEscape.Replace("%5Cr%5Cn", "%5Cn").Replace("%5Cr", "%5Cn").Replace("%5Cn", "%0A");

                // Return the converted message
                return stringToEscape;
            }
        }
    }
}

// --- End of file: QuestSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RestoreUponDeath.cs ---
// --- Original Local Path: RestoreUponDeath.cs ---

using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using System;

namespace Oxide.Plugins
{
    [Info("RestoreUponDeath", "k1lly0u", "0.1.4", ResourceId = 1859)]
    class RestoreUponDeath : RustPlugin
    {
        #region Fields
        RODData rodData;
        private DynamicConfigFile PlayerInvData;

        private Dictionary<ulong, List<SavedItem>> playerInv;
        #endregion

        #region Oxide Hooks 
        void Loaded() => PlayerInvData = Interface.Oxide.DataFileSystem.GetFile("restoreupondeath_data");
        void OnServerInitialized()
        {
            LoadVariables();
            LoadData();

            lang.RegisterMessages(new Dictionary<string, string>
                    {
                        {"addSyn", "/rod add <permission> <percentage> - Adds a new permission and percentage" },
                        {"remSyn",  "/rod remove <permission> - Remove a permission"},
                        {"addSuccess", "You have successfully added the permission {0} that has a loss percentage of {1}" },
                        {"invNum", "You must enter a valid percentage number" },
                        {"exists", "That permission already exists" },
                        {"remSuccess", "You have successfully remove the permission {0}" },
                        {"noExist", "The permission {0} does not exist" },
                        {"currentPerms", "Current permissions;" },
                        {"noPerms", "There are currently no permissions set up" },
                        {"listSyn", "/rod list - Lists all permissions and assigned loss percentage" }

                    }, this);

            foreach (var perm in rodData.Permissions)
                permission.RegisterPermission(perm.Key, this);

            playerInv = new Dictionary<ulong, List<SavedItem>>();
            foreach (var entry in rodData.Inventorys)
                playerInv.Add(entry.Key, entry.Value);
            rodData.Inventorys.Clear();

            timer.Once(900, () => SaveLoop());
        }    
        void OnPlayerRespawned(BasePlayer player) => RestoreInventory(player); 
        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (entity is BaseCorpse)
            {
                var corpse = entity.GetComponent<LootableCorpse>();
                if (corpse != null)
                {
                    if (corpse.playerSteamID != 0)
                    {
                        if (GetPercentage(corpse.playerSteamID) == 100) return;
                        SaveInventory(corpse.playerSteamID);
                        var loot = corpse.GetComponent<LootableCorpse>().containers;
                        if (loot != null)
                        {
                            ProcessItems(corpse.GetComponent<LootableCorpse>(), 0);
                            ProcessItems(corpse.GetComponent<LootableCorpse>(), 1);
                            ProcessItems(corpse.GetComponent<LootableCorpse>(), 2);
                        }
                    }
                }
            }
        }        
        void Unload() => SaveData();
        
        #endregion

        #region ChatCommands
        [ChatCommand("rod")]
        private void cmdRod(BasePlayer player, string command, string[] args)
        {
            if (player.IsAdmin())
            {
                if (args == null || args.Length == 0)
                {
                    SendMSG(player, "addSyn");
                    SendMSG(player, "remSyn");
                    SendMSG(player, "listSyn");
                    return;
                }
                if (args.Length >= 1)
                {
                    switch (args[0].ToLower())
                    {
                        case "add":
                            if (args.Length == 3)
                            {
                                string perm = args[1].ToLower();
                                if (!perm.StartsWith(Title.ToLower() + "."))
                                    perm = Title.ToLower() + "." + perm;
                                if (!permission.PermissionExists(perm) && !rodData.Permissions.ContainsKey(perm))                                
                                {
                                    int percentage = 0;
                                    if (int.TryParse(args[2], out percentage))
                                    {
                                        rodData.Permissions.Add(perm, percentage);
                                        permission.RegisterPermission(perm, this);
                                        SaveData();
                                        SendReply(player, string.Format("<color=#FF8C00>" + lang.GetMessage("addSuccess", this, player.UserIDString), perm, percentage) + "</color>");
                                        return;
                                    }
                                    SendMSG(player, "invNum");
                                    return;
                                }
                                SendMSG(player, "exists");
                                return;
                            }
                            SendMSG(player, "addSyn");
                            return;
                        case "remove":
                            if (args.Length >= 2)
                            if (rodData.Permissions.ContainsKey(args[1].ToLower()))
                            {
                                rodData.Permissions.Remove(args[1].ToLower());
                                SaveData();
                                SendReply(player, string.Format("<color=#FF8C00>" + lang.GetMessage("remSuccess", this, player.UserIDString), args[1].ToLower()) + "</color>");
                                return;
                            }
                            SendReply(player, string.Format("<color=#FF8C00>" + lang.GetMessage("noExist", this, player.UserIDString), args[1].ToLower()) + "</color>");
                            return;
                        case "list":
                            if (rodData.Permissions.Count > 0)
                            {
                                SendMSG(player, "currentPerms");
                                foreach (var entry in rodData.Permissions)
                                    SendMSG(player, $"{entry.Key} -- {entry.Value}%");
                                return;
                            }
                            SendMSG(player, "noPerms");
                            return;
                    }                   
                }
            }
        }
        private void SendMSG(BasePlayer player, string key) => SendReply(player, "<color=#FF8C00>" + lang.GetMessage(key, this, player.UserIDString) + "</color>");       
        #endregion

        #region Functions
        private int GetPercentage(ulong playerid)
        {
            int percentage = configData.PercentageOfItemsLost;
            foreach (var entry in rodData.Permissions)
            {
                if (permission.UserHasPermission(playerid.ToString(), entry.Key))
                {
                    percentage = entry.Value;
                    break;
                }
            }
            return percentage;
        }
        private void SaveInventory(ulong playerid)
        {
            List<SavedItem> Items = new List<SavedItem>();

            if (!playerInv.ContainsKey(playerid))
                playerInv.Add(playerid, Items);
            else playerInv[playerid] = Items;
        }
        private void ProcessItems(LootableCorpse corpse, int container)
        {
            string cont = "";
            switch (container)
            {
                case 1:
                    cont = "wear";
                    break;
                case 2:
                    cont = "belt";
                    break;
                default:
                    cont = "main";
                    break;
            }

            ulong ID = corpse.playerSteamID;
            var plyrInv = playerInv[ID];
            var items = corpse.containers[container].itemList;
            var percentage = GetPercentage(ID);
            double amount = (float)(items.Count * percentage) / 100;
            amount = items.Count - amount;
            if (percentage == 0) amount = items.Count;
            amount = Math.Round(Convert.ToDouble(amount), 0, MidpointRounding.AwayFromZero);            
            for (int i = 0; i < amount; i++)
            {
                var num = UnityEngine.Random.Range(0, items.Count);
                var item = items[num];
                var savedItem = ProcessItem(item, cont);
                plyrInv.Add(savedItem);
                items.Remove(item);
            };
        }                
        private SavedItem ProcessItem(Item item, string container)
        {
            SavedItem iItem = new SavedItem();
            iItem.shortname = item.info?.shortname;
            iItem.amount = item.amount;
            iItem.mods = new List<SavedItem>();
            iItem.container = container;
            iItem.skinid = item.skin;
            iItem.itemid = item.info.itemid;
            iItem.weapon = false;
            if (item.hasCondition)
                iItem.condition = item.condition;
            if (item.info.category.ToString() == "Weapon")
            {
                BaseProjectile weapon = item.GetHeldEntity() as BaseProjectile;
                if (weapon != null)
                {
                    if (weapon.primaryMagazine != null)
                    {
                        iItem.ammoamount = weapon.primaryMagazine.contents;
                        iItem.ammotype = weapon.primaryMagazine.ammoType.shortname;
                        iItem.weapon = true;
                        if (item.contents != null)
                            foreach (var mod in item.contents.itemList)
                                if (mod.info.itemid != 0)
                                    iItem.mods.Add(ProcessItem(mod, "none"));
                    }
                }
            }
            return iItem;
        }
        private void RestoreInventory(BasePlayer player)
        {
            List<SavedItem> items = new List<SavedItem>();
            if (playerInv.ContainsKey(player.userID))
            {
                items = playerInv[player.userID];
                GivePlayerInventory(player, items);
                playerInv.Remove(player.userID);
            }
        }
        #endregion

        #region Give
        private void GivePlayerInventory(BasePlayer player, List<SavedItem> items)
        {
            foreach (SavedItem item in items)
            {
                if (item.weapon)
                    GiveItem(player, BuildWeapon(item), item.container);
                else GiveItem(player, BuildItem(item), item.container);
            }
            playerInv.Remove(player.userID);
        }        
        private void GiveItem(BasePlayer player, Item item, string container)
        {
            if (item == null) return;
            ItemContainer cont;
            switch (container)
            {
                case "wear":
                    cont = player.inventory.containerWear;
                    break;
                case "belt":
                    cont = player.inventory.containerBelt;
                    break;
                default:
                    cont = player.inventory.containerMain;
                    break;
            }
            player.inventory.GiveItem(item, cont);
        }
        private Item BuildItem(SavedItem sItem)
        {
            if (sItem.amount < 1) sItem.amount = 1;
            Item item = ItemManager.CreateByItemID(sItem.itemid, sItem.amount, sItem.skinid);
            if (item.hasCondition)
                item.condition = sItem.condition;
            return item;
        }
        private Item BuildWeapon(SavedItem sItem)
        {
            Item item = ItemManager.CreateByItemID(sItem.itemid, 1, sItem.skinid);
            if (item.hasCondition)
                item.condition = sItem.condition;
            var weapon = item.GetHeldEntity() as BaseProjectile;
            if (weapon != null)
            {
                var def = ItemManager.FindItemDefinition(sItem.ammotype);
                weapon.primaryMagazine.ammoType = def;
                weapon.primaryMagazine.contents = sItem.ammoamount;
            }
            if (sItem.mods != null)
                foreach (var mod in sItem.mods)
                    item.contents.AddItem(BuildItem(mod).info, 1);
            return item;
        }
        #endregion

        #region Classes
        class RODData
        {
            public Dictionary<ulong, List<SavedItem>> Inventorys = new Dictionary<ulong, List<SavedItem>>();
            public Dictionary<string, int> Permissions = new Dictionary<string, int>(); 
        }      
        class SavedItem
        {
            public string shortname;
            public int itemid;
            public string container;
            public float condition;
            public int amount;
            public int ammoamount;
            public string ammotype;
            public ulong skinid;
            public bool weapon;
            public List<SavedItem> mods;
        }
        #endregion

        #region Data Management
        void SaveData()
        {
            rodData.Inventorys = playerInv;
            PlayerInvData.WriteObject(rodData);
        }
        private void SaveLoop()
        {
            SaveData();
            timer.Once(900, () => SaveLoop());
        }
        void LoadData()
        {
            try
            {
                rodData = PlayerInvData.ReadObject<RODData>();
            }
            catch
            {
                Puts("Couldn't load data, creating new datafile");
                rodData = new RODData();
            }
        }
        #endregion

        #region Config        
        private ConfigData configData;
        class ConfigData
        {           
            public int PercentageOfItemsLost { get; set; }
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                PercentageOfItemsLost = 25
            };
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion
    }
}


// --- End of file: RestoreUponDeath.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/UsableToBelt.cs ---
// --- Original Local Path: UsableToBelt.cs ---

namespace Oxide.Plugins
{
    [Info("UsableToBelt", "Wulf/lukespragg", "1.2.1", ResourceId = 1141)]
    [Description("Any usable item will be moved to your belt if there is space")]

    class UsableToBelt : RustPlugin
    {
        const string permAllow = "usabletobelt.allow";

        void Init() => permission.RegisterPermission(permAllow, this);

        void HandleItem(Item item, BasePlayer player)
        {
            if (!permission.UserHasPermission(player.UserIDString, permAllow)) return;

            var alreadyHasStack = false;
            var belt = player.inventory.containerBelt;
            var main = player.inventory.containerMain;

            foreach (var invItem in main.itemList)
            {
                if (item.info.itemid != invItem.info.itemid) continue;
                if (invItem.info.stackable > 1) alreadyHasStack = true;
            }

            if (alreadyHasStack) return;
            if (item.info.category != ItemCategory.Weapon && item.info.category != ItemCategory.Tool &&
                item.info.category != ItemCategory.Medical && item.info.category != ItemCategory.Food &&
                item.info.category != ItemCategory.Construction) return;

            for (var i = 0; i < PlayerBelt.MaxBeltSlots; i++)
            {
                if (belt.SlotTaken(i)) continue;
                timer.Once(0.1f, () => item.MoveToContainer(belt, i));
                break;
            }
        }

        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            var player = container.GetOwnerPlayer();
            if (player != null && !container.HasFlag(ItemContainer.Flag.Belt)) HandleItem(item, player);
        }
    }
}


// --- End of file: UsableToBelt.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/EasyHeal.cs ---
// --- Original Local Path: EasyHeal.cs ---

using System.Collections.Generic;
using System.Reflection;
using System;
using System.Data;
using UnityEngine;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("Easy Heal", "LaserHydra", "2.2.0", ResourceId = 984)]
    [Description("Heal yourself or others")]
    class EasyHeal : RustPlugin
    {
        [ChatCommand("healall")]
        void cmdHealAll(BasePlayer player)
        {
            if (!player.IsAdmin())
            {
                SendChatMessage(player, "HEAL", "You have no permission to use this command!");
                Puts(player.displayName + " got rejected from using /healall");

                return;
            }
            Puts(player.displayName + " used /healall");
            BroadcastChat("HEAL", "All players have been healed by <color=orange>" + player.displayName + "</color>!");
            foreach (BasePlayer current in BasePlayer.activePlayerList)
            {
                current.metabolism.hydration.value = 1000;
                current.metabolism.calories.value = 1000;
                current.InitializeHealth(100, 100);
            }
        }

        [ChatCommand("heal")]
        void cmdHeal(BasePlayer player, string cmd, string[] args)
        {
            if (!player.IsAdmin())
            {
                SendChatMessage(player, "HEAL", "You have no permission to use this command!");

                if (args.Length != 1)
                {
                    Puts(player.displayName + " got rejected from using /heal");
                    return;
                }

                if (args.Length == 1)
                {
                    Puts(player.displayName + " got rejected from using /heal " + args[0]);
                }

                return;
            }

            if (args.Length != 1)
            {
                player.metabolism.hydration.value = 1000;
                player.metabolism.calories.value = 1000;
                player.InitializeHealth(100, 100);
                SendChatMessage(player, "HEAL", "You have healed yourself!");
                Puts(player.displayName + " used /heal");
                return;
            }

            if (args.Length == 1)
            {
                Puts(player.displayName + " used /heal " + args[0]);
                string[] target;
                target = GetPlayer(args[0]);
                if (target.Length == 0)
                {
                    SendChatMessage(player, "HEAL", "No matching players found!");
                }

                if (target.Length > 1)
                {
                    SendChatMessage(player, "HEAL", "Multiple players found:");
                    string multipleUsers = "";
                    foreach (string matchingplayer in target)
                    {
                        if (multipleUsers == "")
                        {
                            multipleUsers = "<color=yellow>" + matchingplayer + "</color>";
                            continue;
                        }

                        if (multipleUsers != "")
                        {
                            multipleUsers = multipleUsers + ", " + "<color=yellow>" + matchingplayer + "</color>";
                        }

                    }
                    SendChatMessage(player, "HEAL", multipleUsers);
                }

                if (target.Length == 1)
                {
                    BasePlayer targetPlayer = BasePlayer.Find(target[0]);
                    targetPlayer.metabolism.hydration.value = 1000;
                    targetPlayer.metabolism.calories.value = 1000;
                    targetPlayer.InitializeHealth(100, 100);
                    if (targetPlayer == player)
                    {
                        SendChatMessage(player, "HEAL", "You have healed yourself!");
                    }
                    else if(targetPlayer != player)
                    {
                        SendChatMessage(targetPlayer, "HEAL", "You got healed by <color=orange>" + player.displayName + "</color>");
                        SendChatMessage(player, "HEAL", "You have healed <color=orange>" + targetPlayer.displayName + "</color>");
                    }
                }

            }
        }

        //--------------------------->   Player finding   <---------------------------//

        string[] GetPlayer(string searchedPlayer)
        {
            List<string> foundPlayers = new List<string>();
            string searchedLower = searchedPlayer.ToLower();
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                string display = player.displayName;
                string displayLower = display.ToLower();

                if (!displayLower.Contains(searchedLower))
                {
                    continue;
                }
                if (displayLower.Contains(searchedLower))
                {
                    foundPlayers.Add(display);
                }
            }
            var matchingPlayers = foundPlayers.ToArray();
            return matchingPlayers;
        }

        //---------------------------->   Chat Sending   <----------------------------//

        void BroadcastChat(string prefix, string msg)
        {
            PrintToChat("<color=orange>" + prefix + "</color>: " + msg);
        }

        void SendChatMessage(BasePlayer player, string prefix, string msg)
        {
            SendReply(player, "<color=orange>" + prefix + "</color>: " + msg);
        }

        //---------------------------------------------------------------------------//
    }
}


// --- End of file: EasyHeal.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PlayerChatcontrol.cs ---
// --- Original Local Path: PlayerChatcontrol.cs ---

using System.Collections.Generic;
using System.Reflection;
using System;
using System.Data;
using UnityEngine;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("Player Chatcontrol", "LaserHydra", "2.0.0", ResourceId = 866)]
    [Description("Write as another player")]
    class PlayerChatcontrol : RustPlugin
    {
        [ChatCommand("talk")]
        void cmdTalk(BasePlayer player, string cmd, string[] args)
        {
            if (player.net.connection.authLevel != 2)
            {
                SendChatMessage(player, "CHATCONTROL", "You have no permission to use this command");
                return;
            }

            if (args.Length < 2)
            {
                SendChatMessage(player, "CHATCONTROL", "Syntax: /talk [player] [message]");
                return;
            }

            string msg = "";
            foreach (string arg in args)
            {
                if (arg == args[0])
                {
                    continue;
                }

                if (msg == "")
                {
                    msg = msg + arg;
                    continue;
                }

                msg = msg + " " + arg;
            }

            string[] target;
            target = GetPlayer(args[0]);
            if (target.Length == 0)
            {
                SendChatMessage(player, "CHATCONTROL", "No matching players found!");
            }

            if (target.Length > 1)
            {
                SendChatMessage(player, "CHATCONTROL", "Multiple players found:");
                string multipleUsers = "";
                foreach (string matchingplayer in target)
                {
                    if (multipleUsers == "")
                    {
                        multipleUsers = "<color=yellow>" + matchingplayer + "</color>";
                        continue;
                    }

                    if (multipleUsers != "")
                    {
                        multipleUsers = multipleUsers + ", " + "<color=yellow>" + matchingplayer + "</color>";
                    }

                }

                SendChatMessage(player, "CHATCONTROL", multipleUsers);
            }

            if (target.Length == 1)
            {
                BasePlayer targetPlayer = BasePlayer.Find(target[0]);
                ForcePlayerChat(targetPlayer, msg);
            }
        }

        void ForcePlayerChat(BasePlayer target, string message)
        {
            target.SendConsoleCommand("chat.say " + "\"" + message + "\"");
        }


        //--------------------------->   Player finding   <---------------------------//

        string[] GetPlayer(string searchedPlayer)
        {
            List<string> foundPlayers = new List<string>();
            string searchedLower = searchedPlayer.ToLower();
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                string display = player.displayName;
                string displayLower = display.ToLower();

                if (!displayLower.Contains(searchedLower))
                {
                    continue;
                }
                if (displayLower.Contains(searchedLower))
                {
                    foundPlayers.Add(display);
                }
            }
            var matchingPlayers = foundPlayers.ToArray();
            return matchingPlayers;
        }

        //---------------------------->   Chat Sending   <----------------------------//

        void BroadcastChat(string prefix, string msg)
        {
            PrintToChat("<color=orange>" + prefix + "</color>: " + msg);
        }

        void SendChatMessage(BasePlayer player, string prefix, string msg)
        {
            SendReply(player, "<color=orange>" + prefix + "</color>: " + msg);
        }

        //---------------------------------------------------------------------------//
    }
}

// --- End of file: PlayerChatcontrol.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BetterLoot.cs ---
// --- Original Local Path: BetterLoot.cs ---

using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
using UnityEngine;
using Oxide.Core.Plugins;
using Random = System.Random;

using Oxide.Core;

namespace Oxide.Plugins
{
	[Info("BetterLoot", "Fujikura/dcode", "2.10.0", ResourceId = 828)]
	[Description("A complete re-implementation of the drop system")]
	public class BetterLoot : RustPlugin
	{
		bool Changed = false;

		StoredSupplyDrop storedSupplyDrop = new StoredSupplyDrop();
		StoredHeliCrate storedHeliCrate = new StoredHeliCrate();
		StoredExportNames storedExportNames = new StoredExportNames();
		StoredLootTable storedLootTable = new StoredLootTable();
		SeparateLootTable separateLootTable = new SeparateLootTable();
		StoredBlacklist storedBlacklist = new StoredBlacklist();

		Dictionary<string, string> messages = new Dictionary<string, string>();

		Regex barrelEx;
		Regex crateEx;
		Regex heliEx = new Regex(@"heli_crate");

		List<string>[] items = new List<string>[4];
		List<string>[] itemsB = new List<string>[4];
		List<string>[] itemsC = new List<string>[4];		
		List<string>[] itemsHeli = new List<string>[4];
		List<string>[] itemsSupply = new List<string>[4];
		int totalItems;
		int totalItemsB;
		int totalItemsC;
		int totalItemsHeli;
		int totalItemsSupply;
		int[] itemWeights = new int[4];
		int[] itemWeightsB = new int[4];
		int[] itemWeightsC = new int[4];
		int[] itemWeightsHeli = new int[4];
		int[] itemWeightsSupply = new int[4];
		int totalItemWeight;
		int totalItemWeightB;
		int totalItemWeightC;
		int totalItemWeightHeli;
		int totalItemWeightSupply;

		List<ItemDefinition> originalItems;
		List<ItemDefinition> originalItemsB;
		List<ItemDefinition> originalItemsC;
		List<ItemDefinition> originalItemsHeli;
		List<ItemDefinition> originalItemsSupply;

		Random rng = new Random();

		bool initialized = false;
		int lastMinute; 

		List<ContainerToRefresh> refreshList = new List<ContainerToRefresh>();
		DateTime lastRefresh = DateTime.MinValue;

		static Dictionary<string,object> defaultItemOverride()
		{
			var dp = new Dictionary<string, object>();
			dp.Add("autoturret", 3);
			dp.Add("trap.bear", 1);
			dp.Add("box.wooden", 0);
			dp.Add("crude.oil", 1);
			dp.Add("fat.animal", 0);
			dp.Add("furnace", 0);
			dp.Add("hq.metal.ore", 0);
			dp.Add("trap.landmine", 2);
			dp.Add("lmg.m249", 3);
			dp.Add("rifle.lr300", 2);
			dp.Add("metal.fragments", 1);
			dp.Add("metal.refined", 3);
			dp.Add("mining.quarry", 2);
			dp.Add("target.reactive", 1);
			dp.Add("researchpaper", 0);
			dp.Add("stash.small", 0);
			dp.Add("spikes.floor", 1);
			dp.Add("targeting.computer", 2);
			dp.Add("water.catcher.large", 1);
			dp.Add("water.catcher.small", 1);
			return dp;
		}

		static List<string> itemListExcludes = new List<string>( new string[] {"water","water.salt","flare","generator.wind.scrap","battery.small","blood","mining.pumpjack","rock","coal","supply.signal","autoturret","door.key" });

		#region Config

		bool pluginEnabled;
		int delayPluginInit;
		bool seperateLootTables;
		string barrelTypes;
		string crateTypes;
		bool enableBarrels;
		int minItemsPerBarrel;
		int maxItemsPerBarrel;
		bool enableCrates;
		int minItemsPerCrate;
		int maxItemsPerCrate;
		int minItemsPerSupplyDrop;
		int maxItemsPerSupplyDrop;
		int minItemsPerHeliCrate;
		int maxItemsPerHeliCrate;
		double baseItemRarity;
		int refreshMinutes;
		bool removeStackedContainers;
		bool enforceBlacklist;
		bool dropWeaponsWithAmmo;
		bool includeSupplyDrop;
		bool excludeHeliCrate;
		bool listUpdatesOnLoaded;
		bool listUpdatesOnRefresh;
		bool useCustomTableHeli;
		bool useCustomTableSupply;
		bool refreshBarrels;
		bool refreshCrates;
		
		Dictionary<string,object> rarityItemOverride = null;

		object GetConfig(string menu, string datavalue, object defaultValue)
		{
			var data = Config[menu] as Dictionary<string, object>;
			if (data == null)
			{
				data = new Dictionary<string, object>();
				Config[menu] = data;
				Changed = true;
			}
			object value;
			if (!data.TryGetValue(datavalue, out value))
			{
				value = defaultValue;
				data[datavalue] = value;
				Changed = true;
			}
			return value;
		}

		void LoadDefaultMessages()
		{
			lang.RegisterMessages(new Dictionary<string, string>
			                      {
									{"msgDefault", "dummy Text"},
									{"msgNotAuthorized", "You are not authorized to use this command"},
								  },this);
		}

		void LoadVariables()
		{

		rarityItemOverride = (Dictionary<string, object>)GetConfig("RarityIndex", "ItemOverrides", defaultItemOverride());

		baseItemRarity = Convert.ToDouble(GetConfig("Chances", "baseItemRarity", 2));

		minItemsPerBarrel =  Convert.ToInt32(GetConfig("Barrel", "minItemsPerBarrel", 1));
		maxItemsPerBarrel = Convert.ToInt32(GetConfig("Barrel", "maxItemsPerBarrel", 3));
		refreshBarrels = Convert.ToBoolean(GetConfig("Barrel", "refreshBarrels", true));
		barrelTypes = Convert.ToString(GetConfig("Barrel","barrelTypes","loot-barrel|loot_barrel"));
		enableBarrels = Convert.ToBoolean(GetConfig("Barrel", "enableBarrels", true));

		minItemsPerCrate = Convert.ToInt32(GetConfig("Crate", "minItemsPerCrate", 3));
		maxItemsPerCrate = Convert.ToInt32(GetConfig("Crate", "maxItemsPerCrate", 6));
		refreshCrates = Convert.ToBoolean(GetConfig("Crate", "refreshCrates", true));
		crateTypes = Convert.ToString(GetConfig("Crate","crateTypes","crate_normal"));
		enableCrates = Convert.ToBoolean(GetConfig("Crate", "enableCrates", true));

		minItemsPerSupplyDrop = Convert.ToInt32(GetConfig("SupplyDrop", "minItemsPerSupplyDrop", 3));
		maxItemsPerSupplyDrop = Convert.ToInt32(GetConfig("SupplyDrop", "maxItemsPerSupplyDrop", 6));
		includeSupplyDrop = Convert.ToBoolean(GetConfig("SupplyDrop", "includeSupplyDrop", false));
		useCustomTableSupply = Convert.ToBoolean(GetConfig("SupplyDrop", "useCustomTableSupply", true));

		minItemsPerHeliCrate = Convert.ToInt32(GetConfig("HeliCrate", "minItemsPerHeliCrate", 2));
		maxItemsPerHeliCrate = Convert.ToInt32(GetConfig("HeliCrate", "maxItemsPerHeliCrate", 4));
		excludeHeliCrate = Convert.ToBoolean(GetConfig("HeliCrate", "excludeHeliCrate", true));
		useCustomTableHeli = Convert.ToBoolean(GetConfig("HeliCrate", "useCustomTableHeli", true));

		refreshMinutes = Convert.ToInt32(GetConfig("Generic", "refreshMinutes", 30));
		enforceBlacklist = Convert.ToBoolean(GetConfig("Generic", "enforceBlacklist", false));
		dropWeaponsWithAmmo = Convert.ToBoolean(GetConfig("Generic", "dropWeaponsWithAmmo", true));
		listUpdatesOnLoaded = Convert.ToBoolean(GetConfig("Generic", "listUpdatesOnLoaded", true));
		listUpdatesOnRefresh = Convert.ToBoolean(GetConfig("Generic", "listUpdatesOnRefresh", false));
		pluginEnabled = Convert.ToBoolean(GetConfig("Generic", "pluginEnabled", true));
		delayPluginInit = Convert.ToInt32(GetConfig("Generic", "delayPluginInit", 3));
		removeStackedContainers = Convert.ToBoolean(GetConfig("Generic", "removeStackedContainers", false));
		seperateLootTables = Convert.ToBoolean(GetConfig("Generic", "seperateLootTables", false));

		if (!Changed) return;
		SaveConfig();
		Changed = false;
		}

		protected override void LoadDefaultConfig()
		{
			Config.Clear();
			LoadVariables();
		}

		#endregion Config

		Dictionary<string, string> weaponAmmunition = new Dictionary<string, string>()
		{
			{ "bow.hunting", "arrow.wooden" },
			{ "pistol.eoka", "ammo.handmade.shell" },
			{ "pistol.revolver", "ammo.pistol" },
			{ "pistol.semiauto", "ammo.pistol" },
			{ "shotgun.waterpipe", "ammo.shotgun" },
			{ "shotgun.pump", "ammo.shotgun" },
			{ "smg.thompson", "ammo.pistol" },
			{ "smg.2", "ammo.rifle" },
			{ "rifle.bolt", "ammo.rifle" },
			{ "rifle.semiauto", "ammo.rifle" },
			{ "lmg.m249", "ammo.rifle" },
			{ "rocket.launcher", "ammo.rocket.basic" },
			{ "rifle.ak", "ammo.rifle" },
			{ "crossbow", "arrow.wooden" },
			{ "rifle.lr300", "ammo.rifle" },
			{ "smg.mp5", "ammo.pistol" }
		};

		void Init()
		{
			LoadVariables();
			lastMinute = DateTime.UtcNow.Minute;
		}
		
		void OnServerInitialized()
		{
			if (initialized)
				return;
			var itemList = ItemManager.itemList;
			if (itemList == null || itemList.Count == 0)
			{
				NextTick(OnServerInitialized);
				return;
			}
			UpdateInternals(listUpdatesOnLoaded);
		}

		void OnTick()
		{
			if (lastMinute == DateTime.UtcNow.Minute) return;
			lastMinute = DateTime.UtcNow.Minute;

			var now = DateTime.UtcNow;
			int n = 0;
			int m = 0;
			var all = refreshList.ToArray();
			refreshList.Clear();
			foreach (var ctr in all) {
				if (ctr.time < now) {
					if (ctr.container.isDestroyed)
					{ 
						++m;
						continue;
					}
					if (ctr.container.IsOpen())
					{
						refreshList.Add(ctr);
						continue;
					}
					try {
						PopulateContainer(ctr.container); // Will re-add
						++n;
					} catch (Exception ex) {
						PrintError("Failed to refresh container: " + ContainerName(ctr.container) + ": " + ex.Message + "\n" + ex.StackTrace);
					}
				} else
					refreshList.Add(ctr); // Re-add for later
			}
			if (n > 0 || m > 0)
					if (listUpdatesOnRefresh) Puts("Refreshed " + n + " containers (" + m + " destroyed)");
		}

		void UpdateInternals(bool doLog)
		{
			LoadBlacklist();
			if (seperateLootTables)
				LoadSeparateLootTable();
			else
				LoadLootTable();
			LoadHeliCrate();
			LoadSupplyDrop();
			SaveExportNames();
			if (Changed)
			{
				SaveConfig();
				Changed = false;
			}
			if(!pluginEnabled)
			{
				PrintWarning("Plugin not active after first Setup. Change 'pluginEnabled' by config");
				return;
			}
			Puts("Updating internals ...");
			barrelEx = new Regex(@barrelTypes.ToLower());
			crateEx = new Regex(@crateTypes.ToLower());

			if (seperateLootTables)
			{
				originalItemsB = new List<ItemDefinition>();
				originalItemsC = new List<ItemDefinition>();
			}
			else
				originalItems = new List<ItemDefinition>();

			originalItemsHeli = new List<ItemDefinition>();
			originalItemsSupply = new List<ItemDefinition>();
			
			if (seperateLootTables)
			{
				foreach (KeyValuePair<string, int> pair in separateLootTable.ItemListBarrels)
					originalItemsB.Add(ItemManager.FindItemDefinition(pair.Key));
				foreach (KeyValuePair<string, int> pair in separateLootTable.ItemListCrates)
					originalItemsC.Add(ItemManager.FindItemDefinition(pair.Key));
			}
			else
				foreach (KeyValuePair<string, int> pair in storedLootTable.ItemList)
					originalItems.Add(ItemManager.FindItemDefinition(pair.Key));

			if (useCustomTableHeli && !excludeHeliCrate)
				foreach (KeyValuePair<string, int> pair in storedHeliCrate.ItemList)
					originalItemsHeli.Add(ItemManager.FindItemDefinition(pair.Key));
			if (useCustomTableSupply && includeSupplyDrop)
				foreach (KeyValuePair<string, int> pair in storedSupplyDrop.ItemList)
					originalItemsSupply.Add(ItemManager.FindItemDefinition(pair.Key));

			if (doLog)
			{
				if (seperateLootTables)
				{
					Puts("There are " + originalItemsB.Count+ " items in the global Barrels LootTable.");
					Puts("There are " + originalItemsC.Count+ " items in the global Crates LootTable.");
				}
				else
					Puts("There are " + originalItems.Count+ " items in the global LootTable.");
				
				if (useCustomTableHeli && !excludeHeliCrate)
					Puts("There are " + originalItemsHeli.Count + " items in the HeliTable.");
				if (useCustomTableSupply && includeSupplyDrop)
					Puts("There are " + originalItemsSupply.Count + " items in the SupplyTable.");
			}
			for (var i = 0; i < 4; ++i)
			{
				if (seperateLootTables)
				{
					itemsB[i] = new List<string>();
					itemsC[i] = new List<string>();
				}
				else
					items[i] = new List<string>();
				
				if (useCustomTableHeli && !excludeHeliCrate) itemsHeli[i] = new List<string>();
				if (useCustomTableSupply && includeSupplyDrop) itemsSupply[i] = new List<string>();
			}
			if (seperateLootTables)
			{
				totalItemsB = 0;
				totalItemsC = 0;
			}
			else
				totalItems = 0;
			
			if (useCustomTableHeli && !excludeHeliCrate) totalItemsHeli = 0;
			if (useCustomTableSupply && includeSupplyDrop) totalItemsSupply = 0;

			var notExistingItems = 0;
			var notExistingItemsB = 0;				
			var notExistingItemsC = 0;
			
			var notExistingItemsHeli = 0;
			var notExistingItemsSupply = 0;
			
			var itemsWithNoRarity = 0;
			var itemsWithNoRarityB = 0;
			var itemsWithNoRarityC = 0;			
			
			var itemsWithNoRarityHeli = 0;
			var itemsWithNoRaritySupply = 0;
			
			if (seperateLootTables)
			{
				foreach (var item in originalItemsB)
				{
					if (item == null) continue;
					int index = RarityIndex(item.rarity);
					object indexoverride;
					if (index == -1)
					{
						if (item.category.ToString().ToLower() == "component")
						{
							index++;
						}
						if (rarityItemOverride.TryGetValue(item.shortname, out indexoverride))
						{
							index = Convert.ToInt32(indexoverride);
						}
					}
					if (index >= 0 )
					{
						if (ItemExists(item.shortname)) {
							if (!storedBlacklist.ItemList.Contains(item.shortname)) {
								itemsB[index].Add(item.shortname);
								++totalItemsB;
							}
						}
						else
						{
							++notExistingItemsB;
						}
					}
					else ++itemsWithNoRarityB;
				}
				foreach (var item in originalItemsC)
				{
					if (item == null) continue;
					int index = RarityIndex(item.rarity);
					object indexoverride;
					if (index == -1)
					{
						if (item.category.ToString().ToLower() == "component")
						{
							index++;
						}
						if (rarityItemOverride.TryGetValue(item.shortname, out indexoverride))
						{
							index = Convert.ToInt32(indexoverride);
						}
					}
					if (index >= 0 )
					{
						if (ItemExists(item.shortname)) {
							if (!storedBlacklist.ItemList.Contains(item.shortname)) {
								itemsC[index].Add(item.shortname);
								++totalItemsC;
							}
						}
						else
						{
							++notExistingItemsC;
						}
					}
					else ++itemsWithNoRarityC;
				}
			}
			else
				foreach (var item in originalItems) {
					if (item == null) continue;
					int index = RarityIndex(item.rarity);
					object indexoverride;
					if (index == -1)
					{
						if (item.category.ToString().ToLower() == "component")
						{
							index++;
						}
						if (rarityItemOverride.TryGetValue(item.shortname, out indexoverride))
						{
							index = Convert.ToInt32(indexoverride);
						}
					}
					if (index >= 0 )
					{
						if (ItemExists(item.shortname)) {
							if (!storedBlacklist.ItemList.Contains(item.shortname)) {
								items[index].Add(item.shortname);
								++totalItems;
							}
						}
						else
						{
							++notExistingItems;
						}
					}
					else ++itemsWithNoRarity;
				}
			if (useCustomTableHeli && !excludeHeliCrate)
				foreach (var item in originalItemsHeli) {
					int index = RarityIndex(item.rarity);
					object indexoverride;
					if (index == -1)
					{
						if (item.category.ToString().ToLower() == "component")
						{
							index++;
						}
						if (rarityItemOverride.TryGetValue(item.shortname, out indexoverride))
						{
							index = Convert.ToInt32(indexoverride);
						}
					}
					if (index >= 0)
					{
						if (ItemExists(item.shortname)) {
							if (!storedBlacklist.ItemList.Contains(item.shortname)) {
								itemsHeli[index].Add(item.shortname);
								++totalItemsHeli;
							}
						}
						else
						{
							++notExistingItemsHeli;
							}
					}
					else
					{						++itemsWithNoRarityHeli;
					}
			}
			if (useCustomTableSupply && includeSupplyDrop)
				foreach (var item in originalItemsSupply) {
					int index = RarityIndex(item.rarity);
					object indexoverride;
					if (index == -1)
					{
						if (item.category.ToString().ToLower() == "component")
						{
							index++;
						}
						if (rarityItemOverride.TryGetValue(item.shortname, out indexoverride))
						{
							index = Convert.ToInt32(indexoverride);
						}
					}
					if (index >= 0)
					{
						if (ItemExists(item.shortname)) {
							if (!storedBlacklist.ItemList.Contains(item.shortname)) {
								itemsSupply[index].Add(item.shortname);
								++totalItemsSupply;
							}
						}
						else
						{
							++notExistingItemsSupply;
						}
					}
					else ++itemsWithNoRaritySupply;
				}
			if (doLog)
				if (seperateLootTables)
				{
					Puts("We are going to use " + totalItemsB + " items for the global Barrel LootTable.");
					Puts("We are going to use " + totalItemsC + " items for the global Crate LootTable.");
				}
				else
					Puts("We are going to use " + totalItems + " items for the global LootTable.");
				if (useCustomTableHeli && !excludeHeliCrate) Puts("We are going to use " + totalItemsHeli + " items for Heli Crates.");
				if (useCustomTableSupply && includeSupplyDrop) Puts("We are going to use " + totalItemsSupply + " items for Supply Drops.");
			
			totalItemWeight = 0;
			totalItemWeightB = 0;
			totalItemWeightC = 0;
			totalItemWeightHeli = 0;
			totalItemWeightSupply = 0;
			for (var i = 0; i < 4; ++i) {
				if (seperateLootTables)
				{
					totalItemWeightB += (itemWeightsB[i] = ItemWeight(baseItemRarity, i) * itemsB[i].Count);				
					totalItemWeightC += (itemWeightsC[i] = ItemWeight(baseItemRarity, i) * itemsC[i].Count);	
				}
				else
				{
					totalItemWeight += (itemWeights[i] = ItemWeight(baseItemRarity, i) * items[i].Count);
				}
				if (useCustomTableHeli && !excludeHeliCrate) { totalItemWeightHeli += (itemWeightsHeli[i] = ItemWeight(baseItemRarity, i) * itemsHeli[i].Count); }
				if (useCustomTableSupply && includeSupplyDrop) { totalItemWeightSupply += (itemWeightsSupply[i] = ItemWeight(baseItemRarity, i) * itemsSupply[i].Count); }
				}

			foreach (var container in UnityEngine.Object.FindObjectsOfType<LootContainer>()) {
				try {
					PopulateContainer(container);
				} catch (Exception ex) {
					PrintWarning("Failed to populate container " + ContainerName(container) + ": " + ex.Message + "\n" + ex.StackTrace);
				}
			}
			if (removeStackedContainers) FixLoot();
			initialized = true;
			Puts("Internals have been updated");
		}

		void FixLoot()
		{
			var spawns = Resources.FindObjectsOfTypeAll<LootContainer>()
				.Where(c => c.isActiveAndEnabled).
				OrderBy(c => c.transform.position.x).ThenBy(c => c.transform.position.z).ThenBy(c => c.transform.position.z)
				.ToList();

			var count = spawns.Count();
			var racelimit = count * count;

			var antirace = 0;
			var deleted = 0;

			for (var i = 0; i < count; i++)
			{
				var box = spawns[i];
				var pos = new Vector2(box.transform.position.x, box.transform.position.z);

				if (++antirace > racelimit)
				{
					return;
				}

				var next = i + 1;
				while (next < count)
				{
					var box2 = spawns[next];
					var pos2 = new Vector2(box2.transform.position.x, box2.transform.position.z);
					var distance = Vector2.Distance(pos, pos2);

					if (++antirace > racelimit)
					{
						return;
					}

					if (distance < 2)
					{
						spawns.RemoveAt(next);
						count--;
						(box2 as BaseEntity).KillMessage();
						deleted++;
					}
					else break;
				}
			}

			if (deleted > 0)
				Puts($"Removed {deleted} stacked LootContainer (out of {count})");
			else
				Puts($"No stacked LootContainer found.");
		}

		Item MightyRNG(string type) {
			List<string> selectFrom;
			int limit = 0;
			string itemName;
			Item item;
			int maxRetry = 20;

			switch (type)
			{
			case "default":
								do {
									selectFrom = null;
									item = null;
									var r = rng.Next(totalItemWeight);
									for (var i=0; i<4; ++i) {
										limit += itemWeights[i];
										if (r < limit) {
											selectFrom = items[i];
											break;
										}
									}
									if (selectFrom == null) {
										if (--maxRetry <= 0) {
											PrintError("Endless loop detected: ABORTING");
											break;
										}
										continue;
									}
									itemName = selectFrom[rng.Next(0, selectFrom.Count)];
									item = ItemManager.CreateByName(itemName, 1);
									if (item == null) {
										continue;
									}
									if (item.info == null) {
										continue;
									}
									break;
								} while (true);
								if (item == null)
									return null;
								if (item.info.stackable > 1 && storedLootTable.ItemList.TryGetValue(item.info.shortname, out limit))
								{
									item.amount = rng.Next(1, Math.Min(limit, item.info.stackable) + 1);
								}
								return item;
			case "crate":
								do {
									selectFrom = null;
									item = null;
									var r = rng.Next(totalItemWeightC);
									for (var i=0; i<4; ++i) {
										limit += itemWeightsC[i];
										if (r < limit) {
											selectFrom = itemsC[i];
											break;
										}
									}
									if (selectFrom == null) {
										if (--maxRetry <= 0) {
											PrintError("Endless loop detected: ABORTING");
											break;
										}
										continue;
									}
									itemName = selectFrom[rng.Next(0, selectFrom.Count)];
									item = ItemManager.CreateByName(itemName, 1);
									if (item == null) {
										continue;
									}
									if (item.info == null) {
										continue;
									}
									break;
								} while (true);
								if (item == null)
									return null;
								if (item.info.stackable > 1 && separateLootTable.ItemListCrates.TryGetValue(item.info.shortname, out limit))
								{
									item.amount = rng.Next(1, Math.Min(limit, item.info.stackable) + 1);
								}
								return item;
			case "barrel":
								do {
									selectFrom = null;
									item = null;
									var r = rng.Next(totalItemWeightB);
									for (var i=0; i<4; ++i) {
										limit += itemWeightsB[i];
										if (r < limit) {
											selectFrom = itemsB[i];
											break;
										}
									}
									if (selectFrom == null) {
										if (--maxRetry <= 0) {
											PrintError("Endless loop detected: ABORTING");
											break;
										}
										continue;
									}
									itemName = selectFrom[rng.Next(0, selectFrom.Count)];
									item = ItemManager.CreateByName(itemName, 1);
									if (item == null) {
										continue;
									}
									if (item.info == null) {
										continue;
									}
									break;
								} while (true);
								if (item == null)
									return null;
								if (item.info.stackable > 1 && separateLootTable.ItemListBarrels.TryGetValue(item.info.shortname, out limit))
								{
									item.amount = rng.Next(1, Math.Min(limit, item.info.stackable) + 1);
								}
								return item;
			case "heli":
								do {
									selectFrom = null;
									item = null;
									var r = rng.Next(totalItemWeightHeli);
									for (var i=0; i<4; ++i) {
										limit += itemWeightsHeli[i];
										if (r < limit) {
											selectFrom = itemsHeli[i];
											break;
										}
									}
									if (selectFrom == null) {
										if (--maxRetry <= 0) {
											PrintError("Endless loop detected: ABORTING");
											break;
										}
										continue;
									}
									itemName = selectFrom[rng.Next(0, selectFrom.Count)];
									item = ItemManager.CreateByName(itemName, 1);
									if (item == null) {
										continue;
									}
									if (item.info == null) {
										continue;
									}
									break;
								} while (true);
								if (item == null)
									return null;
								if (item.info.stackable > 1 && storedHeliCrate.ItemList.TryGetValue(item.info.shortname, out limit))
								{
									item.amount = rng.Next(1, Math.Min(limit, item.info.stackable) + 1);
								}
								return item;
			case "supply":
								do {
									selectFrom = null;
									item = null;
									var r = rng.Next(totalItemWeightSupply);
									for (var i=0; i<4; ++i) {
										limit += itemWeightsSupply[i];
										if (r < limit) {
											selectFrom = itemsSupply[i];
											break;
										}
									}
									if (selectFrom == null) {
										if (--maxRetry <= 0) {
											PrintError("Endless loop detected: ABORTING");
											break;
										}
										continue;
									}
									itemName = selectFrom[rng.Next(0, selectFrom.Count)];
									item = ItemManager.CreateByName(itemName, 1);
									if (item == null) {
										continue;
									}
									if (item.info == null) {
										continue;
									}
									break;
								} while (true);
								if (item == null)
									return null;
								if (item.info.stackable > 1 && storedSupplyDrop.ItemList.TryGetValue(item.info.shortname, out limit))
								{
									item.amount = rng.Next(1, Math.Min(limit, item.info.stackable) + 1);
								}
								return item;
					default:
								return null;
			}
		}

		void ClearContainer(LootContainer container)
		{
			while (container.inventory.itemList.Count > 0) {
				var item = container.inventory.itemList[0];
				item.RemoveFromContainer();
				item.Remove(0f);
			}
		}

		void SuppressRefresh(LootContainer container)
		{
			container.minSecondsBetweenRefresh = -1;
			container.maxSecondsBetweenRefresh = 0;
			container.CancelInvoke("SpawnLoot");
		}

		void PopulateContainer(LootContainer container)
		{
			if (container.inventory == null) {
				PrintWarning("Container " + ContainerName(container) + " has no inventory (skipping)");
				return;
			}
			int min = 1;
			int max = 0;
			bool refresh = false;
			string type = "empty";

			if (barrelEx.IsMatch(container.gameObject.name.ToLower()) && enableBarrels) {
				SuppressRefresh(container);
				ClearContainer(container);
				min = minItemsPerBarrel;
				max = maxItemsPerBarrel;
				if (seperateLootTables)
					type = "barrel";
				else
					type = "default";
				refresh = refreshBarrels;
			}
			else if (crateEx.IsMatch(container.gameObject.name.ToLower()) && enableCrates) {
				SuppressRefresh(container);
				ClearContainer(container);
				min = minItemsPerCrate;
				max = maxItemsPerCrate;
				if (seperateLootTables)
					type = "crate";
				else
					type = "default";
				refresh = refreshCrates;
			}
			else if (heliEx.IsMatch(container.gameObject.name) && !excludeHeliCrate) {
				SuppressRefresh(container);
				ClearContainer(container);
				min = minItemsPerHeliCrate;
				max = maxItemsPerHeliCrate;
				if(useCustomTableHeli)
				{
					type = "heli";
				}
				else
				{
					if (seperateLootTables)
						type = "crate";
					else
						type = "default";
				}
			}
			else if (container is SupplyDrop && includeSupplyDrop) {
				SuppressRefresh(container);
				ClearContainer(container);
				min = minItemsPerSupplyDrop;
				max = maxItemsPerSupplyDrop;
				if(useCustomTableSupply)
				{
					type = "supply";
				}
				else
				{
					if (seperateLootTables)
						type = "crate";
					else
						type = "default";
				}
			}
			else return; // not in List

			if (min < 1 ) min = 1;
			if (max > 30) max = 30;
			var n = UnityEngine.Random.Range(min,max);
			container.inventory.capacity = n;
			container.inventorySlots = n;
			if (n > 18) container.panelName= "largewoodbox";
			else container.panelName= "generic";

			var sb = new StringBuilder();
			var items = new List<Item>();
			bool hasAmmo = false;
			for (int i = 0; i < n; ++i) {
				var item = MightyRNG(type);
				if (item == null) {
					PrintError("Failed to obtain item: Is the plugin initialized yet?");
					return;
				}
				items.Add(item);
				if (sb.Length > 0)
					sb.Append(", ");
				if (item.amount > 1)
					sb.Append(item.amount).Append("x ");
				sb.Append(item.info.shortname);

				if (dropWeaponsWithAmmo && !hasAmmo && items.Count < container.inventorySlots) { // Drop some ammunition with first weapon
					string ammo;
					int limit;
					if (weaponAmmunition.TryGetValue(item.info.shortname, out ammo) && storedLootTable.ItemList.TryGetValue(ammo, out limit)) {
						try {
							item = ItemManager.CreateByName(ammo, rng.Next(2, limit + 1));
							items.Add(item);
							sb.Append(" + ");
							if (item.amount > 1)
								sb.Append(item.amount).Append("x ");
							sb.Append(item.info.shortname);
							hasAmmo = true;
						} catch (Exception) {
							PrintWarning("Failed to obtain ammo item: "+ammo);
						}
					}
				}
			}
			foreach (var item in items)
				item.MoveToContainer(container.inventory, -1, false);
			container.inventory.MarkDirty();
			if (refresh)
				refreshList.Add(new ContainerToRefresh() { container = container, time = DateTime.UtcNow.AddMinutes(refreshMinutes) });
		}

		void OnEntitySpawned(BaseNetworkable entity) {
			if (!initialized)
				return;
			try {
				var container = entity as LootContainer;
				if (container == null)
					return;
				if (container.inventory == null || container.inventory.itemList == null) {
					return;
				}
				PopulateContainer(container);
			} catch (Exception ex) {
				PrintError("OnEntitySpawned failed: " + ex.Message);
			}
		}

		/*
		[ChatCommand("loot")]
		void cmdChatLoot(BasePlayer player, string command, string[] args) {
			if (!initialized)
			{
				SendReply(player, string.Format("Plugin not enabled."));
				return;
			}
			var sb = new StringBuilder();
			sb.Append("<size=22>BetterLoot</size> "+Version+" by <color=#ce422b>dcode/Fujikura</color>\n");
			sb.Append(_("A barrel drops up to %N% items, a chest up to %M% items.", new Dictionary<string,string>() {
				{ "N", maxItemsPerBarrel.ToString() },
				{ "M", maxItemsPerCrate.ToString() }
			})).Append("\n");
		   sb.Append(_("Base item rarity is %N%.", new Dictionary<string,string>() {
				{ "N", string.Format("{0:0.00}", baseItemRarity) }
			})).Append("\n");

			for (var i = 0; i < 4; ++i) {
				double prob = (1) * 100d * itemWeights[i] / totalItemWeight;
				sb.Append(_("There is a <color=#f4e75b>%P%%</color> chance to get one of %N% %RARITY% items.", new Dictionary<string, string>() {
					{ "P", string.Format("{0:0.000}", prob) },
					{ "N", items[i].Count.ToString() },
					{ "RARITY", _(RarityName(i)) }
				})).Append("\n");
			}
			SendReply(player, sb.ToString().TrimEnd());
		} */

		[ChatCommand("blacklist")]
		void cmdChatBlacklist(BasePlayer player, string command, string[] args) {
			string usage = "Usage: /blacklist [additem|deleteitem] \"ITEMNAME\"";
			if (!initialized)
			{
				SendReply(player, string.Format("Plugin not enabled."));
				return;
			}
			if (args.Length == 0) {
				if (storedBlacklist.ItemList.Count == 0) {
					SendReply(player, string.Format("There are no blacklisted items"));
				} else {
					var sb = new StringBuilder();
					foreach (var item in storedBlacklist.ItemList) {
						if (sb.Length > 0)
							sb.Append(", ");
						sb.Append(item);
					}
					SendReply(player, string.Format("Blacklisted items: {0}", sb.ToString()));
				}
				return;
			}
			if (!ServerUsers.Is(player.userID, ServerUsers.UserGroup.Owner)) {
				//SendReply(player, string.Format(lang.GetMessage("msgNotAuthorized", this, player.UserIDString)));
				SendReply(player, "You are not authorized to use this command");
				return;
			}
			if (args.Length != 2) {
				SendReply(player, usage);
				return;
			}
			if (args[0] == "additem") {
				if (!ItemExists(args[1])) {
					SendReply(player, string.Format("Not a valid item: {0}", args[1]));
					return;
				}
				if (!storedBlacklist.ItemList.Contains(args[1])) {
					storedBlacklist.ItemList.Add(args[1]);
					UpdateInternals(false);
					SendReply(player, string.Format("The item '{0}' is now blacklisted", args[1]));
					SaveBlacklist();
					return;
				} else {
					SendReply(player, string.Format("The item '{0}' is already blacklisted", args[1]));
					return;
				}
			}
			else if (args[0] == "deleteitem") {
				if (!ItemExists(args[1])) {
					SendReply(player, string.Format("Not a valid item: {0}", args[1]));
					return;
				}
				if (storedBlacklist.ItemList.Contains(args[1])) {
					storedBlacklist.ItemList.Remove(args[1]);
					UpdateInternals(false);
					SendReply(player, string.Format("The item '{0}' is now no longer blacklisted", args[1]));
					SaveBlacklist();
					return;
				} else {
					SendReply(player, string.Format("The item '{0}' is not blacklisted", args[1]));
					return;
				}
			}
			else {
				SendReply(player, usage);
				return;
			}
		}

		void OnItemAddedToContainer(ItemContainer container, Item item)
		{
			if (!initialized || !enforceBlacklist)
				return;
			try {
				var owner = item.GetOwnerPlayer();
				if (owner != null && (ServerUsers.Is(owner.userID, ServerUsers.UserGroup.Owner) || ServerUsers.Is(owner.userID, ServerUsers.UserGroup.Moderator)))
					return;
				if (storedBlacklist.ItemList.Contains(item.info.shortname)) {
					Puts(string.Format("Destroying item instance of '{0}'", item.info.shortname));
					item.RemoveFromContainer();
					item.Remove(0f);
				}
			} catch (Exception ex) {
				PrintError("OnItemAddedToContainer failed: " + ex.Message);
			}
		}

		#region Utility Methods

		static string ContainerName(LootContainer container)
		{
			var name = container.gameObject.name;
			name = name.Substring(name.LastIndexOf("/") + 1);
			name += "#" + container.gameObject.GetInstanceID();
			return name;
		}

		static int RarityIndex(Rarity rarity)
		{
			switch (rarity) {
				case Rarity.Common: return 0;
				case Rarity.Uncommon: return 1;
				case Rarity.Rare: return 2;
				case Rarity.VeryRare: return 3;
			}
			return -1;
		}

		static string RarityName(int index)
		{
			switch (index) {
				case 0: return "common";
				case 1: return "uncommon";
				case 2: return "rare";
				case 3: return "very rare";
			}
			return null;
		}

		bool ItemExists(string name)
		{
			foreach (var def in ItemManager.itemList) {
				if (def.shortname != name)
					continue;
				var testItem = ItemManager.CreateByName(name, 1);
				if (testItem != null) {
					testItem.Remove(0f);
					return true;
				}
			}
			return false;
		}

		bool IsWeapon(string name)
		{
			return weaponAmmunition.ContainsKey(name);
		}

		int ItemWeight(double baseRarity, int index)
		{
			return (int)(Math.Pow(baseRarity, 3 - index) * 1000); // Round to 3 decimals
		}

		string _(string text, Dictionary<string, string> replacements = null)
		{
			if (messages.ContainsKey(text) && messages[text] != null)
				text = messages[text];
			if (replacements != null)
				foreach (var replacement in replacements)
					text = text.Replace("%" + replacement.Key + "%", replacement.Value);
			return text;
		}

		bool isSupplyDropActive()
		{
			if (includeSupplyDrop) return true;
			return false;
		}

		#endregion

		class ContainerToRefresh
		{
			public LootContainer container;
			public DateTime time;
		}

		#region LootTable

		class StoredLootTable
		{
			public Dictionary<string, int> ItemList = new Dictionary<string, int>();

			public StoredLootTable()
			{
			}
		}

		void LoadLootTable()
		{
			storedLootTable = Interface.GetMod().DataFileSystem.ReadObject<StoredLootTable>("BetterLoot\\LootTable");
			if (storedLootTable.ItemList.Count == 0)
			{
				pluginEnabled = false;
				Config["Generic","pluginEnabled"]= pluginEnabled;
				Changed = true;
				PrintWarning("Plugin disabled, no table data found > Creating a new file.");
				storedLootTable = new StoredLootTable();
				List<ItemDefinition> defaultItemBlueprints = new List<ItemDefinition>();

				foreach( int num in ItemManager.defaultBlueprints)
					defaultItemBlueprints.Add(ItemManager.itemDictionary[num]);
				foreach(var bp in ItemManager.bpList.Where(p => !p.userCraftable).ToList())
					defaultItemBlueprints.Add(bp.targetItem);
				int stack = 0;
				foreach(var it in ItemManager.itemList.ToList())
				{
					if(!ItemExists(it.shortname)) continue;
					if(itemListExcludes.Contains(it.shortname)) continue;
					if(!defaultItemBlueprints.Contains(it))
					{
						if (it.category == ItemCategory.Weapon) stack = 1;
						if (it.category == ItemCategory.Ammunition) stack = 32;
						if (it.category == ItemCategory.Tool) stack = 1;
						if (it.category == ItemCategory.Traps) stack = 5;
						if (it.category == ItemCategory.Construction) stack = 5;
						if (it.category == ItemCategory.Attire) stack = 1;						
						if (it.category == ItemCategory.Resources) stack = 100;		
						if (it.category == ItemCategory.Food) stack = 10;	
						if (it.category == ItemCategory.Medical) stack = 5;							
						if (it.category == ItemCategory.Component) stack = 5;
						if (stack == 0) stack = 1;
						storedLootTable.ItemList.Add(it.shortname,stack);
					}
				}
				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\LootTable", storedLootTable);
				return;
			}
		}

		void SaveLootTable() => Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\LootTable", storedLootTable);

		#endregion LootTable
		
		#region SeparateLootTable

		class SeparateLootTable
		{
			public Dictionary<string, int> ItemListBarrels = new Dictionary<string, int>();
			public Dictionary<string, int> ItemListCrates = new Dictionary<string, int>();
			public SeparateLootTable()
			{
			}
		}

		void LoadSeparateLootTable()
		{
			separateLootTable = Interface.GetMod().DataFileSystem.ReadObject<SeparateLootTable>("BetterLoot\\LootTable");
			if (separateLootTable.ItemListBarrels.Count == 0 || separateLootTable.ItemListCrates.Count == 0)
			{
				var checkLootTable = Interface.GetMod().DataFileSystem.ReadObject<StoredLootTable>("BetterLoot\\LootTable");
				if (checkLootTable.ItemList.Count > 0)
				{
					separateLootTable.ItemListBarrels = checkLootTable.ItemList;
					separateLootTable.ItemListCrates = checkLootTable.ItemList;
					Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\LootTable", separateLootTable);
					return;
				}
				pluginEnabled = false;
				Config["Generic","pluginEnabled"]= pluginEnabled;
				Changed = true;
				PrintWarning("Plugin disabled, no table data found > Creating a new file.");
				separateLootTable = new SeparateLootTable();
				List<ItemDefinition> defaultItemBlueprints = new List<ItemDefinition>();

				foreach( int num in ItemManager.defaultBlueprints)
					defaultItemBlueprints.Add(ItemManager.itemDictionary[num]);
				foreach(var bp in ItemManager.bpList.Where(p => !p.userCraftable).ToList())
					defaultItemBlueprints.Add(bp.targetItem);
				int stack = 0;
				foreach(var it in ItemManager.itemList.ToList())
				{
					if(!ItemExists(it.shortname)) continue;
					if(itemListExcludes.Contains(it.shortname)) continue;
					if(!defaultItemBlueprints.Contains(it))
					{
						if (it.category == ItemCategory.Weapon) stack = 1;
						if (it.category == ItemCategory.Ammunition) stack = 32;
						if (it.category == ItemCategory.Tool) stack = 1;
						if (it.category == ItemCategory.Traps) stack = 5;
						if (it.category == ItemCategory.Construction) stack = 5;
						if (it.category == ItemCategory.Attire) stack = 1;						
						if (it.category == ItemCategory.Resources) stack = 100;		
						if (it.category == ItemCategory.Food) stack = 10;	
						if (it.category == ItemCategory.Medical) stack = 5;
						if (it.category == ItemCategory.Component) stack = 5;						
						if (stack == 0) stack = 1;
						separateLootTable.ItemListBarrels.Add(it.shortname,stack);
						separateLootTable.ItemListCrates.Add(it.shortname,stack);
					}
				}
				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\LootTable", separateLootTable);
				return;
			}
		}

		void SaveSeparateLootTable() => Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\LootTable", separateLootTable);

		#endregion SeparateLootTable

		#region ExportNames

		class StoredExportNames
		{
			public int version;
			public List<string> AllItemsAvailable = new List<string>();
			public Dictionary<string, int> ItemListStackable = new Dictionary<string, int>();
			public StoredExportNames()
			{
			}
		}

		void SaveExportNames()
		{
			storedExportNames = Interface.GetMod().DataFileSystem.ReadObject<StoredExportNames>("BetterLoot\\NamesList");
			if (storedExportNames.AllItemsAvailable.Count == 0 || (int)storedExportNames.version != Rust.Protocol.network)
			{
				storedExportNames = new StoredExportNames();
				var exportItems = new List<ItemDefinition>(ItemManager.itemList);
				storedExportNames.version = Rust.Protocol.network;
				foreach(var it in exportItems)
					if(ItemExists(it.shortname))
						storedExportNames.AllItemsAvailable.Add(it.shortname);
				int stack = 0;
				foreach(var it in exportItems.Where(p => p.stackable > 0))
					if(ItemExists(it.shortname))
					{
						if (it.category == ItemCategory.Weapon) stack = 1;
						if (it.category == ItemCategory.Ammunition) stack = 32;
						if (it.category == ItemCategory.Tool) stack = 1;
						if (it.category == ItemCategory.Traps) stack = 5;
						if (it.category == ItemCategory.Construction) stack = 5;
						if (it.category == ItemCategory.Attire) stack = 1;						
						if (it.category == ItemCategory.Resources) stack = 100;		
						if (it.category == ItemCategory.Food) stack = 10;	
						if (it.category == ItemCategory.Medical) stack = 5;
						if (it.category == ItemCategory.Component) stack = 5;							
						if (stack == 0) stack = 1;
						storedExportNames.ItemListStackable.Add(it.shortname,stack);
					}

				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\NamesList", storedExportNames);
				Puts($"Exported {storedExportNames.AllItemsAvailable.Count} items to 'NamesList'");
			}
		}

		#endregion ExportNames

		#region SupplyDrop

		class StoredSupplyDrop
		{
			public Dictionary<string, int> ItemList = new Dictionary<string, int>();

			public StoredSupplyDrop()
			{
			}
		}

		void LoadSupplyDrop()
		{
			storedSupplyDrop = Interface.GetMod().DataFileSystem.ReadObject<StoredSupplyDrop>("BetterLoot\\SupplyDrop");
			if (pluginEnabled && storedSupplyDrop.ItemList.Count > 0 && !includeSupplyDrop && !useCustomTableSupply)
				Puts("SupplyDrop > loot population is disabled by 'includeSupplyDrop'");
			if (pluginEnabled && storedSupplyDrop.ItemList.Count > 0 && !includeSupplyDrop && useCustomTableSupply)
				Puts("SupplyDrop > 'useCustomTableSupply' enabled, but loot population inactive by 'includeSupplyDrop'");
			if (storedSupplyDrop.ItemList.Count == 0)
			{
				includeSupplyDrop = false;
				Config["SupplyDrop","includeSupplyDrop"]= includeSupplyDrop;
				Changed = true;
				PrintWarning("SupplyDrop > table not found, option disabled by 'includeSupplyDrop' > Creating a new file.");
				storedSupplyDrop = new StoredSupplyDrop();
				List<ItemDefinition> defaultItemBlueprints = new List<ItemDefinition>();

				foreach( int num in ItemManager.defaultBlueprints)
					defaultItemBlueprints.Add(ItemManager.itemDictionary[num]);
				foreach(var bp in ItemManager.bpList.Where(p => !p.userCraftable).ToList())
					defaultItemBlueprints.Add(bp.targetItem);

				int stack = 0;
				foreach(var it in ItemManager.itemList.Where(p => p.category == ItemCategory.Weapon || p.category == ItemCategory.Ammunition || p.category == ItemCategory.Tool || p.category == ItemCategory.Traps || p.category == ItemCategory.Construction || p.category == ItemCategory.Attire || p.category == ItemCategory.Resources).ToList())
				{
					if(!ItemExists(it.shortname)) continue;
					if(itemListExcludes.Contains(it.shortname)) continue;
					if(!defaultItemBlueprints.Contains(it))
					{
						if (it.category == ItemCategory.Weapon) stack = 1;
						if (it.category == ItemCategory.Ammunition) stack = 32;
						if (it.category == ItemCategory.Tool) stack = 1;
						if (it.category == ItemCategory.Traps) stack = 5;
						if (it.category == ItemCategory.Construction) stack = 5;
						if (it.category == ItemCategory.Attire) stack = 1;						
						if (it.category == ItemCategory.Resources) stack = 100;		
						if (it.category == ItemCategory.Food) stack = 10;	
						if (it.category == ItemCategory.Medical) stack = 5;
						if (it.category == ItemCategory.Component) stack = 5;							
						if (stack == 0) stack = 1;
						storedSupplyDrop.ItemList.Add(it.shortname,stack);
					}
				}
				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\SupplyDrop", storedSupplyDrop);
				return;
			}
		}

		void SaveSupplyDrop() => Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\SupplyDrop", storedSupplyDrop);

		#endregion SupplyDrop

		#region HeliCrate

		class StoredHeliCrate
		{
			public Dictionary<string, int> ItemList = new Dictionary<string, int>();

			public StoredHeliCrate()
			{
			}
		}

		void LoadHeliCrate()
		{
			storedHeliCrate = Interface.GetMod().DataFileSystem.ReadObject<StoredHeliCrate>("BetterLoot\\HeliCrate");
			if (pluginEnabled && storedHeliCrate.ItemList.Count > 0 && excludeHeliCrate && !useCustomTableHeli)
				Puts("HeliCrate > loot population is disabled by 'excludeHeliCrate'");
			if (pluginEnabled && storedHeliCrate.ItemList.Count > 0 && excludeHeliCrate && useCustomTableHeli)
				Puts("HeliCrate > 'useCustomTableHeli' enabled, but loot population inactive by 'excludeHeliCrate'");
			if (storedHeliCrate.ItemList.Count == 0)
			{
				excludeHeliCrate = true;
				Config["HeliCrate","excludeHeliCrate"]= excludeHeliCrate;
				Changed = true;
				PrintWarning("HeliCrate > table not found, option disabled by 'excludeHeliCrate' > Creating a new file.");
				storedHeliCrate = new StoredHeliCrate();
				List<ItemDefinition> defaultItemBlueprints = new List<ItemDefinition>();
				foreach( int num in ItemManager.defaultBlueprints)
				defaultItemBlueprints.Add(ItemManager.itemDictionary[num]);
				foreach(var bp in ItemManager.bpList.Where(p => !p.userCraftable).ToList())
					defaultItemBlueprints.Add(bp.targetItem);

				int stack = 0;
				foreach(var it in ItemManager.itemList.Where(p => p.category == ItemCategory.Weapon || p.category == ItemCategory.Ammunition || p.category == ItemCategory.Tool).ToList())
				{
					if(!ItemExists(it.shortname)) continue;
					if(itemListExcludes.Contains(it.shortname)) continue;
					if(!defaultItemBlueprints.Contains(it))
					{
						if (it.category == ItemCategory.Weapon) stack = 1;
						if (it.category == ItemCategory.Ammunition) stack = 32;
						if (it.category == ItemCategory.Tool) stack = 1;
						if (it.category == ItemCategory.Traps) stack = 5;
						if (it.category == ItemCategory.Construction) stack = 5;
						if (it.category == ItemCategory.Attire) stack = 1;						
						if (it.category == ItemCategory.Resources) stack = 100;		
						if (it.category == ItemCategory.Food) stack = 10;	
						if (it.category == ItemCategory.Medical) stack = 5;							
						if (it.category == ItemCategory.Component) stack = 5;	
						if (stack == 0) stack = 1;
						storedHeliCrate.ItemList.Add(it.shortname,stack);
					}
				}
				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\HeliCrate", storedHeliCrate);
				return;
			}
		}

		void SaveHeliCrate() => Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\HeliCrate", storedHeliCrate);

		#endregion HeliCrate

		#region Blacklist

		class StoredBlacklist
		{
			public List<string> ItemList = new List<string>();

			public StoredBlacklist()
			{
			}
		}

		void LoadBlacklist()
		{
			storedBlacklist = Interface.GetMod().DataFileSystem.ReadObject<StoredBlacklist>("BetterLoot\\Blacklist");
			if (storedBlacklist.ItemList.Count == 0)
			{
				Puts("No Blacklist found, creating new file...");
				storedBlacklist = new StoredBlacklist();
				storedBlacklist.ItemList.Add("flare");
				Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\Blacklist", storedBlacklist);
				return;
			}
		}

		void SaveBlacklist() => Interface.GetMod().DataFileSystem.WriteObject("BetterLoot\\Blacklist", storedBlacklist);

		#endregion Blacklist

		#region Reload

		[ConsoleCommand("betterloot.reload")]
		void consoleReload(ConsoleSystem.Arg arg)
		{
			if(arg.connection != null && arg.connection.authLevel < 2) return;
			try { Config.Load(); }
			catch { LoadDefaultConfig(); }
			LoadVariables();
			UpdateInternals(true);
		}

		#endregion Reload
	}
}


// --- End of file: BetterLoot.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQDailyStep.cs ---
// --- Original Local Path: IQDailyStep.cs ---

using ConVar;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using System.Collections;

namespace Oxide.Plugins
{
    [Info("IQDailyStep", "SkuliDropek", "0.0.5")]
    [Description("Ежедневные награды")]
    class IQDailyStep : RustPlugin
    {
        #region Reference
        [PluginReference] Plugin IQChat, IQEconomic, IQCases, ImageLibrary, RustStore;
        public void SendChat(string Message, BasePlayer player, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            var Chat = config.GeneralSetting.ChatSettings;
            if (IQChat)
                if (Chat.UIAlertUse)
                    IQChat?.Call("API_ALERT_PLAYER_UI", player, Message);
                else IQChat?.Call("API_ALERT_PLAYER", player, Message, Chat.CustomPrefix, Chat.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        private string GetImage(string fileName, ulong skin = 0)
        {
            var imageId = (string)plugins.Find("ImageLibrary").CallHook("GetImage", fileName, skin);
            if (!string.IsNullOrEmpty(imageId))
                return imageId;
            return string.Empty;
        }
        public bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);
        public void AddAllImage()
        {
            var Images = config.InterfaceSetting;
            if (string.IsNullOrEmpty(Images.BackgroundURL))
                PrintError("Не найдена ссылка на задний фон!");
            if (!ImageLibrary)
            {
                PrintError("Не установлен плагин ImageLibrary!");
                return;
            }
            AddImage(Images.BackgroundURL, "BACKGROUND_IMG");
            for (int Day = 0; Day < config.Days.Count; Day++)
            {
                AddImage(config.Days[Day].ImageLink, $"DAY_{Day}");
                AddImage(config.Days[Day].ImageLinkAccess, $"DAY_ACCESS_{Day}");
                for (int Item = 0; Item < config.Days[Day].Rewards.Count; Item++)
                {
                    var Reward = config.Days[Day].Rewards[Item];
                    if (Reward.UseCommand)
                        AddImage(Reward.CommandSettings.CommandPNG, $"DAY_{Day}_COMMAND_{Item}");
                    if (Reward.UseItem)
                        AddImage(Reward.PNGItemRust, $"DAY_{Day}_ITEM_{Item}");
                    if (Reward.UseStores)
                        AddImage(Reward.PNGStoreBalance, $"DAY_{Day}_BALANCE_{Item}");
                }
            }
            Puts("Изображения загружены успешно");
        }
        public string GetImageReward(int Day, int ItemIndex)
        {
            var Item = config.Days[Day].Rewards[ItemIndex];
            if (Item.UseCommand)
                return $"DAY_{Day}_COMMAND_{ItemIndex}";
            if (Item.UseItem)
                return $"DAY_{Day}_ITEM_{ItemIndex}";
            if (Item.UseStores)
                return $"DAY_{Day}_BALANCE_{ItemIndex}";
            if (Item.UseIQCases)
                if (IQCASE_EXIST(Item.IQCasesSettings.KeyCase))
                    return Item.IQCasesSettings.KeyCase;
            if (Item.UseIQEconomic)
                return IQEconomicGetIL();
            return "null";
        }
        string IQEconomicGetIL() { 
            return (string)IQEconomic?.Call("API_GET_MONEY_IL"); }
        void IQCasesGiveCase(ulong userID, string CaseKey, int Amount)
        {
            if (!IQCases)
            {
                PrintError("У вас установлена выдача кейса IQCases,но не установлен плагин!\nВыдача награды будетн неккоректна!");
                return;
            }
            if (!IQCASE_EXIST(CaseKey))
            {
                PrintError($"{CaseKey} - данного кейса не найдено в IQCases.Проверьте введенные вами данные в плагине!");
                return;
            }
            IQCases?.Call("API_GIVE_CASE", userID, CaseKey, Amount);
        }
        bool IQCASE_EXIST(string CaseKey)
        {
            if (!(bool)IQCases?.Call("API_IS_CASE_EXIST", CaseKey))
                return false;
            else 
                return true;
        }
        void IQEconomicBalanceSet(ulong userID,int Balance)
        {
            if(!IQEconomic)
            {
                PrintError("У вас установлена выдача баланса IQEconomic,но не установлен плагин!\nВыдача награды будетн неккоректна!");
                return;
            }
            IQEconomic?.Call("API_SET_BALANCE", userID, Balance);
        }
        public void MoscovOVHBalanceSet(ulong userID, int Balance)
        {
            if (!RustStore)
            {
                PrintWarning("У вас не установлен магазин MoscovOVH");
                return;
            }
            plugins.Find("RustStore").CallHook("APIChangeUserBalance", userID, Balance, new Action<string>((result) =>
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (result == "SUCCESS") return;
                Puts($"Пользователь {userID} не авторизован в магазине");
            }));
        }
        public void GameStoresBalanceSet(ulong userID, int Balance)
        {
            var GameStores = config.GeneralSetting.GameStoresSettings;
            if (String.IsNullOrEmpty(GameStores.GameStoresAPIStore) || String.IsNullOrEmpty(GameStores.GameStoresIDStore))
            {
                PrintWarning("Магазин GameStores не настроен! Невозможно выдать баланс пользователю");
                return;
            }
            webrequest.Enqueue($"https://gamestores.ru/api?shop_id={GameStores.GameStoresIDStore}&secret={GameStores.GameStoresAPIStore}&action=moneys&type=plus&steam_id={userID}&amount={Balance}&mess={GameStores.GameStoresMessage}", null, (i, s) =>
            {
                BasePlayer player = BasePlayer.FindByID(userID);
                if (i != 200) { }
                if (s.Contains("success")) return;
                if (s.Contains("fail"))
                {
                    Puts($"Пользователь {userID} не авторизован в магазине");
                    return;
                }
            }, this);
        }

        #endregion

        #region Configuration
        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Настройка дней")]
            public List<DaySetting> Days = new List<DaySetting>();
            [JsonProperty("Настройка плагина")]
            public GeneraldSettings GeneralSetting = new GeneraldSettings();
            [JsonProperty("Настройка интерфейса")]
            public InterfaceSettings InterfaceSetting = new InterfaceSettings();

            #region GeneralSetting
            public class GeneraldSettings
            {
                [JsonProperty("MoscovOVH : Включить использование магазина(Должен быть включен обмен валют)")]
                public bool MoscovOvhUse;
                [JsonProperty("GameStores : Включить использование магазина(Должен быть включен обмен валют)")]
                public bool GameStoreshUse;
                [JsonProperty("GameStores : Настройки магазина GameStores")]
                public GameStores GameStoresSettings = new GameStores();
                [JsonProperty("IQChat : Настройки чата")]
                public ChatSetting ChatSettings = new ChatSetting();
                internal class ChatSetting
                {
                    [JsonProperty("IQChat : Кастомный префикс в чате")]
                    public string CustomPrefix;
                    [JsonProperty("IQChat : Кастомный аватар в чате(Если требуется)")]
                    public string CustomAvatar;
                    [JsonProperty("IQChat : Использовать UI уведомления")]
                    public bool UIAlertUse;
                }
                internal class GameStores
                {
                    [JsonProperty("API Магазина(GameStores)")]
                    public string GameStoresAPIStore;
                    [JsonProperty("ID Магазина(GameStores)")]
                    public string GameStoresIDStore;
                    [JsonProperty("Сообщение в магазин при выдаче баланса(GameStores)")]
                    public string GameStoresMessage;
                }
            }

            #endregion

            #region DaysSettings
            internal class DaySetting
            {
                [JsonProperty("Настройка награды")]
                public List<RewardSetting> Rewards = new List<RewardSetting>();
                [JsonProperty("Ссылка на картинку")]
                public string ImageLink;
                [JsonProperty("Ссылка на картинку в случае,если награда взята(Галочка)")]
                public string ImageLinkAccess;
                [JsonProperty("День")]
                public string Day;
                internal class RewardSetting
                {
                    [JsonProperty("Использовать предметы RUST'a")]
                    public bool UseItem;
                    [JsonProperty("Использовать команды")]
                    public bool UseCommand;
                    [JsonProperty("Использовать баланс на магазин")]
                    public bool UseStores;
                    [JsonProperty("Использовать валюты с IQEconomic.Картинка будет подставляться с плагина сама(Если есть плагин IQEconomic)")]
                    public bool UseIQEconomic;
                    [JsonProperty("Использовать кейсы с IQCases.Картинка будет подставляться с плагина сама(Если есть)")]
                    public bool UseIQCases;
                    [JsonProperty("Настройка предметов RUST'a")]
                    public List<ItemSetting> ItemSettings = new List<ItemSetting>();
                    [JsonProperty("Ссылка на картинку для набора предметов RUST'a")]
                    public string PNGItemRust;
                    [JsonProperty("Сколько баланса выдавать в магазин")]
                    public int CountMoneyStore;
                    [JsonProperty("Ссылка на картинку для иконки баланса с магазина")]
                    public string PNGStoreBalance;
                    [JsonProperty("Настройка IQCases(Если такой плагин имеется)")]
                    public IQCasesSetting IQCasesSettings = new IQCasesSetting();
                    [JsonProperty("Сколько монет выдавать IQEconomic(Если такой плагин имеется)")]
                    public int AmountEconomic;
                    [JsonProperty("Настройка команды")]
                    public CommandSetting CommandSettings = new CommandSetting();
                    internal class ItemSetting
                    {
                        [JsonProperty("DisplayName (Если требуется для кастомного предмета,в ином случае оставляйте пустым)")]
                        public string DisplayName;
                        [JsonProperty("Shortname")]
                        public string Shortname;
                        [JsonProperty("SkinID")]
                        public ulong SkinID;
                        [JsonProperty("Количество")]
                        public int Amount;
                    }
                    internal class IQCasesSetting
                    {
                        [JsonProperty("Ключ от кейса(к примеру freecase)")]
                        public string KeyCase;
                        [JsonProperty("Количество")]
                        public int Amount;
                    }
                    internal class CommandSetting
                    {
                        [JsonProperty("Команда")]
                        public string Command;
                        [JsonProperty("Картинка для команды")]
                        public string CommandPNG;
                    }
                }
            }
            #endregion

            #region InterfaceSettings
            internal class InterfaceSettings
            {
                [JsonProperty("Ссылка на задний фон")]
                public string BackgroundURL;
                [JsonProperty("Включить задний фон")]
                public bool UseBackground;
            }
            #endregion

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    #region GeneralSettings
                    GeneralSetting = new GeneraldSettings
                    {
                        GameStoreshUse = false,
                        MoscovOvhUse = true,
                        GameStoresSettings = new GeneraldSettings.GameStores
                        {
                            GameStoresAPIStore = "",
                            GameStoresIDStore = "",
                            GameStoresMessage = "",
                        },
                        ChatSettings = new GeneraldSettings.ChatSetting
                        {
                            UIAlertUse = false,
                            CustomAvatar = "",
                            CustomPrefix = ""
                        }
                    },
                    #endregion

                    #region RewardSettings

                    Days = new List<DaySetting>
                    {
                        new DaySetting
                        {
                            Day = "1 ДЕНЬ",
                            ImageLinkAccess = "https://i.imgur.com/8A7OQ4X.png",
                            ImageLink = "https://i.imgur.com/6zWWX2N.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = false,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = false,
                                    UseStores = false,
                                    UseIQCases = false,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {

                                    }
                                },
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = false,
                                    UseItem = true,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = false,
                                    UseStores = false,
                                    UseIQCases = false,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                },
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = false,
                                    UseItem = false,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = true,
                                    UseStores = false,
                                    UseIQCases = false,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {

                                    }
                                },
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = false,
                                    UseItem = false,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = false,
                                    UseStores = false,
                                    UseIQCases = true,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {

                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "2 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/OqPXvRh.png",
                            ImageLinkAccess = "https://i.imgur.com/66fsczj.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = false,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = false,
                                    UseStores = true,
                                    UseIQCases = false,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "3 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/DJR1xPh.png",
                            ImageLinkAccess = "https://i.imgur.com/mCXhiap.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = true,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = true,
                                    UseStores = true,
                                    UseIQCases = true,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "4 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/p2Xgdog.png",
                            ImageLinkAccess = "https://i.imgur.com/ffdLwcr.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = true,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = true,
                                    UseStores = true,
                                    UseIQCases = true,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "5 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/XO3xVoZ.png",
                            ImageLinkAccess = "https://i.imgur.com/Kp90WoJ.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = true,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = true,
                                    UseStores = true,
                                    UseIQCases = true,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "6 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/L9GrCmr.png",
                            ImageLinkAccess = "https://i.imgur.com/t9kh9No.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = true,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = true,
                                    UseStores = true,
                                    UseIQCases = true,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                        new DaySetting
                        {
                            Day = "7 ДЕНЬ",
                            ImageLink = "https://i.imgur.com/iehQzIo.png",
                            ImageLinkAccess = "https://i.imgur.com/LoV71NL.png",
                            Rewards = new List<DaySetting.RewardSetting>
                            {
                                new DaySetting.RewardSetting
                                {
                                    UseCommand = true,
                                    UseItem = false,
                                    PNGItemRust = "https://i.imgur.com/4valKsh.png",
                                    PNGStoreBalance = "https://i.imgur.com/Pe2VmPZ.png",
                                    UseIQEconomic = false,
                                    UseStores = false,
                                    UseIQCases = false,
                                    AmountEconomic = 10,
                                    CountMoneyStore = 10,
                                    CommandSettings = new DaySetting.RewardSetting.CommandSetting
                                    {
                                        Command = "say 123 %STEAMID%",
                                        CommandPNG = "https://i.imgur.com/n6Pyc5F.png",
                                    },
                                    IQCasesSettings = new DaySetting.RewardSetting.IQCasesSetting
                                    {
                                        KeyCase = "freecase",
                                        Amount = 1,
                                    },
                                    ItemSettings = new List<DaySetting.RewardSetting.ItemSetting>
                                    {
                                       new DaySetting.RewardSetting.ItemSetting
                                       {
                                           DisplayName = "",
                                           Shortname = "rifle.ak",
                                           Amount = 1,
                                           SkinID = 0,
                                       },
                                        new DaySetting.RewardSetting.ItemSetting
                                        {
                                            DisplayName = "",
                                            Shortname = "scrap",
                                            Amount = 100,
                                            SkinID = 0,
                                        },
                                         new DaySetting.RewardSetting.ItemSetting
                                         {
                                             DisplayName = "Калаш убийца",
                                             Shortname = "rifle.ak",
                                             Amount = 1,
                                             SkinID = 1337,
                                         },
                                    }
                                }
                            }
                        },
                    },

                    #endregion
                        
                    #region InterfaceSetting
                    InterfaceSetting = new InterfaceSettings
                    {
                        BackgroundURL = "https://i.imgur.com/VfYWeo4.png",
                        UseBackground = true,
                    }
                    #endregion
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка чтения #57 конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        #region Data
        [JsonProperty("Дата с днями игроков")]
        public Dictionary<ulong, Dictionary<int, bool>> DataPlayer = new Dictionary<ulong, Dictionary<int, bool>>();

        void ReadData()
        {
            DataPlayer = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Dictionary<int, bool>>>("IQDailyStep/IQUser");
        }
        void WriteData() {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQDailyStep/IQUser", DataPlayer);
        }
        void RegisteredDataUser(BasePlayer player)
        {
            if (!DataPlayer.ContainsKey(player.userID))
                DataPlayer.Add(player.userID, new Dictionary<int, bool>
                {
                    [DateTime.Now.Day] = false,
                    [DateTime.Now.AddDays(1).Day] = false,
                    [DateTime.Now.AddDays(2).Day] = false,
                    [DateTime.Now.AddDays(3).Day] = false,
                    [DateTime.Now.AddDays(4).Day] = false,
                    [DateTime.Now.AddDays(5).Day] = false,
                    [DateTime.Now.AddDays(6).Day] = false,
                });
            else
            {
                if (!DataPlayer[player.userID].ContainsKey(DateTime.Now.Day))
                {
                    DataPlayer.Remove(player.userID);
                    DataPlayer.Add(player.userID, new Dictionary<int, bool>
                    {
                        [DateTime.Now.Day] = false,
                        [DateTime.Now.AddDays(1).Day] = false,
                        [DateTime.Now.AddDays(2).Day] = false,
                        [DateTime.Now.AddDays(3).Day] = false,
                        [DateTime.Now.AddDays(4).Day] = false,
                        [DateTime.Now.AddDays(5).Day] = false,
                        [DateTime.Now.AddDays(6).Day] = false,
                    });
                    Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQDailyStep/IQUser", DataPlayer);

                    return;
                }

                if (DataPlayer[player.userID].Count(x => x.Value == true) >= 1)
                {
                    int BackDay = DateTime.Now.Day - 1;
                    if (DataPlayer[player.userID].ContainsKey(BackDay))// ?????????????????
                        if (DataPlayer[player.userID][BackDay] == false)
                        {
                            DataPlayer.Remove(player.userID);
                            return;
                        }
                }

                if (DataPlayer[player.userID][DateTime.Now.Day])
                    return;
            }
        }

        #endregion

        #region Command

        [ChatCommand("day")]
        void DayilyMenuOpen(BasePlayer player)
        {
            Interface_Daily(player);
        }

        List<ulong> StopSpam = new List<ulong>();
        [ConsoleCommand("daily")]
        void ConsoleCommandDayTake(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            switch(arg.Args[0].ToLower())
            {
                case "take":
                    {
                        if (StopSpam.Contains(player.userID)) return;
                        int Day = Convert.ToInt32(arg.Args[1]);
                        int ThisDay = Convert.ToInt32(arg.Args[2]);
                        Interface_Days_Take(player, Day, ThisDay);
                        StopSpam.Add(player.userID);
                        break;
                    }
            }
        }

        #endregion
            
        #region Hooks
        void OnPlayerConnected(BasePlayer player)
        {
            RegisteredDataUser(player);
            Interface_Daily(player);
        }

        private void OnServerInitialized()
        {
            ReadData();
            //foreach (var p in BasePlayer.activePlayerList)
            //    OnPlayerConnected(p);
            WriteData();
            AddAllImage();
        }

        void Unload()
        {
            foreach (var p in BasePlayer.activePlayerList)
                CuiHelper.DestroyUi(p, UI_MAIN_UI_STEP);

            UI_MAIN_UI_STEP = null;
            UI_MAIN_UI_STEP_TAKE = null;
            WriteData();
        }
        #endregion

        #region Metods

        void GiveReward(BasePlayer player,int Day)
        {
            var DaysReward = config.Days[Day].Rewards;
            for(int i = 0; i < DaysReward.Count; i++)
            {
                var Reward = DaysReward[i];

                if(Reward.UseCommand)
                    rust.RunServerCommand(Reward.CommandSettings.Command.Replace("%STEAMID%", player.UserIDString));
                if(Reward.UseItem)
                {
                    for(int j = 0; j < Reward.ItemSettings.Count; j++)
                    {
                        var RewardItem = Reward.ItemSettings[j];
                        var ItemReward = ItemManager.CreateByName(RewardItem.Shortname, RewardItem.Amount, RewardItem.SkinID);
                        if (!string.IsNullOrEmpty(RewardItem.DisplayName))
                            ItemReward.name = RewardItem.DisplayName;
                        player.GiveItem(ItemReward);
                    }
                }
                if (Reward.UseIQEconomic)
                    IQEconomicBalanceSet(player.userID, Reward.AmountEconomic);
                if(Reward.UseIQCases)
                {
                    var IQCases = Reward.IQCasesSettings;
                    IQCasesGiveCase(player.userID, IQCases.KeyCase, IQCases.Amount);
                }
                if (Reward.UseStores)
                {
                    var General = config.GeneralSetting;
                    if(General.GameStoreshUse)
                        GameStoresBalanceSet(player.userID, Reward.CountMoneyStore);
                    if(General.MoscovOvhUse)
                        MoscovOVHBalanceSet(player.userID, Reward.CountMoneyStore);
                }
            }
        }
        #endregion

        #region UI
        public static string UI_MAIN_UI_STEP = "UI_MAIN_UI_STEP";
        public static string UI_MAIN_UI_STEP_TAKE = "UI_MAIN_UI_STEP_TAKE";

        #region InterfaceDaily
        void Interface_Daily(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, UI_MAIN_UI_STEP);
            if(!DataPlayer.ContainsKey(player.userID))
            {
                RegisteredDataUser(player);
                return;
            }

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                FadeOut = 0.15f,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { FadeIn = 0.15f, Color = "0 0 0 0" }
            }, "Overlay", UI_MAIN_UI_STEP);

            if (config.InterfaceSetting.UseBackground)
            {
                container.Add(new CuiElement
                {
                    Parent = UI_MAIN_UI_STEP,
                    Components =
                {
                    new CuiRawImageComponent { Png = GetImage("BACKGROUND_IMG") },
                    new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = $"1 1"},
                }
                });
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Close = UI_MAIN_UI_STEP, Color = "0 0 0 0" },
                Text = { Text = "" }
            },  UI_MAIN_UI_STEP);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.90371398", AnchorMax = "1 1" }, //
                Text = { Text = lang.GetMessage("UI_TITLE", this, player.UserIDString), Color = HexToRustFormat("#FFFFFF99"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, UI_MAIN_UI_STEP);

            container.Add(new CuiLabel  
            {
                RectTransform = { AnchorMin = "0 0.8824", AnchorMax = "1 0.9251398" },//
                Text = { Text = lang.GetMessage("UI_DESCRIPTION", this, player.UserIDString), Color = HexToRustFormat("#FFFFFF99"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, UI_MAIN_UI_STEP);

            #region CenterFunc

            int ItemCount = 0;
            float itemMinPosition = 219f;
            float itemWidth = 0.413646f - 0.18f; /// Ширина
            float itemMargin = 0.409895f - 0.41f; /// Расстояние между 
            int itemCount = 7;
            float itemMinHeight = 0.45f; // Сдвиг по вертикали
            float itemHeight = 0.44f; /// Высота
            int ItemTarget = 4;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;

            #endregion

            int Day = 0;
            //for(int Day = 0; Day < 7; Day++)
            foreach(var Data in DataPlayer[player.userID])
            {
                //       var Data = DataPlayer[player.userID].ElementAt(Day);
                //if (Data == null) continue;
                int ThisDay = DateTime.Now.Day;

                string HEX = ThisDay == Data.Key ? "#FFFFFFFF" : "#FFFFFF99";

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    Image = {  Color = "0 0 0 0" }
                },  UI_MAIN_UI_STEP , $"DAY_{Day}");

                container.Add(new CuiElement
                {
                    Parent = $"DAY_{Day}",
                    Components =
                        {       
                        new CuiRawImageComponent { Png = GetImage($"DAY_{Day}"), Color = HexToRustFormat(HEX) },
                        new CuiRectTransformComponent{  AnchorMin = $"0 0", AnchorMax = $"1 1" },
                        }
                });

                if (Data.Value)
                {
                    container.Add(new CuiElement
                    {
                        Parent = $"DAY_{Day}",
                        Components =
                        {
                        new CuiRawImageComponent { Png = GetImage($"DAY_ACCESS_{Day}") },
                        new CuiRectTransformComponent{ AnchorMin = "0.3 0.35", AnchorMax = "0.7 0.7"  },
                        }
                    });
                }
                                
                if (ThisDay == Data.Key && !Data.Value)
                {
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0.2 0.2", AnchorMax = "0.8 0.88" },
                        Button = { Command = $"daily take {Day} {ThisDay}", Color = "0 0 0 0" },
                        Text = { Text = "" }
                    }, $"DAY_{Day}");
                }

                #region CenterFunc

                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 2f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }

                #endregion

                Day++;
                if (Day >= 7)
                    break;
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8817708 0.9416667", AnchorMax = "1 1" },
                Button = { Close = UI_MAIN_UI_STEP, Color = "0 0 0 0" },
                Text = { Text = lang.GetMessage("UI_CLOSE", this, player.UserIDString) }
            }, UI_MAIN_UI_STEP);

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region InterfaceDaysTake
        void Interface_Days_Take(BasePlayer player,int Day, int ThisDay)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, UI_MAIN_UI_STEP_TAKE);

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                FadeOut = 0.15f,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#282721E6"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            },  UI_MAIN_UI_STEP, UI_MAIN_UI_STEP_TAKE);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.9037037", AnchorMax = "1 1" },
                Text = { Text = String.Format(lang.GetMessage("UI_PRIZES", this, player.UserIDString), config.Days[Day].Day), Color = HexToRustFormat("#FFFFFF99"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            },  UI_MAIN_UI_STEP_TAKE);

            CuiHelper.AddUi(player, container);

            GiveReward(player, Day);
            DataPlayer[player.userID][ThisDay] = true;
            RunEffect(player, "assets/bundled/prefabs/fx/impacts/blunt/cloth/cloth1.prefab");
            ServerMgr.Instance.StartCoroutine(AnimationItems(player, Day));
            if (StopSpam.Contains(player.userID))
                StopSpam.Remove(player.userID);
        }

        #endregion

        #region AnimationItems

        public IEnumerator AnimationItems(BasePlayer player, int Day)
        {
            var Items = config.Days[Day].Rewards;

            #region CenterFunc

            int ItemCount = 0;
            float itemMinPosition = 219f;
            float itemWidth = 0.413646f - 0.18f; /// Ширина
            float itemMargin = 0.409895f - 0.38f; /// Расстояние между 
            int itemCount = Items.Count;
            float itemMinHeight = 0.5f; // Сдвиг по вертикали
            float itemHeight = 0.4f; /// Высота
            int ItemTarget = 3;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;

            #endregion

            for (int i = 0; i < Items.Count; i++)
            {
                CuiElementContainer container = new CuiElementContainer();

                container.Add(new CuiPanel
                {
                    CursorEnabled = true,
                    FadeOut = 0.15f,
                    RectTransform = { AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    Image = { FadeIn = 0.15f, Color = HexToRustFormat("#282721E6"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
                }, UI_MAIN_UI_STEP_TAKE, $"ITEM_{i}");

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{i}",
                    Components =
                        {
                        new CuiRawImageComponent { Png = GetImage(GetImageReward(Day, i))},
                        new CuiRectTransformComponent{  AnchorMin = "0.05263162 0.03859329", AnchorMax = "0.9473684 0.9333" }, //1398
                        }
                });

                #region CenterFunc

                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 2f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }

                #endregion

                CuiHelper.AddUi(player, container);
                yield return new WaitForSeconds(0.5f);
            }

            timer.Once(3f, () => { 
                Interface_Daily(player);
            });
        }

        #endregion

        #endregion

        #region Lang
        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_TITLE"] = "<size=30><b>DAILY AWARDS OF THE COOL SERVER</b></size>",
                ["UI_DESCRIPTION"] = "<size=18>IF YOU MISS ONE DAY - EVERYTHING WILL START FROM THE BEGINNING</size>",
                ["UI_PRIZES"] = "<size=30><b>YOU HAVE SUCCESSFULLY TAKEN {0}</b></size>",
                ["UI_CLOSE"] = "<size=30><b>CLOSE</b></size>",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UI_TITLE"] = "<size=30><b>ЕЖЕДНЕВНЫЕ НАГРАДЫ КРУТОГО СЕРВЕРА</b></size>",
                ["UI_DESCRIPTION"] = "<size=18>ЕСЛИ ВЫ ПРОПУСТИТЕ ОДИН ДЕНЬ - ВСЕ НАЧНЕТСЯ С НАЧАЛА</size>",
                ["UI_PRIZES"] = "<size=30><b>ВЫ УСПЕШНО ЗАБРАЛИ {0}</b></size>",
                ["UI_CLOSE"] = "<size=30><b>ЗАКРЫТЬ</b></size>",
            }, this, "ru");
            PrintWarning("Языковой файл загружен успешно");
        }
        #endregion

        #region Helps
        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        void RunEffect(BasePlayer player, string path)
        {
            Effect effect = new Effect();
            effect.Init(Effect.Type.Generic, player.transform.position, player.transform.forward, (Network.Connection)null);
            effect.pooledString = path; EffectNetwork.Send(effect, player.net.connection);
        }
        #endregion

        #region API

        public bool IsDay(ulong userID, int Day)
        {
            if (DataPlayer.ContainsKey(userID))
                if (DataPlayer[userID].ContainsKey(Day))
                    if (DataPlayer[userID][Day])
                        return true;
                    else return false;
                else return false;
            else return false;
        }

        Int32 GetPlayerDays(UInt64 userID)
        {
            Int32 Days = 0;
            if (!DataPlayer.ContainsKey(userID))
                return Days;
            Days = DataPlayer[userID].Count(x => x.Value);
            return Days;
        }

        #endregion
    }
}


// --- End of file: IQDailyStep.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Report.cs ---
// --- Original Local Path: Report.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Report", "https://topplugin.ru/", "1.0.0")]
    public class Report : RustPlugin
    {
		#region Configuration
		
		private Configuration config;
		private class Configuration
		{
			[JsonProperty("Основания для жалобы", Order = 0)]
			public List <string> Reason = new List <string>();			
			
			[JsonProperty("Кнопки с основанием - ширина кнопки", Order = 1)]
			public float ReasonSizeX;	
			[JsonProperty("Кнопки с основанием - отступ между кнопками", Order = 2)]
			public float ReasonSepX;	
			[JsonProperty("VK - AccessToken для отправки сообщений", Order = 3)]
			public  string AccessToken="";
			[JsonProperty("VK - ID чата сервера, пользователя или групповой беседы. Для отправки нескольким укажите id через запятую", Order = 4)]
			public  string VKServerID="";
			[JsonProperty("Оповещать администрацию если количество жалоб больше чем:", Order = 5)]
			public  int reportCount=0;
			
			public static Configuration GetNewConfiguration(){
				Configuration newConfig = new Configuration();
				newConfig.Reason = new List <string>(){"Макросы", "Игра+", "Читерство"};	
				newConfig.AccessToken = "";
				newConfig.ReasonSizeX=150f;
				newConfig.ReasonSepX=20f;
				newConfig.reportCount=0;
				newConfig.VKServerID="";
				return newConfig;
			}
		}
		
		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				config = Config.ReadObject<Configuration>();
				if (config?.Reason == null) LoadDefaultConfig();
			}
			catch
			{
				LoadDefaultConfig();
			}
			NextTick(SaveConfig);
		}
		protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
		protected override void SaveConfig() => Config.WriteObject(config);
		#endregion
		
        #region Fields
        
        public static Report Instance = null;
        public string Layer = "UI_Report";
        //private readonly string[] config.Reason = {"Макросы", "Игра+", "Читерство"};

        #endregion
        
        #region Commands

        [ChatCommand("reportmenu")]
        void ReportMenu(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, "report.admin"))
            {
                SendReply(player, "Недостаточно прав!");
                return;
            }

            var targetList = new List<BasePlayer>();

            foreach (var target in BasePlayer.activePlayerList)
            {
                if(storedData.players[target.userID].reportInfo.Count > config.reportCount) targetList.Add(target);
            }

            if (targetList.Count == 0)
            { 
                SendReply(player, "На сервере отсутствуют зарепорченные игроки!");
                return;
            }

            var message = "";
            
            foreach (var target in targetList)
            {
                var targetData = storedData.players[player.userID];
                if(!string.IsNullOrEmpty(message)) message += $"\nЖалобы на игрока: {target.displayName}. Количество жалоб: {targetData.reportInfo.Count}";
                else message += $"Жалобы на игрока: {target.displayName}. Количество жалоб: {targetData.reportInfo.Count}";
                
                foreach (var targetReports in targetData.reportInfo) message += $"\nПричина: {targetReports.reason}. Пожаловался: {targetReports.displayName}";
            }
            
            SendReply(player, message);
        }

        private bool AlreadyReported(ulong playerID, ulong targetID)
        {
            var searchPlayer = storedData.players[targetID].reportInfo.Find(x => x.userID == playerID);
            if(searchPlayer != null && searchPlayer.userID == playerID) return true;
            return false;
        }
        
        // ReSharper disable once UnusedMember.Local
        private void ChatCmdReport(BasePlayer player, string command, string[] args)
        {
            CuiHelper.DestroyUi(player, Layer);

            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                Image =
                {
                    FadeIn = 0.2f,
                    Sprite = "assets/content/ui/ui.background.transparent.radial.psd",
                    Color = "0 0 0 1"
                }
            }, "Overlay", Layer);
            container.Add(new CuiPanel
            {
                Image =
                {
                    FadeIn = 0.2f,
                    Color = "0.2 0.2 0.17 0.7",
                    Material = "assets/content/ui/uibackgroundblur.mat"
                }
            }, Layer);

            container.Add(new CuiLabel
            {
                Text = { Text = "РЕПОРТЫ", Align = TextAnchor.UpperCenter, FontSize = 40, Font = "robotocondensed-bold.ttf" },
                RectTransform = { AnchorMin = "0.3 1", AnchorMax = "0.7 1", OffsetMin = "0 -120", OffsetMax = "0 -56.6" }
            }, Layer);
            container.Add(new CuiLabel
            {
                Text = { Text = "Найдите в поиске игрока и оставьте на него жалобу.", Align = TextAnchor.UpperCenter, FontSize = 18, Font = "robotocondensed-regular.ttf" },
                RectTransform = { AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "0 -120", OffsetMax = "0 -98" }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    GetImageComponent("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/exit.png","Rep_exit_img"),
                    new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-73.9 20", OffsetMax = "-28.6 80"},
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {Color = "0.33 0.87 0.59 0.6"},
                    new CuiRectTransformComponent {AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 25.2"}
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Close = Layer
                },
                Text = { Text = "Покинуть страницу", Align = TextAnchor.UpperCenter, FontSize = 18 },
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-291.3 22.6", OffsetMax = "-108 49.2" },
            }, Layer);
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Close = Layer
                },
                Text = { Text = "" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    GetImageComponent("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/report/back.png","Rep_back_img"),
                    new CuiRectTransformComponent {AnchorMin = "0.5 0.42", AnchorMax = "0.5 0.42", OffsetMin = "-369.4 -195.3", OffsetMax = "-325.4 195.3"},
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "report.backpage"
                },
                Text = { Text = "" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-369.4 -195.3", OffsetMax = "-325.4 195.3" },
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    GetImageComponent("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/report/next.png","Rep_next_img"),
                    new CuiRectTransformComponent {AnchorMin = "0.5 0.42", AnchorMax = "0.5 0.42", OffsetMin = "325.4 -195.3", OffsetMax = "369.4 195.3"}
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "report.nextpage"
                },
                Text = { Text = "" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "325.4 -195.3", OffsetMax = "369.4 195.3" }
            }, Layer);

            container.Add(new CuiPanel
            {
                Image = {Color = "0 0 0 0.6"},
                RectTransform =
                {
                    AnchorMin = "0.5 1", AnchorMax = "0.5 1", OffsetMin = "-295.6 -179.3", OffsetMax = "295.6 -156"
                }
            }, Layer, Layer + ".InputTarget");
            container.Add(new CuiElement
            {
                Parent = Layer + ".InputTarget",
                Components =
                {
                    new CuiInputFieldComponent
                    {
                        Color = "1 1 1 1",
                        CharsLimit = 32,
                        Align = TextAnchor.MiddleLeft,
                        Command = "report.inputtarget"
                    },
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "4 0"}
                }
            });

            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0.33 0.87 0.59 0.6",
                    Command = "report.inputtarget find"
                },
                Text = { Text = "Найти игрока", Align = TextAnchor.MiddleCenter },
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 1", OffsetMin = "-100 0", OffsetMax = "0 0" }
            }, Layer + ".InputTarget");

            var posX = -(config.ReasonSizeX * config.Reason.Count + config.ReasonSepX * (config.Reason.Count - 1)) / 2f;
            for (var i = 0; i < config.Reason.Count; i++)
            {
                container.Add(new CuiButton
                {
                    Button =
                    {
                        Color = "0 0 0 0",
                        Command = $"report.setreason {i}"
                    },
                    Text = { Text = config.Reason[i], Align = TextAnchor.UpperCenter, FontSize = 18 },
                    RectTransform = { AnchorMin = "0.5 0", AnchorMax = "0.5 0", OffsetMin = $"{posX} 22.6", OffsetMax = $"{posX + config.ReasonSizeX} 49.2" },
                }, Layer, Layer + $".Reason{i}");

                posX += config.ReasonSizeX + config.ReasonSepX;
            }

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {Color = "0.87 0.33 0.33 0.6"},
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "21 22.6", OffsetMax = $"{config.ReasonSizeX + 21} 25.2"}
                }
            });
            container.Add(new CuiButton
            {
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "report.sendreport"
                },
                Text = { Text = "Отправить", Align = TextAnchor.UpperCenter, FontSize = 18 },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "21 22.6", OffsetMax = $"{config.ReasonSizeX + 21} 49.2" }
            }, Layer);

            var data = _playersMenu[player] = new MenuData { Players = BasePlayer.activePlayerList.OrderBy(p => p.displayName).ToArray() };
            ShowPlayers(player, container, data);

            CuiHelper.AddUi(player, container);
        }
        
        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdBackPage(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            if (player == null || !_playersMenu.TryGetValue(player, out data)) return;
            var page = data.Page == 0 ? (int)Math.Ceiling(data.Players.Length / (float)50) - 1 : data.Page - 1;
            if (page == data.Page) return;
            data.Page = page;
            var container = new CuiElementContainer();
            ShowPlayers(player, container, data);
            CuiHelper.AddUi(player, container);
        }
        
        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdNextPage(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            if (player == null || !_playersMenu.TryGetValue(player, out data)) return;
            var page = data.Page == (int)Math.Ceiling(data.Players.Length / (float)50) - 1 ? 0 : data.Page + 1;
            if (page == data.Page) return;
            data.Page = page;
            var container = new CuiElementContainer();
            ShowPlayers(player, container, data);
            CuiHelper.AddUi(player, container);
        }

        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdSetTarget(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            if (player == null || !_playersMenu.TryGetValue(player, out data)) return;
            var id = arg.GetInt(0, -1);
            if (id < 0 || id >= data.Players.Length) return;
            data.Target = data.Players[id];
            CuiHelper.DestroyUi(player, Layer + $".Player{id}.Line");
            var container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                Image = { Color = "0.33 0.87 0.59 0.6" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0", OffsetMax = "0 2.6" }
            }, Layer + $".Player{id}", Layer + $".Player{id}.Line");
            CuiHelper.AddUi(player, container);
        }

        private void ShowPlayers(BasePlayer player, CuiElementContainer container, MenuData data)
        {
            CuiHelper.DestroyUi(player, Layer + ".Players");
            if (data.Players == null) return;
            container.Add(new CuiPanel
            {
                Image = {Color = "0 0 0 0"},
                RectTransform = {AnchorMin = "0.5 0.71", AnchorMax = "0.5 0.71", OffsetMin = "-316.8 -416.7", OffsetMax = "316.8 0"}
            }, Layer, Layer + ".Players");

            const int maxPlayersPage = 50;
            var count = data.Page * maxPlayersPage + Math.Min(maxPlayersPage, data.Players.Length - data.Page * maxPlayersPage);
            const float sizeX = 119.3f;
            const float sizeY = 33.3f;
            const float sep = 9.3f;
            var i = 0;
            var posX = 0f;
            var posY = 0f;
            for (var i2 = data.Page * maxPlayersPage; i2 < count; i2++)
            {
                var name = data.Players[i2].displayName;
                name = ClearString(name, true);
                if (name.Length > 14) name = name.Substring(0, 14) + "..";
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0.6", Command = $"report.settarget {i2}"},
                    Text = { Text = name, FontSize = 16, Align = TextAnchor.MiddleCenter },
                    RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = $"{posX} {posY - sizeY}", OffsetMax = $"{posX + sizeX} {posY}" }
                }, Layer + ".Players", Layer + $".Player{i}");
                if (++i % 5 == 0)
                {
                    posX = 0f;
                    posY -= sizeY + sep;
                }
                else posX += sizeX + sep;
                if (i >= maxPlayersPage) break;
            }
        }

        private static readonly char[] CacheString = new char[256];
        public static string ClearString(string str, bool removeHtml = true) // v1.1
        {
            var l = 0;
            for (var i = 0; i < str.Length; i++, l++)
            {
                var c = str[i];
                if (c < ' ') CacheString[l] = ' ';
                else
                {
                    switch (c)
                    {
                        case '\x5c': // \
                        {
                            if (!removeHtml) CacheString[l] = c;
                            else
                            {
                                CacheString[l] = c;
                                CacheString[++l] = '\x200B';
                            }
                            break;
                        }
                        case '"':
                        {
                            CacheString[l] = '\x27'; // '
                            CacheString[l] = '\x27';
                            break;
                        }
                        case '<':
                        {
                            if (!removeHtml) CacheString[l] = c;
                            else
                            {
                                CacheString[l] = c;
                                CacheString[++l] = '\x200B';
                            }
                            break;
                        }
                        default: CacheString[l] = c; break;
                    }
                }
            }
            return new string(CacheString, 0, l);
        }

        private class MenuData
        {
            public string Name;
            public BasePlayer Target;
            public BasePlayer[] Players;
            public int Page;
            public int Reason;
        }
        private readonly Dictionary<BasePlayer, MenuData> _playersMenu = new Dictionary<BasePlayer, MenuData>();

        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdInputTarget(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            if (player == null || !_playersMenu.TryGetValue(player, out data)) return;
            if (arg.GetString(0) != "find")
            {
                data.Name = arg.GetString(0, null);
                return;
            }
            if (!_playersMenu.TryGetValue(player, out data)) return;
            data.Target = null;
            data.Page = 0;
            if (string.IsNullOrEmpty(data.Name)) data.Players = BasePlayer.activePlayerList.OrderBy(p => p.displayName).ToArray();
            else
            {
                BasePlayer target;
                List<BasePlayer> players;
                data.Players = !FindPlayerByName(data.Name, out target, out players) && players.Count == 0
                    ? null
                    : players.OrderBy(p => p.displayName).ToArray();
            }
            var container = new CuiElementContainer();
            ShowPlayers(player, container, data);
            CuiHelper.AddUi(player, container);
        }

        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdSetReason(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            var id = arg.GetInt(0, -1);
            if (player == null || !_playersMenu.TryGetValue(player, out data) || id < 0 || id > config.Reason.Count) return;
            CuiHelper.DestroyUi(player, Layer + $".Reason{data.Reason}.Line");
            data.Reason = id;
            var container = new CuiElementContainer();
            container.Add(new CuiElement
            {
                Name = Layer + $".Reason{id}.Line",
                Parent = Layer + $".Reason{id}",
                Components =
                {
                    new CuiImageComponent {Color = "0.33 0.87 0.59 0.6"},
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "0 0", OffsetMax = "0 2.6"}
                }
            });
            CuiHelper.AddUi(player, container);
        }

        // ReSharper disable once UnusedMember.Local
        private void ConsoleCmdSendReport(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            MenuData data;
            if (player == null || !_playersMenu.TryGetValue(player, out data) || data.Target == null || data.Reason == -1) return;
            CuiHelper.DestroyUi(player, Layer);
            if (AlreadyReported(player.userID, data.Target.userID))
            {
                SendReply(player, "Вы уже отправляли жалобу на этого игрока.");
                return;
            }
            SendReply(player, "Ваша жалоба успешно принята и отправлена модераторам.");
            storedData.players[data.Target.userID].reportInfo.Add(new ReportInfo
            {
                displayName = player.displayName,
                reason = config.Reason[data.Reason],
                userID = player.userID,
            });
            SendReport(data.Target);
        }

        #endregion

        #region Methods

        void SendVK(string msg)
        {
            webrequest.EnqueuePost("https://api.vk.com/method/messages.send", $"random_id={UnityEngine.Random.Range(0, int.MaxValue)}" + "&peer_ids=" + config.VKServerID + "&message=" + msg + "&v=5.107&access_token=" + config.AccessToken + "", PostCallback, null);
			Puts("Report sent to VK");
        }
        
        void PostCallback(int code, string response)
        {
            
        }

        void SendReport(BasePlayer target)
        {             
            if (storedData.players[target.userID].reportInfo.Count < config.reportCount) return;
		
            var message = string.Format("Уважаемая модерация сервера {0}<br> Просьба проверить игрока {1}[{2}].<br> Количество репортов - {3}<br>", ConVar.Server.hostname, target.displayName, target.userID, storedData.players[target.userID].reportInfo.Count);
            for (var i = 0; i < storedData.players[target.userID].reportInfo.Count; i++)
            {
                var report = storedData.players[target.userID].reportInfo.ElementAt(i);
                
                message += string.Format("Пожаловался - {0} <br> Основная причина - {1}<br>",
                    report.displayName, report.reason);
            }

            message = message.Replace("{", " ");
            message = message.Replace("}", " ");
            SendVK(message); 
        }

        #endregion
        
        #region Hooks
        
        object OnBanSystemBan(ulong steam, ulong owner, string reason, uint banTime, ulong initiator)
        {
            BasePlayer playerBanned = null;
            BasePlayer initiatorBan = null;

            var message = $"{ConVar.Server.hostname}<br>Информация о бане игрока - ";
            TimeSpan time = new TimeSpan();
            var timeString = "бессрочно";
            var initiatorName = "CONSOLE";

            if (PlayerHelper.Find(steam.ToString(), out playerBanned))
            {
                if (banTime != 0)
                {
                    time = TimeSpan.FromSeconds(banTime);
                    timeString = $"{(int) time.TotalDays:0}д, {time.Hours:0}ч, {time.Minutes:0}м, {time.Seconds:00}с";
                }

                if (PlayerHelper.Find(initiator.ToString(), out initiatorBan))
                {
                    initiatorName = initiatorBan.displayName;
                }

                if (initiator == 0U)
                {
                    initiatorName = "CONSOLE";
                }
                
                message +=
                    $"{playerBanned.displayName}[{playerBanned.UserIDString}]<br>Время бана: {timeString}<br>Причина бана: {reason}<br> Забанил:{initiatorName}[{initiator}]";

                SendVK(message);
            }
            else
            {
                if (banTime != 0)
                {
                    time = TimeSpan.FromSeconds(banTime);
                    timeString = $"{(int) time.TotalDays:0}д, {time.Hours:0}ч, {time.Minutes:0}м, {time.Seconds:00}с";
                }

                if (PlayerHelper.Find(initiator.ToString(), out initiatorBan))
                {
                    initiatorName = initiatorBan.displayName;
                }

                message +=
                    $"Ник не найден[{steam}]<br>Время бана: {timeString}<br>Причина бана: {reason}<br>Забанил: {initiatorName}[{initiator}]";

                SendVK(message);
            }

            return null;
        }

        void OnChatPlusMute(ulong initiator, ulong steam, string reason, uint seconds)
        {

            BasePlayer playerBanned = null;
            BasePlayer initiatorBan = null;

            if (seconds >= 1 && seconds < 3600) return;
            
            var message = $"{ConVar.Server.hostname}<br>Информация о муте игрока - ";
            TimeSpan time = new TimeSpan();
            var timeString = "бессрочно";
            var initiatorName = "CONSOLE";

            

            if (PlayerHelper.Find(steam.ToString(), out playerBanned))
            {
                if (seconds != 0)
                {
                    time = TimeSpan.FromSeconds(seconds);
                    timeString = $"{(int) time.TotalDays:0}д, {time.Hours:0}ч, {time.Minutes:0}м, {time.Seconds:00}с";
                }

                if (PlayerHelper.Find(initiator.ToString(), out initiatorBan))
                {
                    initiatorName = initiatorBan.displayName;
                }


                message +=
                    $"{playerBanned.displayName}[{playerBanned.UserIDString}]<br>Время мута:{timeString}<br>Причина мута: {reason}<br>Замутил:{initiatorName}[{initiator}]";

                SendVK(message);
            }
            else
            {
                if (seconds != 0)
                {
                    time = TimeSpan.FromSeconds(seconds);
                    timeString = $"{(int) time.TotalDays:0}д, {time.Hours:0}ч, {time.Minutes:0}м, {time.Seconds:00}с";
                }

                if (PlayerHelper.Find(initiator.ToString(), out initiatorBan))
                {
                    initiatorName = initiatorBan.displayName;
                }

                message +=
                    $"Ник не найден[{steam}]<br>Время мута:{timeString}<br>Причина мута: {reason}<br>Замутил:{initiatorName}[{initiator}]";

                SendVK(message);
            }
        }

        void OnBanSystemUnban(ulong steam, ulong initiator)
        {
            string Name = "";
            var message = string.Empty;
            
            if (initiator == 0)
            {
                Name = "CONSOLE";
            }
            else
            {
                BasePlayer player = BasePlayer.FindByID(initiator);

                Name = player.displayName;
            }
            
            BasePlayer target = BasePlayer.Find(steam.ToString());

            if (target == null)
            {
                target = BasePlayer.FindSleeping(steam);
            }

            if (target != null)
            {
                message = $"Администратор {Name} разбанил -> {target.displayName}[{target.userID}]";
            }
            else
            {
                message = $"Администратор {Name} разбанил -> {steam}";
            }
            
            SendVK(message);
        }

        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, Layer);
            SaveData();
        }

        void OnPlayerConnected(BasePlayer player)
        {
            if(!storedData.players.ContainsKey(player.userID)) storedData.players.Add(player.userID, new ReportData());
        }

        [HookMethod("OnCheckedPlayer")]
        void OnCheckedPlayer(BasePlayer player, BasePlayer target)
        {
            var targetData = storedData.players[target.userID];
            
            var msg = $"{player.displayName} вызвал на проверку игрока с ником {target.displayName}[{target.userID}]. <br> Количество жалоб на данного игрока - {targetData.reportInfo.Count}. <br> Сервер - {ConVar.Server.hostname}";
            targetData.reportInfo.Clear(); 
            
            SendVK(msg);
        }

        void OnServerInitialized()
        { 
            LoadData(); 
            permission.RegisterPermission("report.admin", this);
            Instance = this;

            foreach (var p in BasePlayer.activePlayerList) OnPlayerConnected(p);

            cmd.AddChatCommand("report", this, "ChatCmdReport");
            cmd.AddConsoleCommand("report.inputtarget", this, "ConsoleCmdInputTarget");
            cmd.AddConsoleCommand("report.backpage", this, "ConsoleCmdBackPage");
            cmd.AddConsoleCommand("report.nextpage", this, "ConsoleCmdNextPage");
            cmd.AddConsoleCommand("report.settarget", this, "ConsoleCmdSetTarget");
            cmd.AddConsoleCommand("report.setreason", this, "ConsoleCmdSetReason");
            cmd.AddConsoleCommand("report.sendreport", this, "ConsoleCmdSendReport");

            AddImage("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/report/back.png","Rep_back_img");
            AddImage("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/report/next.png","Rep_next_img");
            AddImage("https://static.moscow.ovh/images/games/rust//plugins/ultimate_ui/exit.png","Rep_exit_img");
        }

        #endregion

        #region Data

        class StoredData
        {
            public Dictionary<ulong, ReportData> players = new Dictionary<ulong, ReportData>();
        }

        class ReportData
        {
            [JsonProperty("ri")] public List<ReportInfo> reportInfo = new List<ReportInfo>();
        }

        class ReportInfo
        {
            public string displayName = "";
            public ulong userID = 0U;
            public string reason = "";
        }
        
        void SaveData()
        {
            ReportD.WriteObject(storedData);
        }

        void LoadData()
        {
            ReportD = Interface.Oxide.DataFileSystem.GetFile("Report/reports");
            try
            {
                storedData = ReportD.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        StoredData storedData;
        private DynamicConfigFile ReportD;

        #endregion

        #region Helper

        public static bool FindPlayerByName(string findString, out BasePlayer player, out List<BasePlayer> players)
        {
            players = new List<BasePlayer>();
            player = null;
            var matches = new List<BasePlayer>();
            foreach (var target in BasePlayer.activePlayerList)
            {
                if (string.Equals(target.displayName, findString, StringComparison.InvariantCultureIgnoreCase))
                {
                    matches.Clear();
                    matches.Add(target);
                    break;
                }
                if (target.displayName.IndexOf(findString, StringComparison.InvariantCultureIgnoreCase) != -1) matches.Add(target);
            }
            if (matches.Count == 0) return false;
            player = matches[0];
            players = matches;
            if (matches.Count == 1) return true;
            return false;
        }

        private static class PlayerHelper
        {
            private static bool FindPlayerPredicate(BasePlayer player, string nameOrUserId)
            {
                return player.displayName.IndexOf(nameOrUserId, StringComparison.OrdinalIgnoreCase) != -1 ||
                       player.UserIDString == nameOrUserId;
            }

            public static bool Find(string nameOrUserId, out BasePlayer target)
            {
                nameOrUserId = nameOrUserId.ToLower();
                foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
                {
                    if (FindPlayerPredicate(activePlayer, nameOrUserId))
                    {
                        target = activePlayer;
                        return true;
                    }
                }

                foreach (BasePlayer sleepingPlayer in BasePlayer.sleepingPlayerList)
                {
                    if (FindPlayerPredicate(sleepingPlayer, nameOrUserId))
                    {
                        target = sleepingPlayer;
                        return true;
                    }
                }

                target = null;
                return false;
            }

        }

        #endregion

		public CuiRawImageComponent GetAvatarImageComponent(ulong user_id, string color = "1.0 1.0 1.0 1.0"){
			
			if (plugins.Find("ImageLoader")) return plugins.Find("ImageLoader").Call("BuildAvatarImageComponent",user_id) as CuiRawImageComponent;
			if (plugins.Find("ImageLibrary")) {
				return new CuiRawImageComponent { Png = (string)plugins.Find("ImageLibrary").Call("GetImage", user_id.ToString()), Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga" };
			}
			return new CuiRawImageComponent {Url = "https://image.flaticon.com/icons/png/512/37/37943.png", Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
		}
		public CuiRawImageComponent GetImageComponent(string url, string shortName="", string color = "1.0 1.0 1.0 1.0"){
			
			if (plugins.Find("ImageLoader")) return plugins.Find("ImageLoader").Call("BuildImageComponent",url) as CuiRawImageComponent;
			if (plugins.Find("ImageLibrary")) {
				if (!string.IsNullOrEmpty(shortName)) url = shortName;
				//Puts($"{url}: "+ (string)plugins.Find("ImageLibrary").Call("GetImage", url));
				return new CuiRawImageComponent { Png = (string)plugins.Find("ImageLibrary").Call("GetImage", url), Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
			}
			return new CuiRawImageComponent {Url = url, Color = color, Sprite = "assets/content/textures/generic/fulltransparent.tga"};
		}
		public CuiRawImageComponent GetItemImageComponent(string shortName){
			string itemUrl = shortName;
			if (plugins.Find("ImageLoader")) {itemUrl = $"https://static.moscow.ovh/images/games/rust/icons/{shortName}.png";}
            return GetImageComponent(itemUrl, shortName);
		}
		public bool AddImage(string url,string shortName=""){
			if (plugins.Find("ImageLoader")){				
				plugins.Find("ImageLoader").Call("CheckCachedOrCache", url);
				return true;
			}else
			if (plugins.Find("ImageLibrary")){
				if (string.IsNullOrEmpty(shortName)) shortName=url;
				plugins.Find("ImageLibrary").Call("AddImage", url, shortName);
				//Puts($"Add Image {shortName}");
				return true;
			}	
			return false;		
		}   
    }
} 

// --- End of file: Report.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MicroPanel.cs ---
// --- Original Local Path: MicroPanel.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("MicroPanel", "LAGZYA", "2.0.9")]
    public class MicroPanel : RustPlugin
    {
        private void OnServerInitialized()
        {
            Check();
            AddImage("https://i.ibb.co/cXNqzNd/1.png", "heli");
            AddImage("https://i.ibb.co/pLg31pD/2.png", "bradley");
            AddImage("https://i.ibb.co/02pf3wR/3.png", "air");
            AddImage("https://i.ibb.co/8sxWfrJ/4.png", "cargo");
            AddImage("https://cdn.discordapp.com/attachments/676533751190126631/690265099625431227/5.png", "ch");
            AddImage(cfg.icon, "lyble");
            AddImage("https://i.ibb.co/r0dRwkX/m.png", "MENU");
            _mainPanel.RectTransform.OffsetMin = cfg.offsetmin;
            _mainPanel.RectTransform.OffsetMax = cfg.offsetmax;
            if (cfg.newson)
            {
                timer.Every(cfg.sec, () =>
                {
                    GenerateNews();
                    LoadNews();
                });
                GenerateNews();
            }

            if (cfg.stime)
            {
                timer.Every(cfg.utime, () =>
                { 
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        UpdateTime(basePlayer);
                });   
            }
            foreach (var basePlayer in BasePlayer.activePlayerList)
                OnPlayerConnected(basePlayer);
        }

        private void Check()
        {
            foreach (var entity in BaseNetworkable.serverEntities.Where(p =>
                p is CargoPlane || p is BradleyAPC || p is BaseHelicopter || p is BaseHelicopter || p is CargoShip ||
                p is CH47Helicopter))
            {
                if (entity is CargoPlane)
                    IsAir = true;
                if (entity is BradleyAPC)
                    isTank = true;
                if (entity is BaseHelicopter)
                    IsHeli = true;
                if (entity is CargoShip)
                    IsCargo = true;
                if (entity is CH47Helicopter)
                    IsCh = true;
            }
        }

        private void OnUserDisconnected(IPlayer player)
        {
            OnlinePlayer();
            if (closePanel.Contains(ulong.Parse(player.Id)))
                closePanel.Remove(ulong.Parse(player.Id));
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            timer.Once(1f, () => StartUi(player));
        }

        private void Unload()
        {
            foreach (var basePlayer in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(basePlayer, Layer);
            }
        }

        private List<ulong> closePanel = new List<ulong>();
        [ChatCommand("panel")]
        void CloseOpenPanel(BasePlayer player)
        {
            if (closePanel.Contains(player.userID))
            {
                closePanel.Remove(player.userID);
                StartUi(player);
            }
            else
            {
                closePanel.Add(player.userID);
                CuiHelper.DestroyUi(player, Layer);
            }
        }
        #region Cfg

        private static ConfigData cfg { get; set; }

        private class ConfigData
        {
            [JsonProperty("Лейбел")] public string ServerName = "<b><color=#ff8200>DRIMFOX.RU PLUG</color></b>";
            [JsonProperty("Иконка")] public string icon = "https://i.imgur.com/XxbjJEU.png";
            [JsonProperty("Цвет полоски")] public string colorpolos = "#ff8200";
            
            [JsonProperty("Включить поддержку плагина IQFakeActive")]
            public bool IQFakeActive = false;
            
            [JsonProperty("Вкдючить показ времени")]
            public bool time = true;

            [JsonProperty("ЦВЕТ(ВКЛЮЧЕННЫХ ИВЕНТОВ И ОНЛАЙНА)")]
            public string coloron = "#ae4fff";

            [JsonProperty("ЦВЕТ(ОФЛАЙНА И ВЫКЛЮЧЕННЫХ ИВЕНТОВ)")]
            public string coloroff = "#ffffff";

            [JsonProperty("Двигать всю панель - MIN")]
            public string offsetmin = "0 0";

            [JsonProperty("Двигать всю панель - MAX")]
            public string offsetmax = "0 0";

            [JsonProperty("Двигать панель ивентов - MIN")]
            public string evoffsetmin = "310 -38";

            [JsonProperty("Двигать панель ивентов - MAX")]
            public string evoffsetmax = "515 -5";
            [JsonProperty("Показывать время?")]
            public bool stime = true;
            [JsonProperty("Как часто обновлять время (СЕК)?")]
            public int utime = 5;
            [JsonProperty("Двигать панель времени - MIN")]
            public string tvoffsetmin = "170 -40";
            
            [JsonProperty("Двигать панель времени  - MAX")]
            public string tvoffsetmax = "220 -28";
            
            [JsonProperty("Показывать слипперов?")]
            public bool sleep = true;

            [JsonProperty("Курсор включать?")] public bool cursor = false;

            [JsonProperty("Включить авто новости?")]
            public bool newson = true;

            [JsonProperty("Время обновление новостей(В секундах)")]
            public float sec = 30f;

            [JsonProperty("АвтоНовости")] public List<string> newsList = new List<string>();
            [JsonProperty("Кнопки")] public List<Buttons> buttonList = new List<Buttons>();

            public static ConfigData GetNewConf()
            {
                var newConfig = new ConfigData();
                newConfig.buttonList = new List<Buttons>()
                {
                    new Buttons()
                    {
                        Commnad = "chat.say /store",
                        Name = "[- МАГАЗИН -]",
                    },
                    new Buttons()
                    {
                        Commnad = "chat.say /pass",
                        Name = "[- SOPASS -]",
                    },
                    new Buttons()
                    {
                        Commnad = "chat.say /fmenu",
                        Name = "[- SOFRIENDS -]",
                    },
                };
                newConfig.newsList = new List<string>()
                {
                    "Сайт: DRIMFOX.RU",
                    "Группа в вк: vk.com/drimfox"
                };
                return newConfig;
            }
        }

        internal class Buttons
        {
            public string Commnad;
            public string Name;
        }

        protected override void LoadDefaultConfig()
        {
            cfg = ConfigData.GetNewConf();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(cfg);
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                cfg = Config.ReadObject<ConfigData>();
            }
            catch
            {
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        #endregion
        private string Layer = "MicroPanelByLAGZYA";

        private CuiPanel _mainPanel = new CuiPanel()
        {
            RectTransform = {AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 0", OffsetMax = "0 0"},
            Image = {Color = "0.3072 0.233 0.534 0"}
        };

        object OnPlayerSleep(BasePlayer player)
        {
            OnPlayerSleepEnded(null);
            return null;
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            NextTick(OnlinePlayer);
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            switch (entity)
            {
                case PatrolHelicopter _:
                {
                    IsHeli = true;
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        EventInit(basePlayer, "heli");
                    break;
                }
                case BradleyAPC _:
                {
                    isTank = true;
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        EventInit(basePlayer, "bradley");
                    break;
                }
                case CargoPlane _:
                {
                    IsAir = true;
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        EventInit(basePlayer, "air");
                    break;
                }
                case CargoShip _:
                {
                    IsCargo = true;
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        EventInit(basePlayer, "cargo");
                    break;
                }
                case CH47Helicopter _:
                {
                    IsCh = true;
                    foreach (var basePlayer in BasePlayer.activePlayerList)
                        EventInit(basePlayer, "ch");

                    break;
                }
            }
        }

        void OnEntityKill(BaseNetworkable entity)
        {
            switch (entity)
            {
                case CargoPlane _:
                {
                    if (CargoPlane.serverEntities.Count(p => p is CargoPlane) == 0)
                    {
                        IsAir = false;
                        foreach (var basePlayer in BasePlayer.activePlayerList)
                            EventInit(basePlayer, "air");
                    }
                 
                    break;
                }
                case CargoShip _:
                {
                    if (CargoShip.serverEntities.Count(p => p is CargoShip) == 0)
                    {
                        IsCargo = false;
                        foreach (var basePlayer in BasePlayer.activePlayerList)
                            EventInit(basePlayer, "cargo");
                    }

                    break;
                }
                case PatrolHelicopter _:
                {
                    if (PatrolHelicopter.serverEntities.Count(p => p is PatrolHelicopter) == 0)
                    {
                        IsHeli = false;
                        foreach (var basePlayer in BasePlayer.activePlayerList)
                            EventInit(basePlayer, "heli");
                    }

                  
                    break;
                }
                case BradleyAPC _:
                {
                    if (BradleyAPC.serverEntities.Count(p => p is BradleyAPC) == 0)
                    {
                        isTank = false;
                        foreach (var basePlayer in BasePlayer.activePlayerList)
                            EventInit(basePlayer, "bradley");
                    }

                    break;
                }
                case CH47Helicopter _:
                {
                    if (CH47Helicopter.serverEntities.Count(p => p is CH47Helicopter) == 0)
                    {
                        IsCh = false;
                        foreach (var basePlayer in BasePlayer.activePlayerList)
                            EventInit(basePlayer, "ch");
                    }

                    break;
                }
            }
        } 

        #region Time

        private void UpdateTime(BasePlayer player)
        {
            if(closePanel.Contains(player.userID)) return;
            CuiHelper.DestroyUi(player, Layer + "Time");
            var cont = new CuiElementContainer();
            cont.Add(new CuiButton()
            {   
                RectTransform = {AnchorMin = "0.4 0.05", AnchorMax = "1 0.95"},
                Button = {Command = "", Color = "0.15 0.86 0.1 0"},
                Text = 
                {    
                    Text = $"{covalence.Server.Time.ToShortTimeString()} ",
                    Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 9
                }  
            }, Layer + "Timefon", Layer + "Time");
            CuiHelper.AddUi(player, cont);
        }

        [PluginReference] Plugin IQFakeActive;
        
        int FakeOnline => (int)IQFakeActive?.Call("GetOnline");
        void SyncReservedFinish()
        {
            if (!cfg.IQFakeActive) return;
            PrintWarning("MicroPanel- успешно синхронизирована с IQFakeActive");
            PrintWarning("=============SYNC==================");

        }
        #endregion
        #region Menu
        
        private readonly List<ulong> listPlayer = new List<ulong>();

        [ConsoleCommand("Ui_MicroPanel")]
        private void CommandUi(ConsoleSystem.Arg arg)
        {
            if (arg?.Player() == null) return;
            if (arg.Args[0] == "menu")
            {
                if (!listPlayer.Contains(arg.Player().userID))
                {
                    listPlayer.Add(arg.Player().userID);
                    MenuUpdate(arg.Player(), "menu");
                }
                else
                {
                    listPlayer.Remove(arg.Player().userID);
                    CuiHelper.DestroyUi(arg.Player(), Layer + "Mouse");
                    foreach (var buttonse in cfg.buttonList)
                        CuiHelper.DestroyUi(arg.Player(), Layer + "Mouse" + buttonse.Name);
                }
            }
        }

        private void MenuUpdate(BasePlayer player, string type)
        {
            var cont = new CuiElementContainer();
            float i = 0;
            switch (type)
            {
                case "menu":
                    cont.Add(new CuiPanel()
                    {
                        CursorEnabled = cfg.cursor,
                        RectTransform = {AnchorMin = "0 0", AnchorMax = "0 0"},
                        Image = {Color = "0 0 0 0"}
                    }, Layer, Layer + "Mouse");
                    foreach (var check in cfg.buttonList)
                    {
                        cont.Add(new CuiElement
                        {
                            Parent = Layer,
                            Name = Layer + "Mouse" + check.Name,
                            Components =
                            {
                                new CuiImageComponent
                                {
                                    Color = "0.88 0.01 0.58 0.00",
                                    FadeIn = 0 + i * -0.01f,
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"0 0", AnchorMax = $"0 0", OffsetMin = $"10 {-80 + i}",
                                    OffsetMax = $"150 {-55 + i}"
                                }
                            }
                        });
                        cont.Add(new CuiElement
                        {
                            Parent = Layer + "Mouse" + check.Name,
                            Components =
                            {
                                new CuiTextComponent()
                                {
                                    Text = check.Name, Align = TextAnchor.MiddleLeft,
                                    Font = "robotocondensed-regular.ttf",
                                    FadeIn = 0 + i * -0.01f,
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"0 0", AnchorMax = $"1 1"
                                }
                            }
                        });
                        cont.Add(
                            new CuiButton
                            {
                                RectTransform = {AnchorMin = "0 0", AnchorMax = $"1 1"},
                                Button =
                                {
                                    Command = check.Commnad, Color = "0 0 0 0",
                                    FadeIn = 1 + i * -0.01f,
                                },
                                Text = {Text = ""}
                            },
                            Layer + "Mouse" + check.Name);
                        i += -30f;
                    }

                    CuiHelper.AddUi(player, cont);
                    break;
            }
        }

        #endregion
        private void OnlinePlayer()
        {
            int Online = IQFakeActive ? cfg.IQFakeActive ? FakeOnline : BasePlayer.activePlayerList.Count : BasePlayer.activePlayerList.Count; 
            foreach (var basePlayer in BasePlayer.activePlayerList)
            {
                if(closePanel.Contains(basePlayer.userID)) continue;
                CuiHelper.DestroyUi(basePlayer, Layer + "Online");
                CuiHelper.DestroyUi(basePlayer, Layer + "Sleep");
                var cont = new CuiElementContainer();
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.4 0.05", AnchorMax = "1 0.95"},
                    Button = {Command = "", Color = "0.15 0.86 0.1 0"},
                    Text =
                    {
                        Text = $"{Online}/{ConVar.Server.maxplayers}",
                        Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 9
                    }
                }, Layer + "Onlinefon", Layer + "Online");
                if (cfg.sleep)
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform =
                        {
                            AnchorMin = "0.4 0.05", AnchorMax = "1 0.95"
                        },
                        Button =
                        {
                            Command = "", Color = "0.25 0.86 0.86 0"
                        },
                        Text =
                        {
                            Text = $"{BasePlayer.sleepingPlayerList.Count}",
                            Align = TextAnchor.MiddleCenter,
                            Font = "robotocondensed-regular.ttf", FontSize = 9
                        }
                    }, Layer + "Sleepfon", Layer + "Sleep");
                } 
                CuiHelper.AddUi(basePlayer, cont);
            }
        }

        private bool IsAir, IsHeli, isTank, IsCargo, IsCh;

        private void EventInit(BasePlayer player, string type)
        {
            if(closePanel.Contains(player.userID)) return;
            var cont = new CuiElementContainer();
            switch (type)
            {
                case "air":
                    CuiHelper.DestroyUi(player, Layer + "Air");
                    if (IsAir)
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.01147922 0", AnchorMax = "0.1814795 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloron),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Air");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloron), Png = GetImage("air")
                            },
                        }, Layer + "Air");
                    }
                    else
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.01147922 0", AnchorMax = "0.1814795 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloroff),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Air");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloroff), Png = GetImage("air")
                            },
                        }, Layer + "Air");
                    }

                    CuiHelper.AddUi(player, cont);
                    break;
                case "ch":
                    CuiHelper.DestroyUi(player, Layer + "Ch");
                    if (IsCh)
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.7178804 0", AnchorMax = "0.8878804 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloron),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text = {Text = $"",}
                        }, Layer + "Events", Layer + "Ch");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform = {AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"},
                            Image = {Color = HexToRustFormat(cfg.coloron), Png = GetImage("ch")},
                        }, Layer + "Ch");
                    }
                    else
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.7178804 0", AnchorMax = "0.8878804 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloroff),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Ch");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloroff), Png = GetImage("ch")
                            },
                        }, Layer + "Ch");
                    }

                    CuiHelper.AddUi(player, cont);
                    break;

                case "heli":
                    CuiHelper.DestroyUi(player, Layer + "Heli");
                    if (IsHeli)
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.1880797 0", AnchorMax = "0.3580798 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloron),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Heli");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloron), Png = GetImage("heli")
                            },
                        }, Layer + "Heli");
                    }
                    else
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.1880797 0", AnchorMax = "0.3580798 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloroff),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Heli");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloroff), Png = GetImage("heli")
                            },
                        }, Layer + "Heli");
                    }

                    CuiHelper.AddUi(player, cont);
                    break;
                case "bradley":
                    CuiHelper.DestroyUi(player, Layer + "Bradley");
                    if (isTank)
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.36468 0", AnchorMax = "0.53468 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloron),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text = {Text = $"",}
                        }, Layer + "Events", Layer + "Bradley");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloron), Png = GetImage("bradley")
                            },
                        }, Layer + "Bradley");
                    }
                    else
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.36468 0", AnchorMax = "0.53468 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloroff),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Bradley");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloroff), Png = GetImage("bradley")
                            },
                        }, Layer + "Bradley");
                    }

                    CuiHelper.AddUi(player, cont);
                    break;
                case "cargo":
                    CuiHelper.DestroyUi(player, Layer + "Cargo");
                    if (IsCargo)
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.5412802 0", AnchorMax = "0.7112802 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloron),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text = {Text = $"",}
                        }, Layer + "Events", Layer + "Cargo");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloron), Png = GetImage("cargo")
                            },
                        }, Layer + "Cargo");
                    }
                    else
                    {
                        cont.Add(new CuiButton()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.5412802 0", AnchorMax = "0.7112802 1"
                            },
                            Button =
                            {
                                Command = "", Color = HexToRustFormat(cfg.coloroff),
                                Sprite = "assets/icons/circle_open.png"
                            },
                            Text =
                            {
                                Text = $"",
                            }
                        }, Layer + "Events", Layer + "Cargo");
                        cont.Add(new CuiPanel()
                        {
                            RectTransform =
                            {
                                AnchorMin = "0.2241479 0.2363638", AnchorMax = "0.7069132 0.7090913"
                            },
                            Image =
                            {
                                Color = HexToRustFormat(cfg.coloroff), Png = GetImage("cargo")
                            },
                        }, Layer + "Cargo");
                    }

                    CuiHelper.AddUi(player, cont);
                    break;
            }
        }

        private void StartUi(BasePlayer player)
        {
            var cont = new CuiElementContainer();

            cont.Add(_mainPanel, "Overlay", Layer);
            cont.Add(new CuiElement()
            {
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = cfg.ServerName, Align = TextAnchor.MiddleLeft, FontSize = 16
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "60 -25", OffsetMax = "200 -5"
                    }
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent()
                    {
                        Png = GetImage("lyble")
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "10 -45", OffsetMax = "53 -5"
                    }
                }
            });
            cont.Add(new CuiButton()
            {
                RectTransform =
                {
                    AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "10 -45", OffsetMax = "53 -5"
                },
                Button =
                {
                    Color = "0 0 0 0",
                    Command = "Ui_MicroPanel menu"
                },
                Text = {Text = ""}
            }, Layer);
            cont.Add(new CuiElement()
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent()
                    {
                        Color = HexToRustFormat(cfg.colorpolos),
                        Sprite = "assets/content/ui/ui.background.transparent.linearltr.tga"
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "60 -25", OffsetMax = $"320 -23"
                    }
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = Layer,
                Name = Layer + "Onlinefon",
                Components =
                {
                    new CuiImageComponent()
                    {
                        Color = "0.64 0.64 0.64 0.25"
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "60 -40", OffsetMax = "110 -28"
                    }
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = Layer + "Onlinefon",
                Components =
                {
                    new CuiTextComponent()
                    {
                        Color = HexToRustFormat(cfg.coloron), Text = "ON", FontSize = 9,
                        Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf",
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0.02999999 0.05", AnchorMax = "0.4899999 0.95"
                    }
                }
            });
            if (cfg.sleep)
            {
                cont.Add(new CuiElement()
                {
                    Parent = Layer,
                    Name = Layer + "Sleepfon",
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.64 0.64 0.64 0.25"
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "115 -40", OffsetMax = "165 -28"
                        }
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + "Sleepfon",
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Color = HexToRustFormat(cfg.coloroff), Text = "OFF", FontSize = 9,
                            Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf",
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0.02999999 0.05", AnchorMax = "0.4899999 0.95"
                        }
                    }
                });
            }
           
            cont.Add(new CuiPanel()
            {
                Image =
                {
                    Color = "0 0 0 0",
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "0 0",
                    OffsetMin = cfg.evoffsetmin,
                    OffsetMax = cfg.evoffsetmax
                }
            }, Layer, Layer + "Events");
            if (cfg.newson)
            {
                CuiHelper.DestroyUi(player, Layer + "News");
                cont.Add(new CuiElement()
                {
                    Parent = Layer,
                    Name = Layer + "News",
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Text = news, Align = TextAnchor.MiddleLeft, FontSize = 10,
                            Font = "robotocondensed-regular.ttf",
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "195 -25", OffsetMax = $"320 -5"
                        }
                    }
                });
            }

            if (cfg.stime)
            {
                cont.Add(new CuiElement()
                {
                    Parent = Layer,
                    Name = Layer + "Timefon",
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.64 0.64 0.64 0.25"
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = cfg.tvoffsetmin, OffsetMax = cfg.tvoffsetmax
                        }
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + "Timefon",
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Color = HexToRustFormat(cfg.coloroff), Text = "TIME", FontSize = 9,
                            Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf",
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0.1 0.05", AnchorMax = "0.4899999 0.95"
                        }
                    }
                });
            }
            CuiHelper.AddUi(player, cont);
            OnlinePlayer();
            if (cfg.stime)
                UpdateTime(player);
            EventInit(player, "air");
            EventInit(player, "ch");
            EventInit(player, "heli");
            EventInit(player, "cargo");
            EventInit(player, "bradley");
        }

        public string news;
        public int newsId = -1;

        void GenerateNews()
        {
            if (cfg.newsList.Count > 0)
            {
                if (cfg.newsList.Count - 1 <= newsId)
                {
                    newsId = -1;
                }

                newsId++;
                news = cfg.newsList[newsId];
                return;
            }

            news = "";
        }

        void LoadNews()
        {
            foreach (var basePlayer in BasePlayer.activePlayerList)
            {
                var cont = new CuiElementContainer();
                CuiHelper.DestroyUi(basePlayer, Layer + "News");
                cont.Add(new CuiElement()
                {
                    Parent = Layer,
                    Name = Layer + "News",
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Text = news, Align = TextAnchor.MiddleLeft, FontSize = 10,
                            Font = "robotocondensed-regular.ttf",
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "195 -25", OffsetMax = $"320 -5"
                        }
                    }
                });
                CuiHelper.AddUi(basePlayer, cont);
            }
        }

        #region [Help]

        private string GetImage(string shortname, ulong skin = 0) =>
            (string) ImageLibrary.Call("GetImage", shortname, skin);

        private bool AddImage(string url, string shortname, ulong skin = 0) =>
            (bool) ImageLibrary.Call("AddImage", url, shortname, skin);

        [PluginReference] private Plugin ImageLibrary;

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex)) hex = "#FFFFFFFF";
            var str = hex.Trim('#');
            if (str.Length == 6) str += "FF";
            if (str.Length != 8)
            {
                throw new Exception(hex);
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
            Color color = new Color32(r, g, b, a);
            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }

        #endregion
    }
}

// --- End of file: MicroPanel.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SoPass.cs ---
// --- Original Local Path: SoPass.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Facepunch.Extend;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("SoPass", "Xoloproshka", "1.2.0")]
    public class SoPass : RustPlugin
    { 
         /*
         * ТИПЫ ЗАДАЧ
         * 1. Добыть
         * 2. Убить
         * 3. Скрафтить
         * 4. Изучить
         * 5. Залутать
         * 6. Поставить
         * 7. Починить
         * 8. Собрать с земли
         * 9. Улучшиить постройку(Например Оюъект задачи-foundation, Тогда в оружие или инструмент-дерево,камень,металл или мвк)
         * 10. Использовать карточку доступа
         * 11. Купить в магазине
         */
        #region CFG+DATA

        private Dictionary<ulong, PlayerData> _playerData = new Dictionary<ulong, PlayerData>();

        private ConfigData cfg { get; set; }


        internal class Reward
        {
            [JsonProperty("Шортнейм(Шортнейм предмета или название команды или название набора)")]
            public string ShortName = "";

            [JsonProperty("Кол-во")] public int Amount;
            [JsonProperty("Скинайди")] public ulong SkinId;
            [JsonProperty("Команда(Если надо)")] public string command = "";
            [JsonProperty("Использовать набор?")] public bool nabor = false;

            [JsonProperty("Картинка(Если команда или набор)")]
            public string URL = "";

            [JsonProperty(
                "Набор: Список предметов и команд(Если используете набор все параметры кроме \"Картинка\" и \"Шортнейм\" оставить пустыми и поставить использовать набор на true)")]
            public List<Items> itemList;

            internal class Items
            {
                [JsonProperty("Шортнейм")] public string ShortName = "";
                [JsonProperty("Кол-во")] public int Amount;
                [JsonProperty("Скинайди")] public ulong SkinId;
                [JsonProperty("Команда(Если надо)")] public string command = "";
            }
        }

        private class ConfigData
        {
            [JsonProperty("Список задач для классов(\"Название класса\":{ Список задач)}")]
            public Dictionary<string, List<Quest>> _listQuest;

            [JsonProperty("Список классов")] public List<ClassPlayer> _classList;

            internal class ClassPlayer
            {
                [JsonProperty("Название")] public string Name = "";
                [JsonProperty("Картинка")] public string URL = "";
                [JsonProperty("Пермищен")] public string Perm = "";
                [JsonProperty("Описание")] public string Text = "";
            }

            public static ConfigData GetNewConf()
            {
                var newConfig = new ConfigData();
                newConfig._listQuest = new Dictionary<string, List<Quest>>()
                {
                    ["Солдат"] = new List<Quest>()
                    {
                        new Quest()
                        {
                            DisplayName = "Начальный квест",
                            Lvl = 1,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "stones",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "Набор дерева",
                                    URL = "https://www.pngkey.com/png/full/78-786188_shop-icon-icon-ca-hng.png",
                                    Amount = 0,
                                    command = "",
                                    nabor = true,
                                    itemList = new List<Reward.Items>()
                                    {
                                        new Reward.Items()
                                        {
                                            ShortName = "wood",
                                            Amount = 1000,
                                            command = "",
                                            SkinId = 0
                                        }
                                    }
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить лук",
                                    amount = 1,
                                    type = 3,
                                    need = "bow.hunting"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить стрелы",
                                    amount = 15,
                                    type = 3,
                                    need = "arrow.wooden"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подняться выше",
                            Lvl = 2,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "metal.fragments",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 100,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "furnace",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить арбалет",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить скоростных стрел",
                                    amount = 21,
                                    type = 3,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить костеной нож",
                                    amount = 1,
                                    type = 3,
                                    need = "knife.bone"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить медведя",
                                    amount = 1,
                                    type = 2,
                                    need = "bear"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть кожу",
                                    amount = 100,
                                    type = 1,
                                    need = "leather"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Ну ты красавчик",
                            Lvl = 3,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.ore",
                                    nabor = false,
                                    Amount = 3500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    nabor = false,
                                    Amount = 5000,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить печку",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить печку",
                                    amount = 1,
                                    type = 6,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить железный топор",
                                    amount = 1,
                                    type = 4,
                                    need = "hatchet"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть дерево",
                                    amount = 1,
                                    type = 1,
                                    need = "wood"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Убийственные цели",
                            Lvl = 4,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 450,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "lowgradefuel",
                                    nabor = false,
                                    Amount = 250,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить томсон",
                                    amount = 1,
                                    type = 3,
                                    need = "smg.thompson"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить пистолетный патрон",
                                    amount = 100,
                                    type = 6,
                                    need = "ammo.pistol"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить ледоруб",
                                    amount = 1,
                                    type = 4,
                                    need = "icepick.salvaged"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть серы",
                                    amount = 1,
                                    type = 1,
                                    need = "sulfur.ore"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подготовка к жоскому финалу",
                            Lvl = 5,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 15,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 1000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.bolt",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Поставить верстак 3 уровня",
                                    amount = 1,
                                    type = 6,
                                    need = "workbench3.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить калаш",
                                    amount = 1,
                                    type = 3,
                                    need = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить патроны 5.56",
                                    amount = 100,
                                    type = 3,
                                    need = "ammo.rifle"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Финальная битва",
                            Lvl = 6,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 7000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.l96",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Взорвать танк с помощью С4",
                                    amount = 1,
                                    type = 2,
                                    need = "bradleyapc",
                                    Weapon = "explosive.timed.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Сбить вертолет с калаша",
                                    amount = 1,
                                    type = 2,
                                    need = "patrolhelicopter",
                                    Weapon = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить HeavyNPC",
                                    amount = 10,
                                    type = 2,
                                    need = "heavyscientist"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить игроков с калаша",
                                    amount = 15,
                                    type = 2,
                                    need = "player",
                                    Weapon = "rifle.ak"
                                },
                            }
                        }
                    },
                    ["Фармер"] = new List<Quest>()
                    {
                        new Quest()
                        {
                            DisplayName = "Начальный квест",
                            Lvl = 1,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "stones",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить лук",
                                    amount = 1,
                                    type = 3,
                                    need = "bow.hunting"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить стрелы",
                                    amount = 15,
                                    type = 3,
                                    need = "arrow.wooden"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подняться выше",
                            Lvl = 2,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "metal.fragments",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 100,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "furnace",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить арбалет",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить скоростных стрел",
                                    amount = 21,
                                    type = 3,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить костеной нож",
                                    amount = 1,
                                    type = 3,
                                    need = "knife.bone"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить медведя",
                                    amount = 1,
                                    type = 2,
                                    need = "bear"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть кожу",
                                    amount = 100,
                                    type = 1,
                                    need = "leather"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Ну ты красавчик",
                            Lvl = 3,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.ore",
                                    nabor = false,
                                    Amount = 3500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    nabor = false,
                                    Amount = 5000,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить печку",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить печку",
                                    amount = 1,
                                    type = 6,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить железный топор",
                                    amount = 1,
                                    type = 4,
                                    need = "hatchet"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть дерево",
                                    amount = 1,
                                    type = 1,
                                    need = "wood"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Убийственные цели",
                            Lvl = 4,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 450,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "lowgradefuel",
                                    nabor = false,
                                    Amount = 250,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить томсон",
                                    amount = 1,
                                    type = 3,
                                    need = "smg.thompson"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить пистолетный патрон",
                                    amount = 100,
                                    type = 6,
                                    need = "ammo.pistol"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить ледоруб",
                                    amount = 1,
                                    type = 4,
                                    need = "icepick.salvaged"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть серы",
                                    amount = 1,
                                    type = 1,
                                    need = "sulfur.ore"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подготовка к жоскому финалу",
                            Lvl = 5,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 15,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 1000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.bolt",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Поставить верстак 3 уровня",
                                    amount = 1,
                                    type = 6,
                                    need = "workbench3.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить калаш",
                                    amount = 1,
                                    type = 3,
                                    need = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить патроны 5.56",
                                    amount = 100,
                                    type = 3,
                                    need = "ammo.rifle"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Финальная битва",
                            Lvl = 6,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 7000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.l96",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Взорвать танк с помощью С4",
                                    amount = 1,
                                    type = 2,
                                    need = "bradleyapc",
                                    Weapon = "explosive.timed.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Сбить вертолет с калаша",
                                    amount = 1,
                                    type = 2,
                                    need = "patrolhelicopter",
                                    Weapon = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить HeavyNPC",
                                    amount = 10,
                                    type = 2,
                                    need = "heavyscientist"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить игроков с калаша",
                                    amount = 15,
                                    type = 2,
                                    need = "player",
                                    Weapon = "rifle.ak"
                                },
                            }
                        }
                    },
                    ["Строитель"] = new List<Quest>()
                    {
                        new Quest()
                        {
                            DisplayName = "Начальный квест",
                            Lvl = 1,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "stones",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить лук",
                                    amount = 1,
                                    type = 3,
                                    need = "bow.hunting"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить стрелы",
                                    amount = 15,
                                    type = 3,
                                    need = "arrow.wooden"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подняться выше",
                            Lvl = 2,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "metal.fragments",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 100,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "furnace",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить арбалет",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить скоростных стрел",
                                    amount = 21,
                                    type = 3,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить костеной нож",
                                    amount = 1,
                                    type = 3,
                                    need = "knife.bone"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить медведя",
                                    amount = 1,
                                    type = 2,
                                    need = "bear"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть кожу",
                                    amount = 100,
                                    type = 1,
                                    need = "leather"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Ну ты красавчик",
                            Lvl = 3,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.ore",
                                    nabor = false,
                                    Amount = 3500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    nabor = false,
                                    Amount = 5000,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить печку",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить печку",
                                    amount = 1,
                                    type = 6,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить железный топор",
                                    amount = 1,
                                    type = 4,
                                    need = "hatchet"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть дерево",
                                    amount = 1,
                                    type = 1,
                                    need = "wood"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Убийственные цели",
                            Lvl = 4,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 450,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "lowgradefuel",
                                    nabor = false,
                                    Amount = 250,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить томсон",
                                    amount = 1,
                                    type = 3,
                                    need = "smg.thompson"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить пистолетный патрон",
                                    amount = 100,
                                    type = 6,
                                    need = "ammo.pistol"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить ледоруб",
                                    amount = 1,
                                    type = 4,
                                    need = "icepick.salvaged"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть серы",
                                    amount = 1,
                                    type = 1,
                                    need = "sulfur.ore"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подготовка к жоскому финалу",
                            Lvl = 5,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 15,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 1000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.bolt",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Поставить верстак 3 уровня",
                                    amount = 1,
                                    type = 6,
                                    need = "workbench3.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить калаш",
                                    amount = 1,
                                    type = 3,
                                    need = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить патроны 5.56",
                                    amount = 100,
                                    type = 3,
                                    need = "ammo.rifle"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Финальная битва",
                            Lvl = 6,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 7000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.l96",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Взорвать танк с помощью С4",
                                    amount = 1,
                                    type = 2,
                                    need = "bradleyapc",
                                    Weapon = "explosive.timed.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Сбить вертолет с калаша",
                                    amount = 1,
                                    type = 2,
                                    need = "patrolhelicopter",
                                    Weapon = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить HeavyNPC",
                                    amount = 10,
                                    type = 2,
                                    need = "heavyscientist"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить игроков с калаша",
                                    amount = 15,
                                    type = 2,
                                    need = "player",
                                    Weapon = "rifle.ak"
                                },
                            }
                        }
                    },
                    ["Донатер"] = new List<Quest>()
                    {
                        new Quest()
                        {
                            DisplayName = "Начальный квест",
                            Lvl = 1,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "stones",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    URL = "",
                                    Amount = 1000,
                                    command = "",
                                    nabor = false,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить лук",
                                    amount = 1,
                                    type = 3,
                                    need = "bow.hunting"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить стрелы",
                                    amount = 15,
                                    type = 3,
                                    need = "arrow.wooden"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подняться выше",
                            Lvl = 2,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "metal.fragments",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 100,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "furnace",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить арбалет",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить скоростных стрел",
                                    amount = 21,
                                    type = 3,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить костеной нож",
                                    amount = 1,
                                    type = 3,
                                    need = "knife.bone"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить медведя",
                                    amount = 1,
                                    type = 2,
                                    need = "bear"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть кожу",
                                    amount = 100,
                                    type = 1,
                                    need = "leather"
                                }
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Ну ты красавчик",
                            Lvl = 3,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 2500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.ore",
                                    nabor = false,
                                    Amount = 3500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "wood",
                                    nabor = false,
                                    Amount = 5000,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить печку",
                                    amount = 1,
                                    type = 3,
                                    need = "crossbow"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить печку",
                                    amount = 1,
                                    type = 6,
                                    need = "arrow.hv"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить железный топор",
                                    amount = 1,
                                    type = 4,
                                    need = "hatchet"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть дерево",
                                    amount = 1,
                                    type = 1,
                                    need = "wood"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Убийственные цели",
                            Lvl = 4,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 450,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "lowgradefuel",
                                    nabor = false,
                                    Amount = 250,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить томсон",
                                    amount = 1,
                                    type = 3,
                                    need = "smg.thompson"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Поставить пистолетный патрон",
                                    amount = 100,
                                    type = 6,
                                    need = "ammo.pistol"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Изучить ледоруб",
                                    amount = 1,
                                    type = 4,
                                    need = "icepick.salvaged"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Добыть серы",
                                    amount = 1,
                                    type = 1,
                                    need = "sulfur.ore"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Подготовка к жоскому финалу",
                            Lvl = 5,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "syringe.medical",
                                    nabor = false,
                                    Amount = 15,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "scrap",
                                    nabor = false,
                                    Amount = 1000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.bolt",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Поставить верстак 3 уровня",
                                    amount = 1,
                                    type = 6,
                                    need = "workbench3.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить калаш",
                                    amount = 1,
                                    type = 3,
                                    need = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Скрафтить патроны 5.56",
                                    amount = 100,
                                    type = 3,
                                    need = "ammo.rifle"
                                },
                            }
                        },
                        new Quest()
                        {
                            DisplayName = "Финальная битва",
                            Lvl = 6,
                            _listReward = new List<Reward>()
                            {
                                new Reward()
                                {
                                    ShortName = "sulfur.ore",
                                    nabor = false,
                                    Amount = 7000,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "metal.refined",
                                    nabor = false,
                                    Amount = 500,
                                    itemList = new List<Reward.Items>()
                                },
                                new Reward()
                                {
                                    ShortName = "rifle.l96",
                                    nabor = false,
                                    Amount = 1,
                                    itemList = new List<Reward.Items>()
                                }
                            },
                            _listZadach = new List<Zadachi>()
                            {
                                new Zadachi()
                                {
                                    DisplayName = "Взорвать танк с помощью С4",
                                    amount = 1,
                                    type = 2,
                                    need = "bradleyapc",
                                    Weapon = "explosive.timed.deployed"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Сбить вертолет с калаша",
                                    amount = 1,
                                    type = 2,
                                    need = "patrolhelicopter",
                                    Weapon = "rifle.ak"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить HeavyNPC",
                                    amount = 10,
                                    type = 2,
                                    need = "heavyscientist"
                                },
                                new Zadachi()
                                {
                                    DisplayName = "Убить игроков с калаша",
                                    amount = 15,
                                    type = 2,
                                    need = "player",
                                    Weapon = "rifle.ak"
                                },
                            }
                        }
                    }
                };
                newConfig._classList = new List<ClassPlayer>()
                {
                    new ClassPlayer()
                    {
                        Name = "Солдат",
                        Text = "-Ты можешь перестрелять макросника?\n-Решаешь споры 1 на 1?\n-Тогда это твой путь!",
                        URL = "https://i.imgur.com/HAmL1so.png",
                        Perm = "sopass.default"
                    },
                    new ClassPlayer()
                    {
                        Name = "Фармер",
                        Text = "-Ты лютый фармер?\n-Ты боишься стрелять?\n-Тогда это твой выбор!",
                        URL = "https://i.imgur.com/GOk1rqK.png",
                        Perm = "sopass.default"
                    },
                    new ClassPlayer()
                    {
                        Name = "Строитель",
                        Text = "-Любишь строить?\n-Хочешь получать плюшки за это?\n-Тогда тебе сюда!",
                        URL = "https://i.imgur.com/9ouiF2V.png",
                        Perm = "sopass.default"
                    },
                    new ClassPlayer()
                    {
                        Name = "Донатер",
                        Text = "-Только для донатеров!",
                        URL = "https://imgur.com/hLPnK7C.png",
                        Perm = "sopass.default"
                    },
                };
                return newConfig;
            }
        }

        protected override void LoadDefaultConfig()
        {
            cfg = ConfigData.GetNewConf();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(cfg);
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                cfg = Config.ReadObject<ConfigData>();
            }
            catch
            {
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        class Zadachi
        {
            [JsonProperty("Текст задачи")] public string DisplayName = "";

            [JsonProperty(
                "Тип задачи(1-Добыть, 2-Убить, 3-Скрафтить, 4-Изучить,5-Залутать, 6-Поставить,7-Починить,8-Собрать с земли)")]
            public int type = 1;

            [JsonProperty("Задача закончен(Оставлять false)")]
            public bool IsFinished = false;

            [JsonProperty("Объект задачи(Тип Калаш-rifle.ak, Игрок-player")]
            public string need = "";

            [JsonProperty("Кол-во")] public int amount = 0;

            [JsonProperty("Оружие или инструмент(Например задача убить с калаша, тогда сюда rifle.ak)")]
            public string Weapon = "";
        }

        class Quest
        {
            [JsonProperty("Название уровня")] public string DisplayName;
            [JsonProperty("Какой лвл")] public int Lvl;

            [JsonProperty(
                "Список наград(Если используете набор все параметры кроме \"Картинка\" и \"Шортнейм\" оставить пустыми и поставить использовать набор на true))")]
            public List<Reward> _listReward = new List<Reward>();

            [JsonProperty("Список задач")] public List<Zadachi> _listZadach = new List<Zadachi>();
        }

        class PlayerData
        {
            [JsonProperty("НикНейм")] public string NickName;
            [JsonProperty("Класс")] public string Klass;
            [JsonProperty("Лвл")] public int Lvl;

            [JsonProperty("Список активных заданий")]
            public List<Zadachi> listZadachi;

            [JsonProperty("Список ревардов")] public List<Reward> ListRewards;
        }

        #endregion
        #region ui  

        private static string Layer = "SoPassUI";
        private static string LayerMain = "SoPassUIMAIN";
        private string Hud = "Hud";
        private string Overlay = "Overlay";
        private string regular = "robotocondensed-regular.ttf";
        private static string Sharp = "assets/content/ui/ui.background.tile.psd";
        private static string Blur = "assets/content/ui/uibackgroundblur.mat";
        private string radial = "assets/content/ui/ui.background.transparent.radial.psd";

        private CuiPanel _fon = new CuiPanel()
        {
            RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
            CursorEnabled = true,
            Image = {Color = "0 0 0 0.87", Material = Blur}
        };

        private CuiPanel _mainFon = new CuiPanel()
        {
            RectTransform =
                {AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-1920 -1080", OffsetMax = "1920 1080"},
            Image = {Color = "0.123 0.2312312 0.312312312 0"}
        };

        [ChatCommand("pass")]
        private void Start(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var cont = new CuiElementContainer();
            cont.Add(_fon, Overlay, Layer);
            CuiHelper.AddUi(player, cont);
            if (_playerData.ContainsKey(player.userID))
                LoadZadach(player, 1);
            else
            {
                StartUI(player, 0);
            }
        }

        void StartUI(BasePlayer player, int num)
        {
            CuiHelper.DestroyUi(player, LayerMain);
            var cont = new CuiElementContainer();
            cont.Add(_mainFon, Layer, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                Button = {Close = Layer, Color = "0 0 0 0"},
                Text = {Text = ""}
            }, LayerMain);
            if (num > cfg._classList.Count - 1) num = 0;
            int q1 = num;
            int q2 = q1 + 1;
            int q3 = q1 + 2;
            if (q1 < 0) q1 = cfg._classList.Count - 1;
            if (q1 > cfg._classList.Count - 1) q1 = 0;
            if (q2 < 0)
            {
                if (q3 < 0)
                {
                    q3 = cfg._classList.Count + num + 2;
                    q2 = cfg._classList.Count + num + 1;
                    q1 = cfg._classList.Count + num;
                    if (num == 1 - cfg._classList.Count) num = 1;
                }
                else
                {
                    q2 = cfg._classList.Count - 1;
                    q1 = cfg._classList.Count - 2;
                    q3 = 0;
                }
            }

            if (q3 > cfg._classList.Count - 1) q3 = 0;

            if (q2 > cfg._classList.Count - 1)
            {
                q2 = 0;
                q3 = 1;
            }

            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Name = LayerMain + 1,
                Components =
                {
                    new CuiImageComponent() {Color = "0 0 0 0.65", Material = "assets/content/ui/uibackgroundblur.mat"},
                    new CuiRectTransformComponent() {AnchorMin = "0.4126734 0.4549383", AnchorMax = "0.461979 0.592284"}
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = "BATTLEPASS - ВЫБЕРИ СВОЙ КЛАСС", Align = TextAnchor.MiddleCenter, FontSize = 25
                    },
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.178819 0.6364198", AnchorMax = "0.8179512 0.6660494"}
                }
            });
            if (permission.UserHasPermission(player.UserIDString, cfg._classList[q1].Perm))
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103945A"), Command = $"uisopass check {cfg._classList[q1].Name}"
                    },
                    Text =
                    {
                        Text = cfg._classList[q1].Name.ToUpper(), Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 1);
            }
            else
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103947A"), Command = $""
                    },
                    Text =
                    {
                        Text = "НЕДОСТУПНО", Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 1);
            }

            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 1,
                Components =
                {
                    new CuiImageComponent() {Color = "1 1 1 1", Png = GetImage(cfg._classList[q1].URL)},
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.1478906 0.532584", AnchorMax = "0.8274679 0.9460669"}
                }
            });

            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 1,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = cfg._classList[q1].Text, Align = TextAnchor.MiddleCenter, Font = regular,
                        Color = "0.64 0.64 0.64 0.86"
                    },
                    new CuiRectTransformComponent() {AnchorMin = "0 0.1056177", AnchorMax = "0.995 0.3752807"}
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Name = LayerMain + 2,
                Components =
                {
                    new CuiImageComponent() {Color = "0 0 0 0.65", Material = "assets/content/ui/uibackgroundblur.mat"},
                    new CuiRectTransformComponent() {AnchorMin = "0.4716969 0.4549383", AnchorMax = "0.520999 0.592284"}
                }
            });
            if (permission.UserHasPermission(player.UserIDString, cfg._classList[q2].Perm))
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103945A"), Command = $"uisopass check {cfg._classList[q2].Name}"
                    },
                    Text =
                    {
                        Text = cfg._classList[q2].Name.ToUpper(), Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 2);
            }
            else
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103947A"), Command = $""
                    },
                    Text =
                    {
                        Text = "НЕДОСТУПНО", Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 2);
            }

            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 2,
                Components =
                {
                    new CuiImageComponent() {Color = "1 1 1 1", Png = GetImage(cfg._classList[q2].URL)},
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.1478906 0.532584", AnchorMax = "0.8274679 0.9460669"}
                }
            });

            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 2,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = cfg._classList[q2].Text, Align = TextAnchor.MiddleCenter, Font = regular,
                        Color = "0.64 0.64 0.64 0.86"
                    },
                    new CuiRectTransformComponent() {AnchorMin = "0 0.1056177", AnchorMax = "0.995 0.3752807"}
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Name = LayerMain + 3,
                Components =
                {
                    new CuiImageComponent() {Color = "0 0 0 0.65", Material = "assets/content/ui/uibackgroundblur.mat"},
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.5307257 0.4549383", AnchorMax = "0.5800229 0.592284"}
                }
            });
            if (permission.UserHasPermission(player.UserIDString, cfg._classList[q3].Perm))
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103945A"), Command = $"uisopass check {cfg._classList[q3].Name}"
                    },
                    Text =
                    {
                        Text = cfg._classList[q3].Name.ToUpper(), Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 3);
            }
            else
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0 0", AnchorMax = "0.995 0.09754422"
                    },
                    Button =
                    {
                        Color = HexToRustFormat("#E103947A"), Command = $""
                    },
                    Text =
                    {
                        Text = "НЕДОСТУПНО", Align = TextAnchor.MiddleCenter, FontSize = 18,
                        Color = "0.64 0.64 0.64 1"
                    }
                }, LayerMain + 3);
            }

            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 3,
                Components =
                {
                    new CuiImageComponent() {Color = "1 1 1 1", Png = GetImage(cfg._classList[q3].URL)},
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.1478906 0.532584", AnchorMax = "0.8274679 0.9460669"}
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = LayerMain + 3,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = cfg._classList[q3].Text, Align = TextAnchor.MiddleCenter, Font = regular,
                        Color = "0.64 0.64 0.64 0.86"
                    },
                    new CuiRectTransformComponent() {AnchorMin = "0 0.1056177", AnchorMax = "0.995 0.3752807"}
                }
            });
            if (cfg._classList.Count > 3)
            {
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0.4015632 0.4549383", AnchorMax = "0.4093743 0.592284"
                    },
                    Button = {Color = "0.64 0.64 0.64 0", Command = $"UISoPass page-- {num}"},
                    Text = {Text = "<", Align = TextAnchor.MiddleCenter, FontSize = 25}
                }, LayerMain);
                cont.Add(new CuiButton()
                {
                    RectTransform =
                    {
                        AnchorMin = "0.5836824 0.4549383", AnchorMax = "0.5914922 0.592284"
                    },
                    Button = {Color = "0.64 0.64 0.64 0", Command = $"UISoPass page++ {num}"},
                    Text = {Text = ">", Align = TextAnchor.MiddleCenter, FontSize = 25}
                }, LayerMain);
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.4716969 0.4351849", AnchorMax = "0.520999 0.4503129"},
                    Button = {Command = "uiopeninv", Color = "0.64 0.64 0.64 0.35"},
                    Text = {Text = "ОТКРЫТЬ ИНВЕТАРЬ", Align = TextAnchor.MiddleCenter, Color = "0.64 0.64 0.64 0.66"}
                }, LayerMain);
            }

            CuiHelper.AddUi(player, cont);
        }

        private void LoadZadach(BasePlayer player, int page)
        {
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            var cont = new CuiElementContainer();
            CuiHelper.DestroyUi(player, LayerMain);
            cont.Add(_mainFon, Layer, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                Button = {Close = Layer, Color = "0 0 0 0"},
                Text = {Text = ""}
            }, LayerMain);
            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = f.Klass.ToUpper(), Align = TextAnchor.MiddleCenter, FontSize = 30
                    },
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.4678819 0.6364198", AnchorMax = "0.5279512 0.6660494"}
                }
            });
            cont.Add(new CuiElement()
            {
                Parent = LayerMain,
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = $"Ваш уровень: {f.Lvl}", Align = TextAnchor.MiddleCenter, FontSize = 12
                    },
                    new CuiRectTransformComponent()
                        {AnchorMin = "0.4678819 0.6364198", AnchorMax = "0.5279512 0.6460494"}
                }
            });
            if (page <= cfg._listQuest[f.Klass].Count - 5 * page)
            {
                cont.Add(new CuiButton()
                { 
                    RectTransform = {AnchorMin = "0.6519127 0.3333333", AnchorMax = "0.6666672 0.6666666"},
                    Button = {Command = $"UISoPass page {page + 1}", Color = "0.461376 0.312312 0.31231 0"},
                    Text = {Text = ">", Align = TextAnchor.MiddleCenter, FontSize = 30}
                }, LayerMain);
            }
  
            if (page > 1) 
            {
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.3333333 0.3333333", AnchorMax = "0.3480903 0.6666666"},
                    Button = {Command = $"UISoPass page {page - 1}", Color = "0 0 0 0"},
                    Text = {Text = "<", Align = TextAnchor.MiddleCenter, FontSize = 30}
                }, LayerMain);
            }

            var findZadah = cfg._listQuest[f.Klass];
            if (findZadah == null)
            {
                Puts("Проблема в конфиге");
                return;
            }

            foreach (var quest in findZadah.Select((i, t) => new {A = i, B = t - (page - 1) * 5}).Skip((page - 1) * 5)
                .Take(5))
            {
                cont.Add(new CuiElement()
                {
                    Parent = LayerMain,
                    Name = Layer + quest.B,
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.12 0.12 0.12 0.64",
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = $"{0.3472222} {0.5799382 - Math.Floor((double) quest.B / 1) * 0.058}",
                            AnchorMax = $"{0.6531252} {0.6345679 - Math.Floor((double) quest.B / 1) * 0.058}"
                        }
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + quest.B,
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Text = quest.A.DisplayName.ToUpper(), Align = TextAnchor.MiddleCenter
                        },
                        new CuiRectTransformComponent()
                            {AnchorMin = "0.007815376 0.8079098", AnchorMax = "0.1708284 0.9661027"}
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + quest.B,
                    Components =
                    {
                        new CuiTextComponent()
                        {
                            Text = "Уровень: " + quest.A.Lvl, Align = TextAnchor.MiddleCenter, Font = regular,
                            FontSize = 10
                        },
                        new CuiRectTransformComponent()
                            {AnchorMin = "0.007815376 0.6836164", AnchorMax = "0.1708284 0.8022601"}
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + quest.B,
                    Components =
                    {
                        new CuiImageComponent() {Color = "1 1 1 1"},
                        new CuiRectTransformComponent()
                            {AnchorMin = "0.007815376 0.668419", AnchorMax = "0.186152 0.6779668"}
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + quest.B,
                    Components =
                    {
                        new CuiImageComponent() {Color = "1 1 1 1"},
                        new CuiRectTransformComponent()
                            {AnchorMin = "0.1853143 0.04519862", AnchorMax = "0.1861517 0.9378539"}
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + quest.B,
                    Components =
                    {
                        new CuiImageComponent() {Color = "1 1 1 1"},
                        new CuiRectTransformComponent()
                            {AnchorMin = "0.852277 0.04519862", AnchorMax = "0.8530146 0.9378539"}
                    }
                });
                float i = 0;
                foreach (var zadachi in quest.A._listZadach)
                {
                    var find = f.listZadachi.Find(p => p.DisplayName == zadachi.DisplayName);
                    if (find != null && f.Lvl == quest.A.Lvl)
                    {
                        if (find.IsFinished)
                        {
                            cont.Add(new CuiElement()
                            {
                                Parent = Layer + quest.B,
                                Components =
                                {
                                    new CuiTextComponent()
                                    {
                                        Text = "ВЫПОЛНЕНО", Align = TextAnchor.MiddleCenter, FontSize = 12,
                                        Color = HexToRustFormat("#E10394")
                                    },
                                    new CuiRectTransformComponent()
                                    {
                                        AnchorMin = $"0.007815376 {0.485876 - i}",
                                        AnchorMax = $"0.1708284 {0.6327676 - i}"
                                    }
                                }
                            });
                        }
                        else
                        {
                            cont.Add(new CuiElement()
                            {
                                Parent = Layer + quest.B,
                                Components =
                                {
                                    new CuiTextComponent()
                                    {
                                        Text = $"{zadachi.DisplayName.ToUpper()}: {find.amount}",
                                        Align = TextAnchor.MiddleCenter, FontSize = 10,
                                        Color = HexToRustFormat("#ff4d4d8A")
                                    },
                                    new CuiRectTransformComponent()
                                    {
                                        AnchorMin = $"0.007815376 {0.485876 - i}",
                                        AnchorMax = $"0.1708284 {0.6327676 - i}"
                                    }
                                }
                            });
                        }
                    }
                    else
                    {
                        cont.Add(new CuiElement()
                        {
                            Parent = Layer + quest.B,
                            Components =
                            {
                                new CuiTextComponent()
                                {
                                    Text = $"{zadachi.DisplayName.ToUpper()}", Align = TextAnchor.MiddleCenter,
                                    FontSize = 10
                                },
                                new CuiRectTransformComponent()
                                {
                                    AnchorMin = $"0.007815376 {0.485876 - i}", AnchorMax = $"0.1708284 {0.6327676 - i}"
                                }
                            }
                        });
                    }

                    i += 0.0952f;
                }

                i = 0;
                foreach (var zadReward in quest.A._listReward)
                { 
                    cont.Add(new CuiElement()
                    {
                        Parent = Layer + quest.B,
                        Components =
                        {
                            new CuiImageComponent() {Color = "0 0 0 0", Material = Blur},
                            new CuiOutlineComponent() {Distance = "0 1", Color = "1 1 1 1"},
                            new CuiRectTransformComponent()
                                {AnchorMin = $"{0.2037455 + i} 0.1807913", AnchorMax = $"{0.2763903 + i} 0.8531086"}
                        }
                    });
                    cont.Add(new CuiElement()
                    {
                        Parent = Layer + quest.B,
                        Name = Layer + quest.B + "ok",
                        Components =
                        {
                            new CuiRawImageComponent() {Color = "1 1 1 1", Png = GetImage(zadReward.ShortName)},
                            new CuiRectTransformComponent()
                                {AnchorMin = $"{0.2037455 + i} 0.1807913", AnchorMax = $"{0.2763903 + i} 0.8531086"}
                        }
                    });
                    if (zadReward.Amount > 0)
                    {
                        cont.Add(new CuiElement()
                        {
                            Parent = Layer + quest.B + "ok",
                            Components =
                            {
                                new CuiTextComponent()
                                {
                                    Text = $"x{zadReward.Amount}", Align = TextAnchor.LowerRight, FontSize = 10
                                },
                                new CuiRectTransformComponent() {AnchorMin = $"0 0.05", AnchorMax = $"0.95 1"}
                            }
                        });
                    }

                    i += 0.0752f;
                }

                if (quest.A.Lvl > f.Lvl)
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform = {AnchorMin = $"0.8615204 0.40", AnchorMax = $"0.9886485 0.60"},
                        Button = {Command = "", Color = HexToRustFormat("#E103945A")},
                        Text = {Text = "НЕДОСТУПНО", Color = "0.64 0.64 0.64 0.64", Align = TextAnchor.MiddleCenter}
                    }, Layer + quest.B);
                }
                else if (f.Lvl == quest.A.Lvl && f.listZadachi.All(p => p.IsFinished) && f.listZadachi.Count > 0)
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform = {AnchorMin = $"0.8615204 0.40", AnchorMax = $"0.9886485 0.60"},
                        Button = {Command = $"UISoPass takereward {page}", Color = HexToRustFormat("#66a4908A")},
                        Text =
                        {
                            Text = "ЗАБРАТЬ НАГРАДУ", Color = "0.85 0.85 0.85 1", Align = TextAnchor.MiddleCenter
                        }
                    }, Layer + quest.B, Layer + "ACCEPT");
                }
                else if (f.Lvl == quest.A.Lvl && f.listZadachi.Count > 0)
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform = {AnchorMin = $"0.8615204 0.40", AnchorMax = $"0.9886485 0.60"},
                        Button = {Command = "", Color = HexToRustFormat("#ff4d4d5A")},
                        Text =
                        {
                            Text = "ВЫПОЛНЯЕТСЯ", Color = "0.64 0.64 0.64 0.64", Align = TextAnchor.MiddleCenter
                        }
                    }, Layer + quest.B, Layer + "ACCEPT");
                }
                else if (f.Lvl == quest.A.Lvl)
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform = {AnchorMin = $"0.8615204 0.40", AnchorMax = $"0.9886485 0.60"},
                        Button =
                        {
                            Command = $"UISoPass start {page}", Color = HexToRustFormat("#66a4909a")
                        },
                        Text = {Text = "ВЗЯТЬ ЗАДАНИЕ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter}
                    }, Layer + quest.B, Layer + "ACCEPT");
                }
                else
                {
                    cont.Add(new CuiButton()
                    {
                        RectTransform = {AnchorMin = $"0.8615204 0.40", AnchorMax = $"0.9886485 0.60"},
                        Button =
                        {
                            Command = $"", Color = HexToRustFormat("#ff4d4d3A")
                        },
                        Text = {Text = "ЗАВЕРШЕНО", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter}
                    }, Layer + quest.B, Layer + "ACCEPT");
                }
            }

            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0.6086459 0.6376544", AnchorMax = "0.6526042 0.6518518"},
                Button = {Command = "uiopeninv", Color = "0.64 0.64 0.64 0.35"},
                Text = {Text = "ОТКРЫТЬ ИНВЕТАРЬ", Align = TextAnchor.MiddleCenter, Color = "0.64 0.64 0.64 0.66"}
            }, LayerMain);
            CuiHelper.AddUi(player, cont);
        }

        [ConsoleCommand("uiopeninv")]
        void OpenInv(ConsoleSystem.Arg arg)
        {
            LoadInv(arg.Player(), 1);
        }


        private void LoadPanelNagrads(BasePlayer player, int page, string klass = "Солдат")
        {
            CuiHelper.DestroyUi(player, LayerMain);
            var cont = new CuiElementContainer();
            cont.Add(_mainFon, Layer, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                Button = {Close = Layer, Color = "0 0 0 0"},
                Text = {Text = ""}
            }, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0.4315972 0.6185169", AnchorMax = "0.569618 0.6654304"},
                Button = {Close = Layer, Color = "0 0 0 0"},
                Text = {Text = $"НАГРАДЫ ДЛЯ КЛАССА {klass.ToUpper()}", Align = TextAnchor.MiddleCenter, FontSize = 25}
            }, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0.4979166 0.3694502", AnchorMax = "0.5470486 0.3824074"},
                Button = {Command = $"uisopass class {klass}", Color = HexToRustFormat("#66a4908A")},
                Text = {Text = "ВЫБРАТЬ КЛАСС", Align = TextAnchor.MiddleCenter}
            }, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0.4479202 0.3694502", AnchorMax = "0.4970603 0.3824074"},
                Button = {Command = "chat.say /pass", Color = HexToRustFormat("#ff4d4d5A")},
                Text = {Text = "ВЕРНУТЬСЯ К ВЫБОРУ", Align = TextAnchor.MiddleCenter}
            }, LayerMain);
            for (int i = 0; i < 36; i++)
            {
                cont.Add(new CuiElement()
                {
                    Parent = LayerMain,
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.25 0.25 0.25 0.64", Material = Blur, Sprite = radial
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin =
                                $"{0.3604166 + i * 0.030 - Math.Floor((double) i / 9) * 9 * 0.030} {0.566358 - Math.Floor((double) i / 9) * 0.05}",
                            AnchorMax =
                                $"{0.3881944 + i * 0.030 - Math.Floor((double) i / 9) * 9 * 0.030} {0.6132715 - Math.Floor((double) i / 9) * 0.05}"
                        }
                    }
                });
            }

            CuiHelper.AddUi(player, cont);
            LoadNagrads(player, page, klass);
        }

        private void LoadNagrads(BasePlayer player, int page, string klass)
        {
            var cont = new CuiElementContainer();
            Dictionary<string, int> nameList = new Dictionary<string, int>();
            foreach (var reawrd in from quest in cfg._listQuest[klass]
                from reawrd in quest._listReward
                where !nameList.ContainsKey(reawrd.ShortName)
                select reawrd)
            {
                nameList.Add(reawrd.ShortName, reawrd.Amount);
            }

            if (page <= nameList.Count - 36 * page)
            {
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.6519127 0.3333333", AnchorMax = "0.6666672 0.6666666"},
                    Button = {Command = $"UISoPass next {page + 1} {klass}", Color = "0.1 0.312312 0.31231 0"},
                    Text = {Text = ">", Align = TextAnchor.MiddleCenter, FontSize = 30}
                }, LayerMain);
            }

            if (page > 1)
            {
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.3333333 0.3333333", AnchorMax = "0.3480903 0.6666666"},
                    Button = {Command = $"UISoPass next {page - 1} {klass}", Color = "0 0 0 0"},
                    Text = {Text = "<", Align = TextAnchor.MiddleCenter, FontSize = 30}
                }, LayerMain);
            }

            foreach (var reward in nameList.Select((i, t) => new {A = i, B = t - (page - 1) * 36}).Skip((page - 1) * 36)
                .Take(36))
            {
                cont.Add(new CuiElement()
                {
                    Parent = LayerMain,
                    Name = Layer + reward.B,
                    Components =
                    {
                        new CuiRawImageComponent()
                        {
                            Color = "1 1 1 1", Png = GetImage(reward.A.Key)
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin =
                                $"{0.3604166 + reward.B * 0.030 - Math.Floor((double) reward.B / 9) * 9 * 0.030} {0.566358 - Math.Floor((double) reward.B / 9) * 0.05}",
                            AnchorMax =
                                $"{0.3881944 + reward.B * 0.030 - Math.Floor((double) reward.B / 9) * 9 * 0.030} {0.6132715 - Math.Floor((double) reward.B / 9) * 0.05}"
                        }
                    }
                });
                if (reward.A.Value > 0)
                {
                    cont.Add(new CuiElement()
                    {
                        Parent = Layer + reward.B,
                        Components =
                        {
                            new CuiTextComponent()
                            {
                                Text = $"x{reward.A.Value} ", Align = TextAnchor.LowerRight, Font = regular,
                                FontSize = 14,
                                Color = "0.85 0.85 0.85 0.85"
                            },
                            new CuiRectTransformComponent()
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "1 1"
                            }
                        }
                    });
                }
            }

            CuiHelper.AddUi(player, cont);
        }

        private void LoadInv(BasePlayer player, int page)
        {
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            CuiHelper.DestroyUi(player, LayerMain);
            var cont = new CuiElementContainer();
            cont.Add(_mainFon, Layer, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                Button = {Close = Layer, Color = "0 0 0 0"},
                Text = {Text = ""}
            }, LayerMain);
            cont.Add(new CuiButton()
            {
                RectTransform = {AnchorMin = "0.4788195 0.6283951", AnchorMax = "0.5209987 0.6425911"},
                Button = {Command = "chat.say /pass", Color = "0.64 0.64 0.64 0.35"},
                Text = {Text = "ВЕРНУТЬСЯ", Align = TextAnchor.MiddleCenter, Color = "0.64 0.64 0.64 0.66"}
            }, LayerMain);
            if (page > 1)
            {
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.4015673 0.4870409", AnchorMax = "0.4157873 0.5117263"},
                    Button =
                    {
                        Color = "0.64 0.64 0.64 0",
                        Command = $"uisopass nextpage {page - 1}"
                    },
                    Text =
                    {
                        Text = "<", Align = TextAnchor.MiddleCenter, FontSize = 25
                    }
                }, LayerMain, Layer + "NextPage-");
            }

            if (page <= f.ListRewards.Count - 20 * page)
            {
                cont.Add(new CuiButton()
                {
                    RectTransform = {AnchorMin = "0.5868118 0.4870409", AnchorMax = "0.6010293 0.5117263"},
                    Button =
                    {
                        Color = "0.64 0.64 0.64 0",
                        Command = $"uisopass nextpage {page + 1}"
                    },
                    Text = {Text = ">", Align = TextAnchor.MiddleCenter, FontSize = 25}
                }, LayerMain, Layer + "NextPage+");
            }

            foreach (var key in f.ListRewards.Select((i, t) => new {A = i, B = t - (page - 1) * 20})
                .Skip((page - 1) * 20)
                .Take(20))
            {
                cont.Add(new CuiElement()
                {
                    Parent = LayerMain,
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.64 0.64 0.64 0", Material = Blur, Sprite = radial
                        },
                        new CuiOutlineComponent() {Color = "1 1 1 1", Distance = "0 1"},
                        new CuiRectTransformComponent()
                        {
                            AnchorMin =
                                $"{0.4290492 + key.B * 0.030 - Math.Floor((double) key.B / 5) * 5 * 0.030} {0.5478395 - Math.Floor((double) key.B / 5) * 0.05}",
                            AnchorMax =
                                $"{0.4565972 + key.B * 0.030 - Math.Floor((double) key.B / 5) * 5 * 0.030} {0.5935185 - Math.Floor((double) key.B / 5) * 0.05}"
                        }
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = LayerMain,
                    Name = Layer + key.B,
                    Components =
                    {
                        new CuiImageComponent()
                        {
                            Color = "0.64 0.64 0.64 0", Material = Blur, Sprite = radial
                        },
                        new CuiOutlineComponent() {Color = "1 1 1 1", Distance = "0 1"},
                        new CuiRectTransformComponent()
                        {
                            AnchorMin =
                                $"{0.4290492 + key.B * 0.030 - Math.Floor((double) key.B / 5) * 5 * 0.030} {0.5478395 - Math.Floor((double) key.B / 5) * 0.05}",
                            AnchorMax =
                                $"{0.4565972 + key.B * 0.030 - Math.Floor((double) key.B / 5) * 5 * 0.030} {0.5935185 - Math.Floor((double) key.B / 5) * 0.05}"
                        }
                    }
                });
                cont.Add(new CuiElement()
                {
                    Parent = Layer + key.B,
                    Components =
                    {
                        new CuiRawImageComponent()
                        {
                            Color = "1 1 1 1", Png = GetImage(key.A.ShortName)
                        },
                        new CuiRectTransformComponent()
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "1 1"
                        }
                    }
                });
                if (key.A.Amount > 0)
                {
                    cont.Add(new CuiElement()
                    {
                        Parent = Layer + key.B,
                        Components =
                        {
                            new CuiTextComponent()
                            {
                                Text = $"x{key.A.Amount} ", Align = TextAnchor.LowerRight, Font = regular,
                                FontSize = 14,
                                Color = "0.85 0.85 0.85 0.85"
                            },
                            new CuiRectTransformComponent()
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "1 1"
                            }
                        }
                    });
                }

                cont.Add(new CuiButton()
                {
                    Button = {Command = $"UISoPass takeinv {page} {key.B}", Color = "0 0 0 0"},
                    Text = {Text = $""},
                    RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"}
                }, Layer + key.B);
            }

            CuiHelper.AddUi(player, cont);
        }

        [ConsoleCommand("UISoPass")]
        void SoPassCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            PlayerData f;
            switch (arg.Args[0])
            {
                case "page++":
                    StartUI(arg.Player(), arg.Args[1].ToInt() + 1);
                    break;
                case "check":
                    LoadPanelNagrads(arg.Player(), 1, arg.Args[1]);
                    break;
                case "next":
                    LoadPanelNagrads(arg.Player(), arg.Args[1].ToInt(), arg.Args[2]);
                    break;
                case "page":
                    LoadZadach(player, arg.Args[1].ToInt());
                    break;
                case "takeinv":
                    if (!_playerData.TryGetValue(player.userID, out f)) return;
                    var t = f.ListRewards[arg.Args[2].ToInt()];
                    f.ListRewards.RemoveAt(arg.Args[2].ToInt());
                    LoadInv(player, arg.Args[1].ToInt());
                    if (t.nabor)
                    {
                        foreach (var itemse in t.itemList)
                        {

                            if (string.IsNullOrEmpty(itemse.command))
                            {
                                var item = ItemManager.CreateByName(itemse.ShortName, itemse.Amount, itemse.SkinId);
                                if (!arg.Player().inventory.GiveItem(item))
                                    item.Drop(player.inventory.containerMain.dropPosition,
                                        player.inventory.containerMain.dropVelocity);
                            }
                            else
                            {
                                rust.RunServerCommand(string.Format(itemse.command, player.userID));
                            }
                        }
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(t.command))
                        {
                            var item = ItemManager.CreateByName(t.ShortName, t.Amount, t.SkinId);
                            if (!arg.Player().inventory.GiveItem(item))
                                item.Drop(player.inventory.containerMain.dropPosition,
                                    player.inventory.containerMain.dropVelocity);
                        }
                        else
                        {
                            rust.RunServerCommand(string.Format(t.command, player.userID));
                        }
                        
                    }
                    break;
                case "nextpage":
                    LoadInv(player, arg.Args[1].ToInt());
                    break;
                case "page--":
                    StartUI(arg.Player(), arg.Args[1].ToInt() - 1);
                    break;
                case "class":
                    if (_playerData.TryGetValue(player.userID, out f)) return;

                    _playerData.Add(player.userID, new PlayerData()
                    { 
                        Lvl = 1,
                        NickName = player.displayName,
                        Klass = string.Join(" ", arg.Args.Skip(1).ToArray()),
                        listZadachi = new List<Zadachi>(),
                        ListRewards = new List<Reward>()
                    });
                    LoadZadach(player, 1);
                    break;
                case "start":
                    if (!_playerData.TryGetValue(player.userID, out f)) return;
                    var klass = f.Klass;
                    var findQuest = cfg._listQuest[klass].Find(p => p.Lvl == f.Lvl);
                    foreach (var zadachi in findQuest._listZadach)
                    {
                       f.listZadachi.Add(new Zadachi()
                       {
                           amount = zadachi.amount,
                           DisplayName = zadachi.DisplayName,
                           IsFinished = false,
                           need = zadachi.need,
                           type = zadachi.type,
                           Weapon = zadachi.Weapon
                       });
                    }
                    LoadZadach(player, arg.Args[1].ToInt());
                    break;
                case "takereward": 
                    if (!_playerData.TryGetValue(player.userID, out f)) return;
                    klass = f.Klass;
                    findQuest = cfg._listQuest[klass].Find(p => p.Lvl == f.Lvl);
                    foreach (var reward in findQuest._listReward)
                    {
                        f.ListRewards.Add(reward);
                    }

                    f.listZadachi.Clear();
                    f.Lvl += 1;
                    LoadZadach(player, arg.Args[1].ToInt());
                    break;
            }
        }

        #endregion
        #region Hooks
        private object OnDispenserGather(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null || player == null || item == null) return null;

            NextTick(() =>
            {
                PlayerData f;
                if (!_playerData.TryGetValue(player.userID, out f)) return;
                var findZadah = f.listZadachi.FindAll(p => p.type == 1)
                    ?.Find(p => p.need == item.info.shortname);
                if (findZadah == null) return;
                if (player.GetActiveItem() == null)
                    Check(player, findZadah, item.amount, f);
                else
                    Check(player, findZadah, item.amount, f, player.GetActiveItem().info.shortname);
            });
            return null;
        }

        private object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item) =>
            OnDispenserGather(dispenser, player, item);

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            var _weapon = info?.Weapon?.GetItem()?.info?.shortname ?? info?.WeaponPrefab?.name;
            if (entity == null || info == null || !(info.Initiator as BasePlayer)) return;
            var attacker = info.InitiatorPlayer;
            PlayerData f;
            if (entity is BasePlayer)
            {
                if (IsFriends(entity.ToPlayer().userID, attacker.userID)) return;
            }
            else
            {
                if (entity.OwnerID == attacker.userID || IsFriends(entity.OwnerID, attacker.userID)) return;
            }
            if (!_playerData.TryGetValue(attacker.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 2)?.Find(p => p.need.Contains(entity.ShortPrefabName));
            if (findZadah == null) return;  
            Check(attacker, findZadah, 1, f, _weapon);
        }

        private void OnItemCraftFinished(ItemCraftTask task, Item item)
        { 
            PlayerData f;
            if (!_playerData.TryGetValue(task.owner.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 3)?.Find(p => p.need.Contains(item.info.shortname));
            if (findZadah == null) return;
            Check(task.owner, findZadah, item.amount, f);
        }

        private void OnItemResearch(ResearchTable table, Item item, BasePlayer player)
        {
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 4)
                ?.Find(p => p.need.Contains(item.info.shortname));
            if (findZadah == null) return;
            Check(player, findZadah, 1, f);
        }  

        private void OnLootEntity(BasePlayer player, BaseEntity entity)
        {  
            if (entity == null || player == null || entity.OwnerID != 0) return;
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 5)
                ?.Find(p => p.need.Contains(entity.ShortPrefabName));
            if (findZadah == null) return;
            entity.OwnerID = player.userID;
            Check(player, findZadah, 1, f);
        }

        private void OnEntitySpawned(BaseEntity entity)
        {
            if (entity == null) return;
            var player = BasePlayer.FindByID(entity.OwnerID);
            if (player == null) return;
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 6)
                ?.Find(p => p.need.Contains(entity.ShortPrefabName));
            if (findZadah == null) return;

            Check(player, findZadah, 1, f);
        } 

        private void OnItemRepair(BasePlayer player, Item item)
        {
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return;
            var findZadah = f.listZadachi.FindAll(p => p.type == 7)
                ?.Find(p => p.need.Contains(item.info.shortname));
            if (findZadah == null) return;
            Check(player, findZadah, 1, f);
        }

        private object OnCollectiblePickup(Item item, BasePlayer player, CollectibleEntity entity)
        {
            if (entity == null || player == null || item == null) return null;

            NextTick(() =>
            {
                PlayerData f;
                if (!_playerData.TryGetValue(player.userID, out f)) return;
                var findZadah = f.listZadachi.FindAll(p => p.type == 8)
                    ?.Find(p => p.need.Contains(item.info.shortname));
                if (findZadah == null) return;
                if (player.GetActiveItem() == null)
                    Check(player, findZadah, item.amount, f);
                else
                    Check(player, findZadah, item.amount, f, player.GetActiveItem().info.shortname);
            });
            return null;
        }

        private Dictionary<int, string> _gradeList = new Dictionary<int, string>()
        {
            [1] = "дерево",
            [2] = "камень",
            [3] = "металл",
            [4] = "мвк",
        };

        private object OnStructureUpgrade(BaseCombatEntity entity, BasePlayer player, BuildingGrade.Enum grade)
        {
            PlayerData f;
            string res;
            if (!_playerData.TryGetValue(player.userID, out f)) return null;
            if (!_gradeList.TryGetValue((int) grade, out res)) return null;
            var findZadah = f.listZadachi.FindAll(p => p.type == 9)?.Find(p => p.need.Contains(entity.ShortPrefabName));
            if (findZadah == null) return null;
            if (findZadah.Weapon != res) return null;
            Check(player, findZadah, 1, f);
            return null;
        }     

        private object OnCardSwipe(CardReader cardReader, Keycard card, BasePlayer player)
        {
            PlayerData f;
            if (cardReader.accessLevel != card.accessLevel) return null;
            if (!_playerData.TryGetValue(player.userID, out f)) return null;
            var findZadah = f.listZadachi.FindAll(p => p.type == 10)
                ?.Find(p => p.need.Contains(card.GetItem().info.shortname));
            if (findZadah == null) return null;
            Check(player, findZadah, 1, f);
            return null;
        }

        private object OnBuyVendingItem(VendingMachine machine, BasePlayer player, int sellOrderId, int numberOfTransactions)
        {
            PlayerData f;
            if (!_playerData.TryGetValue(player.userID, out f)) return null;
            var item = ItemManager.FindItemDefinition(machine.sellOrders.sellOrders[sellOrderId].itemToSellID);
            if (item == null) return null;
            var findZadah = f.listZadachi.FindAll(p => p.type == 11)?.Find(p => p.need.Contains(item.shortname));
            if (findZadah == null) return null;
            Check(player, findZadah, machine.sellOrders.sellOrders[sellOrderId].itemToSellAmount, f);
            return null;
        } 

        private void OnServerInitialized()
        {
            foreach (var reward in from q in cfg._listQuest
                from quest in q.Value
                from reward in quest._listReward
                select reward)
            {
                AddImage(reward.URL, reward.ShortName);
            }

            foreach (var classPlayer in cfg._classList)
            {
                AddImage(classPlayer.URL, classPlayer.URL);
                if (!permission.PermissionExists(classPlayer.Perm))
                    permission.RegisterPermission(classPlayer.Perm, this);
            }

            if (Interface.Oxide.DataFileSystem.ExistsDatafile("SoPass"))
                _playerData =
                    Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, PlayerData>>("SoPass");
        }

        private void Unload()
        {
            Interface.Oxide.DataFileSystem.WriteObject("SoPass", _playerData);
            foreach (var basePlayer in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(basePlayer, Layer);
            }
        }

        #endregion
        #region Mettods

        void Check(BasePlayer player, Zadachi findZadah, int amount, PlayerData data, string weapon = "")
        {
            if (findZadah.IsFinished) return;
            if (!string.IsNullOrEmpty(findZadah.Weapon) && !findZadah.Weapon.Contains(weapon)) return;
            
            findZadah.amount -= amount;
            if (findZadah.amount <= 0)
            {
                findZadah.IsFinished = true;
                player.SendConsoleCommand($"note.inv {ItemManager.FindItemDefinition("rifle.ak").itemid} 1 \"ЗАДАЧА\"");
                if (data.listZadachi.All(p => p.IsFinished))
                {
                    ReplySend(player, $"Все задачи выполнены заберите награду /pass");
                }
            }        
        }

        private bool IsFriends(ulong owner, ulong player)
        {
            if (SoFriends)
                return (bool) SoFriends.CallHook("IsFriend", player, owner);
            if (Friends)
                return (bool) Friends.CallHook("IsFriend", player, owner);
            return false;
        }

        #endregion
        #region Help

        [PluginReference] private Plugin ImageLibrary;

        public string GetImage(string shortname, ulong skin = 0) =>
            (string) ImageLibrary.Call("GetImage", shortname, skin);

        public bool AddImage(string url, string shortname, ulong skin = 0) =>
            (bool) ImageLibrary.Call("AddImage", url, shortname, skin);

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex)) hex = "#FFFFFFFF";
            var str = hex.Trim('#');
            if (str.Length == 6) str += "FF";
            if (str.Length != 8)
            {
                throw new Exception(hex);
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);
            Color color = new Color32(r, g, b, a);
            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }

        private void ReplySend(BasePlayer player, string message) => player.SendConsoleCommand("chat.add 0",
            new object[2]
                {76561199015371818, $"<size=18><color=purple>SoPass</color></size>\n{message}"});

        [PluginReference] private Plugin SoFriends, Friends;

        #endregion
    }
}


// --- End of file: SoPass.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MenuRevolve.cs ---
// --- Original Local Path: MenuRevolve.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("MenuRevolve", "TopPlugin.ru", "0.0.3")]
    [Description("Приятное меню для вашего сервера")]
    class MenuRevolve : RustPlugin
    {
        #region Reference
        [PluginReference] Plugin IQChat;    
        #endregion

        #region Configuration

        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Оглавление меню")]
            public string DisplayNmeMenu;
            [JsonProperty("Описание меню")]
            public string DescriptionMenu;
            [JsonProperty("Страницы с текстом")]
            public List<Settings> MenuConfiguration = new List<Settings>();
            [JsonProperty("Настройки для IQChat")]
            public ChatSettings ChatSetting = new ChatSettings();
            internal class Settings
            {
                [JsonProperty("Текст кнопки")]
                public string DisplayNameButton;
                [JsonProperty("Оглавление на информативном блоке")]
                public string TitleInfoBlock;
                [JsonProperty("Текст на странице")]
                public List<string> Text = new List<string>();
            }

            internal class ChatSettings
            {
                [JsonProperty("Префикс(IQChat)")]
                public string CustomPrefix;
                [JsonProperty("Steam64ID для аватарки(IQChat)")]
                public string CustomAvatar;
                [JsonProperty("Цвет-HEX для префикса(IQChat)")]
                public string HexColorPrefix;
            }

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    DisplayNmeMenu = "<size=40><b>Добро пожаловать на сервер <color=#5cc4ff>ВАШ ТОПОВЫЙ</color><color=#986ceb>СЕРВЕР</color></b></size>",
                    DescriptionMenu = "<size=25>Это меню поможет вам ознакомиться с сервером</size>",
                    ChatSetting = new ChatSettings
                    {
                        CustomPrefix = "[ИНФО СЕРВЕРА]",
                        CustomAvatar = "0",
                        HexColorPrefix = "#FFAA99",
                    },
                    MenuConfiguration = new List<Settings>
                    {
                        new Settings
                        {
                            DisplayNameButton = "<size=25>Правила</size>",
                            TitleInfoBlock = "<size=30><b>Ознакомтесь с правилами сервера</b></size>",
                            Text = new List<string>
                            {
                                "<size=20><color=#DB4067><b>X</b></color></size><size=15>Вы можете форматировать текст по разному</size>",
                                "<size=21><color=#DB4067><b>X</b></color></size><size=15>Добавляя <b>жирности</b></size>",
                                "<size=22><color=#DB4067><b>X</b></color></size><size=15>Меняя <color=#34B3FF>цвета</color></size>",
                                "<size=23><color=#DB4067><b>X</b></color></size><size=15>Плагин не ограничивает вас</size>",
                            }
                        },
                        new Settings
                        {
                            DisplayNameButton = "<size=25>Команды</size>",
                            TitleInfoBlock = "Ознакомтесь с командами сервера",
                            Text = new List<string>
                            {
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                            }
                        },
                        new Settings
                        {
                            DisplayNameButton = "<size=25>Тестовый</size>",
                            TitleInfoBlock = "ТЕКСТ",
                            Text = new List<string>
                            {
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                                "<size=17> Тестовый текст </size>",
                            }
                        },
                    }
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка #58 чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Data
        public List<ulong> NoOpenMenuListUsers = new List<ulong>();
        #endregion

        #region Hooks

        void Unload()
        {
            for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
            {
                var p = BasePlayer.activePlayerList[i];
                CuiHelper.DestroyUi(p, MAIN_PARENT);
            }
        }
        private void OnServerSave() => Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("MenuRevolve/NoOpenMenuListUsers", NoOpenMenuListUsers);
        private void OnServerInitialized()
        {
            NoOpenMenuListUsers = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<List<ulong>>("MenuRevolve/NoOpenMenuListUsers");
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("MenuRevolve/NoOpenMenuListUsers", NoOpenMenuListUsers);
        }
        void OnPlayerConnected(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerConnected(player));
                return;
            }
            if (!NoOpenMenuListUsers.Contains(player.userID))
                USER_INTERFACE(player);
            else SendChat(lang.GetMessage("MENU_ALERT_AUTO_START",this, player.UserIDString), player);
        }

        #endregion

        #region Commands
        [ChatCommand("info")]
        void ChatCommandMenu(BasePlayer player)
        {
            USER_INTERFACE(player);
        }

        [ConsoleCommand("menu")]
        void MenuConsoleCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (arg.Args.Length <= 0 || arg.Args[0] == null)
            {
                USER_INTERFACE(player);
                return;
            }

            switch (arg.Args[0])
            {
                case "select_category":
                    {
                        int Category = Convert.ToInt32(arg.Args[1]);
                        SelectCategory(player, Category,0);
                        break;
                    }
                case "page_next":
                    {
                        int Category = Convert.ToInt32(arg.Args[1]);
                        int IndexList = Convert.ToInt32(arg.Args[2]);
                        SelectCategory(player, Category, IndexList + 1);
                        break;
                    }
                case "page_back":
                    {
                        int Category = Convert.ToInt32(arg.Args[1]);
                        int IndexList = Convert.ToInt32(arg.Args[2]);
                        SelectCategory(player, Category, IndexList - 1);
                        break;
                    }
                case "alert_func":
                    {
                        if (!NoOpenMenuListUsers.Contains(player.userID))
                        {
                            NoOpenMenuListUsers.Add(player.userID);
                            SendChat(lang.GetMessage("MENU_ALERT_OFF", this, player.UserIDString), player);
                        }
                        else
                        {
                            NoOpenMenuListUsers.Remove(player.userID);
                            SendChat(lang.GetMessage("MENU_ALERT_ON", this, player.UserIDString), player);
                        }
                        CuiHelper.DestroyUi(player, MAIN_PARENT);
                        break;
                    }

            }
        }
        #endregion

        #region Lang
        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["MENU_CLOSE"] = "Close",
                ["MENU_NO_ALERT"] = "Don't show again",
                ["MENU_YES_ALERT"] = "Show again",
                ["MENU_ALERT_OFF"] = "You have successfully <color=#db2d21>disabled</color> the menu when entering the server!\nTo open the menu, use the command <color=#5cc4ff>/menu</color>",
                ["MENU_ALERT_ON"] = "You have successfully <color=#72db21>enabled</color> the menu to open when you enter the server! \nTo open the menu, use the command <color=#5cc4ff>/menu</color>",
                ["MENU_ALERT_AUTO_START"] = "Welcome to the server <color=#5cc4ff>PONY</color><color=#986ceb>LAND</color></b\nYou have <color=#db2d21> disabled </color> the menu on login!\nTo open it, write <color=#5cc4ff>/menu</color>",
                ["MENU_UI_PAGE_ACTION_NEXT"] = "NEXT",
                ["MENU_UI_PAGE_ACTION_BACK"] = "BACK",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["MENU_CLOSE"] = "Закрыть",
                ["MENU_NO_ALERT"] = "Больше не показывать",
                ["MENU_YES_ALERT"] = "Снова показывать",
                ["MENU_ALERT_OFF"] = "Вы успешно <color=#db2d21>отключили</color> открытие меню при входе на сервер!\nЧтобы открыть меню,используйте команду <color=#5cc4ff>/menu</color>",
                ["MENU_ALERT_ON"] = "Вы успешно <color=#72db21>включили</color> открытие меню при входе на сервер!\nЧтобы открыть меню,используйте команду <color=#5cc4ff>/menu</color>",
                ["MENU_ALERT_AUTO_START"] = "\nУ вас <color=#db2d21>отключен</color> показ меню при входе!\nЧтобы открыть его,пропишите <color=#5cc4ff>/menu</color>",
                ["MENU_UI_PAGE_ACTION_NEXT"] = "ДАЛЕЕ",
                ["MENU_UI_PAGE_ACTION_BACK"] = "НАЗАД",
            }, this, "ru");
            PrintWarning("Lang loaded");
        }
        #endregion

        #region UI

        #region Parents
        public static string MAIN_PARENT = "PARENT_MAIN";
        #endregion

        public void USER_INTERFACE(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, MAIN_PARENT);

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0.5", Material = "assets/content/ui/uibackgroundblur.mat", Sprite = "assets/content/ui/ui.background.transparent.radial.psd" }
            }, "Overlay", MAIN_PARENT);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.01041669 0.02407", AnchorMax = "0.184375 0.8203704" },
                Image = { Color = "0 0 0 0.5" }
            },  MAIN_PARENT, "BLOCK_BUTTONS");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.1 0.8333323", AnchorMax = "0.9 0.8342583" },
                Image = { Color = HexToRustFormat("#FFFFFF60") }
            }, MAIN_PARENT);

            #region CategoryMenu

            for (int i = 0; i < config.MenuConfiguration.Count; i++)
            {
                var ButtonText = config.MenuConfiguration[i].DisplayNameButton;

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0 {0.9302325 - (i * 0.08)}", AnchorMax = $"1 {1 - (i * 0.08)}" },
                    Text = { Text = ButtonText, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
                }, "BLOCK_BUTTONS",$"BUTTON_MAIN_{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"menu select_category {i}",Color = "0 0 0 0.1" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                },  $"BUTTON_MAIN_{i}", $"CATEGORY_NAME_{i}");
            }

            #endregion

            #region Titles

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.8944442", AnchorMax = "1 0.9648145" },
                Text = { Text = config.DisplayNmeMenu, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, MAIN_PARENT);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.8351852", AnchorMax = "1 0.9009275" },
                Text = { Text = config.DescriptionMenu, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
            }, MAIN_PARENT);

            #endregion

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8807292 0.9453704", AnchorMax = "0.9963542 1" },
                Button = { Close = MAIN_PARENT, Color = "0 0 0 0.1" },
                Text = { Text = lang.GetMessage("MENU_CLOSE",this, player.UserIDString), FontSize = 35, Align = TextAnchor.UpperRight }
            }, MAIN_PARENT);

            string AlertTextLang = !NoOpenMenuListUsers.Contains(player.userID) ? "MENU_NO_ALERT" : "MENU_YES_ALERT";
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.8921875 0.9157408", AnchorMax = "0.9958 0.9425939" },
                Button = { Command = "menu alert_func", Color = "0 0 0 0.1" },
                Text = { Text = lang.GetMessage(AlertTextLang,this,player.UserIDString), FontSize = 12, Align = TextAnchor.UpperRight }
            }, MAIN_PARENT);

            CuiHelper.AddUi(player, container);
            SelectCategory(player, 0,0);
        }

        #region HelpMetodsUI

        void SelectCategory(BasePlayer player,int CategoryIndex,int Page)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, "BLOCK_INFO");
            CuiHelper.DestroyUi(player, "BACK_BUTTON");
            CuiHelper.DestroyUi(player, "NEXT_BUTTON");
            var CountText = config.MenuConfiguration[CategoryIndex].Text.Count;

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.1875 0.0240741", AnchorMax = "0.9875 0.82037" },
                Image = { Color = "0 0 0 0.5" }
            }, MAIN_PARENT, "BLOCK_INFO");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.9209301", AnchorMax = "1 1" },
                Text = { Text = config.MenuConfiguration[CategoryIndex].TitleInfoBlock, Font = "robotocondensed-regular.ttf", Align = TextAnchor.UpperCenter }
            }, "BLOCK_INFO");

            int i = 0;
            foreach(var cfg in config.MenuConfiguration[CategoryIndex].Text.Skip(Page * 16))
            {
                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0 {0.8604651 - (i * 0.04)}", AnchorMax = $"1 {0.9081395 - (i * 0.04)}" },
                    Text = { Text = cfg, Font = "robotocondensed-regular.ttf", Align = TextAnchor.UpperCenter }
                }, "BLOCK_INFO");
                i++;
                if (i == 20) break;
            }

            if (CountText > (Page + 1) * 20)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.8802256 0", AnchorMax = "1 0.08" },
                    Button = { Command = $"menu page_next {CategoryIndex} {Page}", Color = "0 0 0 0.1" },
                    Text = { Text = lang.GetMessage("MENU_UI_PAGE_ACTION_NEXT",this, player.UserIDString),FontSize = 30, Align = TextAnchor.UpperCenter }
                }, $"BLOCK_INFO", "NEXT_BUTTON");
            }
            if(Page != 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0.1204373 0.05930" },
                    Button = { Command = $"menu page_back {CategoryIndex} {Page}", Color = "0 0 0 0.1" },
                    Text = { Text = lang.GetMessage("MENU_UI_PAGE_ACTION_BACK", this, player.UserIDString), FontSize = 30, Align = TextAnchor.UpperCenter }
                }, $"BLOCK_INFO", "BACK_BUTTON");
            }

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #endregion

        #region Help
        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            UnityEngine.Color color = new Color32(r, g, b, a);

            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }

        public void SendChat(string Message, BasePlayer player, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, $"<color={config.ChatSetting.HexColorPrefix}>{config.ChatSetting.CustomPrefix}</color>", config.ChatSetting.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }

        #endregion
    }
}

// --- End of file: MenuRevolve.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/SkipNight.cs ---
// --- Original Local Path: SkipNight.cs ---

using Oxide.Core;
using UnityEngine;
using System.Linq;
using Oxide.Game.Rust.Cui;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("SkipNight", "walkinrey", "1.0.4")]
    class SkipNight : RustPlugin
    {
      #region Configuration
      class Configuration
      {
        [JsonProperty(PropertyName = "Сколько секунд будет длиться голосование (по умолчанию 60)")]
        public float VoteTime = 60f;
        [JsonProperty(PropertyName = "Сообщение при пропуске ночи")]
        public string SkipNightString = "Голосование окончено. Большинство проголосовало за пропуск ночи.";
        [JsonProperty(PropertyName = "Сообщение против пропуска ночи")]
        public string DisskipNightString = "Голосование окончено. Большинство проголосовало против пропуска ночи, оставляем текущее время суток.";
        [JsonProperty(PropertyName = "Какое время устанавливать при пропуске ночи (по умолчанию 12)")]
        public float TimeSet = 12f;
        [JsonProperty(PropertyName = "Раз в сколько секунд проверять текущее время на сервере? (влияет на производительность сервера)")]
        public float CheckTime = 5f;
        [JsonProperty(PropertyName = "Во сколько начинать голосование по игровому времени? (по умолчанию 18)")]
        public float VoteGameTime = 18f;
        [JsonProperty(PropertyName = "Какие дни будут пропускаться")]
        public int[] daysDisable = {1, 5, 12, 18, 24};
      }
      protected override void LoadDefaultConfig() => config = new Configuration();
      protected override void LoadConfig()
      {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                LoadDefaultConfig();
            }
            Config.WriteObject(config, true);
      }
      #endregion
      #region References
      private Configuration config;
      private int AgreeVoted;
      private int DisagreeVoted;
      private bool VoteActive;
      private bool DisagreeActive;
      private List<BasePlayer> PlayersVoted = new List<BasePlayer>();
      [PluginReference] private Plugin ImageLibrary;
      #endregion
      #region Methods
      private void OnServerInitialized(bool initial) 
      {
         StartTimer();
      }
      [ChatCommand("disagreevote")]
      private void DisagreeVote(BasePlayer player)
      {
        if(PlayersVoted.Contains(player))
        {
          SendReply(player, "Вы уже голосовали раннее!");
        }
        else
        {
          if(VoteActive == true)
          {
                DestroyGUI(player);
                DisagreeVoted += 1;
                PlayersVoted.Add(player);
          }
        else
          {
            SendReply(player, "В данный момент не проходит голосование.");
          }   
        }
      }
      [ChatCommand("agreevote")]
      private void AgreeVote(BasePlayer player)
      {
        if(PlayersVoted.Contains(player))
        {
          SendReply(player, "Вы уже голосовали раннее!");
        }
        else
        {
                 if(VoteActive == true)
        {
        DestroyGUI(player);
        AgreeVoted += 1;
        PlayersVoted.Add(player);
        }
        else
        {
            SendReply(player, "В данный момент не проходит голосование.");
        }   
        }
      }
      private void VoteTimer()
      {
        float seconds = config.VoteTime;
        timer.Once(seconds, () =>
        {
           if(AgreeVoted > DisagreeVoted)
           {
             PrintToChat(config.SkipNightString);
             covalence.Server.Command("env.time " + config.TimeSet);
             SetDay();
             DestroyGUIAll();
           }
           else
           {
               PrintToChat(config.DisskipNightString);
               DestroyGUIAll();
               DisagreeActive = true;
           }
           VoteActive = false;
           AgreeVoted = 0;
           PlayersVoted = new List<BasePlayer>();
           DisagreeVoted = 0;
        });
      }
      private void SetDay()
      {
        int day = (TOD_Sky.Instance.Cycle.Day) + 1;
        if(day > 30) day = 1;
        TOD_Sky.Instance.Cycle.Day = day;
      }
      private float GetCurrentTime()
      {
        float time = TOD_Sky.Instance.Cycle.Hour;
        return time;
      }
      private bool IsDayCheck()
      {
         float time = GetCurrentTime();
         if(time < 18) return true;
         else return false;
      }
      private void StartTimer()
      {
        VoteActive = false;
         timer.Every(config.CheckTime, () =>
         {
           if(VoteActive == false)
           {
             float currentTime = GetCurrentTime();
             bool isDay = IsDayCheck();
             if(DisagreeActive == true && isDay == true) DisagreeActive = false;
             if(currentTime > config.VoteGameTime && DisagreeActive == false) CreateVoteGUI();
           }
         });
      }
      #region Hooks
      private void Loaded()
      {
        if(ImageLibrary == null)
        {
           PrintError("ОТКЛЮЧЕНИЕ ПЛАГИНА. У вас не установлен ImageLibrary!");
           Interface.Oxide.UnloadPlugin(Title);
           return;
        }
        ImageLibrary.CallHook("AddImage", "https://i.imgur.com/XPBv6WR.png", "SkipNightUI");
         LoadConfig();
      }
      private void Unload()
      {
        DestroyGUIAll();
        PlayersVoted = new List<BasePlayer>();
        AgreeVoted = 0;
        DisagreeVoted = 0;
      }
      #endregion
      #endregion
        #region GUI
        private void DestroyGUI(BasePlayer player)
        {
          CuiHelper.DestroyUi(player, "ButtonNo");
          CuiHelper.DestroyUi(player, "ImageVote");
          CuiHelper.DestroyUi(player, "ButtonYes");
        }
        private void DestroyGUIAll()
        {
           var activePlayerList = BasePlayer.activePlayerList.ToArray().ToList();
           foreach(var players in activePlayerList)
           {
          CuiHelper.DestroyUi(players, "ButtonNo");
          CuiHelper.DestroyUi(players, "ImageVote");
          CuiHelper.DestroyUi(players, "ButtonYes");
           }
        }
        private void CreateVoteGUI()
        {
          bool isSkipDay = false;
          for(int i = 0; i < config.daysDisable.Length; i++)
          {
            if(TOD_Sky.Instance.Cycle.Day == config.daysDisable[i]) {isSkipDay = true; break;}
          }
          if(isSkipDay == true) return;
          VoteTimer();
          VoteActive = true;
           var elements = CreateObjects();
           var activePlayerList = BasePlayer.activePlayerList.ToArray().ToList();
           foreach(var players in activePlayerList)
           {
              CuiHelper.AddUi(players, elements);
           }
        }
        private CuiElementContainer CreateObjects()
        {
          var elements = new CuiElementContainer();
          elements.Add(new CuiElement
            {
              Name = "ImageVote",
              Parent = "Overlay",
                Components =
                {       
                    new CuiRawImageComponent
                    {
                        Png = (string)ImageLibrary.CallHook("GetImage", "SkipNightUI")
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0.051",
                        AnchorMax = "0.281 0.19"
                    }
                }
            });
          var ButtonNo = elements.Add(new CuiButton
          {
            Button =
            {
              Close = "",
              Color = "0.31 0.31 0.31 0",
              Command = "chat.say /disagreevote"
            },
            RectTransform = 
            {
              AnchorMin = "0.091 0.076",
              AnchorMax = "0.159 0.115"
            },
            Text =
            {
              Text = "",
              FontSize = 11,
              Align = TextAnchor.MiddleCenter
            }
          }, "Overlay", "ButtonNo");
          var ButtonYes = elements.Add(new CuiButton
          {
            Button =
            {
              Close = "",
              Color = "0.31 0.31 0.31 0",
              Command = "chat.say /agreevote"
            },
            RectTransform = 
            {
              AnchorMin = "0.011 0.079",
              AnchorMax = "0.077 0.115"
            },
            Text =
            {
              Text = "",
              FontSize = 11,
              Align = TextAnchor.MiddleCenter
            }
          }, "Overlay", "ButtonYes");
          return elements;
        }
        #endregion
    }
}

// --- End of file: SkipNight.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RadHouse120.cs ---
// --- Original Local Path: RadHouse120.cs ---

﻿using Facepunch;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
namespace Oxide.Plugins
{
    [Info("RadHouse120", "RustPlugin.ru", "1.2.0")]

    class RadHouse120 : RustPlugin
    {
        // Other needed functions and vars
        #region SomeParameters and plugin's load
        [PluginReference]
        Plugin RandomSpawns;
        [PluginReference]
        Plugin RustMap;
        [PluginReference]
        Plugin Map;
        [PluginReference]
        Plugin LustyMap;

        static RadHouse120 ins;

        private List<ZoneList> RadiationZones = new List<ZoneList>();
        private static readonly int playerLayer = LayerMask.GetMask("Player (Server)");
        private static readonly Collider[] colBuffer = Vis.colBuffer;
        private ZoneList RadHouseZone;
        private BaseEntity LootBox;


        public List<BaseEntity> BaseEntityList = new List<BaseEntity>();
        public List<ulong> PlayerAuth = new List<ulong>();

        private DateTime DateOfWipe;
        private string DateOfWipeStr;

        public bool CanLoot = false;
        public bool NowLooted = false;
        public Timer mytimer;
        public Timer mytimer2;
        public Timer mytimer3;
        public Timer mytimer4;
        public Timer mytimer5;
        public int timercallbackdelay = 0;

        #region CFG var's
        public class Amount
        {
            public object ShortName;
            public object Min;
            public object Max;
        }

        public class DataStorage
        {
            public Dictionary<string, Amount>[] Common = new Dictionary<string, Amount>[]
            {
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 3000, Max = 10000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 5000, Max = 9000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 1000, Max = 5000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 2500, Max = 10000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 100, Max = 500 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 5000, Max = 15000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 9000, Max = 20000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 2500, Max = 10000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 5000, Max = 15000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 250, Max = 900 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 50, Max = 150 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 8000, Max = 25000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 15000, Max = 32000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 5000, Max = 15000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 7000, Max = 23000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 350, Max = 1200 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 150, Max = 400 },
                ["Sulfur"] = new Amount() { ShortName = "sulfur", Min = 1000, Max = 3500 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 15000, Max = 35000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 40000, Max = 70000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 10000, Max = 25000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 20000, Max = 40000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 500, Max = 1500 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 250, Max = 600 },
                ["Sulfur"] = new Amount() { ShortName = "sulfur", Min = 2500, Max = 6000 },
                ["GunPow"] = new Amount() { ShortName = "gunpowder", Min = 1000, Max = 3000 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 25000, Max = 50000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 50000, Max = 80000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 15000, Max = 35000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 30000, Max = 50000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 750, Max = 1750 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 350, Max = 700 },
                ["Sulfur"] = new Amount() { ShortName = "sulfur", Min = 3500, Max = 7000 },
                ["GunPow"] = new Amount() { ShortName = "gunpowder", Min = 2000, Max = 5000 },
                ["Explosives"] = new Amount() { ShortName = "explosives", Min = 70, Max = 150 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 35000, Max = 70000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 70000, Max = 100000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 20000, Max = 40000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 40000, Max = 60000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 1000, Max = 2000 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 500, Max = 900 },
                ["Sulfur"] = new Amount() { ShortName = "sulfur", Min = 5000, Max = 10000 },
                ["GunPow"] = new Amount() { ShortName = "gunpowder", Min = 4000, Max = 7000 },
                ["Explosives"] = new Amount() { ShortName = "explosives", Min = 100, Max = 250 }
            },
            new Dictionary<string, Amount>()
            {
                ["Wood"] = new Amount() { ShortName = "wood", Min = 50000, Max = 90000 },
                ["Stone"] = new Amount() { ShortName = "stones", Min = 90000, Max = 130000 },
                ["Metall"] = new Amount() { ShortName = "metal.fragments", Min = 25000, Max = 47000 },
                ["Charcoal"] = new Amount() { ShortName = "charcoal", Min = 50000, Max = 70000 },
                ["Fuel"] = new Amount() { ShortName = "lowgradefuel", Min = 1300, Max = 2500 },
                ["HQMetall"] = new Amount() { ShortName = "metal.refined", Min = 700, Max = 1200 },
                ["Sulfur"] = new Amount() { ShortName = "sulfur", Min = 10000, Max = 20000 },
                ["GunPow"] = new Amount() { ShortName = "gunpowder", Min = 7000, Max = 15000 },
                ["Explosives"] = new Amount() { ShortName = "explosives", Min = 250, Max = 400 }
            }
            };
            public Dictionary<string, Amount>[] Rare = new Dictionary<string, Amount>[]
            {
            new Dictionary<string, Amount>()
            {
                ["WoodGates"] = new Amount() { ShortName = "gates.external.high.wood", Min = 1, Max = 1 },
                ["WoodWall"] = new Amount() { ShortName = "wall.external.high", Min = 2, Max = 3 },
                ["MetallBarricade"] = new Amount() { ShortName = "barricade.metal", Min = 2, Max = 3 }
            },
            new Dictionary<string, Amount>()
            {
                ["StoneWall"] = new Amount() { ShortName = "wall.external.high.stone", Min = 2, Max = 3 },
                ["StoneGate"] = new Amount() { ShortName = "gates.external.high.stone", Min = 1, Max = 1 },
                ["P250"] = new Amount() { ShortName = "pistol.semiauto", Min = 1, Max = 1 },
                ["Python"] = new Amount() { ShortName = "pistol.python", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["GunPow"] = new Amount() { ShortName = "gunpowder", Min = 500, Max = 2000 },
                ["Explosives"] = new Amount() { ShortName = "explosives", Min = 10, Max = 40 },
                ["Smg"] = new Amount() { ShortName = "smg.2", Min = 1, Max = 1 },
                ["SmgMp5"] = new Amount() { ShortName = "smg.mp5", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["Explosives"] = new Amount() { ShortName = "explosives", Min = 40, Max = 100 },
                ["Thompson"] = new Amount() { ShortName = "smg.thompson", Min = 1, Max = 1 },
                ["Bolt"] = new Amount() { ShortName = "rifle.bolt", Min = 1, Max = 1 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 4, Max = 11 }
            },
            new Dictionary<string, Amount>()
            {
                ["AmmoRifle"] = new Amount() { ShortName = "ammo.rifle", Min = 90, Max = 150 },
                ["Bolt"] = new Amount() { ShortName = "rifle.bolt", Min = 1, Max = 1 },
                ["LR300"] = new Amount() { ShortName = "rifle.lr300", Min = 1, Max = 1 },
                ["Ak"] = new Amount() { ShortName = "rifle.ak", Min = 1, Max = 1 },
                ["Mask"] = new Amount() { ShortName = "metal.facemask", Min = 1, Max = 1 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 8, Max = 17 }
            },
            new Dictionary<string, Amount>()
            {
                ["AmmoRifle"] = new Amount() { ShortName = "ammo.rifle", Min = 60, Max = 120 },
                ["Bolt"] = new Amount() { ShortName = "rifle.bolt", Min = 1, Max = 1 },
                ["LR300"] = new Amount() { ShortName = "rifle.lr300", Min = 1, Max = 1 },
                ["Ak"] = new Amount() { ShortName = "rifle.ak", Min = 1, Max = 1 },
                ["C4"] = new Amount() { ShortName = "explosive.timed", Min = 2, Max = 4 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 6, Max = 13 }
            },
            new Dictionary<string, Amount>()
            {
                ["AmmoRifle"] = new Amount() { ShortName = "ammo.rifle", Min = 150, Max = 240 },
                ["Bolt"] = new Amount() { ShortName = "rifle.bolt", Min = 1, Max = 1 },
                ["LR300"] = new Amount() { ShortName = "rifle.lr300", Min = 1, Max = 1 },
                ["Ak"] = new Amount() { ShortName = "rifle.ak", Min = 1, Max = 1 },
                ["Launcher"] = new Amount() { ShortName = "rocket.launcher", Min = 1, Max = 1 },
                ["M249"] = new Amount() { ShortName = "lmg.m249", Min = 1, Max = 1 }
            }
            };
            public Dictionary<string, Amount>[] Top = new Dictionary<string, Amount>[]
            {
            new Dictionary<string, Amount>()
            {
                ["DoorHQ"] = new Amount() { ShortName = "door.hinged.toptier", Min = 1, Max = 1 },
                ["DdoorHQ"] = new Amount() { ShortName = "door.double.hinged.toptier", Min = 1, Max = 2 },
                ["p250"] = new Amount() { ShortName = "pistol.semiauto", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["Pomp"] = new Amount() { ShortName = "shotgun.pump", Min = 1, Max = 1 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 1, Max = 4 },
                ["m92"] = new Amount() { ShortName = "pistol.m92", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["Thompson"] = new Amount() { ShortName = "smg.thompson", Min = 1, Max = 1 },
                ["Ak"] = new Amount() { ShortName = "rifle.ak", Min = 1, Max = 1 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 3, Max = 9 }
            },
            new Dictionary<string, Amount>()
            {
                ["C4"] = new Amount() { ShortName = "explosive.timed", Min = 1, Max = 3 },
                ["LR300"] = new Amount() { ShortName = "rifle.lr300", Min = 1, Max = 1 },
                ["Plate"] = new Amount() { ShortName = "metal.plate.torso", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["C4"] = new Amount() { ShortName = "explosive.timed", Min = 3, Max = 5 },
                ["Launcher"] = new Amount() { ShortName = "rocket.launcher", Min = 1, Max = 1 },
                ["M249"] = new Amount() { ShortName = "lmg.m249", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["C4"] = new Amount() { ShortName = "explosive.timed", Min = 7, Max = 10 },
                ["LauncherRocket"] = new Amount() { ShortName = "ammo.rocket.basic", Min = 4, Max = 11 },
                ["M249"] = new Amount() { ShortName = "lmg.m249", Min = 1, Max = 1 }
            },
            new Dictionary<string, Amount>()
            {
                ["C4"] = new Amount() { ShortName = "explosive.timed", Min = 10, Max = 15 },
                ["LauncherRocket"] = new Amount() { ShortName = "ammo.rocket.basic", Min = 15, Max = 35 },
                ["B4"] = new Amount() { ShortName = "explosive.satchel", Min = 19, Max = 31 }
            }
            };

            public Dictionary<string, float>[] RadiationRadius = new Dictionary<string, float>[]
            {
                new Dictionary<string, float>()
                {
                    ["Радиус радиации в первый день"] = 10,
                    ["Радиус радиации во второй день"] = 12,
                    ["Радиус радиации в третий день"] = 14,
                    ["Радиус радиации в четвертый день"] = 16,
                    ["Радиус радиации в пятый день"] = 18,
                    ["Радиус радиации в шестой день"] = 20,
                    ["Радиус радиации в седьмой день"] = 20,
                }
            };

            public Dictionary<string, float>[] RadiationIntensity = new Dictionary<string, float>[]
            {
                new Dictionary<string, float>()
                {
                    ["Радиация в первый день"] = 10,
                    ["Радиация во второй день"] = 15,
                    ["Радиация в третий день"] = 20,
                    ["Радиация в четвертый день"] = 25,
                    ["Радиация в пятый день"] = 30,
                    ["Радиация в шестой день"] = 35,
                    ["Радиация в седьмой день"] = 40,
                }
            };
            public DataStorage() { }
        }

        DataStorage data;
        private DynamicConfigFile RadData;

        public bool GuiOn = true;
        public string AnchorMinCfg = "0.3445 0.16075";
        public string AnchorMaxCfg = "0.6405 0.20075";
        public string ColorCfg = "1 1 1 0.1";
        public string TextGUI = "Radiation House:";
        public bool RadiationTrue = false;
        public string ChatPrefix = "<color=#ffe100>Radiation House:</color>";
        public int TimerSpawnHouse = 3600;
        public int TimerDestroyHouse = 60;
        public int TimerLoot = 300;
        public int TimeToRemove = 300;
        public int GradeNum = 1;
        public int MinPlayers = 10;

        public bool EnabledNPC = true;
        public int AmountNPC = 5;
        public bool LootNPC = true;

        #endregion


        protected override void LoadDefaultConfig()
        {
            LoadConfigValues();
        }

        private void LoadConfigValues()
        {
            DateOfWipe = DateTime.Now;
            DateOfWipeStr = DateOfWipe.ToString();
            GetConfig("[GUI]", "Включить GUI", ref GuiOn);
            GetConfig("[GUI]", "Anchor Min", ref AnchorMinCfg);
            GetConfig("[GUI]", "Anchor Max", ref AnchorMaxCfg);
            GetConfig("[GUI]", "Цвет фона", ref ColorCfg);
            GetConfig("[GUI]", "Текст в GUI окне", ref TextGUI);
            GetConfig("[Основное]", "Дата вайпа", ref DateOfWipeStr);
            GetConfig("[Основное]", "Префикс чата", ref ChatPrefix);
            GetConfig("[Основное]", "Минимальный онлайн для запуска ивента", ref MinPlayers);
            GetConfig("[Основное]", "Материал дома (0 - солома, 4 - мвк)", ref GradeNum);
            GetConfig("[Радиация]", "Отключить стандартную радиацию", ref RadiationTrue);
            GetConfig("[Основное]", "Время спавна дома", ref TimerSpawnHouse);
            GetConfig("[Основное]", "Задержка перед лутанием ящика", ref TimerLoot);
            GetConfig("[Основное]", "Задержка перед удалением дома", ref TimerDestroyHouse);
            GetConfig("[Основное]", "Время удаления дома если в течение N секунд никто не авторизовался в шкафу", ref TimeToRemove);

            GetConfig("[NPC]", "Включить создание NPC возле радиационного дома", ref EnabledNPC);
            GetConfig("[NPC]", "Количество созданых NPC", ref AmountNPC);
            GetConfig("[NPC]", "Удалять тело, и рюкзак NPC после его смерти", ref LootNPC);
            SaveConfig();
        }

        private void GetConfig<T>(string menu, string Key, ref T var)
        {
            if (Config[menu, Key] != null)
            {
                var = (T)Convert.ChangeType(Config[menu, Key], typeof(T));
            }

            Config[menu, Key] = var;
        }

        void OnServerInitialized()
        {
            RadData = Interface.Oxide.DataFileSystem.GetFile("RadHouseLoot");
            LoadData();
            LoadDefaultConfig();
            mytimer4 = timer.Once(TimerSpawnHouse, () =>
            {
                if (mytimer4 != null) mytimer4.Destroy();
                try
                {
                    if (BaseEntityList.Count > 0)
                    {
                        DestroyRadHouse();
                    }
                    CreateRadHouse(false);
                }
                catch (Exception ex) { Puts(ex.ToString()); }
            });

        }

        void LoadData()
        {
            try
            {
                data = Interface.GetMod().DataFileSystem.ReadObject<DataStorage>("RadHouseLoot");
            }

            catch
            {
                data = new DataStorage();
            }
        }

        void Unload()
        {

            if (BaseEntityList != null) DestroyRadHouse();

            if (mytimer != null) timer.Destroy(ref mytimer);
            if (mytimer2 != null) timer.Destroy(ref mytimer2);
            if (mytimer3 != null) timer.Destroy(ref mytimer3);
            if (mytimer4 != null) timer.Destroy(ref mytimer4);
        }

        void OnNewSave(string filename)
        {
            DateOfWipe = DateTime.Now;
            string DateOfWipeStr = DateOfWipe.ToString();
            Config["[Основное]", "Дата вайпа"] = DateOfWipeStr;
            SaveConfig();
            PrintWarning($"Wipe detect. Дата установлена на {DateOfWipeStr}");
        }
        #endregion

        #region CreateAndDestroyRadHouse
        public object success;

        [ConsoleCommand("rh")]
        void CreateRadHouseConsoleCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            if (arg == null || arg.FullString.Length == 0 && arg.FullString != "start" && arg.FullString != "cancel")
            {
                SendReply(player, $"{ChatPrefix} Используйте /rh start или /rh cancel");
                return;
            }
            switch (arg.Args[0])
            {
                case "start":
                    SendReply(player, $"{ChatPrefix} Вы в ручную запустили ивент");
                    CreateRadHouse(true);
                    return;
                case "cancel":
                    SendReply(player, $"{ChatPrefix} Ивент остановлен");
                    DestroyRadHouse();
                    return;
            }
        }

        [ChatCommand("rh")]
        void CreateRadHouseCommand(BasePlayer player, string cmd, string[] Args)
        {
            if (player == null) return;
            if (!player.IsAdmin)
            {
                SendReply(player, $"{ChatPrefix} Команда доступна только администраторам");
                return;
            }
            if (Args == null || Args.Length == 0 || Args[0] != "start" && Args[0] != "cancel")
            {
                SendReply(player, $"{ChatPrefix} Используйте /rh start или /rh cancel");
                return;
            }
            switch (Args[0])
            {
                case "start":
                    SendReply(player, $"{ChatPrefix} Вы в ручную запустили ивент");
                    CreateRadHouse(true);
                    return;
                case "cancel":
                    SendReply(player, $"{ChatPrefix} Ивент остановлен");
                    DestroyRadHouse();
                    return;
            }

        }

        private void OnServerRadiation()
        {
            var allobjects = UnityEngine.Object.FindObjectsOfType<TriggerRadiation>();
            for (int i = 0; i < allobjects.Length; i++)
            {
                UnityEngine.Object.Destroy(allobjects[i]);
            }
        }

        Vector3 RadPosition;
        void CreateRadHouse(bool IsAdminCreate)
        {
            if (!IsAdminCreate && BasePlayer.activePlayerList.Count < MinPlayers)
            {
                PrintWarning("Не хватает игроков для запуска ивента");
                mytimer4 = timer.Once(TimerSpawnHouse, () =>
                {
                    if (mytimer4 != null) mytimer4.Destroy();
                    try
                    {
                        if (BaseEntityList.Count > 0)
                        {
                            DestroyRadHouse();
                        }
                        CreateRadHouse(false);
                    }
                    catch (Exception ex) { Puts(ex.ToString()); }
                });
                return;
            }
            if (BaseEntityList.Count > 0) DestroyRadHouse();
            Vector3 pos;
            pos.x = 0;
            pos.y = 0;
            pos.z = 0;
            success = GetEventPosition();
            pos = (Vector3)success;
            Puts(pos.ToString());
            RadPosition = pos;
            pos.x = pos.x + 0f; pos.y = pos.y + 1f; pos.z = pos.z + 0f;
            BaseEntity Foundation = GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab", pos, new Quaternion(), true);

            pos.x = pos.x - 1.5f;
            BaseEntity Wall = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            Wall.transform.localEulerAngles = new Vector3(0f, 180f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 1f; pos.z = pos.z + 3f;
            BaseEntity Foundation2 = GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab", pos, new Quaternion(), true);

            pos.x = pos.x - 1.5f;
            BaseEntity Wall2 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            Wall2.transform.localEulerAngles = new Vector3(0f, 180f, 0f);

            //
            pos = (Vector3)success; pos.x = pos.x + 4.5f; pos.y = pos.y + 4f; pos.z = pos.z + 3f;
            BaseEntity Wall5 = GameManager.server.CreateEntity("assets/prefabs/building core/wall.window/wall.window.prefab", pos, new Quaternion(), true);
            Wall5.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 4.5f; pos.y = pos.y + 4f; pos.z = pos.z + 0f;
            BaseEntity Wall6 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            Wall6.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x - 1.5f; pos.y = pos.y + 4f; pos.z = pos.z + 0f;
            BaseEntity Wall7 = GameManager.server.CreateEntity("assets/prefabs/building core/wall.window/wall.window.prefab", pos, new Quaternion(), true);
            Wall7.transform.localEulerAngles = new Vector3(0f, 180f, 0f);


            pos = (Vector3)success; pos.x = pos.x - 1.5f; pos.y = pos.y + 4f; pos.z = pos.z + 3f;
            BaseEntity Wall8 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            Wall8.transform.localEulerAngles = new Vector3(0f, 180f, 0f);
            //

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 1f; pos.z = pos.z + 0f;
            BaseEntity Foundation3 = GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab", pos, new Quaternion(), true);

            pos.x = pos.x + 1.5f;
            BaseEntity Wall3 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 1f; pos.z = pos.z + 3f;
            BaseEntity Foundation4 = GameManager.server.CreateEntity("assets/prefabs/building core/foundation/foundation.prefab", pos, new Quaternion(), true);

            pos.x = pos.x + 1.5f;
            BaseEntity Wall4 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);

            pos = (Vector3)success; pos.z = pos.z - 1.5f; pos.y = pos.y + 1f;
            BaseEntity DoorWay = GameManager.server.CreateEntity("assets/prefabs/building core/wall.doorway/wall.doorway.prefab", pos, new Quaternion(), true);
            DoorWay.transform.localEulerAngles = new Vector3(0f, 90f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 1f; pos.z = pos.z + 4.5f;
            BaseEntity DoorWay2 = GameManager.server.CreateEntity("assets/prefabs/building core/wall.doorway/wall.doorway.prefab", pos, new Quaternion(), true);
            DoorWay2.transform.localEulerAngles = new Vector3(0f, 270f, 0f);

            pos = (Vector3)success; pos.z = pos.z - 1.5f; pos.y = pos.y + 1f; pos.x = pos.x + 3f;
            BaseEntity WindowWall = GameManager.server.CreateEntity("assets/prefabs/building core/wall.window/wall.window.prefab", pos, new Quaternion(), true);
            WindowWall.transform.localEulerAngles = new Vector3(0f, 90f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 1f; pos.z = pos.z + 4.5f;
            BaseEntity WindowWall2 = GameManager.server.CreateEntity("assets/prefabs/building core/wall.window/wall.window.prefab", pos, new Quaternion(), true);
            WindowWall2.transform.localEulerAngles = new Vector3(0f, 270f, 0f);

            //yes
            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 4f; pos.z = pos.z + 4.5f;
            BaseEntity wall3 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            wall3.transform.localEulerAngles = new Vector3(0f, 270f, 0f);
            //
            //yes
            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 4f; pos.z = pos.z + 4.5f;
            BaseEntity wall4 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            wall4.transform.localEulerAngles = new Vector3(0f, 270f, 0f);
            //
            //yes
            pos = (Vector3)success; pos.z = pos.z - 1.5f; pos.y = pos.y + 4f; pos.x = pos.x + 3f;
            BaseEntity wall5 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            wall5.transform.localEulerAngles = new Vector3(0f, 90f, 0f);
            //yes
            pos = (Vector3)success; pos.z = pos.z - 1.5f; pos.y = pos.y + 4f;
            BaseEntity wall6 = GameManager.server.CreateEntity("assets/prefabs/building core/wall/wall.prefab", pos, new Quaternion(), true);
            wall6.transform.localEulerAngles = new Vector3(0f, 90f, 0f);


            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 4f; pos.z = pos.z + 0f;
            BaseEntity Roof = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof.transform.localEulerAngles = new Vector3(0f, 180f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 1f; pos.z = pos.z + 0f;
            BaseEntity block = GameManager.server.CreateEntity("assets/prefabs/building core/stairs.l/block.stair.lshape.prefab", pos, new Quaternion(), true);
            block.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 4f; pos.z = pos.z + 3f;
            BaseEntity Roof1 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof1.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 4f; pos.z = pos.z + 3f;
            BaseEntity Roof2 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof2.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 7f; pos.z = pos.z + 0f;
            BaseEntity Roof3 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof3.transform.localEulerAngles = new Vector3(0f, 180f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 7f; pos.z = pos.z + 0f;
            BaseEntity Roof4 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof4.transform.localEulerAngles = new Vector3(0f, 180f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 0f; pos.y = pos.y + 7f; pos.z = pos.z + 3f;
            BaseEntity Roof5 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof5.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3f; pos.y = pos.y + 7f; pos.z = pos.z + 3f;
            BaseEntity Roof6 = GameManager.server.CreateEntity("assets/prefabs/building core/floor/floor.prefab", pos, new Quaternion(), true);
            Roof6.transform.localEulerAngles = new Vector3(0f, 0f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 4.0f; pos.y = pos.y + 4f; pos.z = pos.z + 4f;
            BaseEntity CupBoard = GameManager.server.CreateEntity("assets/prefabs/deployable/tool cupboard/cupboard.tool.deployed.prefab", pos, new Quaternion(), true);
            CupBoard.transform.localEulerAngles = new Vector3(0f, 270f, 0f);

            pos = (Vector3)success; pos.x = pos.x - 0.7f; pos.y = pos.y + 4f; pos.z = pos.z - 0f;
            BaseEntity Bed = GameManager.server.CreateEntity("assets/prefabs/deployable/bed/bed_deployed.prefab", pos, new Quaternion(), true);
            Bed.transform.localEulerAngles = new Vector3(0f, 270f, 0f);

            pos = (Vector3)success; pos.x = pos.x - 0.85f; pos.y = pos.y + 4.01f; pos.z = pos.z + 3.45f;
            BaseEntity Box = GameManager.server.CreateEntity("assets/prefabs/deployable/large wood storage/box.wooden.large.prefab", pos, new Quaternion(), true);
            Box.skinID = 942917320;
            Box.SetFlag(BaseEntity.Flags.Locked, true);
            Box.transform.localEulerAngles = new Vector3(0f, 90f, 0f);

            pos = (Vector3)success; pos.x = pos.x + 3; pos.y = pos.y - 0.5f; pos.z = pos.z + 7.5f;
            BaseEntity FSteps = GameManager.server.CreateEntity("assets/prefabs/building core/foundation.steps/foundation.steps.prefab", pos, new Quaternion(), true);
            FSteps.transform.localEulerAngles = new Vector3(0f, 90f, 0f);

            pos = (Vector3)success; pos.x = pos.x - 0f; pos.y = pos.y - 0.5f; pos.z = pos.z - 4.5f;
            BaseEntity FSteps2 = GameManager.server.CreateEntity("assets/prefabs/building core/foundation.steps/foundation.steps.prefab", pos, new Quaternion(), true);
            FSteps2.transform.localEulerAngles = new Vector3(0f, 270f, 0f);
            LootBox = Box;
            Foundation.Spawn();
            Wall.Spawn();
            Foundation2.Spawn();
            Wall2.Spawn();
            Foundation3.Spawn();
            Wall3.Spawn();
            Foundation4.Spawn();
            Wall4.Spawn();
            DoorWay.Spawn();
            DoorWay2.Spawn();
            WindowWall.Spawn();
            WindowWall2.Spawn();
            wall3.Spawn();
            Roof.Spawn();
            Roof1.Spawn();

            Roof3.Spawn();
            Roof4.Spawn();
            Roof5.Spawn();
            Roof6.Spawn();

            block.Spawn();
            Roof2.Spawn();
            wall4.Spawn();
            wall5.Spawn();
            wall6.Spawn();
            Wall5.Spawn();
            Wall6.Spawn();
            Wall7.Spawn();
            Wall8.Spawn();
            FSteps.Spawn();
            FSteps2.Spawn();
            CupBoard.Spawn();
            Box.Spawn();
            Bed.Spawn();

            BaseEntityList.Add(Foundation);
            BaseEntityList.Add(Roof);
            BaseEntityList.Add(block);
            BaseEntityList.Add(Roof1);
            BaseEntityList.Add(Roof2);

            BaseEntityList.Add(Roof3);
            BaseEntityList.Add(Roof4);
            BaseEntityList.Add(Roof5);
            BaseEntityList.Add(Roof6);

            BaseEntityList.Add(Foundation2);
            BaseEntityList.Add(Foundation3);
            BaseEntityList.Add(Foundation4);
            BaseEntityList.Add(Wall);
            BaseEntityList.Add(Wall2);
            BaseEntityList.Add(Wall3);
            BaseEntityList.Add(Wall4);
            BaseEntityList.Add(Wall7);
            BaseEntityList.Add(Wall8);
            BaseEntityList.Add(Wall6);
            BaseEntityList.Add(wall3);
            BaseEntityList.Add(wall4);
            BaseEntityList.Add(wall5);
            BaseEntityList.Add(wall6);
            BaseEntityList.Add(Wall5);
            BaseEntityList.Add(DoorWay);
            BaseEntityList.Add(DoorWay2);
            BaseEntityList.Add(WindowWall);
            BaseEntityList.Add(WindowWall2);
            BaseEntityList.Add(FSteps);
            BaseEntityList.Add(FSteps2);
            BaseEntityList.Add(CupBoard);
            BaseEntityList.Add(Box);
            BaseEntityList.Add(Bed);
            StorageContainer Container = Box.GetComponent<StorageContainer>();
            CreateLoot(Container, Box);
            var reply = 486;
            if (reply == 0) { };
            var buildingID = BuildingManager.server.NewBuildingID();
            try
            {
                foreach (var entity in BaseEntityList)
                {
                    DecayEntity decayEntity = entity.GetComponentInParent<DecayEntity>();
                    decayEntity.AttachToBuilding(buildingID);
                    if (entity.name.Contains("assets/prefabs/deployable/large wood storage/box.wooden.large.prefab") && entity.name.Contains("assets/prefabs/deployable/tool cupboard/cupboard.tool.deployed.prefab") && entity.name.Contains("assets/prefabs/building/wall.window.bars/wall.window.bars.metal.prefab")) break;
                    BuildingBlock buildingBlock = entity.GetComponent<BuildingBlock>();
                    buildingBlock.SetGrade((BuildingGrade.Enum)GradeNum);
                    buildingBlock.UpdateSkin();
                    buildingBlock.SetHealthToMax();
                    if (!entity.name.Contains("assets/prefabs/building core/foundation/foundation.prefab") && !entity.name.Contains("assets/prefabs/building core/foundation.steps/foundation.steps.prefab")) buildingBlock.grounded = true;
                    buildingBlock.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                }
            }
            catch { }
            Server.Broadcast($"{ChatPrefix} Радиактивный дом появился, координаты: {pos.ToString()}\nЕсли никто не успеет авторизоваться за {TimeToRemove} секунд, он пропадет");
            mytimer5 = timer.Once(TimeToRemove, () =>
                {
                    if (BaseEntityList.Count > 0)
                    {
                        if (PlayerAuth.Count == 0)
                        {
                            DestroyRadHouse();
                            Server.Broadcast($"{ChatPrefix} Радиактивный дом удалился, никто не успел авторизоваться в шкафу");
                        }
                    }
                });

            foreach (var player in BasePlayer.activePlayerList)
            {
                CreateGui(player);
            }
            if (EnabledNPC) CreateNps(pos, AmountNPC);
            AddMapMarker();
            CanLoot = false;
            NowLooted = false;
            timercallbackdelay = 0;
        }

        private void CreateNps(Vector3 position, int amount)
        {
            for (int i = 0; i < amount; i++)
            {
                BaseEntity npc = GameManager.server.CreateEntity("assets/prefabs/npc/scientist/scientist.prefab", RandomCircle(position, 10), new Quaternion(), true);
                npc.Spawn();
                BaseEntityList.Add(npc);
            }
        }

        private void AddMapMarker()
        {
            LustyMap?.Call("AddMarker", LootBox.transform.position.x, LootBox.transform.position.z, "RadIcon", "https://i.imgur.com/TxUxuN7.png", 0);
            Map?.Call("ApiAddPointUrl", "https://i.imgur.com/TxUxuN7.png", "Радиактивный дом", LootBox.transform.position);
            RustMap?.Call("AddTemporaryMarker", "rad", false, 0.04f, 0.99f, LootBox.transform, "RadHouseMap");
        }

        private void RemoveMapMarker()
        {
            LustyMap?.Call("RemoveMarker", "RadIcon");
            Map?.Call("ApiRemovePointUrl", "https://i.imgur.com/TxUxuN7.png", "Радиактивный дом", LootBox.transform.position);
            RustMap?.Call("RemoveTemporaryMarkerByName", "RadHouseMap");
        }

        void DestroyRadHouse()
        {
            if (BaseEntityList != null)
            {
                foreach (BaseEntity entity in BaseEntityList)
                {
                    if (!entity.IsDestroyed)
                    entity.Kill();
                }
                DestroyZone(RadHouseZone);
                RemoveMapMarker();
                BaseEntityList.Clear();
                PlayerAuth.Clear();
                timer.Destroy(ref mytimer5);

            }
            foreach (var player in BasePlayer.activePlayerList)
            {
                DestroyGui(player);
            }
            mytimer4 = timer.Once(TimerSpawnHouse, () =>
            {
                if (mytimer4 != null) mytimer4.Destroy();
                CreateRadHouse(false);
            });
            RadPosition = Vector3.zero;
        }

        object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            try
            {
                if (BaseEntityList != null)
                {
                    foreach (BaseEntity entityInList in BaseEntityList)
                    {

                        if (entityInList.net.ID == entity.net.ID)
                        {
                            if (entityInList.name == "assets/prefabs/npc/scientist/scientist.prefab") return null;
                            return false;
                        }
                    }
                }
            }
            catch { return null; }
            return null;
        }

        void CreateLoot(StorageContainer Container, BaseEntity Box)
        {
            int Day = data.Common.Length - 1;
            DateTime DateOfWipeParse;
            DateTime.TryParse(DateOfWipeStr, out DateOfWipeParse);
            for (int i = 0; i <= data.Common.Length; i++)
            {
                if (DateOfWipeParse.AddDays(i) >= DateTime.Now)
                {
                    Day = i - 1;
                    break;
                }
            }
            ItemContainer inven = Container.inventory;
            if (Container != null)
            {
                var CommonList = data.Common[Day].Values.ToList();
                var RareList = data.Rare[Day].Values.ToList();
                var TopList = data.Top[Day].Values.ToList();
                for (var i = 0; i < CommonList.Count; i++)
                {
                    int j = UnityEngine.Random.Range(1, 10);
                    var item = ItemManager.CreateByName(CommonList[i].ShortName.ToString(), UnityEngine.Random.Range(Convert.ToInt32(CommonList[i].Min), Convert.ToInt32(CommonList[i].Max)));
                    if (j > 3)
                    {
                        item.MoveToContainer(Container.inventory, -1, false);
                    }
                }
                for (var i = 0; i < RareList.Count; i++)
                {
                    int j = UnityEngine.Random.Range(1, 10);
                    var item = ItemManager.CreateByName(RareList[i].ShortName.ToString(), UnityEngine.Random.Range(Convert.ToInt32(RareList[i].Min), Convert.ToInt32(RareList[i].Max)));
                    if (j > 5)
                    {
                        item.MoveToContainer(Container.inventory, -1, false);
                    }
                }
                for (var i = 0; i < TopList.Count; i++)
                {
                    int j = UnityEngine.Random.Range(1, 10);
                    var item = ItemManager.CreateByName(TopList[i].ShortName.ToString(), UnityEngine.Random.Range(Convert.ToInt32(TopList[i].Min), Convert.ToInt32(TopList[i].Max)));
                    if (j > 7)
                    {
                        item.MoveToContainer(Container.inventory, -1, false);
                    }
                }

                var Intensity = data.RadiationIntensity[0].Values.ToList();
                var Radius = data.RadiationRadius[0].Values.ToList();

                InitializeZone(Box.transform.position, Intensity[Day], Radius[Day], 2145);
            }
        }
        #endregion

        #region LootBox
        void CanLootEntity(BasePlayer player, StorageContainer container)
        {
            if (player == null) return;
            if (container == null && container?.net?.ID == null) return;
            if (BaseEntityList != null)
            {
                BaseEntity box = BaseEntityList.Find(p => p == container);
                if (box == null) return;
                if (box.net.ID == container.net.ID)
                {
                    if (box.name == "assets/prefabs/npc/scientist/scientist.prefab") return;
                    if (!CanLoot && PlayerAuth.Contains(player.userID))
                    {
                        SendReply(player, $"{ChatPrefix} Вы сможете залутать ящик, через: {mytimer.Delay - timercallbackdelay} секунд");
                        return;
                    }
                    else if (!PlayerAuth.Contains(player.userID))
                    {
                        SendReply(player, $"{ChatPrefix} Вы должны быть авторизованы в шкафу для лута ящика");
                    }
                }
            }
        }

        void OnEntitySpawned(BaseEntity entity)
        {
            if (entity == null) return;
            if (entity?.net?.ID == null) return;
            if (!LootNPC) return;
            RemoveEntity(entity);
        }

        void RemoveEntity(BaseEntity entity)
        {
            var corpse = entity as NPCPlayerCorpse;
            if (RadPosition == Vector3.zero) return;
                if (corpse != null)
            {
                if (IsRadZone(corpse.transform.position))
                {
                    corpse.ResetRemovalTime(0.1f);
                }
            }
            if (entity is NPCPlayerCorpse || entity.name.Contains("item_drop_backpack"))
            {
                if (IsRadZone(entity.transform.position))
                {
                    NextTick(() =>
                    {
                        if (entity != null && !entity.IsDestroyed)
                        {
                            entity.Kill();
                        }
                    });
                }
            }
        }

        bool IsRadZone(Vector3 pos)
        {
            if (RadPosition != Vector3.zero)
            if (Vector3.Distance(RadPosition, pos) < 20)
                return true;
            return false;
        }


        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (info == null) return;
            if (entity == null || entity?.net?.ID == null) return;
            if (BaseEntityList != null)
            {
                BaseEntity box = BaseEntityList.Find(p => p == entity);
                if (box == null) return;
                if (box.name == "assets/prefabs/npc/scientist/scientist.prefab")
                {
                    var corpse = box as BaseCorpse;
                    if (corpse != null)
                    {
                        Puts(corpse.ToString());
                    }
                }
                if (box == null) return;
                if (box.net.ID == entity.net.ID)
                {
                    BaseEntityList.Remove(entity);
                    return;
                }
            }
        }
        void OnLootEntityEnd(BasePlayer player, BaseCombatEntity entity)
        {
            if (player == null) return;
            if (entity == null && entity?.net?.ID == null) return;
            if (BaseEntityList != null)
            {
                BaseEntity box = BaseEntityList.Find(p => p == entity);
                if (box == null) return;
                if (box.net.ID == entity.net.ID)
                {
                    if (box.name == "assets/prefabs/npc/scientist/scientist.prefab") return;
                    if (CanLoot)
                    {
                        if (PlayerAuth.Contains(player.userID))
                        {
                            if (!NowLooted)
                            {
                                NowLooted = true;
                                Server.Broadcast($"{ChatPrefix} Игрок {player.displayName} залутал ящик в радиактивном доме. \nДом самоуничтожится через {TimerDestroyHouse} секунд");
                                mytimer3 = timer.Once(TimerDestroyHouse, () =>
                                    {
                                        DestroyRadHouse();
                                    });
                            }
                        }
                    }

                }
            }
        }


        object OnCupboardAuthorize(BuildingPrivlidge privilege, BasePlayer player)
        {
            var Cupboard = privilege as BuildingPrivlidge;
            var entity = privilege as BaseEntity;
            if (BaseEntityList != null)
            {
                foreach (BaseEntity entityInList in BaseEntityList)
                {
                    if (entityInList.net.ID == entity.net.ID)
                    {
                        if (PlayerAuth.Contains(player.userID))
                        {
                            SendReply(player, $"{ChatPrefix} Вы уже авторизованы");
                            return false;
                        }
                        foreach (var authPlayer in BasePlayer.activePlayerList)
                        {
                            if (PlayerAuth.Contains(authPlayer.userID))
                            {
                                SendReply(authPlayer, $"{ChatPrefix} Вас выписал из шкафа игрок {player.displayName}");
                            }
                        }
                        CanLoot = false;
                        PlayerAuth.Clear();
                        timer.Destroy(ref mytimer);
                        timer.Destroy(ref mytimer2);
                        if (mytimer5 != null) timer.Destroy(ref mytimer5);
                        timercallbackdelay = 0;
                        mytimer = timer.Once(TimerLoot, () =>
                        {
                            CanLoot = true;
                            LootBox.SetFlag(BaseEntity.Flags.Locked, false);
                            foreach (var authPlayer in BasePlayer.activePlayerList)
                            {
                                if (PlayerAuth.Contains(authPlayer.userID))
                                {
                                    SendReply(authPlayer, $"{ChatPrefix} Вы можете залутать ящик");
                                }
                            }
                        });
                        mytimer2 = timer.Repeat(1f, 0, () =>
                        {
                            if (timercallbackdelay >= TimerLoot)
                            {
                                timercallbackdelay = 0;
                                timer.Destroy(ref mytimer2);
                            }
                            else
                            {
                                timercallbackdelay = timercallbackdelay + 1;
                            }
                        });
                        PlayerAuth.Add(player.userID);
                        SendReply(player, $"{ChatPrefix} Через {TimerLoot} секунд вы сможете залутать ящик радиационного дома");
                        return false;
                    }
                }
            }
            return null;
        }
        #endregion

        #region Spawn
        SpawnFilter filter = new SpawnFilter();
        List<Vector3> monuments = new List<Vector3>();

        static float GetGroundPosition(Vector3 pos)
        {
            float y = TerrainMeta.HeightMap.GetHeight(pos);
            RaycastHit hit;
            if (Physics.Raycast(new Vector3(pos.x, pos.y + 200f, pos.z), Vector3.down, out hit, Mathf.Infinity, LayerMask.GetMask(new[] { "Terrain", "World", "Default", "Construction", "Deployed" })) && !hit.collider.name.Contains("rock_cliff"))
                return Mathf.Max(hit.point.y, y);
            return y;
        }

        public Vector3 RandomDropPosition()
        {
            var vector = Vector3.zero;
            float num = 1000f, x = TerrainMeta.Size.x / 3;

            do
            {
                vector = Vector3Ex.Range(-x, x);
            }
            while (filter.GetFactor(vector) == 0f && (num -= 1f) > 0f);
            float max = TerrainMeta.Size.x / 2;
            float height = TerrainMeta.HeightMap.GetHeight(vector);
            vector.y = height;
            return vector;
        }

        List<int> BlockedLayers = new List<int> { (int)Layer.Water, (int)Layer.Construction, (int)Layer.Trigger, (int)Layer.Prevent_Building, (int)Layer.Deployed, (int)Layer.Tree };
        static int blockedMask = LayerMask.GetMask(new[] { "Player (Server)", "Trigger", "Prevent Building" });

        public Vector3 GetSafeDropPosition(Vector3 position)
        {
            RaycastHit hit;
            position.y += 200f;

            if (Physics.Raycast(position, Vector3.down, out hit))
            {
                if (hit.collider?.gameObject == null)
                    return Vector3.zero;
                string ColName = hit.collider.name;

                if (!BlockedLayers.Contains(hit.collider.gameObject.layer) && ColName != "MeshColliderBatch" && ColName != "iceberg_3" && ColName != "iceberg_2" && !ColName.Contains("rock_cliff"))
                {
                    position.y = Mathf.Max(hit.point.y, TerrainMeta.HeightMap.GetHeight(position));
                    var colliders = Pool.GetList<Collider>();
                    Vis.Colliders(position, 1, colliders, blockedMask, QueryTriggerInteraction.Collide);
                    bool blocked = colliders.Count > 0;
                    Pool.FreeList<Collider>(ref colliders);
                    if (!blocked)
                        return position;
                }
            }

            return Vector3.zero;
        }

        public Vector3 GetEventPosition()
        {
            var eventPos = Vector3.zero;
            int maxRetries = 100;
            monuments = UnityEngine.Object.FindObjectsOfType<MonumentInfo>().Select(monument => monument.transform.position).ToList();
            do
            {
                eventPos = GetSafeDropPosition(RandomDropPosition());

                foreach (var monument in monuments)
                {
                    if (Vector3.Distance(eventPos, monument) < 150f)
                    {
                        eventPos = Vector3.zero;
                        break;
                    }
                }
            } while (eventPos == Vector3.zero && --maxRetries > 0);

            return eventPos;
        }

        Vector3 RandomCircle(Vector3 center, float radius = 2)
        {
            float ang = UnityEngine.Random.value * 360;
            Vector3 pos;
            pos.x = center.x + radius * Mathf.Sin(ang * Mathf.Deg2Rad);
            pos.z = center.z + radius * Mathf.Cos(ang * Mathf.Deg2Rad);
            pos.y = center.y;
            pos.y = GetGroundPosition(pos);
            return pos;
        }
        #endregion

        #region GUI
        void OnPlayerSleepEnded(BasePlayer player)
        {
            if (BaseEntityList.Count > 0)
            {
                if (GuiOn)
                {
                    DestroyGui(player);
                    CreateGui(player);
                }
            }

        }

        void CreateGui(BasePlayer player)
        {
            if (GuiOn)
            {
                Vector3 pos = (Vector3)success;
                CuiElementContainer Container = new CuiElementContainer();
                CuiElement RadUI = new CuiElement
                {
                    Name = "RadUI",
                    Components = {
                        new CuiImageComponent {
                            Color = ColorCfg
                        },
                        new CuiRectTransformComponent {
                            AnchorMin = AnchorMinCfg,
                            AnchorMax = AnchorMaxCfg
                        }
                    }
                };
                CuiElement RadText = new CuiElement
                {
                    Name = "RadText",
                    Parent = "RadUI",
                    Components = {
                        new CuiTextComponent {
                            Text = $"{TextGUI} {pos.ToString()}",
                            Align = TextAnchor.MiddleCenter
                        },
                        new CuiRectTransformComponent {
                            AnchorMin = "0 0",
                            AnchorMax = "1 1"
                        }
                    }
                };

                Container.Add(RadUI);
                Container.Add(RadText);
                CuiHelper.AddUi(player, Container);
            }
        }

        void DestroyGui(BasePlayer player)
        {
            if (GuiOn)
            {
                CuiHelper.DestroyUi(player, "RadUI");
            }
        }
        #endregion

        // Create radiation
        #region Radiation Control
        private void InitializeZone(Vector3 Location, float intensity, float radius, int ZoneID)
        {
            if (!ConVar.Server.radiation)
                ConVar.Server.radiation = true;
            if (RadiationTrue)
            {
                OnServerRadiation();
            }
            var newZone = new GameObject().AddComponent<RadZones>();
            newZone.Activate(Location, radius, intensity, ZoneID);

            ZoneList listEntry = new ZoneList { zone = newZone };
            RadHouseZone = listEntry;
            RadiationZones.Add(listEntry);
        }
        private void DestroyZone(ZoneList zone)
        {
            if (RadiationZones.Contains(zone))
            {
                var index = RadiationZones.FindIndex(a => a.zone == zone.zone);
                UnityEngine.Object.Destroy(RadiationZones[index].zone);
                RadiationZones.Remove(zone);
            }
        }
        public class ZoneList
        {
            public RadZones zone;
        }

        public class RadZones : MonoBehaviour
        {
            private int ID;
            private Vector3 Position;
            private float ZoneRadius;
            private float RadiationAmount;

            private List<BasePlayer> InZone;

            private void Awake()
            {
                gameObject.layer = (int)Layer.Reserved1;
                gameObject.name = "NukeZone";

                var rigidbody = gameObject.AddComponent<Rigidbody>();
                rigidbody.useGravity = false;
                rigidbody.isKinematic = true;
            }

            public void Activate(Vector3 pos, float radius, float amount, int ZoneID)
            {
                ID = ZoneID;
                Position = pos;
                ZoneRadius = radius;
                RadiationAmount = amount;

                gameObject.name = $"RadHouse{ID}";
                transform.position = Position;
                transform.rotation = new Quaternion();
                UpdateCollider();
                gameObject.SetActive(true);
                enabled = true;

                var Rads = gameObject.GetComponent<TriggerRadiation>();
                Rads = Rads ?? gameObject.AddComponent<TriggerRadiation>();
                Rads.RadiationAmountOverride = RadiationAmount;
                Rads.radiationSize = ZoneRadius;
                Rads.interestLayers = playerLayer;
                Rads.enabled = true;

                if (IsInvoking("UpdateTrigger")) CancelInvoke("UpdateTrigger");
                InvokeRepeating("UpdateTrigger", 5f, 5f);
            }

            private void OnDestroy()
            {
                CancelInvoke("UpdateTrigger");
                Destroy(gameObject);
            }

            private void UpdateCollider()
            {
                var sphereCollider = gameObject.GetComponent<SphereCollider>();
                {
                    if (sphereCollider == null)
                    {
                        sphereCollider = gameObject.AddComponent<SphereCollider>();
                        sphereCollider.isTrigger = true;
                    }
                    sphereCollider.radius = ZoneRadius;
                }
            }
            private void UpdateTrigger()
            {
                InZone = new List<BasePlayer>();
                int entities = Physics.OverlapSphereNonAlloc(Position, ZoneRadius, colBuffer, playerLayer);
                for (var i = 0; i < entities; i++)
                {
                    var player = colBuffer[i].GetComponentInParent<BasePlayer>();
                    if (player != null)
                        InZone.Add(player);
                }
            }
        }
        #endregion
    }
}
                              

// --- End of file: RadHouse120.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Casino.cs ---
// --- Original Local Path: Casino.cs ---

﻿//Requires: PlayingCards
using Facepunch;
using Newtonsoft.Json;
using System;
using System.Linq;
using System.Globalization;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Casino", "k1lly0u", "0.1.3")]
    [Description("Core card game and table management system")]
    class Casino : RustPlugin
    {
        #region Fields
        private StoredData storedData;
        private DynamicConfigFile data;

        [PluginReference]
        private Plugin ServerRewards, Economics;

        public static Casino Instance { get; private set; }

        private Hash<GameType, Action<BaseEntity, StoredData.GameData>> registeredGames = new Hash<GameType, Action<BaseEntity, StoredData.GameData>>();

        private List<CardGame> cardGames = new List<CardGame>();

        private KeyValuePair<Vector3, Vector3>[] chairPositions = new KeyValuePair<Vector3, Vector3>[]
        {
            new KeyValuePair<Vector3, Vector3>(new Vector3(0.75f, 0, -1.1f), new Vector3(0, 0, 0)),
            new KeyValuePair<Vector3, Vector3>(new Vector3(-0.75f, 0, -1.1f), new Vector3(0, 0, 0)),
            new KeyValuePair<Vector3, Vector3>(new Vector3(0.75f, 0, 1.1f), new Vector3(0, 180, 0)),
            new KeyValuePair<Vector3, Vector3>(new Vector3(-0.75f, 0, 1.1f), new Vector3(0, 180, 0))
        };

        private bool wipeData = false;

        private const string CHAIR_PREFAB = "assets/prefabs/deployable/chair/chair.deployed.prefab";

        private const string TABLE_PREFAB = "assets/prefabs/deployable/table/table.deployed.prefab";        
        #endregion

        #region Oxide Hooks
        private void Loaded()
        {
            data = Interface.Oxide.DataFileSystem.GetFile("Casino/casino_data");
            Instance = this;

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Error.NotEnoughAmount"] = "<color=#D3D3D3>You do not have have {0} to play this table. Minimum bet is :</color> <color=#ce422b>{1}</color>",
                ["Table.Information"] = "<size=25>{0}</size><size=20>\nMin Bet: {1} {3}\nMax Bet: {2} {3}\nTake a seat to play!</size>",
                ["Bet.RP"] = "RP",
                ["Bet.Eco"] = "Eco"
            }, this);
        }

        private void OnServerInitialized()
        {            
            LoadData();

            if (wipeData)
            {
                storedData.tables.Clear();
                SaveData();
            }

            PlayingCards.OnImagesReady += LoadTables;
        }

        private void OnNewSave(string filename) => wipeData = true;

        private void OnEntityMounted(BaseMountable mountable, BasePlayer player)
        {
            CardGame cardGame = IsGameChair(mountable);
            if (cardGame == null)
                return;

            int position = cardGame.GetChairPosition(mountable);
            if (position == -1)
            {
                PrintError("Player tried mounting a CardGame with a chair position of -1. Perhaps a old chair that was cleaned up properly? Tell k1lly0u");
                return;
            }
            cardGame.OnPlayerEnter(player, position);
        }

        private object CanMountEntity(BasePlayer player, BaseMountable mountable)
        {
            CardGame cardGame = mountable.GetComponent<GameChair>()?.CardGame;
            if (cardGame != null)
            {
                int amount = cardGame.GetUserAmount(player);
                if (amount < cardGame.gameData.minimumBet)
                {
                    SendReply(player, string.Format(lang.GetMessage("Error.NotEnoughAmount", this, player.UserIDString), cardGame.FormatBetString(player), cardGame.gameData.minimumBet));
                    return false;
                }
            }
            return null;
        }

        private object CanDismountEntity(BasePlayer player, BaseMountable mountable)
        {
            CardGame cardGame = mountable.GetComponent<GameChair>()?.CardGame;
            if (cardGame != null)
            {
                if (!cardGame.CanDismountStandard())
                {
                    CardPlayer cardPlayer = player.GetComponent<CardPlayer>();
                    if (cardPlayer != null && cardPlayer.IsLeaving)
                        return null;

                    return false;
                }
            }
            return null;
        }

        private void OnEntityDismounted(BaseMountable mountable, BasePlayer player)
        {
            CardGame cardGame = IsGameChair(mountable);
            if (cardGame == null)
                return;

            cardGame.OnPlayerExit(player);
        }

        private object OnEntityTakeDamage(BaseCombatEntity baseCombatEntity, HitInfo info)
        {
            if (baseCombatEntity == null)
                return null;

            if (storedData.IsRegisteredTable(baseCombatEntity.net.ID))
                return true;

            if (baseCombatEntity.GetComponent<CardGame>() || baseCombatEntity.GetComponent<GameChair>())
                return true;            

            BasePlayer player = baseCombatEntity.ToPlayer();
            if (player != null && IsGamePlayer(player))
                return true;                       

            return null;
        }

        private void OnEntityKill(BaseNetworkable baseNetworkable)
        {
            GameChair gameChair = baseNetworkable.GetComponent<GameChair>();
            if (gameChair == null)
                return;

            CardGame cardGame = gameChair.CardGame;
            int number = gameChair.Number;

            timer.In(1f, () =>
            {
                if (cardGame == null)
                    return;

                cardGame.CreateSeat(number);
            });
        }

        private void OnPlayerDisconnected(BasePlayer player)
        {
            CardGame cardGame = IsGamePlayer(player);
            if (cardGame == null)
                return;

            cardGame.OnPlayerExit(player);
        }

        private void Unload()
        {
            Unsubscribe(nameof(OnEntityKill));

            for (int i = 0; i < cardGames.Count; i++)            
                UnityEngine.Object.Destroy(cardGames[i]);
            
            cardGames.Clear();

            Instance = null;
        }
        #endregion

        #region Functions
        public void RegisterGame(GameType gameType, Action<BaseEntity, StoredData.GameData> callback) => registeredGames[gameType] = callback;

        public void UnregisterGame(GameType gameType)
        {
            registeredGames.Remove(gameType);

            for (int i = cardGames.Count - 1; i >= 0; i--)
            {
                CardGame cardGame = cardGames[i];
                if (cardGame.gameType == gameType)
                {
                    cardGames.Remove(cardGame);
                    UnityEngine.Object.Destroy(cardGame);                    
                }
            }
        }

        private BaseMountable CreateSeat(BaseEntity entity, int number, CardGame cardgame)
        {
            Vector3 position = entity.transform.position + (entity.transform.rotation * chairPositions[number].Key);
            Quaternion rotation = Quaternion.Euler(entity.transform.eulerAngles + chairPositions[number].Value);

            BaseMountable baseMountable = GameManager.server.CreateEntity(CHAIR_PREFAB, position, rotation) as BaseMountable;
            baseMountable.enableSaving = false;
            baseMountable.pickup.enabled = false;

            baseMountable.Spawn();

            UnityEngine.Object.Destroy(baseMountable.GetComponent<DestroyOnGroundMissing>());
            UnityEngine.Object.Destroy(baseMountable.GetComponent<GroundWatch>());

            baseMountable.gameObject.AddComponent<GameChair>().SetCardGame(cardgame, number);
            return baseMountable;
        }

        private void LoadTables()
        {
            BaseEntity[] objects = BaseEntity.saveList.Where(x => x is DecorDeployable).ToArray();
            if (objects != null)
            {
                foreach (BaseEntity baseEntity in objects)
                {
                    if (baseEntity == null || !baseEntity.IsValid() || baseEntity.IsDestroyed)
                        continue;

                    if (storedData.IsRegisteredTable(baseEntity.net.ID))
                    {
                        StoredData.GameData gameData = storedData.tables[baseEntity.net.ID];
                        if (registeredGames.ContainsKey(gameData.gameType))
                        {
                            CreateCardGame(baseEntity, gameData);
                        }
                    }
                }
            }            
        }

        private void CreateCardGame(BaseEntity baseEntity, StoredData.GameData gameData)
        {
            (baseEntity as DecorDeployable).pickup.enabled = false;
            registeredGames[gameData.gameType].Invoke(baseEntity, gameData);
        }

        private CardGame IsGameChair(BaseMountable mountable) => mountable.GetComponent<GameChair>()?.CardGame;

        public CardGame IsGamePlayer(BasePlayer player)
        {
            CardPlayer cardPlayer = player.GetComponent<CardPlayer>();
            if (cardPlayer == null)
                return null;

            return cardPlayer.CardGame;
        }

        private BaseEntity FindEntityFromRay(BasePlayer player)
        {
            Ray ray = new Ray(player.eyes.position, Quaternion.Euler(player.serverInput.current.aimAngles) * Vector3.forward);
            RaycastHit hit;
            if (!Physics.Raycast(ray, out hit, 3f))
                return null;

            BaseEntity hitEnt = hit.collider.GetComponentInParent<BaseEntity>();
            if (hitEnt != null)
                return hitEnt;
            return null;
        }

        private static T ParseType<T>(string type)
        {
            try
            {
                T value = (T)Enum.Parse(typeof(T), type, true);
                if (Enum.IsDefined(typeof(T), value))
                    return value;
            }
            catch
            {                
                return default(T);
            }
            return default(T);
        }
        #endregion        

        #region Game Base
        public class CardGame : MonoBehaviour
        {
            internal StoredData.GameData gameData;

            public GameType gameType;

            internal GameState gameState = GameState.Waiting;

            internal TimerElement timer;

            private TableInformer informer;

            public CardPlayer[] cardPlayers;

            private BaseMountable[] availableSeats;

            public DecorDeployable table;

            private int bettingItemID;

            private string bettingItemName;

            private BettingType bettingType;

            public void Awake()
            {
                table = GetComponent<DecorDeployable>();
                timer = gameObject.AddComponent<TimerElement>();
                informer = gameObject.AddComponent<TableInformer>();
                enabled = false;
            }

            public virtual void OnDestroy()
            {
                Destroy(informer);

                for (int i = 0; i < cardPlayers.Length; i++)
                {
                    CardPlayer cardPlayer = cardPlayers[i];
                    if (cardPlayer != null)
                        Destroy(cardPlayer);
                }

                for (int i = availableSeats.Length - 1; i >= 0; i--)
                {
                    availableSeats[i].DismountAllPlayers();
                    availableSeats[i].Kill(BaseNetworkable.DestroyMode.None);
                }

                Destroy(timer);
            }

            public virtual void OnPlayerEnter(BasePlayer player, int position) { }

            public virtual void OnPlayerExit(BasePlayer player) { }

            public virtual bool CanDismountStandard() => false;

            public int GetChairPosition(BaseMountable baseMountable)
            {
                for (int i = 0; i < availableSeats.Length; i++)
                {
                    if (availableSeats[i].EqualNetID(baseMountable))
                        return i;
                }
                return -1;
            }

            public int CurrentPlayerCount => cardPlayers.Where(x => x != null).Count();

            public int CurrentPlayingCount => cardPlayers.Where(x => x != null && x.IsPlaying).Count();

            public void InitializeGame(StoredData.GameData gameData)
            {
                this.gameData = gameData;

                SetBettingType();

                cardPlayers = new CardPlayer[gameData.maxPlayers];
                availableSeats = new BaseMountable[gameData.maxPlayers];

                for (int i = 0; i < gameData.maxPlayers; i++)                
                    CreateSeat(i);                

                informer.OnGameInitialized();

                OnGameInitialized();
            }

            public void CreateSeat(int number)
            {
                BaseMountable baseMountable = Instance.CreateSeat(table, number, this);
                availableSeats[number] = baseMountable;
            }

            public virtual void OnGameInitialized()
            {
                Casino.Instance.cardGames.Add(this);
            }

            public void AdjustBet(CardPlayer cardPlayer, int amount)
            {
                if (gameState != GameState.PlacingBets)             
                    return;

                amount += cardPlayer.BetAmount;
                if (cardPlayer.BankBalance < amount)
                    return;

                cardPlayer.BetAmount = Mathf.Clamp(amount, gameData.minimumBet, gameData.maximumBet);
            }

            public void ResetBet(CardPlayer cardPlayer)
            {
                if (gameState != GameState.PlacingBets)
                    return;

                cardPlayer.BetAmount = gameData.minimumBet;
            }

            #region Betting

            private void SetBettingType()
            {
                string type = string.IsNullOrEmpty(gameData.bettingTypeOverride) ? Instance.configData.BettingType : gameData.bettingTypeOverride;

                bettingType = ParseType<BettingType>(type);

                if (bettingType == BettingType.ServerRewards && !Instance.ServerRewards)
                {
                    Instance.PrintError("Betting Type set to ServerRewards but ServerRewards can not be found? Defaulting to Item");
                    bettingType = BettingType.Item;
                }

                if (bettingType == BettingType.Economics && !Instance.Economics)
                {
                    Instance.PrintError("Betting Type set to Economics but Economics can not be found? Defaulting to Item");
                    bettingType = BettingType.Item;
                }

                if (bettingType == BettingType.Item)
                {
                    string shortname = string.IsNullOrEmpty(gameData.bettingItemOverride) ? Instance.configData.BettingItem : gameData.bettingItemOverride;

                    ItemDefinition itemDefinition = ItemManager.FindItemDefinition(shortname);
                    if (itemDefinition == null)
                    {
                        Instance.PrintError($"Betting item shortname is not a valid item shortname :{shortname}. Defaulting to scrap");
                        itemDefinition = ItemManager.FindItemDefinition("scrap");
                    }

                    bettingItemID = itemDefinition.itemid;
                    bettingItemName = itemDefinition.displayName.english;
                }
            }

            public int GetUserAmount(BasePlayer player)
            {
                switch (bettingType)
                {
                    case BettingType.Item:
                        return player.inventory.GetAmount(bettingItemID);
                    case BettingType.ServerRewards:
                        return (int)Instance.ServerRewards?.Call("CheckPoints", player.userID);
                    case BettingType.Economics:
                        return Convert.ToInt32((double)Instance.Economics?.Call("Balance", player.UserIDString));
                }
                return 0;
            }

            public void TakeAmount(BasePlayer player, int amount)
            {
                switch (bettingType)
                {
                    case BettingType.Item:
                        player.inventory.Take(null, bettingItemID, amount);
                        break;
                    case BettingType.ServerRewards:
                        Instance.ServerRewards?.Call("TakePoints", player.userID, amount);
                        break;
                    case BettingType.Economics:
                        Instance.Economics?.Call("Withdraw", player.UserIDString, (double)amount);
                        break;
                }
            }

            public void GiveAmount(BasePlayer player, int amount)
            {
                switch (bettingType)
                {
                    case BettingType.Item:
                        Item item = ItemManager.CreateByItemID(bettingItemID, amount);
                        player.inventory.GiveItem(item, null);
                        break;
                    case BettingType.ServerRewards:
                        Instance.ServerRewards?.Call("AddPoints", player.userID, amount);
                        break;
                    case BettingType.Economics:
                        Instance.Economics?.Call("Deposit", player.UserIDString, (double)amount);
                        break;
                }
            }

            public string FormatBetString(BasePlayer player = null)
            {
                switch (bettingType)
                {
                    case BettingType.Item:
                        return bettingItemName;
                    case BettingType.ServerRewards:
                        return Instance.lang.GetMessage("Bet.RP", Instance, player?.UserIDString);
                    case BettingType.Economics:
                        return Instance.lang.GetMessage("Bet.Eco", Instance, player?.UserIDString);
                }
                return string.Empty;
            }
            #endregion
        }

        internal class GameChair : MonoBehaviour
        {
            private BaseMountable mountable;

            public CardGame CardGame { get; private set; }

            public int Number { get; private set; }

            private void Awake()
            {
                mountable = GetComponent<BaseMountable>();

                enabled = false;
            }

            internal void SetCardGame(CardGame cardGame, int number)
            {
                this.CardGame = cardGame;
                this.Number = number;
            }
        }

        internal class TableInformer : MonoBehaviour
        {
            private DecorDeployable table;

            private CardGame cardGame;

            private OBB worldSpaceBounds;

            private Vector3 drawPosition;

            private string informationStr;

            private const float REFRESH_RATE = 2f;

            private void Awake()
            {
                table = GetComponent<DecorDeployable>();

                cardGame = GetComponent<CardGame>();

                drawPosition = transform.position + (Vector3.up * 1.5f);

                Bounds bounds = table.bounds;
                bounds.Expand(1.5f);

                worldSpaceBounds = new OBB(transform.position, transform.lossyScale, transform.rotation, bounds);                 
            }

            public void OnGameInitialized()
            {
                informationStr = string.Format(Instance.lang.GetMessage("Table.Information", Instance), cardGame.gameData.gameType, cardGame.gameData.minimumBet, cardGame.gameData.maximumBet, cardGame.FormatBetString());

                InvokeHandler.InvokeRepeating(this, InformationTick, UnityEngine.Random.Range(0.1f, 2f), REFRESH_RATE);
            }

            private void InformationTick()
            {               
                List<BasePlayer> basePlayers = Pool.GetList<BasePlayer>();
                Vis.Entities(worldSpaceBounds, basePlayers);
                for (int i = 0; i < basePlayers.Count; i++)
                {
                    BasePlayer player = basePlayers[i];
                    if (player == null || player.IsDead() || player.isMounted)
                        continue;

                    if (player.IsAdmin)
                        player.SendConsoleCommand("ddraw.text", REFRESH_RATE, Color.white, drawPosition, informationStr);
                    else
                    {
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, true);
                        player.SendNetworkUpdateImmediate();
                        player.SendConsoleCommand("ddraw.text", REFRESH_RATE, Color.white, drawPosition, informationStr);
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, false);
                        player.SendNetworkUpdateImmediate();
                    }
                }

                Pool.FreeList(ref basePlayers);
            }
        }

        internal class TimerElement : MonoBehaviour
        {
            public Casino.CardGame CardGame { get; private set; }

            private int timeRemaining;

            private Action callback;

            private const string TIMER_OVERLAY = "casino.timer";

            private UI4 TIMER_POSITION = new UI4(0.475f, 0f, 0.525f, 0.05f);

            private void Awake() => CardGame = GetComponent<Casino.CardGame>();

            public void StartTimer(int time, Action callback = null)
            {
                this.timeRemaining = time + 1;

                this.callback = callback;

                InvokeHandler.InvokeRepeating(this, TimerTick, 0f, 1f);
            }

            public void StopTimer()
            {
                if (!InvokeHandler.IsInvoking(this, TimerTick))
                    return;

                InvokeHandler.CancelInvoke(this, TimerTick);

                for (int i = 0; i < CardGame.cardPlayers.Length; i++)
                {
                    CardPlayer cardPlayer = CardGame.cardPlayers[i];
                    if (cardPlayer == null)
                        continue;

                    cardPlayer.DestroyUI(TIMER_OVERLAY);
                }
            }

            private void TimerTick()
            {
                timeRemaining--;

                if (timeRemaining == 0)
                {
                    StopTimer();
                    callback?.Invoke();
                }
                else UpdateTimerUI();
            }

            private void UpdateTimerUI()
            {
                CuiElementContainer container = UI.ElementContainer(TIMER_OVERLAY, TIMER_POSITION);
                UI.Label(ref container, TIMER_OVERLAY, $"{timeRemaining}", 18, UI4.FullScreen);

                for (int i = 0; i < CardGame.cardPlayers.Length; i++)
                {
                    CardPlayer cardPlayer = CardGame.cardPlayers[i];
                    if (cardPlayer == null)
                        continue;

                    cardPlayer.AddUI(TIMER_OVERLAY, container);
                }
            }
        }


        public class CardPlayer : MonoBehaviour
        {            
            internal List<Card> hand = new List<Card>();

            internal List<string> uiPanels = new List<string>();

            public BasePlayer Player { get; private set; }

            public Casino.CardGame CardGame { get; internal set; }

            internal bool IsLeaving { get; private set; }

            internal int UID { get; private set; }

            internal int BetAmount { get; set; }

            internal bool BetLocked { get; set; }

            internal bool IsPlaying { get; set; } = false;

            internal int Position { get; set; }

            public int BankBalance
            {
                get
                {
                    return CardGame.GetUserAmount(Player);
                }
            }

            public int BalanceAndBet
            {
                get
                {
                    return BankBalance + BetAmount;
                }
            }

            internal virtual void Awake()
            {
                Player = GetComponent<BasePlayer>();
                CardGame = Player.GetMounted().GetComponent<Casino.GameChair>().CardGame;
                BetAmount = CardGame.gameData.minimumBet;

                GenerateUID();
                enabled = false;
            }

            internal virtual void OnDestroy()
            {
                IsLeaving = true;

                DestroyUI();

                if (Player.isMounted)
                {
                    Player.GetMounted().DismountPlayer(Player, false);
                }
            }

            internal void GenerateUID() => UID = UnityEngine.Random.Range(int.MinValue, int.MaxValue);

            internal virtual void ResetHand()
            {
                hand.Clear();
                BetAmount = CardGame.gameData.minimumBet;
                BetLocked = false;
                IsPlaying = false;
            }

            internal void SetBet()
            {
                BetLocked = true;
                CardGame.TakeAmount(Player, BetAmount);                
            }

            internal void IssueWin(int amount)
            {
                CardGame.GiveAmount(Player, amount);               
            }

            internal void AddUI(string str, CuiElementContainer container)
            {
                if (uiPanels.Contains(str))
                    DestroyUI(str);

                uiPanels.Add(str);                   
                CuiHelper.AddUi(Player, container);
            }

            internal void DestroyUI(string str)
            {
                uiPanels.Remove(str);
                CuiHelper.DestroyUi(Player, str);
            }

            internal void DestroyUI()
            {
                foreach (string str in uiPanels)                
                    CuiHelper.DestroyUi(Player, str);                

                uiPanels.Clear();
            }
        }

        public class Deck
        {
            private Queue<Card> deckOfCards = new Queue<Card>();

            private List<int> cardsAsInt = new List<int>();

            private System.Random generator = new System.Random();

            public Deck()
            {
                Shuffle();
            }

            private void GenerateCardsAsInt()
            {
                cardsAsInt.Clear();
                for (int i = 0; i < 52; i++)
                {
                    cardsAsInt.Add(i);
                }
            }

            public void Shuffle()
            {
                deckOfCards.Clear();
                GenerateCardsAsInt();
                for (int i = 51; i >= 0; i--)
                {
                    int index = generator.Next(0, i);
                    int temp = cardsAsInt[i];
                    cardsAsInt[i] = cardsAsInt[index];
                    cardsAsInt[index] = temp;
                }
                FillDeck();
            }

            private void FillDeck()
            {
                for (int i = 0; i < cardsAsInt.Count; i++)
                {
                    CardSuit suit = (CardSuit)(cardsAsInt[i] % 4);
                    CardValue value = (CardValue)(cardsAsInt[i] % 13 + 1);
                    deckOfCards.Enqueue(new Card(suit, value));
                }
            }

            public Card DealCard()
            {
                return deckOfCards.Dequeue();
            }
        }

        public struct Card
        {            
            public CardSuit Suit { get; private set; }

            public CardValue Value { get; private set; }

            public static Dictionary<CardSuit, Dictionary<CardValue, string>> CardImages = new Dictionary<CardSuit, Dictionary<CardValue, string>>()
            {
                [CardSuit.Clubs] = new Dictionary<CardValue, string>(),
                [CardSuit.Diamonds] = new Dictionary<CardValue, string>(),
                [CardSuit.Hearts] = new Dictionary<CardValue, string>(),
                [CardSuit.Spades] = new Dictionary<CardValue, string>()
            };


            public Card(CardSuit suit, CardValue value) : this()
            {
                this.Suit = suit;
                this.Value = value;
            }

            public override string ToString() => string.Format("Suit: {0}, Value: {1}", this.Suit, this.Value);

            public string GetCardImage()
            {
                if (!Card.CardImages[this.Suit].ContainsKey(this.Value))
                {
                    string value = string.Empty;
                    string suit = string.Empty;

                    switch (Value)
                    {
                        case CardValue.Ace:
                            value = "A";
                            break;
                        case CardValue.Deuce:
                        case CardValue.Three:
                        case CardValue.Four:
                        case CardValue.Five:
                        case CardValue.Six:
                        case CardValue.Seven:
                        case CardValue.Eight:
                        case CardValue.Nine:
                        case CardValue.Ten:
                            value = ((int)Value).ToString();
                            break;
                        case CardValue.Jack:
                            value = "J";
                            break;
                        case CardValue.Queen:
                            value = "Q";
                            break;
                        case CardValue.King:
                            value = "K";
                            break;
                    }

                    switch (this.Suit)
                    {
                        case CardSuit.Spades:
                            suit = "S";
                            break;
                        case CardSuit.Diamonds:
                            suit = "D";
                            break;
                        case CardSuit.Hearts:
                            suit = "H";
                            break;
                        case CardSuit.Clubs:
                            suit = "C";
                            break;
                    }
                    string str = PlayingCards.GetCardImage(value, suit);

                    Card.CardImages[this.Suit].Add(this.Value, str);

                    return str;
                }

                else return Card.CardImages[this.Suit][this.Value];
            }
        }
        
        public enum CardSuit
        {
            Spades = 0,
            Diamonds = 1,
            Hearts = 2,
            Clubs = 3
        }

        public enum CardValue
        {
            Ace = 1,
            Deuce = 2,
            Three = 3,
            Four = 4,
            Five = 5,
            Six = 6,
            Seven = 7,
            Eight = 8,
            Nine = 9,
            Ten = 10,
            Jack = 11,
            Queen = 12,
            King = 13
        }
        #endregion

        #region UI     
        public static class UI
        {
            public static CuiElementContainer ElementContainer(string panel, string color, UI4 dimensions, bool useCursor = false, string parent = "Overlay")
            {
                CuiElementContainer container = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color},
                            RectTransform = {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax()},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panel
                    }
                };
                return container;
            }

            public static CuiElementContainer ElementContainer(string panel, UI4 dimensions, bool useCursor = false, string parent = "Overlay")
            {
                CuiElementContainer container = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = "0 0 0 0"},
                            RectTransform = {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax()},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panel
                    }
                };
                return container;
            }

            public static CuiElementContainer Popup(string panelName, string text, int size, UI4 dimensions, TextAnchor align = TextAnchor.MiddleCenter, string parent = "Overlay")
            {
                CuiElementContainer container = new CuiElementContainer()
                {
                    {
                        new CuiPanel { Image = {Color = "0 0 0 0" }, RectTransform = {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax()} },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                container.Add(new CuiLabel
                {
                    Text = { FontSize = size, Align = align, Text = text },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                },
                panelName);
                return container;
            }

            public static void Panel(ref CuiElementContainer container, string panel, string color, UI4 dimensions, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() },
                    CursorEnabled = cursor
                },
                panel);
            }

            public static void Label(ref CuiElementContainer container, string panel, string text, int size, UI4 dimensions, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                {
                    Text = { FontSize = size, Align = align, Text = text },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() }
                },
                panel);
            }

            public static void OutlineLabel(ref CuiElementContainer container, string panel, string color, string text, int size, string distance, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, string parent = "Overlay")
            {
                CuiElement textElement = new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    FadeOut = 0.2f,
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = text,
                            FontSize = size,
                            Align = TextAnchor.MiddleCenter,
                            FadeIn = 0.2f
                        },
                        new CuiOutlineComponent
                        {
                            Distance = distance,
                            Color = color
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = aMin,
                            AnchorMax = aMax
                        }
                    }
                };
                container.Add(textElement);
            }

            public static void Button(ref CuiElementContainer container, string panel, string color, string text, int size, UI4 dimensions, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = 0f },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }

            public static void Button(ref CuiElementContainer container, string panel, UI4 dimensions, string command)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = command, FadeIn = 0f },
                    RectTransform = { AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() },
                    Text = { Text = string.Empty, FontSize = 0, Align = TextAnchor.LowerCenter }
                },
                panel);
            }

            public static void Image(ref CuiElementContainer container, string panel, string png, UI4 dimensions)
            {
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiRawImageComponent {Png = png },
                        new CuiRectTransformComponent {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() }
                    }
                });
            }

            public static void Input(ref CuiElementContainer container, string panel, string text, int size, string command, UI4 dimensions)
            {
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiInputFieldComponent
                        {
                            Align = TextAnchor.MiddleLeft,
                            CharsLimit = 300,
                            Command = command + text,
                            FontSize = size,
                            IsPassword = false,
                            Text = text
                        },
                        new CuiRectTransformComponent {AnchorMin = dimensions.GetMin(), AnchorMax = dimensions.GetMax() }
                    }
                });
            }

            public static string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                    hexColor = hexColor.Substring(1);
                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double)red / 255} {(double)green / 255} {(double)blue / 255} {alpha}";
            }
        }

        public class UI4
        {
            public float xMin, yMin, xMax, yMax;

            public UI4(float xMin, float yMin, float xMax, float yMax)
            {
                this.xMin = xMin;
                this.yMin = yMin;
                this.xMax = xMax;
                this.yMax = yMax;
            }

            public string GetMin() => $"{xMin} {yMin}";
            public string GetMax() => $"{xMax} {yMax}";

            private static UI4 _fullScreen;

            public static UI4 FullScreen
            {
                get
                {
                    if (_fullScreen == null)
                        _fullScreen = new UI4(0, 0, 1, 1);
                    return _fullScreen;
                }
            }
        }
        #endregion

        #region Commands
        [ChatCommand("casino")]
        private void cmdCasino(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin)
                return;

            if (args.Length == 0)
            {
                SendReply(player, "/casino create <type> <maximum players> <minimum bet> <maximum bet> - Creates the specified type of card game, with the details provided");
                SendReply(player, $"Available Games : {registeredGames.Keys.ToSentence()}");
                SendReply(player, "/casino setbet <type> <opt:shortname> - Sets the bet type for the card game you are looking at");
                SendReply(player, "Types : Item / ServerRewards / Economics. Note that only the type Item requires a item shortname");
                SendReply(player, "/casino remove - Removes the card game you are looking at");
                return;
            }

            BaseEntity baseEntity = FindEntityFromRay(player);

            if (baseEntity == null || !baseEntity.PrefabName.Equals(TABLE_PREFAB))
            {
                SendReply(player, "Error.InvalidEntity");
                return;
            }
                   
            switch (args[0].ToLower())
            {
                case "create":
                    if (args.Length != 5)
                    {
                        SendReply(player, "Invalid Syntax!");
                        SendReply(player, "/casino create <type> <maximum players> <minimum bet> <maximum bet> - Creates the specified type of card game, with the details provided");
                        SendReply(player, $"Available Games : {registeredGames.Keys.ToSentence()}");
                        return;
                    }

                    if (storedData.IsRegisteredTable(baseEntity.net.ID))
                    {
                        SendReply(player, "This table is already a registered card game");
                        return;
                    }

                    GameType gameType = ParseType<GameType>(args[1]);

                    int maxPlayers;
                    if (!int.TryParse(args[2], out maxPlayers))
                    {
                        SendReply(player, "You must enter a amount of players");
                        return;
                    }
                    else
                    {
                        if (maxPlayers < 1 || maxPlayers > 4)
                        {
                            SendReply(player, "You can only set the amount of players between 1 and 4");
                            return;
                        }
                    }

                    int minimumBet;
                    if (!int.TryParse(args[3], out minimumBet))
                    {
                        SendReply(player, "You must enter a valid minimum bet");
                        return;
                    }

                    minimumBet = Mathf.Abs(minimumBet);

                    int maximumBet;
                    if (!int.TryParse(args[4], out maximumBet))
                    {
                        SendReply(player, "You must enter a valid maximum bet");
                        return;
                    }

                    maximumBet = Mathf.Abs(maximumBet);

                    StoredData.GameData gameData = new StoredData.GameData(gameType, maxPlayers, minimumBet, maximumBet);
                    storedData.RegisterTable(baseEntity.net.ID, gameData);
                    SaveData();

                    CreateCardGame(baseEntity, gameData);

                    SendReply(player, string.Format("You have created a new {0} game", gameType));
                    return;
                case "setbet":
                    if (args.Length < 2)
                    {
                        SendReply(player, "/casino setbet <type> <opt:shortname> - Sets the bet type for the card game you are looking at");
                        SendReply(player, "Types : Item / ServerRewards / Economics. Note that only the type Item requires a item shortname");
                        return;
                    }

                    if (!storedData.IsRegisteredTable(baseEntity.net.ID))
                    {
                        SendReply(player, "The table you are looking at is not a registered card game");
                        return;
                    }

                    BettingType bettingType = ParseType<BettingType>(args[1]);
                    string shortname = string.Empty;

                    if (bettingType == BettingType.Item)
                    {
                        if (args.Length != 3)
                        {
                            SendReply(player, "You must enter a item shortname to set a item betting type");
                            return;
                        }

                        shortname = args[2];

                        ItemDefinition itemDefinition = ItemManager.FindItemDefinition(shortname);
                        if (itemDefinition == null)
                        {
                            SendReply(player, $"The item shortname '{shortname}' is invalid!");
                            return;
                        }
                    }

                    storedData.SetBetType(baseEntity.net.ID, bettingType.ToString(), shortname);
                    SaveData();

                    CardGame cardgame = baseEntity.GetComponent<CardGame>();
                    GameType type = cardgame.gameType;

                    UnityEngine.Object.Destroy(cardgame);

                    timer.In(5f, () =>
                    {
                        if (registeredGames.ContainsKey(type))
                        {
                            CreateCardGame(baseEntity, storedData.tables[baseEntity.net.ID]);
                        }
                    });                    

                    if (bettingType == BettingType.Item)
                        SendReply(player, $"You have set the bet type to {bettingType} and item to {shortname}");
                    else SendReply(player, $"You have set the bet type to {bettingType}");
                    return;
                case "remove":
                    if (!storedData.IsRegisteredTable(baseEntity.net.ID))
                    {
                        SendReply(player, "The table you are looking at is not a registered card game");
                        return;
                    }

                    storedData.RemoveTable(baseEntity.net.ID);

                    SaveData();

                    CardGame cardGame = baseEntity.GetComponent<CardGame>();
                    if (cardGame != null)
                        UnityEngine.Object.Destroy(cardGame);

                    SendReply(player, "You have removed the card game you are looking at");
                    return;
                default:
                    break;
            }            
        }
        #endregion

        #region Config   
        public enum BettingType { Item, ServerRewards, Economics }

        private ConfigData configData;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Betting Item (shortname)")]
            public string BettingItem { get; set; }

            [JsonProperty(PropertyName = "Betting Item Type (Item/ServerRewards/Economics)")]
            public string BettingType { get; set; }

            [JsonProperty(PropertyName = "Wipe data on map wipe")]
            public bool WipeOnNewSave { get; set; }

            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                BettingItem = "scrap",
                WipeOnNewSave = true,
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            if (configData.Version < new VersionNumber(0, 1, 1))
            {
                configData.BettingItem = "scrap";
                configData.BettingType = BettingType.Item.ToString();
            }

            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        #endregion

        #region Data Management
        public enum GameType { BlackJack }

        public enum GameState { Waiting, PlacingBets, Prestart, Playing }

        private void SaveData() => data.WriteObject(storedData);

        private void LoadData()
        {
            try
            {
                storedData = data.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        public class StoredData
        {
            public Hash<uint, GameData> tables = new Hash<uint, GameData>();

            public bool IsRegisteredTable(uint netId) => tables.ContainsKey(netId);

            public void RegisterTable(uint netId, GameData gameData) => tables.Add(netId, gameData);

            public void RemoveTable(uint netId) => tables.Remove(netId);

            public void SetBetType(uint netId, string bettingType, string shortname)
            {
                tables[netId].bettingTypeOverride = bettingType;
                tables[netId].bettingItemOverride = shortname;
            }

            public class GameData
            {
                public GameType gameType;
                public int maxPlayers;
                public int minimumBet;
                public int maximumBet;
                public string bettingItemOverride;
                public string bettingTypeOverride;

                public GameData() { }

                public GameData(GameType gameType, int maxPlayers, int minimumBet, int maximumBet)
                {
                    this.gameType = gameType;
                    this.maxPlayers = maxPlayers;
                    this.minimumBet = minimumBet;
                    this.maximumBet = maximumBet;
                }
            }
        }
        #endregion
    }
}


// --- End of file: Casino.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ScubaSteve.cs ---
// --- Original Local Path: ScubaSteve.cs ---

using Oxide.Core;
using System.Collections.Generic;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using System;

namespace Oxide.Plugins
{
    [Info("Scuba Steve", "DaBludger", 1.6, ResourceId = 0)]
    [Description("Be the SEAL, this will protect you from drowning and cold damage while swimming.")]
    public class ScubaSteve : RustPlugin
    {
        private bool Changed;
        private bool damageArmour = false;
        private bool configloaded = false;
        private float armourDamageAmount = 0.0f;
        private float head = 0.3f;
        private float chest = 0.2f;
        private float pants = 0.2f;
        private float gloves = 0.05f;
        private float boots = 0.05f;

        private float chead = 0.3f;
        private float cchest = 0.2f;
        private float cpants = 0.2f;
        private float cgloves = 0.05f;
        private float cboots = 0.05f;

        void OnPluginLoaded(Plugin name)
        {
            if ("ScubaSteve".Equals(name.Name) && !configloaded)
            {
                LoadVariables();
            }
        }

        protected override void LoadDefaultConfig()
        {
            Config.Clear();
            LoadVariables();
			configloaded = true;
        }

        void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitinfo)
        {
            if (hitinfo.hasDamage)
            {
                float dd = 0.0f;
                bool armourDamaged = false;
                if (hitinfo.damageTypes?.Get(Rust.DamageType.Drowned) > 0.0f)
                {
                    dd = getDamageDeduction(entity.ToPlayer(), Rust.DamageType.Drowned);
                    float newdamage = getScaledDamage(hitinfo.damageTypes.Get(Rust.DamageType.Drowned), dd);
                    hitinfo.damageTypes.Set(Rust.DamageType.Drowned, newdamage);
                    armourDamaged = true;
                }
                if (hitinfo.damageTypes?.Get(Rust.DamageType.Cold) > 0.0f && entity.ToPlayer().IsSwimming())
                {
                    dd = getDamageDeduction(entity.ToPlayer(), Rust.DamageType.Cold);
                    float newdamage = getScaledDamage(hitinfo.damageTypes.Get(Rust.DamageType.Cold), dd);
                    hitinfo.damageTypes.Set(Rust.DamageType.Cold, newdamage);
                    armourDamaged = true;
                }
                if (armourDamaged && damageArmour)
                {
                    foreach (Item i in entity.ToPlayer().inventory.containerWear.itemList)
                    {
                        if (i.info.name.ToLower().Contains("hazmat"))
                        {
                            i.condition = i.condition - armourDamageAmount;
                        }
                    }
                }
            }
        }

        private float getScaledDamage(float current, float deduction)
        {
            float newd = current - (current * deduction);
            if (newd < 0.0f)
            {
                newd = 0.0f;
            }
            return newd;
        }


        private float getDamageDeduction(BasePlayer player, Rust.DamageType damageType)
        {
            float dd = 0.0f;
            foreach (Item i in player.inventory.containerWear.itemList)
            {
                if (!i.isBroken)
                {
                    if (i.info.name.ToLower().Contains("hazmat_helmet.item"))
                    {
                        //PrintToChat(player, "damageArmour "+damageArmour, new object[0]);
                        if (damageType == Rust.DamageType.Drowned)
                        {
                            dd += head;
                        }
                        if (damageType == Rust.DamageType.Cold)
                        {
                            dd += chead;
                        }
                    }
                    if (i.info.name.ToLower().Contains("hazmat_jacket.item"))
                    {
                        if (damageType == Rust.DamageType.Drowned)
                        {
                            dd += chest;
                        }
                        if (damageType == Rust.DamageType.Cold)
                        {
                            dd += cchest;
                        }
                    }
                    if (i.info.name.ToLower().Contains("hazmat_pants.item"))
                    {
                        if (damageType == Rust.DamageType.Drowned)
                        {
                            dd += pants;
                        }
                        if (damageType == Rust.DamageType.Cold)
                        {
                            dd += cpants;
                        }
                    }
                    if (i.info.name.ToLower().Contains("hazmat_gloves.item"))
                    {
                        if (damageType == Rust.DamageType.Drowned)
                        {
                            dd += gloves;
                        }
                        if (damageType == Rust.DamageType.Cold)
                        {
                            dd += cgloves;
                        }
                    }
                    if (i.info.name.ToLower().Contains("hazmat_boots.item"))
                    {
                        if (damageType == Rust.DamageType.Drowned)
                        {
                            dd += boots;
                        }
                        if (damageType == Rust.DamageType.Cold)
                        {
                            dd += cboots;
                        }
                    }
                }
            }
            return dd;
        }

        private object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

        private void LoadVariables()
        {
            Puts("Loading Config File:");
            chead = Convert.ToSingle(GetConfig("Cold", "head", "0.3"));
            Puts("Cold damage midigation head: " + chead);
            cchest = Convert.ToSingle(GetConfig("Cold", "chest", "0.2"));
            Puts("Cold damage midigation chest: " + cchest);
            cpants = Convert.ToSingle(GetConfig("Cold", "pants", "0.2"));
            Puts("Cold damage midigation pants: " + cpants);
            cgloves = Convert.ToSingle(GetConfig("Cold", "gloves", "0.05"));
            Puts("Cold damage midigation gloves: " + cgloves);
            cboots = Convert.ToSingle(GetConfig("Cold", "boots", "0.05"));
            Puts("Cold damage midigation boots: " + cboots);

            head = Convert.ToSingle(GetConfig("Drown", "head", "0.3"));
            Puts("Drown damage midigation head: " + head);
            chest = Convert.ToSingle(GetConfig("Drown", "chest", "0.2"));
            Puts("Drown damage midigation chest: " + chest);
            pants = Convert.ToSingle(GetConfig("Drown", "pants", "0.2"));
            Puts("Drown damage midigation pants: " + pants);
            gloves = Convert.ToSingle(GetConfig("Drown", "gloves", "0.05"));
            Puts("Drown damage midigation gloves: " + gloves);
            boots = Convert.ToSingle(GetConfig("Drown", "boots", "0.05"));
            Puts("Drown damage midigation boots: " + boots);

            //The only peace of armour that has condition is the helmet so this is removed until the other have it added
            //damageArmour = Convert.ToBoolean(GetConfig("Attire", "TakesDamage", "false"));
            //Puts("Amour takes damage: "+ damageArmour);
            //armourDamageAmount = Convert.ToSingle(GetConfig("Attire", "DamageAmount", "0.0"));
            //Puts("How much damage does the armour take: "+ armourDamageAmount);

            if (!Changed) return;
            SaveConfig();
            Changed = false;
        }
    }
}


// --- End of file: ScubaSteve.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AdminToggle.cs ---
// --- Original Local Path: AdminToggle.cs ---

using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using Oxide.Core;
using System;

namespace Oxide.Plugins
{
    [Info("Admin Toggle", "LaserHydra", "1.0.2", ResourceId = 1371)]
    [Description("Toggle your admin status")]
    class AdminToggle : RustPlugin
    {
		readonly FieldInfo displayname = typeof(BasePlayer).GetField("_displayName", (BindingFlags.Instance | BindingFlags.NonPublic));
		
		class Data
		{
			public Dictionary<string, AdminData> AdminData = new Dictionary<string, AdminData>();
		}
		
		Data data;
		
		class AdminData
		{
			public string PlayerName;
			public string AdminName;
			public bool EnabledPlayerMode;
			
			public AdminData(BasePlayer player)
			{
				PlayerName = "";
				AdminName = player.displayName;
				EnabledPlayerMode = false;
			}
			
			public AdminData()
			{
			}
		}
		
		void Loaded()
		{
			if(!permission.PermissionExists("admin.toggle")) permission.RegisterPermission("admin.toggle", this);
			data = Interface.GetMod().DataFileSystem.ReadObject<Data>("AdminToggle_Data");
			LoadConfig();
		}
		
		void LoadConfig()
		{
			SetConfig("Groups", "Admin Group", "admin");
			SetConfig("Groups", "Player Group", "player");
		}
		
		protected override void LoadDefaultConfig()
		{
			Puts("Generating new config file...");
			LoadConfig();
		}
		
		void SaveData() => Interface.GetMod().DataFileSystem.WriteObject("AdminToggle_Data", data);
		
		void OnPlayerInit(BasePlayer player)
		{
			if(!data.AdminData.ContainsKey(player.userID.ToString())) return;
			
			if(data.AdminData[player.userID.ToString()].EnabledPlayerMode)
			{
				displayname.SetValue(player, data.AdminData[player.userID.ToString()].PlayerName);
			}
		}
		
		bool CheckPermission(BasePlayer player)
		{
			if(permission.UserHasPermission(player.userID.ToString(), "admin.toggle")) return true;
			else SendChatMessage(player, "AdminToggle", "You have no permission to use this command.");
			return false;
		}
		
		[ChatCommand("setplayername")]
		void SetPlayerName(BasePlayer player, string cmd, string[] args)
		{
			if(!CheckPermission(player)) return;
			
			if(args.Length != 1)
			{
				SendChatMessage(player, "AdminToggle", "Syntax: /setplayername <Name>");
				return;
			}
			
			if(!data.AdminData.ContainsKey(player.userID.ToString())) data.AdminData.Add(player.userID.ToString(), new AdminData(player));
			
			data.AdminData[player.userID.ToString()].PlayerName = args[0] ?? "";
			SaveData();
			
			SendChatMessage(player, "AdminToggle", $"You have set your player name to: <color=#00FF8D>{args[0]}</color>");
		}
		
		[ChatCommand("toggleadmin")]
		void ToggleAdmin(BasePlayer player)
		{
			if(!CheckPermission(player)) return;
			
			if(!data.AdminData.ContainsKey(player.userID.ToString())) data.AdminData.Add(player.userID.ToString(), new AdminData(player));
			
			if(data.AdminData[player.userID.ToString()].PlayerName == "")
			{
				SendChatMessage(player, "AdminToggle", "You did not set up your player name yet. Set it up using /setplayername");
				return;
			}
			
			displayname.SetValue(player, data.AdminData[player.userID.ToString()].EnabledPlayerMode ? data.AdminData[player.userID.ToString()].AdminName : data.AdminData[player.userID.ToString()].PlayerName);
			
			if(data.AdminData[player.userID.ToString()].EnabledPlayerMode)
			{
				ServerUsers.Set(player.userID, ServerUsers.UserGroup.Owner, player.displayName, "");
				ConVar.Server.writecfg(new ConsoleSystem.Arg(""));
				
				permission.AddUserGroup(player.userID.ToString(), Config["Groups", "Admin Group"].ToString());
				permission.RemoveUserGroup(player.userID.ToString(), Config["Groups", "Player Group"].ToString());
				
				SendChatMessage(player, "AdminToggle", "You switched to admin mode!");
			}
			else
			{
				ServerUsers.Set(player.userID, ServerUsers.UserGroup.None, player.displayName, "");
				ConVar.Server.writecfg(new ConsoleSystem.Arg(""));
				
				permission.AddUserGroup(player.userID.ToString(), Config["Groups", "Player Group"].ToString());
				permission.RemoveUserGroup(player.userID.ToString(), Config["Groups", "Admin Group"].ToString());
				
				
				SendChatMessage(player, "AdminToggle", "You switched to player mode!");
			}
			
			data.AdminData[player.userID.ToString()].EnabledPlayerMode = !data.AdminData[player.userID.ToString()].EnabledPlayerMode;
			SaveData();
			
			SendChatMessage(player, "AdminToggle", "You will be kicked in 5 seconds to update your status. Please reconnect!");
			timer.Once(5, () => player.SendConsoleCommand("client.disconnect"));
		}
		
        #region UsefulMethods
        //--------------------------->   Player finding   <---------------------------//

		BasePlayer GetPlayer(string searchedPlayer, BasePlayer executer, string prefix)
        {
            BasePlayer targetPlayer = null;
            List<string> foundPlayers = new List<string>();
            string searchedLower = searchedPlayer.ToLower();
            
			foreach(BasePlayer player in BasePlayer.activePlayerList)
			{
				if(player.displayName.ToLower().Contains(searchedLower)) foundPlayers.Add(player.displayName);
			} 
			
			switch(foundPlayers.Count)
			{
				case 0:
					SendChatMessage(executer, prefix, "The Player can not be found.");
					break;
					
				case 1:
					targetPlayer = BasePlayer.Find(foundPlayers[0]);
					break;
				
				default:
					string players = ListToString(foundPlayers, 0, ", ");
					SendChatMessage(executer, prefix, "Multiple matching players found: \n" + players);
					break;
			}
			
            return targetPlayer;
        }
		
		//---------------------------->   Converting   <----------------------------//

        string ListToString(List<string> list, int first, string seperator) 
		{
			return String.Join(seperator, list.Skip(first).ToArray());
		}

        //------------------------------>   Config   <------------------------------//

        void SetConfig(string Arg1, object Arg2, object Arg3 = null, object Arg4 = null)
		{
			if(Arg4 == null) 
			{
				Config[Arg1, Arg2.ToString()] = Config[Arg1, Arg2.ToString()] ?? Arg3;
			}
			else if(Arg3 == null) 
			{
				Config[Arg1] = Config[Arg1] ?? Arg2;
			}
			else
			{
				Config[Arg1, Arg2.ToString(), Arg3.ToString()] = Config[Arg1, Arg2.ToString(), Arg3.ToString()] ?? Arg4;
			} 
		}

        //---------------------------->   Chat Sending   <----------------------------//

        void BroadcastChat(string prefix, string msg = null) => PrintToChat(msg == null ? prefix : "<color=#00FF8D>" + prefix + "</color>: " + msg);

        void SendChatMessage(BasePlayer player, string prefix, string msg = null) => SendReply(player, msg == null ? prefix : "<color=#00FF8D>" + prefix + "</color>: " + msg);

        //---------------------------------------------------------------------------//
        #endregion
    }
}


// --- End of file: AdminToggle.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/NickManager.cs ---
// --- Original Local Path: NickManager.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using System.Globalization;
using Newtonsoft.Json;
using Color = UnityEngine.Color;

namespace Oxide.Plugins
{
    [Info("NickeManager", "empty", "1.0.6")]
    [Description("Плагин для управлением никнеймов игроков")]
    public class NickManager : RustPlugin
    {
        #region [Reference] / [Запросы]

        [PluginReference] Plugin ImageLibrary;
        private StoredData DataBase = new StoredData();

        private string GetImg(string name)
        {
            return (string) ImageLibrary?.Call("GetImage", name) ?? "";
        }

        public string GetImage(string shortname, ulong skin = 0) =>
            (string) ImageLibrary?.Call("GetImage", shortname, skin);

        #endregion

        #region [Configuraton] / [Конфигурация]

        static public ConfigData config;


        public class ConfigData
        {
            [JsonProperty(PropertyName = "ZealNickManager")]
            public NickManager ZealNickManager = new NickManager();

            public class NickManager 
            {
                [JsonProperty(PropertyName = "Удалять запрещённые символы/фразы на ?")]
                public bool ReplaceNick;

                [JsonProperty(PropertyName = "Уведомлять игрока о замене никнейм ?")]
                public bool AlertReplaceNick;

                [JsonProperty(PropertyName = "Хранить историю никнеймов игрока ?")]
                public bool HistoryNickSave;

                [JsonProperty(PropertyName = "Разрешение на использование ZealNickManager")]
                public string PermissionUse;

                [JsonProperty(PropertyName = "Запрещенные символы/фразы")]
                public List<string> ReplacesValue = new List<string>();
            }
        }

        public ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                ZealNickManager = new ConfigData.NickManager
                {
                    ReplaceNick = true,
                    AlertReplaceNick = true,
                    HistoryNickSave = true,
                    PermissionUse = "zealnickmanager.use",
                    ReplacesValue = new List<string> {".ru", ".com", ".net"}
                }
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();
            }
            catch
            {
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            PrintError("Файл конфигурации поврежден (или не существует), создан новый!");
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion

        #region [Dictionary/Vars] / [Словари/Переменные]

        private string Sharp = "assets/content/ui/ui.background.tile.psd";
        private string Blur = "assets/content/ui/uibackgroundblur.mat";
        private string radial = "assets/content/ui/ui.background.transparent.radial.psd";
        private string regular = "robotocondensed-regular.ttf";

        private string Layer = "BoxNickManager";

        #endregion

        #region [DrawUI] / [Показ UI]

        void PlayerList(BasePlayer player)
        {
            CuiElementContainer Gui = new CuiElementContainer();
            CuiHelper.DestroyUi(player, Layer);

            Gui.Add(new CuiPanel
            {
                CursorEnabled = true,
                Image =
                {
                    Color = HexToRustFormat("#000000F9"),
                    Material = Blur,
                    Sprite = radial
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            }, "Overlay", "BoxNickManager");

            Gui.Add(new CuiButton
            {
                Button =
                {
                    Command = "close.nickmanager",
                    Color = "0 0 0 0"
                },
                Text =
                {
                    Text = " "
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            }, Layer, "CloseNickManager");

            Gui.Add(new CuiElement
            {
                Name = "Zagolovok",
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = HexToRustFormat("#EAEAEAFF"),
                        FontSize = 35,
                        Text = "ПАНЕЛЬ УПРАВЛЕНИЯ ИГРОВЫМИ НИКАМИ",
                        Font = regular
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0.9213709",
                        AnchorMax = "1 1"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "DescPl",
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = HexToRustFormat("#EAEAEAFF"),
                        FontSize = 25,
                        Text = "Выберите игрока",
                        Font = regular
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0.8881495",
                        AnchorMax = "1 0.9446309"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "BoxPlayers",
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent
                    {
                        Color = "0 0 0 0"
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.04166667 0.83425",
                        AnchorMax = "0.1536459 0.8731388"
                    }
                }
            });

            int x = 0, y = 0, num = 0;
            foreach (var plobj in BasePlayer.activePlayerList)
            {
                if (x == 8)
                {
                    x = 0;
                    y++;
                }

                Gui.Add(new CuiButton
                    {
                        Button =
                        {
                            Command = "nickmanager.info " + plobj.userID,
                            Color = HexToRustFormat("#0000005A"),
                            Material = Blur,
                            FadeIn = 0.1f + (num * 0.01f)
                        },
                        Text =
                        {
                            Text = plobj.displayName,
                            Align = TextAnchor.MiddleCenter,
                            Color = HexToRustFormat("#ffffff"),
                            Font = regular,
                            FontSize = 15,
                            FadeIn = 0.1f + (num * 0.01f)
                        },
                        RectTransform =
                        {
                            AnchorMin = $"{0 + (x * 1.02)} {0 - (y * 1.1)}",
                            AnchorMax = $"{1 + (x * 1.02)} {1 - (y * 1.1)}"
                        }
                    }, "BoxPlayers", "Player" + num);
                x++;
                num++;
            }

            CuiHelper.AddUi(player, Gui);
        }

        void PlayerInfo(BasePlayer player, ulong SteamID)
        {
            CheckDataBase(BasePlayer.FindByID(SteamID));
            CuiElementContainer Gui = new CuiElementContainer();

            CuiHelper.DestroyUi(player, "BoxPlayers");
            CuiHelper.DestroyUi(player, "Zagolovok");
            CuiHelper.DestroyUi(player, "DescPl");

            var infopl = DataBase.NickManager[SteamID];

            Gui.Add(new CuiElement
            {
                Name = "ZagolovokInfoPl",
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = HexToRustFormat("#EAEAEAFF"),
                        FontSize = 35,
                        Text = "ИНФОРМАЦИЯ ИГРОКА : " + infopl.Name,
                        Font = regular
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0.9213709",
                        AnchorMax = "1 1"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "AvatarBG",
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent
                    {
                        Color = HexToRustFormat("#FFFFFFA4")
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.4360861 0.6925457",
                        AnchorMax = "0.5627829 0.9183521"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "Avatar",
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Color = "1 1 1 1",
                        Png = GetImage(infopl.SteamID.ToString(), 0)
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.4372173 0.6945619",
                        AnchorMax = "0.5616518 0.9163328"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "Sprite",
                Parent = "Avatar",
                Components =
                {
                    new CuiImageComponent
                    {
                        Color = HexToRustFormat("#000000AA"),
                        Sprite = radial
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0",
                        AnchorMax = "0.99 0.99"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "SettingsNickIco",
                Parent = "Avatar",
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Color = HexToRustFormat("#C7C6C6FF"),
                        Sprite = Sharp,
                        Png = GetImg("SettingsNick")
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.8310199 0.826149",
                        AnchorMax = "0.9984439 0.9931549"
                    }
                }
            });

            Gui.Add(new CuiButton
            {
                Button =
                {
                    Command = "changename.gui " + SteamID,
                    Color = "0 0 0 0"
                },
                Text =
                {
                    Text = " "
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            }, "SettingsNickIco", "ButtonSettings");

            Gui.Add(new CuiElement
            {
                Name = "Nick",
                Parent = Layer,
                FadeOut = 1f,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = "1 1 1 1",
                        FontSize = 23,
                        Text = infopl.Name,
                        Font = "robotocondensed-regular.ttf"
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.3212669 0.641129",
                        AnchorMax = "0.6804298 0.6875"
                    },
                    new CuiOutlineComponent
                    {
                        Color = HexToRustFormat("#000000AE"),
                        Distance = "0.5 0.5"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "Line1",
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent
                    {
                        Color = HexToRustFormat("#CBCBCBFF")
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.3829193 0.6401247",
                        AnchorMax = "0.6193514 0.6411328"
                    }
                }
            });

            Gui.Add(new CuiElement
            {
                Name = "SteamID",
                Parent = Layer,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = "1 1 1 1",
                        FontSize = 14,
                        Text = infopl.SteamID.ToString(),
                        Font = "robotocondensed-regular.ttf"
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.3212669 0.6088712",
                        AnchorMax = "0.6804298 0.6421358"
                    },
                    new CuiOutlineComponent
                    {
                        Color = HexToRustFormat("#000000AE"),
                        Distance = "0.5 0.5"
                    }
                }
            });

            if (config.ZealNickManager.HistoryNickSave == true)
            {
                Gui.Add(new CuiElement
                {
                    Name = "ZagHistoryNick",
                    Parent = Layer,
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Align = TextAnchor.MiddleCenter,
                            Color = HexToRustFormat("#EAEAEAFF"),
                            FontSize = 25,
                            Text = "ИСТОРИЯ НИКНЕЙМОВ",
                            Font = regular
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = "0 0.5577981",
                            AnchorMax = "1 0.6041691"
                        },
                        new CuiOutlineComponent
                        {
                            Color = HexToRustFormat("#000000AE"),
                            Distance = "0.5 0.5"
                        }
                    }
                });

                HistoryNick(player, SteamID);
            }

            CuiHelper.AddUi(player, Gui);
        }

        void HistoryNick(BasePlayer player, ulong SteamID)
        {
            CuiElementContainer Gui = new CuiElementContainer();

            CuiHelper.DestroyUi(player, "BoxHistoryNick");

            Gui.Add(new CuiElement
            {
                Name = "BoxHistoryNick",
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent
                    {
                        Color = "0 0 0 0"
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0",
                        AnchorMax = "1 0.550926"
                    }
                }
            });

            if (DataBase.NickManager[SteamID].NickHistory.Count == 0)
            {
                Gui.Add(new CuiElement
                {
                    Name = "HistoryEmpty",
                    Parent = "BoxHistoryNick",
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Align = TextAnchor.UpperCenter,
                            Color = HexToRustFormat("#EAEAEAFF"),
                            FadeIn = 1f,
                            Font = regular,
                            FontSize = 35,
                            Text = "История никнеймов пуста"
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "1 1"
                        },
                        new CuiOutlineComponent
                        {
                            Color = HexToRustFormat("#000000AE"),
                            Distance = "0.5 0.5"
                        }
                    }
                });
            }

            int x = 0, y = 0, num = 0;
            foreach (var nick in DataBase.NickManager[SteamID].NickHistory)
            {
                if (x == 7)
                {
                    x = 0;
                    y++;
                }


                string playernick = nick.Key;
                if (playernick.Length >= 13)
                {
                    playernick = playernick.Remove(playernick.Length - 3) + "...";
                }

                Gui.Add(new CuiButton
                    {
                        Button =
                        {
                            Command = " ",
                            Color = HexToRustFormat("#0000005A"),
                            Material = Blur,
                            FadeIn = 0.1f + (num * 0.01f)
                        },
                        Text =
                        {
                            Text = $"{playernick} | {nick.Value}",
                            Align = TextAnchor.MiddleCenter,
                            Color = HexToRustFormat("#ffffff"),
                            Font = regular,
                            FontSize = 15,
                            FadeIn = 0.1f + (num * 0.01f)
                        },
                        RectTransform =
                        {
                            AnchorMin = $"{0.0578426 + (x * 0.126)} {0.9139073 - (y * 0.0866)}",
                            AnchorMax = $"{0.1808237 + (x * 0.126)} {0.9917219 - (y * 0.0866)}"
                        }
                    }, "BoxHistoryNick", "Nick" + num);

                x++;
                num++;
            }

            CuiHelper.AddUi(player, Gui);
        }

        void ChangeName(BasePlayer player, ulong SteamID)
        {
            CuiElementContainer Gui = new CuiElementContainer();
            var infopl = DataBase.NickManager[SteamID];
            player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, true);
            CuiHelper.DestroyUi(player, "Nick");

            string text = " ";

            Gui.Add(new CuiElement
            {
                Name = "ChangeNameInput",
                Parent = Layer,
                Components =
                {
                    new CuiInputFieldComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        CharsLimit = 20,
                        Color = HexToRustFormat("#EAEAEAFF"),
                        Command = $"changename {SteamID} {text}",
                        Text = text,
                        FontSize = 23,
                        Font = regular
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.3212669 0.6453704",
                        AnchorMax = "0.6804298 0.6842592"
                    },
                    new CuiOutlineComponent
                    {
                        Color = HexToRustFormat("#000000AE"),
                        Distance = "0.5 0.5"
                    }
                }
            });

            CuiHelper.AddUi(player, Gui);
        }

        #endregion

        #region [ChatCommand] / [Чат команды]

        [ChatCommand("steamid")]
        private void NickManagerGui(BasePlayer player)
        {
            CheckDataBase(player);
            if (!permission.UserHasPermission(player.UserIDString, config.ZealNickManager.PermissionUse))
            {
                SendReply(player, "У вас нет прав на использование данной команды");
                return;
            }

            PlayerList(player);
        }

        [ChatCommand("replace")]
        private void Replaces(BasePlayer player)
        {
            if (!player.IsAdmin) return;
            CheckDataBase(player);
            foreach (var str in config.ZealNickManager.ReplacesValue)
            {
                player.displayName = player.displayName.Replace(str, "");
            }

            DataBase.NickManager[player.userID].Name = player.displayName;
            Puts(player.displayName);
        }

        [ConsoleCommand("changename.gui")]
        private void ChangeNameText(ConsoleSystem.Arg args)
        {
            CheckDataBase(args.Player());
            string msg = args.Args[0];

            ulong steamid = Convert.ToUInt64(msg);
            var initiator = args.Player();

            ChangeName(initiator, steamid);
        }

        [ConsoleCommand("nickmanager.info")]
        private void NickManagerInfoPlayer(ConsoleSystem.Arg args)
        {
            CheckDataBase(args.Player());
            string msg = args.Args[0];

            ulong findplayer = Convert.ToUInt64(msg);
            var initiator = args.Player();

            PlayerInfo(initiator, findplayer);
        }

        [ConsoleCommand("changename")]
        private void ChangeName(ConsoleSystem.Arg args)
        {
            args.Player().SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false);
            CheckDataBase(args.Player());
            if (!args.Player().IsAdmin) return;

            string nick = null;
            foreach (var arg in args.Args)
            {
                if (arg != null)
                {
                    if (arg != args.Args[0])
                    {
                        nick += arg;
                    }
                }
            }

            string SteamID = args.Args[0];
            ulong FindPlayer = Convert.ToUInt64(SteamID);
            BasePlayer player = BasePlayer.FindByID(FindPlayer);

            CuiHelper.DestroyUi(args.Player(), "ChangeNameInput");
            player.displayName = nick;
            player.IPlayer.Name = nick;
            player.Connection.username = nick;
            player.SendNetworkUpdate();
            player.SendEntityUpdate();

            DataBase.NickManager[FindPlayer].Name = nick;
            if (!DataBase.NickManager[FindPlayer].NickHistory.ContainsKey(nick))
            {
                DataBase.NickManager[FindPlayer].NickHistory.Add(nick, DateTime.Now.ToString("d"));
            }

            DataBase.NickManager[FindPlayer].NickReplace = nick;
            DataBase.NickManager[FindPlayer].ReplaceNick = true;
            SaveData();

            CuiElementContainer Gui = new CuiElementContainer();

            Gui.Add(new CuiElement
            {
                Name = "Nick",
                Parent = Layer,
                FadeOut = 0.5f,
                Components =
                {
                    new CuiTextComponent
                    {
                        Align = TextAnchor.MiddleCenter,
                        Color = "1 1 1 1",
                        FontSize = 23,
                        Text = DataBase.NickManager[FindPlayer].Name,
                        Font = "robotocondensed-regular.ttf",
                        FadeIn = 0.5f
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.3212669 0.641129",
                        AnchorMax = "0.6804298 0.6875"
                    },
                    new CuiOutlineComponent
                    {
                        Color = HexToRustFormat("#000000AE"),
                        Distance = "0.5 0.5"
                    }
                }
            });

            if (config.ZealNickManager.HistoryNickSave == true)
            {
                HistoryNick(args.Player(), FindPlayer);
            }

            CuiHelper.AddUi(args.Player(), Gui);
        }

        [ConsoleCommand("close.nickmanager")]
        private void NickManagerGuiClose(ConsoleSystem.Arg args)
        {
            CheckDataBase(args.Player());
            args.Player().SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false);
            if (args.Player() != null)
            {
                var player = args.Player();
                CuiHelper.DestroyUi(player, Layer);
            }
        }

        #endregion

        #region [Hooks] / [Крюки]

        void CheckDataBase(BasePlayer player)
        {
            if (!DataBase.NickManager.ContainsKey(player.userID)) AddPlayer(player);
        }

        void AddPlayer(BasePlayer player)
        {
            var data = new NickBD
            {
                Name = player.displayName,
                SteamID = player.userID,
                NickReplace = "",
                ReplaceNick = false
            };

            DataBase.NickManager.Add(player.userID, data);
            SaveData();
        }

        void OnPlayerInit(BasePlayer player)
        {
            CheckDataBase(player);
            player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, false);
            if (DataBase.NickManager[player.userID].ReplaceNick == true)
            {
                if (player.displayName != DataBase.NickManager[player.userID].NickReplace)
                {
                    player.displayName = DataBase.NickManager[player.userID].NickReplace;
                    player.IPlayer.Name = DataBase.NickManager[player.userID].NickReplace;
                    player.Connection.username = DataBase.NickManager[player.userID].NickReplace;
                }
                else
                {
                    DataBase.NickManager[player.userID].ReplaceNick = false;
                }
            }

            if (config.ZealNickManager.ReplaceNick == true)
            {
                string oldnick = player.displayName;
                string newnick = "";

                foreach (var str in config.ZealNickManager.ReplacesValue)
                {
                    if (player.displayName.Contains(str))
                    {
                        player.displayName = player.displayName.Replace(str, "");
                        player.IPlayer.Name = player.displayName;
                        player.Connection.username = player.displayName;
                        newnick = player.displayName;
                        DataBase.NickManager[player.userID].Name = newnick;
                        PrintWarning($"Ник : {oldnick} заменен на : {newnick}");
                        if (config.ZealNickManager.AlertReplaceNick == true)
                        {
                            SendReply(player,
                                $"Ваш никнейм заменён на : {newnick}, так как в нем содержится запрещённые символы/фразы");
                        }
                    }
                }
            }
            else
            {
                foreach (var str in config.ZealNickManager.ReplacesValue)
                {
                    if (player.displayName.Contains(str))
                    {
                        PrintWarning(
                            $"Ник : {player.displayName} запрещён, но отключена функция замены запрещённых символов/фраз");
                    }
                }
            }

            if (config.ZealNickManager.HistoryNickSave == true)
            {
                if (!DataBase.NickManager[player.userID].NickHistory.ContainsKey(player.displayName))
                {
                    DataBase.NickManager[player.userID].NickHistory.Add(player.displayName, DateTime.Now.ToString("d"));
                    PrintWarning(
                        $"Игроку : {player.userID} в историю никнеймов добавлен ник : {player.displayName} | Дата добавления : {DateTime.Now.ToString("d")}");
                }
            }
        }

        void OnServerInitialized()
        {
            if (!ImageLibrary)
            {
                PrintError($"На сервере не установлен плагин [ImageLibrary]");
                Interface.Oxide.UnloadPlugin(Title);
                return;
            }

            Puts("Автор плагина : Kira | Контакты : Discord - -Kira#1920");
            Puts($"Плагин : {Title}");
            Puts("Приятного пользования ^-^");

            LoadData();
            ImageLibrary.Call("AddImage", $"https://i.imgur.com/3c2jZzR.png", "SettingsNick");
            permission.RegisterPermission(config.ZealNickManager.PermissionUse, this);
            foreach (var player in BasePlayer.activePlayerList)
            {
                CheckDataBase(player);
                if (config.ZealNickManager.ReplaceNick == true)
                {
                    string oldnick = player.displayName;
                    string newnick = "";

                    foreach (var str in config.ZealNickManager.ReplacesValue)
                    {
                        if (player.displayName.Contains(str))
                        {
                            player.displayName = player.displayName.Replace(str, "");
                            newnick = player.displayName;
                            DataBase.NickManager[player.userID].Name = newnick;
                            PrintWarning($"Ник : {oldnick} заменен на : {newnick}");
                            if (config.ZealNickManager.AlertReplaceNick == true)
                            {
                                SendReply(player,
                                    $"Ваш никнейм заменён на : {newnick}, так как в нем содержится запрещённые символы/фразы");
                            }
                        }
                    }
                }
                else
                {
                    foreach (var str in config.ZealNickManager.ReplacesValue)
                    {
                        if (player.displayName.Contains(str))
                        {
                            PrintWarning(
                                $"Ник : {player.displayName} запрещён, но отключена функция замены запрещённых символов/фраз");
                        }
                    } 
                }

                if (config.ZealNickManager.HistoryNickSave == true)
                {
                    if (!DataBase.NickManager[player.userID].NickHistory.ContainsKey(player.displayName))
                    {
                        DataBase.NickManager[player.userID].NickHistory
                            .Add(player.displayName, DateTime.Now.ToString("d"));
                        PrintWarning(
                            $"Игроку : {player.userID} в историю никнеймов добавлен ник : {player.displayName} | Дата добавления : {DateTime.Now.ToString("d")}");
                    }
                }
            }
        }

        private void Unload()
        {
            SaveData();
        }

        #endregion

        #region [DataBase] / [Хранение данных]

        class StoredData
        {
            public Dictionary<ulong, NickBD> NickManager = new Dictionary<ulong, NickBD>();
        }


        class NickBD
        {
            public string Name;
            public ulong SteamID;
            public string NickReplace;
            public bool ReplaceNick;
            public Dictionary<string, string> NickHistory = new Dictionary<string, string>();

            public NickBD()
            {
            }
        }


        private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(Name, DataBase);

        private void LoadData()
        {
            try
            {
                DataBase = Interface.GetMod().DataFileSystem.ReadObject<StoredData>(Name);
            }
            catch (Exception e)
            {
                DataBase = new StoredData();
            }
        }

        #endregion

        #region [Helpers] / [Вспомогательный код]

        private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');
            if (str.Length == 6)
                str += "FF";
            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }

        #endregion
    }
}

// --- End of file: NickManager.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AirMarker.cs ---
// --- Original Local Path: AirMarker.cs ---

﻿using System;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("AirMarker", "Fierrov", "1.0.0")]
    internal class AirMarker : RustPlugin
    {
       
        #region OxideHooks

        private void OnServerInitialized()
        {
            PrintWarning(
                $"Was changed Fierrov");
            LoadConfig();
        }

        private void Unload()
        {
            var marker = GameObject.FindObjectsOfType<Marker>();
            foreach (var check in marker)
            {
                check?.Kill();
            }
        }
        void OnEntitySpawned(SupplyDrop air)
        {
            if (air == null) return;
            air.gameObject.AddComponent<Marker>();
        }

        void OnLootEntity(BasePlayer player, SupplyDrop air)
        {
            if (air == null) return;
            var comp = air.GetComponent<Marker>();
            if (comp == null) return;
            comp.Kill();
        }

        #endregion

        class Marker : MonoBehaviour
        {
            private BaseEntity entity;
            MapMarkerGenericRadius mapmarker;

            private void Awake()
            {
                entity = GetComponent<BaseEntity>();
                InstallMarker();
            }

            private void InstallMarker()
            {
                mapmarker = GameManager.server.CreateEntity("assets/prefabs/tools/map/genericradiusmarker.prefab") as MapMarkerGenericRadius;
                mapmarker.enableSaving = false;
                mapmarker.SetParent(entity);
                mapmarker.Spawn();
                mapmarker.radius = 0.1f;
                mapmarker.alpha = 1f;
                UnityEngine.Color color = new UnityEngine.Color(0.23f, 0.48f, 0.18f, 0.70f);
                UnityEngine.Color color2 = new UnityEngine.Color(0, 0, 0, 0);
                mapmarker.color1 = color;
                mapmarker.color2 = color2;
                mapmarker.SendUpdate();
            }


            public void Kill()
            {
                mapmarker?.Kill();
                Destroy(this);
            }
        }
    }
}

// --- End of file: AirMarker.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Clans-3.0.40.cs ---
// --- Original Local Path: Clans-3.0.40.cs ---

﻿using CompanionServer;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using ProtoBuf;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;

using VersionNumber = Oxide.Core.VersionNumber;

namespace Oxide.Plugins
{
    [Info("Clans", "k1lly0u", "3.0.40")]
    class Clans : RustPlugin
    {
        #region Fields
        [PluginReference] private Plugin DiscordClans;

        internal StoredData storedData;

        private bool wipeData;
        private bool isInitialized = false;
        private Coroutine initClansRoutine;

        private Regex tagFilter;
        private Regex hexFilter;

        private int[] customTagMinValue;
        private int[] customTagMaxValue;

        private HashSet<ulong> friendlyFireDisabled = new HashSet<ulong>();

        public static Clans Instance { get; private set; }

        private static DateTime Epoch = new DateTime(1970, 1, 1);
        private static double MaxUnixSeconds = (DateTime.MaxValue - Epoch).TotalSeconds;

        private const string COLORED_LABEL = "<color={0}>{1}</color>";

        private enum MessageType { Create, Invite, InviteReject, InviteWithdrawn, Join, Leave, Kick, Promote, Demote, Disband, AllianceInvite, AllianceInviteReject, AllianceInviteWithdrawn, AllianceAccept, AllianceWithdrawn, TeamChat, ClanChat, AllyChat }
        #endregion

        #region Oxide Hooks
        private void Loaded()
        {
            Instance = this;

            permission.RegisterPermission(configData.Permissions.PermissionCreate, this);
            permission.RegisterPermission(configData.Permissions.PermissionJoin, this);
            permission.RegisterPermission(configData.Permissions.PermissionLeave, this);
            permission.RegisterPermission(configData.Permissions.PermissionDisband, this);
            permission.RegisterPermission(configData.Permissions.PermissionKick, this);
            permission.RegisterPermission(configData.Permissions.ClanInfoPermission, this);

            lang.RegisterMessages(Messages, this);

            cmd.AddChatCommand(configData.Commands.FFCommand, this, cmdClanFF);
            cmd.AddChatCommand(configData.Commands.AFFCommand, this, cmdAllyFF);
            cmd.AddChatCommand(configData.Commands.ClanCommand, this, cmdChatClan);
            cmd.AddChatCommand(configData.Commands.AllyChatCommand, this, cmdAllianceChat);
            cmd.AddChatCommand(configData.Commands.ClanChatCommand, this, cmdClanChat);
            cmd.AddChatCommand(configData.Commands.ClanInfoCommand, this, cmdChatClanInfo);
            cmd.AddChatCommand(configData.Commands.ClanHelpCommand, this, cmdChatClanHelp);
            cmd.AddChatCommand(configData.Commands.ClanAllyCommand, this, cmdChatClanAlly);

            _tags.Add(new KeyValuePair<string, string>(configData.Tags.TagOpen, configData.Tags.TagClose));

            tagFilter = new Regex($"[^a-zA-Z0-9{configData.Tags.AllowedCharacters}]");
            hexFilter = new Regex("^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");

            SetMinMaxColorRange();

            if (!configData.Tags.EnabledBC)
                Unsubscribe(nameof(OnPluginLoaded));

            if (!configData.Clans.MemberFF && !configData.Clans.Alliance.AllyFF)
                Unsubscribe(nameof(OnEntityTakeDamage));

            if (configData.Clans.Teams.Enabled)
                RelationshipManager.maxTeamSize = configData.Clans.MemberLimit;

            LoadData();
        }

        private void OnServerInitialized()
        {
            initClansRoutine = ServerMgr.Instance.StartCoroutine(InitializeClans());
        }

        private void OnNewSave(string str) => wipeData = configData.Purge.WipeOnNewSave;

        private void OnServerSave() => SaveData();

        private void OnPluginLoaded(Plugin plugin)
        {
            if (configData.Tags.EnabledBC && plugin?.Title == "Better Chat")
                Interface.CallHook("API_RegisterThirdPartyTitle", this, new Func<Oxide.Core.Libraries.Covalence.IPlayer, string>(BetterChat_FormattedClanTag));
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player.currentTeam != 0UL)
            {
                if (configData.Clans.Teams.Enabled)
                {
                    player.ClearTeam();
                    RelationshipManager.ServerInstance.playerToTeam.Remove(player.userID);
                }
                else
                {
                    RelationshipManager.PlayerTeam playerTeam = RelationshipManager.ServerInstance.FindTeam(player.currentTeam);
                    if (playerTeam == null || !playerTeam.members.Contains(player.userID))
                    {
                        player.ClearTeam();
                        RelationshipManager.ServerInstance.playerToTeam.Remove(player.userID);
                    }
                }
            }

            Clan clan = storedData?.FindClanByID(player.userID);
            if (clan != null)
            {
                clan.OnPlayerConnected(player);
            }
            else
            {
                List<string> invites;
                if (storedData.playerInvites.TryGetValue(player.userID, out invites))
                {
                    player.ChatMessage(string.Format(msg("Notification.PendingInvites", player.UserIDString), invites.ToSentence(), configData.Commands.ClanCommand));
                }
            }
        }

        private void OnPlayerDisconnected(BasePlayer player) => storedData?.FindClanByID(player.userID)?.OnPlayerDisconnected(player);

        private object OnPlayerChat(BasePlayer player, string message, ConVar.Chat.ChatChannel channel)
        {
            if (channel != ConVar.Chat.ChatChannel.Team)
                return null;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
                return null;

            if (configData.Options.DenyOnMuted)
            {
                object success = Interface.CallHook("API_IsMuted", player.IPlayer);
                if ((success is bool && (bool)success) || player.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute))
                {
                    player.ChatMessage(msg("Chat.IsMuted", player.UserIDString));
                    return false;
                }
            }

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} : {message}", (int)MessageType.TeamChat);

            Interface.CallHook("OnClanChat", player, message, clan.Tag);
            return null;
        }

        private object OnTeamCreate(BasePlayer player)
        {
            if (!configData.Clans.Teams.Enabled)
                return null;

            player.ChatMessage(msg("Notification.Create.NoNativeCreate", player.UserIDString));
            return true;
        }

        private object OnTeamKick(RelationshipManager.PlayerTeam playerTeam, BasePlayer player, ulong targetId)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            if (!configData.Clans.Teams.AllowKick)
                return false;

            KickPlayer(player, targetId);
            return true;
        }

        private object OnTeamInvite(BasePlayer player, BasePlayer other)
        {
            if (!configData.Clans.Teams.Enabled)
                return null;

            if (!configData.Clans.Teams.AllowInvite)
                return false;

            if (other.IsNpc || other != null && !other.userID.IsSteamId())
                return false;

            InvitePlayer(player, other);
            return true;
        }

        private object OnTeamAcceptInvite(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            JoinClan(player, playerTeam.teamName);
            return true;
        }

        private object OnTeamRejectInvite(BasePlayer player, RelationshipManager.PlayerTeam playerTeam)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            RejectInvite(player, playerTeam.teamName);
            return true;
        }

        private object OnTeamLeave(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            if (!configData.Clans.Teams.AllowLeave)
                return false;

            LeaveClan(player);
            return true;
        }

        private object OnTeamPromote(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            if (!configData.Clans.Teams.AllowPromote)
                return false;

            PromotePlayer(BasePlayer.FindByID(playerTeam.teamLeader), player.userID);
            return true;
        }

        private object OnTeamDisband(RelationshipManager.PlayerTeam playerTeam)
        {
            if (!configData.Clans.Teams.Enabled || string.IsNullOrEmpty(playerTeam.teamName))
                return null;

            Clan clan = storedData.FindClan(playerTeam.teamName);
            if (clan != null)
                clan.DisbandClan();

            return true;
        }

        private object OnEntityTakeDamage(BasePlayer player, HitInfo info)
        {
            if (!player || !info?.InitiatorPlayer)
                return null;

            if (player == info.InitiatorPlayer)
                return null;

            Clan victimClan = storedData.FindClanByID(player.userID);
            if (victimClan == null)
                return null;

            Clan attackerClan = storedData.FindClanByID(info.InitiatorPlayer.userID);
            if (attackerClan == null)
                return null;

            Clan.Member member = storedData.FindMemberByID(info.InitiatorPlayer.userID);
            if (member == null)
                return null;

            if (friendlyFireDisabled.Contains(player.userID))
                return null;

            if (victimClan.Tag.Equals(attackerClan.Tag) && configData.Clans.MemberFF && member.MemberFFEnabled)
            {
                member.OnClanMemberHit(string.Format(COLORED_LABEL, victimClan.GetRoleColor(player.userID), player.displayName));
                return true;
            }

            if (victimClan.IsAlliedClan(attackerClan.Tag) && configData.Clans.Alliance.Enabled && configData.Clans.Alliance.AllyFF && member.AllyFFEnabled)
            {
                member.OnAllyMemberHit(string.Format(COLORED_LABEL, victimClan.GetRoleColor(player.userID), player.displayName));
                return true;
            }

            return null;
        }

        private void Unload()
        {
            if (isInitialized)
            {
                SaveData();

                foreach (Clan clan in storedData.clans.Values)
                    clan.OnUnload();
            }
            else
            {
                if (initClansRoutine != null)
                    ServerMgr.Instance.StopCoroutine(initClansRoutine);
            }

            configData = null;
            Instance = null;
        }
        #endregion

        #region Functions
        private IEnumerator InitializeClans()
        {
            Puts("Initializing Clans...");

            if (configData.Clans.Teams.Enabled)
            {
                RelationshipManager.ServerInstance.playerToTeam.Clear();

                foreach (KeyValuePair<ulong, RelationshipManager.PlayerTeam> kvp in RelationshipManager.ServerInstance.teams)
                {
                    RelationshipManager.PlayerTeam playerTeam = kvp.Value;
                    ClearTeam(ref playerTeam);
                }

                RelationshipManager.ServerInstance.teams.Clear();
                RelationshipManager.ServerInstance.lastTeamIndex = 1;
            }

            if (wipeData)
            {
                storedData.clans.Clear();
                storedData.playerInvites.Clear();
                SaveData();
            }
            else
            {
                List<string> purgedClans = Facepunch.Pool.Get<List<string>>();

                foreach (KeyValuePair<string, Clan> kvp in storedData.clans)
                {
                    Clan clan = kvp.Value;

                    if (clan.ClanMembers.Count == 0 || (configData.Purge.Enabled && UnixTimeStampUTC() - clan.LastOnlineTime > (configData.Purge.OlderThanDays * 86400)))
                    {
                        purgedClans.Add(kvp.Key);
                        continue;
                    }

                    clan.Description = StripHTMLTags(clan.Description);

                    if (configData.Clans.Alliance.Enabled)
                    {
                        for (int i = clan.AllianceInvites.Count - 1; i >= 0; i--)
                        {
                            KeyValuePair<string, double> allianceInvite = clan.AllianceInvites.ElementAt(i);

                            if (!storedData.clans.ContainsKey(allianceInvite.Key) || (UnixTimeStampUTC() - allianceInvite.Value > configData.Clans.Invites.AllianceInviteExpireTime))
                                clan.AllianceInvites.Remove(allianceInvite.Key);
                        }

                        for (int i = clan.Alliances.Count - 1; i >= 0; i--)
                        {
                            string allyTag = clan.Alliances.ElementAt(i);

                            if (!storedData.clans.ContainsKey(allyTag))
                                clan.Alliances.Remove(allyTag);
                        }
                    }

                    for (int i = clan.MemberInvites.Count - 1; i >= 0; i--)
                    {
                        KeyValuePair<ulong, Clan.MemberInvite> memberInvite = clan.MemberInvites.ElementAt(i);

                        if (UnixTimeStampUTC() - memberInvite.Value.ExpiryTime > configData.Clans.Invites.MemberInviteExpireTime)
                            clan.MemberInvites.Remove(memberInvite.Key);
                    }

                    foreach (KeyValuePair<ulong, Clan.Member> member in clan.ClanMembers)
                        storedData.RegisterPlayer(member.Key, clan.Tag);

                    if (configData.Permissions.PermissionGroups)
                        permission.CreateGroup(configData.Permissions.PermissionGroupPrefix + clan.Tag, "Clan " + clan.Tag, 0);

                    yield return null;
                }

                if (purgedClans.Count > 0)
                {
                    Puts($"Purging {purgedClans.Count} expired or invalid clans");

                    StringBuilder str = new StringBuilder();

                    for (int i = 0; i < purgedClans.Count; i++)
                    {
                        string tag = purgedClans[i];
                        Clan clan = storedData.clans[tag];
                        if (clan == null)
                            continue;

                        permission.RemoveGroup(configData.Permissions.PermissionGroupPrefix + clan.Tag);

                        str.Append($"{(i > 0 ? "\n" : "")}Purged - [{tag}] | {clan.Description} | Owner: {clan.OwnerID} | Last Online: {UnixTimeStampToDateTime(clan.LastOnlineTime)}");

                        storedData.clans.Remove(tag);
                    }

                    if (configData.Purge.ListPurgedClans)
                    {
                        Puts(str.ToString());

                        if (configData.Options.LogChanges)
                            LogToFile(Title, str.ToString(), this);
                    }
                }

                Puts($"Loaded {storedData.clans.Count} clans!");

                Facepunch.Pool.FreeUnmanaged(ref purgedClans);
            }

            if (configData.Tags.EnabledBC)
                Interface.CallHook("API_RegisterThirdPartyTitle", this, new Func<Oxide.Core.Libraries.Covalence.IPlayer, string>(BetterChat_FormattedClanTag));

            isInitialized = true;
            initClansRoutine = null;

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
        }
        #endregion

        #region Clan Tag Colors
        private void SetMinMaxColorRange()
        {
            customTagMinValue = new int[3];
            customTagMaxValue = new int[3];

            if (configData.Tags.CustomTagColorMin.StartsWith("#"))
                configData.Tags.CustomTagColorMin = configData.Tags.CustomTagColorMin.Substring(1);

            if (configData.Tags.CustomTagColorMax.StartsWith("#"))
                configData.Tags.CustomTagColorMax = configData.Tags.CustomTagColorMax.Substring(1);

            customTagMinValue[0] = int.Parse(configData.Tags.CustomTagColorMin.Substring(0, 2), NumberStyles.AllowHexSpecifier);
            customTagMinValue[1] = int.Parse(configData.Tags.CustomTagColorMin.Substring(2, 2), NumberStyles.AllowHexSpecifier);
            customTagMinValue[2] = int.Parse(configData.Tags.CustomTagColorMin.Substring(3, 2), NumberStyles.AllowHexSpecifier);

            customTagMaxValue[0] = int.Parse(configData.Tags.CustomTagColorMax.Substring(0, 2), NumberStyles.AllowHexSpecifier);
            customTagMaxValue[1] = int.Parse(configData.Tags.CustomTagColorMax.Substring(2, 2), NumberStyles.AllowHexSpecifier);
            customTagMaxValue[2] = int.Parse(configData.Tags.CustomTagColorMax.Substring(3, 2), NumberStyles.AllowHexSpecifier);
        }

        private bool TagColorIsBlocked(string color)
        {
            if (color.StartsWith("#"))
                color = color.Substring(1);

            if (configData.Tags.BlockedTagColors.Contains(color, StringComparer.OrdinalIgnoreCase))
                return true;

            return false;
        }

        private bool TagColorWithinRange(string color)
        {
            if (color.StartsWith("#"))
                color = color.Substring(1);

            int red = int.Parse(color.Substring(0, 2), NumberStyles.AllowHexSpecifier);
            int green = int.Parse(color.Substring(2, 2), NumberStyles.AllowHexSpecifier);
            int blue = int.Parse(color.Substring(4, 2), NumberStyles.AllowHexSpecifier);

            return red >= customTagMinValue[0] && red <= customTagMaxValue[0] &&
                   green >= customTagMinValue[1] && green <= customTagMaxValue[1] &&
                   blue >= customTagMinValue[2] && blue <= customTagMaxValue[2];
        }


        #endregion

        #region Helpers
        private string BetterChat_FormattedClanTag(Oxide.Core.Libraries.Covalence.IPlayer player)
        {
            Clan clan = storedData.FindClanByID(player.Id);
            if (clan == null)
                return string.Empty;

            string tagColor = string.IsNullOrEmpty(clan.TagColor) || !configData.Tags.CustomColors ? configData.Tags.TagColor : clan.TagColor;

            if (configData.Tags.EnabledGroupColors && (string.IsNullOrEmpty(clan.TagColor) || !configData.Tags.CustomColors))
            {
                foreach (KeyValuePair<string, string> kvp in configData.Tags.GroupTagColors)
                {
                    if (player.BelongsToGroup(kvp.Key))
                    {
                        tagColor = kvp.Value;
                        break;
                    }
                }
            }

            return $"[#{tagColor.Replace("#", "")}][+{configData.Tags.TagSize}]{configData.Tags.TagOpen}{clan.Tag}{configData.Tags.TagClose}[/+][/#]";
        }

        private static int UnixTimeStampUTC() => (int)DateTime.UtcNow.Subtract(Epoch).TotalSeconds;

        private static DateTime UnixTimeStampToDateTime(double unixTimeStamp)
        {
            return unixTimeStamp > MaxUnixSeconds
                ? Epoch.AddMilliseconds(unixTimeStamp)
                : Epoch.AddSeconds(unixTimeStamp);
        }

        private bool ContainsBlockedWord(string tag)
        {
            for (int i = 0; i < configData.Tags.BlockedWords.Length; i++)
            {
                if (TranslateLeet(tag).ToLower().Contains(configData.Tags.BlockedWords[i].ToLower()))
                    return true;
            }
            return false;
        }

        private string TranslateLeet(string original)
        {
            string translated = original;

            foreach (KeyValuePair<string, string> leet in leetTable)
                translated = translated.Replace(leet.Key, leet.Value);
            return translated;
        }

        private bool ClanTagExists(string tag)
        {
            ICollection<string> collection = storedData.clans.Keys;
            for (int i = 0; i < collection.Count; i++)
            {
                if (collection.ElementAt(i).Equals(tag, StringComparison.OrdinalIgnoreCase))
                    return true;
            }

            return false;
        }

        private static string FormatTime(double time)
        {
            TimeSpan dateDifference = TimeSpan.FromSeconds((float)time);
            int days = dateDifference.Days;
            int hours = dateDifference.Hours + (days * 24);

            int mins = dateDifference.Minutes;
            int secs = dateDifference.Seconds;

            if (hours > 0)
                return $"{hours:00}h:{mins:00}m:{secs:00}s";
            if (mins > 0)
                return $"{mins:00}m:{secs:00}s";
            return $"{secs:00}s";
        }

        private BasePlayer FindPlayer(string partialNameOrID) => BasePlayer.allPlayerList.FirstOrDefault<BasePlayer>((BasePlayer x) => x.displayName.Equals(partialNameOrID, StringComparison.OrdinalIgnoreCase)) ??
                                                                 BasePlayer.allPlayerList.FirstOrDefault<BasePlayer>((BasePlayer x) => x.displayName.Contains(partialNameOrID, CompareOptions.OrdinalIgnoreCase)) ??
                                                                 BasePlayer.allPlayerList.FirstOrDefault<BasePlayer>((BasePlayer x) => x.UserIDString == partialNameOrID);

        private static void RemoveFromTeam(RelationshipManager.PlayerTeam playerTeam, BasePlayer player)
        {
            playerTeam.members.Remove(player.userID);
            RelationshipManager.ServerInstance.playerToTeam.Remove(player.userID);

            player.ClearTeam();
        }

        private static void RemoveFromTeam(RelationshipManager.PlayerTeam playerTeam, ulong playerId)
        {
            playerTeam.members.Remove(playerId);
            RelationshipManager.ServerInstance.playerToTeam.Remove(playerId);

            RelationshipManager.FindByID(playerId)?.ClearTeam();
        }

        private static void ClearTeam(ref RelationshipManager.PlayerTeam playerTeam)
        {
            playerTeam.invites.Clear();
            playerTeam.members.Clear();
            playerTeam.onlineMemberConnections.Clear();
            playerTeam.teamID = 0UL;
            playerTeam.teamLeader = 0UL;
            playerTeam.teamName = string.Empty;

            Facepunch.Pool.Free(ref playerTeam);
        }

        private static string RemoveTags(string str)
        {
            foreach (KeyValuePair<string, string> kvp in _tags)
            {
                if (str.StartsWith(kvp.Key) && str.Contains(kvp.Value) && str.Length > str.IndexOf(kvp.Value))
                {
                    str = str.Substring(str.IndexOf(kvp.Value)).Trim();
                }
            }
            return str;
        }

        private static List<KeyValuePair<string, string>> _tags = new List<KeyValuePair<string, string>>
        {
            new KeyValuePair<string, string>("[", "]"),
            new KeyValuePair<string, string>("{", "}"),
            new KeyValuePair<string, string>("(", ")"),
            new KeyValuePair<string, string>("<", ">"),
        };

        public static string StripHTMLTags(string source)
        {
            char[] array = new char[source.Length];
            int arrayIndex = 0;
            bool inside = false;

            for (int i = 0; i < source.Length; i++)
            {
                char let = source[i];
                if (let == '<')
                {
                    inside = true;
                    continue;
                }
                if (let == '>')
                {
                    inside = false;
                    continue;
                }
                if (!inside)
                {
                    array[arrayIndex] = let;
                    arrayIndex++;
                }
            }
            return new string(array, 0, arrayIndex);
        }
        #endregion

        #region Clan Management        
        internal void CreateClan(BasePlayer player, string tag, string description)
        {
            if (!player)
                return;

            if (storedData.FindClanByID(player.userID) != null)
            {
                player.ChatMessage(msg("Notification.Create.InExistingClan", player.UserIDString));
                return;
            }

            if (configData.Permissions.UsePermissionCreate && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionCreate))
            {
                player.ChatMessage(msg("Notification.Create.NoPermission", player.UserIDString));
                return;
            }

            List<ulong> list;
            if (configData.Tags.ReservedClanTags.TryGetValue(tag, out list))
            {
                if (!list.Contains(player.userID))
                {
                    player.ChatMessage(string.Format(msg("Notification.Create.TagReserved1", player.UserIDString), tag));
                    return;
                }
            }

            if (tag.Length < configData.Tags.TagLength.Minimum || tag.Length > configData.Tags.TagLength.Maximum)
            {
                player.ChatMessage(string.Format(msg("Notification.Create.InvalidTagLength", player.UserIDString), configData.Tags.TagLength.Minimum, configData.Tags.TagLength.Maximum));
                return;
            }

            if (tagFilter.IsMatch(tag) || ContainsBlockedWord(tag))
            {
                player.ChatMessage(msg("Notification.Create.InvalidCharacters", player.UserIDString));
                return;
            }

            if (ClanTagExists(tag))
            {
                player.ChatMessage(msg("Notification.Create.ClanExists", player.UserIDString));
                return;
            }

            if (configData.Clans.Teams.Enabled && player.currentTeam != 0UL)
            {
                RelationshipManager.PlayerTeam playerTeam = RelationshipManager.ServerInstance.FindTeam(player.currentTeam);
                if (playerTeam != null)
                    RemoveFromTeam(playerTeam, player);

                RelationshipManager.ServerInstance.playerToTeam.Remove(player.userID);
                player.ClearTeam();
            }

            storedData.clans[tag] = new Clan(player, tag, description);
            storedData.RegisterPlayer(player.userID, tag);

            player.ChatMessage(string.Format(msg("Notification.Create.Success", player.UserIDString), tag));

            Interface.CallHook("OnClanCreate", tag);

            if (configData.Options.LogChanges)
                LogToFile(Title, $"{player.displayName} created the clan [{tag}]", this);

            DiscordClans?.CallHook("LogMessage", $"{player.displayName} has created the clan {tag}", (int)MessageType.Create);
        }

        internal bool InvitePlayer(BasePlayer inviter, ulong targetId)
        {
            BasePlayer invitee = (covalence.Players.FindPlayerById(targetId.ToString())?.Object as BasePlayer);
            if (!invitee)
            {
                inviter.ChatMessage(string.Format(msg("Notification.Generic.UnableToFindPlayer", inviter.UserIDString), targetId));
                return false;
            }

            return InvitePlayer(inviter, invitee);
        }

        internal bool InvitePlayer(BasePlayer inviter, BasePlayer invitee)
        {
            if (!inviter || !invitee)
                return false;

            if (invitee.IsNpc || !invitee.userID.IsSteamId())
                return false;

            Clan clan = storedData.FindClanByID(inviter.userID);
            if (clan == null)
            {
                inviter.ChatMessage(msg("Notification.Generic.NoClan", inviter.UserIDString));
                return false;
            }

            Clan other = storedData.FindClanByID(invitee.userID);
            if (other != null)
            {
                inviter.ChatMessage(string.Format(msg("Notification.Invite.InClan", inviter.UserIDString), invitee.displayName));
                return false;
            }

            if (configData.Permissions.UsePermissionJoin && !permission.UserHasPermission(invitee.UserIDString, configData.Permissions.PermissionJoin))
            {
                inviter.ChatMessage(msg("Notification.Invite.NoPermission", inviter.UserIDString));
                return false;
            }

            return clan.InvitePlayer(inviter, invitee);
        }

        internal bool WithdrawInvite(BasePlayer player, string partialNameOrID)
        {
            if (!player)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            if (!clan.IsOwner(player.userID) && !clan.IsModerator(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.WithdrawInvite.NoPermissions", player.UserIDString));
                return false;
            }

            ulong targetId;
            if (!ulong.TryParse(partialNameOrID, out targetId))
                targetId = 0UL;

            foreach (KeyValuePair<ulong, Clan.MemberInvite> invite in clan.MemberInvites)
            {
                if ((targetId != 0UL && targetId.Equals(invite.Key)) || invite.Value.DisplayName.Contains(partialNameOrID))
                {
                    storedData.RevokePlayerInvite(targetId, clan.Tag);

                    clan.MemberInvites.Remove(invite.Key);
                    clan.LocalizedBroadcast("Notification.WithdrawInvite.Success", player.displayName, invite.Value.DisplayName);

                    DiscordClans?.CallHook("LogMessage", $"{player.displayName} has withdrawn a clan invite for {invite.Value.DisplayName}", (int)MessageType.InviteWithdrawn);
                    return true;
                }
            }

            if (configData.Clans.Teams.Enabled)
                player.ClearPendingInvite();

            player.ChatMessage(string.Format(msg("Notification.WithdrawInvite.UnableToFind", player.UserIDString), partialNameOrID));
            return false;
        }

        internal bool RejectInvite(BasePlayer player, string tag)
        {
            if (!player)
                return false;

            Clan clan = storedData.FindClan(tag);
            if (clan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = clan.Tag;

            if (!clan.MemberInvites.ContainsKey(player.userID))
            {
                player.ChatMessage(string.Format(msg("Notification.RejectInvite.InvalidInvite", player.UserIDString), tag));
                return false;
            }

            clan.MemberInvites.Remove(player.userID);

            storedData.OnInviteRejected(player.userID, tag);

            if (configData.Clans.Teams.Enabled)
                clan.PlayerTeam.RejectInvite(player);

            clan.LocalizedBroadcast("Notification.RejectInvite.Message", player.displayName);
            player.ChatMessage(string.Format(msg("Notification.RejectInvite.PlayerMessage", player.UserIDString), tag));

            if (configData.Options.LogChanges)
                Instance.LogToFile(Instance.Title, $"{player.displayName} rejected their invite to [{tag}]", Instance);

            return true;
        }

        internal bool JoinClan(BasePlayer player, string tag)
        {
            if (!player || string.IsNullOrEmpty(tag))
                return false;

            if (configData.Permissions.UsePermissionJoin && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionJoin))
            {
                player.ChatMessage(msg("Notification.Join.NoPermission", player.UserIDString));
                return false;
            }

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan != null)
            {
                player.ChatMessage(msg("Notification.Join.InExistingClan", player.UserIDString));
                return false;
            }

            clan = storedData.FindClan(tag);
            if (clan == null)
                return false;

            return clan.JoinClan(player);
        }

        internal bool LeaveClan(BasePlayer player)
        {
            if (!player)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            if (configData.Permissions.UsePermissionLeave && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionLeave))
            {
                player.ChatMessage(msg("Notification.Leave.NoPermission", player.UserIDString));
                return false;
            }

            return clan.LeaveClan(player);
        }

        internal bool KickPlayer(BasePlayer player, ulong playerId)
        {
            if (!player)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            if (configData.Permissions.UsePermissionKick && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionKick))
            {
                player.ChatMessage(msg("Notification.Kick.NoPermission", player.UserIDString));
                return false;
            }

            return clan.KickMember(player, playerId);
        }

        internal bool PromotePlayer(BasePlayer promoter, ulong targetId)
        {
            if (!promoter)
                return false;

            Clan clan = storedData.FindClanByID(promoter.userID);
            if (clan == null)
            {
                promoter.ChatMessage(msg("Notification.Generic.NoClan", promoter.UserIDString));
                return false;
            }

            Clan other = storedData.FindClanByID(targetId);
            if (other == null || !clan.Tag.Equals(other.Tag))
            {
                string displayName = covalence.Players.FindPlayer(targetId.ToString())?.Name ?? targetId.ToString();

                promoter.ChatMessage(string.Format(msg("Notification.Promotion.TargetNoClan", promoter.UserIDString), displayName));
                return false;
            }

            return clan.PromotePlayer(promoter, targetId);
        }

        internal bool DemotePlayer(BasePlayer demoter, ulong targetId)
        {
            if (!demoter)
                return false;

            Clan clan = storedData.FindClanByID(demoter.userID);
            if (clan == null)
            {
                demoter.ChatMessage(msg("Notification.Generic.NoClan", demoter.UserIDString));
                return false;
            }

            Clan other = storedData.FindClanByID(targetId);
            if (other == null || !clan.Tag.Equals(other.Tag))
            {
                string displayName = covalence.Players.FindPlayer(targetId.ToString())?.Name ?? targetId.ToString();

                demoter.ChatMessage(string.Format(msg("Notification.Promotion.TargetNoClan", demoter.UserIDString), displayName));
                return false;
            }

            return clan.DemotePlayer(demoter, targetId);
        }

        internal bool DisbandClan(BasePlayer player)
        {
            Clan clan = storedData.FindClanByID(player.userID);

            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            if (!clan.IsOwner(player.userID))
            {
                player.ChatMessage(msg("Notification.Disband.NotOwner", player.UserIDString));
                return false;
            }

            if (configData.Permissions.UsePermissionDisband && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionDisband))
            {
                player.ChatMessage(msg("Notification.Disband.NoPermission", player.UserIDString));
                return false;
            }

            string tag = clan.Tag;

            clan.LocalizedBroadcast("Notification.Disband.Message", Array.Empty<object>());
            clan.DisbandClan();

            player.ChatMessage(string.Format(msg("Notification.Disband.Success", player.UserIDString), tag));

            return true;
        }
        #endregion

        #region Alliance Management
        internal bool OfferAlliance(BasePlayer player, string tag)
        {
            if (!configData.Clans.Alliance.Enabled)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            Clan alliedClan = storedData.FindClan(tag);
            if (alliedClan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = alliedClan.Tag;

            if (!clan.IsOwner(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.Alliance.NoPermissions", player.UserIDString));
                return false;
            }

            if (clan.AllianceInvites.ContainsKey(tag) && (UnixTimeStampUTC() - clan.AllianceInvites[tag] < configData.Clans.Invites.AllianceInviteExpireTime))
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.PendingInvite", player.UserIDString), tag));
                return false;
            }

            if (clan.AllianceInviteCount >= configData.Clans.Invites.AllianceInviteLimit)
            {
                player.ChatMessage(msg("Notification.Alliance.MaximumInvites", player.UserIDString));
                return false;
            }

            if (clan.AllianceCount >= configData.Clans.Alliance.AllianceLimit)
            {
                player.ChatMessage(msg("Notification.Alliance.MaximumAlliances", player.UserIDString));
                return false;
            }

            if (configData.Clans.Alliance.CountAllianceMembers)
            {
                int count = clan.CountMembersAndAlliances();

                if (count + alliedClan.MemberCount >= configData.Clans.MemberLimit)
                {
                    player.ChatMessage(msg("Notification.Alliance.AtLimitAlliedMembersSelf", player.UserIDString));
                    return false;
                }

                count = alliedClan.CountMembersAndAlliances();

                if (count + clan.MemberCount >= configData.Clans.MemberLimit)
                {
                    player.ChatMessage(string.Format(msg("Notification.Alliance.AtLimitAlliedMembersTarget", player.UserIDString), alliedClan.Tag));
                    return false;
                }
            }

            clan.AllianceInvites[tag] = UnixTimeStampUTC();
            alliedClan.IncomingAlliances.Add(clan.Tag);

            player.ChatMessage(string.Format(msg("Notification.Alliance.InviteSent", player.UserIDString), tag, FormatTime(configData.Clans.Invites.AllianceInviteExpireTime)));

            alliedClan.LocalizedBroadcast("Notification.Alliance.InviteReceived", clan.Tag, FormatTime(configData.Clans.Invites.AllianceInviteExpireTime), configData.Commands.ClanAllyCommand);

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has offered an alliance to [{tag}]", (int)MessageType.AllianceInvite);
            return true;
        }

        internal bool WithdrawAlliance(BasePlayer player, string tag)
        {
            if (!configData.Clans.Alliance.Enabled)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            Clan alliedClan = storedData.FindClan(tag);
            if (alliedClan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = alliedClan.Tag;

            if (!clan.IsOwner(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.Alliance.NoPermissions", player.UserIDString));
                return false;
            }

            if (!clan.AllianceInvites.ContainsKey(tag))
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.NoActiveInvite", player.UserIDString), tag));
                return false;
            }

            clan.AllianceInvites.Remove(tag);
            alliedClan.IncomingAlliances.Remove(clan.Tag);

            clan.LocalizedBroadcast("Notification.Alliance.WithdrawnClan", player.displayName, tag);
            alliedClan.LocalizedBroadcast("Notification.Alliance.WithdrawnTarget", clan.Tag);

            clan.MarkDirty();

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has withdrawn their alliance offer to [{tag}]", (int)MessageType.AllianceInviteWithdrawn);
            return true;
        }

        internal bool AcceptAlliance(BasePlayer player, string tag)
        {
            if (!configData.Clans.Alliance.Enabled)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            Clan alliedClan = storedData.FindClan(tag);
            if (alliedClan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = alliedClan.Tag;

            if (!clan.IsOwner(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.Alliance.NoPermissions", player.UserIDString));
                return false;
            }

            bool noActiveInvite = !alliedClan.AllianceInvites.ContainsKey(clan.Tag);

            if ((UnixTimeStampUTC() - alliedClan.AllianceInvites[clan.Tag] > configData.Clans.Invites.AllianceInviteExpireTime))
            {
                alliedClan.AllianceInvites.Remove(clan.Tag);
                noActiveInvite = true;
            }

            if (noActiveInvite)
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.NoActiveInviteFrom", player.UserIDString), tag));
                return false;
            }

            if (alliedClan.AllianceCount >= configData.Clans.Alliance.AllianceLimit)
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.AtLimitTarget", player.UserIDString), tag));
                return false;
            }

            if (clan.AllianceCount >= configData.Clans.Alliance.AllianceLimit)
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.AtLimitSelf", player.UserIDString), tag));
                return false;
            }

            if (configData.Clans.Alliance.CountAllianceMembers)
            {
                int count = clan.CountMembersAndAlliances();

                if (count + alliedClan.MemberCount >= configData.Clans.MemberLimit)
                {
                    player.ChatMessage(msg("Notification.Alliance.AtLimitAlliedMembersSelf", player.UserIDString));
                    return false;
                }

                count = alliedClan.CountMembersAndAlliances();

                if (count + clan.MemberCount >= configData.Clans.MemberLimit)
                {
                    player.ChatMessage(string.Format(msg("Notification.Alliance.AtLimitAlliedMembersTarget", player.UserIDString), alliedClan.Tag));
                    return false;
                }
            }

            clan.Alliances.Add(tag);
            clan.IncomingAlliances.Remove(tag);

            alliedClan.Alliances.Add(clan.Tag);
            alliedClan.AllianceInvites.Remove(clan.Tag);

            clan.MarkDirty();
            alliedClan.MarkDirty();

            clan.LocalizedBroadcast("Notification.Alliance.Formed", clan.Tag, alliedClan.Tag);
            alliedClan.LocalizedBroadcast("Notification.Alliance.Formed", clan.Tag, alliedClan.Tag);

            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);
            Interface.Oxide.CallHook("OnClanUpdate", alliedClan.Tag);

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has accepted a alliance offer from [{tag}]", (int)MessageType.AllianceAccept);

            return true;
        }

        internal bool RejectAlliance(BasePlayer player, string tag)
        {
            if (!configData.Clans.Alliance.Enabled)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            Clan alliedClan = storedData.FindClan(tag);
            if (alliedClan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = alliedClan.Tag;

            if (!clan.IsOwner(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.Alliance.NoPermissions", player.UserIDString));
                return false;
            }

            if (!alliedClan.AllianceInvites.ContainsKey(clan.Tag) || (UnixTimeStampUTC() - alliedClan.AllianceInvites[clan.Tag] > configData.Clans.Invites.AllianceInviteExpireTime))
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.NoActiveInvite", player.UserIDString), tag));
                return false;
            }

            clan.IncomingAlliances.Remove(tag);

            alliedClan.AllianceInvites.Remove(clan.Tag);
            alliedClan.MarkDirty();

            clan.LocalizedBroadcast("Notification.Alliance.Rejected", clan.Tag, alliedClan.Tag);
            alliedClan.LocalizedBroadcast("Notification.Alliance.Rejected", clan.Tag, alliedClan.Tag);

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has rejected a alliance offer from [{tag}]", (int)MessageType.AllianceInviteReject);
            return true;
        }

        internal bool RevokeAlliance(BasePlayer player, string tag)
        {
            if (!configData.Clans.Alliance.Enabled)
                return false;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                return false;
            }

            Clan alliedClan = storedData.FindClan(tag);
            if (alliedClan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), tag));
                return false;
            }

            // Update tag from found clan for case insensitive selection
            tag = alliedClan.Tag;

            if (!clan.IsOwner(player.userID) && !clan.IsCouncil(player.userID))
            {
                player.ChatMessage(msg("Notification.Alliance.NoPermissions", player.UserIDString));
                return false;
            }

            if (!clan.Alliances.Contains(alliedClan.Tag))
            {
                player.ChatMessage(string.Format(msg("Notification.Alliance.NoActiveAlliance", player.UserIDString), alliedClan.Tag));
                return false;
            }

            alliedClan.Alliances.Remove(clan.Tag);
            clan.Alliances.Remove(alliedClan.Tag);

            alliedClan.MarkDirty();
            clan.MarkDirty();

            clan.LocalizedBroadcast("Notification.Alliance.Revoked", clan.Tag, alliedClan.Tag);
            alliedClan.LocalizedBroadcast("Notification.Alliance.Revoked", clan.Tag, alliedClan.Tag);

            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);
            Interface.Oxide.CallHook("OnClanUpdate", alliedClan.Tag);

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has withdrawn their alliance to [{tag}]", (int)MessageType.AllianceWithdrawn);
            return true;
        }
        #endregion

        #region Chat
        private void ClanChat(BasePlayer player, string message)
        {
            if (!player)
                return;

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
                return;

            if (configData.Options.DenyOnMuted)
            {
                object success = Interface.CallHook("API_IsMuted", player.IPlayer);
                if ((success is bool && (bool)success) || player.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute))
                {
                    player.ChatMessage(msg("Chat.IsMuted", player.UserIDString));
                    return;
                }
            }

            message = message.Replace("\n", "").Replace("\r", "").Trim();

            if (message.Length > 128)
                message = message.Substring(0, 128);

            if (message.Length <= 0)
                return;

            string str = string.Format(msg("Chat.Alliance.Format"), clan.Tag, clan.GetRoleColor(player.userID), player.net.connection.username, message);

            clan.Broadcast(string.Format(msg("Chat.Clan.Prefix"), str));

            if (ConVar.Chat.serverlog)
            {
                ServerConsole.PrintColoured(ConsoleColor.White, "[CLAN] ", ConsoleColor.DarkYellow, player.displayName + ": ", ConsoleColor.DarkGreen, message);
                DebugEx.Log($"[CLAN CHAT] {str}");
            }

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} : {message}", (int)MessageType.ClanChat);

            Interface.CallHook("OnClanChat", player, message, clan.Tag);
        }

        private void AllianceChat(BasePlayer player, string message)
        {
            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
                return;

            if (configData.Options.DenyOnMuted)
            {
                object success = Interface.CallHook("API_IsMuted", player.IPlayer);
                if ((success is bool && (bool)success) || player.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute))
                {
                    player.ChatMessage(msg("Chat.IsMuted", player.UserIDString));
                    return;
                }
            }

            message = message.Replace("\n", "").Replace("\r", "").Trim();

            if (message.Length > 128)
                message = message.Substring(0, 128);

            if (message.Length <= 0)
                return;

            string str = string.Format(msg("Chat.Alliance.Format"), clan.Tag, clan.GetRoleColor(player.userID), player.net.connection.username, message);

            clan.Broadcast(string.Format(msg("Chat.Alliance.Prefix"), str));

            for (int i = 0; i < clan.AllianceCount; i++)
            {
                Clan alliedClan = storedData.FindClan(clan.Alliances.ElementAt(i));
                if (alliedClan != null)
                {
                    alliedClan.Broadcast(string.Format(msg("Chat.Alliance.Prefix"), str));
                }
            }

            if (ConVar.Chat.serverlog)
            {
                ServerConsole.PrintColoured(ConsoleColor.White, "[ALLY] ", ConsoleColor.DarkYellow, player.displayName + ": ", ConsoleColor.DarkGreen, message);
                DebugEx.Log($"[ALLY CHAT] {str}");
            }

            Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} : {message}", (int)MessageType.AllyChat);

            Interface.CallHook("OnAllianceChat", player, message, clan.Tag);
        }
        #endregion

        #region Chat Commands
        private void cmdAllianceChat(BasePlayer player, string command, string[] args)
        {
            if (!configData.Clans.Alliance.Enabled || args.Length == 0)
                return;

            AllianceChat(player, string.Join(" ", args));
        }

        private void cmdClanChat(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0)
                return;

            ClanChat(player, string.Join(" ", args));
        }

        private void cmdClanFF(BasePlayer player, string command, string[] args)
        {
            if (!configData.Clans.MemberFF)
                return;

            Clan.Member member = storedData.FindMemberByID(player.userID);
            if (member == null)
                return;

            if (configData.Clans.OwnerFF && member.Role >= Clan.Member.MemberRole.Moderator)
            {
                player.ChatMessage(msg("Notification.FF.ToggleNotOwner", player.UserIDString));
                return;
            }

            member.MemberFFEnabled = !member.MemberFFEnabled;

            if (configData.Clans.OwnerFF)
            {
                Clan clan = storedData.FindClanByID(player.userID);

                foreach (KeyValuePair<ulong, Clan.Member> kvp in clan.ClanMembers)
                {
                    if (kvp.Key.Equals(player.userID))
                        continue;

                    kvp.Value.MemberFFEnabled = member.MemberFFEnabled;

                    BasePlayer memberPlayer = kvp.Value.Player;

                    if (memberPlayer != null && memberPlayer.IsConnected)
                    {
                        memberPlayer.ChatMessage(string.Format(msg("Notification.FF.OwnerToggle", memberPlayer.UserIDString),
                            string.Format(COLORED_LABEL, clan.GetRoleColor(member.Role), player.displayName),
                            !kvp.Value.MemberFFEnabled ? msg("Notification.FF.MemberEnabled", memberPlayer.UserIDString) : msg("Notification.FF.MemberDisabled", memberPlayer.UserIDString)));
                    }
                }
            }

            player.ChatMessage(!member.MemberFFEnabled ? msg("Notification.FF.MemberEnabled", player.UserIDString) : msg("Notification.FF.MemberDisabled", player.UserIDString));
        }

        private void cmdAllyFF(BasePlayer player, string command, string[] args)
        {
            if (!configData.Clans.Alliance.AllyFF || !configData.Clans.Alliance.Enabled)
                return;

            Clan.Member member = storedData.FindMemberByID(player.userID);
            if (member == null)
                return;

            if (configData.Clans.Alliance.OwnerFF && member.Role >= Clan.Member.MemberRole.Moderator)
            {
                player.ChatMessage(msg("Notification.FF.ToggleNotOwner", player.UserIDString));
                return;
            }

            member.AllyFFEnabled = !member.AllyFFEnabled;

            if (configData.Clans.Alliance.OwnerFF)
            {
                Clan clan = storedData.FindClanByID(player.userID);

                foreach (KeyValuePair<ulong, Clan.Member> kvp in clan.ClanMembers)
                {
                    if (kvp.Key.Equals(player.userID))
                        continue;

                    kvp.Value.AllyFFEnabled = member.AllyFFEnabled;

                    BasePlayer memberPlayer = kvp.Value.Player;

                    if (memberPlayer != null && memberPlayer.IsConnected)
                    {
                        memberPlayer.ChatMessage(string.Format(msg("Notification.FF.OwnerAllyToggle", memberPlayer.UserIDString),
                            string.Format(COLORED_LABEL, clan.GetRoleColor(member.Role), player.displayName),
                            !kvp.Value.MemberFFEnabled ? msg("Notification.FF.MemberEnabled", memberPlayer.UserIDString) : msg("Notification.FF.MemberDisabled", memberPlayer.UserIDString)));
                    }
                }
            }

            player.ChatMessage(!member.AllyFFEnabled ? msg("Notification.FF.AllyEnabled", player.UserIDString) : msg("Notification.FF.AllyDisabled", player.UserIDString));
        }

        private void cmdChatClanInfo(BasePlayer player, string command, string[] args)
        {
            if (configData.Permissions.UsePermissionClanInfo && !permission.UserHasPermission(player.UserIDString, configData.Permissions.ClanInfoPermission))
            {
                player.ChatMessage(msg("Notification.Generic.NoPermissions", player.UserIDString));
                return;
            }

            if (args.Length == 0)
            {
                player.ChatMessage(msg("Notification.Generic.SpecifyClanTag", player.UserIDString));
                return;
            }

            Clan clan = storedData.FindClan(args[0]);
            if (clan == null)
            {
                player.ChatMessage(string.Format(msg("Notification.Generic.InvalidClan", player.UserIDString), args[0]));
                return;
            }

            clan.PrintClanInfo(player);
        }

        private void cmdChatClanHelp(BasePlayer player, string command, string[] args)
        {
            StringBuilder sb = new StringBuilder();

            Clan clan = storedData.FindClanByID(player.userID);
            if (clan == null)
            {
                sb.Append(msg("Notification.ClanInfo.Title", player.UserIDString));
                sb.Append(string.Format(msg("Notification.ClanHelp.NoClan", player.UserIDString), configData.Commands.ClanCommand));
                player.ChatMessage(sb.ToString());
                return;
            }

            sb.Append(msg("Notification.ClanInfo.Title", player.UserIDString));
            sb.Append(string.Format(msg("Notification.ClanHelp.Basic2", player.UserIDString), configData.Commands.ClanCommand, configData.Commands.ClanChatCommand));

            if (configData.Clans.MemberFF)
                sb.Append(string.Format(msg("Notification.ClanHelp.MFF", player.UserIDString), configData.Commands.FFCommand));

            if (configData.Clans.Alliance.Enabled && configData.Clans.Alliance.AllyFF)
                sb.Append(string.Format(msg("Notification.ClanHelp.AFF", player.UserIDString), configData.Commands.AFFCommand));


            if (clan.IsModerator(player.userID) || clan.IsCouncil(player.userID) || clan.OwnerID.Equals(player.userID))
            {
                if (configData.Clans.Alliance.Enabled && (clan.IsCouncil(player.userID) || clan.OwnerID.Equals(player.userID)))
                    sb.Append(string.Format(msg("Notification.ClanHelp.Alliance", player.UserIDString), configData.Commands.ClanAllyCommand));

                sb.Append(string.Format(msg("Notification.ClanHelp.Moderator", player.UserIDString), configData.Commands.ClanCommand));
            }

            if (clan.OwnerID.Equals(player.userID))
            {
                sb.Append(string.Format(msg("Notification.ClanHelp.Owner", player.UserIDString), configData.Commands.ClanCommand));

                if (configData.Tags.CustomColors)
                    sb.Append(string.Format(msg("Notification.ClanHelp.TagColor", player.UserIDString), configData.Commands.ClanCommand));
            }

            player.ChatMessage(sb.ToString());

        }

        private void cmdChatClanAlly(BasePlayer player, string command, string[] args)
        {
            if (!configData.Clans.Alliance.Enabled)
                return;

            if (args.Length < 2)
            {
                player.ChatMessage(string.Format(msg("Notification.ClanHelp.Alliance", player.UserIDString), configData.Commands.ClanAllyCommand));
                return;
            }

            string tag = args[1];

            switch (args[0].ToLower())
            {
                case "invite":
                    OfferAlliance(player, tag);
                    return;
                case "withdraw":
                    WithdrawAlliance(player, tag);
                    return;
                case "accept":
                    AcceptAlliance(player, tag);
                    return;
                case "reject":
                    RejectAlliance(player, tag);
                    return;
                case "revoke":
                    RevokeAlliance(player, tag);
                    return;
                default:
                    player.ChatMessage(string.Format(msg("Notification.ClanHelp.Alliance", player.UserIDString), configData.Commands.ClanAllyCommand));
                    return;
            }
        }

        private void cmdChatClan(BasePlayer player, string command, string[] args)
        {
            Clan clan = storedData.FindClanByID(player.userID);

            if (args.Length == 0)
            {
                StringBuilder sb = new StringBuilder();
                if (clan == null)
                {
                    sb.Append(msg("Notification.ClanInfo.Title", player.UserIDString));
                    sb.Append(msg("Notification.Clan.NotInAClan", player.UserIDString));
                    sb.Append(string.Format(msg("Notification.Clan.Help", player.UserIDString), configData.Commands.ClanHelpCommand));
                    player.ChatMessage(sb.ToString());
                    sb.Clear();
                }
                else
                {
                    sb.Append(msg("Notification.ClanInfo.Title", player.UserIDString));
                    sb.Append(string.Format(msg((clan.IsOwner(player.userID) ? "Notification.Clan.OwnerOf" : clan.IsCouncil(player.userID) ? "Notification.Clan.CouncilOf" : clan.IsModerator(player.userID) ? "Notification.Clan.ModeratorOf" : "Notification.Clan.MemberOf"), player.UserIDString), clan.Tag, clan.OnlineCount, clan.MemberCount));
                    sb.Append(string.Format(msg("Notification.Clan.MembersOnline", player.UserIDString), clan.GetMembersOnline()));

                    if (configData.Clans.MemberFF)
                    {
                        bool isOn = clan.ClanMembers[player.userID].MemberFFEnabled;

                        sb.Append(string.Format(msg("Notification.Clan.MFF", player.UserIDString), isOn ? msg("Notification.FF.IsEnabled") : msg("Notification.FF.IsDisabled"), configData.Commands.FFCommand));
                    }

                    if (configData.Clans.Alliance.Enabled && configData.Clans.Alliance.AllyFF)
                    {
                        bool isOn = clan.ClanMembers[player.userID].AllyFFEnabled;

                        sb.Append(string.Format(msg("Notification.Clan.AFF", player.UserIDString), isOn ? msg("Notification.FF.IsEnabled") : msg("Notification.FF.IsDisabled"), configData.Commands.AFFCommand));
                    }

                    sb.Append(string.Format(msg("Notification.Clan.Help", player.UserIDString), configData.Commands.ClanHelpCommand));
                    player.ChatMessage(sb.ToString());
                    sb.Clear();
                }
                return;
            }

            string tag = clan?.Tag ?? string.Empty;

            switch (args[0].ToLower())
            {
                case "create":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.CreateSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    CreateClan(player, args[1], args.Length > 2 ? string.Join(" ", args.Skip(2)) : string.Empty);
                    return;

                case "leave":
                    LeaveClan(player);
                    return;

                case "invite":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.InviteSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    BasePlayer invitee = FindPlayer(args[1]);
                    if (!invitee)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Generic.UnableToFindPlayer", player.UserIDString), args[1]));
                        return;
                    }

                    if (invitee == player)
                    {
                        player.ChatMessage(msg("Notification.Generic.CommandSelf", player.UserIDString));
                        return;
                    }

                    InvitePlayer(player, invitee);
                    return;

                case "withdraw":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.WithdrawSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    WithdrawInvite(player, args[1]);
                    return;

                case "accept":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.AcceptSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    JoinClan(player, args[1]);
                    return;

                case "reject":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.RejectSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    RejectInvite(player, args[1]);
                    return;

                case "kick":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.KickSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    if (clan == null)
                    {
                        player.ChatMessage(msg("Notification.Clan.NotInAClan", player.UserIDString));
                        return;
                    }

                    ulong target = clan.FindPlayer(args[1]);
                    if (target == 0UL)
                    {
                        player.ChatMessage(msg("Notification.Kick.NoPlayerFound", player.UserIDString));
                        return;
                    }

                    if (target == player.userID)
                    {
                        player.ChatMessage(msg("Notification.Generic.CommandSelf", player.UserIDString));
                        return;
                    }

                    KickPlayer(player, target);
                    return;

                case "promote":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.PromoteSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    if (clan == null)
                    {
                        player.ChatMessage(msg("Notification.Clan.NotInAClan", player.UserIDString));
                        return;
                    }

                    ulong promotee = clan.FindPlayer(args[1]);
                    if (promotee == 0UL)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Generic.UnableToFindPlayer", player.UserIDString), args[1]));
                        return;
                    }

                    if (promotee == player.userID)
                    {
                        player.ChatMessage(msg("Notification.Generic.CommandSelf", player.UserIDString));
                        return;
                    }

                    PromotePlayer(player, promotee);
                    return;

                case "demote":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.DemoteSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    if (clan == null)
                    {
                        player.ChatMessage(msg("Notification.Clan.NotInAClan", player.UserIDString));
                        return;
                    }

                    ulong demotee = clan.FindPlayer(args[1]);
                    if (demotee == 0UL)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Generic.UnableToFindPlayer", player.UserIDString), args[1]));
                        return;
                    }

                    if (demotee == player.userID)
                    {
                        player.ChatMessage(msg("Notification.Generic.CommandSelf", player.UserIDString));
                        return;
                    }

                    DemotePlayer(player, demotee);
                    return;

                case "disband":
                    if (args.Length < 2 || !args[1].Equals("forever", StringComparison.OrdinalIgnoreCase))
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.DisbandSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    if (clan == null)
                    {
                        player.ChatMessage(msg("Notification.Generic.NoClan", player.UserIDString));
                        return;
                    }

                    if (!clan.IsOwner(player.userID))
                    {
                        player.ChatMessage(msg("Notification.Disband.NotOwner", player.UserIDString));
                        return;
                    }

                    if (configData.Permissions.UsePermissionDisband && !permission.UserHasPermission(player.UserIDString, configData.Permissions.PermissionDisband))
                    {
                        player.ChatMessage(msg("Notification.Disband.NoPermission", player.UserIDString));
                        return;
                    }

                    clan.LocalizedBroadcast("Notification.Disband.Message", Array.Empty<object>());
                    clan.DisbandClan();

                    player.ChatMessage(string.Format(msg("Notification.Disband.Success", player.UserIDString), tag));
                    return;

                case "tagcolor":
                    if (!configData.Tags.CustomColors)
                    {
                        player.ChatMessage(msg("Notification.Clan.TagColorDisabled", player.UserIDString));
                        return;
                    }

                    if (args.Length < 2)
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.TagColorSyntax", player.UserIDString), configData.Commands.ClanCommand));
                        return;
                    }

                    if (clan == null)
                    {
                        player.ChatMessage(msg("Notification.Clan.NotInAClan", player.UserIDString));
                        return;
                    }

                    if (!clan.IsOwner(player.userID))
                    {
                        player.ChatMessage(msg("Notification.Disband.NotOwner", player.UserIDString));
                        return;
                    }

                    string hexColor = args[1].ToUpper();

                    if (hexColor.Equals("RESET"))
                    {
                        clan.TagColor = string.Empty;
                        player.ChatMessage(msg("Notification.Clan.TagColorReset", player.UserIDString));
                        return;
                    }

                    if (hexColor.Length < 6 || hexColor.Length > 6 || !hexFilter.IsMatch(hexColor))
                    {
                        player.ChatMessage(msg("Notification.Clan.TagColorFormat", player.UserIDString));
                        return;
                    }

                    if (TagColorIsBlocked(hexColor))
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.TagColorBlocked", player.UserIDString), hexColor));
                        return;
                    }

                    if (!TagColorWithinRange(hexColor))
                    {
                        player.ChatMessage(string.Format(msg("Notification.Clan.TagColorOutOfRange", player.UserIDString), hexColor, configData.Tags.CustomTagColorMin, configData.Tags.CustomTagColorMax));
                        return;
                    }

                    clan.TagColor = hexColor;
                    player.ChatMessage(string.Format(msg("Notification.Clan.TagColorSet", player.UserIDString), clan.TagColor));
                    return;

                default:
                    player.ChatMessage(string.Format(msg("Notification.Clan.Help", player.UserIDString), configData.Commands.ClanHelpCommand));
                    return;
            }
        }

        #endregion

        #region API
        private void DisableBypass(ulong userId) => friendlyFireDisabled.Add(userId);

        private void EnableBypass(ulong userId) => friendlyFireDisabled.Remove(userId);

        private JObject GetClan(string tag)
        {
            if (!string.IsNullOrEmpty(tag))
                return storedData.FindClan(tag)?.ToJObject();

            return null;
        }

        private JArray GetAllClans() => new JArray(storedData.clans.Keys);


        private string GetClanOf(ulong playerId) => storedData.FindClanByID(playerId)?.Tag;

        private string GetClanOf(BasePlayer player) => GetClanOf(player ? (ulong)player.userID : 0UL);

        private string GetClanOf(string playerId) => GetClanOf(ulong.Parse(playerId));


        private List<string> GetClanMembers(ulong playerId) => storedData.FindClanByID(playerId)?.ClanMembers.Keys.Select(x => x.ToString()).ToList() ?? new List<string>();

        private List<string> GetClanMembers(string playerId) => GetClanMembers(ulong.Parse(playerId));


        private object HasFriend(ulong ownerId, ulong playerId)
        {
            Clan clanOwner = storedData.FindClanByID(ownerId);
            if (clanOwner == null)
                return null;

            Clan clanFriend = storedData.FindClanByID(playerId);
            if (clanFriend == null)
                return null;

            return clanOwner.Tag.Equals(clanFriend.Tag);
        }

        private object HasFriend(string ownerId, string playerId) => HasFriend(ulong.Parse(ownerId), ulong.Parse(playerId));


        private bool IsClanMember(ulong playerId, ulong otherId)
        {
            Clan clanPlayer = storedData.FindClanByID(playerId);
            if (clanPlayer == null)
                return false;

            Clan clanOther = storedData.FindClanByID(otherId);
            if (clanOther == null)
                return false;

            return clanPlayer.Tag.Equals(clanOther.Tag);
        }

        private bool IsClanMember(string playerId, string otherId) => IsClanMember(ulong.Parse(playerId), ulong.Parse(otherId));


        private bool IsMemberOrAlly(ulong playerId, ulong otherId)
        {
            Clan playerClan = storedData.FindClanByID(playerId);
            if (playerClan == null)
                return false;

            Clan otherClan = storedData.FindClanByID(otherId);
            if (otherClan == null)
                return false;

            if ((playerClan.Tag.Equals(otherClan.Tag)) || playerClan.Alliances.Contains(otherClan.Tag))
                return true;

            return false;
        }

        private bool IsMemberOrAlly(string playerId, string otherId) => IsMemberOrAlly(ulong.Parse(playerId), ulong.Parse(otherId));


        private bool IsAllyPlayer(ulong playerId, ulong otherId)
        {
            Clan playerClan = storedData.FindClanByID(playerId);
            if (playerClan == null)
                return false;

            Clan otherClan = storedData.FindClanByID(otherId);
            if (otherClan == null)
                return false;

            if (playerClan.Alliances.Contains(otherClan.Tag))
                return true;

            return false;
        }

        private bool IsAllyPlayer(string playerId, string otherId) => IsAllyPlayer(ulong.Parse(playerId), ulong.Parse(otherId));


        private List<string> GetClanAlliances(ulong playerId)
        {
            Clan clan = storedData.FindClanByID(playerId);
            if (clan == null)
                return new List<string>();

            return new List<string>(clan.Alliances);
        }

        private List<string> GetClanAlliances(string playerId) => GetClanAlliances(ulong.Parse(playerId));


        [HookMethod("ToggleFF")]
        public void ToggleFF(ulong playerId)
        {
            Clan.Member member = storedData.FindMemberByID(playerId);
            if (member == null)
                return;

            member.MemberFFEnabled = !member.MemberFFEnabled;
        }

        [HookMethod("HasFFEnabled")]
        public bool HasFFEnabled(ulong playerId)
        {
            Clan.Member member = storedData.FindMemberByID(playerId);
            if (member == null)
                return false;

            return member.MemberFFEnabled;
        }
        #endregion

        #region Clan
        [Serializable, ProtoContract]
        public class Clan
        {
            [ProtoMember(1), JsonProperty]
            public string Tag { get; set; }

            [ProtoMember(2), JsonProperty]
            public string Description { get; set; }

            [ProtoMember(3), JsonProperty]
            public ulong OwnerID { get; set; }

            [ProtoMember(4), JsonProperty]
            public double CreationTime { get; set; }

            [ProtoMember(5), JsonProperty]
            public double LastOnlineTime { get; set; }

            [ProtoMember(6), JsonProperty]
            public Hash<ulong, Member> ClanMembers { get; set; } = new Hash<ulong, Member>();

            [ProtoMember(7), JsonProperty]
            public Hash<ulong, MemberInvite> MemberInvites { get; set; } = new Hash<ulong, MemberInvite>();

            [ProtoMember(8), JsonProperty]
            public HashSet<string> Alliances { get; set; } = new HashSet<string>();

            [ProtoMember(9), JsonProperty]
            public Hash<string, double> AllianceInvites { get; set; } = new Hash<string, double>();

            [ProtoMember(10), JsonProperty]
            public HashSet<string> IncomingAlliances { get; set; } = new HashSet<string>();

            [ProtoMember(11), JsonProperty]
            public string TagColor { get; set; } = string.Empty;

            [ProtoMember(12), JsonProperty]
            public int MemberInviteCooldownTime { get; set; } = 0;

            [JsonIgnore, ProtoIgnore]
            internal int OnlineCount { get; private set; }

            [JsonIgnore, ProtoIgnore]
            internal ulong CouncilID
            {
                get
                {
                    foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                    {
                        if (kvp.Value.Role == Member.MemberRole.Council)
                            return kvp.Key;
                    }
                    return 0UL;
                }
            }

            [JsonIgnore, ProtoIgnore]
            internal int ModeratorCount => ClanMembers.Where(x => x.Value.Role == Member.MemberRole.Moderator).Count();

            [JsonIgnore, ProtoIgnore]
            internal int MemberCount => ClanMembers.Count;

            [JsonIgnore, ProtoIgnore]
            internal int MemberInviteCount => MemberInvites.Count;

            [JsonIgnore, ProtoIgnore]
            internal int AllianceCount => Alliances.Count;

            [JsonIgnore, ProtoIgnore]
            internal int AllianceInviteCount => AllianceInvites.Count;

            [JsonIgnore, ProtoIgnore]
            private RelationshipManager.PlayerTeam _playerTeam;

            [JsonIgnore, ProtoIgnore]
            internal RelationshipManager.PlayerTeam PlayerTeam
            {
                get
                {
                    if (!configData.Clans.Teams.Enabled)
                        return null;

                    if (_playerTeam == null)
                    {
                        _playerTeam = Facepunch.Pool.Get<RelationshipManager.PlayerTeam>();
                        _playerTeam.teamID = FindRandomTeamID;
                        _playerTeam.teamStartTime = Time.realtimeSinceStartup;
                        _playerTeam.invites.Clear();
                        _playerTeam.members.Clear();
                        _playerTeam.onlineMemberConnections.Clear();

                        RelationshipManager.ServerInstance.teams.Add(_playerTeam.teamID, _playerTeam);

                        foreach (ulong playerId in ClanMembers.Keys)
                        {
                            BasePlayer player = RelationshipManager.FindByID(playerId);
                            if (player)
                            {
                                if (player.currentTeam != 0UL && player.currentTeam != _playerTeam.teamID)
                                {
                                    RelationshipManager.PlayerTeam oldTeam = RelationshipManager.ServerInstance.FindTeam(player.currentTeam);
                                    if (oldTeam != null)
                                    {
                                        oldTeam.members.Remove(player.userID);
                                        player.ClearTeam();
                                    }
                                }

                                player.currentTeam = _playerTeam.teamID;
                                player.SendNetworkUpdate();
                                player.TeamUpdate();
                            }

                            _playerTeam.members.Add(playerId);

                            RelationshipManager.ServerInstance.playerToTeam.Remove(playerId);
                            RelationshipManager.ServerInstance.playerToTeam.Add(playerId, _playerTeam);
                        }

                        _playerTeam.teamName = Tag;
                        _playerTeam.SetTeamLeader(OwnerID);

                        _playerTeam.MarkDirty();
                    }
                    return _playerTeam;
                }
            }

            public int CountMembersAndAlliances()
            {
                int count = MemberCount;

                foreach (string allianceTag in Alliances)
                {
                    Clan alliedClan = Instance.storedData.FindClan(allianceTag);
                    if (alliedClan != null)
                        count += alliedClan.MemberCount;
                }

                return count;
            }

            private static ulong FindRandomTeamID
            {
                get
                {
                START_AGAIN:
                    ulong teamId = (ulong)UnityEngine.Random.Range(10000, long.MaxValue);
                    if (RelationshipManager.ServerInstance.teams.ContainsKey(teamId))
                        goto START_AGAIN;

                    return teamId;
                }
            }

            public Clan() { }

            public Clan(BasePlayer player, string tag, string description)
            {
                this.Tag = tag;
                this.Description = StripHTMLTags(description);
                CreationTime = LastOnlineTime = UnixTimeStampUTC();
                OwnerID = player.userID;
                ClanMembers.Add(player.userID, new Member(Member.MemberRole.Owner, this));
                OnPlayerConnected(player);
            }

            #region Connection
            internal void OnPlayerConnected(BasePlayer player)
            {
                if (!player)
                    return;

                Member member;
                if (ClanMembers.TryGetValue(player.userID, out member))
                {
                    member.DisplayName = RemoveTags(player.displayName);
                    member.Player = player;

                    if (configData.Tags.Enabled)
                    {
                        string newDisplayname = $"{configData.Tags.TagOpen}{Tag}{configData.Tags.TagClose} {player.displayName}";
                        player.displayName = newDisplayname;
                        player._name = string.Format("{1}[{0}/{2}]", player.net.ID, newDisplayname, player.userID);
                    }

                    if (configData.Clans.Teams.Enabled)
                    {
                        if (player.currentTeam != 0UL && player.currentTeam != PlayerTeam.teamID)
                        {
                            RelationshipManager.PlayerTeam oldTeam = RelationshipManager.ServerInstance.FindTeam(player.currentTeam);
                            if (oldTeam != null)
                            {
                                oldTeam.members.Remove(player.userID);
                                player.ClearTeam();
                            }
                        }

                        player.currentTeam = PlayerTeam.teamID;

                        if (!PlayerTeam.members.Contains(player.userID))
                            PlayerTeam.members.Add(player.userID);

                        RelationshipManager.ServerInstance.playerToTeam.Remove(player.userID);
                        RelationshipManager.ServerInstance.playerToTeam.Add(player.userID, PlayerTeam);

                        player.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                        player.TeamUpdate();

                        if (member.Role == Member.MemberRole.Owner)
                            PlayerTeam.teamLeader = player.userID;

                        PlayerTeam.MarkDirty();
                    }

                    player.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);

                    if (configData.Permissions.PermissionGroups)
                        Instance.permission.AddUserGroup(player.UserIDString, configData.Permissions.PermissionGroupPrefix + Tag);

                    LastOnlineTime = UnixTimeStampUTC();
                    OnlineCount++;
                }

                MarkDirty();
            }

            internal void OnPlayerDisconnected(BasePlayer player)
            {
                if (!player)
                    return;

                Member member;
                if (ClanMembers.TryGetValue(player.userID, out member))
                {
                    if (configData.Tags.Enabled)
                    {
                        player.displayName = member.DisplayName;
                        player._name = string.Format("{1}[{0}/{2}]", player.net.ID, member.DisplayName, player.userID);

                        player.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                    }

                    if (configData.Permissions.PermissionGroups)
                        Instance.permission.RemoveUserGroup(player.UserIDString, configData.Permissions.PermissionGroupPrefix + Tag);

                    member.Player = null;

                    LastOnlineTime = UnixTimeStampUTC();
                    OnlineCount--;
                }

                MarkDirty();
            }
            #endregion

            #region Clan Management
            internal bool InvitePlayer(BasePlayer inviter, BasePlayer invitee)
            {
                if (!IsOwner(inviter.userID) && !IsCouncil(inviter.userID) && !IsModerator(inviter.userID))
                {
                    inviter.ChatMessage(msg("Notification.Invite.NoPermissions", inviter.UserIDString));
                    return false;
                }

                if (ClanMembers.ContainsKey(invitee.userID))
                {
                    inviter.ChatMessage(string.Format(msg("Notification.Invite.IsMember", inviter.UserIDString), invitee.displayName));
                    return false;
                }

                if (MemberInvites.ContainsKey(invitee.userID))
                {
                    inviter.ChatMessage(string.Format(msg("Notification.Invite.HasPending", inviter.UserIDString), invitee.displayName));
                    return false;
                }

                if (MemberCount >= configData.Clans.MemberLimit)
                {
                    inviter.ChatMessage(msg("Notification.Generic.ClanFull", inviter.UserIDString));
                    return false;
                }

                if (configData.Clans.Alliance.Enabled && configData.Clans.Alliance.CountAllianceMembers)
                {
                    int count = CountMembersAndAlliances();

                    if (count >= configData.Clans.MemberLimit)
                    {
                        inviter.ChatMessage(msg("Notification.Generic.ClanFull", inviter.UserIDString));
                        return false;
                    }
                }

                if (MemberInviteCount >= configData.Clans.Invites.MemberInviteLimit)
                {
                    inviter.ChatMessage(msg("Notification.Invite.InviteLimit", inviter.UserIDString));
                    return false;
                }

                int cooldownTimeRemain = MemberInviteCooldownTime - UnixTimeStampUTC();
                if (cooldownTimeRemain > 0)
                {
                    inviter.ChatMessage(string.Format(msg("Notification.Invite.InviteCooldown", inviter.UserIDString), FormatTime(cooldownTimeRemain)));
                    return false;
                }

                MemberInvites[invitee.userID] = new MemberInvite(invitee);

                Instance.storedData.AddPlayerInvite(invitee.userID, Tag);

                if (configData.Clans.Teams.Enabled)
                    PlayerTeam.SendInvite(invitee);

                invitee.ChatMessage(string.Format(msg("Notification.Invite.SuccesTarget", invitee.UserIDString), Tag, Description, configData.Commands.ClanCommand));
                LocalizedBroadcast("Notification.Invite.SuccessClan", inviter.displayName, invitee.displayName);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{inviter.displayName} invited {invitee.displayName} to [{Tag}]", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{inviter.displayName} invited {invitee.displayName} to [{Tag}]", (int)MessageType.Invite);
                return true;
            }

            internal bool JoinClan(BasePlayer player)
            {
                if (!MemberInvites.ContainsKey(player.userID))
                    return false;

                if ((UnixTimeStampUTC() - MemberInvites[player.userID].ExpiryTime > configData.Clans.Invites.MemberInviteExpireTime))
                {
                    MemberInvites.Remove(player.userID);
                    player.ChatMessage(string.Format(msg("Notification.Join.ExpiredInvite", player.UserIDString), Tag));
                    return false;
                }

                if (MemberCount >= configData.Clans.MemberLimit)
                {
                    player.ChatMessage(msg("Notification.Generic.ClanFull", player.UserIDString));
                    return false;
                }

                if (configData.Clans.Alliance.Enabled && configData.Clans.Alliance.CountAllianceMembers)
                {
                    int count = CountMembersAndAlliances();

                    if (count >= configData.Clans.MemberLimit)
                    {
                        player.ChatMessage(msg("Notification.Generic.ClanFull", player.UserIDString));
                        return false;
                    }
                }

                Instance.storedData.OnInviteAccepted(player.userID, Tag);

                MemberInvites.Remove(player.userID);
                List<ulong> currentMembers = ClanMembers.Keys.ToList();

                ClanMembers.Add(player.userID, new Member(Member.MemberRole.Member, this));

                Instance.storedData.RegisterPlayer(player.userID, Tag);

                OnPlayerConnected(player);

                LocalizedBroadcast("Notification.Join.Message", player.displayName);

                Interface.Oxide.CallHook("OnClanMemberJoined", (ulong)player.userID, Tag);
                Interface.Oxide.CallHook("OnClanMemberJoined", (ulong)player.userID, currentMembers);

                Interface.Oxide.CallHook("OnClanUpdate", Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{player.displayName} joined [{Tag}]", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} joined [{Tag}]", (int)MessageType.Join);
                return true;
            }

            internal bool LeaveClan(BasePlayer player)
            {
                if (!ClanMembers.ContainsKey(player.userID))
                    return false;

                if (configData.Clans.Teams.Enabled && _playerTeam != null)
                    RemoveFromTeam(_playerTeam, player);

                OnPlayerDisconnected(player);

                ClanMembers.Remove(player.userID);
                Instance.storedData.UnregisterPlayer(player.userID);

                player.ChatMessage(string.Format(msg("Notification.Leave.PlayerMessage", player.UserIDString), Tag));
                LocalizedBroadcast("Notification.Leave.Message", player.displayName);

                MarkDirty();

                if (ClanMembers.Count == 0)
                {
                    Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, Tag);
                    Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, ClanMembers.Keys.ToList());

                    if (configData.Options.LogChanges)
                        Instance.LogToFile(Instance.Title, $"{player.displayName} has left [{Tag}]", Instance);

                    DisbandClan();
                    return true;
                }

                if (OwnerID == player.userID)
                {
                    ulong councilId = CouncilID;
                    if (councilId != 0UL)
                    {
                        OwnerID = councilId;
                        ClanMembers[councilId].Role = Member.MemberRole.Owner;
                    }
                    else
                    {
                        foreach (KeyValuePair<ulong, Member> kvp in ClanMembers.OrderBy(x => x.Value.Role))
                        {
                            OwnerID = kvp.Key;
                            kvp.Value.Role = Member.MemberRole.Owner;
                            break;
                        }
                    }

                    if (configData.Clans.Teams.Enabled)
                        PlayerTeam.SetTeamLeader(OwnerID);

                    LocalizedBroadcast("Notification.Leave.NewOwner", ClanMembers[OwnerID].DisplayName);
                }

                MemberInviteCooldownTime = UnixTimeStampUTC() + configData.Clans.Invites.InviteCooldownAfterMemberLeave;

                Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, ClanMembers.Keys.ToList());
                Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, Tag);
                Interface.Oxide.CallHook("OnClanUpdate", Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{player.displayName} has left [{Tag}]", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{player.displayName} has left [{Tag}]", (int)MessageType.Leave);

                return true;
            }

            internal bool KickMember(BasePlayer player, ulong targetId)
            {
                if (!ClanMembers.ContainsKey(targetId))
                {
                    player.ChatMessage(msg("Notification.Kick.NotClanmember", player.UserIDString));
                    return false;
                }

                if (IsOwner(targetId))
                {
                    player.ChatMessage(msg("Notification.Kick.IsOwner", player.UserIDString));
                    return false;
                }

                if (!IsOwner(player.userID) && !IsModerator(player.userID) && !IsCouncil(player.userID))
                {
                    player.ChatMessage(msg("Notification.Kick.NoPermissions", player.UserIDString));
                    return false;
                }

                if ((IsOwner(targetId) || IsModerator(targetId) || IsCouncil(targetId)) && OwnerID != player.userID)
                {
                    player.ChatMessage(msg("Notification.Kick.NotEnoughRank", player.UserIDString));
                    return false;
                }

                Member member = ClanMembers[targetId];

                if (configData.Clans.Teams.Enabled && _playerTeam != null)
                    RemoveFromTeam(_playerTeam, targetId);

                if (member.IsConnected && member.Player != null)
                {
                    member.Player.ChatMessage(string.Format(msg("Notification.Kick.PlayerMessage", member.Player.UserIDString), player.displayName));

                    OnPlayerDisconnected(member.Player);
                }

                MemberInviteCooldownTime = UnixTimeStampUTC() + configData.Clans.Invites.InviteCooldownAfterMemberLeave;

                ClanMembers.Remove(targetId);
                Instance.storedData.UnregisterPlayer(targetId);

                LocalizedBroadcast("Notification.Kick.Message", player.displayName, member.DisplayName);

                Interface.Oxide.CallHook("OnClanMemberGone", targetId, ClanMembers.Keys.ToList());
                Interface.Oxide.CallHook("OnClanMemberGone", targetId, Tag);
                Interface.Oxide.CallHook("OnClanUpdate", Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{member.DisplayName} was kicked from [{Tag}] by {player.displayName}", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{member.DisplayName} was kicked from [{Tag}] by {player.displayName}", (int)MessageType.Kick);
                return true;
            }

            internal bool PromotePlayer(BasePlayer promoter, ulong targetId)
            {
                if (!IsOwner(promoter.userID))
                {
                    promoter.ChatMessage(msg("Notification.Promotion.NoPermissions", promoter.UserIDString));
                    return false;
                }

                if (IsOwner(targetId))
                {
                    promoter.ChatMessage(msg("Notification.Promotion.IsOwner", promoter.UserIDString));
                    return false;
                }

                if (configData.Clans.Alliance.Enabled)
                {
                    if (IsCouncil(targetId))
                    {
                        promoter.ChatMessage(msg("Notification.Promotion.IsCouncil", promoter.UserIDString));
                        return false;
                    }

                    if (IsModerator(targetId) && HasCouncil())
                    {
                        promoter.ChatMessage(msg("Notification.Promotion.CouncilTaken", promoter.UserIDString));
                        return false;
                    }
                }
                else
                {
                    if (IsModerator(targetId))
                    {
                        promoter.ChatMessage(msg("Notification.Promotion.IsModerator", promoter.UserIDString));
                        return false;
                    }
                }

                if (IsMember(targetId) && ModeratorCount >= configData.Clans.ModeratorLimit)
                {
                    promoter.ChatMessage(msg("Notification.Promotion.ModeratorLimit", promoter.UserIDString));
                    return false;
                }

                Member member = ClanMembers[targetId];
                member.Role = (Member.MemberRole)((int)member.Role - 1);

                MarkDirty();

                LocalizedBroadcast("Notification.Promotion.Message", member.DisplayName, string.Format(COLORED_LABEL, GetRoleColor(member.Role), member.Role), string.Format(COLORED_LABEL, GetRoleColor(promoter.userID), promoter.displayName));
                Interface.Oxide.CallHook("OnClanUpdate", Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{member.DisplayName} was promototed to {member.Role} by {promoter.displayName}", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{member.DisplayName} was promototed to {member.Role} by {promoter.displayName}", (int)MessageType.Promote);
                return true;
            }

            internal bool DemotePlayer(BasePlayer demoter, ulong targetId)
            {
                if (!IsOwner(demoter.userID))
                {
                    demoter.ChatMessage(msg("Notification.Demotion.NoPermissions", demoter.UserIDString));
                    return false;
                }

                Member member = ClanMembers[targetId];
                if (IsMember(targetId))
                {
                    demoter.ChatMessage(string.Format(msg("Notification.Demotion.IsMember", demoter.UserIDString), member.DisplayName));
                    return false;
                }

                member.Role = member.Role == Member.MemberRole.Council ? (ModeratorCount >= configData.Clans.ModeratorLimit ? Member.MemberRole.Member : Member.MemberRole.Moderator) : (Member.MemberRole)((int)member.Role + 1);

                MarkDirty();

                LocalizedBroadcast("Notification.Demotion.Message", member.DisplayName, string.Format(COLORED_LABEL, GetRoleColor(member.Role), member.Role), string.Format(COLORED_LABEL, GetRoleColor(demoter.userID), demoter.displayName));

                Interface.Oxide.CallHook("OnClanUpdate", Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"{member.DisplayName} was demoted to {member.Role} by {demoter.displayName}", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"{member.DisplayName} was demoted to {member.Role} by {demoter.displayName}", (int)MessageType.Demote);
                return true;
            }

            internal void DisbandClan()
            {
                List<ulong> clanMembers = ClanMembers.Keys.ToList();

                OnUnload();

                Instance.storedData.clans.Remove(Tag);

                foreach (KeyValuePair<string, Clan> kvp in Instance.storedData.clans)
                    kvp.Value.OnClanDisbanded(Tag);

                if (configData.Options.LogChanges)
                    Instance.LogToFile(Instance.Title, $"The clan [{Tag}] was disbanded", Instance);

                Instance.DiscordClans?.CallHook("LogMessage", $"The clan [{Tag}] was disbanded", (int)MessageType.Disband);

                Interface.CallHook("OnClanDisbanded", clanMembers);
                Interface.CallHook("OnClanDisbanded", Tag);
            }

            internal void OnClanDisbanded(string tag)
            {
                Alliances.Remove(tag);
                AllianceInvites.Remove(tag);
                IncomingAlliances.Remove(tag);
            }

            internal void OnUnload()
            {
                foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                {
                    Instance.storedData.UnregisterPlayer(kvp.Key);

                    if (configData.Clans.Teams.Enabled && _playerTeam != null)
                    {
                        _playerTeam.members.Remove(kvp.Key);
                        RelationshipManager.ServerInstance.playerToTeam.Remove(kvp.Key);

                        BasePlayer basePlayer = (kvp.Value.Player ? kvp.Value.Player : RelationshipManager.FindByID(kvp.Key));
                        if (basePlayer != null)
                        {
                            basePlayer.ClearTeam();
                            basePlayer.BroadcastAppTeamRemoval();
                        }
                    }

                    if (kvp.Value.Player != null)
                        OnPlayerDisconnected(kvp.Value.Player);
                }

                if (_playerTeam != null)
                {
                    RelationshipManager.ServerInstance.teams.Remove(_playerTeam.teamID);
                    ClearTeam(ref _playerTeam);
                }
            }

            internal bool IsAlliedClan(string otherClan) => Alliances.Contains(otherClan);

            internal void MarkDirty()
            {
                cachedClanInfo = string.Empty;
                membersOnline = string.Empty;
                serializedClanObject = null;
            }
            #endregion

            #region Clan Chat
            internal void Broadcast(string message)
            {
                foreach (Member member in ClanMembers.Values)
                {
                    if (member?.Player)
                        member.Player.ChatMessage(message);
                }
            }

            internal void LocalizedBroadcast(string key, params object[] args)
            {
                foreach (Member member in ClanMembers.Values)
                {
                    if (member?.Player)
                        member.Player.ChatMessage(args?.Length > 0 ? string.Format(msg(key, member.Player.UserIDString), args) : msg(key, member.Player.UserIDString));
                }
            }
            #endregion

            #region Clan Info
            [JsonIgnore, ProtoIgnore]
            private string cachedClanInfo = string.Empty;

            [JsonIgnore, ProtoIgnore]
            private string membersOnline = string.Empty;

            internal void PrintClanInfo(BasePlayer player)
            {
                if (string.IsNullOrEmpty(cachedClanInfo))
                {
                    StringBuilder str = new StringBuilder();
                    str.Append(msg("Notification.ClanInfo.Title"));
                    str.Append(string.Format(msg("Notification.ClanInfo.Tag"), Tag));

                    if (!string.IsNullOrEmpty(Description))
                        str.Append(string.Format(msg("Notification.ClanInfo.Description"), Description));

                    if (configData.Commands.ClanInfoOptions.MemberCount)
                        str.Append(string.Format(msg("Notification.ClanInfo.TotalMembers"), MemberCount));

                    if (configData.Commands.ClanInfoOptions.Players)
                    {
                        List<string> online = Facepunch.Pool.Get<List<string>>();
                        List<string> offline = Facepunch.Pool.Get<List<string>>();

                        foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                        {
                            string member = string.Format(COLORED_LABEL, GetRoleColor(kvp.Key), kvp.Value.DisplayName);

                            if (kvp.Value.IsConnected)
                                online.Add(member);
                            else offline.Add(member);
                        }

                        if (online.Count > 0)
                            str.Append(string.Format(msg("Notification.ClanInfo.Online"), online.ToSentence()));

                        if (offline.Count > 0)
                            str.Append(string.Format(msg("Notification.ClanInfo.Offline"), offline.ToSentence()));

                        Facepunch.Pool.FreeUnmanaged(ref online);
                        Facepunch.Pool.FreeUnmanaged(ref offline);
                    }
                    else
                    {
                        str.Append(string.Format(msg("Notification.ClanInfo.Members"), ClanMembers.Select(x => string.Format(COLORED_LABEL, GetRoleColor(x.Key), x.Value.DisplayName)).ToSentence()));
                    }


                    str.Append(string.Format(msg("Notification.ClanInfo.Established"), UnixTimeStampToDateTime(CreationTime)));

                    if (configData.Commands.ClanInfoOptions.LastOnline)
                        str.Append(string.Format(msg("Notification.ClanInfo.LastOnline"), UnixTimeStampToDateTime(LastOnlineTime)));

                    if (configData.Clans.Alliance.Enabled)
                    {
                        if (configData.Commands.ClanInfoOptions.AllianceCount)
                            str.Append(string.Format(msg("Notification.ClanInfo.TotalAlliances"), AllianceCount));

                        if (configData.Commands.ClanInfoOptions.Alliances)
                            str.Append(string.Format(msg("Notification.ClanInfo.Alliances"), Alliances.Count > 0 ? Alliances.ToSentence() : msg("Notification.ClanInfo.Alliances.None")));
                    }

                    cachedClanInfo = str.ToString();
                }

                player.ChatMessage(cachedClanInfo);
            }

            internal string GetMembersOnline()
            {
                if (string.IsNullOrEmpty(membersOnline))
                {
                    List<string> list = Facepunch.Pool.Get<List<string>>();

                    foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                    {
                        if (kvp.Value.IsConnected)
                        {
                            string member = string.Format(COLORED_LABEL, GetRoleColor(kvp.Key), kvp.Value.DisplayName);
                            list.Add(member);
                        }
                    }

                    membersOnline = list.ToSentence();

                    Facepunch.Pool.FreeUnmanaged(ref list);
                }
                return membersOnline;
            }
            #endregion

            #region Roles
            internal bool IsOwner(ulong playerId) => ClanMembers[playerId].Role == Member.MemberRole.Owner;

            internal bool IsCouncil(ulong playerId) => ClanMembers[playerId].Role == Member.MemberRole.Council;

            internal bool IsModerator(ulong playerId) => ClanMembers[playerId].Role == Member.MemberRole.Moderator;

            internal bool IsMember(ulong playerId) => ClanMembers[playerId].Role == Member.MemberRole.Member;

            internal Member GetOwner() => ClanMembers[OwnerID];

            internal bool HasCouncil()
            {
                foreach (Member member in ClanMembers.Values)
                {
                    if (member.Role == Member.MemberRole.Council)
                        return true;
                }
                return false;
            }

            internal string GetRoleColor(ulong userID) => GetRoleColor(ClanMembers[userID].Role);

            internal string GetRoleColor(Member.MemberRole role)
            {
                if (role == Member.MemberRole.Owner)
                    return configData.Colors.Owner;

                if (role == Member.MemberRole.Council)
                    return configData.Colors.Council;

                if (role == Member.MemberRole.Moderator)
                    return configData.Colors.Moderator;

                return configData.Colors.Member;
            }
            #endregion

            [Serializable, ProtoContract]
            public class Member
            {
                [JsonIgnore, ProtoIgnore]
                public BasePlayer Player { get; set; }

                [ProtoMember(1)]
                public string DisplayName { get; set; } = string.Empty;

                [ProtoMember(2)]
                public MemberRole Role { get; set; }

                [ProtoMember(3)]
                public bool MemberFFEnabled { get; set; }

                [ProtoMember(4)]
                public bool AllyFFEnabled { get; set; }

                [JsonIgnore, ProtoIgnore]
                internal bool IsConnected => Player && Player.IsConnected;

                [JsonIgnore, ProtoIgnore]
                internal float lastFFAttackTime;

                [JsonIgnore, ProtoIgnore]
                internal float lastAFFAttackTime;

                public Member() { }

                public Member(MemberRole role, Clan clan)
                {
                    this.Role = role;

                    if (role == MemberRole.Owner)
                    {
                        MemberFFEnabled = configData.Clans.DefaultEnableFF;
                        AllyFFEnabled = configData.Clans.Alliance.DefaultEnableFF;
                    }
                    else
                    {
                        MemberFFEnabled = configData.Clans.OwnerFF ? clan.GetOwner().MemberFFEnabled : configData.Clans.DefaultEnableFF;
                        AllyFFEnabled = configData.Clans.Alliance.OwnerFF ? clan.GetOwner().AllyFFEnabled : configData.Clans.Alliance.DefaultEnableFF;
                    }
                }

                public Member(MemberRole role, bool memberFFEnabled, bool allyFFEnabled)
                {
                    this.Role = role;

                    MemberFFEnabled = memberFFEnabled;
                    AllyFFEnabled = allyFFEnabled;
                }

                public void OnClanMemberHit(string victimName)
                {
                    if (Time.time - lastFFAttackTime > 3f)
                    {
                        Player.ChatMessage(string.Format(msg("Notification.FF.OnHitClanMember", Player.UserIDString), victimName, configData.Commands.FFCommand));
                        lastFFAttackTime = Time.time;
                    }
                }

                public void OnAllyMemberHit(string victimName)
                {
                    if (Time.time - lastAFFAttackTime > 3f)
                    {
                        Player.ChatMessage(string.Format(msg("Notification.FF.OnHitAllyMember", Player.UserIDString), victimName, configData.Commands.AFFCommand));
                        lastAFFAttackTime = Time.time;
                    }
                }

                public enum MemberRole { Owner, Council, Moderator, Member }
            }

            [Serializable, ProtoContract]
            public class MemberInvite
            {
                [ProtoMember(1)]
                public string DisplayName { get; set; }

                [ProtoMember(2)]
                public double ExpiryTime { get; set; }

                public MemberInvite() { }

                public MemberInvite(BasePlayer player)
                {
                    DisplayName = player.displayName;
                    ExpiryTime = UnixTimeStampUTC();
                }
            }

            [JsonIgnore, ProtoIgnore]
            private JObject serializedClanObject;

            internal JObject ToJObject()
            {
                if (serializedClanObject != null)
                    return serializedClanObject;

                serializedClanObject = new JObject();
                serializedClanObject["tag"] = Tag;
                serializedClanObject["description"] = Description;
                serializedClanObject["owner"] = OwnerID;
                serializedClanObject["council"] = CouncilID;

                JArray jmoderators = new JArray();
                JArray jmembers = new JArray();

                foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                {
                    if (kvp.Value.Role == Member.MemberRole.Moderator)
                        jmoderators.Add(kvp.Key);

                    jmembers.Add(kvp.Key);
                }

                serializedClanObject["moderators"] = jmoderators;
                serializedClanObject["members"] = jmembers;

                JArray jallies = new JArray();

                foreach (string ally in Alliances)
                    jallies.Add(ally);

                serializedClanObject["allies"] = jallies;

                JArray jinvallies = new JArray();

                foreach (KeyValuePair<string, double> ally in AllianceInvites)
                    jinvallies.Add(ally.Key);

                serializedClanObject["invitedallies"] = jinvallies;

                return serializedClanObject;
            }

            internal ulong FindPlayer(string partialNameOrID)
            {
                foreach (KeyValuePair<ulong, Member> kvp in ClanMembers)
                {
                    if (kvp.Key.Equals(partialNameOrID))
                        return kvp.Key;

                    if (kvp.Value.DisplayName.Contains(partialNameOrID, CompareOptions.OrdinalIgnoreCase))
                        return kvp.Key;
                }

                return 0UL;
            }
        }
        #endregion

        #region Console Commands        
        [ConsoleCommand("clans")]
        private void ccmdClans(ConsoleSystem.Arg arg)
        {
            bool isRcon = arg.Connection == null;
            if (isRcon || (arg.Connection?.player != null && arg.Connection?.authLevel > 0))
            {
                if (arg.Args == null || arg.Args.Length == 0)
                {
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("> Clans command overview <");
                    sb.AppendLine("clans list (Lists all clans, their owners and their member-count)");
                    sb.AppendLine("clans listex (Lists all clans, their owners/members and their on-line status)");
                    sb.AppendLine("clans show \'tag|partialNameOrId\' (lists the chosen clan (or clan by user) and the members with status)");
                    sb.AppendLine("clans msg \'tag\' \'message without quotes\' (Sends a clan message)");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Create)
                        sb.AppendLine("clans create \'tag(case-sensitive)\' \'steam-id(owner)\' \'desc(optional)\'");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Reserve)
                        sb.AppendLine("clans reserve \'tag(case-sensitive)\' \'steam-id(optional)\'. If not steam ID is supplied, and that clan tag is already in use, it will reserve the tag for all members of that clan");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Rename)
                        sb.AppendLine("clans rename \'old tag\' \'new tag\' (renames a clan | case-sensitive)");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Disband)
                        sb.AppendLine("clans disband \'tag\' (disbands a clan)");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Invite)
                    {
                        sb.AppendLine("clans invite \'tag\' \'partialNameOrId\' (sends clan invitation to a player)");
                        sb.AppendLine("clans join \'tag\' \'partialNameOrId\' (joins a player into a clan)");
                    }

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Kick)
                        sb.AppendLine("clans kick \'tag\' \'partialNameOrId\' (kicks a member from a clan | deletes invite)");

                    if (isRcon || arg.Connection.authLevel >= configData.Commands.Auth.Promote)
                    {
                        sb.AppendLine("clans owner \'tag\' \'partialNameOrId\' (sets a new owner)");
                        sb.AppendLine("clans promote \'tag\' \'partialNameOrId\' (promotes a member)");
                        sb.AppendLine("clans demote \'tag\' \'partialNameOrId\' (demotes a member)");
                    }

                    SendReply(arg, sb.ToString());
                    return;
                }

                int authLevel = isRcon ? 2 : (int)arg.Connection.authLevel;
                switch (arg.Args[0].ToLower())
                {
                    case "list":
                        {
                            TextTable textTable = new TextTable();
                            textTable.AddColumn("Tag");
                            textTable.AddColumn("Owner");
                            textTable.AddColumn("SteamID");
                            textTable.AddColumn("Count");
                            textTable.AddColumn("On");

                            foreach (Clan clan in storedData.clans.Values)
                            {
                                string ownerName = clan.ClanMembers.FirstOrDefault(x => x.Value.Role == Clan.Member.MemberRole.Owner).Value?.DisplayName ?? string.Empty;
                                textTable.AddRow(new string[] { clan.Tag, ownerName, clan.OwnerID.ToString(), clan.MemberCount.ToString(), clan.OnlineCount.ToString() });
                            }

                            SendReply(arg, "\n>> Current clans <<\n" + textTable);
                        }
                        return;
                    case "listex":
                        {
                            TextTable textTable = new TextTable();
                            textTable.AddColumn("Tag");
                            textTable.AddColumn("Role");
                            textTable.AddColumn("Name");
                            textTable.AddColumn("SteamID");
                            textTable.AddColumn("Status");
                            foreach (Clan clan in storedData.clans.Values)
                            {
                                foreach (KeyValuePair<ulong, Clan.Member> kvp in clan.ClanMembers)
                                {
                                    textTable.AddRow(new string[] { clan.Tag, kvp.Value.Role.ToString(), kvp.Value.DisplayName, kvp.Key.ToString(), kvp.Value.Player != null ? "Online" : "Offline" });
                                }

                                textTable.AddRow(new string[] { });
                            }

                            SendReply(arg, "\n>> Current clans with members <<\n" + textTable);
                        }
                        return;
                    case "show":
                        {
                            if (arg.Args.Length < 2)
                            {
                                SendReply(arg, "Usage: clans show \'tag|partialNameOrId\'");
                                return;
                            }

                            Clan clan = storedData.FindClan(arg.Args[1]);
                            if (clan == null)
                            {
                                Oxide.Core.Libraries.Covalence.IPlayer iPlayer = covalence.Players.FindPlayer(arg.Args[1]);
                                if (iPlayer != null)
                                {
                                    clan = storedData.FindClanByID(ulong.Parse(iPlayer.Id));
                                }
                            }

                            if (clan == null)
                            {
                                SendReply(arg, $"No clan or player found with: {arg.Args[1]}");
                                return;
                            }

                            StringBuilder sb = new StringBuilder();
                            sb.AppendLine($"\n>> Show clan [{clan.Tag}] <<");
                            sb.AppendLine($"Description: {clan.Description}");
                            sb.AppendLine($"Time created: {UnixTimeStampToDateTime(clan.CreationTime)}");
                            sb.AppendLine($"Last online: {UnixTimeStampToDateTime(clan.LastOnlineTime)}");
                            sb.AppendLine($"Member count: {clan.MemberCount}");

                            TextTable textTable = new TextTable();
                            textTable.AddColumn("Role");
                            textTable.AddColumn("Name");
                            textTable.AddColumn("SteamID");
                            textTable.AddColumn("Status");
                            sb.AppendLine();
                            foreach (KeyValuePair<ulong, Clan.Member> kvp in clan.ClanMembers)
                            {
                                textTable.AddRow(new string[] { clan.Tag, kvp.Value.Role.ToString(), kvp.Value.DisplayName, kvp.Key.ToString(), kvp.Value.Player != null ? "Online" : "Offline" });
                            }

                            sb.AppendLine(textTable.ToString());
                            SendReply(arg, sb.ToString());
                            SendReply(arg, $"Allied Clans: {clan.Alliances.ToSentence()}");
                        }
                        return;
                    case "msg":
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans.msg \'tag\' \'your message without quotes\'");
                                return;
                            }

                            Clan clan = storedData.FindClan(arg.Args[1]);
                            if (clan == null)
                            {
                                SendReply(arg, $"Unable to find a clan with the tag: {arg.Args[1]}");
                                return;
                            }

                            string message = string.Join(" ", arg.Args.Skip(2));

                            clan.LocalizedBroadcast("Admin.BroadcastToClan", message);
                            SendReply(arg, $"Broadcast to [{clan.Tag}]: {message}");
                        }
                        return;
                    case "create":
                        if (authLevel >= configData.Commands.Auth.Create)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans create \'tag(case-sensitive)\' \'steamid(owner)\' \'desc(optional)\'");
                                return;
                            }

                            string tag = arg.Args[1];

                            if (tag.Length < configData.Tags.TagLength.Minimum || tag.Length > configData.Tags.TagLength.Maximum)
                            {
                                SendReply(arg, $"Invalid tag length, it must be between {configData.Tags.TagLength.Minimum} and {configData.Tags.TagLength.Maximum} characters long");
                                return;
                            }

                            if (tagFilter.IsMatch(tag) || ContainsBlockedWord(tag))
                            {
                                SendReply(arg, "Invalid characters or blocked words detected in tag");
                                return;
                            }

                            if (ClanTagExists(tag))
                            {
                                SendReply(arg, "A clan with that tag already exists");
                                return;
                            }

                            Core.Libraries.Covalence.IPlayer owner = covalence.Players.FindPlayerById(arg.Args[2]);
                            if (owner == null)
                            {
                                SendReply(arg, "No player found with that ID");
                                return;
                            }

                            BasePlayer ownerPlayer = owner.Object as BasePlayer;
                            ulong ownerID = ulong.Parse(owner.Id);

                            if (storedData.FindClanByID(ownerID) != null)
                            {
                                SendReply(arg, "The specified owner is already in a clan");
                                return;
                            }

                            string description = arg.Args.Length > 3 ? string.Join(" ", arg.Args.Skip(3)) : string.Empty;

                            storedData.clans[tag] = ownerPlayer != null ? new Clan(ownerPlayer, tag, description) :
                                new Clan() { Tag = tag, Description = StripHTMLTags(description), OwnerID = ownerID, CreationTime = UnixTimeStampUTC(), LastOnlineTime = UnixTimeStampUTC(), ClanMembers = new Hash<ulong, Clan.Member>() { [ownerID] = new Clan.Member() { Role = Clan.Member.MemberRole.Owner } } };

                            storedData.RegisterPlayer(ownerID, tag);

                            if (ownerPlayer != null)
                            {
                                ownerPlayer.ChatMessage(string.Format(msg("Notification.Create.Success", ownerPlayer.UserIDString), tag));
                                OnPlayerConnected(ownerPlayer);
                            }

                            Interface.CallHook("OnClanCreate", tag);

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) created the clan [{tag}] for {owner.Name}", this);

                            SendReply(arg, $"You created the clan {tag} and set {owner.Name} as the owner");
                        }
                        return;
                    case "reserve":
                        if (authLevel >= configData.Commands.Auth.Create)
                        {
                            if (arg.Args.Length < 2)
                            {
                                SendReply(arg, "Usage: clans reserve \'tag(case-sensitive)\' \'steamid(optional)\'");
                                return;
                            }

                            string tag = arg.Args[1];
                            ulong steamid = arg.GetUInt64(2);

                            if (tag.Length < configData.Tags.TagLength.Minimum || tag.Length > configData.Tags.TagLength.Maximum)
                            {
                                SendReply(arg, $"Invalid tag length, it must be between {configData.Tags.TagLength.Minimum} and {configData.Tags.TagLength.Maximum} characters long");
                                return;
                            }

                            if (tagFilter.IsMatch(tag) || ContainsBlockedWord(tag))
                            {
                                SendReply(arg, "Invalid characters or blocked words detected in tag");
                                return;
                            }

                            if (steamid != 0UL)
                            {
                                configData.Tags.ReservedClanTags[tag] = new List<ulong> { steamid };
                                SendReply(arg, $"You have reserved the clan tag '{tag}' to Steam ID {steamid}");
                            }
                            else
                            {
                                Clan clan = storedData.FindClan(tag);
                                if (clan == null)
                                {
                                    SendReply(arg, $"No clan found with the tag : {tag}");
                                    return;
                                }

                                configData.Tags.ReservedClanTags[tag] = new List<ulong>(clan.ClanMembers.Keys);
                                SendReply(arg, $"You have reserved the clan tag '{tag}' to Steam IDs : {clan.ClanMembers.Keys.ToSentence()}");
                            }

                            SaveConfig();
                        }
                        return;
                    case "rename":
                        if (authLevel >= configData.Commands.Auth.Rename)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans rename \'oldtag(case-sensitive)\' \'newtag(case-sensitive)\'");
                                return;
                            }

                            string oldTag = arg.Args[1];
                            Clan clan = storedData.FindClan(oldTag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            string newTag = arg.Args[2];

                            if (newTag.Length < configData.Tags.TagLength.Minimum || newTag.Length > configData.Tags.TagLength.Maximum)
                            {
                                SendReply(arg, $"Invalid tag length, it must be between {configData.Tags.TagLength.Minimum} and {configData.Tags.TagLength.Maximum} characters long");
                                return;
                            }

                            if (ClanTagExists(newTag))
                            {
                                SendReply(arg, "A clan with that tag already exists");
                                return;
                            }

                            clan.Tag = newTag;
                            storedData.clans[newTag] = clan;
                            storedData.clans.Remove(oldTag);

                            foreach (Clan otherClan in storedData.clans.Values)
                            {
                                if (otherClan == clan)
                                    continue;

                                if (otherClan.Alliances.Contains(oldTag))
                                {
                                    otherClan.Alliances.Remove(oldTag);
                                    otherClan.Alliances.Add(newTag);
                                    otherClan.MarkDirty();
                                }

                                if (otherClan.AllianceInvites.ContainsKey(oldTag))
                                {
                                    double time = otherClan.AllianceInvites[oldTag];
                                    otherClan.AllianceInvites.Remove(oldTag);
                                    otherClan.AllianceInvites.Add(newTag, time);
                                }
                            }

                            if (configData.Permissions.PermissionGroups)
                            {
                                permission.RemoveGroup(configData.Permissions.PermissionGroupPrefix + oldTag);
                                permission.CreateGroup(configData.Permissions.PermissionGroupPrefix + newTag, "Clan " + newTag, 0);
                            }

                            foreach (KeyValuePair<ulong, Clan.Member> kvp in clan.ClanMembers)
                            {
                                storedData.RegisterPlayer(kvp.Key, newTag);
                                if (kvp.Value.Player != null)
                                    OnPlayerConnected(kvp.Value.Player);
                            }

                            storedData.OnClanRenamed(oldTag, newTag);

                            clan.LocalizedBroadcast("Admin.Rename", newTag);

                            clan.MarkDirty();

                            SendReply(arg, $"You have changed the tag for clan {oldTag} to {newTag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) renamed clan tag {oldTag} to {newTag}", this);
                        }
                        return;
                    case "disband":
                        if (authLevel >= configData.Commands.Auth.Disband)
                        {
                            if (arg.Args.Length < 2)
                            {
                                SendReply(arg, "Usage: clans disband \'tag(case-sensitive)\'");
                                return;
                            }

                            Clan clan = storedData.FindClan(arg.Args[1]);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            clan.LocalizedBroadcast("Admin.Disband");
                            clan.DisbandClan();

                            SendReply(arg, $"You have disbanded the clan {arg.Args[1]}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) disbanded the clan {arg.Args[1]}", this);
                        }
                        return;
                    case "invite":
                        if (authLevel >= configData.Commands.Auth.Invite)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans invite \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            Clan clan = storedData.FindClan(arg.Args[1]);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            if (storedData.FindClanByID(player.userID) != null)
                            {
                                SendReply(arg, "The specified player is already a member of a clan");
                                return;
                            }

                            if (clan.ClanMembers.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified player is already a member of that clan");
                                return;
                            }

                            if (clan.MemberInvites.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified player already has a invitation to join that clan");
                                return;
                            }

                            if (clan.MemberCount >= configData.Clans.MemberLimit)
                            {
                                SendReply(arg, "The specified clan is already at capacity");
                                return;
                            }

                            if (clan.MemberInviteCount >= configData.Clans.Invites.MemberInviteLimit)
                            {
                                SendReply(arg, "The specified clan already has the maximum amount of invitations");
                                return;
                            }

                            clan.MemberInvites[player.userID] = new Clan.MemberInvite(player);

                            if (configData.Clans.Teams.Enabled)
                                clan.PlayerTeam.SendInvite(player);

                            player.ChatMessage(string.Format(msg("Notification.Invite.SuccesTarget", player.UserIDString), clan.Tag, clan.Description, configData.Commands.ClanCommand));
                            clan.LocalizedBroadcast("Admin.Invite", player.displayName);

                            SendReply(arg, $"You have invited {player.displayName} to clan {clan.Tag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) invited {player.displayName} to the clan {arg.Args[1]}", this);
                        }
                        return;
                    case "join":
                        if (authLevel >= configData.Commands.Auth.Invite)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans join \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            string tag = arg.Args[1];

                            Clan clan = storedData.FindClan(tag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            Clan otherClan = storedData.FindClanByID(player.userID);
                            if (otherClan != null)
                            {
                                SendReply(arg, "The specified player is already in a clan");
                                return;
                            }

                            if (!clan.MemberInvites.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified player does not have a invite to that clan");
                                return;
                            }

                            if ((UnixTimeStampUTC() - clan.MemberInvites[player.userID].ExpiryTime > configData.Clans.Invites.AllianceInviteExpireTime))
                            {
                                clan.MemberInvites.Remove(player.userID);
                                SendReply(arg, "The specified players clan invite has expired");
                                return;
                            }

                            if (clan.MemberCount >= configData.Clans.MemberLimit)
                            {
                                SendReply(arg, "The specified clan is already at member capacity");
                                return;
                            }

                            clan.MemberInvites.Remove(player.userID);

                            List<ulong> currentMembers = clan.ClanMembers.Select(x => x.Key).ToList();

                            clan.ClanMembers.Add(player.userID, new Clan.Member(Clan.Member.MemberRole.Member, clan));

                            Instance.storedData.RegisterPlayer(player.userID, clan.Tag);

                            OnPlayerConnected(player);

                            player.ChatMessage(string.Format(msg("Admin.Join", player.UserIDString), clan.Tag));
                            clan.LocalizedBroadcast("Notification.Join.Message", player.displayName);

                            clan.MarkDirty();

                            Interface.Oxide.CallHook("OnClanMemberJoined", (ulong)player.userID, clan.Tag);
                            Interface.Oxide.CallHook("OnClanMemberJoined", (ulong)player.userID, currentMembers);

                            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);

                            SendReply(arg, $"You have force joined {player.displayName} to clan {clan.Tag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) forced {player.displayName} to join the clan {arg.Args[1]}", this);
                        }
                        return;
                    case "kick":
                        if (authLevel >= configData.Commands.Auth.Kick)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans kick \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            string tag = arg.Args[1];
                            Clan clan = storedData.FindClan(tag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            if (!clan.ClanMembers.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified user is not in that clan");
                                return;
                            }

                            if (configData.Clans.Teams.Enabled && clan.PlayerTeam != null)
                                RemoveFromTeam(clan.PlayerTeam, player);

                            OnPlayerDisconnected(player);
                            clan.ClanMembers.Remove(player.userID);
                            storedData.UnregisterPlayer(player.userID);

                            player.ChatMessage(string.Format(msg("Admin.Kick", player.UserIDString), clan.Tag));
                            clan.LocalizedBroadcast("Admin.Kick.Broadcast", player.displayName);

                            clan.MarkDirty();

                            Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, clan.Tag);
                            Interface.Oxide.CallHook("OnClanMemberGone", (ulong)player.userID, clan.ClanMembers.Select(x => x.Key).ToList());

                            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);

                            SendReply(arg, $"You have kicked {player.displayName} from clan {clan.Tag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) kicked {player.displayName} from the clan {clan.Tag}", this);
                        }
                        return;
                    case "owner":
                        if (authLevel >= configData.Commands.Auth.Promote)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans owner \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            string tag = arg.Args[1];

                            Clan clan = storedData.FindClan(tag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            if (!clan.ClanMembers.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified player is not a member of that clan");
                                return;
                            }

                            if (clan.IsOwner(player.userID))
                            {
                                SendReply(arg, "The specified player is already the clan owner");
                                return;
                            }

                            Clan.Member currentOwner = clan.ClanMembers[clan.OwnerID];
                            currentOwner.Role = Clan.Member.MemberRole.Member;

                            Clan.Member member = clan.ClanMembers[player.userID];
                            member.Role = Clan.Member.MemberRole.Owner;
                            clan.OwnerID = player.userID;

                            if (configData.Clans.Teams.Enabled)
                                clan.PlayerTeam?.SetTeamLeader(player.userID);

                            clan.LocalizedBroadcast("Admin.SetOwner", string.Format(COLORED_LABEL, clan.GetRoleColor(Clan.Member.MemberRole.Owner), player.displayName));

                            clan.MarkDirty();

                            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);

                            SendReply(arg, $"You have set {player.displayName} as owner of the clan {clan.Tag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) set {player.displayName} as the owner of the clan {clan.Tag}", this);
                        }
                        return;
                    case "promote":
                        if (authLevel >= configData.Commands.Auth.Promote)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans promote \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            string tag = arg.Args[1];

                            Clan clan = storedData.FindClan(tag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            if (!clan.ClanMembers.ContainsKey(player.userID))
                            {
                                SendReply(arg, "The specified player is not a member of that clan");
                                return;
                            }

                            if (clan.IsOwner(player.userID))
                            {
                                SendReply(arg, "The specified player is already the clan owner");
                                return;
                            }

                            if (configData.Clans.Alliance.Enabled)
                            {
                                if (clan.IsCouncil(player.userID))
                                {
                                    SendReply(arg, "The specified player is already the highest rank they can be");
                                    return;
                                }

                                if (clan.IsModerator(player.userID) && clan.HasCouncil())
                                {
                                    SendReply(arg, "The specified player is already the highest rank they can be");
                                    return;
                                }
                            }
                            else
                            {
                                if (clan.IsModerator(player.userID))
                                {
                                    SendReply(arg, "The specified player is already the highest rank they can be");
                                    return;
                                }
                            }

                            if (clan.IsMember(player.userID) && clan.ModeratorCount >= configData.Clans.ModeratorLimit)
                            {
                                SendReply(arg, "The specified player is already the highest rank they can be");
                                return;
                            }

                            Clan.Member member = clan.ClanMembers[player.userID];
                            member.Role = (Clan.Member.MemberRole)((int)member.Role - 1);

                            clan.MarkDirty();

                            clan.LocalizedBroadcast("Admin.Promote", player.displayName, string.Format(COLORED_LABEL, clan.GetRoleColor(member.Role), member.Role));
                            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);

                            SendReply(arg, $"You have promoted {player.displayName} to rank {member.Role} in clan {clan.Tag}");

                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) promoted {player.displayName} to the rank of {member.Role} in the clan {clan.Tag}", this);
                        }
                        return;
                    case "demote":
                        if (authLevel >= configData.Commands.Auth.Promote)
                        {
                            if (arg.Args.Length < 3)
                            {
                                SendReply(arg, "Usage: clans demote \'tag(case-sensitive)\' \'partialNameOrId\'");
                                return;
                            }

                            string tag = arg.Args[1];

                            Clan clan = storedData.FindClan(tag);
                            if (clan == null)
                            {
                                SendReply(arg, "No clan found with the specified tag");
                                return;
                            }

                            BasePlayer player = FindPlayer(arg.Args[2]);
                            if (!player)
                            {
                                SendReply(arg, "Unable to find a player with the specified name or ID");
                                return;
                            }

                            if (clan.IsOwner(player.userID))
                            {
                                SendReply(arg, "You can not demote the clan owner");
                                return;
                            }

                            if (clan.IsMember(player.userID))
                            {
                                SendReply(arg, "The specified player is already at the lowest rank");
                                return;
                            }

                            Clan.Member member = clan.ClanMembers[player.userID];
                            member.Role = member.Role == Clan.Member.MemberRole.Council ? (clan.ModeratorCount >= configData.Clans.ModeratorLimit ? Clan.Member.MemberRole.Member : Clan.Member.MemberRole.Moderator) : (Clan.Member.MemberRole)((int)member.Role + 1);

                            clan.MarkDirty();

                            clan.LocalizedBroadcast("Admin.Demote", player.displayName, string.Format(COLORED_LABEL, clan.GetRoleColor(member.Role), member.Role));

                            SendReply(arg, $"You have demoted {player.displayName} to rank {member.Role} in clan {clan.Tag}");

                            Interface.Oxide.CallHook("OnClanUpdate", clan.Tag);
                            if (configData.Options.LogChanges)
                                LogToFile(Title, $"Server ({(isRcon ? "ADMIN" : (arg.Connection.player as BasePlayer).displayName)}) demoted {player.displayName} to the rank of {member.Role} in the clan {clan.Tag}", this);
                        }
                        return;
                    default:
                        SendReply(arg, "Invalid syntax! Type \"clans\" in console to see available commands");
                        return;
                }
            }
        }
        #endregion

        #region Config        
        internal static ConfigData configData;

        internal class ConfigData
        {
            [JsonProperty(PropertyName = "Clan Options")]
            public ClanOptions Clans { get; set; }

            [JsonProperty(PropertyName = "Command Options")]
            public CommandOptions Commands { get; set; }

            [JsonProperty(PropertyName = "Role Colors")]
            public ColorOptions Colors { get; set; }

            [JsonProperty(PropertyName = "Clan Tag Options")]
            public TagOptions Tags { get; set; }

            [JsonProperty(PropertyName = "Permission Options")]
            public PermissionOptions Permissions { get; set; }

            [JsonProperty(PropertyName = "Purge Options")]
            public PurgeOptions Purge { get; set; }

            [JsonProperty(PropertyName = "Settings")]
            public OtherOptions Options { get; set; }

            public class ClanOptions
            {
                [JsonProperty(PropertyName = "Member limit")]
                public int MemberLimit { get; set; }

                [JsonProperty(PropertyName = "Moderator limit")]
                public int ModeratorLimit { get; set; }

                [JsonProperty(PropertyName = "Allow friendly fire toggle (clan members)")]
                public bool MemberFF { get; set; }

                [JsonProperty(PropertyName = "Enable friendly fire by default (clan members)")]
                public bool DefaultEnableFF { get; set; }

                [JsonProperty(PropertyName = "Only allow clan owner and council to toggle friendly fire (clan members)")]
                public bool OwnerFF { get; set; }

                [JsonProperty(PropertyName = "Alliance Options")]
                public AllianceOptions Alliance { get; set; }

                [JsonProperty(PropertyName = "Invite Options")]
                public InviteOptions Invites { get; set; }

                [JsonProperty(PropertyName = "Rust Team Options")]
                public TeamOptions Teams { get; set; }

                public class AllianceOptions
                {
                    [JsonProperty(PropertyName = "Enable clan alliances")]
                    public bool Enabled { get; set; }

                    [JsonProperty(PropertyName = "Alliance limit")]
                    public int AllianceLimit { get; set; }

                    [JsonProperty(PropertyName = "Count alliance members as clan members")]
                    public bool CountAllianceMembers { get; set; }

                    [JsonProperty(PropertyName = "Allow friendly fire toggle (allied clans)")]
                    public bool AllyFF { get; set; }

                    [JsonProperty(PropertyName = "Enable friendly fire by default (allied clans)")]
                    public bool DefaultEnableFF { get; set; }

                    [JsonProperty(PropertyName = "Only allow clan owner and council to toggle friendly fire (allied clans)")]
                    public bool OwnerFF { get; set; }
                }

                public class InviteOptions
                {
                    [JsonProperty(PropertyName = "Maximum allowed member invites at any given time")]
                    public int MemberInviteLimit { get; set; }

                    [JsonProperty(PropertyName = "Member invite expiry time (seconds)")]
                    public int MemberInviteExpireTime { get; set; }

                    [JsonProperty(PropertyName = "Maximum allowed alliance invites at any given time")]
                    public int AllianceInviteLimit { get; set; }

                    [JsonProperty(PropertyName = "Alliance invite expiry time (seconds)")]
                    public int AllianceInviteExpireTime { get; set; }

                    [JsonProperty(PropertyName = "Member invite cooldown time after a member has left the clan (seconds)")]
                    public int InviteCooldownAfterMemberLeave { get; set; }
                }

                public class TeamOptions
                {
                    [JsonProperty(PropertyName = "Automatically create and manage Rust team's for each clan")]
                    public bool Enabled { get; set; }

                    [JsonProperty(PropertyName = "Allow players to leave their clan by using Rust's leave team button")]
                    public bool AllowLeave { get; set; }

                    [JsonProperty(PropertyName = "Allow players to kick members from their clan using Rust's kick member button")]
                    public bool AllowKick { get; set; }

                    [JsonProperty(PropertyName = "Allow players to invite other players to their clan via Rust's team invite system")]
                    public bool AllowInvite { get; set; }

                    [JsonProperty(PropertyName = "Allow players to promote other clan members via Rust's team promote button")]
                    public bool AllowPromote { get; set; }
                }
            }

            public class ColorOptions
            {
                [JsonProperty(PropertyName = "Clan owner color (hex)")]
                public string Owner { get; set; }

                [JsonProperty(PropertyName = "Clan council color (hex)")]
                public string Council { get; set; }

                [JsonProperty(PropertyName = "Clan moderator color (hex)")]
                public string Moderator { get; set; }

                [JsonProperty(PropertyName = "Clan member color (hex)")]
                public string Member { get; set; }

                [JsonProperty(PropertyName = "General text color (hex)")]
                public string TextColor { get; set; }
            }

            public class TagOptions
            {
                [JsonProperty(PropertyName = "Enable clan tags (Display Name)")]
                public bool Enabled { get; set; }

                [JsonProperty(PropertyName = "Enable clan tags (BetterChat)")]
                public bool EnabledBC { get; set; }

                [JsonProperty(PropertyName = "Tag opening character")]
                public string TagOpen { get; set; }

                [JsonProperty(PropertyName = "Tag closing character")]
                public string TagClose { get; set; }

                [JsonProperty(PropertyName = "Tag color (hex) (BetterChat)")]
                public string TagColor { get; set; }

                [JsonProperty(PropertyName = "Allow clan leaders to set custom tag colors (BetterChat only)")]
                public bool CustomColors { get; set; }

                [JsonProperty(PropertyName = "Custom tag color minimum value (hex)")]
                public string CustomTagColorMin { get; set; }

                [JsonProperty(PropertyName = "Custom tag color maximum value (hex)")]
                public string CustomTagColorMax { get; set; }

                [JsonProperty(PropertyName = "Blacklisted tag colors (hex without the # at the start)")]
                public string[] BlockedTagColors { get; set; }

                [JsonProperty(PropertyName = "Tag size (BetterChat)")]
                public int TagSize { get; set; }

                [JsonProperty(PropertyName = "Tag character limits")]
                public Range TagLength { get; set; }

                [JsonProperty(PropertyName = "Special characters allowed in tags")]
                public string AllowedCharacters { get; set; }

                [JsonProperty(PropertyName = "Words/characters not allowed in tags")]
                public string[] BlockedWords { get; set; }

                [JsonProperty(PropertyName = "Enable Oxide group clan tag colors (BetterChat)")]
                public bool EnabledGroupColors { get; set; }

                [JsonProperty(PropertyName = "Default tag colors per Oxide group (BetterChat)")]
                public Hash<string, string> GroupTagColors { get; set; }

                [JsonProperty(PropertyName = "Reserved clan tags (Tag, List of SteamIDs)")]
                public Hash<string, List<ulong>> ReservedClanTags { get; set; }
            }

            public class CommandOptions
            {
                [JsonProperty(PropertyName = "Ally chat command")]
                public string AllyChatCommand { get; set; }

                [JsonProperty(PropertyName = "Clan chat command")]
                public string ClanChatCommand { get; set; }

                [JsonProperty(PropertyName = "Clan command")]
                public string ClanCommand { get; set; }

                [JsonProperty(PropertyName = "Clan info command")]
                public string ClanInfoCommand { get; set; }

                [JsonProperty(PropertyName = "Ally friendly fire command")]
                public string AFFCommand { get; set; }

                [JsonProperty(PropertyName = "Friendly fire command")]
                public string FFCommand { get; set; }

                [JsonProperty(PropertyName = "Clan ally command")]
                public string ClanAllyCommand { get; set; }

                [JsonProperty(PropertyName = "Clan help command")]
                public string ClanHelpCommand { get; set; }

                [JsonProperty(PropertyName = "Required auth-levels to use admin console command")]
                public AdminAuth Auth { get; set; }

                [JsonProperty(PropertyName = "Clan info options")]
                public ClanInfo ClanInfoOptions { get; set; }

                public class ClanInfo
                {
                    [JsonProperty(PropertyName = "Show online/offline players")]
                    public bool Players { get; set; }

                    [JsonProperty(PropertyName = "Show clan alliances")]
                    public bool Alliances { get; set; }

                    [JsonProperty(PropertyName = "Show last online time")]
                    public bool LastOnline { get; set; }

                    [JsonProperty(PropertyName = "Show member count")]
                    public bool MemberCount { get; set; }

                    [JsonProperty(PropertyName = "Show alliance count")]
                    public bool AllianceCount { get; set; }
                }

                public class AdminAuth
                {
                    [JsonProperty(PropertyName = "Create clan")]
                    public int Create { get; set; }

                    [JsonProperty(PropertyName = "Rename clan")]
                    public int Rename { get; set; }

                    [JsonProperty(PropertyName = "Disband clan")]
                    public int Disband { get; set; }

                    [JsonProperty(PropertyName = "Invite member to clan")]
                    public int Invite { get; set; }

                    [JsonProperty(PropertyName = "Kick member from clan")]
                    public int Kick { get; set; }

                    [JsonProperty(PropertyName = "Promote/Demote member in clan")]
                    public int Promote { get; set; }

                    [JsonProperty(PropertyName = "Reserve clan tag for member or group")]
                    public int Reserve { get; set; }
                }
            }

            public class PermissionOptions
            {
                [JsonProperty(PropertyName = "Use permission for clan info command")]
                public bool UsePermissionClanInfo { get; set; }

                [JsonProperty(PropertyName = "Clan info command permission")]
                public string ClanInfoPermission { get; set; }

                [JsonProperty(PropertyName = "Use permission groups")]
                public bool PermissionGroups { get; set; }

                [JsonProperty(PropertyName = "Permission group prefix")]
                public string PermissionGroupPrefix { get; set; }

                [JsonProperty(PropertyName = "Use permission to create a clan")]
                public bool UsePermissionCreate { get; set; }

                [JsonProperty(PropertyName = "Clan creation permission")]
                public string PermissionCreate { get; set; }

                [JsonProperty(PropertyName = "Use permission to join a clan")]
                public bool UsePermissionJoin { get; set; }

                [JsonProperty(PropertyName = "Clan join permission")]
                public string PermissionJoin { get; set; }

                [JsonProperty(PropertyName = "Use permission to leave a clan")]
                public bool UsePermissionLeave { get; set; }

                [JsonProperty(PropertyName = "Clan leave permission")]
                public string PermissionLeave { get; set; }

                [JsonProperty(PropertyName = "Use permission to disband a clan")]
                public bool UsePermissionDisband { get; set; }

                [JsonProperty(PropertyName = "Clan disband permission")]
                public string PermissionDisband { get; set; }

                [JsonProperty(PropertyName = "Use permission to kick a clan member")]
                public bool UsePermissionKick { get; set; }

                [JsonProperty(PropertyName = "Clan kick permission")]
                public string PermissionKick { get; set; }
            }

            public class PurgeOptions
            {
                [JsonProperty(PropertyName = "Enable clan purging")]
                public bool Enabled { get; set; }

                [JsonProperty(PropertyName = "Purge clans that havent been online for x amount of day")]
                public int OlderThanDays { get; set; }

                [JsonProperty(PropertyName = "List purged clans in console when purging")]
                public bool ListPurgedClans { get; set; }

                [JsonProperty(PropertyName = "Wipe clans on new map save")]
                public bool WipeOnNewSave { get; set; }
            }

            public class OtherOptions
            {
                [JsonProperty(PropertyName = "Block clan/ally chat when muted")]
                public bool DenyOnMuted { get; set; }

                [JsonProperty(PropertyName = "Log clan and member changes")]
                public bool LogChanges { get; set; }

                [JsonProperty(PropertyName = "Use ProtoBuf data storage")]
                public bool UseProtoStorage { get; set; }
            }

            public class Range
            {
                public int Minimum { get; set; }
                public int Maximum { get; set; }

                public Range() { }

                public Range(int minimum, int maximum)
                {
                    this.Minimum = minimum;
                    this.Maximum = maximum;
                }
            }

            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                Clans = new ConfigData.ClanOptions
                {
                    Alliance = new ConfigData.ClanOptions.AllianceOptions
                    {
                        AllianceLimit = 2,
                        AllyFF = true,
                        DefaultEnableFF = false,
                        OwnerFF = false,
                        Enabled = true
                    },
                    Invites = new ConfigData.ClanOptions.InviteOptions
                    {
                        AllianceInviteExpireTime = 86400,
                        AllianceInviteLimit = 2,
                        MemberInviteExpireTime = 86400,
                        MemberInviteLimit = 8,
                        InviteCooldownAfterMemberLeave = 0
                    },
                    MemberFF = true,
                    DefaultEnableFF = false,
                    OwnerFF = false,
                    MemberLimit = 8,
                    ModeratorLimit = 2,
                    Teams = new ConfigData.ClanOptions.TeamOptions
                    {
                        AllowInvite = true,
                        AllowKick = true,
                        AllowLeave = true,
                        AllowPromote = true,
                        Enabled = true
                    }
                },
                Colors = new ConfigData.ColorOptions
                {
                    Council = "#b573ff",
                    Member = "#fcf5cb",
                    Moderator = "#74c6ff",
                    Owner = "#a1ff46",
                    TextColor = "#e0e0e0"
                },
                Commands = new ConfigData.CommandOptions
                {
                    AllyChatCommand = "a",
                    ClanChatCommand = "c",
                    ClanAllyCommand = "clanally",
                    ClanCommand = "clan",
                    ClanHelpCommand = "clanhelp",
                    ClanInfoCommand = "cinfo",
                    FFCommand = "cff",
                    AFFCommand = "aff",
                    Auth = new ConfigData.CommandOptions.AdminAuth
                    {
                        Create = 2,
                        Disband = 2,
                        Invite = 1,
                        Kick = 2,
                        Promote = 1,
                        Rename = 1,
                        Reserve = 2
                    },
                    ClanInfoOptions = new ConfigData.CommandOptions.ClanInfo
                    {
                        Alliances = true,
                        LastOnline = true,
                        Players = true,
                        AllianceCount = false,
                        MemberCount = false
                    }
                },
                Options = new ConfigData.OtherOptions
                {
                    LogChanges = false,
                    UseProtoStorage = false,
                    DenyOnMuted = false,
                },
                Permissions = new ConfigData.PermissionOptions
                {
                    UsePermissionClanInfo = false,
                    ClanInfoPermission = "clans.claninfo",
                    PermissionCreate = "clans.cancreate",
                    PermissionDisband = "clans.candisband",
                    PermissionGroupPrefix = "clan_",
                    PermissionGroups = false,
                    PermissionJoin = "clans.canjoin",
                    PermissionLeave = "clans.canleave",
                    PermissionKick = "clans.cankick",
                    UsePermissionDisband = false,
                    UsePermissionLeave = false,
                    UsePermissionCreate = false,
                    UsePermissionJoin = false,
                    UsePermissionKick = false,
                },
                Purge = new ConfigData.PurgeOptions
                {
                    Enabled = true,
                    ListPurgedClans = true,
                    OlderThanDays = 14,
                    WipeOnNewSave = false
                },
                Tags = new ConfigData.TagOptions
                {
                    AllowedCharacters = "!²³",
                    BlockedWords = new string[] { "admin", "mod", "owner" },
                    CustomColors = false,
                    Enabled = true,
                    TagClose = "]",
                    TagColor = "#aaff55",
                    TagLength = new ConfigData.Range(2, 5),
                    TagOpen = "[",
                    TagSize = 15,
                    CustomTagColorMin = "000000",
                    CustomTagColorMax = "FFFFFF",
                    BlockedTagColors = Array.Empty<string>(),
                    EnabledBC = false,
                    EnabledGroupColors = false,
                    GroupTagColors = new Hash<string, string>
                    {
                        ["admin"] = "#aaff55",
                        ["default"] = "#aaff55"
                    },
                    ReservedClanTags = new Hash<string, List<ulong>>
                    {
                        ["example1"] = new List<ulong>
                        {
                            76560000000000000,
                            76560000000000001
                        },
                        ["example2"] = new List<ulong>
                        {
                            76560000000000000,
                            76560000000000001
                        }
                    }
                },
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            ConfigData baseConfig = GetBaseConfig();

            if (configData.Version < new VersionNumber(3, 0, 0))
                configData = baseConfig;

            if (configData.Version < new VersionNumber(3, 0, 1))
                configData.Tags.TagColor = baseConfig.Tags.TagColor;

            if (configData.Version < new VersionNumber(3, 0, 13))
            {
                configData.Tags.CustomTagColorMin = baseConfig.Tags.CustomTagColorMin;
                configData.Tags.CustomTagColorMax = baseConfig.Tags.CustomTagColorMax;
            }

            if (configData.Version < new VersionNumber(3, 0, 14))
            {
                configData.Permissions.UsePermissionLeave = baseConfig.Permissions.UsePermissionLeave;
                configData.Permissions.UsePermissionDisband = baseConfig.Permissions.UsePermissionDisband;
                configData.Permissions.PermissionDisband = baseConfig.Permissions.PermissionDisband;
                configData.Permissions.PermissionLeave = baseConfig.Permissions.PermissionLeave;
            }

            if (configData.Version < new VersionNumber(3, 0, 15))
            {
                configData.Permissions.UsePermissionKick = baseConfig.Permissions.UsePermissionKick;
                configData.Permissions.PermissionKick = baseConfig.Permissions.PermissionKick;
            }

            if (configData.Version < new VersionNumber(3, 0, 23))
            {
                configData.Tags.Enabled = configData.Tags.EnabledBC = true;
                configData.Commands.ClanInfoOptions = baseConfig.Commands.ClanInfoOptions;
                configData.Tags.BlockedTagColors = Array.Empty<string>();
            }

            if (configData.Version < new VersionNumber(3, 0, 25))
            {
                if (configData.Tags.BlockedTagColors == null)
                    configData.Tags.BlockedTagColors = Array.Empty<string>();
            }

            if (configData.Version < new VersionNumber(3, 0, 28))
            {
                configData.Tags.EnabledGroupColors = false;
                configData.Tags.GroupTagColors = baseConfig.Tags.GroupTagColors;
            }

            if (configData.Version < new VersionNumber(3, 0, 30))
            {
                configData.Tags.ReservedClanTags = baseConfig.Tags.ReservedClanTags;
                configData.Commands.Auth.Reserve = baseConfig.Commands.Auth.Reserve;
            }

            if (configData.Version < new VersionNumber(3, 0, 32))
                configData.Permissions.ClanInfoPermission = baseConfig.Permissions.ClanInfoPermission;

            configData.Version = Version;
            PrintWarning("Config update completed!");
        }
        #endregion

        #region Data Management
        private void SaveData()
        {
            storedData.timeSaved = UnixTimeStampUTC();

            if (configData.Options.UseProtoStorage)
                ProtoStorage.Save<StoredData>(storedData, Title);
            else Interface.Oxide.DataFileSystem.WriteObject(Title, storedData);
        }

        private void LoadData()
        {
            try
            {
                StoredData protoStorage = ProtoStorage.Exists(Title) ? ProtoStorage.Load<StoredData>(new string[] { Title }) : null;
                StoredData jsonStorage = Interface.GetMod().DataFileSystem.ExistsDatafile(Title) ? Interface.GetMod().DataFileSystem.ReadObject<StoredData>(Title) : null;

                if (protoStorage == null && jsonStorage == null)
                {
                    Puts("No data file found! Creating new data file");
                    storedData = new StoredData();
                }
                else
                {
                    if (protoStorage == null && jsonStorage != null)
                        storedData = jsonStorage;
                    else if (protoStorage != null && jsonStorage == null)
                        storedData = protoStorage;
                    else
                    {
                        if (protoStorage.timeSaved > jsonStorage.timeSaved)
                        {
                            storedData = protoStorage;
                            Puts("Multiple data files found! ProtoBuf storage time stamp is newer than JSON storage. Loading ProtoBuf data file");
                        }
                        else
                        {
                            storedData = jsonStorage;
                            Puts("Multiple data files found! JSON storage time stamp is newer than ProtoBuf storage. Loading JSON data file");
                        }
                    }
                }

                if (wipeData)
                {
                    Puts("Backing up data file for data wipe...");
                    if (configData.Options.UseProtoStorage)
                    {
                        ProtoStorage.Save<StoredData>(storedData, Title + ".bak");
                        Puts($"Saved data file backup as {Title}.bak.data");
                    }
                    else
                    {
                        Interface.Oxide.DataFileSystem.WriteObject<StoredData>(Title + ".bak", storedData);
                        Puts($"Saved data file backup as {Title}.bak.json");
                    }

                    storedData.clans.Clear();
                }
            }
            catch { }

            if (storedData?.clans == null)
                storedData = new StoredData();
        }

        [ConsoleCommand("clans.convertdata")]
        private void ConvertFromOldData(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null)
                return;

            if (arg.Args == null || arg.Args.Length == 0)
            {
                SendReply(arg, "clans.convertdata <filename> - Load an old Clans data file and convert it to the new data structure\nThe file name is the name of the file without the extension, it must be a old .json or .proto file, and it must be in your /oxide/data/ folder");
                return;
            }

            string filename = arg.Args[0];

            if (!Interface.GetMod().DataFileSystem.ExistsDatafile(filename) && !ProtoStorage.Exists(new string[] { filename }))
            {
                SendReply(arg, "Unable to find a valid data file with that name");
                return;
            }

            OldDataStructure oldDataStructure = Interface.GetMod().DataFileSystem.ReadObject<OldDataStructure>(filename) ?? ProtoStorage.Load<OldDataStructure>(new string[] { filename });
            if (oldDataStructure == null)
            {
                SendReply(arg, $"Failed to deserialize old data file with the name {filename}");
                return;
            }

            ConvertFromOldData(arg, oldDataStructure);
        }

        private void ConvertFromOldData(ConsoleSystem.Arg arg, OldDataStructure oldData)
        {
            if (oldData.clans.Count == 0)
            {
                SendReply(arg, "No clans exist in the specified data file");
                return;
            }

            SendReply(arg, $"Converting {oldData.clans.Count} old clans to new data structure...");

            storedData = new StoredData();

            foreach (KeyValuePair<string, OldClan> kvp in oldData.clans)
            {
                OldClan oldClan = kvp.Value;

                if (string.IsNullOrEmpty(oldClan.tag) || string.IsNullOrEmpty(oldClan.owner))
                    continue;

                Clan clan = new Clan();
                clan.Tag = oldClan.tag;
                clan.Description = StripHTMLTags(oldClan.description) ?? string.Empty;
                clan.OwnerID = ulong.Parse(oldClan.owner);

                clan.CreationTime = clan.LastOnlineTime = UnixTimeStampUTC();

                oldClan.clanAlliances.ForEach((string x) => clan.Alliances.Add(x));

                oldClan.invitedAllies.ForEach((string x) => clan.AllianceInvites.Add(x, UnixTimeStampUTC()));

                foreach (KeyValuePair<string, int> invite in oldClan.invites)
                    clan.MemberInvites.Add(ulong.Parse(invite.Key), new Clan.MemberInvite() { DisplayName = string.Empty, ExpiryTime = invite.Value });

                oldClan.members.ForEach((string x) =>
                    clan.ClanMembers.Add(ulong.Parse(x),
                    new Clan.Member(!string.IsNullOrEmpty(oldClan.owner) && oldClan.owner.Equals(x) ? Clan.Member.MemberRole.Owner :
                                    !string.IsNullOrEmpty(oldClan.council) && oldClan.council.Equals(x) ? Clan.Member.MemberRole.Council :
                                    oldClan.moderators.Contains(x) ? Clan.Member.MemberRole.Moderator : Clan.Member.MemberRole.Member,
                                    configData.Clans.DefaultEnableFF, configData.Clans.Alliance.DefaultEnableFF)));

                storedData.clans[kvp.Key] = clan;
            }

            SaveData();

            SendReply(arg, $"Successfully converted {storedData.clans.Count} old clans to new data structure");

            if (initClansRoutine != null)
                ServerMgr.Instance.StopCoroutine(initClansRoutine);

            isInitialized = false;
            initClansRoutine = ServerMgr.Instance.StartCoroutine(InitializeClans());
        }

        [Serializable, ProtoContract]
        internal class StoredData
        {
            [ProtoMember(1)]
            public Hash<string, Clan> clans = new Hash<string, Clan>(StringComparer.OrdinalIgnoreCase);

            [ProtoMember(2)]
            public int timeSaved;

            [ProtoMember(3)]
            public Hash<ulong, List<string>> playerInvites = new Hash<ulong, List<string>>();

            [JsonIgnore, ProtoIgnore]
            private Hash<ulong, string> playerLookup = new Hash<ulong, string>();

            [JsonIgnore, ProtoIgnore]
            private Hash<string, string> clanLookup = new Hash<string, string>(StringComparer.OrdinalIgnoreCase);

            internal Clan FindClan(string tag)
            {
                if (clans.TryGetValue(tag, out Clan clan))
                    return clan;

                return null;
            }

            internal Clan FindClanByID(ulong playerId)
            {
                if (!playerLookup.TryGetValue(playerId, out string tag))
                    return null;

                return FindClan(tag);
            }

            internal Clan FindClanByID(string playerId) => FindClanByID(ulong.Parse(playerId));

            internal Clan.Member FindMemberByID(ulong playerId)
            {
                Clan.Member member = null;
                FindClanByID(playerId)?.ClanMembers.TryGetValue(playerId, out member);
                return member;
            }

            internal void RegisterPlayer(ulong playerId, string tag) => playerLookup[playerId] = tag;

            internal void UnregisterPlayer(ulong playerId) => playerLookup.Remove(playerId);

            internal void AddPlayerInvite(ulong target, string tag)
            {
                List<string> invites;
                if (!playerInvites.TryGetValue(target, out invites))
                    invites = playerInvites[target] = new List<string>();

                if (!invites.Contains(tag))
                    invites.Add(tag);
            }

            internal void RevokePlayerInvite(ulong target, string tag)
            {
                List<string> invites;
                if (!playerInvites.TryGetValue(target, out invites))
                    return;

                invites.Remove(tag);

                if (invites.Count == 0)
                    playerInvites.Remove(target);
            }

            internal void OnInviteAccepted(ulong target, string tag)
            {
                List<string> invites;
                if (!playerInvites.TryGetValue(target, out invites))
                    return;

                for (int i = invites.Count - 1; i >= 0; i--)
                {
                    string t = invites[i];

                    if (!t.Equals(tag))
                        FindClan(t)?.MemberInvites.Remove(target);

                    invites.RemoveAt(i);
                }

                if (invites.Count == 0)
                    playerInvites.Remove(target);
            }

            internal void OnInviteRejected(ulong target, string tag)
            {
                List<string> invites;
                if (!playerInvites.TryGetValue(target, out invites))
                    return;

                invites.Remove(tag);

                if (invites.Count == 0)
                    playerInvites.Remove(target);
            }

            internal void OnClanRenamed(string oldTag, string newTag)
            {
                foreach (KeyValuePair<ulong, List<string>> kvp in playerInvites)
                {
                    for (int i = 0; i < kvp.Value.Count; i++)
                    {
                        if (kvp.Value[i].Equals(oldTag))
                            kvp.Value[i] = newTag;
                    }
                }
            }
        }

        private class OldDataStructure
        {
            public Dictionary<string, OldClan> clans = new Dictionary<string, OldClan>();
            public int saveStamp = 0;
            public string lastStorage = string.Empty;
        }

        public class OldClan
        {
            public string tag;
            public string description;
            public string owner;
            public string council;
            public int created;
            public int updated;

            public List<string> moderators = new List<string>();
            public List<string> members = new List<string>();
            public Dictionary<string, int> invites = new Dictionary<string, int>();
            public List<string> clanAlliances = new List<string>();
            public List<string> invitedAllies = new List<string>();
            public List<string> pendingInvites = new List<string>();
        }
        #endregion

        #region Localization
        private static string msg(string key, string playerId = null) => string.Format(COLORED_LABEL, configData.Colors.TextColor, Instance.lang.GetMessage(key, Instance, playerId));

        Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            ["Notification.ClanInfo.Title"] = "<size=18><color=#ffa500>Clans</color></size><size=14><color=#ce422b> REBORN</color></size>",
            ["Notification.ClanInfo.Tag"] = "\nClanTag: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.Description"] = "\nDescription: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.Online"] = "\nMembers Online: {0}",
            ["Notification.ClanInfo.Offline"] = "\nMembers Offline: {0}",
            ["Notification.ClanInfo.Members"] = "\nMembers: {0}",
            ["Notification.ClanInfo.Established"] = "\nEstablished: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.LastOnline"] = "\nLast Online: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.Alliances"] = "\nAlliances: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.Alliances.None"] = "None",
            ["Notification.ClanInfo.TotalMembers"] = "\nMembers: <color=#b2eece>{0}</color>",
            ["Notification.ClanInfo.TotalAlliances"] = "\nAlliances: <color=#b2eece>{0}</color>",

            ["Notification.Create.InExistingClan"] = "You are already a member of a clan",
            ["Notification.Create.NoPermission"] = "You do not have permission to create a clan",
            ["Notification.Create.TagReserved1"] = "The tag {0} is reserved for another player",
            ["Notification.Create.InvalidTagLength"] = "The tag you have chosen is invalid. It must be between {0} and {1} characters long",
            ["Notification.Create.InvalidCharacters"] = "The tag you have chosen contains words/characters that are not allowed to be used",
            ["Notification.Create.ClanExists"] = "A clan with that tag already exists",
            ["Notification.Create.NoNativeCreate"] = "You must create a clan using /clan create <tag> <description>",
            ["Notification.Create.Success"] = "You have formed the clan <color=#aaff55>[{0}]</color>",

            ["Notification.Kick.IsOwner"] = "You can not kick the clan owner",
            ["Notification.Kick.NoPermissions"] = "You do not have sufficient permission to kick clan members",
            ["Notification.Kick.NotClanmember"] = "The target is not a member of your clan",
            ["Notification.Kick.Self"] = "You can not kick yourself",
            ["Notification.Kick.NotEnoughRank"] = "Only the clan owner can kick another ranking member",
            ["Notification.Kick.NoPlayerFound"] = "Unable to find a player with the specified name of ID",
            ["Notification.Kick.Message"] = "{0} kicked {1} from the clan!",
            ["Notification.Kick.PlayerMessage"] = "{0} kicked you from the clan!",
            ["Notification.Kick.NoPermission"] = "You do not have permission to kick clan members",

            ["Notification.Leave.Message"] = "{0} has left the clan!",
            ["Notification.Leave.PlayerMessage"] = "You have left the clan <color=#aaff55>[{0}]</color>!",
            ["Notification.Leave.NewOwner"] = "{0} is now the clan leader!",
            ["Notification.Leave.NoPermission"] = "You do not have permission to leave this clan",

            ["Notification.Join.NoPermission"] = "You do not have permission to join a clan",
            ["Notification.Join.ExpiredInvite"] = "Your invite to {0} has expired!",
            ["Notification.Join.InExistingClan"] = "You are already a member of another clan",
            ["Notification.Join.Message"] = "{0} has joined the clan!",

            ["Notification.Invite.NoPermissions"] = "You do not have sufficient permissions to invite other players",
            ["Notification.Invite.InviteLimit"] = "You already have the maximum number of invites allowed",
            ["Notification.Invite.InviteCooldown"] = "You must wait another {0} before you can invite new members to your clan",
            ["Notification.Invite.HasPending"] = "{0} all ready has a pending clan invite",
            ["Notification.Invite.IsMember"] = "{0} is already a clan member",
            ["Notification.Invite.InClan"] = "{0} is already a member of another clan",
            ["Notification.Invite.NoPermission"] = "{0} does not have the required permission to join a clan",
            ["Notification.Invite.SuccesTarget"] = "You have been invited to join the clan: <color=#aaff55>[{0}]</color> '{1}'\nTo join, type: <color=#ffd479>/{2} accept {0}</color>",
            ["Notification.Invite.SuccessClan"] = "{0} has invited {1} to join the clan",
            ["Notification.PendingInvites"] = "You have pending clan invites from: {0}\nYou can join a clan type: <color=#ffd479>/{1} accept <tag></color>",

            ["Notification.WithdrawInvite.NoPermissions"] = "You do not have sufficient permissions to withdraw member invites",
            ["Notification.WithdrawInvite.UnableToFind"] = "Unable to find a invite for the player with {0}",
            ["Notification.WithdrawInvite.Success"] = "{0} revoked the member invitation for {1}",

            ["Notification.RejectInvite.InvalidInvite"] = "You do not have a invite to join <color=#aaff55>[{0}]</color>",
            ["Notification.RejectInvite.Message"] = "{0} has rejected their invition to join your clan",
            ["Notification.RejectInvite.PlayerMessage"] = "You have rejected the invitation to join <color=#aaff55>[{0}]</color>",

            ["Notification.Promotion.NoPermissions"] = "You do not have sufficient permissions to promote other players",
            ["Notification.Promotion.TargetNoClan"] = "{0} is not a member of your clan",
            ["Notification.Promotion.IsOwner"] = "You can not promote the clan leader",
            ["Notification.Promotion.IsCouncil"] = "You can not promote higher than the rank of council",
            ["Notification.Promotion.CouncilTaken"] = "The rank of council has already been awarded",
            ["Notification.Promotion.ModeratorLimit"] = "You already have the maximum amount of moderators",
            ["Notification.Promotion.IsModerator"] = "You can not promote higher than the rank of moderator",
            ["Notification.Promotion.Message"] = "{0} was promoted to rank of {1} by {2}",

            ["Notification.Demotion.NoPermissions"] = "You do not have sufficient permissions to demote other players",
            ["Notification.Demotion.IsOwner"] = "You can not demote the clan leader",
            ["Notification.Demotion.IsMember"] = "{0} is already at the lowest rank",
            ["Notification.Demotion.Message"] = "{0} was demoted to rank of {1} by {2}",

            ["Notification.Alliance.NoPermissions"] = "You do not have sufficient permissions to manage alliances",
            ["Notification.Alliance.PendingInvite"] = "<color=#aaff55>[{0}]</color> already has a pending alliance invite",
            ["Notification.Alliance.MaximumInvites"] = "You already have the maximum amount of alliance invites allowed",
            ["Notification.Alliance.MaximumAlliances"] = "You already have the maximum amount of alliances formed",
            ["Notification.Alliance.InviteSent"] = "You have sent a clan alliance invitation to <color=#aaff55>[{0}]</color>\nThe invitation will expire in: {1}",
            ["Notification.Alliance.InviteReceived"] = "You have received a clan alliance invitati