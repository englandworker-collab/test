     
                        {                                                                
                            SamPositions.Add( new Vector3( -38.0946f, 22.7686f, 8.9574f ), monument );
                            SamPositions.Add( new Vector3( -43.0134f, 18.2407f, 18.9424f ), monument );
                            SamPositions.Add( new Vector3( -27.4102f, 21.2407f, 12.9824f ), monument );
                            SamPositions.Add( new Vector3( -28.3916f, 21.3069f, 6.2423f ), monument );

                            break;
                        }
                    case MonumentName.WaterTreatment:
                        {
                            SamPositions.Add( new Vector3( 68.9818f, 12.1657f, 22.3747f ), monument );
                            SamPositions.Add( new Vector3( 71.332f, 12.2664f, -20.8726f ), monument );

                            break;
                        }
                    case MonumentName.OilRig_Small:
                        {
                            SamPositions.Add( new Vector3( 38.7308f, 31.4891f, 0.8049f ), monument );
                            SamPositions.Add( new Vector3( 38.5506f, 31.4891f, -21.4670f ), monument );
                            SamPositions.Add( new Vector3( 10.2068f, 30, -32.2483f ), monument );
                            SamPositions.Add( new Vector3( 6.2874f, 30, 2.1386f ), monument );
                            SamPositions.Add( new Vector3( -4.6217f, 0.9817f, -28.4416f ), monument );
                            SamPositions.Add( new Vector3( -4.4660f, 0.9220f, -6.0966f ), monument );
                            SamPositions.Add( new Vector3( 30.7479f, 2.0713f, -25.8844f ), monument );
                            SamPositions.Add( new Vector3( 16.7402f, 0.1f, 4.6281f ), monument );

                            break;
                        }
                    case MonumentName.OilRig_Large:
                        {
                            SamPositions.Add( new Vector3( 27.4640f, 45.1916f, 16.0521f ), monument );
                            SamPositions.Add( new Vector3( 27.8638f, 45.1916f, -6.1706f ), monument );
                            SamPositions.Add( new Vector3( 7.1513f, 42.1259f, 36.2357f ), monument );
                            SamPositions.Add( new Vector3( 12.1727f, 39.1474f, -25.9371f ), monument );
                            SamPositions.Add( new Vector3( -16.6521f, 40.5907f, 1.6809f ), monument );
                            SamPositions.Add( new Vector3( -0.3493f, 39.1000f, -38.5986f ), monument );
                            SamPositions.Add( new Vector3( 16.4913f, 2.7f, -10.6589f ), monument );
                            SamPositions.Add( new Vector3( 16.3649f, 3f, 10.6897f ), monument );
                            SamPositions.Add( new Vector3( -15.16f, 2.8703f, -32.5268f ), monument );
                            SamPositions.Add( new Vector3( -15.0637f, 2.8798f, 32.5015f ), monument );
                            SamPositions.Add( new Vector3( 15.0416f, 2.9619f, 32.4463f ), monument );
                            SamPositions.Add( new Vector3( 14.9828f, 2.8417f, -32.4670f ), monument );

                            break;
                        }
                    case MonumentName.Airfield:
                        {
                            SamPositions.Add( new Vector3( -46.9147f, 21.4142f, -87.9877f ), monument );
                            SamPositions.Add( new Vector3( -29.0119f, 9.4142f, -90.7702f ), monument );
                            SamPositions.Add( new Vector3( -3.6652f, 9.4142f, -102.1889f ), monument );
                            SamPositions.Add( new Vector3( -73.6783f, 3.1142f, -87.7945f ), monument );
                            SamPositions.Add( new Vector3( -117.6489f, 18.0142f, 50.3876f ), monument );
                            SamPositions.Add( new Vector3( 9.2417f, 13.4142f, 39.8607f ), monument );
                            SamPositions.Add( new Vector3( 48.8095f, 1.9142f, -64.6002f ), monument );

                            break;
                        }
                }
            }

            foreach ( var monument in UnityEngine.Object.FindObjectsOfType<MonumentInfo>() )
            {
                foreach ( var position in SamPositions )
                {
                    if ( position.Value == monument )
                    {
                        var samPosition = monument.transform.TransformPoint( position.Key );
                        var samSite = GameManager.server.CreateEntity( "assets/prefabs/npc/sam_site_turret/sam_static.prefab", samPosition ) as SamSite;
                        samSite.lifestate = BaseCombatEntity.LifeState.Alive;
                        samSite.health = samSite._maxHealth;
                        samSite.SetFlag( BaseEntity.Flags.Reserved1, false, true );
                        samSite.Spawn();
                        samSite.SendNetworkUpdateImmediate();

                        SamSites.Add( samSite );

                        //Puts( $"Spawning one of {monument.GetMonumentName().ToString()}'s SAMs at {samSite.transform.position.ToString()}" );
                    }
                }
            }
        }

        public void RespawnSamSites()
        {
            foreach ( var sam in SamSites )
            {
                sam?.Kill();
            }

            SamSites.Clear();

            SpawnSAMSites();
        }

        #region Hooks

        private void Init()
        {
            config = Config.ReadObject<ConfigData>();
            PluginInstance = this;
        }

        [HookMethod( "OnServerInitialized" )]
        void OnServerInitialized()
        {
            SpawnSAMSites();

            if ( !config.InvincibleSams )
                RespawnTimer = timer.Every( config.RespawnTimer * 60, RespawnSamSites );
        }

        [HookMethod( "Unload" )]
        void Unload()
        {
            foreach ( var sam in SamSites )
            {
                sam?.Kill();
            }

            SamSites.Clear();

            RespawnTimer?.Destroy();

            PluginInstance = null;
        }

        object OnEntityTakeDamage( BaseCombatEntity entity, HitInfo info )
        {
            if ( config.InvincibleSams && entity.ShortPrefabName == "sam_static" )
                return false;

            return null;
        }

        #endregion

        #region Configuration

        private ConfigData config;

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject( new ConfigData(), true );
        }

        private new void SaveConfig()
        {
            Config.WriteObject( config, true );
        }

        public class ConfigData
        {
            [JsonProperty( "Monuments with SAMs" )]
            public Dictionary<MonumentName, bool> MonumentWithSAMs = new Dictionary<MonumentName, bool>()
            {
                { MonumentName.Trainyard, true },
                { MonumentName.Dome, true },
                { MonumentName.Powerplant, true },
                { MonumentName.WaterTreatment, true },
                { MonumentName.OilRig_Small, true },
                { MonumentName.OilRig_Large, true },
                { MonumentName.Airfield, true },
                { MonumentName.LaunchSite, true },
            };

            [JsonProperty( "Monument SAM Site Indestructible" )]
            public bool InvincibleSams = true;

            [JsonProperty( "Respawn Timer for Sams" )]
            public float RespawnTimer = 30;
        }

        #endregion
    }

    namespace MonumentProtectionEx
    {
        public static class MonumentProtectionEx
        {
            public enum MonumentName
            {
                Unknown = 0,
                Lighthouse,
                MiningOutpost,
                Dome,
                SatelliteDish,
                SewerBranch,
                Powerplant,
                Trainyard,
                Airfield,
                MilitaryTunnel,
                WaterTreatment,
                SulfurQuarry,
                StoneQuarry,
                HqmQuarry,
                GasStation,
                Supermarket,
                LaunchSite,
                Outpost,
                BanditCamp,
                Harbor_A,
                Harbor_B,
                Junkyard,
                OilRig_Small,
                OilRig_Large,
            }

            private static Dictionary<string, MonumentName> MonumentToName = new Dictionary<string, MonumentName>()
            {
                { "assets/bundled/prefabs/autospawn/monument/small/warehouse.prefab", MonumentName.MiningOutpost },
                { "assets/bundled/prefabs/autospawn/monument/lighthouse/lighthouse.prefab", MonumentName.Lighthouse },
                { "assets/bundled/prefabs/autospawn/monument/small/satellite_dish.prefab", MonumentName.SatelliteDish },
                { "assets/bundled/prefabs/autospawn/monument/small/sphere_tank.prefab", MonumentName.Dome },
                { "assets/bundled/prefabs/autospawn/monument/harbor/harbor_1.prefab", MonumentName.Harbor_A },
                { "assets/bundled/prefabs/autospawn/monument/harbor/harbor_2.prefab", MonumentName.Harbor_B },
                { "assets/bundled/prefabs/autospawn/monument/large/airfield_1.prefab", MonumentName.Airfield },
                { "assets/bundled/prefabs/autospawn/monument/large/junkyard_1.prefab", MonumentName.Junkyard },
                { "assets/bundled/prefabs/autospawn/monument/large/launch_site_1.prefab", MonumentName.LaunchSite },
                { "assets/bundled/prefabs/autospawn/monument/large/military_tunnel_1.prefab", MonumentName.MilitaryTunnel },
                { "assets/bundled/prefabs/autospawn/monument/large/powerplant_1.prefab", MonumentName.Powerplant },
                { "assets/bundled/prefabs/autospawn/monument/large/trainyard_1.prefab", MonumentName.Trainyard },
                { "assets/bundled/prefabs/autospawn/monument/large/water_treatment_plant_1.prefab", MonumentName.WaterTreatment },
                { "assets/bundled/prefabs/autospawn/monument/medium/bandit_town.prefab", MonumentName.BanditCamp },
                { "assets/bundled/prefabs/autospawn/monument/medium/compound.prefab", MonumentName.Outpost },
                { "assets/bundled/prefabs/autospawn/monument/medium/radtown_small_3.prefab", MonumentName.SewerBranch },
                { "assets/bundled/prefabs/autospawn/monument/small/gas_station_1.prefab", MonumentName.GasStation },
                { "assets/bundled/prefabs/autospawn/monument/small/mining_quarry_a.prefab", MonumentName.SulfurQuarry },
                { "assets/bundled/prefabs/autospawn/monument/small/mining_quarry_b.prefab", MonumentName.StoneQuarry },
                { "assets/bundled/prefabs/autospawn/monument/small/mining_quarry_c.prefab", MonumentName.HqmQuarry },
                { "assets/bundled/prefabs/autospawn/monument/offshore/oilrig_2.prefab", MonumentName.OilRig_Small },
                { "assets/bundled/prefabs/autospawn/monument/offshore/oilrig_1.prefab", MonumentName.OilRig_Large },
            };

            public static MonumentName GetMonumentName( this MonumentInfo monument )
            {
                MonumentName name;

                var gameObject = monument.gameObject;

                while ( gameObject.name.StartsWith( "assets/" ) == false && gameObject.transform.parent != null )
                {
                    gameObject = gameObject.transform.parent.gameObject;
                }

                MonumentToName.TryGetValue( gameObject.name, out name );

                return name;
            }
        }
    }
}

// --- End of file: MonumentProtection.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ReportBot.cs ---
// --- Original Local Path: ReportBot.cs ---

using Oxide.Core.Libraries.Covalence;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("ReportBot", "Spicy", "1.0.5")]
    [Description("Allows server reports to be sent over Steam to server owners.")]

    class ReportBot : CovalencePlugin
    {
        string reportPermission, ownerSteamID, requestPageURL;

        void Init()
        {
            SetupConfig();
            SetupLang();

            permission.RegisterPermission(reportPermission, this);

            ulong _ownerSteamID;

            if (!(ulong.TryParse(ownerSteamID, out _ownerSteamID)) || ownerSteamID.Length != 17)
            {
                Puts("Configuration error. The OwnerSteamID provided is invalid.");
                return;
            }

            Puts($"ReportBot initialised. Forwarding reports to {ownerSteamID}.");
        }

        protected override void LoadDefaultConfig()
        {
            Config["Settings"] = new Dictionary<string, string>
            {
                ["ReportPermission"] = "reportbot.use",
                ["OwnerSteamID"] = "76561198103592543",
                ["RequestPageURL"] = "http://steam.spicee.xyz/addreport.php"
            };
        }

        void SetupConfig()
        {
            reportPermission = Config.Get<string>("Settings", "ReportPermission");
            ownerSteamID = Config.Get<string>("Settings", "OwnerSteamID");
            requestPageURL = Config.Get<string>("Settings", "RequestPageURL");
        }

        void SetupLang()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NoPermission"] = "You do not have permission to use this command.",
                ["InvalidSyntax"] = "Invalid syntax. Syntax: /report [name] [message]",
                ["NoPlayersFound"] = "No players were found with that name.",
                ["MultiplePlayersFound"] = "Multiple players were found with that name.",
                ["WebRequestFailed"] = "Report failed to send. (WebRequest failed).",
                ["WebRequestSuccess"] = "Report sent successfully."
            }, this);
        }

        [Command("report", "reportbot.report")]
        void cmdReport(IPlayer player, string command, string[] args)
        {
            if (!(permission.UserHasPermission(player.Id, reportPermission)))
            {
                player.Reply(lang.GetMessage("NoPermission", this));
                return;
            }

            if (args.Length == 0 || args.Length < 2 || args == null)
            {
                player.Reply(lang.GetMessage("InvalidSyntax", this));
                return;
            }

            IEnumerable<IPlayer> targetList = players.FindPlayers(args[0]);

            if (!targetList.Any())
            {
                player.Reply(lang.GetMessage("NoPlayersFound", this));
                return;
            }

            if (targetList.Count() > 1)
            {
                player.Reply(lang.GetMessage("MultiplePlayersFound", this));
                return;
            }

            IPlayer target = players.FindPlayer(args[0]);

            float playerX, playerY, playerZ;
            player.Position(out playerX, out playerY, out playerZ);

            float targetX, targetY, targetZ;
            target.Position(out targetX, out targetY, out targetZ);

            string playerPosition = $"({Math.Floor(playerX)}, {Math.Floor(playerY)}, {Math.Floor(playerZ)})";
            string targetPosition = $"({Math.Floor(targetX)}, {Math.Floor(targetY)}, {Math.Floor(targetZ)})";

            string reportMessage = "";

            for (int i = 1; i < args.Length; i++)
                reportMessage = reportMessage + " " + args[i];

            if (reportMessage.Contains("|"))
                reportMessage = reportMessage.Replace('|', '/');

            reportMessage = reportMessage.Trim();

            string reportRequestURL = string.Format("{0}?ownersteamid={1}&reportersteamid={2}&reporterposition={3}&reporteesteamid={4}&reporteeposition={5}&reportmessage={6}",
                requestPageURL, ownerSteamID, player.Id, playerPosition, target.Id, targetPosition, reportMessage);

            webrequest.EnqueueGet(reportRequestURL, (code, response) =>
            {
                if (response == null || code != 200)
                {
                    player.Reply(lang.GetMessage("WebRequestFailed", this));
                    Puts(lang.GetMessage("WebRequestFailed", this));
                    return;
                }

                player.Reply(lang.GetMessage("WebRequestSuccess", this));
                Puts(lang.GetMessage("WebRequestSuccess", this));
            }, this);
        }
    }
}

// --- End of file: ReportBot.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BoxLooters.cs ---
// --- Original Local Path: BoxLooters.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using UnityEngine;
using System.Linq;
using System.Reflection;

namespace Oxide.Plugins
{
    [Info("BoxLooters", "4seti / k1lly0u", "0.3.1", ResourceId = 989)]
    class BoxLooters : RustPlugin
    {
        #region Fields
        BoxDS boxData;
        PlayerDS playerData;
        private DynamicConfigFile bdata;
        private DynamicConfigFile pdata;

        private Vector3 eyesAdjust;
        private FieldInfo serverinput;

        private bool eraseData = false;

        private Dictionary<uint, BoxData> boxCache;
        private Dictionary<ulong, PlayerData> playerCache;
        #endregion

        #region Oxide Hooks
        void Loaded()
        {
            bdata = Interface.Oxide.DataFileSystem.GetFile("Boxlooters/box_data");
            pdata = Interface.Oxide.DataFileSystem.GetFile("Boxlooters/player_data");

            eyesAdjust = new Vector3(0f, 1.5f, 0f);
            serverinput = typeof(BasePlayer).GetField("serverInput", (BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.NonPublic));

            boxCache = new Dictionary<uint, BoxData>();
            playerCache = new Dictionary<ulong, PlayerData>();

            lang.RegisterMessages(messages, this);
            permission.RegisterPermission("boxlooters.checkbox", this);
        }
        void OnServerInitialized()
        {
            LoadVariables();
            LoadData();
            if (eraseData)
                ClearAllData();
            else RemoveOldData();
        }
        void OnNewSave(string filename) => eraseData = true;        
        void OnServerSave() => SaveData();
        void Unload() => SaveData();

        void OnLootEntity(BasePlayer looter, BaseEntity entity)
        {
            if (looter == null || entity == null || !IsValidType(entity)) return;

            var time = GrabCurrentTime();
            var date = DateTime.Now.ToString("d/M HH:mm:ss");
            var lootEntry = new LootEntry
            {
                FirstLoot = date,
                LastInit = time,
                LastLoot = date,
                Name = looter.displayName
            };
            
            if (entity is BasePlayer)
            {
                var looted = entity.ToPlayer();
                if (!playerCache.ContainsKey(looted.userID))
                    playerCache.Add(looted.userID, new PlayerData(time, looter));
                else
                {
                    playerCache[looted.userID].lastInit = time;
                    playerCache[looted.userID].AddLoot(looter, time, date);
                }
            }
            else
            {
                if (entity?.net?.ID == null) return;
                var boxId = entity.net.ID;
                if (!boxCache.ContainsKey(boxId))
                    boxCache.Add(boxId, new BoxData(time, looter, entity.transform.position));
                else
                {
                    boxCache[boxId].lastInit = time;
                    boxCache[boxId].AddLoot(looter, time, date);               
                }
            }

        }
        void OnEntityDeath(BaseCombatEntity entity, HitInfo hitInfo)
        {
            try
            {
                if (entity == null || !IsValidType(entity) || entity is BasePlayer) return;
                if (hitInfo?.Initiator is BasePlayer)
                {
                    if (entity?.net?.ID == null) return;
                    var boxId = entity.net.ID;
                    if (!boxCache.ContainsKey(boxId)) return;
                    boxCache[boxId].SetKiller(hitInfo.InitiatorPlayer.userID, hitInfo.InitiatorPlayer.displayName);
                }
            }
            catch { }
        }
        #endregion

        #region Data Cleanup
        void ClearAllData()
        {
            PrintWarning("Detected map wipe, resetting loot data!");
            boxCache.Clear();
            playerCache.Clear();
        }
        void RemoveOldData()
        {
            PrintWarning("Attempting to remove old log entries");
            int boxCount = 0;
            int playerCount = 0;
            var time = GrabCurrentTime() - (configData.RemoveHours * 3600);
            for (int j = 0; j < boxCache.Count; j++)
            {
                var ekey = boxCache.Keys.ToList()[j];
                var entry = boxCache[ekey];
                if (entry.lastInit < time)
                {
                    boxCache.Remove(ekey);
                    boxCount++;
                    continue;
                }
                for (int i = 0; i < entry.Looters.Count; i++)
                {
                    var key = entry.Looters.Keys.ToList()[i];
                    var looter = entry.Looters[key];
                    if (looter.LastInit < time)
                    {
                        entry.Looters.Remove(key);
                        boxCount++;
                    }
                }
            }
            PrintWarning($"Removed {boxCount} old records from BoxData");
            for (int j = 0; j < playerCache.Count; j++)
            {
                var ekey = playerCache.Keys.ToList()[j];
                var entry = playerCache[ekey];
                if (entry.lastInit < time)
                {
                    playerCache.Remove(ekey);
                    playerCount++;
                    continue;
                }
                for (int i = 0; i < entry.Looters.Count; i++)
                {
                    var key = entry.Looters.Keys.ToList()[i];
                    var looter = entry.Looters[key];
                    if (looter.LastInit < time)
                    {
                        entry.Looters.Remove(key);
                        playerCount++;
                    }
                }
            }
            PrintWarning($"Removed {playerCount} old records from PlayerData");
        }
        #endregion

        #region Functions
        object FindBoxFromRay(BasePlayer player)
        {
            var input = serverinput.GetValue(player) as InputState;
            Ray ray = new Ray(player.eyes.position, Quaternion.Euler(input.current.aimAngles) * Vector3.forward);
            RaycastHit hit;
            if (!Physics.Raycast(ray, out hit, 20))
                return null;

            var hitEnt = hit.collider.GetComponentInParent<BaseEntity>();
            if (hitEnt != null)
            {
                if (IsValidType(hitEnt))
                    return hitEnt;
            }
            return null;            
        }
        void ReplyInfo(BasePlayer player, string Id, int replies = 10, bool isPlayer = false, string additional = "")
        {
            var entId = Id;
            if (!string.IsNullOrEmpty(additional))
                entId = $"{additional} - {Id}";

            if (!isPlayer)
            {                
                if (boxCache.ContainsKey(uint.Parse(Id)))
                {
                    var box = boxCache[uint.Parse(Id)];
                    SendReply(player, string.Format(lang.GetMessage("BoxData", this, player.UserIDString), entId));

                    if (!string.IsNullOrEmpty(box.destroyName))
                        SendReply(player, string.Format(lang.GetMessage("DetectDestr", this, player.UserIDString), box.destroyName, box.destroyId));

                    int i = 1;
                    string response = "";
                    foreach (var data in box.Looters.OrderByDescending(x => x.Value.LastInit))
                    {
                        if (i > replies) return;
                        response += string.Format(lang.GetMessage("DetectedLooter", this, player.UserIDString), i, data.Value.Name, data.Key, data.Value.FirstLoot, data.Value.LastLoot);
                        i++;
                        if (i > replies)
                            response += "/n";
                    }
                    SendReply(player, response);
                }
                else SendReply(player, string.Format(lang.GetMessage("NoLooters", this, player.UserIDString), entId));
            }
            else
            {
                if (playerCache.ContainsKey(ulong.Parse(Id)))
                {
                    SendReply(player, string.Format(lang.GetMessage("PlayerData", this, player.UserIDString), entId));
                    int i = 1;
                    string response = "";
                    foreach (var data in playerCache[ulong.Parse(Id)].Looters.OrderByDescending(x => x.Value.LastInit))
                    {
                        if (i > replies) return;
                        response += string.Format(lang.GetMessage("DetectedLooter", this, player.UserIDString), i, data.Value.Name, data.Key, data.Value.FirstLoot, data.Value.LastLoot);
                        i++;
                        if (i > replies)
                            response += "/n";
                    }
                }
                else SendReply(player, string.Format(lang.GetMessage("NoLootersPlayer", this, player.UserIDString), entId));
            }
        }
        #endregion

        #region Helpers
        double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
        bool HasPermission(BasePlayer player) => permission.UserHasPermission(player.UserIDString, "boxlooters.checkbox") || player.net.connection.authLevel > 0;
        float GetDistance(Vector3 init, Vector3 target) => Vector3.Distance(init, target);
        bool IsValidType(BaseEntity entity) => !entity.GetComponent<LootContainer>() && (entity is StorageContainer || entity is MiningQuarry || entity is ResourceExtractorFuelStorage || entity is BasePlayer);
        #endregion

        #region Commands
        [ChatCommand("box")]
        void cmdBox(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player)) return;
            if (args == null || args.Length == 0)
            {
                var success = FindBoxFromRay(player);
                if (success is MiningQuarry)
                {
                    var children = (success as MiningQuarry).children;
                    if (children != null)
                    {
                        foreach (var child in children)
                        {
                            if (child.GetComponent<StorageContainer>())
                            {
                                ReplyInfo(player, child.net.ID.ToString(), 5, false, child.ShortPrefabName);
                            }
                        }
                    }
                    else SendReply(player, lang.GetMessage("Nothing", this, player.UserIDString));
                }
                else if (success is BaseEntity)
                    ReplyInfo(player, (success as BaseEntity).net.ID.ToString());

                else SendReply(player, lang.GetMessage("Nothing", this, player.UserIDString));
                return;
            }
            switch (args[0].ToLower())
            {
                case "help":
                    {
                        SendReply(player, $"<color=#4F9BFF>{Title}  v{Version}</color>");
                        SendReply(player, "<color=#4F9BFF>/box help</color> - Display the help menu");
                        SendReply(player, "<color=#4F9BFF>/box</color> - Retrieve information on the box you are looking at");                        
                        SendReply(player, "<color=#4F9BFF>/box id <number></color> - Retrieve information on the specified box");
                        SendReply(player, "<color=#4F9BFF>/box near <opt:radius></color> - Show nearby boxes (current and destroyed) and their ID numbers");
                        SendReply(player, "<color=#4F9BFF>/box player <partialname/id></color> - Retrieve loot information about a player");
                        SendReply(player, "<color=#4F9BFF>/box clear</color> - Clears all saved data");
                        SendReply(player, "<color=#4F9BFF>/box save</color> - Saves box data");
                    }
                    return;
                case "id":
                    if (args.Length >= 2)
                    {
                        uint id;
                        if (uint.TryParse(args[1], out id))                        
                            ReplyInfo(player, id.ToString());                        
                        else SendReply(player, lang.GetMessage("NoID", this, player.UserIDString));
                        return;
                    }
                    break;
                case "near":
                    {
                        float radius = 20f;
                        if (args.Length >= 2)
                        {
                            if (!float.TryParse(args[1], out radius))
                                radius = 20f;
                        }
                        foreach(var box in boxCache)
                        {
                            if (GetDistance(player.transform.position, box.Value.GetPosition()) <= radius)
                            {
                                player.SendConsoleCommand("ddraw.text", 20f, Color.green, box.Value.GetPosition() + new Vector3(0, 1.5f, 0), $"<size=40>{box.Key}</size>");
                                player.SendConsoleCommand("ddraw.box", 20f, Color.green, box.Value.GetPosition(), 1f);
                            }
                        }
                    }
                    return;
                case "player":
                    if (args.Length >= 2)
                    {
                        var target = covalence.Players.FindPlayer(args[1]);
                        if (target != null)                        
                            ReplyInfo(player, target.Id, 10, true);
                        else SendReply(player, lang.GetMessage("NoPlayer", this, player.UserIDString));
                        return;
                    }
                    break;
                case "clear":
                    boxCache.Clear();
                    playerCache.Clear();
                    SendReply(player, lang.GetMessage("ClearData", this, player.UserIDString));
                    return;
                case "save":
                    SaveData();
                    SendReply(player, lang.GetMessage("SavedData", this, player.UserIDString));
                    return;
                default:
                    break;
            }
            SendReply(player, lang.GetMessage("SynError", this, player.UserIDString));
        }
        #endregion

        #region Config        
        private ConfigData configData;
        class ConfigData
        {
            public int RemoveHours { get; set; }            
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                RemoveHours = 48
            };
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region Data Management        
        class BoxData
        {
            public double lastInit;
            public float x, y, z;
            public ulong destroyId;
            public string destroyName;
            public Dictionary<ulong, LootEntry> Looters;
           
            public BoxData() { }
            public BoxData(double time, BasePlayer player, Vector3 pos)
            {
                lastInit = time;
                x = pos.x;
                y = pos.y;
                z = pos.z;
                Looters = new Dictionary<ulong, LootEntry>
                {
                    { player.userID, new LootEntry
                    {
                        FirstLoot = DateTime.Now.ToString("d/M HH:mm:ss"),
                        LastInit = time,
                        LastLoot = DateTime.Now.ToString("d/M HH:mm:ss"),
                        Name = player.displayName
                    }}
                };
            }
            public void AddLoot(BasePlayer looter, double time, string date)
            {
                if (Looters.ContainsKey(looter.userID))
                {
                    Looters[looter.userID].LastInit = time;
                    Looters[looter.userID].LastLoot = date;
                }
                else Looters.Add(looter.userID, new LootEntry
                {
                    FirstLoot = date,
                    LastInit = time,
                    LastLoot = date,
                    Name = looter.displayName
                });
            }
            public void SetKiller(ulong Id, string name)
            {
                destroyId = Id;
                destroyName = name;
            }
            public Vector3 GetPosition() => new Vector3(x, y, z);            
        }
        class PlayerData
        {
            public double lastInit;
            public Dictionary<ulong, LootEntry> Looters;
            public PlayerData() { }
            public PlayerData(double time, BasePlayer player)
            {
                lastInit = time;
                Looters = new Dictionary<ulong, LootEntry>
                {
                    { player.userID, new LootEntry
                    {
                        FirstLoot = DateTime.Now.ToString("d/M HH:mm:ss"),
                        LastInit = time,
                        LastLoot = DateTime.Now.ToString("d/M HH:mm:ss"),
                        Name = player.displayName
                    }}
                };
            }
            public void AddLoot(BasePlayer looter, double time, string date)
            {
                if (Looters.ContainsKey(looter.userID))
                {
                    Looters[looter.userID].LastInit = time;
                    Looters[looter.userID].LastLoot = date;
                }
                else
                    Looters.Add(looter.userID, new LootEntry
                    {
                        FirstLoot = date,
                        LastInit = time,
                        LastLoot = date,
                        Name = looter.displayName
                    });
            }
        }
        public class LootEntry
        {
            public string Name;
            public double LastInit = 0;
            public string FirstLoot;
            public string LastLoot;
            public LootEntry()
            {
                Name = string.Empty;
                FirstLoot = string.Empty;
                LastLoot = string.Empty;
            }
            public LootEntry(string name, string firstLoot, double lastInit)
            {
                Name = name;
                FirstLoot = firstLoot;
                LastLoot = FirstLoot;
                LastInit = lastInit;
            }
        }
        void SaveData()
        {
            boxData.boxes = boxCache;
            playerData.players = playerCache;
            bdata.WriteObject(boxData);
            pdata.WriteObject(playerData);
            PrintWarning("Saved Boxlooters data");
        }
        void LoadData()
        {            
            try
            {
                boxData = bdata.ReadObject<BoxDS>();
                boxCache = boxData.boxes;
            }
            catch
            {
                boxData = new BoxDS();
            }
            try
            {
                playerData = pdata.ReadObject<PlayerDS>();
                playerCache = playerData.players;
            }
            catch
            {
                playerData = new PlayerDS();                
            }
        }
        class BoxDS
        {
            public Dictionary<uint, BoxData> boxes = new Dictionary<uint, BoxData>();
        }
        class PlayerDS
        {
            public Dictionary<ulong, PlayerData> players = new Dictionary<ulong, PlayerData>();
        }       
        #endregion

        #region Localization
        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"BoxData", "List of looters for this Box[<color=#F5D400>{0}</color>]:"},
            {"PlayerData", "List of looters for this Player [<color=#F5D400>{0}</color>]:"},            
            {"DetectedLooter", "<color=#F5D400>[{0}]</color><color=#4F9BFF>{1}</color>({2}) F:<color=#F80>{3}</color> L:<color=#F80>{4}</color>"},
            {"DetectDestr", "Destoyed by: <color=#4F9BFF>{0}</color> ID:{1}"},
            {"NoLooters", "<color=#4F9BFF>The box [{0}] is clear!</color>"},
            {"NoLootersPlayer", "<color=#4F9BFF>The player [{0}] is clear!</color>"},
            {"Nothing", "<color=#4F9BFF>Unable to find a valid entity</color>"},
            {"NoID", "<color=#4F9BFF>You must enter a valid entity ID</color>"},
            {"NoPlayer",  "No players with that name/ID found!"},
            {"SynError", "<color=#F5D400>Syntax Error: Type '/box' to view available options</color>" },
            {"SavedData", "You have successfully saved loot data" },
            {"ClearData", "You have successfully cleared all loot data" }
        };
        #endregion
    }
}


// --- End of file: BoxLooters.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KillStreaks.cs ---
// --- Original Local Path: KillStreaks.cs ---

using System.Collections.Generic;
using System;
using UnityEngine;
using Oxide.Core.Plugins;
using Oxide.Core;
using Oxide.Core.Configuration;
using System.Linq;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Killstreaks", "k1lly0u", "0.1.55", ResourceId = 1752)]
    class KillStreaks : RustPlugin
    {
        [PluginReference]
        Plugin Airstrike;
        [PluginReference]
        Plugin Clans;
        [PluginReference]
        Plugin Friends;
        [PluginReference]
        Plugin EventManager;
        [PluginReference]
        Plugin Economics;
        [PluginReference]
        Plugin ServerRewards;

        private Dictionary<ulong, int> cachedData = new Dictionary<ulong, int>();
        private List<BaseHelicopter> activeHelis = new List<BaseHelicopter>();
        private List<ulong> asGren = new List<ulong>();
        private List<ulong> ssGren = new List<ulong>();
        private List<ulong> arGren = new List<ulong>();
        private List<ulong> heGren = new List<ulong>();
        private List<ulong> mrtdm = new List<ulong>();
        private List<ulong> turret = new List<ulong>();

        private bool isSignal = false;

        private Dictionary<ulong, StreakType> activeGrenades = new Dictionary<ulong, StreakType>();

        private Dictionary<int, StreakType> streakTypes = new Dictionary<int, StreakType>()        
        {
            { 0, StreakType.None },
            { 1, StreakType.Airstrike },
            { 2, StreakType.SquadStrike },
            { 3, StreakType.Artillery },
            { 4, StreakType.Helicopter },
            { 5, StreakType.SupplyDrop },
            { 6, StreakType.AirstrikeGrenade },
            { 7, StreakType.SquadStrikeGrenade },
            { 8, StreakType.ArtilleryGrenade },
            { 9, StreakType.HelicopterGrenade },
            { 10, StreakType.Martyrdom },
            { 11, StreakType.TurretDrop },
            { 12, StreakType.Coins },
            { 13, StreakType.RP }
        };


        DataStorage data;
        private DynamicConfigFile KSData;

        private static Vector2 warningPos = new Vector2(0.25f, 0.13f);
        private static Vector2 warningDim = new Vector2(0.5f, 0.12f);

        private readonly int triggerMask = LayerMask.GetMask("Trigger");
        #region oxide hooks
        void OnServerInitialized()
        {
            RegisterMessages();
            KSData = Interface.Oxide.DataFileSystem.GetFile("killstreak_data");
            LoadData();
            LoadVariables();
            CheckDependencies();           
        }
        private void CheckDependencies()
        {
            if (Friends == null)
            {
                if (useFriendsAPI)
                {
                    PrintWarning($"FriendsAPI could not be found! Disabling friends feature");
                    useFriendsAPI = false;
                }
            }

            if (Clans == null)
            {
                if (useClans)
                {
                    PrintWarning($"Clans could not be found! Disabling clans feature");
                    useClans = false;
                }
            }
            if (Airstrike == null)
            {
                if (useAirstrike)
                {
                    PrintWarning($"Airstrike could not be found! Disabling airstrike feature");
                    useAirstrike = false;
                }
            }
            if (Economics == null)
            {
                PrintWarning("Economics could not be found! Unable to issue monetary rewards");
            }
            if (ServerRewards == null)
            {
                PrintWarning("ServerRewards could not be found! Unable to issue RP rewards");
            }
        }
        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new config file");
            Config.Clear();
            LoadVariables();            
        }
        void OnEntityDeath(BaseEntity entity, HitInfo hitinfo)
        {
            try
            {
                if (entity == null || hitinfo?.Initiator == null) return;
                if (entity is BasePlayer)
                {
                    ProcessDeath((BasePlayer)entity, hitinfo);
                    if (hitinfo.Initiator is BasePlayer)
                        ProcessKill((BasePlayer)hitinfo.Initiator, (BasePlayer)entity);
                }
                else if (entity is BaseHelicopter)
                        if (activeHelis.Contains((BaseHelicopter)entity)) activeHelis.Remove((BaseHelicopter)entity);
            }
            catch(Exception ex)
            {
            }      
        }
        void OnPlayerDisconnected(BasePlayer player) => ProcessDeath(player, null, true);
        void OnExplosiveThrown(BasePlayer player, BaseEntity entity)
        {
            var ID = player.userID;
            if (activeGrenades.ContainsKey(ID))
            {
                isSignal = true;
                timer.Once(3, () =>
                {
                    Vector3 pos = entity.transform.position;
                    if (pos == null) Puts("null");
                    if (activeGrenades[ID] == StreakType.AirstrikeGrenade) CallAirstrike(pos);
                    else if (activeGrenades[ID] == StreakType.SquadStrikeGrenade) CallAirstrike(pos, false);
                    else if (activeGrenades[ID] == StreakType.ArtilleryGrenade) { LaunchArtillery(pos); timer.Once(10, () => entity.Kill()); }
                    else if (activeGrenades[ID] == StreakType.HelicopterGrenade)
                    {
                        var count = cachedData[player.userID];
                        Vector3 strikePos = entity.GetEstimatedWorldPosition();
                        CallHeli(strikePos, count, true);
                    }
                    else if (activeGrenades[ID] == StreakType.TurretDrop) { timer.Once(3, () => DropTurret(pos, player)); timer.Once(6, () => entity.Kill()); }
                        activeGrenades.Remove(ID);
                    timer.Once(2.8f, () =>
                    {
                        Effect.server.Run("assets/bundled/prefabs/fx/smoke_signal.prefab", pos);
                        if (entity != null)
                            entity.Kill(BaseNetworkable.DestroyMode.None);
                    });
                });
            }
        }        
        void Unload()
        {  
            SaveData();
            KillHeli();          
        }
        #endregion

        #region functions    
        private bool HasPriv(BasePlayer player)
        {
            var hit = Physics.OverlapSphere(player.transform.position, 2f, triggerMask);
            foreach (var entity in hit)
            {
                BuildingPrivlidge privs = entity.GetComponentInParent<BuildingPrivlidge>();
                if (privs != null)
                    if (privs.IsAuthed(player)) return true;
            }
            return false;
        }
        private void ProcessKill(BasePlayer player, BasePlayer victim)
        {
            if (ignoreBuildPriv)
            {
                if (HasPriv(player))
                    return;
            }
            if (useClans)
                if (victim != null)
                    if (IsClanmate(player.userID, victim.userID))
                        return;
            if (useFriendsAPI)
                if (victim != null)
                    if (IsFriend(player.userID, victim.userID))
                        return;
            if (EventManager)
            {
                object isPlaying = EventManager?.Call("isPlaying", new object[] { player });
                if (isPlaying is bool)
                    if ((bool)isPlaying)
                        return;
            }
            if (!data.killStreakData.ContainsKey(player.userID))
                data.killStreakData.Add(player.userID, new KSDATA() { Name = player.displayName, highestKS = 0 });

            if (!cachedData.ContainsKey(player.userID))
                cachedData.Add(player.userID, 0);

            cachedData[player.userID]++;

            if (cachedData[player.userID] > data.killStreakData[player.userID].highestKS)
                data.killStreakData[player.userID].highestKS = cachedData[player.userID];

            Deal(player);          
        }
        private void ProcessDeath(BasePlayer player, HitInfo info, bool disconnected = false)
        {
            if (cachedData.ContainsKey(player.userID))
            {                
                if (!disconnected)
                    if (mrtdm.Contains(player.userID))
                        ChooseRandomExp(player.transform.position);

                string deathType = lang.GetMessage("suic", this, player.UserIDString);
                if (disconnected)
                    deathType = lang.GetMessage("disconnected", this, player.UserIDString);
                if (info != null) deathType = GetDeathType(info.Initiator);
                                
                ClearPlayerRewards(player);

                if (broadcastEnd)
                    BroadcastToAll(lang.GetMessage("endstreak", this, player.UserIDString) + deathType, player.displayName);                
            }
        }        
        private void ClearPlayerRewards(BasePlayer player)
        {
            ulong ID = player.userID;
            if (asGren.Contains(ID)) asGren.Remove(ID);
            if (ssGren.Contains(ID)) ssGren.Remove(ID);
            if (arGren.Contains(ID)) arGren.Remove(ID);
            if (heGren.Contains(ID)) heGren.Remove(ID);
            if (mrtdm.Contains(ID)) mrtdm.Remove(ID);
            if (turret.Contains(ID)) turret.Remove(ID);
            cachedData.Remove(ID);
        }
        public string GetDeathType(BaseEntity entity)
        {
            string deathtype = "";
            if (entity == null)
                return null;            
            else if (entity.ToPlayer() != null) deathtype = entity.ToPlayer().displayName;
            else if (entity.name.Contains("patrolhelicopter.pr")) deathtype = lang.GetMessage("aheli", this);
            else if (entity.name.Contains("animals/")) deathtype = lang.GetMessage("aanim", this);            
            else if (entity.name.Contains("beartrap.prefab")) deathtype = lang.GetMessage("abt", this);
            else if (entity.name.Contains("landmine.prefab")) deathtype = lang.GetMessage("aldm", this);
            else if (entity.name.Contains("spikes.floor.prefab")) deathtype = lang.GetMessage("flrsp", this);
            else if (entity.name.Contains("autoturret_deployed.prefab")) deathtype = lang.GetMessage("aturr", this);
            else if (entity.name.Contains("deployable/barricades") || entity.name.Contains("wall.external.high")) deathtype = lang.GetMessage("awall", this);
            return deathtype;
        }
        private void BroadcastToAll(string msg, string keyword) => PrintToChat(fontColor1 + keyword + " </color>" + fontColor2 + msg + "</color>");
        private void BroadcastToPlayer(BasePlayer player, string msg, string keyword) => SendReply(player, fontColor1 + keyword + " </color>" + fontColor2 + msg + "</color>");
        private void GUIToPlayer(BasePlayer player, string msg, string keyword) => KSUI.GetPlayer(player).UseUI(fontColor1 + keyword + " </color>" + fontColor2 + msg + "</color>", warningPos, warningDim, 20);
        private bool IsClanmate(ulong playerId, ulong friendId)
        {
            if (!Clans || !useClans) return false;
            object playerTag = Clans?.Call("GetClanOf", playerId);
            object friendTag = Clans?.Call("GetClanOf", friendId);
            if (playerTag is string && friendTag is string)
                if (playerTag == friendTag) return true;
            return false;
        }
        private List<BasePlayer> FindNearbyFriends(BasePlayer player)
        {
            List<BaseEntity> nearbyPlayers = new List<BaseEntity>();
            List<BasePlayer> nearbyFriends = new List<BasePlayer>();
            Vis.Entities(player.transform.position, nearbyRadius, nearbyPlayers);            
            foreach(var entry in nearbyPlayers)
                if (entry is BasePlayer)
                    if (entry != null)
                        if (IsClanmate(entry.ToPlayer().userID, player.userID) || IsFriend(entry.ToPlayer().userID, player.userID))
                            nearbyFriends.Add(entry.ToPlayer());
            if (nearbyFriends.Count > 0)
                return nearbyFriends;                       
            return null;
        }
       
        private bool IsFriend(ulong playerID, ulong friendID)
        {
            if (!Friends || !useFriendsAPI) return false;
            bool isFriend = (bool)Friends?.Call("IsFriend", playerID, friendID);
            return isFriend;
        }
        private Item GiveSupplySignal()
        {
            var definition = ItemManager.FindItemDefinition("supply.signal");
            if (definition != null)
            {
                Item item = ItemManager.CreateByItemID((int)definition.itemid, 1);
                return item;
            }
            return null;
        }
        #endregion
       
        #region punishments/prizes
        private void Deal(BasePlayer player)
        {
            var count = cachedData[player.userID];
            if (data.killStreaks.ContainsKey(count))
            {
                string langKey = data.killStreaks[count].Message;
                if (broadcastMsg)
                    BroadcastToAll(langKey + string.Format(" {0} kills", count), player.displayName);
                else BroadcastToPlayer(player, player.displayName + langKey, string.Format(" {0} kills", count));
                string message = lang.GetMessage("attract", this);

                if (data.killStreaks[count].StreakType != StreakType.None)
                {
                    
                    var streakType = data.killStreaks[count].StreakType;
                    var pos = player.transform.position;
                    switch (streakType)
                    {
                        case StreakType.Airstrike:
                            if (Airstrike)
                            {
                                CallAirstrike(pos);
                                message = lang.GetMessage("asLaunch", this, player.UserIDString);
                            }
                            break;
                        case StreakType.SquadStrike:
                            if (Airstrike)
                            {
                                CallAirstrike(pos, false);
                                message = lang.GetMessage("ssLaunch", this, player.UserIDString);
                            }
                            break;
                        case StreakType.Artillery:
                                LaunchArtillery(pos);
                            message = lang.GetMessage("arLaunch", this, player.UserIDString);
                            break;
                        case StreakType.Helicopter:
                                CallHeli(player.transform.position, count, false, player);
                            message = lang.GetMessage("asLaunch", this, player.UserIDString);
                            break;
                        case StreakType.SupplyDrop:                            
                                SendSupplyDrop(player, count);
                            message = lang.GetMessage("sdLaunch", this, player.UserIDString);
                            break;
                        case StreakType.Martyrdom:
                            SetMartyrdom(player);
                            message = lang.GetMessage("mrtdmActive", this, player.UserIDString);
                            break;
                        case StreakType.AirstrikeGrenade:
                            GiveRewardGrenade(player, StreakType.AirstrikeGrenade);
                            message = lang.GetMessage("asGrenade", this, player.UserIDString);
                            break;
                        case StreakType.SquadStrikeGrenade:
                            GiveRewardGrenade(player, StreakType.SquadStrikeGrenade);
                            message = lang.GetMessage("ssGrenade", this, player.UserIDString);
                            break;
                        case StreakType.ArtilleryGrenade:
                            GiveRewardGrenade(player, StreakType.ArtilleryGrenade);
                            message = lang.GetMessage("arGrenade", this, player.UserIDString);
                            break;
                        case StreakType.HelicopterGrenade:
                            GiveRewardGrenade(player, StreakType.HelicopterGrenade);
                            message = lang.GetMessage("heGrenade", this, player.UserIDString);
                            break;
                        case StreakType.TurretDrop:
                            GiveRewardGrenade(player, StreakType.TurretDrop);
                            message = lang.GetMessage("tuGrenade", this, player.UserIDString);
                            break;
                        case StreakType.Coins:
                            if (!Economics) return;
                            message = GiveEconomics(player, count);                            
                            break;
                        case StreakType.RP:
                            if (!ServerRewards) return;
                            message = GiveRP(player, count);
                            break;
                    }
                    GUIToPlayer(player, message, lang.GetMessage("warning", this));
                    Effect.server.Run("assets/prefabs/npc/autoturret/effects/targetacquired.prefab", player.transform.position);
                }

            }
        }
        private void GiveRewardGrenade(BasePlayer player, StreakType type)
        {
            List<ulong> list = new List<ulong>();
            if (type == StreakType.ArtilleryGrenade) list = arGren;
            else if (type == StreakType.AirstrikeGrenade) list = asGren;
            else if (type == StreakType.SquadStrikeGrenade) list = ssGren;
            else if (type == StreakType.HelicopterGrenade) list = heGren;
            else if (type == StreakType.TurretDrop) list = turret;
            player.inventory.GiveItem(GiveSupplySignal());
            if (list != null) list.Add(player.userID);
        }

        #region airstrike
        private void CallAirstrike(Vector3 target, bool type = true)
        {
            if (Airstrike)
            {                
                if (type) Airstrike?.Call("callStrike", target, 140 );
                else Airstrike?.Call("massStrike", target, 140 );
            }
            else Puts(lang.GetMessage("noAirstrike", this));
        }
        #endregion

        #region artillery
        private void LaunchArtillery(Vector3 target)
        {            
            timer.Repeat(rocketInterval, rocketAmount, () => RocketSpread(target));
        }
        private void RocketSpread(Vector3 targetPos)
        {
            targetPos = Quaternion.Euler(UnityEngine.Random.Range((float)(-rocketSpread * 0.2), rocketSpread * 0.2f), UnityEngine.Random.Range((float)(-rocketSpread * 0.2), rocketSpread * 0.2f), UnityEngine.Random.Range((float)(-rocketSpread * 0.2), rocketSpread * 0.2f)) * targetPos;
            CreateRocket(targetPos);
        }
        private BaseEntity CreateRocket(Vector3 targetPos)
        {
            string fireRocket = "ammo.rocket.fire";
            string rocketType = "ammo.rocket.basic";
            var rocket = rocketType;
            int rand = UnityEngine.Random.Range(1, 7);
                if (rand == 1)
                    rocket = fireRocket;

            var launchPos = targetPos + new Vector3(0, 200, 0);

            ItemDefinition projectileItem = ItemManager.FindItemDefinition(rocket);
            ItemModProjectile component = projectileItem.GetComponent<ItemModProjectile>();

            BaseEntity entity = GameManager.server.CreateEntity(component.projectileObject.resourcePath, launchPos, new Quaternion(), true);

            TimedExplosive rocketExplosion = entity.GetComponent<TimedExplosive>();
            ServerProjectile rocketProjectile = entity.GetComponent<ServerProjectile>();

            rocketExplosion.timerAmountMin = 60;
            rocketExplosion.timerAmountMax = 60;

            Vector3 newDirection = (targetPos - launchPos);

            entity.SendMessage("InitializeVelocity", (newDirection));
            entity.Spawn();

            return null;
        }
        #endregion

        #region helicopters

        private int HeliDistance = 50;
        private static LayerMask GROUND_MASKS = LayerMask.GetMask("Terrain", "World", "Construction");
                
        private void CallHeli(Vector3 pos, int streaknum, bool onSmoke = false, BasePlayer player = null)
        {
            int amount = data.killStreaks[streaknum].Amount;
            int i = 0;
            while (i < amount)
            {
                BaseEntity entity = CreateHeli(pos);
                MoveEntity(entity, pos);
                if (!onSmoke)
                    if (player != null)
                        CheckDistance(entity, player);
                i++;
            }
        }
        private BaseEntity CreateHeli(Vector3 pos)
        {
            BaseEntity entity = GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab", new Vector3(), new Quaternion(), true);
            if (!entity) return null;
            ((BaseCombatEntity)entity).startHealth = HeliHealth;
            var weakspots = ((BaseHelicopter)entity).weakspots;
            weakspots[0].maxHealth = MainRotorHealth;
            weakspots[0].health = MainRotorHealth;
            weakspots[1].maxHealth = TailRotorHealth;
            weakspots[1].health = TailRotorHealth;
            entity.GetComponent<BaseHelicopter>().maxCratesToSpawn = 2;
            entity.Spawn();
            activeHelis.Add((BaseHelicopter)entity);
            ConVar.PatrolHelicopter.bulletAccuracy = HeliAccuracy;
            entity.GetComponent<PatrolHelicopterAI>().State_Move_Enter(pos + new Vector3(0.0f, 10f, 0.0f));
            return entity;
        }
        private Vector3 calculateSpawnPos(Vector3 arenaPos)
         {
             Vector3 spawnPos = new Vector3(0, 0, 0);
             float randX = RandomRange(SpawnDistance);
             float randZ = RandomRange(SpawnDistance);
             spawnPos.x = arenaPos.x - randX;
             spawnPos.z = arenaPos.z - randZ;

             var ang = UnityEngine.Random.Range(1, 360);
             Vector3 finalPos = GetGroundPosition(spawnPos);
             finalPos.y = finalPos.y + 30;
             finalPos.x = spawnPos.x + SpawnDistance * Mathf.Sin(ang * Mathf.Deg2Rad);
             finalPos.z = spawnPos.z + SpawnDistance * Mathf.Cos(ang * Mathf.Deg2Rad);

             return finalPos;
         }
        private float RandomRange(float distance, float difference = 50)
         {
             float rand = UnityEngine.Random.Range(distance - difference, distance + difference);
             return rand;
         }
        private void MoveEntity(BaseEntity entity, Vector3 pos)
         {
             Vector3 spawnPos = calculateSpawnPos(pos);
             entity.transform.position = spawnPos;
         }
        private void CheckDistance(BaseEntity entity, BasePlayer player)
        {
            if (entity == null || player == null) return;
            if (cachedData.ContainsKey(player.userID))
            {
                var currentPos = entity.transform.position;
                var targetPos = player.transform.position;
                if (targetPos != null)
                {
                    if (Vector3.Distance(currentPos, targetPos) < (currentPos.y + HeliDistance))
                    {
                        PatrolHelicopterAI heliAI = entity.GetComponent<PatrolHelicopterAI>();
                        heliAI.State_Orbit_Enter(50);
                        heliAI.maxSpeed = HeliSpeed;
                    }
                    else
                        entity.GetComponent<PatrolHelicopterAI>().State_Move_Enter(targetPos + new Vector3(0.0f, 10f, 0.0f));
                }
                timer.Once(7, () => CheckDistance(entity, player));
            }
        }
        static Vector3 GetGroundPosition(Vector3 sourcePos) // credit Wulf & Nogrod
         {
             RaycastHit hitInfo;

             if (Physics.Raycast(sourcePos, Vector3.down, out hitInfo, GROUND_MASKS))
             {
                 sourcePos.y = hitInfo.point.y;
             }
             sourcePos.y = Mathf.Max(sourcePos.y, TerrainMeta.HeightMap.GetHeight(sourcePos));
             return sourcePos;
         }
        private void KillHeli()
         {
            int i = 0;
            foreach (var heli in activeHelis) { heli.KillMessage(); i++; }
            if (i > 0) Puts("Destroyed {0} KillStreak Helicopters", i);
         }
        #endregion

        #region martyrdom
        private void SetMartyrdom(BasePlayer player) => mrtdm.Add(player.userID);
        
        private void ChooseRandomExp(Vector3 pos)
        {
            int num = UnityEngine.Random.Range(1, 6);
            if (num == 1 || num == 2 || num == 3) dropGrenade(pos);
            else if (num == 4 || num == 5) dropBeancan(pos);
            else if (num == 6) dropExplosive(pos);
        }
        private void dropGrenade(Vector3 deathPos)
        {
            timer.Once(0.1f, () => Effect.server.Run("assets/prefabs/weapons/f1 grenade/effects/bounce.prefab", deathPos));
            timer.Once(4f, () =>
            {
                Effect.server.Run("assets/prefabs/weapons/f1 grenade/effects/f1grenade_explosion.prefab", deathPos);
                dealDamage(deathPos, grenadeDamage, grenadeRadius);
            });
        }

        private void dropBeancan(Vector3 deathPos)
        {
            timer.Once(0.1f, () => Effect.server.Run("assets/prefabs/weapons/beancan grenade/effects/bounce.prefab", deathPos));
            timer.Once(4f, () =>
            {
                Effect.server.Run("assets/prefabs/weapons/beancan grenade/effects/beancan_grenade_explosion.prefab", deathPos);
                dealDamage(deathPos, beancanDamage, beancanRadius);
            });
        }

        private void dropExplosive(Vector3 deathPos)
        {
            timer.Once(0.1f, () => Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.updated.prefab", deathPos));
            timer.Once(2f, () => Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.updated.prefab.prefab", deathPos));
            timer.Once(4f, () => Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.updated.prefab.prefab", deathPos));
            timer.Once(6f, () => Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.updated.prefab.prefab", deathPos));
            timer.Once(8f, () =>
            {
                Effect.server.Run("assets/prefabs/tools/c4/effects/c4_explosion.prefab", deathPos);
                dealDamage(deathPos, explosiveDamage, explosiveRadius);
            });
        }
        #endregion

        #region supplydrop
        private void SendSupplyDrop(BasePlayer player, int streaknum)
        {
            if (player == null) return;
            int amount = data.killStreaks[streaknum].Amount;
            int i = 0;
            while (i < amount)
            {
                SpawnSignal(player);                
                i++;
            }
        }
        private void SpawnSignal(BasePlayer player)
        {
            var pos = player.transform.position;
            Vector3 setPos = pos + new Vector3(RandomRange(10, 5), 200, RandomRange(10, 5));
            BaseEntity entity = GameManager.server.CreateEntity("assets/prefabs/misc/supply drop/supply_drop.prefab", setPos, new Quaternion(), true);
            if (!entity) return;
            Rigidbody body = entity.GetComponent<Rigidbody>();
            body.drag = 0.5f;              
            entity.Spawn();
            timer.Once(13.5f, () => Effect.server.Run("assets/bundled/prefabs/fx/player/groundfall.prefab", pos) );
        }
        #endregion

        #region turret drop
        private void DropTurret(Vector3 pos, BasePlayer player)
        {
            AutoTurret turret = CreateTurret(pos);
            AssignTurretAuth(player, turret);
            player.SendNetworkUpdateImmediate();
        }       
        private AutoTurret CreateTurret(Vector3 targetPos)
        {
            BaseEntity turret = GameManager.server.CreateEntity("assets/prefabs/npc/autoturret/autoturret_deployed.prefab", targetPos, new Quaternion(), true);
            turret.Spawn(); return (AutoTurret)turret;
        }
        private void AssignTurretAuth(BasePlayer player, AutoTurret turret)
        {
            var nearbyFriends = FindNearbyFriends(player);
            if (nearbyFriends != null)
            {
                foreach (var entry in nearbyFriends)
                    if (entry != null)
                        turret.authorizedPlayers.Add(new ProtoBuf.PlayerNameID() { userid = entry.userID, username = entry.displayName });
            }
            turret.inventory.AddItem(ItemManager.FindItemDefinition(turretAmmoTypeName), turretAmmoCount);
            turret.InitiateStartup();
            turret.SendNetworkUpdateImmediate();
        }
        #endregion

        #region payment
        private string GiveEconomics(BasePlayer player, int streaknum)
        {
            int amount = data.killStreaks[streaknum].Amount;
            Economics?.Call("Deposit", player.userID, amount);
            return string.Format(lang.GetMessage("coinsActive", this, player.UserIDString), amount);
        }
        private string GiveRP(BasePlayer player, int streaknum)
        {
            int amount = data.killStreaks[streaknum].Amount;
            ServerRewards?.Call("AddPoints", player.userID, amount);
            return string.Format(lang.GetMessage("rpActive", this, player.UserIDString), amount);
        }

        #endregion

        #region damage
        private void dealDamage(Vector3 deathPos, float damage, float radius)
        {
            List<BaseCombatEntity> entitiesClose = new List<BaseCombatEntity>();
            List<BaseCombatEntity> entitiesNear = new List<BaseCombatEntity>();
            List<BaseCombatEntity> entitiesFar = new List<BaseCombatEntity>();
            Vis.Entities<BaseCombatEntity>(deathPos, radius / 3, entitiesClose);
            Vis.Entities<BaseCombatEntity>(deathPos, radius / 2, entitiesNear);
            Vis.Entities<BaseCombatEntity>(deathPos, radius, entitiesFar);

            foreach (BaseCombatEntity entity in entitiesClose)
            {
                entity.Hurt(damage, Rust.DamageType.Explosion, null, true);
            }

            foreach (BaseCombatEntity entity in entitiesNear)
            {
                if (entitiesClose.Contains(entity)) return;
                entity.Hurt(damage / 2, Rust.DamageType.Explosion, null, true);
            }

            foreach (BaseCombatEntity entity in entitiesFar)
            {
                if (entitiesClose.Contains(entity) || entitiesNear.Contains(entity)) return;
                entity.Hurt(damage / 4, Rust.DamageType.Explosion, null, true);
            }
        }
        #endregion

        #endregion

        #region chat commands
        [ChatCommand("ks")]
        void cmdTarget(BasePlayer player, string command, string[] args)
        {
            if (args == null || args.Length == 0)
            {
                SendReply(player, fontColor1 + lang.GetMessage("title", this, player.UserIDString) +"</color>");
                BroadcastToPlayer(player, lang.GetMessage("kstop2", this, player.UserIDString), lang.GetMessage("kstop", this, player.UserIDString));
                BroadcastToPlayer(player, lang.GetMessage("kspb2", this, player.UserIDString), lang.GetMessage("kspb", this, player.UserIDString));
                if (isAuth(player))
                {
                    BroadcastToPlayer(player, lang.GetMessage("ksAdd1", this, player.UserIDString), lang.GetMessage("ksAdd", this, player.UserIDString));
                    BroadcastToPlayer(player, lang.GetMessage("ksRem1", this, player.UserIDString), lang.GetMessage("ksRem", this, player.UserIDString));
                    BroadcastToPlayer(player, lang.GetMessage("ksList1", this, player.UserIDString), lang.GetMessage("ksList", this, player.UserIDString));
                    BroadcastToPlayer(player, lang.GetMessage("ksListNum1", this, player.UserIDString), lang.GetMessage("ksListNum", this, player.UserIDString));

                    BroadcastToPlayer(player, lang.GetMessage("kswipe2", this, player.UserIDString), lang.GetMessage("kswipe", this, player.UserIDString));
                }
                return;
            }
            var ID = player.userID;
            switch (args[0].ToLower())
            {
                case "top":
                    if (args.Length >= 1)
                    {                        
                        int amount = 5;
                        if (args.Length >= 2)
                            if (!int.TryParse(args[1], out amount))
                                amount = 5;
                        Dictionary<string, int> top5 = data.killStreakData.OrderByDescending(pair => pair.Value.highestKS).Take(amount).ToDictionary(pair => pair.Value.Name, pair => pair.Value.highestKS);
                        if (top5.Count > 0)
                        {
                            SendReply(player, fontColor1 + lang.GetMessage("title", this, player.UserIDString) + "</color>" + fontColor2 + lang.GetMessage("bestHits", this, player.UserIDString) + "</color>");
                            foreach (var name in top5)
                            {
                                SendReply(player, string.Format(fontColor2 + lang.GetMessage("topList", this, player.UserIDString) + "</color>", name.Key, name.Value));
                            }
                        }
                    }
                    return;
                case "wipe":
                    if (isAuth(player))
                    {
                        data.killStreakData.Clear();
                        SendReply(player, lang.GetMessage("wipe", this, player.UserIDString));
                    }
                    return;                
                case "pb":
                    if (data.killStreakData.ContainsKey(ID))
                        BroadcastToPlayer(player, data.killStreakData[ID].highestKS.ToString(), lang.GetMessage("pb", this, player.UserIDString));                    
                    return;
                case "list":
                    if (isAuth(player))
                    {
                        if (args.Length >= 2)
                        {
                            int i = -1;
                            int.TryParse(args[1], out i);
                            if (i <= 0) { BroadcastToPlayer(player, lang.GetMessage("invKsNum", this, player.UserIDString), lang.GetMessage("ksListNum", this, player.UserIDString)); return; }
                            if (!data.killStreaks.ContainsKey(i)) { SendReply(player, string.Format(fontColor1 + lang.GetMessage("invKey", this, player.UserIDString) + "</color>", i)); return; }
                            BroadcastToPlayer(player, i.ToString(), lang.GetMessage("kills", this, player.UserIDString));
                            BroadcastToPlayer(player, data.killStreaks[i].StreakType.ToString(), lang.GetMessage("type", this, player.UserIDString));
                            BroadcastToPlayer(player, data.killStreaks[i].Amount.ToString(), lang.GetMessage("amount", this, player.UserIDString));
                            string message = data.killStreaks[i].Message;
                            BroadcastToPlayer(player, message, lang.GetMessage("message", this, player.UserIDString));
                            return;
                        }
                        else
                        {
                            BroadcastToPlayer(player, "", lang.GetMessage("regStreaks" , this, player.UserIDString));
                            foreach (var entry in data.killStreaks) BroadcastToPlayer(player, entry.Key.ToString(), "");                            
                        }
                    }
                    return;
                case "add":
                    if (isAuth(player))
                    {
                        if (args.Length >= 3)
                        {                            
                            int i = -1;
                            int.TryParse(args[1], out i);
                            if (i <= 0) { BroadcastToPlayer(player, "", lang.GetMessage("invKillNum", this, player.UserIDString)); return; }
                            if (data.killStreaks.ContainsKey(i))
                            {
                                BroadcastToPlayer(player, "", string.Format(lang.GetMessage("amountUsed", this, player.UserIDString), i));
                                return;
                            }
                            data.killStreaks.Add(i, new Streaks() { Message = args[2], StreakType = StreakType.None, Amount = 0 });
                            
                            if (args.Length >= 4)
                            {
                                int sNum = -1;
                                int.TryParse(args[3], out sNum);
                                if (!streakTypes.ContainsKey(sNum)) { BroadcastToPlayer(player, "", string.Format(lang.GetMessage("invST", this, player.UserIDString), args[3])); return; }
                                data.killStreaks[i].StreakType = streakTypes[sNum];
                                int o = -1;
                                if (args.Length >= 5) int.TryParse(args[4], out o);
                                if (o != -1)
                                    data.killStreaks[i].Amount = o;
                            }
                            BroadcastToPlayer(player, "", string.Format(lang.GetMessage("addSuccess", this, player.UserIDString), i));
                            return;
                        }
                        BroadcastToPlayer(player, "V " + Version, lang.GetMessage("title", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("ksAddForm1", this, player.UserIDString), lang.GetMessage("ksAddForm", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("kNum1", this, player.UserIDString), lang.GetMessage("kNum", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("kMes1", this, player.UserIDString), lang.GetMessage("kMes", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("kTyp1", this, player.UserIDString), lang.GetMessage("kTyp", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("kAmo1", this, player.UserIDString), lang.GetMessage("kAmo", this, player.UserIDString));
                        BroadcastToPlayer(player, lang.GetMessage("showTypes1", this, player.UserIDString), lang.GetMessage("showTypes", this, player.UserIDString));
                    }
                    return;
                case "show":
                    if (isAuth(player))
                    {
                        BroadcastToPlayer(player, lang.GetMessage("availTypes", this, player.UserIDString), lang.GetMessage("title", this, player.UserIDString));
                        foreach (var entry in streakTypes)
                        {
                            BroadcastToPlayer(player, entry.Value.ToString(), entry.Key.ToString());
                        }
                    }
                    return;
                case "remove":
                    if (isAuth(player))
                    {
                        if (args.Length >= 2)
                        {
                            int i = -1;
                            int.TryParse(args[1], out i);
                            if (i == -1) { BroadcastToPlayer(player, lang.GetMessage("invKSNum", this, player.UserIDString), lang.GetMessage("ksRem", this, player.UserIDString)); return; }
                            if (!data.killStreaks.ContainsKey(i)) { BroadcastToPlayer(player, "", string.Format(lang.GetMessage("invKey", this, player.UserIDString), i)); return; }
                            data.killStreaks.Remove(i);                           
                            
                            BroadcastToPlayer(player, "", string.Format(lang.GetMessage("remKS", this, player.UserIDString), i.ToString()));
                            SaveData();
                        }
                    }
                    return;
                case "strike":
                    
                    if (asGren.Contains(ID))
                    {
                        if (!activeGrenades.ContainsKey(ID))
                            activeGrenades.Add(ID, StreakType.AirstrikeGrenade);
                        else
                            activeGrenades[ID] = StreakType.AirstrikeGrenade;
                        asGren.Remove(ID);
                       BroadcastToPlayer(player, "", lang.GetMessage("asActive", this, player.UserIDString));
                    }
                    return;
                case "squad":                    
                    if (ssGren.Contains(ID))
                    {
                        if (!activeGrenades.ContainsKey(ID))
                            activeGrenades.Add(ID, StreakType.SquadStrikeGrenade);
                        else
                            activeGrenades[ID] = StreakType.SquadStrikeGrenade;
                        ssGren.Remove(ID);
                        BroadcastToPlayer(player, "", lang.GetMessage("ssActive", this, player.UserIDString));
                    }
                    return;
                case "art":
                    if (arGren.Contains(ID))
                    {
                        if (!activeGrenades.ContainsKey(ID))
                            activeGrenades.Add(ID, StreakType.ArtilleryGrenade);
                        else
                            activeGrenades[ID] = StreakType.ArtilleryGrenade;
                        arGren.Remove(ID);
                        BroadcastToPlayer(player, "", lang.GetMessage("arActive", this, player.UserIDString));
                    }
                    return;
                case "heli":
                    if (heGren.Contains(ID))
                    {
                        if (!activeGrenades.ContainsKey(ID))
                            activeGrenades.Add(ID, StreakType.HelicopterGrenade);
                        else
                            activeGrenades[ID] = StreakType.HelicopterGrenade;
                        heGren.Remove(ID);
                        BroadcastToPlayer(player, "", lang.GetMessage("heActive", this, player.UserIDString));
                    }
                    return;
                case "turret":
                    if (turret.Contains(ID))
                    {
                        if(!activeGrenades.ContainsKey(ID))
                            activeGrenades.Add(ID, StreakType.TurretDrop);
                        else
                            activeGrenades[ID] = StreakType.TurretDrop;
                        turret.Remove(ID);
                        BroadcastToPlayer(player, "", lang.GetMessage("tuActive", this, player.UserIDString));
                    }
                    return;                
            }
        }
        
        bool isAuth(BasePlayer player)
        {
            if (player.net.connection != null)
                if (player.net.connection.authLevel < 1)
                    return false;
            return true;
        }
        
        #endregion

        #region gui

        class KSUI : MonoBehaviour
        {
            int i;

            private BasePlayer player;

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                i = 0;
            }

            public static KSUI GetPlayer(BasePlayer player)
            {
                KSUI p = player.GetComponent<KSUI>();
                if (p == null) p = player.gameObject.AddComponent<KSUI>();
                return p;
            }
            
            public void UseUI(string msg, Vector2 pos, Vector2 dim, int size = 18)
            {
                i++;
                string uiNum = i.ToString();
                     
                Vector2 posMin = pos;
                Vector2 posMax = posMin + dim;

                var elements = new CuiElementContainer();
                CuiElement textElement = new CuiElement
                {
                    Name = uiNum,
                    Parent = "Overlay",
                    FadeOut = 0.3f,
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = msg,
                            FontSize = size,
                            Align = TextAnchor.MiddleCenter,
                            FadeIn = 0.3f
                        },
                        new CuiOutlineComponent
                        {
                            Distance = "1.0 1.0",
                            Color = "0.0 0.0 0.0 1.0"
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = posMin.x + " " + posMin.y,
                            AnchorMax = posMax.x + " " + posMax.y
                        }
                    }
                };
                elements.Add(textElement);
                CuiHelper.AddUi(player, elements);
                Interface.GetMod().CallHook("DestroyWarningMsg", new object[] { player, uiNum, 5 });
            }
        }
        private void DestroyNotification(BasePlayer player, string msgNum)
        {
            bool t = CuiHelper.DestroyUi(player, msgNum);
            if (!t) DestroyNotification(player, msgNum);
        }
        private void DestroyWarningMsg(BasePlayer player, string msgNum, int duration)
        {
            timer.Once(duration, () => DestroyNotification(player, msgNum));
        }
        #endregion

        #region config

        bool Changed;

        static bool useFriendsAPI = true;
        static bool useClans = true;
        static bool useAirstrike = true;
        static bool broadcastMsg = true;
        static bool ignoreBuildPriv = false;
        static bool broadcastEnd = true;

        static int saveTimer = 10;

        static float HeliBulletDamage = 3.0f;
        static float HeliHealth = 4000.0f;
        static float MainRotorHealth = 400.0f;
        static float TailRotorHealth = 250.0f;
        static float HeliSpeed = 30.0f;
        static float HeliAccuracy = 6.0f;
        static float SpawnDistance = 500f;

        static string fontColor1 = "<color=orange>";
        static string fontColor2 = "<color=#939393>";

        static float rocketInterval = 0.5f;
        static float rocketSpread = 6.0f;
        static int rocketAmount = 20;

        static float grenadeRadius = 5f;
        static float grenadeDamage = 75f;
        static float beancanRadius = 4f;
        static float beancanDamage = 30f;
        static float explosiveRadius = 10f;
        static float explosiveDamage = 110f;

        static float nearbyRadius = 50f;
        static string turretAmmoTypeName = "ammo.rifle";
        static int turretAmmoCount = 1000;

        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            CheckCfgFloat("Helicopter - Bullet damage", ref HeliBulletDamage);
            CheckCfgFloat("Helicopter - Health", ref HeliHealth);
            CheckCfgFloat("Helicopter - Mail rotor health", ref MainRotorHealth);
            CheckCfgFloat("Helicopter - Tail rotor health", ref TailRotorHealth);
            CheckCfgFloat("Helicopter - Speed", ref HeliSpeed);
            CheckCfgFloat("Helicopter - Accuracy", ref HeliAccuracy);
            CheckCfgFloat("Helicopter - Spawn distance (away from player)", ref SpawnDistance);

            CheckCfgFloat("Artillery - Rocket interval", ref rocketInterval);
            CheckCfgFloat("Artillery - Rocket spread", ref rocketSpread);
            CheckCfg("Artillery - Rocket amount", ref rocketAmount);

            CheckCfgFloat("Martyrdom - Explosive radius - Grenade", ref grenadeRadius);
            CheckCfgFloat("Martyrdom - Explosive radius - Beancan", ref beancanRadius);
            CheckCfgFloat("Martyrdom - Explosive radius - Explosive", ref explosiveRadius);
            CheckCfgFloat("Martyrdom - Explosive damage - Grenade", ref grenadeDamage);
            CheckCfgFloat("Martyrdom - Explosive damage - Beancan", ref beancanDamage);
            CheckCfgFloat("Martyrdom - Explosive damage - Explosive", ref explosiveDamage);

            CheckCfgFloat("TurretDrop - Auto-authorize radius", ref nearbyRadius);
            CheckCfg("TurretDrop - Ammunition type shortname", ref turretAmmoTypeName);
            CheckCfg("TurretDrop - Ammunition amount", ref turretAmmoCount);

            CheckCfg("Options - Use FriendsAPI", ref useFriendsAPI);
            CheckCfg("Options - Use Clans", ref useClans);
            CheckCfg("Options - Use Airstrike", ref useAirstrike);
            CheckCfg("Options - Ignore kills in building privilege", ref ignoreBuildPriv);
            
            CheckCfg("Options - Data save timer", ref saveTimer);

            CheckCfg("Messages - Broadcast streak message", ref broadcastMsg);
            CheckCfg("Messages - Broadcast streak end", ref broadcastEnd);
            CheckCfg("Messages - Message color", ref fontColor2);
            CheckCfg("Messages - Main color", ref fontColor1);
        }
        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }
        private void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }
        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }
        #endregion

        #region classes and data storage
        void SaveData()
        {
            foreach (var entry in cachedData)
            {
                var d = data.killStreakData;
                if (!d.ContainsKey(entry.Key))
                    d.Add(entry.Key, new KSDATA());
                if (d[entry.Key].highestKS < entry.Value)
                    d[entry.Key].highestKS = entry.Value;
            }
            KSData.WriteObject(data);
        }
        void SaveLoop()
        {
            SaveData();
            timer.Once(saveTimer * 60, () => SaveData());
        }
        void LoadData()
        {
            try
            {
                data = Interface.GetMod().DataFileSystem.ReadObject<DataStorage>("killstreak_data");
            }
            catch
            {
                data = new DataStorage();
                data.killStreaks = ksDefault;
            }
            if (data.killStreaks == null || data.killStreaks.Count < 1) data.killStreaks = ksDefault;
            timer.Once(saveTimer, () => SaveLoop());
        }
        void RegisterMessages() => lang.RegisterMessages(messages, this);       
                
        class DataStorage
        {
            public Dictionary<ulong, KSDATA> killStreakData = new Dictionary<ulong, KSDATA>();
            public Dictionary<int, Streaks> killStreaks = new Dictionary<int, Streaks>();
            public DataStorage() { }
        }
        class KSDATA
        {
            public string Name;
            public int highestKS = 0;
        }       
        class Streaks
        {
            public string Message;
            public StreakType StreakType;
            public int Amount = 1;
        }
        enum StreakType
        {
            None,
            Airstrike,
            SquadStrike,
            Artillery,
            Helicopter,
            SupplyDrop,
            AirstrikeGrenade,
            SquadStrikeGrenade,
            ArtilleryGrenade,
            HelicopterGrenade,
            Martyrdom,
            TurretDrop,
            Coins,
            RP
        }
        #endregion

        #region defaultks

        Dictionary<int, Streaks> ksDefault = new Dictionary<int, Streaks>()
        {
            {5, new Streaks() {StreakType = StreakType.SupplyDrop, Message = " is on a killing spree!" } },
            {10, new Streaks() {StreakType = StreakType.ArtilleryGrenade, Message = " is on a kill frenzy!" } },
            {15, new Streaks() {StreakType = StreakType.Martyrdom, Message = " is running riot!" } },
            {20, new Streaks() {StreakType = StreakType.Helicopter, Amount = 1, Message = " is on a rampage!" } },
            {25, new Streaks() {StreakType = StreakType.HelicopterGrenade, Message = " is untouchable!"} },
            {30, new Streaks() {StreakType = StreakType.SquadStrike, Amount = 1, Message = " is invincible!" } },
            {35, new Streaks() {StreakType = StreakType.SupplyDrop, Amount = 3, Message = " is a god!" } }            
        };

        #endregion

        #region message
        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "Killstreaks: "},
            {"aheli", "a helicopter" },
            {"aanim", "a animal" },
            {"abt", "a bear trap" },
            {"aldm", "a landmine" },
            {"flrsp", "floor spikes" },
            {"aturr", "a turret" },
            {"awall", "a wall" },
            {"endstreak", "'s killstreak has been ended by " },
            {"suic", "suicide" },
            {"disconnected", "disconnection" },
            {"attract", "Your killstreak has attracted attention!" },
            {"warning", "WARNING! " },
            {"pb", "Highest kill streak: " },
            {"kstop", "/ks top" },
            {"kswipe", "/ks wipe" },
            {"kspb", "/ks pb" },
            {"kswipe2", "- Clears all Killstreak data" },
            {"kstop2", "- Displays top Killstreaks" },
            {"kspb2", "- Shows your personal best Killstreak" },
            {"topList", "{0} : {1} kills" },
            {"bestHits", "Top killstreaks" },
            {"noAirstrike", "Airstrike is not installed, unable to send strike" },
            {"ksAdd", "/ks add" },
            {"amountUsed", "You already have a killstreak set for {0} kills" },
            {"ksRem", "/ks remove ##" },
            {"ksList", "/ks list" },
            {"ksListNum", "/ks list ##" },
            {"ksAdd1", " - Displays the required format to add a kill streak" },
            {"ksRem1", " - Remove a kill streak" },
            {"ksList1", " - List current kills" },
            {"ksListNum1", " - Display kill streak information for <killnumber>" },
            {"invKSNum", " - You must enter a number." },
            {"invKey", "You do not have a killstreak set to {0} kills" },
            {"kills", "Kills: " },
            {"type", "Type: " },
            {"amount", "Amount: " },
            {"message", "Message: " },
            {"regStreaks", "You have kill streaks registered to the following kills:" },
            {"invKillNum", "You must enter a number of kills!" },
            {"invST", "{0} is a invalid Streak type!" },
            {"addSuccess", "You have successfully registered a kill streak for {0} kills" },
            { "ksAddForm", "/ks add <killnumber> <message> <opt:type> <opt:amount>" },
            { "ksAddForm1", " - Kill number and message are required!" },
            { "kNum", "<killnumber>" },
            { "kNum1", " - The amount of kills required to activate the streak" },
            { "kMes", "<message>" },
            { "kMes1", " - The message that will be globally broadcast" },
            { "kTyp", "<opt:type>" },
            { "kTyp1", " - (Optional) Type of streak" },
            { "kAmo", "<opt:amount>" },
            { "kAmo1", " - (Optional) Amount of times the type will be called" },
            { "remKS", "You have removed the kill streak for {0}" },
            { "showTypes", "/ks show" },
            { "showTypes1", " - Show available killstreak types and their ID" },
            { "availTypes", " - Available streak types:" },
            { "asGrenade", "You have been given a Airstrike signal. Activate it with /ks strike" },
            { "ssGrenade", "You have been given a SquadStrike signal. Activate it with /ks squad" },
            { "arGrenade", "You have been given a Artillery signal. Activate it with /ks art" },
            { "heGrenade", "You have been given a Helicopter signal. Activate it with /ks heli" },
            { "tuGrenade", "You have been given a Turret Drop signal. Activate it with /ks turret" },
            { "mrtdmActive", "You have earnt the perk Martyrdom. When you die next you will drop a random explosive!" },
            { "asLaunch", "An Airstrike has been launched at your position!" },
            { "arLaunch", "An Artillery strike has been launched at your position!" },
            { "ssLaunch", "An SquadStrike has been launched at your position!" },
            { "heLaunch", "An helicopter has been sent to your position!" },
            { "sdLaunch", "A supply drop is inbound on your position!" },
            { "asActive", "You have activated your Airstrike, throw the supply signal to call it" },
            { "ssActive", "You have activated your SquadStrike, throw the supply signal to call it" },
            { "arActive", "You have activated your Artillery Strike, throw the supply signal to launch" },
            { "heActive", "You have activated your Helicopter Strike, throw the supply signal to call it" },
            { "tuActive", "You have activated your Turret Drop, throw the supply signal to call it" },
            { "coinsActive", "You have earnt {0} coins" },
            { "rpActive", "You have earnt {0} RP"},
            { "messageCheck", "1234" }
        };
        #endregion


    }
}


// --- End of file: KillStreaks.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQRates-1.99.37.cs ---
// --- Original Local Path: IQRates-1.99.37.cs ---

using UnityEngine;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using System;
using Object = System.Object;
using System.Text;
using Facepunch;
using System.Collections;

namespace Oxide.Plugins
{
    [Info("IQRates", "Mercury", "1.99.37")]
    [Description("Настройка рейтинга на сервере")]
    class IQRates : RustPlugin
    {
        
        private const Boolean LanguageEn = false;
        bool IsPermission(string userID,string Permission)
        {
            if (permission.UserHasPermission(userID, Permission))
                return true;
            else return false;
        }
        private void StartCargoPlane(Configuration.PluginSettings.OtherSettings.EventSettings EventSettings)
        {
            if (!EventSettings.CargoPlaneSetting.FullOff && EventSettings.CargoPlaneSetting.UseEventCustom)
            {
                Int32 TimeSpawn = EventSettings.CargoPlaneSetting.RandomTimeSpawn.UseRandomTime ? GetRandomTime(EventSettings.CargoPlaneSetting.RandomTimeSpawn.MinEventSpawnTime, EventSettings.CargoPlaneSetting.RandomTimeSpawn.MaxEventSpawnTime) : EventSettings.CargoPlaneSetting.EventSpawnTime;
                timer.Once(TimeSpawn, () =>
                {
                    StartCargoPlane(EventSettings);
                    SpawnPlane();
                    
                    if(EventSettings.CargoPlaneSetting.useGameTip)
                        MessageGameTipsError("ALERT_CARGOPLANE");
                });
            }
        }

        UInt64? GetQuarryPlayer(UInt64 NetID)
        {
            if (!DataQuarryPlayer.ContainsKey(NetID)) return null;
            if (DataQuarryPlayer[NetID] == 0) return null;

            return DataQuarryPlayer[NetID];
        }
        void StartupFreeze()
        {
            if (!config.pluginSettings.OtherSetting.UseFreezeTime) return;
            timeComponent.ProgressTime = true;
            ConVar.Env.time = config.pluginSettings.OtherSetting.FreezeTime;
        }
                
        void OnQuarryToggled(MiningQuarry quarry, BasePlayer player) => AddQuarryPlayer(quarry.net.ID.Value, player.userID);

        private class OvenController : FacepunchBehaviour
        {
            private static readonly Dictionary<BaseOven, OvenController> Controllers = new Dictionary<BaseOven, OvenController>();
            private BaseOven _oven;
            private float _speed;
            private string _ownerId;
            private Int32 _ticks;
            private Int32 _speedFuel;
            
            private bool IsFurnace => (int)_oven.temperature >= 2;

            private void Awake()
            {
                _oven = (BaseOven)gameObject.ToBaseEntity();
                _ownerId = _oven.OwnerID.ToString();
            }

            public object Switch(BasePlayer player)
            {
                if (!IsFurnace || _oven.needsBuildingPrivilegeToUse && (player != null && !player.CanBuild()))
                    return null;

                if (_oven.IsOn())
                    StopCooking();
                else
                {
                    _ownerId = _oven.OwnerID != 0 || player == null ? _oven.OwnerID.ToString() : player.UserIDString;
                    StartCooking();
                }
                return false;
            }

            public void TryRestart()
            {
                if (!_oven.IsOn())
                    return;
                _oven.CancelInvoke(_oven.Cook);
                StopCooking();
                StartCooking();
            }
            private void Kill()
            {
                if (_oven.IsOn())
                {
                    StopCooking();
                    _oven.StartCooking();
                }
                Destroy(this);
            }

            
            public static OvenController GetOrAdd(BaseOven oven)
            {
                OvenController controller;
                if (Controllers.TryGetValue(oven, out controller))
                    return controller;
                controller = oven.gameObject.AddComponent<OvenController>();
                Controllers[oven] = controller;
                return controller;
            }

            public static void TryRestartAll()
            {
                foreach (var pair in Controllers)
                {
                    pair.Value.TryRestart();
                }
            }
            public static void KillAll()
            {
                foreach (var pair in Controllers)
                {
                    pair.Value.Kill();
                }
                Controllers.Clear();
            }
            public void OnDestroy()
            {
                Destroy(this);
            }
                        
            private void StartCooking()
            {
                if(_oven.IndustrialMode != BaseOven.IndustrialSlotMode.ElectricFurnace)
                    if (_oven.FindBurnable() == null)
                        return;

                Single Multiplace = _.GetMultiplaceBurnableSpeed(_ownerId);
                _speed = (Single)(0.5f / Multiplace); // 0.57 * M
                Int32 MultiplaceFuel = _.GetMultiplaceBurnableFuelSpeed(_ownerId);
                _speedFuel = MultiplaceFuel;
                
                StopCooking();
                
                _oven.inventory.temperature = _oven.cookingTemperature;
                _oven.UpdateAttachmentTemperature();

                InvokeRepeating(Cook, _speed, _speed);
                _oven.SetFlag(BaseEntity.Flags.On, true);

            }
            
            private void StopCooking()
            {
                CancelInvoke(Cook);
                _oven.StopCooking();
                _oven.SetFlag(BaseEntity.Flags.On, false);
                _oven.SendNetworkUpdate();
                
                if (_oven.inventory != null)
                {
                    foreach (Item item in _oven.inventory.itemList)
                    {
                        if (item.HasFlag(global::Item.Flag.Cooking))
                            item.SetFlag(global::Item.Flag.Cooking, false);
                        item.MarkDirty();
                    }
                }
            }
            
            public void Cook()
            {
                if (!_oven.HasFlag(BaseEntity.Flags.On))
                {
                    StopCooking();
                    return;
                }
                Item item = _oven.FindBurnable();

                if (Interface.CallHook("OnOvenCook", this, item) != null)
                    return;
                
                if (_oven.IndustrialMode != BaseOven.IndustrialSlotMode.ElectricFurnace)
                {
                    if (item == null)
                    {
                        StopCooking();
                        return;
                    }
                }

                _oven.Cook();

                SmeltItems();

                if (_oven.IndustrialMode != BaseOven.IndustrialSlotMode.ElectricFurnace)
                {
                    var component = item.info.GetComponent<ItemModBurnable>();
                    item.fuel -= 0.5f * (_oven.cookingTemperature / 200f) * _speedFuel;

                    if (!item.HasFlag(global::Item.Flag.OnFire))
                    {
                        item.SetFlag(global::Item.Flag.OnFire, true);
                        item.MarkDirty();
                    }

		   		 		  						  	   		   		 		  	 	 		  						  				
                    if (item.fuel <= 0f)
                    {
                        _oven.ConsumeFuel(item, component);
                    }
                }

                _ticks++;
                
                Interface.CallHook("OnOvenCooked", this, item,  _oven.GetSlot(BaseEntity.Slot.FireMod));
            }
            private void SmeltItems()
            {
                if (_ticks % 1 != 0)
                    return;

                for (var i = 0; i < _oven.inventory.itemList.Count; i++)
                {
                    var item = _oven.inventory.itemList[i];
                    
                    if (item == null || !item.IsValid() || item.info == null)
                        continue;

                    var cookable = item.info.GetComponent<ItemModCookable>();
                    if (cookable == null)
                        continue;

                    if (_.IsBlackListBurnable(item.info.shortname)) continue;
                    
                    Single temperature = item.temperature;
                    
                    if ((temperature < cookable.lowTemp || temperature > cookable.highTemp))
                    {
                        if (!cookable.setCookingFlag || !item.HasFlag(global::Item.Flag.Cooking)) continue;
                        item.SetFlag(global::Item.Flag.Cooking, false);
                        item.MarkDirty();
                        continue;
                    }

                    if (!cookable.CanBeCookedByAtTemperature(temperature) && _.IsBlackListBurnable(item.info.shortname))
                    {
                        if (!cookable.setCookingFlag || !item.HasFlag(global::Item.Flag.Cooking))
                            continue;

                        item.SetFlag(global::Item.Flag.Cooking, false);
                        item.MarkDirty();
                        continue;
                    }

                    if (cookable.cookTime > 0 && _ticks * 1f / 1 % cookable.cookTime > 0)
                        continue;

                    if (cookable.setCookingFlag && !item.HasFlag(global::Item.Flag.Cooking))
                    {
                        item.SetFlag(global::Item.Flag.Cooking, true);
                        item.MarkDirty();
                    }

                    var position = item.position;
                    if (item.amount > 1)
                    {
                        item.amount--;
                        item.MarkDirty();
                    }
                    else
                    {
                        item.Remove();
                    }

                    if (cookable.becomeOnCooked == null) continue;

                    var item2 = ItemManager.Create(cookable.becomeOnCooked,
                        (int)(cookable.amountOfBecome * 1f));
		   		 		  						  	   		   		 		  	 	 		  						  				
                    if (item2 == null || item2.MoveToContainer(item.parent, position) ||
                        item2.MoveToContainer(item.parent))
                        continue;
		   		 		  						  	   		   		 		  	 	 		  						  				
                    item2.Drop(item.parent.dropPosition, item.parent.dropVelocity);
                    //if (!item.parent.entityOwner) continue;
                    StopCooking();
                }
            }
        }
        
                
        
        
        private static StringBuilder sb = new StringBuilder();

                private const string prefabCH47 = "assets/prefabs/npc/ch47/ch47scientists.entity.prefab";
        public string GetLang(string LangKey, string userID = null, params object[] args)
        {
            sb.Clear();
            if (args != null)
            {
                sb.AppendFormat(lang.GetMessage(LangKey, this, userID), args);
                return sb.ToString();
            }
            return lang.GetMessage(LangKey, this, userID);
        }

        
        
                
        [ChatCommand("rates")]
        private void GetInfoMyRates(BasePlayer player)
        {
            if (player == null) return;

            var PrivilegyRates = config.pluginSettings.RateSetting.PrivilegyRates;
            Boolean IsTimes = IsTime();
            Configuration.PluginSettings.Rates.AllRates Rates = IsTimes ? config.pluginSettings.RateSetting.DayRates : config.pluginSettings.RateSetting.NightRates;
            Single bonusRate = GetBonusRateDayOfWeek(player);
            
            foreach (var RatesSetting in PrivilegyRates)
                if (IsPermission(player.UserIDString, RatesSetting.Key))
                {
                    Rates = IsTimes ? RatesSetting.Value.DayRates : RatesSetting.Value.NightRates;
                    break;
                }

            SendChat(GetLang("MY_RATES_INFO", player.UserIDString, Rates.GatherRate + bonusRate, Rates.LootRate + bonusRate, Rates.PickUpRate + bonusRate, Rates.QuarryRate + bonusRate, Rates.ExcavatorRate + bonusRate, Rates.GrowableRate + bonusRate), player);
        }

        
                
        private void OnMixingTableToggle(MixingTable table, BasePlayer player)
        {
            if (table.IsOn())
                return;
            
            Single speedMixing = GetSpeeedMixingTable(player);
            
            NextTick(() =>
            {
                table.RemainingMixTime *= speedMixing;
                table.TotalMixTime *= speedMixing;
                table.SendNetworkUpdateImmediate();

                if (!(table.RemainingMixTime < 1f)) return;
                table.CancelInvoke(table.TickMix);
                table.Invoke(table.TickMix, table.RemainingMixTime);
            });
        }
        public Int32 GetMultiplaceBurnableFuelSpeed(String ownerid)
        {
            Int32 Multiplace = config.pluginSettings.RateSetting.SpeedFuelBurnable;
            if (config.pluginSettings.RateSetting.UseSpeedBurnableList)
            {
                var SpeedInList = config.pluginSettings.RateSetting.SpeedBurableList.OrderByDescending(z => z.SpeedFuelBurnable).FirstOrDefault(x => permission.UserHasPermission(ownerid, x.Permissions));
                if (SpeedInList != null)
                    Multiplace = SpeedInList.SpeedFuelBurnable;
            }
            return Multiplace;
        }

        private object OnPlayerAddModifiers(BasePlayer player, Item item, ItemModConsumable consumable)
        {
            if (!TeaModifers.ContainsKey(item.info.shortname)) return true;
            List<ModifierDefintion> mods = Pool.Get<List<ModifierDefintion>>();

            Dictionary<String, Configuration.PluginSettings.Rates.DayAnNightRate> PrivilegyRates =
                config.pluginSettings.RateSetting.PrivilegyRates;
            Boolean IsTimes = IsTime();
            Configuration.PluginSettings.Rates.AllRates Rates = IsTimes
                ? config.pluginSettings.RateSetting.DayRates
                : config.pluginSettings.RateSetting.NightRates;
            Configuration.PluginSettings.Rates.AllRates DefaultRates = IsTimes
                ? config.pluginSettings.RateSetting.DayRates
                : config.pluginSettings.RateSetting.NightRates;
		   		 		  						  	   		   		 		  	 	 		  						  				
            Single ModiferDifference = 1.0f;
            Single DefaultRate = 1.0f;
            Single PlayerRate = 1.0f;

            foreach (var RatesSetting in PrivilegyRates)
                if (IsPermission(player.UserIDString, RatesSetting.Key))
                    Rates = IsTimes ? RatesSetting.Value.DayRates : RatesSetting.Value.NightRates;

            Single BonusRate = GetBonusRate(player);

            ModiferTea TeaLocal = TeaModifers[item.info.shortname];
            
            switch (TeaLocal.Type)
            {
                case Modifier.ModifierType.Ore_Yield:
                {
                    DefaultRate = DefaultRates.GatherRate;
                    PlayerRate = Rates.GatherRate + BonusRate;

                    ModiferDifference = (PlayerRate - DefaultRate) <= 0 ? 1 : (PlayerRate - DefaultRate);
            
                    mods.Add(GetDefintionModifer(TeaLocal.Type, TeaLocal.Duration,
                        TeaLocal.Value / ModiferDifference));
                    
                    break;
                }
                case Modifier.ModifierType.Wood_Yield:
                {
                    DefaultRate = DefaultRates.GatherRate;
                    PlayerRate = Rates.GatherRate + BonusRate;

                    ModiferDifference = (PlayerRate - DefaultRate) <= 0 ? 1 : (PlayerRate - DefaultRate);

                    mods.Add(GetDefintionModifer(TeaLocal.Type, TeaLocal.Duration,
                        TeaLocal.Value / ModiferDifference));
                    
                    break;
                }
                case Modifier.ModifierType.Scrap_Yield:
                {
                    DefaultRate = DefaultRates.LootRate;
                    PlayerRate = Rates.LootRate + BonusRate;

                    ModiferDifference = (PlayerRate - DefaultRate) <= 0 ? 1 : (PlayerRate - DefaultRate);

                    mods.Add(GetDefintionModifer(TeaLocal.Type, TeaLocal.Duration,
                        TeaLocal.Value / ModiferDifference));
                    
                    break;
                }
            }
            
            player.modifiers.Add(mods);
            Pool.FreeUnmanaged(ref mods);

            return true;
        }
        private TriggeredEventPrefab[] defaultEvents;
        void SpawnCH47()
        {
            UnSubProSub();
        
            var position = new Vector3(ConVar.Server.worldsize, 100, ConVar.Server.worldsize) - new Vector3(50f, 0f, 50f);
            var entity = GameManager.server.CreateEntity(prefabCH47, position) as CH47HelicopterAIController;
            entity?.TriggeredEventSpawn();
            entity?.Spawn();
        }
        private void UnSubProSub(int time = 1)
        {
            Unsubscribe("OnEntitySpawned");
            timer.Once(time, () =>
            {
                Subscribe("OnEntitySpawned");
            });
        }
        private void OnEntitySpawned(Minicopter copter)
        {
            if (copter == null) return;
            FuelSystemRating(copter.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountMinicopter);
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                copter.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedCopter;
        }
        private void StartBreadley(Configuration.PluginSettings.OtherSettings.EventSettings EventSettings)
        {
            if (SpacePort == null) return;
            if (!EventSettings.BreadlaySetting.FullOff && EventSettings.BreadlaySetting.UseEventCustom)
            {
                Int32 TimeSpawn = EventSettings.BreadlaySetting.RandomTimeSpawn.UseRandomTime ? GetRandomTime(EventSettings.BreadlaySetting.RandomTimeSpawn.MinEventSpawnTime, EventSettings.BreadlaySetting.RandomTimeSpawn.MaxEventSpawnTime) : EventSettings.BreadlaySetting.EventSpawnTime;
                timer.Once(TimeSpawn, () =>
                {
                    StartBreadley(EventSettings);
                    SpawnTank();
                    
                    if(EventSettings.BreadlaySetting.useGameTip)
                        MessageGameTipsError("ALERT_BRADLEY");
                });
            }
        }

        private void Init() => ReadData();

        int Converted(Types RateType, string Shortname, float Amount, BasePlayer player = null, String UserID = null)
        {
            float ConvertedAmount = Amount;

            ItemDefinition definition = ItemManager.FindItemDefinition(Shortname);
            if(definition != null && (config.pluginSettings.RateSetting.TypeList == TypeListUsed.BlackList && !IsWhiteList(Shortname)))
                foreach (String BlackItemCategory in config.pluginSettings.RateSetting.BlackListCategory)
                {
                    ItemCategory Category;
                    if (!Enum.TryParse(BlackItemCategory, out Category)) continue;
                    
                    if (Category == definition.category)
                    {
                        //PrintToChat($"DEBUG : Категория {BlackItemCategory} заблокирована для множителя");
                        return Convert.ToInt32(ConvertedAmount);
                    }
                }
            
            if (config.pluginSettings.RateSetting.TypeList == TypeListUsed.BlackList)
            {
                if (IsBlackList(Shortname))
                    return Convert.ToInt32(ConvertedAmount);
            }
            else
            {
                if (!IsWhiteList(Shortname))
                {
                    //PrintToChat($"DEBUG : Предмет {Shortname} заблокирована для #4468837173 множителя");
                    return Convert.ToInt32(ConvertedAmount);
                }
            }

            var PrivilegyRates = config.pluginSettings.RateSetting.PrivilegyRates;
            Boolean IsTimes = IsTime();
            Configuration.PluginSettings.Rates.AllRates Rates = IsTimes ? config.pluginSettings.RateSetting.DayRates : config.pluginSettings.RateSetting.NightRates;
            
            UserID = player != null ? player.UserIDString : UserID;
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (UserID != null)
            {
                var CustomRate = IsTimes ? config.pluginSettings.RateSetting.CustomRatesPermissions.DayRates : config.pluginSettings.RateSetting.CustomRatesPermissions.NightRates;

                var Rate = CustomRate.FirstOrDefault(x => IsPermission(UserID, x.Key)); //dbg
                if (Rate.Value != null)
                    foreach (Configuration.PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis RateValue in Rate.Value.Where(x => x.Shortname == Shortname))
                    {
                        ConvertedAmount = Amount * RateValue.Rate;
                        return (int)ConvertedAmount;
                    }

                foreach (var RatesSetting in PrivilegyRates)
                    if (IsPermission(UserID, RatesSetting.Key))
                    {
                        Rates = IsTimes ? RatesSetting.Value.DayRates : RatesSetting.Value.NightRates;
                        break;
                    }
            }

            Single BonusRate = GetBonusRate(player);
            Single bonusRateDayOfWeek = GetBonusRateDayOfWeek(player);

            BonusRate += bonusRateDayOfWeek;

            switch (RateType)
            {
                case Types.Gather:
                {
                    ConvertedAmount = Amount * (Rates.GatherRate + BonusRate);
                    break;
                }
                case Types.Loot:
                {
                    ConvertedAmount = Amount * (Rates.LootRate + BonusRate);
                    break;
                }
                case Types.PickUP:
                {
                    ConvertedAmount = Amount * (Rates.PickUpRate + BonusRate);
                    break;
                }
                case Types.Growable:
                {
                    ConvertedAmount = Amount * (Rates.GrowableRate + BonusRate);
                    break;
                }
                case Types.Quarry:
                {
                    Single QuarryRates = GetRateQuarryDetalis(Rates, Shortname);
                    ConvertedAmount = Amount * (QuarryRates + BonusRate);
                    break;
                }
                case Types.Excavator:
                {
                    ConvertedAmount = Amount * (Rates.ExcavatorRate + BonusRate);
                    break;
                }
                case Types.Fishing:
                {
                    ConvertedAmount = Amount * (Rates.FishRate + BonusRate);
                    break;
                }
            }
		   		 		  						  	   		   		 		  	 	 		  						  				
            return Convert.ToInt32(ConvertedAmount);
        }
        
        void OnQuarryGather(MiningQuarry quarry, Item item)
        {
            if (item == null || quarry == null) return;

            // PrintError(GetQuarryPlayer(quarry.net.ID + 27447773688).ToString() + "   " + Converted(Types.Quarry, item.info.shortname,
            //     item.amount, null, GetQuarryPlayer(quarry.OwnerID).ToString()).ToString());
            item.amount = Converted(Types.Quarry, item.info.shortname, item.amount, null, GetQuarryPlayer(quarry.net.ID.Value).ToString());
        }
        public void SendChat(String Message, BasePlayer player, ConVar.Chat.ChatChannel channel = ConVar.Chat.ChatChannel.Global)
        {
            if (IQChat)
                if (config.pluginSettings.ReferenceSettings.IQChatSetting.UIAlertUse)
                    IQChat?.Call("API_ALERT_PLAYER_UI", player, Message);
                else IQChat?.Call("API_ALERT_PLAYER", player, Message, config.pluginSettings.ReferenceSettings.IQChatSetting.CustomPrefix, config.pluginSettings.ReferenceSettings.IQChatSetting.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        private const string prefabPatrol = "assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab";
        /// <summary>
        /// Обновление 1.94.31
        /// - Исправлен метод удаления чинука после обновления игры
        /// - Полностью изменен метод обнаружения стандартных ивентов
        /// 
        
        [PluginReference] Plugin IQChat;
		   		 		  						  	   		   		 		  	 	 		  						  				
        
        
        Item OnFishCatch(Item item, BaseFishingRod rod, BasePlayer player)
        {
            if (item == null || player == null) return null;

            Int32 Rate = Converted(Types.Fishing, item.info.shortname, item.amount, player);
            item.amount = Rate;
            return null;
        }
       
        private void OnEntitySpawned(BradleyAPC entity)
        {
            Configuration.PluginSettings.OtherSettings.EventSettings.Setting EvenTimer = config.pluginSettings.OtherSetting.EventSetting.BreadlaySetting;
            if (!EvenTimer.FullOff && !EvenTimer.UseEventCustom) return;
        
            NextTick(() =>
            {
                if (entity.OwnerID != 0 || entity.skinID != 0) return;
                entity.Kill();
            });
        }
        void OnEntityKill(BaseNetworkable entity)
        {
            if (entity == null || entity.net == null) return; 
            UInt64 NetID = entity.net.ID.Value;
            if (LootersListCrateID.Contains(NetID))
                LootersListCrateID.Remove(NetID);   
            
            if (LootersSaveListCrateID.Contains(NetID))
                LootersSaveListCrateID.Remove(NetID);    
        }
        public List<UInt64> LootersSaveListCrateID = new List<UInt64>();
		   		 		  						  	   		   		 		  	 	 		  						  				
        
                private TOD_Time timeComponent = null;
        public enum SkipType
        {
            Day,
            Night
        }

        
        public class ModiferTea
        {
            public Modifier.ModifierType Type;
            public Single Duration;
            public Single Value;
        }
        private void OnEntitySpawned(ScrapTransportHelicopter helicopter)
        {
            if (helicopter == null) return;
            FuelSystemRating(helicopter.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountScrapTransport);

            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                helicopter.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedScrapTransport;
        }
        
        Single GetBonusRate(BasePlayer player)
        {
            Single Bonus = 0;
            if (player == null) return Bonus;

            if (BonusRates.TryGetValue(player, out Single bonusRate))
                Bonus = bonusRate;
            
            return Bonus;
        }

        void OnSunset()
        {
            timeComponent.DayLengthInMinutes = config.pluginSettings.OtherSetting.NightTime * (24.0f / (24.0f - (TOD_Sky.Instance.SunsetTime - TOD_Sky.Instance.SunriseTime)));
            activatedDay = false;
            if (!config.pluginSettings.OtherSetting.UseSkipTime) return;
            if (config.pluginSettings.OtherSetting.TypeSkipped == SkipType.Night)
                TOD_Sky.Instance.Cycle.Hour = config.pluginSettings.OtherSetting.DayStart;
        }
        public enum TypeListUsed
        {
            WhiteList,
            BlackList
        }
        
        private void OnEntitySpawned(TrainCar trainCar) 
        {
            if (!config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel) return;
            if (trainCar == null) return;
            StorageContainer fuelContainer = (trainCar.GetFuelSystem() as EntityFuelSystem)?.GetFuelContainer();
            if (fuelContainer == null) return;
            if (!fuelContainer.TryGetComponent<TrainEngine>(out TrainEngine trainEngine)) return;
            trainEngine.maxFuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedTrain;
        } 
        private void OnServerInitialized()
        {
            _ = this;

            SpacePort = TerrainMeta.Path.Monuments.FirstOrDefault(p => p.name.ToLower().Contains("launch_site"));

            StartEvent();
            foreach (var RateCustom in config.pluginSettings.RateSetting.PrivilegyRates)
                Register(RateCustom.Key);

            foreach (Configuration.PluginSettings.Rates.RecyclerController.PresetRecycler presetRecycler in config.pluginSettings.RateSetting.RecyclersController.PrivilageSpeedRecycler)
                    Register(presetRecycler.Permissions);
            
            if (config.pluginSettings.RateSetting.UseSpeedBurnableList)
                foreach (var BurnableList in config.pluginSettings.RateSetting.SpeedBurableList)
                    Register(BurnableList.Permissions);    
		   		 		  						  	   		   		 		  	 	 		  						  				
            List<String> PrivilegyCustomRatePermissions = config.pluginSettings.RateSetting.CustomRatesPermissions.NightRates.Keys.Union(config.pluginSettings.RateSetting.CustomRatesPermissions.DayRates.Keys).ToList();
            foreach (var RateItemCustom in PrivilegyCustomRatePermissions)
                Register(RateItemCustom);

            timer.Once(5, GetTimeComponent);

            if (config.pluginSettings.RateSetting.IgnoreSpeedBurnablePrefabList.Contains("electric.furnace"))
                Unsubscribe(nameof(OnSwitchToggled));
		   		 		  						  	   		   		 		  	 	 		  						  				
            Configuration.PluginSettings.OtherSettings.EventSettings eventController = config.pluginSettings.OtherSetting.EventSetting;
            if (!config.pluginSettings.OtherSetting.FuelSetting.useAutoFillFuel && !config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel
                && (!eventController.BreadlaySetting.UseEventCustom && !eventController.BreadlaySetting.FullOff))
            {
                Unsubscribe(nameof(OnEntitySpawned));
            }
            
            if(!config.pluginSettings.RateSetting.useSpeedMixingTable)
                Unsubscribe(nameof(OnMixingTableToggle));
            else
            {
                foreach (Configuration.PluginSettings.Rates.SpeedMixingTable speedMixingTable in config.pluginSettings.RateSetting.speedMixingTables)
                    Register(speedMixingTable.Permissions);
            }
            
            foreach (BaseOven oven in BaseNetworkable.serverEntities.OfType<BaseOven>())
            {
                if (config.pluginSettings.RateSetting.UseSpeedBurnable)
                {
                    if (config.pluginSettings.RateSetting.IgnoreSpeedBurnablePrefabList.Contains(oven.ShortPrefabName))
                        continue;
                    
                    OvenController.GetOrAdd(oven).TryRestart();
                }
            }

            if (!config.pluginSettings.RateSetting.UseSpeedBurnable)
            {
                Unsubscribe(nameof(OnOvenToggle));
                Unsubscribe(nameof(OnOvenStart));
            }
            
            if(!config.pluginSettings.RateSetting.RecyclersController.UseRecyclerSpeed)
                Unsubscribe(nameof(OnRecyclerToggle));
            
            if(!config.pluginSettings.RateSetting.UseTeaController)
                Unsubscribe(nameof(OnPlayerAddModifiers));
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (config.pluginSettings.OtherSetting.FuelSetting.useAutoFillFuel ||
                config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                initializeTransport = ServerMgr.Instance.StartCoroutine(InitializeTransport());
            
            if (config.pluginSettings.RateSetting.rateControllerDayOfWeek.useRateBonusDayOfWeek)
            {
                String errorValidDayOfWeek = IsValidConfigDayOfWeek();

                if (errorValidDayOfWeek != null && !String.IsNullOrWhiteSpace(errorValidDayOfWeek))
                {
                    PrintWarning(LanguageEn ? $"Attention! Intersections found in days! The bonus for days of the week is disabled!{errorValidDayOfWeek}" : $"Внимание! Найдены пересечения в днях! Бонус по дням недели отключен!{errorValidDayOfWeek}");
                    return;
                }
                
                Puts(LanguageEn ? $"Server Information: Day of the week: {DateTime.UtcNow.DayOfWeek}. Time (hours): {DateTime.UtcNow.Hour}" : $"Серверная информация : День недели : {DateTime.UtcNow.DayOfWeek}. Время (часы) : {DateTime.UtcNow.Hour}");
                UpdateBonusStatus(true);
                timer.Every(5, () => { UpdateBonusStatus(); });
            }
        }
        public List<UInt64> LootersListCrateID = new List<UInt64>();

        void OnDispenserBonus(ResourceDispenser disp, BasePlayer player, Item item)
        {
            if (item == null || player == null) return;
            
            int Rate = Converted(Types.Gather, item.info.shortname, item.amount, player);
            item.amount = Rate;
        }
        
        void OnWireConnect(BasePlayer player, IOEntity entity1, int inputs, IOEntity entity2, int outputs)
        {
            BaseEntity parentIoEntity = entity1.GetParentEntity();
            if (parentIoEntity == null) return;
            if (parentIoEntity is not BaseOven oven) return;
            OvenController.GetOrAdd(oven).Switch(player); 
        }

        
                private void FuelSystemRating(IFuelSystem fuelSystem, Int32 Amount)
        {
            if (!config.pluginSettings.OtherSetting.FuelSetting.useAutoFillFuel) return;
            if (fuelSystem == null) return;
            if (fuelSystem is not EntityFuelSystem entityFuelSystem) return;
            
            NextTick(() =>
            {
                Item Fuel = entityFuelSystem.GetFuelItem();
                if (Fuel == null) return;
                
                if (Fuel.amount is 50 or 100)
                    Fuel.amount = Amount;
            });
        }
        
        private void OnNewSave(String filename)
        {
            DataQuarryPlayer.Clear();
            LootersSaveListCrateID.Clear();
            
            WriteData();
        }
        void SetTimeComponent()
        {
            if (!config.pluginSettings.OtherSetting.UseTime) return;

            Single hour = TOD_Sky.Instance.Cycle.Hour;
            Int32 dayStart = config.pluginSettings.OtherSetting.DayStart;
            Int32 nightStart = config.pluginSettings.OtherSetting.NightStart;

            Single dayDifference = Mathf.Abs(hour - dayStart);
            Single nightDifference = Mathf.Abs(hour - nightStart);

            if (dayDifference < nightDifference)
            {
                sendMessageDay = false;
                sendMessageNight = true;
            }
            else
            {
                sendMessageDay = true;
                sendMessageNight = false;
            }
            
            timeComponent.ProgressTime = true;
            timeComponent.UseTimeCurve = false;
            timeComponent.OnSunrise += OnSunrise;
            timeComponent.OnSunset += OnSunset;
            timeComponent.OnHour += OnHour;

            if (TOD_Sky.Instance.Cycle.Hour > TOD_Sky.Instance.SunriseTime && TOD_Sky.Instance.Cycle.Hour < TOD_Sky.Instance.SunsetTime)
                OnSunrise();
            else
                OnSunset();
        }
        
                
                public Dictionary<UInt64, UInt64> DataQuarryPlayer = new Dictionary<UInt64, UInt64>();
        
        
        private static Configuration config = new Configuration();
        void OnContainerDropItems(ItemContainer container)
        {
            if (container == null) return;
            var Container = container.entityOwner as LootContainer;
            if (Container == null) return;
            UInt64 NetID = Container.net.ID.Value;
            if (LootersListCrateID.Contains(NetID)) return;
            
            BasePlayer player = Container.lastAttacker as BasePlayer;
		   		 		  						  	   		   		 		  	 	 		  						  				
            foreach (var item in container.itemList)
                item.amount = Converted(Types.Loot, item.info.shortname, item.amount, player);
        }
        void API_BONUS_RATE_ADDPLAYER(BasePlayer player, Single Rate)
        {
            if (player == null) return;
            if (!BonusRates.ContainsKey(player))
                BonusRates.Add(player, Rate);
            else BonusRates[player] = Rate;
        }
        
        void SpawnHeli()
        {
            UnSubProSub();
        
            var position = new Vector3(ConVar.Server.worldsize, 100, ConVar.Server.worldsize) - new Vector3(50f, 0f, 50f);
            var entity = GameManager.server.CreateEntity(prefabPatrol, position);
            entity?.Spawn();
        }
        private void StartHelicopter(Configuration.PluginSettings.OtherSettings.EventSettings EventSettings)
        {
            if (!EventSettings.HelicopterSetting.FullOff && EventSettings.HelicopterSetting.UseEventCustom)
            {
                Int32 TimeSpawn = EventSettings.HelicopterSetting.RandomTimeSpawn.UseRandomTime ? GetRandomTime(EventSettings.HelicopterSetting.RandomTimeSpawn.MinEventSpawnTime, EventSettings.HelicopterSetting.RandomTimeSpawn.MaxEventSpawnTime) : EventSettings.HelicopterSetting.EventSpawnTime;
                timer.Once(TimeSpawn, () =>
                {
                    StartHelicopter(EventSettings);
                    SpawnHeli();
                    
                    if(EventSettings.HelicopterSetting.useGameTip)
                        MessageGameTipsError("ALERT_HELICOPTER");
                });
            }
        }
        void AddQuarryPlayer(UInt64 NetID, UInt64 userID)
        {
            if (DataQuarryPlayer.ContainsKey(NetID))
                DataQuarryPlayer[NetID] = userID;
            else DataQuarryPlayer.Add(NetID, userID);
        }
        private void OnEntitySpawned(Snowmobile snowmobiles)
        {
            if (snowmobiles == null) return;
            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                snowmobiles.maxFuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedSnowmobile;
        } 
        
                private BasePlayer ExcavatorPlayer = null;
        
        void OnGrowableGathered(GrowableEntity plant, Item item, BasePlayer player)
        {
            if (item == null || player == null) return;
            item.amount = Converted(Types.Growable, item.info.shortname, item.amount, player);
        }
        
        private void UpdateBonusStatus(Boolean isInit = false)
        {
            Configuration.PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays currentRateBonusDay = GetRateBonusForCurrentTime();
            
            if (currentRateBonusDay != rateDayOfWeek && !isInit) 
            {
                rateDayOfWeek = currentRateBonusDay;

                if (currentRateBonusDay != null)
                {
                    String startDayOfWeek = currentRateBonusDay.timeStartBonus.dayOfWeek.ToUpper();
                    String stopDayOfWeek = currentRateBonusDay.timeStopBonus.dayOfWeek.ToUpper();
                    
                    foreach (BasePlayer player in BasePlayer.activePlayerList)
                    {
                        SendChat(GetLang("RATE_BONUS_DAY_OF_WEEK", player.UserIDString, GetBonusRateDayOfWeek(player), 
                            GetLang(startDayOfWeek, player.UserIDString), $"{currentRateBonusDay.timeStartBonus.timeHours}:00",
                            GetLang(stopDayOfWeek, player.UserIDString), $"{currentRateBonusDay.timeStopBonus.timeHours}:00"), player);
                    }
                }
                else
                {
                    foreach (BasePlayer player in BasePlayer.activePlayerList)
                        SendChat(GetLang("RATE_BONUS_DAY_OF_WEEK_END", player.UserIDString), player);
                }
            }
        }
        bool IsTime()
        {
            var Settings = config.pluginSettings.OtherSetting;
            float TimeServer = TOD_Sky.Instance.Cycle.Hour;
            return TimeServer < Settings.NightStart && Settings.DayStart <= TimeServer;
        }
        float GetRareCoal(BasePlayer player = null)
        {
            Boolean IsTimes = IsTime();
		   		 		  						  	   		   		 		  	 	 		  						  				
            var Rates = IsTimes ? config.pluginSettings.RateSetting.DayRates : config.pluginSettings.RateSetting.NightRates;
            var PrivilegyRates = config.pluginSettings.RateSetting.PrivilegyRates;
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (player != null)
            {
                foreach (var RatesSetting in PrivilegyRates)
                    if (IsPermission(player.UserIDString, RatesSetting.Key))
                        Rates = IsTimes ? RatesSetting.Value.DayRates : RatesSetting.Value.NightRates;
            }

            float Rare = Rates.CoalRare;
            float RareResult = (100 - Rare) / 100;
            return RareResult;
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        void SpawnCargo()
        {
            UnSubProSub();
            
            var cargoShip = GameManager.server.CreateEntity(prefabShip) as CargoShip;
            if (cargoShip == null) return;
            cargoShip.TriggeredEventSpawn();
            cargoShip.SendNetworkUpdate();
            cargoShip.RefreshActiveLayout();
            cargoShip.Spawn();
        }
        private class Configuration
        {
            [JsonProperty(LanguageEn ? "Plugin setup" : "Настройка плагина")]
            public PluginSettings pluginSettings = new PluginSettings();

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    pluginSettings = new PluginSettings
                    {
                        ReferenceSettings = new PluginSettings.ReferencePlugin
                        {
                            IQChatSetting = new PluginSettings.ReferencePlugin.IQChatReference
                            {
                                CustomAvatar = "0",
                                CustomPrefix = "[IQRates]",
                                UIAlertUse = false,
                            },
                        },
                        RateSetting = new PluginSettings.Rates
                        {
                            UseTeaController = false,
                            UseBlackListPrefabs = false,
                            rateControllerDayOfWeek = new PluginSettings.Rates.RateControllerDayOfWeek
                            {
                                useRateBonusDayOfWeek = false,
                                rateBonusDayOfWeek = new List<PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays>
                                {
                                    new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays
                                    {
                                        upBonusRate = 0.5f,
                                        privilageUpRates = new Dictionary<String, Single>()
                                        {
                                            ["iqrates.premium"] = 2.0f,
                                            ["iqrates.vip"] = 1.0f,
                                        },
                                        timeStartBonus = new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays.TimeController()
                                        {
                                            dayOfWeek = "Saturday",
                                            timeHours = 18,
                                        },
                                        timeStopBonus = new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays.TimeController()
                                        {
                                            dayOfWeek = "Monday",
                                            timeHours = 12,
                                        },
                                    },
                                    new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays
                                    {
                                        upBonusRate = 0.5f,
                                        privilageUpRates = new Dictionary<String, Single>()
                                        {
                                            ["iqrates.premium"] = 2.0f,
                                            ["iqrates.vip"] = 1.0f,
                                        },
                                        timeStartBonus = new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays.TimeController()
                                        {
                                            dayOfWeek = "Thursday",
                                            timeHours = 18,
                                        },
                                        timeStopBonus = new PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays.TimeController()
                                        {
                                            dayOfWeek = "Friday",
                                            timeHours = 12,
                                        },
                                    },
                                },
                            },
                            BlackListCategory = new List<String>()
                            {
                                "Weapon", 
                                "Ammunition",
                                "Traps",
                                "Attire",
                                "Items",
                                "Tool",
                                "Component"
                            },
                            WhiteList = new List<String>()
                            {
                                "scrap",
                                "rope",
                                "metalblade",
                                "propanetank",
                                "tarp",
                                "sewingkit",
                                "fuse",
                                "metalspring",
                                "roadsigns",
                                "sheetmetal",
                                "gears",
                                "riflebody",
                                "smgbody",
                                "semibody",
                            },
                            TypeList = TypeListUsed.BlackList,
                            BlackListPrefabs = new List<String>()
                            {
                                "crate_elite",
                                "crate_normal"
                            },
                            UseSpeedBurnable = true,
                            useSpeedMixingTable = false,
                            speedMixingTables = new List<PluginSettings.Rates.SpeedMixingTable>()
                            {
                                new PluginSettings.Rates.SpeedMixingTable()
                                {
                                    
                                    Permissions = "iqrates.default",
                                    SpeedMixing = 0,
                                },
                                new PluginSettings.Rates.SpeedMixingTable()
                                {
                                    
                                    Permissions = "iqrates.vip",
                                    SpeedMixing = 20,
                                },
                                new PluginSettings.Rates.SpeedMixingTable()
                                {
                                    
                                    Permissions = "iqrates.premium",
                                    SpeedMixing = 50,
                                },
                            },
                            SpeedBurnable = 3.5f,
                            SpeedFuelBurnable = 1,
                            UseBlackListBurnable = false,
                            BlackListBurnable = new List<String>
                            {
                                "wolfmeat.cooked",
                                "deermeat.cooked",
                                "meat.pork.cooked",
                                "humanmeat.cooked",
                                "chicken.cooked",
                                "bearmeat.cooked",
                                "horsemeat.cooked",
                            },
                            RecyclersController = new PluginSettings.Rates.RecyclerController
                            {
                                UseRecyclerSpeed = false,
                                DefaultSpeedRecycler = 5,
                                PrivilageSpeedRecycler = new List<PluginSettings.Rates.RecyclerController.PresetRecycler>
                                {
                                    new PluginSettings.Rates.RecyclerController.PresetRecycler 
                                    {
                                        Permissions = "iqrates.recyclerhyperfast",
                                        SpeedRecyclers = 0 
                                    },
                                   new PluginSettings.Rates.RecyclerController.PresetRecycler
                                   {
                                       Permissions = "iqrates.recyclerfast",
                                       SpeedRecyclers = 3
                                   },
                                },
                            },
                            UseSpeedBurnableList = true,
                            IgnoreSpeedBurnablePrefabList = new List<String>()
                            {
                               "",  
                            },
                            SpeedBurableList = new List<PluginSettings.Rates.SpeedBurnablePreset>
                            {
                                new PluginSettings.Rates.SpeedBurnablePreset
                                {
                                    Permissions = "iqrates.vip",
                                    SpeedBurnable = 5.0f,
                                    SpeedFuelBurnable = 20,
                                },
                                new PluginSettings.Rates.SpeedBurnablePreset
                                {
                                    Permissions = "iqrates.speedrun",
                                    SpeedBurnable = 55.0f,
                                    SpeedFuelBurnable = 20,
                                },
                                new PluginSettings.Rates.SpeedBurnablePreset
                                {
                                    Permissions = "iqrates.fuck",
                                    SpeedBurnable = 200f,
                                    SpeedFuelBurnable = 20,
                                },
                            },
                            DayRates = new PluginSettings.Rates.AllRates
                            {
                                GatherRate = 1.0f,
                                LootRate = 1.0f,
                                PickUpRate = 1.0f,
                                GrowableRate = 1.0f,
                                QuarryRate = 1.0f,
                                FishRate = 1.0f,
                                QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                {
                                    UseDetalisRateQuarry = false,
                                    ShortnameListQuarry = new Dictionary<String, Single>()
                                    {
                                        ["metal.ore"] = 10,
                                        ["sulfur.ore"] = 5
                                    }
                                },
                                ExcavatorRate = 1.0f,
                                CoalRare = 10,
                            },
                            NightRates = new PluginSettings.Rates.AllRates
                            {
                                GatherRate = 2.0f,
                                LootRate = 2.0f,
                                PickUpRate = 2.0f,
                                GrowableRate = 2.0f,
                                QuarryRate = 2.0f,
                                FishRate = 2.0f,
                                QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                {
                                    UseDetalisRateQuarry = false,
                                    ShortnameListQuarry = new Dictionary<String, Single>()
                                    {
                                        ["metal.ore"] = 10,
                                        ["sulfur.ore"] = 5
                                    }
                                },
                                ExcavatorRate = 2.0f,
                                CoalRare = 15,
                            },
                            CustomRatesPermissions = new PluginSettings.Rates.PermissionsRate
                            {
                                DayRates = new Dictionary<String, List<PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis>>
                                {
                                    ["iqrates.gg"] = new List<PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis>
                                    {
                                        new PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis
                                        {
                                            Rate = 200.0f,
                                            Shortname = "wood",
                                        },
                                        new PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis
                                        {
                                              Rate = 200.0f,
                                              Shortname = "stones",
                                        }
                                    }
                                },
                                NightRates = new Dictionary<string, List<PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis>>
                                {
                                    ["iqrates.gg"] = new List<PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis>
                                    {
                                        new PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis
                                        {
                                            Rate = 400.0f,
                                            Shortname = "wood",
                                        },
                                        new PluginSettings.Rates.PermissionsRate.PermissionsRateDetalis
                                        {
                                              Rate = 400.0f,
                                              Shortname = "stones",
                                        }
                                    }
                                },
                            },
                            PrivilegyRates = new Dictionary<string, PluginSettings.Rates.DayAnNightRate>
                            {
                                ["iqrates.vip"] = new PluginSettings.Rates.DayAnNightRate
                                {
                                    DayRates =
                                    {
                                        GatherRate = 3.0f,
                                        LootRate = 3.0f,
                                        PickUpRate = 3.0f,
                                        QuarryRate = 3.0f,
                                        FishRate = 3.0f,
                                        QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                        {
                                            UseDetalisRateQuarry = false,
                                            ShortnameListQuarry = new Dictionary<String, Single>()
                                            {
                                                ["metal.ore"] = 10,
                                                ["sulfur.ore"] = 5
                                            }
                                        },
                                        GrowableRate = 3.0f,
                                        ExcavatorRate = 3.0f,
                                        CoalRare = 15,
                                    },
                                    NightRates = new PluginSettings.Rates.AllRates
                                    {
                                        GatherRate = 13.0f,
                                        LootRate = 13.0f,
                                        PickUpRate = 13.0f,
                                        GrowableRate = 13.0f,
                                        QuarryRate = 13.0f,
                                        FishRate = 13.0f,
                                        QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                        {
                                            UseDetalisRateQuarry = false,
                                            ShortnameListQuarry = new Dictionary<String, Single>()
                                            {
                                                ["metal.ore"] = 10,
                                                ["sulfur.ore"] = 5
                                            }
                                        },
                                        ExcavatorRate = 13.0f,
                                        CoalRare = 25,
                                    }
                                },
                                ["iqrates.premium"] = new PluginSettings.Rates.DayAnNightRate
                                {
                                    DayRates =
                                    {
                                        GatherRate = 3.5f,
                                        LootRate = 3.5f,
                                        PickUpRate = 3.5f,
                                        GrowableRate = 3.5f,
                                        QuarryRate = 3.5f,
                                        FishRate = 3.5f,
                                        QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                        {
                                            UseDetalisRateQuarry = false,
                                            ShortnameListQuarry = new Dictionary<String, Single>()
                                            {
                                                ["metal.ore"] = 10,
                                                ["sulfur.ore"] = 5
                                            }
                                        },
                                        ExcavatorRate = 3.5f,
                                        CoalRare = 20,
                                    },
                                    NightRates = new PluginSettings.Rates.AllRates
                                    {
                                        GatherRate = 13.5f,
                                        LootRate = 13.5f,
                                        PickUpRate = 13.5f,
                                        GrowableRate = 13.5f,
                                        QuarryRate = 13.5f,
                                        FishRate = 13.5f,
                                        QuarryDetalis = new PluginSettings.Rates.AllRates.QuarryRateDetalis
                                        {
                                            UseDetalisRateQuarry = false,
                                            ShortnameListQuarry = new Dictionary<String, Single>()
                                            {
                                                ["metal.ore"] = 10,
                                                ["sulfur.ore"] = 5
                                            }
                                        },
                                        ExcavatorRate = 13.5f,
                                        CoalRare = 20,
                                    }
                                },
                            },
                            BlackList = new List<String>
                            {
                                "shortname",
                            },
                        },
                        OtherSetting = new PluginSettings.OtherSettings
                        {
                            UseAlertDayNight = true,
                            UseSkipTime = true,
                            TypeSkipped = SkipType.Night,
                            UseTime = false,
                            FreezeTime = 12,
                            UseFreezeTime = true,
                            DayStart = 10,
                            NightStart = 22,
                            DayTime = 5,
                            NightTime = 1,
                            FuelConsumedTransportSetting = new PluginSettings.OtherSettings.FuelConsumedTransport
                            {
                                useConsumedFuel = false,
                                ConsumedHotAirBalloon = 0.25f,
                                ConsumedSnowmobile = 0.15f,
                                ConsumedTrain = 0.15f,
                                ConsumedBoat = 0.25f,
                                ConsumedSubmarine = 0.15f,
                                ConsumedCopter = 0.25f,
                                ConsumedScrapTransport = 0.25f,
                                ConsumedAttackHelicopter = 0.25f,
                            },
                            FuelSetting = new PluginSettings.OtherSettings.FuelSettings
                            {
                                useAutoFillFuel = false, 
                                AmountBoat = 200,
                                AmountMinicopter = 200,
                                AmountScrapTransport = 200,
                                AmountSubmarine = 200,
                                AmountAttackHelicopter = 200,
                            },
                            EventSetting = new PluginSettings.OtherSettings.EventSettings
                            {
                                BreadlaySetting = new PluginSettings.OtherSettings.EventSettings.Setting
                                {
                                    useGameTip = false,
                                    FullOff = false,
                                    UseEventCustom = true,
                                    EventSpawnTime = 3000,
                                    RandomTimeSpawn = new PluginSettings.OtherSettings.EventSettings.Setting.RandomingTime
                                    {
                                        UseRandomTime = false,
                                        MaxEventSpawnTime = 3000,
                                        MinEventSpawnTime = 1000,
                                    },
                                },
                                CargoPlaneSetting = new PluginSettings.OtherSettings.EventSettings.Setting
                                {
                                    useGameTip = false,
                                    FullOff = false,
                                    UseEventCustom = true,
                                    EventSpawnTime = 5000,
                                    RandomTimeSpawn = new PluginSettings.OtherSettings.EventSettings.Setting.RandomingTime
                                    {
                                        UseRandomTime = false,
                                        MaxEventSpawnTime = 3000,
                                        MinEventSpawnTime = 1000,
                                    },
                                },
                                CargoShipSetting = new PluginSettings.OtherSettings.EventSettings.Setting
                                {
                                    useGameTip = false,
                                    FullOff = false,
                                    UseEventCustom = true,
                                    EventSpawnTime = 4500,
                                    RandomTimeSpawn = new PluginSettings.OtherSettings.EventSettings.Setting.RandomingTime
                                    {
                                        UseRandomTime = true,
                                        MaxEventSpawnTime = 3000,
                                        MinEventSpawnTime = 8000,
                                    },
                                },
                                ChinoockSetting = new PluginSettings.OtherSettings.EventSettings.Setting
                                {
                                    useGameTip = false,
                                    FullOff = true,
                                    UseEventCustom = false,
                                    EventSpawnTime = 3000,
                                    RandomTimeSpawn = new PluginSettings.OtherSettings.EventSettings.Setting.RandomingTime
                                    {
                                        UseRandomTime = false,
                                        MaxEventSpawnTime = 3000,
                                        MinEventSpawnTime = 1000,
                                    },
                                },
                                HelicopterSetting = new PluginSettings.OtherSettings.EventSettings.Setting
                                {
                                    useGameTip = false,
                                    FullOff = true,
                                    UseEventCustom = false,
                                    EventSpawnTime = 3000,
                                    RandomTimeSpawn = new PluginSettings.OtherSettings.EventSettings.Setting.RandomingTime
                                    {
                                        UseRandomTime = false,
                                        MaxEventSpawnTime = 3000,
                                        MinEventSpawnTime = 1000,
                                    },
                                },
                            }
                        },
                    }
                };
            }
		   		 		  						  	   		   		 		  	 	 		  						  				
            internal class PluginSettings
            {

                internal class ReferencePlugin
                {
                    internal class IQChatReference
                    {
                        [JsonProperty(LanguageEn ? "IQChat : Custom chat avatar (If required)" : "IQChat : Кастомный аватар в чате(Если требуется)")]
                        public String CustomAvatar = "0";
                        [JsonProperty(LanguageEn ? "IQChat : Use UI Notifications" : "IQChat : Использовать UI уведомления")]
                        public Boolean UIAlertUse = false;
                        [JsonProperty(LanguageEn ? "IQChat : Custom prefix in chat" : "IQChat : Кастомный префикс в чате")]
                        public String CustomPrefix = "[IQRates]";
                    }
                    [JsonProperty(LanguageEn ? "Setting up IQChat" : "Настройка IQChat")]
                    public IQChatReference IQChatSetting = new IQChatReference();
                }
                [JsonProperty(LanguageEn ? "Rating settings" : "Настройка рейтингов")]
                public Rates RateSetting = new Rates();
                [JsonProperty(LanguageEn ? "Additional plugin settings" : "Дополнительная настройка плагина")]
                public OtherSettings OtherSetting = new OtherSettings();     
                internal class OtherSettings
                {
                    [JsonProperty(LanguageEn ? "Event settings on the server" : "Настройки ивентов на сервере")]
                    public EventSettings EventSetting = new EventSettings();   
                    [JsonProperty(LanguageEn ? "Fuel settings when buying vehicles from NPCs" : "Настройки топлива при покупке транспорта у NPC")]
                    public FuelSettings FuelSetting = new FuelSettings();
                    [JsonProperty(LanguageEn ? "Fuel Consumption Rating Settings" : "Настройки рейтинга потребления топлива")]
                    public FuelConsumedTransport FuelConsumedTransportSetting = new FuelConsumedTransport();
                    internal class FuelConsumedTransport
                    {
                        [JsonProperty(LanguageEn ? "Use the fuel consumption rating in transport (true - yes/false - no)" : "Использовать рейтинг потребления топлива в транспорте (true - да/false - нет)")]
                        public Boolean useConsumedFuel;
                        [JsonProperty(LanguageEn ? "Hotairballoon fuel consumption rating (Default = 0.25)" : "Рейтинг потребление топлива у воздушного шара (Стандартно = 0.25)")]
                        public Single ConsumedHotAirBalloon= 0.25f;
                        [JsonProperty(LanguageEn ? "Snowmobile fuel consumption rating (Default = 0.15)" : "Рейтинг потребление топлива снегоходов (Стандартно = 0.15)")]
                        public Single ConsumedSnowmobile = 0.15f;         
                        [JsonProperty(LanguageEn ? "Train fuel consumption rating (Default = 0.15)" : "Рейтинг потребление топлива поездов (Стандартно = 0.15)")]
                        public Single ConsumedTrain = 0.15f;
                        [JsonProperty(LanguageEn ? "Rowboat fuel consumption rating (Default = 0.25)" : "Рейтинг потребление топлива у лодок (Стандартно = 0.25)")]
                        public Single ConsumedBoat = 0.25f;
                        [JsonProperty(LanguageEn ? "Submarine fuel consumption rating (Default = 0.15)" : "Рейтинг потребление топлива у субмарин (Стандартно = 0.15)")]
                        public Single ConsumedSubmarine = 0.15f;
                        [JsonProperty(LanguageEn ? "Minicopter fuel consumption rating (Default = 0.25)" : "Рейтинг потребление топлива у миникоптера (Стандартно = 0.25)")]
                        public Single ConsumedCopter = 0.25f;
                        [JsonProperty(LanguageEn ? "ScrapTransportHelicopter fuel consumption rating (Default = 0.25)" : "Рейтинг потребление топлива у коровы (Стандартно = 0.25)")]
                        public Single ConsumedScrapTransport = 0.25f;
                        [JsonProperty(LanguageEn ? "Attack-Helicopter fuel consumption rating (Default = 0.25)" : "Рейтинг потребление топлива у боевого-вертолета (Стандартно = 0.25)")]
                        public Single ConsumedAttackHelicopter = 0.25f;
                    }
                    internal class FuelSettings
                    {
                        [JsonProperty(LanguageEn ? "Use fuel replenishment when buying vehicles from NPC (true - yes/false - no)" : "Использовать пополнение топлива при покупке транспорта у NPC (true - да/false - нет)")]
                        public Boolean useAutoFillFuel;
                        [JsonProperty(LanguageEn ? "Amount of fuel for boats" : "Кол-во топлива у лодок")]
                        public Int32 AmountBoat = 200;
                        [JsonProperty(LanguageEn ? "The amount of fuel in submarines" : "Кол-во топлива у подводных лодок")]
                        public Int32 AmountSubmarine = 200;
                        [JsonProperty(LanguageEn ? "Minicopter fuel quantity" : "Кол-во топлива у миникоптера")]
                        public Int32 AmountMinicopter = 200;
                        [JsonProperty(LanguageEn ? "Helicopter fuel quantity" : "Кол-во топлива у вертолета")]
                        public Int32 AmountScrapTransport = 200;
                        [JsonProperty(LanguageEn ? "Attack-Helicopter fuel quantity" : "Кол-во топлива у боевого вертолета")]
                        public Int32 AmountAttackHelicopter = 200;
                    }

                    [JsonProperty(LanguageEn ? "Use Time Acceleration" : "Использовать ускорение времени")]
                    public Boolean UseTime;
                    [JsonProperty(LanguageEn ? "Use time freeze (the time will be the one you set in the item &lt;Frozen time on the server&gt;)" : "Использовать заморозку времени(время будет такое, какое вы установите в пунке <Замороженное время на сервере>)")]
                    public Boolean UseFreezeTime;
                    [JsonProperty(LanguageEn ? "Frozen time on the server (Set time that will not change and be forever on the server, must be true on &lt;Use time freeze&gt;" : "Замороженное время на сервере (Установите время, которое не будет изменяться и будет вечно на сервере, должен быть true на <Использовать заморозку времени>")]
                    public Int32 FreezeTime;
                    [JsonProperty(LanguageEn ? "What time will the day start?" : "Укажите во сколько будет начинаться день")]
                    public Int32 DayStart;
                    [JsonProperty(LanguageEn ? "What time will the night start?" : "Укажите во сколько будет начинаться ночь")]
                    public Int32 NightStart;
                    [JsonProperty(LanguageEn ? "Specify how long the day will be in minutes" : "Укажите сколько будет длится день в минутах")]
                    public Int32 DayTime;
                    [JsonProperty(LanguageEn ? "Specify how long the night will last in minutes" : "Укажите сколько будет длится ночь в минутах")]
                    public Int32 NightTime;

                    [JsonProperty(LanguageEn ? "Use notification of players about the change of day and night (switching rates. The message is configured in the lang)" : "Использовать уведомление игроков о смене дня и ночи (переключение рейтов. Сообщение настраивается в лэнге)")]
                    public Boolean UseAlertDayNight = true;
                    [JsonProperty(LanguageEn ? "Enable the ability to completely skip the time of day (selected in the paragraph below)" : "Включить возможность полного пропуска времени суток(выбирается в пункте ниже)")]
                    public Boolean UseSkipTime = true;
                    [JsonProperty(LanguageEn ? "Select the type of time-of-day skip (0 - Skip day, 1 - Skip night)" : "Выберите тип пропуска времени суток (0 - Пропускать день, 1 - Пропускать ночь)(Не забудьте включить возможность полного пропуска времени суток)")]
                    public SkipType TypeSkipped = SkipType.Night;
		   		 		  						  	   		   		 		  	 	 		  						  				
                    internal class EventSettings
                    {
                        [JsonProperty(LanguageEn ? "Helicopter spawn custom settings" : "Кастомные настройки спавна вертолета")]
                        public Setting HelicopterSetting = new Setting();
                        [JsonProperty(LanguageEn ? "Custom tank spawn settings" : "Кастомные настройки спавна танка")]
                        public Setting BreadlaySetting = new Setting();
                        [JsonProperty(LanguageEn ? "Custom ship spawn settings" : "Кастомные настройки спавна корабля")]
                        public Setting CargoShipSetting = new Setting();
                        [JsonProperty(LanguageEn ? "Airdrop spawn custom settings" : "Кастомные настройки спавна аирдропа")]
                        public Setting CargoPlaneSetting = new Setting();
                        [JsonProperty(LanguageEn ? "Chinook custom spawn settings" : "Кастомные настройки спавна чинука")]
                        public Setting ChinoockSetting = new Setting();
                        internal class Setting
                        {
                            [JsonProperty(LanguageEn ? "Use notifications for running events (configurable in lang)" : "Использовать уведомления у запущенных ивентах (настраивается в lang)")]
                            public Boolean useGameTip;
                            [JsonProperty(LanguageEn ? "Completely disable event spawning on the server (true - yes/false - no)" : "Полностью отключить спавн ивента на сервере(true - да/false - нет)")]
                            public Boolean FullOff;
                            [JsonProperty(LanguageEn ? "Enable custom spawn event (true - yes/false - no)" : "Включить кастомный спавн ивент(true - да/false - нет)")]
                            public Boolean UseEventCustom;
                            [JsonProperty(LanguageEn ? "Static event spawn time" : "Статическое время спавна ивента")]
                            public Int32 EventSpawnTime;
                            [JsonProperty(LanguageEn ? "Random spawn time settings" : "Настройки случайного времени спавна")]
                            public RandomingTime RandomTimeSpawn = new RandomingTime();
                            internal class RandomingTime
                            {
                                [JsonProperty(LanguageEn ? "Use random event spawn time (static time will not be taken into account) (true - yes/false - no)" : "Использовать случайное время спавно ивента(статическое время не будет учитываться)(true - да/false - нет)")]
                                public Boolean UseRandomTime;
                                [JsonProperty(LanguageEn ? "Minimum event spawn value" : "Минимальное значение спавна ивента")]
                                public Int32 MinEventSpawnTime;
                                [JsonProperty(LanguageEn ? "Max event spawn value" : "Максимальное значении спавна ивента")]
                                public Int32 MaxEventSpawnTime;
                            }
                        }
                    }
                }

                internal class Rates
                {
                    [JsonProperty(LanguageEn ? "Ranking setting during the day" : "Настройка рейтинга днем")]
                    public AllRates DayRates = new AllRates();
                    [JsonProperty(LanguageEn ? "Setting the rating at night" : "Настройка рейтинга ночью")]
                    public AllRates NightRates = new AllRates();
                    [JsonProperty(LanguageEn ? "Setting privileges and ratings specifically for them [iqrates.vip] = { Setting } (Descending)" : "Настройка привилегий и рейтингов конкретно для них [iqrates.vip] = { Настройка } (По убыванию)")]
                    public Dictionary<String, DayAnNightRate> PrivilegyRates = new Dictionary<String, DayAnNightRate>();
                    [JsonProperty(LanguageEn ? "Setting up rating increase by days of the week" : "Настройка увеличения рейтинга по дням недели")]
                    public RateControllerDayOfWeek rateControllerDayOfWeek = new RateControllerDayOfWeek();
                    internal class RateControllerDayOfWeek
                    {
                        [JsonProperty(LanguageEn ? "Using the function to increase ratings based on the days of the week (time and days are taken from your server machine)" : "Использовать функцию увеличения рейтинга по дням недели (время и дни берутся с вашей серверной машины)")]
                        public Boolean useRateBonusDayOfWeek;
                        [JsonProperty(LanguageEn ? "Setting the days of the week and time intervals (make sure that different intervals do not overlap with each other, otherwise it may lead to conflicts)" : "Настройка дней недели и промежутка времени (учтите, чтобы разные промежутка не пересекались друг с другом, иначе это может привести к конфликту)")]
                        public List<RateBonusDays> rateBonusDayOfWeek = new();

                        internal class RateBonusDays
                        {
                            [JsonProperty(LanguageEn ? "How much additional rating will be added to the xN player? For example, if a player has x4, and this parameter is 1.5, the player's rating will be x5.5" : "Сколько будет добавлено дополнительного рейтинга к xN игрока (Например : у игрока х4, данный параметр равен 1.5, в результате у игрока будет x5.5)")]
                            public Single upBonusRate;
                            [JsonProperty(LanguageEn ? "How much additional rating will be added to the xN player, based on permissions (Permission = xN)" : "Сколько будет добавлено дополнительного рейтинга к xN игрока, по привилегиям (Permission = xN)")]
                            public Dictionary<String, Single> privilageUpRates = new Dictionary<String, Single>();
                            [JsonProperty(LanguageEn ? "Configuration of the day and time for starting the bonus rating" : "Настройка дня и времени запуска бонусного рейтинга")]
                            public TimeController timeStartBonus = new();
                            [JsonProperty(LanguageEn ? "Configuration of the day and time for the end of the bonus rating" : "Настройка дня и времени заверешения бонусного рейтинга")]
                            public TimeController timeStopBonus = new();

                            internal class TimeController
                            {
                                [JsonProperty(LanguageEn ? "Specify the hours (24-hour format)" : "Укажите часы (Формат 24 часа)")]
                                public Int32 timeHours;
                                [JsonProperty(LanguageEn ? "Day of the week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday" : "День недели : Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday")]
                                public String dayOfWeek;
                            }
                        }
                    }

                    [JsonProperty(LanguageEn ? "Setting custom rates (items) by permission - setting (Descending)" : "Настройка кастомных рейтов(предметов) по пермишенсу - настройка (По убыванию)")]
                    public PermissionsRate CustomRatesPermissions = new PermissionsRate();
		   		 		  						  	   		   		 		  	 	 		  						  				
                    [JsonProperty(LanguageEn ? "Select the type of sheet to use: 0 - White sheet, 1 - Black sheet (White sheet - the ratings of only those items that are in it increase, the rest are ignored | The Black sheet is completely the opposite)"
                                             : "Выберите тип используемого листа : 0 - Белый лист, 1 - Черный лист (Белый лист - увеличиваются рейтинги только тех предметов - которые в нем, остальные игнорируются | Черный лист полностью наоборот)")]
                    public TypeListUsed TypeList = TypeListUsed.BlackList;
                    [JsonProperty(LanguageEn ? "Black list of items that will not be categorically affected by the rating" : "Черный лист предметов,на которые катигорично не будут действовать рейтинг")]
                    public List<String> BlackList = new List<String>();
                    [JsonProperty(LanguageEn ? "A white list of items that will ONLY be affected by ratings - the rest is ignored" : "Белый лист предметов, на которые ТОЛЬКО будут действовать рейтинги - остальное игнорируются")]
                    public List<String> WhiteList = new List<String>();
                    [JsonProperty(LanguageEn ? "A blacklist of categories that will NOT be affected by ratings" : "Черный список категорий на которые НЕ БУДУТ действовать рейтинги")]
                    public List<String> BlackListCategory = new List<String>();

                    [JsonProperty(LanguageEn ? "Use a tea controller? (Works on scrap, ore and wood tea). If enabled, it will set % to production due to the difference between rates (standard / privileges)" : "Использовать контроллер чая? (Работае на скрап, рудный и древесный чай). Если включено - будет устанавливать % к добычи за счет разницы между рейтами (стандартный / привилегии)")]
                    public Boolean UseTeaController;
                    [JsonProperty(LanguageEn ? "Use a prefabs blacklist?" : "Использовать черный лист префабов?")]
                    public Boolean UseBlackListPrefabs;
                    [JsonProperty(LanguageEn ? "Black list of prefabs(ShortPrefabName) - which will not be affected by ratings" : "Черный лист префабов(ShortPrefabName) - на которые не будут действовать рейтинги")]
                    public List<String> BlackListPrefabs = new List<String>();
                    
                    [JsonProperty(LanguageEn ? "Enable melting speed in furnaces (true - yes/false - no)" : "Включить скорость плавки в печах(true - да/false - нет)")]
                    public Boolean UseSpeedBurnable;
                    [JsonProperty(LanguageEn ? "Smelting Fuel Usage Rating (If the list is enabled, this value will be the default value for all non-licensed)" : "Рейтинг использования топлива при переплавки(Если включен список - это значение будет стандартное для всех у кого нет прав)")]
                    public Int32 SpeedFuelBurnable = 1;
                    [JsonProperty(LanguageEn ? "Use a blacklist of items for melting?" : "Использовать черный список предметов для плавки?")]
                    public Boolean UseBlackListBurnable = false;
                    [JsonProperty(LanguageEn ? "A black list of items for the stove, which will not be categorically affected by melting" : "Черный лист предметов для печки,на которые катигорично не будут действовать плавка")]
                    public List<String> BlackListBurnable = new List<String>();
                    [JsonProperty(LanguageEn ? "Furnace smelting speed (If the list is enabled, this value will be the default for everyone who does not have rights)" : "Скорость плавки печей(Если включен список - это значение будет стандартное для всех у кого нет прав)")]
                    public Single SpeedBurnable;
                    [JsonProperty(LanguageEn ? "Enable list of melting speed in furnaces (true - yes/false - no)" : "Включить список скорости плавки в печах(true - да/false - нет)")]
                    public Boolean UseSpeedBurnableList;
                    [JsonProperty(LanguageEn ? "Setting the melting speed in furnaces by privileges" : "Настройка скорости плавки в печах по привилегиям")]
                    public List<SpeedBurnablePreset> SpeedBurableList = new List<SpeedBurnablePreset>();
                    [JsonProperty(LanguageEn ? "Enable tea mixing acceleration in the mixing table (true - yes/false - no)" : "Включить ускорение смешивания чая в столе смешивания (true - да/false - нет)")]
                    public Boolean useSpeedMixingTable;
                    [JsonProperty(LanguageEn ? "Setting the tea mixing speed" : "Настройка скорости смешивания чая")]
                    public List<SpeedMixingTable> speedMixingTables = new List<SpeedMixingTable>();
                    [JsonProperty(LanguageEn ? "A blacklist of prefabs (ShortPrefabName) that will not be affected by acceleration (example: campfire) [If you don't need it, leave it empty]" : "Черный список префабов(ShortPrefabName), на которые не будет действовать ускорение (пример : campfire) [Если вам не нужно - оставьте пустым]")]
                    public List<String> IgnoreSpeedBurnablePrefabList = new List<String>();
                    
                    internal class DayAnNightRate
                    {
                        [JsonProperty(LanguageEn ? "Ranking setting during the day" : "Настройка рейтинга днем")]
                        public AllRates DayRates = new AllRates();
                        [JsonProperty(LanguageEn ? "Setting the rating at night" : "Настройка рейтинга ночью")]
                        public AllRates NightRates = new AllRates();
                    }
                    
                    [JsonProperty(LanguageEn ? "Setting up a recycler" : "Настройка переработчика")]
                    public RecyclerController RecyclersController = new RecyclerController(); 
                    internal class RecyclerController
                    {
                        [JsonProperty(LanguageEn ? "Use the processing time editing functions" : "Использовать функции редактирования времени переработки")]
                        public Boolean UseRecyclerSpeed;
                        [JsonProperty(LanguageEn ? "Static processing time (in seconds) (Will be set according to the standard or if the player does not have the privilege) (Default = 5s)" : "Статичное время переработки (в секундах) (Будет установлено по стандарту или если у игрока нет привилеии) (По умолчанию = 5с)")]
                        public Single DefaultSpeedRecycler;

                        [JsonProperty(LanguageEn ? "Setting the processing time for privileges (adjust from greater privilege to lesser privilege)" : "Настройка времени переработки для привилегий (настраивать от большей привилегии к меньшей)")]
                        public List<PresetRecycler> PrivilageSpeedRecycler = new List<PresetRecycler>();
                        internal class PresetRecycler
                        {
                            [JsonProperty(LanguageEn ? "Permissions" : "Права")]
                            public String Permissions;
                            [JsonProperty(LanguageEn ? "Standard processing time (in seconds)" : "Стандартное время переработки (в секундах)")]
                            public Single SpeedRecyclers;
                        }
                    }
                    internal class SpeedBurnablePreset
                    {
                        [JsonProperty(LanguageEn ? "Permissions" : "Права")]
                        public String Permissions;
                        [JsonProperty(LanguageEn ? "Furnace melting speed" : "Скорость плавки печей")]
                        public Single SpeedBurnable;
                        [JsonProperty(LanguageEn ? "Smelting Fuel Use Rating" : "Рейтинг использования топлива при переплавки")]
                        public Int32 SpeedFuelBurnable = 1;
                    }
                    
                    internal class SpeedMixingTable
                    {
                        [JsonProperty(LanguageEn ? "Permissions" : "Права")]
                        public String Permissions;
                        [JsonProperty(LanguageEn ? "Mixing speed (0-100%)" : "Скорость смешивания (0-100%)")]
                        public Int32 SpeedMixing;
                    }
                    
                    internal class PermissionsRate
                    {
                        [JsonProperty(LanguageEn ? "Ranking setting during the day" : "Настройка рейтинга днем")]
                        public Dictionary<String, List<PermissionsRateDetalis>> DayRates = new Dictionary<String, List<PermissionsRateDetalis>>();
                        [JsonProperty(LanguageEn ? "Setting the rating at night" : "Настройка рейтинга ночью")]
                        public Dictionary<String, List<PermissionsRateDetalis>> NightRates = new Dictionary<String, List<PermissionsRateDetalis>>();
                        public class PermissionsRateDetalis
                        {
                            [JsonProperty(LanguageEn ? "Shortname" : "Shortname")]
                            public String Shortname;
                            [JsonProperty(LanguageEn ? "Rate" : "Рейтинг")]
                            public Single Rate;
                        }
                    }
                    internal class AllRates
                    {
                        [JsonProperty(LanguageEn ? "Rating of extracted resources" : "Рейтинг добываемых ресурсов")]
                        public Single GatherRate;
                        [JsonProperty(LanguageEn ? "Rating of found items" : "Рейтинг найденных предметов")]
                        public Single LootRate;
                        [JsonProperty(LanguageEn ? "Pickup Rating" : "Рейтинг поднимаемых предметов")]
                        public Single PickUpRate;
                        [JsonProperty(LanguageEn ? "Rating of plants raised from the beds" : "Рейтинг поднимаемых растений с грядок")]
                        public Single GrowableRate = 1.0f;
                        [JsonProperty(LanguageEn ? "Quarry rating" : "Рейтинг карьеров")]
                        public Single QuarryRate;
                        [JsonProperty(LanguageEn ? "Detailed rating settings in the career" : "Детальная настройка рейтинга в карьере")]
                        public QuarryRateDetalis QuarryDetalis = new QuarryRateDetalis();
                        [JsonProperty(LanguageEn ? "Excavator Rating" : "Рейтинг экскаватора")]
                        public Single ExcavatorRate;
                        [JsonProperty(LanguageEn ? "Coal drop chance" : "Шанс выпадения угля")]
                        public Single CoalRare;
                        [JsonProperty(LanguageEn ? "Rating of items caught from the sea (fishing)" : "Рейтинг предметов выловленных с моря (рыбалки)")]
                        public Single FishRate;

                        internal class QuarryRateDetalis
                        {
                            [JsonProperty(LanguageEn ? "Use the detailed setting of the career rating (otherwise the 'Career Rating' will be taken for all subjects)" : "Использовать детальную настройку рейтинга карьеров (иначе будет браться 'Рейтинг карьеров' для всех предметов)")]
                            public Boolean UseDetalisRateQuarry;
                            [JsonProperty(LanguageEn ? "The item dropped out of the career - rating" : "Предмет выпадаемый из карьера - рейтинг")]
                            public Dictionary<String, Single> ShortnameListQuarry = new Dictionary<String, Single>();
                        }
                    }
                }
                [JsonProperty(LanguageEn ? "Configuring supported plugins" : "Настройка поддерживаемых плагинов")]
                public ReferencePlugin ReferenceSettings = new ReferencePlugin();
            }
        }
        
        object OnContainerDropGrowable(ItemContainer container, Item item)
        {
            if (container == null) return false;
            var Container = container.entityOwner as LootContainer;
            if (Container == null) return false;
            UInt64 NetID = Container.net.ID.Value;
            if (NetID == 14358899 && item.info.itemid == 1998363) return false;

            return null;
        }

                private Configuration.PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays rateDayOfWeek = null;
        //ss
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();

                if (config.pluginSettings.RateSetting.BlackListCategory == null)
                    config.pluginSettings.RateSetting.BlackListCategory = new List<String>()
                    {
                        "Weapon", 
                        "Ammunition",
                        "Traps",
                        "Attire",
                        "Items",
                        "Tools",
                        "Component"
                    };
                if (config.pluginSettings.RateSetting.WhiteList == null)
                {
                    config.pluginSettings.RateSetting.WhiteList = new List<String>()
                    {
                        "wood",
                        "sulfur.ore"
                    };
                }
                
                if (config.pluginSettings.RateSetting.RecyclersController.DefaultSpeedRecycler == 0f)
                    config.pluginSettings.RateSetting.RecyclersController.DefaultSpeedRecycler = 5f;
                if (config.pluginSettings.RateSetting.BlackListPrefabs == null ||
                    config.pluginSettings.RateSetting.BlackListPrefabs.Count == 0)
                    config.pluginSettings.RateSetting.BlackListPrefabs = new List<String>()
                    {
                        "crate_elite",
                        "crate_normal"
                    };
                    
                if (config.pluginSettings.RateSetting.RecyclersController.PrivilageSpeedRecycler == null ||
                    config.pluginSettings.RateSetting.RecyclersController.PrivilageSpeedRecycler.Count == 0)
                {
                    config.pluginSettings.RateSetting.RecyclersController.PrivilageSpeedRecycler =
                        new List<Configuration.PluginSettings.Rates.RecyclerController.PresetRecycler>()
                        {
                            new Configuration.PluginSettings.Rates.RecyclerController.PresetRecycler()
                            {
                                Permissions = "iqrates.recyclerhyperfast",
                                SpeedRecyclers = 0
                            },
                            new Configuration.PluginSettings.Rates.RecyclerController.PresetRecycler()
                            {
                                Permissions = "iqrates.recyclerfast",
                                SpeedRecyclers = 3
                            },
                        };
                }
		   		 		  						  	   		   		 		  	 	 		  						  				
                if (config.pluginSettings.RateSetting.DayRates.QuarryDetalis.ShortnameListQuarry.Count == 0)
                    config.pluginSettings.RateSetting.DayRates.QuarryDetalis =
                        new Configuration.PluginSettings.Rates.AllRates.QuarryRateDetalis()
                        {
                            UseDetalisRateQuarry = false,
                            ShortnameListQuarry = new Dictionary<String, Single>()
                            {
                                ["metal.ore"] = 10,
                                ["sulfur.ore"] = 5
                            }
                        };
                
                if (config.pluginSettings.RateSetting.NightRates.QuarryDetalis.ShortnameListQuarry.Count == 0)
                    config.pluginSettings.RateSetting.NightRates.QuarryDetalis =
                        new Configuration.PluginSettings.Rates.AllRates.QuarryRateDetalis()
                        {
                            UseDetalisRateQuarry = false,
                            ShortnameListQuarry = new Dictionary<String, Single>()
                            {
                                ["metal.ore"] = 10,
                                ["sulfur.ore"] = 5
                            }
                        };

                if (config.pluginSettings.RateSetting.speedMixingTables == null || config.pluginSettings.RateSetting.speedMixingTables.Count == 0)
                {
                    config.pluginSettings.RateSetting.speedMixingTables =
                        new List<Configuration.PluginSettings.Rates.SpeedMixingTable>()
                        {
                            new Configuration.PluginSettings.Rates.SpeedMixingTable()
                            {

                                Permissions = "iqrates.default",
                                SpeedMixing = 0,
                            },
                            new Configuration.PluginSettings.Rates.SpeedMixingTable()
                            {

                                Permissions = "iqrates.vip",
                                SpeedMixing = 20,
                            },
                            new Configuration.PluginSettings.Rates.SpeedMixingTable()
                            {

                                Permissions = "iqrates.premium",
                                SpeedMixing = 50,
                            },
                        };
                }
            }
            catch
            {                       
                PrintWarning(LanguageEn ? "Error #334332143" + $"read configuration 'oxide/config/{Name}', create a new configuration!!" : "Ошибка #334343" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!"); 
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        private void GetTimeComponent()
        {
            timeComponent = TOD_Sky.Instance.Components.Time;
            if (timeComponent == null) return;
            SetTimeComponent();
            StartupFreeze();
        }

        bool IsBlackList(string Shortname)
        {
            var BlackList = config.pluginSettings.RateSetting.BlackList;
            if (BlackList.Contains(Shortname))
                return true;
            else return false;
        }  
        
        private MonumentInfo SpacePort;
        private object OnOvenToggle(BaseOven oven, BasePlayer player)
        {
            if (config.pluginSettings.RateSetting.IgnoreSpeedBurnablePrefabList.Contains(oven.ShortPrefabName))
                return null;
            
            return OvenController.GetOrAdd(oven).Switch(player);
        }
        bool IsWhiteList(string Shortname)
        {
            var WhiteList = config.pluginSettings.RateSetting.WhiteList;
            if (WhiteList.Contains(Shortname))
                return true;
            else return false;
        }      

        private void OnEntitySpawned(BaseSubmarine submarine)
        {
            if (submarine == null) return;
            FuelSystemRating(submarine.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountSubmarine);

            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                submarine.maxFuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedSubmarine;
        }
        private void OnEntitySpawned(MotorRowboat boat)
        {
            if (boat == null) return;
            FuelSystemRating(boat.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountBoat);

            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                boat.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedBoat;
        } 
        Single GetRateQuarryDetalis(Configuration.PluginSettings.Rates.AllRates Rates, String Shortname)
        {
            Single Rate = Rates.QuarryRate;
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (!Rates.QuarryDetalis.UseDetalisRateQuarry) return Rate;
            return Rates.QuarryDetalis.ShortnameListQuarry.ContainsKey(Shortname) ? Rates.QuarryDetalis.ShortnameListQuarry[Shortname] : Rate;
        }

        void OnHour()
        {
            Single hour = TOD_Sky.Instance.Cycle.Hour;
            var Sunrise = TOD_Sky.Instance.SunriseTime;
            var Sunset = TOD_Sky.Instance.SunsetTime;
            Int32 dayStart = config.pluginSettings.OtherSetting.DayStart;
            Int32 nightStart = config.pluginSettings.OtherSetting.NightStart;
            
            if (hour > Sunrise && hour < Sunset && hour >= dayStart && !activatedDay)
                OnSunrise();
            else if ((hour > Sunset || hour < Sunrise) && hour >= nightStart && activatedDay)
                OnSunset();
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (config.pluginSettings.OtherSetting.UseSkipTime ||
                !config.pluginSettings.OtherSetting.UseAlertDayNight) return;
            
            if (!sendMessageDay && sendMessageNight && Mathf.Abs(hour - dayStart) <= 0.1f)
            {
                Configuration.PluginSettings.Rates.AllRates Rate = config.pluginSettings.RateSetting.DayRates;
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                    SendChat(GetLang("DAY_RATES_ALERT", player.UserIDString, Rate.GatherRate, Rate.LootRate, Rate.PickUpRate, Rate.QuarryRate, Rate.ExcavatorRate, Rate.GrowableRate), player);
           
                sendMessageDay = true;
                sendMessageNight = false;
            }
            else if (!sendMessageNight && sendMessageDay &&  Mathf.Abs(hour - nightStart) <= 0.1f)
            {
                Configuration.PluginSettings.Rates.AllRates Rate = config.pluginSettings.RateSetting.NightRates;
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                    SendChat(GetLang("NIGHT_RATES_ALERT", player.UserIDString, Rate.GatherRate, Rate.LootRate, Rate.PickUpRate, Rate.QuarryRate, Rate.ExcavatorRate, Rate.GrowableRate), player);
           
                sendMessageNight = true;
                sendMessageDay = false;
            }
        }

        private void SpawnTank()
        {
            UnSubProSub();
            if (!BradleySpawner.singleton.spawned.isSpawned)
                BradleySpawner.singleton?.SpawnBradley();
        }

        private Single GetBonusRateDayOfWeek(BasePlayer player)
        {
            if (rateDayOfWeek == null)
                return 0;

            if (player == null)
                return rateDayOfWeek.upBonusRate;
            
            foreach (KeyValuePair<string,float> privilageUpRate in rateDayOfWeek.privilageUpRates.OrderByDescending(x => x.Value))
            {
                if (permission.UserHasPermission(player.UserIDString, privilageUpRate.Key))
                    return privilageUpRate.Value;
            }
            
            return rateDayOfWeek.upBonusRate;
        }
        private Boolean sendMessageNight;
        private void OnEntitySpawned(HotAirBalloon hotAirBalloon)
        {
            if (!config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel) return;
            if (hotAirBalloon == null) return;
            hotAirBalloon.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedHotAirBalloon;
        }
        
        
        
        private IEnumerator InitializeTransport()
        {
            foreach (BaseNetworkable entity in BaseNetworkable.serverEntities.Where(e => e is BaseVehicle)) 
            {
                if (entity is MotorRowboat)
                    OnEntitySpawned((MotorRowboat)entity);
                if(entity is Snowmobile)
                    OnEntitySpawned((Snowmobile)entity);
                if(entity is HotAirBalloon)
                    OnEntitySpawned((HotAirBalloon)entity);
                if(entity is RHIB)
                    OnEntitySpawned((RHIB)entity);
                if(entity is BaseSubmarine)
                    OnEntitySpawned((BaseSubmarine)entity);
                if(entity is Minicopter)
                    OnEntitySpawned((Minicopter)entity);
                if(entity is ScrapTransportHelicopter)
                    OnEntitySpawned((ScrapTransportHelicopter)entity);
                
                yield return CoroutineEx.waitForSeconds(0.03f); 
            }
        }
        int API_CONVERT(Int32 RateType, string Shortname, float Amount, BasePlayer player = null) => Converted((Types)RateType, Shortname, Amount, player);
        void SpawnPlane()
        {
            UnSubProSub();
        
            var position = new Vector3(ConVar.Server.worldsize, 100, ConVar.Server.worldsize) - new Vector3(50f, 0f, 50f);
            var entity = GameManager.server.CreateEntity(prefabPlane, position);
            entity?.Spawn();
        }
        
        private void StartCargoShip(Configuration.PluginSettings.OtherSettings.EventSettings EventSettings)
        {
            if (!EventSettings.CargoShipSetting.FullOff && EventSettings.CargoShipSetting.UseEventCustom)
            {
                Int32 TimeSpawn = EventSettings.CargoShipSetting.RandomTimeSpawn.UseRandomTime ? GetRandomTime(EventSettings.CargoShipSetting.RandomTimeSpawn.MinEventSpawnTime, EventSettings.CargoShipSetting.RandomTimeSpawn.MaxEventSpawnTime) : EventSettings.CargoShipSetting.EventSpawnTime;
                timer.Once(TimeSpawn, () =>
                {
                    StartCargoShip(EventSettings);
                    SpawnCargo();
                    
                    if(EventSettings.CargoShipSetting.useGameTip)
                        MessageGameTipsError("ALERT_CARGOSHIP");
                });
            }
        }
       
        
        
        private void OnRecyclerToggle(Recycler recycler, BasePlayer player)
        {
            if (!recycler.IsOn())
            {
                NextTick(() =>
                {
                    if (!recycler.IsOn())
                        return;

                    Single Speed = GetSpeedRecycler(player);
                    recycler.InvokeRepeating(recycler.RecycleThink, Speed, Speed);
                });
            }
        }
		   		 		  						  	   		   		 		  	 	 		  						  				
        private readonly Dictionary<String, ModiferTea> TeaModifers = new Dictionary<String, ModiferTea>
        {
            ["oretea.advanced"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 0.35f,
                Type = Modifier.ModifierType.Ore_Yield
            },
            ["oretea"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 0.2f,
                Type = Modifier.ModifierType.Ore_Yield
            },
            ["oretea.pure"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 0.5f,
                Type = Modifier.ModifierType.Ore_Yield
            },
            ["woodtea.advanced"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 1.0f,
                Type = Modifier.ModifierType.Wood_Yield
            },
            ["woodtea"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 0.5f,
                Type = Modifier.ModifierType.Wood_Yield
            },
            ["woodtea.pure"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 2.0f,
                Type = Modifier.ModifierType.Wood_Yield
            },
            ["scraptea.advanced"] = new ModiferTea()
            {
                Duration = 2700f,
                Value = 2.25f,
                Type = Modifier.ModifierType.Scrap_Yield
            },
            ["scraptea"] = new ModiferTea()
            {
                Duration = 1800f,
                Value = 1.0f,
                Type = Modifier.ModifierType.Scrap_Yield
            },
            ["scraptea.pure"] = new ModiferTea()
            {
                Duration = 3600f,
                Value = 3.5f,
                Type = Modifier.ModifierType.Scrap_Yield
            },
        };
        
        
        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (entity == null) return;

            if(config.pluginSettings.RateSetting.UseBlackListPrefabs)
                if (config.pluginSettings.RateSetting.BlackListPrefabs.Contains(entity.ShortPrefabName))
                    return;
            
            LootContainer container = entity as LootContainer;

            if (entity.net == null) return;
            UInt64 NetID = entity.net.ID.Value;
            if (LootersListCrateID.Contains(NetID) || LootersSaveListCrateID.Contains(NetID)) return;

            if (container == null)
            {
                if (!(entity is NPCPlayerCorpse)) return;
                
                NPCPlayerCorpse corpse = (NPCPlayerCorpse)entity;
                foreach (ItemContainer corpseContainer in corpse.containers)
                {
                    foreach (Item item in corpseContainer.itemList)
                        item.amount = Converted(Types.Loot, item.info.shortname, item.amount, player);
                }
            }
            else
            {
                foreach (Item item in container.inventory.itemList)
                    item.amount = Converted(Types.Loot, item.info.shortname, item.amount, player);
            }
            
            LootersListCrateID.Add(NetID);
            
            if(entity is SupplyDrop or HackableLockedCrate)
                LootersSaveListCrateID.Add(NetID);
        }

                
        
        object OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player = entity as BasePlayer;
            if (item == null || player == null) return null;
            Int32 Rate = Converted(Types.Gather, item.info.shortname, item.amount, player);
            item.amount = Rate;

            return null;
        }
        private Boolean sendMessageDay;

        
                
        private void MessageGameTipsError(String langKey)
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
                player.SendConsoleCommand("gametip.showtoast", new object[]{ "1", GetLang(langKey, player.UserIDString) });
        }

        void ReadData()
        {
            DataQuarryPlayer = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<UInt64, UInt64>>("IQSystem/IQRates/Quarrys");
            LootersSaveListCrateID = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<List<UInt64>>("IQSystem/IQRates/LootersCratedIDs");
        }
        void StartEvent()
        {
            Configuration.PluginSettings.OtherSettings.EventSettings EventSettings = config.pluginSettings.OtherSetting.EventSetting;
            StartCargoShip(EventSettings);
            StartCargoPlane(EventSettings);
            StartBreadley(EventSettings);
            StartChinoock(EventSettings);
            StartHelicopter(EventSettings);
        }
        int API_CONVERT_GATHER(string Shortname, float Amount, BasePlayer player = null) => Converted(Types.Gather, Shortname, Amount, player);
        private void OnEntitySpawned(AttackHelicopter helicopter)
        {
            if (helicopter == null) return;
            FuelSystemRating(helicopter.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountAttackHelicopter);
		   		 		  						  	   		   		 		  	 	 		  						  				
            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                helicopter.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedAttackHelicopter;
        }
        
        
        enum Types
        {
            Gather,
            Loot,
            PickUP,
            Quarry,
            Excavator,
            Growable,
            Fishing
        }

        void OnSunrise()
        {
            timeComponent.DayLengthInMinutes = config.pluginSettings.OtherSetting.DayTime * (24.0f / (TOD_Sky.Instance.SunsetTime - TOD_Sky.Instance.SunriseTime));
            activatedDay = true;
            if (!config.pluginSettings.OtherSetting.UseSkipTime) return;
            if (config.pluginSettings.OtherSetting.TypeSkipped == SkipType.Day)
                TOD_Sky.Instance.Cycle.Hour = config.pluginSettings.OtherSetting.NightStart;
        }

        private Int32 GetRandomTime(Int32 Min, Int32 Max) => UnityEngine.Random.Range(Min, Max);
        
        
        private Single GetSpeedRecycler(BasePlayer player)
        {
            Configuration.PluginSettings.Rates.RecyclerController Recycler = config.pluginSettings.RateSetting.RecyclersController;
		   		 		  						  	   		   		 		  	 	 		  						  				
            foreach (Configuration.PluginSettings.Rates.RecyclerController.PresetRecycler presetRecycler in Recycler.PrivilageSpeedRecycler)
            {
                if (permission.UserHasPermission(player.UserIDString, presetRecycler.Permissions))
                    return presetRecycler.SpeedRecyclers;
            }
            
            return Recycler.DefaultSpeedRecycler;
        }
        private object OnExcavatorGather(ExcavatorArm arm, Item item)
        {
            if (arm == null) return null;
            if (item == null) return null;
            item.amount = Converted(Types.Excavator, item.info.shortname, item.amount, ExcavatorPlayer);
            return null;
        }
        
        private object OnOvenStart(BaseOven oven)
        {
            if (config.pluginSettings.RateSetting.IgnoreSpeedBurnablePrefabList.Contains(oven.ShortPrefabName))
                return null;
            
            return OvenController.GetOrAdd(oven).Switch(null);
        }
		   		 		  						  	   		   		 		  	 	 		  						  				
        void WriteData()
        {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQRates/Quarrys", DataQuarryPlayer);
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQRates/LootersCratedIDs", LootersSaveListCrateID);
        }
        
        
        void OnFuelConsume(BaseOven oven, Item fuel, ItemModBurnable burnable)
        {
            if (oven == null) return;
            
            burnable.byproductChance = GetRareCoal(BasePlayer.FindByID(oven.OwnerID));
            if (burnable.byproductChance == 0)
                burnable.byproductChance = -1;
        }
        
                
        void OnCollectiblePickup(CollectibleEntity collectible, BasePlayer player)
        {
            foreach(ItemAmount item in collectible.itemList)
                item.amount = Converted(Types.PickUP, item.itemDef.shortname, (Int32)item.amount, player);
        }
        private Coroutine initializeTransport = null;
 
        private Configuration.PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays GetRateBonusForCurrentTime()
        {
            DayOfWeek currentDayOfWeek = DateTime.UtcNow.DayOfWeek;
            Int32 currentHour = DateTime.UtcNow.Hour;
            
            foreach (Configuration.PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays rateBonusDay in config.pluginSettings.RateSetting.rateControllerDayOfWeek.rateBonusDayOfWeek)
            {
                DayOfWeek startDayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), rateBonusDay.timeStartBonus.dayOfWeek);
                Int32 startHour = rateBonusDay.timeStartBonus.timeHours;
                
                DayOfWeek stopDayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), rateBonusDay.timeStopBonus.dayOfWeek);
                Int32 stopHour = rateBonusDay.timeStopBonus.timeHours;
                
                Boolean isWithinSameDay = startDayOfWeek == stopDayOfWeek && currentDayOfWeek == startDayOfWeek && currentHour >= startHour && currentHour <= stopHour;
                Boolean isCrossingMidnight = startDayOfWeek < stopDayOfWeek && ((currentDayOfWeek == startDayOfWeek && currentHour >= startHour) || (currentDayOfWeek == stopDayOfWeek && currentHour <= stopHour) || (currentDayOfWeek > startDayOfWeek && currentDayOfWeek < stopDayOfWeek));
                Boolean isWrappingAroundWeek = startDayOfWeek > stopDayOfWeek && ((currentDayOfWeek == startDayOfWeek && currentHour >= startHour) || (currentDayOfWeek == stopDayOfWeek && currentHour <= stopHour) || (currentDayOfWeek > startDayOfWeek || currentDayOfWeek < stopDayOfWeek));
                
                if (isWithinSameDay || isCrossingMidnight || isWrappingAroundWeek)
                    return rateBonusDay;
            }

            return null;
        }
        private void StartChinoock(Configuration.PluginSettings.OtherSettings.EventSettings EventSettings)
        {
            if (!EventSettings.ChinoockSetting.FullOff && EventSettings.ChinoockSetting.UseEventCustom)
            {
                Int32 TimeSpawn = EventSettings.ChinoockSetting.RandomTimeSpawn.UseRandomTime ? GetRandomTime(EventSettings.ChinoockSetting.RandomTimeSpawn.MinEventSpawnTime, EventSettings.ChinoockSetting.RandomTimeSpawn.MaxEventSpawnTime) : EventSettings.ChinoockSetting.EventSpawnTime;
                timer.Once(TimeSpawn, () =>
                {
                    StartChinoock(EventSettings);
                    SpawnCH47();
                    
                    if(EventSettings.ChinoockSetting.useGameTip)
                        MessageGameTipsError("ALERT_CHINOOCK");
                });
            }
        }
        
        
        private String IsValidConfigDayOfWeek()
        {
            if (!config.pluginSettings.RateSetting.rateControllerDayOfWeek.useRateBonusDayOfWeek) return String.Empty;
            List<Configuration.PluginSettings.Rates.RateControllerDayOfWeek.RateBonusDays> bonusPeriods = config.pluginSettings.RateSetting.rateControllerDayOfWeek.rateBonusDayOfWeek;

            String periodsError = String.Empty;
            
            for (int i = 0; i < bonusPeriods.Count; i++)
            {
                var period1 = bonusPeriods[i];

                int start1 = GetTotalHoursFromStartOfWeek(period1.timeStartBonus.dayOfWeek,
                    period1.timeStartBonus.timeHours);
                int end1 = GetTotalHoursFromStartOfWeek(period1.timeStopBonus.dayOfWeek,
                    period1.timeStopBonus.timeHours);

                for (int j = i + 1; j < bonusPeriods.Count; j++)
                {
                    var period2 = bonusPeriods[j];
                    int start2 = GetTotalHoursFromStartOfWeek(period2.timeStartBonus.dayOfWeek,
                        period2.timeStartBonus.timeHours);
                    int end2 = GetTotalHoursFromStartOfWeek(period2.timeStopBonus.dayOfWeek,
                        period2.timeStopBonus.timeHours);

                    if (IsOverlapping(start1, end1, start2, end2))
                    {
                        periodsError += LanguageEn
                            ? $"\nIntersections in : Period 1 : {period1.timeStartBonus.dayOfWeek} {period1.timeStartBonus.timeHours}:00 => {period1.timeStopBonus.dayOfWeek} {period1.timeStopBonus.timeHours}:00 vs Period 2 : {period2.timeStartBonus.dayOfWeek} {period2.timeStartBonus.timeHours}:00 => {period2.timeStopBonus.dayOfWeek} {period2.timeStopBonus.timeHours}:00"
                            : $"\nПересечения в : Период 1 : {period1.timeStartBonus.dayOfWeek} {period1.timeStartBonus.timeHours}:00 => {period1.timeStopBonus.dayOfWeek} {period1.timeStopBonus.timeHours}:00 vs Период 2 : {period2.timeStartBonus.dayOfWeek} {period2.timeStartBonus.timeHours}:00 => {period2.timeStopBonus.dayOfWeek} {period2.timeStopBonus.timeHours}:00";
                        return periodsError; 
                    }
                }
            }

            return String.Empty;; 
        }
        protected override void SaveConfig() => Config.WriteObject(config);

        private ModifierDefintion GetDefintionModifer(Modifier.ModifierType Type, Single Duration, Single Value)
        {
            ModifierDefintion def = new ModifierDefintion
            {
                source = Modifier.ModifierSource.Tea,
                type = Type,
                duration = Duration,
                value = Value <= 0 ? 1.0f : Value
            };

            return def;
        }
        private const string prefabPlane = "assets/prefabs/npc/cargo plane/cargo_plane.prefab";
		   		 		  						  	   		   		 		  	 	 		  						  				
        private bool IsOverlapping(int start1, int end1, int start2, int end2)
        {
            if (start1 <= end1)
            {
                if (start2 <= end2) 
                    return start1 < end2 && start2 < end1;
                return start1 < end2 || start2 < end1;
            }
            if (start2 <= end2) 
                return start2 < end1 || start1 < end2;
            return true;
        }
        void OnExcavatorResourceSet(ExcavatorArm arm, string resourceName, BasePlayer player)
        {
            if (arm == null || player == null) return;
            ExcavatorPlayer = player;
        }
        
                
        private Single GetSpeeedMixingTable(BasePlayer player)
        {
            foreach (Configuration.PluginSettings.Rates.SpeedMixingTable speedMixing in config.pluginSettings.RateSetting.speedMixingTables.OrderByDescending(x => x.SpeedMixing))
            {
                if (permission.UserHasPermission(player.UserIDString, speedMixing.Permissions))
                    return 1.0f - (speedMixing.SpeedMixing / 100.0f);
            }

            return 1;
        }

        void API_BONUS_RATE_ADDPLAYER(UInt64 userID, Single Rate)
        {
            BasePlayer player = BasePlayer.FindByID(userID);
            API_BONUS_RATE_ADDPLAYER(player, Rate);
        }
        
        public void Register(string Permissions)
        {
            if (!String.IsNullOrWhiteSpace(Permissions))
                if (!permission.PermissionExists(Permissions, this))
                    permission.RegisterPermission(Permissions, this);
        }
        private Boolean activatedDay;
        bool IsBlackListBurnable(string Shortname)
        {
            var BlackList = config.pluginSettings.RateSetting.BlackListBurnable;
            if (BlackList.Contains(Shortname))
                return true;
            else return false;
        }

        private int GetTotalHoursFromStartOfWeek(string dayOfWeek, int hour)
        {
            DayOfWeek day = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), dayOfWeek);
            int dayOffset = (int)day;
            return dayOffset * 24 + hour;
        }
        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ALERT_HELICOPTER"] = "PATROL HELICOPTER INBOUND",
                ["ALERT_CARGOPLANE"] = "AIRDROP INBOUND",
                ["ALERT_CHINOOCK"] = "CHINOOCK INBOUND",
                ["ALERT_BRADLEY"] = "BRADLEY INBOUND LAUNCH SITE",
                ["ALERT_CARGOSHIP"] = "CARGO SHIP INBOUND",
                
                ["MY_RATES_INFO"] = "Your resource rating at the moment :" +
                "\n- Rating of extracted resources: <color=#eb4034>x{0}</color>" +
                "\n- Rating of found items: <color=#eb4034>х{1}</color>" +
                "\n- Rating of raised items: <color=#eb4034>х{2}</color>" +
                "\n- Career rankings: <color=#eb4034>x{3}</color>" +
                "\n- Excavator Rating: <color=#eb4034>x{4}</color>" +
                "\n- Rating of growable : <color=#eb4034>x{5}</color>",

                ["DAY_RATES_ALERT"] = "The day has come!" +
                "\nThe global rating on the server has been changed :" +
                "\n- Rating of extracted resources: <color=#eb4034>x{0}</color>" +
                "\n- Rating of found items: <color=#eb4034>х{1}</color>" +
                "\n- Rating of raised items: <color=#eb4034>х{2}</color>" +
                "\n- Career rankings: <color=#eb4034>x{3}</color>" +
                "\n- Excavator Rating: <color=#eb4034>x{4}</color>" +
                "\n- Rating of growable : <color=#eb4034>x{5}</color>",

                ["NIGHT_RATES_ALERT"] = "Night came!" +
                "\nThe global rating on the server has been changed :" +
                "\n- Rating of extracted resources: <color=#eb4034>x{0}</color>" +
                "\n- Rating of found items: <color=#eb4034>х{1}</color>" +
                "\n- Rating of raised items: <color=#eb4034>х{2}</color>" +
                "\n- Career rankings: <color=#eb4034>x{3}</color>" +
                "\n- Excavator Rating: <color=#eb4034>x{4}</color>" +
                "\n- Rating of growable : <color=#eb4034>x{5}</color>",
                
                ["RATE_BONUS_DAY_OF_WEEK"] = "Attention, survivors!" +
                                             "\nThe increased rating period has begun!" +
                                             "\nA coefficient of <color=#eb4034>x{0}</color> has been added to all your ratings" +
                                             "\nIt will be active from <color=#eb4034>{1} {2}</color> until <color=#eb4034>{3} {4}</color>\n\nHurry up and take advantage of the bonuses!",

                
                ["RATE_BONUS_DAY_OF_WEEK_END"] = "Attention! The increased rating period has ended.\nThank you for participating!\nStay tuned for new bonuses and continue your adventures!",
                
                ["MONDAY"] = "monday",
                ["TUESDAY"] = "tuesday",
                ["WEDNESDAY"] = "wednesday",
                ["THURSDAY"] = "thursday",
                ["FRIDAY"] = "friday",
                ["SATURDAY"] = "saturday",
                ["SUNDAY"] = "sunday",
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ALERT_HELICOPTER"] = "ПАТРУЛЬНЫЙ ВЕРТОЛЕТ ПРИБЫЛ",
                ["ALERT_CARGOPLANE"] = "АЙРДРОП ПРИБЫЛ",
                ["ALERT_CHINOOCK"] = "ЧИНУК ПРИБЫЛ",
                ["ALERT_BRADLEY"] = "ТАНК ПРИБЫЛ НА КОСМОДРОМ",
                ["ALERT_CARGOSHIP"] = "КОРАБЛЬ ПРИБЫЛ В МОРЕ",
                
                ["MY_RATES_INFO"] = "Ваш рейтинг ресурсов на данный момент :" +
                "\n- Рейтинг добываемых ресурсов: <color=#eb4034>x{0}</color>" +
                "\n- Рейтинг найденных предметов: <color=#eb4034>х{1}</color>" +
                "\n- Рейтинг поднимаемых предметов: <color=#eb4034>х{2}</color>" +
                "\n- Рейтинг карьеров: <color=#eb4034>x{3}</color>" +
                "\n- Рейтинг экскаватора: <color=#eb4034>x{4}</color>" +
                "\n- Рейтинг грядок : <color=#eb4034>x{5}</color>",

                ["DAY_RATES_ALERT"] = "Наступил день!" +
                "\nГлобальный рейтинг на сервере был изменен :" +
                "\n- Рейтинг добываемых ресурсов: <color=#eb4034>x{0}</color>" +
                "\n- Рейтинг найденных предметов: <color=#eb4034>х{1}</color>" +
                "\n- Рейтинг поднимаемых предметов: <color=#eb4034>х{2}</color>" +
                "\n- Рейтинг карьеров: <color=#eb4034>x{3}</color>" +
                "\n- Рейтинг экскаватора: <color=#eb4034>x{4}</color>" +
                "\n- Рейтинг грядок : <color=#eb4034>x{5}</color>", 
                
                ["NIGHT_RATES_ALERT"] = "Наступила ночь!" +
                "\nГлобальный рейтинг на сервере был изменен :" +
                "\n- Рейтинг добываемых ресурсов: <color=#eb4034>x{0}</color>" +
                "\n- Рейтинг найденных предметов: <color=#eb4034>х{1}</color>" +
                "\n- Рейтинг поднимаемых предметов: <color=#eb4034>х{2}</color>" +
                "\n- Рейтинг карьеров: <color=#eb4034>x{3}</color>" +
                "\n- Рейтинг экскаватора: <color=#eb4034>x{4}</color>" +
                "\n- Рейтинг грядок : <color=#eb4034>x{5}</color>",
                
                ["RATE_BONUS_DAY_OF_WEEK"] = "Внимание, выжившие!" + 
                                             "\nНаступил период увеличенного рейтинга!" + 
                                             "\nКо всем <color=#eb4034>вашим</color> рейтингам прибавлен коэффициент <color=#eb4034>x{0}</color>" + 
                                             "\nОн будет действовать с <color=#eb4034>{1} {2}</color>, до <color=#eb4034>{3} {4}</color>\n\nПоспешите воспользоваться бонусами!",
                
                ["RATE_BONUS_DAY_OF_WEEK_END"] =  "Внимание! Период увеличенного рейтинга подошел к концу.\nСпасибо за участие!\nСледите за новыми бонусами и продолжайте свои приключения!",
                
                ["MONDAY"] = "понедельника",
                ["TUESDAY"] = "вторника",
                ["WEDNESDAY"] = "средаы",
                ["THURSDAY"] = "четверга",
                ["FRIDAY"] = "пятницы",
                ["SATURDAY"] = "субботы",
                ["SUNDAY"] = "воскресенья",
            }, this, "ru");
        }
        
                
        private Object OnEventTrigger(TriggeredEventPrefab info)
        {
            switch (info.name)
            {
                case "assets/bundled/prefabs/world/event_cargoheli.prefab":
                {
                    Configuration.PluginSettings.OtherSettings.EventSettings.Setting EventTimer = config.pluginSettings.OtherSetting.EventSetting.ChinoockSetting;
                    if (EventTimer.FullOff || EventTimer.UseEventCustom)
                        return true;
                    break;
                }
                case "assets/bundled/prefabs/world/event_helicopter.prefab":
                {
                    Configuration.PluginSettings.OtherSettings.EventSettings.Setting EventTimer = config.pluginSettings.OtherSetting.EventSetting.HelicopterSetting;
                    if (EventTimer.FullOff || EventTimer.UseEventCustom)
                        return true;
                    break;
                }
                case "assets/bundled/prefabs/world/event_cargoship.prefab":
                {
                    Configuration.PluginSettings.OtherSettings.EventSettings.Setting EventTimer = config.pluginSettings.OtherSetting.EventSetting.CargoShipSetting;
                    if (EventTimer.FullOff || EventTimer.UseEventCustom)
                        return true;
                    break;
                }
                case "assets/bundled/prefabs/world/event_airdrop.prefab":
                {
                    Configuration.PluginSettings.OtherSettings.EventSettings.Setting EventTimer = config.pluginSettings.OtherSetting.EventSetting.CargoPlaneSetting;
                    if (EventTimer.FullOff || EventTimer.UseEventCustom)
                        return true;
                    break;
                }
            }
            return null;
        }

                
                
        public Single GetMultiplaceBurnableSpeed(String ownerid)
        {
            Single Multiplace = config.pluginSettings.RateSetting.SpeedBurnable;
            if (config.pluginSettings.RateSetting.UseSpeedBurnableList)
            {
                var SpeedInList = config.pluginSettings.RateSetting.SpeedBurableList.OrderByDescending(z => z.SpeedBurnable).FirstOrDefault(x => permission.UserHasPermission(ownerid, x.Permissions));
                if (SpeedInList != null)
                    Multiplace = SpeedInList.SpeedBurnable;
            }
            return Multiplace;
        }

        
                private void Unload()
        {
            WriteData();    
            
            OvenController.KillAll();
            if (timeComponent != null)
            {
                timeComponent.OnSunrise -= OnSunrise;
                timeComponent.OnSunset -= OnSunset;
                timeComponent.OnHour -= OnHour;
                timeComponent.ProgressTime = true;
            }
            
            if (initializeTransport != null)
            {
                ServerMgr.Instance.StopCoroutine(initializeTransport);
                initializeTransport = null;
            }

            if (rateDayOfWeek != null)
                rateDayOfWeek = null;
        }
        
        
        public Dictionary<BasePlayer, Single> BonusRates = new Dictionary<BasePlayer, Single>();

        
        private void OnEntitySpawned(RHIB boat)
        {
            if (boat == null) return;
            FuelSystemRating(boat.GetFuelSystem(), config.pluginSettings.OtherSetting.FuelSetting.AmountBoat);

            if (config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.useConsumedFuel)
                boat.fuelPerSec = config.pluginSettings.OtherSetting.FuelConsumedTransportSetting.ConsumedBoat;
        }    
        void OnSwitchToggled(IOEntity entity, BasePlayer player)
        {
            foreach (IOEntity.IOSlot outputSlot in entity.outputs)
            {
                if (outputSlot.connectedTo == null) continue;
                if (outputSlot.connectedTo.ioEnt == null) continue;
                BaseEntity entityConnected = outputSlot.connectedTo.ioEnt.GetEntity();
                if (entityConnected == null) continue;
                BaseEntity parentIoEntity = entityConnected.GetParentEntity();
                if (parentIoEntity == null) continue;
                if (parentIoEntity is not BaseOven oven) continue;
                OvenController.GetOrAdd(oven).Switch(player); 
            }
        }
        public static IQRates _;
        private const string prefabShip = "assets/content/vehicles/boats/cargoship/cargoshiptest.prefab";
            }
}


// --- End of file: IQRates-1.99.37.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XPSystem.cs ---
// --- Original Local Path: XPSystem.cs ---

﻿using System;
using System.Globalization;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using System.Collections.Generic;
using Oxide.Game.Rust.Cui;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Core;
using UnityEngine;
using VLB;

namespace Oxide.Plugins
{
    [Info("XPSystem", "http://topplugin.ru/", "0.0.8")]
	[Description("Добавляет на сервер XP Систему, благодаря которой, игроки смогут получать баланс в магазине за фарм.")]
    class XPSystem : RustPlugin
    {

        [PluginReference] Plugin ImageLibrary;
		private string Layer = "UI_XPSYSTEM";

        public ulong lastDamageName;
		
		private readonly Dictionary<string, int> playerInfo = new Dictionary<string, int>();
		private readonly List<uint> crateInfo = new List<uint>();
		private static Configuration Settings = new Configuration();
		
        #region Configuration [Конфиг] 
       
	    private class Configuration
        {
            public class API
            {
				[JsonProperty("APIKey (Секретный ключ)")] 
				public string SecretKey = "";
				[JsonProperty("ShopID (ИД магазина в сервисе)")]
				public string ShopID = "";
			}
			
			public class Balance
			{
				[JsonProperty("Сколько рублей на баланс магазина будет выдаваться")]
				public int Money = 5; 
			}
			
			public class Gather
			{
				[JsonProperty("Сколько игроку будет выдаваться XP за подбирание ресурсов")]
				public float CollectiblePickup = 0.15f; //Settings.GatherSettings.CollectiblePickup
				[JsonProperty("Сколько игроку будет выдаваться XP за подбирание плантации")]
				public float CropGather = 0.15f; //Settings.GatherSettings.CropGather
				[JsonProperty("Сколько игроку будет выдаваться XP за фарм бочек")]
				public float BarrelGather = 0.5f; //Settings.GatherSettings.BarrelGather
				[JsonProperty("Сколько игроку будет выдаваться XP за фарм ящиков")]
				public float CrateGather = 0.5f; //Settings.GatherSettings.CrateGather
                [JsonProperty("Сколько игроку будет выдаваться XP за убийство животного")]
				public float AnimalGather = 0.5f; //Settings.GatherSettings.AnimalGather
            }

            public class GathersOptions
			{
				[JsonProperty("Сколько игроку будет выдаваться XP за фарм дерева")]
				public float WoodGathers = 0.5f; //Settings.GathersSetting.WoodGathers
                [JsonProperty("Сколько игроку будет выдаваться XP за фарм обычного камня stones")]
				public float StonesGathers = 0.5f; //Settings.GathersSetting.StonesGathers
                [JsonProperty("Сколько игроку будет выдаваться XP за фарм металлического камня")]
				public float MetalOreGathers = 0.5f; //Settings.GathersSetting.MetalOreGathers
                [JsonProperty("Сколько игроку будет выдаваться XP за фарм серного камня")]
				public float SulfurGathers = 0.5f; //Settings.GathersSetting.SulfurGathers
                [JsonProperty("Сколько игроку будет выдаваться XP за фарм бонус МВК")]
				public float HQMGathers = 0.5f; //Settings.GathersSetting.HQMGathers						
			}
			
			public class GUI
			{
				[JsonProperty("Разрешение для использования команды /xp")]
				public string XpPermission = "xpsystem.use";
                [JsonProperty("Текст в основном блоке (возле аватарки)")]
                public string MainBlockText = "<color=#a5e664><b>XP</b></color> можно заработать путём:\n\n<color=#a5e664><b>—</b></color> Подбирания ресурсов\n<color=#a5e664><b>—</b></color> Фарма руды и деревьев\n<color=#a5e664><b>—</b></color> Выращивания еды (плантации)\n<color=#a5e664><b>—</b></color> Фарма бочек и ящиков\n<color=#a5e664><b>—</b></color> Охоты на людей и животных";	
                [JsonProperty("Текст во втором нижнем блоке")]
				public string SecondBlockText = "Перед выводом <color=#a5e664><b>XP</b></color> убедитесь, что Вы авторизованы в нашем магазине <color=#a5e664>SHOP.GAMESTORES.SU</color>";				
			}
			
			[JsonProperty("Настройки API плагина")]
            public API APISettings = new API();
            [JsonProperty("Настройка кол-ва выдачи баланса игроку")]
            public Balance BalanceSettings = new Balance();
			[JsonProperty("Настройка кол-ва выдачи XP с фарма ресурсов")]
            public Gather GatherSettings = new Gather();
            [JsonProperty("Более подробная настройка кол-ва выдачи XP с фарма ресурсов и животных")]
            public GathersOptions GathersSetting = new GathersOptions();
			[JsonProperty("Настройка интерфейса")]
            public GUI GUISettings = new GUI();
		}
		
        #endregion
		
		#region ConfigLoad / DataFiles [Загрузка конфига и информация в дате]
		
		protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                Settings = Config.ReadObject<Configuration>();
                if (Settings?.APISettings == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка в конфиге... Создаю новую конфигурацию!");
                LoadDefaultConfig();
            }
            
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig()
        { 
			PrintWarning(
			                           "Благодарю за приобретение плагина от разработчика плагина: " +
			                           "mabe. Если будут какие-то вопросы, писать - vk.com/zaebokuser");
            Settings = new Configuration();
        } 
        
        protected override void SaveConfig() => Config.WriteObject(Settings);
		
		private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            SaveData();
        }
		
		private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
            }
			SaveData();
        }
		
		public class Xp
		{
			[JsonProperty("Количество XP у игрока:")]
			public float XP { get; set; }
		}
			
		private Dictionary<ulong, Xp> XPS { get; set; }
		
		#endregion
        
        #region GameStores [Запрос в GameStores для обмена XP на рубли] 
		
		bool LogsPlayer = true;

        void MoneyPlus(ulong userId, int amount) {
			ApiRequestBalance(new Dictionary<string, string>() {
				{"action", "moneys"},
				{"type", "plus"},
				{"steam_id", userId.ToString()},
				{"amount", amount.ToString()},
                { "mess", "Обмен XP на рубли! Спасибо, что играете у нас!"}
			});
		}

		void ApiRequestBalance(Dictionary<string, string> args) {
			string url =
				$"https://gamestores.ru/api?shop_id={Settings.APISettings.ShopID}&secret={Settings.APISettings.SecretKey}{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
			webrequest.EnqueueGet(url,
				(i, s) => {
					if (i != 200 && i != 201) {
						PrintError($"{url}\nCODE {i}: {s}");

						if (LogsPlayer) {
							LogToFile("logError", $"({DateTime.Now.ToShortTimeString()}): {url}\nCODE {i}: {s}", this);
						}
					} else {
						if (LogsPlayer) {
							LogToFile("logWEB",
								$"({DateTime.Now.ToShortTimeString()}): "
							+ "Пополнение счета:"
							+ $"{string.Join(" ", args.Select(arg => $"{arg.Value}").ToArray()).Replace("moneys", "").Replace("plus", "")}",
								this);
						}
					}

					if (i == 201) {
						PrintWarning("Плагин не работает!");
						Interface.Oxide.UnloadPlugin(Title);
					}
				},
				this);
		}

        #endregion
		
		#region XPFromGather [Добыча]
        
        object OnCollectiblePickup(Item item, BasePlayer player)
        {
            XPS[player.userID].XP += Settings.GatherSettings.CollectiblePickup;
			
            return null;
        }
        
        object OnCropGather(GrowableEntity plant, Item item, BasePlayer player)
        {
            XPS[player.userID].XP += Settings.GatherSettings.CropGather;
			
            return null;
        }
        
        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            ProcessItem(player, item);
            return;
        }

        void ProcessItem(BasePlayer player, Item item)
        {
            switch (item.info.shortname)
            {
                case "wood":
                    XPS[player.userID].XP += Settings.GathersSetting.WoodGathers;
                    return;
                    break;
                case "stones":
                    XPS[player.userID].XP += Settings.GathersSetting.StonesGathers;
                    return;
                    break;
                case "metal.ore":
                    XPS[player.userID].XP += Settings.GathersSetting.MetalOreGathers;
                    return;
                    break;
                case "sulfur.ore":
                    XPS[player.userID].XP += Settings.GathersSetting.SulfurGathers;
                    return;
                    break;
                case "hq.metal.ore":
                    XPS[player.userID].XP += Settings.GathersSetting.HQMGathers;
                    return;
                    break;
            }
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null) { return; }
            if (info == null) { return; }
            if (info.InitiatorPlayer == null) { return; }
            if (entity is BaseAnimalNPC)
            {
                BasePlayer player = info.InitiatorPlayer;
                XPS[player.userID].XP += Settings.GatherSettings.AnimalGather;
                return;
            }
            if (entity.PrefabName.Contains("barrel"))
            {
                BasePlayer player = info?.InitiatorPlayer;
                XPS[player.userID].XP += Settings.GatherSettings.BarrelGather;
                return;
            }
        }

		private void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (!entity.ShortPrefabName.Contains("crate_") && entity.ShortPrefabName != "heli_crate")
                return;

            if (crateInfo.Contains(entity.net.ID))
                return;

            crateInfo.Add(entity.net.ID);
			XPS[player.userID].XP += Settings.GatherSettings.CrateGather;
        }
		
        #endregion

        #region Hooks [Хуки/проверка]

        private void OnServerInitialized()
        {   
		
			permission.RegisterPermission(Settings.GUISettings.XpPermission, this);
			
			PrintWarning(
			                           "Благодарю за скачивание плагинас форума: " +
			                           "https://topplugin.ru/");
									   
			if (Interface.Oxide.DataFileSystem.ExistsDatafile("XPSystem/Database"))
            { 
                XPS = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, Xp>>("XPSystem/Database");
            }
            else
            {
                XPS = new Dictionary<ulong, Xp>();
            }

            foreach (var player in BasePlayer.activePlayerList)
                GrowableEntity(player);
            SaveData();
        }
        
        private void GrowableEntity(BasePlayer player)
        {
            if (!XPS.ContainsKey(player.userID))
                XPS.Add(player.userID, new Xp { XP = 0 });
			SaveData();
        }

		private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject("XPSystem/Database", XPS);
        }
		
        #endregion

        #region Commands [Команды]

        [ChatCommand("xp")]
        void cmdXp(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, Settings.GUISettings.XpPermission))
            {
                SendReply(player, "У вас <color=#a5e664>недостаточно</color> прав для использования этой команды!");
                return;
            }

            DrawGUI(player);
        }
		
		[ConsoleCommand("xp")]
        private void cmdXp(ConsoleSystem.Arg args)
        {
            if (!args.Player()) return;
            DrawGUI(args.Player());
        }
		
		[ConsoleCommand("xpsell")]
        private void CmdXpSell(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();

                if (XPS[player.userID].XP >= 100)
                    {
                        SendReply(player,
							$"Перевод <color=#a5e664>XP в рубли</color> успешно произведён!\nПроверьте свой баланс в магазине.\n<color=#a5e664>В случае не поступления средств сообщите администрации!</color>");
                        XPS[player.userID].XP -= 100;
                        MoneyPlus(player.userID, Settings.BalanceSettings.Money);
                        return;
                    } 
					
				else
                    {
                        SendReply(player,
                            $"<color=#a5e664>Обмен не произведён!</color>\nДля обмена нужно иметь <color=#a5e664>100 XP</color>!\n У вас <color=#a5e664>{XPS[player.userID].XP} XP</color>!");
                        return;
                    }
        }
		
		[ConsoleCommand("xp.give")]
        private void CmdXpgv(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();

                BasePlayer target = BasePlayer.Find(args.Args[0]);
                if (target != null)
                {
                    if (XPS.ContainsKey(target.userID))
                    {
                        XPS[target.userID].XP += int.Parse(args.Args[1]);
                        Puts("Баланс успешно изменен");
                    }
                }
            
        }

        #endregion
		
		#region GUI [Интерфейс]
		
		private void DrawGUI(BasePlayer player)
		{	
			CuiHelper.DestroyUi(player, Layer);
			var container = new CuiElementContainer();			
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Image = { Color = HexToRustFormat("#202020C1"), Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", Layer);
			container.Add(new CuiButton //Фононовое закрытие
            {
                RectTransform = { AnchorMin = "-1 -1", AnchorMax = "1.3 1.3", OffsetMax = "0 0" },
                Button = { Color = "0.1 0.1 0.1 0.3", Close = Layer },
                Text = { Text = "" }
            }, Layer);
			//Надпись
			container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0.83", AnchorMax = "1 1", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = $"<size=29><b>ОБМЕН БОНУСОВ НА РУБЛИ В МАГАЗИН</b></size>\n<color=#e0e0e0>Здесь вы можете обменять накопленные бонусы XP на реальную валюты и вывести их в магазин.</color>", Color = "1 1 1 0.6313726", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 15 }
            }, Layer);
            //Инфо-блок возле аватарки №1
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.37617 0.5315456", AnchorMax = $"0.7635456 0.7725456" }, //Max 0-Шырина 0-Высота
                Button = { Color = "1 1 1 0.03", Material = "assets/content/ui/uibackgroundblur.mat" }, 
                Text = { Text = $"<size=17>    ЗДРАВСТВУЙ, <color=#a5e664><b>{player.displayName}</b></color></size>\n\n"+ Settings.GUISettings.MainBlockText, Color = HexToRustFormat("#e0e0e0"), Font = "robotocondensed-regular.ttf", FontSize = 16, Align = TextAnchor.MiddleLeft, FadeIn = 1f }
            }, Layer);
            //Инфо-блок ниже №2
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.2355456 0.3605456", AnchorMax = $"0.7635456 0.4335456" },
                Button = { Color = "0 0 0 0" }, 
                Text = { Text = Settings.GUISettings.SecondBlockText, Color = HexToRustFormat("#e0e0e0"), Font = "robotocondensed-regular.ttf", FontSize = 16, Align = TextAnchor.MiddleCenter, FadeIn = 1f }
            }, Layer);
            //Ваш баланс
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.2355456 0.210", AnchorMax = $"0.7635456 0.250" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = $"ВАШ БАЛАНС <b>XP</b>: <color=#a5e664>{XPS[player.userID].XP}</color>", Color = HexToRustFormat("#e0e0e0"), Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, FadeIn = 1f }
            }, Layer);
            //Аватарка до 415 строчки
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.235 0.5315456", AnchorMax = $"0.3725456 0.772" }, //Max 0-Шырина 0-Высота
                Button = { Color = "1 1 1 0.03", Material = "assets/content/ui/uibackgroundblur.mat" },
                Text = { Text = "", FadeIn = 1f }
            }, Layer, "Avatar");

            container.Add(new CuiElement
            {
                Parent = "Avatar",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", player.UserIDString) },
                    new CuiRectTransformComponent { AnchorMin = "0.02 0.0215", AnchorMax = "0.9795 0.980", OffsetMax = "0 0" }
                }
            });
			container.Add(new CuiButton //КНОПКА ОБМЕНА
            {
                RectTransform = { AnchorMin = "0.3875456 0.130", AnchorMax = "0.6115456 0.197" }, //Max 0-Шырина 0-Высота
                Button = { Color = "0.4 0.67 0.41 0.9", Command = "xpsell", Close = Layer, Material = "assets/content/ui/uibackgroundblur.mat" },
                Text = { Text = "ОБМЕНЯТЬ НА РУБЛИ", Align = TextAnchor.MiddleCenter, FontSize = 25, Font = "robotocondensed-regular.ttf", Color = HexToRustFormat("#e0e0e0") }
            }, Layer); 
			
			CuiHelper.AddUi(player, container);
		}
		
		#endregion

        #region Helpers [Хелперы]

		private static string HexToRustFormat(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }
		
        #endregion
    }
}

// --- End of file: XPSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DiscordStatus.cs ---
// --- Original Local Path: DiscordStatus.cs ---

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Attributes;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Entities.Activities;
using Oxide.Ext.Discord.Entities.Applications;
using Oxide.Ext.Discord.Entities.Channels;
using Oxide.Ext.Discord.Entities.Gatway;
using Oxide.Ext.Discord.Entities.Gatway.Commands;
using Oxide.Ext.Discord.Entities.Gatway.Events;
using Oxide.Ext.Discord.Entities.Guilds;
using Oxide.Ext.Discord.Entities.Messages;
using Oxide.Ext.Discord.Entities.Messages.Embeds;
using Oxide.Ext.Discord.Entities.Permissions;
using Oxide.Ext.Discord.Libraries.Linking;
using Oxide.Ext.Discord.Logging;
using Random = Oxide.Core.Random;

namespace Oxide.Plugins
{
    [Info("Discord Status", "Gonzi", "4.0.1")]
    [Description("Shows server information as a discord bot status")]

    public class DiscordStatus : CovalencePlugin
    {
        private string seperatorText = string.Join("-", new string[25 + 1]);
        private bool enableChatSeparators;

        #region Fields

        [DiscordClient]
        private DiscordClient Client;

        private readonly DiscordSettings _settings = new DiscordSettings
        {
            Intents = GatewayIntents.Guilds | GatewayIntents.GuildMessages | GatewayIntents.GuildMembers
        };
        
        private DiscordGuild _guild;
        
        private readonly DiscordLink _link = GetLibrary<DiscordLink>();

        Configuration config;
        private int statusIndex = -1;
        private string[] StatusTypes = new string[]
        {
            "Game",
            "Stream",
            "Listen",
            "Watch"
        };

        #endregion

        #region Config
        class Configuration
        {
            [JsonProperty(PropertyName = "Discord Bot Token")]
            public string BotToken = string.Empty;
            
            [JsonProperty(PropertyName = "Discord Server ID (Optional if bot only in 1 guild)")]
            public Snowflake GuildId { get; set; }

            [JsonProperty(PropertyName = "Prefix")]
            public string Prefix = "!";

            [JsonProperty(PropertyName = "Discord Group Id needed for Commands (null to disable)")]
            public Snowflake? GroupId;

            [JsonProperty(PropertyName = "Update Interval (Seconds)")]
            public int UpdateInterval = 5;

            [JsonProperty(PropertyName = "Randomize Status")]
            public bool Randomize = false;

            [JsonProperty(PropertyName = "Status Type (Game/Stream/Listen/Watch)")]
            public string StatusType = "Game";

            [JsonProperty(PropertyName = "Status", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<string> Status = new List<string>
            {
                "{players.online} / {server.maxplayers} Online!",
                "{server.entities} Entities",
                "{players.sleepers} Sleepers!",
                "{players.authenticated} Linked Account(s)"
            };
            
            [JsonConverter(typeof(StringEnumConverter))]
            [DefaultValue(DiscordLogLevel.Info)]
            [JsonProperty(PropertyName = "Discord Extension Log Level (Verbose, Debug, Info, Warning, Error, Exception, Off)")]
            public DiscordLogLevel ExtensionDebugging { get; set; } = DiscordLogLevel.Info;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) throw new Exception();
            }
            catch
            {
                Config.WriteObject(config, false, $"{Interface.Oxide.ConfigDirectory}/{Name}.jsonError");
                PrintError("The configuration file contains an error and has been replaced with a default config.\n" +
                           "The error configuration file was saved in the .jsonError extension");
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig() => config = new Configuration();

        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Lang
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Title"] = "Players List",
                ["Players"] = "Online Players [{0}/{1}] 🎆\n {2}",
                ["IPAddress"] = "steam://connect/{0}:{1}"

            }, this, "en");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Title"] = "플레이어 목록",
                ["Players"] = "접속중인 플레이어 [{0}/{1}] 🎆\n {2}",
                ["IPAddress"] = "steam://connect/{0}:{1}"
            }, this, "kr");
        }

        private string Lang(string key, params object[] args)
        {
            return string.Format(lang.GetMessage(key, this), args);
        }

        #endregion

        #region Discord
        public DiscordEmbed ServerStats(string content)
        {
            DiscordEmbed embed = new DiscordEmbed
            {
                Title = Lang("Title", ConVar.Server.hostname),
                Description = content,
                Thumbnail = new EmbedThumbnail
                {
                    Url = $"{ConVar.Server.headerimage}"
                },
                Footer = new EmbedFooter
                {
                    Text = $"Gonzi V{Version}",
                    IconUrl = "https://cdn.discordapp.com/avatars/321373026488811520/08f996472c573473e7e30574e0e28da0.png"
                },

                Color = new DiscordColor(15158332)
            };
            return embed;
        }
        
        [HookMethod(DiscordHooks.OnDiscordGuildMessageCreated)]
        void OnDiscordGuildMessageCreated(DiscordMessage message)
        {
            if (message.Author.Bot == true) return;


            if (message.Content[0] == config.Prefix[0])
            {

                string cmd;
                try
                {
                    cmd = message.Content.Split(' ')[0].ToLower();
                    if (string.IsNullOrEmpty(cmd.Trim()))
                        cmd = message.Content.Trim().ToLower();
                }
                catch
                {
                    cmd = message.Content.Trim().ToLower();
                }

                cmd = cmd.Remove(0, 1);

                cmd = cmd.Trim();
                cmd = cmd.ToLower();

                DiscordCMD(cmd, message);
            }
        }

        private void DiscordCMD(string command, DiscordMessage message)
        {
            if (config.GroupId.HasValue && !message.Member.Roles.Contains(config.GroupId.Value)) return;

            switch (command)
            {
                case "players":
                    {
                        string maxplayers = Convert.ToString(ConVar.Server.maxplayers);
                        string onlineplayers = Convert.ToString(BasePlayer.activePlayerList.Count);
                        string list = string.Empty;
                        var playerList = BasePlayer.activePlayerList;
                        foreach (var player in playerList)
                        {
                            list += $"[{player.displayName}](https://steamcommunity.com/profiles/{player.UserIDString}/) \n";
                        }

                        DiscordChannel.GetChannel(Client, message.ChannelId, channel =>
                        {
                            channel.CreateMessage(Client, ServerStats(Lang("Players", BasePlayer.activePlayerList.Count, ConVar.Server.maxplayers, list)));
                        });
                        break;
                    }
                case "ip":
                    {
                        DiscordChannel.GetChannel(Client, message.ChannelId, channel =>
                        {
                            webrequest.Enqueue("http://icanhazip.com", "", (code, response) =>
                            {
                                string ip = response.Trim();
                                channel.CreateMessage(Client, Lang("IPAddress", ip, ConVar.Server.port));
                            }, this);
                        });
                    }
                    break;
            }
        }

        #endregion

        #region Oxide Hooks
        private void OnServerInitialized()
        {
            lang.SetServerLanguage("en");

            if (config.BotToken == string.Empty)
                return;

            _settings.ApiToken = config.BotToken;
            _settings.LogLevel = config.ExtensionDebugging;
            Client.Connect(_settings);

            timer.Every(config.UpdateInterval, () => UpdateStatus());
        }
        
        [HookMethod(DiscordHooks.OnDiscordGatewayReady)]
        private void OnDiscordGatewayReady(GatewayReadyEvent ready)
        {
            if (ready.Guilds.Count == 0)
            {
                PrintError("Your bot was not found in any discord servers. Please invite it to a server and reload the plugin.");
                return;
            }

            DiscordGuild guild = null;
            if (ready.Guilds.Count == 1 && !config.GuildId.IsValid())
            {
                guild = ready.Guilds.Values.FirstOrDefault();
            }

            if (guild == null)
            {
                guild = ready.Guilds[config.GuildId];
            }

            if (guild == null)
            {
                PrintError("Failed to find a matching guild for the Discord Server Id. " +
                           "Please make sure your guild Id is correct and the bot is in the discord server.");
                return;
            }
                
            if (Client.Bot.Application.Flags.HasValue && !Client.Bot.Application.Flags.Value.HasFlag(ApplicationFlags.GatewayGuildMembersLimited))
            {
                PrintError($"You need to enable \"Server Members Intent\" for {Client.Bot.BotUser.Username} @ https://discord.com/developers/applications\n" +
                           $"{Name} will not function correctly until that is fixed. Once updated please reload {Name}.");
                return;
            }
            
            _guild = guild;
        }
        #endregion

        #region Discord Hooks

        #endregion

        #region Status Update
        private void UpdateStatus()
        {
            try
            {
                if (config.Status.Count == 0)
                    return;

                var index = GetStatusIndex();

                Client.Bot.UpdateStatus(new UpdatePresenceCommand
                {
                    Activities = new List<DiscordActivity>
                    {
                        new DiscordActivity
                        {
                            Name = Format(config.Status[index]),
                            Type = ActivityType.Game
                        }
                    }
                });

                statusIndex = index;
            }
            catch (Exception err)
            {
                LogToFile("DiscordStatus", $"{err}", this);
            }
        }
        #endregion

        #region Helper Methods
        private int GetStatusIndex()
        {
            if (!config.Randomize)
                return (statusIndex + 1) % config.Status.Count;

            var index = 0;
            do index = Random.Range(0, config.Status.Count - 1);
            while (index == statusIndex);

            return index;
        }

        private ActivityType GetStatusType()
        {
            if (!StatusTypes.Contains(config.StatusType))
                PrintError($"Unknown Status Type '{config.StatusType}'");

            switch (config.StatusType)
            {
                case "Game":
                    return ActivityType.Game;
                case "Stream":
                    return ActivityType.Streaming;
                case "Listen":
                    return ActivityType.Listening;
                case "Watch":
                    return ActivityType.Watching;
                default:
                    return default(ActivityType);
            }
        }

        private string Format(string message)
        {
            message = message
                .Replace("{guild.name}", _guild.Name ?? "{unknown}")
                .Replace("{members.total}", _guild.MemberCount?.ToString() ?? "{unknown}")
                .Replace("{channels.total}", _guild.Channels?.Count.ToString() ?? "{unknown}")
                .Replace("{server.hostname}", server.Name)
                .Replace("{server.maxplayers}", server.MaxPlayers.ToString())
                .Replace("{players.online}", (players.Connected.Count() + 30).ToString())
                .Replace("{players.authenticated}", GetAuthCount().ToString());

#if RUST
        message = message
            .Replace("{server.ip}", ConVar.Server.ip)
            .Replace("{server.port}", ConVar.Server.port.ToString())
            .Replace("{server.entities}", BaseNetworkable.serverEntities.Count.ToString())
            .Replace("{server.worldsize}", ConVar.Server.worldsize.ToString())
            .Replace("{server.seed}", ConVar.Server.seed.ToString())
            .Replace("{server.fps}", Performance.current.frameRate.ToString())
            .Replace("{server.avgfps}", Convert.ToInt32(Performance.current.frameRateAverage).ToString())
            .Replace("{players.queued}", ConVar.Admin.ServerInfo().Queued.ToString())
            .Replace("{players.joining}", ConVar.Admin.ServerInfo().Joining.ToString())
            .Replace("{players.sleepers}", BasePlayer.sleepingPlayerList.Count.ToString())
            .Replace("{players.total}", (players.Connected.Count() + BasePlayer.sleepingPlayerList.Count).ToString());
#endif

            return message;
        }

        private int GetAuthCount() => _link.GetLinkedCount();

        #endregion
    }
}

// --- End of file: DiscordStatus.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/StickyChat.cs ---
// --- Original Local Path: StickyChat.cs ---

using System;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Oxide.Plugins
{
    [Info("StickyChat", "Visagalis", "0.0.3")]
    public class StickyChat : RustPlugin
    { 
        public enum ChatType
        {
            GENERAL = 0,
            CLAN = 1,
            PRIVATE = 2,
            REPLY = 3
        }

        public class StickyInfo
        {
            public string details = "";
            public ChatType type = ChatType.GENERAL;
        }

        Dictionary<BasePlayer, StickyInfo> stickies = new Dictionary<BasePlayer, StickyInfo>();

        [HookMethod("OnPlayerDisconnected")]
        void OnPlayerDisconnected(BasePlayer player)
        {
            stickies.Remove(player);
        }

        [PluginReference("Clans")]
        Plugin clanLib;
        [PluginReference("PM")]
        Plugin pmLib;

        [ChatCommand("ct")]
        private void clanChat(BasePlayer player, string command, string[] args)
        {
            if (!stickies.Any(x => x.Key.userID == player.userID))
            {
                stickies.Add(player, new StickyInfo() { type = ChatType.CLAN });
                SendReply(player, "You are currently chatting in {0} chat. Type /{1} to switch to {2}.", "CLAN", "gt", "GENERAL");
            }
        }

        [ChatCommand("gt")]
        private void generalChat(BasePlayer player, string command, string[] args)
        {
            if (stickies.Any(x => x.Key.userID == player.userID))
            {
                stickies.Remove(player);
                SendReply(player, "You are currently chatting in {0} chat.", "GENERAL");
            }
        }

        [ChatCommand("rt")]
        private void replyChat(BasePlayer player, string command, string[] args)
        {
            if (!stickies.Any(x => x.Key.userID == player.userID))
            {
                stickies.Add(player, new StickyInfo() { type = ChatType.REPLY });
                SendReply(player, "You are currently chatting in {0} chat. Type /{1} to switch to {2}.", "REPLY", "gt", "GENERAL");
            }
        }

        [ChatCommand("pt")]
        private void privateChat(BasePlayer player, string command, string[] args)
        {
            if(args.Length != 1)
            {
                SendReply(player, "You need to specify player name you want to sticky message to. /pt [name]");
            }
            if (!stickies.Any(x => x.Key.userID == player.userID))
            {
                stickies.Add(player, new StickyInfo() { type = ChatType.PRIVATE, details = args[0] });
                SendReply(player, "You are currently chatting in {0} chat with {3}. Type /{1} to switch to {2}.", "PRIVATE", "gt", "GENERAL", args[0]);
            }
        }

        object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            BasePlayer player = (BasePlayer)arg.connection.player;
            string message = arg.GetString(0, "text");
            if (stickies.Any(x => x.Key.userID == player.userID && x.Value.type == ChatType.CLAN))
            {
                clanLib.Call("cmdChatClanchat", player, "", new string[] { message });
                return false;
            }
            else if (stickies.Any(x => x.Key.userID == player.userID && x.Value.type == ChatType.REPLY))
            {
                pmLib.Call("cmdPmReply", player, "", new string[] { message });
                return false;
            }
            else if (stickies.Any(x => x.Key.userID == player.userID && x.Value.type == ChatType.PRIVATE))
            {
                StickyInfo result = (from el in stickies
                             where el.Key.userID == player.userID && el.Value.type == ChatType.PRIVATE
                             select el.Value).First();
                pmLib.Call("cmdPm", player, "", new string[] { result.details, message });
                return false;
            }

            return null;
        }

        private void SendHelpText(BasePlayer player)
        {
            PrintToChat(player, "You can use following sticky chat commands:"
                + "\n<color=green>/gt</color> - Stick to general chat."
                + "\n<color=green>/ct</color> - Stick to clan chat."
                + "\n<color=green>/pt [name]</color> - Stick to [name]'s chat."
                + "\n<color=green>/rt</color> - Stick to reply chat.");
        }

        private int PlayerStickyState(BasePlayer player)
        {
            if (stickies.Any(x => x.Key.userID == player.userID))
            {
                StickyInfo result = (from el in stickies
                                     where el.Key.userID == player.userID
                                     select el.Value).First();
                return Convert.ToInt32(result.type);
            }
            return 0;
        }
    }
}


// --- End of file: StickyChat.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BulletProjectile.cs ---
// --- Original Local Path: BulletProjectile.cs ---

﻿using System;
using System.Collections.Generic;
using UnityEngine;

using Rust;
using ProtoBuf;
using Oxide.Core.Plugins;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("BulletProjectile", "Karuza", "01.0.00")]
    public class BulletProjectile : RustPlugin
    {
        [HookMethod("ShootProjectile")]
        public void ShootProjectile(BasePlayer owner, Vector3 muzzlePos, Vector3 velocity, List<DamageTypeEntry> damageTypeOverrides, string ammoPrefabPathOverride = "")
        {
            ProjectileSystem projectile = new GameObject().AddComponent<ProjectileSystem>();
            projectile.owner = owner;

            if (!string.IsNullOrEmpty(ammoPrefabPathOverride))
                projectile.projectilePrefabPath = ammoPrefabPathOverride;

            projectile.InitializeBullet(muzzlePos);

            if (damageTypeOverrides.Any())
                projectile.damageTypes = damageTypeOverrides;

            projectile.InitializeVelocity(velocity);
            projectile.Launch();
        }

        #region ProjectileSystem
        public class ProjectileSystem : MonoBehaviour
        {
            public float gravityModifier = 1f;
            public float penetrationPower = 1f;
            public MinMax damageDistances = new MinMax(10f, 100f);
            public MinMax damageMultipliers = new MinMax(1f, 0.8f);
            public List<DamageTypeEntry> damageTypes = new List<DamageTypeEntry>();
            [NonSerialized]
            public float integrity = 1f;
            [NonSerialized]
            public float maxDistance = float.PositiveInfinity;
            [NonSerialized]
            public Projectile.Modifier modifier = Projectile.Modifier.Default;
            [Header("Attributes")]
            public Vector3 initialVelocity;
            [Tooltip("This projectile will raycast for this many units, and then become a projectile. This is typically done for bullets.")]
            public float initialDistance;
            [Header("Impact Rules")]
            [Range(0.0f, 1f)]
            public float ricochetChance = 0.1f;
            [Header("Rendering")]
            public ScaleRenderer rendererToScale = null;
            public ScaleRenderer firstPersonRenderer = null;
            [Header("Tumble")]
            public float tumbleSpeed;
            [NonSerialized]
            public BasePlayer owner;
            public string projectilePrefabPath { get; set; } = "assets/prefabs/npc/autoturret/sentrybullet.prefab";
            [NonSerialized]
            public uint seed = 0;
            [NonSerialized]
            public bool clientsideEffect;
            [NonSerialized]
            public bool clientsideAttack;
            [NonSerialized]
            public bool invisible;
            private Vector3 currentVelocity;
            private Vector3 currentPosition;
            private float traveledDistance;
            private float traveledTime;
            private Vector3 sentPosition;
            private Vector3 previousPosition;
            private float previousTraveledTime;
            private bool isRetiring;
            private HitTest hitTest;
            protected static Effect reusableInstance = new Effect();

            public void InitializeBullet(Vector3 location)
            {
                this.initialDistance = 0;
                this.transform.position = this.currentPosition = location;
                invisible = false;
                clientsideEffect = true;
                clientsideAttack = true;
                integrity = 2;
                maxDistance = float.PositiveInfinity;
                damageTypes.Add(new DamageTypeEntry() { type = DamageType.Bullet, amount = 25 });
            }

            public void CalculateDamage(HitInfo info, Projectile.Modifier mod, float scale)
            {
                if (info == null)
                    return;

                float num1 = this.damageMultipliers.Lerp(mod.distanceOffset + mod.distanceScale * this.damageDistances.x, mod.distanceOffset + mod.distanceScale * this.damageDistances.y, info.ProjectileDistance);
                float num2 = scale * (mod.damageOffset + mod.damageScale * num1);

                foreach (DamageTypeEntry damageType in this.damageTypes)
                    info.damageTypes.Add(damageType.type, damageType.amount * num2);
            }

            public bool isAuthoritative
            {
                get
                {
                    if (this.owner != null && this.owner.IsConnected)
                        return true;
                    return false;
                }
            }

            private bool isAlive
            {
                get
                {
                    if (this.integrity > 1.0 / 1000.0 && this.traveledDistance < this.maxDistance)
                        return this.traveledTime < 8.0;
                    return false;
                }
            }

            private void Retire()
            {
                if (this.isRetiring)
                    return;

                this.isRetiring = true;
                this.Cleanup();
            }

            private void Cleanup()
            {
                this.gameObject.BroadcastOnParentDestroying();
                new GameManager(false, true).Retire(this.gameObject);
            }

            public void AdjustVelocity(Vector3 delta)
            {
                this.currentVelocity += delta;
            }

            public void InitializeVelocity(Vector3 overrideVel)
            {
                this.initialVelocity = overrideVel;
                this.currentVelocity = this.initialVelocity;
            }

            protected void OnDisable()
            {
                this.currentVelocity = Vector3.zero;
                this.currentPosition = Vector3.zero;
                this.traveledDistance = 0.0f;
                this.traveledTime = 0.0f;
                this.sentPosition = Vector3.zero;
                this.previousPosition = Vector3.zero;
                this.previousTraveledTime = 0.0f;
                this.isRetiring = false;
                this.owner = null;
                this.seed = 0;
                this.clientsideEffect = false;
                this.clientsideAttack = false;
                this.integrity = 1f;
                this.maxDistance = float.PositiveInfinity;
                this.modifier = Projectile.Modifier.Default;
                this.invisible = false;
            }

            protected void FixedUpdate()
            {
                if (!this.isAlive)
                    return;
                this.UpdateVelocity(Time.fixedDeltaTime);
            }

            protected void Update()
            {
                if (!this.isAlive)
                    this.Retire();
            }

            private void UpdateVelocity(float deltaTime)
            {
                if (this.traveledTime != 0.0f)
                {
                    this.previousPosition = this.currentPosition;
                    this.previousTraveledTime = this.traveledTime;
                }
                this.currentPosition = this.transform.position;
                if (this.traveledTime == 0.0f)
                    this.sentPosition = this.previousPosition = this.currentPosition;

                deltaTime *= Time.timeScale;
                this.DoMovement(deltaTime);
                this.DoVelocityUpdate(deltaTime);

                this.transform.position = this.currentPosition;
                if (this.tumbleSpeed > 0.0f)
                    this.transform.Rotate(Vector3.right, this.tumbleSpeed * deltaTime);
                else
                    this.transform.rotation = Quaternion.LookRotation(this.currentVelocity);
            }

            private void DoVelocityUpdate(float deltaTime)
            {
                this.currentVelocity += Physics.gravity * this.gravityModifier * deltaTime;
                if (!this.isAuthoritative || GamePhysics.LineOfSight(this.sentPosition, this.currentPosition, 2162688, 0.0f))
                    return;
                using (PlayerProjectileUpdate update = Facepunch.Pool.Get<PlayerProjectileUpdate>())
                {
                    update.curPosition = this.previousPosition;
                    update.travelTime = this.previousTraveledTime;

                    this.owner.ClientRPC<PlayerProjectileUpdate>(this.owner.Connection, "OnProjectileUpdate", update);
                    this.sentPosition = this.previousPosition;
                }
            }

            private void DoMovement(float deltaTime)
            {
                Vector3 vector3_1 = this.currentVelocity * deltaTime;
                float magnitude1 = vector3_1.magnitude;
                float num1 = 1f / magnitude1;
                Vector3 direction = vector3_1 * num1;
                bool flag = false;
                Vector3 vPosB = this.currentPosition + direction * magnitude1;

                float num2 = this.traveledTime + deltaTime;
                if (this.hitTest == null)
                    this.hitTest = new HitTest();
                else
                    this.hitTest.Clear();
                this.hitTest.AttackRay = new Ray(this.currentPosition, direction);
                this.hitTest.MaxDistance = magnitude1;
                this.hitTest.ignoreEntity = (BaseEntity)this.owner;
                this.hitTest.Radius = 0.0f;
                this.hitTest.Forgiveness = 1;
                this.hitTest.type = this.isAuthoritative ? HitTest.Type.Projectile : HitTest.Type.ProjectileEffect;

                List<TraceInfo> list = Facepunch.Pool.GetList<TraceInfo>();
                GameTrace.TraceAll(this.hitTest, list);
                
                for (int index = 0; index < list.Count && this.isAlive && !flag; index++)
                {
                    if (list[index].valid)
                    {
                        list[index].UpdateHitTest(this.hitTest);
                        Vector3 vector3_2 = this.hitTest.HitPointWorld();
                        Vector3 normal = this.hitTest.HitNormalWorld();

                        float magnitude2 = (vector3_2 - this.currentPosition).magnitude;
                        float num3 = magnitude2 * num1 * deltaTime;
                        this.traveledDistance += magnitude2;
                        this.traveledTime += num3;

                        this.currentPosition = vector3_2;
                        if (this.DoRicochet(this.hitTest, vector3_2, normal) || this.DoHit(this.hitTest, vector3_2, normal))
                            flag = true;
                    }
                }

                Facepunch.Pool.FreeList<TraceInfo>(ref list);
                if (!this.isAlive)
                    return;
                if (flag && this.traveledTime < num2)
                {
                    this.DoMovement(num2 - this.traveledTime);
                }
                else
                {
                    float magnitude2 = (vPosB - this.currentPosition).magnitude;
                    this.traveledDistance += magnitude2;
                    this.traveledTime += magnitude2 * num1 * deltaTime;
                    this.currentPosition = vPosB;
                }
            }

            private bool DoWaterHit(ref HitTest test, Vector3 targetPosition)
            {
                float height = TerrainMeta.WaterMap.GetHeight(targetPosition);
                if ((double)height < (double)targetPosition.y)
                    return false;
                Vector3 point = targetPosition;
                point.y = height;
                Vector3 normal = TerrainMeta.WaterMap.GetNormal(targetPosition);
                test.DidHit = true;
                test.HitEntity = null;
                test.HitDistance = Vector3.Distance(test.AttackRay.origin, targetPosition);
                test.HitMaterial = "Water";
                test.HitPart = 0U;
                test.HitTransform = null;
                test.HitPoint = point;
                test.HitNormal = normal;
                test.collider = null;
                test.gameObject = null;
                this.DoHit(test, point, normal);
                this.integrity = 0.0f;
                return true;
            }

            private bool DoRicochet(HitTest test, Vector3 point, Vector3 normal)
            {
                Vector3 currentPosition = this.currentPosition;
                Vector3 currentVelocity = this.currentVelocity;
                bool flag = false;
                if ((!(test.HitEntity != null) || !(test.HitEntity is BaseCombatEntity)) && (this.ricochetChance > 0.0f && UnityEngine.Random.Range(1, int.MaxValue) <= this.ricochetChance) && !Projectile.IsWaterMaterial(test.HitMaterial))
                    flag = this.Reflect(ref this.seed, point, normal);
                if (flag)
                {
                    if (this.isAuthoritative)
                    {
                        using (PlayerProjectileRicochet ricochet = Facepunch.Pool.Get<PlayerProjectileRicochet>())
                        {
                            ricochet.hitPosition = currentPosition;
                            ricochet.inVelocity = currentVelocity;
                            ricochet.outVelocity = this.currentVelocity;
                            ricochet.hitNormal = normal;
                            ricochet.travelTime = this.traveledTime;

                            this.owner.ClientRPC<PlayerProjectileRicochet>(this.owner.Connection, "OnProjectileRicochet", ricochet);
                            this.sentPosition = this.currentPosition;
                        }
                    }
                }
                return flag;
            }

            public static Attack BuildAttackMessage(HitTest test)
            {
                uint hitBone = 0;
                uint hitMaterialId = 0;
                if (test.HitTransform && test.HitEntity && test.HitEntity.transform != test.HitTransform)
                {
                    hitBone = StringPool.Get(test.HitTransform.name);
                }
                if (!string.IsNullOrEmpty(test.HitMaterial))
                {
                    hitMaterialId = StringPool.Get(test.HitMaterial);
                }
                Attack attack = Facepunch.Pool.Get<Attack>();
                attack.pointStart = test.AttackRay.origin;
                attack.pointEnd = test.AttackRay.origin + test.AttackRay.direction * test.MaxDistance;
                attack.hitMaterialID = hitMaterialId;
                if (test.DidHit)
                {
                    if (test.HitEntity.IsValid())
                    {
                        Transform transform = test.HitTransform;
                        if (!transform)
                            transform = test.HitEntity.transform;
                        attack.hitID = test.HitEntity.net.ID;
                        attack.hitBone = hitBone;
                        attack.hitPartID = test.HitPart;
                        attack.hitPositionWorld = transform.localToWorldMatrix.MultiplyPoint(test.HitPoint);
                        attack.hitPositionLocal = test.HitPoint;
                        attack.hitNormalWorld = transform.localToWorldMatrix.MultiplyVector(test.HitNormal);
                        attack.hitNormalLocal = test.HitNormal;
                    }
                    else
                    {
                        attack.hitID = 0U;
                        attack.hitBone = 0U;
                        attack.hitPositionWorld = test.HitPoint;
                        attack.hitPositionLocal = test.HitPoint;
                        attack.hitNormalWorld = test.HitNormal;
                        attack.hitNormalLocal = test.HitNormal;
                    }
                }
                return attack;
            }


            private bool DoHit(HitTest test, Vector3 point, Vector3 normal)
            {
                bool flag = false;
                using (PlayerProjectileAttack attack = Facepunch.Pool.Get<PlayerProjectileAttack>())
                {
                    attack.playerAttack = Facepunch.Pool.Get<PlayerAttack>();
                    attack.playerAttack.attack = BuildAttackMessage(test);
                    HitInfo info = new HitInfo();
                    LoadFromAttack(info, attack.playerAttack.attack, false);
                    info.Initiator = this.owner;
                    info.ProjectileDistance = this.traveledDistance;
                    info.ProjectileVelocity = this.currentVelocity;
                    info.IsPredicting = true;
                    info.DoDecals = true;
                    this.CalculateDamage(info, this.modifier, this.integrity);
                    if (object.ReferenceEquals(info.HitEntity, null) && Projectile.IsWaterMaterial(test.HitMaterial))
                    {
                        this.currentVelocity *= 0.1f;
                        this.currentPosition += this.currentVelocity.normalized * (1f / 1000f);
                        this.integrity = Mathf.Clamp01(this.integrity - 0.1f);
                        flag = true;
                    }
                    else if (this.penetrationPower <= 0.0f || object.ReferenceEquals(info.HitEntity, null))
                    {
                        this.integrity = 0.0f;
                    }
                    else
                    {
                        float resistance = info.HitEntity.PenetrationResistance(info) / this.penetrationPower;
                        flag = this.Refract(ref this.seed, point, normal, resistance);
                        this.integrity = Mathf.Clamp01(this.integrity - resistance);
                        if (info.HitEntity is BasePlayer)
                            info.HitMaterial = StringPool.Get("Flesh");
                    }
                    if (this.isAuthoritative)
                    {
                        attack.hitVelocity = this.currentVelocity;
                        attack.hitDistance = this.traveledDistance;
                        attack.travelTime = this.traveledTime;

                        this.owner.ClientRPC<PlayerProjectileAttack>(this.owner.Connection, "OnProjectileAttack", attack);
                        this.sentPosition = this.currentPosition;
                    }
                    if (this.clientsideAttack && info.HitEntity != null)
                        info.HitEntity.OnAttacked(info);
                    if (this.clientsideEffect)
                        Effect.server.ImpactEffect(info);
                }

                return flag;
            }

            public static void LoadFromAttack(HitInfo info, Attack attack, bool serverSide)
            {
                info.HitEntity = null;
                info.PointStart = attack.pointStart;
                info.PointEnd = attack.pointEnd;
                if (attack.hitID > 0U)
                {
                    info.DidHit = true;
                    if (!serverSide)
                        info.HitEntity = BaseNetworkable.serverEntities.Find(attack.hitID) as BaseEntity;
                    if (info.HitEntity != null)
                    {
                        info.HitBone = attack.hitBone;
                        info.HitPart = attack.hitPartID;
                    }
                }
                info.DidHit = true;
                info.HitPositionLocal = attack.hitPositionLocal;
                info.HitPositionWorld = attack.hitPositionWorld;
                info.HitNormalLocal = attack.hitNormalLocal.normalized;
                info.HitNormalWorld = attack.hitNormalWorld.normalized;
                info.HitMaterial = attack.hitMaterialID;
            }

            private bool Reflect(ref uint seed, Vector3 point, Vector3 normal)
            {
                bool flag = false;
                if (this.currentVelocity.magnitude > 50.0f)
                {
                    float velocityMod = Mathf.Clamp01((float)(1.0 - (90f - Vector3.Angle(-this.currentVelocity, normal)) / 30.0)) * 0.8f;
                    if (velocityMod > 0.0f)
                    {
                        this.currentVelocity = Vector3.Reflect(this.currentVelocity, (Quaternion.LookRotation(normal) * this.RandomRotation(ref seed, 10f) * Vector3.forward).normalized) * velocityMod;
                        this.currentPosition += this.currentVelocity.normalized * (1f / 1000f);
                        flag = true;
                    }
                }
                return flag;
            }

            private bool Refract(ref uint seed, Vector3 point, Vector3 normal, float resistance)
            {
                bool flag = false;
                if ((double)resistance < 1.0)
                {
                    float num = Mathf.Lerp(1f, 0.5f, resistance);
                    if (num > 0.0f)
                    {
                        this.currentVelocity = this.Refract(this.currentVelocity, (Quaternion.LookRotation(normal) * this.RandomRotation(ref seed, 10f) * Vector3.forward).normalized, resistance) * num;
                        this.currentPosition += this.currentVelocity.normalized * (1f / 1000f);
                        flag = true;
                    }
                }
                return flag;
            }

            private Vector3 Refract(Vector3 v, Vector3 n, float f)
            {
                float magnitude = v.magnitude;
                return Vector3.Slerp(v / magnitude, -n, f) * magnitude;
            }

            private Quaternion RandomRotation(ref uint seed, float range)
            {
                Xorshift(ref seed);
                float x = seed * (-range - range);
                Xorshift(ref seed);
                float y = seed * (-range - range);
                Xorshift(ref seed);
                float z = seed * (-range - range);
                return Quaternion.Euler(x, y, z);
            }

            public static uint Xorshift(ref uint x)
            {
                x ^= x << 13;
                x ^= x >> 17;
                x ^= x << 5;
                return x;
            }

            internal void Launch()
            {
                Effect reusableInstance = ProjectileSystem.reusableInstance;
                reusableInstance.Clear();
                reusableInstance.Init(Effect.Type.Projectile, this.currentPosition, this.currentVelocity, null);
                reusableInstance.scale = 5f;
                reusableInstance.pooledString = projectilePrefabPath;
                EffectNetwork.Send(reusableInstance);

                while (this.isAlive && (this.traveledDistance < this.initialDistance || this.traveledTime < 0.100000001490116f))
                    this.UpdateVelocity(Time.fixedDeltaTime);
            }
        }

        public static class GameTrace
        {
            public static void TraceAll(HitTest test, List<TraceInfo> traces, int layerMask = -5)
            {
                List<RaycastHit> list = Facepunch.Pool.GetList<RaycastHit>();
                Vector3 origin = test.AttackRay.origin;
                Vector3 direction = test.AttackRay.direction;
                float maxDistance = test.MaxDistance;
                float radius = test.Radius;
                if ((layerMask & 16384) != 0)
                {
                    layerMask &= -16385;
                    GamePhysics.TraceAllUnordered(new Ray(origin - direction * 5f, direction), radius, list, maxDistance + 5f, 16384, QueryTriggerInteraction.UseGlobal);
                    for (int index = 0; index < list.Count; index++)
                    {
                        RaycastHit raycastHit = list[index];
                        raycastHit.distance -= 5f;
                        list[index] = raycastHit;
                    }
                }
                GamePhysics.TraceAllUnordered(new Ray(origin, direction), radius, list, maxDistance, layerMask, QueryTriggerInteraction.UseGlobal);
                for (int index = 0; index < list.Count; index++)
                {
                    RaycastHit hit = list[index];
                    Collider collider = hit.GetCollider();

                    if (!collider.isTrigger)
                    {
                        ColliderInfo component1 = collider.GetComponent<ColliderInfo>();
                        if (object.ReferenceEquals(component1, null) || component1.Filter(test))
                        {
                            if (hit.distance > 0.0f)
                            {
                                TraceInfo traceInfo = new TraceInfo()
                                {
                                    valid = true,
                                    distance = hit.distance,
                                    partID = 0,
                                    point = hit.point,
                                    normal = hit.normal,
                                    collider = collider,
                                    material = collider.GetMaterialAt(hit.point),
                                    entity = collider.gameObject.ToBaseEntity()
                                };
                                traceInfo.bone = GetTransform(collider.transform, hit.point, traceInfo.entity);

                                if (object.ReferenceEquals(traceInfo.entity, null) || traceInfo.entity != test.ignoreEntity)
                                    traces.Add(traceInfo);
                            }
                        }
                    }
                }
                traces.Sort((a, b) => a.distance.CompareTo(b.distance));
                Facepunch.Pool.FreeList<RaycastHit>(ref list);
            }

            public static Transform GetTransform(Transform bone, Vector3 position, BaseEntity entity)
            {
                if (bone.gameObject.GetComponentInParent<Model>() != null)
                    return bone;
                if (object.ReferenceEquals(entity, null))
                    return null;
                if (entity.model && entity.model.rootBone)
                    return entity.model.FindClosestBone(position);
                return entity.transform;
            }
        }

        public struct TraceInfo
        {
            public bool valid;
            public float distance;
            public BaseEntity entity;
            public Vector3 point;
            public Vector3 normal;
            public Transform bone;
            public PhysicMaterial material;
            public uint partID;
            public Collider collider;
            
            public void UpdateHitTest(HitTest test)
            {
                test.DidHit = true;
                test.HitEntity = this.entity;
                test.HitDistance = this.distance;
                test.HitMaterial = this.material != null ? this.material.GetName() : "generic";
                test.HitPart = this.partID;
                test.HitTransform = this.bone;
                test.HitPoint = this.point;
                test.HitNormal = this.normal;
                test.collider = this.collider;
                test.gameObject = this.collider ? this.collider.gameObject : test.HitTransform.gameObject;
                if (test.HitTransform == null)
                    return;
                test.HitPoint = test.HitTransform.InverseTransformPoint(this.point);
                test.HitNormal = test.HitTransform.InverseTransformDirection(this.normal);
            }
        }
        #endregion

    }
}


// --- End of file: BulletProjectile.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Xcraft.cs ---
// --- Original Local Path: Xcraft.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using UnityEngine;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Xcrafting", "Sparkless", "0.0.2")]
    public class Xcraft : RustPlugin
    {
        [PluginReference] private Plugin ImageLibrary;
        private ConfigData Settings { get; set; }

        public class ShopItems
        {
            [JsonProperty("Shortname предмета")] public string ShortName;
            [JsonProperty("Кол-во")] public int Amount;
        }


        class ConfigData
        {

            [JsonProperty("Можно ли устанавливать переработчик на структурах?")]
            public bool Structure = true;
            [JsonProperty("Можно ли устанавливать переработчик на землю?")]
            public bool Ground = false;
            [JsonProperty("Включить/Выключить подбор переработчика")]
            public bool Available = true;
            [JsonProperty("Запрещать устанавливать переработчик в зоне действия чужого шкафа")]
            public bool Privelege = true;
            
            [JsonProperty("Ресурсы для крафта коптера(макс 6)")]
            public List<ShopItems> ShopItem { get; set; }

            [JsonProperty("Ресурсы для крафта переработчика(макс 6)")]
            public List<ShopItems> ShopItemrec { get; set; }

            public static ConfigData GetNewCong()
            {
                ConfigData newConfig = new ConfigData();

                newConfig.ShopItem = new List<ShopItems>
                {
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                };
                newConfig.ShopItemrec = new List<ShopItems>
                {
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                    new ShopItems()
                    {
                        ShortName = "hq.metal.ore",
                        Amount = 100,
                    },
                };
                return newConfig;
            }
        }
        
        protected override void LoadDefaultConfig() => Settings = ConfigData.GetNewCong();
        protected override void SaveConfig() => Config.WriteObject(Settings);

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                Settings = Config.ReadObject<ConfigData>();
                if (Settings?.ShopItem == null) LoadDefaultConfig();
                if (Settings?.ShopItemrec == null) LoadDefaultConfig();
            }
            catch
            {
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        void OnServerInitialized()
        {
            var allobjects = UnityEngine.Object.FindObjectsOfType<Recycler>();
            foreach (var r in allobjects)
            {
                if (r.OwnerID != 0 && r.gameObject.GetComponent<RecyclerEntity>() == null)
                    r.gameObject.AddComponent<RecyclerEntity>();
            }

            foreach (var check in Settings.ShopItem)
            {
                ImageLibrary.Call("AddImage", $"https://rustlabs.com/img/items180/{check.ShortName}.png",
                    check.ShortName);
            }
            ImageLibrary.Call("AddImage", "https://i.imgur.com/AptcbtT.png", "CopterImage");
            ImageLibrary.Call("AddImage", "https://imgur.com/QEUXtZJ.png", "RecyclerImage");
        }

        [ChatCommand("craft")]
        void cmdcraftopen(BasePlayer player)
        {
            opencraftmenu(player, 1, true);
        }


        private string Layer = "LayerMenu";

        void opencraftmenu(BasePlayer player, int page, bool first = false)
        {
            var container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, Layer);
            
            
            var Panel = container.Add(new CuiPanel
            {
                Image = {Color = HexToCuiColor("#202020C2"), Material = "assets/content/ui/uibackgroundblur.mat"},
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                CursorEnabled = true,
            }, "Overlay", Layer);
            
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {FadeIn = 0.25f, Color =  "0.5176471 0.5176471 0.5176471 0.3137255"},
                    new CuiRectTransformComponent {AnchorMin = "0.2432291 0.1870371", AnchorMax = "0.7473958 0.8101852"}
                }
            });
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.438021 0.5361111", AnchorMax = "0.5499998 0.7370371" },
                Button = { Color = "0.5176471 0.5176471 0.5176471 0.3137255" },
                Text = { Text = "", Align = TextAnchor.MiddleCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" }
            }, Layer, ".Images");
 
            container.Add(new CuiElement
            {
                Parent = ".Images",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage",  "CopterImage") },
                    new CuiRectTransformComponent { AnchorMin = "0.05 0.05", AnchorMax = "0.95 0.95", OffsetMax = "0 0" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiTextComponent() { Color = "0.9529412 0.9529412 0.9529412 0.3529412", FadeIn = 0.25f, Text = "КРАФТ МИНИКОПТЕРА", FontSize = 25, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf"  },
                    new CuiRectTransformComponent { AnchorMin = "0.2447917 0.7388889", AnchorMax = "0.7432292 0.8092592" },
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiTextComponent() { Color = "0.9529412 0.9529412 0.9529412 0.3529412", FadeIn = 0.25f, Text = "РЕСУРСЫ ДЛЯ КРАФТА", FontSize = 20, Align = TextAnchor.UpperCenter, Font = "robotocondensed-bold.ttf"  },
                    new CuiRectTransformComponent { AnchorMin = "0.2442709 0.4925926", AnchorMax = "0.746875 0.5333333" },
                }
            });
            foreach (var check in Settings.ShopItem.Select((i, t) => new {A = i, B = t - (page - 1) * 6})
                .Skip((page - 1) * 6).Take(6))
            {
                container.Add(new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin =
                                $"{0.2734405 + check.B * 0.075 - Math.Floor((double) check.B / 6) * 6 * 0.075} {0.3412039 - Math.Floor((double) check.B / 6) * 0.18}",
                            AnchorMax =
                                $"{0.3421903 + check.B * 0.075 - Math.Floor((double) check.B / 6) * 6 * 0.075} {0.46713 - Math.Floor((double) check.B / 6) * 0.18}",
                            OffsetMax = "0 0"
                        },
                        Button =
                        {
                            Color = "1 1 1 0.01", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat",
                            Command = $""
                        },
                        Text =
                        {
                            Text = $"", Align = TextAnchor.LowerRight, Font = "robotocondensed-bold.ttf", FontSize = 15
                        }
                    }, Layer, Layer + $".{check.B}");

                container.Add(new CuiElement
                {
                    FadeOut = 0.3f,
                    Parent = Layer + $".{check.B}",
                    Name = Layer + $".{check.B}.Img",
                    Components =
                    {
                        new CuiRawImageComponent
                            {FadeIn = 0.3f, Png = (string) ImageLibrary.Call("GetImage", check.A.ShortName)},
                        new CuiRectTransformComponent
                            {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 1", OffsetMax = "-5 -1"}
                    }
                });

                container.Add(new CuiElement
                {
                    FadeOut = 0.3f,
                    Parent = Layer + $".{check.B}",
                    Name = Layer + $".{check.B}.Txt",
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = $"x{check.A.Amount}", Align = TextAnchor.LowerRight,
                            Font = "robotocondensed-bold.ttf", FontSize = 15, Color = "1 1 1 0.6"
                        },
                        new CuiRectTransformComponent
                            {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 1", OffsetMax = "-5 -1"}
                    }
                });
            }
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.2432292 0.8240736", AnchorMax = "0.7473959 0.9166662" },
                Button = { Close = Layer, Command = "recyclercraft", Color = "0.5176471 0.5176471 0.5176471 0.3137255", FadeIn = 0.1f},
                Text = { Text = "КРАФТ ПЕРЕРАБОТЧИКА", FontSize = 50, Align = TextAnchor.MiddleCenter, Color = "0.9529412 0.9529412 0.9529412 0.3529412", Font = "robotocondensed-bold.ttf" }
            }, Layer);
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.4380207 0.2120358", AnchorMax = "0.55 0.2657412" },
                Button = { Close = Layer, Command = "coptercraft", Color = "0.5176471 0.5176471 0.5176471 0.3137255", FadeIn = 0.1f},
                Text = { Text = "СКРАФТИТЬ", FontSize = 14, Align = TextAnchor.MiddleCenter, Color = "0.9529412 0.9529412 0.9529412 0.3529412", Font = "robotocondensed-bold.ttf" }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.82 0.9", AnchorMax = "0.98 0.96", OffsetMax = "0 0" },
                Button = { FadeIn = 2f, Color = HexToCuiColor("#FFFFFF2C"), Close = Layer},
                Text = { Text = "ВЫЙТИ", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 15 }
            }, Layer);

            CuiHelper.AddUi(player, container);
        }

        [ConsoleCommand("recyclercraft")]
        void cmdopenrecyclercraft(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            openmenucraftrec(player, 1, true);
        }

        void openmenucraftrec(BasePlayer player, int page, bool first = false)
        {
            var container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, Layer);
            
            
            var Panel = container.Add(new CuiPanel
            {
                Image = {Color = HexToCuiColor("#202020C2"), Material = "assets/content/ui/uibackgroundblur.mat"},
                RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
                CursorEnabled = true,
            }, "Overlay", Layer);
            
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiImageComponent {FadeIn = 0.25f, Color =  "0.5176471 0.5176471 0.5176471 0.3137255"},
                    new CuiRectTransformComponent {AnchorMin = "0.2432291 0.1870371", AnchorMax = "0.7473958 0.8101852"}
                }
            });
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.438021 0.5361111", AnchorMax = "0.5499998 0.7370371" },
                Button = { Color = "0.5176471 0.5176471 0.5176471 0.3137255" },
                Text = { Text = "", Align = TextAnchor.MiddleCenter, FontSize = 18, Font = "robotocondensed-bold.ttf" }
            }, Layer, ".Images");
 
            container.Add(new CuiElement
            {
                Parent = ".Images",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage",  "RecyclerImage") },
                    new CuiRectTransformComponent { AnchorMin = "0.05 0.05", AnchorMax = "0.95 0.95", OffsetMax = "0 0" }
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiTextComponent() { Color = "0.9529412 0.9529412 0.9529412 0.3529412", FadeIn = 0.25f, Text = "КРАФТ ПЕРЕРАБОТЧИКА ", FontSize = 25, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf"  },
                    new CuiRectTransformComponent { AnchorMin = "0.2447917 0.7388889", AnchorMax = "0.7432292 0.8092592" },
                }
            });
            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiTextComponent() { Color = "0.9529412 0.9529412 0.9529412 0.3529412", FadeIn = 0.25f, Text = "РЕСУРСЫ ДЛЯ КРАФТА", FontSize = 20, Align = TextAnchor.UpperCenter, Font = "robotocondensed-bold.ttf"  },
                    new CuiRectTransformComponent { AnchorMin = "0.2442709 0.4925926", AnchorMax = "0.746875 0.5333333" },
                }
            });
            foreach (var check in Settings.ShopItemrec.Select((i, t) => new {A = i, B = t - (page - 1) * 6})
                .Skip((page - 1) * 6).Take(6))
            {
                container.Add(new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin =
                                $"{0.2734405 + check.B * 0.075 - Math.Floor((double) check.B / 6) * 6 * 0.075} {0.3412039 - Math.Floor((double) check.B / 6) * 0.18}",
                            AnchorMax =
                                $"{0.3421903 + check.B * 0.075 - Math.Floor((double) check.B / 6) * 6 * 0.075} {0.46713 - Math.Floor((double) check.B / 6) * 0.18}",
                            OffsetMax = "0 0"
                        },
                        Button =
                        {
                            Color = "1 1 1 0.01", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat",
                            Command = $""
                        },
                        Text =
                        {
                            Text = $"", Align = TextAnchor.LowerRight, Font = "robotocondensed-bold.ttf", FontSize = 15
                        }
                    }, Layer, Layer + $".{check.B}");

                container.Add(new CuiElement
                {
                    FadeOut = 0.3f,
                    Parent = Layer + $".{check.B}",
                    Name = Layer + $".{check.B}.Img",
                    Components =
                    {
                        new CuiRawImageComponent
                            {FadeIn = 0.3f, Png = (string) ImageLibrary.Call("GetImage", check.A.ShortName)},
                        new CuiRectTransformComponent
                            {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 1", OffsetMax = "-5 -1"}
                    }
                });

                container.Add(new CuiElement
                {
                    FadeOut = 0.3f,
                    Parent = Layer + $".{check.B}",
                    Name = Layer + $".{check.B}.Txt",
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = $"x{check.A.Amount}", Align = TextAnchor.LowerRight,
                            Font = "robotocondensed-bold.ttf", FontSize = 15, Color = "1 1 1 0.6"
                        },
                        new CuiRectTransformComponent
                            {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 1", OffsetMax = "-5 -1"}
                    }
                });
            }
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.2432292 0.8240736", AnchorMax = "0.7473959 0.9166662" },
                Button = { Close = Layer, Command = "chat.say /craft", Color = "0.5176471 0.5176471 0.5176471 0.3137255", FadeIn = 0.1f},
                Text = { Text = "КРАФТ КОПТЕРА", FontSize = 50, Align = TextAnchor.MiddleCenter, Color = "0.9529412 0.9529412 0.9529412 0.3529412", Font = "robotocondensed-bold.ttf" }
            }, Layer);
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.4380207 0.2120358", AnchorMax = "0.55 0.2657412" },
                Button = { Close = Layer, Command = "craftrecycler", Color = "0.5176471 0.5176471 0.5176471 0.3137255", FadeIn = 0.1f},
                Text = { Text = "СКРАФТИТЬ", FontSize = 14, Align = TextAnchor.MiddleCenter, Color = "0.9529412 0.9529412 0.9529412 0.3529412", Font = "robotocondensed-bold.ttf" }
            }, Layer);
            
            container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.82 0.9", AnchorMax = "0.98 0.96", OffsetMax = "0 0" },
                    Button = { FadeIn = 2f, Color = HexToCuiColor("#FFFFFF2C"), Close = Layer},
                    Text = { Text = "ВЫЙТИ", Align = TextAnchor.MiddleCenter, Font = "robotocondensed-regular.ttf", FontSize = 15 }
                }, Layer);

            CuiHelper.AddUi(player, container);
        }

        [ConsoleCommand("coptercraft")]
        private void cmdcoptercraft(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            foreach (var ct in Settings.ShopItem.Select((i, t) => new {A = i, B = t}))
            {
                int HaveCount = player.inventory.GetAmount(ItemManager.FindItemDefinition(ct.A.ShortName).itemid);

                if (HaveCount < ct.A.Amount)
                {
                    SendReply(player, $"Вам не хватает: {ItemManager.FindItemDefinition(ct.A.ShortName).displayName.english}: {ct.A.Amount - HaveCount}");
                    return;
                }
            }

            foreach (var ct in Settings.ShopItem.Select((i, t) => new {A = i, B = t}))
            {
                player.inventory.Take(null, ItemManager.FindItemDefinition(ct.A.ShortName).itemid, ct.A.Amount);
            }
            GiveCopter(player);
            SendReply(player, "<color=#7f35ff>Вы успешно скрафтили коптер!</color>");
        }
        
        
        [ConsoleCommand("craftrecycler")]
        private void cmdrecyclercraft(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();

            foreach (var ct in Settings.ShopItemrec.Select((i, t) => new {A = i, B = t}))
            {
                int haveCount = player.inventory.GetAmount(ItemManager.FindItemDefinition(ct.A.ShortName).itemid);

                if (haveCount < ct.A.Amount)
                {
                    SendReply(player, $"Вам не хватает: {ItemManager.FindItemDefinition(ct.A.ShortName).displayName.english}: {ct.A.Amount - haveCount} шт");
                    return;
                }
            }
            foreach (var ct in Settings.ShopItemrec.Select((i, t) => new {A = i, B = t}))
            {
                player.inventory.Take(null, ItemManager.FindItemDefinition(ct.A.ShortName).itemid, ct.A.Amount);
            }
            GiveRecycler(player);
            SendReply(player,$"<color=#7f35ff>Вы успешно скрафтили переработчик</color>");
        }
        object CanStackItem(Item item, Item anotherItem)
        {
            if (item.info.itemid == 833533164 && item.skin == 1321253094)
                return false;
            if (item.info.itemid == 833533164 && item.skin == 1663370375)
                return false;
            return null;
        }
        
        bool GiveRecycler(ItemContainer container) 
        {
            var item = ItemManager.CreateByItemID(833533164, 1, 1321253094);
            item.name = "Переработчик";
            return item.MoveToContainer(container, -1, false);
        }

        bool GiveCopter(BasePlayer player)
        {
            var item = ItemManager.CreateByItemID(833533164, 1, 1663370375);
            item.name = "Коптер";
            if (!player.inventory.GiveItem(item)) {
                item.Drop(player.inventory.containerMain.dropPosition, player.inventory.containerMain.dropVelocity, new Quaternion());
                return false;
            }
            return true;
        }
        bool GiveRecycler(BasePlayer player) 
        {
            var item = ItemManager.CreateByItemID(833533164, 1, 1321253094);
            item.name = "Переработчик";
            if (!player.inventory.GiveItem(item)) {
                item.Drop(player.inventory.containerMain.dropPosition, player.inventory.containerMain.dropVelocity, new Quaternion());
                return false;
            }
            return true;
        }   
        bool Check(BaseEntity entity)
        {
            GroundWatch component = entity.gameObject.GetComponent<GroundWatch>();
            List<Collider> list = Facepunch.Pool.GetList<Collider>();
            Vis.Colliders<Collider>(entity.transform.TransformPoint(component.groundPosition), component.radius, list, component.layers, QueryTriggerInteraction.Collide);
            foreach (Collider collider in list)
            {
                if (!(collider.transform.root == entity.gameObject.transform.root))
                {
                    BaseEntity baseEntity = collider.gameObject.ToBaseEntity();
                    if ((!(bool)(baseEntity) || !baseEntity.IsDestroyed && !baseEntity.isClient) && baseEntity is BuildingBlock)
                    {
                        Facepunch.Pool.FreeList<Collider>(ref list);
                        return true;
                    }
                }
            }
            Facepunch.Pool.FreeList<Collider>(ref list);
            return true;
        }
        
        private class RecyclerEntity : MonoBehaviour
        {
            private DestroyOnGroundMissing desGround;
            private GroundWatch groundWatch;
            public ulong OwnerID;

            void Awake()
            {
                OwnerID = GetComponent<BaseEntity>().OwnerID;
                desGround = GetComponent<DestroyOnGroundMissing>();
                if (!desGround) gameObject.AddComponent<DestroyOnGroundMissing>();
                groundWatch = GetComponent<GroundWatch>();
                if (!groundWatch) gameObject.AddComponent<GroundWatch>();
            }
        }
        
        void OnEntityBuilt(Planner plan, GameObject obj)
        {
            var player = plan.GetOwnerPlayer();
            var entity = obj.ToBaseEntity();
            if (entity == null) return;

            var ePos = entity.transform.position;
            RaycastHit rHit;

            if (entity != null && entity.ShortPrefabName == "box.wooden.large" && entity.skinID == 1663370375L)
            {
                MiniCopter minicopter = GameManager.server.CreateEntity("assets/content/vehicles/minicopter/minicopter.entity.prefab",entity.transform.position, entity.transform.rotation) as MiniCopter;
                minicopter.Spawn();
                entity.Kill();
            }

            if (entity != null && entity.ShortPrefabName == "box.wooden.large" && entity.skinID == 1321253094L)
            {
                if (Physics.Raycast(new Vector3(ePos.x, ePos.y + 1, ePos.z), Vector3.down, out rHit, 2f, LayerMask.GetMask("Construction")) && rHit.GetEntity() != null)
                {
                    if (!Settings.Structure)
                    {
                        SendReply(player, "Переработчики нельзя ставить на строения (фундамент, потолки и тд)");
                        GiveRecycler(player);
                        entity.Kill();
                        return;
                    }
                }
                else
                {
                    if (!Settings.Ground)
                    {
                        GiveRecycler(player);
                        SendReply(player, "Нельзя ставить на землю");
                        entity.Kill();
                        return;
                    }
                }
                Recycler recycler = GameManager.server.CreateEntity("assets/bundled/prefabs/static/recycler_static.prefab", entity.transform.position, entity.transform.rotation) as Recycler;
                recycler.Spawn();
                entity.Kill();
                recycler.gameObject.AddComponent<RecyclerEntity>();
            }
        } 
        private void OnHammerHit(BasePlayer player, HitInfo info)
        {
            var entity = info.HitEntity;
            if (entity == null) return;
 
            if (!entity.ShortPrefabName.Contains("recycler")) return;
 
            if (!Settings.Available)
            {
                SendReply(player, "Подбор переработчика запрещен!");
                return;
            }
            if (Settings.Privelege && !player.IsBuildingAuthed())
            {
                SendReply (player, "Вам нужно право на строительство чтобы подобрать переработчик");
                return;
            }
            if (GiveRecycler(player))
            {
                SendReply(player, "Вы успешно подобрали переработчик!");
            }
            else
            {
                SendReply(player, "У вас недостаточно места в инвентаре!");
            }
 
            info.HitEntity.Kill();
        }
        private static string HexToCuiColor(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }
    }
}

// --- End of file: Xcraft.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CustomCommands.cs ---
// --- Original Local Path: CustomCommands.cs ---

using System.Collections.Generic;
using System;
using System.Linq;
using UnityEngine;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using Oxide.Core;
using Oxide.Core.Plugins;
using System.Collections;
using System.IO;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("CustomCommands", "Absolut", "1.0.2", ResourceId = 2158)]

    class CustomCommands : RustPlugin
    {
        [PluginReference]
        Plugin BetterChat;

        static GameObject webObject;
        static CCImages ccImage;
        static buttonImage bImage;

        CustomCommandData ccData;
        private DynamicConfigFile CCData;

        ButtonImages bimages;
        private DynamicConfigFile BImages;

        class ButtonImages
        {
            public List<string> AdminImages = new List<string>();
        }
        string TitleColor = "<color=orange>";
        string MsgColor = "<color=#A9A9A9>";
        bool ForceBar = false;
        private Dictionary<string, Timer> timers = new Dictionary<string, Timer>();
        private Dictionary<ulong, CommandCreation> cmdCreation = new Dictionary<ulong, CommandCreation>();
        private List<ulong> UIOpen = new List<ulong>();
        private List<ulong> Mouse = new List<ulong>();


        #region Server Hooks

        void Loaded()
        {
            CCData = Interface.Oxide.DataFileSystem.GetFile("CustomCommands_Data");
            BImages = Interface.Oxide.DataFileSystem.GetFile("CustomCommands_ImageLoader");
            lang.RegisterMessages(messages, this);
        }

        void Unload()
        {
            foreach (var entry in timers)
                entry.Value.Destroy();
            timers.Clear();
            foreach (BasePlayer p in BasePlayer.activePlayerList)
            {
                DestroyPlayer(p);
            }
            SaveData();
        }

        private void OnPlayerRespawned(BasePlayer player)
        {
            if (UIOpen.Contains(player.userID))
                CCPanel(player);
        }


        private void OnPlayerDisconnected(BasePlayer player)
        {
            DestroyPlayer(player);
        }

        private void OnPlayerInit(BasePlayer player)
        {
            if (player != null)
            {
                if (configData.InfoInterval != 0)
                {
                    if (!configData.AdminOnlyButtons)
                        GetSendMSG(player, "CCInfo", configData.OptionsKeyBinding);
                    else if (isAuth(player))
                        GetSendMSG(player, "CCInfo", configData.OptionsKeyBinding);
                }
                InitializePlayer(player);
            }
        }

        private void InitializePlayer(BasePlayer player)
        {
            if (!ccData.PlayerCommands.ContainsKey(player.userID))
                ccData.PlayerCommands.Add(player.userID, new List<Command>());
            player.Command($"bind {configData.OptionsKeyBinding} \"MouseFreeLookUI\"");
            player.Command("bind tab \"inventory.toggle;UI_DestroyMouse\"");
            player.Command("bind mouse1 \"+attack2;UI_DestroyMouse\"");

        }

        private void DestroyPlayer(BasePlayer player)
        {
            player.Command($"bind {configData.OptionsKeyBinding} \"\"");
            player.Command("bind tab \"inventory.toggle\"");
            player.Command("bind mouse1 \"+attack2\"");
            if (UIOpen.Contains(player.userID))
                UIOpen.Remove(player.userID);
            if (Mouse.Contains(player.userID))
                MousePanel(player);
            DestroyCreationPanel(player);
            DestroyCCPanel(player);
        }

        void OnServerInitialized()
        {
            webObject = new GameObject("WebObject");
            ccImage = webObject.AddComponent<CCImages>();
            ccImage.SetDataDir(this);
            bImage = webObject.AddComponent<buttonImage>();
            bImage.SetDataDir(this);
            LoadVariables();
            LoadData();
            timers.Add("info", timer.Once(900, () => InfoLoop()));
            timers.Add("save", timer.Once(600, () => SaveLoop()));
            SaveData();
            if (ccData.SavedImages == null || ccData.SavedImages.Count == 0)
                Getimages();
            else Refreshimages();
            GetServerImages();
            foreach (BasePlayer p in BasePlayer.activePlayerList)
                OnPlayerInit(p);
        }

        private object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            if (BetterChat) return null;
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return null;
            if (cmdCreation.ContainsKey(player.userID))
            {
                CommandCreationChat(player, arg.Args);
                return false;
            }
            return null;
        }

        object OnBetterChat(IPlayer iplayer, string message)
        {
            var player = iplayer.Object as BasePlayer;
            if (player == null) return message;
            if (cmdCreation.ContainsKey(player.userID))
            {
                CommandCreationChat(player, message.Split(' '));
                return true;
            }
            return message;
        }

        private void CommandCreationChat(BasePlayer player, string[] Args)
        {
            if (Args[0] == "quit")
            {
                DestroyCreationPanel(player);
                GetSendMSG(player, "CanceledCmdCreation");
                return;
            }
            if (cmdCreation[player.userID].step == 1)
            {
                cmdCreation[player.userID].cmd.cmd = string.Join(" ", Args);
                CreateCommand(player, 2);
                return;
            }
        }

        #endregion

        #region Functions

        public void DestroyCCPanel(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, PanelCC);
        }

        public void DestroyCreationPanel(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, PanelCreation);
        }
        
        private string GetLang(string msg)
        {
            if (messages.ContainsKey(msg))
                return lang.GetMessage(msg, this);
            else return msg;
        }

        private void GetSendMSG(BasePlayer player, string message, string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "")
        {
            string msg = string.Format(lang.GetMessage(message, this), arg1, arg2, arg3, arg4);
            SendReply(player, TitleColor + lang.GetMessage("title", this, player.UserIDString) + "</color>" + MsgColor + msg + "</color>");
        }

        private string GetMSG(string message, string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "")
        {
            string msg = string.Format(lang.GetMessage(message, this), arg1, arg2, arg3, arg4);
            return msg;
        }

        bool isAuth(BasePlayer player)
        {
            if (player.net.connection != null)
                if (player.net.connection.authLevel < 1)
                    return false;
            return true;
        }

        #endregion

        #region UI Creation

        private string PanelCC = "PanelCC";
        private string PanelCreation = "PanelCreation";
        private string PanelMouse = "PanelMouse";

        public class UI
        {
            static public CuiElementContainer CreateElementContainer(string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                var NewElement = new CuiElementContainer()
            {
                {
                    new CuiPanel
                    {
                        Image = {Color = color},
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                        CursorEnabled = cursor
                    },
                    new CuiElement().Parent,
                    panel
                }
            };
                return NewElement;
            }
            static public void CreatePanel(ref CuiElementContainer element, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                element.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel);
            }
            static public void CreateLabel(ref CuiElementContainer element, string panel, string color, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter)
            {
                element.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = 1.0f, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);
            }

            static public void CreateButton(ref CuiElementContainer element, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                element.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = 1.0f },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }

            static public void LoadImage(ref CuiElementContainer element, string panel, string png, string aMin, string aMax)
            {
                element.Add(new CuiElement
                {
                    Parent = panel,
                    Components =
                    {
                        new CuiRawImageComponent {Png = png },
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax }
                    }
                });
            }
            static public void CreateTextOverlay(ref CuiElementContainer element, string panel, string text, string color, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter, float fadein = 1.0f)
            {
                //if (configdata.DisableUI_FadeIn)
                //    fadein = 0;
                element.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, FadeIn = fadein, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);

            }
        }

        private Dictionary<string, string> UIColors = new Dictionary<string, string>
        {
            {"black", "0 0 0 1.0" },
            {"dark", "0.1 0.1 0.1 0.98" },
            {"header", "1 1 1 0.3" },
            {"light", ".564 .564 .564 1.0" },
            {"grey1", "0.6 0.6 0.6 1.0" },
            {"brown", "0.3 0.16 0.0 1.0" },
            {"yellow", "0.9 0.9 0.0 1.0" },
            {"orange", "1.0 0.65 0.0 1.0" },
            {"limegreen", "0.42 1.0 0 1.0" },
            {"blue", "0.2 0.6 1.0 1.0" },
            {"red", "1.0 0.1 0.1 1.0" },
            {"white", "1 1 1 1" },
            {"green", "0.28 0.82 0.28 1.0" },
            {"grey", "0.85 0.85 0.85 1.0" },
            {"lightblue", "0.6 0.86 1.0 1.0" },
            {"buttonbg", "0.2 0.2 0.2 0.7" },
            {"buttongreen", "0.133 0.965 0.133 0.9" },
            {"buttonred", "0.964 0.133 0.133 0.9" },
            {"buttongrey", "0.8 0.8 0.8 0.9" },
            {"CSorange", "1.0 0.64 0.10 1.0" }
        };

        private Dictionary<string, string> TextColors = new Dictionary<string, string>
        {
            {"limegreen", "<color=#6fff00>" }
        };

        #endregion

        #region UI Panels

        void CCPanel(BasePlayer player, string mode = "norm")
        {
            CuiHelper.DestroyUi(player, PanelCC);
            if (!ccData.PlayerCommands.ContainsKey(player.userID))
                ccData.PlayerCommands.Add(player.userID, new List<Command>());
            if (configData.AdminOnlyButtons && !isAuth(player))
            {
                GetSendMSG(player, "NotAuth");
                return;
            }
            var i = 0;
            var image = ccData.SavedImages["PurpleLongButton"].ToString();
            var command = "";
            float[] pos = CmdButtonPos(i);
            var element = UI.CreateElementContainer(PanelCC, "0 0 0 0", "0.95 0.25", "1.0 0.9");
            if (ForceBar)
            {
                CuiHelper.DestroyUi(player, PanelMouse);
                command = $"any {i}";
                foreach (var entry in ccData.ForceCommands)
                {
                    pos = CmdButtonPos(i);
                    if (entry.img != 0)
                        if (ccData.ButtonImages.Contains(entry.img))
                            image = entry.img.ToString();
                        else image = ccData.SavedImages["PurpleLongButton"].ToString();
                    UI.LoadImage(ref element, PanelCC, image, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}");
                    UI.CreateButton(ref element, PanelCC, "0 0 0 0", entry.cmd, 14, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", command, TextAnchor.MiddleCenter);
                    i++;
                }
            }
            else
            {
                foreach (var entry in ccData.PlayerCommands[player.userID])
                {
                    pos = CmdButtonPos(i);
                    if (mode == "norm")
                        command = $"any {i}";
                    else if (mode == "edit")
                        command = $"UI_RemoveCommand {i}";
                    if (entry.img != 0)
                        if (ccData.ButtonImages.Contains(entry.img))
                            image = entry.img.ToString();
                        else image = ccData.SavedImages["PurpleLongButton"].ToString();
                    UI.LoadImage(ref element, PanelCC, image, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}");
                    UI.CreateButton(ref element, PanelCC, "0 0 0 0", entry.cmd, 14, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", command, TextAnchor.MiddleCenter);
                    i++;
                }
                if (configData.AdminCreatesButtons && isAuth(player))
                {
                    if (ccData.PlayerCommands[player.userID].Count() < 17 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["GreenSquareButton"].ToString(), "0.01 0.15", "0.49 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "+", 16, "0.01 0.15", "0.49 0.19", $"UI_CreateCommand", TextAnchor.MiddleCenter);
                    }
                    if (ccData.PlayerCommands[player.userID].Count() > 0 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.51 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "-", 16, "0.51 0.15", "0.99 0.19", $"UI_CCPanel yes", TextAnchor.MiddleCenter);
                    }
                    if (mode == "edit")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.01 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", GetLang("ExitEraseMode"), 14, "0.01 0.15", "0.99 0.19", $"UI_CCPanel no", TextAnchor.MiddleCenter);
                    }
                }
                if (configData.AdminCreatesButtons && !isAuth(player))
                {
                    if (ccData.PlayerCommands[player.userID].Count() < 17 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["GreenSquareButton"].ToString(), "0.01 0.15", "0.49 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "+", 16, "0.01 0.15", "0.49 0.19", $"UI_AddCommand", TextAnchor.MiddleCenter);
                    }
                    if (ccData.PlayerCommands[player.userID].Count() > 0 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.51 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "-", 16, "0.51 0.15", "0.99 0.19", $"UI_CCPanel yes", TextAnchor.MiddleCenter);
                    }
                    if (mode == "edit")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.01 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", GetLang("ExitEraseMode"), 14, "0.01 0.15", "0.99 0.19", $"UI_CCPanel no", TextAnchor.MiddleCenter);
                    }
                }
                else if (!configData.AdminCreatesButtons)
                {
                    if (ccData.PlayerCommands[player.userID].Count() < 17 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["GreenSquareButton"].ToString(), "0.01 0.15", "0.49 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "+", 16, "0.01 0.15", "0.49 0.19", $"UI_CreateCommand", TextAnchor.MiddleCenter);
                    }
                    if (ccData.PlayerCommands[player.userID].Count() > 0 && mode == "norm")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.51 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", "-", 16, "0.51 0.15", "0.99 0.19", $"UI_CCPanel yes", TextAnchor.MiddleCenter);
                    }
                    if (mode == "edit")
                    {
                        UI.LoadImage(ref element, PanelCC, ccData.SavedImages["RedSquareButton"].ToString(), "0.01 0.15", "0.99 0.19");
                        UI.CreateButton(ref element, PanelCC, "0 0 0 0", GetLang("ExitEraseMode"), 14, "0.01 0.15", "0.99 0.19", $"UI_CCPanel no", TextAnchor.MiddleCenter);
                    }
                }
            }
            if (isAuth(player))
            {
                if (!ForceBar)
                {
                    UI.LoadImage(ref element, PanelCC, ccData.SavedImages["BlueSquareButton"].ToString(), "0.01 0.1", "0.99 0.14");
                    UI.CreateButton(ref element, PanelCC, "0 0 0 0", GetLang("SaveBar"), 14, "0.01 0.1", "0.99 0.14", $"UI_SavePanel", TextAnchor.MiddleCenter);
                }
                UI.LoadImage(ref element, PanelCC, ccData.SavedImages["OrangeSquareButton"].ToString(), "0.01 0.05", "0.99 0.09");
                UI.CreateButton(ref element, PanelCC, "0 0 0 0", GetLang("ForceBar"), 14, "0.01 0.05", "0.99 0.09", $"UI_ForcePanel", TextAnchor.MiddleCenter);
            }
            UI.CreateButton(ref element, PanelCC, UIColors["red"], GetLang("Close"), 10, "0.01 0.01", "0.99 0.04", $"UI_DestroyCC", TextAnchor.MiddleCenter);
            CuiHelper.AddUi(player, element);
        }

        private void CreateCommand(BasePlayer player, int step = 0)
        {
            CuiHelper.DestroyUi(player, PanelCreation);
            CuiHelper.DestroyUi(player, PanelMouse);
            var i = 0;
            if (Mouse.Contains(player.userID))
                Mouse.Remove(player.userID);
            var element = UI.CreateElementContainer(PanelCreation, "0 0 0 0", "0.3 0.3", "0.7 0.9");
            switch (step)
            {
                case 0:
                    if (cmdCreation.ContainsKey(player.userID))
                        cmdCreation.Remove(player.userID);
                    cmdCreation.Add(player.userID, new CommandCreation());
                    cmdCreation[player.userID].cmd = new Command();
                    UI.CreatePanel(ref element, PanelCreation, "0 0 0 0", $".0001 0.0001", $"0.0002 0.0002", true);

                    UI.LoadImage(ref element, PanelCreation, ccData.SavedImages["OrangeSquareButton"].ToString(), "0.15 0.4", "0.45 0.6");
                    UI.CreateButton(ref element, PanelCreation, "0 0 0 0", GetLang("CONSOLE"), 16, "0.15 0.4", "0.45 0.6", $"UI_SetType console");

                    UI.LoadImage(ref element, PanelCreation, ccData.SavedImages["BlueSquareButton"].ToString(), "0.55 0.4", "0.85 0.6");
                    UI.CreateButton(ref element, PanelCreation, "0 0 0 0", GetLang("CHAT"), 16, "0.55 0.4", "0.85 0.6", $"UI_SetType chat");
                    break;
                case 1:
                    if (cmdCreation[player.userID].cmd.type == "chat")
                        UI.CreateLabel(ref element, PanelCreation, UIColors["limegreen"], GetMSG("ProvideAChatCommand"), 20, "0.05 0", ".95 1", TextAnchor.MiddleCenter);
                    else if (cmdCreation[player.userID].cmd.type == "console")
                        UI.CreateLabel(ref element, PanelCreation, UIColors["limegreen"], GetMSG("ProvideAConsoleCommand"), 20, "0.05 0", ".95 1", TextAnchor.MiddleCenter);
                    break;
                case 2:
                    if (ccData.ButtonImages.Count > 0)
                    {
                        UI.CreatePanel(ref element, PanelCreation, "0 0 0 0", $".0001 0.0001", $"0.0002 0.0002", true);
                        i = 0;
                        foreach (var entry in ccData.ButtonImages)
                        {
                            CreateButtonSelection(ref element, PanelCreation, entry, i); i++;
                        }
                    }
                    else
                    {
                        CreateCommand(player, 99);
                        return;
                    }
                    break;
                case 10:
                    i = 0;
                    UI.CreatePanel(ref element, PanelCreation, "0 0 0 0", $".0001 0.0001", $"0.0002 0.0002", true);
                    foreach (var entry in ccData.AdminCommands)
                    {
                        CreateCommandSelection(ref element, PanelCreation, entry.cmd, entry.type, entry.img, i); i++;
                    }
                    break;
                default:
                    CuiHelper.DestroyUi(player, PanelCreation);
                    element = UI.CreateElementContainer(PanelCreation, "0 0 0 0", "0.3 0.3", "0.7 0.5");
                    UI.CreatePanel(ref element, PanelCreation, "0 0 0 0", $".0001 0.0001", $"0.0002 0.0002", true);
                    UI.CreateLabel(ref element, PanelCreation, UIColors["limegreen"], GetMSG("NewCMDInfo", cmdCreation[player.userID].cmd.type.ToUpper(), cmdCreation[player.userID].cmd.cmd), 20, "0.05 .5", ".95 1.0");
                    UI.CreateButton(ref element, PanelCreation, UIColors["buttonbg"], GetLang("SaveCommand"), 18, "0.2 0.05", "0.4 0.4", $"UI_SaveCommand");
                    if (isAuth(player))
                        UI.CreateButton(ref element, PanelCreation, UIColors["buttonbg"], GetLang("SavePlayerCommand"), 18, "0.401 0.05", "0.599 0.4", $"UI_SavePlayerCommand");
                    UI.CreateButton(ref element, PanelCreation, UIColors["buttonred"], GetLang("CancelCommand"), 18, "0.6 0.05", "0.8 0.4", $"UI_CancelCommand");
                    break;
            }
            CuiHelper.AddUi(player, element);
        }

        private void CreateButtonSelection(ref CuiElementContainer container, string panelName, uint img, int num)
        {
            var pos = CalcButtonPos(num);
            UI.LoadImage(ref container, panelName, img.ToString(), $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}");
            UI.CreateButton(ref container, panelName, "0 0 0 0", "", 16, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", $"UI_SetImg {img}");
        }

        private void CreateCommandSelection(ref CuiElementContainer container, string panelName, string cmd, string type, uint img, int num)
        {
            var pos = CalcButtonPos(num);
            UI.LoadImage(ref container, panelName, img.ToString(), $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}");
            UI.CreateTextOverlay(ref container, panelName, cmd, UIColors["white"], 10, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}");
            UI.CreateButton(ref container, panelName, "0 0 0 0", "", 16, $"{pos[0]} {pos[1]}", $"{pos[2]} {pos[3]}", $"UI_AddPlayerCommand {num}");
        }   

        void FreeMouse(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, PanelMouse);
            if (!Mouse.Contains(player.userID))
            {
                Mouse.Add(player.userID);
            }
            var element = UI.CreateElementContainer(PanelMouse, "0 0 0 0", $".0001 0.0001", $"0.0002 0.0002", true);
            CuiHelper.AddUi(player, element);
        }



        #endregion

        #region UI Calculations

        private float[] CmdButtonPos(int number)
        {
            Vector2 position = new Vector2(0.01f, 0.94f);
            Vector2 dimensions = new Vector2(0.98f, 0.04f);
            float offsetY = 0;
            float offsetX = 0;
            offsetY = (-0.001f - dimensions.y) * number;
            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }

        private float[] CalcButtonPos(int number)
        {
            Vector2 position = new Vector2(0.02f, 0.78f);
            Vector2 dimensions = new Vector2(0.15f, 0.15f);
            float offsetY = 0;
            float offsetX = 0;
            if (number >= 0 && number < 6)
            {
                offsetX = (0.01f + dimensions.x) * number;
            }
            if (number > 5 && number < 12)
            {
                offsetX = (0.01f + dimensions.x) * (number - 6);
                offsetY = (-0.025f - dimensions.y) * 1;
            }
            if (number > 11 && number < 18)
            {
                offsetX = (0.01f + dimensions.x) * (number - 12);
                offsetY = (-0.025f - dimensions.y) * 2;
            }
            if (number > 17 && number < 24)
            {
                offsetX = (0.01f + dimensions.x) * (number - 18);
                offsetY = (-0.025f - dimensions.y) * 3;
            }
            if (number > 23 && number < 30)
            {
                offsetX = (0.01f + dimensions.x) * (number - 24);
                offsetY = (-0.025f - dimensions.y) * 4;
            }
            Vector2 offset = new Vector2(offsetX, offsetY);
            Vector2 posMin = position + offset;
            Vector2 posMax = posMin + dimensions;
            return new float[] { posMin.x, posMin.y, posMax.x, posMax.y };
        }


        #endregion

        #region UI Commands

        [ConsoleCommand("MouseFreeLookUI")]
        private void cmdMouseUI(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            MousePanel(player);
        }

        private void MousePanel(BasePlayer player)
        {
            if (Mouse.Contains(player.userID))
            {
                CuiHelper.DestroyUi(player, PanelCreation);
                CuiHelper.DestroyUi(player, PanelMouse);
                Mouse.Remove(player.userID);
            }
            else
            {              
                FreeMouse(player);
            }

        }

        [ConsoleCommand("UI_DestroyMouse")]
        private void cmdUI_DestroyMouse(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (Mouse.Contains(player.userID))
                Mouse.Remove(player.userID);
            CuiHelper.DestroyUi(player, PanelMouse);
        }

        [ConsoleCommand("UI_DestroyCC")]
        private void cmdUI_DestroyCC(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (UIOpen.Contains(player.userID))
                UIOpen.Remove(player.userID);
            DestroyCCPanel(player);
            DestroyCreationPanel(player);
            if (Mouse.Contains(player.userID))
                Mouse.Remove(player.userID);
            CuiHelper.DestroyUi(player, PanelMouse);
        }


        [ChatCommand("cc")]
        private void cmdcc(BasePlayer player, string command, string[] args)
        {
            if (args == null || args.Length == 0)
            {
                if (UIOpen.Contains(player.userID))
                {
                    UIOpen.Remove(player.userID);
                    DestroyCCPanel(player);
                }
                else
                {
                    UIOpen.Add(player.userID);
                    CCPanel(player);
                }
                return;
            }
            if (args.Length == 2)
                if (args[0].ToLower() == "clear")
                    if (isAuth(player))
                        if (args[1].ToLower() == "all")
                        {
                            ccData.AdminCommands.Clear();
                            SaveData();
                            timer.Once(5, () =>
                            {
                                foreach (BasePlayer p in BasePlayer.activePlayerList)
                                    CCPanel(p);
                            });
                        }
                        else if (args[1].ToLower() == "players")
                        {
                            ccData.PlayerCommands.Clear();
                            SaveData();
                            timer.Once(5, () =>
                            {
                                foreach (BasePlayer p in BasePlayer.activePlayerList)
                                    CCPanel(p);
                            });
                        }
                        else GetSendMSG(player, "InvalidFormat");
                    else GetSendMSG(player, "NotAuth");
                else GetSendMSG(player, "InvalidFormat");
            else GetSendMSG(player, "InvalidFormat");
        }

        [ConsoleCommand("any")]
        private void cmdchat(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            var i = 0;
            int num = 0;
            if (!int.TryParse(arg.Args[0], out num)) return;
            foreach (var entry in ccData.PlayerCommands[player.userID])
            {
                if (i == num)
                {
                    if (entry.type == "chat")
                    {
                        rust.RunClientCommand(player, $"chat.say",$"/{entry.cmd}");
                        break;
                    }
                    else if (entry.type == "console")
                    {
                        rust.RunClientCommand(player, $"{entry.cmd}");
                        break;
                    }
                }
                else
                {
                    i++;
                        continue;
                }
            }
        }

        [ConsoleCommand("UI_CCPanel")]
        private void cmdUI_CCPanel(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (arg.Args[0] == "yes")
                CCPanel(player, "edit");
            else if (arg.Args[0] == "no")
                CCPanel(player);
        }

        [ConsoleCommand("UI_RemoveCommand")]
        private void cmdUI_RemoveCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            int index = Convert.ToInt16(arg.Args[0]);
            var i = 0;
            foreach (var entry in ccData.PlayerCommands[player.userID])
                if (i == index)
                {
                    ccData.PlayerCommands[player.userID].Remove(entry);
                    break;
                }
                else i++;
            CCPanel(player, "edit");
        }

        

        [ConsoleCommand("UI_SavePanel")]
        private void cmdUI_SavePanel(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            ccData.ForceCommands.Clear();
            foreach (var entry in ccData.PlayerCommands[player.userID])
                ccData.ForceCommands.Add(entry);
            GetSendMSG(player, "BarSaved");
            SaveData();
        }

        [ConsoleCommand("UI_ForcePanel")]
        private void cmdUI_ForcePanel(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (ForceBar)
            {
                ForceBar = false;
            }
            else
            {
                ForceBar = true;
            }
            foreach (BasePlayer p in BasePlayer.activePlayerList)
                CCPanel(p);
        }


        [ConsoleCommand("UI_CreateCommand")]
        private void cmdUI_CreateCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            CreateCommand(player);
        }

        [ConsoleCommand("UI_AddCommand")]
        private void cmdUI_AddCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            CreateCommand(player, 10);
        }

        [ConsoleCommand("UI_AddPlayerCommand")]
        private void cmdUI_AddPlayerCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            int index = Convert.ToInt16(arg.Args[0]);
            var i = 0;
            foreach (var entry in ccData.AdminCommands)
                if (i == index)
                {
                    ccData.PlayerCommands[player.userID].Add(entry);
                    break;
                }
                else i++;
            DestroyCreationPanel(player);
            CCPanel(player);
        }
        

        [ConsoleCommand("UI_SetType")]
        private void cmdUI_SetType(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            cmdCreation[player.userID].cmd.type = arg.Args[0];
            cmdCreation[player.userID].step = 1;
            CreateCommand(player, 1);
        }

        [ConsoleCommand("UI_SetImg")]
        private void cmdUI_SetImg(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            uint img = Convert.ToUInt32(arg.Args[0]);
            cmdCreation[player.userID].cmd.img = img;
            CreateCommand(player, 99);
        }
        

        [ConsoleCommand("UI_SaveCommand")]
        private void cmdUI_SaveCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            ccData.PlayerCommands[player.userID].Add(cmdCreation[player.userID].cmd);
            cmdCreation.Remove(player.userID);
            DestroyCreationPanel(player);
            GetSendMSG(player, "NewCommand");
            CCPanel(player);
        }

        [ConsoleCommand("UI_SavePlayerCommand")]
        private void cmdUI_SavePlayerCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            ccData.AdminCommands.Add(cmdCreation[player.userID].cmd);
            GetSendMSG(player, "NewPlayerCommand");
        }
        

        [ConsoleCommand("UI_CancelCommand")]
        private void cmdUI_CancelCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (cmdCreation.ContainsKey(player.userID))
                cmdCreation.Remove(player.userID);
            DestroyCreationPanel(player);
            GetSendMSG(player, "CanceledCmdCreation");
        }

        #endregion

        #region Timers

        private void SaveLoop()
        {
            if (timers.ContainsKey("save"))
            {
                timers["save"].Destroy();
                timers.Remove("save");
            }
            SaveData();
            timers.Add("save", timer.Once(600, () => SaveLoop()));
        }

        private void InfoLoop()
        {
            if (timers.ContainsKey("info"))
            {
                timers["info"].Destroy();
                timers.Remove("info");
            }
            if (configData.InfoInterval == 0) return;
            foreach (BasePlayer p in BasePlayer.activePlayerList)
            {
                if (!configData.AdminOnlyButtons)
                    GetSendMSG(p, "CCInfo", configData.OptionsKeyBinding);
                else if (isAuth(p))
                    GetSendMSG(p, "CCInfo", configData.OptionsKeyBinding);
            }
            timers.Add("info", timer.Once(configData.InfoInterval * 60, () => InfoLoop()));
        }

        private void SetBoxFullNotification(string ID)
        {
            timers.Add(ID, timer.Once(5 * 60, () => timers.Remove(ID)));
        }

        #endregion

        #region Classes
        class CustomCommandData
        {
            public Dictionary<string, uint> SavedImages = new Dictionary<string, uint>();
            public List<uint> ButtonImages = new List<uint>();
            public List<Command> ForceCommands = new List<Command>();
            public List<Command> AdminCommands = new List<Command>();
            public Dictionary<ulong, List<Command>> PlayerCommands = new Dictionary<ulong, List<Command>>();

        }

        class Command
        {
            public string cmd;
            public string type;
            public uint img;
        }

        class CommandCreation
        {
            public int step = 0;
            public Command cmd;
        }

        #endregion

        #region Unity WWW
        class QueueImage
        {
            public string url;
            public string name;
            public QueueImage(string st, string ur)
            {
                name = st;
                url = ur;
            }
        }

        class CCImages : MonoBehaviour
        {
            CustomCommands filehandler;
            const int MaxActiveLoads = 3;
            static readonly List<QueueImage> QueueList = new List<QueueImage>();
            static byte activeLoads;
            private MemoryStream stream = new MemoryStream();

            public void SetDataDir(CustomCommands cc) => filehandler = cc;
            public void Add(string name, string url)
            {
                QueueList.Add(new QueueImage(name, url));
                if (activeLoads < MaxActiveLoads) Next();
            }

            void Next()
            {
                activeLoads++;
                var qi = QueueList[0];
                QueueList.RemoveAt(0);
                var www = new WWW(qi.url);
                StartCoroutine(WaitForRequest(www, qi));
            }

            private void ClearStream()
            {
                stream.Position = 0;
                stream.SetLength(0);
            }

            IEnumerator WaitForRequest(WWW www, QueueImage info)
            {
                yield return www;

                if (www.error == null)
                {
                    if (!filehandler.ccData.SavedImages.ContainsKey(info.name))
                    {
                        ClearStream();
                        stream.Write(www.bytes, 0, www.bytes.Length);
                        uint textureID = FileStorage.server.Store(stream, FileStorage.Type.png, uint.MaxValue);
                        ClearStream();
                        filehandler.ccData.SavedImages.Add(info.name, textureID);
                    }
                }
                activeLoads--;
                if (QueueList.Count > 0) Next();
                else filehandler.SaveData();
            }
        }

        [ConsoleCommand("getUIimages")]
        private void cmdgetimages(ConsoleSystem.Arg arg)
        {
            if (arg.connection == null)
            {
                Getimages();
            }
        }

        private void Getimages()
        {
            ccData.SavedImages.Clear();
                    foreach (var item in urls)
                    {
                        if (!string.IsNullOrEmpty(item.Value))
                        {
                            ccImage.Add(item.Key, item.Value);
                        }
                    }
            Puts(GetLang("ImgReload"));
        }

        [ConsoleCommand("checkUIimages")]
        private void cmdrefreshimages(ConsoleSystem.Arg arg)
        {
            if (arg.connection == null)
            {
                Refreshimages();
            }
        }

        private void Refreshimages()
        {

            foreach (var item in urls)
                if (!ccData.SavedImages.ContainsKey(item.Key))
                    if (!string.IsNullOrEmpty(item.Value))
                    {
                        ccImage.Add(item.Key, item.Value);
                    }
            Puts(GetLang("ImgRefresh"));
        }

        class QueueAdminImage
        {
            public string url;
            public QueueAdminImage(string ur)
            {
                url = ur;
            }
        }

        class buttonImage : MonoBehaviour
        {
            CustomCommands filehandler;
            const int MaxActiveLoads = 3;
            static readonly List<QueueAdminImage> QueueList = new List<QueueAdminImage>();
            static byte activeLoads;
            private MemoryStream stream = new MemoryStream();

            public void SetDataDir(CustomCommands cc) => filehandler = cc;
            public void Add(string url)
            {
                QueueList.Add(new QueueAdminImage(url));
                if (activeLoads < MaxActiveLoads) Next();
            }

            void Next()
            {
                activeLoads++;
                var qi = QueueList[0];
                QueueList.RemoveAt(0);
                var www = new WWW(qi.url);
                StartCoroutine(WaitForRequest(www, qi));
            }

            private void ClearStream()
            {
                stream.Position = 0;
                stream.SetLength(0);
            }

            IEnumerator WaitForRequest(WWW www, QueueAdminImage info)
            {
                yield return www;

                if (www.error == null)
                {
                        ClearStream();
                        stream.Write(www.bytes, 0, www.bytes.Length);
                        uint textureID = FileStorage.server.Store(stream, FileStorage.Type.png, uint.MaxValue);
                        ClearStream();
                        filehandler.ccData.ButtonImages.Add(textureID);
                }
                activeLoads--;
                if (QueueList.Count > 0) Next();
                else filehandler.SaveData();
            }
        }

        [ConsoleCommand("getserverimages")]
        private void cmdgetserverimages(ConsoleSystem.Arg arg)
        {
            if (arg.connection == null)
            {
                GetServerImages();
            }
        }

        private void GetServerImages()
        {
            try
            {
                bimages = BImages.ReadObject<ButtonImages>();
            }
            catch
            {
                Puts("Couldn't Find a Server Admin Button Image Load File, creating a new File");
                bimages = new ButtonImages();
                bimages.AdminImages = defaultButtonImages;
                BImages.WriteObject(bimages);
            }
            if (ccData.ButtonImages == null || ccData.ButtonImages.Count == 0)
            {
                foreach (var entry in defaultButtonImages)
                {
                    bimages.AdminImages.Add(entry);
                }
            }
            var i = 0;
            foreach (var entry in bimages.AdminImages)
            {
                bImage.Add(entry);
                i++;

            }
            bimages.AdminImages.Clear();
            timer.Once(10, () =>
            {
                SaveServerImages();
                Puts(GetMSG("ButtonImagesAdded", i.ToString()));
            });

        }

        private void SaveServerImages()
        {
            CCData.WriteObject(ccData);
            BImages.WriteObject(bimages);
        }

        #endregion

        #region Custom Commands Data Management

        private Dictionary<string, string> urls = new Dictionary<string, string>
        {
            { "FIRST", "http://cdn.mysitemyway.com/etc-mysitemyway/icons/legacy-previews/icons/simple-black-square-icons-arrows/126517-simple-black-square-icon-arrows-double-arrowhead-left.png" },
            { "BACK", "https://image.freepik.com/free-icon/back-left-arrow-in-square-button_318-76403.png" },
            { "NEXT", "https://image.freepik.com/free-icon/right-arrow-square-button-outline_318-76302.png" },
            { "LAST", "http://cdn.mysitemyway.com/etc-mysitemyway/icons/legacy-previews/icons/matte-white-square-icons-arrows/124577-matte-white-square-icon-arrows-double-arrowhead-right.png" },
            { "BlueLongButton", "https://pixabay.com/static/uploads/photo/2016/01/23/11/41/button-1157299_960_720.png" },
            { "RedLongButton", "https://pixabay.com/static/uploads/photo/2016/01/23/11/42/button-1157301_960_720.png" },
            { "BlackLongButton", "https://pixabay.com/static/uploads/photo/2016/01/23/11/26/button-1157269_960_720.png" },
            { "GreenLongButton", "https://pixabay.com/static/uploads/photo/2015/07/25/08/03/the-button-859349_960_720.png" },
            { "PurpleLongButton", "https://pixabay.com/static/uploads/photo/2015/07/25/07/55/the-button-859343_960_720.png" },
            { "GreenSquareButton", "http://www.pd4pic.com/images/libya-flag-country-nationality-square-button.png" },
            { "RedSquareButton", "https://openclipart.org/image/2400px/svg_to_png/78601/Red-button.png" },
            { "BlueSquareButton", "http://downloadicons.net/sites/default/files/yellow-blue-crystal-icon-style-rectangular-button-32172.png" },
            { "OrangeSquareButton", "http://downloadicons.net/sites/default/files/orange-button,-square-icons-32177.png" },            
        };

        private List<string> defaultButtonImages = new List<string>
        {
            { "https://pixabay.com/static/uploads/photo/2016/01/23/11/41/button-1157299_960_720.png" },
            { "https://pixabay.com/static/uploads/photo/2016/01/23/11/42/button-1157301_960_720.png" },
            { "https://pixabay.com/static/uploads/photo/2016/01/23/11/26/button-1157269_960_720.png" },
            { "https://pixabay.com/static/uploads/photo/2015/07/25/08/03/the-button-859349_960_720.png" },
            { "https://pixabay.com/static/uploads/photo/2015/07/25/07/55/the-button-859343_960_720.png" },
            { "http://www.pd4pic.com/images/libya-flag-country-nationality-square-button.png" },
            { "https://openclipart.org/image/2400px/svg_to_png/78601/Red-button.png" },
            { "http://downloadicons.net/sites/default/files/yellow-blue-crystal-icon-style-rectangular-button-32172.png" },
            { "http://downloadicons.net/sites/default/files/orange-button,-square-icons-32177.png" },
        };

        void SaveData()
        {
            CCData.WriteObject(ccData);
        }

        void LoadData()
        {
            try
            {
                ccData = CCData.ReadObject<CustomCommandData>();
            }
            catch
            {
                Puts("Couldn't load the CustomCommands Data, creating a new datafile");
                ccData = new CustomCommandData();
            }
        }

        #endregion

        #region Config        
        private ConfigData configData;
        class ConfigData
        {
            public int InfoInterval { get; set; }
            public string OptionsKeyBinding { get; set; }
            public bool AdminOnlyButtons { get; set; }
            public bool AdminCreatesButtons { get; set; }
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                InfoInterval = 15,
                OptionsKeyBinding = "h",
                AdminOnlyButtons = false,
                AdminCreatesButtons = false,
            };
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region Messages
        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "CustomCommands: " },
            {"CCInfo", "This server is running CustomCommands. Type /cc to open your personal CC Menu! Pressing '{0}' enables a player to enter 'Mouse Look Mode' to click buttons."},
            {"Next", "Next" },
            {"Back", "Back" },
            {"First", "First" },
            {"Last", "Last" },
            {"Close", "Close"},
            {"Quit", "Quit"},
            {"ImgReload", "Images have been wiped and reloaded!" },
            {"ImgRefresh", "Images have been refreshed !" },
            {"Delete", "Delete" },
            {"Remove", "Remove" },
            {"SelectaCMDType", "Please Select a Command Type" },
            {"CHAT" , "CHAT Command" },
            {"CONSOLE" , "CONSOLE Command" },
            {"NewCMDInfo", "New Command Info:\nCommand Type: {0}\nCommand: {1}" },
            {"SaveCommand", "Save Command?" },
            {"CancelCommand", "Cancel Command?" },
            {"ProvideAChatCommand", "Please Provide a Chat Command but leave the '/' out. For example, to create a Chat Command for this plugin type cc to create a button that opens /cc" },
            {"ProvideAConsoleCommand", "Please Provide a Console Command" },
            {"CanceledCmdCreation", "You have successfully cancelled Command Creation " },
            {"NewCommand", "You have successfully created a new command!" },
            {"NewPlayerCommand", "You have successfully created a new Player Command!" },           
            {"ExitEraseMode", "Exit Erase Mode" },
            {"ButtonImagesAdded", "You have successfully added {0} button images." },
            {"BarSaved", "You have successfully saved this CustomCommands bar configuration. Click 'Force CC' to set all players with this bar" },
            {"ForceBar", "Force CC" },
            {"SaveBar", "Save CC" },
            {"SavePlayerCommand", "Save Player Command" },
            {"NotAuth", "You are not authorized to use this command" },
            {"InvalidFormat", "Invalid Command: try '/cc clear all' or '/cc clear players'" }
        };
        #endregion
    }
}


// --- End of file: CustomCommands.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Payback2.cs ---
// --- Original Local Path: Payback2.cs ---

﻿
using Oxide.Core;
using System.Collections.Generic;
using UnityEngine;
using System.Collections;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using System;
using System.Linq;
using Oxide.Core.Plugins;
using Newtonsoft.Json;
using System.Text.RegularExpressions;
using Oxide.Core.Libraries.Covalence;
using Rust;
using Rust.Ai;
using Network;

///Скачано с дискорд сервера Rust Edit [PRO+]
///discord.gg/9vyTXsJyKR

namespace Oxide.Plugins
{
    [Info("Payback2", "discord.gg/9vyTXsJyKR", "1.3.7")]
    [Description("Special Admin Commands To Mess With Cheaters")]
    class Payback2 : RustPlugin
    {
        //| =============================================
        //| CHANGELOG
        //| =============================================

        //| 1.3.7
        //| - Added SPITROAST command

        //| 1.3.6
        //| - Updated for Jan 28 new year content

        //| 1.3.5
        //| - attempt to fix wounded NRE in hog

        //| 1.3.4
        //| - added INTERROGATE command
        //| - hog now attempts to keep player's wearables in their inventory

        [PluginReference] Plugin Payback;//| reference to the original payback plugin

        [PluginReference] private Plugin ImageLibrary;//| Optional reference to ImageLibrary

        //| Hello!

        //| This is Payback 2!  To make sure you can use this plugin on its own, it comes with some essential features from Payback 1!
        //| If you want to have classic admin commands like ROCKETMAN, JAWS, and BSOD, please purchase Payback 1 at https://payback.fragmod.com


        //| TUTORIAL:
        //| admins require the permission payback.admin to use this plugin
        //| this oxide command works for that: oxide.grant group admin payback.admin
        //| put 'payback' in the F1 or server console to see the tutorial!


        //| =========

        //| ===================

        //| ==============================================================================
        //| TOMMYGUN'S EULA - BY USING THIS PLUGIN YOU AGREE TO THE FOLLOWING!
        //| ==============================================================================
        //| 
        //| Code contained in this file is not licensed to be copied, resold, or modified in any way.
        //| You must purchase another copy of the plugin for each server instance you would like to deploy on.  Migration is allowed.
        //| Do not copy any portion of this document.
        //| Do not share this plugin with other server organizations, they much purchase their own licenses.
        //|
        //| =======================================

        //| ===================

        //| =========

        //| 1928TOMMYGUN
        //MMMMMMMMMMMMMMMMMMMMMMMMWNO::loll::kKKXXXXXXXXXXKXXKx;o000000KKKKNWWWWWWWWWWWWWWWWWWMMMMMMWWXxkNNNNN
        //MMMMMMMMMMMMMMMMMMMMMMMMKc,.......................... ...........'',,,,,,,,,,,,,,,,,;;;;;;;;:..,'''.
        //MMMMMMMMMMMMMMMMMMMMMMMMXc',,;;;;;;;;;;;;;;;;;;;,.         ',''',;:::::::::::::clldxxxxxxxxxxooocccc
        //MMMMMMMMMMMMMMNXK00KXKOdc;'',;:;,,;lxddl::,;::;'.',..''   .kWNNNK:...',,........'oXMMMMMMMMMMMMMMMMM
        //MMMMWNX0Oxol:;'.......       :Oc  .xMMMKc....','.;ool,..  .OMMMMNxcdO0KKo.      lNMMMMMMMMMMMMMMMMMM
        //Odlc;'..                     .:,';xNMMWk.     ;xoxXXx'..   cXMMMMMMMMMWO:     .;OMMMMMMMMMMMMMMMMMMM
        //.                     ';:clodxO0XWMMMXo.    .:x000KK0Ol.   .xMMMMMMMW0:.    .:0WWMMMMMMMMMMMMMMMMMMM
        //.                 .,lONMMMMMMMMMMMMMX:     ,0WMMMMMMMMx.cXMMMMMMMK,     'kNWMMMMMMMMMMMMMMMMMMMMMMMM
        //'              .;o0NMMMMMMMMMMMMMMMMk.    .oWMMMMMMMMMx.  .OMMMMMMMMNl    ,OWMMMMMMMMMMMMMMMMMMMMMMM
        //'           .:xKWMMMMMMMMMMMMMMMMMMMNd.  .oNMMMMMMMMMMx.  .OMMMMMMMMMNkl::kWMMMMMMMMMMMMMMMMMMMMMMMM
        //.       .,lkXMMMMMMMMMMMMMMMMMMMMMMMMMXOdxXMMMMMMMMMMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
        //.   .,lkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXOkkONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
        //: .l0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM



        //| ==============================================================
        //| Definitions
        //| ==============================================================

        public enum Card
        {
            Pacifism = 0,//zeros all outgoing damage from target player
            InstantKarma = 4,//reflects damage back to the player
            Dud = 5,//prevents damage to non-player entities
            Sit = 8,//force player to sit
            HigherGround = 11,//target player is teleported 100m into the air
            NoRest, // No Rest For The Wicked! Force the player to respawn!
            ViewLoot, // View target entities loot
            Hammer, // hammer - gives target player a hammer that will destroy all the entities owned by the hammer's target
            Bag, // Bag - Print all players that have bagged target player in, and print all players that have been bagged.  Include "discord" after the command to log the results to discord
            
            //| Payback 2
            Woods, // Woods - If you go down to the woods today, be ready for big surprise!
            PotatoMode, // PotatoMode - Target's frame rate will decrease dramatically over time - Warning, this is designed to eventually crash Rust
            Hogwild, // Hogwild - Ride the cheater around like a pig! REEE!
            Interrogate, // Interrogate - Throw a hood over the cheater's head, force them to spill their secrets! They can't see anything unless they speak!!
            Spitroast, // Spitroast - Stick 'em with the pointy end and feast on their tears.  Roast the cheater roticery style over the fire!
        }

        Dictionary<Card, string> descriptions = new Dictionary<Card, string>() {
            {Card.Dud, "target player deals no damage to NON-PLAYER entities.  Also prevents farming / tool use" },
            {Card.InstantKarma, "target player deals no damage to enemies and 35% of the damage is reflected back to them" },
            {Card.Pacifism, "target player deals no player damage to non-teammates; add 'silent' to not send a message about it to other players." },
            {Card.Sit, "spawns a chair in front of you and forces the cheater to sit.  Doesn't let them get up and will place them back in if they die." },
            {Card.HigherGround, "target player is teleported 100m into the air" },
            {Card.NoRest, "No Rest For The Wicked! Force the player to respawn when they die!" },
            {Card.ViewLoot, "View target player's loot" },
            {Card.Hammer, "Gives admin a hammer that will destroy all the entities owned by the hammer's target.  Add -noloot to also delete the loot" },
            {Card.Bag, "Print all players that have bagged target player in, and print all players that have been bagged.  Include \"discord\" after the command to log the results to discord" },
            
            //| Payback 2
            {Card.Woods, "Target will get attacked by a bear if he's farming wood or stone.  Add 'landmine' to strap a bunch of landmines to the bear's face" },
            {Card.PotatoMode, "Target's frame rate will decrease dramatically over time. -- *Warning, this is designed to crash Rust*" },
            {Card.Hogwild, "Ride the cheater around like a pig! REEE!" },
            {Card.Interrogate, "Throw a hood over the cheater's head, force them to spill their secrets! They can't see anything unless they speak!! Supports spectate mode!" },
            {Card.Spitroast, "Stick 'em with the pointy end and feast on their tears.  Roast the cheater roticery style over the fire!" },
        };

        Dictionary<string, Card> cardAliases = new Dictionary<string, Card>() {
            { "dud", Card.Dud },
            { "in", Card.InstantKarma},
            { "pf", Card.Pacifism},
            { "hg", Card.HigherGround},
            { "nr", Card.NoRest},
            { "res", Card.NoRest},
            { "loot", Card.ViewLoot},
            { "ham", Card.Hammer},
            { "bg", Card.Bag},

            //| Payback 2
            { "bear", Card.Woods},
            { "potato", Card.PotatoMode},
            { "hog", Card.Hogwild},
            { "sack", Card.Interrogate},
            { "roast", Card.Spitroast},
        };



        //| ==============================================================
        //| Giving
        //| ==============================================================
        public void GiveCard(ulong userID, Card card, string[] args = null, BasePlayer admin = null)
        {
            HashSet<Card> cards;
            if (!cardMap.TryGetValue(userID, out cards))
            {
                cards = new HashSet<Card>();
                cardMap[userID] = cards;
            }
            cards.Add(card);
            //Puts($"Payback card {card} given to {userID}");

            BasePlayer player = BasePlayer.FindByID(userID);
            if (player != null)
            {

                if (card == Card.Sit)
                {
                    DoSitCommand(player, admin);
                }
                else if (card == Card.HigherGround)
                {
                    DoHigherGround(player);
                }
                else if (card == Card.Pacifism)
                {
                    silentPacifism = false;
                    if (args != null)
                    {
                        if (args.Contains("silent"))
                        {
                            silentPacifism = true;
                        }
                    }
                } else if (card == Card.NoRest)
                {
                    if (player.IsDead())
                    {
                        player.Respawn();
                    }
                } else if (card == Card.ViewLoot)
                {
                    ViewTargetPlayerInventory(player, admin);
                    TakeCard(player, Card.ViewLoot);
                } else if (card == Card.Hammer)
                {
                    GiveAdminHammer(player);
                    if (args.Contains("noloot"))
                    {
                        flag_kill_no_loot = true;
                        PrintToPlayer(admin, $"Hammer set to remove loot!");
                    } else
                    {
                        flag_kill_no_loot = false;
                    }
                } else if (card == Card.Woods)
                {
                    if (args.Contains("landmine"))
                    {
                        woodsHasLandmines.Add(player.userID);
                    } else
                    {
                        woodsHasLandmines.Remove(player.userID);
                    }
                } else if (card == Card.PotatoMode)
                {
                    DoPotato(player, admin, args);
                } else if (card == Card.Hogwild)
                {
                    DoHog(player, admin, args);
                } else if (card == Card.Interrogate)
                {
                    DoInterrogate(player, admin, args);
                } else if (card == Card.Spitroast)
                {
                    DoSpitroastCommand(player, admin);
                }
                
            }


        }

        bool silentPacifism = false;


        //| ==============================================================
        //| COMMAND Implementation
        //| ==============================================================


        public void Line(BasePlayer player, Vector3 from, Vector3 to, Color color, float duration)
        {
            player.SendConsoleCommand("ddraw.line", duration, color, from, to);
        }

        #region Spitroast

        public Dictionary<ulong, HashSet<BaseEntity>> roastEntities = new Dictionary<ulong, HashSet<BaseEntity>>();
        void DoSpitroastCommand(BasePlayer targetPlayer, BasePlayer adminPlayer)
        {
            if (targetPlayer == null) return;

            //if (!HasCard(targetPlayer.userID, Card.Spitroast))
            //{
            //    ResolveConflictingCommands(targetPlayer, adminPlayer);
            //}

            if (HasCard(targetPlayer.userID, Card.Spitroast))
            {
                if (adminPlayer == null) return;

                if (targetPlayer.isMounted)
                {
                    targetPlayer.GetMounted().DismountPlayer(targetPlayer, true);

                    var car = targetPlayer.GetMountedVehicle();
                    if (car != null)
                    {
                        car.Kill(BaseNetworkable.DestroyMode.Gib);
                    }

                    BaseEntity chair = null;
                    if (sitChairMap.TryGetValue(targetPlayer.userID, out chair))
                    {
                        chair?.Kill();
                    }
                }

                RaycastHit hitinfo;
                if (Physics.Raycast(adminPlayer.eyes.HeadRay(), out hitinfo, 50))
                {
                    Worker.StaticStartCoroutine(RoastCo(targetPlayer, adminPlayer, hitinfo));
                }

            }
            else
            {
                BaseEntity chair = null;
                if (sitChairMap.TryGetValue(targetPlayer.userID, out chair))
                {
                    if (chair != null)
                    {
                        chair.Kill();
                    }
                }

                HashSet<BaseEntity> roasted = null;
                if (roastEntities.TryGetValue(targetPlayer.userID, out roasted))
                {
                    foreach (var r in roasted)
                    {
                        r?.Kill();
                    }
                    roastEntities.Remove(targetPlayer.userID);
                    roasted.Clear();
                }
            }
        }

        IEnumerator RoastCo(BasePlayer targetPlayer, BasePlayer adminPlayer, RaycastHit hitinfo)
        {

            HashSet<BaseEntity> roasted = null;
            if (!roastEntities.TryGetValue(targetPlayer.userID, out roasted))
            {
                roasted = new HashSet<BaseEntity>();
                roastEntities[targetPlayer.userID] = roasted;
            }
            Vector3 lookAtPosition = adminPlayer.transform.position;

            targetPlayer.Teleport(hitinfo.point);

            var chair = InvisibleSit(targetPlayer);
            sitChairMap[targetPlayer.userID] = chair;
            targetPlayer.EndSleeping();

            GameObject.DestroyImmediate(chair.GetComponentInChildren<DestroyOnGroundMissing>());
            GameObject.DestroyImmediate(chair.GetComponentInChildren<GroundWatch>());

            lookAtPosition.y = chair.transform.position.y;

            chair.transform.LookAt(lookAtPosition);

            //| Stick em with the spear
            var spearItem = ItemManager.CreateByName("spear.stone");
            var droppedSpear = spearItem.Drop(targetPlayer.transform.position + Vector3.down * 0.25f, Vector3.zero) as DroppedItem;
            droppedSpear.transform.position += chair.transform.forward * -0.05f;
            droppedSpear.GetComponent<Rigidbody>().isKinematic = true;
            droppedSpear.GetComponent<Rigidbody>().useGravity = false;
            droppedSpear.GetComponent<Rigidbody>().velocity = Vector3.zero;
            droppedSpear.allowPickup = false;
            SetDespawnDuration(droppedSpear, 1000000);
            roasted.Add(droppedSpear);
            droppedSpear.transform.Rotate(droppedSpear.transform.right, 90);
            //droppedSpear.transform.LookAt(droppedSpear.transform.position + Vector3.down);



            Item muzzle = ItemManager.CreateByPartialName("muzzlebrake");
            var droppedMuzzle = muzzle.Drop(targetPlayer.transform.position + Vector3.up * 0.75f, Vector2.zero);
            DroppedItem droppedItem = droppedMuzzle as DroppedItem;

            droppedItem.allowPickup = false;
            droppedItem.GetComponent<Rigidbody>().collisionDetectionMode = CollisionDetectionMode.ContinuousSpeculative;
            droppedItem.GetComponent<Rigidbody>().isKinematic = true;
            droppedItem.GetComponent<Rigidbody>().useGravity = false;
            if (droppedItem != null)
            {
                SetDespawnDuration(droppedItem, float.MaxValue);
            }
            roasted.Add(droppedMuzzle);

            //droppedMuzzle.transform.LookAt(lookAtPosition);

            //droppedSpear.SetParent(chair, true, true);
            chair.SetParent(droppedMuzzle, true, true);
            droppedSpear.SetParent(droppedMuzzle, true, true);

            droppedMuzzle.transform.Rotate(droppedMuzzle.transform.forward, 90);

            //| come up off the ground a bit
            droppedMuzzle.transform.position += Vector3.up * 0.3f;


            //| spawn the campfire.
            var campfire = GameManager.server.CreateEntity("assets/prefabs/deployable/campfire/campfire.prefab", hitinfo.point);
            campfire.Spawn();
            roasted.Add(campfire);
            //campfire.GetComponent<StabilityEntity>().grounded = true;
            //var campfireContainer = campfire as StorageContainer;
            campfire.SetFlag(BaseEntity.Flags.Locked, true, true, true);
            var oven = campfire as BaseOven;
            oven.StartCooking();

            yield return null;


            //| extra bits

            var spearItem2 = ItemManager.CreateByName("spear.stone");
            var droppedSpear2 = spearItem2.Drop(droppedSpear.transform.position + Vector3.down * 1.8f, Vector3.zero) as DroppedItem;
            droppedSpear2.GetComponent<Rigidbody>().isKinematic = true;
            droppedSpear2.GetComponent<Rigidbody>().useGravity = false;
            droppedSpear2.GetComponent<Rigidbody>().velocity = Vector3.zero;
            droppedSpear2.allowPickup = false;
            SetDespawnDuration(droppedSpear2, 1000000);
            roasted.Add(droppedSpear2);
            droppedSpear2.transform.LookAt(droppedSpear2.transform.position + Vector3.down);


            var spearItem3 = ItemManager.CreateByName("spear.stone");
            var droppedSpear3 = spearItem3.Drop(droppedSpear.transform.position + Vector3.down * 1.8f + droppedSpear.transform.forward * -1.8f, Vector3.zero) as DroppedItem;
            droppedSpear3.GetComponent<Rigidbody>().isKinematic = true;
            droppedSpear3.GetComponent<Rigidbody>().useGravity = false;
            droppedSpear3.GetComponent<Rigidbody>().velocity = Vector3.zero;
            droppedSpear3.allowPickup = false;
            SetDespawnDuration(droppedSpear3, 1000000);
            roasted.Add(droppedSpear3);
            droppedSpear3.transform.LookAt(droppedSpear3.transform.position + Vector3.down);


            var target = droppedMuzzle;
            float roastSpeed = 1.5f;
            while (target != null && targetPlayer != null && HasCard(targetPlayer.userID, Card.Spitroast))
            {
                //Line(targetPlayer, target.transform.position, target.transform.position + chair.transform.forward, Color.red, Time.fixedDeltaTime);
                
                //target.transform.Rotate(target.transform.right, roastSpeed);
                //target.transform.Rotate(target.transform.up, roastSpeed);
                //target.transform.Rotate(target.transform.forward, roastSpeed);


                target.transform.Rotate(target.transform.up, roastSpeed, Space.World);

                oven.StartCooking();
                

                //target.SendNetworkUpdate();
                yield return new WaitForFixedUpdate();
            }

            droppedSpear?.Kill();
            chair?.Kill();
            droppedSpear2?.Kill();
            droppedSpear3?.Kill();
            droppedMuzzle?.Kill();
            campfire?.Kill();

            if (targetPlayer != null)
            {
                TakeCard(targetPlayer.userID, Card.Spitroast);
            }

        }

        #endregion

        #region Interrogate


        string interrogate_open_url = "https://i.imgur.com/EBAoy53.png";
        string interrogate_closed_url = "https://i.imgur.com/Dokk9TO.png";
        string guid_interrogate = "guid_interrogate";
        Dictionary<ulong, bool> interrogationState = new Dictionary<ulong, bool>();
        Dictionary<ulong, Item> interrogationMasks = new Dictionary<ulong, Item>();
        Dictionary<ulong, HashSet<ulong>> interrogationSpectators = new Dictionary<ulong, HashSet<ulong>>();
        void DoInterrogate(BasePlayer player, BasePlayer admin = null, string[] args = null, bool removeCard = false, bool open = false) {

            //| ===================================
            //| BASE UI SETUP
            //| ===================================
            if (player.net.connection == null) return;


            //| don't update image if we're in the correct state.
            bool existingState = GetInterrogationState(player.userID);
            if (open && existingState == open && !removeCard) return;

            interrogationState[player.userID] = open;

            if (!open)
            {
                bool existingMask = false;
                foreach (var item in player.inventory.containerWear.itemList.ToArray())
                {
                    if (item.info.itemid == ItemManager.FindItemDefinition("mask.balaclava").itemid && item.skin == 10139)
                    {
                        existingMask = true;
                        interrogationMasks[player.userID] = item;
                        break;
                    }
                    var x = item.info.GetComponent<global::ItemModWearable>();
                    bool headGear = x.ProtectsArea(HitArea.Head);
                    if (headGear)
                    {
                        bool success = item.MoveToContainer(player.inventory.containerMain);
                        if (!success)
                        {
                            item.Drop(player.transform.position + Vector3.up, Vector3.up);
                        }
                    }

                }

                if (!existingMask)
                {
                    var mask = ItemManager.CreateByName("mask.balaclava", 1, 10139);
                    GiveItemOrDrop(player, mask, false);
                    interrogationMasks[player.userID] = mask;
                }

            } else {

                if (interrogationMasks.ContainsKey(player.userID))
                {
                    var mask = interrogationMasks[player.userID];
                    if (mask != null)
                    {
                        mask.RemoveFromContainer();
                        mask.Remove();
                        interrogationMasks.Remove(player.userID);
                    }
                }
            }
            

            if (removeCard)
            {
                Unsubscribe("OnPlayerVoice");
                interrogationState.Remove(player.userID);

                if (interrogationMasks.ContainsKey(player.userID))
                {
                    var mask = interrogationMasks[player.userID];
                    if (mask != null)
                    {
                        mask.RemoveFromContainer();
                        mask.Remove();
                        interrogationMasks.Remove(player.userID);
                    }
                }

            } else
            {
                Subscribe("OnPlayerVoice");
            }

            UpdateInterrogateUI(player, open, removeCard);

            var spectators = player.GetComponentsInChildren<BasePlayer>();
            foreach (var spectator in spectators)
            {
                if (spectator != player)
                {
                    UpdateInterrogateUI(spectator, open, removeCard);
                }
            }
        }
        bool GetInterrogationState(ulong userid)
        {
            bool existingState;
            interrogationState.TryGetValue(userid, out existingState);
            return existingState;
        }
        void UpdateInterrogateUI(BasePlayer player, bool open, bool remove = false)
        {
            Puts($"OnPlayerSpectate | UpdateInterrogateUI {player}");

            string guid = guid_interrogate;
            UI2.guids.Add(guid);

            var elements = new CuiElementContainer();
            CuiHelper.DestroyUi(player, guid);

            if (remove) return;

            //| ===================================
            //| Bounds definitions
            //| ===================================
            float fade = 0.2f;

            Vector4 mainBounds = UI2.vectorFullscreen;
            UI2.CreatePanel(elements, "Overlay", guid, "1 1 1 0", mainBounds, null, false, 0, 0);

            //| ===================================
            //| Static elements
            //| ===================================
            string url = interrogate_closed_url;
            if (open)
            {
                url = interrogate_open_url;
            }
            if (ImageLibrary == null)
            {
                UI2.CreatePanel(elements, guid, "bg", "1 1 1 1", UI2.vectorFullscreen, url, false, fade, fade, false, false);
            }
            else
            {
                UI2.CreatePanel(elements, guid, "bg", "1 1 1 1", UI2.vectorFullscreen, GetImage(url), false, fade, fade, true, false);
            }

            //send the ui updates
            if (elements.Count > 0)
            {
                CuiHelper.AddUi(player, elements);
            }
        }

        object OnPlayerSpectate(BasePlayer spectator, string targetDisplayName) {

            Puts($"OnPlayerSpectate | {spectator.displayName} -> {targetDisplayName}");

            var player = FindPlayer(targetDisplayName);
            if (player != null)
            {

                Puts($"OnPlayerSpectate 2 | {spectator.displayName} -> {targetDisplayName}");

                BasePlayer targetplayer = player.Object as BasePlayer;
                if (HasCard(targetplayer.userID, Card.Interrogate))
                {
                    Puts($"OnPlayerSpectate 3 | {spectator.displayName} -> {targetDisplayName}");

                    bool existingState = GetInterrogationState(targetplayer.userID);
                    UpdateInterrogateUI(spectator, existingState, false);
                }
            }
            return null; 
        }
        //object CanSpectateTarget(BasePlayer spectator, string targetDisplayName) {
        //    return null;   
        //}      
        object OnPlayerSpectateEnd(BasePlayer spectator, string targetDisplayName) {

            Puts($"OnPlayerSpectateEnd | {targetDisplayName}");

            var player = FindPlayer(targetDisplayName);
            if (player != null)
            {
                BasePlayer targetplayer = player.Object as BasePlayer;
                if (HasCard(targetplayer.userID, Card.Interrogate))
                {
                    CuiHelper.DestroyUi(spectator, guid_interrogate);
                }
            }
            return null;   
        }

        object OnPlayerRecover(BasePlayer player)
        {
            if (HasCard(player.userID, Card.Hogwild))
            {
                return false;
            }
            return null;
        }

        Dictionary<ulong, Coroutine> interrogationCooldowns = new Dictionary<ulong, Coroutine>();
        object OnPlayerVoice(BasePlayer player, Byte[] data)
        {
            //Unsubscribe("OnPlayerVoice");
            //Subscribe("OnPlayerVoice");

            //PrintToChat($"{player.displayName} is speaking");
            //Puts($"{player.displayName} is speaking");

            if (HasCard(player.userID, Card.Interrogate))
            {
                DoInterrogate(player, null, null, false, true);

                Coroutine co = null;
                if (interrogationCooldowns.TryGetValue(player.userID, out co))
                {
                    Worker.GetSingleton().StopCoroutine(co);
                }
                co = Worker.StaticStartCoroutine(InterrogationCo(player));
                interrogationCooldowns[player.userID] = co;
            }

            return null;
        }
        IEnumerator InterrogationCo(BasePlayer player)
        {
            yield return new WaitForSeconds(0.45f);
            if (HasCard(player.userID, Card.Interrogate))
            {
                DoInterrogate(player, null, null, false, false);
            }
        }
#endregion

        #region HOG

        object CanLootPlayer(BasePlayer target, BasePlayer looter)
        {
            if (HasCard(target.userID, Card.Hogwild))
            {
                return false;
            }
            return null;
        }

        Dictionary<ulong, List<BaseEntity>> cowboynetworkables = new Dictionary<ulong, List<BaseEntity>>();

        void DoHog(BasePlayer player, BasePlayer admin = null, string[] args = null, bool removeCard = false) {

            if (removeCard)
            {
                List<BaseEntity> existing;
                if (cowboynetworkables.TryGetValue(player.userID, out existing))
                {

                    if (existing != null)
                    {
                        existing.ForEach(x => {
                            x.Kill();
                        });
                        existing.Clear();
                    }
                    cowboynetworkables.Remove(player.userID);
                }

                if (player != null)
                {
                    player.StopWounded();
                }

                return;
            }
            cowboynetworkables[player.userID] = new List<BaseEntity>() { };


            //down target player
            //disabled for testing
            player.BecomeWounded(new HitInfo());
            player.ProlongWounding(100000000000);

            ResolveConflictingCommands(player, admin);

            //|====================================================
            //| create the chair for the person to ride

            var chair = GameManager.server.CreateEntity(invisibleChairPrefab, player.transform.position + Vector3.up * 0.2f);
            var mount = chair as BaseMountable;
            chair.Spawn();

            GameObject.DestroyImmediate(chair.GetComponentInChildren<DestroyOnGroundMissing>());
            GameObject.DestroyImmediate(chair.GetComponentInChildren<GroundWatch>());

            var collider = chair.GetComponentInChildren<Collider>();
            if (collider != null)
            {
                collider.enabled = false;
            }

            cowboynetworkables[player.userID].Add(chair);


            //| muzzlebreak

            Item muzzle = ItemManager.CreateByPartialName("muzzlebrake");
            var dropped = muzzle.Drop(player.transform.position, Vector2.zero);
            DroppedItem droppedItem = dropped as DroppedItem;

            droppedItem.allowPickup = false;
            droppedItem.GetComponent<Rigidbody>().collisionDetectionMode = CollisionDetectionMode.ContinuousSpeculative;
            droppedItem.GetComponent<Rigidbody>().isKinematic = true;
            droppedItem.GetComponent<Rigidbody>().useGravity = false;
            if (droppedItem != null)
            {
                SetDespawnDuration(droppedItem, float.MaxValue);
            }

            Worker.StaticStartCoroutine(DropFollowPlayer(player, droppedItem));

            cowboynetworkables[player.userID].Add(droppedItem);


            //chair.SetParent(player, true, true);
            chair.SetParent(droppedItem, true, true);
            chair.transform.rotation = Quaternion.identity;

            //| make it look like the seated player is above the target
            Worker.StaticStartCoroutine(UpdateSeatedPlayerCo(chair as BaseMountable));

            //| make sure the target doesn't clip into the chair collider
            Worker.StaticStartCoroutine(AlwaysKill(chair, player));

            //Worker.StaticStartCoroutine(AlwaysKill(admin, player));

            //| make the dropped object follow the player without parenting (networking issues)
            Worker.StaticStartCoroutine(ContinuousTP(player, chair));

            //| make the chair face the players direction
            Worker.StaticStartCoroutine(ChairFacingCo(player, droppedItem));
            
            //| show the game tip about being ridden
            Worker.StaticStartCoroutine(HogGameTipCo(player, chair as BaseMountable));



            
            var boarEntity = GameManager.server.CreateEntity("assets/rust.ai/agents/boar/boar.prefab", player.transform.position);
            boarEntity.Spawn();
            cowboynetworkables[player.userID].Add(boarEntity);

            Worker.StaticStartCoroutine(HogSFX(player, boarEntity));
            
            
            //| look the part
            foreach (var item in player.inventory.containerWear.itemList.ToArray())
            {
                bool success = item.MoveToContainer(player.inventory.containerMain);
                if (!success)
                {
                    item.Drop(player.transform.position + Vector3.up, Vector3.zero);
                }
            }

            //GiveItemOrDrop(player, ItemManager.CreateByName("attire.hide.skirt", 1, 793180528), false);
            GiveItemOrDrop(player, ItemManager.CreateByName("mask.balaclava", 1, 10139), false);

        }

        IEnumerator HogSFX(BasePlayer player, BaseEntity boarEntity) {



            float ts = float.NegativeInfinity;

            var boar = boarEntity as Boar;
            boar.enabled = false;
            //boar.StopAllCoroutines();
            boar.NavAgent.enabled = false;
            while (player != null && HasCard(player.userID, Card.Hogwild) && boarEntity != null && !boarEntity.IsDestroyed)
            {
                if (Time.realtimeSinceStartup - ts > 5f)
                {
                    boar.gameObject.SetActive(true);
                    boar.SignalBroadcast(BaseEntity.Signal.Attack);
                    ts = Time.realtimeSinceStartup;
                    boar.gameObject.SetActive(false);

                    PlayGesture(player, "hurry");

                }

                boar.transform.position = player.transform.position + Vector3.down * 3f;
                yield return new WaitForFixedUpdate();
            }
        }

        IEnumerator HogGameTipCo(BasePlayer player, BaseMountable mount) {
            
            while (player != null && mount != null && !mount.IsDestroyed)
            {
                if (mount.IsMounted())
                {
                    CreateGameTip($"{mount.GetMounted().displayName} is riding you like a pig! REEE!!", player, 5, true);
                    //CreateGameTip($"{mount.GetMounted().displayName} is riding you like a pig!", mount.GetMounted(), 5, true);

                    yield return new WaitForSeconds(4.9f);
                }
                else
                {
                    yield return new WaitForSeconds(0.1f);
                }

            }
        }
        IEnumerator UpdateSeatedPlayerCo(BaseMountable mount)
        {
            while (mount != null)
            {
                if (mount.IsMounted())
                {
                    //mount.GetMounted().Teleport(mount.transform.position + Vector3.up * 0.75f);
                    //mount.GetMounted().Teleport(mount.transform.position + Vector3.up * 0.8f);
                    mount.GetMounted().Teleport(mount.transform.position + Vector3.up * 0.95f);

                }
                yield return new WaitForFixedUpdate();
            }
        }
        public void CreateGameTip(string text, BasePlayer player, float length = 30f, bool redColor = false)
        {
            if (player == null)
                return;

            if (redColor)
            {
                player.SendConsoleCommand($"gametip.showtoast {1} \"{text}\"  ");
            }
            else
            {
                player.SendConsoleCommand("gametip.hidegametip");
                player.SendConsoleCommand("gametip.showgametip", text + "  ");
                timer.Once(length, () =>
                {
                    if (player != null)
                    {
                        player.SendConsoleCommand("gametip.hidegametip");
                    }
                }
                );
            }
        }

        IEnumerator DropFollowPlayer(BasePlayer player, DroppedItem item)
        {
            while (player != null && item != null && !item.IsDestroyed)
            {
                item.transform.position = player.transform.position + Vector3.down * 0.1f;
                yield return new WaitForFixedUpdate();
            }
        }

        IEnumerator ChairFacingCo(BasePlayer player, BaseEntity chair)
        {
            while (player != null && chair != null && !chair.IsDestroyed)
            {

                Vector3 facing = player.eyes.HeadForward();
                facing.y = 0;
                facing.Normalize();

                chair.transform.LookAt(chair.transform.position + facing);
                //chair.transform.Rotate(Vector3.up, 72);
                chair.transform.Rotate(Vector3.up, 1);
                chair.SendNetworkUpdate();

                yield return new WaitForFixedUpdate();
            }
        }

        IEnumerator ContinuousTP(BasePlayer player, BaseEntity entity)
        {
            while (player != null && entity != null) {
                if (player.isMounted)
                    player.Teleport(entity.transform.position + Vector3.up * 1f) ;
                yield return new WaitForSeconds(0.25f);
            }
        }

        public void SendToPlayer(BasePlayer player, ulong netid, byte[] data)
        {
            NetWrite write = Net.sv.StartWrite();
            write.PacketID(Message.Type.VoiceData);
            write.UInt64(netid);
            write.BytesWithSize(data);
            write.Send(new SendInfo(player.Connection) { priority = Priority.Immediate });
        }
        IEnumerator AlwaysKill(BaseEntity entity, BasePlayer player)
        {
            List<Network.Connection> cons = new List<Network.Connection>(1);

            while (entity != null && player != null && player.net != null && player.net.connection != null)
            {
                cons.Clear();
                cons.Add(player.net.connection);
                cons.Clear();
                cons.Add(player.net.connection);
                NetWrite write = Net.sv.StartWrite();
                write.PacketID(Message.Type.VoiceData);
                write.UInt64(entity.net.ID.Value);
               // write.BytesWithSize(data);
                write.Send(new SendInfo(cons) { priority = Priority.Immediate });

                //if (Network.Net.sv.write.Start())
                //{
                //    Network.Net.sv.write.PacketID(Message.Type.EntityDestroy);
                //    Network.Net.sv.write.EntityID(entity.net.ID.Value);
                //    Network.Net.sv.write.UInt8((byte)BaseNetworkable.DestroyMode.None);
                //    Network.Net.sv.write.Send(new SendInfo(cons));
                //}

                yield return new WaitForSeconds(0.1f);
            }
        }
        #endregion

        #region POTATO

        string guid_potato = "guid_potato";
        Dictionary<ulong, int> currentFrameMap = new Dictionary<ulong, int>();
        Dictionary<ulong, Coroutine> potatoCoRoutines = new Dictionary<ulong, Coroutine>();
        void DoPotato(BasePlayer player, BasePlayer admin = null, string[] args = null, bool doRemove = false)
        {
            Coroutine routine;
            potatoCoRoutines.TryGetValue(player.userID, out routine);


            if (doRemove)
            {
                if (routine != null)
                {
                    Worker.GetSingleton().StopCoroutine(routine);
                    return;
                }
                //if (args.Contains("add")) { 
                //    //| contiue to add to the lag
                //} else
                //{
                //    int existing = 0;
                //    currentFrameMap.TryGetValue(player.userID, out existing);
                //    for (int i = 0; i <= existing; i ++)
                //    {
                //        CuiHelper.DestroyUi(player, guid_BSOD + i);
                //    }

                //    currentFrameMap.Remove(player.userID);
                //    CuiHelper.DestroyUi(player, guid_BSOD);
                //    return;
                //}
            }

            //if (!currentFrameMap.ContainsKey(player.userID))
            //{
            //    UI2.guids.Add(guid_BSOD);
            //    var elements = new CuiElementContainer();
            //    UI2.CreatePanel(elements, "Under", guid_BSOD, "1 1 1 0", UI2.vectorFullscreen, null, false, 0, 0, false);
            //    CuiHelper.AddUi(player, elements);
            //}


            UI2.guids.Add(guid_potato);
            var elements = new CuiElementContainer();
            UI2.CreatePanel(elements, "Under", guid_potato, "1 1 1 0", UI2.vectorFullscreen, null, false, 0, 0, false);
            CuiHelper.AddUi(player, elements);

            routine = Worker.StaticStartCoroutine(DoPotatoCo(player, args));
            potatoCoRoutines[player.userID] = routine;
        }
        IEnumerator DoPotatoCo(BasePlayer player, string[] args)
        {


            int batch = 10;

            //int totalFrames = 600;
            int currentFrames = 0;

            float rate = 100 / 1f;

            //if (args.Contains("crash"))
            //{
            //    intensity = 5;
            //    totalFrames = 5000;
            //}

            float ts = Time.realtimeSinceStartup;
            float startTime = ts;
            float elapsed;

            float currentRate;

            while (player != null && player.net != null &&  player.net.connection != null && player.net.connection.connected && HasCard(player.userID, Card.PotatoMode))
            {

                elapsed = Time.realtimeSinceStartup - startTime + Mathf.Epsilon;
                currentRate = currentFrames / elapsed;

                if (currentRate > rate)
                {
                    //Puts($"Paused: Current Frames: {currentFrames} rate {currentRate}");
                    yield return null;
                } else
                {
                    for (int j = 0; j < batch; j++)
                    {
                        UI2.guids.Add(guid_potato + currentFrames);

                        var elements = new CuiElementContainer();

                        UI2.CreatePanel(elements, guid_potato, guid_potato + currentFrames, "1 1 1 0", UI2.vectorFullscreen, null, false, 0, 0, false);

                        CuiHelper.AddUi(player, elements);

                        currentFrames++;

                    }
                }

                //Puts($"Current Frames: {currentFrames} rate {currentRate}");

                //| Ensure we take a break at least every 1/30s
                if (Time.realtimeSinceStartup - ts > 1/30f)
                {
                    ts = Time.realtimeSinceStartup;
                    yield return null;
                }

            }
        }



        Dictionary<ulong, float> woodsTimestamps = new Dictionary<ulong, float>();
        HashSet<ulong> woodsHasLandmines = new HashSet<ulong>();
        void DoWoods(BasePlayer target)
        {
            float ts = 0;
            woodsTimestamps.TryGetValue(target.userID, out ts);
            if (Time.realtimeSinceStartup - ts < 15)
            {
                return;
            }
            woodsTimestamps[target.userID] = Time.realtimeSinceStartup;
            //TakeCard(target, Card.Woods);

            int layermask = 1 << 15 | 1 << 16 | 1 << 17 | 1 << 23 | 1 << 27 | 1 << 8 | 1 << 21 | 1 << 12 | 1 << 0 | 1 << 30;

            bool foundSpot = false;
            int iterations = 0;
            while (!foundSpot && iterations < 100)
            {
                var pos = target.transform.position + target.eyes.HeadRay().direction * -1 * 20;
                pos += Vector3.up * 100;
                var ray = new Ray(pos, Vector3.down);
                RaycastHit hit;
                if (Physics.Raycast(ray, out hit, 1000, layermask))
                {
                    //var hits = Physics.SphereCastAll(hit.point, 1, Vector3.up);
                    var collliders = Physics.OverlapSphere(hit.point, 1);
                    bool tooClose = false;
                    if (collliders != null)
                    {
                        foreach (var c in collliders)
                        {

                            var ent = c.gameObject.GetComponent<BaseEntity>();
                            if (ent != null)
                            {
                                tooClose = true;
                            }
                        }
                    }

                    if (!tooClose)
                    {
                        foundSpot = true;
                        if (woodsHasLandmines.Contains(target.userID))
                        {
                            Worker.StaticStartCoroutine(AnimalAttackCo(target, hit.point + Vector3.up, new string[] { "bear", "landmine" }));
                        }
                        else
                        {
                            Worker.StaticStartCoroutine(AnimalAttackCo(target, hit.point + Vector3.up, new string[] { "bear"}));
                        }
                    }
                }
                iterations++;
            }
        }

        HashSet<BaseEntity> animals = new HashSet<BaseEntity>();
        HashSet<BaseEntity> noDamageEntities = new HashSet<BaseEntity>();

        IEnumerator AnimalAttackCo(BasePlayer player, Vector3 spawnposition, string[] args)
        {
            //Ray ray = new Ray(UnityEngine.Random.Range(-5f, 5f) * Vector3.forward + UnityEngine.Random.Range(-5f, 5f) * Vector3.left + spawnposition + Vector3.up * 20, Vector3.down);
            //Ray ray = new Ray(UnityEngine.Random.Range(-5f, 5f) * Vector3.forward + UnityEngine.Random.Range(-5f, 5f) * Vector3.left + spawnposition + Vector3.up * 20, Vector3.down);
            //if (Physics.Raycast(ray, out hit))
            //{
            string aiPrefab = "assets/rust.ai/agents/chicken/chicken.prefab";
            if (args.Contains("bear"))
            {
                aiPrefab = "assets/rust.ai/agents/bear/bear.prefab";
            }
            else if (args.Contains("boar"))
            {
                aiPrefab = "assets/rust.ai/agents/boar/boar.prefab";

            }
            else if (args.Contains("wolf"))
            {
                aiPrefab = "assets/rust.ai/agents/wolf/wolf.prefab";

            }
            else if (args.Contains("stag"))
            {
                aiPrefab = "assets/rust.ai/agents/stag/stag.prefab";
            }
            //assets/rust.ai/agents/wolf/wolf.prefab
            var entity = GameManager.server.CreateEntity(aiPrefab, spawnposition + Vector3.up * 0.2f);
            //var entity = GameManager.server.CreateEntity("assets/rust.ai/agents/wolf/wolf.prefab", hit.point + Vector3.up * 0.2f);
            //var entity = GameManager.server.CreateEntity("assets/rust.ai/agents/bear/bear.prefab", hit.point + Vector3.up * 0.2f);

            BaseAnimalNPC npc = entity as BaseAnimalNPC;
            entity.Spawn();

            var stats = npc.Stats;

            npc.AttackRange = 3;
            HashSet<BaseEntity> forceNetworkUpdates = new HashSet<BaseEntity>();

            if (args.Contains("landmine"))
            {
                for (int i = 0; i < 5; i ++)
                {
                    var mine = GameManager.server.CreateEntity("assets/prefabs/deployable/landmine/landmine.prefab", npc.transform.position + Vector3.up * 0.6f + npc.transform.forward * (1.3f - 0.1f * i));
                    Landmine landmine = mine as Landmine;
                    mine.Spawn();
                    landmine.Arm();
                    landmine.SendNetworkUpdateImmediate();
                    mine.transform.LookAt(npc.transform.position + npc.transform.up * 100);
                    mine.SetParent(entity, true);
                    noDamageEntities.Add(mine);
                    forceNetworkUpdates.Add(mine);
                }
                npc.AttackRange = 0.01f;
                stats.Speed *= 2.4f;
                npc.TargetSpeed *= 2.4f;
            }

            //chicken.Stats.Speed = 20;
            //npc.Stats.Speed = 200;
            stats.TurnSpeed = 100;
            //npc.Stats.Acceleration = 50;
            //npc.AttackDamage *= 2;
            stats.VisionRange = 300;

            animals.Add(npc);

            npc.AttackTarget = player;
            npc.ChaseTransform = player.transform;


            stats.AggressionRange = 100000;
            stats.DeaggroRange = 100000;
            stats.IsAfraidOf = new BaseNpc.AiStatistics.FamilyEnum[0];
            npc.Destination = player.transform.position;

            stats.VisionCone = -1;

            npc.Stats = stats;

            yield return new WaitForSeconds(0.25f);
            //chicken.LegacyNavigation = true;
            //chicken.Stats.DistanceVisibility = AnimationCurve.Linear(0, 0, 1, 1);
            npc.LegacyNavigation = true;

            bool doLoop = true;
            while (doLoop)
            {

                foreach (var ent in forceNetworkUpdates)
                {
                    if (ent != null)
                    {
                        if (ent.net.group.ID != npc.net.group.ID)
                        {
                            ent.net.SwitchGroup(npc.net.group);
                            ent.SendNetworkGroupChange();
                        }
                    }
                }

                if (npc != null && player != null)
                {
                    if (player.IsDead())
                    {
                        if (npc != null)
                        {
                            npc.Kill();
                        }
                        doLoop = false;
                    }
                    else
                    {
                        if (npc.NavAgent != null && npc.NavAgent.isOnNavMesh)
                        {
                            npc.ChaseTransform = player.transform;
                            npc.AttackTarget = player;
                            npc.Destination = player.transform.position;
                            npc.TargetSpeed = npc.Stats.Speed;

                        }
                    }
                    //Puts($"Attack target: {chicken.AttackTarget} Chase: {chicken.ChaseTransform} ARate: {chicken.AttackRate} CombatTarget: {chicken.CombatTarget}");
                    //chicken.TickNavigation();

                }
                else
                {
                    if (npc != null)
                    {
                        npc.Kill();
                    }
                    doLoop = false;
                }
                yield return null;
                //yield return new WaitForSeconds(0.25f);
            }


            timer.Once(120, () => {
                if (npc != null)
                {
                    npc.Kill();
                }
            });

            timer.Once(130f, () => {
                animals.RemoveWhere(x => x == null);
            });
            //}
        }
        #endregion

        #region OxideHooks
        //| ==============================================================
        //| OXIDE HOOKS
        //| ==============================================================
        private object OnPlayerViolation(BasePlayer player, AntiHackType type)
        {
            if (type == AntiHackType.InsideTerrain && HasAnyCard(player.userID)) return false;
            return null;
        }

        object OnPlayerDeath(BasePlayer player, HitInfo hitinfo)
        {
            if (HasAnyCard(player.userID))
            {

                if (player.isMounted)
                {
                    player.GetMounted().DismountPlayer(player, true);
                    //player.DismountObject();//for some reason this was required
                }

                if (HasCard(player.userID, Card.NoRest))
                {
                    timer.Once(3f, () => {
                        if (player != null)
                        {
                            if (player.IsDead())
                            {
                                player.Respawn();
                            }
                        }
                    });
                }
                if (HasCard(player.userID, Card.Hogwild))
                {
                    TakeCard(player, Card.Hogwild, null, null);
                }
            }

            return null;
        }




        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (player != null && HasCard(player.userID, Card.Sit))
            {
                TakeCard(player, Card.Sit);
            }
            if (player != null && HasCard(player.userID, Card.Hogwild))
            {
                TakeCard(player, Card.Hogwild);
            }
            if (player != null && HasCard(player.userID, Card.Interrogate))
            {
                TakeCard(player, Card.Hogwild);
            }

            //if the player have the card spitroast, take the card
            if (player != null && HasCard(player.userID, Card.Spitroast))
            {
                TakeCard(player, Card.Spitroast);
            }
        }
        void OnPlayerBanned(Network.Connection connection, string reason)
        {
            if (connection != null)
            {
                var player = connection.player as BasePlayer;
                if (player != null)
                {
                    OnPlayerBanned(player.displayName, player.userID, connection.ipaddress, reason);
                }
            }
        }
        void OnPlayerBanned(string name, ulong id, string address, string reason)
        {
            //force the banned player dead and out of any chairs, else the model seems to stay behind
            var player = BasePlayer.FindByID(id);
            if (player != null)
            {
                if (sitChairMap.ContainsKey(id))
                {
                    player.GetMounted().DismountPlayer(player, true);
                    player.Die();
                }
            }
        }
        void OnPlayerKicked(BasePlayer player, string reason)
        {
            //force the banned player dead and out of any chairs, else the model seems to stay behind
            if (sitChairMap.ContainsKey(player.userID))
            {
                player.GetMounted().DismountPlayer(player, true);
                player.Die();
            }
        }

        private void OnEntityTakeDamage(BaseEntity entity, HitInfo hitinfo)
        {
            if (entity == null || hitinfo == null) return;
            if (cardMap.Count == 0) return;//early out for maximum perf


            if (hitinfo != null)
            {

                if (sitChairMap.Values.Contains(entity))
                {
                    hitinfo.damageTypes.Clear();
                    hitinfo.DoHitEffects = false;
                }

                var player = entity as BasePlayer;
                var attacker = hitinfo.InitiatorPlayer;


                if (hitinfo.Initiator != null && noDamageEntities.Contains(hitinfo.Initiator))
                {
                    if (player != null && HasAnyCard(player.userID) || entity is BaseNpc) {
                        //| damage ok
                    } else
                    {
                        //| no damage
                        hitinfo.damageTypes.Clear();
                        hitinfo.DoHitEffects = false;
                    }
                }

                if (attacker != null && HasAnyCard(attacker.userID))
                {
                    var members = GetPlayerTeam(attacker.userID);
                    members.Remove(attacker.userID);

                    bool friendlyFire = false;
                    if (player != null)
                    {
                        friendlyFire = members.Contains(player.userID);
                    }

                    bool isSuicide = hitinfo.damageTypes.GetMajorityDamageType() == Rust.DamageType.Suicide;


                    if (player != null && attacker != null && attacker != player)
                    {

                        if (HasCard(attacker.userID, Card.InstantKarma))
                        {

                            if (!friendlyFire)
                            {

                                float newHealth = attacker.health - hitinfo.damageTypes.Total() * 0.35f;
                                if (newHealth < 5)
                                {
                                    attacker.Die();
                                }
                                else
                                {
                                    attacker.SetHealth(newHealth);
                                    attacker.metabolism.SendChangesToClient();
                                    attacker.SendNetworkUpdateImmediate();
                                    //PlaySound("assets/bundled/prefabs/fx/headshot.prefab", attacker, false);
                                    PlaySound("assets/bundled/prefabs/fx/headshot_2d.prefab", attacker, true);
                                }

                                hitinfo.damageTypes.Clear();
                                hitinfo.DoHitEffects = false;

                            }

                        }

                    }

                    if (HasCard(attacker.userID, Card.Pacifism) && attacker != player && player != null)
                    {

                        if (!friendlyFire)
                        {
                            hitinfo.damageTypes.Clear();
                            hitinfo.DoHitEffects = false;

                            if (config.notifyCheaterAttacking && !silentPacifism)
                            {
                                SendPlayerLimitedMessage(player.userID, $"You are being attacked by [{UI2.ColorText(attacker.displayName, "yellow")}] a known cheater!\n{UI2.ColorText("Tommygun's Payback Plugin", "#7A2E30")} has prevented all damage to you.");
                            }
                            //Puts($"{player.displayName} attacked by [{attacker.displayName}] a known cheater! Tommygun's Payback has prevented all damage from the cheater");

                        }

                    }

                    //
                    if (attacker != null && HasCard(attacker.userID, Card.Woods))
                    {
                        if (hitinfo.CanGather)
                        {
                            DoWoods(attacker);
                        }
                    }

                    //prevent damage to non-player entities
                    if (HasCard(attacker.userID, Card.Dud) && player == null)
                    {
                        hitinfo.damageTypes.Clear();
                        //hitinfo.DoHitEffects = false;
                        hitinfo.gatherScale = 0;
                    }


                }



            }
        }


        #endregion

        #region PaybackIO
        //| ==============================================================
        //| INPUT OUTPUT FUNCTIONALITY
        //| ==============================================================

        Dictionary<ulong, float> playerMessageTimestamps = new Dictionary<ulong, float>();
        void SendPlayerLimitedMessage(ulong userID, string message, float rate = 5)
        {
            float ts = float.NegativeInfinity;
            if (playerMessageTimestamps.TryGetValue(userID, out ts))
            {
                if (Time.realtimeSinceStartup - ts > rate)
                {
                    ts = Time.realtimeSinceStartup;
                    playerMessageTimestamps[userID] = ts;
                    SendReply(BasePlayer.FindByID(userID), message);
                }
            }
            else
            {
                playerMessageTimestamps[userID] = ts;
                SendReply(BasePlayer.FindByID(userID), message);
            }
        }


        void AdminCommandToggleCard(BasePlayer admin, Card card, string[] args)
        {

            //| Special Commands
            if (card == Card.Bag)
            {
                ulong userID;
                if (!ulong.TryParse(args[0], out userID))
                {
                    PrintToPlayer(admin, "usage: /bag <steamid>");
                    return;
                }
                DoBagSearch(userID, args, admin);
            }

            //| Requires target commands
            if (args.Length == 0 && admin != null)
            {

                var entity = RaycastFirstEntity(admin.eyes.HeadRay(), 100);
                if (entity is BasePlayer)
                {
                    var targetPlayer = entity as BasePlayer;
                    AdminToggleCard(admin, targetPlayer, card, args);
                }
                else
                {
                    //raycast target in front of you
                    //SendReply(admin, "did not find player from head raycast, either look at your target or do /<cardname> <playername>");
                    PrintToPlayer(admin, "did not find player from head raycast, either look at your target or do /<cardname> <playername>");
                }

                return;
            }

            if (args.Length >= 1)
            {
                var targetPlayer = GetPlayerWithName(args[0]);
                if (targetPlayer != null)
                {

                    if (args.Length == 2 && args[1] == "team")
                    {

                        var members = GetPlayerTeam(targetPlayer.userID);

                        string teamMatesPrintout = "";
                        foreach (var member in members)
                        {
                            BasePlayer p = BasePlayer.FindByID(member);
                            if (p != null && p.IsConnected)
                            {
                                teamMatesPrintout += p.displayName + " ";
                            }
                        }
                        PrintToPlayer(admin, $"Giving {card} to team {targetPlayer.displayName}  - {members.Count} team mates: {teamMatesPrintout}");

                        foreach (var member in members)
                        {
                            BasePlayer p = BasePlayer.FindByID(member);
                            if (p != null && p.IsConnected)
                            {
                                AdminToggleCard(admin, p, card, args);
                            }

                        }

                    }
                    else
                    {
                        AdminToggleCard(admin, targetPlayer, card, args);
                    }
                }
                else
                {

                    ulong userID;
                    if (ulong.TryParse(args[0], out userID))
                    {
                        targetPlayer = BasePlayer.FindByID(userID);
                        if (targetPlayer != null)
                        {

                            if (args.Length == 2 && args[1] == "team")
                            {

                                var members = GetPlayerTeam(targetPlayer.userID);
                                PrintToPlayer(admin, $"Giving {card} to team {targetPlayer.displayName} has {members.Count} team mates");
                                foreach (var member in members)
                                {
                                    BasePlayer p = BasePlayer.FindByID(member);
                                    if (p != null && p.IsConnected)
                                    {
                                        AdminToggleCard(admin, p, card, args);
                                    }

                                }

                            }
                            else
                            {
                                AdminToggleCard(admin, targetPlayer, card, args);
                            }


                            return;
                        }
                        else
                        {

                        }

                    }
                    else
                    {

                    }

                    PrintToPlayer(admin, $"could not find player : {args[0]}");
                }
            }
        }
        void AdminToggleCard(BasePlayer admin, BasePlayer targetPlayer, Card card, string[] args)
        {
            if (HasCard(targetPlayer.userID, card))
            {
                TakeCard(targetPlayer.userID, card, args, admin);
                PrintToPlayer(admin, $"Removed {card} from {targetPlayer.displayName}");
            }
            else
            {
                GiveCard(targetPlayer.userID, card, args, admin);
                PrintToPlayer(admin, $"Gave {card} to {targetPlayer.displayName}");
            }
        }



        [ConsoleCommand("payback2")]
        void Console_Payback(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection?.player as BasePlayer;
            if (player != null) {
                if (!IsAdmin(player)) return;
            }
            CommandPayback(player, "", arg.Args);
        }

        [ChatCommand("payback2")]
        void ChatCommandPayback(BasePlayer player, string cmd, string[] args)
        {
            if (!IsAdmin(player)) return;
            SendReply(player, "Check Payback2 output in F1 console!");
            CommandPayback(player, cmd, args);
        }
        void CommandPayback(BasePlayer player, string cmd, string[] args)
        {
            if (player != null && !IsAdmin(player)) return;
            // list all cards

            if (args == null || args.Length == 0)
            {
                DoPaybackPrintout(player, args);
                return;
            }

            List<string> argsList = new List<string>(args);
            if (argsList.FirstOrDefault(x => x == "show") != null)
            {
                string output = "Active Cards:\n";
                // show all active cards and players
                foreach (var userid in cardMap.Keys)
                {
                    var targetPlayer = BasePlayer.FindByID(userid);
                    string playername = "";
                    if (targetPlayer != null)
                    {
                        playername = targetPlayer.displayName;
                    }
                    HashSet<Card> cards = cardMap[userid];
                    output += $"{userid} : {playername}\n";
                    foreach (var card in cards)
                    {
                        output += $"\n{card.ToString()} : {UI2.ColorText(descriptions[card], "white")}";
                    }
                    output += "\n\n";
                }
                PrintToPlayer(player, output);

            }

            if (argsList.FirstOrDefault(x => x == "clear") != null)
            {

                foreach (var userid in new List<ulong>(cardMap.Keys))
                {
                    var targetPlayer = BasePlayer.FindByID(userid);
                    string playername = "";
                    if (targetPlayer != null)
                    {
                        playername = targetPlayer.displayName;
                    }

                    if (player != null)
                    {
                        HashSet<Card> cards = cardMap[userid];
                        foreach (var card in new HashSet<Card>(cards))
                        {
                            TakeCard(player, card);
                        }
                    }

                }

                cardMap.Clear();
                PrintToPlayer(player, "removed all cards from all players");
            }

        }

        const string PAYBACK_VERSION = "Payback2";
        void DoPaybackPrintout(BasePlayer player, string[] args)
        {


            Dictionary<Card, List<string>> cardToAliases = new Dictionary<Card, List<string>>();
            foreach (var alias in cardAliases.Keys)
            {
                Card c = cardAliases[alias];
                List<string> aliases;
                if (!cardToAliases.TryGetValue(c, out aliases))
                {
                    aliases = new List<string>();
                    cardToAliases[c] = aliases;
                }
                aliases.Add(alias);
            }

            var cards = Enum.GetValues(typeof(Card));
            string output = "";

            output += "\n" + "Add \"team\" after a command to apply the effect to target player's team as well as them.  Example: /bear <steamid> team";
            ////output += "\n" + "/setdroppercent <1-100>% to change the chance butterfingers would drop";
            output += "\n" + $"admins require the permisison {permission_admin} to use these commands!";
            output += "\n" + $"use '/{PAYBACK_VERSION} show' to see which players have which cards";
            output += "\n" + $"use '/{PAYBACK_VERSION} clear' to remove all cards from all players.";
            output += "\n" + $"It is NOT necessary to remove effects from players when finished.";
            //output += "\n" + $"Whitelist temp banned players with: bancheckexception <id>";

            output += "\n\nPayback Cards:";

            foreach (Card card in cards)
            {
                string desc;
                descriptions.TryGetValue(card, out desc);

                List<string> aliases = cardToAliases[card];
                string aliasesTogether = "";
                aliases.ForEach(x => aliasesTogether += $"[ {UI2.ColorText(x, "yellow")} ] ");


                output += "\n\n" + $"{aliasesTogether}: { UI2.ColorText(desc, "white")}";
            }

            if (Payback == null)
            {
                output += "\n\n " + UI2.ColorText("Payback (the original) not detected, did you know there's even more Payback available at https://payback.fragmod.com?", "white");
            }

            PrintToPlayer(player, output);
        }

        //| ==============================================================
        //| PAYBACK OPTIONS
        //| ==============================================================

        Dictionary<ulong, HashSet<Card>> cardMap = new Dictionary<ulong, HashSet<Card>>();
        public bool HasAnyCard(ulong userID)
        {
            HashSet<Card> cards = null;
            if (cardMap.TryGetValue(userID, out cards))
            {
                if (cards.Count > 0)
                {
                    return true;
                }
            }
            return false;
        }
        public bool HasCard(ulong userID, Card card)
        {
            HashSet<Card> cards;
            if (cardMap.TryGetValue(userID, out cards))
            {
                if (cards.Contains(card))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        public void TakeCard(BasePlayer player, Card card, string[] args = null, BasePlayer admin = null)
        {
            TakeCard(player.userID, card, args, admin);
        }
        public void TakeCard(ulong userID, Card card, string[] args = null, BasePlayer admin = null)
        {
            HashSet<Card> cards;
            if (!cardMap.TryGetValue(userID, out cards))
            {
                cards = new HashSet<Card>();
                cardMap[userID] = cards;
            }
            cards.Remove(card);

            var player = BasePlayer.FindByID(userID);

            if (card == Card.Sit)
            {
                if (player != null)
                {
                    DoSitCommand(player, admin);
                }
            } else if (card == Card.PotatoMode)
            {
                DoPotato(player, null, args, true);
            } else if (card == Card.Hogwild)
            {
                DoHog(player, null, args, true);
            } else if (card == Card.Interrogate)
            {
                DoInterrogate(player, null, args, true);
            } else if (card == Card.Spitroast)
            {
                DoSpitroastCommand(player, null);
            }

        }

        #endregion

        #region DiscordEmbeds
        void SendToDiscordWebhook(Dictionary<string, string> messageData, string title = "TEMP GAME BAN DETECTED")
        {
            if (config.webhooks == null || config.webhooks.Count == 0)
            {
                Puts($"Could not send Discord Webhook: webhook not configured");
                return;
            }

            string discordEmbedTitle = title;


            List<object> fields = new List<object>();

            foreach (var key in messageData.Keys)
            {
                string data = messageData[key];
                fields.Add(new { name = $"{key}", value = $"{data}", inline = false });
            }

            object f = fields.ToArray();


            foreach (var webhook in config.webhooks)
            {
                SendWebhook(webhook, (string)discordEmbedTitle, f);
            }
        }

        private void SendWebhook(string WebhookUrl, string title, object fields)
        {
            if (string.IsNullOrEmpty(WebhookUrl))
            {
                Puts("Error: Someone tried to use a command but the WebhookUrl is not set!");
                return;
            }

            //test
            string json = new SendEmbedMessage(13964554, title, fields).ToJson();

            webrequest.Enqueue(WebhookUrl, json, (code, response) =>
            {
                if (code == 429)
                {
                    Puts("Sending too many requests, please wait");
                    return;
                }

                if (code != 204)
                {
                    Puts(code.ToString());
                }
                if (code == 400)
                {
                    Puts(response + "\n\n" + json);
                }
            }, this, Oxide.Core.Libraries.RequestMethod.POST, new Dictionary<string, string> { ["Content-Type"] = "application/json" });
        }

        private class SendEmbedMessage
        {
            public SendEmbedMessage(int EmbedColour, string discordMessage, object _fields)
            {
                object embed = new[]
                {
                    new
                    {
                        title = discordMessage,
                        fields = _fields,
                        color = EmbedColour,
                        thumbnail = new Dictionary<object, object>() { { "url", "https://i.imgur.com/ruy7N2Z.png" } },
                    }
                };
                Embeds = embed;
            }

            [JsonProperty("embeds")] public object Embeds { get; set; }

            public string ToJson() => JsonConvert.SerializeObject(this);
        }
        #endregion

        #region Initialize
        
        //| ==============================================================
        //| INIT
        //| ==============================================================
        void Initialize()
        {
            Unsubscribe("OnPlayerVoice");
            Unsubscribe($"OnEntityKill");

            timer.Once(0.1f, () => {

                LoadData();

                permission.RegisterPermission(permission_admin, this);

                var cards = Enum.GetValues(typeof(Card));

                foreach (Card card in cards)
                {
                    cardAliases[card.ToString().ToLower()] = card;
                }
                foreach (var alias in cardAliases.Keys)
                {
                    //| Payback1 will handle all commands it can if it exists.
                    if (Payback != null)
                    {
                        if (cardsInPayback1.Contains(cardAliases[alias]))
                        {
                            continue;
                        }
                    }

                    //| add commands for this version
                    cmd.AddChatCommand(alias, this, nameof(GenericChatCommand));
                    cmd.AddConsoleCommand(alias, this, nameof(GenericConsoleCommand));
                }
            });
            
        }
        void GenericChatCommand(BasePlayer player, string cmd, string[] args)
        {
            if (!IsAdmin(player)) return;
            string argsTogether = "";
            foreach (var arg in args)
            {
                argsTogether += arg + " ";
            }
            //SendReply(player, $"cmd: {cmd} args {argsTogether}");
            Card card;
            if (cardAliases.TryGetValue(cmd.ToLower(), out card))
            {
                AdminCommandToggleCard(player, card, args);
            }
        }
        void GenericConsoleCommand(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection?.player as BasePlayer;

            if (player != null)
            {
                if (!IsAdmin(player)) return;
            }
            if (arg == null) return;
            if (arg.cmd == null) return;

            string argsTogether = "";

            if (arg.Args != null)
            {
                foreach (var param in arg.Args)
                {
                    argsTogether += param + " ";
                }
            }

            string cmd = string.Empty;
            if (arg.cmd.Name != null)
            {
                cmd = arg.cmd.Name;
            }

            Card card;
            if (cardAliases.TryGetValue(cmd.ToLower(), out card))
            {
                if (arg.Args == null)
                {
                    arg.Args = new string[0];
                }
                AdminCommandToggleCard(player, card, arg.Args);
            }
        }
        void OnServerInitialized(bool serverIsNOTinitialized)
        {
            bool serverHasInitialized = !serverIsNOTinitialized;
            Initialize();

            //| preload images
            timer.Once(10, () => {

                if (ImageLibrary == null)
                {
                    Puts($"[Payback2] (Optional) Please install the ImageLibrary plugin for optimal performance in Payback2 [https://umod.org/plugins/image-library]");
                } else
                {
                    AddImage(interrogate_closed_url);
                    AddImage(interrogate_open_url);
                }
            });
        }

        #endregion

        #region ViewInventoryCommands

        //| ==============================================================
        //| ViewInventory - Copied from Whispers88 and modified here
        //| ==============================================================
        private static List<string> _viewInventoryHooks = new List<string> { "OnLootEntityEnd", "CanMoveItem", "OnEntityDeath" };

        void ViewTargetPlayerInventory(BasePlayer target, BasePlayer admin)
        {
            if (admin == null) return;
            if (admin.IsSpectating())
            {
                PrintToPlayer(admin, $"{UI2.ColorText($"[PAYBACK WARNING] ", "yellow") } : {UI2.ColorText($"cannot open target's inventory while spectating! you must respawn", "white")}");
                return;
            }
            PrintToPlayer(admin, $"{UI2.ColorText($"[PAYBACK WARNING] ", "yellow") } : {UI2.ColorText($"you must exit the F1 console immediately after using the command to view inventory", "white")}");

            ViewInvCmd(admin.IPlayer, "ViewInvCmd", new string[] { $"{target.userID}" });
        }

        private void ViewInvCmd(IPlayer iplayer, string command, string[] args)
        {
            BasePlayer player = iplayer.Object as BasePlayer;
            if (player == null) return;

            //if (!HasPerm(player.UserIDString, permission_admin))
            //{
            //    ChatMessage(iplayer, GetLang("NoPerms"));
            //    return;
            //}


            if (args.Length == 0 || string.IsNullOrEmpty(args[0]))
            {
                RaycastHit hitinfo;
                if (!Physics.Raycast(player.eyes.HeadRay(), out hitinfo, 3f, (int)Layers.Server.Players))
                {
                    ChatMessage(iplayer, "NoPlayersFoundRayCast");
                    return;
                }
                BasePlayer targetplayerhit = hitinfo.GetEntity().ToPlayer();
                if (targetplayerhit == null)
                {
                    ChatMessage(iplayer, "NoPlayersFoundRayCast");
                    return;
                }
                //ChatMessage(iplayer, "ViewingPLayer", targetplayerhit.displayName);
                ViewInventory(player, targetplayerhit);
                return;
            }
            IPlayer target = FindPlayer(args[0]);
            if (target == null)
            {
                //ChatMessage(iplayer, "NoPlayersFound", args[0]);
                return;
            }
            BasePlayer targetplayer = target.Object as BasePlayer;
            if (targetplayer == null)
            {
                //ChatMessage(iplayer, "NoPlayersFound", args[0]);
                return;
            }
            //ChatMessage(iplayer, "ViewingPLayer", targetplayer.displayName);
            ViewInventory(player, targetplayer);
        }

        #endregion Commands

        #region Methods
        private List<LootableCorpse> _viewingcorpse = new List<LootableCorpse>();
        private void ViewInventory(BasePlayer player, BasePlayer targetplayer)
        {
            if (_viewingcorpse.Count == 0)
                SubscribeToHooks();

            player.EndLooting();

            var corpse = GetLootableCorpse(targetplayer.displayName);
            corpse.SendAsSnapshot(player.Connection);

            timer.Once(1f, () =>
            {
                StartLooting(player, targetplayer, corpse);
            });
        }

        LootableCorpse GetLootableCorpse(string title = "")
        {
            LootableCorpse corpse = GameManager.server.CreateEntity(StringPool.Get(2604534927), Vector3.zero) as LootableCorpse;
            corpse.CancelInvoke("RemoveCorpse");
            corpse.syncPosition = false;
            corpse.limitNetworking = true;
            //corpse.playerName = targetplayer.displayName;
            corpse.playerName = title;
            corpse.playerSteamID = 0;
            corpse.enableSaving = false;
            corpse.Spawn();
            corpse.SetFlag(BaseEntity.Flags.Locked, true);
            Buoyancy bouyancy;
            if (corpse.TryGetComponent<Buoyancy>(out bouyancy))
            {
                UnityEngine.Object.Destroy(bouyancy);
            }
            Rigidbody ridgidbody;
            if (corpse.TryGetComponent<Rigidbody>(out ridgidbody))
            {
                UnityEngine.Object.Destroy(ridgidbody);
            }
            return corpse;
        }

        private void StartLooting(BasePlayer player, BasePlayer targetplayer, LootableCorpse corpse)
        {
            player.inventory.loot.AddContainer(targetplayer.inventory.containerMain);
            player.inventory.loot.AddContainer(targetplayer.inventory.containerWear);
            player.inventory.loot.AddContainer(targetplayer.inventory.containerBelt);
            player.inventory.loot.entitySource = corpse;
            player.inventory.loot.PositionChecks = false;
            player.inventory.loot.MarkDirty();
            player.inventory.loot.SendImmediate();
            player.ClientRPCPlayer<string>(null, player, "RPC_OpenLootPanel", "player_corpse");
            _viewingcorpse.Add(corpse);
        }
        private void StartLootingContainer(BasePlayer player, ItemContainer container, LootableCorpse corpse) {
            player.inventory.loot.AddContainer(container);
            player.inventory.loot.entitySource = corpse;
            player.inventory.loot.PositionChecks = false;
            player.inventory.loot.MarkDirty();
            player.inventory.loot.SendImmediate();
            player.ClientRPCPlayer<string>(null, player, "RPC_OpenLootPanel", "player_corpse");
            _viewingcorpse.Add(corpse);
        }

        #endregion Methods

        #region Hooks
        private void OnLootEntityEnd(BasePlayer player, LootableCorpse corpse)
        {
            if (!_viewingcorpse.Contains(corpse)) return;

            _viewingcorpse.Remove(corpse);
            if (corpse != null)
                corpse.Kill();

            if (_viewingcorpse.Count == 0)
                UnSubscribeFromHooks();

        }


        void OnEntityDeath(LootableCorpse corpse, HitInfo info)
        {
            if (!_viewingcorpse.Contains(corpse)) return;
            _viewingcorpse.Remove(corpse);
            if (corpse != null)
                corpse.Kill();
            if (_viewingcorpse.Count == 0)
                UnSubscribeFromHooks();
        }
        #endregion Hooks

        #region Helpers

        private IPlayer FindPlayer(string nameOrId)
        {
            return BasePlayer.activePlayerList.FirstOrDefault(x => x.UserIDString == nameOrId || x.displayName.Contains(nameOrId, System.Globalization.CompareOptions.IgnoreCase))?.IPlayer;
        }

        private bool HasPerm(string id, string perm) => permission.UserHasPermission(id, perm);

        private string GetLang(string langKey, string playerId = null, params object[] args) => string.Format(lang.GetMessage(langKey, this, playerId), args);
        private void ChatMessage(IPlayer player, string langKey, params object[] args)
        {
            if (player.IsConnected) player.Message(GetLang(langKey, player.Id, args));
        }

        private void UnSubscribeFromHooks()
        {
            foreach (var hook in _viewInventoryHooks)
                Unsubscribe(hook);
        }

        private void SubscribeToHooks()
        {
            foreach (var hook in _viewInventoryHooks)
                Subscribe(hook);
        }
        #endregion

        #region IMAGELIBRARY

        void AddImage(string url)
        {
            if (ImageLibrary == null) return;
            var obj = ImageLibrary.Call("HasImage", url, (ulong)0);
            if (obj != null && (bool)obj == false)
            {
                ImageLibrary.CallHook("AddImage", url, url, (ulong)0);
            }
        }

        private string GetImage(string url)
        {
            if (ImageLibrary == null) return null;
            var obj = ImageLibrary?.Call("GetImage", url);
            return obj?.ToString();
        }


#endregion

        #region UTILITIES


//| ==============================================================
//| UTILITIES
//| ==============================================================
float Random()
        {
            return UnityEngine.Random.Range(0f, 1f);
        }
        string TryGetDisplayName(ulong userID)
        {
            return covalence.Players.FindPlayerById(userID.ToString())?.Name;
        }


        public BasePlayer GetPlayerWithName(string displayName)
        {
            foreach (var p in BasePlayer.allPlayerList)
            {
                if (p.displayName.ToLower().Contains(displayName.ToLower()))
                {
                    return p;
                }
            }
            return null;
        }
        BaseEntity RaycastFirstEntity(Ray ray, float distance)
        {
            RaycastHit hit;
            if (Physics.Raycast(ray.origin, ray.direction, out hit, distance))
            {
                return hit.GetEntity();
            }
            return null;
        }

        void SetDespawnDuration(DroppedItem dropped, float seconds)
        {
            dropped.Invoke(new Action(dropped.IdleDestroy), seconds);//prevent dropped item from despawn
        }
        void DestroyGroundCheck(BaseEntity entity)
        {
            GameObject.DestroyImmediate(entity.GetComponentInChildren<DestroyOnGroundMissing>());
            GameObject.DestroyImmediate(entity.GetComponentInChildren<GroundWatch>());
        }

        [ChatCommand("sound")]
        void SoundCommand(BasePlayer player, string cmd, string[] args)
        {
            if (!IsAdmin(player)) return;

            if (args.Length == 0)
            {
                SendReply(player, "/sound <asset>");
                return;
            }
            for (int i = 0; i < args.Length; i++)
            {
                string sound = args[i];
                PlaySound(sound, player, false);
            }
        }

        void PrintToPlayer(BasePlayer player, string text)
        {
            if (player == null) {
                Puts($"{text}");
                return;
            }
            //SendReply(player, text);
            player.SendConsoleCommand($"echo {text}");
        }
        public HashSet<ulong> GetPlayerTeam(ulong userID)
        {
            BasePlayer player = BasePlayer.FindByID(userID);

            RelationshipManager.PlayerTeam existingTeam = RelationshipManager.ServerInstance.FindPlayersTeam(player.userID);
            if (existingTeam != null)
            {
                return new HashSet<ulong>(existingTeam.members);
            }
            return new HashSet<ulong>() { userID };
        }

        public void PlaySound(List<string> effects, BasePlayer player, Vector3 worldPosition, bool playlocal = true)
        {
            if (player == null) return;//ai
            foreach (var effect in effects)
            {
                //var sound = new Effect(effect, player, 0, localPosition, localPosition.normalized);
                var sound = new Effect(effect, worldPosition, Vector3.up);
                if (playlocal)
                {
                    EffectNetwork.Send(sound, player.net.connection);
                }
                else
                {
                    EffectNetwork.Send(sound);
                }
            }
        }

        public void PlaySound(List<string> effects, BasePlayer player, bool playlocal = true)
        {
            if (player == null) return;//ai
            foreach (var effect in effects)
            {
                var sound = new Effect(effect, player, 0, Vector3.zero + Vector3.up * 0.5f, Vector3.forward);
                if (playlocal)
                {
                    EffectNetwork.Send(sound, player.net.connection);
                }
                else
                {
                    EffectNetwork.Send(sound);
                }
            }
        }
        public void PlaySound(string effect, ListHashSet<BasePlayer> players, bool playlocal = true)
        {
            //all players
            foreach (var player in players)
            {
                PlaySound(effect, player, playlocal);
            }
        }

        bool test = false;

        public void PlaySound(string effect, BasePlayer player, bool playlocal = true, Vector3 posLocal = default(Vector3))
        {
            if (player == null) return;//ai

            var sound = new Effect(effect, player, 0, Vector3.zero, Vector3.forward);
            
            if (posLocal != Vector3.zero)
            {
                sound = new Effect(effect, player.transform.position + posLocal, Vector3.forward);
            }


            if (playlocal)
            {
                EffectNetwork.Send(sound, player.net.connection);
            }
            else
            {
                EffectNetwork.Send(sound);
            }
        }

        public void PlayGesture(BasePlayer target, string gestureName, bool canCancel = false)
        {
            if (target == null) return;
            if (target.gestureList == null) return;
            var gesture = target.gestureList.StringToGesture(gestureName);
            if (gesture == null) {
                return;
            }
            bool saveCanCancel = gesture.canCancel;
            gesture.canCancel = canCancel;
            target.SendMessage("Server_StartGesture", gesture);
            gesture.canCancel = saveCanCancel;
        }

        public class Worker : MonoBehaviour
        {
            public static Worker GetSingleton()
            {
                if (_singleton == null)
                {
                    GameObject worker = new GameObject();
                    worker.name = "Worker Singleton";
                    _singleton = worker.AddComponent<Worker>();
                }
                return _singleton;
            }
            static Worker _singleton;
            public static Coroutine StaticStartCoroutine(IEnumerator c)
            {
                return Worker.GetSingleton().StartCoroutine(c);
            }

        }
        #endregion

        #region ESSENTIALPAYBACK
        //| ==============================================================
        //| ESSENTIAL PAYBACK FUNCTIONS
        //| ==============================================================

        HashSet<BaseNetworkable> entitiesWatchingForKilledMounts = new HashSet<BaseNetworkable>();

        public const string chairPrefab2 = "assets/prefabs/deployable/chair/chair.deployed.prefab";
        public const string invisibleChairPrefab = "assets/bundled/prefabs/static/chair.invisible.static.prefab";

        HashSet<BaseMountable> chairsPreventingDismount = new HashSet<BaseMountable>();


        //| normal chair or secretlabs
        //string chairPrefab = "assets/prefabs/deployable/chair/chair.deployed.prefab";
        string chairPrefab = "assets/prefabs/deployable/secretlab chair/secretlabchair.deployed.prefab";

        Dictionary<ulong, BaseEntity> sitChairMap = new Dictionary<ulong, BaseEntity>();

        BaseEntity InvisibleSit(BasePlayer targetPlayer)
        {
            var chair = GameManager.server.CreateEntity(invisibleChairPrefab, targetPlayer.transform.position);
            var mount = chair as BaseMountable;
            chair.Spawn();

            chairsPreventingDismount.Add(mount);

            GameObject.DestroyImmediate(chair.GetComponentInChildren<DestroyOnGroundMissing>());
            GameObject.DestroyImmediate(chair.GetComponentInChildren<GroundWatch>());

            if (targetPlayer.isMounted)
            {
                targetPlayer.GetMounted().DismountPlayer(targetPlayer, true);
            }

            Timer t = null;
            t = timer.Every(0.25f, () => {
                if (chair == null || chair.IsDestroyed)
                {
                    t.Destroy();
                    return;
                }
                if (targetPlayer != null)
                {
                    if (!targetPlayer.isMounted)
                    {
                        targetPlayer.Teleport(chair.transform.position);
                        mount.MountPlayer(targetPlayer);
                        chair.SendNetworkUpdateImmediate();
                    }
                }
                else
                {
                    //Puts("Attempted to mount player to chair, but they were null!");
                    chair.Kill();
                    t.Destroy();
                }

            });
            return chair;
        }


        void DoBagSearch(ulong userID, string[] args, BasePlayer admin = null)
        {
            if (userID == 0) return;
            TakeCard(userID, Card.Bag);

            if (args.Contains("discord"))
            {
                Worker.StaticStartCoroutine(BagSearchCo(userID, true, admin));
            }
            else
            {
                Worker.StaticStartCoroutine(BagSearchCo(userID, false, admin));
            }
        }
        IEnumerator BagSearchCo(ulong userID, bool logToDiscord = false, BasePlayer admin = null)
        {
            yield return null;


            float timestamp = Time.realtimeSinceStartup;
            float maxTimeBetweenFrames = 1 / 20f;

            //| Get bags owned by player

            var allBags = BaseNetworkable.serverEntities.OfType<SleepingBag>();
            //var deployedByTargetBags = new List<SleepingBag>();

            var useridsBaggedByTarget = new HashSet<ulong>();
            var useridsWhoBaggedTarget = new HashSet<ulong>();

            //find the bags that target placed
            foreach (var bag in allBags)
            {
                //| ==============================================================
                if (Time.realtimeSinceStartup - timestamp > maxTimeBetweenFrames)
                {
                    yield return null;
                    timestamp = Time.realtimeSinceStartup;
                }
                //| ==============================================================

                ulong ownerid = 0;
                var creator = bag.creatorEntity;
                if (creator != null)
                {
                    var player = creator as BasePlayer;
                    if (player != null)
                    {
                        ownerid = player.userID;
                    }
                }
                else
                {
                    ownerid = bag.OwnerID;
                }

                //target bagged someone else
                if (ownerid == userID && bag.deployerUserID != userID)
                {
                    //deployedByTargetBags.Add(bag);
                    useridsBaggedByTarget.Add(bag.deployerUserID);
                }

                //someone bagged in target
                if (userID == bag.deployerUserID && ownerid != userID)
                {
                    useridsWhoBaggedTarget.Add(ownerid);
                }
            }

            var messageData = new Dictionary<string, string>();
            string targetInfo = $"{TryGetDisplayName(userID)}";
            string baggedByString = "";
            string output = $"Players bagged by {targetInfo}:";
            foreach (var userid in useridsBaggedByTarget)
            {
                var displayname = TryGetDisplayName(userid);
                output += $"\n{userid} : {displayname}";

                baggedByString += $"{userid} : {displayname}\n";
            }
            if (baggedByString.Length > 0)
            {
                messageData.Add($"Players bagged by {targetInfo}", baggedByString);
            }
            else
            {
                messageData.Add($"Players bagged by {targetInfo}", "none");
            }

            output += $"\nSteamids who bagged in {targetInfo}:";
            string baggedInString = "";
            foreach (var userid in useridsWhoBaggedTarget)
            {
                var displayname = TryGetDisplayName(userid);
                output += $"\n{userid} : {displayname}";
                baggedInString += $"\n{userid} : {displayname}";
            }
            if (baggedInString.Length > 0)
            {
                messageData.Add($"Players who bagged in {targetInfo}", baggedInString);
            }
            else
            {
                messageData.Add($"Players who bagged in {targetInfo}", "none");
            }

            PrintToPlayer(admin, $"{output}");

            if (logToDiscord)
            {
                SendToDiscordWebhook(messageData, $"Bag Search [{userID}]");
            }

        }

        bool flag_kill_no_loot = false;

        void GiveAdminHammer(BasePlayer admin)
        {
            if (admin == null) return;
            var item = ItemManager.CreateByName("hammer", 1, 2375073548);
            if (item != null)
            {
                GiveItemOrDrop(admin, item, false);
            }
        }
        object OnStructureRepair(BaseCombatEntity entity, BasePlayer player)
        {

            if (HasCard(player.userID, Card.Hammer))
            {
                Worker.StaticStartCoroutine(DeleteByCo(entity.OwnerID, player.transform.position, player));
            }
            return null;
        }

        IEnumerator DeleteByCo(ulong steamid, Vector3 position, BasePlayer admin = null)
        {
            yield return null;
            if (steamid == 0UL)
            {
                yield break;
            }


            float maxTimeBetweenFrames = 1 / 60f;
            int maxEntitiesPerFrame = 1;
            float delayBetweenFrames = 1 / 20f;
            float timestamp = Time.realtimeSinceStartup;

            var entities = new List<BaseNetworkable>(BaseNetworkable.serverEntities);

            float fxTimestamp = Time.realtimeSinceStartup;
            float fxCooldown = 0.75f;
            //float fxCooldown = 0.2f;

            var ownedEntities = new List<BaseEntity>();
            foreach (var x in entities)
            {
                var entity = x as BaseEntity;
                if (!(entity == null) && entity.OwnerID == steamid)
                {
                    ownedEntities.Add(entity);
                }
                if (Time.realtimeSinceStartup - timestamp > maxTimeBetweenFrames)
                {
                    yield return null;
                    timestamp = Time.realtimeSinceStartup;
                }
            }

            ownedEntities.Sort((x, y) => Vector3.Distance(x.transform.position, position).CompareTo(Vector3.Distance(y.transform.position, position)));

            timestamp = Time.realtimeSinceStartup;

            int i = 0;

            int count = 0;

            bool playSound = true;

            if (admin != null)
                PlaySound("assets/bundled/prefabs/fx/headshot.prefab", admin, false);

            Vector3 lastPosition = Vector3.zero;


            //| LOOT REMOVAL PASS
            if (flag_kill_no_loot)
            {
                foreach (var baseEntity in ownedEntities)
                {
                    var storage = baseEntity as StorageContainer;
                    if (storage != null)
                    {
                        foreach (var item in new List<Item>(storage.inventory.itemList))
                        {
                            //PrintToPlayer(admin, $"Removing: {item.info.displayName.english}");
                            item.GetHeldEntity()?.KillMessage();
                            //item.DoRemove();
                            //item.Remove();
                            ItemManager.RemoveItem(item);
                        }
                        ItemManager.DoRemoves();
                        //storage.inventory.Clear();
                    }
                }
            }


            while (i < ownedEntities.Count)
            {
                if (Time.realtimeSinceStartup - timestamp > maxTimeBetweenFrames || count >= maxEntitiesPerFrame)
                {
                    yield return new WaitForSeconds(delayBetweenFrames);
                    timestamp = Time.realtimeSinceStartup;
                    count = 0;
                }

                var baseEntity = ownedEntities[i];
                if (!(baseEntity == null) && baseEntity.OwnerID == steamid)
                {

                    if (admin != null && playSound)
                    {
                        if (Time.realtimeSinceStartup - fxTimestamp > fxCooldown)
                        {
                            PlaySound("assets/prefabs/locks/keypad/effects/lock.code.unlock.prefab", admin, true);
                            fxTimestamp = Time.realtimeSinceStartup;
                        }
                    }
                    lastPosition = baseEntity.transform.position;

                    baseEntity.Kill(BaseNetworkable.DestroyMode.Gib);

                    count++;
                }
                i++;

            }
            if (admin != null)
            {
                PlaySound("assets/prefabs/locks/keypad/effects/lock.code.lock.prefab", admin, true);

                timer.Once(0.75f, () => {
                    PlaySound("assets/prefabs/npc/autoturret/effects/targetacquired.prefab", admin, true);

                    if (!flag_kill_no_loot)
                    {
                        var effect = GameManager.server.CreateEntity("assets/prefabs/deployable/fireworks/mortarred.prefab", lastPosition);
                        effect.Spawn();
                        var firework = effect as BaseFirework;
                        firework.fuseLength = 0;
                        firework.Ignite(firework.transform.position - Vector3.down);
                    }

                });
            }
            yield return null;
        }
        void ResolveConflictingCommands(BasePlayer player, BasePlayer admin = null)
        {
            bool hasSit = false;
            if (HasCard(player.userID, Card.Sit))
            {
                hasSit = true;
                TakeCard(player, Card.Sit);
            }
            if (HasCard(player.userID, Card.Spitroast)) {
                TakeCard(player, Card.Spitroast);
                return;
            }

            if (player.isMounted)
            {
                player.GetMounted().DismountPlayer(player, true);
                var car = player.GetMountedVehicle();
                if (car != null)
                {
                    car.Kill(BaseNetworkable.DestroyMode.Gib);
                }
            }
            if (Payback != null)
            {
                ConsoleSystem.Run(ConsoleSystem.Option.Server, $"payback clear", new object[0]);
            }
        }

        void OnPlayerRespawned(BasePlayer player)
        {
            if (HasCard(player.userID, Card.NoRest))
            {
                player.EndSleeping();
                player.SendNetworkUpdate();
            }
        }

        void OnEntityKill(BaseNetworkable entity, HitInfo info)
        {

            if (entity == null) return;
            if (entitiesWatchingForKilledMounts.Contains(entity))
            {
                var chair = entity.GetComponentInChildren<BaseMountable>();
                if (chair.IsMounted())
                {
                    var player = chair.GetMounted();
                    player.GetMounted().DismountPlayer(player, true);
                    player.Teleport(chair.transform.position);
                    player.Die();
                }
                entitiesWatchingForKilledMounts.Remove(entity);

                timer.Once(0.5f, () => {
                    if (entitiesWatchingForKilledMounts.Count == 0)
                        Unsubscribe($"OnEntityKill");
                });
            }
        }

        void GiveItemOrDrop(BasePlayer player, Item item, bool stack = false)
        {
            bool success = item.MoveToContainer(player.inventory.containerWear, -1, stack);
            if (!success)
            {
                success = item.MoveToContainer(player.inventory.containerMain, -1, stack);
            }
            if (!success)
            {
                success = item.MoveToContainer(player.inventory.containerBelt, -1, stack);
            }
            if (!success)
            {
                item.Drop(player.transform.position + Vector3.up, Vector3.zero);
            }
        }
        void DoHigherGround(BasePlayer player)
        {
            player.Teleport(player.transform.position + Vector3.up * 100);
            TakeCard(player, Card.HigherGround);
        }


        void DoSitCommand(BasePlayer targetPlayer, BasePlayer adminPlayer)
        {
            if (targetPlayer == null) return;

            if (HasCard(targetPlayer.userID, Card.Sit))
            {
                if (adminPlayer == null) return;

                if (targetPlayer.isMounted)
                {
                    targetPlayer.GetMounted().DismountPlayer(targetPlayer, true);

                    var car = targetPlayer.GetMountedVehicle();
                    if (car != null)
                    {
                        car.Kill(BaseNetworkable.DestroyMode.Gib);
                    }

                    BaseEntity chair = null;
                    if (sitChairMap.TryGetValue(targetPlayer.userID, out chair))
                    {
                        chair?.Kill();
                    }
                }

                RaycastHit hitinfo;
                if (Physics.Raycast(adminPlayer.eyes.HeadRay(), out hitinfo, 50))
                {


                    var chair = GameManager.server.CreateEntity(chairPrefab, hitinfo.point);
                    var mount = chair as BaseMountable;
                    chair.Spawn();
                    sitChairMap[targetPlayer.userID] = chair;
                    //targetPlayer.Teleport(chair.transform.position + chair.transform.forward * 0.5f);
                    targetPlayer.EndSleeping();

                    GameObject.DestroyImmediate(chair.GetComponentInChildren<DestroyOnGroundMissing>());
                    GameObject.DestroyImmediate(chair.GetComponentInChildren<GroundWatch>());

                    Vector3 lookAtPosition = adminPlayer.transform.position;
                    lookAtPosition.y = mount.transform.position.y;

                    timer.Once(0.25f, () => {

                        if (targetPlayer != null)
                        {
                            mount.MountPlayer(targetPlayer);


                            chair.transform.LookAt(lookAtPosition);
                            chair.SendNetworkUpdateImmediate();

                            Worker.StaticStartCoroutine(SitCo(targetPlayer));
                        }
                        else
                        {
                            //Puts("Attempted to mount player to chair, but they were null!");
                            chair.Kill();
                        }

                    });

                }

            }
            else
            {
                BaseEntity chair = null;
                if (sitChairMap.TryGetValue(targetPlayer.userID, out chair))
                {
                    if (chair != null)
                    {
                        chair.Kill();
                    }
                }

            }
        }

        IEnumerator SitCo(BasePlayer player)
        {
            yield return new WaitForSeconds(0.25f);
            BaseEntity chair;
            sitChairMap.TryGetValue(player.userID, out chair);
            BaseMountable mount = chair as BaseMountable;

            while (player != null && chair != null && HasCard(player.userID, Card.Sit))
            {
                if (player != null)
                {
                    if (player.IsSleeping())
                    {
                        player.EndSleeping();
                    }
                    if (player.isMounted)
                    {
                        var playerMount = player.GetMounted();
                        if (playerMount != mount)
                        {
                            playerMount.DismountPlayer(player, true);
                            //PrintToChat($"Dismount player for sit: {playerMount}");

                        }
                    }

                    var dist = Vector3.Distance(chair.transform.position, player.transform.position);
                    if (dist > 2)
                    {
                        player.Teleport(chair.transform.position + chair.transform.forward * 0.5f);
                        //yield return new WaitForSeconds(1);
                    }
                    if (!player.isMounted && dist < 2)
                    {

                        //mount.AttemptMount(player, false);
                        player.MountObject(mount);

                        //PrintToChat($"Attempt mount: {mount} pmount:  {player.GetMounted()}");
                        //yield return new WaitForSeconds(0.25f);
                    }

                }
                else
                {
                    chair.Kill();
                }
                yield return new WaitForSeconds(0.25f);
            }
            if (chair != null)
            {
                chair.Kill();
            }

        }

        object CanDismountEntity(BasePlayer player, BaseMountable entity)
        {
            if (cardMap.Count == 0 && chairsPreventingDismount.Count == 0) return null;//early out for maximum perf

            if (HasCard(player.userID, Card.Sit))
            {
                return false;
            }

            if (HasCard(player.userID, Card.Spitroast))
            {
                return false;
            }

            //cleanup dead chairs
            foreach (var chair in new HashSet<BaseMountable>(chairsPreventingDismount))
            {
                if (chair == null || chair.IsDestroyed)
                {
                    chairsPreventingDismount.Remove(chair);
                }
            }

            if (chairsPreventingDismount.Contains(entity))
            {
                return false;
            }

            return null;
        }

        public HashSet<Card> cardsInPayback1 = new HashSet<Card>() {
            Card.Pacifism,
            Card.InstantKarma,
            Card.Dud,
            Card.Sit,
            Card.HigherGround,
            Card.NoRest,
            Card.ViewLoot,
            Card.Hammer,
            Card.Bag,
        };
        #endregion

        #region Config

        private void Init()
        {
            LoadConfig();
        }

        private PluginConfig config;

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
            SaveConfig();
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        protected override void LoadDefaultConfig()
        {
            config = new PluginConfig
            {

            };
            SaveConfig();
        }

        private class PluginConfig
        {

            [JsonProperty("These discord webhooks will get notified. Dont forget the [\"\"] Format: \"webhooks\" : [\"hook\"],")]
            public List<string> webhooks = new List<string>();

            [JsonProperty("Notify player when attacked by cheater")]
            public bool notifyCheaterAttacking = true;
        }



        #endregion Config

        #region Data
        //| ==============================================================
        //| DATA
        //| ==============================================================


        string filename_data {
            get
            {
                return $"{PAYBACK_VERSION}/{PAYBACK_VERSION}.dat";
            }
        }


        DynamicConfigFile file_payback_data;

        public PaybackData paybackData = new PaybackData();

        public class PaybackData
        {

        }

        void Unload()
        {
            //Puts("Unload Tommygun's Payback");

            Worker.GetSingleton()?.StopAllCoroutines();
            GameObject.Destroy(Worker.GetSingleton());


            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                UI2.ClearUI(player);

                if (HasAnyCard(player.userID))
                {
                    HashSet<Card> cards = cardMap[player.userID];
                    foreach (var card in new HashSet<Card>(cards))
                    {
                        TakeCard(player, card);
                    }
                }
            }
            foreach (var npc in animals)
            {
                npc?.Kill();
            }
            foreach (var ent in noDamageEntities)
            {
                ent?.Kill();
            }
            foreach (var list in cowboynetworkables.Values)
            {
                foreach (var ent in list)
                {
                    ent?.Kill();
                }
            }
            foreach (var item in interrogationMasks.Values)
            {
                item?.Remove();
            }


            SaveData();
        }



        private void SaveData()
        {
            //| WRITE SERVER FILE
            file_payback_data.WriteObject(paybackData);
        }
        private void LoadData()
        {
            //Puts("Load Data");

            ReadDataIntoDynamicConfigFiles();
            LoadFromDynamicConfigFiles();
        }
        void ReadDataIntoDynamicConfigFiles()
        {
            file_payback_data = Interface.Oxide.DataFileSystem.GetFile(filename_data);
        }
        void LoadFromDynamicConfigFiles()
        {
            try
            {
                paybackData = file_payback_data.ReadObject<PaybackData>();
            }
            catch (Exception e)
            {
                paybackData = new PaybackData();
                //Puts($"Creating new data {e}");
            }

        }


        public const string permission_admin = "payback.admin";

        public bool IsAdmin(BasePlayer player)
        {
            if (permission.UserHasPermission(player.Connection.userid.ToString(), permission_admin))
            {
                return true;
            }
            return false;
        }
        #endregion

        #region UICODE

        //| ===================

        //| =======================================
        //| TOMMYGUN'S PROPRIETARY UI CLASSES
        //| =======================================
        //| 
        //| Code contained below this line is not licensed to be used, copied, or modified.
        //| 
        //| 
        //| =======================================

        //| ===================
        public class UI2
        {
            public static Vector4 vectorFullscreen = new Vector4(0, 0, 1, 1);

            public static string ColorText(string input, string color)
            {
                return "<color=" + color + ">" + input + "</color>";
            }

            public static void ClearUI(BasePlayer player)
            {
                foreach (var guid in UI2.guids)
                {
                    CuiHelper.DestroyUi(player, guid);
                }
            }

            //| =============================
            //| DIRT 
            //| =============================
            public static Dictionary<ulong, HashSet<string>> dirtyMap = new Dictionary<ulong, HashSet<string>>();
            public static HashSet<string> GetDirtyBitsForPlayer(BasePlayer player)
            {
                if (player == null) return new HashSet<string>();
                if (!dirtyMap.ContainsKey(player.userID))
                {
                    dirtyMap[player.userID] = new HashSet<string>();
                }
                return dirtyMap[player.userID];
            }

            //| =============================
            //| LAYOUT 
            //| =============================

            public class Layout
            {

                public Vector2 startPosition;

                public Vector4 cellBounds;
                public Vector2 padding;
                public Vector4 cursor;
                public int maxRows;

                public int row = 0;
                public int col = 0;

                public void Init(Vector2 _startPosition, Vector4 _cellBounds, int _maxRows, Vector2 _padding = default(Vector2))
                {
                    startPosition = _startPosition;
                    cellBounds = _cellBounds;
                    maxRows = _maxRows;
                    padding = _padding;
                    row = 0;
                    col = 0;
                }

                public void NextCell(System.Action<Vector4, int, int> populateAction)
                {
                    float cellX = startPosition.x + (col * (cellBounds.z + padding.x)) + padding.x / 2f;
                    float cellY = startPosition.y - (row * (cellBounds.w + padding.y)) - cellBounds.w - padding.y;

                    cursor = new Vector4(cellX, cellY, cellX, cellY);

                    populateAction(cursor, row, col);

                    //move to next element
                    row++;
                    if (row == maxRows)
                    {
                        row = 0;
                        col++;
                    }

                }

                public void Reset()
                {
                    row = 0;
                    col = 0;
                }
            }



            //| =============================
            //| COLOR FUNCTIONS
            //| =============================

            public static string ColorToHex(Color color)
            {
                return ColorUtility.ToHtmlStringRGB(color);
            }
            public static string HexToRGBAString(string hex)
            {
                Color color = Color.white;
                ColorUtility.TryParseHtmlString("#" + hex, out color);
                string c = $"{String.Format("{0:0.000}", color.r)} {String.Format("{0:0.000}", color.g)} {String.Format("{0:0.000}", color.b)} {String.Format("{0:0.000}", color.a)}";
                return c;
            }


            //| =============================
            //| RECT FUNCTIONS
            //| =============================
            public static Vector4 GetOffsetVector4(Vector2 offset)
            {
                return new Vector4(offset.x, offset.y, offset.x, offset.y);
            }
            public static Vector4 GetOffsetVector4(float x, float y)
            {
                return new Vector4(x, y, x, y);
            }

            public static Vector4 SubtractPadding(Vector4 input, float padding)
            {
                float verticalPadding = GetSquareFromWidth(padding);
                return new Vector4(input.x + padding / 2f, verticalPadding / 2f, input.z - padding / 2f, input.w - verticalPadding / 2f);
            }

            public static float GetSquareFromWidth(float width, float aspect = 16f / 9f)
            {
                //return width * 1f / aspect;
                return width * aspect;
            }
            public static float GetSquareFromHeight(float height, float aspect = 16f / 9f)
            {
                //return height * aspect;
                return height * 1f / aspect;
            }

            //specify the screen-space x1, x2, y1 and it will populate y2
            public static Vector4 MakeSquareFromWidth(Vector4 bounds, float aspect = 16f / 9f)
            {
                return new Vector4(bounds.x, bounds.y, bounds.z, bounds.y + GetSquareFromWidth(bounds.z - bounds.x));
            }
            //specify the screen-space x1, y1, and y2 and it will populate the x2
            public static Vector4 MakeSquareFromHeight(Vector4 bounds, float aspect = 16f / 9f)
            {
                return new Vector4(bounds.x, bounds.y, bounds.x + GetSquareFromHeight(bounds.z - bounds.y), bounds.w);
            }
            //make any sized rect from x1, x2, and y1
            public static Vector4 MakeRectFromWidth(Vector4 bounds, float ratio, float aspect = 16f / 9f)
            {
                Vector4 square = MakeSquareFromWidth(bounds, aspect);
                return new Vector4(square.x, square.y, square.z, square.y + (square.w - square.y) * ratio);
            }
            //make any sized rect from y1, y2 and x1
            public static Vector4 MakeRectFromHeight(Vector4 bounds, float ratio, float aspect = 16f / 9f)
            {
                Vector4 square = MakeSquareFromHeight(bounds, aspect);
                return new Vector4(square.x, square.y, square.x + (square.z - square.x) * ratio, square.w);
            }


            //| =============================
            //| UI PANELS
            //| =============================
            public static HashSet<string> guids = new HashSet<string>();

            public static string GetMinUI(Vector4 panelPosition)
            {
                return panelPosition.x.ToString("0.####") + " " + panelPosition.y.ToString("0.####");
            }
            public static string GetMaxUI(Vector4 panelPosition)
            {
                return panelPosition.z.ToString("0.####") + " " + panelPosition.w.ToString("0.####");
            }
            public static string GetColorString(Vector4 color)
            {
                return color.x.ToString("0.####") + " " + color.y.ToString("0.####") + " " + color.z.ToString("0.####") + " " + color.w.ToString("0.####");
            }
            public static CuiElement CreateInputField(CuiElementContainer container, string parent, string panelName, string message, int textSize, string color, Vector4 bounds, string command)
            {

                CuiElement element = new CuiElement
                {
                    Name = panelName,
                    Parent = parent,
                    Components = {
                        new CuiInputFieldComponent {
                            Align = TextAnchor.MiddleLeft,
                            Color = color,
                            Command = command,
							//Text = message,
							FontSize = textSize,
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = GetMinUI(bounds),
                            AnchorMax = GetMaxUI(bounds),
                        }
                    }
                };
                container.Add(element
                );

                return element;
            }

            public static void CreateOutlineLabel(CuiElementContainer container, string parent, string panelName, string message, string color, int size, Vector4 bounds, TextAnchor textAlignment = TextAnchor.MiddleCenter, float fadeOut = 0, float fadeIn = 0, string outlineColor = "0 0 0 0.8", string outlineDistance = "0.7 -0.7")
            {

                container.Add(new CuiElement
                {
                    Name = panelName,
                    Parent = parent,
                    FadeOut = fadeOut,
                    Components = {

                        new CuiTextComponent {
                            Align = textAlignment,
                            Color = color,
                            FadeIn = fadeIn,
                            FontSize = size,
                            Text = message
                        },
                        new CuiOutlineComponent {
                            Color = outlineColor,
                            Distance = outlineDistance,
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = GetMinUI(bounds),
                            AnchorMax = GetMaxUI(bounds),
                        }
                    }
                });
            }

            public static void CreateLabel(CuiElementContainer container, string parent, string panelName, string message, string color, int size, string aMin, string aMax, TextAnchor textAlignment = TextAnchor.MiddleCenter, float fadeIn = 0, float fadeOut = 0)
            {


                CuiLabel label = new CuiLabel();
                label.Text.Text = message;
                label.RectTransform.AnchorMin = aMin;
                label.RectTransform.AnchorMax = aMax;
                label.Text.Align = textAlignment;
                label.Text.Color = color;
                label.Text.FontSize = size;
                label.Text.FadeIn = fadeIn;
                label.FadeOut = fadeOut;

                container.Add(label, parent, panelName);

            }
            public static CuiButton CreateButton(CuiElementContainer container, string parent, string panelName, string color, string text, int size, Vector4 bounds, string command, TextAnchor align = TextAnchor.MiddleCenter, string textColor = "1 1 1 1")
            {

                container.Add(new CuiElement
                {
                    Name = panelName,
                    Parent = parent,
                    Components = {


                            new CuiButtonComponent {
                                Color = color,
                                Command = command,
                            },

                            new CuiRectTransformComponent
                            {
                                AnchorMin = GetMinUI(bounds),
                                AnchorMax = GetMaxUI(bounds),
                            }
                        }
                });

                CreateOutlineLabel(container, panelName, "text", text, textColor, size, new Vector4(0, 0, 1, 1), align);

                return null;

            }


            public static CuiPanel CreatePanel(CuiElementContainer container, string parent, string panelName, string color, Vector4 bounds, string imageUrl = "", bool cursor = false, float fadeOut = 0, float fadeIn = 0, bool png = false, bool blur = false, bool outline = true)
            {

                if (!string.IsNullOrEmpty(imageUrl))
                {
                    //hack to get images working
                    if (png)
                    {
                        if (outline)
                        {
                            container.Add(new CuiElement
                            {
                                Name = panelName,
                                Parent = parent,
                                FadeOut = fadeOut,
                                Components = {
																
								//new CuiRawImageComponent { Color = "0 0 0 0.5", Sprite = "assets/content/materials/highlight.png", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },

								new CuiRawImageComponent
                                {
                                    Color = color,
                                    Png = imageUrl,
                                    FadeIn = fadeIn
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = GetMinUI(bounds),
                                    AnchorMax = GetMaxUI(bounds),
                                },
                                new CuiOutlineComponent {
                                    Color = "0 0 0 0.9",
                                    Distance = "0.7 -0.7",
                                },
                            }
                            });
                        }
                        else
                        {
                            container.Add(new CuiElement
                            {
                                Name = panelName,
                                Parent = parent,
                                FadeOut = fadeOut,
                                Components = {
																
								//new CuiRawImageComponent { Color = "0 0 0 0.5", Sprite = "assets/content/materials/highlight.png", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },

								new CuiRawImageComponent
                                {
                                    Color = color,
                                    Png = imageUrl,
                                    FadeIn = fadeIn
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = GetMinUI(bounds),
                                    AnchorMax = GetMaxUI(bounds),
                                }
                            }
                            });
                        }


                    }
                    else
                    {
                        container.Add(new CuiElement
                        {
                            Name = panelName,
                            Parent = parent,
                            FadeOut = fadeOut,
                            Components = {


                                new CuiRawImageComponent
                                {
                                    Color = color,
                                    Url = imageUrl,
                                    FadeIn = fadeIn
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = GetMinUI(bounds),
                                    AnchorMax = GetMaxUI(bounds),
                                }
                            }
                        });
                    }


                    return null;

                }
                else
                {

                    if (blur)
                    {

                        //BLURS
                        //assets/content/ui/uibackgroundblur-ingamemenu.mat
                        //assets/content/ui/uibackgroundblur-notice.mat
                        //assets/content/ui/uibackgroundblur.mat
                        // dirty bg blur, can't stretch large
                        string mat = "assets/content/ui/uibackgroundblur-ingamemenu.mat";// MEDIUM BLURRY 
                                                                                         //string mat = "assets/content/ui/uibackgroundblur.mat";//VERY BLURRY

                        //string sprite = "assets/content/ui/ui.white.tga";//kind of boxy outline
                        //string sprite = "assets/content/ui/ui.white.tga";//


                        container.Add(new CuiElement
                        {
                            Name = panelName,
                            Parent = parent,
                            FadeOut = fadeOut,
                            Components = {
                                    new CuiImageComponent {
                                        Color = color,
                                        Material = mat,
                                        FadeIn = fadeIn
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = GetMinUI(bounds),
                                        AnchorMax = GetMaxUI(bounds),
                                    }
                                }
                        });

                    }
                    else
                    {

                        CuiPanel element = new CuiPanel();
                        element.RectTransform.AnchorMin = GetMinUI(bounds);
                        element.RectTransform.AnchorMax = GetMaxUI(bounds);
                        //element.FadeOut = 1f;
                        element.Image.Color = color;
                        element.CursorEnabled = cursor;
                        element.Image.FadeIn = fadeIn;
                        element.FadeOut = fadeOut;

                        container.Add(element, parent, panelName);
                        return element;

                    }

                    return null;

                }

            }

        }

        #endregion
    }
}


// --- End of file: Payback2.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BountyNET.cs ---
// --- Original Local Path: BountyNET.cs ---

﻿//Requires: RustNET
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using UnityEngine;
using System.Linq;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("BountyNET", "k1lly0u", "0.1.8")]
    [Description("A bounty system that can only be access via a RustNET terminal")]
    class BountyNET : RustPlugin
    {
        [PluginReference] Plugin Clans, Friends, PopupNotifications, Economics, ServerRewards;
        private static BountyNET ins;

        private StoredData storedData;
        private OfflinePlayers offlinePlayers;
        private DynamicConfigFile data, offline;

        private Dictionary<ulong, ulong> bountyCreator = new Dictionary<ulong, ulong>();
        private Dictionary<StorageContainer, ulong> openContainers = new Dictionary<StorageContainer, ulong>();
        private Dictionary<int, string> idToDisplayName = new Dictionary<int, string>();

        private string boxPrefab = "assets/prefabs/deployable/woodenbox/woodbox_deployed.prefab";

        private FriendManager friendManager;

        #region Oxide Hooks     
        private void Loaded()
        {
            permission.RegisterPermission("bountynet.use", this);
            permission.RegisterPermission("bountynet.admin", this);

            lang.RegisterMessages(messages, this);

            friendManager = new GameObject("FriendManager").AddComponent<FriendManager>();

            data = Interface.Oxide.DataFileSystem.GetFile("RustNET/bounty_data");
            offline = Interface.Oxide.DataFileSystem.GetFile("RustNET/bounty_offlineplayers");
        }

        private void OnServerInitialized()
        {
            ins = this;
            idToDisplayName = ItemManager.itemList.ToDictionary(x => x.itemid, y => y.displayName.english);
            LoadData();

            offlinePlayers.RemoveOldPlayers();

            RustNET.RegisterModule(Title, this);
            RustNET.ins.AddImage(Title, configData.RustNETIcon);

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                OnPlayerInit(player);
        }

        private void OnPlayerInit(BasePlayer player)
        {
            PlayerData playerData;
            if (storedData.players.TryGetValue(player.userID, out playerData))
            {
                if (playerData.activeBounties.Count > 0)
                    BroadcastToPlayer(player, string.Format(msg("Chat.OutstandingBounties", player.userID), playerData.activeBounties.Count));

                playerData.displayName = player.displayName;
            }

            offlinePlayers.OnPlayerInit(player.UserIDString);
        }

        private void OnPlayerDisconnected(BasePlayer player)
        {
            PlayerData playerData;
            if (storedData.players.TryGetValue(player.userID, out playerData))
                playerData.UpdateWantedTime();

            offlinePlayers.AddOfflinePlayer(player.UserIDString);
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null)
                return null;

            if (entity is StorageContainer && openContainers.ContainsKey(entity as StorageContainer))
                return false;

            return null;
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null)
                return;

            BasePlayer victim = entity.ToPlayer();
            BasePlayer attacker = info.InitiatorPlayer;

            if (victim == null || attacker == null || attacker.GetComponent<NPCPlayer>())
                return;

            PlayerData victimData;
            if (!storedData.players.TryGetValue(victim.userID, out victimData))
                return;

            if (victimData.activeBounties.Count == 0)
                return;

            if (IsFriendlyPlayer(victim.userID, attacker.userID))
            {
                BroadcastToPlayer(attacker, msg("Chat.IsFriend1", attacker.userID));
                return;
            }

            victimData.UpdateWantedTime();

            List<int> rewards = victimData.activeBounties.Select(x => x.rewardId).ToList();
            victimData.activeBounties.Clear();

            PlayerData attackerData;
            if (!storedData.players.TryGetValue(attacker.userID, out attackerData))
            {
                attackerData = new PlayerData(attacker.displayName);
                storedData.players.Add(attacker.userID, attackerData);
            }

            attackerData.ClaimRewards(rewards);
            BroadcastToPlayer(attacker, string.Format(msg("Chat.RewardPending"), victim.displayName, rewards.Count));
        }

        private object CanLootEntity(BasePlayer player, StorageContainer container)
        {
            if (player == null || container == null || !openContainers.ContainsKey(container))
                return null;

            if (openContainers[container] != player.userID)
                return false;

            return null;
        }

        private void OnPlayerLootEnd(PlayerLoot inventory)
        {
            BasePlayer player = inventory.GetComponent<BasePlayer>();

            if (bountyCreator.ContainsKey(player.userID))
            {
                StorageContainer container = inventory.entitySource.GetComponent<StorageContainer>();
                if (container != null)
                {
                    if (container.inventory.itemList.Count == 0)
                        SendReply(player, msg("Chat.NoItemsDeposited", player.userID));
                    else CreateNewBounty(player, bountyCreator[player.userID], 0, 0, container.inventory, false);

                    openContainers.Remove(container);
                    ClearContainer(container.inventory);
                    container.DieInstantly();
                }
                bountyCreator.Remove(player.userID);
            }
        }

        private void OnServerSave() => SaveData();

        private void Unload()
        {
            if (!ServerMgr.Instance.Restarting)
                SaveData();

            if (friendManager != null)
                UnityEngine.Object.Destroy(friendManager.gameObject);

            ins = null;
        }
        #endregion

        #region Functions  
        private void BroadcastToPlayer(BasePlayer player, string message)
        {
            if (configData.Notifications.UsePopupNotifications && PopupNotifications)
                PopupNotifications?.Call("CreatePopupOnPlayer", message, player, configData.Notifications.PopupDuration);
            else SendReply(player, message);
        }

        private void PopupToPlayer(BasePlayer player, string message, float duration = 5f)
        {
            string panelId = $"RustNET.Popup {UnityEngine.Random.Range(0, 100000)}";
            CuiElementContainer container = RustNET.UI.Container(RustNET.uiColors[RustNET.Colors.Background], "0.15 0.115", "0.85 0.145", false, "Hud", panelId);
            RustNET.UI.Label(ref container, message, 11, "0 0", "1 1", TextAnchor.MiddleCenter, panelId);
            CuiHelper.AddUi(player, container);
            timer.In(duration, () => CuiHelper.DestroyUi(player, panelId));
        }

        private void CreateNewBounty(BasePlayer initiator, ulong targetId, int rpAmount, int ecoAmount, ItemContainer container, bool notify)
        {
            IPlayer target = covalence.Players.FindPlayerById(targetId.ToString());

            PlayerData playerData;
            if (!storedData.players.TryGetValue(targetId, out playerData))
            {
                playerData = new PlayerData(target?.Name ?? "No Name");
                storedData.players.Add(targetId, playerData);
            }

            playerData.totalBounties++;

            int rewardId = GetUniqueId();
            storedData.rewards.Add(rewardId, new RewardInfo(rpAmount, ecoAmount, container));
            playerData.activeBounties.Add(new PlayerData.BountyInfo(initiator.userID, initiator.displayName, rewardId));

            BasePlayer targetPlayer = target?.Object as BasePlayer;
            if (targetPlayer != null)
                BroadcastToPlayer(targetPlayer, string.Format(msg("Chat.PlacedTarget", targetPlayer.userID), initiator.displayName));

            if (notify)
                PopupToPlayer(initiator, string.Format(msg("UI.Add.PlacedInitiator", initiator.userID), target?.Name ?? "No Name"));
            else BroadcastToPlayer(initiator, string.Format(msg("Chat.PlacedInitiator", initiator.userID), target?.Name ?? "No Name"));

            if (configData.Notifications.BroadcastNewBounties)
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                {
                    if (player == initiator || player.userID == targetId)
                        continue;
                    BroadcastToPlayer(player, string.Format(msg("Chat.PlacedGlobal", player.userID), initiator.displayName, target?.Name ?? "No Name"));
                }
            }
        }        

        private void GivePlayerRewards(BasePlayer player, RewardInfo rewardInfo, bool notify)
        {
            if (rewardInfo.econAmount > 0 && Economics)
                Economics?.Call("Deposit", player.UserIDString, (double)rewardInfo.econAmount);

            if (rewardInfo.rpAmount > 0 && ServerRewards)
                ServerRewards?.Call("AddPoints", player.userID, rewardInfo.rpAmount);

            if (rewardInfo.rewardItems.Count > 0)
            {
                foreach (RewardInfo.ItemData itemData in rewardInfo.rewardItems)
                {
                    Item item = CreateItem(itemData);
                    player.GiveItem(item, BaseEntity.GiveItemReason.PickedUp);
                }
            }

            if (notify)
                PopupToPlayer(player, msg("UI.Reward.Claimed", player.userID));
        }

        private Item CreateItem(RewardInfo.ItemData itemData)
        {
            Item item = ItemManager.CreateByItemID(itemData.itemid, itemData.amount, itemData.skin);
            item.condition = itemData.condition;

            if (itemData.instanceData != null)
                itemData.instanceData.Restore(item);

            BaseProjectile weapon = item.GetHeldEntity() as BaseProjectile;
            if (weapon != null)
            {
                if (!string.IsNullOrEmpty(itemData.ammotype))
                    weapon.primaryMagazine.ammoType = ItemManager.FindItemDefinition(itemData.ammotype);
                weapon.primaryMagazine.contents = itemData.ammo;
            }
            if (itemData.contents != null)
            {
                foreach (var contentData in itemData.contents)
                {
                    var newContent = ItemManager.CreateByItemID(contentData.itemid, contentData.amount);
                    if (newContent != null)
                    {
                        newContent.condition = contentData.condition;
                        newContent.MoveToContainer(item.contents);
                    }
                }
            }
            return item;
        }

        private void SpawnItemContainer(BasePlayer player)
        {
            StorageContainer container = (StorageContainer)GameManager.server.CreateEntity(boxPrefab, player.transform.position + player.eyes.BodyForward(), new Quaternion(), true);
            container.enableSaving = false;
            container.Spawn();

            openContainers.Add(container, player.userID);
            timer.In(0.15f, () => OpenInventory(player, container));
        }

        private void OpenInventory(BasePlayer player, StorageContainer container)
        {
            player.inventory.loot.Clear();
            player.inventory.loot.entitySource = container;
            player.inventory.loot.itemSource = null;
            player.inventory.loot.AddContainer(container.inventory);
            player.inventory.loot.SendImmediate();
            player.ClientRPCPlayer(null, player, "RPC_OpenLootPanel", "generic");
            player.SendNetworkUpdate();
        }

        private void ClearContainer(ItemContainer itemContainer)
        {
            if (itemContainer == null || itemContainer.itemList == null) return;
            while (itemContainer.itemList.Count > 0)
            {
                var item = itemContainer.itemList[0];
                item.RemoveFromContainer();
                item.Remove(0f);
            }
        }

        private int GetUniqueId()
        {
            int uid = UnityEngine.Random.Range(0, 10000);
            if (storedData.rewards.ContainsKey(uid))
                return GetUniqueId();
            return uid;
        }

        private double CurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        private List<BasePlayer> FindPlayer(string partialNameOrId)
        {
            List<BasePlayer> players = new List<BasePlayer>();
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (partialNameOrId == player.UserIDString)
                    return new List<BasePlayer>() { player };

                if (player.displayName.ToLower().Contains(partialNameOrId.ToLower()))
                    players.Add(player);
            }
            return players;
        }

        private string FormatTime(double time)
        {
            TimeSpan dateDifference = TimeSpan.FromSeconds((float)time);
            var days = dateDifference.Days;
            var hours = dateDifference.Hours;
            hours += (days * 24);
            var mins = dateDifference.Minutes;
            var secs = dateDifference.Seconds;
            if (hours > 0)
                return string.Format("{0:00}h {1:00}m {2:00}s", hours, mins, secs);
            else return string.Format("{0:00}m {1:00}s", mins, secs);
        }

        private string RemoveTag(string str)
        {
            if (str.StartsWith("[") && str.Contains("]") && str.Length > str.IndexOf("]"))
            {
                str = str.Substring(str.IndexOf("]") + 1).Trim();
            }
            if (str.StartsWith("[") && str.Contains("]") && str.Length > str.IndexOf("]"))
                RemoveTag(str);
            return str;
        }

        private string TrimToSize(string str)
        {
            if (str.Length > 20)
                str = str.Substring(0, 20);
            return str;
        }

        private string GetHelpString(ulong playerId, bool title) => title ? msg("UI.Help.Title", playerId) : msg("UI.Help", playerId);

        private bool AllowPublicAccess() => true;
        #endregion

        #region Friends
        private class FriendManager : MonoBehaviour
        {
            private List<FriendEntry> friends = new List<FriendEntry>();

            private void Awake()
            {
                enabled = false;
                InvokeHandler.InvokeRepeating(this, RemoveOldData, 60, 60);
            }

            public void OnFriendshipEnded(string playerId, string friendId)
            {
                friends.Add(new FriendEntry(playerId, friendId));
            }

            public bool WereFriends(string playerId, string friendId)
            {
                bool flag = false;
                IEnumerable<FriendEntry> entries = friends.Where(x => x.playerId == playerId || x.friendId == playerId);
                foreach(FriendEntry entry in entries)
                {
                    if (entry.playerId == friendId || entry.friendId == friendId)
                    {
                        flag = true;
                        break;
                    }
                }
                entries = null;
                return flag;
            }

            public bool WereFriends(ulong playerId, ulong friendId) => WereFriends(playerId.ToString(), friendId.ToString());

            private void RemoveOldData()
            {
                double currentTime = DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

                for (int i = friends.Count - 1; i >= 0; i--)
                {
                    FriendEntry entry = friends.ElementAt(i);
                    if (currentTime > entry.removeAt)
                        friends.Remove(entry);
                }
            }

            public struct FriendEntry
            {
                public string playerId;
                public string friendId;

                public double removeAt;

                public FriendEntry(string playerId, string friendId)
                {
                    this.playerId = playerId;
                    this.friendId = friendId;

                    removeAt = DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds + 3600;
                }
            }
        }

        public bool IsFriendlyPlayer(ulong playerId, ulong friendId)
        {
            if (playerId == friendId || IsFriend(playerId, friendId) || IsClanmate(playerId, friendId) || IsTeamMate(playerId, friendId) || friendManager.WereFriends(playerId, friendId))
                return true;
            return false;
        }

        private bool IsClanmate(ulong playerId, ulong friendId)
        {
            if (!Clans || !configData.IgnoreClans) return false;
            object playerTag = Clans?.Call("GetClanOf", playerId);
            object friendTag = Clans?.Call("GetClanOf", friendId);
            if ((playerTag is string && !string.IsNullOrEmpty((string)playerTag)) && (friendTag is string && !string.IsNullOrEmpty((string)friendTag)))
                if (playerTag == friendTag) return true;
            return false;
        }

        private bool IsFriend(ulong playerID, ulong friendID)
        {
            if (!Friends || !configData.IgnoreFriends) return false;
            return (bool)Friends?.Call("AreFriends", playerID, friendID);
        }

        private bool IsTeamMate(ulong playerId, ulong friendId)
        {
            BasePlayer player = RelationshipManager.FindByID(playerId);
            if (player == null)
                return false;

            RelationshipManager.PlayerTeam playerTeam = RelationshipManager.Instance.FindTeam(player.currentTeam);
            if (playerTeam != null)
                return playerTeam.members.Contains(friendId) || playerTeam.invites.Contains(friendId);

            return false;
        }

        private void OnFriendRemoved(string playerId, string friendId)
        {
            friendManager.OnFriendshipEnded(playerId.ToString(), friendId.ToString());
        }

        private void OnServerCommand(ConsoleSystem.Arg arg)
        {
            string command = arg?.cmd?.FullName;
            if (string.IsNullOrEmpty(command))
                return;

            BasePlayer player = arg.Player();
            if (player == null)
                return;

            if (command == "relationshipmanager.leaveteam")
            {
                RelationshipManager.PlayerTeam currentTeam = RelationshipManager.Instance.FindTeam(player.currentTeam);
                if (currentTeam == null)                
                    return;

                foreach (ulong member in currentTeam.members)
                {
                    if (player.userID == member)
                        continue;
                    OnFriendRemoved(player.UserIDString, member.ToString());
                }                
                return;
            }

            if (command == "relationshipmanager.kickmember")
            {
                RelationshipManager.PlayerTeam currentTeam = RelationshipManager.Instance.FindTeam(player.currentTeam);
                if (currentTeam == null)
                    return;

                ulong target = arg.GetULong(0, (ulong)0);
                foreach (ulong member in currentTeam.members)
                {
                    if (target == member)
                        continue;
                    OnFriendRemoved(target.ToString(), member.ToString());
                }
            }
        }
        #endregion

        #region UI  
        #region Main Menu
        private CuiElementContainer CreateBountyContainer(BasePlayer player, int terminalId, string title, string returnCommand = null)
        {
            CuiElementContainer container = RustNET.ins.GetBaseContainer(player, terminalId, Title);

            RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], "0.04 0.765", "0.96 0.8");
            RustNET.UI.Label(ref container, msg("UI.Menu.Bounty", player.userID) + title, 12, "0.05 0.765", "0.8 0.8", TextAnchor.MiddleLeft);
            RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Return", player.userID), 11, "0.82 0.765", "0.96 0.8", string.IsNullOrEmpty(returnCommand) ? $"bounty.changepage {terminalId} home" : returnCommand);

            if (!permission.UserHasPermission(player.UserIDString, "bountynet.use"))
            {
                RustNET.UI.Label(ref container, msg("UI.Menu.NoPermission", player.userID), 12, "0.05 0.5", "0.95 0.7");
                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
                return null;
            }
            return container;
        }

        private void CreateConsoleWindow(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, string.Empty, $"rustnet.changepage {terminalId}");

            if (container != null)               
            {
                int i = 0;

                if (configData.Rewards.AllowItems)
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.AddItems", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} add items", TextAnchor.MiddleLeft);
                    i++;
                }

                if (configData.Rewards.AllowServerRewards && ServerRewards)
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.AddRP", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} add rp", TextAnchor.MiddleLeft);
                    i++;
                }

                if (configData.Rewards.AllowEconomics && Economics)
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.AddEco", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} add eco", TextAnchor.MiddleLeft);
                    i++;
                }


                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.Cancel", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} cancel 0", TextAnchor.MiddleLeft);
                i++;

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.Claim", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} claim 0", TextAnchor.MiddleLeft);
                i++;

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.View", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} view 0", TextAnchor.MiddleLeft);
                i++;

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.Wanted", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} wanted 0", TextAnchor.MiddleLeft);
                i++;

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (i * 0.04f))}", $"0.31 {(0.755f - (i * 0.04f))}");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Menu.Hunters", player.userID), 11, $"0.05 {0.725f - (i * 0.04f)}", $"0.3 {0.755f - (i * 0.04f)}", $"bounty.changepage {terminalId} hunters 0", TextAnchor.MiddleLeft);
                i++;
                
                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }            
        }       
        #endregion

        #region Bounty Creation       
        private void CreatePlayerSelectionMenu(BasePlayer player, int terminalId, int page, bool isOffline, string type)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.SelectPlayer", player.userID));
            if (container != null)
            {
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], isOffline ? msg("UI.Selection.Offline", player.userID) : msg("UI.Selection.Online", player.userID), 11, "0.59 0.765", "0.81 0.8", $"bounty.changepage {terminalId} selection {page} {!isOffline} {type}");

                int count = 0;
                int startAt = page * 90;
                                
                IPlayer[] players = isOffline ? offlinePlayers.GetOfflineList().OrderBy(x => x.Name).ToArray() : covalence.Players.Connected.OrderBy(x => x.Name).ToArray();
                for (int i = startAt; i < (startAt + 90 > players.Length ? players.Length : startAt + 90); i++)
                {
                    IPlayer target = players.ElementAt(i);

                    //if (target.Id == player.UserIDString)
                        //continue;

                    PlayerData playerData;
                    if (storedData.players.TryGetValue(ulong.Parse(target.Id), out playerData))
                    {
                        if (playerData.GetBountyOf(player.userID) != null)
                            continue;
                    }

                    float[] position = GetButtonPosition(count);

                    if (count == 0 || count % 5 == 0)
                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {position[1]}", $"0.96 {position[3]}");

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], string.IsNullOrEmpty(target.Name) ? target.Id : TrimToSize(RemoveTag(target.Name)), 11, $"{position[0]} {position[1]}", $"{position[2]} {position[3]}", $"bounty.addbounty {type} {terminalId} {target.Id} 0");

                    count++;
                }

                int totalPages = players.Length / 90;

                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} selection {page - 1} {isOffline} {type}" : "");
                RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} selection {page + 1} {isOffline} {type}" : "");

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }
        }

        private void CreateNewAmountMenu(BasePlayer player, int terminalId, ulong targetId, int amount, bool isRp)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.Tip.SelectAmount", player.userID));

            if (container != null)
            {           
                string targetName = covalence.Players.FindPlayerById(targetId.ToString())?.Name ?? targetId.ToString();

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 0.725", $"0.96 0.755");
                RustNET.UI.Label(ref container, string.Format(isRp ? msg("UI.Tip.SelectAmountRP", player.userID) : msg("UI.Tip.SelectAmountEco", player.userID), targetName), 11, $"0.05 0.725", $"0.95 0.755", TextAnchor.MiddleLeft);

                RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 0.685", $"0.96 0.715");
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "- 1000", 11, $"0.04 0.685", $"0.1 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount - 1000}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "- 100", 11, $"0.11 0.685", $"0.16 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount - 100}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "- 10", 11, $"0.17 0.685", $"0.22 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount - 10}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "- 1", 11, $"0.23 0.685", $"0.28 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount - 1}", TextAnchor.MiddleCenter);
                RustNET.UI.Label(ref container, string.Format((isRp ? msg("UI.Reward.RP", player.userID) : msg("UI.Reward.Econ", player.userID)), amount), 11, $"0.28 0.685", $"0.48 0.715", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "+ 1", 11, $"0.48 0.685", $"0.53 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount + 1}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "+ 10", 11, $"0.54 0.685", $"0.59 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount + 10}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "+ 100", 11, $"0.6 0.685", $"0.65 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount + 100}", TextAnchor.MiddleCenter);
                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "+ 1000", 11, $"0.66 0.685", $"0.72 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount + 1000}", TextAnchor.MiddleCenter);

                RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Add.Confirm", player.userID), 11, $"0.82 0.685", $"0.96 0.715", $"bounty.addbounty {(isRp ? "rp" : "eco")} {terminalId} {targetId} {amount} confirm", TextAnchor.MiddleCenter);

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }
        }
        #endregion

        #region Cancel Bounty
        private void CreateCancelBountyMenu(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.Tip.Cancel", player.userID));
            if (container != null)
            {   
                Dictionary<ulong, PlayerData.BountyInfo> activeBounties = storedData.players.Where(x => x.Value.activeBounties.Exists(y => y.initiatorId == player.userID)).ToDictionary(x => x.Key, y => y.Value.activeBounties.FirstOrDefault(x => x.initiatorId == player.userID));

                if (activeBounties == null || activeBounties.Count == 0)
                    RustNET.UI.Label(ref container, msg("UI.Cancel.NoneSet", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Name", player.userID), 11, $"0.05 {0.725f}", $"0.24 {0.755f}", TextAnchor.MiddleLeft);
                    RustNET.UI.Label(ref container, msg("UI.View.TimeActive", player.userID), 11, $"0.25 {0.725f}", $"0.44 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Reward", player.userID), 11, $"0.45 {0.725f}", $"0.81 {0.755f}", TextAnchor.MiddleLeft);
                    
                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > activeBounties.Count ? activeBounties.Count : startAt + 17); i++)
                    {
                        var bountyInfo = activeBounties.ElementAt(i);

                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {covalence.Players.FindPlayerById(bountyInfo.Key.ToString())?.Name ?? bountyInfo.Key.ToString()}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.24 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);
                        RustNET.UI.Label(ref container, FormatTime(CurrentTime() - bountyInfo.Value.initiatedTime), 11, $"0.25 {0.725f - (count * 0.04f)}", $"0.44 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Label(ref container, storedData.rewards[bountyInfo.Value.rewardId].GetRewardString(player.userID), 10, $"0.45 {0.725f - (count * 0.04f)}", $"0.81 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);

                        RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.View.Cancel", player.userID), 11, $"0.82 {0.725f - (count * 0.04f)}", $"0.96 {0.755f - (count * 0.04f)}", $"bounty.cancelbounty {terminalId} {page} {bountyInfo.Key} {player.userID} false");

                        count++;
                    }

                    int totalPages = activeBounties.Count / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} cancel {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} cancel {page + 1}" : "");
                }

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }            
        }
        #endregion

        #region Claim
        private void CreateClaimMenu(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.Tip.Claim", player.userID));
            if (container != null)
            {
                PlayerData playerData;  
                if (!storedData.players.TryGetValue(player.userID, out playerData) || playerData.unclaimedRewards.Count == 0)
                    RustNET.UI.Label(ref container, msg("UI.Claim.NoRewardsPending", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Reward", player.userID), 11, $"0.05 {0.725f}", $"0.81 {0.755f}", TextAnchor.MiddleLeft);                    

                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > playerData.unclaimedRewards.Count ? playerData.unclaimedRewards.Count : startAt + 17); i++)
                    {
                        RewardInfo rewardInfo = storedData.rewards[playerData.unclaimedRewards.ElementAt(i)];

                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {rewardInfo.GetRewardString(player.userID)}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.81 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);                        

                        RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.Claim.ClaimReward", player.userID), 11, $"0.82 {0.725f - (count * 0.04f)}", $"0.96 {0.755f - (count * 0.04f)}", $"bounty.claimreward {terminalId} {page} {playerData.unclaimedRewards.ElementAt(i)}");

                        count++;
                    }

                    int totalPages = playerData.unclaimedRewards.Count / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} claim {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} claim {page + 1}" : "");
                }

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }
        }    
        #endregion

        #region Bounty View
        private void CreateBountyViewMenu(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.View.ActiveBounties", player.userID));
            if (container != null)             
            {
                Dictionary<ulong, PlayerData> activeBounties = storedData.players.Where(x => x.Value.activeBounties.Count > 0).ToDictionary(x => x.Key, y => y.Value);

                if (activeBounties == null || activeBounties.Count == 0)
                    RustNET.UI.Label(ref container, msg("UI.View.NoActiveBounties", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Name", player.userID), 11, $"0.05 {0.725f}", $"0.39 {0.755f}", TextAnchor.MiddleLeft);
                    RustNET.UI.Label(ref container, msg("UI.Wanted.CurrentTime", player.userID), 11, $"0.4 {0.725f}", $"0.63 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.Wanted.ActiveBounties", player.userID), 11, $"0.64 {0.725f}", $"0.79 {0.755f}");

                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > activeBounties.Count ? activeBounties.Count : startAt + 17); i++)
                    {
                        KeyValuePair<ulong, PlayerData> playerData = activeBounties.ElementAt(i);                        
                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {playerData.Value.displayName}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.39 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);
                        RustNET.UI.Label(ref container, FormatTime(CurrentTime() - playerData.Value.activeBounties.Min(x => x.initiatedTime)), 11, $"0.4 {0.725f - (count * 0.04f)}", $"0.63 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Label(ref container, playerData.Value.activeBounties.Count.ToString(), 11, $"0.64 {0.725f - (count * 0.04f)}", $"0.79 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], msg("UI.ViewBounties", player.userID), 11, $"0.82 {0.725f - (count * 0.04f)}", $"0.96 {0.755f - (count * 0.04f)}", $"bounty.viewbounties {terminalId} {playerData.Key} 0");

                        count++;
                    }

                    int totalPages = activeBounties.Count / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} view {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} view {page + 1}" : "");
                }
                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }            
        }

        private void CreateIndividualBountyView(BasePlayer player, int terminalId, ulong targetId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, string.Format(msg("UI.View.ActiveBountiesPlayer", player.userID), covalence.Players.FindPlayerById(targetId.ToString())?.Name ?? targetId.ToString()), $"bounty.changepage {terminalId} view 0");

            if (container != null)              
            {
                PlayerData playerData;
                if (!storedData.players.TryGetValue(targetId, out playerData) || playerData.activeBounties.Count == 0)
                    RustNET.UI.Label(ref container, msg("UI.View.NoActiveBountiesPlayer", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.PlacedBy", player.userID), 11, $"0.05 {0.725f}", $"0.24 {0.755f}", TextAnchor.MiddleLeft);
                    RustNET.UI.Label(ref container, msg("UI.View.TimeActive", player.userID), 11, $"0.25 {0.725f}", $"0.44 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Reward", player.userID), 11, $"0.45 {0.725f}", $"0.91 {0.755f}", TextAnchor.MiddleLeft);
                    if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, "bountynet.admin"))
                        RustNET.UI.Label(ref container, msg("UI.View.AdminCancel", player.userID), 11, $"0.82 {0.725f}", $"0.95 {0.755f}", TextAnchor.MiddleRight);

                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > playerData.activeBounties.Count ? playerData.activeBounties.Count : startAt + 17); i++)
                    {
                        PlayerData.BountyInfo bountyInfo = playerData.activeBounties.ElementAt(i);
                                                
                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {bountyInfo.initiatorName}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.24 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);
                        RustNET.UI.Label(ref container, FormatTime(CurrentTime() - bountyInfo.initiatedTime), 11, $"0.25 {0.725f - (count * 0.04f)}", $"0.44 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Label(ref container, storedData.rewards[bountyInfo.rewardId].GetRewardString(player.userID), 10, $"0.45 {0.725f - (count * 0.04f)}", $"0.925 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);

                        if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, "bountynet.admin"))
                            RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], "X", 10, $"0.935 {0.725f - (count * 0.04f)}", $"0.96 {0.755f - (count * 0.04f)}", $"bounty.cancelbounty {terminalId} {page} {targetId} {bountyInfo.initiatorId} true");

                        count++;
                    }

                    int totalPages = playerData.activeBounties.Count / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.viewbounties {terminalId} {targetId} {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.viewbounties {terminalId} {targetId} {page + 1}" : "");
                }

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }           
        }
        #endregion

        #region Most Wanted
        private void CreateWantedMenu(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.Tip.Wanted", player.userID));
            if (container != null)             
            {
                PlayerData[] wantedPlayers = storedData.players.Values.Where(x => x.totalBounties > 0).OrderByDescending(x => x.totalWantedTime + x.GetCurrentWantedTime()).ToArray();

                if (wantedPlayers == null || wantedPlayers.Length == 0)
                    RustNET.UI.Label(ref container, msg("UI.Wanted.NoWantedPlayers", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Name", player.userID), 11, $"0.05 {0.725f}", $"0.39 {0.755f}", TextAnchor.MiddleLeft);
                    RustNET.UI.Label(ref container, msg("UI.Wanted.TotalTime", player.userID), 11, $"0.4 {0.725f}", $"0.63 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.Wanted.TotalBounties", player.userID), 11, $"0.64 {0.725f}", $"0.79 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.Wanted.ActiveBounties", player.userID), 11, $"0.8 {0.725f}", $"0.95 {0.755f}");

                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > wantedPlayers.Length ? wantedPlayers.Length : startAt + 17); i++)
                    {
                        PlayerData playerData = wantedPlayers.ElementAt(i);
                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {playerData.displayName}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.39 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);
                        RustNET.UI.Label(ref container, FormatTime(playerData.totalWantedTime + playerData.GetCurrentWantedTime()), 11, $"0.4 {0.725f - (count * 0.04f)}", $"0.63 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Label(ref container, playerData.totalBounties.ToString(), 11, $"0.64 {0.725f - (count * 0.04f)}", $"0.79 {0.755f - (count * 0.04f)}");
                        RustNET.UI.Label(ref container, playerData.activeBounties.Count.ToString(), 11, $"0.8 {0.725f - (count * 0.04f)}", $"0.95 {0.755f - (count * 0.04f)}");

                        count++;
                    }

                    int totalPages = wantedPlayers.Length / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} wanted {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} wanted {page + 1}" : "");
                }

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }            
        }
        #endregion

        #region Hunters
        private void CreateHuntersMenu(BasePlayer player, int terminalId, int page)
        {
            CuiElementContainer container = CreateBountyContainer(player, terminalId, msg("UI.Tip.Hunters", player.userID));
            if (container != null)
            {
                PlayerData[] wantedPlayers = storedData.players.Values.Where(x => x.bountiesClaimed > 0).OrderByDescending(x => x.bountiesClaimed).ToArray();

                if (wantedPlayers == null || wantedPlayers.Length == 0)
                    RustNET.UI.Label(ref container, msg("UI.Hunters.NoHunters", player.userID), 12, "0.05 0.5", "0.95 0.7");
                else
                {
                    RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {0.725f}", $"0.96 {0.755f}");
                    RustNET.UI.Label(ref container, msg("UI.View.Name", player.userID), 11, $"0.05 {0.725f}", $"0.4 {0.755f}", TextAnchor.MiddleLeft);                   
                    RustNET.UI.Label(ref container, msg("UI.Hunters.ClaimedBounties", player.userID), 11, $"0.8 {0.725f}", $"0.95 {0.755f}");

                    int count = 1;
                    int startAt = page * 17;
                    for (int i = startAt; i < (startAt + 17 > wantedPlayers.Length ? wantedPlayers.Length : startAt + 17); i++)
                    {
                        PlayerData playerData = wantedPlayers.ElementAt(i);
                        RustNET.UI.Panel(ref container, RustNET.uiColors[RustNET.Colors.Panel], $"0.04 {(0.725f - (count * 0.04f))}", $"0.96 {(0.755f - (count * 0.04f))}");
                        RustNET.UI.Label(ref container, $"> {playerData.displayName}", 11, $"0.05 {0.725f - (count * 0.04f)}", $"0.4 {0.755f - (count * 0.04f)}", TextAnchor.MiddleLeft);
                        RustNET.UI.Label(ref container, playerData.bountiesClaimed.ToString(), 11, $"0.8 {0.725f - (count * 0.04f)}", $"0.95 {0.755f - (count * 0.04f)}");

                        count++;
                    }

                    int totalPages = wantedPlayers.Length / 17;

                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Back", player.userID), 11, "0.3 0.01", "0.44 0.04", page > 0 ? $"bounty.changepage {terminalId} wanted {page - 1}" : "");
                    RustNET.UI.Label(ref container, string.Format(RustNET.msg("UI.Page", player.userID), page + 1, totalPages + 1), 11, "0.44 0.01", "0.56 0.04");
                    RustNET.UI.Button(ref container, RustNET.uiColors[RustNET.Colors.Button], RustNET.msg("UI.Next", player.userID), 11, "0.56 0.01", "0.7 0.04", page + 1 <= totalPages ? $"bounty.changepage {terminalId} wanted {page + 1}" : "");
                }

                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);
                CuiHelper.AddUi(player, container);
            }            
        }
        #endregion          
        #endregion

        #region UI Commands
        [ConsoleCommand("bounty.changepage")]
        private void ccmdChangePage(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null || !permission.UserHasPermission(player.UserIDString, "bountynet.use"))
                return;

            switch (arg.Args[1])
            {
                case "add":
                    CreatePlayerSelectionMenu(player, arg.GetInt(0), 0, false, arg.Args[2]);                    
                    return;
                case "cancel":
                    CreateCancelBountyMenu(player, arg.GetInt(0), arg.GetInt(2));
                    return;
                case "claim":
                    CreateClaimMenu(player, arg.GetInt(0), arg.GetInt(2));
                    return;
                case "view":
                    CreateBountyViewMenu(player, arg.GetInt(0), arg.GetInt(2));
                    return;
                case "wanted":
                    CreateWantedMenu(player, arg.GetInt(0), arg.GetInt(2));
                    return;
                case "hunters":
                    CreateHuntersMenu(player, arg.GetInt(0), arg.GetInt(2));
                    return;                
                case "selection":                   
                    CreatePlayerSelectionMenu(player, arg.GetInt(0), arg.GetInt(2), arg.GetBool(3), arg.Args[4]);
                    return;
                case "home":
                    CreateConsoleWindow(player, arg.GetInt(0), 0);
                    return;                
            }
        }

        [ConsoleCommand("bounty.claimreward")]
        private void ccmdClaimReward(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null || !permission.UserHasPermission(player.UserIDString, "bountynet.use"))
                return;
            
            RewardInfo rewardInfo;
            if (storedData.rewards.TryGetValue(arg.GetInt(2), out rewardInfo))
            {
                GivePlayerRewards(player, rewardInfo, true);
                storedData.rewards.Remove(arg.GetInt(2));
            }

            PlayerData playerData;
            if (storedData.players.TryGetValue(player.userID, out playerData))            
                playerData.unclaimedRewards.Remove(arg.GetInt(2));

            CreateClaimMenu(player, arg.GetInt(0), arg.GetInt(1));
        }

        [ConsoleCommand("bounty.addbounty")]
        private void ccmdAddNewBounty(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null || !permission.UserHasPermission(player.UserIDString, "bountynet.use"))
                return;
            
            int terminalId = arg.GetInt(1);
            ulong targetId = arg.GetUInt64(2);

            PlayerData targetData;
            if (storedData.players.TryGetValue(targetId, out targetData))
            {
                if (targetData.GetBountyOf(player.userID) != null)
                {
                    PopupToPlayer(player, msg("UI.Add.HasBounty", player.userID));
                    return;
                }
            }

            if (configData.SetLimit > 0)
            {
                if (storedData.players.TryGetValue(player.userID, out targetData))
                {
                    if (targetData.GetTotalBounties() >= configData.SetLimit)
                    {
                        PopupToPlayer(player, string.Format(msg("UI.Add.Limit", player.userID), configData.SetLimit));
                        return;
                    }
                }
            }

            if (arg.Args[0] == "items")
            {
                CuiHelper.DestroyUi(player, RustNET.RustNET_Panel);

                SpawnItemContainer(player);
                if (bountyCreator.ContainsKey(player.userID))
                    bountyCreator[player.userID] = targetId;
                else bountyCreator.Add(player.userID, targetId);

                return;
            }

            bool isRp = arg.Args[0] == "rp";

            int amount = 0;
            if (arg.Args.Length >= 4)            
                amount = arg.GetInt(3);

            int available = isRp ? (int)ServerRewards?.Call("CheckPoints", player.userID) : Convert.ToInt32((double)Economics?.Call("Balance", player.UserIDString));

            if (amount > available)
                amount = available;
            if (amount < 0)
                amount = 0;
           
            if (arg.Args.Length == 5)
            {
                if (isRp)
                    ServerRewards?.Call("TakePoints", player.userID, amount);
                else Economics?.Call("Withdraw", player.UserIDString, (double)amount);

                CreateNewBounty(player, targetId, isRp ? amount : 0, !isRp ? amount : 0, null, true);
                CreateConsoleWindow(player, terminalId, 0);
                return;
            }

            CreateNewAmountMenu(player, terminalId, targetId, amount, arg.Args[0] == "rp");
        }

        [ConsoleCommand("bounty.cancelbounty")]
        private void ccmdClearBounty(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null || !permission.UserHasPermission(player.UserIDString, "bountynet.use"))
                return;           

            PlayerData targetData;
            if (storedData.players.TryGetValue(arg.GetUInt64(2), out targetData))
            {
                PlayerData.BountyInfo bountyInfo = targetData.GetBountyOf(arg.GetUInt64(3));
                if (bountyInfo != null)
                {
                    RewardInfo rewardInfo = storedData.rewards[bountyInfo.rewardId];

                    if (!arg.GetBool(4))
                        GivePlayerRewards(player, rewardInfo, false);

                    storedData.rewards.Remove(bountyInfo.rewardId);
                    targetData.activeBounties.Remove(bountyInfo);

                    IPlayer target = covalence.Players.FindPlayerById(arg.GetUInt64(2).ToString());
                    if (target != null && target.IsConnected)
                    {
                        BasePlayer targetPlayer = target.Object as BasePlayer;
                        if (targetPlayer != null)
                        {
                            if (arg.GetBool(4))
                                BroadcastToPlayer(targetPlayer, string.Format(msg("Chat.Cancelled.Target.Admin", targetPlayer.userID), bountyInfo.initiatorName));
                            else BroadcastToPlayer(targetPlayer, string.Format(msg("Chat.Cancelled.Target", targetPlayer.userID), player.displayName));
                        }
                    }

                    if (arg.GetBool(4))
                        BroadcastToPlayer(player, string.Format(msg("Chat.Cancelled.Initiator.Admin", player.userID), target.Name));
                    PopupToPlayer(player, string.Format(msg("UI.Cancelled.Initiator", player.userID), target.Name));
                }
            }
                        
            if (arg.GetBool(4))
                CreateIndividualBountyView(player, arg.GetInt(0), arg.GetUInt64(2), 0);
            else CreateCancelBountyMenu(player, arg.GetInt(0), arg.GetInt(1));
        }
        
        [ConsoleCommand("bounty.viewbounties")]
        private void ccmdViewBounties(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null || !permission.UserHasPermission(player.UserIDString, "bountynet.use"))
                return;
          
            CreateIndividualBountyView(player, arg.GetInt(0), arg.GetUInt64(1), arg.GetInt(2));
        }
        #endregion

        #region UI Functions
        private float[] GetButtonPosition(int i)
        {           
            int rowNumber = i == 0 ? 0 : RowNumber(5, i);
            int columnNumber = i - (rowNumber * 5);

            float offsetX = 0.04f + ((0.01f + 0.176f) * columnNumber);
            float offsetY = (0.725f - (rowNumber * 0.04f));
            
            return new float[] { offsetX, offsetY, offsetX + 0.176f, offsetY + 0.03f };
        }

        private int RowNumber(int max, int count) => Mathf.FloorToInt(count / max);

        private void ClearBounties(BasePlayer player, int terminalId, int page, ulong targetId)
        {
            PlayerData playerData;
            if (storedData.players.TryGetValue(targetId, out playerData) || playerData.activeBounties.Count == 0)
            {
                foreach (var bounty in playerData.activeBounties)
                    storedData.rewards.Remove(bounty.rewardId);
                playerData.activeBounties.Clear();
            }
            CreateBountyViewMenu(player, terminalId, page);
        }
        #endregion

        #region Commands  
        [ConsoleCommand("bounty")]
        private void ccmdBounty(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null)
                return;

            if (arg.Args == null || arg.Args.Length == 0)
            {
                SendReply(arg, "bounty view <target name or ID> - View active bounties on the specified player");
                SendReply(arg, "bounty top - View the top 20 bounty hunters");
                SendReply(arg, "bounty wanted - View the top 20 most wanted players");
                SendReply(arg, "bounty clear <target name or ID> - Clear all active bounties on the specified player");
                SendReply(arg, "bounty wipe - Wipe all bounty data");
                return;
            }

            switch (arg.Args[0].ToLower())
            {
                case "view":
                    {
                        if (arg.Args.Length < 2)
                        {
                            SendReply(arg, "Invalid command syntax! Type 'bounty' to see available commands");
                            return;
                        }

                        IPlayer targetPlayer = covalence.Players.FindPlayer(arg.Args[1]);
                        if (targetPlayer == null)
                        {
                            SendReply(arg, "Unable to find a player with that name or ID");
                            return;
                        }

                        PlayerData playerData;
                        if (!storedData.players.TryGetValue(ulong.Parse(targetPlayer.Id), out playerData) || playerData.activeBounties.Count == 0)
                        {
                            SendReply(arg, "That player does not have any active bounties");
                            return;
                        }

                        SendReply(arg, string.Format("{0} has {1} active bounties", targetPlayer.Name, playerData.activeBounties.Count));
                        foreach (var bounty in playerData.activeBounties)
                        {
                            RewardInfo rewardInfo = storedData.rewards[bounty.rewardId];
                            string reward = string.Empty;
                            if (rewardInfo.rewardItems.Count > 1)
                            {
                                for (int i = 0; i < rewardInfo.rewardItems.Count; i++)
                                {
                                    RewardInfo.ItemData itemData = rewardInfo.rewardItems.ElementAt(i);
                                    reward += (string.Format("{0}x {1}", itemData.amount, idToDisplayName[itemData.itemid]) + (i < rewardInfo.rewardItems.Count - 1 ? ", " : ""));
                                }
                            }
                            else reward = rewardInfo.econAmount > 0 ? string.Format("{0} economics", rewardInfo.econAmount) : string.Format("{0} rp", rewardInfo.rpAmount);

                            SendReply(arg, string.Format("Placed by {0} {1} ago. Reward: {2}", bounty.initiatorName, FormatTime(CurrentTime() - bounty.initiatedTime), reward));
                        }
                    }
                    return;
                case "top":
                    IEnumerable<PlayerData> top20Hunters = storedData.players.Values.OrderByDescending(x => x.bountiesClaimed).Take(20);
                    string hunterMessage = "Top 20 Hunters:";

                    foreach (PlayerData playerData in top20Hunters)
                        hunterMessage += string.Format("\n{0} - {1} bounties collected", playerData.displayName, playerData.bountiesClaimed);

                    SendReply(arg, hunterMessage);
                    return;
                case "wanted":
                    IEnumerable<PlayerData> top20Hunted = storedData.players.Values.OrderByDescending(x => x.totalWantedTime + x.GetCurrentWantedTime()).Take(20);
                    string wantedMessage = "Top 20 Most Wanted:";

                    foreach (PlayerData playerData in top20Hunted)
                        wantedMessage += string.Format("\n{0} has all together been on the run for {1} with a total of {2} bounties", playerData.displayName, FormatTime(playerData.totalWantedTime + playerData.GetCurrentWantedTime()), playerData.totalBounties);

                    SendReply(arg, wantedMessage);
                    return;
                case "clear":
                    {
                        if (arg.Args.Length < 2)
                        {
                            SendReply(arg, "Invalid command syntax! Type 'bounty' to see available commands");
                            return;
                        }

                        IPlayer targetPlayer = covalence.Players.FindPlayer(arg.Args[1]);
                        if (targetPlayer == null)
                        {
                            SendReply(arg, "Unable to find a player with that name or ID");
                            return;
                        }

                        PlayerData playerData;
                        if (!storedData.players.TryGetValue(ulong.Parse(targetPlayer.Id), out playerData) || playerData.activeBounties.Count == 0)
                        {
                            SendReply(arg, "That player does not have any active bounties");
                            return;
                        }

                        foreach (var bounty in playerData.activeBounties)
                            storedData.rewards.Remove(bounty.rewardId);
                        playerData.activeBounties.Clear();

                        SendReply(arg, $"You have cleared all pending bounties from {targetPlayer.Name}");
                    }
                    return;
                case "wipe":
                    storedData = new StoredData();
                    SaveData();
                    SendReply(arg, "All data has been wiped!");
                    return;
                default:
                    SendReply(arg, "Invalid command syntax! Type 'bounty' to see available commands");
                    break;
            }
        }
        #endregion        

        #region Config        
        private ConfigData configData;
        private class ConfigData
        {
            [JsonProperty(PropertyName = "Ignore kills by clan members")]
            public bool IgnoreClans { get; set; }
            [JsonProperty(PropertyName = "Ignore kills by friends")]
            public bool IgnoreFriends { get; set; }
            [JsonProperty(PropertyName = "Set a limit of how many active bounties a player can have at any time (set to 0 to disable the limit)")]
            public int SetLimit { get; set; }
            [JsonProperty(PropertyName = "Notification Options")]
            public NotificationOptions Notifications { get; set; }
            [JsonProperty(PropertyName = "Reward Options")]
            public RewardOptions Rewards { get; set; }

            public class NotificationOptions
            {
                [JsonProperty(PropertyName = "PopupNotifications - Broadcast using PopupNotifications")]
                public bool UsePopupNotifications { get; set; }
                [JsonProperty(PropertyName = "PopupNotifications - Duration of notification")]
                public float PopupDuration { get; set; }
                [JsonProperty(PropertyName = "Broadcast new bounties globally")]
                public bool BroadcastNewBounties { get; set; }
                [JsonProperty(PropertyName = "Reminders - Remind targets they have a bounty on them")]
                public bool ShowReminders { get; set; }
                [JsonProperty(PropertyName = "Reminders - Amount of time between reminders (in minutes)")]
                public int ReminderTime { get; set; }
            }

            public class RewardOptions
            {
                [JsonProperty(PropertyName = "Allow bounties to be placed using Economics")]
                public bool AllowEconomics { get; set; }
                [JsonProperty(PropertyName = "Allow bounties to be placed using RP")]
                public bool AllowServerRewards { get; set; }
                [JsonProperty(PropertyName = "Allow bounties to be placed using items")]
                public bool AllowItems { get; set; }
            }
            [JsonProperty(PropertyName = "Bounty icon URL for RustNET menu")]
            public string RustNETIcon { get; set; }
            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                IgnoreClans = true,
                IgnoreFriends = true,
                SetLimit = 0,
                Notifications = new ConfigData.NotificationOptions
                {
                    BroadcastNewBounties = true,
                    PopupDuration = 8f,
                    ReminderTime = 30,
                    ShowReminders = true,
                    UsePopupNotifications = false
                },
                Rewards = new ConfigData.RewardOptions
                {
                    AllowEconomics = true,
                    AllowItems = true,
                    AllowServerRewards = true
                },
                RustNETIcon = "https://www.chaoscode.io/oxide/Images/RustNET/bountyicon.png",
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            ConfigData baseConfig = GetBaseConfig();

            if (configData.Version < new VersionNumber(0, 1, 5))
                configData.SetLimit = 0;
            
            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        #endregion

        #region Data Management        
        private void SaveData()
        {
            data.WriteObject(storedData);
            offline.WriteObject(offlinePlayers);
        }

        private void LoadData()
        {
            try
            {
                storedData = data.ReadObject<StoredData>();
            }
            catch
            {
                storedData = new StoredData();
            }
            try
            {
                offlinePlayers = offline.ReadObject<OfflinePlayers>();
            }
            catch
            {
                offlinePlayers = new OfflinePlayers();
            }
        }

        private class StoredData
        {
            public Dictionary<ulong, PlayerData> players = new Dictionary<ulong, PlayerData>();
            public Dictionary<int, RewardInfo> rewards = new Dictionary<int, RewardInfo>();
        }

        private class PlayerData
        {
            public string displayName;
            public int totalBounties;
            public int bountiesClaimed;
            public double totalWantedTime;
            public List<BountyInfo> activeBounties = new List<BountyInfo>();
            public List<int> unclaimedRewards = new List<int>();

            public PlayerData() { }

            public PlayerData(string displayName)
            {
                this.displayName = displayName;
            }

            public void ClaimRewards(List<int> rewards)
            {
                foreach (int reward in rewards)
                {
                    unclaimedRewards.Add(reward);
                    bountiesClaimed++;
                }
            }

            public BountyInfo GetBountyOf(ulong initiatorId)
            {
                foreach(BountyInfo bountyInfo in activeBounties)
                {
                    if (bountyInfo.initiatorId == initiatorId)
                        return bountyInfo;
                }
                return null;
            }

            public int GetTotalBounties() => activeBounties.Count;

            public void UpdateWantedTime()
            {
                totalWantedTime += GetCurrentWantedTime();
            }

            public double GetCurrentWantedTime()
            {
                double largestTime = 0;
                foreach (BountyInfo bountyInfo in activeBounties)
                {
                    double time = DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds - bountyInfo.initiatedTime;
                    if (time > largestTime)
                        largestTime = time;
                }
                return largestTime;
            }

            public class BountyInfo
            {
                public ulong initiatorId;
                public string initiatorName;
                public double initiatedTime;
                public int rewardId;

                public BountyInfo() { }
                public BountyInfo(ulong initiatorId, string initiatorName, int rewardId)
                {
                    this.initiatorId = initiatorId;
                    this.initiatorName = initiatorName;
                    this.rewardId = rewardId;
                    this.initiatedTime = DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
                }
            }
        }

        private class RewardInfo
        {
            public int rpAmount;
            public int econAmount;
            public List<ItemData> rewardItems = new List<ItemData>();

            public RewardInfo() { }
            public RewardInfo(int rpAmount, int econAmount, ItemContainer container)
            {
                this.rpAmount = rpAmount;
                this.econAmount = econAmount;
                if (container != null)
                    rewardItems = GetItems(container).ToList();
            }

            public string GetRewardString(ulong playerId)
            {
                string reward = string.Empty;
                if (rewardItems.Count > 0)
                {
                    Dictionary<int, int> items = new Dictionary<int, int>();
                    foreach (ItemData itemData in rewardItems)
                    {
                        if (!items.ContainsKey(itemData.itemid))
                            items.Add(itemData.itemid, itemData.amount);
                        else items[itemData.itemid] += itemData.amount;
                    }

                    for (int i = 0; i < items.Count; i++)
                    {
                        KeyValuePair<int, int> item = items.ElementAt(i);
                        reward += (string.Format(ins.msg("UI.Reward.Item", playerId), item.Value, ins.idToDisplayName[item.Key]) + (i < items.Count - 1 ? ", " : ""));
                    }
                }
                else reward = econAmount > 0 ? string.Format(ins.msg("UI.Reward.Econ", playerId), econAmount) : string.Format(ins.msg("UI.Reward.RP", playerId), rpAmount);
                return reward;
            }

            private IEnumerable<ItemData> GetItems(ItemContainer container)
            {
                return container.itemList.Select(item => new ItemData
                {
                    itemid = item.info.itemid,
                    amount = item.amount,
                    ammo = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.contents ?? 0,
                    ammotype = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.ammoType.shortname ?? null,
                    skin = item.skin,
                    condition = item.condition,
                    instanceData = new ItemData.InstanceData(item),
                    contents = item.contents?.itemList.Select(item1 => new ItemData
                    {
                        itemid = item1.info.itemid,
                        amount = item1.amount,
                        condition = item1.condition
                    }).ToArray()
                });
            }

            public class ItemData
            {
                public int itemid;
                public ulong skin;
                public int amount;
                public float condition;
                public int ammo;
                public string ammotype;
                public InstanceData instanceData;
                public ItemData[] contents;

                public class InstanceData
                {
                    public int dataInt;
                    public int blueprintTarget;
                    public int blueprintAmount;

                    public InstanceData() { }
                    public InstanceData(Item item)
                    {
                        if (item.instanceData == null)
                            return;

                        dataInt = item.instanceData.dataInt;
                        blueprintAmount = item.instanceData.blueprintAmount;
                        blueprintTarget = item.instanceData.blueprintTarget;
                    }

                    public void Restore(Item item)
                    {
                        item.instanceData = new ProtoBuf.Item.InstanceData();
                        item.instanceData.blueprintAmount = blueprintAmount;
                        item.instanceData.blueprintTarget = blueprintTarget;
                        item.instanceData.dataInt = dataInt;
                    }
                }
            }
        }

        private class OfflinePlayers
        {
            public Hash<string, double> offlinePlayers = new Hash<string, double>();

            public void AddOfflinePlayer(string userId) => offlinePlayers[userId] = CurrentTime();

            public void OnPlayerInit(string userId)
            {
                if (offlinePlayers.ContainsKey(userId))
                    offlinePlayers.Remove(userId);
            }

            public void RemoveOldPlayers()
            {
                double currentTime = CurrentTime();

                for (int i = offlinePlayers.Count - 1; i >= 0; i--)
                {
                    var user = offlinePlayers.ElementAt(i);
                    if (currentTime - user.Value > 604800)
                        offlinePlayers.Remove(user);
                }
            }

            public IPlayer[] GetOfflineList() => ins.covalence.Players.All.Where(x => offlinePlayers.ContainsKey(x.Id)).ToArray();

            public double CurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
        }
        #endregion

        #region Localization
        private string msg(string key, ulong playerId = 0U) => lang.GetMessage(key, this, playerId == 0U ? null : playerId.ToString());

        Dictionary<string, string> messages = new Dictionary<string, string>
        {
            ["UI.Add.HasBounty"] = "You already have a active bounty on that player",
            ["UI.Add.PlacedInitiator"] = "You have successfully placed a bounty on <color=#28ffa6>{0}</color>",
            ["UI.Add.Confirm"] = "> <color=#28ffa6>CONFIRM</color> <",
            ["UI.Add.Limit"] = "You can only have <color=#28ffa6>{0}</color> active bounties at any given time",
            ["UI.Claim.NoRewardsPending"] = "You do not have any pending rewards to claim",
            ["UI.Claim.ClaimReward"] = "> CLAIM <",
            ["UI.View.PlacedBy"] = "> Placed By",
            ["UI.View.TimeActive"] = "Time Active",
            ["UI.View.Reward"] = "Reward",
            ["UI.View.Cancel"] = "> CANCEL <",
            ["UI.View.AdminCancel"] = "Admin Cancel",
            ["UI.View.ActiveBounties"] = " - Active bounties <",
            ["UI.View.ActiveBountiesPlayer"] = " - Active bounties for {0} <",
            ["UI.ViewBounties"] = "> VIEW <",
            ["UI.View.NoActiveBounties"] = "There are currently no active bounties",
            ["UI.View.NoActiveBountiesPlayer"] = "There are currently no active bounties for this player",
            ["UI.Cancel.NoneSet"] = "You have not set any bounties",
            ["UI.Hunters.ClaimedBounties"] = "Bounties Claimed",
            ["UI.Hunters.NoHunters"] = "No bounties have been claimed yet",
            ["UI.View.Name"] = "> Player Name",
            ["UI.Wanted.CurrentTime"] = "Current Wanted Time",
            ["UI.Wanted.TotalTime"] = "Total Wanted Time",
            ["UI.Wanted.TotalBounties"] = "Total Bounties",
            ["UI.Wanted.ActiveBounties"] = "Active Bounties",
            ["UI.Wanted.NoWantedPlayers"] = "There are currently no wanted players",
            ["UI.Menu.Bounty"] = "> <color=#28ffa6>RustNET Bounty Network</color>",
            ["UI.Menu.NoPermission"] = "You do not have permission to access the bounty menu",
            ["UI.Menu.AddItems"] = " > Create Bounty (items)",
            ["UI.Menu.AddRP"] = " > Create Bounty (RP)",
            ["UI.Menu.AddEco"] = " > Create Bounty (Economics)",
            ["UI.Menu.Cancel"] = " > Cancel Bounty",
            ["UI.Menu.Claim"] = " > Claim Rewards",
            ["UI.Menu.View"] = " > Active Bounties",
            ["UI.Menu.Wanted"] = " > Most Wanted",
            ["UI.Menu.Hunters"] = " > Top Hunters",            
            ["UI.SelectPlayer"] = " - Select a player <",
            ["UI.Tip.Hunters"] = " - Top bounty hunters <",
            ["UI.Tip.Wanted"] = " - Most wanted players <",
            ["UI.Tip.Cancel"] = " - Cancel active bounty <",
            ["UI.Tip.Claim"] = " - Claim a bounty reward <",
            ["UI.Tip.Create"] = " - Create a new bounty <",
            ["UI.Tip.SelectAmount"] = " - Select an amount <",
            ["UI.Tip.SelectAmountRP"] = "Select an amount of RP reward for your bounty on {0}",
            ["UI.Tip.SelectAmountEco"] = "Select an amount of Economics reward for your bounty on {0}",           
            ["UI.Selection.Offline"] = "> <color=#28ffa6>VIEW ONLINE PLAYERS</color> <",
            ["UI.Selection.Online"] = "> <color=#28ffa6>VIEW OFFLINE PLAYERS</color> <",
            ["UI.Reward.Econ"] = "${0}",
            ["UI.Reward.RP"] = "{0} RP",
            ["UI.Reward.Item"] = "{0} x {1}",
            ["UI.Reward.Claimed"] = "Rewards have been claimed!",
            ["Chat.RewardPending"] = "<color=#D3D3D3><color=#ce422b>{0}</color> had <color=#ce422b>{1}</color> outstanding bounties on them. You can claim your rewards by accessing the bounty menu via a </color> <color=#ce422b>RustNET</color> terminal",
            ["Chat.IsFriend1"] = "<color=#D3D3D3>You cannot claim a bounty on a current or recent friend, clan mate, or team member</color>",
            ["Chat.PlacedTarget"] = "<color=#ce422b>{0} </color><color=#D3D3D3>has placed a bounty on you</color>",
            ["Chat.PlacedInitiator"] = "<color=#D3D3D3>You have successfully placed a bounty on</color> <color=#ce422b>{0}</color>",
            ["Chat.PlacedGlobal"] = "<color=#ce422b>{0} <color=#D3D3D3>has placed a bounty on</color> {1}</color>",
            ["Chat.Cancelled.Target"] = "<color=#ce422b>{0} </color><color=#D3D3D3>has cancelled their bounty on you</color>",
            ["Chat.Cancelled.Target.Admin"] = "<color=#D3D3D3>A admin has cancelled <color=#ce422b>{0}</color>'s bounty on you</color>",
            ["UI.Cancelled.Initiator"] = "You have cancelled the bounty on <color=#28ffa6>{0}</color>",
            ["Chat.Cancelled.Initiator.Admin"] = "<color=#D3D3D3>A admin has cancelled your bounty on</color> <color=#ce422b>{0}</color>",
            ["Chat.NoItemsDeposited"] = "<color=#D3D3D3>You did not place any items in the box</color>",
            ["Chat.OutstandingBounties"] = "<color=#D3D3D3>You have <color=#ce422b>{0}</color> active bounties on you!</color>",
            ["UI.Help.Title"] = "> <color=#28ffa6>Bounty Help Menu</color> <",
            ["UI.Help"] = "> Using BountyNET.\n\nYou can create a bounty using one of 3 types of rewards (depending on what is allowed on the server).\nCreating a bounty with items will allow you to place items into a box. These items will be the reward for the player who completes the bounty.\nCreating a bounty using RP or Economics will issue the amount you specify as the reward.\n> NOTE: Items and currency will be deducted when you place the bounty\n\nYou can cancel an active bounty at any time by clicking 'Cancel Bounty' and selecting the bounty you wish to cancel\n\nClaim your rewards for killing a wanted player by click 'Claim Rewards' and selecting the reward you wish to claim. If it is items be sure you have enough inventory space before claiming!\n\n'Active Bounties' is a list of currently active bounties, you can view the rewards offered for these bounties from this menu\n\n'Most Wanted' is a leaderboard of the players who have evaded death for the longest period of time\n\n'Top Hunters' is a leaderboard of players who have claimed the most bounties",
        };
        #endregion
    }
}


// --- End of file: BountyNET.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AutoLearnBlueprints.cs ---
// --- Original Local Path: AutoLearnBlueprints.cs ---

using System.Collections.Generic;
using System.Linq;

using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("AutoLearnBlueprints", "ApocDev", "1.0.5", ResourceId = 1056)]
    public class AutoLearnBlueprints : RustPlugin
    {
        // Add/remove to this list (using the shortname)
        // To automatically have players learn specific blueprints.
        private static readonly List<string> DefaultIncludeBps = new List<string>
        {
            "lock.code", // Code Lock
            "pistol.revolver", // Revolver
            "ammo.pistol" // Pistol Ammo (for the revolver)
        };

        private List<string> LearnBlueprints
        {
            get
            {
                var o = Config.Get<List<string>>("DefaultBlueprints");
                if (o == null || o.Count == 0)
                {
                    return new List<string>();
                }

                return o;
            }
        }

        protected override void LoadDefaultConfig()
        {
            Config["DefaultBlueprints"] = DefaultIncludeBps;
        }

        void OnServerInitialized()
        {
            HandleUpdateBlueprintsCommand();
        }

        void LearnDefaultBlueprints(BasePlayer player)
        {
            var blueprints = ItemManager.bpList.Where(bp => LearnBlueprints.Contains(bp.targetItem.shortname)).ToList();
            foreach (var bp in blueprints)
            {
                // Make sure the player hasn't learned it already. (Doesn't hurt if they did already though)
                if (!player.blueprints.CanCraft(bp.targetItem.itemid, 0))
                {
                    player.blueprints.Learn(bp.targetItem);
                    player.ChatMessage("You have learned the " + bp.targetItem.displayName.translated + " blueprint automatically!");
                }
            }
        }

        [ConsoleCommand("bps.update")]
        void HandleUpdateBlueprintsCommand()
        {
            // Only update active players. Players that join later will be hit with OnPlayerInit when they wake up anyway.
            foreach (var player in BasePlayer.activePlayerList)
            {
                LearnDefaultBlueprints(player);
            }
        }

        void OnPlayerInit(BasePlayer player)
        {
            LearnDefaultBlueprints(player);
        }
    }
}


// --- End of file: AutoLearnBlueprints.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TeamBattlefield.cs ---
// --- Original Local Path: TeamBattlefield.cs ---

using System.Collections.Generic;
using UnityEngine;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System.Reflection;
using System;

namespace Oxide.Plugins
{
    [Info("TeamBattlefield", "BodyweightEnergy / k1lly0u", "2.1.2", ResourceId = 1330)]
    class TeamBattlefield : RustPlugin
    {
        #region Fields
        [PluginReference] Plugin Spawns;

        readonly MethodInfo entitySnapshot = typeof(BasePlayer).GetMethod("SendEntitySnapshot", BindingFlags.Instance | BindingFlags.NonPublic);

        private List<TBPlayer> TBPlayers = new List<TBPlayer>();
        private Dictionary<ulong, PlayerData> DCPlayers = new Dictionary<ulong, PlayerData>();
        private Dictionary<ulong, Timer> DCTimers = new Dictionary<ulong, Timer>();
        private bool UseTB;

        private int TeamA_Score;
        private int TeamB_Score;
        #endregion
        #region UI
        #region UI Main
        private const string UIMain = "TBUI_Main";
        private const string UIScoreboard = "TBUI_Scoreboard";
        public class UI
        {
            static public CuiElementContainer CreateElementContainer(string panelName, string color, string aMin, string aMax, bool useCursor = false)
            {
                var NewElement = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color},
                            RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent,
                        panelName
                    }
                };
                return NewElement;
            }
            static public void CreatePanel(ref CuiElementContainer container, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel);
            }
            static public void CreateLabel(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);

            }
            static public void CreateButton(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = 0.2f },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }
        }
        #endregion

        #region Team Selection
        private void OpenTeamSelection(BasePlayer player)
        {
            var MainCont = UI.CreateElementContainer(UIMain, "0.1 0.1 0.1 0.95", "0 0", "1 1", true);
            UI.CreateLabel(ref MainCont, UIMain, "", $"{configData.TeamA.Chat_Color}Team A Players : {CountPlayers(Team.A)}</color>", 20, "0.2 0.55", "0.4 0.65");
            UI.CreateButton(ref MainCont, UIMain, "0.2 0.2 0.2 0.7", $"{configData.TeamA.Chat_Color}Team A</color>", 35, "0.2 0.45", "0.395 0.55", "TBUI_TeamSelect a");

            UI.CreateLabel(ref MainCont, UIMain, "", $"{configData.TeamB.Chat_Color}Team B Players : {CountPlayers(Team.B)}</color>", 20, "0.4 0.55", "0.6 0.65");
            UI.CreateButton(ref MainCont, UIMain, "0.2 0.2 0.2 0.7", $"{configData.TeamB.Chat_Color}Team B</color>", 35, "0.405 0.45", "0.595 0.55", "TBUI_TeamSelect b");

            if (configData.Spectators.EnableSpectators)
            {
                UI.CreateLabel(ref MainCont, UIMain, "", $"{configData.Spectators.Chat_Color}Spectators : {CountPlayers(Team.SPECTATOR)}</color>", 20, "0.6 0.55", "0.8 0.65");
                UI.CreateButton(ref MainCont, UIMain, "0.2 0.2 0.2 0.7", $"{configData.Spectators.Chat_Color}Spectate</color>", 35, "0.605 0.45", "0.795 0.55", "TBUI_TeamSelect spectator");
            }
            if (player.IsAdmin())
            {
                UI.CreateButton(ref MainCont, UIMain, "0.2 0.2 0.2 0.7", $"{configData.Admin.Chat_Color}Admin</color>", 35, "0.4 0.25", "0.6 0.35", "TBUI_TeamSelect admin");
            }
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.AddUi(player, MainCont);
        }
        #endregion

        #region Scoreboard       
        public void Scoreboard(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIScoreboard);
            var MainCont = UI.CreateElementContainer(UIScoreboard, "0.1 0.1 0.1 0.5", "0.39 0.95", "0.61 1", false);
            UI.CreateLabel(ref MainCont, UIScoreboard, "", $"{configData.TeamA.Chat_Color}Team A: {TeamA_Score}</color>   ||   {configData.TeamB.Chat_Color}{TeamB_Score} : Team B</color>", 20, "0 0", "1 1");

            CuiHelper.AddUi(player, MainCont);
        }
        #endregion               
        #endregion
        
        #region Hooks       
        void OnServerInitialized()
        {
            LoadVariables();
            if (!CheckDependencies()) return;
            if (!CheckSpawnfiles()) return;
            UseTB = true;
            TeamA_Score = 0;
            TeamB_Score = 0;
            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerInit(player);
        }
        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
        {
            try
            {
                if (UseTB)
                    if (entity is BasePlayer && hitInfo.Initiator is BasePlayer)
                    {
                        if (entity as BasePlayer == null || hitInfo == null) return;
                        var victim = entity.ToPlayer();
                        var attacker = hitInfo.Initiator.ToPlayer();
                        if (victim != attacker)
                            if (victim.GetComponent<TBPlayer>() && attacker.GetComponent<TBPlayer>())
                            {
                                if (victim.GetComponent<TBPlayer>().team == attacker.GetComponent<TBPlayer>().team)
                                {
                                    hitInfo.damageTypes.ScaleAll(configData.Options.FF_DamageScale);
                                    SendReply(hitInfo.Initiator as BasePlayer, "Friendly Fire!");
                                }
                            }
                    }
            }
            catch (Exception ex)
            {
            }
        }
        private void OnEntityDeath(BaseEntity entity, HitInfo hitInfo)
        {
            try
            {
                if (UseTB)
                {
                    if (entity is BasePlayer && hitInfo.Initiator is BasePlayer)
                    {
                        if (entity as BasePlayer == null || hitInfo == null) return;
                        var victim = entity.ToPlayer();
                        var attacker = hitInfo.Initiator.ToPlayer();
                        if (victim != attacker)
                        {
                            if (victim.GetComponent<TBPlayer>() && attacker.GetComponent<TBPlayer>())
                            {
                                if (victim.GetComponent<TBPlayer>().team != attacker.GetComponent<TBPlayer>().team)
                                {
                                    attacker.GetComponent<TBPlayer>().kills++;
                                    AddPoints(attacker, victim);
                                }                                
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }       
        private void RefreshScoreboard()
        {
            foreach(var player in BasePlayer.activePlayerList)
            {
                Scoreboard(player);
            }
        }
        private void OnPlayerInit(BasePlayer player)
        {
            if (UseTB)
            {
                if (player.IsSleeping())
                {
                    timer.Once(3, () =>
                    {
                        player.EndSleeping();
                        OnPlayerInit(player);
                    });
                }
                else InitPlayer(player);               
            }
        }  
        private void InitPlayer(BasePlayer player)
        {
            if (!player.GetComponent<TBPlayer>())
            {
                TBPlayers.Add(player.gameObject.AddComponent<TBPlayer>());
                Scoreboard(player);
                if (DCPlayers.ContainsKey(player.userID))
                {
                    player.GetComponent<TBPlayer>().kills = DCPlayers[player.userID].kills;
                    player.GetComponent<TBPlayer>().team = DCPlayers[player.userID].team;
                    DCPlayers.Remove(player.userID);
                    DCTimers[player.userID].Destroy();
                    DCTimers.Remove(player.userID);
                    player.DieInstantly();
                    player.Respawn();
                }
                else OpenTeamSelection(player);
            }            
        }   
        private void OnPlayerDisconnected(BasePlayer player)
        {
            if (UseTB)
            {
                if (player.GetComponent<TBPlayer>())
                {
                    DCPlayers.Add(player.userID, new PlayerData { kills = player.GetComponent<TBPlayer>().kills, team = player.GetComponent<TBPlayer>().team });
                    DCTimers.Add(player.userID, timer.Once(configData.Options.RemoveSleeper_Timer * 60, () => { DCPlayers.Remove(player.userID); DCTimers[player.userID].Destroy(); DCTimers.Remove(player.userID); }));
                    DestroyPlayer(player);
                }
            }
        }
        private void DestroyPlayer(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UIMain);
            CuiHelper.DestroyUi(player, UIScoreboard);
            if (TBPlayers.Contains(player.GetComponent<TBPlayer>()))
            {                
                TBPlayers.Remove(player.GetComponent<TBPlayer>());
                UnityEngine.Object.Destroy(player.GetComponent<TBPlayer>());
            }
        }
        private void OnPlayerRespawned(BasePlayer player) 
        {
            if (UseTB)
            {
                if (player.GetComponent<TBPlayer>())
                {
                    Team team = player.GetComponent<TBPlayer>().team;
                    player.inventory.Strip();
                    if (team != Team.SPECTATOR)
                    {
                        GivePlayerWeapons(player);
                        GivePlayerGear(player, team);

                        object newpos = null;

                        if (team == Team.A) newpos = Spawns.Call("GetRandomSpawn", new object[] { configData.TeamA.Spawnfile });
                        else if (team == Team.B) newpos = Spawns.Call("GetRandomSpawn", new object[] { configData.TeamB.Spawnfile });
                        else if (team == Team.ADMIN && !string.IsNullOrEmpty(configData.Admin.Spawnfile)) newpos = Spawns.Call("GetRandomSpawn", new object[] { configData.Admin.Spawnfile });

                        if (newpos is Vector3)
                            MovePlayerPosition(player, (Vector3)newpos);
                    }
                }
                else OnPlayerInit(player);
            }           
        }
        private object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            if (UseTB)
            {
                if (configData.Options.UsePluginChatControl)
                {
                    BasePlayer player = (BasePlayer)arg.connection.player;
                    string message = arg.GetString(0, "text");
                    string color = configData.Spectators.Chat_Color + configData.Spectators.Chat_Prefix;
                    if (player.GetComponent<TBPlayer>())
                    {
                        switch (player.GetComponent<TBPlayer>().team)
                        {
                            case Team.A:
                                color = configData.TeamA.Chat_Color + configData.TeamA.Chat_Prefix;
                                break;
                            case Team.B:
                                color = configData.TeamB.Chat_Color + configData.TeamB.Chat_Prefix;
                                break;
                            case Team.ADMIN:
                                color = configData.Admin.Chat_Color + configData.Admin.Chat_Prefix;
                                break;
                        }
                    }
                    string formatMsg = $"{color} {player.displayName}</color> : {message}";
                    PrintToChat(formatMsg);
                    return false;
                }
            }
            return null;
        }
        void Unload()
        {
            foreach (var p in BasePlayer.activePlayerList)
                DestroyPlayer(p);

            var objects = UnityEngine.Object.FindObjectsOfType<TBPlayer>();
            if (objects != null)
                foreach (var gameObj in objects)
                    UnityEngine.Object.Destroy(gameObj);

            TBPlayers.Clear();
            DCPlayers.Clear();
            DCTimers.Clear();
        }
        #endregion

        #region Functions
        private bool CheckDependencies()
        {
            if (Spawns == null)
            {
                PrintWarning($"Spawns Database could not be found!");
                return false;
            }            
            return true;
        }
        private bool CheckSpawnfiles()
        {
            object successA = Spawns.Call("GetSpawnsCount", configData.TeamA.Spawnfile);
            object successB = Spawns.Call("GetSpawnsCount", configData.TeamB.Spawnfile);
            object successAdmin = Spawns.Call("GetSpawnsCount", configData.Admin.Spawnfile);
            if (successA is string)
            {
                configData.TeamA.Spawnfile = null;
                Puts("Error finding the Team A spawn file");
                return false;
            }
            if (successB is string)
            {
                configData.TeamB.Spawnfile = null;
                Puts("Error finding the Team B spawn file");
                return false;
            }
            if (successAdmin is string)
            {
                configData.Admin.Spawnfile = null;
                SaveConfig(configData);
                Puts("Error finding the Admin spawn file, removing admin spawn points");                
            }
            return true;
        }
        static void MovePlayerPosition(BasePlayer player, Vector3 destination)
        {
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Sleeping, true);
            if (!BasePlayer.sleepingPlayerList.Contains(player)) BasePlayer.sleepingPlayerList.Add(player);

            player.CancelInvoke("InventoryUpdate");
            player.inventory.crafting.CancelAll(true);

            player.MovePosition(destination);
            player.ClientRPCPlayer(null, player, "ForcePositionTo", destination, null, null, null, null);
            player.TransformChanged();
            player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.UpdateNetworkGroup();

            player.SendNetworkUpdateImmediate(false);
            player.ClientRPCPlayer(null, player, "StartLoading", null, null, null, null, null);
            player.SendFullSnapshot();
        }
        
        private void StartSpectating(BasePlayer player, BasePlayer target)
        {
            if (!player.IsSpectating())
            {
                player.SetPlayerFlag(BasePlayer.PlayerFlags.Spectating, true);
                player.gameObject.SetLayerRecursive(10);
                player.CancelInvoke("MetabolismUpdate");
                player.CancelInvoke("InventoryUpdate");
                player.ClearEntityQueue();
                entitySnapshot.Invoke(player, new object[] { target });
                player.gameObject.Identity();
                player.SetParent(target, 0);
            }
        }
        private void EndSpectating(BasePlayer player)
        {
            if (player.IsSpectating())
            {
                player.SetParent(null, 0);
                player.SetPlayerFlag(BasePlayer.PlayerFlags.Spectating, false);
                player.gameObject.SetLayerRecursive(17);
                player.metabolism.Reset();
                player.InvokeRepeating("InventoryUpdate", 1f, 0.1f * UnityEngine.Random.Range(0.99f, 1.01f));
            }
        }       
        private void AddPoints(BasePlayer player, BasePlayer victim)
        {
            string colorAttacker = "";
            string colorVictim = "";
            string prefixAttacker = "";
            string prefixVictim = "";
            switch (player.GetComponent<TBPlayer>().team)
            {
                case Team.NONE:
                    return;
                case Team.A:
                    TeamA_Score++;
                    colorAttacker = configData.TeamA.Chat_Color; 
                    prefixAttacker = configData.TeamA.Chat_Prefix;                    
                    break;
                case Team.B:
                    TeamB_Score++;
                    colorAttacker = configData.TeamB.Chat_Color;                    
                    prefixAttacker = configData.TeamB.Chat_Prefix;                    
                    break;
                case Team.ADMIN:
                    colorAttacker = configData.Admin.Chat_Color;
                    prefixAttacker = configData.Admin.Chat_Prefix;
                    return;
                case Team.SPECTATOR:
                    return;
            }
            switch (victim.GetComponent<TBPlayer>().team)
            {
                case Team.NONE:
                    return;
                case Team.A:
                    colorVictim = configData.TeamA.Chat_Color;
                    prefixVictim = configData.TeamA.Chat_Prefix;
                    break;
                case Team.B:
                    colorVictim = configData.TeamB.Chat_Color;
                    prefixVictim = configData.TeamB.Chat_Prefix;
                    break;
                case Team.SPECTATOR:
                    return;
                case Team.ADMIN:
                    colorVictim = configData.Admin.Chat_Color;
                    prefixVictim = configData.Admin.Chat_Prefix;
                    break;               
            }
            RefreshScoreboard();
            if (configData.Options.BroadcastDeath)
            {
                string formatMsg = colorAttacker + player.displayName + "</color> has killed " + colorVictim + victim.displayName + "</color>";
                PrintToChat(formatMsg);
            }
        }
        #endregion

        #region Giving Items
        private void GivePlayerWeapons(BasePlayer player)
        {
            foreach (var entry in configData.Gear.StartingWeapons)
            {
                for (var i = 0; i < entry.amount; i++)
                    GiveItem(player, BuildWeapon(entry), entry.container);
                if (!string.IsNullOrEmpty(entry.ammoType))
                    GiveItem(player, BuildItem(entry.ammoType, entry.ammo), "main");
            }
        }
        private void GivePlayerGear(BasePlayer player, Team team)
        {
            foreach (var entry in configData.Gear.CommonGear)            
                GiveItem(player, BuildItem(entry.shortname, entry.amount, entry.skin), entry.container);

            var teamGear = new List<Gear>();
            if (team == Team.A) teamGear = configData.TeamA.Gear;
            else if (team == Team.B) teamGear = configData.TeamB.Gear;
            else if (team == Team.ADMIN) teamGear = configData.Admin.Gear;

            if (teamGear != null)
                foreach(var entry in teamGear)
                    GiveItem(player, BuildItem(entry.shortname, entry.amount, entry.skin), entry.container);
        }
        private Item BuildItem(string shortname, int amount = 1, ulong skin = 0)
        {
            var definition = ItemManager.FindItemDefinition(shortname);
            if (definition != null)
            {
                var item = ItemManager.Create(definition, amount, skin);
                if (item != null)
                    return item;
            }
            Puts("Error making item: " + shortname);
            return null;
        }
        private Item BuildWeapon(Weapon newWeapon)
        {
            var item = BuildItem(newWeapon.shortname, 1, newWeapon.skin);
            if (item == null) return null;
            var weapon = item.GetHeldEntity() as BaseProjectile;
            if (weapon != null)
            {
                weapon.primaryMagazine.contents = weapon.primaryMagazine.capacity;
                if (!string.IsNullOrEmpty(newWeapon.ammoType))
                {
                    var ammoType = ItemManager.FindItemDefinition(newWeapon.ammoType);
                    if (ammoType != null)
                        weapon.primaryMagazine.ammoType = ammoType;
                }
            }
            if (newWeapon.contents == null) return item;

            foreach (var content in newWeapon.contents)
                BuildItem(content)?.MoveToContainer(item.contents);

            return item;
        }
        public void GiveItem(BasePlayer player, Item item, string container)
        {
            if (item == null) return;
            ItemContainer cont;
            switch (container)
            {
                case "wear":
                    cont = player.inventory.containerWear;
                    break;
                case "belt":
                    cont = player.inventory.containerBelt;
                    break;
                default:
                    cont = player.inventory.containerMain;
                    break;
            }
            player.inventory.GiveItem(item, cont);
        }
        #endregion

        #region Console Commands
        
        [ConsoleCommand("tbf.list")]
        private void cmdList(ConsoleSystem.Arg arg)
        {
            for (int i = 0; i < TBPlayers.Count; i++)
                SendReply(arg, "Name: " + TBPlayers[i].player.displayName + ", Team: " + TBPlayers[i].team.ToString()); 
        }
        [ConsoleCommand("tbf.clearscore")]
        private void cmdClearscore(ConsoleSystem.Arg arg)
        {
            if (isAuth(arg))
            {
                TeamA_Score = 0;
                TeamB_Score = 0;
                RefreshScoreboard();
                SendReply(arg, "Score's have been reset");
            }
        }

        [ConsoleCommand("tbf.assign")]
        private void cmdAssign(ConsoleSystem.Arg arg)
        {
            if (!isAuth(arg)) return;
            if (arg.Args == null || arg.Args.Length == 0)            
            {
                SendReply(arg, "Format: tbf.assign <PARTIAL_PLAYERNAME> <[\"a\",\"b\",\"spectator\"]>");
                return;
            }           
            if (arg.Args.Length == 2)
            {
                var partialPlayerName = arg.Args[0];
                var foundPlayers = FindPlayer(partialPlayerName);
                if (foundPlayers.Count == 0)
                {
                    SendReply(arg, "No players found");
                    return;
                }
                if (foundPlayers.Count > 1)
                {
                    SendReply(arg, "Multiple players found");
                    return;
                }
                var newTeam = Team.SPECTATOR;

                switch (arg.Args[1].ToUpper())
                {
                    case "A":
                        newTeam = Team.A;
                        break;

                    case "B":
                        newTeam = Team.B;
                        break;
                    case "SPECTATOR":
                        if (!configData.Spectators.EnableSpectators)
                        {
                            SendReply(arg, "You have spectators disabled in the config");
                            return;
                        }
                        newTeam = Team.SPECTATOR;
                        break;

                    default:
                        SendReply(arg, "Invalid team assignment.");
                        return;
                }
                if (foundPlayers[0] != null)
                {
                    AssignPlayerToTeam(foundPlayers[0], newTeam);
                    SendReply(arg, foundPlayers[0].displayName + " has been successfully assigned to team " + newTeam.ToString());
                }
                else SendReply(arg, "There was a error assigning a new team");
            }
        }

        [ConsoleCommand("tbf.version")]
        private void cmdVersion(ConsoleSystem.Arg arg) => SendReply(arg, Title + "  --  V " + Version.ToString() + "  --  by " + Author);
       
        [ConsoleCommand("tbf.help")]
        private void cmdHelp(ConsoleSystem.Arg arg)
        {
            SendReply(arg, "TeamBattlefield Console Commands:");
            SendReply(arg, "tbf.list - Lists teams and disconnect times of players.");
            SendReply(arg, "tbf.assign <PartialPlayerName> [one/two/spectator] - Assigns player to team.");
            SendReply(arg, "tbf.purge - Removes players from all teams if they're been disconnected for more than 5 minutes.");
            SendReply(arg, "tbf.version - Prints current version number of plugin.");
        }

        [ConsoleCommand("tbf.purge")]
        private void cmdPurge(ConsoleSystem.Arg arg)
        {
            int count = DCPlayers.Count;
            foreach (var entry in DCTimers)
                entry.Value.Destroy();
            DCPlayers.Clear();
            DCTimers.Clear();
            SendReply(arg, string.Format("You have removed {0} inactive player data", count));
        }

        [ChatCommand("switchteam")]
        private void cmdChangeTeam(BasePlayer player, string command, string[] args) => OpenTeamSelection(player);

        bool isAuth(ConsoleSystem.Arg arg)
        {
            if (arg.connection != null)
            {
                if (arg.connection.authLevel < 1)
                {
                    SendReply(arg, "You dont not have permission to use this command.");
                    return false;
                }
            }
            return true;
        }
        [ChatCommand("t")]
        private void cmdTeamChat(BasePlayer player, string command, string[] args)
        {
            if (player.GetComponent<TBPlayer>())
            {
                var message = string.Join(" ", args);
                if (string.IsNullOrEmpty(message))
                    return;

                var sendingPlayer = player.GetComponent<TBPlayer>();
                var team = sendingPlayer.team;
                string color = "";                
                switch (team)
                {
                    case Team.A:
                        color = configData.TeamA.Chat_Color;
                        break;
                    case Team.B:
                        color = configData.TeamB.Chat_Color;
                        break;
                    case Team.ADMIN:
                        color = configData.Admin.Chat_Color;
                        return;
                    case Team.SPECTATOR:
                        color = configData.Spectators.Chat_Color;
                        return;
                }               

                foreach (var p in TBPlayers)
                {
                    if (p.team == player.GetComponent<TBPlayer>().team)
                    {
                        SendReply(p.player, $"{color}Team Chat : </color>{message}");
                    }
                }
            }
        }
        #endregion

        #region UI Commands
        [ConsoleCommand("TBUI_TeamSelect")]
        private void cmdTeamSelectA(ConsoleSystem.Arg arg)
        {
            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            var team = ConvertStringToTeam(arg.GetString(0));
            AssignPlayerToTeam(player, team);
        }
        
        private Team ConvertStringToTeam(string team)
        {
            switch (team)
            {
                case "a": return Team.A;
                case "b": return Team.B;
                case "admin": return Team.ADMIN;
                case "spectator": return Team.SPECTATOR;
                default:
                    return Team.A;
            }
        }
        #endregion

        #region Team Management
        enum Team
        {
            NONE,
            A,
            B,
            SPECTATOR,
            ADMIN
        }
        private List<BasePlayer> FindPlayer(string arg)
        {
            var foundPlayers = new List<BasePlayer>();
            ulong steamid;
            ulong.TryParse(arg, out steamid);
            string lowerarg = arg.ToLower();

            foreach (var p in BasePlayer.activePlayerList)
                if (p != null)
                {
                    if (steamid != 0L)
                        if (p.userID == steamid)
                        {
                            foundPlayers.Add(p);
                            return foundPlayers;
                        }
                    string lowername = p.displayName.ToLower();
                    if (lowername.Contains(lowerarg))
                        foundPlayers.Add(p);
                }
            return foundPlayers;
        }
        private int CountPlayers(Team team)
        {
            int i = 0;
            foreach (var entry in TBPlayers)
            {
                if (entry.team == team)
                    i++;
            }
            return i;
        }
        private void AssignPlayerToTeam(BasePlayer player , Team team)
        {
            CuiHelper.DestroyUi(player, UIMain);
            if (!player.GetComponent<TBPlayer>())
                TBPlayers.Add(player.gameObject.AddComponent<TBPlayer>());
            else if (player.GetComponent<TBPlayer>().team == team)
                return;

            bool isSpec = false;
            if (player.GetComponent<TBPlayer>().team == Team.SPECTATOR)
                isSpec = true;

            int aCount = CountPlayers(Team.A);
            int bCount = CountPlayers(Team.B);
            if (team == Team.A)
            {
                if (aCount > bCount + configData.Options.MaximumTeamCountDifference)
                {
                    team = Team.B;
                    SendReply(player, "There are too many players on Team A, auto assigning to Team B");
                }
            }
            if (team == Team.B)
            {
                if (bCount > aCount + configData.Options.MaximumTeamCountDifference)
                {
                    team = Team.A;
                    SendReply(player, "There are too many players on Team B, auto assigning to Team A");
                }
            }
            if (team == Team.SPECTATOR)
            {
                var target = GetRandomTeammate(player);
                player.GetComponent<TBPlayer>().team = team;
                if (target != null)
                    StartSpectating(player, target);
                else StartSpectating(player, BasePlayer.activePlayerList[UnityEngine.Random.Range(0, BasePlayer.activePlayerList.Count - 1)]);
                return;               
            }

            player.GetComponent<TBPlayer>().team = team;
           
            if (isSpec)
                EndSpectating(player);
            player.DieInstantly();            
            player.Respawn();
        } 
        private BasePlayer GetRandomTeammate(BasePlayer player)
        {
            var teammates = new List<BasePlayer>();
            var team = player.GetComponent<TBPlayer>().team;
            foreach (var tm in TBPlayers)
            {
                if (tm.player == player) continue;
                if (tm.team == team)
                    teammates.Add(tm.player);
            }
            if (teammates.Count > 0)
                return teammates[UnityEngine.Random.Range(0, teammates.Count - 1)];
            else return null;
        }      
        #endregion

        #region Externally Called Functions
        string GetPlayerTeam (ulong playerID)
        {
            foreach (var entry in TBPlayers)
                if (entry.player.userID == playerID)
                    return entry.team.ToString();
            return null;            
        }
        Dictionary<ulong, string> GetTeams()
        {
            Dictionary<ulong, string> returnedList = new Dictionary<ulong, string>();
            foreach (var player in TBPlayers)
                returnedList.Add(player.player.userID, player.team.ToString());
            
            return returnedList;
        }
        #endregion

        #region Config        
        private ConfigData configData;
        class TeamOptions
        {
            public string Spawnfile { get; set; }
            public string Chat_Prefix { get; set; }
            public string Chat_Color { get; set; }
            public List<Gear> Gear { get; set; }
        }
        class Options
        {
            public int MaximumTeamCountDifference { get; set; }
            public int RemoveSleeper_Timer { get; set; }
            public float FF_DamageScale { get; set; }
            public bool UsePluginChatControl { get; set; }
            public bool BroadcastDeath { get; set; }
            
        }
        class GUI
        {
            public float XPosition { get; set; }
            public float YPosition { get; set; }
            public float XDimension { get; set; }
            public float YDimension { get; set; }
        }
        class ConfigGear
        {
            public List<Gear> CommonGear { get; set; }
            public List<Weapon> StartingWeapons { get; set; }
        }
        class Spectators
        {
            public bool EnableSpectators { get; set; }
            public string Chat_Color { get; set; }
            public string Chat_Prefix { get; set; }
        }
        class ConfigData
        {            
            public TeamOptions TeamA { get; set; }
            public TeamOptions TeamB { get; set; }
            public TeamOptions Admin { get; set; }
            public ConfigGear Gear { get; set; }
            public Options Options { get; set; }
            public Spectators Spectators { get; set; }
            public GUI ScoreboardUI { get; set; }               
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                Admin = new TeamOptions
                {
                    Chat_Color = "<color=#00ff04>",
                    Chat_Prefix = "[Admin] ",
                    Gear = new List<Gear>
                    {
                        new Gear
                    {
                        name = "Hoodie",
                        shortname = "hoodie",
                        amount = 1,
                        container = "wear",
                        skin = 10129
                    },
                    new Gear
                    {
                        name = "Pants",
                        shortname = "pants",
                        amount = 1,
                        container = "wear",
                        skin = 10078
                    },
                    new Gear
                    {
                        name = "Gloves",
                        shortname = "burlap.gloves",
                        amount = 1,
                        container = "wear",
                        skin = 10128
                    },
                    new Gear
                    {
                        name = "Boots",
                        shortname = "shoes.boots",
                        amount = 1,
                        container = "wear",
                        skin = 10023
                    }
                    },
                    Spawnfile = "admin_spawns"
                },
                Gear = new ConfigGear
                {
                    CommonGear = new List<Gear>
                {
                    {
                        new Gear
                        {
                            name = "Machete",
                            shortname = "machete",
                            amount = 1,
                            container = "belt"
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Medical Syringe",
                            shortname = "syringe.medical",
                            amount = 2,
                            container = "belt"
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Bandage",
                            shortname = "bandage",
                            amount = 1,
                            container = "belt"
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Paper Map",
                            shortname = "map",
                            amount = 1,
                            container = "belt"
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Metal ChestPlate",
                            shortname = "metal.plate.torso",
                            amount = 1,
                            container = "wear"
                        }
                    }
                },

                StartingWeapons = new List<Weapon>
                {
                    new Weapon
                    {
                            name = "AssaultRifle",
                            shortname = "rifle.ak",
                            container = "belt",
                            ammoType = "ammo.rifle.hv",
                            ammo = 120,
                            amount = 1,
                            contents = new [] {"weapon.mod.holosight"}
                    },
                    new Weapon
                    {
                            name = "SemiAutoPistol",
                            shortname = "pistol.semiauto",
                            container = "belt",
                            ammoType = "ammo.pistol.hv",
                            amount = 1,
                            ammo = 120,
                            contents = new [] {"weapon.mod.silencer"}
                    }
                }
                },
                Options = new Options
                {
                    BroadcastDeath = true,
                    FF_DamageScale = 0.5f,
                    MaximumTeamCountDifference = 5,
                    RemoveSleeper_Timer = 5,
                    UsePluginChatControl = true
                },
                ScoreboardUI = new GUI
                {
                    XDimension = 0.22f,
                    XPosition = 0.39f,
                    YDimension = 0.05f,
                    YPosition = 0.95f
                },
                Spectators = new Spectators
                {
                    Chat_Color = "<color=white>",
                    Chat_Prefix = "[Spectator] ",
                    EnableSpectators = true
                },
                TeamA = new TeamOptions
                {
                    Spawnfile = "team_a_spawns",
                    Chat_Color = "<color=#0066ff>",
                    Chat_Prefix = "[Team A] ",
                    Gear = new List<Gear>
                    {
                         new Gear
                    {
                        name = "Hoodie",
                        shortname = "hoodie",
                        amount = 1,
                        container = "wear",
                        skin = 14178
                    },
                    new Gear
                    {
                        name = "Pants",
                        shortname = "pants",
                        amount = 1,
                        container = "wear",
                        skin = 10020
                    },
                    new Gear
                    {
                        name = "Gloves",
                        shortname = "burlap.gloves",
                        amount = 1,
                        container = "wear",
                        skin = 10128
                    },
                    new Gear
                    {
                        name = "Boots",
                        shortname = "shoes.boots",
                        amount = 1,
                        container = "wear",
                        skin = 10023
                    }
                    }
                },
                TeamB = new TeamOptions
                {
                    Chat_Color = "<color=#ff0000>",
                    Chat_Prefix = "[Team B] ",
                    Spawnfile = "team_b_spawns",
                    Gear = new List<Gear>
                    {
                        new Gear
                    {
                        name = "Hoodie",
                        shortname = "hoodie",
                        amount = 1,
                        container = "wear",
                        skin = 0
                    },
                    new Gear
                    {
                        name = "Pants",
                        shortname = "pants",
                        amount = 1,
                        container = "wear",
                        skin = 10019
                    },
                    new Gear
                    {
                        name = "Gloves",
                        shortname = "burlap.gloves",
                        amount = 1,
                        container = "wear",
                        skin = 10128
                    },
                    new Gear
                    {
                        name = "Boots",
                        shortname = "shoes.boots",
                        amount = 1,
                        container = "wear",
                        skin = 10023
                    }
                    }
                }
            };
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);        
        #endregion

        #region Classes
        class TBPlayer : MonoBehaviour
        {
            public BasePlayer player;
            public int kills;
            public Team team;
            
            void Awake()
            {
                player = GetComponent<BasePlayer>();
                enabled = false;
                kills = 0;
                team = Team.NONE;
            }
        }        
        class PlayerData
        {
            public int kills;
            public Team team;
        }
        class Gear
        {
            public string name;
            public string shortname;
            public ulong skin;
            public int amount;
            public string container;
        }
        class Weapon
        {
            public string name;
            public string shortname;
            public ulong skin;
            public string container;
            public int amount;
            public int ammo;
            public string ammoType;
            public string[] contents = new string[0];
        }
        #endregion
    }
}


// --- End of file: TeamBattlefield.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/UItemSort.cs ---
// --- Original Local Path: UItemSort.cs ---

﻿using System;
using System.Collections.Generic;
using System.Drawing;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Steamworks.ServerList;
using UnityEngine;
using Color = UnityEngine.Color;

namespace Oxide.Plugins
{
    [Info("UItemSort", "Scrooge", "1.0.2")]
    [Description("Плагин был куплен на keepshop.ru")]
    class UItemSort : RustPlugin
    {
        #region Classes

        private class PluginConfig
        {
            [JsonProperty("Use button images?")]
            public bool useImages;
            [JsonProperty("Send plugin messages/reply?")]
            public bool pluginReply;
            [JsonProperty("Sort button color.")]
            public string sortBttnColor;
            [JsonProperty("Take similar button color.")]
            public string similarBttnColor;
            [JsonProperty("Take all button color.")]
            public string allBttnColor;
            [JsonProperty("Sort image.")]
            public string sortImg;
            [JsonProperty("Similar image.")]
            public string similarImg;
            [JsonProperty("Take/Put all.")]
            public string allImg;
        }

        private class PluginInterface
        {
            public string ItemSort;
        }
        #endregion

        #region Variables

        private const string permissionUse = "uitemsort.use";
        private const string UI_Layer = "UI_UItemSort";
        private const string UI_LayerMain = "UI_UItemSortMain";

        private static PluginInterface _interface;
        private static PluginConfig _config;
        private static bool _initiated;

        #endregion

        #region Config

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                _config = Config.ReadObject<PluginConfig>();
                if (_config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                for (var i = 0; i < 3; i++)
                {
                    PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                }

                LoadDefaultConfig();
                return;
            }

            ValidateConfig();
            SaveConfig();
        }

        private void ValidateConfig()
        {
            if (Interface.Oxide.CallHook("OnConfigValidate") != null)
            {
                PrintWarning("Using default configuration...");
                _config = GetDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = GetDefaultConfig();
        }

        private PluginConfig GetDefaultConfig()
        {
            return new PluginConfig
            {
                useImages = false,
                pluginReply = true,
                sortBttnColor = "0.969 0.921 0.882 0.2",
                similarBttnColor = "0.968 0.921 0.882 0.2",
                allBttnColor = "0.968 0.921 0.882 0.2",
                sortImg = "https://i.imgur.com/uEiuf3N.png",
                similarImg = "https://i.imgur.com/3PkbAH8.png",
                allImg = "https://i.imgur.com/beKBAl3.png",
            };
        }

        #endregion

        #region Localization

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UILootSimilar"] = "Такие же вещи, как у вас, были залутаны! (если есть)",
                ["UILootAll"] = "Вы взяли все, что смогли уместить!",
                ["UISort"] = "Предметы успешно отсортированы!",
                ["UIPutSimilar"] = "Вы положили такие же вещи, как в контейнере! (если есть)",
                ["UIPutAll"] = "Вы положили все, что смогло уместиться!"


            }, this, "ru");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["UILootSimilar"] = "Same items, that you already own, were looted! (if exist)",
                ["UILootAll"] = "You've looted everything you could!",
                ["UISort"] = "Items were successfully sorted!",
                ["UIPutSimilar"] = "You've put same items that are in a storage! (if exist)",
                ["UIPutAll"] = "You've put all the items you could!"

            }, this, "en");
        }

        private string GetLocal(string mesKey, string userId = null) => lang.GetMessage(mesKey, this, userId);

        #endregion

        #region Utils
        private void MoveItems(ItemContainer from, ItemContainer to)
        {
            var storageItems = from.itemList;
            var itemList = to.itemList;

            int i = storageItems.Count - 1;
            while (itemList.Count < to.capacity)
            {
                if (i < 0)
                    break;

                var storageItem = storageItems[i];
                storageItem.MoveToContainer(to);
                i--;
            }
        }

        private void MoveSimilarItems(ItemContainer from, ItemContainer to)
        {
            var storageItems = from.itemList;

            for (int i = storageItems.Count - 1; i >= 0; i--)
            {
                var contItem = storageItems[i];
                if (to.GetAmount(contItem.info.itemid, false) > 0)
                {
                    contItem.MoveToContainer(to);
                }

                if (to.itemList.Count >= to.capacity)
                    break; // inventory full;
            }
        }

        private void SortItemContainer(ItemContainer container)
        {
            if (container == null)
                return;
            var storageItems = container.itemList;

            try
            {
                foreach (var storageItem in storageItems.ToArray())
                {
                    storageItem.RemoveFromContainer();
                    storageItem.MoveToContainer(container);
                }

                storageItems.Sort((item, item1) =>
                    String.Compare(item.info.shortname, item1.info.shortname, StringComparison.Ordinal));

                int counter = 0;
                foreach (var storageItem in storageItems.ToArray())
                {
                    storageItem.position = counter++;
                }

                container.MarkDirty();
            }
            catch
            {
                //no check
            }
        }

        public void RegPermission(string name)
        {
            if (permission.PermissionExists(name)) return;
            permission.RegisterPermission(name, this);
        }

        public bool HasPermission(BasePlayer player, string name)
        {
            if (player.IsAdmin)
                return true;

            return permission.UserHasPermission(player.UserIDString, name);
        }

        public static string GetColor(string hex, float alpha = 1f)
        {
            if (hex.Length != 7) hex = "#FFFFFF";
            if (alpha < 0 || alpha > 1f) alpha = 1f;

            var color = ColorTranslator.FromHtml(hex);
            var r = Convert.ToInt16(color.R) / 255f;
            var g = Convert.ToInt16(color.G) / 255f;
            var b = Convert.ToInt16(color.B) / 255f;

            return $"{r} {g} {b} {alpha}";
        }

        #endregion

        #region PluginReference

        [PluginReference] private Plugin ImageLibrary;

        private void AddImage(string url)
        {
            if (ImageLibrary == null)
                return;

            if ((bool)ImageLibrary.Call("HasImage", url) == false)
                ImageLibrary.Call("AddImage", url, url);
        }

        private string GetImage(string name)
        {
            if (ImageLibrary == null)
                return string.Empty;

            return (string)ImageLibrary.Call("GetImage", name);
        }

        private bool IsReady() => (bool)(ImageLibrary?.Call("IsReady") ?? false);

        #endregion

        #region Hooks
        void OnServerInitialized()
        {
            _initiated = false;
            RegPermission(permissionUse);

            if (_config.useImages)
            {
                AddImage(_config.sortImg);
                AddImage(_config.similarImg);
                AddImage(_config.allImg);

                timer.Once(1f, ImagesChecker);
            }
            else
            {
                BuildInterface();
                _initiated = true;
            }
        }

        private void ImagesChecker()
        {
            if (IsReady() == false)
            {
                PrintWarning("Images still loading! Plugin is not ready.");
                timer.Once(5f, ImagesChecker);
                return;
            }

            BuildInterface();
            _initiated = true;
        }

        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            if (_initiated == false)
                return;

            if (HasPermission(player, permissionUse) == false)
                return;

            if (entity is BasePlayer || entity is LootableCorpse || entity is BoxStorage)
                DrawUI(player);
        }

        void OnPlayerLootEnd(PlayerLoot inventory)
        {
            if (_initiated == false)
                return;

            BasePlayer player = inventory._baseEntity;

            if (player == null)
                return;

            DestroyUI(player);
        }
        #endregion

        #region Interface
        private void BuildInterface()
        {
            _interface = new PluginInterface();
            CuiElementContainer container = new CuiElementContainer
            {
                {
                    new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = "0.5 0",
                            AnchorMax = "0.5 0",
                            OffsetMin = "199 86",
                            OffsetMax = "382 108"
                        },
                        Image =
                        {
                            Color = "1 0.52 0 0"
                        },
                    },
                    "Overlay", UI_Layer
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = "Image0",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.sortImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "0 0",
                                OffsetMax = "22 22"
                            }
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = $"{UI_Layer}.Sort",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Sort", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 12
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{22} 0",
                                OffsetMax = "58 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "0 0",
                            OffsetMax = "58 22"
                        },
                        Button = { Color = _config.sortBttnColor, Command = "UI_Sort sortloot"},
                        Text = { Text = "" }
                    }, $"{UI_Layer}", $"{UI_Layer}.2511"
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = "Image1",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.similarImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "62 0",
                                OffsetMax = "84 22"
                            },
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = $"{UI_Layer}.TakeSimilar",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Take Similar", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 9
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{84} 0",
                                OffsetMax = "120 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "62 0",
                            OffsetMax = "120 22"
                        },
                        Button = {Color = _config.similarBttnColor, Command = "UI_Sort takesimilar"},
                        Text = { Text = "" }
                    }, $"{UI_Layer}"
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = "Image2",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.allImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "123 0",
                                OffsetMax = "145 22"
                            },
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_Layer,
                        Name = $"{UI_Layer}.TakeAll",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Take All", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 9
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{145} 0",
                                OffsetMax = "181 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "124 0",
                            OffsetMax = "182 22"
                        },
                        Button = {Color = _config.allBttnColor, Command = "UI_Sort takeall"},
                        Text = { Text = "" }
                    }, $"{UI_Layer}"
                },

                {
                    new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = "0.5 0",
                            AnchorMax = "0.5 0",
                            OffsetMin = "-72 340",
                            OffsetMax = "116 362"
                        },
                        Image =
                        {
                            Color = "1 0.52 0 0"
                        },
                    },
                    "Overlay", UI_LayerMain
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = "Image3",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.sortImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "0 0",
                                OffsetMax = "22 22"
                            }
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = $"{UI_LayerMain}.SortMain",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Sort", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 12
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{18} 0",
                                OffsetMax = "60 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "0 0",
                            OffsetMax = "60 22"
                        },
                        Button = { Color = _config.sortBttnColor, Command = "UI_Sort sortmain"},
                        Text = { Text = "" }
                    }, $"{UI_LayerMain}"
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = "Image4",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.similarImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "64 0",
                                OffsetMax = "86 22"
                            },
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = $"{UI_LayerMain}.PutSimilar",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Put Similar", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 9
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{86} 0",
                                OffsetMax = "124 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "64 0",
                            OffsetMax = "124 22"
                        },
                        Button = { Color = _config.similarBttnColor, Command = "UI_Sort movesimilar"},
                        Text = { Text = "" }
                    }, $"{UI_LayerMain}"
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = "Image5",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = GetImage(_config.allImg)
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "128 0",
                                OffsetMax = "150 22"
                            },
                        }
                    }
                },
                {
                    new CuiElement
                    {
                        Parent = UI_LayerMain,
                        Name = $"{UI_LayerMain}.PutAll",
                        Components =
                        {
                            new CuiTextComponent
                            {
                                Text = "Put All", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 9
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = "0 0",
                                AnchorMax = "0 0",
                                OffsetMin = "{150} 0",
                                OffsetMax = "188 22"
                            },
                            new CuiOutlineComponent
                            {
                                Color = GetColor("#000000"), Distance = "0.5 0.5"
                            }
                        }
                    }
                },
                {
                    new CuiButton
                    {
                        RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "0 0",
                            OffsetMin = "128 0",
                            OffsetMax = "188 22"
                        },
                        Button = { Color = _config.allBttnColor, Command = "UI_Sort moveall"},
                        Text = { Text = "" }
                    }, $"{UI_LayerMain}"
                },
            };
            _interface.ItemSort = container.ToJson();
        }

        private void DrawUI(BasePlayer player)
        {
            string interfaceHolder = _interface.ItemSort.Replace("{UILootAll}", GetLocal("UILootAll", player.UserIDString));
            if (_config.useImages == false)
            {
                interfaceHolder = interfaceHolder.Replace("{22}", "0");
                interfaceHolder = interfaceHolder.Replace("{84}", "62");
                interfaceHolder = interfaceHolder.Replace("{145}", "123");
                interfaceHolder = interfaceHolder.Replace("{18}", "0");
                interfaceHolder = interfaceHolder.Replace("{86}", "64");
                interfaceHolder = interfaceHolder.Replace("{150}", "128");
            }
            else
            {
                interfaceHolder = interfaceHolder.Replace("{22}", "22");
                interfaceHolder = interfaceHolder.Replace("{84}", "84");
                interfaceHolder = interfaceHolder.Replace("{145}", "145");
                interfaceHolder = interfaceHolder.Replace("{18}", "18");
                interfaceHolder = interfaceHolder.Replace("{86}", "86");
                interfaceHolder = interfaceHolder.Replace("{150}", "150");
            }
            DestroyUI(player);
            CuiHelper.AddUi(player, interfaceHolder);

            if (_config.useImages == false)
            {
                for (int i = 0; i < 6; i++) // 6 - number of buttons
                    CuiHelper.DestroyUi(player, "Image" + i);
            }
        }

        private void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UI_Layer);
            CuiHelper.DestroyUi(player, UI_LayerMain);
        }

        #endregion

        #region Commands

        [ConsoleCommand("UI_Sort")]
        private void Console_SortItems(ConsoleSystem.Arg arg)
        {
            if (_initiated == false)
                return;

            BasePlayer player = arg?.Player();
            if (player == null)
                return;

            if (arg.Args == null || arg.Args.Length < 1)
                return;

            var containers = player.inventory.loot.containers;
            if (containers == null)
                return;

            switch (arg.Args[0])
            {
                case "sortloot":
                    {
                        for (var i = 0; i < containers.Count; i++)
                            SortItemContainer(containers[i]);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UISort", player.UserIDString));
                        break;
                    }
                case "sortmain":
                    {
                        SortItemContainer(player.inventory.containerMain);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UISort", player.UserIDString));
                        break;
                    }
                case "takesimilar":
                    {
                        for (var i = 0; i < containers.Count; i++)
                            MoveSimilarItems(containers[i], player.inventory.containerMain);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UILootSimilar", player.UserIDString));
                        break;
                    }
                case "takeall":
                    {
                        for (var i = 0; i < containers.Count; i++)
                            MoveItems(containers[i], player.inventory.containerMain);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UILootAll", player.UserIDString));
                        break;
                    }
                case "movesimilar":
                    {
                        for (var i = 0; i < containers.Count; i++)
                            MoveSimilarItems(player.inventory.containerMain, containers[i]);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UIPutSimilar", player.UserIDString));
                        break;
                    }
                case "moveall":
                    {
                        for (var i = 0; i < containers.Count; i++)
                            MoveItems(player.inventory.containerMain, containers[i]);

                        if (_config.pluginReply)
                            SendReply(player, GetLocal("UIPutAll", player.UserIDString));
                        break;
                    }
            }

        }

        #endregion
    }
}

// --- End of file: UItemSort.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AntiLootDespawn.cs ---
// --- Original Local Path: AntiLootDespawn.cs ---

using UnityEngine;
using System;
using System.Linq;
namespace Oxide.Plugins
{
    [Info("AntiLootDespawn", "Bamabo", "1.1.0")]
    [Description("Change loot despawn time in cupboard radius")]
    public class AntiLootDespawn : RustPlugin
    {
        public float despawnMultiplier = 2.0f;
        public bool enabled = true;

        void Init()
        {
            permission.RegisterPermission("antilootdespawn", this);
            permission.RegisterPermission("antilootdespawn.multiplier", this);
            permission.RegisterPermission("antilootdespawn.enabled", this);
            despawnMultiplier = GetConfigEntry<float>("multiplier", 2.0f);
            enabled = GetConfigEntry<bool>("enabled", true);
        }

        void Unloaded()
        {
            foreach(var item in Resources.FindObjectsOfTypeAll<DroppedItem>().Where(c => c.isActiveAndEnabled))
            {
                item.CancelInvoke("IdleDestroy");
                item.Invoke("IdleDestroy", item.GetDespawnDuration());
            }
        }

        void OnEntitySpawned(BaseEntity entity) => SetDespawnTime(entity as DroppedItem);
        void SetDespawnTime(DroppedItem item)
        {
            if (!enabled)
                return;
            if (item == null)
                return;

            var entityRadius = Physics.OverlapSphere(item.transform.position, 0.5f, LayerMask.GetMask("Trigger"));

            foreach (var cupboard in entityRadius)
            {
                if (cupboard.GetComponentInParent<BuildingPrivlidge>() != null)
                {
                    item.CancelInvoke("IdleDestroy");
                    item.Invoke("IdleDestroy", despawnMultiplier * item.GetDespawnDuration());
                }
            }
        }

        [ConsoleCommand("antilootdespawn.multiplier")]
        void cmdMultiplier(ConsoleSystem.Arg args)
        {
            if(args.Player() != null)
            {
                if (!args.Player().IsAdmin() && !permission.UserHasPermission(args.Player().UserIDString, "antilootdespawn.multiplier"))
                    return;
            }else
            {
                if (!args.CheckPermissions())
                    return;
            }

            if (args.HasArgs())
            {
                despawnMultiplier = Convert.ToSingle(args.Args[0]);
                Config["multiplier"] = despawnMultiplier;
                SaveConfig();
            }
            args.ReplyWith($"antilootdespawn.multiplier = {despawnMultiplier}");


        }
        [ConsoleCommand("antilootdespawn.enabled")]
        void cmdEnabled(ConsoleSystem.Arg args)
        {
            if (args.Player() != null)
            {
                if (!args.Player().IsAdmin() && !permission.UserHasPermission(args.Player().UserIDString, "antilootdespawn.enabled"))
                    return;
            }
            else
            {
                if (!args.CheckPermissions())
                    return;
            }

            if (args.HasArgs())
            {
                enabled = (args.Args[0] == "true" ? true : args.Args[0] == "false" ? false : args.Args[0] == "1" ? true : args.Args[0] == "0" ? false : true);
                Config["enabled"] = enabled;
                SaveConfig();
            }
            args.ReplyWith($"antilootdespawn.enabled = {enabled}");
        }

       [ConsoleCommand("antilootdespawn")]
        void cmdList(ConsoleSystem.Arg args)
        {
            if (args.Player() != null)
            {
                if (!args.Player().IsAdmin() && !permission.UserHasPermission(args.Player().UserIDString, "antilootdespawn"))
                    return;
            }
            else
            {
                if (!args.CheckPermissions())
                    return;
            }

            args.ReplyWith($"antilootdespawn.enabled = {enabled}\nantilootdespawn.multiplier = {despawnMultiplier}");
        }
        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file for AntiLootDespawn");
            Config.Clear();
            Config["multiplier"] = 2.0f;
            Config["enabled"] = true;
            SaveConfig();
        }

        T GetConfigEntry<T>(string configEntry, T defaultValue)
        {
            if (Config[configEntry] == null)
            {
                Config[configEntry] = defaultValue;
                SaveConfig();
            }
            return (T)Convert.ChangeType(Config[configEntry], typeof(T));
        }
    }
}


// --- End of file: AntiLootDespawn.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RandomCases.cs ---
// --- Original Local Path: RandomCases.cs ---

﻿using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using UnityEngine;
using System.Diagnostics;
// Reference: System.Drawing

namespace Oxide.Plugins
{
    [Info("Random Cases", "OxideBro", "0.1.11")]
    public class RandomCases : RustPlugin
    {
        #region Classes
        [PluginReference]
        Plugin Duel;
        private bool IsDuelPlayer(BasePlayer player)
        {
            if (Duel == null)
                return false;
            var dueler = Duel.Call("IsPlayerOnActiveDuel", player);
            if (dueler is bool)
                return (bool)dueler;
            return false;
        }

        static RandomCases instance;

        public class CaseDefinition
        {
            public string Type;
            public string Name;
            public string Images;
            public string Description;
            public int CoolDown;
            public List<CaseItem> Items;
            public CaseItem Open() => Items.GetRandom();
        }

        public class CaseItem
        {
            public string Shortname;
            public int Min;
            public int Max;
            public int GetRandom() => UnityEngine.Random.Range(Min, Max + 1);
        }

        public class Case
        {
            public string Type;
            public int CoolDown;
            public int Amount;
            public CaseDefinition info()
            {
                if (!instance.cases.ContainsKey(Type))
                {
                    Interface.Oxide.LogWarning($"[{nameof(RandomCases)}] TYPE '{Type}' not contains in the Dictionary");
                    return null;

                }
                return instance.cases[Type];
            }
        }

        public class CasePlayer
        {
            public List<Case> CasesQueue = new List<Case>();
            public List<string> Inventory = new List<string>();
            public bool giftcases = false;
            public void OnTimer(ulong steamid, int delay)
            {
                List<Case> remove = new List<Case>();
                for (var i = CasesQueue.Count - 1; i >= 0; i--)
                {
                    var c = CasesQueue[i];
                    c.CoolDown -= delay;
                    if(c.CoolDown < 0)
                    {
                        if (instance.GiveCase(steamid, c.Type, c, 1))
                            remove.Add(c);
                    }
                    if (c.Amount <= 0)
                    {
                        remove.Add(c);
                        continue;
                    }
                    if (c.CoolDown <= 0)
                    {
                        if (instance.GiveCase(steamid, c.Type, c, 1))
                            remove.Add(c);
                    }
                }
                remove.ForEach(c => CasesQueue.Remove(c));
            }
        }

        public Dictionary<string, CaseDefinition> cases = new Dictionary<string, CaseDefinition>();

        public Dictionary<ulong, CasePlayer> players = new Dictionary<ulong, CasePlayer>();

        List<string> CasesList = new List<string>()
            {
                {"casename"},
                {"casename1"}
            };
        const int TIMEOUT = 60;

        bool init = false;
        private bool StartGiftCases;

        #endregion

        #region Configuration
        string cmdChatCommand = "case";
        bool enabledGiftCase = false;
        int giftcaseAmount = 5;
        string imagesServerLogo = "https://i.imgur.com/FSGvggs.png";
        string Eventpicture = "https://img00.deviantart.net/65e4/i/2013/003/6/6/png_floating_terrain_by_moonglowlilly-d5qb58m.png";
        //
        private float EndTime = 120f;
        private bool StartEventEnabled = false;
        private float MinTimeEvent = 300f;
        private float MaxTimeEvent = 600f;
        private int MinAMounts = 1;
        private int MaxAMounts = 5;

        //
        private void LoadConfigValues()
        {
            bool changed = false;
            if (GetConfig("Основные настройки", "Чатовая команда открытия меню кейсов", ref cmdChatCommand))
            {
                PrintWarning("Благодарим за приобритение плагина на сайте RustPlugin.ru. Если вы приобрели этот плагин на другом ресурсе знайте - это лишает вас гарантированных обновлений!");
                changed = true;
            }
            if (GetConfig("Основные настройки", "Ссылка на логотип сервера, для вывода в окно кейсов", ref imagesServerLogo))
            {
                changed = true;
            }

            if (GetConfig("Случайный кейс в подарок", "Включить мини-эвент 'Случайный кейс в подарок'", ref StartEventEnabled))
            {
                PrintWarning("В конфигурацию добавлены новые значения - Случайный кейс в подарок");
                changed = true;
            }
            if (GetConfig("Случайный кейс в подарок", "Время на проведение мини-эвента (в секундах)", ref EndTime))
            {
                changed = true;
            }
            if (GetConfig("Случайный кейс в подарок", "Минимальное время начало мини-эвента (в секундах)", ref MinTimeEvent))
            {
                changed = true;
            }
            if (GetConfig("Случайный кейс в подарок", "Минимальное количество получаемого кейса", ref MinAMounts))
            {
                changed = true;
            }
            if (GetConfig("Случайный кейс в подарок", "Максимальное количество получаемого кейса", ref MaxAMounts))
            {
                changed = true;
            }
            if (GetConfig("Случайный кейс в подарок", "Максимальное время начало мини-эвента (в секундах)", ref MaxTimeEvent))
            {
                changed = true;
            }

            if (GetConfig("Бонусный кейс", "Выдавать игроку при первом посещении бонусный кейс?", ref enabledGiftCase))
            {
                changed = true;
            }

            if (GetConfig("Бонусный кейс", "Количество кейсов выдаваемых игроку (Игрок получает 1 кейс, а остаток выдаеться в N количество времени указаного в data кейса)", ref giftcaseAmount))
            {
                changed = true;
            }

            var _CasesList = new List<object>()
            {
                {"casename"},
                {"casename1"}
            };
            if (GetConfig("Бонусный кейс", "Название кейсов какие выдавать игроку", ref _CasesList))
            {
                changed = true;
            }
            CasesList = _CasesList.Select(p => p.ToString()).ToList();
            if (changed)
                SaveConfig();
        }

        private bool GetConfig<T>(string MainMenu, string Key, ref T var)
        {
            if (Config[MainMenu, Key] != null)
            {
                var = (T)Convert.ChangeType(Config[MainMenu, Key], typeof(T));
                return false;
            }
            Config[MainMenu, Key] = var;
            return true;
        }
        #endregion

        #region Oxide

        void OnServerInitialized()
        {
            instance = this;
            LoadData();
            LoadConfig();
            LoadConfigValues();
            cmd.AddChatCommand(cmdChatCommand, this, cmdChatCase);
            lang.RegisterMessages(Messages, this, "en");
            Messages = lang.GetMessages("en", this);
            timer.Every(TIMEOUT, TimerHandle);
            InitFileManager();
            if (StartEventEnabled) StartRandomCase();
            CommunityEntity.ServerInstance.StartCoroutine(m_FileManager.LoadFile("Serverlogo", imagesServerLogo));
            CommunityEntity.ServerInstance.StartCoroutine(m_FileManager.LoadFile("IconEvent", Eventpicture));
            CommunityEntity.ServerInstance.StartCoroutine(m_FileManager.LoadFile("Gift", giftpng));
            CommunityEntity.ServerInstance.StartCoroutine(m_FileManager.LoadFile("ImagesCcase", imagesccase));
            foreach (var check in cases)
            {
                CommunityEntity.ServerInstance.StartCoroutine(m_FileManager.LoadFile($"Icon{check.Value.Type}", check.Value.Images));
            }
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                OnPlayerInit(player);
            }
        }

        void SaveData()
        {
            players_File.WriteObject(players);
        }

        void Unload()
        {
            SaveData();
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, "randomcase_menu");
                CuiHelper.DestroyUi(player, "randomcases_give");
            }
        }

        void OnServerSave()
        {
            SaveData();
        }

        void OnPlayerInit(BasePlayer player)
        {
            CasePlayer casePlayer;
            if (!players.TryGetValue(player.userID, out casePlayer))
            {
                casePlayer = new CasePlayer();
                players.Add(player.userID, casePlayer);
            }
            if (enabledGiftCase)
            {
                if (!casePlayer.giftcases)
                {
                    foreach (var case1 in CasesList)
                    {
                        GiveCaseGift(player.userID, case1, giftcaseAmount);
                    }
                }
            }
            PlayerCheck(player);
        }

        void PlayerCheck(BasePlayer player, int Current = 0, Case ccase2 = null)
        {
            CasePlayer casePlayer;
            if (!players.TryGetValue(player.userID, out casePlayer))
            {
                casePlayer = new CasePlayer();
                players.Add(player.userID, casePlayer);
            }
            var reply = 16;
            var x = new Stopwatch();
            x.Start();
            Dictionary<string, int> casesCollapsed = new Dictionary<string, int>();

            foreach (var ccase in casePlayer.Inventory)
            {
                if (!casesCollapsed.ContainsKey(ccase))
                    casesCollapsed[ccase] = 0;
                casesCollapsed[ccase]++;
            }
            Dictionary<string, int> casesQueue = new Dictionary<string, int>();
            foreach (var ccase1 in casePlayer.CasesQueue)
            {
                if (!casesQueue.ContainsKey(ccase1.Type))
                    casesQueue[ccase1.Type] = 0;
                casesQueue[ccase1.Type]++;
            }
            int Error = 0;
            List<string> QueInventory = new List<string>();
            foreach (var check in casesQueue)
            {
                if (!cases.ContainsKey(check.Key))
                {
                    QueInventory.Add(check.Key);
                    continue;
                }
            }
            foreach (var remove in QueInventory)
            {
                var caseQueue = ccase2 ?? casePlayer.CasesQueue.Find(c => c.Type == remove);
                casePlayer.CasesQueue.Remove(caseQueue);
                continue;
            }
            List<string> Inventory = new List<string>();
            foreach (var check in casesCollapsed)
            {
                foreach (var players1 in check.Key)
                {
                    if (!cases.ContainsKey(check.Key))
                    {
                        Inventory.Add(check.Key);
                        Error += check.Value;
                    }
                }
            }

            foreach (var remove in Inventory)
            {
                casePlayer.Inventory.Remove(remove);
                Error--;
                continue;
            }
            if (Error > 0)
            {
                PlayerCheck(player, Current);
            }
            x.Stop();
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            CasePlayer casePlayer;
            if (players.TryGetValue(player.userID, out casePlayer) && casePlayer.Inventory.Count > 0)
                SendReply(player, Messages["isHaveCases"]);
        }
        #endregion

        #region COMMANDS

        [ConsoleCommand("casegive")]
        void cmdRandomCaseGive(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null) return;
            BasePlayer player;
            if (arg.Args == null || arg.Args.Length < 3)
            {
                Puts("Используйте: casegive STEAMID CASE AMOUNT");
                return;
            }
            if (arg.Connection != null)
            {
                player = arg.Connection.player as BasePlayer;
                if (player != null && player.net.connection.authLevel != 2) return;
            }
            var uid = ulong.Parse(arg.Args[0]);
            CasePlayer casePlayer;
            if (!players.TryGetValue(uid, out casePlayer))
            {
                casePlayer = new CasePlayer();
                players.Add(uid, casePlayer);
            }

            for (int i = 1; i < arg.Args.Length; i += 2)
            {
                var type = arg.Args[i];
                var amount = int.Parse(arg.Args[2]);
                Case cCase = casePlayer.CasesQueue.FirstOrDefault(c => c.Type == type);
                if (cCase == null)
                {
                    cCase = new Case() { Amount = amount, Type = type, CoolDown = 0 };
                    casePlayer.CasesQueue.Add(cCase);
                }
                else
                {
                    if (amount > 1)
                        cCase.Amount += amount;
                }
                GiveCase(uid, type, null, amount);
            }
        }

        [ConsoleCommand("casedrop")]
        void cmdDropUser(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null) return;
            var player = arg.Player();
            ulong userId = arg.GetUInt64(0);
            CasePlayer casePlayer;
            if (arg.Args == null || arg.Args.Length != 1)
            {
                Puts("Используйте: casedrop STEAMID");
                return;
            }
            if (!players.TryGetValue(userId, out casePlayer))
            {
                Puts("У игрока нет кейсов! Или игрок не найден");
                return;
            }

            var commandMsg = $"casegive {userId}";

            foreach (var ccase in casePlayer.Inventory)
                commandMsg += $" \"{ccase}\" 1";
            foreach (var ccase in casePlayer.CasesQueue)
                commandMsg += $" \"{ccase.Type}\" {ccase.Amount - 1}";
            players.Remove(userId);
            if (player != null)
            {
                players.Add(player.userID, casePlayer);
            }
                Puts($"Очищены кейсы {userId}\nДля переноса используйте следующую команду:\n{commandMsg}");
        }

        void cmdChatCase(BasePlayer player, string cmd, string[] args)
        {
            if (!init)
            {
                SendReply(player, Messages["plInit"]);
                return;
            }
            CasePlayer casePlayer;
            if (players.TryGetValue(player.userID, out casePlayer))
            {
                if (casePlayer.CasesQueue.Count >= 1)
                {
                    string getCases = "";
                    foreach (var ccase in casePlayer.CasesQueue)
                    {
                        string name = cases[ccase.Type].Name;
                        getCases = getCases + "Кейсов " + name + " - Осталось: " + ccase.Amount + $"\nСледующий через: {FormatTime(TimeSpan.FromSeconds(ccase.CoolDown))}" + "\n";
                    }
                    SendReply(player, getCases);
                }
            }
            DrawCases(player, 1);
        }

        [ConsoleCommand("nextpage.case2")]
        void cmdCloseMenu1(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            DrawCases(player, 2);
        }

        [ConsoleCommand("nextpage.case1")]
        void cmdCloseMenu0(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            DrawCases(player, 1);
        }

        [ConsoleCommand("drawhelp")]
        void cmdHelpMenu(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            DrawHelp(player);
        }

        [ConsoleCommand("drawcasesbonus")]
        void cmdOpenBonus(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            DrawCasesParrent(player);
        }

        [ConsoleCommand("bonusDisabled")]
        void cmdOpenDisabled(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            if (!activatePlayers.Contains(player.userID))
            {
                SendReply(player, Messages["endEventCase"]);
            }
            else
            {
                SendReply(player, Messages["alreadyCases"]);
            }
        }

        [ConsoleCommand("randomcase.open")]
        void cmdOpenCase(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            var ccase = arg.Args[0];
            DrawCaseInfo(player, ccase);
        }
        List<ulong> activatePlayers = new List<ulong>();

        [ConsoleCommand("randomcase.giverandom")]
        void cmdGiveCasesRandom(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            CasePlayer casePlayer;
            if (players.TryGetValue(player.userID, out casePlayer))
            {
            }
            if (!activatePlayers.Contains(player.userID))
            {
                List<string> Cases = new List<string>();
                foreach (var cases in cases)
                {
                    Cases.Add(cases.Key);
                }
                string GiveCase1 = Cases.GetRandom();
                var amounts = UnityEngine.Random.Range(MinAMounts, MaxAMounts);
                Case cCase = casePlayer.CasesQueue.FirstOrDefault(c => c.Type == GiveCase1);
                if (cCase == null)
                {
                    cCase = new Case() { Amount = amounts, Type = GiveCase1, CoolDown = 0 };
                    casePlayer.CasesQueue.Add(cCase);
                }
                else
                {
                    if (amounts > 1)
                        cCase.Amount += amounts;
                }
                GiveCase(player.userID, GiveCase1, null, amounts);
                DrawCasesGive(player, GiveCase1, amounts);
                activatePlayers.Add(player.userID);
                DrawButton(player);
                Cases.Clear();
            }
            else
            {
                SendReply(player, Messages["alreadyCases"]);
            }
        }


        [ConsoleCommand("openplayercase")]
        void cmdOpenCaseTest(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            var ccase = arg.Args[0];
            var amount = arg.Args[1];

            OpenCase(player, ccase);
            DrawCases(player, 1);
            if (amount != "1")
            {
                DrawCaseInfo(player, ccase);
            }
        }


        [ConsoleCommand("casesmenuclose")]
        void cmdCloseMenu(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            CuiHelper.DestroyUi(player, "randomcase_menu");
            CuiHelper.DestroyUi(player, "casescontainer");
        }

        [ConsoleCommand("caseses")]
        void cmdMenuStart(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null) return;
            var player = arg.Player();
            CuiHelper.DestroyUi(player, "randomcase_menuBonusNoEctive");
        }

        #endregion

        #region CORE

        private double nextTrigger;

        private Timer nextEvent;

        private Timer mytimer;

        private double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        [ConsoleCommand("start.random")]
        void cmdStartEvent(ConsoleSystem.Arg arg)
        {
            Puts("Запущен мини-имент по раздаче кейсов");
            if (nextEvent != null) timer.Destroy(ref nextEvent);
            StartEventCases();
        }

        private void StartEventCases()
        {
            StartGiftCases = true;
            activatePlayers.Clear();
            foreach (var player in BasePlayer.activePlayerList)
                SendReply(player, Messages["Startevent"], FormatTime(TimeSpan.FromSeconds(EndTime)));
            mytimer = timer.Once(EndTime, () =>
            {
                StartGiftCases = false;
                StartRandomCase();
            });
        }

        private void StartRandomCase()
        {
            var time = UnityEngine.Random.Range(MinTimeEvent, MaxTimeEvent);
            nextTrigger = GrabCurrentTime() + time;
            nextEvent = timer.In((float)time, () => StartEventCases());
        }


        void TimerHandle()
        {
            foreach (var rCase in players)
                rCase.Value.OnTimer(rCase.Key, TIMEOUT);
            SaveData();
        }

        bool GiveCase(ulong userID, string ccase, Case ccase1 = null, int amount = 0, string values = "")
        {
            CasePlayer casePlayer;
            if (players.TryGetValue(userID, out casePlayer))
            {
                var caseQueue = ccase1 ?? casePlayer.CasesQueue.Find(c => c.Type == ccase);
                if (caseQueue == null) return false;
                if (caseQueue.info() == null)
                {
                    casePlayer.CasesQueue.Remove(caseQueue);
                    return false;
                }
                caseQueue.CoolDown = caseQueue.info().CoolDown;
                casePlayer.Inventory.Add(ccase);
                var player = BasePlayer.FindByID(userID);
                Puts($"{(player == null ? userID.ToString() : player.displayName)} получил кейс {ccase} в размере {amount} шт.");
                caseQueue.Amount--;
                casePlayer.OnTimer(userID, 0);
                if (player != null)
                    SendReply(player, Messages["givePlayerCase"], cases[ccase].Name, amount);

                if (caseQueue.Amount <= 1)
                {
                    instance.Puts($"{(player == null ? userID.ToString() : player.displayName)} перестал получать кейс с {ccase}");
                    return true;
                }
                
                SaveData();
            }
            return false;
        }

        void GiveCaseGift(ulong userID, string ccase, int amount)
        {
            CasePlayer casePlayer;
            if (!players.TryGetValue(userID, out casePlayer))
            {
                casePlayer = new CasePlayer();
                players.Add(userID, casePlayer);
            }
            Case cCase = casePlayer.CasesQueue.FirstOrDefault(c => c.Type == ccase);
            if (cCase == null)
            {
                cCase = new Case() { Amount = amount, Type = ccase, CoolDown = 0 };
                if (amount > 1)
                    casePlayer.CasesQueue.Add(cCase);
            }
            else cCase.Amount += amount;
            casePlayer.giftcases = true;
            SaveData();
            GiveCase(userID, ccase, null, amount);

        }

        bool OpenCase(BasePlayer player, string ccase)
        {
            CasePlayer casePlayer;
            if (players.TryGetValue(player.userID, out casePlayer)
                && casePlayer.Inventory.Contains(ccase))
            {
                if (!CanTake(player))
                {
                    SendReply(player, Messages["invFull"]);
                    return false;
                }
                if (IsDuelPlayer(player))
                {
                    return false;
                }
                casePlayer.Inventory.Remove(ccase);
                var item = cases[ccase].Items.GetRandom();
                var amount = item.GetRandom();
                player.inventory.GiveItem(ItemManager.CreateByName(item.Shortname, amount, 0));
                var x = ItemManager.CreateByPartialName(item.Shortname);
                SendReply(player, Messages["openCases"], cases[ccase].Name, x.info.displayName.english, amount);
                SaveData();
                return true;
            }
            return false;
        }

        bool CanTake(BasePlayer player) => !player.inventory.containerMain.IsFull() || !player.inventory.containerBelt.IsFull();

        public static string FormatTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0)
                result += $"{Format(time.Days, "дней", "дня", "день")} ";

            if (time.Hours != 0)
                result += $"{Format(time.Hours, "часов", "часа", "час")} ";

            if (time.Minutes != 0)
                result += $"{Format(time.Minutes, "минут", "минуты", "минута")} ";

            if (time.Seconds != 0)
                result += $"{Format(time.Seconds, "секунд", "секунды", "секунда")} ";

            return result;
        }

        private static string Format(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units} {form1}";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2}";

            return $"{units} {form3}";
        }
        #endregion

        #region UI
        string giftpng = "https://i.imgur.com/qVnkJ0l.png";
        string imagesccase = "http://i.imgur.com/6D4YQmA.png";

        string GUI = "[{\"name\":\"randomcase_menu\",\"parent\":\"Hud\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.1647059 0.1254902 0.3372549 0.8509804\"},{\"type\":\"NeedsCursor\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1 0.2226563\",\"anchormax\":\"0.9 0.8541666\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_list\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0 0 0 0.2980392\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.4325956\",\"anchormax\":\"0.998 0.8973742\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.title_bp\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0 0.3803922 0.4 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.8973845\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.title.text\",\"parent\":\"randomcase.title_bp\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{title}\",\"fontSize\":30,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.6229643\",\"distance\":\"-2 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_info\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.09657952\",\"anchormax\":\"1 0.4265594\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"server.logo\",\"parent\":\"randomcase_info\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"1 1 1 0.5468885\",\"png\":\"{server_logo}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5979137 0.07877916\",\"anchormax\":\"0.9849928 0.9221781\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"GUIText.randomcase\",\"parent\":\"randomcase_info\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"1 1 1 0\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.005856483 0.08955821\",\"anchormax\":\"0.5896779 0.9768029\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_menu.down\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.1647059 0.1254902 0.3372549 0.6188989\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 -1.44355E-08\",\"anchormax\":\"1 0.08008468\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_menuClose\",\"parent\":\"randomcase_menu.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"casesmenuclose\",\"color\":\"0.6862745 0.1058824 0.2039216 0.8196079\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.6707177 0.1489361\",\"anchormax\":\"0.8707184 0.8333333\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_X\",\"parent\":\"randomcase_menuClose\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"ВЫХОД\",\"fontSize\":20,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_menuHelp\",\"parent\":\"randomcase_menu.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"drawhelp\",\"color\":\"0.1058824 0.6862745 0.4386819 0.8196079\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.4207172 0.1489361\",\"anchormax\":\"0.6207181 0.8333336\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_X\",\"parent\":\"randomcase_menuHelp\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"ПОМОЩЬ\",\"fontSize\":20,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"RectTransform\",\"anchormin\":\"0.07320644 0.1302083\",\"anchormax\":\"0.1464129 0.2604167\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"Overlay\",\"components\":[{\"type\":\"RectTransform\",\"anchormin\":\"0.07320644 0.1302083\",\"anchormax\":\"0.1464129 0.2604167\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";
        string GUIInfo = "[{\"name\":\"randomcase.info.name\",\"parent\":\"randomcase_info\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0 0 0 0.1137255\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.005 0.02317023\",\"anchormax\":\"0.58 0.9546165\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.nametitle\",\"parent\":\"randomcase.info.name\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0 0 0 0.1137255\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.78\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.texttitle\",\"parent\":\"randomcase.info.nametitle\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{1}\",\"fontSize\":20,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2798101 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.infotext\",\"parent\":\"randomcase.info.name\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{desc}\",\"fontSize\":18,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2942004 0.2636817\",\"anchormax\":\"1 0.8\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.down\",\"parent\":\"randomcase.info.name\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"color\":\"0 0 0 0.1529412\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.28 0\",\"anchormax\":\"1 0.2384105\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.col\",\"parent\":\"randomcase.info.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"color\":\"0.1647059 0.1254902 0.3372549 0.3882353\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"0.5 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.colinfo\",\"parent\":\"randomcase.info.col\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Осталось кейсов: {amount} шт.\",\"fontSize\":18,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.button\",\"parent\":\"randomcase.info.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"openplayercase {3} {amount}\",\"color\":\"0 0.9568627 1 0.8196079\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.997 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.buttontext\",\"parent\":\"randomcase.info.button\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Взять\",\"fontSize\":20,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase.info.iconm\",\"parent\":\"randomcase.info.name\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"png\":\"{0}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"0.28 0.989071\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";
        string GUIBuyCases = "[{\"name\":\"randomcases_text\",\"parent\":\"randomcase_list\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.1647059 0.1254902 0.3372549 0.3\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\"}]},{\"name\":\"randomcases_text.text\",\"parent\":\"randomcases_text\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{noCases}\",\"fontSize\":23,\"align\":\"MiddleCenter\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\"}]}]}]";

        string BonusParrent = "[{\"name\":\"bonusparrent\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bonusparrent\",\"color\":\"0 0 0 0.9098039\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.bp\",\"parent\":\"bonusparrent\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.2901961 0.1921569 0.4156863 1\",\"fadeIn\":0.5},{\"type\":\"RectTransform\",\"anchormin\":\"0.35 0.09244792\",\"anchormax\":\"0.65 0.8752517\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname\",\"parent\":\"bonusparrent.bp\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"<size=22>Эй {NAME}</size>\nУ тебя появилась возможность получить бесплатный кейс!\",\"fontSize\":18,\"align\":\"UpperCenter\",\"fadeIn\":0.5},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910964\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04612011 0.7204301\",\"anchormax\":\"0.9392388 0.9813815\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.images\",\"parent\":\"bonusparrent.bp\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"png\":\"{img}\",\"fadeIn\":0.5},{\"type\":\"RectTransform\",\"anchormin\":\"0 0.2098014\",\"anchormax\":\"0.998 0.7098014\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.button\",\"parent\":\"bonusparrent.bp\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"randomcase.giverandom\",\"color\":\"0.5411765 0.3411765 0.8313726 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.09378102\",\"distance\":\"2 -2\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1 0.02623458\",\"anchormax\":\"0.9 0.1347321\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.buttontext\",\"parent\":\"bonusparrent.button\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"ПОЛУЧИТЬ!\",\"fontSize\":19,\"align\":\"MiddleCenter\",\"fadeIn\":0.5},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5689934\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";
        string GiveRandomCase = "[{\"name\":\"bonusgive\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bonusgive\",\"color\":\"0 0 0 0.9098039\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusgive.bp\",\"parent\":\"bonusgive\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.2901961 0.1921569 0.4156863 1\",\"fadeIn\":0.5},{\"type\":\"RectTransform\",\"anchormin\":\"0.38 0.09244792\",\"anchormax\":\"0.62 0.8752517\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusgive.textname\",\"parent\":\"bonusgive.bp\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Получен кейс:\n<size=22>{NAME} ({amount})</size>\",\"fontSize\":18,\"align\":\"UpperCenter\",\"fadeIn\":0.5},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910964\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04612011 0.8183725\",\"anchormax\":\"0.9392388 0.9847082\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusgive.images\",\"parent\":\"bonusgive.bp\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"png\":\"{img}\",\"fadeIn\":0.5},{\"type\":\"RectTransform\",\"anchormin\":\"0.015 0.15\",\"anchormax\":\"0.985 0.8117191\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusgive.button\",\"parent\":\"bonusgive.bp\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bonusgive\",\"color\":\"0.5411765 0.3411765 0.8313726 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.09378102\",\"distance\":\"2 -2\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1 0.02623458\",\"anchormax\":\"0.9 0.1097817\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusgive.buttontext\",\"parent\":\"bonusgive.button\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"ЗАКРЫТЬ\",\"fontSize\":19,\"align\":\"MiddleCenter\",\"fadeIn\":0.5},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5689934\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";

        string Button = "[{\"name\":\"randomcase_menuBonus\",\"parent\":\"randomcase_menu.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"drawcasesbonus\",\"color\":\"0.82 0.44 0.79 1.00\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1707174 0.1489361\",\"anchormax\":\"0.3707174 0.8333338\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_X\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"GIFT CASE!\",\"fontSize\":20,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910963\",\"distance\":\"0.5 -0.5\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1777088 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_menuBonusNoEctive\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"color\":\"0.4117647 0.4117647 0.4117647 0.2541838\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"0.22 0.98\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"giftimages\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"png\":\"{gift}\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2263984\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04 0.15\",\"anchormax\":\"0.18 0.85\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";

        string ButtonOff = "[{\"name\":\"randomcase_menuBonus\",\"parent\":\"randomcase_menu.down\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"bonusDisabled\",\"color\":\"0.4980392 0.4980392 0.4980392 0.1336912\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1707174 0.1489361\",\"anchormax\":\"0.3707174 0.8333338\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_X\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"GIFT CASE!\",\"fontSize\":20,\"align\":\"MiddleCenter\",\"color\":\"1 1 1 0.103032\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910963\",\"distance\":\"0.5 -0.5\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1777088 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"randomcase_menuBonusNoEctive\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"color\":\"0.4117647 0.4117647 0.4117647 0.1073113\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"0.22 0.98\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"giftimages\",\"parent\":\"randomcase_menuBonus\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"color\":\"1 1 1 0.1347619\",\"png\":\"{gift}\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.2263984\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04 0.15\",\"anchormax\":\"0.18 0.85\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";

        string GUIHelp = "[{\"name\":\"bonusparrent.textname2\",\"parent\":\"randomcase_menu\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bonusparrent\",\"color\":\"0 0 0 0.9098039\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname3\",\"parent\":\"bonusparrent.textname2\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"sprite\":\"Assets/Content/UI/UI.Background.Tile.psd\",\"color\":\"0.2901961 0.1921569 0.4156863 1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.3 0.09244792\",\"anchormax\":\"0.7 0.8752517\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname4\",\"parent\":\"bonusparrent.textname3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"<size=23>Привет {NAME}</size>\",\"fontSize\":18,\"align\":\"UpperCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910964\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04612011 0.9098572\",\"anchormax\":\"0.9392388 0.9813815\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname5\",\"parent\":\"bonusparrent.textname3\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"close\":\"bonusparrent.textname2\",\"color\":\"0.5411765 0.3411765 0.8313726 1\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.09378102\",\"distance\":\"2 -2\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.1 0.02623458\",\"anchormax\":\"0.9 0.1347321\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname6\",\"parent\":\"bonusparrent.textname5\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"Закрыть\",\"fontSize\":19,\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5689934\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"bonusparrent.textname7\",\"parent\":\"bonusparrent.textname3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{text}\",\"fontSize\":18,\"align\":\"UpperCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0 0 0 0.5910964\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.04612011 0.1929496\",\"anchormax\":\"0.9392388 0.8699366\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";

        void DrawHelp(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "bonusparrent.textname2");
            CuiHelper.AddUi(player, GUIHelp
                  .Replace("{NAME}", player.displayName.ToString())
                  .Replace("{text}", Messages["customText"]));
        }

        void DrawButton(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "randomcase_menuBonus");
            if (StartGiftCases)
            {
                if (!activatePlayers.Contains(player.userID))
                {
                    CuiHelper.AddUi(player, Button
                      .Replace("{gift}", m_FileManager.GetPng("Gift")));
                    return;
                }
            }
            CuiHelper.AddUi(player, ButtonOff
                      .Replace("{gift}", m_FileManager.GetPng("Gift")));
        }

        string HandleArgs(string json, params object[] args)
        {
            for (int i = 0; i < args.Length; i++)
                json = json.Replace("{" + i + "}", args[i].ToString());
            return json;
        }

        void DrawCasesParrent(BasePlayer player)
        {
            CuiHelper.AddUi(player, BonusParrent
                  .Replace("{NAME}", player.displayName.ToString())
                  .Replace("{img}", m_FileManager.GetPng("ImagesCcase")));
        }

        void DrawCasesGive(BasePlayer player, string ccase, int amount)
        {
            CuiHelper.DestroyUi(player, "bonusparrent");
            CuiHelper.AddUi(player, GiveRandomCase
                      .Replace("{NAME}", cases[ccase].Name)
                      .Replace("{img}", m_FileManager.GetPng($"Icon{ccase}"))
                      .Replace("{amount}", amount.ToString()));
        }

        void DrawCaseInfo(BasePlayer player, string ccase1)
        {
            CasePlayer casePlayer;
            if (!players.TryGetValue(player.userID, out casePlayer))
            {
                PlayerCheck(player);
                return;
            }
            Dictionary<string, int> casesCollapsed = new Dictionary<string, int>();

            foreach (var ccase in casePlayer.Inventory)
            {
                if (!casesCollapsed.ContainsKey(ccase))
                    casesCollapsed[ccase] = 0;
                casesCollapsed[ccase]++;
            }
            var amount = casesCollapsed[ccase1];
            if (casesCollapsed == null) return;
            if (amount <= 0) return;
            Effect.server.Run("assets/prefabs/weapons/semi auto rifle/effects/dryfire.prefab", player, 0, Vector3.zero, Vector3.forward);
            CuiHelper.DestroyUi(player, "GUITEXT.customcase");
            CuiHelper.DestroyUi(player, "randomcase.info.name");
            CuiHelper.AddUi(player,
                      HandleArgs(GUIInfo, m_FileManager.GetPng($"Icon{ccase1}"), cases[ccase1].Name, 1).Replace("{3}", ccase1).Replace("{desc}", cases[ccase1].Description)
                      .Replace("{desc}", cases[ccase1].Description)
                      .Replace("{amount}", casesCollapsed[ccase1].ToString()));
        }


        void DrawCases(BasePlayer player, int page)
        {
            CasePlayer casePlayer;
            CuiHelper.DestroyUi(player, "randomcase_menu");
            CuiHelper.DestroyUi(player, "casescontainer");
            CuiHelper.DestroyUi(player, "casescontainer1");
            CuiHelper.AddUi(player, GUI
                .Replace("{server_logo}", m_FileManager.GetPng("Serverlogo"))
                .Replace("{title}", Messages["GUITitle"])
                .Replace("{customtext}", Messages["customText"])
                );

            DrawButton(player);
            if (!players.TryGetValue(player.userID, out casePlayer))
            {
                PlayerCheck(player);
                DrawCases(player, page);
                return;
            }
            var container = new CuiElementContainer();
            float gap = -0.005f;
            float width = 0.19f;
            float height = 0.95f;
            float startxBox = 0.035f;
            float startyBox = 1f - height;
            float xmin = startxBox;
            float ymin = startyBox;
            int i = 0;
            var mainPanel = container.Add(new CuiPanel() { Image = { Color = "0 0 0 0" } }, "randomcase_list", "casescontainer");
            var mainPanel1 = container.Add(new CuiPanel() { Image = { Color = "0 0 0 0" } }, "GUIText.randomcase", "casescontainer1");

            Dictionary<string, int> casesCollapsed = new Dictionary<string, int>();

            foreach (var ccase in casePlayer.Inventory)
            {
                if (!casesCollapsed.ContainsKey(ccase))
                    casesCollapsed[ccase] = 0;
                casesCollapsed[ccase]++;
            }

            if (casesCollapsed.Count == 0 && casePlayer.Inventory.Count == 0)
            {
                if (casePlayer.CasesQueue.Count == 0)
                {
                    CuiHelper.DestroyUi(player, "casescontainer1");
                    CuiHelper.AddUi(player, GUIBuyCases.Replace("{noCases}", Messages["nogiveCases"]));
                    return;
                }
                CuiHelper.DestroyUi(player, "casescontainer1");
                CuiHelper.AddUi(player, GUIBuyCases.Replace("{noCases}", Messages["endCases"]));
                return;
            }

            if (page == 1)
            {
                foreach (var ccase in casesCollapsed)
                {
                    container.Add(new CuiButton()
                    {
                        Button = { Command = $"randomcase.open {ccase.Key}", Color = "0.1647059 0.1254902 0.3372549 0.5" },
                        RectTransform = {
                        AnchorMin = xmin + " " + ymin,
                        AnchorMax = (xmin + width) + " " + (ymin + height *1),
                        OffsetMax = "-5 -7",
                        OffsetMin = "4 0",

                    },
                        Text = { Text = $"", Align = TextAnchor.LowerCenter, Color = "1 1 1 1", FontSize = 18 }
                    },
                    mainPanel, $"ui.case.{cases[ccase.Key].Type}");
                    xmin += width + gap;
                    if (xmin + width >= 1)
                    {
                        xmin = startxBox;
                        ymin -= height + gap;
                    }
                    InitilizeKitImageUI(ref container, cases[ccase.Key].Type);
                    i++;
                    if (!cases.ContainsKey(ccase.Key))
                    {
                        break;
                    }
                    if (i == 1)
                    {
                        DrawCaseInfo(player, cases[ccase.Key].Type);
                    }
                    if (i >= 5)
                    {
                        break;
                    }
                }
                if (casesCollapsed.Count > 5)
                {
                    container.Add(new CuiButton
                    {
                        Button = { Command = "nextpage.case2", Color = "0.1647059 0.1254902 0.3372549 0.6" },
                        RectTransform = { AnchorMin = "0.965 0.045", AnchorMax = "0.997 0.97" },
                        Text = { Text = ">", FontSize = 22, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
                    }, mainPanel);
                }

                CuiHelper.AddUi(player, container);
                return;
            }

            if (page == 2)
            {
                var casesCollapsed1 = casesCollapsed.Skip(5);
                foreach (var ccase in casesCollapsed1)
                {
                    container.Add(new CuiButton()
                    {
                        Button = { Command = $"randomcase.open {ccase.Key}", Color = "0.1647059 0.1254902 0.3372549 0.5" },
                        RectTransform = {
                        AnchorMin = xmin + " " + ymin,
                        AnchorMax = (xmin + width) + " " + (ymin + height *1),
                        OffsetMax = "-5 -7",
                        OffsetMin = "4 0"
                    },
                        Text = { Text = $"", Align = TextAnchor.LowerCenter, Color = "1 1 1 1", FontSize = 18 }
                    }, mainPanel, $"ui.case.{cases[ccase.Key].Type}");
                    xmin += width + gap;
                    if (xmin + width >= 1)
                    {
                        xmin = startxBox;
                        ymin -= height + gap;
                    }
                    InitilizeKitImageUI(ref container, cases[ccase.Key].Type);
                    i++;
                    if (i == 1)
                    {
                        DrawCaseInfo(player, cases[ccase.Key].Type);
                    }
                }
                if (casesCollapsed.Count > 5)
                {
                    container.Add(new CuiButton
                    {
                        Button = { Command = "nextpage.case1", Color = "0.1647059 0.1254902 0.3372549 0.6" },
                        RectTransform = { AnchorMin = "0.002 0.045", AnchorMax = "0.035 0.97" },
                        Text = { Text = "<", FontSize = 20, Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter }
                    }, mainPanel);
                }
                CuiHelper.AddUi(player, container);
            }
        }

        private void InitilizeKitImageUI(ref CuiElementContainer container, string ccase)
        {
            string image = m_FileManager.GetPng($"Icon{ccase}");
            CuiRawImageComponent imageComp = new CuiRawImageComponent
            {
                Sprite = "assets/content/textures/generic/fulltransparent.tga",
                Color = "#FFFFFFFF",
                FadeIn = 1.0f,
            };
            if (image != string.Empty)
            {
                imageComp.Png = image;
            }
            container.Add(new CuiElement
            {
                Parent = $"ui.case.{ccase}",
                Components =
                {
                    imageComp,
                    new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });
        }
        

        #endregion

        #region DATA

        DynamicConfigFile players_File = Interface.Oxide.DataFileSystem.GetFile("RandomCases/RandomCase_Players");

        void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile("RandomCases/RandomCase_Cases"))
                cases = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<string, CaseDefinition>>("RandomCases/RandomCase_Cases");
            else
            {
                cases.Add("weapons", new CaseDefinition()
                {
                    Name = "Оружие",
                    Type = "weapons",
                    Images = "https://i.imgur.com/w9tvRY8.png",
                    Description = "Описание",
                    CoolDown = 43200,
                    Items = new List<CaseItem>
                    {
                        new CaseItem
                        {
                            Shortname = "rifle.ak",
                            Min = 1,
                            Max = 1
                        }
                    }
                });
                cases.Add("resources", new CaseDefinition()
                {
                    Name = "Ресурсы",
                    Type = "resources",
                    Images = "https://i.imgur.com/w9tvRY8.png",
                    Description = "Описание",
                    CoolDown = 43200,
                    Items = new List<CaseItem>
                    {
                        new CaseItem
                        {
                            Shortname = "rifle.ak",
                            Min = 1,
                            Max = 1
                        }
                    }
                });
                Interface.Oxide.DataFileSystem.WriteObject("RandomCases/RandomCase_Cases", cases);
            }

            try
            {
                players = players_File.ReadObject<Dictionary<ulong, CasePlayer>>();
            }
            catch
            {
                players = new Dictionary<ulong, CasePlayer>();
            }
        }



        #endregion

        #region File Manager

        #region LoadIcon
        private GameObject FileManagerObject;
        private FileManager m_FileManager;

        /// <summary>
        /// Инициализация скрипта взаимодействующего с файлами сервера
        /// </summary>
        void InitFileManager()
        {
            FileManagerObject = new GameObject("MAP_FileManagerObject");
            m_FileManager = FileManagerObject.AddComponent<FileManager>();

        }

        class FileManager : MonoBehaviour
        {
            int loaded = 0;
            int needed = 0;

            public bool IsFinished => needed == loaded;
            const ulong MaxActiveLoads = 10;
            Dictionary<string, FileInfo> files = new Dictionary<string, FileInfo>();

            private class FileInfo
            {
                public string Url;
                public string Png;
            }


            public string GetPng(string name) => files[name].Png;


            public IEnumerator LoadFile(string name, string url, int size = -1)
            {
                if (files.ContainsKey(name) && files[name].Url == url && !string.IsNullOrEmpty(files[name].Png)) yield break;
                files[name] = new FileInfo() { Url = url };
                needed++;
                yield return StartCoroutine(LoadImageCoroutine(name, url, size));

            }

            IEnumerator LoadImageCoroutine(string name, string url, int size = -1)
            {
                using (WWW www = new WWW(url))
                {
                    yield return www;
                    if (string.IsNullOrEmpty(www.error))
                    {
                        var bytes = size == -1 ? www.bytes : Resize(www.bytes, size);


                        var entityId = CommunityEntity.ServerInstance.net.ID;
                        var crc32 = FileStorage.server.Store(bytes, FileStorage.Type.png, entityId).ToString();
                        files[name].Png = crc32;
                    }

                }
                loaded++;
                instance.init = true;

            }

            static byte[] Resize(byte[] bytes, int size)
            {
                Image img = (Bitmap)(new ImageConverter().ConvertFrom(bytes));
                Bitmap cutPiece = new Bitmap(size, size);
                System.Drawing.Graphics graphic = System.Drawing.Graphics.FromImage(cutPiece);
                graphic.DrawImage(img, new Rectangle(0, 0, size, size), 0, 0, img.Width, img.Height, GraphicsUnit.Pixel);
                graphic.Dispose();
                MemoryStream ms = new MemoryStream();
                cutPiece.Save(ms, ImageFormat.Jpeg);
                return ms.ToArray();

            }
        }
        #endregion

        #endregion

        #region LOCALIZATION

        Dictionary<string, string> Messages = new Dictionary<string, string>()
        {
            {"GUITitle", "ВАШИ СОБРАННЫЕ КЕЙСЫ" },
            {"EventTitle", "Название кейса (Рандомный кейс)" },
            {"givePlayerCase", "Вы получили кейс {0} ({1} шт.)" },
            {"isHaveCases", "У вас есть не открытые кейсы!\nЧтобы их открыть наберите команду <color=#fee3b4>/case</color>" },
             {"plInit", "В данный момент кейсы не активны" },
             {"invFull", "У вас переполнен инвентарь!" },
             {"openCases", "Вы открыли кейс {0}, и получили: {1} - {2} шт." },
             {"plNotCases", "У вас нет кейсов" },
             {"Startevent", "Внимание, у Вас есть возможность получить бесплатный кейс! Набери /case и выбери: Gift Case\nДо конца осталось {0}" },
             {"endCases", "У Вас закончились кейсы =(" },
             {"endEventCase", "Извините, в данный момент не проводиться раздача кейсов" },
             {"alreadyCases", "Вы уже получали бонусный кейс. Ожидайте следующей раздачи" },
             {"nogiveCases", "У Вас нету кейсов =(\nКупить вы их сможете в магазине сервера <color=#fee3b4>rust.facepunch.com</color>" },
             {"customText", "Здесь текст!\nНу или информация о том как получить кейсы\nТекст вы сможете изменить в lang" },

        };

        #endregion

    }
}
                  

// --- End of file: RandomCases.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/Notifications.cs ---
// --- Original Local Path: Notifications.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using WebSocketSharp;

namespace Oxide.Plugins
{
	[Info("Notifications", "Sempai#3239", "1.0.1")]
	[Description("Adds an notification system")]
	public class Notifications : RustPlugin
	{
		#region Fields

		[PluginReference] private Plugin ImageLibrary;

		private static Notifications _instance;

		private const string Layer = "Com.Mevent.Notification";

		#endregion

		#region Config

		private static Configuration _config;

		private class Configuration
		{
			[JsonProperty(PropertyName = "Настройка интерфейса | Interface Settings")]
			public IBackground Background = new IBackground
			{
				AnchorMin = "1 0",
				AnchorMax = "1 0",
				Height = 105,
				Width = 300,
				Margin = 5,
				Color = new IColor("#28253C", 98),
				Icon = new InterfacePosition
				{
					AnchorMin = "0 1", AnchorMax = "0 1",
					OffsetMin = "10 -30", OffsetMax = "30 -10"
				},
				Title = new IText
				{
					AnchorMin = "0.5 1", AnchorMax = "0.5 1",
					OffsetMin = "-100 -35", OffsetMax = "100 -5",
					FontSize = 18,
					Font = "robotocondensed-bold.ttf",
					Align = TextAnchor.MiddleCenter,
					Color = new IColor("#FFFFFF", 100)
				},
				Description = new IText
				{
					AnchorMin = "0.5 0", AnchorMax = "0.5 0",
					OffsetMin = "-140 20", OffsetMax = "140 75",
					FontSize = 16,
					Font = "robotocondensed-regular.ttf",
					Align = TextAnchor.MiddleCenter,
					Color = new IColor("#4D4A62", 100)
				},
				Close = new IText
				{
					AnchorMin = "1 1", AnchorMax = "1 1",
					OffsetMin = "-25 -25", OffsetMax = "-5 -5",
					FontSize = 16,
					Font = "robotocondensed-bold.ttf",
					Align = TextAnchor.MiddleCenter,
					Color = new IColor("#4D4A62", 100)
				}
			};
		}

		private class IText : InterfacePosition
		{
			[JsonProperty(PropertyName = "Font Size")]
			public int FontSize;

			[JsonProperty(PropertyName = "Font")] public string Font;

			[JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
			public TextAnchor Align;

			[JsonProperty(PropertyName = "Text Color")]
			public IColor Color;

			public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
				string text = "")
			{
				if (string.IsNullOrEmpty(name))
					name = CuiHelper.GetGuid();

				container.Add(new CuiLabel
				{
					RectTransform =
						{AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax},
					Text =
					{
						Text = text, Align = Align, FontSize = FontSize, Color = Color.Get(),
						Font = Font
					}
				}, parent, name);
			}
		}


		private abstract class IAnchors
		{
			public string AnchorMin;

			public string AnchorMax;
		}

		private class IBackground : IAnchors
		{
			[JsonProperty(PropertyName = "Высота | Height")]
			public float Height;

			[JsonProperty(PropertyName = "Ширина | Width")]
			public float Width;

			[JsonProperty(PropertyName = "Отступ | Margin")]
			public float Margin;

			[JsonProperty(PropertyName = "Цвет | Color")]
			public IColor Color;

			[JsonProperty(PropertyName = "Иконка | Icon")]
			public InterfacePosition Icon;

			[JsonProperty(PropertyName = "Заглавие | Title")]
			public IText Title;

			[JsonProperty(PropertyName = "Описание | Description")]
			public IText Description;

			[JsonProperty(PropertyName = "Закрыть | Close")]
			public IText Close;
		}

		private class InterfacePosition : IAnchors
		{
			public string OffsetMin;

			public string OffsetMax;
		}

		private class IColor
		{
			[JsonProperty(PropertyName = "HEX")] public string HEX;

			[JsonProperty(PropertyName = "Непрозрачность | Opacity (0 - 100)")]
			public float Alpha;

			public string Get()
			{
				if (string.IsNullOrEmpty(HEX)) HEX = "#FFFFFF";

				var str = HEX.Trim('#');
				if (str.Length != 6) throw new Exception(HEX);
				var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
				var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
				var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);

				return $"{(double) r / 255} {(double) g / 255} {(double) b / 255} {Alpha / 100}";
			}

			public IColor(string hex, float alpha)
			{
				HEX = hex;
				Alpha = alpha;
			}
		}

		protected override void LoadConfig()
		{
			base.LoadConfig();
			try
			{
				_config = Config.ReadObject<Configuration>();
				if (_config == null) throw new Exception();
				SaveConfig();
			}
			catch
			{
				PrintError("Your configuration file contains an error. Using default configuration values.");
				LoadDefaultConfig();
			}
		}

		protected override void SaveConfig()
		{
			Config.WriteObject(_config);
		}

		protected override void LoadDefaultConfig()
		{
			_config = new Configuration();
		}

		#endregion

		#region Data

		private PluginData _data;

		private void SaveData()
		{
			Interface.Oxide.DataFileSystem.WriteObject(Name, _data);
		}

		private void LoadData()
		{
			try
			{
				_data = Interface.Oxide.DataFileSystem.ReadObject<PluginData>(Name);
			}
			catch (Exception e)
			{
				PrintError(e.ToString());
			}

			if (_data == null) _data = new PluginData();
		}

		private class PluginData
		{
			[JsonProperty(PropertyName = "Image List", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<string, string> Images = new Dictionary<string, string>
			{
				["warning"] = "https://i.imgur.com/p3tKXJV.png"
			};
		}

		#endregion

		#region Hooks

		private void Init()
		{
			_instance = this;
			LoadData();
		}

		private void OnServerInitialized()
		{
			if (!ImageLibrary)
				PrintWarning("IMAGE LIBRARY IS NOT INSTALLED.");
			else
				foreach (var image in _data.Images)
					ImageLibrary.Call("AddImage", image.Value, image.Key);
		}

		private void Unload()
		{
			foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, Layer);

			SaveData();

			_instance = null;
			_config = null;
		}

		#endregion

		#region Commands

		[ConsoleCommand("UI_Notifications")]
		private void CmdConsoleNotify(ConsoleSystem.Arg arg)
		{
			var player = arg?.Player();
			if (player == null || !arg.HasArgs()) return;

			switch (arg.Args[0])
			{
				case "remove":
				{
					int index;
					if (!arg.HasArgs(2) || !int.TryParse(arg.Args[1], out index)) return;
					
					player.GetComponent<NotifyComponent>()?.RemoveByIndex(index);
					break;
				}
			}
		}

		#endregion

		#region Component

		private class UiNotify
		{
			public readonly string GUID;
			
			public float TimeLeft;

			public readonly string Title;

			public readonly string Description;

			public readonly string Image;

			public readonly CuiElementContainer Container;

			public UiNotify(string guid, float delay, string title, string description, string image, CuiElementContainer cont = null)
			{
				GUID = guid;
				TimeLeft = delay;
				Title = title;
				Description = description;
				Image = image;
				
				Container = cont ?? new CuiElementContainer();
			}
		}

		private class NotifyComponent : FacepunchBehaviour
		{
			private BasePlayer _player;

			private readonly List<UiNotify> _notifies = new List<UiNotify>();

			private const float _timer = 0.1f;

			private void Awake()
			{
				_player = GetComponent<BasePlayer>();

				Invoke(TimeHandle, _timer);
			}

			private void TimeHandle()
			{
				CancelInvoke();
				if (_player == null)
				{
					Kill();
					return;
				}

				var toRemove = new List<UiNotify>();

				_notifies.ForEach(notify =>
				{
					notify.TimeLeft -= _timer;
					if (notify.TimeLeft <= 0) toRemove.Add(notify);
				});

				if (toRemove.Count > 0)
				{
					toRemove.ForEach(notify =>
					{
						Interface.Oxide.CallHook("OnNotifyRemove", _player, notify.GUID);
						_notifies.Remove(notify);
					});

					if (_notifies.Count <= 0)
						Kill();
					else
						RefreshUi();
				}

				if (_notifies.Count > 0)
				{
					Invoke(TimeHandle, _timer);
				}
			}

			private void RefreshUi()
			{
				if (_player == null)
				{
					Kill();
					return;
				}

				var container = new CuiElementContainer();

				container.Add(new CuiPanel
				{
					RectTransform =
					{
						AnchorMin = _config.Background.AnchorMin,
						AnchorMax = _config.Background.AnchorMax
					},
					Image = {Color = "0 0 0 0"}
				}, "Overlay", Layer);

				var ySwitch = _config.Background.Margin;
				for (var i = 0; i < _notifies.Count; i++)
				{
					var notify = _notifies[i];

					container.Add(new CuiPanel
					{
						RectTransform =
						{
							AnchorMin = "0 0",
							AnchorMax = "1 1",
							OffsetMin =
								$"-{_config.Background.Width + _config.Background.Margin} {ySwitch}",
							OffsetMax =
								$"-{_config.Background.Margin} {ySwitch + _config.Background.Height}"
						},
						Image =
						{
							Color = _config.Background.Color.Get()
						}
					}, Layer, Layer + $".Notify.{i}");

					if (!notify.Image.IsNullOrEmpty() && _instance._data.Images.ContainsKey(notify.Image))
					{
						container.Add(new CuiElement
						{
							Parent = Layer + $".Notify.{i}",
							Components =
							{
								new CuiRawImageComponent
								{
									Png = _instance.ImageLibrary.Call<string>("GetImage", notify.Image)
								},
								new CuiRectTransformComponent
								{
									AnchorMin = _config.Background.Icon.AnchorMin,
									AnchorMax = _config.Background.Icon.AnchorMax,
									OffsetMin = _config.Background.Icon.OffsetMin,
									OffsetMax = _config.Background.Icon.OffsetMax
								}
							}
						});}

					_config.Background.Title.Get(ref container, Layer + $".Notify.{i}", null, notify.Title);

					_config.Background.Description.Get(ref container, Layer + $".Notify.{i}", null, notify.Description);

					_config.Background.Close.Get(ref container, Layer + $".Notify.{i}", Layer + $".Notify.{i}.Close",
						"✕");

					container.Add(new CuiButton
					{
						RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1"},
						Text = {Text = ""},
						Button =
						{
							Color = "0 0 0 0",
							Command = $"UI_Notifications remove {_notifies.IndexOf(notify)}"
						}
					}, Layer + $".Notify.{i}.Close");
					
					foreach (var element in notify.Container)
					{
						if (element.Parent.IsNullOrEmpty()) 
							element.Parent = Layer + $".Notify.{i}";
						
						container.Add(element);
					}
					
					ySwitch += _config.Background.Height + _config.Background.Margin;
				}
				
				
				CuiHelper.DestroyUi(_player, Layer);
				CuiHelper.AddUi(_player, container);
			}

			public void RemoveByGuid(string guid)
			{
				_notifies.ToList().ForEach(notify =>
				{
					if (notify.GUID == guid && Interface.Oxide.CallHook("OnNotifyRemove", _player, notify.GUID) == null)
					{
						_notifies.Remove(notify);
					}
				});
				
				RefreshUi();
			}
			
			public void RemoveByIndex(int index)
			{
				if (index < 0 || _notifies.Count <= index) return;

				var notify = _notifies[index];

				if (Interface.Oxide.CallHook("OnNotifyRemove", _player, notify.GUID) == null) 
					_notifies.Remove(notify);

				RefreshUi();
			}

			public void AddNotify(UiNotify notyify)
			{
				_notifies.Add(notyify);

				if (!IsInvoking(TimeHandle))
					Invoke(TimeHandle, _timer);
				
				RefreshUi();
			}

			private void OnDestroy()
			{
				CancelInvoke();

				if (_player != null)
					CuiHelper.DestroyUi(_player, Layer);

				Destroy(this);
			}

			public void Kill()
			{
				Destroy(this);
			}
		}

		#endregion

		#region API

		private void AddImage(string image, string url)
		{
			if (_data.Images.ContainsKey(image))
				_data.Images[image] = url;
			else
				_data.Images.Add(image, url);

			ImageLibrary.Call("AddImage", url, image);
		}

		private void ShowNotify(ulong user, float delay, string title, string description, string image, CuiElementContainer container = null)
		{
			ShowNotify(BasePlayer.FindByID(user), delay, title, description, image, container);
		}

		private void RemoveNotify(BasePlayer player, string guid)
		{
			if (player == null) return;
			
			var notify = player.GetComponent<NotifyComponent>() ?? player.gameObject.AddComponent<NotifyComponent>();
			if (notify == null) return;

			notify.RemoveByGuid(guid);
		}
		
		private string ShowNotify(BasePlayer player, float delay, string title, string description, string image, CuiElementContainer container = null)
		{
			if (player == null) return string.Empty; 
			
			var notify = player.GetComponent<NotifyComponent>() ?? player.gameObject.AddComponent<NotifyComponent>();
			if (notify == null) return string.Empty;

			var uiNotify = new UiNotify(CuiHelper.GetGuid(), delay, title, description, image, container);
			notify.AddNotify(uiNotify);
			return uiNotify.GUID;
		}
		
		#endregion
	}
}

// --- End of file: Notifications.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MachiningTools.cs ---
// --- Original Local Path: MachiningTools.cs ---

using Facepunch;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using System.Collections.Generic;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("MachiningTools", "BlackPlugin.ru", "1.3.1", ResourceId = 89)]
    [Description("Creates tools that would gather refined materials from the resource nodes")]

    class MachiningTools : RustPlugin
    {
        #region Vars‌​﻿​‍​
        private PluginConfig _config;
        private readonly Dictionary<ItemDefinition, ItemDefinition> _itemToCookable = new Dictionary<ItemDefinition, ItemDefinition>();
        #endregion

        #region Config‌​﻿​‍​
        private class Tool
        {
            [JsonProperty("Короткое имя предмета")]
            public string ShortName;
            [JsonProperty("ID скина предмета (Поддерживается Workshop)")]
            public ulong SkinId;
            [JsonProperty("Название предмета (Выводится в описании предмета в инвентаре)")]
            public string Name;
            [JsonProperty("Можно ли ремонтировать предмет")]
            public bool CanRepair;
            [JsonProperty("Можно ли перерабатывать предмет")]
            public bool CanRecycle;
            [JsonProperty("Настройки переработки")]
            public Transmutations Transmutation;
            [JsonProperty("Устанавливать символ огня в углу предмета")]
            public bool? ShoutSetFire;

            private ItemDefinition _info;

            public bool ItemExists()
            {
                _info = ItemManager.FindItemDefinition(ShortName);
                if (_info == null)
                    return false;

                var itemModEntity = _info.GetComponent<ItemModEntity>();
                if (itemModEntity == null)
                    return false;

                var baseMelee = GameManager.server.FindPrefab(itemModEntity.entityPrefab?.resourcePath)?.GetComponent<BaseMelee>();
                return baseMelee != null;
            }

            public Item Create(int amount = 1)
            {
                Item item = ItemManager.Create(_info,amount, SkinId);
                item.name = Name;
                return item;
            }

            public int GetCustomHash()
            {
                unchecked
                {
                    return (string.IsNullOrEmpty(ShortName) ? 0 : ShortName.GetHashCode() * 397) ^ SkinId.GetHashCode();
                }
            }

            public static int GetCustomHash(Item item)
            {
                unchecked
                {
                    if (item == null)
                        return 0;
                    return (string.IsNullOrEmpty(item.info.shortname) ? 0 : item.info.shortname.GetHashCode() * 397) ^ item.skin.GetHashCode();
                }
            }
        }
        private class Transmutations
        {
            [JsonProperty("Перерабатывать дерево в уголь")]
            private bool _wood;
            [JsonProperty("Перерабатывать руду МВК в металл")]
            private bool _hqm;
            [JsonProperty("Перерабатывать металлическую руду в фрагменты")]
            private bool _metal;
            [JsonProperty("Перерабатывать серную руду в серу")]
            private bool _sulfur;
            [JsonProperty("Перерабатывать мясо медведя в жаренное")]
            private bool _bear;
            [JsonProperty("Перерабатывать свинину в жаренную")]
            private bool _boar;
            [JsonProperty("Перерабатывать мясо курицы в жаренное")]
            private bool _chicken;
            [JsonProperty("Перерабатывать мясо лошади в жаренное")]
            private bool _horse;
            [JsonProperty("Перерабатывать мясо волка в жаренное")]
            private bool _wolf;
            [JsonProperty("Перерабатывать мясо оленя в жаренное")]
            private bool _deer;
            [JsonProperty("Перерабатывать человеческое мясо в жаренное")]
            private bool _human;

            #region Default Config‌​﻿​‍​

            public static Transmutations DefaultPick => new Transmutations
            {
                _wood = false,
                _hqm = true,
                _metal = true,
                _sulfur = true,
                _bear = false,
                _boar = false,
                _chicken = false,
                _wolf = false,
                _deer = false,
                _human = false,
                _horse = false
            };

            public static Transmutations DefaultAxe => new Transmutations
            {
                _wood = true,
                _hqm = false,
                _metal = false,
                _sulfur = false,
                _bear = true,
                _boar = true,
                _chicken = true,
                _wolf = true,
                _deer = true,
                _human = true,
                _horse = true
            };

            #endregion
            
            // ReSharper disable StringLiteralTypo
            public bool ShouldCook(Item item)
            {
                switch (item.info.shortname)
                {
                    case "humanmeat.raw":
                        return _human;
                    case "bearmeat":
                        return _bear;
                    case "chicken.raw":
                        return _chicken;
                    case "meat.boar":
                        return _boar;
                    case "deermeat.raw":
                        return _deer;
                    case "wolfmeat.raw":
                        return _wolf;
                    case "sulfur.ore":
                        return _sulfur;
                    case "metal.ore":
                        return _metal;
                    case "wood":
                        return _wood;
                    case "horsemeat.raw":
                        return _horse;
                    case "hq.metal.ore":
                        return _hqm;
                    default:
                        return false;
                }
            }
            // ReSharper restore StringLiteralTypo

        }
        private class PluginConfig
        {
            [JsonProperty("Привилегия для использования команд")]
            public string Permission;
            [JsonProperty("Команда(чат/консоль)")]
            public string Command;
            [JsonProperty("Список инструментов")]
            private Dictionary<string, Tool> _tools;

            [JsonIgnore] 
            private readonly Dictionary<int,KeyValuePair<string, Tool>> _toolsByHash = new Dictionary<int, KeyValuePair<string, Tool>>();
            [JsonIgnore]
            public readonly Dictionary<string, Tool> ToolsByKey = new Dictionary<string, Tool>();

            #region Default Config‌​﻿​‍​

            public static PluginConfig DefaultConfig => new PluginConfig
            {
                Permission = nameof(MachiningTools)+".use",
                Command = "GiveTool",
                _tools = new Dictionary<string, Tool>
                {
                    ["hatchet"] = new Tool
                    {
                        ShortName = "hatchet",
                        Name = "Магический топор",
                        CanRepair = true,
                        CanRecycle = true,
                        SkinId = 901876821,
                        Transmutation = Transmutations.DefaultAxe,
                        ShoutSetFire = false
                    },
                    ["pickaxe"] = new Tool
                    {
                        ShortName = "pickaxe",
                        Name = "Магическая кирка",
                        CanRepair = true,
                        CanRecycle = true,
                        SkinId = 902892485,
                        Transmutation = Transmutations.DefaultPick,
                        ShoutSetFire = false
                    },
                    ["icepick"] = new Tool
                    {
                        ShortName = "icepick.salvaged",
                        Name = "Магический ледоруб",
                        CanRepair = false,
                        CanRecycle = false,
                        SkinId = 804307574,
                        Transmutation = Transmutations.DefaultPick,
                        ShoutSetFire = false
                    },
                    ["axe"] = new Tool
                    {
                        ShortName = "axe.salvaged",
                        Name = "Магический топор",
                        CanRepair = false,
                        CanRecycle = false,
                        SkinId = 2057227617,
                        Transmutation = Transmutations.DefaultAxe,
                        ShoutSetFire = false
                    },
                    ["chainsaw"] = new Tool
                    {
                        ShortName = "chainsaw",
                        Name = "Магическая бензопила",
                        CanRepair = false,
                        CanRecycle = false,
                        SkinId = 2057228026,
                        Transmutation = Transmutations.DefaultAxe,
                        ShoutSetFire = false
                    },
                    ["jackhammer"] = new Tool
                    {
                        ShortName = "jackhammer",
                        Name = "Магический отбойный молоток",
                        CanRepair = false,
                        CanRecycle = false,
                        SkinId = 2057228546,
                        Transmutation = Transmutations.DefaultPick,
                        ShoutSetFire = false
                    }
                }

            };

            #endregion

            public string CheckConfig(RustPlugin plugin)
            {
                List<string> result = Pool.GetList<string>();
                var fireFlagOptionAdded = false;
                foreach (var pair in _tools)
                {
                    //version < 1.2.0
                    var canRecycle = plugin.Config["Список инструментов", pair.Key, "Можно ли перерабатывать пердмет"];
                    if (canRecycle != null)
                    {
                        pair.Value.CanRecycle = plugin.Config.ConvertValue<bool>(canRecycle);
                        result.Add($"Typo in the property of item {pair.Key} fixed.");
                    }

                    if (!pair.Value.ItemExists())
                    {
                        result.Add($"Item {pair.Key} not found in the game or not BaseMelee and would not be used.");
                        continue;
                    }

                    if (pair.Value.ShoutSetFire == null)
                    {
                        fireFlagOptionAdded = true;
                        pair.Value.ShoutSetFire = false;
                    }

                    KeyValuePair<string, Tool> defined;
                    var customHash = pair.Value.GetCustomHash();

                    if(TryGet(customHash, out defined))
                    {
                        result.Add($"Item {pair.Key} is using the same skin that was already defined by {defined.Key} and would not be used.");
                        continue;
                    }
                    ToolsByKey[pair.Key] = pair.Value;
                    _toolsByHash[customHash] = pair;
                }

                if (fireFlagOptionAdded)
                    result.Add("Option to add fire icon to items added to the config");
                
                var res = result.Count > 0 ? string.Join("\n", result) : null;
                Pool.FreeList(ref result);
                return res;
            }

            public bool TryGet(Item item, out Tool tool)
            {
                tool = null;
                var customItemHash = Tool.GetCustomHash(item);
                if (customItemHash == 0)
                    return false;
                KeyValuePair<string, Tool> toolData;
                if (!TryGet(customItemHash, out toolData))
                    return false;
                tool = toolData.Value;
                return true;
            }

            private bool TryGet(int hash, out KeyValuePair<string, Tool> pair) =>
                _toolsByHash.TryGetValue(hash, out pair);
        }
        #endregion

        #region Config handling‌​﻿​‍​

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Благодарим за приобретение плагина на сайте TopPlugin.ru. Если вы приобрели этот плагин на другом ресурсе знайте - это лишает вас гарантированных обновлений!");
            _config = PluginConfig.DefaultConfig;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<PluginConfig>();

            var checkResult = _config.CheckConfig(this);
            if (checkResult == null) 
                return;
            PrintWarning(checkResult);
            SaveConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }
        #endregion

        #region Init and quiting‌​﻿​‍​

        void Init()
        {
            AddCovalenceCommand(_config.Command, "GiveToolsCommand", _config.Permission);
        }

        void OnServerInitialized()
        {
            foreach (var itemDefinition in ItemManager.GetItemDefinitions())
            {
                var cookable = itemDefinition.GetComponent<ItemModCookable>();
                if (cookable)
                    _itemToCookable[itemDefinition] = cookable.becomeOnCooked;
            }
            _itemToCookable.Add(ItemManager.FindItemDefinition("wood"), ItemManager.FindItemDefinition("charcoal"));
        }

        #endregion

        #region Oxide Hooks‌​﻿​‍​

        void OnOvenToggle(BaseOven oven, BasePlayer player)
        {
            if (oven.IsOn() == false)
                return;
            NextFrame(() =>
            {
                oven.inventory.itemList.ForEach(x => OnItemAddedToContainer(null, x));
            });
        }

        void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            Tool tool;
            if (!_config.TryGet(item, out tool))
                return;
            if (tool.ShoutSetFire != true)
                return;
            item.SetFlag(global::Item.Flag.OnFire, true);
            item.MarkDirty();
        }

        object OnItemAction(Item item, string action, BasePlayer player)
        {
            return action != "refill" ? null : OnItemRepair(player, item);
        }
        object OnItemSkinChange(int skin, Item item, RepairBench bench, BasePlayer player)
        {
            if (!IsMachiningToolItem(item))
                return null;
            Reply(player, "Can't change skin");
            return false;
        }

        object OnItemRepair(BasePlayer player, Item item)
        {
            Tool tool;
            if (!_config.TryGet(item, out tool))
                return null;
            if (tool.CanRepair)
                return null;
            Reply(player, "Can't repair");
            return false;
        }

        object CanRecycle(Recycler recycler, Item item)
        {
            Tool tool;
            if (!_config.TryGet(item, out tool))
                return null;
            return tool.CanRecycle ? (object) null : false;
        }

        void OnDispenserGather(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (!player)
                return;
            var activeItem = player?.GetActiveItem();
            if (activeItem == null)
                return;

            Tool tool;
            if (!_config.TryGet(activeItem, out tool))
                return;

            if (tool.Transmutation.ShouldCook(item)) 
                Transmute(item);
        }

        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            ulong playerid = 0;
            OnDispenserGather(dispenser, player, item);
        }

        #endregion

        #region SkinBox

        private object SB_CanReskinItem(BasePlayer player, Item item) => SB_CanAcceptItem(player, item);
        private object SB_CanAcceptItem(BasePlayer player, Item item) => IsMachiningToolItem(item) ? GetMsg("Can't change skin", player.UserIDString) : null;

        #endregion

        #region Localization‌​﻿​‍​

        private void Reply(IPlayer player, string langKey, params object[] args)
        {
            var format = GetMsg(langKey, player.Id);
            player.Reply(args.Length != 0 ? string.Format(format, args) : format);
        }

        private void Reply(BasePlayer player, string langKey, params object[] args)
        {
            var reply = 0;
            var format = GetMsg(langKey, player.UserIDString);
            player.ChatMessage(args.Length != 0 ? string.Format(format, args) : format);
        }

        private string GetMsg(string langKey, string userId = null) => lang.GetMessage(langKey, this, userId);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Syntax"] = "Incorrect syntax! Use: {0} <NameOrID> item [item2] [item3] ...",
                ["No items"] = "The following items don't exist in the config, none of the items were given to the player \"{0}\":\n{1}",
                ["No player"] = "Player \"{0}\" could not be found",
                ["Not on server"] = "Player \"{0}\" is not on the server",
                ["Multiply players"] = "Found multiply players:\n{0}",
                ["Successful"] = "Successfully gave player \"{0}\" tools:\n{1}",
                ["Can't repair"] = "You can not repair this tool!",
                ["Can't change skin"] = "You can not change skin of this tool!"
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Syntax"] = "Неверный синтаксис! Используйте: {0} <ИмяИлиID> предмет [предмет2] [предмет3] ...",
                ["No items"] = "Следующие предметы из списка не найдены, ни один предмет не выдан игроку \"{0}\":\n{1}",
                ["No player"] = "Игрок \"{0}\" не найден",
                ["Not on server"] = "Игрок \"{0}\" не находится на сервере",
                ["Multiply players"] = "Найдено несколько игроков:\n{0}",
                ["Successful"] = "Успешно выдали игроку \"{0}\" предметы:\n{1}",
                ["Can't repair"] = "Данный предмет не подлежит ремонту!",
                ["Can't change skin"] = "Вы не можете изменить скин этого инструмента!"
            }, this, "ru");
        }
        #endregion

        #region Command‌​﻿​‍​
        private void GiveToolsCommand(IPlayer player, string command, string[] args)
        {
            if (args.Length < 2)
            {
                Reply(player, "Syntax", _config.Command);
                return;
            }
            var targets =  covalence.Players.FindPlayers(args[0]).ToList();
            if (targets.Count == 0)
            {
                Reply(player, "No player", args[0]);
                return;
            }
            if (targets.Count > 1)
            {
                Reply(player, "Multiply players", string.Join("\n", targets.Select(p => $"{p.Name} [{p.Id}]")));
                return;
            }

            var iTarget = targets[0];
            var target = iTarget.Object as BasePlayer;
            if (!target || !target.IsAlive())
            {
                Reply(player, "Not on server", $"{iTarget.Name} [{iTarget.Id}]");
                return;
            }

            var configNames = args.Skip(1).ToList();
            var wrongNames = string.Join(", ",configNames.Where(x => !_config.ToolsByKey.ContainsKey(x)));
            if (!string.IsNullOrEmpty(wrongNames))
            {
                Reply(player, "No items", target, wrongNames);
                return;
            }

            foreach (var configName in configNames)
            {
                Tool tool = _config.ToolsByKey[configName];
                target.GiveItem(tool.Create());
            }
            Reply(player, "Successful", target, string.Join(", ", configNames));
        }
        #endregion

        #region API‌​﻿​‍​

        [HookMethod("IsMachiningToolItem")]
        bool IsMachiningToolItem(Item item)
        {
            if (item == null)
                return false;
            Tool tool;
            return _config.TryGet(item, out tool);
        }

        #endregion

        #region Helpers‌​﻿​‍​
        private void Transmute(Item item)
        {
            if (!_itemToCookable.ContainsKey(item.info))
            {
                PrintWarning($"[MachiningTools.Transmute] Unhandled item - {item.info.displayName.english}!\nPlease contact developer: https://vk.com/vlad_00003");
                return;
            }
            item.info = _itemToCookable[item.info];
        }
        #endregion
    }
}
///////////////////////////////////////////////////////////


// --- End of file: MachiningTools.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/StatsSystem.cs ---
// --- Original Local Path: StatsSystem.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;


namespace Oxide.Plugins
{
    [Info("StatsSystem", "Dezz", "1.0.6")]
    class StatsSystem : RustPlugin
    {
        #region Вар
        string Layer = "Stats_UI";

        [PluginReference] Plugin ImageLibrary, RustStore;

        Dictionary<ulong, DBSettings> DB = new Dictionary<ulong, DBSettings>();

        public string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary?.Call("GetImage", shortname, skin);
        #endregion

        #region Класс
        public class DBSettings
        {
            public string DisplayName;
            public int Points = 0;
            public bool IsConnected;
            public int Balance;
            public Dictionary<string, int> Settings = new Dictionary<string, int>()
            {
                ["Kill"] = 0,
                ["Death"] = 0,
                ["Time"] = 0
            };
            public Dictionary<string, int> Res = new Dictionary<string, int>()
            {
                ["wood"] = 0,
                ["stones"] = 0,
                ["metal.ore"] = 0,
                ["sulfur.ore"] = 0,
                ["hq.metal.ore"] = 0,
                ["cloth"] = 0,
                ["leather"] = 0,
                ["fat.animal"] = 0,
                ["cratecostume"] = 0
            };
        }
        #endregion

        #region Конфиг
        Configuration config;
        class Configuration 
        {
            [JsonProperty("ID магазина")] public string ShopID = "";
            [JsonProperty("Secret ключ магазина")] public string Secret = "";
            [JsonProperty("Настройки бонусов")] public List<string> Bonus;
            public static Configuration GetNewConfig() 
            {
                return new Configuration
                {
                    Bonus = new List<string>()
                    {
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    }
                };
            }
        }
        
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config?.Bonus == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning($"Ошибка чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }

            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfig();
        protected override void SaveConfig() => Config.WriteObject(config);
        #endregion

        #region Хуки
        void OnServerInitialized()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile("StatsSystem/PlayerList"))
                DB = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, DBSettings>>("StatsSystem/PlayerList");

            foreach (var check in ResImage)
                ImageLibrary.Call("AddImage", $"https://rustlabs.com/img/items180/{check}.png", check);

            foreach (var check in BasePlayer.activePlayerList)
                OnPlayerConnected(check);

            timer.Every(60f, PlayTime);
        }

        void PlayTime()
        {
            foreach (var check in BasePlayer.activePlayerList)
                DB[check.userID].Settings["Time"] += 1;
        }

        void OnPlayerConnected(BasePlayer player) 
        {
            SteamAvatarAdd(player.UserIDString);
            if (!DB.ContainsKey(player.userID))
                DB.Add(player.userID, new DBSettings());

            DB[player.userID].DisplayName = player.displayName;
            DB[player.userID].IsConnected = true;
        }

        void OnPlayerDisconnected(BasePlayer player) 
        {
            DB[player.userID].IsConnected = false;
            SaveDataBase();
        }
        
        void Unload()
        {
            SaveDataBase();
        }

        void SaveDataBase() 
        {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("StatsSystem/PlayerList", DB); 
        }

        void OnDispenserGather(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null || player == null || item == null) return;
            if (DB[player.userID].Res.ContainsKey(item.info.shortname))
            {
                DB[player.userID].Res[item.info.shortname] += item.amount;
                return;
            }
        }

        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null || player == null || item == null) return;
            if (DB[player.userID].Res.ContainsKey(item.info.shortname))
            {
                DB[player.userID].Res[item.info.shortname] += item.amount;
                DB[player.userID].Points += 7;
                return;
            }
        }

        void OnCollectiblePickup(Item item, BasePlayer player)
        {
            if (item == null || player == null) return;
            if (DB[player.userID].Res.ContainsKey(item.info.shortname))
            {
                DB[player.userID].Res[item.info.shortname] += item.amount;
                return;
            }
        }

        void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (info == null || player == null || player.IsNpc || info.InitiatorPlayer == null || info.InitiatorPlayer.IsNpc) return;
            
            if (info.InitiatorPlayer != null)
            {
                var killer = info.InitiatorPlayer;

                if (killer != player) 
                { 
                    if (DB.ContainsKey(killer.userID))
                    {
                        DB[killer.userID].Settings["Kill"]++;
                        DB[killer.userID].Points += 100;
                    }
                }
                if (DB.ContainsKey(player.userID))
                {
                    DB[player.userID].Settings["Death"]++;
                    DB[player.userID].Points -= 25;
                }
            }
        }

        public ulong lastDamageName;
        void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity is BradleyAPC && info.Initiator is BasePlayer)
                lastDamageName = info.Initiator.ToPlayer().userID;
            if (entity is BaseHelicopter && info.Initiator is BasePlayer)
                lastDamageName = info.Initiator.ToPlayer().userID;
        }  

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;
            BasePlayer player = null;

            if (info.InitiatorPlayer != null) 
                player = info.InitiatorPlayer;

            if (player == null) return;
            
            if (entity is BradleyAPC)
            { 
                player = BasePlayer.FindByID(lastDamageName);
                DB[player.userID].Points += 750;
            }

            if (entity is BaseHelicopter)
            { 
                player = BasePlayer.FindByID(lastDamageName);
                DB[player.userID].Points += 1500;    
            }

            if (entity.ShortPrefabName.Contains("barrel"))
            {
                DB[player.userID].Res["cratecostume"]++;
                DB[player.userID].Points += 2;
            }
        }

        void OnNewSave()
        {
            timer.In(60, () => 
            {
                PrintWarning("Обнаружен вайп, происходит выдача призов за топ и очистка даты!");

                foreach (var check in DB)
                {
                    check.Value.Points = 0;
                    check.Value.IsConnected = false;
                    check.Value.Settings = new Dictionary<string, int>()
                    {
                        ["Kill"] = 0,
                        ["Death"] = 0,
                        ["Time"] = 0
                    };
                    check.Value.Res = new Dictionary<string, int>()
                    {
                        ["wood"] = 0,
                        ["stones"] = 0,
                        ["metal.ore"] = 0,
                        ["sulfur.ore"] = 0,
                        ["hq.metal.ore"] = 0,
                        ["cloth"] = 0,
                        ["leather"] = 0,
                        ["fat.animal"] = 0,
                        ["cratecostume"] = 0
                    };
                }
                int x = 0;
                foreach (var check in DB.Take(10))
                {
                    check.Value.Balance += int.Parse(config.Bonus.ElementAt(x));
                    x++;
                }

                SaveDataBase();
            });
        }
        #endregion

        #region Вывод коинов
        void ApiChangeGameStoresBalance(ulong userId, int amount)
        {
            var player = BasePlayer.FindByID(userId);
            ExecuteApiRequest(new Dictionary<string, string>()
            {
                { "action", "moneys" },
                { "type", "plus" },
                { "DisplayName", player.displayName.ToUpper() },
                { "steam_id", userId.ToString() },
                { "amount", amount.ToString() },
                { "mess", "Спасибо что играете у нас!"}
            });
        }

        void APIChangeUserBalance(ulong steam, int balanceChange)
        {
            if (RustStore)
            {
                plugins.Find("RustStore").CallHook("APIChangeUserBalance", steam, balanceChange, new Action<string>((result) =>
                {
                    if (result == "SUCCESS")
                    {
                        LogToFile("LogMoscow", $"СтимID: {steam}\nУспешно получил {balanceChange} рублей на игровой счет!\n", this);
                        PrintWarning($"Игрок {steam} успешно получил {balanceChange} рублей");
                    }
                    else
                    {
                        PrintError($"Ошибка пополнения баланса для {steam}!");
                        PrintError($"Причина: {result}");
                        LogToFile("logError", $"Баланс игрока {steam} не был изменен, ошибка: {result}", this);
                    }
                }));
            }
        }

        void ExecuteApiRequest(Dictionary<string, string> args)
        {
            string url = $"https://gamestores.ru/api/?shop_id={config.ShopID}&secret={config.Secret}" + $"{string.Join("", args.Select(arg => $"&{arg.Key}={arg.Value}").ToArray())}";
            LogToFile("LogGS", $"Ник: {args["DisplayName"]}\nСтимID: {args["steam_id"]}\nУспешно получил {args["amount"]} рублей на игровой счет!\n", this);
            webrequest.EnqueueGet(url, (i, s) =>
            {
                if (i != 200)
                {
                    PrintError($"Ошибка соединения с сайтом!");
                }
                else
                {
                    JObject jObject = JObject.Parse(s);
                    if (jObject["result"].ToString() == "fail")
                    {
                        PrintError($"Ошибка пополнения баланса для {args["steam_id"]}!");
                        PrintError($"Причина: {jObject["message"].ToString()}");
                        LogToFile("logError", $"Баланс игрока {args["steam_id"]} не был изменен, ошибка: {jObject["message"].ToString()}", this);
                    }
                    else
                    {
                        PrintWarning($"Игрок {args["steam_id"]} успешно получил {args["amount"]} рублей");
                    }
                }
            }, this);
        }
        #endregion

        #region Картинки ресурсов
        List<string> ResImage = new List<string>()
        {
            "wood",
            "stones",
            "metal.ore",
            "sulfur.ore",
            "hq.metal.ore",
            "cloth",
            "leather",
            "fat.animal",
            "cratecostume"
        };
        #endregion

        #region Команды
        [ChatCommand("stat")]
        void ChatTop(BasePlayer player) 
        {
            StatsUI(player); 
        }

        [ConsoleCommand("stats")]
        void ConsoleSkip(ConsoleSystem.Arg args)
        {
            var player = args.Player();

            if (player != null && args.HasArgs(1))
            {
                if (args.Args[0] == "profile")
                {
                    ProfileUI(player, ulong.Parse(args.Args[1]), int.Parse(args.Args[2]));
                }
                if (args.Args[0] == "back")
                {
                    StatsUI(player);
                }
                if (args.Args[0] == "skip")
                {
                    StatsUI(player, int.Parse(args.Args[1]));
                }
                if (args.Args[0] == "take")
                {
                    if (DB[player.userID].Balance == 0)
                    {
                        SendReply(player, "Ваш баланс на данный момент пуст!");
                        return;
                    }
                    if (string.IsNullOrEmpty(config.Secret)) APIChangeUserBalance(player.userID, DB[player.userID].Balance);
                    else ApiChangeGameStoresBalance(player.userID, DB[player.userID].Balance);

                    SendReply(player, $"Вы успешно вывели {DB[player.userID].Balance} рублей, на игровой магазин!");
                    DB[player.userID].Balance -= DB[player.userID].Balance;
                    CuiHelper.DestroyUi(player, "MainStats");
                }
            }
        }
        #endregion

        #region Интерфейс
        void StatsUI(BasePlayer player, int page = 0)
        {
            CuiHelper.DestroyUi(player, "MainStats");
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", "MainStats");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.9", Material = "assets/icons/greyout.mat" }
            }, "MainStats");            

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.31 0.2", AnchorMax = "0.69 0.8", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0" }
            }, "MainStats", Layer);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.23", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Image = { Color = "0.36 0.34 0.32 0.75", Material = "assets/icons/greyout.mat" }
            }, Layer, "Top");

            /*container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.003 0.94", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Button = { Color = "0.56 0.87 0.56 0" },
                Text = { Text = $"        #            имя игрока                                    награда                        очки", Color = "1 1 1 1", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");*/

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.01 0.95", AnchorMax = $"1 1", OffsetMin = "2 1", OffsetMax = "-2 -1" },
                Image = { Color = "0.5 0.5 0.5 0" }
            }, "Top", "TTT");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.0 -0.55", AnchorMax = $"0.07 1.215", OffsetMax = "0 0" },
                Button = { Color = "0.56 0.87 0.56 0" },
                Text = { Text = $"#", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "TTT");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.115 -0.55", AnchorMax = $"0.4 1.215", OffsetMax = "0 0" },
                Button = { Color = "0.56 0.87 0.56 0" },
                Text = { Text = $"ИМЯ ИГРОКА", Color = "1 1 1 1", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "TTT");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.4 -0.55", AnchorMax = $"0.565 1.215", OffsetMax = "0 0" },
                Button = { Color = "0.56 0.87 0.56 0" },
                Text = { Text = $"НАГРАДА", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "TTT");   

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.63 -0.55", AnchorMax = $"1.075 1.215", OffsetMax = "0 0" },
                Button = { Color = "0.56 0.87 0.56 0" },
                Text = { Text = $"ОЧКИ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "TTT");                        

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.8 0.02", AnchorMax = $"0.987 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", Close = "MainStats" },
                Text = { Text = $"ЗАКРЫТЬ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.38 0.02", AnchorMax = $"0.58 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.38 0.71 0.12 0.7", Material = "assets/icons/greyout.mat", Command = $"stats profile {player.userID} 0" },
                Text = { Text = $"МОЙ ПРОФИЛЬ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.1525 0.02", AnchorMax = $"0.2225 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", Command = DB.Count() > (page + 1) * 10 ? $"stats skip {page + 1}" : "" },
                Text = { Text = $">", Color = DB.Count() > (page + 1) * 10 ? "1 1 1 1" : "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.0825 0.02", AnchorMax = $"0.1525 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.3294118 0.3294118 0.3294118 1", Material = "assets/icons/greyout.mat", Command = "" },
                Text = { Text = $"{page + 1}", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.0125 0.02", AnchorMax = $"0.0825 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.44 0.42 0.77", Material = "assets/icons/greyout.mat", Command = page >= 1 ? $"stats skip {page - 1}" : "" },
                Text = { Text = $"<", Color = page >= 1 ? "1 1 1 1" : "1 1 1 0.5", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "Top");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 0.22", OffsetMax = "0 0" },
                Image = { Color = "0.36 0.34 0.32 0.75", Material = "assets/icons/greyout.mat", }
            }, Layer, "InfoTop");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.01 0.01", AnchorMax = $"0.99 0.99", OffsetMax = "0 0" },
                Text = { Text = "Очки даются:\nУбийство +100, добыча руды +7, разрушение бочки +2, уничтожение танка +750\nОчки отнимаются:\nСмерть и самоубийство -25\nНаграды выдаются после вайпа на сервере!", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, "InfoTop");

            float width1 = 0.785f, height1 = 0.063f, startxBox1 = 0.01f, startyBox1 = 0.95f - height1, xmin1 = startxBox1, ymin1 = startyBox1;
            if (page == 0)
            {
                for (int x = 0; x < DB.Take(10).Count(); x++)
                {
                    container.Add(new CuiPanel
                    {
                        RectTransform = { AnchorMin = $"{xmin1} {ymin1}", AnchorMax = $"{xmin1 + width1} {ymin1 + height1 * 1}", OffsetMin = "2 1", OffsetMax = "-2 -1" },
                        Image = { Color = "0 0 0 0" }
                     }, Layer, "PlayerTop");

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = $"0.46 0", AnchorMax = $"0.75 1", OffsetMax = "0 0" },
                        Text = { Text = $"{config.Bonus.ElementAt(x)}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                    }, "PlayerTop");

                    xmin1 += width1;
                    if (xmin1 + width1 >= 1)
                    {
                        xmin1 = startxBox1;
                        ymin1 -= height1;
                    }
                }
            }            

            float width = 0.98f, height = 0.063f, startxBox = 0.01f, startyBox = 0.95f - height, xmin = startxBox, ymin = startyBox, z = 0;
            var items = from item in DB orderby item.Value.Points descending select item;
            foreach (var check in items.Skip(page * 10).Take(10))
            {
                z++;
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin} {ymin}", AnchorMax = $"{xmin + width} {ymin + height * 1}", OffsetMin = "2 1", OffsetMax = "-2 -1" },
                    Image = { Color = "0 0 0 0" }
                 }, Layer, "PlayerTop");

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Image = { Color = "1 1 1 0.1" }
                }, "PlayerTop");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.08 1", OffsetMax = "0 0" },
                    Text = { Text = $"{z + page * 10}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                }, "PlayerTop");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0.115 0", AnchorMax = $"0.425 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Value.DisplayName}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                }, "PlayerTop");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0.4 0", AnchorMax = $"0.575 1", OffsetMax = "0 0" },
                    Text = { Text = $"", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                }, "PlayerTop");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0.63 0", AnchorMax = $"1.1 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Value.Points}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                }, "PlayerTop");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0", Command = $"stats profile {check.Key} {z + page * 10}" },
                    Text = { Text = $"", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
                }, "PlayerTop");

                xmin += width;
                if (xmin + width >= 1)
                {
                    xmin = startxBox;
                    ymin -= height;
                }
            }

            CuiHelper.AddUi(player, container);
        }
        [ChatCommand("stats")]
        void cmdProfileUis(BasePlayer player)
        {
            ProfileUI(player, player.userID, 0);
        }

        void ProfileUI(BasePlayer player, ulong SteamID, int z)
        {
            CuiHelper.DestroyUi(player, "MainStats");
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", "MainStats");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.9", Material = "assets/icons/greyout.mat" }
            }, "MainStats");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.31 0.3", AnchorMax = "0.69 0.75", OffsetMax = "0 0" },
                Image = { Color = "0.36 0.34 0.32 0.75", Material = "assets/icons/greyout.mat" }
            }, "MainStats", Layer);

            var target = DB[SteamID];
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.01 0.9", AnchorMax = $"0.99 0.99", OffsetMax = "0 0" },
                Text = { Text = $"<b><size=20>{target.DisplayName.ToUpper()}</size></b>", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, Layer);

            /*container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.51 0.131", AnchorMax = $"0.518 0.777", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer);*/

            if (SteamID == player.userID)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"0.01 0.02", AnchorMax = $"0.258 0.11", OffsetMax = "0 0" },
                    Image = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", }
                }, Layer, "Balance");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Text = { Text = $"Ваш баланс: {target.Balance}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
                }, "Balance");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"0.265 0.02", AnchorMax = $"0.415 0.11", OffsetMax = "0 0" },
                    Button = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", Command = "stats take" },
                    Text = { Text = $"ВЫВЕСТИ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
                }, Layer);
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.682 0.02", AnchorMax = $"0.83 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", Command = "stats back" },
                Text = { Text = $"НАЗАД", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = $"0.837 0.02", AnchorMax = $"0.987 0.11", OffsetMax = "0 0" },
                Button = { Color = "0.46 0.44 0.42 1.00", Material = "assets/icons/greyout.mat", Close = "MainStats" },
                Text = { Text = $"ЗАКРЫТЬ", Color = "1 1 1 1", Align = TextAnchor.MiddleCenter, FontSize = 12, Font = "robotocondensed-regular.ttf" }
            }, Layer);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.015 0.41", AnchorMax = $"0.3 0.81", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer, "Avatar");

            container.Add(new CuiElement
            {
                Parent = "Avatar",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", SteamID.ToString()) },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "7 7", OffsetMax = "-7 -7" }
                }
            });

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.35 0.76", AnchorMax = $"0.95 0.81", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer, "Place");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0.03 0", AnchorMax = $"0.95 1", OffsetMax = "0 0" },
                Text = { Text = $"МЕСТО В ТОПЕ:", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Place");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.97 1", OffsetMax = "0 0" },
                Text = { Text = $"{z}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Place");               
                      

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.35 0.7", AnchorMax = $"0.95 0.75", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer, "Points");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0.03 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Text = { Text = $"ОЧКОВ:", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Points");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.97 1", OffsetMax = "0 0" },
                Text = { Text = $"{target.Points}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Points");            

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.35 0.64", AnchorMax = $"0.95 0.69", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer, "Status");

            var status = target.IsConnected == true ? "ОНЛАЙН" : "ОФЛАЙН";
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0.03 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Text = { Text = $"СТАТУС:", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Status");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.985 1", OffsetMax = "0 0" },
                Text = { Text = $"{status}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "Status");

            float width1 = 0.6075f, height1 = 0.06f, startxBox1 = 0.3465f, startyBox1 = 0.638f - height1, xmin1 = startxBox1, ymin1 = startyBox1;
            foreach (var check in target.Settings)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin1} {ymin1}", AnchorMax = $"{xmin1 + width1} {ymin1 + height1 * 1}", OffsetMin = "2 2", OffsetMax = "-2 -2" },
                    Image = { Color = "1 1 1 0.1" }
                }, Layer, "Count");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0.03 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Key.Replace("Kill", "УБИЙСТВ").Replace("Death", "СМЕРТЕЙ").Replace("Time", "АКТИВНОСТЬ")}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" }
                }, "Count");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.97 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Value}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" }
                }, "Count");

                xmin1 += width1;
                if (xmin1 + width1 >= 0)
                {
                    xmin1 = startxBox1;
                    ymin1 -= height1;
                }
            }

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = $"0.35 0.405", AnchorMax = $"0.95 0.455", OffsetMax = "0 0" },
                Image = { Color = "1 1 1 0.1" }
            }, Layer, "KD");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0.03 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Text = { Text = $"К/Д", Color = "1 1 1 0.8", Align = TextAnchor.MiddleLeft, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "KD");

            var kd = target.Settings["Death"] == 0 ? target.Settings["Kill"] : (float)Math.Round(((float)target.Settings["Kill"]) / target.Settings["Death"], 1);
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.97 1", OffsetMax = "0 0" },
                Text = { Text = $"{kd}", Color = "1 1 1 0.8", Align = TextAnchor.MiddleRight, FontSize = 10, Font = "robotocondensed-regular.ttf" }
            }, "KD");

            float width = 0.11f, height = 0.18f, startxBox = 0.005f, startyBox = 0.35f - height, xmin = startxBox, ymin = startyBox;
            foreach (var check in target.Res)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{xmin} {ymin}", AnchorMax = $"{xmin + width} {ymin + height * 1}", OffsetMin = "2 2", OffsetMax = "-2 -2" },
                    Image = { Color = "1 1 1 0.1" }
                }, Layer, "Images");

                container.Add(new CuiElement
                {
                    Parent = "Images",
                    Components =
                    {
                        new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", check.Key) },
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "5 5", OffsetMax = "-5 -5" }
                    }
                });

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.97 1", OffsetMax = "0 0" },
                    Text = { Text = $"{check.Value}", Color = "1 1 1 0.8", Align = TextAnchor.LowerRight, FontSize = 14, Font = "robotocondensed-regular.ttf" }
                }, "Images");

                xmin += width;
                if (xmin + width >= 1)
                {
                    xmin = startxBox;
                    ymin -= height;
                }
            }

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Подгрузка аватарок
        void SteamAvatarAdd(string userid)
        {
            string url = "http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=B23DC0D84302CF828713C73F35A30006&" + "steamids=" + userid;
            webrequest.Enqueue(url, null, (code, response) =>
            {
                if (code == 200)
                {
                    string Avatar = (string)JObject.Parse(response)["response"]?["players"]?[0]?["avatarfull"];
                    ImageLibrary.Call("AddImage", Avatar, userid);
                }
            }, this);
        }
        #endregion
    }
}

// --- End of file: StatsSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XpBooster.cs ---
// --- Original Local Path: XpBooster.cs ---

using Rust.Xp;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("XpBooster", "Wulf/lukespragg", "0.6.0", ResourceId = 2001)]
    [Description("Multiplies the base XP players earn per source")]

    class XpBooster : RustPlugin
    {
        #region Initialization

        [PluginReference] Plugin AdminRadar;
        [PluginReference] Plugin Godmode;

        bool usePermissions;

        protected override void LoadDefaultConfig()
        {
            foreach (var def in Definitions.All) if (!def.Name.Contains("Cheat")) Config[def.Name] = GetConfig(def.Name, 1.0);
            Config["UsePermissions"] = usePermissions = GetConfig("UsePermissions", false);
            SaveConfig();
        }

        void Init()
        {
            LoadDefaultConfig();
            foreach (var def in Definitions.All)
                if (!def.Name.Contains("Cheat")) permission.RegisterPermission($"{Title}.{def.Name}".ToLower(), this);
        }

        #endregion

        #region XP Boosting

        object OnXpEarn(ulong steamId, double amount, string source)
        {
            if (string.IsNullOrEmpty(source) || source.Contains("Cheat")) return null;

            var id = steamId.ToString();
            if (Godmode && (bool)Godmode.Call("IsGod", id)) return null;
            if (AdminRadar && (bool)AdminRadar.Call("IsRadar", id)) return null;

            if (usePermissions && !permission.UserHasPermission(id, $"{Title}.{source}".ToLower())) return null;

            #if DEBUG
            PrintWarning($"Original amount: {amount}, Boosted amount: {amount * (double)Config[source]}");
            #endif

            return (float)(amount * (double)Config[source]);
        }

        #endregion

        #region Helpers

        T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)System.Convert.ChangeType(Config[name], typeof (T));

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        #endregion
    }
}


// --- End of file: XpBooster.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/GunGame.cs ---
// --- Original Local Path: GunGame.cs ---

// Requires: EventManager

using System.Collections.Generic;
using System.Linq;
using Oxide.Game.Rust.Cui;
using UnityEngine;

using Rust;

namespace Oxide.Plugins
{
    [Info("Gun Game", "k1lly0u", "0.3.52", ResourceId = 1485)]
    class GunGame : RustPlugin
    {
        [PluginReference]
        EventManager EventManager;

        private bool useThisEventGG;
        private bool GGStarted;

        private List<GunGamePlayer> GunGamePlayers = new List<GunGamePlayer>();
        private ConfigData configData;
        private Dictionary<string, ItemDefinition> _itemsDict;

        class ConfigData
        {
            public string EventName { get; set; }
            public string SpawnFile { get; set; }
            public string ZoneName { get; set; }
            public string ArmourType { get; set; }
            public float StartHealth { get; set; }
            public bool UseMachete { get; set; }
            public bool UseArmour { get; set; }
            public bool UseMeds { get; set; }
            public bool CloseEventAtStart { get; set; }
            public int RankLimit { get; set; }
            public int TokensPerKill { get; set; }
            public int TokensOnWin { get; set; }
            public Gear DowngradeWeapon { get; set; }
            public List<Gear> Meds { get; set; }
            public List<Gear> PlayerGear { get; set; }
            public Dictionary<int, RankItem> Weapons { get; set; }
        }
        class GunGamePlayer : MonoBehaviour
        {
            public BasePlayer player;
            public int kills;
            public int level;

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                enabled = false;
                kills = 0;
                level = 1;
            }
        }

        internal class RankItem
        {
            public string name;
            public string shortname;
            public int skin;
            public string container;
            public int amount;
            public int ammo;
            public string ammoType;
            public string[] contents = new string[0];
        }
        class Gear
        {
            public string name;
            public string shortname;
            public int skin;
            public int amount;
            public string container;
        }
        //////////////////////////////////////////////////////////////////////////////////////
        // Oxide Hooks ///////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        void OnServerInitialized()
        {
            useThisEventGG = false;
            GGStarted = false;
            if (EventManager == null)
            {
                Puts("Event plugin doesn't exist");
                return;
            }
            LoadVariables();
            RegisterGame();
        }
        void RegisterGame()
        {
            var success = EventManager.RegisterEventGame(configData.EventName);
            if (success == null)
            {
                Puts("Event plugin doesn't exist");
                return;
            }
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Event GunGame: Creating a new config file");
            var config = new ConfigData
            {
                EventName = "GunGame",
                ZoneName = "GunGame",
                SpawnFile = "ggspawnfile",
                ArmourType = "metal.plate.torso",
                StartHealth = 100,
                UseMachete = true,
                UseArmour = true,
                UseMeds = true,
                CloseEventAtStart = true,
                RankLimit = 15,
                TokensPerKill = 1,
                TokensOnWin = 5,
                DowngradeWeapon = new Gear
                {
                    name = "Machete",
                    shortname = "machete",
                    amount = 1,
                    container = "belt",
                    skin = 0
                },
                Meds = new List<Gear>
                {
                    {
                        new Gear
                        {
                            name = "Medical Syringe",
                            shortname = "syringe.medical",
                            amount = 2,
                            container = "belt"
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Bandage",
                            shortname = "bandage",
                            amount = 1,
                            container = "belt"
                        }
                    }
                },
                PlayerGear = new List<Gear>
                {
                    {
                        new Gear
                        {
                            name = "Boots",
                            shortname = "shoes.boots",
                            container = "wear",
                            skin = 0,
                            amount = 1
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Hide Pants",
                            shortname = "attire.hide.pants",
                            container = "wear",
                            skin = 0,
                            amount = 1
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Bone Armour Pants",
                            shortname = "bone.armor.pants",
                            container = "wear",
                            skin = 0,
                            amount = 1
                        }
                    },
                    {
                        new Gear
                        {
                            name = "Riot Helmet",
                            shortname = "riot.helmet",
                            container = "wear",
                            skin = 0,
                            amount = 1
                        }
                    }
                },
                Weapons = new Dictionary<int, RankItem>
                {
                    {
                        1, new RankItem
                        {
                            name = "AssaultRifle",
                            shortname = "rifle.ak",
                            container = "belt",
                            ammoType = "ammo.rifle",
                            ammo = 120,
                            amount = 1,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        2, new RankItem
                        {
                            name = "Thompson",
                            shortname = "smg.thompson",
                            container = "belt",
                            ammoType = "ammo.pistol",
                            amount = 1,
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        3, new RankItem
                        {
                            name = "PumpShotgun",
                            shortname = "shotgun.pump",
                            container = "belt",
                            ammoType = "ammo.shotgun",
                            amount = 1,
                            ammo = 60,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        4, new RankItem
                        {
                            name = "SMG",
                            shortname = "smg.2",
                            container = "belt",
                            ammoType = "ammo.pistol",
                            amount = 1,
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        5, new RankItem
                        {
                            name = "BoltAction",
                            shortname = "rifle.bolt",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.rifle",
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        6, new RankItem
                        {
                            name = "SemiAutoRifle",
                            shortname = "rifle.semiauto",
                            container = "belt",
                            ammoType = "ammo.rifle",
                            amount = 1,
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        7, new RankItem
                        {
                            name = "SemiAutoPistol",
                            shortname = "pistol.semiauto",
                            container = "belt",
                            ammoType = "ammo.pistol",
                            amount = 1,
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        8, new RankItem
                        {
                            name = "Revolver",
                            shortname = "pistol.revolver",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.pistol",
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        9, new RankItem
                        {
                            name = "WaterpipeShotgun",
                            shortname = "shotgun.waterpipe",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.handmade.shell",
                            ammo = 40,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        10, new RankItem
                        {
                            name = "HuntingBow",
                            shortname = "bow.hunting",
                            container = "belt",
                            amount = 1,
                            ammoType = "arrow.hv",
                            ammo = 40
                        }
                    },
                    {
                        11, new RankItem
                        {
                            name = "EokaPistol",
                            shortname = "pistol.eoka",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.handmade.shell",
                            ammo = 40
                        }
                    },
                    {
                        12, new RankItem
                        {
                            name = "StoneSpear",
                            shortname = "spear.stone",
                            container = "belt",
                            amount = 2
                        }
                    },
                    {
                        13, new RankItem
                        {
                            name = "SalvagedCleaver",
                            shortname = "salvaged.cleaver",
                            container = "belt",
                            amount = 2
                        }
                    },
                    {
                        14, new RankItem
                        {
                            name = "Mace",
                            shortname = "mace",
                            container = "belt",
                            amount = 2
                        }
                    },
                    {
                        15, new RankItem
                        {
                            name = "BoneClub",
                            shortname = "bone.club",
                            container = "belt",
                            amount = 2
                        }
                    },
                    {
                        16, new RankItem
                        {
                            name = "BoneKnife",
                            shortname = "knife.bone",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        17, new RankItem
                        {
                            name = "LongSword",
                            shortname = "longsword",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        18, new RankItem
                        {
                            name = "SalvagedSword",
                            shortname = "salvaged.sword",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        19, new RankItem
                        {
                            name = "SalvagedIcepick",
                            shortname = "icepick.salvaged",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        20, new RankItem
                        {
                            name = "SalvagedAxe",
                            shortname = "axe.salvaged",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        21, new RankItem
                        {
                            name = "Pickaxe",
                            shortname = "pickaxe",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        22, new RankItem
                        {
                            name = "Hatchet",
                            shortname = "hatchet",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        23, new RankItem
                        {
                            name = "Rock",
                            shortname = "rock",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        24, new RankItem
                        {
                            name = "Torch",
                            shortname = "torch",
                            container = "belt",
                            amount = 1
                        }
                    },
                    {
                        25, new RankItem
                        {
                            name = "Crossbow",
                            shortname = "crossbow",
                            container = "belt",
                            amount = 1,
                            ammoType = "arrow.hv",
                            ammo = 40,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        26, new RankItem
                        {
                            name = "M249",
                            shortname = "lmg.m249",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.rifle",
                            ammo = 120,
                            contents = new [] {"weapon.mod.holosight"}
                        }
                    },
                    {
                        27, new RankItem
                        {
                            name = "TimedExplosive",
                            shortname = "explosive.timed",
                            container = "belt",
                            amount = 20
                        }
                    },
                    {
                        28, new RankItem
                        {
                            name = "SurveyCharge",
                            shortname = "surveycharge",
                            container = "belt",
                            amount = 20
                        }
                    },
                    {
                        29, new RankItem
                        {
                            name = "F1Grenade",
                            shortname = "grenade.f1",
                            container = "belt",
                            amount = 20
                        }
                    },
                    {
                        30, new RankItem
                        {
                            name = "RocketLauncher",
                            shortname = "rocket.launcher",
                            container = "belt",
                            amount = 1,
                            ammoType = "ammo.rocket.basic",
                            ammo = 20
                        }
                    }
                }
            };
            SaveConfig(config);
        }
        void SaveConfig(ConfigData config)
        {
            Config.WriteObject(config, true);
        }
        void Unload()
        {           
            foreach (var player in BasePlayer.activePlayerList) DestroyUI(player);               
            if (useThisEventGG && GGStarted)            
                EventManager.EndEvent();
            DestroyEvent();              
            
            var objects = UnityEngine.Object.FindObjectsOfType<GunGamePlayer>();
            if (objects != null)
                foreach (var gameObj in objects)
                    UnityEngine.Object.Destroy(gameObj);
        }
        private void DestroyEvent()
        {
            GGStarted = false;
            foreach (var player in GunGamePlayers)            
                UnityEngine.Object.Destroy(player);            
            GunGamePlayers.Clear();
        }

        //////////////////////////////////////////////////////////////////////////////////////
        // Configuration /////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        Dictionary<string, object> EventZoneConfig;

        string EventMessageWon = "<color=orange>Gungame</color> : {0} WON THE GUNGAME";
        string EventMessageNoMorePlayers = "<color=orange>Gungame</color> : The Gun Game Arena has no more players, auto-closing.";
        string GGMessageKill = "<color=orange>Gungame</color> : {3} was killed by {0}, who is now rank {2} with {1} kill(s)";
        string EventMessageOpenBroadcast = "<color=orange>Gungame</color> : In GunGame, every player you kill will advance you 1 rank, each rank has a new weapon. But beware, if you are killed by a downgrade weapon you will lose a rank!";

        private void LoadVariables()
        {
            _itemsDict = ItemManager.itemList.ToDictionary(i => i.shortname);
            LoadConfigVariables();
            SaveConfig();
        }
        private void LoadConfigVariables()
        {
            configData = Config.ReadObject<ConfigData>();
        }
       
        class LeaderBoard
        {
            public string Name;
            public int Kills;
        }
        #region UI Scoreboard
        private List<GunGamePlayer> SortScores()
        {
            List<GunGamePlayer> sortedScores;

            if (EventManager.EventMode == EventManager.GameMode.Battlefield)
                sortedScores = GunGamePlayers.OrderByDescending(pair => pair.kills).ToList();
            else sortedScores = GunGamePlayers.OrderByDescending(pair => pair.level).ToList();               
            
            return sortedScores;
        }
        private string PlayerMsg(int key, GunGamePlayer player)
        {
            var score = player.level;
            if (EventManager.EventMode == EventManager.GameMode.Battlefield)
                score = player.kills;

            return $"|  <color=#FF8C00>{key}</color>.  <color=#FF8C00>{player.player.displayName}</color> <color=#939393>--</color> <color=#FF8C00>{score}</color>  |";
        }
        private CuiElementContainer CreateScoreboard(BasePlayer player)
        {
            DestroyUI(player);
            string panelName = "GGScoreBoard";
            var element = EventManager.UI.CreateElementContainer(panelName, "0.3 0.3 0.3 0.6", "0.1 0.95", "0.9 1", false);

            var scores = SortScores();
            var index = scores.FindIndex(a => a.player == player);

            var scoreMessage = PlayerMsg(index + 1, scores[index]);
            int amount = 3;
            for (int i = 0; i < amount; i++)
            {
                if (scores.Count >= i + 1)
                {
                    if (scores[i].player == player)
                    {
                        amount++;
                        continue;
                    }
                    scoreMessage = scoreMessage + PlayerMsg(i + 1, scores[i]);
                }
            }
            EventManager.UI.CreateLabel(ref element, panelName, "", scoreMessage, 18, "0 0", "1 1");
            return element;
        }
        private void RefreshSB()
        {
            foreach (var entry in GunGamePlayers)
            {
                DestroyUI(entry.player);
                AddUI(entry.player);
            }
        }
        private void AddUI(BasePlayer player) => CuiHelper.AddUi(player, CreateScoreboard(player));
        private void DestroyUI(BasePlayer player) => CuiHelper.DestroyUi(player, "GGScoreBoard");
        #endregion
        //////////////////////////////////////////////////////////////////////////////////////
        // Event Manager Hooks ///////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        void OnSelectEventGamePost(string name)
        {
            if (configData.EventName == name)
            {
                useThisEventGG = true;
                if (!string.IsNullOrEmpty(configData.SpawnFile))
                    EventManager.SelectSpawnfile(configData.SpawnFile);                
            }
            else
                useThisEventGG = false;
        }
        void OnEventPlayerSpawn(BasePlayer player)
        {
            if (useThisEventGG && GGStarted)
            {
                player.health = configData.StartHealth;
                if (!player.GetComponent<GunGamePlayer>()) GunGamePlayers.Add(player.gameObject.AddComponent<GunGamePlayer>());
                stripGive(player);
                AddUI(player);
            }
        }
        object OnSelectSpawnFile(string name)
        {
            if (useThisEventGG)
            {
                configData.SpawnFile = name;
                return true;
            }
            return null;
        }
        void OnSelectEventZone(MonoBehaviour monoplayer, string radius)
        {
            if (useThisEventGG)
            {
                return;
            }
        }
        void OnPostZoneCreate(string name)
        {
            if (name == configData.EventName)
            {
                return;
            }
        }
        object CanEventOpen()
        {
            if (useThisEventGG)
            {

            }
            return null;
        }
        object CanEventStart()
        {
            return null;
        }
        object OnEventOpenPost()
        {
            if (useThisEventGG)
            {
                EventManager.BroadcastEvent(EventMessageOpenBroadcast);
                EventManager.UseClassSelection = false;
                if (configData.RankLimit > configData.Weapons.Count)
                {
                    configData.RankLimit = configData.Weapons.Count;
                    SaveConfig(configData);
                }
            }
            return null;
        }
        object OnEventCancel()
        {
            if (useThisEventGG && GGStarted)
                CheckScores(null, false, true);
            return null;
        }
        object OnEventClosePost()
        {
            return null;
        }
        object OnEventEndPre()
        {
            if (useThisEventGG)
            {
                //CheckScores(null, false, true);
                DestroyEvent();
            }
            return null;
        }
        object OnEventEndPost()
        {
            var objPlayers = UnityEngine.Object.FindObjectsOfType<GunGamePlayer>();
            if (objPlayers != null)
                foreach (var gameObj in objPlayers)
                    UnityEngine.Object.Destroy(gameObj);
            return null;
        }
        object OnEventStartPre()
        {
            if (useThisEventGG)
            {
                GGStarted = true;
                if (configData.CloseEventAtStart)
                    EventManager.CloseEvent();
            }
            return null;
        }
        object OnEventStartPost()
        {
            return null;
        }
        object CanEventJoin()
        {
            return null;
        }
        object OnSelectKit(string kitname)
        {
            if (useThisEventGG)
            {
                Puts("No Kits required for this gamemode!");
            }
            return null;
        }
        object OnEventJoinPost(BasePlayer player)
        {
            if (useThisEventGG)
            {
                if (player.GetComponent<GunGamePlayer>())
                    UnityEngine.Object.Destroy(player.GetComponent<GunGamePlayer>());
                GunGamePlayers.Add(player.gameObject.AddComponent<GunGamePlayer>());
                player.GetComponent<GunGamePlayer>().level = 1;
                if (GGStarted) AddUI(player);
                
            }
            return null;
        }
        object OnEventLeavePost(BasePlayer player)
        {
            if (useThisEventGG)
            {
                var gunGamePlayer = player.GetComponent<GunGamePlayer>();
                if (gunGamePlayer)
                {
                    GunGamePlayers.Remove(gunGamePlayer);
                    UnityEngine.Object.Destroy(gunGamePlayer);
                    //CheckScores(null);
                }
            }
            return null;
        }
        void OnEventPlayerAttack(BasePlayer attacker, HitInfo hitinfo)
        {
            if (useThisEventGG && !(hitinfo.HitEntity is BasePlayer))
            {
                hitinfo.damageTypes = new DamageTypeList();
                hitinfo.DoHitEffects = false;
            }
        }

        void OnEventPlayerDeath(BasePlayer victim, HitInfo hitinfo)
        {
            if ((useThisEventGG) && (GGStarted))
            {
                DestroyUI(victim);
                BasePlayer attacker = hitinfo?.Initiator?.ToPlayer();
                if (attacker != null && attacker != victim)
                {
                    if (configData.UseMachete)
                    {
                        if (hitinfo.WeaponPrefab != null && hitinfo.WeaponPrefab.name.Contains(configData.DowngradeWeapon.shortname))
                        {
                            var vicplayerLevel = victim.GetComponent<GunGamePlayer>().level;
                            if (vicplayerLevel == 1)
                            {
                                SendReply(attacker, string.Format("You killed <color=orange>{0}</color> with a <color=orange>{1}</color> but they were already the lowest rank.", victim.displayName, configData.DowngradeWeapon.name));
                                return;
                            }
                            if (vicplayerLevel >= 2)
                            {
                                victim.GetComponent<GunGamePlayer>().level = (vicplayerLevel - 1);
                                SendReply(attacker, string.Format("You killed <color=orange>{0}</color> with a <color=orange>{1}</color> and they have lost a rank!", victim.displayName, configData.DowngradeWeapon.name));
                                SendReply(victim, string.Format("You were killed with a <color=orange>{0}</color> and have lost a rank!", configData.DowngradeWeapon.name));
                                return;
                            }
                        }
                    }
                    AddKill(attacker, victim, GetWeapon(hitinfo));
                }
            }
            return;
        }
        object EventChooseSpawn(BasePlayer player, Vector3 destination)
        {
            return null;
        }
        object OnRequestZoneName()
        {
            if (useThisEventGG)
                if (!string.IsNullOrEmpty(configData.ZoneName))
                    return configData.ZoneName;            
            return null;
        }

        //////////////////////////////////////////////////////////////////////////////////////
        // Gungame ///////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        private void notifyMachete(BasePlayer player)
        {
            if (!GGStarted) return;
            if (player.GetComponent<GunGamePlayer>())
            {
                SendReply(player, string.Format("The downgrade weapon is enabled. Kills with a <color=orange>{0}</color> will lower the victims rank!", configData.DowngradeWeapon.name));
                timer.Once(120, () => notifyMachete(player));
            }
        }
        private void stripGive(BasePlayer player)
        {
            player.inventory.Strip();
            GiveRankKit(player, player.GetComponent<GunGamePlayer>().level);
            if (configData.UseMachete)
                GiveItem(player, configData.DowngradeWeapon.shortname, "belt");
            if (configData.UseMeds)
                foreach (var entry in configData.Meds)
                    GiveItem(player, entry.shortname, entry.container, entry.amount);
            if (configData.UseArmour)
                GiveItem(player, configData.ArmourType, "wear");
            foreach (var entry in configData.PlayerGear)
                GiveItem(player, entry.shortname, entry.container, entry.amount, entry.skin);
        }
        public void GiveRankKit(BasePlayer player, int rank)
        {
            RankItem rankItem;
            if (configData.Weapons.TryGetValue(rank, out rankItem))
            {
                for (var i = 0; i < rankItem.amount; i++)
                    GiveItem(player, rankItem);
                SendReply(player, string.Format("You are Rank <color=orange>{0}</color> ({1})", rank, rankItem.name));
                return;
            }
            Puts("Kit not found, Check your config for errors!");
        }

        //////////////////////////////////////////////////////////////////////////////////////
        // Give //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        private ItemDefinition FindItemDefinition(string shortname)
        {
            ItemDefinition itemDefinition;
            return _itemsDict.TryGetValue(shortname, out itemDefinition) ? itemDefinition : null;
        }

        private Item BuildItem(string shortname)
        {
            var definition = FindItemDefinition(shortname);
            if (definition != null)
            {
                var item = ItemManager.Create(definition);
                if (item != null)
                    return item;
            }
            Puts("Error making item: " + shortname);
            return null;
        }

        public void GiveItem(BasePlayer player, RankItem rankItem)
        {
            var definition = FindItemDefinition(rankItem.shortname);
            if (definition == null)
            {
                Puts("Error making item: " + rankItem.shortname);
                return;
            }
            var stack = definition.stackable;
            if (stack < 1) stack = 1;
            for (var i = rankItem.amount; i > 0; i = i - stack)
            {
                var giveamount = i >= stack ? stack : i;
                if (giveamount < 1) return;
                var item = ItemManager.Create(definition, giveamount, rankItem.skin);
                if (item == null)
                {
                    Puts("Error making item: " + rankItem.shortname);
                    return;
                }
                var weapon = item.GetHeldEntity() as BaseProjectile;
                if (weapon != null)
                {
                    if (!string.IsNullOrEmpty(rankItem.ammoType))
                    {
                        var ammoType = FindItemDefinition(rankItem.ammoType);
                        if (ammoType != null)
                            weapon.primaryMagazine.ammoType = ammoType;
                    }
                    var ammo = rankItem.ammo - weapon.primaryMagazine.capacity;
                    if (ammo <= 0)
                        weapon.primaryMagazine.contents = rankItem.ammo;
                    else
                    {
                        weapon.primaryMagazine.contents = weapon.primaryMagazine.capacity;
                        GiveItem(player, weapon.primaryMagazine.ammoType.shortname, "main", ammo);
                    }
                }
                if (rankItem.contents != null)
                    foreach (var content in rankItem.contents)
                        BuildItem(content)?.MoveToContainer(item.contents);
                ItemContainer cont;
                switch (rankItem.container)
                {
                    case "wear":
                        cont = player.inventory.containerWear;
                        break;
                    case "belt":
                        cont = player.inventory.containerBelt;
                        break;
                    default:
                        cont = player.inventory.containerMain;
                        break;
                }
                player.inventory.GiveItem(item, cont);
            }
        }

        public void GiveItem(BasePlayer player, string shortname, string container, int amount = 1, int skin = 0)
        {
            var definition = FindItemDefinition(shortname);
            if (definition == null)
            {
                Puts("Error making item: " + shortname);
                return;
            }
            var stack = definition.stackable;
            if (stack < 1) stack = 1;
            for (var i = amount; i > 0; i = i - stack)
            {
                var giveamount = i >= stack ? stack : i;
                if (giveamount < 1) return;
                var item = ItemManager.Create(definition, giveamount, skin);
                if (item == null)
                {
                    Puts("Error making item: " + shortname);
                    return;
                }
                ItemContainer cont;
                switch (container)
                {
                    case "wear":
                        cont = player.inventory.containerWear;
                        break;
                    case "belt":
                        cont = player.inventory.containerBelt;
                        break;
                    default:
                        cont = player.inventory.containerMain;
                        break;
                }
                player.inventory.GiveItem(item, cont);
            }
        }

        private string GetWeapon(HitInfo hitInfo, string def = "")
        {
            var item = hitInfo.Weapon?.GetItem();
            if (item == null && hitInfo.WeaponPrefab == null) return def;
            var shortname = item?.info.shortname ?? hitInfo.WeaponPrefab.name;
            shortname = shortname.Replace(".prefab", string.Empty);
            shortname = shortname.Replace(".entity", string.Empty);
            shortname = shortname.Replace("_", ".");
            switch (shortname)
            {
                case "rocket.basic":
                case "rocket.fire":
                case "rocket.hv":
                case "rocket.smoke":
                    shortname = "rocket.launcher";
                    break;
            }
            return shortname;
        }

        ////////////////////////////////////////////////////////////
        // Scoring /////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////

        void AddKill(BasePlayer player, BasePlayer victim, string shortname)
        {
            var gunGamePlayer = player.GetComponent<GunGamePlayer>();
            if (gunGamePlayer == null)
                return;

            var leveled = false;
            gunGamePlayer.kills++;
            RankItem rankItem;
            if (configData.Weapons.TryGetValue(gunGamePlayer.level, out rankItem) && rankItem.shortname.Equals(shortname))
            {
                leveled = true;
                gunGamePlayer.level++;
                if (EventManager.EventMode == EventManager.GameMode.Battlefield)
                {
                    if (gunGamePlayer.level >= (configData.RankLimit + 1))
                        gunGamePlayer.level = 1;
                }
            }
            EventManager.AddTokens(player.UserIDString, configData.TokensPerKill);
            EventManager.BroadcastEvent(string.Format(GGMessageKill, player.displayName, gunGamePlayer.kills, gunGamePlayer.level, victim.displayName));
			CheckScores(player, leveled);
            RefreshSB();
        }
        void CheckScores(BasePlayer player, bool leveled = false, bool timelimitreached = false)
        {
            if (GunGamePlayers.Count <= 1)
            {
                EventManager.BroadcastEvent(EventMessageNoMorePlayers);
                EventManager.CloseEvent();
                EventManager.EndEvent();
                return;
            }
            BasePlayer winner = null;
            int topscore = 0;
            bool finished = false;            
            foreach (GunGamePlayer gungameplayer in GunGamePlayers)
            {
                if (gungameplayer == null) continue;
                if (EventManager.EventMode == EventManager.GameMode.Normal)
                {
                    if (gungameplayer.level >= (configData.RankLimit + 1))
                    {
                        winner = gungameplayer.player;
                        finished = true;
                        break;
                    }
                }
                if (timelimitreached)
                {                    
                    if (gungameplayer.kills > topscore)
                    {
                        winner = gungameplayer.player;
                        topscore = gungameplayer.kills;
                        finished = true;
                    }
                }
            }
           
            if (winner != null)
            {
                Winner(winner);
                return;
            }

            if (player != null && !finished && leveled)
                stripGive(player);
        }
        void Winner(BasePlayer player)
        {
            EventManager.AddTokens(player.UserIDString, configData.TokensOnWin);
            EventManager.BroadcastEvent(string.Format(EventMessageWon, player.displayName));
            EventManager.CloseEvent();
            EventManager.EndEvent();
        }

        ////////////////////////////////////////////////////////////
        // Rank Setup //////////////////////////////////////////////
        ////////////////////////////////////////////////////////////
        [ChatCommand("gg")]
        private void cmdGunGame(BasePlayer player, string command, string[] args)
        {
            if (!isAuth(player)) return;
            if (args == null || args.Length == 0)
            {
                SendReply(player, "<color=orange>Gungame rank setup:</color>");
                SendReply(player, "To add a weapon to a Gungame rank, you must first put the weapon in your hands");
                SendReply(player, "Then type <color=orange>'/gg rank <rank##> <opt:ammo>'</color>");
                SendReply(player, "<color=orange><rank##></color> is the rank you want to assign the weapon");
                SendReply(player, "<color=orange><opt:ammo></color> is the amount of ammo you want to supply with the weapon");
                SendReply(player, "To add a new kit you must set your inventory");
                SendReply(player, "Then type <color=orange>'/gg kit'</color> and it will copy your inventory");
                SendReply(player, "You can only add clothing and medical items to the kit");
                return;
            }
            switch (args[0].ToLower())
            {
                case "rank":
                    {
                        if (args.Length >= 2)
                        {
                            int rank;
                            int.TryParse(args[1], out rank);
                            if (rank >= 1)
                            {
                                int ammo = 1;
                                if (args.Length == 3) int.TryParse(args[2], out ammo);
                                SaveWeapon(player, rank, ammo);
                                return;
                            }
                            SendReply(player, "<color=orange>You must enter a rank number</color>");
                            return;
                        }
                        else SendReply(player, "<color=orange>/gg rank <rank##> <opt:ammo></color> - You must select a rank number");
                    }
                    return;
                case "kit":
                    SetPlayerKit(player);
                    return;
            }
        }
        private bool isAuth(BasePlayer player)
        {
            if (player.net.connection.authLevel >= 1) return true;
            return false;
        }
        private void SaveWeapon(BasePlayer player, int rank, int ammo = 1)
        {
            RankItem weaponEntry = new RankItem();
            Item item = player.GetActiveItem();
            if (item != null)
                if (item.info.category.ToString() == "Weapon")
                {
                    BaseProjectile weapon = item.GetHeldEntity() as BaseProjectile;
                    if (weapon != null)
                        if (weapon.primaryMagazine != null)
                        {
                            List<string> mods = new List<string>();
                            if (item.contents != null)
                                foreach (var mod in item.contents.itemList)
                                    if (mod.info.itemid != 0) mods.Add(mod.info.shortname);
                            if (mods != null) weaponEntry.contents = mods.ToArray();

                            weaponEntry.ammoType = weapon.primaryMagazine.ammoType.shortname;
                            weaponEntry.ammo = ammo;
                        }

                    weaponEntry.amount = item.amount;
                    weaponEntry.container = "belt";
                    weaponEntry.name = item.info.displayName.english;
                    weaponEntry.shortname = item.info.shortname;
                    weaponEntry.skin = item.skin;

                    if (rank > configData.Weapons.Count) rank = configData.Weapons.Count + 1;
                    if (!configData.Weapons.ContainsKey(rank))
                        configData.Weapons.Add(rank, weaponEntry);
                    else configData.Weapons[rank] = weaponEntry;
                    SaveConfig(configData);
                    SendReply(player, string.Format("You have successfully added <color=orange>{0}</color> as the weapon for Rank <color=orange>{1}</color>", weaponEntry.name, rank));
                    return;
                }
            SendReply(player, "<color=orange>Unable to save item.</color> You must put a weapon in your hands");
        }
        private void SetPlayerKit(BasePlayer player)
        {
            configData.PlayerGear.Clear();
            configData.Meds.Clear();

            foreach (var item in player.inventory.containerWear.itemList)
                SaveItem(item, "wear", true);

            foreach (var item in player.inventory.containerMain.itemList)
            {
                if (item.info.category.ToString() == "Medical")
                    SaveItem(item, "main", false);
                else if (item.info.category.ToString() == "Attire")
                    SaveItem(item, "main", true);
                else SendReply(player, string.Format("Did not save <color=orange>{0}</color>, you may only save clothing and meds to the gungame kit", item.info.displayName.translated));
            }

            foreach (var item in player.inventory.containerBelt.itemList)
            {
                if (item.info.category.ToString() == "Medical")
                    SaveItem(item, "belt", false);
                else if (item.info.category.ToString() == "Attire")
                    SaveItem(item, "belt", true);
                else SendReply(player, string.Format("Did not save <color=orange>{0}</color>, you may only save clothing and meds to the gungame kit", item.info.displayName.translated));
            }

            SaveConfig(configData);
            SendReply(player, "<color=orange>You have successfully saved a new player kit for Gungame</color>");
        }
        private void SaveItem(Item item, string cont, bool data)
        {
            Gear gear = new Gear
            {
                name = item.info.displayName.english,
                amount = item.amount,
                container = cont,
                shortname = item.info.shortname,
                skin = item.skin
            };
            if (data) configData.PlayerGear.Add(gear);
            else configData.Meds.Add(gear);
        }
    }
}



// --- End of file: GunGame.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DevilsIsland.cs ---
// --- Original Local Path: DevilsIsland.cs ---

using DevilsIsland;
using JetStream;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Plugins;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Devil's Island", "Nick Holmes", 0.7, ResourceId = 1372)]
    [Description("Devil's Island Game Mode")]
    public class DevilsIsland : GameModePlugin<DevilsIslandConfig, DevilsIslandState>
    {
        private ILocator liveLocator = null;
        private ILocator locator = null;

        protected override void Initialize()
        {
            // Ugly work around for wierd servers that have worldsize == 0
            int worldSize = ConVar.Server.worldsize;
            if (worldSize == 0) worldSize = GameConfig.FallbackWorldSize;

            liveLocator = new RustIOLocator(worldSize);
            locator = new LocatorWithDelay(liveLocator, 60);
            
            if(GameConfig.IsBossPositionNotifierEnabled)
                Timers.Add("AdviseBossPosition", timer.Repeat(GameConfig.BossPositionNotifierInterval, 0, () => AdviseBossPosition()));
            
            if(GameConfig.IsHelpNotiferEnabled)
                Timers.Add("HelpNotifier", timer.Repeat(GameConfig.HelpNotifierInverval, 0, () => AdviseRules()));

            Timers.Add("BossPromote", timer.Repeat(30, 0, () => TryForceBoss()));
        }

        #region Timers and Events

        // AdviceBossPosition is called every n seconds, and updates all played on the current
        // location of the Boss.This is intended to be a negative aspect of being the Boss.
        // If there is no Boss, players are reminded how to become the Boss.
        // TODO: If there is no Boss, after x minutes, just promote someone.
        void AdviseBossPosition()
        {
            if (State.BossExists())
            {
                bool moved;
                string bossCoords = locator.GridReference(State.Boss, out moved);

                if (moved)
                    PrintToChat(Text.Broadcast_BossLocation_Moved, State.BossName, bossCoords);
                else
                    PrintToChat(Text.Broadcast_BossLocation_Static, State.BossName, bossCoords);
            }
            else
                PrintToChat(Text.Broadcast_ClaimAvailable);
        }

        // AdviseRules is called every m seconds, and reminds players where they can find the
        // Game Mode rules. Useful at the moment, but probably a bit annoying in the long term
        public void AdviseRules()
        {
            PrintToChat(Text.Broadcast_HelpAdvice);
        }

        public void TryForceBoss()
        {
            if (State.NoBoss() && State.TryForceNewBoss())
                PrintToChat("{0} has been made the new Boss. Kill him!", State.BossName);
        }

        #endregion

        #region Player Commands
        [ChatCommand("rules")]
        void RulesCommand(BasePlayer player, string command, string[] args)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(Text.Synopsis);
            sb.AppendLine();
            sb.AppendLine(Text.PlayerCommandSection);
            sb.AppendLine(Text.StatusCommandHint);
            sb.AppendLine(Text.ClaimCommandHint);
            sb.AppendLine(Text.RebelCommandHint);
            sb.AppendLine(Text.WhereCommandHint);
            sb.AppendLine();
            sb.AppendLine(Text.BossCommandSection);
            sb.AppendLine(Text.TaxCommandHint);
            sb.AppendLine(Text.LootCommandHint);
            sb.AppendLine(Text.RecruitCommandHint);
            sb.AppendFormat(Text.HeloStrikeCommandHint, GameConfig.HeloStrikePrice_Quantity, GameConfig.HeloStrikePrice_ItemDef.displayName.english);
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine("Outlaw Commands:");
            sb.AppendFormat("<color=lime>/decoy <i>player</i></color> For a few minutes, the Boss sees <i>player</i>'s location, instead of yours. Costs {0} {1}", GameConfig.DecoyPrice_Quantity, GameConfig.HeloStrikePrice_ItemDef.displayName.english);
            PrintToChat(player, sb.ToString());
        }

        // StatusCommand implements the "/status" player command. The purpose of this
        // command is simple to show users their current status, and some global status that
        // is relevent to them. Also, it should remind players of any other commands they can
        // currently use.
        [ChatCommand("status")]
        void StatusCommand(BasePlayer player, string command, string[] args)
        {
            StringBuilder sb = new StringBuilder();
            bool moved;

            string bossName = State.NoBoss() ? Text.NoBoss : State.BossName;
            string bossCoords = State.NoBoss() ? "err, nowhere!" : locator.GridReference(State.Boss, out moved);

            if (State.IsBoss(player))
            {
                sb.AppendLine(Text.YouAreTheBoss);
                sb.AppendFormat(Text.TaxRate, State.TaxRate * 100f);

                sb.AppendLine();
                if (State.Outlaws.Any())
                {
                    sb.AppendLine("Outlaws:");
                    foreach (Outlaw outlaw in State.Outlaws.All())
                    {
                        string location = locator.GridReference(outlaw.GetEffectiveTarget(), out moved);
                        sb.AppendFormat("{0}", outlaw.Player.displayName);
                        if(moved)
                            sb.AppendFormat(" on the move at {0}\n", location);
                        else
                            sb.AppendFormat(" loitering at {0}\n", location);
                    }
                }
                else
                    sb.AppendLine("There are currenly no Outlaws");

                sb.AppendLine();
                if (State.Henchmen.Any())
                {
                    sb.AppendLine("Henchmen:");
                    foreach (Henchman henchman in State.Henchmen.All())
                    {
                        string location = locator.GridReference(henchman.Player, out moved);
                        sb.AppendFormat("{0}", henchman.Player.displayName);
                        if (moved)
                            sb.AppendFormat(" on the move at {0}\n", location);
                        else
                            sb.AppendFormat(" loitering at {0}\n", location);
                    }
                }
                else
                    sb.AppendLine("You have no henchmen, you can /recruit some");
            }
            else if (State.Henchmen.Contains(player))
            {
                sb.AppendLine("<color=red><size=17>You are a Henchman</size></color>");

                sb.AppendLine();
                if (State.Outlaws.Any())
                {
                    sb.AppendLine("Outlaws:");
                    foreach (Outlaw outlaw in State.Outlaws.All())
                    {
                        string location = locator.GridReference(outlaw.GetEffectiveTarget(), out moved);
                        sb.AppendFormat("{0}", outlaw.Player.displayName);
                        if (moved)
                            sb.AppendFormat(" on the move at {0}\n", location);
                        else
                            sb.AppendFormat(" loitering at {0}\n", location);
                    }
                }
                else
                    sb.AppendLine("There are currenly no Outlaws");

                sb.AppendLine();
                if (State.Henchmen.All().Where(h => h.Player != player).Any())
                {
                    sb.AppendLine("Follow Henchmen:");
                    foreach (Henchman henchman in State.Henchmen.All().Where(h => h.Player != player))
                    {
                        string location = locator.GridReference(henchman.Player, out moved);
                        sb.AppendFormat("{0}", henchman.Player.displayName);
                        if (moved)
                            sb.AppendFormat(" on the move at {0}\n", location);
                        else
                            sb.AppendFormat(" loitering at {0}\n", location);
                    }
                }
                else
                    sb.AppendLine("You are the only henchman");
            }
            else
            {
                if (State.Outlaws.Contains(player))
                    sb.AppendLine(Text.YouAreAnOutlaw);

                sb.AppendFormat(Text.TaxRate, State.TaxRate * 100f);
                sb.AppendLine();

                if (State.BossExists())
                {
                    
                    sb.AppendFormat(Text.CurrentBoss, bossName, bossCoords);
                    if (State.LootContainer != null)
                    {
                        sb.AppendFormat(Text.CurrentTaxBox, locator.GridReference(State.LootContainer, out moved));
                        sb.AppendLine();
                    }

                    if (State.Henchmen.Any())
                    {
                        sb.AppendLine("Henchmen:");
                        foreach (Henchman henchman in State.Henchmen.All())
                        {
                            string location = locator.GridReference(henchman.Player, out moved);
                            sb.AppendFormat("{0}", henchman.Player.displayName);
                            if (moved)
                                sb.AppendFormat(" on the move at {0}\n", location);
                            else
                                sb.AppendFormat(" up to no good at {0}\n", location);
                        }
                    }
                    else
                        sb.AppendLine("There are currenly no Henchmen");

                }
                else
                    sb.AppendFormat(Text.NoBoss);               
            }

            PrintToChat(player, sb.ToString());
        }

        // ClaimCommon implements the "/claim" player command. This allows any player to become
        // the Boss, if there currently is none. Command has no effect if is already a Boss.
        [ChatCommand("claim")]
        void ClaimCommand(BasePlayer player, string command, string[] args)
        {
            if (GuardAgainst(() => State.IsBoss(player), player, Text.Error_YourAreBoss)
            || GuardAgainst(() => State.BossExists(), player, Text.Error_OtherIsBoss, State.BossName))
                return;

            State.SetBoss(player);  
            PrintToChat(player, Text.Success_WelcomeNewBoss);
            PrintToChat(Text.Broadcast_FirstBoss, State.BossName);
        }

        // LootCommand implements the "/loot" player command. This command allows the Boss
        // to designate which storage box he wants his taxes paying into. 
        [ChatCommand("loot")]
        void LootCommand(BasePlayer player, string command, string[] args)
        {
            if(GuardAgainst(() => State.NoBoss(), player, Text.Error_Loot_NoBoss)
            || GuardAgainst(() => State.IsNotBoss(player), player, Text.Error_Loot_NotBoss, State.BossName))
                return;

            RaycastHit hit;
            StorageContainer targetBox = null;
            if (Physics.Raycast(player.eyes.HeadRay(), out hit, 2.5f))
                targetBox = hit.transform.GetComponentInParent<StorageContainer>();

            if (targetBox != null && targetBox.GetType() == typeof(StorageContainer))
            {
                State.LootContainer = targetBox;
                PrintToChat(player, Text.Success_Looting);
            }
            else
                PrintToChat(player, "Stand close to, and look directly at, the storage box you want your taxes paying into.");
        }

        [ChatCommand("helo")]
        void HeloCommmand(BasePlayer player, string command, string[] args)
        {
            if (GuardAgainst(() => State.IsNotBoss(player), player, "You aren't the boss")
             || GuardAgainst(() => args.Length != 1, player, "Usage '/helo player' where player can also be partial name")
             || GuardAgainst(() => !State.Outlaws.HasMatchByPartialName(args[0]), player, "player \"{0}\" not found, or ambiguous", args[0])
             || GuardAgainst(() => State.CanNotAffordHeloStrike(player), player, "Ordering a helo strike costs {0} {1}", GameConfig.HeloStrikePrice_Quantity, GameConfig.HeloStrikePrice_ItemDef.displayName.english))
                return;

            int heloCount = UnityEngine.Object.FindObjectsOfType<BaseHelicopter>().Count();
            if(heloCount >= GameConfig.MaxHelos)
            {
                PrintToChat(player, "Insufficient airspace for more than {0} helicopters, please wait for extant patrols to complete", GameConfig.MaxHelos);
                return;
            }

            State.OrderHeloStrike(args[0]);
            PrintToChat(player, "The helo is inbound");
        }

        [ChatCommand("decoy")]
        void DecoyCommmand(BasePlayer player, string command, string[] args)
        {
            if (GuardAgainst(() => !State.Outlaws.Contains(player), player, "You aren't an outlaw")
             || GuardAgainst(() => args.Length != 1, player, "Usage '/decoy player' where player can also be partial name")
             || GuardAgainst(() => State.PlayerGoodMatch(args[0]), player, "player \"{0}\" not found, or ambiguous", args[0])
             || GuardAgainst(() => !State.CanAffordDecoy(player), player, "Decoying costs {0} {1}", GameConfig.DecoyPrice_Quantity, GameConfig.DecoyPrice_ItemId.displayName.english))
                return;

            State.Decoy(player, args[0]);
            PrintToChat(player, "You now have a decoy. Only you know this");
        }

        [ChatCommand("tax")]
        void SetTaxCommmand(BasePlayer player, string command, string[] args)
        {
            if (GuardAgainst(() => State.NoBoss(), player, Text.Error_TaxChange_NoBoss)
             || GuardAgainst(() => State.IsNotBoss(player), player, Text.Error_TaxChange_NotBoss, State.BossName)
             || GuardAgainst(() => args.Length != 1, player, Text.Error_TaxChange_BadArgs))
                return;

            float newTaxRate = 0;

            if (float.TryParse(args[0], out newTaxRate))
            {
                newTaxRate /= 100;
                newTaxRate = Math.Max(0.03f, Math.Min(0.45f, newTaxRate));

                bool increased = (newTaxRate > State.TaxRate);

                State.TaxRate = newTaxRate;

                if (increased)
                    PrintToChat(Text.Broadcast_TaxIncrease, State.BossName, State.TaxRate * 100);
                else
                    PrintToChat(Text.Broadcast_TaxDecrease, State.BossName, State.TaxRate * 100);
            }
            else
                PrintToChat(player, Text.Error_TaxChange_BadArgs);
        }

        [ChatCommand("where")]
        void WhereCommand(BasePlayer player, string command, string[] args)
        {
            bool moved;
            PrintToChat(player, Text.YourLocation, liveLocator.GridReference(player, out moved));
        }

        [ChatCommand("rebel")]
        void RebelCommand(BasePlayer player, string command, string[] args)
        {
            if(GuardAgainst(() => State.IsBoss(player), player, Text.Error_Rebel_IsTheBoss)
            || GuardAgainst(() => State.Outlaws.Contains(player), player, Text.Error_Rebel_IsAlreadyOutlaw))
                return;

            State.Outlaws.Add(player);
            PrintToChat(Text.Broadcast_NewOutlaw, player.displayName);
        }

        [ChatCommand("recruit")]
        void RecruitCommand(BasePlayer player, string command, string[] args)
        {
            if(GuardAgainst(() => !State.IsBoss(player), player, "You need to be the Boss to recruit henchmen")
             || GuardAgainst(() => args.Length != 1, player, "Usage '/recruit player' where player can also be partial name")
             || GuardAgainst(() => State.PlayerGoodMatch(args[0]), player, "player \"{0}\" not found, or ambiguous", args[0]))
                return;

            BasePlayer recruit = State.TryRecruit(args[0]);
            if(recruit != null)
            {
                PrintToChat(State.Boss, "You have invited {0} to undergo the Bukake Ritual", recruit.displayName);
                PrintToChat(recruit, "Boss {0} offers you employment, it's up to you to <color=lime>/accept</color> it", State.BossName);
            }
        }

        [ChatCommand("accept")]
        void AcceptCommand(BasePlayer player, string command, string[] args)
        {
            if (GuardAgainst(() => !State.PendingRequest.Contains(player), player, "You have no pending recruitment requests"))
                return;

            if(State.TryPromote(player))
                PrintToChat(
                    "{0} passed the Bukake Ritual, and is now a henchman for {1}. Someone pass him a tissue", player.displayName, State.Boss.displayName);
        }

        #endregion

        #region Console Commands
        [ConsoleCommand("devilsisland.diagnostic")]
        private void DiagnosticCommand(ConsoleSystem.Arg arg)
        {
            PrintToConsole(arg.Player(), "Devil's Island version 0.7 ({0}.{1}.{2})", Version.Major, Version.Minor, Version.Patch);

            PrintToConsole(arg.Player(), "\nHenchmen:");
            foreach (Henchman h in State.Henchmen.All())
                PrintToConsole(arg.Player(), "\t{0}", h.Player.displayName);

            PrintToConsole(arg.Player(), "\n\nOutlaws:");
            foreach (Outlaw h in State.Outlaws.All())
                PrintToConsole(arg.Player(), "\t{0}", h.Player.displayName);
        }

        [ConsoleCommand("devilsisland.reset")]
        private void ResetCommand(ConsoleSystem.Arg arg)
        {
            if (arg.isAdmin)
            {
                PrintToConsole(arg.Player(), "Resetting Devil's Island Game State");
                State.SetBoss(null);
            }
        }
        #endregion

        #region Tax Resource Gathering
        void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player = entity.ToPlayer();
            if (player == null || State.IsBoss(player) || State.Outlaws.Contains(player) || State.Henchmen.Contains(player))
                return;

            State.CollectTaxFrom(item);
        }

        void OnQuarryGather(MiningQuarry quarry, Item item)
        {
            State.CollectTaxFrom(item);
        }

        #endregion

        #region Player Death

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            // Check to see if the LootContainer got destroyed
            StorageContainer container = entity as StorageContainer;
            if (container != null && State.LootContainer == container)
            {
                State.LootContainer = null;
                return;
            }
            
            BasePlayer victim = entity.ToPlayer();
            if (victim == null)
                return;

            BasePlayer attacker = null;
            if (info != null && info.Initiator != null)
                attacker = info.Initiator.ToPlayer();

            // Handle Boss Death
            if (State.IsBoss(victim))
            {
                // Killed by Player?
                if (attacker != null)
                {
                    if (State.IsBoss(attacker))
                    {
                        State.SetBoss(null);
                        PrintToChat(Text.Broadcast_BossSuicide, attacker.displayName);
                    }
                    else
                    {
                        State.SetBoss(attacker);
                        PrintToChat(Text.Broadcast_NewBoss, State.BossName, victim.displayName);
                    }
                }
                else
                {
                    PrintToChat("Boss {0} died foolishly. You can /claim the title.", State.BossName);
                    State.SetBoss(null);
                }
                return;
            }

            // Handle Outlaw Death
            if(State.Outlaws.Contains(victim) && State.IsBoss(attacker))
            {
                State.Outlaws.Remove(victim);
                PrintToChat("Boss {0} executed outlaw {1}. He died like the rebel dog he was.", State.BossName, victim.displayName);
                return;
            }

            // Handle Outlaw Death
            if (State.Outlaws.Contains(victim) && State.Henchmen.Contains(attacker))
            {
                State.Outlaws.Remove(victim);
                PrintToChat("Henchman {0} made the world a better place: outlaw {1} is worm food.", attacker.displayName, victim.displayName);
                return;
            }

            // Spice up murder, a little bit
            if(!State.Outlaws.Contains(victim) && !State.IsBoss(victim) && !State.Henchmen.Contains(victim)
                && attacker != null && !State.IsBoss(attacker) && !State.Outlaws.Contains(attacker) && !State.Henchmen.Contains(attacker)
                && attacker != victim)
            {
                State.Outlaws.Add(attacker);
                PrintToChat("{0} has embarked on a life of crime, and is now an Outlaw.", attacker.displayName);
                return;
            }
        }

        #endregion

        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if(player == State.Boss && !GameConfig.AllowBossDisconnect)
            {
                PrintToChat("The Boss has been sacked for sleeping on the job, feel free to /claim it");
                State.SetBoss(null);
            }
        }

        #region Integration Point
        public BasePlayer Boss
        {
            get { return State.Boss; }
        }
        #endregion
    }
}

namespace DevilsIsland
{    
    public class DevilsIslandState : IGameState
    {
        public DevilsIslandState()
        {
            Outlaws = new Outlaws();
            Henchmen = new Henchmen();
            PendingRequest = new List<BasePlayer>();
        }
        
        public void AttachConfig(IGameConfig configFile)
        {
            this.config = (DevilsIslandConfig)configFile;
        }

        private DevilsIslandConfig config = null;
        
        private BasePlayer currentBoss = null;
        internal DateTime noBossSince = DateTime.Now;

        private float taxRate = 0.1f;
        private Dictionary<ItemDefinition, float> coffers = new Dictionary<ItemDefinition, float>();

        // Some of the method here might seem redundant (i.e. IsBoss, IsNotBoss), but their
        // purpose is to make the code more readable.

        #region Boss

        public bool NoBoss()
        {
            return currentBoss == null;
        }

        public bool BossExists()
        {
            return currentBoss != null;
        }

        public bool IsBoss(BasePlayer player)
        {
            return player == currentBoss;
        }

        public bool IsNotBoss(BasePlayer player)
        {
            return player != currentBoss;
        }

        public BasePlayer Boss { get { return currentBoss; } }

        public string BossName { get { return currentBoss == null ? "no boss" : currentBoss.displayName;  } }

        public void SetBoss(BasePlayer newBoss)
        {
            if(currentBoss != newBoss)
            {
                currentBoss = newBoss;
                if (currentBoss == null)
                    noBossSince = DateTime.Now;
                Outlaws.Clear();

                PendingRequest.Clear();

                foreach (Henchman hench in Henchmen.All())
                    hench.Player.inventory.Strip();

                Henchmen.Clear();
                LootContainer = null;
            }
        }

        public bool TryForceNewBoss()
        {
            if (BossExists() || BasePlayer.activePlayerList.Count() < config.AutoBossPromoteMinPlayers)
                return false;

            if(DateTime.Now > noBossSince.AddSeconds(config.AutoBossPromoteDelay))
            {                
                int newBossIndex = Oxide.Core.Random.Range(BasePlayer.activePlayerList.Count());
                SetBoss(BasePlayer.activePlayerList.Skip(newBossIndex).First());
                return true;
            }

            return false;
        }

        #endregion

        #region Tax

        public float TaxRate { get { return taxRate; } set { taxRate = value; } }

        public StorageContainer LootContainer { get; set; }

        public IEnumerable<ItemDefinition> CofferItems { get { return coffers.Keys.Where(k => coffers[k] >= 1); } }

        public float CofferAmount(ItemDefinition key)
        {
            return coffers[key];
        }

        public void CollectTaxFrom(Item item)
        {
            // Calculate the tax as floats, so we still get something when item amount is low.
            float taxAmount = ((float)item.amount * taxRate);

            item.amount -= (int)taxAmount;

            if (!coffers.ContainsKey(item.info))
                coffers.Add(item.info, 0);

            coffers[item.info] += taxAmount;

            int intAmount = (int)coffers[item.info];
            if(intAmount >= 1 && LootContainer != null)
            {
                Item taxItem = ItemManager.CreateByItemID(item.info.itemid, intAmount, false);
                taxItem.MoveToContainer(LootContainer.inventory);
                coffers[item.info] -= (float)intAmount;
            }

        }
        #endregion

        #region Helo Strikes

        public bool CanNotAffordHeloStrike(BasePlayer player)
        {
            return player.inventory.GetAmount(config.HeloStrikePrice_ItemDef.itemid) < config.HeloStrikePrice_Quantity;
        }

        public void OrderHeloStrike(string targetPartialName)
        {
            // Deduct the cost
            List<Item> collector = new List<Item>();
            currentBoss.inventory.Take(collector, config.HeloStrikePrice_ItemDef.itemid, config.HeloStrikePrice_Quantity);

            // Call in the whirlibird
            Outlaw target;
            BaseEntity entity = GameManager.server.CreateEntity("assets/bundled/prefabs/npc/patrol_helicopter/PatrolHelicopter.prefab", new Vector3(), new Quaternion(), true);
            if (entity != null && Outlaws.TryResolveByPartialName(targetPartialName, out target))
            {
                entity.GetComponent<PatrolHelicopterAI>().SetInitialDestination(target.GetEffectiveTarget().transform.position + new Vector3(0.0f, 10f, 0.0f), 0.25f);
                entity.Spawn(true);
            }
        }

        #endregion

        #region Outlaws

        public Outlaws Outlaws { get; private set; }

        public bool CanAffordDecoy(BasePlayer player)
        {
            return player.inventory.GetAmount(config.DecoyPrice_ItemId.itemid) >= config.DecoyPrice_Quantity;
        }

        public void Decoy(BasePlayer player, string targetPartialName)
        {
            // Deduct the cost
            List<Item> collector = new List<Item>();
            player.inventory.Take(collector, config.DecoyPrice_ItemId.itemid, config.DecoyPrice_Quantity);

            // Set up the decoy
            BasePlayer target = BasePlayer.activePlayerList.Single(p => p.displayName.IndexOf(targetPartialName, StringComparison.InvariantCultureIgnoreCase) != -1);

            Outlaw source;
            if(Outlaws.TryResovleByPlayer(player, out source))
                source.SetDecoy(target, DateTime.Now.AddSeconds(300));
        }
        #endregion

        #region Henchmen

        public Henchmen Henchmen { get; private set; }
        public List<BasePlayer> PendingRequest { get; private set; }

        public BasePlayer TryRecruit(string playerPartialName)
        {
            if (BasePlayer.activePlayerList.Count(p => p.displayName.IndexOf(playerPartialName, StringComparison.InvariantCultureIgnoreCase) != -1) != 1)
                return null;

            BasePlayer recruit = BasePlayer.activePlayerList.Single(p => p.displayName.IndexOf(playerPartialName, StringComparison.InvariantCultureIgnoreCase) != -1);

            if (recruit == Boss || PendingRequest.Contains(recruit) || Henchmen.Contains(recruit))
                return null;

            PendingRequest.Add(recruit);
            return recruit;
        }

        public bool TryPromote(BasePlayer player)
        {
            if (PendingRequest.Contains(player))
                PendingRequest.Remove(player);

            if (Outlaws.Contains(player))
                Outlaws.Remove(player);

            if (!Henchmen.Contains(player))
            {
                Henchmen.Add(player);
                return true;
            }
            return false;
        }

        #endregion

        public bool PlayerGoodMatch(string playerPartialName)
        {
            return BasePlayer.activePlayerList.Count(p => p.displayName.IndexOf(playerPartialName, StringComparison.InvariantCultureIgnoreCase) != -1) != 1;
        }
    }

    #region Outlaws
    public class Outlaws
    {
        List<Outlaw> outlaws = new List<Outlaw>();

        public void Clear()
        {
            outlaws.Clear();
        }

        public void Add(BasePlayer newOutlaw)
        {
            outlaws.Add(new Outlaw(newOutlaw));
        }
        
        public void Remove(BasePlayer oldOutlaw)
        {
            Outlaw itemToRemove = outlaws.SingleOrDefault(o => o.Player == oldOutlaw);
            if (itemToRemove != null)
                outlaws.Remove(itemToRemove);
        }

        public bool Contains(BasePlayer player)
        {
            return outlaws.Any(o => o.Player == player);
        }

        public bool Any()
        {
            return outlaws.Any();
        }

        public IEnumerable<Outlaw> All()
        {
            return outlaws.AsReadOnly();
        }

        public bool TryResovleByPlayer(BasePlayer player, out Outlaw matchingOutlaw)
        {
            matchingOutlaw = outlaws.SingleOrDefault(o => o.Player == player);
            return (matchingOutlaw != null);
        }

        public bool HasMatchByPartialName(string partialName)
        {
            Outlaw match;
            return TryResolveByPartialName(partialName, out match);
        }

        public bool TryResolveByPartialName(string partialName, out Outlaw matchingOutlaw)
        {
            matchingOutlaw = outlaws.SingleOrDefault(o => o.Player.displayName.IndexOf(partialName, StringComparison.InvariantCultureIgnoreCase) != -1);
            return (matchingOutlaw != null);
        }
    }

    public class Outlaw
    {
        public Outlaw(BasePlayer player)
        {
            Player = player;
            decoyTarget = null;
            decoyUntil = DateTime.MinValue;
        }

        public BasePlayer Player { get; private set; }

        private BasePlayer decoyTarget;
        private DateTime decoyUntil;
        
        public void SetDecoy(BasePlayer player, DateTime until)
        {
            decoyTarget = player;
            decoyUntil = until;
        }

        public BasePlayer GetEffectiveTarget()
        {
            if (decoyTarget != null && decoyUntil >= DateTime.Now)
            {
                return decoyTarget;
            }
            else
                return Player;
        }
    }
    #endregion

    #region Henchmen
    public class Henchmen
    {
        List<Henchman> henchmen = new List<Henchman>();

        public void Clear()
        {
            henchmen.Clear();
        }

        public void Add(BasePlayer newHenchman)
        {
            henchmen.Add(new Henchman(newHenchman));
        }

        public void Remove(BasePlayer oldHenchman)
        {
            Henchman itemToRemove = henchmen.SingleOrDefault(o => o.Player == oldHenchman);
            if (itemToRemove != null)
                henchmen.Remove(itemToRemove);
        }

        public bool Contains(BasePlayer player)
        {
            return henchmen.Any(o => o.Player == player);
        }

        public bool Any()
        {
            return henchmen.Any();
        }

        public IEnumerable<Henchman> All()
        {
            return henchmen.AsReadOnly();
        }

        public bool TryResovleByPlayer(BasePlayer player, out Henchman matchingHenchman)
        {
            matchingHenchman = henchmen.SingleOrDefault(o => o.Player == player);
            return (matchingHenchman != null);
        }

        public bool HasMatchByPartialName(string partialName)
        {
            Henchman match;
            return TryResolveByPartialName(partialName, out match);
        }

        public bool TryResolveByPartialName(string partialName, out Henchman matchingHenchman)
        {
            matchingHenchman = henchmen.SingleOrDefault(o => o.Player.displayName.IndexOf(partialName, StringComparison.InvariantCultureIgnoreCase) != -1);
            return (matchingHenchman != null);
        }
    }

    public class Henchman
    {
        public Henchman(BasePlayer player)
        {
            Player = player;
        }

        public BasePlayer Player { get; private set; }
    }

    #endregion

    public class DevilsIslandConfig : IGameConfig
    {
        public void AttachConfigFile(DynamicConfigFile configFile)
        {
            this.configFile = configFile;
        }
        
        private DynamicConfigFile configFile;

        public void UpdateConfigFile()
        {
            bool changed = false;
            changed |= DefaultValue("HelpNotifierEnabled", true);
            changed |= DefaultValue("HelpNotifierInverval", 300);
            changed |= DefaultValue("BossPositionNotifierEnabled", true);
            changed |= DefaultValue("BossPositionNotifierInterval", 90);
            changed |= DefaultValue("AutoBossPromoteDelay", 300);
            changed |= DefaultValue("AutoBossPromoteMinPlayers", 5);
            changed |= DefaultValue("HeloStrikePrice_Quantity", 25);
            changed |= DefaultValue("HeloStrikePrice_Item", "metal.refined");
            changed |= DefaultValue("MaxHelos", 2);
            changed |= DefaultValue("DecoyPrice_Quantity", 5);
            changed |= DefaultValue("DecoyPrice_Item", "metal.refined");
            changed |= DefaultValue("EvadePrice_Quantity", 100);
            changed |= DefaultValue("EvadePrice_Item", "leather");
            changed |= DefaultValue("FallbackWorldSize", 4000);
            changed |= DefaultValue("AllowBossDisconnect", false);

            if (changed)
                configFile.Save();
        }

        private bool DefaultValue(string key, object defaultValue)
        {
            if (configFile[key] == null)
            {
                configFile[key] = defaultValue;
                return true;
            }
            else
                return false;
        }

        public bool IsHelpNotiferEnabled { get { return (bool)configFile["HelpNotifierEnabled"]; } }
        public int HelpNotifierInverval { get { return (int)configFile["HelpNotifierInverval"]; } }
        
        public bool IsBossPositionNotifierEnabled { get { return (bool)configFile["BossPositionNotifierEnabled"]; } }
        public int BossPositionNotifierInterval { get { return (int)configFile["BossPositionNotifierInterval"]; } }
        
        public int AutoBossPromoteDelay { get { return (int)configFile["AutoBossPromoteDelay"]; } }
        public int AutoBossPromoteMinPlayers { get { return (int)configFile["AutoBossPromoteMinPlayers"]; } }

        private ItemDefinition heloStrikePriceItemDef;
        public ItemDefinition HeloStrikePrice_ItemDef
        {
            get
            {
                if (heloStrikePriceItemDef == null) heloStrikePriceItemDef = FindOrDefault((string)configFile["HeloStrikePrice_Item"], "metal.refined");
                return heloStrikePriceItemDef;
            }
        }
        public int HeloStrikePrice_Quantity { get { return (int)configFile["HeloStrikePrice_Quantity"]; } }

        public int MaxHelos { get { return (int)configFile["MaxHelos"]; } }

        private ItemDefinition decoyPriceItemDef;
        public ItemDefinition DecoyPrice_ItemId
        {
            get
            {
                if (decoyPriceItemDef == null) decoyPriceItemDef = FindOrDefault((string)configFile["DecoyPrice_Item"], "metal.refined");
                return decoyPriceItemDef;
            }
        }
        public int DecoyPrice_Quantity { get { return (int)configFile["DecoyPrice_Quantity"]; } }

        private ItemDefinition evadePriceItemDef;
        public ItemDefinition EvadePrice_ItemId
        {
            get
            {
                if (evadePriceItemDef == null) evadePriceItemDef = FindOrDefault((string)configFile["EvadePrice_Item"], "leather");
                return evadePriceItemDef;
            }
        }
        public int EvadePrice_Quantity { get { return (int)configFile["EvadePrice_Quantity"]; } }

        public int FallbackWorldSize { get { return (int)configFile["FallbackWorldSize"]; } }

        private static ItemDefinition FindOrDefault(string itemName, string fallbackName)
        {
            ItemDefinition def = ItemManager.FindItemDefinition(itemName);
            if (def == null) def = ItemManager.FindItemDefinition(fallbackName);
            return def;
        }

        public bool AllowBossDisconnect { get { return (bool)configFile["AllowBossDisconnect"];  } }
    }

    #region Player Grid Coordinates and Locators
    public interface ILocator
    {
        string GridReference(Component component, out bool moved);
    }

    public class RustIOLocator : ILocator
    {
        public RustIOLocator(int worldSize)
        {
            translate = worldSize / 2f;
            scale = worldSize / 26f;
        }

        private readonly float translate;
        private readonly float scale;

        public string GridReference(Component component, out bool moved)
        {
            var pos = component.transform.position;
            float x = pos.x + translate;
            float z = pos.z + translate;

            int lat = (int)Math.Floor(x / scale);
            char latChar = (char)('A' + lat);
            int lon = 26 - (int)Math.Floor(z / scale);

            moved = false; // We dont know, so just return false
            return string.Format("{0}{1}", latChar, lon);
        }
    }

    public class LocatorWithDelay : ILocator
    {
        public LocatorWithDelay(ILocator liveLocator, int updateInterval)
        {
            this.liveLocator = liveLocator;
            this.updateInterval = updateInterval;
        }

        private readonly ILocator liveLocator;
        private readonly int updateInterval;
        private readonly Dictionary<Component, ExpiringCoordinates> locations = new Dictionary<Component, ExpiringCoordinates>();

        public string GridReference(Component component, out bool moved)
        {
            ExpiringCoordinates item = null;
            bool m;

            if(locations.ContainsKey(component))
            {
                item = locations[component];
                if (item.Expires < DateTime.Now)
                {
                    string location = liveLocator.GridReference(component, out m);
                    item.GridChanged = item.Location != location;
                    item.Location = location;
                    item.Expires = DateTime.Now.AddSeconds(updateInterval);
                }
            }
            else
            {
                item = new ExpiringCoordinates();
                item.Location = liveLocator.GridReference(component, out m);
                item.GridChanged = true;
                item.Expires = DateTime.Now.AddSeconds(updateInterval);
                locations.Add(component, item);
            }

            moved = item.GridChanged;
            return item.Location;
        }
        
        class ExpiringCoordinates
        {
            public string Location { get; set; }
            public bool GridChanged { get; set; }
            public DateTime Expires { get; set; }
        }
    }
    #endregion

    public static class Text
    {
        public const string NoBoss = "There is no Boss - you can <color=lime>/claim</color> it\n";
        public const string YouAreTheBoss = "<color=red><size=17>You are the Boss</size></color>";
        public const string YouAreAnOutlaw = "<color=red><size=17>You are an Outlaw</size></color>";
        public const string CurrentBoss = "Current Boss: {0} at {1}\n";
        public const string CurrentTaxBox = "You can raid his tax box at {0}";
        public const string TaxRate = "Tax Rate: {0}%\n";
        public const string CofferItem = "\t{0}: {1}\n";
        public const string YourLocation = "You are at {0}";

        public const string Synopsis = "Devil's Island is controlled by one Boss. The Boss taxes gathering of resources, and everyone either pays up or kills him, or becomes an Outlaw";
        public const string PlayerCommandSection = "Player Commands:";
        public const string StatusCommandHint = "<color=lime>/status</color> displays your current status";
        public const string ClaimCommandHint = "<color=lime>/claim</color> if there is no Boss, you can take the job";
        public const string RebelCommandHint = "<color=lime>/rebel</color> makes you an outlaw - you don't pay tax, but the Boss can find you";
        public const string WhereCommandHint = "<color=lime>/where</color> displays your coordinates using RustIO coordinates";
        public const string BossCommandSection = "Boss Commands:";
        public const string TaxCommandHint = "<color=lime>/tax n</color> sets the tax rate";
        public const string LootCommandHint = "<color=lime>/loot</color> while looking at a box. Collected taxes will then be paid into this box.";
        public const string HeloStrikeCommandHint = "<color=lime>/helo <i>player</i></color> send a helo to <i>player</i>'s location. Costs {0} {1}";
        public const string RecruitCommandHint = "<color=lime>/recruit <i>player</i></color> invite <i>player</i> to be one of your henchmen";

        public const string Broadcast_ClaimAvailable = "No one is the Boss, use <color=lime>/claim</color> to become the Boss.";
        public const string Broadcast_HelpAdvice = "Confused? Type <color=lime>/rules</color> for help.";

        public const string Error_YourAreBoss = "You're already the Boss, dumbass";
        public const string Error_OtherIsBoss = "Kill the Boss ({0}) to become the Boss...";
        public const string Success_WelcomeNewBoss = "You are the Boss, for now. Use <color=lime>/loot</color> set set your tax storage box, and /tax to set the tax rate.";
        public const string Broadcast_FirstBoss = "{0} is now the new Boss. Kill him to become the Boss";

        public const string Error_Loot_NoBoss = "If you want the loot, use <color=lime>/claim</color> to become the Boss.";
        public const string Error_Loot_NotBoss = "You aren't the Boss. Kill {0} if you want the loot.";
        public const string Success_Looting = "Taxes will now be paid into this storage box.";

        public const string Error_TaxChange_NoBoss = "If you want to change the tax rate, use <color=lime>/claim</color> to become the Boss";
        public const string Error_TaxChange_NotBoss = "You aren't the Boss. Kill {0} if you want to change the tax rate";
        public const string Error_TaxChange_BadArgs = "usage: <color=lime>/tax n</color>, where n is between 3 and 45 percent.";
        public const string Broadcast_TaxIncrease = "The evil bastard {0} has increased your taxes to {1}%";
        public const string Broadcast_TaxDecrease = "{0} has lowered your taxes to {1}%";

        public const string Error_Rebel_IsTheBoss = "You're the Boss - you can't rebel against yourself!";
        public const string Error_Rebel_IsAlreadyOutlaw = "You're already on the Boss's shit list.";
        public const string Broadcast_NewOutlaw = "{0} no longer tolerates the Boss's greed, and refuses to pay tax. You can <color=lime>/rebel</color> too.";

        public const string Broadcast_BossSuicide = "Boss {0} could not take it any more. Use <color=lime>/claim</color> to become the new Boss";
        public const string Broadcast_NewBoss = "{0} killed {1} and is now the Boss. Kill him to become the Boss";

        public const string Broadcast_BossLocation_Moved = "Boss {0} is on the move, now at {1}.";
        public const string Broadcast_BossLocation_Static = "Boss {0} is camping out at {1}";
    }
}

namespace JetStream
{
    public class GameModePlugin<TConfig, TState> : RustPlugin
        where TConfig : IGameConfig, new()
        where TState : IGameState, new()
    {
        private Dictionary<string, Timer> timers = new Dictionary<string, Timer>();
        protected Dictionary<string, Timer> Timers { get { return timers;  } }

        protected TConfig GameConfig { get; private set; }
        protected TState State { get; private set; }

        protected override void LoadDefaultConfig()
        {
            Puts("Creating default configuration file");
            GameConfig = new TConfig();
            GameConfig.AttachConfigFile(this.Config);
            GameConfig.UpdateConfigFile();
        }

        [HookMethod("OnServerInitialized")]
        void base_OnServerInitialized()
        {
            if (GameConfig == null)
            {
                GameConfig = new TConfig();
                GameConfig.AttachConfigFile(this.Config);
                GameConfig.UpdateConfigFile();
            }

            State = new TState();  
            State.AttachConfig(GameConfig);

            Initialize();
        }

        [HookMethod("Unload")]
        void base_Unload()
        {
            Puts("Unload called");
            
            foreach (Timer t in timers.Values)
                t.Destroy();

            timers.Clear();
        }

        protected virtual void Initialize()
        { }

        protected bool GuardAgainst(Func<bool> condition, BasePlayer player, string errorMsgFormat, params object[] args)
        {
            if (condition())
            {
                PrintToChat(player, errorMsgFormat, args);
                return true;
            }
            else
                return false;
        }
    }

    public interface IGameConfig
    {
        void AttachConfigFile(DynamicConfigFile configFile);
        void UpdateConfigFile();
    }

    public interface IGameState
    {
        void AttachConfig(IGameConfig configFile);
    }

}

// --- End of file: DevilsIsland.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/InventoryCleaner.cs ---
// --- Original Local Path: InventoryCleaner.cs ---

using System.Collections.Generic;
using System.Reflection;
using System;
using System.Data;
using UnityEngine;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("Inventory Cleaner", "PaiN", "1.1.3", ResourceId = 0)]
    [Description("This plugin allows players with permission to clean all/their/target's inventory.")]
    class InventoryCleaner : RustPlugin
    {
		void Loaded() => permission.RegisterPermission(this.Name.ToLower()+".use", this);

      
		[ChatCommand("invcleanall")] 
		void cmdInvCleanAll(BasePlayer player, string cmd, string[] args)
		{
			
			string steamId = Convert.ToString(player.userID);
			if (permission.UserHasPermission(steamId, "inventorycleaner.use"))
			{
				if (args.Length == 1)
				{
					SendReply(player, "Commands: \n/invcleanme => Cleans your inventory.\n/invclean \"player\" => Cleans the target's inventory\n/invcleanall => Cleans everyones invetory.");
					return;
				}
				
					var players = BasePlayer.activePlayerList as List<BasePlayer>;
					foreach (BasePlayer current in BasePlayer.activePlayerList)
					{
						current.inventory.Strip();
						Puts(player.displayName + " has cleaned all the inventories!");
						PrintToChat("<color=orange>[Inventory Cleaner]</color> " + player.displayName + " has cleaned all the inventories (" + players.Count + ") !");
						SendReply(player, "<color=orange>[Inventory Cleaner]</color> " + "You have cleaned " + players.Count + " inventories!");
					
					}
					
				}
				else
				{
					SendReply(player, "You do not have permission to use this command!");
					return;		
				}
			}
		
		
		[ChatCommand("invclean")]
		void cmdInvClean(BasePlayer player, string cmd, string[] args)
		{
			string steamId = Convert.ToString(player.userID);
			if (permission.UserHasPermission(steamId, "inventorycleaner.use"))
			{
				if (args.Length == 0)
				{
					SendReply(player, "Commands: \n/invcleanme => Cleans your inventory.\n/invclean \"player\" => Cleans the target's inventory\n/invcleanall => Cleans everyones invetory.");
					return;
				}
				if (args.Length == 1)
				{
				var target = BasePlayer.Find(args[0]);
				target.inventory.Strip();
				SendReply(player, "<color=orange>[Inventory Cleaner]</color> " + "You have successfully cleaned <color=cyan>" + target.displayName + "</color>'s inventory!");
				}
			}
			else
			{
			SendReply(player, "You do not have permission to use this command!");
			return;
			}
		
		}
		
		[ChatCommand("invcleanme")]
		void cmdInvCleanMe(BasePlayer player, string cmd, string[] args)
		{
			if (args.Length == 0)
			{
				player.inventory.Strip();
				SendReply(player, "<color=orange>[Inventory Cleaner]</color> " + "You have cleaned your inventory!");
			}

		}
		
	}
}


// --- End of file: InventoryCleaner.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BuildingInfo.cs ---
// --- Original Local Path: BuildingInfo.cs ---

using System;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Building Info", "misticos", "1.0.7")]
    [Description("Scan buildings and get their owners")]
    class BuildingInfo : RustPlugin
    {
        #region Variables

        private const string PermScan = "buildinginfo.scan";
        private const string PermOwner = "buildinginfo.owner";
        private const string PermAuthed = "buildinginfo.authed";
        private const string PermBypass = "buildinginfo.bypass";
        
        #endregion
        
        #region Configuration
        
        private Configuration _config = new Configuration();

        public class Configuration
        {
            [JsonProperty(PropertyName = "Command Scan")]
            public string CommandScan = "scan";

            [JsonProperty(PropertyName = "Command Scan Owner")]
            public string CommandOwner = "owner";

            [JsonProperty(PropertyName = "Command Scan Authorized Players")]
            public string CommandAuthed = "authed";
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void LoadDefaultConfig() => _config = new Configuration();

        protected override void SaveConfig() => Config.WriteObject(_config);
        
        #endregion
        
        #region Commands

        private void CommandChatScan(BasePlayer player, string command, string[] args)
        {
            var id = player.UserIDString;
            if (!permission.UserHasPermission(id, PermScan))
            {
                player.ChatMessage(GetMsg("No Permissions", id));
                return;
            }

            var entity = GetBuilding(player);
            if (entity == null)
            {
                player.ChatMessage(GetMsg("Cannot Find", id));
                return;
            }

            var owner = BasePlayer.FindByID(entity.OwnerID);
            if (owner != null && permission.UserHasPermission(owner.UserIDString, PermBypass))
            {
                player.ChatMessage(GetMsg("Scan Unavailable", id));
                return;
            }

            var entities = entity.GetBuildingPrivilege()?.GetBuilding()?.buildingBlocks;
            if (entities == null || entities.Count == 0)
            {
                player.ChatMessage(GetMsg("Cannot Find", id));
                return;
            }

            var dict = new Dictionary<string, ushort>();
            var entitiesCount = entities.Count;
            for (var i = 0; i < entitiesCount; i++)
            {
                var ent = entities[i];
                if (permission.UserHasPermission(ent.OwnerID.ToString(), PermBypass))
                    continue;

                var shortname = ent.ShortPrefabName + $" ({ent.currentGrade.gradeBase.type})";
                if (dict.ContainsKey(shortname))
                    // ReSharper disable once RedundantAssignment
                    dict[shortname]++;
                else
                    dict[shortname] = 1;
            }

            var ex = GetMsg("Scan Info", id);
            var builder = new StringBuilder(GetMsg("Scan Title", id));
            foreach (var el in dict)
            {
                builder.Append(ex);
                builder = builder.Replace("{name}", el.Key).Replace("{amount}", el.Value.ToString());
            }

            player.ChatMessage(builder.ToString());
        }

        private void CommandChatOwner(BasePlayer player, string command, string[] args)
        {
            var id = player.UserIDString;
            if (!permission.UserHasPermission(id, PermOwner))
            {
                player.ChatMessage(GetMsg("No Permissions", id));
                return;
            }

            var entity = GetBuilding(player);
            if (entity == null)
            {
                player.ChatMessage(GetMsg("Cannot Find", id));
                return;
            }

            var owner = covalence.Players.FindPlayerById(entity.OwnerID.ToString());
            if (owner == null)
            {
                player.ChatMessage(GetMsg("Cannot Find Owner", id));
                return;
            }

            if (permission.UserHasPermission(owner.Id, PermBypass))
            {
                player.ChatMessage(GetMsg("Owner Unavailable", id));
                return;
            }

            player.ChatMessage(GetMsg("Owner Info", id).Replace("{name}", owner.Name)
                .Replace("{id}", owner.Id));
        }

        private void CommandChatAuthed(BasePlayer player, string command, string[] args)
        {
            var id = player.UserIDString;
            if (!permission.UserHasPermission(id, PermAuthed))
            {
                player.ChatMessage(GetMsg("No Permissions", id));
                return;
            }

            var entity = GetBuilding(player);
            if (entity == null)
            {
                player.ChatMessage(GetMsg("Cannot Find", id));
                return;
            }

            var privilege = entity.GetBuildingPrivilege();
            if (privilege == null)
            {
                player.ChatMessage(GetMsg("Cannot Find Authed", id));
                return;
            }

            if (!privilege.AnyAuthed())
            {
                player.ChatMessage(GetMsg("Authed Zero", id));
                return;
            }

            var ex = GetMsg("Authed Info", id);
            var builder = new StringBuilder(GetMsg("Authed Title", id));
            var i = 0;
            foreach (var authorizedPlayer in privilege.authorizedPlayers)
            {
                builder.Append(ex);
                builder = builder
                    .Replace("{number}", $"{++i}")
                    .Replace("{name}", authorizedPlayer.username)
                    .Replace("{id}", authorizedPlayer.userid.ToString());
            }
            
            player.ChatMessage(builder.ToString());
        }

        #endregion
        
        #region Hooks

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                { "No Permissions", "You don't have enough permissions." },
                { "Scan Title", "Scan result:" },
                { "Scan Info", "\n{name} x{amount}" },
                { "Scan Unavailable", "Sorry, there was an error. You cannot scan this building." },
                { "Owner Info", "Owner: {name} ({id})" },
                { "Owner Unavailable", "Sorry, there was an error. You cannot get an owner of this building." },
                { "Authed Title", "Authed Players:" },
                { "Authed Info", "\n#{number} - {name} ({id})" },
                { "Authed Unavailable", "" },
                { "Authed Zero", "Nobody is authed here." },
                { "Cannot Find", "Excuse me, where is the building you are looking for?" },
                { "Cannot Find Owner", "Sorry, I don't know who owns this building." },
                { "Cannot Find Authed", "I don't know who is authed there." }
            }, this);
        }

        // ReSharper disable once UnusedMember.Local
        private void Init()
        {
            LoadConfig();

            permission.RegisterPermission(PermScan, this);
            permission.RegisterPermission(PermOwner, this);
            permission.RegisterPermission(PermAuthed, this);
            permission.RegisterPermission(PermBypass, this);

            cmd.AddChatCommand(_config.CommandScan, this, CommandChatScan);
            cmd.AddChatCommand(_config.CommandOwner, this, CommandChatOwner);
            cmd.AddChatCommand(_config.CommandAuthed, this, CommandChatAuthed);
        }

        #endregion
        
        #region Helpers

        private string GetMsg(string key, string userId = null) => lang.GetMessage(key, this, userId);

        private BaseEntity GetBuilding(BasePlayer player)
        {
            RaycastHit info;
            Physics.Raycast(player.eyes.HeadRay(), out info, LayerMask.GetMask("Construction"));
            return info.GetEntity();
        }

        #endregion
    }
}

// --- End of file: BuildingInfo.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RustMenu.cs ---
// --- Original Local Path: RustMenu.cs ---

﻿﻿using System;
 using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
 using ProtoBuf;
 using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Rust Menu", "Hougan", "0.0.1")]
    public class RustMenu : RustPlugin
    {
        #region Variables

        private Dictionary<BasePlayer, MenuPoint> OpenMenu = new Dictionary<BasePlayer, MenuPoint>();

        #endregion
        
        #region Classes

        private class Notification
        {
            public string Title;
            public string Information;
            public string Color;

            public int Duration; 
            public string SoundEffect;
            public string ImageID;
            public string Command;
        }
        
        private static class Interface
        {
            public static string External = "UI_RustMenu_External";
            public static string Internal = "UI_RustMenu_Internal";
            public static string InterInternal = "InterInternal";
            public static string PrivPoint = External + ".PrivPoints";
            public static string MenuPoint = External + ".MenuPoints";
            public static string Header = External + ".Header";
            public static string NotificationImage = "124";
            
            public static void DrawPrivileges(BasePlayer player)
            {
                CuiElementContainer container = new CuiElementContainer();

                float marginTop = -70;
                
                float originalHeight = 30;
                float freeHeight = 20;
                
                float padding = 5; 

                var result = (object) _.plugins.Find("Grant").Call("GetGroups", player.userID);
                if (result == null) return;

                var fetch = (Dictionary<string, int>) result; 
                  
                foreach (var point in fetch.Where(p => Settings.GroupImages.ContainsKey(p.Key)))
                {
                    CuiHelper.DestroyUi(player, PrivPoint + point.Key);

                    float elementHeight = originalHeight;
                    container.Add(new CuiPanel
                    {
                        RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = $"10 {marginTop - elementHeight}", OffsetMax = $"200 {marginTop}" }, 
                        Image = { Color = "1 1 1 0" }
                    }, PrivPoint, PrivPoint + point.Key);

                    container.Add(new CuiElement
                    {
                        Parent = PrivPoint + point.Key,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (string) _.ImageLibrary.Call("GetImage", "H.Image"), Material = "", Color = TimeSpan.FromSeconds(point.Value).Days < 2 ? "1 0.5 0.5 0.2" : "1 1 1 0.2"},
                            new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "15 0", OffsetMax = "0 0"}
                        }
                    });

                    container.Add(new CuiElement
                    {
                        Parent = PrivPoint + point.Key,
                        Components =
                        {
                            new CuiRawImageComponent {Png = (string) _.ImageLibrary.Call("GetImage", "G" + point.Key)},
                            new CuiRectTransformComponent {AnchorMin = "0 0", AnchorMax = "0 1", OffsetMax = "30 0"}
                        }
                    });

                    container.Add(new CuiLabel
                    {
                        RectTransform = {AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "35 0", OffsetMax = "0 0"},
                        Text = {Text = $"ОСТАЛОСЬ: {GetTimeFromSecs(point.Value)}", Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf", FontSize = 14, Color = TimeSpan.FromSeconds(point.Value).Days < 2 ? "0.75686 0.392156 0.35686 1" : "0.81 0.77 0.74 1"}
                    }, PrivPoint + point.Key);

                    marginTop -= elementHeight + padding;
                }

                CuiHelper.AddUi(player, container);
            }

            private static string GetTimeFromSecs(int sec)
            {
                var span = TimeSpan.FromSeconds(sec);
                var result = $"{(span.Days > 0 ? span.Days + "д" + " " + span.Hours + "ч" : (span.Hours > 0 ? span.Hours + "ч" + " " + span.Minutes + "м" : span.Minutes + " мин"))}";
                
                return result;
            }
            public static void DrawMenuWithoutPoints(BasePlayer player)
            {
                CuiElementContainer container = new CuiElementContainer();

                float marginTop = -250;
                
                float originalHeight = 35;
                float freeHeight = 20;
                
                float padding = 5;
                 
                foreach (var point in Settings.Points)
                {
                    CuiHelper.DestroyUi(player, MenuPoint + Settings.Points.IndexOf(point) + ".OverflowText");

                    float elementHeight = point.DisplayName.Length > 0 ? originalHeight : freeHeight;

                    marginTop -= elementHeight + padding;
                    string text = point.TextMethod; 
                    if (!string.IsNullOrEmpty(point.TextMethod)) 
                    { 
                        if (text.StartsWith("call"))
                        {
                            if (text.Contains("report"))
                            {
                                text = (string) _.plugins.Find("ReportManager").Call("GetCooldown", player);
                                if (text == "")
                                {
                                    CuiHelper.DestroyUi(player, MenuPoint + Settings.Points.IndexOf(point) + ".Overflow");
                                    continue;
                                }

                                text = text.Substring(4, 4);
                            } 
                            if (text.Contains("store"))
                            {
                                text = (string) _.plugins.Find("RustStore").Call("GetAmount", player);
                                if (text == "")
                                {
                                    CuiHelper.DestroyUi(player, MenuPoint + Settings.Points.IndexOf(point) + ".Overflow");
                                    continue;
                                }
                            }
                        } 
                        
                        container.Add(new CuiLabel
                            {
                                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                                Text = { Text = text, Align = TextAnchor.MiddleCenter, FontSize = 10, Font = "robotocondensed-bold.ttf", Color = "1 1 1 0.7"}
                            }, MenuPoint + Settings.Points.IndexOf(point) + ".Overflow" ,MenuPoint + Settings.Points.IndexOf(point) + ".OverflowText"); 
                    }  
                }

                CuiHelper.AddUi(player, container);
            }
            
            public static void DrawMenuPoints(BasePlayer player, MenuPoint choosed = null)
            {
                player.EndLooting();
                CuiElementContainer container = new CuiElementContainer();

                float marginTop = -250;
                
                float originalHeight = 35;
                float freeHeight = 20;
                
                float padding = 5;
                  
                foreach (var point in Settings.Points)
                {
                    CuiHelper.DestroyUi(player, MenuPoint + Settings.Points.IndexOf(point));

                    string color = point == choosed ? "0.929 0.882 0.847 1" : "0.929 0.882 0.847 0.2";
                    if (point.DrawMethod?.Contains("report") ?? false)
                    {
                        string text = (string) _.plugins.Find("ReportManager").Call("GetCooldown", player);
                        if (text != "") color = "0.81 0.77 0.74 0.3";
                    }
                    float elementHeight = point.DisplayName.Length > 0 ? originalHeight : freeHeight;
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = $"70 {marginTop - elementHeight}", OffsetMax = $"300 {marginTop}" }, 
                        Button = { Command = $"UI_RM_Handler choose {Settings.Points.IndexOf(point)}", Color = "0 0 0 0" },
                        Text = { Text = point.DisplayName, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-bold.ttf", FontSize = 26, Color = color }
                    }, MenuPoint, MenuPoint + Settings.Points.IndexOf(point));


                    marginTop -= elementHeight + padding;
                    if (!string.IsNullOrEmpty(point.TextMethod)) 
                    { 
                        string text = point.TextMethod;
                        if (text.StartsWith("call"))
                        {
                            if (text.Contains("report"))
                            {
                                text = (string) _.plugins.Find("ReportManager").Call("GetCooldown", player);
                                if (text == "") continue;

                                text = text.Substring(4, 4);
                            } 
                            if (text.Contains("store"))
                            {
                                text = (string) _.plugins.Find("RustStore").Call("GetAmount", player);
                                if (text == "") continue;
                            }
                        }
                        
                        container.Add(new CuiPanel
                        {
                            RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = $"{-11 + point.TextMargin} -11", OffsetMax = $"{11 + point.TextMargin} 1" },
                            Image = { Color = "0.73 0.3 0.27 1" } 
                        }, MenuPoint + Settings.Points.IndexOf(point), MenuPoint + Settings.Points.IndexOf(point) + ".Overflow");
                        
                        container.Add(new CuiLabel
                        {
                            RectTransform 