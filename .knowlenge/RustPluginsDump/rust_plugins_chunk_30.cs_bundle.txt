skinID = vehicleSettings.Skin;
            newEntity.Spawn();

            if (planner.GetItem() != null && !planner.GetItem().name.EndsWith("   "))
            {
                var baseVehicle = newEntity.GetComponent<BaseVehicle>();
                if (baseVehicle != null)
                {
                    var fuelSystem = baseVehicle.GetFuelSystem();
                    if (fuelSystem != null) fuelSystem.AddFuel(vehicleSettings.Fuel);
                }
            }

            if (vehicleSettings.NeedCarParts)
                if (newEntity.TryGetComponent<ModularCar>(out var carComponent))
                    AddEngineParts(carComponent, vehicleSettings.EngineParts);

            if (!vehicleSettings.EnableDecay)
                if (newEntity.TryGetComponent<DecayEntity>(out var decayEntity))
                    UnityEngine.Object.Destroy(decayEntity);
        }

        private bool CanPlaceVehicle(Vector3 pos, float radius = 1f)
        {
            var hits = Physics.OverlapSphereNonAlloc(pos, radius, Vis.colBuffer, 1 << 18);

            for (var i = 0; i < hits; i++)
            {
                var col = Vis.colBuffer[i];
                if (col.gameObject != null)
                    return false;
            }

            return true;
        }

        private bool CanPlaceRecycler(BaseEntity entity, BasePlayer player)
        {
            // Check if the recycler can be placed at the current location
            // For demonstration purposes, we assume that placing a recycler within a monument is not allowed
            return !IsInMonument(entity.transform.position);
        }

        private bool IsInMonument(Vector3 position)
        {
            // This is a simple placeholder for checking if a position is within a monument.
            // You would need to replace this with actual game logic to check for monuments.
            // For example, you might need to use TerrainMeta.Path.Monuments or similar.
            foreach (var monument in TerrainMeta.Path.Monuments)
                if (monument.Bounds.Contains(position))
                    return true;

            return false;
        }

        private object CanCombineDroppedItem(DroppedItem item, DroppedItem targetItem)
        {
            if (_config.Vehicles.Any(x => x.Value.Skin == item.GetItem().skin)) return false;

            return null;
        }

        private object CanStackItem(Item item, Item targetItem)
        {
            if (_config.Vehicles.Any(x => x.Value.Skin == item.skin)) return false;

            return null;
        }

        #endregion

        #region Utils

        private static string HexToCuiColor(string hex, float alpha = 100)
        {
            if (string.IsNullOrEmpty(hex)) hex = "#FFFFFF";

            var str = hex.Trim('#');
            if (str.Length != 6) throw new Exception(hex);
            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);

            return $"{(double)r / 255} {(double)g / 255} {(double)b / 255} {alpha / 100}";
        }

        private Vector3 GetPositionFromPlayer(BasePlayer player, float distance = 1f)
        {
            var rotation = player.GetNetworkRotation();

            var forward = rotation * Vector3.forward;
            var straight = Vector3.Cross(Vector3.Cross(Vector3.up, forward), Vector3.up).normalized;

            var buff = new Vector3(player.transform.position.x + straight.x * distance,
                TerrainMeta.HeightMap.GetHeight(player.transform.position + straight * distance),
                player.transform.position.z + straight.z * distance);

            return buff;
        }

        #endregion

        #region Config

        private ConfigData _config;

        internal class VehicleInfoConfig
        {
            [JsonProperty("Sound on purchase", Order = 0)]
            public bool UseSoundOnPurchase;

            [JsonProperty("Order", Order = -1)] public int Order;
            [JsonProperty("Show", Order = 0)] public bool Show;
            [JsonProperty("Name", Order = 1)] public string Name;
            [JsonProperty("Prefab", Order = 2)] public string Prefab;

            [JsonProperty("Image link", Order = 3)]
            public string Image;

            [JsonProperty("Spawn distance", Order = 4)]
            public float SpawnDistance;

            [JsonProperty("Fuel", Order = 5)] public int Fuel;

            [JsonProperty("Currency: 0 - item, 1 - Economics, 2 - Server Rewards", Order = 6)]
            public byte SellCurrency;

            [JsonProperty("If vehicle selling for item type him shortname", Order = 7)]
            public string Shortname;

            [JsonProperty("Price", Order = 8)] public int Price;
            [JsonProperty("Skin", Order = 9)] public ulong Skin;
            [JsonProperty("Command", Order = 10)] public string Command;

            [JsonProperty("DeployableItemId", Order = 11)]
            public int DeployableItemId;

            [JsonProperty("Need add engine parts if it possible?", Order = 12)]
            public bool NeedCarParts = true;

            [JsonProperty("Engine parts", Order = 13)]
            public List<string> EngineParts;

            [JsonProperty("Cooldown to buy (in seconds)", Order = -2)]
            public int Cooldown;

            [JsonProperty("Pickup type (0 - command, 1 - hammer)", Order = -3)]
            public int PickupType;

            [JsonProperty("Can pickup?", Order = -4)]
            public bool CanPickup;

            [JsonProperty("Can recall?", Order = -5)]
            public bool CanCallback;

            [JsonProperty("Recall price", Order = -6)]
            public int RecallCost;

            [JsonProperty("Recall cost need?", Order = -7)]
            public bool RecallCostNeed;

            [JsonProperty("Pickup price", Order = -8)]
            public int PickupPrice;

            [JsonProperty("Enable decay?", Order = -9)]
            public bool EnableDecay;

            [JsonProperty("Permission (still empty if not need) ex. vehiclebuy.YOURPERMISSIONNAME", Order = -10)]
            public string Permission;

            [JsonProperty("Maximum number of purchases of one vehicle by one player", Order = -11)]
            public int MaxPurchases;

            public bool CanPlayerBuy(BasePlayer player)
            {
                return string.IsNullOrEmpty(Permission) || player.IPlayer.HasPermission(Permission);
            }
        }

        internal class VendingMachinesConfig
        {
            [JsonProperty("Bandit Camp vending machine")]
            public bool BanditCampSpawnMachine;

            [JsonProperty("Outpost vending machine")]
            public bool OutpostSpawnMachine;

            [JsonProperty("Bandit Camp products")] public List<VMOrder> BanditCampOrders;
            [JsonProperty("Outpost products")] public List<VMOrder> OutpostOrders;

            [JsonProperty("Fishing village A vending machine")]
            public bool FishingVillageASpawnMachine;

            [JsonProperty("Fishing village B vending machine")]
            public bool FishingVillageBSpawnMachine;

            [JsonProperty("Fishing village C vending machine")]
            public bool FishingVillageCSpawnMachine;

            [JsonProperty("Fishing Village C products")]
            public List<VMOrder> FishingVillageCOrders;

            [JsonProperty("Fishing Village A products")]
            public List<VMOrder> FishingVillageAOrders;

            [JsonProperty("Fishing Village B products")]
            public List<VMOrder> FishingVillageBOrders;
        }

        internal class VMOrder
        {
            [JsonProperty("Vehicle key from config")]
            public string VehicleKey;

            [JsonProperty("Item (shortname)")] public string Shortname;
            [JsonProperty("Price")] public int Price;

            public VehicleInfoConfig GetVehicle()
            {
                return Instance._config.Vehicles[VehicleKey] ??
                       throw new ArgumentException(
                           $"Key {VehicleKey} not found in config");
            }
        }

        public class ConfigData
        {
            [JsonProperty("Commands", Order = -1)]
            public List<string> Commands;

            [JsonProperty("Currency name economics", Order = 0)]
            public string CurrencyName;

            [JsonProperty("Currency name Server Rewards", Order = 1)]
            public string CurrencyNameSR;

            [JsonProperty("Currency name Bank System", Order = 1)]
            public string CurrencyNameBS;

            [JsonProperty("Pickup distance", Order = 2)]
            public float PickupRadius;

            [JsonProperty("Disable vehicles damage?", Order = 2)]
            public bool DisableVehiclesDamage = false;

            [JsonProperty("Vending machines", Order = 2)]
            public VendingMachinesConfig VendingMachines;

            [JsonProperty("Vehicles", Order = 3)]
            public Dictionary<string, VehicleInfoConfig> Vehicles;

            [JsonProperty(Order = 200)]
            public VersionNumber Version;
        }

        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                VendingMachines = new VendingMachinesConfig
                {
                    FishingVillageASpawnMachine = true,
                    FishingVillageBSpawnMachine = true,
                    FishingVillageCSpawnMachine = true,
                    FishingVillageAOrders = new List<VMOrder>
                    {
                        new()
                        {
                            VehicleKey = "copter",
                            Shortname = "scrap",
                            Price = 1000
                        },
                        new()
                        {
                            VehicleKey = "scrapheli",
                            Shortname = "scrap",
                            Price = 999
                        },
                        new()
                        {
                            VehicleKey = "attackheli",
                            Shortname = "sulfur.ore",
                            Price = 200
                        }
                    },
                    FishingVillageBOrders = new List<VMOrder>
                    {
                        new()
                        {
                            VehicleKey = "copter",
                            Shortname = "scrap",
                            Price = 1000
                        },
                        new()
                        {
                            VehicleKey = "scrapheli",
                            Shortname = "scrap",
                            Price = 999
                        },
                        new()
                        {
                            VehicleKey = "attackheli",
                            Shortname = "sulfur.ore",
                            Price = 200
                        }
                    },
                    FishingVillageCOrders = new List<VMOrder>
                    {
                        new()
                        {
                            VehicleKey = "copter",
                            Shortname = "scrap",
                            Price = 1000
                        },
                        new()
                        {
                            VehicleKey = "scrapheli",
                            Shortname = "scrap",
                            Price = 999
                        },
                        new()
                        {
                            VehicleKey = "attackheli",
                            Shortname = "sulfur.ore",
                            Price = 200
                        }
                    },
                    BanditCampSpawnMachine = true,
                    BanditCampOrders = new List<VMOrder>
                    {
                        new()
                        {
                            VehicleKey = "copter",
                            Shortname = "scrap",
                            Price = 1000
                        },
                        new()
                        {
                            VehicleKey = "scrapheli",
                            Shortname = "scrap",
                            Price = 999
                        },
                        new()
                        {
                            VehicleKey = "attackheli",
                            Shortname = "sulfur.ore",
                            Price = 200
                        }
                    },
                    OutpostSpawnMachine = true,
                    OutpostOrders = new List<VMOrder>
                    {
                        new()
                        {
                            VehicleKey = "car2",
                            Shortname = "scrap",
                            Price = 1000
                        },
                        new()
                        {
                            VehicleKey = "car1",
                            Shortname = "scrap",
                            Price = 999
                        },
                        new()
                        {
                            VehicleKey = "tugboat",
                            Shortname = "sulfur.ore",
                            Price = 200
                        }
                    }
                },
                Commands = new List<string>
                {
                    "vehiclebuy",
                    "vb",
                    "vehicle"
                },
                PickupRadius = 5f,
                CurrencyNameBS = "BSTEST",
                CurrencyNameSR = "SRTEST",
                CurrencyName = "ECOTEST",
                Vehicles = new Dictionary<string, VehicleInfoConfig>
                {
                    ["copter"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 1,
                        Show = true,
                        Name = "Minicopter",
                        Prefab = "assets/content/vehicles/minicopter/minicopter.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/minicopter.png",
                        SpawnDistance = 5f,
                        Fuel = 53,
                        SellCurrency = 2,
                        Shortname = "scrap",
                        Price = 550,
                        Skin = 3036041060,
                        Command = "copter.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["scrapheli"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 2,
                        Show = true,
                        Name = "Scrap Transport Helicopter",
                        Prefab = "assets/content/vehicles/scrap heli carrier/scraptransporthelicopter.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/scrap-heli.png",
                        SpawnDistance = 10f,
                        Fuel = 522,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 850,
                        Skin = 3033922797,
                        Command = "scrapi.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["attackheli"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 3,
                        Show = true,
                        Name = "Attack Helicopter",
                        Prefab = "assets/content/vehicles/attackhelicopter/attackhelicopter.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/attack-helicopter.png",
                        SpawnDistance = 10f,
                        Fuel = 522,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 1200,
                        Skin = 3036032642,
                        Command = "attack.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["car2"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 4,
                        Show = true,
                        Name = "Car 2",
                        Prefab = "assets/content/vehicles/modularcar/2module_car_spawned.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/modular-vehicle-2.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 300,
                        Skin = 3051397208,
                        Command = "car2.add",
                        DeployableItemId = 833533164,
                        NeedCarParts = true,
                        EngineParts = new List<string>
                        {
                            "carburetor3",
                            "crankshaft3",
                            "piston3",
                            "valve3",
                            "sparkplug3"
                        },
                        Permission = ""
                    },
                    ["car3"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 5,
                        Show = true,
                        Name = "Car 3",
                        Prefab = "assets/content/vehicles/modularcar/3module_car_spawned.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/modular-vehicle-3.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 600,
                        Skin = 3051397420,
                        Command = "car3.add",
                        DeployableItemId = 833533164,
                        NeedCarParts = true,
                        EngineParts = new List<string>
                        {
                            "carburetor3",
                            "crankshaft3",
                            "piston3",
                            "valve3",
                            "sparkplug3"
                        },
                        Permission = ""
                    },
                    ["car4"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 6,
                        Show = true,
                        Name = "Car 4",
                        Prefab = "assets/content/vehicles/modularcar/4module_car_spawned.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/modular-vehicle-4.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 900,
                        Skin = 3051397599,
                        Command = "car4.add",
                        DeployableItemId = 833533164,
                        NeedCarParts = true,
                        EngineParts = new List<string>
                        {
                            "carburetor3",
                            "crankshaft3",
                            "piston3",
                            "valve3",
                            "sparkplug3"
                        },
                        Permission = ""
                    },
                    ["tugboat"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 7,
                        Show = true,
                        Name = "TugBoat",
                        Prefab = "assets/content/vehicles/boats/tugboat/tugboat.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/tugboat.png",
                        SpawnDistance = 15f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 1500,
                        Skin = 3036456691,
                        Command = "tugboat.add",
                        DeployableItemId = -697981032,
                        Permission = ""
                    },
                    ["rowboat"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 8,
                        Show = true,
                        Name = "RowBoat",
                        Prefab = "assets/content/vehicles/boats/rowboat/rowboat.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/rowboat.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 2,
                        Shortname = "scrap",
                        Price = 450,
                        Skin = 3036112261,
                        Command = "rowboat.add",
                        DeployableItemId = -697981032,
                        Permission = ""
                    },
                    ["rhib"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 9,
                        Show = true,
                        Name = "RHIB",
                        Prefab = "assets/content/vehicles/boats/rhib/rhib.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/rhib.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 585,
                        Skin = 3036112776,
                        Command = "rhib.add",
                        DeployableItemId = -697981032,
                        Permission = ""
                    },
                    ["solosub"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 10,
                        Show = true,
                        Name = "SoloSub",
                        Prefab = "assets/content/vehicles/submarine/submarinesolo.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/submarine-solo.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 555,
                        Skin = 3036453289,
                        Command = "solosub.add",
                        DeployableItemId = -697981032,
                        Permission = ""
                    },
                    ["duosub"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 11,
                        Show = true,
                        Name = "DuoSub",
                        Prefab = "assets/content/vehicles/submarine/submarineduo.entity.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/submarine-duo.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 750,
                        Skin = 3036453387,
                        Command = "duosub.add",
                        DeployableItemId = -697981032,
                        Permission = ""
                    },
                    ["horse"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 12,
                        Show = true,
                        Name = "Horse",
                        Prefab = "assets/content/vehicles/horse/ridablehorse2.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/ridable-horse.png",
                        SpawnDistance = 5f,
                        Fuel = 0,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 150,
                        Skin = 3036456786,
                        Command = "horse.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["snowmobile"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 13,
                        Show = true,
                        Name = "SnowMobile",
                        Prefab = "assets/content/vehicles/snowmobiles/snowmobile.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/snowmobile.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 600,
                        Skin = 3036453555,
                        Command = "snowmobile.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["tomaha"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 14,
                        Show = true,
                        Name = "Tomaha",
                        Prefab = "assets/content/vehicles/snowmobiles/tomahasnowmobile.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/snowmobiletomaha.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 100,
                        Skin = 3036453663,
                        Command = "tomaha.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["hotairballoon"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 15,
                        Show = true,
                        Name = "HotairBalloon",
                        Prefab = "assets/prefabs/deployable/hot air balloon/hotairballoon.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/balloon.png",
                        SpawnDistance = 5f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 300,
                        Skin = 3036454299,
                        Command = "hotairballoon.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["recycler"] = new()
                    {
                        UseSoundOnPurchase = true,
                        Order = 16,
                        Show = true,
                        Name = "Recycler",
                        Prefab = "assets/bundled/prefabs/static/recycler_static.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/recycler.png",
                        SpawnDistance = 2f,
                        Fuel = 52,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 1000,
                        Skin = 3036111302,
                        Command = "recycler.add",
                        DeployableItemId = 833533164,
                        Permission = ""
                    },
                    ["pedalbike"] = new VehicleInfoConfig
                    {
                        UseSoundOnPurchase = true,
                        Order = 17,
                        Show = true,
                        Name = "pedalbike",
                        Prefab = "assets/content/vehicles/bikes/pedalbike.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/pedalbike.png",
                        SpawnDistance = 5,
                        Fuel = 100,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 500,
                        Skin = 3281191605,
                        Command = "pedalbike.add",
                        DeployableItemId = 833533164,
                        NeedCarParts = false,
                        EngineParts = null,
                        Cooldown = 0,
                        PickupType = 0,
                        CanPickup = false,
                        CanCallback = false,
                        RecallCost = 0,
                        RecallCostNeed = false,
                        PickupPrice = 0,
                        EnableDecay = false,
                        Permission = null
                    },
                    ["motorbike"] = new VehicleInfoConfig
                    {
                        UseSoundOnPurchase = true,
                        Order = 18,
                        Show = true,
                        Name = "motorbike",
                        Prefab = "assets/content/vehicles/bikes/motorbike.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/motorbike.png",
                        SpawnDistance = 5,
                        Fuel = 100,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 1000,
                        Skin = 3281191090,
                        Command = "motorbike.add",
                        DeployableItemId = 833533164,
                        NeedCarParts = false,
                        EngineParts = null,
                        Cooldown = 0,
                        PickupType = 0,
                        CanPickup = false,
                        CanCallback = false,
                        RecallCost = 0,
                        RecallCostNeed = false,
                        PickupPrice = 0,
                        EnableDecay = false,
                        Permission = null
                    },
                    ["motorbike_sidecar"] = new VehicleInfoConfig
                    {
                        UseSoundOnPurchase = true,
                        Order = 19,
                        Show = true,
                        Name = "motorbike_sidecar",
                        Prefab = "assets/content/vehicles/bikes/motorbike_sidecar.prefab",
                        Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/motorbike-sidecar.png",
                        SpawnDistance = 5,
                        Fuel = 100,
                        SellCurrency = 0,
                        Shortname = "scrap",
                        Price = 1500,
                        Skin = 3281192470,
                        Command = "motorbike_sidecar",
                        DeployableItemId = 833533164,
                        NeedCarParts = false,
                        EngineParts = null,
                        Cooldown = 0,
                        PickupType = 0,
                        CanPickup = false,
                        CanCallback = false,
                        RecallCost = 0,
                        RecallCostNeed = false,
                        PickupPrice = 0,
                        EnableDecay = false,
                        Permission = null
                    }
                }
            };
            SaveConfig(config);
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<ConfigData>();

            if (_config.Version == null)
                _config.Version = new VersionNumber(1, 0, 0);

            if (_config.Version < new VersionNumber(1, 1, 4))
            {
                _config.Vehicles.TryAdd("pedalbike", new VehicleInfoConfig
                {
                    UseSoundOnPurchase = true,
                    Order = 17,
                    Show = true,
                    Name = "pedalbike",
                    Prefab = "assets/content/vehicles/bikes/pedalbike.prefab",
                    Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/pedalbike.png",
                    SpawnDistance = 5,
                    Fuel = 100,
                    SellCurrency = 0,
                    Shortname = "scrap",
                    Price = 500,
                    Skin = 3281191605,
                    Command = "pedalbike.add",
                    DeployableItemId = 833533164,
                    NeedCarParts = false,
                    EngineParts = null,
                    Cooldown = 0,
                    PickupType = 0,
                    CanPickup = false,
                    CanCallback = false,
                    RecallCost = 0,
                    RecallCostNeed = false,
                    PickupPrice = 0,
                    EnableDecay = false,
                    Permission = null
                });

                _config.Vehicles.TryAdd("motorbike", new VehicleInfoConfig
                {
                    UseSoundOnPurchase = true,
                    Order = 18,
                    Show = true,
                    Name = "motorbike",
                    Prefab = "assets/content/vehicles/bikes/motorbike.prefab",
                    Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/motorbike.png",
                    SpawnDistance = 5,
                    Fuel = 100,
                    SellCurrency = 0,
                    Shortname = "scrap",
                    Price = 1000,
                    Skin = 3281191090,
                    Command = "motorbike.add",
                    DeployableItemId = 833533164,
                    NeedCarParts = false,
                    EngineParts = null,
                    Cooldown = 0,
                    PickupType = 0,
                    CanPickup = false,
                    CanCallback = false,
                    RecallCost = 0,
                    RecallCostNeed = false,
                    PickupPrice = 0,
                    EnableDecay = false,
                    Permission = null
                });

                _config.Vehicles.TryAdd("motorbike_sidecar", new VehicleInfoConfig
                {
                    UseSoundOnPurchase = true,
                    Order = 19,
                    Show = true,
                    Name = "motorbike_sidecar",
                    Prefab = "assets/content/vehicles/bikes/motorbike_sidecar.prefab",
                    Image = "https://gitlab.com/TheMevent/PluginsStorage/raw/main/Images/VehicleBuy/motorbike-sidecar.png",
                    SpawnDistance = 5,
                    Fuel = 100,
                    SellCurrency = 0,
                    Shortname = "scrap",
                    Price = 1500,
                    Skin = 3281192470,
                    Command = "motorbike_sidecar",
                    DeployableItemId = 833533164,
                    NeedCarParts = false,
                    EngineParts = null,
                    Cooldown = 0,
                    PickupType = 0,
                    CanPickup = false,
                    CanCallback = false,
                    RecallCost = 0,
                    RecallCostNeed = false,
                    PickupPrice = 0,
                    EnableDecay = false,
                    Permission = null
                });

                _config.Version = Version;
                PrintWarning("Config was updated");
            }

            if (_config.Version < new VersionNumber(2, 1, 3))
            {
                foreach (var (_, vehicle) in _config.Vehicles)
                {
                    if (vehicle.Prefab.Contains("assets/rust.ai/nextai/testridablehorse.prefab"))
                        vehicle.Prefab = "assets/content/vehicles/horse/ridablehorse2.prefab";
                }

                _config.Version = Version;
                PrintWarning("Config was updated");
            }

            if (_config.Version < new VersionNumber(2, 1, 4))
            {
                if (string.IsNullOrEmpty(_config.CurrencyNameBS))
                    _config.CurrencyNameBS = "BSTEST";

                _config.Version = Version;
                PrintWarning("Config was updated");
            }

            SaveConfig(_config);
        }

        private void SaveConfig(object config)
        {
            Config.WriteObject(config, true);
        }

        #endregion

        #region Data

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject($"{Title}/cooldowns", _players);
        }

        private void LoadData()
        {
            _players = Interface.Oxide?.DataFileSystem?.ReadObject<Dictionary<ulong, PlayerData>>($"{Title}/cooldowns")
                       ?? new Dictionary<ulong, PlayerData>();
        }

        #endregion

        #region UI Configuration

        public enum ScrollType
        {
            Horizontal,
            Vertical
        }

        public class ScrollViewUI
        {
            #region Fields

            [JsonProperty(PropertyName = "Scroll Type (Horizontal, Vertical)")]
            [JsonConverter(typeof(StringEnumConverter))]
            public ScrollType ScrollType;

            [JsonProperty(PropertyName = "Movement Type (Unrestricted, Elastic, Clamped)")]
            [JsonConverter(typeof(StringEnumConverter))]
            public ScrollRect.MovementType MovementType;

            [JsonProperty(PropertyName = "Elasticity")]
            public float Elasticity;

            [JsonProperty(PropertyName = "Deceleration Rate")]
            public float DecelerationRate;

            [JsonProperty(PropertyName = "Scroll Sensitivity")]
            public float ScrollSensitivity;

            [JsonProperty(PropertyName = "Minimal Height")]
            public float MinHeight;

            [JsonProperty(PropertyName = "Additional Height")]
            public float AdditionalHeight;

            [JsonProperty(PropertyName = "Scrollbar Settings")]
            public ScrollBarSettings Scrollbar = new();

            #endregion

            #region Public Methods

            public CuiScrollViewComponent GetScrollView(float totalWidth)
            {
                return GetScrollView(CalculateContentRectTransform(totalWidth));
            }

            public CuiScrollViewComponent GetScrollView(CuiRectTransform contentTransform)
            {
                var cuiScrollView = new CuiScrollViewComponent
                {
                    MovementType = MovementType,
                    Elasticity = Elasticity,
                    DecelerationRate = DecelerationRate,
                    ScrollSensitivity = ScrollSensitivity,
                    ContentTransform = contentTransform,
                    Inertia = true
                };

                switch (ScrollType)
                {
                    case ScrollType.Vertical:
                        {
                            cuiScrollView.Vertical = true;
                            cuiScrollView.Horizontal = false;

                            cuiScrollView.VerticalScrollbar = Scrollbar.Get();
                            break;
                        }

                    case ScrollType.Horizontal:
                        {
                            cuiScrollView.Horizontal = true;
                            cuiScrollView.Vertical = false;

                            cuiScrollView.HorizontalScrollbar = Scrollbar.Get();
                            break;
                        }
                }

                return cuiScrollView;
            }

            public CuiRectTransform CalculateContentRectTransform(float totalWidth)
            {
                CuiRectTransform contentRect;
                if (ScrollType == ScrollType.Horizontal)
                    contentRect = new CuiRectTransform
                    {
                        AnchorMin = "0 0",
                        AnchorMax = "0 1",
                        OffsetMin = "0 0",
                        OffsetMax = $"{totalWidth} 0"
                    };
                else
                    contentRect = new CuiRectTransform
                    {
                        AnchorMin = "0 1",
                        AnchorMax = "1 1",
                        OffsetMin = $"0 -{totalWidth}",
                        OffsetMax = "0 0"
                    };

                return contentRect;
            }

            #endregion

            #region Classes

            public class ScrollBarSettings
            {
                #region Fields

                [JsonProperty(PropertyName = "Invert")]
                public bool Invert;

                [JsonProperty(PropertyName = "Auto Hide")]
                public bool AutoHide;

                [JsonProperty(PropertyName = "Handle Sprite")]
                public string HandleSprite = string.Empty;

                [JsonProperty(PropertyName = "Size")] public float Size;

                [JsonProperty(PropertyName = "Handle Color")]
                public IColor HandleColor = IColor.CreateWhite();

                [JsonProperty(PropertyName = "Highlight Color")]
                public IColor HighlightColor = IColor.CreateWhite();

                [JsonProperty(PropertyName = "Pressed Color")]
                public IColor PressedColor = IColor.CreateWhite();

                [JsonProperty(PropertyName = "Track Sprite")]
                public string TrackSprite = string.Empty;

                [JsonProperty(PropertyName = "Track Color")]
                public IColor TrackColor = IColor.CreateWhite();

                #endregion

                #region Public Methods

                public CuiScrollbar Get()
                {
                    var cuiScrollbar = new CuiScrollbar
                    {
                        Size = Size
                    };

                    if (Invert) cuiScrollbar.Invert = Invert;
                    if (AutoHide) cuiScrollbar.AutoHide = AutoHide;
                    if (!string.IsNullOrEmpty(HandleSprite)) cuiScrollbar.HandleSprite = HandleSprite;
                    if (!string.IsNullOrEmpty(TrackSprite)) cuiScrollbar.TrackSprite = TrackSprite;

                    if (HandleColor != null) cuiScrollbar.HandleColor = HandleColor.Get();
                    if (HighlightColor != null) cuiScrollbar.HighlightColor = HighlightColor.Get();
                    if (PressedColor != null) cuiScrollbar.PressedColor = PressedColor.Get();
                    if (TrackColor != null) cuiScrollbar.TrackColor = TrackColor.Get();

                    return cuiScrollbar;
                }

                #endregion
            }

            #endregion
        }

        public class ImageSettings : InterfacePosition
        {
            #region Fields

            [JsonProperty(PropertyName = "Sprite")]
            public string Sprite = string.Empty;

            [JsonProperty(PropertyName = "Material")]
            public string Material = string.Empty;

            [JsonProperty(PropertyName = "Image")] public string Image = string.Empty;

            [JsonProperty(PropertyName = "Color")] public IColor Color = IColor.CreateTransparent();

            [JsonProperty(PropertyName = "Cursor Enabled")]
            public bool CursorEnabled = false;

            [JsonProperty(PropertyName = "Keyboard Enabled")]
            public bool KeyboardEnabled = false;

            #endregion

            #region Private Methods

            [JsonIgnore] private ICuiComponent _imageComponent;

            public ICuiComponent GetImageComponent()
            {
                if (_imageComponent != null) return _imageComponent;

                if (!string.IsNullOrEmpty(Image))
                {
                    var rawImage = new CuiRawImageComponent
                    {
                        Png = Instance.GetImage(Image),
                        Color = Color.Get()
                    };

                    if (!string.IsNullOrEmpty(Sprite))
                        rawImage.Sprite = Sprite;

                    if (!string.IsNullOrEmpty(Material))
                        rawImage.Material = Material;

                    _imageComponent = rawImage;
                }
                else
                {
                    var image = new CuiImageComponent
                    {
                        Color = Color.Get()
                    };

                    if (!string.IsNullOrEmpty(Sprite))
                        image.Sprite = Sprite;

                    if (!string.IsNullOrEmpty(Material))
                        image.Material = Material;

                    _imageComponent = image;
                }

                return _imageComponent;
            }

            #endregion

            #region Public Methods

            public bool TryGetImageURL(out string url)
            {
                if (!string.IsNullOrWhiteSpace(Image) && Image.IsURL())
                {
                    url = Image;
                    return true;
                }

                url = null;
                return false;
            }

            public CuiElement GetImage(string parent,
                string name = null,
                string destroyUI = null)
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                var element = new CuiElement
                {
                    Name = name,
                    Parent = parent,
                    DestroyUi = destroyUI,
                    Components =
                    {
                        GetImageComponent(),
                        GetRectTransform()
                    }
                };

                if (CursorEnabled)
                    element.Components.Add(new CuiNeedsCursorComponent());

                if (KeyboardEnabled)
                    element.Components.Add(new CuiNeedsKeyboardComponent());

                return element;
            }

            #endregion

            #region Constructors

            public ImageSettings()
            {
            }

            public ImageSettings(string imageURL, IColor color, InterfacePosition position) : base(position)
            {
                Image = imageURL;
                Color = color;
            }

            #endregion
        }

        public class ButtonSettings : TextSettings
        {
            #region Fields

            [JsonProperty(PropertyName = "Button Color")]
            public IColor ButtonColor = IColor.CreateWhite();

            [JsonProperty(PropertyName = "Sprite")]
            public string Sprite = string.Empty;

            [JsonProperty(PropertyName = "Material")]
            public string Material = string.Empty;

            [JsonProperty(PropertyName = "Image")] public string Image = string.Empty;

            [JsonProperty(PropertyName = "Image Color")]
            public IColor ImageColor = IColor.CreateWhite();

            [JsonProperty(PropertyName = "Use custom image position settings?")]
            public bool UseCustomPositionImage = false;

            [JsonProperty(PropertyName = "Custom image position settings")]
            public InterfacePosition ImagePosition = CreateFullStretch();

            #endregion

            #region Public Methods

            public bool TryGetImageURL(out string url)
            {
                if (!string.IsNullOrWhiteSpace(Image) && Image.IsURL())
                {
                    url = Image;
                    return true;
                }

                url = null;
                return false;
            }

            public List<CuiElement> GetButton(
                string msg,
                string cmd,
                string parent,
                string name = null,
                string destroyUI = null,
                string close = null)
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                var list = new List<CuiElement>();

                var btn = new CuiButtonComponent
                {
                    Color = ButtonColor.Get()
                };

                if (!string.IsNullOrEmpty(cmd))
                    btn.Command = cmd;

                if (!string.IsNullOrEmpty(close))
                    btn.Close = close;

                if (!string.IsNullOrEmpty(Sprite))
                    btn.Sprite = Sprite;

                if (!string.IsNullOrEmpty(Material))
                    btn.Material = Material;

                list.Add(new CuiElement
                {
                    Name = name,
                    Parent = parent,
                    DestroyUi = destroyUI,
                    Components =
                    {
                        btn,
                        GetRectTransform()
                    }
                });

                if (!string.IsNullOrEmpty(Image))
                {
                    list.Add(new CuiElement
                    {
                        Parent = name,
                        Components =
                        {
                            Image.StartsWith("assets/")
                                ? new CuiImageComponent {Color = ImageColor.Get(), Sprite = Image}
                                : new CuiRawImageComponent {Color = ImageColor.Get(), Png = Instance.GetImage(Image)},

                            UseCustomPositionImage && ImagePosition != null
                                ? ImagePosition?.GetRectTransform()
                                : new CuiRectTransformComponent()
                        }
                    });
                }
                else
                {
                    if (!string.IsNullOrEmpty(msg))
                        list.Add(new CuiElement
                        {
                            Parent = name,
                            Components =
                            {
                                GetTextComponent(msg),
                                new CuiRectTransformComponent()
                            }
                        });
                }

                return list;
            }

            #endregion
        }

        public class TextSettings : InterfacePosition
        {
            #region Fields

            [JsonProperty(PropertyName = "Font Size")]
            public int FontSize = 12;

            [JsonProperty(PropertyName = "Is Bold?")]
            public bool IsBold;

            [JsonProperty(PropertyName = "Align")]
            [JsonConverter(typeof(StringEnumConverter))]
            public TextAnchor Align = TextAnchor.UpperLeft;

            [JsonProperty(PropertyName = "Color")] public IColor Color = IColor.CreateWhite();

            #endregion Fields

            #region Public Methods

            public CuiTextComponent GetTextComponent(string msg)
            {
                return new CuiTextComponent
                {
                    Text = msg ?? string.Empty,
                    FontSize = FontSize,
                    Font = IsBold ? "robotocondensed-bold.ttf" : "robotocondensed-regular.ttf",
                    Align = Align,
                    Color = Color.Get(),
                    VerticalOverflow = VerticalWrapMode.Overflow
                };
            }

            public CuiElement GetText(string msg,
                string parent,
                string name = null,
                string destroyUI = null)
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                return new CuiElement
                {
                    Name = name,
                    Parent = parent,
                    DestroyUi = destroyUI,
                    Components =
                    {
                        GetTextComponent(msg),
                        GetRectTransform()
                    }
                };
            }

            #endregion
        }

        public class InterfacePosition
        {
            #region Fields

            [JsonProperty(PropertyName = "AnchorMin")]
            public string AnchorMin = "0 0";

            [JsonProperty(PropertyName = "AnchorMax")]
            public string AnchorMax = "1 1";

            [JsonProperty(PropertyName = "OffsetMin")]
            public string OffsetMin = "0 0";

            [JsonProperty(PropertyName = "OffsetMax")]
            public string OffsetMax = "0 0";

            #endregion

            #region Cache

            [JsonIgnore] private CuiRectTransformComponent _position;

            #endregion

            #region Public Methods

            public CuiRectTransformComponent GetRectTransform()
            {
                if (_position != null) return _position;

                var rect = new CuiRectTransformComponent();

                if (!string.IsNullOrEmpty(AnchorMin))
                    rect.AnchorMin = AnchorMin;

                if (!string.IsNullOrEmpty(AnchorMax))
                    rect.AnchorMax = AnchorMax;

                if (!string.IsNullOrEmpty(OffsetMin))
                    rect.OffsetMin = OffsetMin;

                if (!string.IsNullOrEmpty(OffsetMax))
                    rect.OffsetMax = OffsetMax;

                _position = rect;

                return _position;
            }

            #endregion

            #region Constructors

            public InterfacePosition()
            {
            }

            public InterfacePosition(InterfacePosition other)
            {
                AnchorMin = other.AnchorMin;
                AnchorMax = other.AnchorMin;
                OffsetMin = other.AnchorMin;
                OffsetMax = other.AnchorMin;
            }

            public static InterfacePosition CreatePosition(float aMinX, float aMinY, float aMaxX, float aMaxY,
                float oMinX, float oMinY, float oMaxX, float oMaxY)
            {
                return new InterfacePosition
                {
                    AnchorMin = $"{aMinX} {aMinY}",
                    AnchorMax = $"{aMaxX} {aMaxY}",
                    OffsetMin = $"{oMinX} {oMinY}",
                    OffsetMax = $"{oMaxX} {oMaxY}"
                };
            }

            public static InterfacePosition CreatePosition(
                string anchorMin = "0 0",
                string anchorMax = "1 1",
                string offsetMin = "0 0",
                string offsetMax = "0 0")
            {
                return new InterfacePosition
                {
                    AnchorMin = anchorMin,
                    AnchorMax = anchorMax,
                    OffsetMin = offsetMin,
                    OffsetMax = offsetMax
                };
            }

            public static InterfacePosition CreatePosition(CuiRectTransform rectTransform)
            {
                return new InterfacePosition
                {
                    AnchorMin = rectTransform.AnchorMin,
                    AnchorMax = rectTransform.AnchorMax,
                    OffsetMin = rectTransform.OffsetMin,
                    OffsetMax = rectTransform.OffsetMax
                };
            }

            public static InterfacePosition CreateFullStretch()
            {
                return new InterfacePosition
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1",
                    OffsetMin = "0 0",
                    OffsetMax = "0 0"
                };
            }

            public static InterfacePosition CreateCenter()
            {
                return new InterfacePosition
                {
                    AnchorMin = "0.5 0.5",
                    AnchorMax = "0.5 0.5",
                    OffsetMin = "0 0",
                    OffsetMax = "0 0"
                };
            }

            #endregion Constructors
        }

        public class IColor
        {
            #region Fields

            [JsonProperty(PropertyName = "HEX")] public string HEX;

            [JsonProperty(PropertyName = LangRu ? "Непрозрачность (0 - 100)" : "Opacity (0 - 100)")]
            public float Alpha;

            #endregion

            #region Public Methods

            [JsonIgnore] private string _cachedResult;

            [JsonIgnore] private bool _isCached;

            public string Get()
            {
                if (_isCached)
                    return _cachedResult;

                if (string.IsNullOrEmpty(HEX)) HEX = "#FFFFFF";

                var str = HEX.Trim('#');
                if (str.Length != 6)
                    throw new Exception(HEX);

                var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
                var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
                var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);

                _cachedResult = $"{(double)r / 255} {(double)g / 255} {(double)b / 255} {Alpha / 100}";
                _isCached = true;

                return _cachedResult;
            }

            #endregion

            #region Constructors

            public IColor()
            {
            }

            public IColor(string hex, float alpha = 100)
            {
                HEX = hex;
                Alpha = alpha;
            }

            public static IColor Create(string hex, float alpha = 100)
            {
                return new IColor(hex, alpha);
            }

            public static IColor CreateTransparent()
            {
                return new IColor("#000000", 0);
            }

            public static IColor CreateWhite()
            {
                return new IColor("#FFFFFF");
            }

            public static IColor CreateBlack()
            {
                return new IColor("#000000");
            }

            #endregion
        }

        #endregion

        #region Testing Funtions

#if TESTING
        [ConsoleCommand("vb.debug.start.decay")]
        private void DebugStartDecay(ConsoleSystem.Arg arg)
        {
            var entity = GetLookEntity<Minicopter>(arg.Player());
            if (entity == null)
            {
                SendReply(arg, "No entity found");
                return;
            }
            
            float num = (float) (1.0 / (entity.IsOutside() ? (double) PlayerHelicopter.outsidedecayminutes : (double) PlayerHelicopter.insidedecayminutes));
            entity.Hurt(entity.MaxHealth() * num, DamageType.Decay, (BaseEntity) entity, false);

            Puts($"start decay: {entity} | amt: {entity.MaxHealth() * num}");
            
            T GetLookEntity<T>(BasePlayer player)
            {
                RaycastHit hit;
                if (!Physics.Raycast(player.eyes.HeadRay(), out hit)) return default(T);

                var entity = hit.GetEntity();
                return entity == null ? default(T) : entity.GetComponent<T>();
            }
        }
#endif

        #endregion
    }
}

namespace Oxide.Plugins.VehicleBuyExtensionMethods
{
    public static class ExtensionMethods
    {
        public static bool IsURL(this string uriName)
        {
            return Uri.TryCreate(uriName, UriKind.Absolute, out var uriResult) &&
                   (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        }
    }
}

// --- End of file: VehicleBuy-2.1.4.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/HitIcon.cs ---
// --- Original Local Path: HitIcon.cs ---

using UnityEngine;
using System;
using Oxide.Game.Rust.Cui;
using System.Collections;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Plugins;
using System.IO;
using System.Linq;
using Rust;
namespace Oxide.Plugins
{
	[Info("HitIcon", "serezhadelaet", "0.6")]
    [Description("Configurable precached icon when you hit player|friend|clanmate")]
    class HitIcon : RustPlugin
    {
		int dmgtextsize;
		float timetodestroy;
		bool usefriends;
		bool useclans;
		bool usesound;
		bool Changed;
		bool friendapi = false;
		bool showdmg;
		bool showclandmg;
		bool showfrienddmg;
		string colorfriend;
		string colorhead;
		string colorbody;
		string colorclan;
		string dmgcolor;
		string endcolor;
		string matesound;
		Oxide.Plugins.Timer activateTimer;
		Dictionary<ulong, byte> active = new Dictionary<ulong, byte>();
		[PluginReference]
        private Plugin Friends;
		private void InitializeFriendsAPI()
        {
            if (Friends != null)
            { friendapi = true; Puts("Friends here");}
			else
			{ friendapi = false; Puts("Friends not here");}
		}
		private bool AreFriendsAPIFriend(string playerId, string friendId)
        {
			try
			{
				bool result = (bool)Friends?.CallHook("AreFriends", playerId, friendId);
				return result;
			}
            catch
			{
				return false;
			}
        }
		
		void language()
		{
			lang.RegisterMessages(new Dictionary<string, string>
            {
				{"Enabled", "Hit icon was <color=green>enabled</color>"},
				{"Disabled", "Hit icon was <color=red>disabled</color>"}
			}, this);
		}
		
		object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }
		
		void LoadVariables()
        {
			colorclan = Convert.ToString(GetConfig("Color", "Hit clanmate color", "0 256 0 1"));
            colorfriend = Convert.ToString(GetConfig("Color", "Hit friend color", "0 256 0 1"));
			colorhead = Convert.ToString(GetConfig("Color", "Hit head color", "256 0 0 1"));
			colorbody = Convert.ToString(GetConfig("Color", "Hit body color", "256 256 256 1"));
			dmgcolor = Convert.ToString(GetConfig("Color", "Text damage color", "256 256 256 1"));
			dmgtextsize = Convert.ToInt32(GetConfig("Configuration", "Damage text size", 15));
			usefriends = Convert.ToBoolean(GetConfig("Configuration", "Use Friends", true));
			useclans = Convert.ToBoolean(GetConfig("Configuration", "Use Clans", true));
			usesound = Convert.ToBoolean(GetConfig("Configuration", "Use sound when mate get attacked", true));
			showdmg = Convert.ToBoolean(GetConfig("Configuration", "Show damage", true));
			showclandmg = Convert.ToBoolean(GetConfig("Configuration", "Show clanmate damage", false));
			showfrienddmg = Convert.ToBoolean(GetConfig("Configuration", "Show friend damage", true));
			matesound = Convert.ToString(GetConfig("Configuration", "When mate get attacked sound fx", "assets/prefabs/instruments/guitar/effects/guitarpluck.prefab"));
			timetodestroy = Convert.ToSingle(GetConfig("Configuration", "Time to destroy", 0.4f));
			
            if (Changed)
            {
                SaveConfig();
                Changed = false;
            }
        }
		
		protected override void LoadDefaultConfig()
        {
            Puts("Creating a new configuration file!");
            Config.Clear();
            LoadVariables();
        }
		
		public class disabledplayers
		{
			string playerid;
			
			public disabledplayers()
			{
			}
			public disabledplayers(BasePlayer player)
			{
				playerid = player.userID.ToString();
			}
			public ulong GetPlayer()
            {
                ulong userid;
                if (!ulong.TryParse(playerid, out userid)) return 0;
                return userid;
            }
		}
		
		public class StoredData
		{
			public List<ulong> DisabledUsers = new List<ulong>();

			public StoredData()
			{
			}
		}
		static StoredData storedData;
		static List<ulong> DisabledUsers = new List<ulong>();
		static void SaveData() => Interface.GetMod().DataFileSystem.WriteObject("HitIcon", storedData);
		static void LoadData()
		{
			try
			{
				storedData = Interface.GetMod().DataFileSystem.ReadObject<StoredData>("HitIcon");
			}
			catch
			{
				storedData = new StoredData();
			}
			foreach (var disabledplayer in storedData.DisabledUsers)
				DisabledUsers.Add(disabledplayer);
		}
		
		ImageCache ImageAssets;
        GameObject HitObject;
		private void cacheImage()
        {
			HitObject = new GameObject();
            ImageAssets = HitObject.AddComponent<ImageCache>();
            ImageAssets.imageFiles.Clear();
			string dataDirectory = "file://" + Interface.Oxide.DataDirectory + Path.DirectorySeparatorChar;
			ImageAssets.getImage("hitimage", dataDirectory + "hit.png");
			download();
		}
		
        public class ImageCache : MonoBehaviour
        {
            public Dictionary<string, string> imageFiles = new Dictionary<string, string>();

            public List<Queue> queued = new List<Queue>();

            public class Queue
            {
                public string url { get; set; }
                public string name { get; set; }
            }

            private void OnDestroy()
            {
                foreach (var value in imageFiles.Values)
                {
                    FileStorage.server.RemoveEntityNum(uint.MaxValue, Convert.ToUInt32(value));
                }
            }

            public void getImage(string name, string url)
            {
                queued.Add(new Queue
                {
                    url = url,
                    name = name
                });
            }

            IEnumerator WaitForRequest(Queue queue)
            {
                using (var www = new WWW(queue.url))
                {
                    yield return www;
                    
                    if (string.IsNullOrEmpty(www.error))
                    {
                        var stream = new MemoryStream();
						stream.Write(www.bytes, 0, www.bytes.Length);						
                        imageFiles.Add(queue.name, FileStorage.server.Store(stream, FileStorage.Type.png, uint.MaxValue).ToString());
                    }
                    else
                    {
						Debug.Log("Error downloading hit.png . It must be in your oxide/data/");
                        ConsoleSystem.Run.Server.Normal("oxide.unload HitIcon");
					}
                }
            }

            public void process()
            {
				StartCoroutine(WaitForRequest(queued[0]));
			}
        }

        public string fetchImage(string name)
        {
            string result;
            if (ImageAssets.imageFiles.TryGetValue(name, out result))
                return result;
            return string.Empty;
        }
		
		void download()
        {
            ImageAssets.process();
        }
		
		private class GUIv4
        {
            string guiname { get; set; }
            CuiElementContainer container = new CuiElementContainer();

            public void add(string uiname, string image, string start, string end, string colour)
            {
                guiname = uiname;
                CuiElement element = new CuiElement
                {
                    Name = guiname,
                    Components =
					{
						new CuiRawImageComponent
						{
							Png = image,
							Color = colour
						},
						new CuiRectTransformComponent
						{
							AnchorMin = start,
							AnchorMax = end
						}
					}
                };
                container.Add(element);
            }
			
			public void dmg(string uiname, string uitext, string start, string end, string uicolor, int uisize)
            {
				
				CuiElement element = new CuiElement
                {
					Name = uiname,
                    Components =
                        {
                            new CuiTextComponent
                            {
                                Text = uitext,
                                FontSize = uisize,
								Color = uicolor
								
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = start,
                                AnchorMax = end
                            }
                        }
                };
                container.Add(element);
            }
			
			public void send(BasePlayer player)
            {
				CuiHelper.DestroyUi(player, guiname);
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo() { connection = player.net.connection }, null, "AddUI", new Facepunch.ObjectList(container.ToJson()));
            }
		}
		
		private void OnPlayerAttack(BasePlayer attacker, HitInfo hitinfo)
        {
			if(hitinfo == null) return;
			var victim = hitinfo.HitEntity as BasePlayer;
			if(victim == null) return;
			if (victim && !DisabledUsers.Contains(attacker.userID))
			{
				bool showdamage = true;
				bool clrcl = false;
				endcolor = colorbody;
				if(useclans)
				{
					String[] ClanTagAttacker = attacker.displayName.Split(new Char [] {' '});
					String[] ClanTagVictim = victim.displayName.Split(new Char [] {' '});
					if (ClanTagAttacker[0] == ClanTagVictim[0] && ClanTagVictim[0].StartsWith("[") && ClanTagAttacker[0].StartsWith("[") && ClanTagVictim[0].EndsWith("]") && ClanTagAttacker[0].EndsWith("]")) 
					{
						endcolor = colorclan;
						clrcl = true;
						if(usesound) Effect.server.Run(matesound, attacker.transform.position, Vector3.zero, null, false);
					}
				}
				
				if (endcolor != colorclan && friendapi && usefriends && AreFriendsAPIFriend(victim.userID.ToString(), attacker.userID.ToString()))
                {
                    endcolor = colorfriend;
					if(usesound) Effect.server.Run(matesound, attacker.transform.position, Vector3.zero, null, false);
				}
				
				if(hitinfo.isHeadshot && endcolor != colorclan && endcolor != colorfriend)
				{
					endcolor = colorhead;
				}
				
				if(active[attacker.userID] == 0) 
				{
					try //Check if not destroyed before show new///
					{ 
						activateTimer.Destroy();
					} 
					catch 
					{   
						CuiHelper.DestroyUi(attacker,"hitdmg");
						CuiHelper.DestroyUi(attacker,"hitpng"); 
					}
				}
				active[attacker.userID] = 0;
				GUIv4 gui = new GUIv4();
				gui.add("hitpng", fetchImage("hitimage"), "0.492 0.4905", "0.506 0.5095", endcolor);
				gui.send(attacker);
				NextTick(() => 
				{
					if(showdmg)
					{
						if(endcolor == colorfriend && !showfrienddmg) showdamage = false;
						if(!showclandmg && clrcl) showdamage = false;
						if(showdamage)
						{
							float damage = (int)hitinfo.damageTypes.Total();
							gui.dmg("hitdmg", damage.ToString(), "0.495 0.425", "0.55 0.48", dmgcolor, dmgtextsize);
							gui.send(attacker);
						}
					}
					timer.Repeat(timetodestroy, 1, () =>
					{	
						active[attacker.userID] = 1;
						CuiHelper.DestroyUi(attacker,"hitdmg");
						CuiHelper.DestroyUi(attacker,"hitpng");
					});
				});
			}
		}
		
		[ChatCommand("hit")]
		void toggle(BasePlayer player)
		{
			if(!DisabledUsers.Contains(player.userID))
			{
				storedData.DisabledUsers.Add(player.userID);
				DisabledUsers.Add(player.userID);
				PrintToChat(player, lang.GetMessage("Disabled", this, player.UserIDString));
			} 
			else
			{
				storedData.DisabledUsers.Remove(player.userID);
				DisabledUsers.Remove(player.userID);
				PrintToChat(player, lang.GetMessage("Enabled", this, player.UserIDString));
			}
		}
		
		void OnServerInitialized()
		{
			cacheImage();
			InitializeFriendsAPI();
		}
		
		void OnPlayerInit(BasePlayer player)
		{
			active[player.userID] = 0;
		}
		
		void Loaded()
        {
			LoadData();
			language();
			LoadVariables();
			foreach (BasePlayer player in BasePlayer.activePlayerList)
				{
					active[player.userID] = 0;
				}
		}
		
		void Unloaded()
        {
			if (BasePlayer.activePlayerList.Count > 0)
            {
				foreach (BasePlayer player in BasePlayer.activePlayerList)
				{
					CuiHelper.DestroyUi(player,"hitpng");
					CuiHelper.DestroyUi(player,"hitdmg");
				}
			}
			SaveData();
			UnityEngine.Object.Destroy(HitObject);
		}
	}
}	

// --- End of file: HitIcon.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AdminRadar.cs ---
// --- Original Local Path: AdminRadar.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Oxide.Core;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("Player Radar", "Austinv900 & Speedy2M", "2.0.3", ResourceId = 978)]
    [Description("Allows admins to have a Radar to help detect cheaters")]

    class AdminRadar : RustPlugin
    {
        #region External Refs
        [PluginReference]
        Plugin Godmode;
        [PluginReference]
        Plugin Vanish;
        #endregion
        public AdminRadar Return() => this;

        private static AdminRadar Instance;

        #region Libraries
        Dictionary<string, PlSettings> LoadedData = new Dictionary<string, PlSettings>();
        Dictionary<string, string> NameList = new Dictionary<string, string>();
        List<string> FilterList = new List<string>();
        List<string> ActiveRadars = new List<string>();
        #endregion

        #region Radar Class
        class Radar : MonoBehaviour
        {
            // Static Variables
            BasePlayer player;
            Vector3 bodyheight = new Vector3(0f, 0.9f, 0f);
            int arrowheight = 15;
            int arrowsize = 1;
            Vector3 textheight = new Vector3(0f, 0.0f, 0f);

            Dictionary<string, string> ExtMessages = new Dictionary<string, string>()
            {
                ["player"] = "{0} - |H: {1}|CW: {2}|AT: {3}|D: {4}m",
                ["sleeper"] = "{0}(<color=red>Sleeping</color>) - |H: {1}|D: {2}m",
                ["thing"] = "{0}{1} - |D: {2}m",
                ["npc"] = "{0} - |H: {1}|D: {2}m"
            };

            Dictionary<string, string> Messages = new Dictionary<string, string>()
            {
                ["player"] = "{0} - |D: {4}m",
                ["sleeper"] = "{0}(<color=red>Sleeping</color>) - |D: {2}m",
                ["thing"] = "{0}{1} - |D: {2}m",
                ["npc"] = "{0} - |D: {2}m"
            };

            // Changable Variables
            
            public string filter;
            public float RefreshTime;
            public bool ExtDetails;
            public float setdistance;
            public Dictionary<string, string> PlayerNameList;

            public bool players;
            public bool sleepers;
            public bool npcs;
            public bool storages;
            public bool toolcupboards;

            public bool playerbox;
            public bool arrows;

            AdminRadar ar = Instance;

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                ar.Puts($"{ar.ConfigVersion} {ar.ChatIcon} {ar.ChatPrefix} {ar.defaultAllDistance}");
            }

            void radar()
            {
                if (players)
                {
                    if (filter == "all" || filter == "player")
                    {
                        string message = (ExtDetails) ? ExtMessages["player"] : Messages["player"];
                        foreach (var target in BasePlayer.activePlayerList)
                        {
                            bool posval = target.transform.position != new Vector3(0, 0, 0);
                            var distance = Math.Round(Vector3.Distance(target.transform.position, player.transform.position), 1);
                            if (distance < setdistance && target != player && posval)
                            {
                                var health = Math.Round(target.Health(), 0).ToString();
                                var cw = target?.GetActiveItem()?.info?.displayName?.english ?? "None";
								var weapon = target?.GetHeldEntity()?.GetComponent<BaseProjectile>() ?? null;
								var attachments = string.Empty;
								var contents = weapon?.GetItem()?.contents ?? null;
								if (weapon != null && contents != null && contents.itemList.Count >= 1)
								{
								attachments += "";
								for (int ii = 0; ii < contents.itemList.Count; ii++)
  								{
								var item = contents.itemList[ii];
								if (item == null) continue;
								attachments += item?.info?.displayName?.english ?? "None";
								}
								attachments += "";
								}
                                var msg = message.Replace("{0}", target.displayName).Replace("{1}", health).Replace("{2}", cw).Replace("{3}", attachments).Replace("{4}", distance.ToString());

                                if (playerbox) player.SendConsoleCommand("ddraw.box", RefreshTime, Color.green, target.transform.position + bodyheight, target.GetHeight());
                                player.SendConsoleCommand("ddraw.text", RefreshTime, Color.yellow, target.transform.position + textheight, msg);
                            }
                        }
                    }
                }
                if (sleepers)
                {
                    if (filter == "all" || filter == "sleeper")
                    {
                        string message = (ExtDetails) ? ExtMessages["sleeper"] : Messages["sleeper"];
                        foreach (var sleeper in BasePlayer.sleepingPlayerList)
                        {
                            bool posval = sleeper.transform.position != new Vector3(0, 0, 0);
                            var distance = Math.Round(Vector3.Distance(sleeper.transform.position, player.transform.position), 1);
                            var msg = message.Replace("{0}", sleeper.displayName).Replace("{1}", Math.Round(sleeper.Health(), 0).ToString()).Replace("{2}", distance.ToString());
                            if (distance < setdistance && posval)
                            {
                                player.SendConsoleCommand("ddraw.text", RefreshTime, UnityEngine.Color.grey, sleeper.transform.position + textheight, msg);
                            }
                        }
                    }
                }
                if (toolcupboards)
                {
                    if (filter == "all" || filter == "toolcupboard")
                    {
                        string message = (ExtDetails) ? ExtMessages["thing"] : Messages["thing"];
                        foreach (var Cupboard in Resources.FindObjectsOfTypeAll<BuildingPrivlidge>())
                        {
                            bool posval = Cupboard.transform.position != new Vector3(0, 0, 0);
                            var distance = Math.Round(Vector3.Distance(Cupboard.transform.position, player.transform.position), 1);
                            if (distance < setdistance && posval)
                            {
                                var arrowSky = Cupboard.transform.position;
                                var arrowGround = arrowSky + new Vector3(0, 0.9f, 0);
                                arrowGround.y = arrowGround.y + arrowheight;
                                var owner = FindOwner(Cupboard.OwnerID);
                                var msg = message.Replace("{0}", replacement(Cupboard.ShortPrefabName)).Replace("{1}", $"[{owner}]").Replace("{2}", distance.ToString());

                                if (arrows) player.SendConsoleCommand("ddraw.arrow", RefreshTime, Color.yellow, arrowGround, arrowSky, arrowsize);
                                player.SendConsoleCommand("ddraw.text", RefreshTime, UnityEngine.Color.magenta, Cupboard.transform.position + new Vector3(0f, 0.05f, 0f), msg);
                            }
                        }
                    }
                }
                if (storages)
                {
                    if (filter == "all" || filter == "storage")
                    {
                        string message = (ExtDetails) ? ExtMessages["thing"] : Messages["thing"];
                        foreach (var storage in Resources.FindObjectsOfTypeAll<StorageContainer>().Where(storage => storage.name.Contains("box.wooden.large.prefab") || storage.name.Contains("woodbox_deployed.prefab") || storage.name.Contains("heli_crate.prefab") || storage.name.Contains("small_stash_deployed.prefab")))
                        {
                            bool posval = storage.transform.position != new Vector3(0, 0, 0);
                            var distance = Math.Round(Vector3.Distance(storage.transform.position, player.transform.position), 1);
                            if (distance < setdistance && posval)
                            {
                                var owner = FindOwner(storage.OwnerID);
                                var arrowSky = storage.transform.position;
                                var arrowGround = arrowSky;
                                var msg = message.Replace("{0}", replacement(storage.ShortPrefabName)).Replace("{1}", $"[{owner}]").Replace("{2}", distance.ToString());
                                arrowGround.y = arrowGround.y + arrowheight;

                                if (arrows) player.SendConsoleCommand("ddraw.arrow", RefreshTime, Color.blue, arrowGround, arrowSky, arrowsize);
                                player.SendConsoleCommand("ddraw.text", RefreshTime, Color.green, storage.transform.position + new Vector3(0f, 0.05f, 0f), msg);
                            }
                        }
                    }
                }
                if (npcs)
                {
                    if (filter == "all" || filter == "npc")
                    {
                        string message = (ExtDetails) ? ExtMessages["npc"] : Messages["npc"];
                        foreach (var npc in Resources.FindObjectsOfTypeAll<BaseNPC>())
                        {
                            bool posval = npc.transform.position != new Vector3(0, 0, 0);
                            var distance = Math.Round(Vector3.Distance(npc.transform.position, player.transform.position), 1);
                            if (distance < setdistance && posval)
                            {
                                var health = Math.Round(npc.Health(), 0).ToString();
                                var msg = message.Replace("{0}", npc.ShortPrefabName.Replace(".prefab", string.Empty)).Replace("{1}", health).Replace("{2}", distance.ToString());

                                player.SendConsoleCommand("ddraw.text", RefreshTime, Color.yellow, npc.transform.position + textheight, msg);
                            }
                        }
                    }
                }
            }
            string FindOwner(ulong id)
            {
                string ID = id.ToString();
                return (PlayerNameList.ContainsKey(ID)) ? PlayerNameList[ID] : "MAP";
            }
            bool SpectateCheck(BasePlayer player, BasePlayer target) => player.IsSpectating() && target.HasChild(player);

            string replacement(string name)
            {
                return name.Replace(".prefab", string.Empty).Replace(".wooden.", string.Empty).Replace("_deployed", string.Empty).Replace("small_", string.Empty).Replace("_deployed", string.Empty).Replace(".tool.deployed", string.Empty).Replace("_", " ").ToUpper();
            }
        }
        #endregion

        #region Oxide
        void Init()
        {
            LoadDefaultConfig();
            LoadFilterList();
            LoadMessages();
            LoadSavedData();
            permission.RegisterPermission("adminradar." + permAllowed, this);
            Instance = this;
        }
        void Unload()
        {
            SaveLoadedData();

            foreach (var pl in BasePlayer.activePlayerList)
            {
                if (pl.GetComponent<Radar>()) GameObject.Destroy(pl.GetComponent<Radar>());
                if (ActiveRadars.Contains(pl.UserIDString)) ActiveRadars.Remove(pl.UserIDString);
            }
        }
        void OnServerSave()
        {
            SaveLoadedData();
        }
        void OnPlayerDisconnected(BasePlayer player)
        {
            if (player.GetComponent<Radar>()) { GameObject.Destroy(player.GetComponent<Radar>()); if (ActiveRadars.Contains(player.UserIDString)) ActiveRadars.Remove(player.UserIDString); }
        }

        #endregion

        #region Configuration
        // General Settings
        string permAllowed;
        bool playerRadar;
        bool ShowExtData;
        string ChatIcon;
        string ChatPrefix;
        string ConfigVersion { get { return GetConfig("2.0.0", "DoNotTouch", "ConfigVersion"); } }

        // Filters
        bool Tplayer;
        bool Tstorage;
        bool Tsleeper;
        bool Ttoolcupboard;
        bool Tnpc;
        bool Tall;

        // Default Values
        string defaultFilter;
        float defaultAllInvoke;
        float defaultAllDistance;
        float defaultPlayerInvoke;
        float defaultPlayerMaxDistance;
        float defaultSleeperInvoke;
        float defaultSleeperMaxDistance;
        float defaultstorageInvoke;
        float defaultStorageMaxDistance;
        float defaultToolCupboardInvoke;
        float defaultToolCupboardMaxDistance;
        float defaultNPCInvoke;
        float defaultNPCMaxDistance;

        // Invoke Limiting
        float limitAllInvokeHigh;
        float limitAllInvokeLow;
        float limitPlayerInvokeHigh;
        float limitPlayerInvokeLow;
        float limitSleeperInvokeHigh;
        float limitSleeperInvokeLow;
        float limitstorageInvokeHigh;
        float limitstorageInvokeLow;
        float limitToolCupboardInvokeHigh;
        float limitToolCupboardInvokeLow;
        float limitNPCInvokeHigh;
        float limitNPCInvokeLow;

        // Distance Limiting
        float limitAllDistanceHigh;
        float limitAllDistanceLow;
        float limitPlayerDistanceHigh;
        float limitPlayerDistanceLow;
        float limitSleeperDistanceHigh;
        float limitSleeperDistanceLow;
        float limitstorageDistanceHigh;
        float limitstorageDistanceLow;
        float limitToolCupboardDistanceHigh;
        float limitToolCupboardDistanceLow;
        float limitNPCDistanceHigh;
        float limitNPCDistanceLow;

        // Misc Settings
        bool radarboxs;
        bool radararrows;

        protected override void LoadDefaultConfig()
        {
            // General Settings
            SetConfig("General", "Permission (adminradar.?)", "allowed");
            SetConfig("General", "Radar", "ShowExtendedDetails", true);
            SetConfig("General", "Radar", "ShowPlayerBox", true);
            SetConfig("General", "Radar", "ShowArrow", true);
            SetConfig("General", "Chat", "IconProfile", string.Empty);
            SetConfig("General", "Chat", "ChatPrefix", "AdminRadar");
            SetConfig("General", "Commands", "GiveRadar", false);

            // Enabled Filters
            SetConfig("Settings", "Filters", "DefaultFilter | player | storage | sleeper | toolcupboard | npc", "player");
            SetConfig("Settings", "Filters", "Players", "Enabled", true);
            SetConfig("Settings", "Filters", "Storage", "Enabled", true);
            SetConfig("Settings", "Filters", "SleepingPlayers", "Enabled", true);
            SetConfig("Settings", "Filters", "ToolCupboards", "Enabled", true);
            SetConfig("Settings", "Filters", "NPCS", "Enabled", true);
            SetConfig("Settings", "Filters", "All", "Enabled (Can Cause Server Lag)", true);

            // Default Values
            /* All Settings */
            SetConfig("Settings", "Filters", "All", "DefaultInvoke", 1.5f);
            SetConfig("Settings", "Filters", "All", "MaxDistance", 300f);
            SetConfig("Settings", "Filters", "All", "Distance-Lowest", 30f);
            SetConfig("Settings", "Filters", "All", "Distance-Highest", 400f);
            SetConfig("Settings", "Filters", "All", "Invoke-Lowest", 1f);
            SetConfig("Settings", "Filters", "All", "Invoke-Highest", 3f);
            /* Player Settings */
            SetConfig("Settings", "Filters", "Players", "DefaultInvoke", 0.30f);
            SetConfig("Settings", "Filters", "Players", "MaxDistance", 2000f);
            SetConfig("Settings", "Filters", "Players", "Distance-Lowest", 100f);
            SetConfig("Settings", "Filters", "Players", "Distance-Highest", 1000f);
            SetConfig("Settings", "Filters", "Players", "Invoke-Lowest", 0.10f);
            SetConfig("Settings", "Filters", "Players", "Invoke-Highest", 1.00f);
            /* Storage Settings */
            SetConfig("Settings", "Filters", "Storage", "DefaultInvoke", 5.00f);
            SetConfig("Settings", "Filters", "Storage", "MaxDistance", 300f);
            SetConfig("Settings", "Filters", "Storage", "Distance-Lowest", 50f);
            SetConfig("Settings", "Filters", "Storage", "Distance-Highest", 300f);
            SetConfig("Settings", "Filters", "Storage", "Invoke-Lowest", 1.00f);
            SetConfig("Settings", "Filters", "Storage", "Invoke-Highest", 10.00f);
            /* Sleepers Settings */
            SetConfig("Settings", "Filters", "SleepingPlayers", "DefaultInvoke", 5.00f);
            SetConfig("Settings", "Filters", "SleepingPlayers", "MaxDistance", 300f);
            SetConfig("Settings", "Filters", "SleepingPlayers", "Distance-Lowest", 50f);
            SetConfig("Settings", "Filters", "SleepingPlayers", "Distance-Highest", 300f);
            SetConfig("Settings", "Filters", "SleepingPlayers", "Invoke-Lowest", 1.00f);
            SetConfig("Settings", "Filters", "SleepingPlayers", "Invoke-Highest", 10.00f);
            /* ToolCupboard Settings */
            SetConfig("Settings", "Filters", "ToolCupboards", "DefaultInvoke", 5.00f);
            SetConfig("Settings", "Filters", "ToolCupboards", "MaxDistance", 300f);
            SetConfig("Settings", "Filters", "ToolCupboards", "Distance-Lowest", 50f);
            SetConfig("Settings", "Filters", "ToolCupboards", "Distance-Highest", 300f);
            SetConfig("Settings", "Filters", "ToolCupboards", "Invoke-Lowest", 1.00f);
            SetConfig("Settings", "Filters", "ToolCupboards", "Invoke-Highest", 10.00f);
            /* NPC Settings */
            SetConfig("Settings", "Filters", "NPCS", "DefaultInvoke", 0.30f);
            SetConfig("Settings", "Filters", "NPCS", "MaxDistance", 300f);
            SetConfig("Settings", "Filters", "NPCS", "Distance-Lowest", 50f);
            SetConfig("Settings", "Filters", "NPCS", "Distance-Highest", 300f);
            SetConfig("Settings", "Filters", "NPCS", "Invoke-Lowest", 0.10f);
            SetConfig("Settings", "Filters", "NPCS", "Invoke-Highest", 1.00f);

            SetConfig("DoNotTouch", "ConfigVersion", "2.0.0");

            SaveConfig();

            ////////////////////////////////////////////////////////////////////
            ////                    Setting the Values                      ////
            ////////////////////////////////////////////////////////////////////

            // General Settings
            permAllowed = GetConfig("allowed", "General", "Permission (adminradar.?)");
            ShowExtData = GetConfig(true, "General", "Radar", "ShowExtendedDetails");
            radarboxs = GetConfig(true, "General", "Radar", "ShowPlayerBox");
            radararrows = GetConfig(true, "General", "Radar", "ShowArrow");
            ChatIcon = GetConfig(string.Empty, "General", "Chat", "IconProfile");
            ChatPrefix = GetConfig("AdminRadar", "General", "Chat", "ChatPrefix");
            playerRadar = GetConfig(false, "General", "Commands", "GiveRadar");

            // Enabled Filters
            defaultFilter = GetConfig("player", "Settings", "Filters", "DefaultFilter | player | storage | sleeper | toolcupboard | npc");
            Tplayer = GetConfig(true, "Settings", "Filters", "Players", "Enabled");
            Tstorage = GetConfig(true, "Settings", "Filters", "Storage", "Enabled");
            Tsleeper = GetConfig(true, "Settings", "Filters", "SleepingPlayers", "Enabled");
            Ttoolcupboard = GetConfig(true, "Settings", "Filters", "ToolCupboards", "Enabled");
            Tnpc = GetConfig(true, "Settings", "Filters", "NPCS", "Enabled");
            Tall = GetConfig(true, "Settings", "Filters", "All", "Enabled (Can Cause Server Lag)");

            // Default Values
            defaultPlayerInvoke = GetConfig(0.30f, "Settings", "Filters", "Players", "DefaultInvoke");
            defaultPlayerMaxDistance = GetConfig(2000f, "Settings", "Filters", "Players", "MaxDistance");
            limitPlayerDistanceHigh = GetConfig(1000f, "Settings", "Filters", "Players", "Distance-Highest");
            limitPlayerDistanceLow = GetConfig(100f, "Settings", "Filters", "Players", "Distance-Lowest");
            limitPlayerInvokeHigh = GetConfig(1.00f, "Settings", "Filters", "Players", "Invoke-Highest");
            limitPlayerInvokeLow = GetConfig(0.10f, "Settings", "Filters", "Players", "Invoke-Lowest");

            defaultSleeperInvoke = GetConfig(5.00f, "Settings", "Filters", "SleepingPlayers", "DefaultInvoke");
            defaultSleeperMaxDistance = GetConfig(300f, "Settings", "Filters", "SleepingPlayers", "MaxDistance");
            limitSleeperDistanceHigh = GetConfig(300f, "Settings", "Filters", "SleepingPlayers", "Distance-Highest");
            limitSleeperDistanceLow = GetConfig(50f, "Settings", "Filters", "SleepingPlayers", "Distance-Lowest");
            limitSleeperInvokeHigh = GetConfig(10.00f, "Settings", "Filters", "SleepingPlayers", "Invoke-Highest");
            limitSleeperInvokeLow = GetConfig(1.00f, "Settings", "Filters", "SleepingPlayers", "Invoke-Lowest");

            defaultstorageInvoke = GetConfig(5.00f, "Settings", "Filters", "Storage", "DefaultInvoke");
            defaultStorageMaxDistance = GetConfig(300f, "Settings", "Filters", "Storage", "MaxDistance");
            limitstorageDistanceHigh = GetConfig(300f, "Settings", "Filters", "Storage", "Distance-Highest");
            limitstorageDistanceLow = GetConfig(50f, "Settings", "Filters", "Storage", "Distance-Lowest");
            limitstorageInvokeHigh = GetConfig(10.00f, "Settings", "Filters", "Storage", "Invoke-Highest");
            limitstorageInvokeLow = GetConfig(1.00f, "Settings", "Filters", "Storage", "Invoke-Lowest");

            defaultToolCupboardInvoke = GetConfig(5.00f, "Settings", "Filters", "ToolCupboards", "DefaultInvoke");
            defaultToolCupboardMaxDistance = GetConfig(300f, "Settings", "Filters", "ToolCupboards", "MaxDistance");
            limitToolCupboardDistanceHigh = GetConfig(300f, "Settings", "Filters", "ToolCupboards", "Distance-Highest");
            limitToolCupboardDistanceLow = GetConfig(50f, "Settings", "Filters", "ToolCupboards", "Distance-Lowest");
            limitToolCupboardInvokeHigh = GetConfig(10.00f, "Settings", "Filters", "ToolCupboards", "Invoke-Highest");
            limitToolCupboardInvokeLow = GetConfig(1.00f, "Settings", "Filters", "ToolCupboards", "Invoke-Lowest");

            defaultNPCInvoke = GetConfig(0.30f, "Settings", "Filters", "NPCS", "DefaultInvoke");
            defaultNPCMaxDistance = GetConfig(300f, "Settings", "Filters", "NPCS", "MaxDistance");
            limitNPCDistanceHigh = GetConfig(300f, "Settings", "Filters", "NPCS", "Distance-Highest");
            limitNPCDistanceLow = GetConfig(50f, "Settings", "Filters", "NPCS", "Distance-Lowest");
            limitNPCInvokeHigh = GetConfig(1.00f, "Settings", "Filters", "NPCS", "Invoke-Highest");
            limitNPCInvokeLow = GetConfig(0.10f, "Settings", "Filters", "NPCS", "Invoke-Lowest");

            defaultAllInvoke = GetConfig(1.5f, "Settings", "Filters", "All", "DefaultInvoke");
            defaultAllDistance = GetConfig(300f, "Settings", "Filters", "All", "MaxDistance");
            limitAllDistanceHigh = GetConfig(400f, "Settings", "Filters", "All", "Distance-Highest");
            limitAllDistanceLow = GetConfig(30f, "Settings", "Filters", "All", "Distance-Lowest");
            limitAllInvokeHigh = GetConfig(3f, "Settings", "Filters", "All", "Invoke-Highest");
            limitAllInvokeLow = GetConfig(1f, "Settings", "Filters", "All", "Invoke-Lowest");
            //ConfigVersion = GetConfig("2.0.0", "DoNotTouch", "ConfigVersion");

            if (ConfigVersion != "2.0.0") Puts("Config File is Outdated - Please delete current config and reload the plugin");
        }
        #endregion

        #region Localization
        void LoadMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>()
            {
                ["RadarOff"] = "Radar has been <color=red>DEACTIVATED</color>",
                ["NoAccess"] = "Unknown command: {0}",
                ["RadarOn"] = "Radar has been <color=green>ACTIVATED</color> | <color=aqua>Filter <color=green>{0}</color>, RefreshTime <color=yellow>{1}</color>, Distance <color=purple>{2}</color></color>",
                ["InvalidSyntax"] = "Invalid command syntax: /{0} help",
                ["CommandDisabled"] = "The Command /{0} {1} has been disabled by the server administrator",
                ["RadarGive"] = "Radar has been {0} for {1}",
                ["Enabled"] = "<color=green>Enabled</color>",
                ["Disabled"] = "<color=red>Disabled</color>",
                ["SettingUpdate"] = "Setting {0} {1} has been changed from {2} to {3}",
                ["RadarList"] = "------[ ActiveRadars ]------\n{0}",
                ["NoRadars"] = "No players are currently using radar"
            }, this, "en");
        }
        #endregion

        #region Commands
        [ChatCommand("radar")]
        void ccmdRadar(BasePlayer player, string command, string[] args)
        {
            if (!Allowed(player)) { player.ChatMessage(Lang("NoAccess", player.UserIDString, command)); return; }
            if (args.Length == 0) { ToggleRadar(player); return; }
            if (args.Length == 1 && FilterList.Contains(filterValidation(args[0]))) { ToggleRadar(player, filterValidation(args[0])); return; }

            switch (args[0].ToLower())
            {
                case "give":
                    if (!playerRadar) { SendMessage(player, Lang("CommandDisabled", player.UserIDString, command, args[0])); return; }
                    if (args.Length < 2 || args.Length > 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                    var target = player;
                    string enabled = string.Empty;
                    if (args.Length == 2)
                    {
                        target = rust.FindPlayer(args[1]);
                        if (target.GetComponent<Radar>()) { enabled = Lang("Disabled", player.UserIDString); } else { enabled = Lang("Enabled", player.UserIDString); }
                        ToggleRadar(target);
                    }
                    if (args.Length == 3)
                    {
                        target = rust.FindPlayer(args[1]);
                        if (target.GetComponent<Radar>()) { enabled = Lang("Disabled", player.UserIDString); } else { enabled = Lang("Enabled", player.UserIDString); }
                        ToggleRadar(target, args[2]);
                    }
                    SendMessage(player, Lang("RadarGive", player.UserIDString, enabled, target.displayName));
                    break;

                case "list":
                    if (args.Length > 1) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                    string activeplayers = string.Empty;
                    if (RadarList(out activeplayers))
                    {
                        player.ChatMessage(Lang("RadarList", player.UserIDString, activeplayers));
                        return;
                    }
                    SendMessage(player, Lang("NoRadars", player.UserIDString));
                    break;

                case "help":
                    SendHelpText(player);
                    break;

                case "filterlist":
                    if (args.Length > 1) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                    string msg = "<color=red>Filter List</color>\n";
                    foreach (var filter in FilterList)
                    {
                        msg += $"<color=green>{filter}</color>\n";
                    }
                    SendMessage(player, msg);
                    break;

                case "setting":
                    if (args.Length == 1) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                    switch (args[1].ToLower())
                    {
                        case "player":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].playerinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].playerinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].playerdistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].playerdistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "sleeper":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].sleeperinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].sleeperinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].sleeperdistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].sleeperdistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "npc":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].npcinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].npcinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].npcdistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].npcdistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "storage":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].storageinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].storageinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].storagedistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].storagedistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "toolcupboard":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].toolcupboardinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].toolcupboardinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].toolcupboarddistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].toolcupboarddistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "all":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 4 || args.Length <= 3) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 4 && settingValidation(args[2]) == "invoke")
                            {
                                var oldsetting = LoadedData[player.UserIDString].allinvoke;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = invokeClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].allinvoke = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            if (args.Length == 4 && settingValidation(args[2]) == "distance")
                            {
                                var oldsetting = LoadedData[player.UserIDString].alldistance;
                                float updatevalue;
                                float.TryParse(args[3], out updatevalue);
                                var newsetting = distanceClamp(args[1], updatevalue);
                                LoadedData[player.UserIDString].alldistance = newsetting;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, args[1], settingValidation(args[2]), oldsetting.ToString(), newsetting.ToString()));
                            }
                            break;

                        case "filter":
                            if (!HasPlayerData(player.UserIDString)) CreatePlayerData(player.UserIDString);
                            if (args.Length > 3 || args.Length <= 2) { SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command)); return; }
                            if (args.Length == 3)
                            {
                                var oldvalue = LoadedData[player.UserIDString].filter;
                                var newvalue = filterValidation(args[2]);
                                LoadedData[player.UserIDString].filter = newvalue;
                                SendMessage(player, Lang("SettingUpdate", player.UserIDString, "Default" , args[1], oldvalue, newvalue));
                            }
                            break;
                        default:
                            SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command));
                            break;
                    }
                    break;

                default:
                    SendMessage(player, Lang("InvalidSyntax", player.UserIDString, command));
                    break;
            }
        }
        #endregion

        #region Plugin Methods
        void ToggleRadar(BasePlayer player, string filter = "")
        {
            if (IsRadar(player.UserIDString))
            {
                if (ActiveRadars.Contains(player.UserIDString)) ActiveRadars.Remove(player.UserIDString);
                GameObject.Destroy(player.GetComponent<Radar>());
                SendMessage(player, Lang("RadarOff", player.UserIDString));
                return;
            }

            if (filter == "") { filter = (LoadedData.ContainsKey(player.UserIDString)) ? LoadedData[player.UserIDString].filter : defaultFilter; }
            var repeat = SelectPlayerInvoke(player.UserIDString, filter);
            LoadNameList();

            if (!ActiveRadars.Contains(player.UserIDString)) ActiveRadars.Add(player.UserIDString);
            Radar whrd = player.gameObject.AddComponent<Radar>();

            whrd.CancelInvoke();
            whrd.InvokeRepeating("radar", 1f, repeat);
            whrd.RefreshTime = repeat;
            whrd.filter = filter;
            whrd.setdistance = SelectPlayerDistance(player.UserIDString, filter);
            whrd.PlayerNameList = NameList;
            whrd.ExtDetails = ShowExtData;
            whrd.players = Tplayer;
            whrd.sleepers = Tsleeper;
            whrd.storages = Tstorage;
            whrd.npcs = Tnpc;
            whrd.toolcupboards = Ttoolcupboard;
            whrd.arrows = radararrows;
            whrd.playerbox = radarboxs;
            SendMessage(player, Lang("RadarOn", player.UserIDString, filter.ToUpper(), repeat.ToString(), whrd.setdistance.ToString()));
        }
        #endregion

        #region Data Storage
        // DataSystem
        class PlSettings
        {
            public string filter;
            public float playerinvoke;
            public float sleeperinvoke;
            public float storageinvoke;
            public float toolcupboardinvoke;
            public float npcinvoke;
            public float allinvoke;

            public float playerdistance;
            public float sleeperdistance;
            public float storagedistance;
            public float toolcupboarddistance;
            public float npcdistance;
            public float alldistance;
        }
        StoredData storedData;
        class StoredData { public Dictionary<string, PlSettings> SavedData = new Dictionary<string, PlSettings>(); }
        void LoadSavedData()
        {
            try
            {
                storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);
                LoadedData = storedData.SavedData;
            }
            catch
            {
                Puts("Failed to load data, creating new file");
                storedData = new StoredData();
            }
        }
        void SaveLoadedData()
        {
            storedData.SavedData = LoadedData;
            Interface.Oxide.DataFileSystem.WriteObject(Name, storedData);
        }

        void CreatePlayerData(string id)
        {
            if (!LoadedData.ContainsKey(id))
            {
                LoadedData.Add(id, new PlSettings
                {
                    filter = defaultFilter,
                    alldistance = defaultAllDistance,
                    allinvoke = defaultAllInvoke,
                    npcdistance = defaultNPCMaxDistance,
                    npcinvoke = defaultPlayerInvoke,
                    playerdistance = defaultPlayerMaxDistance,
                    playerinvoke = defaultPlayerInvoke,
                    sleeperdistance = defaultSleeperMaxDistance,
                    sleeperinvoke = defaultSleeperInvoke,
                    storagedistance = defaultStorageMaxDistance,
                    storageinvoke = defaultstorageInvoke,
                    toolcupboarddistance = defaultToolCupboardMaxDistance,
                    toolcupboardinvoke = defaultToolCupboardInvoke
                });
                SendMessage(rust.FindPlayer(id), "<color=yellow>Player Data File Created!</color>");
            }
        }
        #endregion

        #region Clamping & Value Validation

        float distanceClamp(string filter, float distance)
        {
            if (filter == "player") return (distance <= limitPlayerDistanceLow) ? limitPlayerDistanceLow : (distance >= limitPlayerDistanceHigh) ? limitPlayerDistanceHigh : distance;
            if (filter == "sleeper") return (distance <= limitSleeperDistanceLow) ? limitSleeperDistanceLow : (distance >= limitSleeperDistanceHigh) ? limitSleeperDistanceHigh : distance;
            if (filter == "storage") return (distance <= limitstorageDistanceLow) ? limitstorageDistanceLow : (distance >= limitstorageDistanceHigh) ? limitstorageDistanceHigh : distance;
            if (filter == "toolcupboard") return (distance <= limitToolCupboardDistanceLow) ? limitToolCupboardDistanceLow : (distance >= limitToolCupboardDistanceHigh) ? limitToolCupboardDistanceHigh : distance;
            if (filter == "npc") return (distance <= limitNPCDistanceLow) ? limitNPCDistanceLow : (distance >= limitNPCDistanceHigh) ? limitNPCDistanceHigh : distance;
            if (filter == "all") return (distance <= limitAllDistanceLow) ? limitAllDistanceLow : (distance >= limitAllDistanceHigh) ? limitAllDistanceHigh : distance;
            return defaultAllDistance;
        }
        float invokeClamp(string filter, float invokes)
        {
            if (filter == "player") return (invokes < limitPlayerInvokeLow) ? limitPlayerInvokeLow : (invokes > limitPlayerInvokeHigh) ? limitPlayerInvokeHigh : invokes;
            if (filter == "sleeper") return (invokes < limitSleeperInvokeLow) ? limitSleeperInvokeLow : (invokes > limitSleeperInvokeHigh) ? limitSleeperInvokeHigh : invokes;
            if (filter == "storage") return (invokes < limitstorageInvokeLow) ? limitstorageInvokeLow : (invokes > limitstorageInvokeHigh) ? limitstorageInvokeHigh : invokes;
            if (filter == "toolcupboard") return (invokes < limitToolCupboardInvokeLow) ? limitToolCupboardInvokeLow : (invokes > limitToolCupboardInvokeHigh) ? limitToolCupboardInvokeHigh : invokes;
            if (filter == "npc") return (invokes < limitNPCInvokeLow) ? limitNPCInvokeLow : (invokes > limitNPCInvokeHigh) ? limitNPCInvokeHigh : invokes;
            if (filter == "all") return (invokes < limitAllInvokeLow) ? limitAllInvokeLow : (invokes > limitAllInvokeHigh) ? limitAllInvokeHigh : invokes;
            return defaultAllInvoke;
        }

        string filterValidation(string filter)
        {
            if (Tplayer && filter.Contains("pla")) return "player";
            else if (Tsleeper && filter.Contains("sle")) return "sleeper";
            else if (Tstorage && filter.Contains("sto") || filter.Contains("bo") || filter.Contains("con")) return "storage";
            else if (Ttoolcupboard && filter.Contains("tool") || filter.Contains("cup") || filter.Contains("cab") || filter == "tc" || filter == "auth") return "toolcupboard";
            else if (Tnpc && filter == "npc" || filter.Contains("ani")) return "npc";
            else if (Tall && filter.Contains("al")) return "all";
            else return string.Empty;
        }

        string settingValidation(string arg) { return (arg.Contains("dis")) ? "distance" : (arg.Contains("inv")) ? "invoke" : arg; }

        float SelectPlayerInvoke(string id, string filter)
        {
            if (filter == "player") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].playerinvoke) : invokeClamp(filter, defaultPlayerInvoke);
            if (filter == "sleeper") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].sleeperinvoke) : invokeClamp(filter, defaultSleeperInvoke);
            if (filter == "storage") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].storageinvoke) : invokeClamp(filter, defaultstorageInvoke);
            if (filter == "toolcupboard") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].toolcupboardinvoke) : invokeClamp(filter, defaultToolCupboardInvoke);
            if (filter == "npc") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].npcinvoke) : invokeClamp(filter, defaultNPCInvoke);
            if (filter == "all") return (HasPlayerData(id)) ? invokeClamp(filter, LoadedData[id].allinvoke) : invokeClamp(filter, defaultAllInvoke);
            return defaultAllInvoke;
        }

        float SelectPlayerDistance(string id, string filter)
        {
            if (filter == "player") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].playerdistance) : distanceClamp(filter, defaultPlayerMaxDistance);
            if (filter == "sleeper") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].sleeperdistance) : distanceClamp(filter, defaultSleeperMaxDistance);
            if (filter == "storage") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].storagedistance) : distanceClamp(filter, defaultStorageMaxDistance);
            if (filter == "toolcupboard") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].toolcupboarddistance) : distanceClamp(filter, defaultToolCupboardMaxDistance);
            if (filter == "npc") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].npcdistance) : distanceClamp(filter, defaultNPCMaxDistance);
            if (filter == "all") return (HasPlayerData(id)) ? distanceClamp(filter, LoadedData[id].alldistance) : distanceClamp(filter, defaultAllDistance);
            return defaultAllDistance;
        }

        void LoadNameList()
        {
            foreach (var pl in covalence.Players.All)
            {
                if (!NameList.ContainsKey(pl.Id)) NameList.Add(pl.Id, pl.Name);
            }
        }

        void LoadFilterList()
        {
            FilterList.Clear();
            if (Tplayer) FilterList.Add("player");
            if (Tsleeper) FilterList.Add("sleeper");
            if (Tstorage) FilterList.Add("storage");
            if (Ttoolcupboard) FilterList.Add("toolcupboard");
            if (Tnpc) FilterList.Add("npc");
            if (Tall) FilterList.Add("all");
        }
        #endregion

        #region Helper
        void SendMessage(BasePlayer player, string message) => rust.SendChatMessage(player, $"<color=grey>[<color=teal>{ChatPrefix}</color>]</color>","<color=grey>" + message + "</color>", ChatIcon);
        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
        bool IsRadar(string id) => ActiveRadars.Contains(id);
        bool Allowed(BasePlayer player) => permission.UserHasGroup(player.UserIDString, "admin") || permission.UserHasPermission(player.UserIDString, "adminradar." + permAllowed);
        private bool HasPlayerData(string id) => LoadedData.ContainsKey(id);

        string ListToString<T>(List<T> list, int first = 0, string seperator = ", ") => string.Join(seperator, (from val in list select val.ToString()).Skip(first).ToArray());
        void SetConfig(params object[] args) { List<string> stringArgs = (from arg in args select arg.ToString()).ToList(); stringArgs.RemoveAt(args.Length - 1); if (Config.Get(stringArgs.ToArray()) == null) Config.Set(args); }
        T GetConfig<T>(T defaultVal, params object[] args) { List<string> stringArgs = (from arg in args select arg.ToString()).ToList(); if (Config.Get(stringArgs.ToArray()) == null) { PrintError($"The plugin failed to read something from the config: {ListToString(stringArgs, 0, "/")}{Environment.NewLine}Please reload the plugin and see if this message is still showing. If so, please post this into the support thread of this plugin."); return defaultVal; } return (T)System.Convert.ChangeType(Config.Get(stringArgs.ToArray()), typeof(T)); }
        bool RadarList(out string list)
        {
            string namelist = string.Empty;
            foreach (var key in ActiveRadars)
            {
                namelist += $"<color=red>{rust.FindPlayer(key).displayName}</color>\n";
            }
            list = namelist;
            return ActiveRadars.Count != 0;
        }

        private void SendHelpText(BasePlayer player)
        {
            string message =
                "<size=13>---- Radar Commands ----\n" +
                "<color=red>/radar</color> <color=green>(filter)</color> - <color=yellow>activates radar with default settings or with optional filter</color>\n" +
                "<color=red>/radar list</color> - <color=yellow>Shows a list of players using Radar</color>\n" +
                "<color=red>/radar give</color> <color=green>[target] (filter)</color> - <color=yellow>Give a player radar with filter</color>\n" +
                "<color=red>/radar filterlist</color> - <color=yellow>shows available filters</color>\n" +
                "<color=red>/radar setting</color> <color=green>[filter] [invoke/distance] [value]</color> - <color=yellow>Set custom default filter setting for self</color>\n" +
                "<color=red>/radar setting filter</color> <color=green>[NewDefaultFilter]</color> - <color=yellow>Set a new default filter for self</color></size>";

            if (Allowed(player))
            {
                player.ChatMessage(message);
            }

        }
        #endregion

    }
}


// --- End of file: AdminRadar.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/TeamJoin.cs ---
// --- Original Local Path: TeamJoin.cs ---

﻿using CompanionServer.Handlers;
using Newtonsoft.Json;
using Oxide.Core;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using System;



namespace Oxide.Plugins
{
    [Info("TeamJoin", "Frizen", "1.0.0")]
    public class TeamJoin : RustPlugin
    {
       
        private Locker _locker;


        [JsonProperty(PropertyName = "Def players", ObjectCreationHandling = ObjectCreationHandling.Replace)]
        public List<ulong> _defside = new List<ulong>();

        [JsonProperty(PropertyName = "Admin Position", ObjectCreationHandling = ObjectCreationHandling.Replace)]
        public List<Vector3> positionAdmin = new List<Vector3>();

        [JsonProperty(PropertyName = "Players Position", ObjectCreationHandling = ObjectCreationHandling.Replace)]
        public List<Vector3> positionplayers = new List<Vector3>();

        [JsonProperty(PropertyName = "Lockers Position", ObjectCreationHandling = ObjectCreationHandling.Replace)]
        public List<Vector3> lockerspos = new List<Vector3>();

        [JsonProperty(PropertyName = "Lockers List", ObjectCreationHandling = ObjectCreationHandling.Replace)]
        public HashSet<BaseEntity> lockersList = new HashSet<BaseEntity>();




        private RelationshipManager.PlayerTeam TeamPl;
        private RelationshipManager.PlayerTeam TeamAd;
        void OnServerInitialized()
        {
           
            var teamadm = RelationshipManager.Instance.CreateTeam();
            var teampl = RelationshipManager.Instance.CreateTeam();
            TeamPl = teampl;
            TeamAd = teamadm;
            foreach (var players in BasePlayer.activePlayerList)
            {
                if (players.IsAdmin || _defside.Contains(players.userID))
                {
                    TeamAd.AddPlayer(players);
                }
                else
                {
                    TeamPl.AddPlayer(players);
                }
            }
            InvokeHandler.Instance.InvokeRepeating(RefreshTeam, 60f, 60f);
            Server.Command("relationshipmanager.maxteamsize 150");
        }

        
        void SpawnLocker()
        {
            for (int i = 0; i < lockerspos.Count; i++)
            {
                var LockerM = GameManager.server.CreateEntity("assets/prefabs/deployable/locker/locker.deployed.prefab", lockerspos[i], Quaternion.identity);
                LockerM.Spawn();
                lockersList.Add(LockerM);
            }
           
        }



       
            public void Teleport(BasePlayer player, BasePlayer target) => Teleport(player, target.transform.position);
        public void Teleport(BasePlayer player, float x, float y, float z) => Teleport(player, new Vector3(x, y, z));
        public void Teleport(BasePlayer player, Vector3 position)
        {
            if (player.IsDead() && player.IsConnected)
            {
                player.RespawnAt(position, Quaternion.identity);
                return;
            }
            var ret = Interface.Call("CanTeleport", player) as string;
            if (ret != null)
            {
                SendReply(player, ret);
                return;
            }
            BaseMountable mount = player.GetMounted();
            if (mount != null) mount.DismountPlayer(player);
            if (player.net?.connection != null) player.ClientRPCPlayer(null, player, "StartLoading");
            player.StartSleeping();
            player.MovePosition(position);
            if (player.net?.connection != null) player.ClientRPCPlayer(null, player, "ForcePositionTo", position);
            if (player.net?.connection != null) player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.UpdateNetworkGroup();
            player.SendNetworkUpdateImmediate(false);
            if (player.net?.connection == null) return;
            try
            {
                player.ClearEntityQueue(null);
            }
            catch { }
            player.SendFullSnapshot();
        }






        [ChatCommand("event")]
        void cmdCommandMain(BasePlayer player, string command, string[] args)
        {
            var pos = player.transform.position;
            if (args.Length == 0)
            {
                SendReply(player, "Input err");
                return;
            }
            if (player.Connection.authLevel < 2) return;
            switch (args[0])
            {
                case "DefA":
                    string name = args[1];
                    BasePlayer target = FindBasePlayer(name);
                    if (!_defside.Contains(target.userID))
                        _defside.Add(target.userID);
                    break;
                case "DefR":
                    string namer = args[1];
                    BasePlayer targetr = FindBasePlayer(namer);
                    if (!_defside.Contains(targetr.userID))
                        _defside.Remove(targetr.userID);
                    break;
                case "Plpos":
                    if (!positionplayers.Contains(pos))
                        positionplayers.Add(pos);
                    break;
                case "Admpos":
                    if (!positionAdmin.Contains(pos))
                        positionAdmin.Add(pos);
                    SendReply(player, "Успешное добавление позиции");
                    break;
                case "Clearpos":
                    if (positionAdmin != null && positionplayers != null)
                    {
                        positionAdmin.Clear();
                        positionplayers.Clear();
                    }
                    break;
                case "tpall":
                    foreach (var p in BasePlayer.activePlayerList)
                    {
                        if (p != null && !p.IsDead() && !p.IsSleeping() && !p.IsWounded() && !(p == player))
                        {
                            Teleport(p, player);
                        } 
                    }
                    break;
            }
        }


       



        public BasePlayer FindBasePlayer(string nameOrUserId)
        {
            nameOrUserId = nameOrUserId.ToLower();
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (player.displayName.ToLower().Contains(nameOrUserId) || player.UserIDString == nameOrUserId) return player;
            }
            foreach (var player in BasePlayer.sleepingPlayerList)
            {
                if (player.displayName.ToLower().Contains(nameOrUserId) || player.UserIDString == nameOrUserId) return player;
            }
            return default(BasePlayer);
        }

        object OnPlayerRespawn(BasePlayer player)
        {
           
            var randomIndexAdm = new System.Random().Next(0, positionAdmin.Count);
            var randomIndexpl = new System.Random().Next(0, positionplayers.Count);
            if (_defside.Contains(player.userID) || player.IsAdmin)
            {
                if (positionAdmin != null)
                    return new BasePlayer.SpawnPoint
                    {
                        pos = positionAdmin[randomIndexAdm]
                    };
            }
            else
            {
                if (positionplayers != null)
                    return new BasePlayer.SpawnPoint
                    {
                        pos = positionplayers[randomIndexpl],
                    };
            } 

            return null;
        }

        

        void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hit)
        {
            
            try
            {
                if (entity == null || hit == null) return;
                if (Vector3.Distance(sphereposition, entity.transform.position) < 35)
                {
                    hit.damageTypes.ScaleAll(0f);
                }
                var target = entity as BasePlayer;
                if (hit.InitiatorPlayer == target) return;

               
                if (target.Team == hit.InitiatorPlayer.Team)
                {
                   hit.damageTypes.ScaleAll(0f);
                }  
            }
            catch (NullReferenceException)
            { }
        }

        private Vector3 sphereposition;

        [ChatCommand("r")]
        private void SpherePos(BasePlayer p)
        {
            if (p.net.connection.authLevel < 2)
            {
                return;
            }
            sphereposition = p.GetNetworkPosition();

        }



        object OnTeamLeave(RelationshipManager.PlayerTeam team, BasePlayer player)
        {
            if (player.IsAdmin) return true;
            if (team == TeamPl || team == TeamAd)
                return false;
            return null;
        }
            

        void OnPlayerConnected(BasePlayer player)
        {
            if (player.IsAdmin || _defside.Contains(player.userID) && TeamAd != null) 
            {
                TeamAd.AddPlayer(player);
            }
            else if (TeamPl != null)
                TeamPl.AddPlayer(player);
           
        }


        void OnPlayerDisconnected(BasePlayer player)
        {
            if (player.IsAdmin || _defside.Contains(player.userID) && TeamAd != null)
            {
                TeamAd.RemovePlayer(player.userID);
            }
            else if (TeamPl != null)
                TeamPl.RemovePlayer(player.userID);

        }

        void DestroyLocker()
        {
            if (lockersList.Count > 0)
            {
                foreach (var bases in lockersList)
                {
                    if (bases != null && !bases.IsDestroyed)
                        bases.Kill();
                }
                lockersList?.Clear();
            }
        }

        void RefreshTeam()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (player.IsAdmin || _defside.Contains(player.userID) && TeamAd != null)
                {
                    if(player.Team != TeamAd)
                        TeamAd.AddPlayer(player);
                }
                else if (TeamPl != null && player.Team != TeamPl)
                    TeamPl.AddPlayer(player);
            }
        }
        
        void Unload()
        {
            
            InvokeHandler.Instance.CancelInvoke(RefreshTeam);
            DestroyLocker();
            TeamPl.Disband();
            TeamAd.Disband();
        }




    }
}

// --- End of file: TeamJoin.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/LastManStanding.cs ---
// --- Original Local Path: LastManStanding.cs ---

using System.Collections.Generic;
using System;
using UnityEngine;
using Oxide.Core.Plugins;
using System.Reflection;
using Oxide.Core;
using System.Data;
using Rust;

namespace Oxide.Plugins
{
    [Info("LastManStanding", "TheMechanical97", "1.1.3")]
    class LastManStanding : RustPlugin
    {

        #region Plugin References

        [PluginReference]
        Plugin EventManager;

        [PluginReference]
        Plugin ZoneManager;

        [PluginReference]
        Plugin Spawns;

        #endregion

        #region Config

        //////////////////////////////////////////////////////////////////////////////////////
        // Configurations ////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        static string DefaultKit = "lmskit";
        static string EventName = "Last Man Standing";
        static string EventZoneName = "lmszone";
        static string EventSpawnFile = "lmsspawns";

        static float StartHealth = 100;

        static int SurvivalPoints = 1;
        static int WinnerPoints = 5;
        static int KillPoints = 2;

        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }

        private void LoadConfigVariables()
        {
            CheckCfg("Scoring - Tokens given to alive players when a players gets eliminated", ref SurvivalPoints);
            CheckCfg("Scoring - Tokens given to player when killing another player", ref KillPoints);
            CheckCfg("Scoring - Winner tokens", ref WinnerPoints);
            CheckCfgFloat("Player - Starting Health", ref StartHealth);
            CheckCfg("Options - Default kit", ref DefaultKit);
            CheckCfg("Options - Zone name", ref EventZoneName);
            CheckCfg("Options - Default spawnfile", ref EventSpawnFile);
            CurrentKit = DefaultKit;
        }

        private void CheckCfg<T>(string Key, ref T var)
        {
            if (Config[Key] is T)
                var = (T)Config[Key];
            else
                Config[Key] = var;
        }

        private void CheckCfgFloat(string Key, ref float var)
        {

            if (Config[Key] != null)
                var = Convert.ToSingle(Config[Key]);
            else
                Config[Key] = var;
        }

        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

        object GetEventConfig(string configname)
        {
            if (!useThisEventLMS) return null;
            if (Config[configname] == null) return null;
            return Config[configname];
        }

        private bool useThisEventLMS;
        private bool EventStarted;
        private bool Changed;
        public string CurrentKit;

        private List<LastManStandingPlayers> LMSPlayers = new List<LastManStandingPlayers>();

        #endregion Config

        #region Player Class
        //////////////////////////////////////////////////////////////////////////////////////
        // Player Class //////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        class LastManStandingPlayers : MonoBehaviour
        {
            public BasePlayer player;
            public int deaths;
            public int wins;
            public int points;

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                enabled = false;
                deaths = 0;
                points = 0;
            }
        }

        class StoredData
        {
            public Dictionary<ulong, double> totalkills = new Dictionary<ulong, double>();
            public Dictionary<ulong, double> totaldeaths = new Dictionary<ulong, double>();
            public Dictionary<ulong, double> totalwins = new Dictionary<ulong, double>();
        }

        StoredData storedData;

        void showstats(BasePlayer player)
        {
            double _totalkils;
            double _totaldeaths;
            double _totalwins;
            ulong playerID = player.userID;
            if (storedData.totalkills.TryGetValue(playerID, out _totalkils))
            {
                if (storedData.totaldeaths.TryGetValue(playerID, out _totaldeaths))
                {
                    if (storedData.totalwins.TryGetValue(playerID, out _totalwins))
                    {
                        SendReply(player, string.Format(lang.GetMessage("stats0", this)));
                        SendReply(player, string.Format(lang.GetMessage("stats4", this), player.displayName));
                        SendReply(player, string.Format(lang.GetMessage("stats1", this), _totalwins.ToString()));
                        SendReply(player, string.Format(lang.GetMessage("stats2", this), _totalkils.ToString()));
                        SendReply(player, string.Format(lang.GetMessage("stats3", this), _totaldeaths.ToString()));
                        return;
                    }
                    storedData.totalwins[playerID] = 0;
                    Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
                    showstats(player);
                    return;
                }
                storedData.totaldeaths[playerID] = 0;
                Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
                showstats(player);
                return;
            }
            storedData.totalkills[playerID] = 0;
            Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
            showstats(player);
            return;
        }

        List<BasePlayer> onlineplayers = BasePlayer.activePlayerList as List<BasePlayer>;

        #endregion

        #region Messages

        //////////////////////////////////////////////////////////////////////////////////////
        // Messages //////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"noEvent", "Event plugin doesn't exist" },
            {"statsreset", "<color=orange>All Players Stats were Reset!</color>" },
            {"statsresetconsole", "All Players Stats were Reset!" },
            {"noConfig", "Creating a new config file" },
            {"title", "<color=orange>Last Man Standing</color> : "},
            {"titleconsole", "Last Man Standing: "},
            {"noPlayers", "Last Man Standing has no more players, auto-closing."},
            {"openBroad", "Kill other players to survive! Last Player Standing Wins!"},
            {"eventWon", "{0} has won the event!"},
            {"eventDeath", "{0} has died!"},
            {"noperm", "<color=red>You don't have permission to run this command!</color>"},
            {"notEnough", "Not enough players to start the event"},
            {"tokensadded", "You got {0} Tokens for surviving!"},
            {"tokenskill", "You got {0} Tokens for killing a player!"},
            {"tokenswin", "You got {0} Tokens for winning!"},
            {"started", "Event has started! Last player alive wins!"},
            {"playersremaining", "{0} Players remaining!"},
            {"stats0", "<size=25><color=orange>----Last Man Standing Stats----</color></size>"},
            {"stats4", "Stats from: <color=#FFAA00>{0}</color>"},
            {"stats1", "Total Games Won: <color=#FFAA00>{0}</color>"},
            {"stats2", "Total Kills: <color=green>{0}</color>"},
            {"stats3", "Total Deaths: <color=red>{0}</color>"},
            {"suicide", "{0} suicided."}
        };

        private void MessageAllPlayers(string msg)
        {
            foreach (LastManStandingPlayers player in LMSPlayers)
            {
                SendReply(player.player, msg);
            }
        }

        private void MessageAllOnlinePlayers(string msg)
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (player != null)
                {
                    SendReply(player, msg);
                }
            }
        }

        #endregion

        #region Game
        //////////////////////////////////////////////////////////////////////////////////////
        // Scoring ///////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        void SearchWinner()
        {
            if (LMSPlayers.Count == 1)
            {
                foreach (LastManStandingPlayers player in LMSPlayers)
                {
                    Winner(player.player);
                }
            }
        }

        void resetstats(BasePlayer player)
        {
            storedData.totaldeaths.Clear();
            storedData.totalkills.Clear();
            storedData.totalwins.Clear();
            SendReply(player, string.Format(lang.GetMessage("title", this) + lang.GetMessage("statsreset", this)));
        }

        void resetstatsconsole()
        {
            storedData.totaldeaths.Clear();
            storedData.totalkills.Clear();
            storedData.totalwins.Clear();
        }

        void addSurvivalPoints()
        {
            foreach (LastManStandingPlayers player in LMSPlayers)
            {
                EventManager.Call("AddTokens", (player.player).userID.ToString(), SurvivalPoints); //NEED TO BE ADDED :D
                MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("tokensadded", this), SurvivalPoints.ToString()));
            }
        }

        void addKillPoints(BasePlayer player)
        {
            EventManager.Call("AddTokens", player.userID.ToString(), KillPoints);
            SendReply(player, string.Format(lang.GetMessage("title", this) + lang.GetMessage("tokenskill", this), KillPoints.ToString()));
        }

        void addkillstats(BasePlayer player)
        {
            double _totalkils;
            ulong playerID = player.userID;
            if (storedData.totalkills.TryGetValue(playerID, out _totalkils))
            {
                storedData.totalkills[playerID] = _totalkils + 1;
                Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
                return;
            }
            storedData.totalkills[playerID] = 1;
            Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
        }

        void adddeathsstats(BasePlayer player)
        {
            double _totaldeaths;
            ulong playerID = player.userID;
            if (storedData.totaldeaths.TryGetValue(playerID, out _totaldeaths))
            {
                storedData.totaldeaths[playerID] = _totaldeaths + 1;
                Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
                return;
            }
            storedData.totaldeaths[playerID] = 1;
            Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
        }

        void addwinsstats(BasePlayer player)
        {
            double _totalwins;
            ulong playerID = player.userID;
            if (storedData.totalwins.TryGetValue(playerID, out _totalwins))
            {
                storedData.totalwins[playerID] = _totalwins + 1;
                Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
                return;
            }
            storedData.totalwins[playerID] = 1;
            Interface.Oxide.DataFileSystem.WriteObject("LastManStanding", storedData);
        }


        void Winner(BasePlayer player)
        {
            addwinsstats(player);
            EventManager.Call("AddTokens", player.userID.ToString(), WinnerPoints);
            MessageAllOnlinePlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("eventWon", this), player.displayName));
            SendReply(player, string.Format(lang.GetMessage("title", this) + lang.GetMessage("tokenswin", this), WinnerPoints.ToString()));
            var emptobject = new object[] { };
            EventManager.Call("EndEvent", emptobject);
            rust.RunServerCommand("reload LastManStanding");
        }

        #endregion

        #region Oxide Hooks

        //////////////////////////////////////////////////////////////////////////////////////
        // Oxide Hooks ///////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        void Loaded()
        {
            permission.RegisterPermission("lastmanstanding.admin", this);
            storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>("LastManStanding");
            useThisEventLMS = false;
            EventStarted = false;
            lang.RegisterMessages(messages, this);
        }
        void OnServerInitialized()
        {
            if (EventManager == null)
            {
                Puts(string.Format(lang.GetMessage("noEvent", this)));
                return;
            }
            LoadVariables();
            RegisterGame();
        }
        void RegisterGame()
        {
            var success = EventManager.Call("RegisterEventGame", new object[] { EventName });
            if (success == null)
            {
                Puts(string.Format(lang.GetMessage("noEvent", this)));
                return;
            }
        }
        void LoadDefaultConfig()
        {
            Puts(string.Format(lang.GetMessage("noConfig", this)));
            Config.Clear();
            LoadVariables();
        }
        void Unload()
        {
            if (useThisEventLMS && EventStarted)
            {
                EventManager.Call("EndEvent", new object[] { });
                var objects = GameObject.FindObjectsOfType(typeof(LastManStandingPlayers));
                if (objects != null)
                    foreach (var gameObj in objects)
                        GameObject.Destroy(gameObj);
            }
        }

        #endregion

        #region EventManager Hooks

        //////////////////////////////////////////////////////////////////////////////////////
        // Event Manager hooks ///////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////

        void OnSelectEventGamePost(string name)
        {
            if (EventName == name)
            {
                useThisEventLMS = true;
                if (EventSpawnFile != null && EventSpawnFile != "")
                    EventManager.Call("SelectSpawnfile", new object[] { EventSpawnFile });
            }
            else
                useThisEventLMS = false;
        }
        void OnEventPlayerSpawn(BasePlayer player)
        {
            if (useThisEventLMS && EventStarted)
            {
                player.inventory.Strip();
                EventManager.Call("GivePlayerKit", new object[] { player, CurrentKit });
                player.health = StartHealth;
            }
        }
        void OnPostZoneCreate(string name)
        {
            if (name == EventName)
                return;
        }
        object OnEventOpenPost()
        {
            if (useThisEventLMS)
                MessageAllPlayers(lang.GetMessage("title", this) + lang.GetMessage("openBroad", this));
            return null;
        }
        object OnEventClosePost()
        {
            return null;
        }
        object OnEventEndPre()
        {
            if (useThisEventLMS)
            {
                EventStarted = false;
                useThisEventLMS = false;
                LMSPlayers.Clear();
            }
            return null;
        }

        object OnEventEndPost()
        {
            return null;
        }

        object OnEventStartPre()
        {
            var emptyobject = new object[] { };
            if (useThisEventLMS)
            {
                EventStarted = true;
                EventManager.Call("CloseEvent", emptyobject);
                MessageAllPlayers(lang.GetMessage("title", this) + lang.GetMessage("openBroad", this));
            }
            return null;
        }

        object OnSelectKit(string kitname)
        {
            if (useThisEventLMS)
            {
                CurrentKit = kitname;
                return true;
            }
            return null;
        }

        object OnEventJoinPost(BasePlayer player)
        {
            if (useThisEventLMS)
            {
                if (player.GetComponent<LastManStandingPlayers>())
                    GameObject.Destroy(player.GetComponent<LastManStandingPlayers>());
                LMSPlayers.Add(player.gameObject.AddComponent<LastManStandingPlayers>());
            }
            return null;
        }

        object OnEventLeavePost(BasePlayer player)
        {
            if (useThisEventLMS)
            {
                if (player.GetComponent<LastManStandingPlayers>())
                {
                    LMSPlayers.Remove(player.GetComponent<LastManStandingPlayers>());
                    GameObject.Destroy(player.GetComponent<LastManStandingPlayers>());
                }
            }
            if (EventStarted)
            {
                if (LMSPlayers.Count == 0)
                {
                    var emptyobject = new object[] { };
                    MessageAllPlayers(lang.GetMessage("title", this) + lang.GetMessage("noPlayers", this));
                    EventManager.Call("CloseEvent", emptyobject);
                    EventManager.Call("EndEvent", emptyobject);
                }
            }
            return null;
        }

        void OnEventPlayerAttack(BasePlayer attacker, HitInfo hitinfo)
        {
            if (useThisEventLMS)
            {

            }
            return;
        }

        void OnEventPlayerDeath(BasePlayer victim, HitInfo hitinfo)
        {
            if (useThisEventLMS)
            {
                if (hitinfo.Initiator != null) //WHEN SUICIDE
                {
                    BasePlayer attacker = hitinfo.Initiator.ToPlayer();
                    if (attacker != null) //WHEN DYING BY TRAPS
                    {
                        if (attacker != victim) //KILLING HIMSELF
                        {
                            adddeathsstats(victim); //NORMAL KILL
                            addkillstats(attacker);
                            addKillPoints(attacker);
                            MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("eventDeath", this), victim.displayName));
                            EventManager.Call("LeaveEvent", victim);
                            if (LMSPlayers.Count == 1)
                            {
                                Winner(attacker);
                                return;
                            }
                            //addSurvivalPoints();
                            MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("playersremaining", this), (LMSPlayers.Count).ToString()));
                            return;
                        }
                        adddeathsstats(victim);
                        MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("suicide", this), victim.displayName));
                        EventManager.Call("LeaveEvent", victim);
                        if (LMSPlayers.Count == 1)
                        {
                            SearchWinner();
                            return;
                        }
                        //addSurvivalPoints();
                        MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("playersremaining", this), (LMSPlayers.Count).ToString()));
                        return;
                    }
                    adddeathsstats(victim);
                    MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("eventDeath", this), victim.displayName));
                    EventManager.Call("LeaveEvent", victim);
                    if (LMSPlayers.Count == 1)
                    {
                        Winner(attacker);
                        return;
                    }
                    //addSurvivalPoints();
                    MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("playersremaining", this), (LMSPlayers.Count).ToString()));
                    return;
                } //SUICIDE 
                adddeathsstats(victim);
                MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("suicide", this), victim.displayName));
                EventManager.Call("LeaveEvent", victim);
                if (LMSPlayers.Count == 1)
                {
                    SearchWinner();
                    return;
                }
                //addSurvivalPoints();
                MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("playersremaining", this), (LMSPlayers.Count).ToString()));
                return;
            }
        }

        object EventChooseSpawn(BasePlayer player, Vector3 destination)
        {
            return null;
        }
        object OnRequestZoneName()
        {
            if (useThisEventLMS)
            {
                return EventZoneName;
            }
            return null;
        }
        object OnSelectSpawnFile(string name)
        {
            if (useThisEventLMS)
            {
                EventSpawnFile = name;
                return true;
            }
            return null;
        }
        void OnSelectEventZone(MonoBehaviour monoplayer, string radius)
        {
            if (useThisEventLMS)
            {
                return;
            }
        }
        object CanEventOpen()
        {
            if (useThisEventLMS)
            {

            }
            return null;
        }
        object CanEventStart()
        {
            if (useThisEventLMS)
            {

            }
            return null;
        }
        object OnEventStartPost()
        {
            MessageAllPlayers(string.Format(lang.GetMessage("title", this) + lang.GetMessage("started", this)));
            return null;
        }
        object CanEventJoin()
        {
            return null;
        }

        #endregion

        #region Commands

        [ChatCommand("lms")]
        private void cmdStats(BasePlayer player, string command, string[] args)
        {
            if (args[0] == "stats")
            {
                showstats(player);
            }
            if (args[0] == "reset")
            {
                if (!permission.UserHasPermission(player.UserIDString, "lastmanstanding.admin"))
                {
                    SendReply(player, string.Format(lang.GetMessage("title", this) + lang.GetMessage("noperm", this)));
                    return;
                }
                resetstats(player);
            }
        }

        [ConsoleCommand("lms.reset")]
        void cmdlmsConsole(ConsoleSystem.Arg arg)
        {
            resetstatsconsole();
            arg.ReplyWith(string.Format(lang.GetMessage("titleconsole", this) + lang.GetMessage("statsresetconsole", this)));
        }

        #endregion

    }
}


// --- End of file: LastManStanding.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MagicChat.cs ---
// --- Original Local Path: MagicChat.cs ---

using System;
using System.Collections.Generic;
using Rust;
using Oxide.Core;
using Oxide.Core.Plugins;
namespace Oxide.Plugins
{
    [Info("MagicChat", "Norn", 0.1, ResourceId = 1437)]
    [Description("An alternative chat system.")]
    public class MagicChat : RustPlugin
    {
        string DEFAULT_COLOR = "#81DAF5";

        [PluginReference]
        Plugin PopupNotifications;

        class StoredData
        {
            public Dictionary<ulong, UserInfo> Users = new Dictionary<ulong, UserInfo>();
            public StoredData()
            {
            }
        }

        class UserInfo
        {
            public ulong iUserId; // Steam ID
            public string tLastName; // Display Name
            public int iWorld; // World (0 for now)
            public bool uVoiceMuted; // Voice Chat
            public bool uPublicMuted; // Public Chat (OOC)
            public bool uLocalMuted; // Local Chat
            public bool uCanColor; // Name Color
            public string tColor; // Color hex
            public bool uColorEnabled;
            public bool uCanCustomTag; // Can Use Custom Tag In Chat
            public bool uCustomTagEnabled; // Enabled Or Not
            public string tCustomTag; // The custom tag string
            public int iMessagesSent; // Message count
            public int iInitTimestamp; // First Init
            public bool uShowIcon; // Hide/Show Icon In Chat
            public bool uIconStatus; // Hide/Show Icon In Chat
            public int iLastSeenTimestamp;
            public bool uShowPublicChat;
            public UserInfo()
            {
            }
        }

        StoredData MCData;
        private void Loaded()
        {
            MCData = Interface.GetMod().DataFileSystem.ReadObject<StoredData>(this.Title);
            if (!PopupNotifications && Convert.ToBoolean(Config["Dependencies", "PopupNotifications"])) { Config["Dependencies", "PopupNotifications"] = false; Puts("PopupNotifications [1252] has not been found. [Resetting to false]"); }
            int config_protocol = Convert.ToInt32(Config["General", "Protocol"]); if (Config["General", "Protocol"] == null)
            { Config["General", "Protocol"] = Protocol.network; }
            else if (Convert.ToInt32(Config["General", "Protocol"]) != Protocol.network)
            { Config["General", "Protocol"] = Protocol.network; }
        }
        void OnServerInitialized()
        {

        }
        void Unload()
        {
            SaveData();
        }
        string GetUserTag(BasePlayer player)
        {
            UserInfo p; string tag = "None";
            if (MCData.Users.TryGetValue(player.userID, out p))
            {
                if(p.tCustomTag.Length >= 1) tag = "<color="+ Config["General", "UserTagColor"].ToString()+">"+p.tCustomTag+"</color>";
            }
            return tag;
        }
        bool UserUpdateColor(BasePlayer player, string color)
        {
            UserInfo p;
            if (MCData.Users.TryGetValue(player.userID, out p))
            {
                p.tColor = color;
                return true;
            }
            return false;
        }
        bool UserUpdateTag(BasePlayer player, string tag)
        {
            UserInfo p;
            if (MCData.Users.TryGetValue(player.userID, out p))
            {
                p.tCustomTag = tag;
                return true;
            }
            return false;
        }
        [ChatCommand("chat")]
        private void ChatCommand(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0 || args.Length > 2)
            {
                string default_command = null;
                if (CanUserToggleSteamIcon(player))
                { default_command += "icon "; }
                if (CanUserCustomColor(player))
                { default_command += " | color "; }
                if (CanUserCustomTag(player))
                { default_command += " | tag "; }
                PrintToChat(player, "USAGE: /chat <"+default_command+ " | public>");
                if (player.net.connection.authLevel >= Convert.ToInt32(Config["Admin", "MinLevel"]))
                {
                    PrintToChat(player, "<color=yellow>ADMIN: /chat <clear></color>");
                }
                if (UserDataExists(player))
                {
                    PrintToChat(player, "[ <color=brown>"+player.displayName +"</color> ] Tag: "+ GetUserTag(player) + " [Messages Sent: <color=yellow>"+ MCData.Users[player.userID].iMessagesSent.ToString()+"</color>].");
                }
            }
            else if (args[0] == "public")
            {
               if (UserDataExists(player))
               {
                    if (MCData.Users[player.userID].uShowPublicChat) { MCData.Users[player.userID].uShowPublicChat = false; } else { MCData.Users[player.userID].uShowPublicChat = true; }
                    if (MCData.Users[player.userID].uShowPublicChat) { PrintToChat(player, "You will <color=green>now</color> see public messages."); } else { PrintToChat(player, "You will <color=red>no-longer</color> see public messages."); }
               }
            }
            else if (args[0] == "icon")
            {
                if (CanUserToggleSteamIcon(player))
                {
                    if(MCData.Users[player.userID].uShowIcon) { MCData.Users[player.userID].uShowIcon = false; } else { MCData.Users[player.userID].uShowIcon = true; }
                    if(MCData.Users[player.userID].uShowIcon){PrintToChat(player, "You will now <color=green>display</color> your steam icon.");}else{PrintToChat(player, "You have <color=red>hidden</color> your steam icon.");}
                }
                else
                {
                    PrintToChat(player, "You <color=red>don't</color> have permission to set a custom user color.");
                }
            }
            else if (args[0] == "color")
            {
                if (CanUserCustomColor(player))
                {
                    if (args.Length == 2)
                    {
                        if (args[1].Length >= 1 && args.Length <= Convert.ToInt32(Config["General", "MaxColorLength"]))
                        {
                            if(args[1] == "red" && player.net.connection.authLevel != Convert.ToInt32(Config["Admin", "MaxLevel"])) { PrintToChat("That color is <color=red>reserved.</color>."); return; }
                            if (UserUpdateColor(player, args[1]))
                            {
                                PrintToChat(player, "You have <color=green>successfully</color> updated your custom user color. (<color=" + args[1].ToString() + ">" + args[1].ToString() + "</color>).");
                            }
                        }
                        else
                        {
                            PrintToChat(player, "Please enter a <color=red>valid</color> color.");
                        }

                    }
                    else
                    {
                        if (UserColorToggle(player)) { PrintToChat(player, "You have <color=green>enabled</color> your custom user color."); } else { PrintToChat(player, "You have <color=red>disabled</color> your custom user color."); }
                        PrintToChat(player, "<color=yellow>USAGE:</color> /chat color <new>.");
                    }

                }
                else
                {
                    PrintToChat(player, "You <color=red>don't</color> have permission to set a custom user color.");
                }
            }
            else if (args[0] == "tag")
            {
                if (CanUserCustomTag(player))
                {
                    if (args.Length == 2)
                    {
                        if (args[1].Length >= 1 && args.Length <= Convert.ToInt32(Config["General", "MaxTagLength"]))
                        {
                            if (UserUpdateTag(player, args[1]))
                            {
                                PrintToChat(player, "You have <color=green>successfully</color> updated your custom user tag. (<color="+ Config["General", "UserTagColor"].ToString()+">" + args[1].ToString() + "</color>).");
                            }
                        }
                        else
                        {
                            PrintToChat(player, "Please enter a <color=red>valid</color> tag.");
                        }

                    }
                    else
                    {
                        if(UserTagToggle(player)) { PrintToChat(player, "You have <color=green>enabled</color> your custom title."); } else { PrintToChat(player, "You have <color=red>disabled</color> your custom title."); }
                        PrintToChat(player, "<color=yellow>USAGE:</color> /chat tag <new>");
                    }

                }
                else
                {
                    PrintToChat(player, "You <color=red>don't</color> have permission to set a custom user tag.");
                }
            }
            else if (args[0] == "clear")
            {
                if (player.net.connection.authLevel >= Convert.ToInt32(Config["Admin", "MaxLevel"]))
                {
                    MCData.Users.Clear();
                    SaveData();
                    PrintToChat(player, Config["Messages", "DBCleared"].ToString());
                }
                else
                {
                    PrintToChat(player, Config["Messages", "AuthLevel"].ToString());
                }
            }
        }
        void OnPlayerSleepEnded(BasePlayer player)
        {
            //InitUserData(player, true);
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (!UserDataExists(player)) InitUserData(player);
        }
        public static Int32 UnixTimeStampUTC()
        {
            Int32 unixTimeStamp;
            DateTime currentTime = DateTime.Now;
            DateTime zuluTime = currentTime.ToUniversalTime();
            DateTime unixEpoch = new DateTime(1970, 1, 1);
            unixTimeStamp = (Int32)(zuluTime.Subtract(unixEpoch)).TotalSeconds;
            return unixTimeStamp;
        }
        private object OnPlayerChat(ConsoleSystem.Arg arg)
        {
            string text = arg.Args[0];
            if (text.StartsWith(Config["General", "PublicPrefix"].ToString()))
            {
                if (Convert.ToBoolean(Config["Public", "Enabled"]))
                {
                    if (MCData.Users[arg.connection.userid].uShowPublicChat)
                    {
                        BasePlayer player = BasePlayer.FindByID(arg.connection.userid);
                        string final_text = text.Remove(0, Config["General", "PublicPrefix"].ToString().Length);
                        if (final_text.Length >= 1 && player != null) UserTextPublic(player, final_text);
                    }
                    else
                    {
                        PrintToChat(BasePlayer.FindByID(arg.connection.userid), "You <color=red>can't</color> use public chat when you can't even see it. (/chat public)");
                    }
                }
                else
                {
                    PrintToChat(BasePlayer.FindByID(arg.connection.userid), Config["Messages", "PublicDisabled"].ToString());
                }
            }
            else
            {
                if (Convert.ToBoolean(Config["Local", "Enabled"]))
                {
                    BasePlayer player = BasePlayer.FindByID(arg.connection.userid);
                    if(text.Length >= 1 && player != null) UserTextRadius(player, Convert.ToDouble(Config["Local", "Radius"]), text, UserNameColor(player));
                }
                else return null;
            }
            return false;
        }
        private void UserTextPublic(BasePlayer player, string text)
        {
            string end_result = null;
            if (player != null && player.IsConnected())
            {
                if (!UserDataExists(player)) { InitUserData(player); }
                if (Convert.ToBoolean(Config["Public", "Enabled"]))
                {
                    UserInfo user = null;
                    if (MCData.Users.TryGetValue(player.userID, out user))
                    {
                        if(user.uPublicMuted)
                        {
                            PrintToChat(player, "You are currently <color=red>muted</color> from <color=yellow>" + Config["Public", "ChatPrefex"].ToString().ToLower() + "</color> chat.");
                            return;
                        }
                        if(user.uCanCustomTag && user.uCustomTagEnabled && user.tCustomTag.Length >= 1)
                        {
                            end_result = "[<color=" + Config["Public", "PrefixColor"].ToString() + ">" + Config["Public", "ChatPrefex"].ToString() + "</color>] [<color=" + Config["General", "UserTagColor"].ToString() + ">" + user.tCustomTag + "</color>] <color=" + UserNameColor(player) + ">" + player.displayName + "</color>: " + text;
                        }
                        else
                        {
                            end_result = "[<color=" + Config["Public", "PrefixColor"].ToString() + ">" + Config["Public", "ChatPrefex"].ToString() + "</color>] <color=" + UserNameColor(player) + ">" + player.displayName + "</color>: " + text;
                        }
                        user.iMessagesSent++;
                        Puts("[" + Config["Public", "ChatPrefex"].ToString() + "] " + player.displayName + ": " + text);
                        foreach (BasePlayer target in BasePlayer.activePlayerList)
                        {
                            if(target != null && target.IsConnected())
                            {
                                if (!UserDataExists(target)) InitUserData(target);
                                if (MCData.Users[target.userID].uShowPublicChat) { if (user.uShowIcon) { rust.SendChatMessage(target, end_result, null, player.userID.ToString()); } else { rust.SendChatMessage(target, end_result, null, Config["General", "IconDisabled"].ToString()); } }
                            }
                        } 
                    }
                }
            }
        }
        private string UserNameColor(BasePlayer i)
        {
            string color = DEFAULT_COLOR;
            if (i != null && i.IsConnected())
            {
                UserInfo user = null;
                if (MCData.Users.TryGetValue(i.userID, out user))
                {
                    if (user.uCanColor)
                    {
                        if (user.uColorEnabled)
                        {
                            if (user.tColor.Length >= 1)
                            { color = user.tColor; }
                            else
                            { user.tColor = color; }
                        }
                        else
                        {
                            if (i.net.connection.authLevel >= Convert.ToInt32(Config["Admin", "MinLevel"]))
                            {
                                if (Config["AdminColors", i.net.connection.authLevel.ToString()] != null)
                                { color = Config["AdminColors", i.net.connection.authLevel.ToString()].ToString(); }
                                else
                                {
                                    if (Config["AdminColors", "1"] == null)
                                    { Config["AdminColors", "1"] = DEFAULT_COLOR; color = Config["AdminColors", "1"].ToString(); }
                                    else
                                    { color = Config["AdminColors", "1"].ToString(); }
                                }
                            }
                        }
                    }
                }
            }
            return color;
        }
        private void UserTextRadius(BasePlayer player, double radius, string text, string name_color = "")
        {
            if (!UserDataExists(player))
            {
                InitUserData(player);
            }
            if (player.IsConnected())
            {
                float posx;
                float posy;
                float posz;
                float oldposx = 0.0f, oldposy = 0.0f, oldposz = 0.0f, tempposx = 0.0f, tempposy = 0.0f, tempposz = 0.0f;
                oldposx = player.transform.position.x;
                oldposy = player.transform.position.y;
                oldposz = player.transform.position.z;
                string gradient1 = Config["FadeGradient", "1"].ToString();
                string gradient2 = Config["FadeGradient", "2"].ToString();
                string gradient3 = Config["FadeGradient", "3"].ToString();
                string gradient4 = Config["FadeGradient", "4"].ToString();
                string gradient5 = Config["FadeGradient", "5"].ToString();
                foreach (BasePlayer i in BasePlayer.activePlayerList)
                {
                    if (i.IsConnected())
                    {
                        posx = i.transform.position.x;
                        posy = i.transform.position.y;
                        posz = i.transform.position.z;
                        tempposx = (oldposx - posx);
                        tempposy = (oldposy - posy);
                        tempposz = (oldposz - posz);
                        string end_color = null;
                        if (((tempposx < radius / 16) && (tempposx > -radius / 16)) && ((tempposy < radius / 16) && (tempposy > -radius / 16)) && ((tempposz < radius / 16) && (tempposz > -radius / 16)))
                        {
                            end_color = gradient1;
                        }
                        else if (((tempposx < radius / 8) && (tempposx > -radius / 8)) && ((tempposy < radius / 8) && (tempposy > -radius / 8)) && ((tempposz < radius / 8) && (tempposz > -radius / 8)))
                        {
                            end_color = gradient2;
                        }
                        else if (((tempposx < radius / 4) && (tempposx > -radius / 4)) && ((tempposy < radius / 4) && (tempposy > -radius / 4)) && ((tempposz < radius / 4) && (tempposz > -radius / 4)))
                        {
                            end_color = gradient3;
                        }
                        else if (((tempposx < radius / 2) && (tempposx > -radius / 2)) && ((tempposy < radius / 2) && (tempposy > -radius / 2)) && ((tempposz < radius / 2) && (tempposz > -radius / 2)))
                        {
                            end_color = gradient4;
                        }
                        else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
                        {
                            end_color = gradient5;
                        }
                        if (end_color != null)
                        {
                            string return_string = null;
                            UserInfo user = null;
                            if (MCData.Users.TryGetValue(player.userID, out user))
                            {
                                if (user.uLocalMuted)
                                {
                                    PrintToChat(player, "You are currently <color=red>muted</color> from <color=yellow>" + Config["Local", "ChatPrefex"].ToString().ToLower() + "</color> chat.");
                                    return;
                                }
                                if (Convert.ToBoolean(Config["Local", "ShowPlayerTags"]))
                                {
                                    if (user.uCanCustomTag && user.uCustomTagEnabled)
                                    {
                                        return_string = "[<color=" + Config["Local", "PrefixColor"].ToString() + ">" + Config["Local", "ChatPrefex"].ToString() + "</color>] [<color=" + Config["General", "UserTagColor"].ToString() + ">" + user.tCustomTag + "</color>]<color=" + name_color + "> " + player.displayName + "</color>: <color=" + end_color + ">" + text + "</color>";
                                    }
                                    else
                                    {
                                        return_string = "[<color=" + Config["Local", "PrefixColor"].ToString() + ">" + Config["Local", "ChatPrefex"].ToString() + "</color>] <color=" + name_color + "> " + player.displayName + "</color>: <color=" + end_color + ">" + text + "</color>";
                                    }
                                    user.iMessagesSent++;
                                    Puts("[" + Config["Local", "ChatPrefex"].ToString() + "] " + player.displayName + ": " + text);
                                    //Puts(i.displayName + " has sent " + user.iMessagesSent.ToString() + " messages.");
                                }

                            }
                            if (return_string.Length >= 1)
                            {

                                if (!user.uShowIcon && !user.uIconStatus) { user.uShowIcon = true; }
                                if (user.uColorEnabled && !user.uCanColor) { user.uColorEnabled = false; }
                                if (user.uCustomTagEnabled && !user.uCanCustomTag) { user.uCustomTagEnabled = false; }
                                if (user.uShowIcon)
                                {
                                    rust.SendChatMessage(i, return_string, null, player.userID.ToString());
                                }
                                else
                                {
                                    if (user.uIconStatus) rust.SendChatMessage(i, return_string, null, Config["General", "IconDisabled"].ToString());
                                }
                            }
                        }
                    }
                }
            }
        }
        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
           if(UserDataExists(player)) { MCData.Users[player.userID].tLastName = player.displayName; MCData.Users[player.userID].iLastSeenTimestamp = UnixTimeStampUTC(); }
        }
        private bool InitUserData(BasePlayer player, bool debug = false)
        {
            if (!UserDataExists(player))
            {
                UserInfo z = new UserInfo();
                z.iLastSeenTimestamp = UnixTimeStampUTC();
                z.iMessagesSent = 0;
                z.iInitTimestamp = UnixTimeStampUTC();
                z.iUserId = player.userID;
                z.iWorld = Convert.ToInt32(Config["UserSettings", "DefaultWorld"]);
                z.tColor = Config["UserSettings", "DefaultColor"].ToString();
                z.tCustomTag = Config["UserSettings", "DefaultTag"].ToString();
                z.uCanColor = Convert.ToBoolean(Config["UserSettings", "DefaultCanColor"]);
                z.uCanCustomTag = Convert.ToBoolean(Config["UserSettings", "DefaultCanTag"]);
                z.uLocalMuted = false;
                z.uPublicMuted = false;
                z.tLastName = player.displayName;
                if(Convert.ToBoolean(Config["General", "VoipEnabled"])) { z.uVoiceMuted = false; } else { z.uVoiceMuted = true; }
                z.uShowIcon = Convert.ToBoolean(Config["General", "ShowUserIcons"]);
                z.uColorEnabled = false;
                z.uIconStatus = Convert.ToBoolean(Config["UserSettings", "AllowIconHide"]);
                z.uCustomTagEnabled = false;
                z.uShowPublicChat = Convert.ToBoolean(Config["UserSettings", "DefaultPublicChat"]);
                MCData.Users.Add(z.iUserId, z);
                Puts("Adding " + z.tLastName + " to the database. [VOIP Muted: " + z.uVoiceMuted.ToString() + "]");
                return true;
            }
            else
            {
                if(debug) { Puts("DEBUG: Resetting " + player.displayName + "'s MagicChat entry."); MCData.Users.Remove(player.userID); InitUserData(player); }
            }
            return false;
        }
        private bool CanUserToggleSteamIcon(BasePlayer player)
        {
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    return item.uIconStatus;
                }
            }
            return false;
        }
        private bool CanUserCustomColor(BasePlayer player)
        {
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    return item.uCanColor;
                }
            }
            return false;
        }
        private bool UserColorToggle(BasePlayer player)
        {
            bool return_b = false;
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    if (item.uColorEnabled)
                    {
                        item.uColorEnabled = false;
                    }
                    else
                    {
                        item.uColorEnabled = true;
                    }
                    return_b = item.uColorEnabled;
                }
            }
            return return_b;
        }
        private bool UserTagToggle(BasePlayer player)
        {
            bool return_b = false;
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    if (item.uCustomTagEnabled)
                    {
                        item.uCustomTagEnabled = false;
                    }
                    else
                    {
                        item.uCustomTagEnabled = true;
                    }
                    return_b = item.uCustomTagEnabled;
                }
            }
            return return_b;
        }
        private bool UserTagEnabled(BasePlayer player)
        {
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    return item.uCustomTagEnabled;
                }
            }
            return false;
        }
        private bool CanUserCustomTag(BasePlayer player)
        {
            if (player.isConnected && player != null)
            {
                UserInfo item = null;
                if (MCData.Users.TryGetValue(player.userID, out item))
                {
                    return item.uCanCustomTag;
                }
            }
            return false;
        }
        private bool UserDataExists(BasePlayer player)
        {
            UserInfo item = null;
            if (MCData.Users.TryGetValue(player.userID, out item))
            {
                return true;
            }
            return false;
        }
        void SaveData()
        {
            Puts("Saving database...");
            Interface.Oxide.DataFileSystem.WriteObject(this.Title, MCData);
        }
        protected override void LoadDefaultConfig()
        {
            Puts("No configuration file found, generating...");
            Config.Clear();

            // --- [ ADMIN ] ---

            Config["Admin", "MinLevel"] = 1;
            Config["Admin", "MaxLevel"] = 2;

            Config["AdminColors", "1"] = "#b4da73";
            
            // --- [ GENERAL SETTINGS ] ---

            Config["General", "Protocol"] = Protocol.network;
            Config["General", "MaxTagLength"] = 15;
            Config["General", "MaxColorLength"] = 10;
            Config["General", "VoipEnabled"] = true;
            Config["General", "ShowUserIcons"] = true;
            Config["General", "UserTagColor"] = "#00FFFF";
            Config["General", "PublicPrefix"] = "@";
            Config["General", "IconDisabled"] = "76561197967728661";

            // --- [ NOTIFICATIONS SETTINGS ] ---

            Config["Notifications", "TimerInterval"] = 60;
            Config["Notifications", "Enabled"] = true;

            // --- [ DEPENDENCIES ] ---

            Config["Dependencies", "PopupNotifications"] = false;
 

            // --- [ USER SETTINGS ] ---

            Config["UserSettings", "DefaultCanTag"] = true;
            Config["UserSettings", "DefaultCanColor"] = true;
            Config["UserSettings", "DefaultWorld"] = 0;
            Config["UserSettings", "DefaultColor"] = DEFAULT_COLOR;
            Config["UserSettings", "AdminColor"] = "#b4da73";
            Config["UserSettings", "DefaultTag"] = "O.G.";
            Config["UserSettings", "AllowIconHide"] = false;
            Config["UserSettings", "DefaultPublicChat"] = true;

            // --- [ LOCAL SETTINGS ] ---

            Config["Local", "Radius"] = 60.00;
            Config["Local", "FadeColors"] = true;
            Config["Local", "ChatPrefex"] = "Local";
            Config["Local", "PrefixColor"] = "#F5A9F2";
            Config["Local", "PrefixEnabled"] = true;
            Config["Local", "ShowPlayerTags"] = true;
            Config["Local", "Enabled"] = true;

            // --- [ PUBLIC SETTINGS ] ---

            Config["Public", "ChatPrefex"] = "Public";
            Config["Public", "PrefixColor"] = "#82FA58";
            Config["Public", "PrefixEnabled"] = true;
            Config["Public", "ShowPlayerTags"] = true;
            Config["Public", "Enabled"] = true;

            // --- [ FADE COLORS ] ---

            Config["FadeGradient", "1"] = "#E6E6E6";
            Config["FadeGradient", "2"] = "#C8C8C8";
            Config["FadeGradient", "3"] = "#AAAAAA";
            Config["FadeGradient", "4"] = "#8C8C8C";
            Config["FadeGradient", "5"] = "#6E6E6E";

            // --- [ MESSAGES ] ---

            Config["Messages", "PublicDisabled"] = "Public chat is currently <color=red>disabled</color>.";
            Config["Messages", "DBCleared"] = "You have <color=green>successfully</color> cleared the " + this.Title + " database.";
            Config["Messages", "AuthLevel"] = "You <color=red>don't</color> have the required auth level.";
            SaveConfig();
        }
    }
}

// --- End of file: MagicChat.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ConsoleMessages.cs ---
// --- Original Local Path: ConsoleMessages.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins {
    [Info("ConsoleMessages", "Skrallex", "1.1.1", ResourceId = 2093)]
    [Description("Send messages to players with a console command")]
    class ConsoleMessages : RustPlugin {
        bool UsePermissionsOnly = false;

        const string adminPerm = "consolemessages.admin";
        const string sayPerm = "consolemessages.say";
        const string sayAllPerm = "consolemessages.sayall";
        const string replyPerm = "consolemessages.reply";

        void Loaded() {
            permission.RegisterPermission(adminPerm, this);
            permission.RegisterPermission(sayPerm, this);
            permission.RegisterPermission(sayAllPerm, this);
            permission.RegisterPermission(replyPerm, this);
            LoadDefaultMessages();
            LoadConfig();
        }

        protected override void LoadDefaultConfig() {
            Puts("Generating default config file");
            Config.Clear();
            Config["UsePermissionsOnly"] = false;
            SaveConfig();
        }

        void LoadConfig() {
            this.UsePermissionsOnly = (bool)Config["UsePermissionsOnly"];
        }

        void LoadDefaultMessages() {
            lang.RegisterMessages(new Dictionary<string, string> {
                {"Prefix", "<color=orange>ConsoleMessages</color>:"},
                {"NoPermission", "You do not have permission to use this command."},
                {"SaySyntax", "Syntax: cm.say PlayerName This is a message"},
                {"SayNPSyntax", "Syntax: cm.saynp PlayerName This is a message (No Prefix)"},
                {"SayAllSyntax", "Syntax: cm.sayall This is a message"},
                {"SayAllNPSyntax", "Syntax: cm.sayallnp This is a message (No Prefix)"},
                {"ReplySyntax", "Syntax: /cm_reply Message"},
                {"SayMessageSent", "Sent message to {0}: \"{1}\""},
                {"SayAllMessageSent", "Sent message to all online players: \"{0}\""},
                {"MessageSent", "Your message \"{0}\" was sent to the console."},
                {"ManyPlayersFound", "Multiple players found with that name, please be more specific."},
                {"NoPlayersFound", "No players found with that name, please try another."}
            }, this);
        }

        //Prefix attached to message.
        [ConsoleCommand("cm.say")]
        void ConsoleCmdCMSay(ConsoleSystem.Arg args) {
            if(args.Args.Length < 2) {
                ReplyConsole(args, "SaySyntax");
                return;
            }
            CMSay(args);
        }

        //No prefix attached to message.
        [ConsoleCommand("cm.saynp")]
        void ConsoleCmdCMSayNP(ConsoleSystem.Arg args) {
            if(args.Args.Length < 2) {
                ReplyConsole(args, "SayNPSyntax", false);
                return;
            }
            CMSay(args, false);
        }

        [ConsoleCommand("cm.sayall")]
        void ConsoleCmdCMSayAll(ConsoleSystem.Arg args) {
            if(args.Args.Length < 1) {
                ReplyConsole(args, "SayAllSyntax");
                return;
            }
            CMSayAll(args);
        }

        [ConsoleCommand("cm.sayallnp")]
        void ConsoleCmdCMSayAllNP(ConsoleSystem.Arg args) {
            if(args.Args.Length < 1) {
                ReplyConsole(args, "SayAllNPSyntax");
                return;
            }
            CMSayAll(args, false);
        }

        void CMSay(ConsoleSystem.Arg args, bool usePrefix = true) {
            string msg = "";
            string[] words = args.Args.Skip(1).ToArray();
            if(args.Player() != null && !IsAllowed(args.Player(), sayPerm)) {
                ReplyConsole(args, "NoPermission", usePrefix);
                return;
            }
            if(GetPlayersByName(args.GetString(0)).Count > 1) {
                ReplyConsole(args, "ManyPlayersFound", usePrefix);
                return;
            }
            if(GetPlayersByName(args.GetString(0)).Count == 0) {
                ReplyConsole(args, "NoPlayersFound", usePrefix);
                return;
            }
            foreach(string word in words) {
                msg += word + " ";
            }

            BasePlayer target = GetPlayersByName(args.GetString(0))[0];
            ReplyPlayer(target, msg, usePrefix);
            ReplyConsoleFormatted(args, String.Format(Lang("SayMessageSent"), target.displayName, msg), usePrefix);
        }

        void CMSayAll(ConsoleSystem.Arg args, bool usePrefix = true) {
            string msg = "";
            if(args.Player() != null && !IsAllowed(args.Player(), sayAllPerm)) {
                ReplyConsole(args, "NoPermission", usePrefix);
                return;
            }
            foreach(string word in args.Args) {
                msg += word + " ";
            }
            foreach(BasePlayer activePlayer in BasePlayer.activePlayerList) {
                ReplyPlayer(activePlayer, msg, usePrefix);
            }
            ReplyConsoleFormatted(args, String.Format(Lang("SayAllMessageSent"), msg), usePrefix);
        }

        [ChatCommand("cm_reply")]
        void ChatCmdCMReply(BasePlayer player, string cmd, string[] args) {
            string msg = "";
            if(!IsAllowed(player, replyPerm)) {
                ReplyPlayer(player, "NoPermission");
                return;
            }
            if(args.Length < 1) {
                ReplyPlayer(player, "ReplySyntax");
                return;
            }

            foreach(string arg in args) {
                msg += arg + " ";
            }
            Puts(player.displayName + ": " + msg);
            ReplyFormatted(player, String.Format(Lang("MessageSent"), msg));
        }

        List<BasePlayer> GetPlayersByName(string playerName) {
            List<BasePlayer> foundPlayers = new List<BasePlayer>();
            foreach(BasePlayer activePlayer in BasePlayer.activePlayerList) {
                if(activePlayer.displayName.ToLower().Contains(playerName.ToLower()) || activePlayer.UserIDString.Equals(playerName))
                    foundPlayers.Add(activePlayer);
            }
            return foundPlayers;
        }

        void ReplyPlayer(BasePlayer player, string langKey, bool usePrefix = true) {
            if(!usePrefix) {
                SendReply(player, Lang(langKey));
                return;
            }
            SendReply(player, Lang("Prefix") + " " + Lang(langKey));
        }

        void ReplyFormatted(BasePlayer player, string msg, bool usePrefix = true) {
            if(!usePrefix) {
                SendReply(player, msg);
                return;
            }
            SendReply(player, Lang("Prefix") + " " + msg);
        }

        void ReplyConsole(ConsoleSystem.Arg args, string langKey, bool usePrefix = true) {
            if(!usePrefix || args.Player() == null) {
                args.ReplyWith(Lang(langKey));
                return;
            }
            args.ReplyWith(Lang("Prefix") + " " + Lang(langKey));
        }

        void ReplyConsoleFormatted(ConsoleSystem.Arg args, string msg, bool usePrefix = true) {
            if(!usePrefix || args.Player() == null) {
                args.ReplyWith(msg);
                return;
            }
            args.ReplyWith(Lang("Prefix") + " " + msg);
        }

        bool IsAllowed(BasePlayer player, string perm) {
            if(player.IsAdmin() && !UsePermissionsOnly) return true;
            if(permission.UserHasPermission(player.UserIDString, adminPerm)) return true;
            if(permission.UserHasPermission(player.UserIDString, perm)) return true;
            return false;
        }

        string Lang(string key) {
            return lang.GetMessage(key, this, null);
        }
    }
}


// --- End of file: ConsoleMessages.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PlayerCounter.cs ---
// --- Original Local Path: PlayerCounter.cs ---

using System;
using System.Collections.Generic;
using UnityEngine;
using Oxide.Core;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("PlayerCounter", "Bamabo", "1.5.1")]
    [Description("Adds a discrete player counter to the HUD")]

    class PlayerCounter : RustPlugin
    {
        public class PlayerPreferences
        {
            public string position { get; set; }
            public bool toggle { get; set; } = true;
            public CuiElementContainer elements { get; set; }
            public string container { get; set; }
            public CuiLabel playerCounter { get; set; }

            public PlayerPreferences() { }
            public PlayerPreferences(string position, bool toggle, int fontSize, string color)
            {
                elements = new CuiElementContainer();
                playerCounter = new CuiLabel
                {
                    Text =
                {
                    Text = "",
                    FontSize = fontSize,
                    Color = color,
                    Align = TextAnchor.UpperRight
                },
                    RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
                };
                container = elements.Add(new CuiPanel
                {
                    Image =
                        {
                            Color = "0 0 0 0"
                        },
                    RectTransform =
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "1 1"
                        }
                });
                elements.Add(playerCounter, container);
                this.position = position;
                this.toggle = toggle;
            }
        }

        private Dictionary<ulong, PlayerPreferences> preferences;

        private int fontSize { get; set; }
        private string iconID { get; set; }
        private string color { get; set; }
        private bool usePerms { get; set; }
        private string defaultPos { get; set; }
        private bool showSleepers { get; set; }

        void Init()
        {
            RegisterMessages();
            permission.RegisterPermission("playercounter.toggle", this);
            permission.RegisterPermission("playercounter.display", this);
            preferences = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, PlayerPreferences>>("PlayerCounter");

            iconID = GetConfigEntry<string>("serverIconID", "00000000000000000");
            fontSize = GetConfigEntry<int>("fontsize", 18);
            color = GetConfigEntry<string>("color", "1 1 1 0.5");
            defaultPos = GetConfigEntry<string>("defaultPosition", "left");
            showSleepers = GetConfigEntry<bool>("showSleepers", false);
            usePerms = GetConfigEntry<bool>("usePermissions", false);

            foreach (var player in BasePlayer.activePlayerList)
            {
                if(!preferences.ContainsKey(player.userID))
                    preferences.Add(player.userID, new PlayerPreferences(defaultPos, true, fontSize, color));

                if (preferences[player.userID].toggle && (permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms || player.IsAdmin()) || !usePerms)
                    CuiHelper.AddUi(player, preferences[player.userID].elements);
            }
        }
        void Loaded()
        {
            UpdateCounter();
        }
        void Unload()
        {
            Interface.Oxide.DataFileSystem.WriteObject("PlayerCounter", preferences);

            foreach (var player in BasePlayer.activePlayerList)
                CuiHelper.DestroyUi(player, preferences[player.userID].container);
        }
    
        void OnPlayerSleepEnded(BasePlayer player)
        {
            NextFrame(() =>
            {
                UpdateCounter();
            });
        }
        void OnPlayerInit(BasePlayer player)
        {
            if (!preferences.ContainsKey(player.userID) && ((permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms) || player.IsAdmin() || !usePerms))
            {
                preferences.Add(player.userID, new PlayerPreferences(defaultPos, true, fontSize, color));
            }
        }
        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            NextFrame(() =>
            {
                UpdateCounter();
            });
        }

        [ChatCommand("playercounter")]
        void cmdPlayerCounter(BasePlayer sender, string command, String[] args)
        {
            if ((permission.UserHasPermission(sender.UserIDString, "playercounter.toggle") && usePerms) || sender.IsAdmin() || !usePerms)
            {
                if (preferences.ContainsKey(sender.userID))
                {
                    if (args.Length == 0)
                    {
                        if (preferences[sender.userID].toggle)
                        {
                            preferences[sender.userID].toggle = false;
                            CuiHelper.DestroyUi(sender, preferences[sender.userID].container);
                            rust.SendChatMessage(sender, String.Format(lang.GetMessage("toggledOff", this, sender.UserIDString)), null, iconID);
                        }
                        else
                        {
                            preferences[sender.userID].toggle = true;
                            if ((preferences.ContainsKey(sender.userID) && preferences[sender.userID].toggle))
                                CuiHelper.AddUi(sender, preferences[sender.userID].elements);
                            rust.SendChatMessage(sender, String.Format(lang.GetMessage("toggledOn", this, sender.UserIDString)), null, iconID);
                        }
                    }
                    else if (args.Length == 1)
                    {
                        switch (args[0].ToLower())
                        {
                            case "left":
                                preferences[sender.userID].position = "left";
                                UpdateCounterForPlayer(sender);
                                break;
                            case "middle":
                                preferences[sender.userID].position = "middle";
                                UpdateCounterForPlayer(sender);
                                break;
                            case "right":
                                preferences[sender.userID].position = "right";
                                UpdateCounterForPlayer(sender);
                                break;
                            default:
                                rust.SendChatMessage(sender, String.Format(lang.GetMessage("noPosition", this, sender.UserIDString)), null, iconID);
                                break;
                        }
                    }
                    else
                        rust.SendChatMessage(sender, String.Format(lang.GetMessage("wrongNumberOfArguments", this, sender.UserIDString)), null, iconID);
                }
            }
            else
            {
                rust.SendChatMessage(sender, String.Format(lang.GetMessage("accessDenied", this, sender.UserIDString)), null, iconID);
            }
        }

        void UpdateCounterForPlayer(BasePlayer player)
        {
            if (preferences.ContainsKey(player.userID))
                CuiHelper.DestroyUi(player, preferences[player.userID].container);

            if ((!preferences.ContainsKey(player.userID)) && (((permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms) || player.IsAdmin()) || !usePerms))
                preferences.Add(player.userID, new PlayerPreferences("right", true, fontSize, color));

            preferences[player.userID].elements = new CuiElementContainer();

            if (preferences[player.userID].position == "left")
            {
                AlignLeft(player.userID);
            }
            else if (preferences[player.userID].position == "middle")
            {
                AlignMiddle(player.userID);
            }
            else
            {
                AlignRight(player.userID);
            }
            if (preferences[player.userID].toggle && (((permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms) || player.IsAdmin()) || !usePerms))
                CuiHelper.AddUi(player, preferences[player.userID].elements);
        }

        void UpdateCounter()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                if(preferences.ContainsKey(player.userID))
                    CuiHelper.DestroyUi(player, preferences[player.userID].container);

                if ((!preferences.ContainsKey(player.userID)) && (((permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms) || player.IsAdmin()) || !usePerms))
                    preferences.Add(player.userID, new PlayerPreferences(defaultPos, true, fontSize, color));
                preferences[player.userID].elements = new CuiElementContainer(); 

                if (preferences[player.userID].position == "left")
                {
                    AlignLeft(player.userID);
                }
                else if (preferences[player.userID].position == "middle")
                {
                    AlignMiddle(player.userID);
                }
                else
                {
                    AlignRight(player.userID);
                }
                if (preferences[player.userID].toggle && (((permission.UserHasPermission(player.UserIDString, "playercounter.display") && usePerms) || player.IsAdmin()) || !usePerms))
                    CuiHelper.AddUi(player, preferences[player.userID].elements);
            }
        }

        void AlignLeft(ulong userID)
        {
            preferences[userID].container = preferences[userID].elements.Add(new CuiPanel
            {
                Image =
                        {
                            Color = "0 0 0 0"
                        },
                RectTransform =
                        {
                            AnchorMin = "0.003 0.75",
                            AnchorMax = "1 0.998"
                        }
            });


            preferences[userID].playerCounter = new CuiLabel
            {
                Text =
                {
                    Text = GetUpdatedCounterText(userID),
                    FontSize = fontSize,
                    Color = color,
                    Align = TextAnchor.UpperLeft
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            };
            preferences[userID].elements.Add(preferences[userID].playerCounter, preferences[userID].container);
        }
        void AlignMiddle(ulong userID)
        {
            preferences[userID].container = preferences[userID].elements.Add(new CuiPanel
            {
                Image =
                        {
                            Color = "0 0 0 0"
                        },
                RectTransform =
                        {
                            AnchorMin = "0 0.75",
                            AnchorMax = "1 0.998"
                        }
            });


            preferences[userID].playerCounter = new CuiLabel
            {
                Text =
                {
                    Text = GetUpdatedCounterText(userID),
                    FontSize = fontSize,
                    Color = color,
                    Align = TextAnchor.UpperCenter
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            };
            preferences[userID].elements.Add(preferences[userID].playerCounter, preferences[userID].container);
        }
        void AlignRight(ulong userID)
        {
            preferences[userID].container = preferences[userID].elements.Add(new CuiPanel
            {
                Image =
                        {
                            Color = "0 0 0 0"
                        },
                RectTransform =
                        {
                            AnchorMin = "0 0.75",
                            AnchorMax = "0.996 0.998"
                        }
            });


            preferences[userID].playerCounter = new CuiLabel
            {
                Text =
                {
                    Text = GetUpdatedCounterText(userID),
                    FontSize = fontSize,
                    Color = color,
                    Align = TextAnchor.UpperRight
                },
                RectTransform =
                {
                    AnchorMin = "0 0",
                    AnchorMax = "1 1"
                }
            };
            preferences[userID].elements.Add(preferences[userID].playerCounter, preferences[userID].container);
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file for PlayerCounter");
            Config.Clear();
            Config["color"] = "1 1 1 0.5";
            Config["defaultPosition"] = "left";
            Config["fontsize"] = 18;
            Config["serverIconID"] = "00000000000000000";
            Config["showSleepers"] = false;
            Config["usePermissions"] = false;
            SaveConfig();
        }
        
        T GetConfigEntry<T>(string configEntry, T defaultValue)
        {
            if (Config[configEntry] == null)
            {
                Config[configEntry] = defaultValue;
                SaveConfig();
            }
            return (T)Config[configEntry];
        }

        string GetUpdatedCounterText(ulong userID)
        {
            if (showSleepers)
                return String.Format(lang.GetMessage("counterWithSleepers", this, userID.ToString()), BasePlayer.activePlayerList.Count.ToString(), ConVar.Server.maxplayers.ToString(), BasePlayer.sleepingPlayerList.Count.ToString());
            else
                return String.Format(lang.GetMessage("counter", this, userID.ToString()), BasePlayer.activePlayerList.Count.ToString(), ConVar.Server.maxplayers);
        }

        void RegisterMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["accessDenied"] = "<color=red>You do not have access to that command.</color>",
                ["noPosition"] = "<color=red>There's no position by that name</color>",
                ["wrongNumberOfArguments"] = "<color=red>No PlayerCounter command takes that amount of arguments.</color>",
                ["toggledOn"] = "Toggled PlayerCounter on",
                ["toggledOff"] = "Toggled PlayerCounter off",
                ["counter"] = "{0}/{1}",
                ["counterWithSleepers"] = "{0}({2})/{1}"
            }, this);
        }
    }
} 

// --- End of file: PlayerCounter.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CashSystem.cs ---
// --- Original Local Path: CashSystem.cs ---

// Reference: Oxide.Ext.Rust
// Reference: NLua

using System.Collections.Generic;
using System;








namespace Oxide.Plugins
{
    [Info("CashSystem", "igor1150", 1.0)]
    class CashSystem : RustPlugin
    {
        private string menuPreco = "precos";
        private string menuQuantia = "quantia";
        private string menuNome = "nome";
        void OnPlayerInit(BasePlayer player){
            LoadConfig();
            if (Config[menuPreco] == null)
                GerarListaPrecos();
            if(Config[menuQuantia] == null)
                GerarListaQuantia();
            if (Config[menuNome] == null)
                GerarListaNome();
        }
        [ChatCommand("buy")]
        void chatCompra(BasePlayer player, string command, string[] args)
        {
            if (Convert.ToInt32(args[1].ToString()) == 0 || Convert.ToInt32(args[1].ToString()) == null)
            {
                SendReply(player, "To buy the amount must be greater than 0 (zero)");
                SendReply(player, "How to use: /buy \"ITEMNAME\" \"AMOUNT\"");
            }
            else
            {
                if (!VenderItem(player, args[0].ToString(), Convert.ToInt32(args[1].ToString())))
                {
                    SendReply(player, "Make sure you typed the item name correctly");
                    SendReply(player, "How to use: /buy \"ITEMNAME\" \"AMOUNT\"");
                }
            }
        }
        [ChatCommand("cash")]
        void chatCash(BasePlayer player, string command, string[] args)
        {
            SendReply(player, String.Concat("Your current cash and: ", Convert.ToString(ObterCash(player))));
        }
        [ChatCommand("addcash")]
        void chataddcash(BasePlayer player, string command, string[] args)
        {
            try
            {
                if (args[0].ToString() == "" || args[0] == null || args[0].ToString().Length <= 0)
                {
                    SendReply(player, "Enter a nickname");
                }
                if (args[1].ToString() == Convert.ToString(0) || args[1] == null)
                {
                    SendReply(player, "Enter a value");
                }
                else
                {
                    if (!AddCash(player, args[0].ToString(), Convert.ToInt32(args[1].ToString())))
                    {
                        SendReply(player, "How to use: /addcash \"PLAYERNOME\" \"AMOUNT\"");
                    }
                }
            }
            catch (Exception ex)
            {
                SendReply(player, "How to use: /addcash \"PLAYERNOME\" \"AMOUNT\"");
            }
        }
        [ChatCommand("help")]
        void chatajuda(BasePlayer player, string command, string[] args)
        {
            if (Administrador(player))
            {
                SendReply(player, "How to use: /addcash \"PLAYERNAME\" \"AMOUNT\"");
                SendReply(player, "How to use: /cash -show cash");
                SendReply(player, "How to use: /buy \"ITEMNAME\" \"AMOUNT\"");
                SendReply(player, "How to use: /generatepricelists -generates a new price list [CAUTION]");
                SendReply(player, "How to use: /generateamountlist -generates a new list of the amount of items [CAUTION]");
                SendReply(player, "How to use: /generatenamelist -generates a new list of names of items in English");
                SendReply(player, "How to use: /getprice \"ITEMNAME\"");
                SendReply(player, "How to use: /setprice \"ITEMNAME\" \"VALOR\"");
                SendReply(player, "How to use: /delitem \"ITEMNAME\"");                
                SendReply(player, "How to use: /setamount \"ITEMNAME\" \"AMOUNT\"");
                SendReply(player, "How to use: /getamount \"ITEMNAME\"");
            }
            else
            {
                SendReply(player, "How to use: /cash -show cash");
                SendReply(player, "How to use: /getprice \"ITEMNAME\"");
                if (ObterCash(player) > 0)
                {
                    SendReply(player, "How to use: /buy \"ITEMNAME\" \"AMOUNT\"");
                }
            }
        }
        [ChatCommand("generatepricelist")]
        void chatgerarlistaprecos(BasePlayer player, string command, string[] args)
        {
            if (!GerarListaPrecos())
                SendReply(player, "Error generating the list");
            else
                SendReply(player, "Success to generate the list");
        }
        [ChatCommand("getprice")]
        void chatobterpreco(BasePlayer player, string command, string[] args)
        {
            if (args[0].ToString() == "" || args[0] == null)
                SendReply(player, "enter a name of an item");
            else
            {
                int preco = ObterPreco(args[0].ToString());
                if (preco == 0 || preco < 0)
                    SendReply(player, "The item does not exist or is not for sale make sure you typed the name correctly type / help for more information");
                else
                    SendReply(player, String.Concat("The value of the item and: ", preco));

            }

        }
        [ChatCommand("setprice")]
        void chatdefinirpreco(BasePlayer player, string command, string[] args)
        {
            if (!Administrador(player))
            {
                SendReply(player, "The command does not exist");
            }
            else
            {
                if (args[0].ToString() == "" || args[0] == null || Convert.ToInt32(args[1]) == 0 || args[1] == null)
                    SendReply(player, "Enter a name of an item and price");
                else
                {
                    if (ObterPreco(args[0].ToString())>0)
                        SendReply(player, "Error setting the price of the item make sure you typed the name correctly");
                    else
                    {
                        DefinirPreco(args[0].ToString(), Convert.ToInt32(args[1]));
                        SendReply(player, String.Concat("Price change item with new price and success: ", Convert.ToString(args[1])));
                    }
                }
            }
        }
        [ChatCommand("delitem")]
        void chatremoveritem(BasePlayer player, string command, string[] args)
        {
            if (!Administrador(player))
            {
                SendReply(player, "The command does not exist");
            }
            else
            {
                if (args[0].ToString() == "" || args[0] == null)
                    SendReply(player, "Eter a name of an item");
                else
                {
                    if (ObterPreco(args[0].ToString())==0)
                        SendReply(player, "Error deleting the item make sure you typed the name correctly");
                    else
                    {
                        RemoverItem(args[0].ToString());
                        SendReply(player, "Item successfully deleted!");
                    }
                }
            }
        }
        [ChatCommand("generateamountlist")]
        void chatgerarlistaquantia(BasePlayer player, string command, string[] args)
        {
            if (!GerarListaQuantia())
                SendReply(player, "Error generating the list");
            else
                SendReply(player, "Success to generate the list");
        }
        [ChatCommand("getamount")]
        void chatobterquantia(BasePlayer player, string command, string[] args)
        {
            if (args[0].ToString() == "" || args[0] == null)
                SendReply(player, "enter a name of an item");
            else
            {
                int quantia = ObterQuantia(args[0].ToString());
                if (quantia == 0 || quantia < 0)
                    SendReply(player, "The item does not exist or is not for sale make sure you typed the name correctly type / help for more information");
                else
                    SendReply(player, String.Concat("The amount of the item and: ", quantia));

            }
        }
        [ChatCommand("setamount")]
        void chatdefinirquantia(BasePlayer player, string command, string[] args)
        {
            if (!Administrador(player))
            {
                SendReply(player, "The command does not exist");
            }
            else
            {
                if (args[0].ToString() == "" || args[0] == null || Convert.ToInt32(args[1]) == 0 || args[1] == null)
                    SendReply(player, "enter a name of an item e depois a quantia");
                else
                {
                    if (ObterPreco(args[0].ToString()) == 0)
                        SendReply(player, "Error setting the amount of the item make sure you typed the name correctly");
                    else
                    {
                        DefinirQuantia(args[0].ToString(), Convert.ToInt32(args[1]));
                        SendReply(player, String.Concat("Amount successfully changed item new amount and: ", Convert.ToString(args[1])));
                    }
                }
            }
        }

        [ChatCommand("generatenamelist")]
        void chatgerarlistanome(BasePlayer player, string command, string[] args)
        {
            if (!GerarListaNome())
                SendReply(player, "Error generating the list");
            else
                SendReply(player, "Success to generate the list");
        }


        bool VenderItem(BasePlayer player, string nome, int quantia)
        {
            try
            {
                LoadConfig();
                string ID641 = player.userID.ToString();
                object value1;
                var menu = (Config[menuNome]) as Dictionary<string, object>;
                if (menu != null)
                {
                    menu.TryGetValue(nome, out value1);
                    if (value1 != null || value1.ToString() != "")
                        nome = value1.ToString();
                }
                 int cash = ObterCash(player);
                 int preco = ObterPreco(nome);
                 if (cash < preco)
                 {
                     SendReply(player, "Your current cash and not enough to buy");
                     return false;
                 }
                 if (preco == 0)
                 {
                     return false;
                 }
                var item = ItemManager.FindItemDefinition(nome);
                if (item == null)
                    return false;            
                else{
                    string ID64 = player.userID.ToString();
                    cash -= preco * quantia;
                    SendReply(player, String.Concat("Purchased Item successfully! price: ", Convert.ToString(preco * quantia)));
                    Dictionary<string, object> subMenu = new Dictionary<string, object>();
                    subMenu.Add("cash", Convert.ToString(cash));
                    Config[ID64] = subMenu;
                    SaveConfig();
                    quantia = quantia * ObterQuantia(nome);
                    player.inventory.GiveItem(ItemManager.CreateByItemID((int)item.itemid, quantia, false), (ItemContainer)((BasePlayer)player).inventory.containerMain);              
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }
        int ObterCash(BasePlayer player)
        {
            LoadConfig();
            string ID64 = player.userID.ToString();
            var menu = (Config[ID64]) as Dictionary<string, object>;
            if (menu != null)
            {
                object value;
                menu.TryGetValue("cash", out value);
                int cash = Convert.ToInt32(value);
                if (cash > 0)
                {
                    return cash;
                }
                else
                {
                    RemoveCash((BasePlayer)player);
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        bool RemoveCash(BasePlayer player)
        {
            LoadConfig();
            string ID64 = player.userID.ToString();
            var newMenu = new Dictionary<string, object>();
            foreach (KeyValuePair<string, object> str in Config)
            {
                if (str.Key.ToString() != ID64.ToString() && str.Value != null)//testar com o str.Value eu nao testei ainda
                {
                    newMenu.Add(str.Key.ToString(), str.Value);
                }
            }
            Config.Clear();
            foreach (KeyValuePair<string, object> str in newMenu)
            {
                Config[str.Key] = str.Value;
            }
            SaveConfig();
            return true;
        }
        bool AddCash(BasePlayer player, string nick, int cash)
        {
            if (!Administrador(player))
            {
                SendReply(player, "The command does not exist");
            }
            else
            {
                var add = BasePlayer.Find(nick);
                if (add == null)
                {
                    SendReply(player, "Player not found");
                    return false;
                }
                LoadConfig();
                string ID64 = add.userID.ToString();
                if (ID64 == "" || ID64 == null)
                {
                    SendReply(player, "Error looking the ID64Steam");
                    return false;
                }
                Dictionary<string, object> subMenu = new Dictionary<string, object>();
                cash += ObterCash(add);
                subMenu.Add("cash", Convert.ToString(cash));
                Config[ID64] = subMenu;
                SaveConfig();
                SendReply(player, String.Concat("Cash added value with new success: ", Convert.ToString(cash)));
            }
            return true;
        }
        bool Administrador(BasePlayer player)
        {
            if (player.net.connection.authLevel >= 2)
                return true;
            return false;
        }
        bool GerarListaPrecos()
        {
            LoadConfig();
            var items = ItemManager.GetItemDefinitions();
            if (items == null)
                return false;
            var newMenu = new Dictionary<string, int>();
            foreach (var item in items)
            {
                newMenu.Add(Convert.ToString(item.shortname), 2);
            }
            if (newMenu == null)
                return false;
            Config[menuPreco] = newMenu;
            SaveConfig();
            return true;
        }
        int ObterPreco(string nomeItem)
        {
            LoadConfig();
            Dictionary<string, object> menu = new Dictionary<string, object>();
            menu = Config[menuPreco] as Dictionary<string, object>;    
            if (menu != null)
            {
                object value;
                menu.TryGetValue(nomeItem, out value);
                if (Convert.ToInt32(value) > 0)
                {
                    return Convert.ToInt32(value);
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        void DefinirPreco(string nomeItem, int Preco)
        {
            LoadConfig();
            var newMenu = Config[menuPreco] as Dictionary<string, object>;
            newMenu[nomeItem] = Preco;
            Config[menuPreco] = newMenu;
            SaveConfig();
        }
        void RemoverItem(string nomeItem)
        {
            LoadConfig();
            var Menu = Config[menuPreco] as Dictionary<string, object>;
            var newMenu = new Dictionary<string, object>();
            foreach (KeyValuePair<string, object> str in Menu)
            {
                if (str.Key.ToString() != nomeItem)
                {
                    newMenu.Add(str.Key.ToString(), str.Value);
                } 
            }
            Config[menuPreco] = newMenu;
            Menu = new Dictionary<string, object>();
            Menu = Config[menuQuantia] as Dictionary<string, object>;
            newMenu = new Dictionary<string, object>();
            foreach (KeyValuePair<string, object> str in Menu)
            {
                if (str.Key.ToString() != nomeItem)
                {
                    newMenu.Add(str.Key.ToString(), str.Value);
                }
            }
            Config[menuQuantia] = newMenu;
            SaveConfig();
        }
        bool GerarListaQuantia()
        {
            LoadConfig();
            var items = ItemManager.GetItemDefinitions();
            if (items == null)
                return false;
            var newMenu = new Dictionary<string, int>();
            foreach (var item in items)
            {
                newMenu.Add(Convert.ToString(item.shortname), 1);
            }
            if (newMenu == null)
                return false;
            Config[menuQuantia] = newMenu;
            SaveConfig();
            return true;
        }        
        int ObterQuantia(string nomeItem)
        {
            LoadConfig();
            Dictionary<string, object> menu = new Dictionary<string, object>();
            menu = Config[menuQuantia] as Dictionary<string, object>;
            if (menu != null)
            {
                object value;
                menu.TryGetValue(nomeItem, out value);
                if (Convert.ToInt32(value) > 0)
                {
                    return Convert.ToInt32(value);
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        void DefinirQuantia(string nomeItem, int quantia)
        {
            LoadConfig();
            var newMenu = Config[menuQuantia] as Dictionary<string, object>;
            newMenu[nomeItem] = quantia;
            Config[menuQuantia] = newMenu;
            SaveConfig();
        }

        bool GerarListaNome()
        {
            LoadConfig();
            var items = ItemManager.GetItemDefinitions();
            if (items == null)
                return false;
            var newMenu = new Dictionary<string, string>();
            foreach (var item in items)
            {
                newMenu.Add(Convert.ToString(item.displayName.english), Convert.ToString(item.shortname));
            }
            if (newMenu == null)
                return false;
            Config[menuNome] = newMenu;
            SaveConfig();
            return true;
        }        
    }
}

// --- End of file: CashSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/FastMenu.cs ---
// --- Original Local Path: FastMenu.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{

    [Info("FastMenu", "lilmagg", "1.0.0")]
    public class FastMenu : RustPlugin
    {
        [PluginReference] Plugin ImageLibrary;
        private string Layer11 = "UI_DrawInterface12";
        private string Layer = "UI_DrawInterface123";
        private string Layer1 = "UI_DrawInterface1";
        private string Layer2 = "UI_DrawInterface2";
        private string Layer3 = "UI_DrawInterface3";
        private CuiElementContainer currentContainer;

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer11);
                CuiHelper.DestroyUi(player, Layer);
                CuiHelper.DestroyUi(player, Layer1);
                CuiHelper.DestroyUi(player, Layer2);
                CuiHelper.DestroyUi(player, Layer3);
            }

        }


        void OnServerInitialized()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                OnPlayerConnected(player);
            }
        }


        private void OnPlayerConnected(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerConnected(player));
                return;
            }
            UI_DrawInterface12(player);
            UI_DrawInterface123(player);
            UI_DrawInterface1(player);
            UI_DrawInterface2(player);
        }

        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (player == null || info == null) return;
            CuiHelper.DestroyUi(player, Layer11);
            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.DestroyUi(player, Layer1);
            CuiHelper.DestroyUi(player, Layer2);
            CuiHelper.DestroyUi(player, Layer3);
        }

        private void OnPlayerRespawned(BasePlayer player)
        {
            if (player == null)
            {
            }
            UI_DrawInterface12(player);
            UI_DrawInterface123(player);
            UI_DrawInterface1(player);
            UI_DrawInterface2(player);

        }

         private void UI_DrawInterface12(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.5 0.0", AnchorMax = "0.5 0.0", OffsetMin = "0 110", OffsetMax = "0 68" },
                Image = { Color = "0 0 0 0", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", Layer11);

            container.Add(new CuiElement
            {
                Parent = Layer11,
                Components = {
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiButton
            {
                Button = { Command = $"chat.say /kit", Color = "1 0.96 0.88 0.15" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "-264 -30", OffsetMax = "-204 30" },
                Text = { Text = "КИТЫ", Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, Layer11);

            CuiHelper.DestroyUi(player, Layer11);
            CuiHelper.AddUi(player, container);

        }

        private void UI_DrawInterface123(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.5 0.0", AnchorMax = "0.5 0.0", OffsetMin = "0 90", OffsetMax = "0 48" },
                Image = { Color = "0 0 0 0", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components = {
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiButton
            {
                Button = { Command = $"chat.say /skin", Color = "1 0.96 0.88 0.15" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "-264 -30", OffsetMax = "-204 30" },
                Text = { Text = "СКИНЫ", Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, Layer);

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);

        }

        private void UI_DrawInterface1(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.5 0.0", AnchorMax = "0.5 0.0", OffsetMin = "0 70", OffsetMax = "0 28" },
                Image = { Color = "0 0 0 0", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", Layer1);

            container.Add(new CuiElement
            {
                Parent = Layer1,
                Components = {
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiButton
            {
                Button = { Command = $"chat.say /craft", Color = "1 0.96 0.88 0.15" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "-264 -30", OffsetMax = "-204 30" },
                Text = { Text = "КРАФТ", Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, Layer1);


            CuiHelper.DestroyUi(player, Layer1);
            CuiHelper.AddUi(player, container);
        }
        private void UI_DrawInterface2(BasePlayer player)        
        {
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.5 0.0", AnchorMax = "0.5 0.0", OffsetMin = "0 48", OffsetMax = "0 8" },
                Image = { Color = "0 0 0 0", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", Material = "assets/content/ui/uibackgroundblur.mat" }
            }, "Overlay", Layer2);


            container.Add(new CuiElement
            {
                Parent = Layer2,
                Components = {
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiButton
            {
                Button = { Command = $"chat.say /up", Color = "1 0.96 0.88 0.15" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "-264 -30", OffsetMax = "-204 30" },
                Text = { Text = "АПГРЕЙД", Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, Layer2);

            CuiHelper.DestroyUi(player, Layer2);
            CuiHelper.AddUi(player, container);
        }
    }
}


// --- End of file: FastMenu.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XDQuest.cs ---
// --- Original Local Path: XDQuest.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Plugins;
using Network;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries;
using System.Collections;
using System.Text;

namespace Oxide.Plugins
{
    [Info("XDQuest", "DezLife", "2.0.5")]
    [Description("Расширенная квест система для вашего сервера!")]
    public class XDQuest : RustPlugin
    {
        #region Var
        private const string AuthorContact = "DezLife#1480 \nvk.com/dezlife";
        private const string filename = "XDQuestHouseNPC";
        private static XDQuest Instance;
        MonumentInfo monument;
        HashSet<Item> ItemForce = new HashSet<Item>();
        private BasePlayer npc;
        private List<BaseEntity> HouseNPC = new List<BaseEntity>();
        private Dictionary<string, string> ImageUI = new Dictionary<string, string>()
        {
            {"MAINFON", "https://i.imgur.com/sV7tvFE.png" },
            {"QUESTFON", "https://i.imgur.com/3yfcpYV.png" },
            {"DOWNBTN", "https://i.imgur.com/VYdpOFv.png" },
            {"UPBTN", "https://i.imgur.com/3E9KNpZ.png" },
            {"BluePrint", "https://i.imgur.com/b48U2XA.png" },
            {"InProcces", "https://i.imgur.com/IKE6USt.png" },
            {"CloseUI", "https://i.imgur.com/7oInHGR.png" }
        };
        #region Ref

        [PluginReference] Plugin CopyPaste, ImageLibrary, IQChat, Friends, Clans, Battles, Duel;

        public void SendChat(BasePlayer player, string Message, ConVar.Chat.ChatChannel channel = ConVar.Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, config.settingsIQChat.prifix, config.settingsIQChat.SteamID);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        public bool IsFriends(ulong userID, ulong targetID)
        {
            if (Friends)
                return (bool)Friends?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsClans(ulong userID, ulong targetID)
        {
            if (Clans)
                return (bool)Clans?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsDuel(ulong userID)
        {
            if (Battles)
                return (bool)Battles?.Call("IsPlayerOnBattle", userID);
            else if (Duel) return (bool)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
            else return false;
        }

        public string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary?.Call("GetImage", shortname, skin);
        public bool AddImage(string url, string shortname, ulong skin = 0) => (bool)ImageLibrary?.Call("AddImage", url, shortname, skin);
        public void SendImage(BasePlayer player, string imageName, ulong imageId = 0) => ImageLibrary?.Call("SendImage", player, imageName, imageId);
        #endregion

        #endregion

        #region Lang
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["QUEST_ACTIVE"] = "Your active tasks: {0}",
                ["NOT_QUEST_ACTIVE"] = "You have no active tasks",
                ["QUEST_Insufficient_resources"] = "You don't have {0}, you should definitely bring this to Sidorovich",
                ["QUEST_not_resources"] = "You don't have enough {0}, you need {1}",
                ["QUEST_ACTIVE_COMPLITE"] = "{0}\nQuests completed!\nDo not forget to hand it over to Sidorovich.",
                ["NOT_QUEST_ACTIVE_COMPLITE"] = "<size=9>{0}</size>\nLeft: {1}\n{2}",
                ["AVAILABLE_MISSIONS"] = "<b>AVAILABLE JOBS</b><size=14>({0})</size>",
                ["ACTIVE_MISSIONS"] = "<b>ACTIVE JOBS</B><size=14>({0})</size>",
                ["NOT_AVAILABLE_MISSIONS"] = "You have no tasks available :(",
                ["REWARD_FOR_QUESTIONS"] = "<b>REWARD FOR COMPLETING THE MISSION</b>",
                ["CAN"] = "can",
                ["CAN'T"] = "can't",
                ["absent's"] = "absent",
                ["QUEST_ACTIVE_LIMIT"] = "You have too much <color=#4286f4>unfinished</color> assignments!",
                ["QUEST_ACTIVE_COLDOWN"] = "You cannot take this quest at the moment",
                ["QUEST_took_tasks"] = "You already <color=#4286f4>have taken</color> this task!",
                ["QUEST_completed_tasks"] = "You already <color=#4286f4>performed</color> this task!",
                ["QUEST_completed_took"] = "You <color=#4286f4>successfully</color> took the task {0}",
                ["QUEST_tasks_completed"] = "Thanks, keep your <color=#4286f4>reward</color>!",
                ["QUEST_no_place"] = "Hey wait, you're everything <color=#4286f4>you won't take</color>, make room!",
                ["QUEST_did_not_cope"] = "Sorry that you <color=#4286f4>did not cope</color> with the task!\n" +
                 $"Anyway, you can try again!",
                ["QUEST_done"] = "Performed!",
                ["QUEST_take"] = "TAKE",
                ["QUEST_turn"] = "Hand over",
                ["QUEST_REFUSE"] = "REFUSE",
                ["QUEST_Finished"] = "You have completed the task: <color=#4286f4>{0}</color>",
                ["QUEST_DONTREPEAT"] = "You have already completed this quest.!",
                ["QUEST_target"] = "Need to: {0}\n" +
                "Re-take {1}\n" +
                "CD to re-take : {2}",
                ["QUEST_targetrtho"] = "Need to: {0}\n" +
                "Progress: {1}/{2}\n" +
                "Re-take {3}\n" +
                "CD to re-take : {4}",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["QUEST_ACTIVE"] = "Ваши активные задачи: {0}",
                ["NOT_QUEST_ACTIVE"] = "У вас нет активных задач",
                ["QUEST_Insufficient_resources"] = "У вас нету {0}, нужно обязательно принести это сидоровичу",
                ["QUEST_not_resources"] = "У вас не достаточно {0},  нужно {1}",
                ["QUEST_ACTIVE_COMPLITE"] = "{0}\nЗадания выполнено!\nНе забудьте сдать его сидоровичу.",
                ["NOT_QUEST_ACTIVE_COMPLITE"] = "<size=9>{0}</size>\nПрогресс: {1}/{2}\n{3}",
                ["AVAILABLE_MISSIONS"] = "<b>ДОСТУПНЫЕ ЗАДАНИЯ</b><size=14>({0})</size>",
                ["ACTIVE_MISSIONS"] = "<b>АКТИВНЫЕ ЗАДАНИЯ</B><size=14>({0})</size>",
                ["NOT_AVAILABLE_MISSIONS"] = "У вас нет доступных задач :(",
                ["REWARD_FOR_QUESTIONS"] = "<b>НАГРАДА ЗА ВЫПОЛНЕНИЯ ЗАДАНИЯ</b>",
                ["CAN"] = "можно",
                ["CAN'T"] = "нельзя",
                ["absent's"] = "отсутствует",
                ["QUEST_ACTIVE_LIMIT"] = "У тебя слишком много <color=#4286f4>не законченных</color> заданий!",
                ["QUEST_ACTIVE_COLDOWN"] = "В данный момент вы не можете взять этот квест",
                ["QUEST_took_tasks"] = "Вы уже <color=#4286f4>взяли</color> это задание!",
                ["QUEST_completed_tasks"] = "Вы уже <color=#4286f4>выполняли</color> это задание!",
                ["QUEST_completed_took"] = "Вы <color=#4286f4>успешно</color> взяли задание {0}",
                ["QUEST_tasks_completed"] = "Спасибо, держи свою <color=#4286f4>награду</color>!",
                ["QUEST_no_place"] = "Эй, погоди, ты всё <color=#4286f4>не унесёшь</color>, освободи место!",
                ["QUEST_did_not_cope"] = "Жаль что ты <color=#4286f4>не справился</color> с заданием!\n" +
                 $"В любом случае, ты можешь попробовать ещё раз!",
                ["QUEST_done"] = "Выполнено!",
                ["QUEST_take"] = "ВЗЯТЬ",
                ["QUEST_turn"] = "СДАТЬ",
                ["QUEST_REFUSE"] = "ОТКАЗАТЬСЯ",
                ["QUEST_Finished"] = "Вы закончили задание: <color=#4286f4>{0}</color>",
                ["QUEST_DONTREPEAT"] = "Вы уже выполняли этот квест!",
                ["QUEST_target"] = "Нужно: {0}\n" +
                "Повторно брать {1}\n" +
                "Кд на повторное взятие: {2}",
                ["QUEST_targetrtho"] = "Нужно: {0}\n" +
                "Прогресс: {1}/{2}\n" +
                "Повторно брать {3}\n" +
                "Кд на повторное взятие: {4}",
            }, this, "ru");
        }

        #endregion

        #region Configuration
        public static Configuration config = new Configuration();
        public class Configuration
        {
            public class itemsNpc
            {
                [JsonProperty("ShortName")]
                public string ShortName;

                [JsonProperty("SkinId")]
                public ulong SkinId;
            }
            public class Settings
            {
                [JsonProperty("Колличевство единовременно взятых квестов")]
                public int questCount;
                [JsonProperty("Голосовое оповещение при выполнении задания")]
                public bool SoundEffect;
                [JsonProperty("Эфект")]
                public string Effect;
                [JsonProperty("Названия файла с квестами")]
                public string questListDataName;
                [JsonProperty("Названия файла с Аудио для NPC(Не менять!!!)")]
                public string audioDataPath;
                [JsonProperty("Команда для открытия квест листа с прогрессом")]
                public string questListProgress;
                [JsonProperty("Идентификатор вашей постройки")]
                public string buildid;
            }
            public class SettingsNpc
            {
                [JsonProperty("Имя нпс")]
                public string Name;

                [JsonProperty("id npc (От его ид зависит его внешность)")]
                public ulong userId;

                [JsonProperty("Одежда нпс")]
                public List<itemsNpc> Wear = new List<itemsNpc>();
            }
            public class SettingsIQChat
            {
                [JsonProperty("Префикс в чате")]
                public string prifix;

                [JsonProperty("SteamID - Для аватарки из профиля стим")]
                public string SteamID;
            }

            [JsonProperty("Настройки NPC")]
            public SettingsNpc settingsNpc;
            [JsonProperty("Настройки")]
            public Settings settings;
            [JsonProperty("Настройки IQChat (Если есть)")]
            public SettingsIQChat settingsIQChat;
            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    settingsIQChat = new SettingsIQChat
                    {
                        prifix = "Сидорович:",
                        SteamID = "21"
                    },
                    settings = new Settings
                    {
                        questCount = 3,
                        SoundEffect = true,
                        Effect = "assets/prefabs/locks/keypad/effects/lock.code.lock.prefab",
                        questListDataName = "Quest",
                        audioDataPath = "Audio",
                        questListProgress = "qlist",
                        buildid = "1"
                    },
                    settingsNpc = new SettingsNpc
                    {
                        Name = "Сидорович\n",
                        userId = 21,
                        Wear = new List<itemsNpc>
                        {
                            new itemsNpc
                            {
                                ShortName = "pants",
                                SkinId = 960252273,
                            },
                            new itemsNpc
                            {
                                ShortName = "hoodie",
                                SkinId = 959641236,
                            },
                            new itemsNpc
                            {
                                ShortName = "shoes.boots",
                                SkinId = 962503020,
                            }
                        }
                    },
                };
            }
        }

        protected override void LoadConfig()
        {  
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка чтения конфигурации 'oxide/config/', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }
            if(config.settings.audioDataPath == null)
            {
                config.settings.audioDataPath = "Audio";
            }
            if (config.settings.buildid == null)
            {
                config.settings.buildid = "1";
            }
            if (!BuildingList.ContainsKey(config.settings.buildid))
            {
                PrintWarning("Вы указали неверный Идентификатор, Спавн стандартной постройки...");
                config.settings.buildid = "1";
            }
            path = "XDQuest/" + config.settings.audioDataPath;
            LoadDataSound();
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config, true);

        #endregion

        #region QuestData
        private class PlayerQuest
        {
            public Quest parentQuest;

            public ulong UserID;

            public bool Finished;
            public int Count;

            public void AddCount(int amount = 1)
            {
                Count += amount;
                BasePlayer player = BasePlayer.FindByID(UserID);
                if (parentQuest.Amount <= Count)
                {
                    if (player != null && player.IsConnected)
                    {
                        if (config.settings.SoundEffect)
                            Instance.RunEffect(player, config.settings.Effect);
                        Instance.SendChat(player, Instance.GetLang("QUEST_Finished", player.UserIDString, parentQuest.DisplayName)); 
                        Interface.CallHook("QuestCompleted", player, Instance.GetLang("QUEST_Finished", player.UserIDString, parentQuest.DisplayName));
                    }
                    Finished = true;
                }
                if (Instance.openQuestPlayers.Contains(UserID))
                {
                    CuiHelper.DestroyUi(player, QuestListLAYER);
                    Instance.UI_QuestList(player); 
                }
            }
            public int LeftAmount() => parentQuest.Amount - Count;
        }

        public enum QuestType
        {
            IQPlagueSkill,
            IQHeadReward,
            IQCases,
            OreBonus,
            XDChinookIvent,
            Добыть,
            Убить,
            Скрафтить,
            Изучить,
            Залутать,
            УлучшитьПостройку,
            ИспользоватьКарточкуДоступа,
            установить,
        }
        public enum PrizeType
        {
            Предмет,
            Чертёж,
            КастомПредмет,
            Команда
        }
        private class Quest
        {
            internal class Prize
            {
                public string nameprize;
                public PrizeType type;
                public string ShortName;
                public int Amount;
                public string Name;
                public ulong SkinID;
                public string Command;
                public string Url;
            }

            public string DisplayName;
            public string Description;
            public string Missions;
            public QuestType QuestType;
            public string Target;
            public int Amount;
            public bool UseRepeat;
            public int Cooldown;
            public List<Prize> PrizeList = new List<Prize>();
        }

        #endregion

        #region MetodsBuildingAndNpc
        private class Building
        {
            public string name;
            public float Deg2Rad;
            public Vector3 pos;
        }

        private Dictionary<string, Building> BuildingList = new Dictionary<string, Building>
        {
            ["1"] = new Building
            {
               name = "XDQuestHouseNPCNew",
               Deg2Rad = 4.72f,
               pos = new Vector3(-3.86f, 3.32f, 43.99f)
            },
            ["2"] = new Building
            {
                name = "XDQuestHouseNPCNewYear",
                Deg2Rad = 4.76f,
                pos = new Vector3(-3.86f, 3.34f, 43.99f)
            }
        };

        void GenerateBuilding()
        {
            ClearEnt();
            Subscribe("OnPasteFinished");
            var options = new List<string> { "stability", "true", "deployables", "true", "autoheight", "false", "entityowner", "false" };

            Vector3 resultVector = GetResultVector();
            var success = CopyPaste.Call("TryPasteFromVector3", resultVector, (monument.transform.rotation.eulerAngles * Mathf.Deg2Rad).y - BuildingList[config.settings.buildid].Deg2Rad, BuildingList[config.settings.buildid].name, options.ToArray());

            if (success is string)
            {
                PrintWarning("Ошибка #1 \nПлагин не будет работать, Обратитесь к разработчику" + AuthorContact);
                Unsubscribe("OnPasteFinished");
                return;
            }
            GravityItemAdd();
            timer.Once(5f, () =>
            {
                CrategravityItems();
                InitializeNPC(resultVector);
            });
        }

        public void InitializeNPC(Vector3 pos)
        {
            npc = GameManager.server.CreateEntity("assets/prefabs/player/player.prefab", pos) as BasePlayer;
            if (npc == null)
            {
                Interface.Oxide.LogError($"Initializing NPC failed! NPC Component == null #3");
                return;
            }
            npc.userID = config.settingsNpc.userId;
            npc.name = config.settingsNpc.Name;
            npc.displayName = npc.name;
            npc.Spawn();

            npc.SendNetworkUpdate();
            List<BaseChair> chairs = new List<BaseChair>();
            Vis.Entities(npc.transform.position, 2f, chairs);
            foreach (var chair in chairs.Distinct().ToList())
            {
                chair.MountPlayer(npc);
                npc.OverrideViewAngles(chair.mountAnchor.transform.rotation.eulerAngles);
                npc.eyes.NetworkUpdate(chair.mountAnchor.transform.rotation);
                npc.ClientRPCPlayer(null, npc, "ForcePositionTo", npc.transform.position);
                chair.SetFlag(BaseEntity.Flags.Busy, true);
                break;
            }
            ZoneTrigger zone = new GameObject().AddComponent<ZoneTrigger>();
            zone.Activate(pos, 4.6f);
            #region Одеваем нпс
            if (config.settingsNpc.Wear.Count > 0)
                for (int i = 0; i < config.settingsNpc.Wear.Count; i++)
                    ItemManager.Create(ItemManager.FindItemDefinition(config.settingsNpc.Wear[i].ShortName), 1, config.settingsNpc.Wear[i].SkinId).MoveToContainer(npc.inventory.containerWear);  
            #endregion
        }

        private void ClearEnt()
        {
            BasePlayer findplayer = FindMyBot(config.settingsNpc.userId);

            if (findplayer != null)
                findplayer.KillMessage();

            List<BaseEntity> obj = new List<BaseEntity>();
            Vis.Entities(GetResultVector(), 10f, obj, LayerMask.GetMask("Construction", "Deployable", "Deployed", "Debris"));

            foreach (BaseEntity item in obj?.Where(x => x.OwnerID == 1893562145))
            {
                if (item == null) continue;
                item.Kill();
            }
        }

        void OnPasteFinished(List<BaseEntity> pastedEntities)
        {
            try
            {
                HouseNPC = pastedEntities;
                foreach (BaseEntity item in HouseNPC)
                {
                    item.OwnerID = 1893562145;
                    if (item as BuildingBlock)
                    {
                        var build = item as BuildingBlock;
                        build.SetFlag(BaseEntity.Flags.Reserved1, false);
                        build.SetFlag(BaseEntity.Flags.Reserved2, false);
                    }
                    if (item is BaseChair)
                        continue;
                    if (item.name.Contains("woodenbox"))
                    {
                        var box = item as BaseCombatEntity;
                        box.pickup.enabled = false;
                        continue;
                    }
                    else if (item.name.Contains("light") || item.name.Contains("lantern"))
                    {
                        item.enableSaving = true;
                        item.SendNetworkUpdate();
                        item.SetFlag(BaseEntity.Flags.Reserved8, true);
                        item.SetFlag(BaseEntity.Flags.On, true);
                    }
                    item.SetFlag(BaseEntity.Flags.Busy, true);
                    item.SetFlag(BaseEntity.Flags.Locked, true);    
                }
                PrintWarning($"Постройка обработана успешно {HouseNPC.Count}");
                Unsubscribe("OnPasteFinished");
            }
            catch  (Exception ex)
            {
               PrintError("Ошибка при загрузке постройки! Подробности в лог файле!!\nОбратитесь к разработчику" + AuthorContact); Log(ex.Message, "LogError");
            }       
        }

        #endregion

        #region Hooks
        #region QuestHook
        #region Type Upgrade
        object OnStructureUpgrade(BaseCombatEntity entity, BasePlayer player, BuildingGrade.Enum grade)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.УлучшитьПостройку && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return null;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if ((int)grade == Convert.ToInt16(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount();
                }
            }
            return null;
        }
        #endregion
        #region IQPlagueSkill
        void StudySkill(BasePlayer player, string name)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.IQPlagueSkill && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (playerQuests[i].parentQuest.Target == name || playerQuests[i].parentQuest.Target == "0")
                {
                    playerQuests[i].AddCount();
                }
            }
        }
        #endregion
        #region HeadReward
        void KillHead(BasePlayer player)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.IQHeadReward && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                playerQuests[i].AddCount();
            }
        }

        #endregion
        #region IqCase
        void OpenCase(BasePlayer player, string name)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.IQCases && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (playerQuests[i].parentQuest.Target == name || playerQuests[i].parentQuest.Target == "0")
                {
                    playerQuests[i].AddCount();
                }
            }
        }
        #endregion
        #region OreBonus
        void RadOreGive(BasePlayer player, Item item)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.OreBonus && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (playerQuests[i].parentQuest.Target == item.info.shortname || playerQuests[i].parentQuest.Target == "0")
                {
                    playerQuests[i].AddCount(item.amount);
                }
            }
        }
        #endregion
        #region Chinook
        void LootHack(BasePlayer player)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.XDChinookIvent && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                playerQuests[i].AddCount();
            }
        }
        #endregion
        #region Добыть
        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            NextTick(() =>
            {
                BasePlayer player;
                if (entity is BasePlayer)
                {
                    player = entity as BasePlayer;
                    List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Добыть && x.Finished == false).ToList();
                    if (playerQuests == null || playerQuests.Count == 0) return;
                    for (int i = 0; i < playerQuests.Count; i++)
                    {
                        if (item.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                        {
                            playerQuests[i].AddCount(item.amount);
                        }
                    }
                }
            });
        }
        void OnDispenserBonus(ResourceDispenser dispenser, BaseEntity entity, Item item) => OnDispenserGather(dispenser, entity, item);

        void OnCollectiblePickup(Item item, BasePlayer player)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Добыть && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (item.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount(item.amount);
                }
            }
        }
        #endregion
        #region Скрафтить
        void OnItemCraftFinished(ItemCraftTask task, Item item)
        {
            var player = task.owner;
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Скрафтить && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (task.blueprint.targetItem.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount(item.amount);
                }
            }
        }
        #endregion
        #region Изучить
        void OnItemResearch(ResearchTable table, Item targetItem, BasePlayer player)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Изучить && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (targetItem.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount();
                }
            }
        }
        #endregion
        #region установить

        private void OnEntityBuilt(Planner plan, GameObject go)
        {
            BasePlayer player = plan?.GetOwnerPlayer();
            if (player == null || go == null || plan.GetItem() == null) return;
            BaseEntity ent = go.ToBaseEntity();
            if (ent == null) return;
            if (ent.skinID == 11543256361) return;
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.установить && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (plan.GetItem().info.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount();
                }
            }
        }
        object CanPickupEntity(BasePlayer player, BaseCombatEntity entity)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.установить && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return null;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (entity.pickup.itemTarget.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    entity.skinID = 11543256361;      
                }
            }
            return null;
        }
        #endregion
        #region Залутать
        private void OnLootEntity(BasePlayer player, LootContainer entity)
        {
            if (entity.OwnerID == 133722822222222 || entity.OwnerID >= 7656000000 || entity == null)
                return;
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Залутать && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                for (int u = 0; u < entity.inventory.itemList.Count(); u++)
                {
                    if (entity.inventory.itemList[u].info.shortname.Contains(playerQuests[i].parentQuest.Target))
                        playerQuests[i].AddCount(entity.inventory.itemList[u].amount);
                }
            }
            entity.OwnerID = 133722822222222;
        }

        private void OnContainerDropItems(ItemContainer container)
        {
            if (container == null) return;
            BaseEntity entity = container.entityOwner;
            if (entity == null) return;
            if (!entity.ShortPrefabName.Contains("barrel")) return;
            foreach (Item lootitem in container.itemList)
                lootitem.SetFlag(global::Item.Flag.Placeholder, true);
        }

        object OnItemPickup(Item item, BasePlayer player)
        {
            if (item == null) return null;
            if (!item.HasFlag(global::Item.Flag.Placeholder)) return null;
            item.SetFlag(global::Item.Flag.Placeholder, false);

            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Залутать && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return null;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                  if (item.info.shortname.Contains(playerQuests[i].parentQuest.Target))
                        playerQuests[i].AddCount(item.amount);
            }
            return null;
        }

        #endregion
        #region Использовать карточку доступа
        private void OnCardSwipe(CardReader cardReader, Keycard card, BasePlayer player)
        {
            List<PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.ИспользоватьКарточкуДоступа && x.Finished == false).ToList();
            if (playerQuests == null || playerQuests.Count == 0) return;
            for (int i = 0; i < playerQuests.Count; i++)
            {
                if (card.GetItem().info.shortname.Contains(playerQuests[i].parentQuest.Target))
                {
                    playerQuests[i].AddCount();
                }
            }
        }
        #endregion
        #region  Убить/взорвать/уничтожить что либо
        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            try
            {
                if (entity == null || info == null)
                    return;
                List<PlayerQuest> playerQuests = null;

                string entname = entity?.ShortPrefabName;
                if (entname == "testridablehorse")
                {
                    entname = "horse";
                }
                if (entname.Contains("servergibs"))
                    return;
                BasePlayer player = null;

                if (info.InitiatorPlayer != null)
                    player = info.InitiatorPlayer;
                else if (entity.GetComponent<BaseHelicopter>() != null)
                {
                    PatrolHelicopterAI helicopterAI = entity?.GetComponent<PatrolHelicopterAI>();
                    if (helicopterAI == null)
                        return;
                    player = helicopterAI._targetList[helicopterAI._targetList.Count - 1].ply;      
                }

                if (player != null)
                {
                    if (entity.ToPlayer() != null && entity.ToPlayer() == player)
                        return;
                    if (entity.ToPlayer() != null)
                    {
                        if (IsFriends(player.userID, entity.ToPlayer().userID))
                            return;
                        if (IsClans(player.userID, entity.ToPlayer().userID))
                            return;
                        if (IsDuel(player.userID))
                            return;
                    }
                      
                    playerQuests = storedData.players[player.userID].PlayerQuestsAll.Values.Where(x => x.parentQuest.QuestType == QuestType.Убить && x.Finished == false).ToList();
                    if (playerQuests == null || playerQuests.Count == 0)
                        return;
                    for (int i = 0; i < playerQuests.Count; i++)
                    {
                        if (entity.PrefabName.Contains(playerQuests[i].parentQuest.Target))
                        {
                            playerQuests[i].AddCount();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            try
            {
                if (info.damageTypes.Has(Rust.DamageType.Decay))
                {
                    if (victim?.OwnerID == 1893562145)
                    {
                        info.damageTypes.Scale(DamageType.Decay, 0);
                    }
                }
            }
            catch (NullReferenceException) { }
        }

        #endregion
        #endregion

        object CanLootEntity(BasePlayer player, StorageContainer container)
        {
            if (container.skinID == 1195832261)
            {
                UI_DrawInterface(player);
                return false;
            }
            return null;
        }
        object CanAffordUpgrade(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)
        {
            if (block.OwnerID == 1893562145) return false;
            else return null;
        }
        void Init()
        {
            LoadDataPlayer();
            LoadDataQuestList(ref QuestList);
            Unsubscribe("OnPasteFinished");
        }

        private void OnServerInitialized()
        {
            
            monument = TerrainMeta.Path.Monuments.FirstOrDefault(p => p.name.ToLower() == "assets/bundled/prefabs/autospawn/monument/medium/compound.prefab");
            Instance = this;
            if (!CopyPaste)
            {
                PrintError("Проверьте установлен ли у вас плагин 'CopyPaste'");
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }
            else if (CopyPaste.Version < new VersionNumber(4,1,26))
            {
                PrintError("У вас старая версия CopyPaste!\nПожалуйста обновите плагин до последней версии (4.1.26 или выше) - https://umod.org/plugins/copy-paste");
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }
            if (monument == null)
            {
                PrintError("Походу у вас отсутствует 'Город НПС' !\nПожалуйста обратитесь к разработчику" + AuthorContact);
                Interface.Oxide.UnloadPlugin(Name);
                return;
            }  

            cmd.AddChatCommand(config.settings.questListProgress, this, nameof(UI_QuestList));
            ServerMgr.Instance.StartCoroutine(DownloadImages());
            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
            LoadDataCopyPaste();


        }
        void OnPlayerConnected(BasePlayer player)
        {
            if (!storedData.players.ContainsKey(player.userID))
            {
                storedData.players.Add(player.userID, new PlayerData());
            }
            else
            {
                foreach (var item in storedData.players[player.userID].PlayerQuestsAll)
                {
                    var curentQuest = QuestList.FirstOrDefault(p => p.Value.DisplayName == item.Value.parentQuest.DisplayName);
                    if(curentQuest.Value == null)
                    {
                        NextTick(() => {
                            storedData.players[player.userID].PlayerQuestsAll.Remove(item.Key);
                        });
                    }
                }
            }
            foreach (var item in ImageUI)
                SendImage(player, item.Key);
            PlayersTime.Add(player.userID, null);
        }

        private void OnPlayerDisconnected(BasePlayer d)
        {
            if (openQuestPlayers.Contains(d.userID))
                openQuestPlayers.Remove(d.userID);
            if (PlayersTime.ContainsKey(d.userID))
            {
                if (PlayersTime[d.userID] != null)
                    ServerMgr.Instance.StopCoroutine(PlayersTime[d.userID]);
                PlayersTime.Remove(d.userID);
            }
        }

        void Unload()
        {
            SaveData();
            DestroyAll<ZoneTrigger>();
            for (int i = 0; i < HouseNPC.Count; i++)
            {
                if (!HouseNPC[i].IsDestroyed)
                    HouseNPC[i]?.Kill();
            }
            npc?.KillMessage();
            foreach (var items in ItemForce)
                items?.RemoveFromWorld();
            foreach(BasePlayer p in BasePlayer.activePlayerList)
            {
                if (PlayersTime.ContainsKey(p.userID))
                {
                    if(PlayersTime[p.userID] != null)
                        ServerMgr.Instance.StopCoroutine(PlayersTime[p.userID]);
                    PlayersTime.Remove(p.userID);
                }
                CuiHelper.DestroyUi(p, Layers); CuiHelper.DestroyUi(p, QuestListLAYER);
            }
            ServerMgr.Instance.StopCoroutine(DownloadImages());

        }
        #endregion

        #region Летающии итемы

        public class GravityItem
        {
            public string Shortname;
            public Vector3 vector;
            public Quaternion quaternion;
        }
        List<GravityItem> gravityItems = new List<GravityItem>();

        private void GravityItemAdd()
        {
            gravityItems.Add(new GravityItem
            {
                Shortname = "map",
                vector = monument.transform.position + monument.transform.rotation * new Vector3(-4.96f, 3.32f, 46.66f),
                quaternion = new Quaternion(1.99f, 0.0f, 0, 2),
            });
            gravityItems.Add(new GravityItem
            {
                Shortname = "rifle.ak",
                vector = monument.transform.position + monument.transform.rotation * new Vector3(-5.56f, 2.68f, 44.95f),
                quaternion = new Quaternion(0f, -1.0f, 0, 2),
            });
            gravityItems.Add(new GravityItem
            {
                Shortname = "targeting.computer",
                vector = monument.transform.position + monument.transform.rotation * new Vector3(-5.73f, 2.68f, 46.15f),
                quaternion = new Quaternion(0, -1.39f, 0, 2),      
            });    
        }

        public void CrategravityItems()
        {
            for (int i = 0; i < gravityItems.Count; i++)
            {
                Item Item = ItemManager.CreateByName(gravityItems[i].Shortname, 1); 
                Item.Drop(gravityItems[i].vector, Vector3.up, monument.transform.rotation * gravityItems[i].quaternion);
                var Items = Item.GetWorldEntity() as DroppedItem;
                Items.allowPickup = false;
                Items.CancelInvoke(Items.IdleDestroy);
                var rigidbody = Item.GetWorldEntity().GetComponent<Rigidbody>();
                rigidbody.useGravity = false;
                rigidbody.isKinematic = true;
                ItemForce.Add(Item);
            }
        }
        #endregion

        #region TriggerNpc
        System.Random rnd = new System.Random();
        private class ZoneTrigger : MonoBehaviour
        {
            private float ZoneRadius;
            private Vector3 Position;

            private SphereCollider sphereCollider;
            private void Awake()
            {
                gameObject.layer = (int)Layer.Reserved1;
                gameObject.name = "ZoneTrigger";
                enabled = false;
            }

            public void Activate(Vector3 pos, float radius)
            {
                Position = pos;
                ZoneRadius = radius;
                transform.position = Position;
                transform.rotation = new Quaternion();

                UpdateCollider();
                gameObject.SetActive(true);
                enabled = true;
            }

            private void OnTriggerEnter(Collider col)
            {
                BasePlayer player = col.GetComponentInParent<BasePlayer>();
                if (player != null)
                {
                    int mIndex = Instance.rnd.Next(Instance._Data.Hey.Length);
                    Instance.API_NPC_SendToAll(Instance._Data.Hey[mIndex]);
                }
            }

            private void OnTriggerExit(Collider col)
            {
                BasePlayer player = col.GetComponentInParent<BasePlayer>();
                if (player != null)
                {
                    int mIndex = Instance.rnd.Next(Instance._Data.Bye.Length);
                    Instance.API_NPC_SendToAll(Instance._Data.Bye[mIndex]);
                    player.SendConsoleCommand("Close_Layer");
                }
            }

            private void OnDestroy()
            {
                Destroy(gameObject);
                CancelInvoke();
            }

            private void UpdateCollider()
            {
                sphereCollider = gameObject.GetComponent<SphereCollider>();
                {
                    if (sphereCollider == null)
                    {
                        sphereCollider = gameObject.AddComponent<SphereCollider>();
                        sphereCollider.isTrigger = true;
                        sphereCollider.name = "ZoneTrigger";
                    }
                    sphereCollider.radius = ZoneRadius;
                }
            }
        }
        #endregion

        #region SoundNpc
        public class AudioData
        {
            public String Name;
            public Single Length = 0;
            public List<VoicePacket> VoicePacketList = new List<VoicePacket>();
            public class VoicePacket
            {
                public Single TimeOffset;
                public Byte[] Stream;
            }
        }

        public class BotSpeakerData
        {
            public Dictionary<string, AudioData> AudioClips = new Dictionary<string, AudioData>();
            public string[] Hey;
            public string[] Bye;

        }
        public string path = string.Empty;
        private BotSpeakerData _Data;
        private DynamicConfigFile DataFile;

        private void LoadDataSound()
        {
            if(String.IsNullOrWhiteSpace(path))
            {
                PrintError("Ошибка при загрузке звуков! Плагин будет перезагружен " + AuthorContact);
                return;
            }
            DataFile = Interface.Oxide.DataFileSystem.GetFile(path);
            if (Interface.GetMod().DataFileSystem.ReadObject<BotSpeakerData>(path).AudioClips.Count == 0)
            {
                PrintWarning("Загрузка звуков для NPC...");
                webrequest.Enqueue($"http://utilite.skyplugins.ru/xdquest/{config.settings.audioDataPath}.json", null, (i, s) => {
                    if (i == 200) WriteToData(s);
                    else { PrintError("Ошибка при загрузке звуков!\nОбратитесь к разработчику " + AuthorContact); Log(i.ToString(), "LogError"); }
                }, this, RequestMethod.GET);;
            }
            _Data = DataFile.ReadObject<BotSpeakerData>();
        }

        void WriteToData(string calback)
        {
            _Data = JsonConvert.DeserializeObject<BotSpeakerData>(calback);
            DataFile.WriteObject(_Data);
        }   
        public HashSet<uint> BotAlerts = new HashSet<uint>();
        void API_NPC_SendToAll(string clipName)
        {
            try
            {
                if (BotAlerts.Contains(npc.net.ID)) return;
                else BotAlerts.Add(npc.net.ID);

                AudioData audio;
                if (_Data.AudioClips.TryGetValue(clipName, out audio))
                {
                    var clip = _Data.AudioClips[clipName];
                    timer.Once(clip.Length, () => BotAlerts.Remove(npc.net.ID));

                    audio.VoicePacketList.ForEach(packet =>
                    {
                        timer.Once(packet.TimeOffset, () =>
                        {
                            if (Net.sv.write.Start())
                            {
                                Net.sv.write.PacketID(Message.Type.VoiceData);
                                Net.sv.write.UInt32(npc.net.ID);
                                Net.sv.write.BytesWithSize(packet.Stream);
                                var write = Net.sv.write;
                                var sendInfo = new SendInfo()
                                {
                                    connections = BasePlayer.activePlayerList.Select(player => player.Connection).ToList(),
                                    priority = Priority.Immediate
                                };
                                write.Send(sendInfo);
                            }
                        });
                    });
                }
            }
            catch(NullReferenceException ex)
            {
                PrintError($"Ошибка загрузки звуков! Попробуйте перезагрузить плагин удалив в дате файли {config.settings.audioDataPath}\nИли свяжитесь с разработчиком + {AuthorContact}");
            }  
        }

        #endregion

        #region HelpMetods
        void RunEffect(BasePlayer player, string path)
        {
            Effect effect = new Effect();
            effect.Init(Effect.Type.Generic, player.transform.position, player.transform.forward, (Connection)null);
            effect.pooledString = path; EffectNetwork.Send(effect, player.net.connection);
        }
        public static class TimeHelper
        {
            public static string FormatTime(TimeSpan time, int maxSubstr = 5, string language = "ru")
            {
                string result = string.Empty;
                switch (language)
                {
                    case "ru":
                        int i = 0;
                        if (time.Days != 0 && i < maxSubstr)
                        {
                            if (!string.IsNullOrEmpty(result))
                                result += " ";

                            result += $"{Format(time.Days, "д", "д", "д")}";
                            i++;
                        }

                        if (time.Hours != 0 && i < maxSubstr)
                        {
                            if (!string.IsNullOrEmpty(result))
                                result += " ";

                            result += $"{Format(time.Hours, "ч", "ч", "ч")}";
                            i++;
                        }

                        if (time.Minutes != 0 && i < maxSubstr)
                        {
                            if (!string.IsNullOrEmpty(result))
                                result += " ";

                            result += $"{Format(time.Minutes, "м", "м", "м")}";
                            i++;
                        }

                        if (time.Days == 0)
                        {
                            if (time.Seconds != 0 && i < maxSubstr)
                            {
                                if (!string.IsNullOrEmpty(result))
                                    result += " ";

                                result += $"{Format(time.Seconds, "с", "с", "с")}";
                                i++;
                            }
                        }

                        break;
                    case "en":
                        result = string.Format("{0}{1}{2}{3}",
                            time.Duration().Days > 0
                                ? $"{time.Days:0} day{(time.Days == 1 ? String.Empty : "s")}, "
                                : string.Empty,
                            time.Duration().Hours > 0
                                ? $"{time.Hours:0} hour{(time.Hours == 1 ? String.Empty : "s")}, "
                                : string.Empty,
                            time.Duration().Minutes > 0
                                ? $"{time.Minutes:0} minute{(time.Minutes == 1 ? String.Empty : "s")}, "
                                : string.Empty,
                            time.Duration().Seconds > 0
                                ? $"{time.Seconds:0} second{(time.Seconds == 1 ? String.Empty : "s")}"
                                : string.Empty);

                        if (result.EndsWith(", ")) result = result.Substring(0, result.Length - 2);

                        if (string.IsNullOrEmpty(result)) result = "0 seconds";
                        break;
                }
                return result;
            }

            private static string Format(int units, string form1, string form2, string form3)
            {
                var tmp = units % 10;

                if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                    return $"{units}{form1}";

                if (tmp >= 2 && tmp <= 4)
                    return $"{units}{form2}";

                return $"{units}{form3}";
            }
        }

        private static DateTime Epoch = new DateTime(1970, 1, 1);

        public static double GetTimeStamp()
        {
            return DateTime.Now.Subtract(Epoch).TotalSeconds;
        }
        private IEnumerator DownloadImages()
        {
            foreach (var item in ImageUI)
                AddImage(item.Value, item.Key);

            PrintError("AddImages...");
            foreach (var img in QuestList)
            {
                for (int i = 0; i < img.Value.PrizeList.Count; i++)
                {
                    var typeimg = img.Value.PrizeList[i];
                    if (typeimg.type == PrizeType.КастомПредмет)
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", typeimg.ShortName, typeimg.SkinID))
                            ImageLibrary.Call("AddImage", $"http://rust.skyplugins.ru/getskin/{typeimg.SkinID}/", typeimg.ShortName, typeimg.SkinID);
                    }
                    else if (typeimg.type == PrizeType.Команда)
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", typeimg.Url))
                            ImageLibrary.Call("AddImage", typeimg.Url, typeimg.Url);
                    }
                    else
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", typeimg.ShortName + 128))
                            ImageLibrary.Call("AddImage", $"http://rust.skyplugins.ru/getimage/{typeimg.ShortName}/128", typeimg.ShortName + 128);
                    }
                    yield return new WaitForSeconds(0.05f);
                }
            }
            PrintError("All Image load!");
            yield return 0;
        }
        public void LoadDataCopyPaste()
        {
            if (!Interface.Oxide.DataFileSystem.ExistsDatafile("copypaste/" + BuildingList[config.settings.buildid].name))
            {
                PrintError($"Файл постройки не найден!\nНачинаем импортировать...");
                webrequest.Enqueue($"http://utilite.skyplugins.ru/xdquest/{BuildingList[config.settings.buildid].name}.json", null, (i, s) =>
                {
                    if (i == 200)
                    {
                        PasteData obj = JsonConvert.DeserializeObject<PasteData>(s);
                        Interface.Oxide.DataFileSystem.WriteObject("copypaste/" + BuildingList[config.settings.buildid].name, obj);
                    }
                    else
                    {
                        PrintError("Ошибка при загрузке постройки!\nПробуем загрузить еще раз"); Log(i.ToString(), "LogError");
                        timer.Once(10f, () => LoadDataCopyPaste());
                        return;
                    }
                }, this, RequestMethod.GET);
            }
            timer.Once(5f, () =>
            {
                GenerateBuilding();
            });
        }
        
        public static StringBuilder sb = new StringBuilder();
        public string GetLang(string LangKey, string userID = null, params object[] args)
        {
            sb.Clear();
            if (args != null)
            {
                sb.AppendFormat(lang.GetMessage(LangKey, this, userID), args);
                return sb.ToString();
            }
            return lang.GetMessage(LangKey, this, userID);
        }

        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            sb.Clear();
            return sb.AppendFormat("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a).ToString();
        }
        public class PasteData
        {
            public Dictionary<string, object> @default;
            public ICollection<Dictionary<string, object>> entities;
            public Dictionary<string, object> protocol;
        }
        private Vector3 GetResultVector()
        {
            return monument.transform.position + monument.transform.rotation * BuildingList[config.settings.buildid].pos;
        }
        private BasePlayer FindMyBot(ulong userid)
        {
            return UnityEngine.Object.FindObjectsOfType<BasePlayer>().FirstOrDefault(x => x.userID == userid);
        }
        private void DestroyAll<T>()
        {
            var objects = UnityEngine.Object.FindObjectsOfType(typeof(T));
            objects?.ToList().ForEach(UnityEngine.Object.Destroy);
        }
        void Log(string msg, string file)
        {
            LogToFile(file, $"[{DateTime.Now}] {msg}", this);
        }
        #endregion

        #region Interface

        private const string Layers = "UI_Layer";
        private const string QuestListPanel = "QuestListPanel";
        private const string QuestListLAYER = "QuestListLAYER";
        private const string QuestNotticePlayer = "QuestNotticePlayer";
        HashSet<ulong> openQuestPlayers = new HashSet<ulong>();

        [ConsoleCommand("Close_UI")]
        void CloseUiPlayer(ConsoleSystem.Arg arg)
        {
            if (openQuestPlayers.Contains(arg.Player().userID))
                openQuestPlayers.Remove(arg.Player().userID);
            CuiHelper.DestroyUi(arg.Player(), QuestListLAYER);
            arg.Player().SetFlag(BaseEntity.Flags.Reserved3, false);
            if(PlayersTime[arg.Player().userID] != null)
                ServerMgr.Instance.StopCoroutine(PlayersTime[arg.Player().userID]);
        }
        [ConsoleCommand("Close_Layer")]
        void CloseLayerPlayer(ConsoleSystem.Arg arg)
        {
            if (openQuestPlayers.Contains(arg.Player().userID))
                openQuestPlayers.Remove(arg.Player().userID);
            CuiHelper.DestroyUi(arg.Player(), Layers);
            arg.Player().SetFlag(BaseEntity.Flags.Reserved3, false);
            if (PlayersTime[arg.Player().userID] != null)
                ServerMgr.Instance.StopCoroutine(PlayersTime[arg.Player().userID]);
        }
        void UI_QuestList(BasePlayer player)
        {
            Dictionary<int, PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll;
            if (playerQuests == null) return;
            if (!openQuestPlayers.Contains(player.userID))
                openQuestPlayers.Add(player.userID);

            CuiHelper.DestroyUi(player, QuestListLAYER);
            int ds = -81 + (-75 * playerQuests.Count);
            var txtname = playerQuests.Count > 0 ? GetLang("QUEST_ACTIVE", player.UserIDString, playerQuests.Count) :
                                                   GetLang("NOT_QUEST_ACTIVE", player.UserIDString);
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = $"0 {ds}", OffsetMax = "200 -50" },
                Image = { Color = HexToRustFormat("#24241EDF"), Material = "assets/content/ui/uibackgroundblur.mat" },
            }, "Overlay", QuestListLAYER);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -30", OffsetMax = "180 0" },
                Text = { Text = txtname, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 15, Color = "1.00 1.00 0.87 1.00" }
            }, QuestListLAYER);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-20 -20", OffsetMax = "0 0" },
                Button = { Color = "0.79 0.24 0.24 0.90", Command = "Close_UI" },
                Text = { Text = "<b>x</b>", FontSize = 16, Align = TextAnchor.MiddleCenter }
            }, QuestListLAYER);

            int size = 75, i = 0;

            foreach (var item in playerQuests)
            {
                var color = item.Value.Finished == true ? "0.07 0.81 0.36 0.52" : HexToRustFormat("#774033FF");
                var txt = item.Value.Finished == true ? GetLang("QUEST_ACTIVE_COMPLITE", player.UserIDString, item.Value.parentQuest.DisplayName) :
                                                        GetLang("NOT_QUEST_ACTIVE_COMPLITE", player.UserIDString, item.Value.parentQuest.DisplayName, item.Value.Count, item.Value.parentQuest.Amount, item.Value.parentQuest.Missions);
                container.Add(new CuiPanel
                {
                    CursorEnabled = false,
                    RectTransform = {  AnchorMin = "0 1",
                        AnchorMax = "0 1",
                        OffsetMin = $"1 {-100 - i*size}",
                        OffsetMax = $"199 {-30 - i*size}"},
                    Image = { Color = color, Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                }, QuestListLAYER, QuestListLAYER + i);

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = txt, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 12, Color = "1.00 1.00 1.00 1.00" }
                }, QuestListLAYER + i);
                i++;
            }
            CuiHelper.AddUi(player, container);
        }

        private void HelpUiNottice(BasePlayer player, string msg, string sprite = "assets/icons/warning.png", string color = "#C25619FF")
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, QuestNotticePlayer);
            container.Add(new CuiPanel
            {
                FadeOut = 0.30f,
                RectTransform = { AnchorMin = "0.5046874 0.8685184", AnchorMax = "0.8749999 0.9611109", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0", FadeIn = 0.40f }
            }, Layers, QuestNotticePlayer);

            container.Add(new CuiElement
            {
                Parent = QuestNotticePlayer,
                FadeOut = 0.30f,
                Components =
                {
                    new CuiRawImageComponent { Png = GetImage("QUESTFON"), Color = HexToRustFormat(color), FadeIn = 0.40f  },
                    new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "1 1"},
                }
            });

            container.Add(new CuiElement
            {
                Parent = QuestNotticePlayer,
                FadeOut = 0.30f,
                Components =
                {
                    new CuiImageComponent {Sprite = sprite, Color = HexToRustFormat("#FFFFFFFF"), FadeIn = 0.40f  },
                    new CuiRectTransformComponent{ AnchorMin = "0.02672293 0.25", AnchorMax = "0.09704643 0.7499998"},
                }
            });

            container.Add(new CuiLabel
            {
                FadeOut = 0.30f,
                RectTransform = { AnchorMin = "0.1139241 0.08999151", AnchorMax = "0.9423349 0.8999914", OffsetMax = "0 0" },
                Text = { Text = msg, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf", FontSize = 15, Color = HexToRustFormat("#FFFFFFFF"), FadeIn = 0.40f }
            }, QuestNotticePlayer);

            CuiHelper.AddUi(player, container);
            timer.Once(4.5f, () => { CuiHelper.DestroyUi(player, QuestNotticePlayer); });
        }

        private void UI_DrawInterface(BasePlayer player, bool upd = false, int page = 0)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, Layers);
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", Layers);

            container.Add(new CuiElement
            {
                Parent = Layers,
                Components =
                {
                    new CuiRawImageComponent { Png = GetImage("MAINFON"), Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "1 1"},
                }
            });

            container.Add(new CuiElement
            {
                Parent = Layers,
                Name = "closeui",
                Components =
                {
                    new CuiRawImageComponent { Png = GetImage("CloseUI"), Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = "0.8874999 0.8759267", AnchorMax = "0.940625 0.9527785"},
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Color = "0 0 0 0", Command = "Close_Layer" },
                Text = { Text = "" }
            }, "closeui");
            CuiHelper.AddUi(player, container);
            QuestLists(player, 0, false, false);
        }

        public void QuestLists(BasePlayer player, int page = 0, bool upd = false, bool active = false)
        {
            CuiHelper.DestroyUi(player, QuestListPanel);
            CuiHelper.DestroyUi(player, "UPBTN");
            CuiHelper.DestroyUi(player, "DOWNBTN");
            CuiHelper.DestroyUi(player, "allquest");
            CuiHelper.DestroyUi(player, "activequest");
            CuiElementContainer container = new CuiElementContainer();
            int y = 0, i = 7 * page, indexQuest = 0;

            Dictionary<int, PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll;
            if (playerQuests == null) return;

            if (page != 0 && !active)
            {
                container.Add(new CuiElement
                {
                    Parent = Layers,
                    Name = "UPBTN",
                    Components =
                {
                    new CuiRawImageComponent { Png = GetImage("UPBTN"), Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = "0.01302087 0.7935191", AnchorMax = "0.05677087 0.8870376"},
                }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Color = "0 0 0 0", Command = $"UI_Handler page {page - 1}" },
                    Text = { Text = "" }
                }, "UPBTN");
            }
            if (page + 1 < (int)Math.Ceiling(((double)QuestList.Count - playerQuests.Count) / 7) && !active)
            {
                container.Add(new CuiElement
                {
                    Parent = Layers,
                    Name = "DOWNBTN",
                    Components =
                {
                    new CuiRawImageComponent { Png = GetImage("DOWNBTN"), Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = "0.01302087 0.1444528", AnchorMax = "0.05677087 0.2379713"},
                }
                });
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Color = "0 0 0 0", Command = $"UI_Handler page {page + 1}" },
                    Text = { Text = "" }
                }, "DOWNBTN");
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.06354167 0.9222221", AnchorMax = "0.2505214 0.9842592" },
                Button = { Color = "0 0 0 0", Command = $"UI_Handler allquest" },
                Text = { Text = GetLang("AVAILABLE_MISSIONS", player.UserIDString, QuestList.Count - playerQuests.Count), FontSize = 18, Align = TextAnchor.MiddleCenter }
            }, Layers, "allquest");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.275522 0.9222221", AnchorMax = "0.4624973 0.9842592" },
                Button = { Color = "0 0 0 0", Command = $"UI_Handler activequest" },
                Text = { Text = GetLang("ACTIVE_MISSIONS", player.UserIDString, playerQuests.Count), FontSize = 18, Align = TextAnchor.MiddleCenter }
            }, Layers, "activequest");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.07291577 0.1490741", AnchorMax = "0.382291 0.875" },
                Image = { Color = "0 0 0 0" }
            }, Layers, QuestListPanel);

            if (!active)
            {
                foreach (var quest in QuestList.Where(x => !playerQuests.ContainsKey(x.Key)).Skip(page * 7))
                {
                    if(y == 0)
                      indexQuest = quest.Key;

                    container.Add(new CuiElement
                    {
                        Parent = QuestListPanel,
                        Name = $"quest_{i}",
                        Components =
                    {
                    new CuiRawImageComponent { Png = GetImage("QUESTFON"), Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = $"0 {0.8928571 - (y * 0.15)}", AnchorMax = $"1 {0.9987245 - (y * 0.15)}"},
                    }
                    });
                    string text = string.Empty;
                    if (quest.Value.DisplayName.Length >= 49) text = quest.Value.DisplayName.Substring(0, 49) + "...";
                    else text = quest.Value.DisplayName;

                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.07407689 0.1445791", AnchorMax = "0.9696992 0.8674704", OffsetMax = "0 0" },
                        Text = { Text = $"<b>{text}</b>", Align = TextAnchor.MiddleLeft, FontSize = 16, Color = HexToRustFormat("#FFFFFFFF") }
                    }, $"quest_{i}");

                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Button = { Color = "0 0 0 0", Command = $"UI_Handler questinfo {quest.Key}" },
                        Text = { Text = "" }
                    }, $"quest_{i}");
                    if (y >= 6) break;
                    y++; i++;
                }
                if (indexQuest == 0)
                {
                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Text = { Text = GetLang("NOT_AVAILABLE_MISSIONS", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 19, Color = HexToRustFormat("#FFFFFFFF") }
                    }, QuestListPanel);
                }
            }
            else
            {
                if (playerQuests.Count == 0)
                {
                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Text = { Text = GetLang("NOT_AVAILABLE_MISSIONS", player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 19, Color = HexToRustFormat("#FFFFFFFF") }
                    }, QuestListPanel);
                }
                foreach (var quest in playerQuests.Skip(page * 7).Take(7))
                {
                    if (y == 0)
                        indexQuest = quest.Key;
                    container.Add(new CuiElement
                    {
                        Parent = QuestListPanel,
                        Name = $"quest_{i}",
                        Components =
                    {
                    new CuiRawImageComponent { Png = GetImage("QUESTFON"), Color = HexToRustFormat("#44C218FF") },
                    new CuiRectTransformComponent{ AnchorMin = $"0 {0.8928571 - (y * 0.15)}", AnchorMax = $"1 {0.9987245 - (y * 0.15)}"},
                    }
                    });

                    string text = string.Empty;
                    if (quest.Value.parentQuest.DisplayName.Length >= 43) text = quest.Value.parentQuest.DisplayName.Substring(0, 43) + "...";
                    else text = quest.Value.parentQuest.DisplayName;
                    container.Add(new CuiLabel
                    {
                        RectTransform = { AnchorMin = "0.07407689 0.1445791", AnchorMax = "0.9696992 0.8674704", OffsetMax = "0 0" },
                        Text = { Text = $"<b>{text}</b>", Align = TextAnchor.MiddleLeft, FontSize = 16, Color = HexToRustFormat("#FFFFFFFF") }
                    }, $"quest_{i}");

                    CuiImageComponent component = quest.Value.Finished ? new CuiImageComponent { Sprite = "assets/icons/check.png", Color = HexToRustFormat("#FFFFFFFF") } : new CuiImageComponent { Png = GetImage("InProcces"), Color = HexToRustFormat("#FFFFFFFF") };
                    container.Add(new CuiElement
                    {
                        Parent = $"quest_{i}",
                        Components =
                    {
                    component,
                    new CuiRectTransformComponent{ AnchorMin = $"0.8737399 0.1204819", AnchorMax = $"0.9747499 0.8433737"},
                    }
                    });

                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                        Button = { Color = "0 0 0 0", Command = $"UI_Handler questinfo {quest.Key}" },
                        Text = { Text = "" }
                    }, $"quest_{i}");
                    y++; i++;
                }
            }
            if (indexQuest != 0)
                OpenQuestInfo(player, indexQuest);
            CuiHelper.AddUi(player, container);
        }

        private void OpenQuestInfo(BasePlayer player, int quest)
        {
            player.SetFlag(BaseEntity.Flags.Reserved3, false);

            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, "QuestInfo");
            Dictionary<int, PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll;
            if (playerQuests == null) return;
            var quests = QuestList[quest];
            var curentQuest = playerQuests.FirstOrDefault(p => p.Value.parentQuest.DisplayName == quests.DisplayName);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.4458334 0.1898148", AnchorMax = "0.9369792 0.8074074", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0" }
            }, Layers, "QuestInfo");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.01378565 0.4907678", AnchorMax = "1.003181 0.6868463", OffsetMax = "0 0" },
                Text = { Text = $"<b>{quests.DisplayName}</b>", Align = TextAnchor.MiddleLeft, Font = "robotocondensed-bold.ttf", FontSize = 25, Color = HexToRustFormat("#FFFFFFFF") }
            }, "QuestInfo");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.01484602 0.3118441", AnchorMax = "0.988335 0.4821225", OffsetMax = "0 0" },
                Text = { Text = quests.Description, Align = TextAnchor.UpperLeft, Font = "robotocondensed-regular.ttf", FontSize = 14, Color = HexToRustFormat("#FFFFFFFF") }
            }, "QuestInfo");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.04984076 0.23240", AnchorMax = "0.5365851 0.3039169", OffsetMax = "0 0" },/////////////////////////////////////////////
                Text = { Text = GetLang("REWARD_FOR_QUESTIONS", player.UserIDString), Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 14, Color = HexToRustFormat("#FFFFFFFF") }
            }, "QuestInfo", "questinfo1");
            
            string userepeat = quests.UseRepeat ? GetLang("CAN", player.UserIDString) : GetLang("CAN'T", player.UserIDString);
            string useCooldown = quests.Cooldown > 0 ? TimeHelper.FormatTime(TimeSpan.FromSeconds(quests.Cooldown)) : GetLang("absent's", player.UserIDString);
            string msg = curentQuest.Value == null ? GetLang("QUEST_target", player.UserIDString, quests.Missions, userepeat, useCooldown) :
                                                     GetLang("QUEST_targetrtho", player.UserIDString, quests.Missions, curentQuest.Value.Count, quests.Amount, userepeat, useCooldown);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.628844 0.1139431", AnchorMax = "0.911983 0.3163418", OffsetMax = "0 0" },
                Text = { Text = msg, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-bold.ttf", FontSize = 12, Color = HexToRustFormat("#FFFFFFFF") }
            }, "QuestInfo");

            string command = "";
            string color = "";
            string text = "";
            if (curentQuest.Value == null)
            {
                if (!quests.UseRepeat && storedData.players[player.userID].PlayerQuestsFinish.Contains(quests.DisplayName))
                {
                    text = lang.GetMessage("QUEST_done", this, player.UserIDString);
                    color = "0.38 0.66 0.65 1.00";
                    command = $"UI_Handler get {quest}";
                }
                else
                {
                    text = lang.GetMessage("QUEST_take", this, player.UserIDString);
                    color = "0.43 0.52 0.29 1.00";
                    command = $"UI_Handler get {quest}";
                }
            }
            else if (curentQuest.Value.Finished)
            {
                text = lang.GetMessage("QUEST_turn", this, player.UserIDString);
                color = "0.29 0.40 0.52 1.00";
                command = $"UI_Handler finish {quest}";
            }
            else
            {
                text = lang.GetMessage("QUEST_REFUSE", this, player.UserIDString);
                color = "0.52 0.29 0.29 1.00";
                command = $"UI_Handler finish {quest}";
            }
            if (storedData.players[player.userID].PlayerQuestsCooldown != null)
            {
                if (storedData.players[player.userID].PlayerQuestsCooldown.ContainsKey(quests.DisplayName))
                {
                    if (storedData.players[player.userID].PlayerQuestsCooldown[quests.DisplayName] >= GetTimeStamp())
                    {
                        text = lang.GetMessage(TimeHelper.FormatTime(TimeSpan.FromSeconds(storedData.players[player.userID].PlayerQuestsCooldown[quests.DisplayName] - GetTimeStamp())), this, player.UserIDString);
                        color = "0.73 0.09 0.20 1.00";
                        command = $"UI_Handler coldown";
                        player.SetFlag(BaseEntity.Flags.Reserved3, true);
                    }
                }
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.6277843 0.036911586", AnchorMax = "0.9162256 0.1072717" },
                Button = { Color = color, Command = command },
                Text = { Text = text, Align = TextAnchor.MiddleCenter, FontSize = 18 }
            }, "QuestInfo", Layers + ".info");


            for (int i = 0; i < quests.PrizeList.Count; i++)
            {
                var prize = quests.PrizeList[i];

                string prizeLayer = "QuestInfo" + $".{i}";
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"{0.03287371 + i * 0.10f} 0.08788858", AnchorMax = $"{0.1283138 + i * 0.10f} 0.2228211", OffsetMax = "0 0" },
                    Button = { Color = HexToRustFormat("#73737339") },
                    Text = { Text = "" }
                }, "QuestInfo", prizeLayer);

                var img = prize.type == PrizeType.КастомПредмет ? GetImage(prize.ShortName, prize.SkinID) : prize.type == PrizeType.Предмет ? GetImage(prize.ShortName + 128) : prize.type == PrizeType.Команда ? GetImage(prize.Url) : "";
                if (img != "")
                {
                    container.Add(new CuiElement
                    {
                        Parent = prizeLayer,
                        Components =
                                {
                                    new CuiRawImageComponent { Png = img },
                                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                                }
                    });
                }
                else
                {
                    container.Add(new CuiElement
                    {
                        Parent = prizeLayer,
                        Components =
                                {
                                    new CuiRawImageComponent { Png = GetImage("BluePrint") },
                                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                                }
                    });
                    container.Add(new CuiElement
                    {
                        Parent = prizeLayer,
                        Components =
                                {
                                    new CuiRawImageComponent { Png = GetImage(prize.ShortName + 128) },
                                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" }
                                }
                    });
                }

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "-2 0", OffsetMin = "0 2" },
                    Text = { Text = $"x{prize.Amount}", Font = "droidsansmono.ttf", Align = TextAnchor.LowerRight, FontSize = 13, Color = HexToRustFormat("#FFFFFFFF") }
                }, prizeLayer);
            }
            CuiHelper.AddUi(player, container);
            if (storedData.players[player.userID].PlayerQuestsCooldown.ContainsKey(quests.DisplayName))
            {
                if(PlayersTime[player.userID] != null)
                    ServerMgr.Instance.StopCoroutine(PlayersTime[player.userID]);
                PlayersTime[player.userID] = ServerMgr.Instance.StartCoroutine(StartUpdate(player, quest));
            }       
        }

        public Dictionary<ulong, Coroutine> PlayersTime = new Dictionary<ulong, Coroutine>();
        private IEnumerator StartUpdate(BasePlayer player, int quest)
        {
            var check = QuestList[quest];

            while (player.HasFlag(BaseEntity.Flags.Reserved3))
            {
                    string questLayer = Layers + ".info";
                if (storedData.players[player.userID].PlayerQuestsCooldown.ContainsKey(check.DisplayName))
                {
                    if (storedData.players[player.userID]?.PlayerQuestsCooldown[check.DisplayName] >= GetTimeStamp())
                    {
                        CuiElementContainer container = new CuiElementContainer();
                        CuiHelper.DestroyUi(player, questLayer);

                        string text = TimeHelper.FormatTime(TimeSpan.FromSeconds(storedData.players[player.userID].PlayerQuestsCooldown[check.DisplayName] - GetTimeStamp()));

                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = "0.6277843 0.03691586", AnchorMax = "0.9162256 0.1072717" },
                            Button = { Color = "0.73 0.09 0.20 1.00", Command = "UI_Handler coldown" },
                            Text = { Text = text, Align = TextAnchor.MiddleCenter, Font = "robotocondensed-bold.ttf", FontSize = 13, Color = HexToRustFormat("#d9e1c6") }
                        }, "QuestInfo", Layers + ".info");

                        CuiHelper.AddUi(player, container);
                    }
                    else if (storedData.players[player.userID].PlayerQuestsCooldown[check.DisplayName] != 0)
                    {
                        storedData.players[player.userID].PlayerQuestsCooldown.Remove(check.DisplayName);
                        OpenQuestInfo(player, quest);
                    }
                }              
                yield return new WaitForSeconds(1);
            }
        }
        #endregion

        [ConsoleCommand("UI_Handler")]
        private void CmdConsoleHandler(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            Dictionary<int, PlayerQuest> playerQuests = storedData.players[player.userID].PlayerQuestsAll;
            if (playerQuests == null)
                return;

            if (player != null && args.HasArgs(1))
            {
                switch (args.Args[0])
                {
                    case "get":
                        {
                            int questIndex;
                            if (args.HasArgs(2) && int.TryParse(args.Args[1], out questIndex))
                            {
                                var currentQuest = QuestList[questIndex];
                                if (currentQuest != null)
                                {
                                    if (playerQuests.Count >= config.settings.questCount)
                                    {
                                        HelpUiNottice(player, GetLang("QUEST_ACTIVE_LIMIT", player.UserIDString));
                                        return;
                                    }
                                    if (playerQuests.Any(p => p.Value.parentQuest.DisplayName == currentQuest.DisplayName))
                                    {
                                        HelpUiNottice(player, GetLang("QUEST_took_tasks", player.UserIDString));
                                        return;
                                    }
                                    if (!currentQuest.UseRepeat && storedData.players[player.userID].PlayerQuestsFinish.Contains(currentQuest.DisplayName))
                                    {
                                        HelpUiNottice(player, GetLang("QUEST_completed_tasks", player.UserIDString));
                                        return;
                                    }
                                    if (storedData.players[player.userID].PlayerQuestsFinish.Contains(currentQuest.DisplayName))
                                    {
                                        HelpUiNottice(player, GetLang("QUEST_DONTREPEAT", player.UserIDString));
                                        return;
                                    }
                                    playerQuests.Add(questIndex, new PlayerQuest() { UserID = player.userID, parentQuest = currentQuest });
                                    if (currentQuest.Cooldown != 0)
                                    {
                                        if (!storedData.players[player.userID].PlayerQuestsCooldown.ContainsKey(currentQuest.DisplayName))
                                        {
                                            storedData.players[player.userID].PlayerQuestsCooldown.Add(currentQuest.DisplayName, 0);
                                        }
                                    }
                                    QuestLists(player, 0, true);
                                    OpenQuestInfo(player, questIndex);
                                    HelpUiNottice(player, GetLang("QUEST_completed_took", player.UserIDString, currentQuest.DisplayName));
                                }
                            }
                            break;
                        }
                    case "page":
                        {
                            int pageIndex;
                            if (int.TryParse(args.Args[1], out pageIndex))
                            {
                                QuestLists(player, pageIndex);
                            }
                            break;
                        }
                    case "activequest":
                        {
                            QuestLists(player, 0, false, true);
                            break;
                        }
                    case "allquest":
                        {
                            QuestLists(player, 0, false, false);
                            break;
                        }
                    case "coldown":
                        {
                            HelpUiNottice(player, GetLang("QUEST_ACTIVE_COLDOWN", player.UserIDString));
                            break;
                        }
                    case "questinfo":
                        {
                            int pageIndex;
                            if (int.TryParse(args.Args[1], out pageIndex))
                            {
                                OpenQuestInfo(player, pageIndex);
                            }
                            break;
                        }
                    case "finish":
                        {
                            int questIndex;
                            if (args.HasArgs(2) && int.TryParse(args.Args[1], out questIndex))
                            {
                                var globalQuest = QuestList[questIndex];
                                if (globalQuest != null)
                                {
                                    var currentQuest = playerQuests.FirstOrDefault(p => p.Value.parentQuest.DisplayName == globalQuest.DisplayName);
                                    if (currentQuest.Value == null)
                                        return;

                                    if (currentQuest.Value.Finished)
                                    {
                                        if (24 - player.inventory.containerMain.itemList.Count < currentQuest.Value.parentQuest.PrizeList.Where(x => x.type != PrizeType.Команда).Count())
                                        {
                                            HelpUiNottice(player, GetLang("QUEST_no_place", player.UserIDString));
                                            return;
                                        }

                                        if (currentQuest.Value.parentQuest.QuestType == QuestType.Добыть || currentQuest.Value.parentQuest.QuestType == QuestType.Залутать)
                                        {
                                            var idItem = ItemManager.FindItemDefinition(currentQuest.Value.parentQuest.Target);
                                            var item = player?.inventory?.GetAmount(idItem.itemid);
                                            if (item == 0 || item == null)
                                            {
                                                HelpUiNottice(player, GetLang("QUEST_Insufficient_resources", player.UserIDString, idItem.displayName.english));
                                                return;
                                            }
                                            if (item < currentQuest.Value.parentQuest.Amount)
                                            {
                                                HelpUiNottice(player, GetLang("QUEST_not_resources", player.UserIDString, idItem.displayName.english, currentQuest.Value.parentQuest.Amount));
                                                return;
                                            }
                                            if (item >= currentQuest.Value.parentQuest.Amount)
                                            {
                                                player.inventory.Take(null, idItem.itemid, currentQuest.Value.parentQuest.Amount);
                                            }

                                        }
                                        HelpUiNottice(player, GetLang("QUEST_tasks_completed", player.UserIDString));                

                                        currentQuest.Value.Finished = false;
                                        for (int i = 0; i < currentQuest.Value.parentQuest.PrizeList.Count; i++)
                                        {
                                            var check = currentQuest.Value.parentQuest.PrizeList[i];
                                            switch (check.type)
                                            {
                                                case PrizeType.Предмет:
                                                    Item newItem = ItemManager.CreateByPartialName(check.ShortName, check.Amount);
                                                    player.GiveItem(newItem, BaseEntity.GiveItemReason.Crafted);
                                                    break;
                                                case PrizeType.Команда:
                                                    Server.Command(check.Command.Replace("%STEAMID%", player.UserIDString));
                                                    break;
                                                case PrizeType.КастомПредмет:
                                                    Item customItem = ItemManager.CreateByPartialName(check.ShortName, check.Amount, check.SkinID);
                                                    customItem.name = check.Name;
                                                    player.GiveItem(customItem, BaseEntity.GiveItemReason.Crafted);
                                                    break;
                                                case PrizeType.Чертёж:
                                                    Item itemBp = ItemManager.CreateByItemID(-996920608, check.Amount);
                                                    itemBp.blueprintTarget = ItemManager.itemList.Find(x => x.shortname == check.ShortName)?.itemid ?? 0;
                                                    player.GiveItem(itemBp, BaseEntity.GiveItemReason.Crafted);
                                                    break;
                                            }
                                        }
                                        if (!currentQuest.Value.parentQuest.UseRepeat && globalQuest.Cooldown == 0)
                                        {
                                            storedData.players[player.userID].PlayerQuestsFinish.Add(currentQuest.Value.parentQuest.DisplayName);
                                        }
                                        else
                                        {
                                            storedData.players[player.userID].PlayerQuestsCooldown[globalQuest.DisplayName] = GetTimeStamp() + globalQuest.Cooldown;
                                        }
                                        playerQuests.Remove(currentQuest.Key);
                                        QuestLists(player, 0, true, true);
                                        OpenQuestInfo(player, questIndex);
                                    }
                                    else
                                    {
                                        HelpUiNottice(player, GetLang("QUEST_did_not_cope", player.UserIDString));
                                        playerQuests.Remove(currentQuest.Key);
                                        QuestLists(player, 0, true, true);
                                        OpenQuestInfo(player, questIndex);
                                    }
                                }
                                else
                                    HelpUiNottice(player, "Вы <color=#4286f4>не брали</color> этого задания!");
                            }
                            break;
                        }
                }
            }
        }

        #region Data
        class PlayerData
        {
            public List<string> PlayerQuestsFinish = new List<string>();
            public Dictionary<int, PlayerQuest> PlayerQuestsAll = new Dictionary<int, PlayerQuest>();
            public Dictionary<string, double> PlayerQuestsCooldown = new Dictionary<string, double>();
        }

        class StoredData
        {
            public Dictionary<ulong, PlayerData> players = new Dictionary<ulong, PlayerData>();
        }

        void SaveData()
        {
            SaveDataQuestList(QuestList);
            if (StatData != null)
                StatData.WriteObject(storedData);
            if (DataFile != null)
                DataFile.WriteObject(_Data);
        }

        private void SaveDataQuestList<T>(T data)
        {
            string resultName = this.Name + $"/{config.settings.questListDataName}";
            Interface.Oxide.DataFileSystem.WriteObject(resultName, data);
        }

        private void LoadDataQuestList<T>(ref T data)
        {
            string resultName = this.Name + $"/{config.settings.questListDataName}";

            if (Interface.Oxide.DataFileSystem.ExistsDatafile(resultName))
            {
                data = Interface.Oxide.DataFileSystem.ReadObject<T>(resultName);
            }
            else
            {
                Interface.Oxide.DataFileSystem.WriteObject(resultName, data);
            }
        }

        void LoadDataPlayer()
        {
            string resultName = this.Name + $"/PlayerInfo";
            StatData = Interface.Oxide.DataFileSystem.GetFile(resultName);
            try
            {
                storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(resultName);
            }
            catch
            {
                storedData = new StoredData();
            }
        }

        StoredData storedData;
        private DynamicConfigFile StatData;
        #endregion

        #region QuestListDefault
        private Dictionary<int, Quest> QuestList = new Dictionary<int, Quest>
        {
            [1] = new Quest
            {
                DisplayName = "Генетика - мое призвание",
                Description = "Изучая генетические соединения растений,далее животных, я дошел до генетических соединений людей!\nТеперь я могу изменить свое ДНК для получения приимуществ, нужно изучить 1 любой навык!",
                Missions = "Изучить 1 любой навык",
                QuestType = QuestType.IQPlagueSkill,
                Target = "0",
                Amount = 1,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "workbench1",
                         SkinID = 0,
                         ShortName = "workbench1",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Чертёж,
                         Name = "smg.thompson",
                         SkinID = 0,
                         ShortName = "smg.thompson",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "ammothompson",
                         SkinID = 0,
                         ShortName = "ammo.pistol.fire",
                         Amount = 128,
                         Url = "",
                         Command = "",
                    },

                }
            },
            [2] = new Quest
            {
                DisplayName = "Дикий запад",
                Description = "Сейчас твоя голова может стоит денег, поэтому стоит подумать 10 раз прежде чем убивать кепку,\nведь кто знает,что после убийства этой кепки на тебя ополчится весь сервер,чтобы убить тебя и забрать награду!\nЭтим мы и займемся, получим награду за голову , найди и убей игрока в розыске!",
                Missions = "Убить человека с наградой за голову",
                QuestType = QuestType.IQHeadReward,
                Target = "0",
                Amount = 1,
                UseRepeat = true,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "sulfur",
                         SkinID = 0,
                         ShortName = "sulfur",
                         Amount = 500,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "pookie.bear",
                         SkinID = 0,
                         ShortName = "pookie.bear",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "scrap",
                         SkinID = 0,
                         ShortName = "scrap",
                         Amount = 100,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "pistol.revolver",
                         SkinID = 0,
                         ShortName = "pistol.revolver",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "ammo.pistol",
                         SkinID = 0,
                         ShortName = "ammo.pistol",
                         Amount = 64,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [3] = new Quest
            {
                DisplayName = "Удача на моей стороне",
                Description = "Открой любой кейс,думаю нам повезет и мы потешимся получив отличный лут!",
                Missions = "Открыть 1 любой кейс",
                QuestType = QuestType.IQCases,
                Target = "0",
                Amount = 1,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Команда,
                         Name = "Халява",
                         SkinID = 0,
                         ShortName = "",
                         Amount = 500,
                         Url = "https://i.imgur.com/N93o4D2.png",
                         Command = "iqcase give %STEAMID% freecase 1",
                    },
                }
            },
            [4] = new Quest
            {
                DisplayName = "Залежи руды",
                Description = "Давай добудем необычную руду,которая редко,но попадается во время добычи привычной тебе руды!",
                Missions = "Добыть 15 любой радиоактивной руды",
                QuestType = QuestType.OreBonus,
                Target = "0",
                Amount = 15,
                UseRepeat = true,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "icepick.salvaged",
                         SkinID = 0,
                         ShortName = "icepick.salvaged",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "cakefiveyear",
                         SkinID = 0,
                         ShortName = "cakefiveyear",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "bed",
                         SkinID = 0,
                         ShortName = "bed",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [5] = new Quest
            {
                DisplayName = "Кто успел - тот и съел",
                Description = "Будь быстрым и ловким, по другому в этом мире не выжить!\nЗалутай первее особый груз и сохрани его,чтобы получить награду!",
                Missions = "Залутать особый груз 1 раз",
                QuestType = QuestType.XDChinookIvent,
                Target = "0",
                Amount = 1,
                UseRepeat = true,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "supply.signal",
                         SkinID = 0,
                         ShortName = "supply.signal",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "jackhammer",
                         SkinID = 0,
                         ShortName = "jackhammer",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "rf.detonator",
                         SkinID = 0,
                         ShortName = "rf.detonator",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "dropbox",
                         SkinID = 0,
                         ShortName = "dropbox",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [6] = new Quest
            {
                DisplayName = "Лес наповал!",
                Description = "Пора уже расчистить место для своей огромной базы!\nСруби несколько деревьев, сразу двух зайцев одним деревом,ха!",
                Missions = "Добыть 15000 дерева",
                QuestType = QuestType.Добыть,
                Target = "wood",
                Amount = 100,
                UseRepeat = true,
                Cooldown = 120,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "chainsaw",
                         SkinID = 0,
                         ShortName = "chainsaw",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "ladder.wooden.wall",
                         SkinID = 0,
                         ShortName = "ladder.wooden.wall",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [7] = new Quest
            {
                DisplayName = "Штурм космодрома",
                Description = "Пора заглянуть на заброшенный космодром и найти документы о всех полетах,узнать,что вообще творится на этом острове и почему каждый хочет убить друг друга!\nВзорви танк,мать его!",
                Missions = "Взорвать танк 1",
                QuestType = QuestType.Убить,
                Target = "bradleyapc",
                Amount = 1,
                UseRepeat = true,
                Cooldown = 1200,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Чертёж,
                         Name = "explosive.timed",
                         SkinID = 0,
                         ShortName = "explosive.timed",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "arcade.machine.chippy",
                         SkinID = 0,
                         ShortName = "arcade.machine.chippy",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "small.oil.refinery",
                         SkinID = 0,
                         ShortName = "small.oil.refinery",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.КастомПредмет,
                         Name = "Фрагмент VIP",
                         SkinID = 2101056280,
                         ShortName = "skull.human",
                         Amount = 5,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [8] = new Quest
            {
                DisplayName = "Пора на бой!",
                Description = "Хватит сидеть дома,ты что, на карантине? Компоненты в руки и бегом к чертежу крафтить пушки!\nСкрафти оружие и давай на выход!",
                Missions = "Скрафтить 3 калаша",
                QuestType = QuestType.Скрафтить,
                Target = "rifle.ak",
                Amount = 3,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "explosive.satchel",
                         SkinID = 0,
                         ShortName = "explosive.satchel",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "ammo.rifle.hv",
                         SkinID = 0,
                         ShortName = "ammo.rifle.hv",
                         Amount = 128,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [9] = new Quest
            {
                DisplayName = "Нужна полная защита дома!",
                Description = "Создай самые защищенные двери и установи их домой!\nНам нужно изучить бронированную одинарную дверь, где ее найти? Это уже твоя проблема!\nНайди и изучи, нам еще существовать,не забыл?",
                Missions = "Изучить бронированную одинарную дверь",
                QuestType = QuestType.Изучить,
                Target = "door.hinged.toptier",
                Amount = 1,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "door.double.hinged.toptier",
                         SkinID = 0,
                         ShortName = "door.double.hinged.toptier",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [10] = new Quest
            {
                DisplayName = "Штурмуешь?Бери все и сразу!",
                Description = "Если штурмовать что-то,то значит забрать ВСЕ!\nВторого шанса не будет,найди и залутай 300 скрапа, глядишь,что-то из тебя и выйдет после этого!\nДавай не мешкай,бегом!",
                Missions = "Залутать 300 скрапа",
                QuestType = QuestType.Залутать,
                Target = "scrap",
                Amount = 300,
                UseRepeat = false,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "weapon.mod.8x.scope",
                         SkinID = 0,
                         ShortName = "weapon.mod.8x.scope",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "rifle.l96",
                         SkinID = 0,
                         ShortName = "rifle.l96",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "syringe.medical",
                         SkinID = 0,
                         ShortName = "syringe.medical",
                         Amount = 15,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [11] = new Quest
            {
                DisplayName = "Улучшил двери и окна, а о каркасе дома забыл?",
                Description = "Хорошие двери и окна не значит,что тебя не зарейдят, рейдеры умные и бьют в самые слабые места дома!\nПредугадай их действия и улучши 20 элементов построек в МВК",
                Missions = "улучшить 20 элементов построек в МВК",
                QuestType = QuestType.УлучшитьПостройку,
                Target = "4",
                Amount = 20,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "guntrap",
                         SkinID = 0,
                         ShortName = "guntrap",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "autoturret",
                         SkinID = 0,
                         ShortName = "autoturret",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "electric.solarpanel.large",
                         SkinID = 0,
                         ShortName = "electric.solarpanel.large",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "electric.switch",
                         SkinID = 0,
                         ShortName = "electric.switch",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "electric.splitter",
                         SkinID = 0,
                         ShortName = "electric.splitter",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [12] = new Quest
            {
                DisplayName = "Властвуй!",
                Description = "Не забыл какую цель мы преследуем?\nЗахватить господство над островом,а чтобы заполучить его у тебя должны быть карты ко всем дверям!\nОткрой 10 красных дверей,чтобы доказать свое превосходство,ведь за этими дверьми таится прекрасный лут!",
                Missions = "Открыть 10 красных дверей",
                QuestType = QuestType.ИспользоватьКарточкуДоступа,
                Target = "red",
                Amount = 10,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "rocket.launcher",
                         SkinID = 0,
                         ShortName = "rocket.launcher",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "heavy.plate.helmet",
                         SkinID = 0,
                         ShortName = "heavy.plate.helmet",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "heavy.plate.jacket",
                         SkinID = 0,
                         ShortName = "heavy.plate.jacket",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "explosive.satchel",
                         SkinID = 0,
                         ShortName = "explosive.satchel",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "ammo.rocket.basic",
                         SkinID = 0,
                         ShortName = "ammo.rocket.basic",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
            [13] = new Quest
            {
                DisplayName = "Время переплавки",
                Description = "Пара переплавить все свои добытые ресурсы, нужно сделать для этого все возможное!",
                Missions = "Установи 3 небольших печки",
                QuestType = QuestType.установить,
                Target = "furnace",
                Amount = 3,
                UseRepeat = false,
                Cooldown = 0,

                PrizeList = new List<Quest.Prize>
                {
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "heavy.plate.helmet",
                         SkinID = 0,
                         ShortName = "heavy.plate.helmet",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "heavy.plate.jacket",
                         SkinID = 0,
                         ShortName = "heavy.plate.jacket",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                    new Quest.Prize
                    {
                         type = PrizeType.Предмет,
                         Name = "explosive.satchel",
                         SkinID = 0,
                         ShortName = "explosive.satchel",
                         Amount = 1,
                         Url = "",
                         Command = "",
                    },
                }
            },
        };
        #endregion
    }
}

// --- End of file: XDQuest.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/ChatMinus.cs ---
// --- Original Local Path: ChatMinus.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("ChatMinus", "Хомячок", "2.1")]
    [Description("Отправка и просмотр ЛС, тикетов админам и модераторам")]
    public class ChatMinus : RustPlugin
    {
        #region Virables
        
        private List<BasePlayer> _activeGui = new List<BasePlayer>();
        private List<BasePlayer> _activeFind = new List<BasePlayer>();
        //private Dictionary<string, Dictionary<BasePlayer, BasePlayer>> _activeCuiAll = new Dictionary<string, Dictionary<BasePlayer, BasePlayer>>
        //{
        //   { "_activeGuiModer",  new Dictionary<BasePlayer, BasePlayer>()},
        //    { "_activeGuiAdmin", new Dictionary<BasePlayer, BasePlayer>()},
        //    { "_activeGuiPrivate", new Dictionary<BasePlayer, BasePlayer>()},
        //    { "_activeMess", new Dictionary<BasePlayer, BasePlayer>()}
        //};
        private Dictionary<BasePlayer, BasePlayer> _activeGuiModer = new Dictionary<BasePlayer, BasePlayer>();
        private Dictionary<BasePlayer, BasePlayer> _activeGuiAdmin = new Dictionary<BasePlayer, BasePlayer>();
        private Dictionary<BasePlayer, BasePlayer> _activeGuiPrivate = new Dictionary<BasePlayer, BasePlayer>();
        private Dictionary<BasePlayer, BasePlayer> _activeMess = new Dictionary<BasePlayer, BasePlayer>();
        private Dictionary<BasePlayer, string> _string = new Dictionary<BasePlayer, string>();

        private const string PermModer = "chatminus.moder";
        private const string PermAdmin = "chatminus.admin";
        private const string UiElement = "MainUi";
        private const string UiInput = "UiInput";
        private const string UiInputFind = "UiInputFind";
        private const string UiMess = "UiMess";
        private const string UiPlayers = "UiPlayers";
        private const string UiNotiсe = "UiRemove";
        private const string Sound = "assets/prefabs/npc/scientist/sound/chatter.prefab";
        
        #endregion

        #region Commands

        [ChatCommand("cm")]
        private void CmdChatGui(BasePlayer player, string command, string[] args)
        {
            if (_activeGui.Contains(player))
            {
                DestroyGuiAll(player);
                if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
                if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
                if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                _activeGui.Remove(player);
            }
            else
            {
                _activeGui.Add(player);
                CreateGui(player, player);
                if (!_activeMess.ContainsKey(player)) return;
                var target = _activeMess[player];
                player.SendConsoleCommand($"cm.openinputmenu {target.userID} 3");
                //InputGui(player, target.userID, 3);
                //MessageList(player, target, 3);
                //if (!_activeGuiPrivate.ContainsKey(player))
                //    _activeGuiPrivate.Add(player, target);
                //if (!_string.ContainsKey(player)) return;
                //_string.Remove(player);
            }
        }
        
        [ConsoleCommand("cm.change")]
        private void CmdChatMinusChange(ConsoleSystem.Arg arg)
        {
/*            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            
            var hum = Convert.ToUInt64(arg.Args[0]); 
            var target = GetPlayer(hum);

            DestroyGuiNoOne(player);
            var num = _data.PlayersSetting[player.userID].StatusMenu;
            if (num == 0)
            {
                _data.PlayersSetting[player.userID].StatusMenu = 1;
                SaveData();
                CreateGui(player, target);
            }
            else
            {
                _data.PlayersSetting[player.userID].StatusMenu = 0;
                SaveData();
                CreateGui(player, target);
                if (player != target) MessageList(player, target, 3);
                if (_activeGuiAdmin.ContainsKey(player)) MessageList(player, target, 1);
                if (_activeGuiModer.ContainsKey(player)) MessageList(player, target, 2);
            }*/
        }
        
        [ConsoleCommand("cm.opendopmenu")]
        private void CmdChatMinusMenu(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            switch (arg.Args[0])
            {
                case "admin":
                    if (AllowAdmin(player))
                    {
                        player.Command($"cm.filtercharsadmincharf {int.Parse(arg.Args[1])} ~");
                        if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                        if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
                    }
                    else
                    {
                        if (_activeFind.Contains(player))
                        {
                            _activeFind.Remove(player);
                            DestroyGuiNoOne(player);
                        }
                        InputGui(player, player.userID, 1);
                        MessageList(player, player, 1);
                        if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                        if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
                        if (!_activeGuiAdmin.ContainsKey(player))_activeGuiAdmin.Add(player, player);
                    }
                    return;
                case "moder":
                    if (AllowModer(player))
                    {
                        player.Command($"cm.filtercharsmodercharf {int.Parse(arg.Args[1])} ~");
                        if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                        if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
                    }
                    else
                    {
                        if (_activeFind.Contains(player))
                        {
                            _activeFind.Remove(player);
                            DestroyGuiNoOne(player);
                        }
                        InputGui(player, player.userID, 2);
                        MessageList(player, player, 2);
                        if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                        if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
                        if (!_activeGuiModer.ContainsKey(player)) _activeGuiModer.Add(player, player);
                    }
                    return;
                case "players":
                    DestroyGui(player, UiInput);
                    player.Command($"cm.filtercharsplayerscharf {int.Parse(arg.Args[1])} ~");
                    if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
                    if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
                    return;
            }
        }
        
        [ConsoleCommand("cm.openinputmenu")]
        private void CmdAnswer(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            
            var hum = Convert.ToUInt64(arg.Args[0]); 
            var target = GetPlayer(hum);
            
            if (_activeFind.Contains(player))_activeFind.Remove(player);

            DestroyGuiNoOne(player);
            CreateGui(player, target);

            switch (arg.Args[1])
            {
                case "1":
                    InputGui(player, target.userID, 1);
                    MessageList(player, target, 1);
                    if (!_activeGuiAdmin.ContainsKey(player)) 
                        _activeGuiAdmin.Add(player, target);
                    if (!_string.ContainsKey(player)) return;
                    _string.Remove(player);
                    return;
                case "2":
                    InputGui(player, target.userID, 2);
                    MessageList(player, target, 2);
                    if (!(_activeGuiModer).ContainsKey(player)) 
                        _activeGuiModer.Add(player, target);
                    if (!_string.ContainsKey(player)) return;
                    _string.Remove(player);
                    return;
                case "3":
                    InputGui(player, target.userID, 3);
                    MessageList(player, target, 3);
                    if (!_activeGuiPrivate.ContainsKey(player)) 
                        _activeGuiPrivate.Add(player, target);
                    if (!_activeMess.ContainsKey(player))
                        _activeMess.Add(player, target);
                    _activeMess[player] = target;
                    if (!_string.ContainsKey(player)) return;
                    _string.Remove(player);
                    return;
            }
            
            _activeFind.Remove(player);
        }
        
        [ConsoleCommand("cm.filtercharsadmininput")]
        private void CmdFilterCharsAdmin(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!AllowAdmin(player)) return;

            var playerList = new Dictionary<string, ulong>();

            var argList = arg.Args.ToList();
            argList.RemoveAt(1);
            var message = string.Join(" ", argList.ToArray());

            if (!_string.ContainsKey(player)) _string.Add(player, "");
            _string[player] = message;
            if (_string[player] == "") return;
            var name = arg.Args[1];
            foreach (var target in _data.Players)
            {
                if (target.Value == player.userID) continue;
                if (target.Key.StartsWith(name.ToUpper()) || target.Key.StartsWith(name.ToLower()))
                {
                    playerList.Add(target.Key, target.Value);
                }
            }
            DestroyGui(player, UiPlayers);
            DestroyGui(player, UiMess);
            var numList = int.Parse(arg.Args[2]);
            ShowPlayers(player, playerList, "input", 1, numList);
            _activeFind.Add(player);
            if (!_string.ContainsKey(player)) return;
            _string.Remove(player);
        }

        [ConsoleCommand("cm.filtercharsadmincharf")]
        private void CmdFilterCharsAdminCh(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!AllowAdmin(player)) return;

            var playerList = new Dictionary<string, ulong>();

            var numList = int.Parse(arg.Args[0]);
            var charF = arg.Args[1];
            if (charF == "~")
            {
                foreach (var target in BasePlayer.activePlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (target == player) continue;
                    if (AllowAdmin(target)) continue;
                    if (!_data.PlayerMess.ContainsKey(target.userID)) continue;
                    if (_data.PlayerMess[target.userID].CountAdminMess > 0)
                        playerList.Add(target.displayName, target.userID);
                }
                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);
                ShowPlayers(player, playerList, "charf", 1, numList, charF);
                _activeFind.Add(player);
            }
            else
            {
                foreach (var target in BasePlayer.activePlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (target != player && !AllowAdmin(target))
                    {
                        if (target.displayName.StartsWith(charF.ToUpper()) ||
                            target.displayName.StartsWith(charF.ToLower()))
                            if (!playerList.ContainsKey(target.displayName))
                                playerList.Add(target.displayName, target.userID);
                    }
                }

                foreach (var target in BasePlayer.sleepingPlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (!AllowAdmin(target))
                    {
                        if (target.displayName.StartsWith(charF.ToUpper()) ||
                            target.displayName.StartsWith(charF.ToLower()))
                            if (!playerList.ContainsKey(target.displayName))
                                playerList.Add(target.displayName, target.userID);
                    }
                }

                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);
                ShowPlayers(player, playerList, "charf", 1, numList, charF);
                _activeFind.Add(player);
            }

            if (!_string.ContainsKey(player)) return;
            _activeFind.Add(player);
            _string.Remove(player);
        }

        [ConsoleCommand("cm.filtercharsmoderinput")]
        private void CmdFilterCharsModer(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!AllowModer(player)) return;
            var playerList = new Dictionary<string, ulong>();

            var argList = arg.Args.ToList();
            argList.RemoveAt(1);
            var message = string.Join(" ", argList.ToArray());

            if (!_string.ContainsKey(player)) _string.Add(player, "");
            _string[player] = message;
            if (_string[player] == "") return;
            var name = arg.Args[1];
            foreach (var target in _data.Players)
            {
                if (target.Value == player.userID) continue;
                if (target.Key.StartsWith(name.ToUpper()) || target.Key.StartsWith(name.ToLower()))
                {
                    playerList.Add(target.Key, target.Value);
                }
            }
            DestroyGui(player, UiPlayers);
            DestroyGui(player, UiMess);
            var numList = int.Parse(arg.Args[2]);
            ShowPlayers(player,playerList, "input", 2, numList);
            _activeFind.Add(player);
            if (!_string.ContainsKey(player)) return;
            _string.Remove(player);
        }

        [ConsoleCommand("cm.filtercharsmodercharf")]
        private void CmdFilterCharsModerCh(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            if (!AllowModer(player)) return;
            var playerList = new Dictionary<string, ulong>();

            var numList = int.Parse(arg.Args[0]);
            var charF = arg.Args[1];
            if (charF == "~")
            {
                foreach (var target in BasePlayer.activePlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (target == player) continue;
                    if (AllowModer(target)) continue;
                    if (!_data.PlayerMess.ContainsKey(target.userID)) continue;
                    if (_data.PlayerMess[target.userID].CountModerMess > 0)
                        playerList.Add(target.displayName, target.userID);
                }
                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);
                ShowPlayers(player, playerList, "charf", 2, numList, charF);
                _activeFind.Add(player);
            }
            else
            {
                foreach (var target in BasePlayer.activePlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (target != player && !AllowModer(target) && !AllowAdmin(target))
                    {
                        if (target.displayName.StartsWith(charF.ToUpper()) ||
                            target.displayName.StartsWith(charF.ToLower()))
                                if (!playerList.ContainsKey(target.displayName))
                                    playerList.Add(target.displayName, target.userID);
                    }
                }

                foreach (var target in BasePlayer.sleepingPlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (!AllowModer(target) && !AllowAdmin(target))
                    {
                        if (target.displayName.StartsWith(charF.ToUpper()) ||
                            target.displayName.StartsWith(charF.ToLower()))
                            if (target != player)
                                if (!playerList.ContainsKey(target.displayName))
                                    playerList.Add(target.displayName, target.userID);
                    }
                }

                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);
                ShowPlayers(player, playerList, "charf", 2, numList, charF);
                _activeFind.Add(player);
            }

            if (!_string.ContainsKey(player)) return;
            _activeFind.Add(player);
            _string.Remove(player);
        }

        [ConsoleCommand("cm.filtercharsplayersinput")]
        private void CmdFilterCharsPlayers(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;
            
            var playerList = new Dictionary<string, ulong>();
            var argList = arg.Args.ToList();
            argList.RemoveAt(1);
            var message = string.Join(" ", argList.ToArray());

            if (!_string.ContainsKey(player)) _string.Add(player, "");
            _string[player] = message;
            if (_string[player] == "") return;
            var name = arg.Args[1];
            if (_data.Players == null) return;
            foreach (var target in _data.Players)
            {
                if (target.Value == player.userID) continue;
                if (target.Key.StartsWith(name.ToUpper()) || target.Key.StartsWith(name.ToLower()))
                {
                    playerList.Add(target.Key, target.Value);
                }
            }
            DestroyGui(player, UiPlayers);
            DestroyGui(player, UiMess);
            var numList = int.Parse(arg.Args[2]);
            ShowPlayers(player, playerList, "input", 3, numList);
            _activeFind.Add(player);
            if (!_string.ContainsKey(player)) return;
            _string.Remove(player);
        }

        [ConsoleCommand("cm.filtercharsplayerscharf")]
        private void CmdFilterCharsPlayersCh(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            var playerList = new Dictionary<string, ulong>();

            var numList1 = int.Parse(arg.Args[0]);
            var charF = arg.Args[1];
            if (charF == "~")
            {
                foreach (var target in BasePlayer.activePlayerList)
                {
                    if (target != player)
                        playerList.Add(target.displayName, target.userID);
                }
                //foreach (var target in BasePlayer.sleepingPlayerList)
                //{
                //    if (IsNpc(target)) continue;
                //    if (target != player)
                //        if (!playerList.ContainsKey(target.displayName))
                //            playerList.Add(target.displayName, target.userID);
                //}
                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);

                ShowPlayers(player, playerList, "charf", 3, numList1, charF);
                _activeFind.Add(player);
            }
            else
            {
                foreach (var target in _data.Players)
                {
                    if (target.Value != player.userID)
                    {
                        if (target.Key.StartsWith(charF.ToUpper()) ||
                            target.Key.StartsWith(charF.ToLower()))
                            if (!playerList.ContainsKey(target.Key))
                                playerList.Add(target.Key, target.Value);
                    }
                }

                foreach (var target in BasePlayer.sleepingPlayerList)
                {
                    if (IsNpc(target)) continue;
                    if (target.displayName.StartsWith(charF.ToUpper()) ||
                        target.displayName.StartsWith(charF.ToLower()))
                        if(!playerList.ContainsKey(target.displayName))
                            playerList.Add(target.displayName, target.userID);
                }

                DestroyGui(player, UiPlayers);
                DestroyGui(player, UiMess);
                ShowPlayers(player, playerList, $"charf", 3, numList1, charF);
                _activeFind.Add(player);
            }

            if (!_string.ContainsKey(player)) return;
            _activeFind.Add(player);
            _string.Remove(player);
        }

        [ConsoleCommand("cm.sendchatminus")]
        private void CmdChatMinusSendMessage(ConsoleSystem.Arg arg)
        {
            var player = arg.Connection.player as BasePlayer;
            if (player == null)
                return;

            BasePlayer target;
            
            if (!_string.ContainsKey(player)) _string.Add(player, "");

            switch (arg.Args[0])
            {
                case "input":
                    var argList = arg.Args.ToList();
                    argList.RemoveAt(0);
                    var message = string.Join(" ", argList.ToArray());
            
                    if (!_string.ContainsKey(player)) _string.Add(player, "");
                    _string[player] = message;
                    return;
                case "playermessage": // игрок игроку
                    target = GetPlayer(Convert.ToUInt64(arg.Args[1]));
                    if (!CheckMessage(_string[player]))
                    {
                        Msg(player, lang.GetMessage("MSG_ERROR", this, player.UserIDString));
                        return;
                    }
                    _data.PlayerMess[player.userID].PrivateMess[target.userID].Add(DateTime.Now, ($"<b><color=#FFFFFF>  {player.displayName}</color></b> <size=10>({DateTime.Now})</size>\n" + _string[player]));
                    SaveData();
                    DestroyGuiNoOne(player);
                    InputGui(player, target.userID, 3);
                    MessageList(player, target, 3);
                    if (_config.EnableSound) Effect.server.Run(_config.Sound, target, 0, Vector3.zero, Vector3.zero);
                    //Puts($"Игрок {player.displayName} для {target.displayName}: {_string[player]}");
                    SendUpdateMessages(player, target, 1);
                    return;
                case "adminmessage": // игрок админу
                    if (!CheckMessage(_string[player])) 
                    {
                        Msg(player, lang.GetMessage("MSG_ERROR", this, player.UserIDString));
                        return;
                    }
                    _data.PlayerMess[player.userID].AdminMess.Add(DateTime.Now, ($"<b><color=#ffffff>  {player.displayName}</color></b> <size=10>({DateTime.Now})</size>\n" + _string[player]));
					_data.PlayerMess[player.userID].CountAdminMess += 1;
                    SaveData();
                    DestroyGuiNoOne(player);
                    InputGui(player, player.userID, 1);
                    MessageList(player, player, 1);
                    //Puts($"Игрок {player.displayName} АДМИНУ: {_string[player]}");
                    SendUpdateMessages(player, player, 2);
                    return;
                case "adminanswer": // админ игроку
                    target = GetPlayer(Convert.ToUInt64(arg.Args[1]));
                    if (!CheckMessage(_string[player])) 
                    {
                        Msg(player, lang.GetMessage("MSG_ERROR", this, player.UserIDString));
                        return;
                    }
                    _data.PlayerMess[target.userID].AdminMess.Add(DateTime.Now, ($"<b><color=#ffffff>ADMIN</color></b> <size=10>({DateTime.Now})</size>\n" + _string[player]));
					_data.PlayerMess[target.userID].CountAdminMess += 1;
                    SaveData();
                    DestroyGuiNoOne(player);
                    InputGui(player, target.userID, 1);
                    MessageList(player, target, 1);
                    if (_config.EnableSound) Effect.server.Run(_config.Sound, target, 0, Vector3.zero, Vector3.zero);
                    //Puts($"АДМИН {player.displayName} ИГРОКУ {target.displayName}: {_string[player]}");
                    SendUpdateMessages(player, target, 3);
                    return;
                case "modermessage": // игрок модеру
                    if (!CheckMessage(_string[player])) 
                    {
                        Msg(player, lang.GetMessage("MSG_ERROR", this, player.UserIDString));
                        return;
                    }
                    _data.PlayerMess[player.userID].ModerMess.Add(DateTime.Now, ($"<b><color=#ffffff>  {player.displayName}</color></b> <size=10>({DateTime.Now})</size>\n" + _string[player]));
					_data.PlayerMess[player.userID].CountModerMess += 1;
                    SaveData();
                    DestroyGuiNoOne(player);
                    InputGui(player, player.userID, 2);
                    MessageList(player, player, 2);
                    //Puts($"Игрок {player.displayName} МОДЕРУ: {_string[player]}");
                    SendUpdateMessages(player, player, 4);
                    return;
                case "moderanswer": // модер игроку
                    target = GetPlayer(Convert.ToUInt64(arg.Args[1]));
                    if (!CheckMessage(_string[player])) 
                    {
                        Msg(player, lang.GetMessage("MSG_ERROR", this, player.UserIDString));
                        return;
                    }
                    _data.PlayerMess[target.userID].ModerMess.Add(DateTime.Now, ($"<b><color=#ffffff>MODERATOR</color></b> <size=10>({DateTime.Now})</size>\n" + _string[player]));
					_data.PlayerMess[target.userID].CountModerMess += 1;
                    SaveData();
                    DestroyGuiNoOne(player);
                    InputGui(player, target.userID, 2);
                    MessageList(player, target, 2);
                    if (_config.EnableSound) Effect.server.Run(_config.Sound, target, 0, Vector3.zero, Vector3.zero);
                    //Puts($"МОДЕР {player.displayName} ИГРОКУ {target.displayName}: {_string[player]}");
                    SendUpdateMessages(player, target, 5);
                    return;
                case "removeamdmin": // админ удаляет
                    target = GetPlayer(Convert.ToUInt64(arg.Args[1]));
                    if (_data.PlayerMess[target.userID].AdminMess.Count > 0) _data.PlayerMess[target.userID].AdminMess.Clear();
					_data.PlayerMess[target.userID].CountAdminMess = 0;
                    SaveData();
                    player.Command("cm.sendchatminus close");
                    target.Command("cm.sendchatminus close");
                    Msg(player, lang.GetMessage("TICKET_DELETE", this, player.UserIDString));
                    Msg(target, lang.GetMessage("TICKET_DELETE", this, target.UserIDString));
                    return;
                case "removemoder": // модер удаляет
                    target = GetPlayer(Convert.ToUInt64(arg.Args[1]));
                    if (_data.PlayerMess[target.userID].ModerMess.Count > 0) _data.PlayerMess[target.userID].ModerMess.Clear();
					_data.PlayerMess[target.userID].CountModerMess = 0;
                    SaveData();
                    player.Command("cm.sendchatminus close");
                    target.Command("cm.sendchatminus close");
                    Msg(player, lang.GetMessage("TICKET_DELETE", this, player.UserIDString));
                    Msg(target, lang.GetMessage("TICKET_DELETE", this, target.UserIDString));
                    return;
                case "removeplayeramdmin": // игрок удаляет сообщения для админов
                    if (_data.PlayerMess[player.userID].AdminMess.Count > 1) _data.PlayerMess[player.userID].AdminMess.Clear();
					_data.PlayerMess[player.userID].CountAdminMess = 0;
                    SaveData();
                    player.Command("cm.sendchatminus close");
                    Msg(player, lang.GetMessage("TICKET_DELETE", this, player.UserIDString));
                    SendUpdateMessages(player, player, 6);
                    return;
                case "removeplayermoder": // игрок удаляет сообщения для модеров
                    if (_data.PlayerMess[player.userID].ModerMess.Count > 1) _data.PlayerMess[player.userID].ModerMess.Clear();
					_data.PlayerMess[player.userID].CountModerMess = 0;
                    SaveData();
                    player.Command("cm.sendchatminus close");
                    Msg(player, lang.GetMessage("TICKET_DELETE", this, player.UserIDString));
                    SendUpdateMessages(player, player, 7);
                    return;
                case "close":
                    DestroyGuiAll(player);
                    if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
                    if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
                    if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
                    if (_activeFind.Contains(player))_activeFind.Remove(player);
                    _activeGui.Remove(player);
                    return;
            }
        }

        #endregion

        #region Cui

        private static void CreateGui(BasePlayer player, BasePlayer target)
        {
            //var num = _data.PlayersSetting[player.userID].StatusMenu;
            var startOne = "0.825 0.3";
            var lastOne = "0.9975 0.9";
/*            var  name = ">";
            switch (num)
            {
                case 1:
                    startOne = "0.9975 0.3";
                    lastOne = "1.17 0.9";
                    name = "<b><</b>";
                    break;
                case 0:
                    startOne = "0.825 0.3";
                    lastOne = "0.9975 0.9";
                    name = "<b>></b>";
                    break;
            }*/

            var container = Ui.Container(UiElement, Ui.Color("#000000", 0f), startOne, lastOne); 
            Ui.Panel(ref container, UiElement, Ui.Color("#808080", 0.3f), "0 0.074", "1 0.924");
            
            Ui.Panel(ref container, UiElement, Ui.Color("#808080", 0.5f), "0 0.931", "1 1");
            Ui.Label(ref container, UiElement, $"<b>{target.displayName}</b>", Ui.Color("#FFFFFF", 1f), 16, "0 0.931", "1 1", 0);
            
            Ui.Panel(ref container, UiElement, Ui.Color("#808080", 0f), "0 0", "1 0.069");
            Ui.Button(ref container, UiElement, Ui.Color("#B67A7F", 0.8f), "<b>ADMIN</b>", "1 1 1 0.8", 14, "0 0", "0.32 0.065", $"cm.opendopmenu admin 0");
            Ui.Button(ref container, UiElement, Ui.Color("#81b67a", 0.8f), "<b>MODER</b>", "1 1 1 0.8", 14, "0.34 0", "0.66 0.065", $"cm.opendopmenu moder 0");
            Ui.Button(ref container, UiElement, Ui.Color("#808080", 0.6f), "<b>PLAYERS</b>", "1 1 1 0.8", 14, "0.68 0", "1 0.065", $"cm.opendopmenu players 0");
            
            //Ui.Button(ref container, UiElement, Ui.Color("#808080", 0.6f), name, "1 1 1 0.8", 16, "-0.07 0.46", "0 0.54", $"cm.change {target.userID}");

            CuiHelper.DestroyUi(player, UiElement);
            CuiHelper.AddUi(player, container);
        }
        
        private void InputGui(BasePlayer player, ulong targetUlong, int num)
        {
            var container = Ui.Container(UiInput, Ui.Color("#808080", 0f), "0.0128 0.025", "0.3077 0.124");
            
            Ui.Panel(ref container, UiInput, Ui.Color("#ff7f50", 0.7f), "0 0.57", "1 0.94", 0.5f);
            Ui.Input(ref container, UiInput, Ui.Color("#ffffff", 1f), "input ", 18, $"cm.sendchatminus ", "0.02 0.57", "0.98 0.94");
            
            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.51 0.14", "0.75 0.51");
            Ui.Button(ref container, UiInput, Ui.Color("#FF6347", 0.7f), "<b>CLOSE</b>", Ui.Color("#FFFFFF", 1f), 14, "0.51 0.14", "0.75 0.51", $"cm.sendchatminus close");
            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.76 0.14", "1 0.51");

            switch (num)
            {
                    case 1:
                        if (AllowAdmin(player))
                        {
                            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.26 0.14", "0.5 0.51");
                            Ui.Button(ref container, UiInput, Ui.Color("#808080", 0.7f), "<b>REMOVE</b>", Ui.Color("#FFFFFF", 1f), 14, "0.26 0.14", "0.5 0.51", $"cm.sendchatminus removeamdmin {targetUlong}");
                            Ui.Button(ref container, UiInput, Ui.Color("#9acd32", 0.7f), "<b>SEND</b>", Ui.Color("#FFFFFF", 1f), 14, "0.76 0.14", "1 0.51", $"cm.sendchatminus adminanswer {targetUlong}");
                        }
                        else
                        {
                            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.26 0.14", "0.5 0.51");
                            Ui.Button(ref container, UiInput, Ui.Color("#808080", 0.7f), "<b>REMOVE</b>", Ui.Color("#FFFFFF", 1f), 14, "0.26 0.14", "0.5 0.51", $"cm.sendchatminus removeplayeramdmin");
                            Ui.Button(ref container, UiInput, Ui.Color("#9acd32", 0.7f), "<b>SEND</b>", Ui.Color("#FFFFFF", 1f), 14, "0.76 0.14", "1 0.51", $"cm.sendchatminus adminmessage");
                        }
                        
                        CuiHelper.DestroyUi(player, UiInput);
                        CuiHelper.AddUi(player, container);
                        return;
                    case 2:
                        if (AllowModer(player))
                        {
                            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.26 0.14", "0.5 0.51");
                            Ui.Button(ref container, UiInput, Ui.Color("#808080", 0.7f), "<b>REMOVE</b>", Ui.Color("#FFFFFF", 1f), 14, "0.26 0.14", "0.5 0.51", $"cm.sendchatminus removemoder {targetUlong}");
                            Ui.Button(ref container, UiInput, Ui.Color("#9acd32", 0.7f), "<b>SEND</b>", Ui.Color("#FFFFFF", 1f), 14, "0.76 0.14", "1 0.51", $"cm.sendchatminus moderanswer {targetUlong}");
                        }
                        else
                        {
                            Ui.Panel(ref container, UiInput, Ui.Color("#808080", 0.4f), "0.26 0.14", "0.5 0.51");
                            Ui.Button(ref container, UiInput, Ui.Color("#808080", 0.7f), "<b>REMOVE</b>", Ui.Color("#FFFFFF", 1f), 14, "0.26 0.14", "0.5 0.51", $"cm.sendchatminus removeplayermoder");
                            Ui.Button(ref container, UiInput, Ui.Color("#9acd32", 0.7f), "<b>SEND</b>", Ui.Color("#FFFFFF", 1f), 14, "0.76 0.14", "1 0.51", $"cm.sendchatminus modermessage");
                        }
                        
                        CuiHelper.DestroyUi(player, UiInput);
                        CuiHelper.AddUi(player, container);
                        return;
                    case 3:
                        Ui.Button(ref container, UiInput, Ui.Color("#9acd32", 0.7f), "<b>SEND</b>", Ui.Color("#FFFFFF", 1f), 14, "0.76 0.14", "1 0.51", $"cm.sendchatminus playermessage {targetUlong}");
                        
                        CuiHelper.DestroyUi(player, UiInput);
                        CuiHelper.AddUi(player, container);
                        return;
            }
        }
        
        private static void FilterCharsInputMenu(BasePlayer player, int num)
        {
            var container = Ui.Container(UiInputFind, Ui.Color("#808080", 0f), "0.825 0.25", "0.9975 0.29");

            switch (num)
            {
                case 1:
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0 0", "0.8 1");
                    Ui.Input(ref container, UiInputFind, Ui.Color("#ffffff", 1f), "0 ", 18, $"cm.filtercharsadmincharf ", "0 0", "0.8 1");
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0.82 0", "1 1");
                    Ui.Label(ref container, UiInputFind, $"<b>FIND</b>", Ui.Color("#FFFFFF", 1f), 16, "0.82 0", "1 1");
                    CuiHelper.DestroyUi(player, UiInputFind);
                    CuiHelper.AddUi(player, container);
                    return;
                case 2:
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0 0", "0.8 1");
                    Ui.Input(ref container, UiInputFind, Ui.Color("#ffffff", 1f), "0 ", 18, $"cm.filtercharsmodercharf ", "0 0", "0.8 1");
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0.82 0", "1 1");
                    Ui.Label(ref container, UiInputFind, $"<b>FIND</b>", Ui.Color("#FFFFFF", 1f), 16, "0.82 0", "1 1");
                    CuiHelper.DestroyUi(player, UiInputFind);
                    CuiHelper.AddUi(player, container);
                    return;
                case 3:
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0 0", "0.8 1");
                    Ui.Input(ref container, UiInputFind, Ui.Color("#ffffff", 1f), "0 ", 18, $"cm.filtercharsplayerscharf ", "0 0", "0.8 1");
                    Ui.Panel(ref container, UiInputFind, Ui.Color("#808080", 0.6f), "0.82 0", "1 1");
                    Ui.Label(ref container, UiInputFind, $"<b>FIND</b>", Ui.Color("#FFFFFF", 1f), 16, "0.82 0", "1 1");
                    CuiHelper.DestroyUi(player, UiInputFind);
                    CuiHelper.AddUi(player, container);
                    return;
            }
        }
        
        private void MessageList(BasePlayer player, BasePlayer target, int num)
        {
            BasePlayer human;

            if (AllowAdmin(player) && num != 2 && num != 3) human = target;
            else if (AllowModer(player) && num != 1 && num != 3) human = target;
            else human = player;

            Dictionary<DateTime, string> top;
            var message = new List<string>();
            
            switch (num)
            {
                case 1:
                    CheckData(human.userID, human.userID);
                    top = _data.PlayerMess[human.userID].AdminMess.OrderByDescending(pair => pair.Key).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                    foreach (var msg in top)
                    {
                        message.Add(msg.Value);
                    }
                    ShowMessage(player, message);
                    break;
                case 2:
                    CheckData(human.userID, human.userID);
                    top = _data.PlayerMess[human.userID].ModerMess.OrderByDescending(pair => pair.Key).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                    foreach (var msg in top)
                    {
                        message.Add(msg.Value);
                    }
                    ShowMessage(player, message);
                    break;
                case 3:
                    CheckData(human.userID, target.userID);
                     top = _data.PlayerMess[human.userID].PrivateMess[target.userID].OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value);
                     var top1 = _data.PlayerMess[target.userID].PrivateMess[human.userID].OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value);
                    var top3 = new Dictionary<DateTime, string>();
                    foreach (var tops in top) 
                    {top3.Add(tops.Key, tops.Value);}
                    foreach (var tops in top1) 
                    {top3.Add(tops.Key, tops.Value);}
                    var top4 = top3.OrderByDescending(pair => pair.Key).Take(5).ToDictionary(pair => pair.Key, pair => pair.Value);
                    foreach (var msg in top4)
                    {
                        message.Add(msg.Value);
                    }
                    ShowMessage(player, message);
                    break;
            }
        }

        private static void ShowMessage(BasePlayer player, IEnumerable<string> messageList)
        {
            var container = Ui.Container(UiMess, "1 1 1 0", "0.8278 0.3495", "0.9955 0.85");
            var y1 = 0f;
            var y2 = 0.1915f;
            var y3 = 0.154f;
            foreach (var t in messageList)
            {
                var color = Ui.Color(t.Contains(player.displayName) ? "#9acd32" : "#42aaff", 0.6f);
                if (t == "") color = Ui.Color("#808080", 0.6f);
                if (t.Contains("ADMIN") || t.Contains("MODER")) color = Ui.Color("#a333ff", 0.6f);
                
                Ui.Panel(ref container, UiMess, Ui.Color("#808080", 0.3f), $"0 {y1}", $"1 {y2}");
                Ui.Panel(ref container, UiMess, color, $"0 {y1}", $"1 {y2}");
                Ui.Panel(ref container, UiMess, Ui.Color("#808080", 0.8f), $"0 {y3}", $"1 {y2}");
                Ui.Label(ref container, UiMess, t, Ui.Color("#FFFFFF", 1f), 12, $"0.01 {y1}", $"0.99 {y2}", 0, TextAnchor.UpperLeft);
                y1 += 0.201f;
                y2 += 0.201f;
                y3 += 0.201f;
            }

            CuiHelper.DestroyUi(player, UiMess);
            CuiHelper.AddUi(player, container);
        }
        
        private void ShowPlayers(BasePlayer player, Dictionary<string, ulong> list, string chars,  int num, int numList, string charF = "")
        {
            FilterCharsInputMenu(player, num);
            var container = Ui.Container(UiPlayers, Ui.Color("#808080", 0.6f), "0.2 0.3", "0.8 0.9");
            //var playerListSort = list.OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value);
            var playerListSort = list.OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value).Skip(numList * 60).Take(60);

            var color = Ui.Color("#FFFFFF", 0.3f);

            var count = 0;
            var x1 = 0.014f;
            var y1 = 0.02f;
            var x2 = 0.17f;
            var y2 = 0.105f;
            foreach (var pl in playerListSort)
            {
                if (_data.PlayerMess.ContainsKey(player.userID) && _data.PlayerMess.ContainsKey(pl.Value) && _data.PlayerMess[player.userID].PrivateMess.ContainsKey(pl.Value) && _data.PlayerMess[pl.Value].PrivateMess.ContainsKey(player.userID))
                {
                    var date1 = _data.PlayerMess[player.userID].PrivateMess[pl.Value].OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value).Take(1);
                    var date2 = _data.PlayerMess[pl.Value].PrivateMess[player.userID].OrderByDescending(pair => pair.Key).ToDictionary(pair => pair.Key, pair => pair.Value).Take(1);

                    var dada1 = DateTime.Now;
                    var dada2 = DateTime.Now;
                    var text1 = "";
                    var text2 = "";
                    foreach (var r in date1)
                    {
                        foreach (var t in date2)
                        {
                            dada2 = t.Key;
                            text1 = t.Value;
                        }
                        dada1 = r.Key;
                        text2 = r.Value;
                    }
                    color = dada1 > dada2 ? text1 != "" && text2 != "" ? Ui.Color("#9acd32", 0.3f): Ui.Color("#FFFFFF", 0.3f) : text1 != "" && text2 != "" ? Ui.Color("#42aaff", 0.3f): Ui.Color("#FFFFFF", 0.3f);
                }
                var playerId = pl.Key;
                Ui.Button(ref container, UiPlayers, color, playerId, "1 1 1 1", 18, $"{x1} {y1}", $"{x2} {y2}", $"cm.openinputmenu {pl.Value} {num}");
                color = Ui.Color("#FFFFFF", 0.3f);
                ++count;

                x1 += 0.163f;
                x2 += 0.163f;
                if (count % 6 == 0)
                {
                    y1 += 0.0968f;
                    y2 += 0.0968f;
                    x1 = 0.014f;
                    x2 = 0.17f;
                }

                if (count >= 60)
                    break;
            }

            var command = num == 1 ? $"cm.filtercharsadmin{chars}" : num == 2 ? $"cm.filtercharsmoder{chars}" : $"cm.filtercharsplayers{chars}";
            var numDown = numList == 0 ? 0 : numList - 1;
            var cmdUp = (numList + 1) * 60 > playerListSort.Count() ? "" : $"{command} {numList + 1} {charF}";
            var cmdDown = numList <= 0 ? "" : $"{command} {numDown} {charF}";
            Ui.Button(ref container, UiPlayers, Ui.Color("#808080", 0.6f), $"{numList + 2}", "1 1 1 1", 16, "0.9 -0.08", "1 -0.015", $"{cmdUp}");
            Ui.Button(ref container, UiPlayers, Ui.Color("#808080", 0.6f), $"{numDown +1}", "1 1 1 1", 16, "0 -0.08", "0.1 -0.015", $"{cmdDown}");

            CuiHelper.DestroyUi(player, UiMess);
            CuiHelper.AddUi(player, container);
        }

        #endregion
        
        #region DestroyGui
        
        private static void DestroyGui(BasePlayer player, string container)
        {
            CuiHelper.DestroyUi(player, container);
        }
        
        private static void DestroyGuiNoOne(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UiPlayers);
            CuiHelper.DestroyUi(player, UiMess);
            CuiHelper.DestroyUi(player, UiInputFind);
        }
        
        private static void DestroyGuiAll(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UiElement);
            CuiHelper.DestroyUi(player, UiInput);
            CuiHelper.DestroyUi(player, UiInputFind);
            CuiHelper.DestroyUi(player, UiMess);
            CuiHelper.DestroyUi(player, UiPlayers);
            CuiHelper.DestroyUi(player, UiNotiсe);
        }
        
        #endregion

        #region Func

        private static bool IsNpc(BasePlayer player) //исключение НПС
        {
            if (player == null) return false;
            if (player is NPCPlayer)
                return true;
            if (!(player.userID >= 76560000000000000L || player.userID <= 0L))
                return true;
            return false;
        }
        
        private bool AllowModer(BasePlayer player)
        {
            return permission.UserHasPermission(player.UserIDString, PermModer);
        }
        
        private bool AllowAdmin(BasePlayer player)
        {
            return permission.UserHasPermission(player.UserIDString, PermAdmin);
        }

        private void Msg(BasePlayer player, string msg, params object[] args)
        {
            SendReply(player, $"{_config.Prefix}: " + string.Format(GetMsg(msg, player), args));
        }

        private string GetMsg(string key) => lang.GetMessage(key, this);
        private string GetMsg(string key, BasePlayer player = null) => lang.GetMessage(key, this, player == null ? null : player.UserIDString);
        
        private static BasePlayer GetPlayer(ulong userId)
        {
            var player = BasePlayer.FindByID(userId);
            if (player)
                return player;
 
            player = BasePlayer.FindSleeping(userId);
            if (player)
                return player;
 
            player = BasePlayer.Find(userId.ToString());
            return player ? player : null;
        }

        private void CheckData(ulong playerId, ulong targetId)
        {
            if (playerId == targetId)
            {
                if (!_data.PlayerMess.ContainsKey(playerId))
                 {
                     _data.PlayerMess.Add(playerId, new ChatMess{AdminMess = new Dictionary<DateTime, string>(), ModerMess = new Dictionary<DateTime, string>()});
                     _data.PlayerMess[playerId].AdminMess.Add(DateTime.Now, "");
                     _data.PlayerMess[playerId].ModerMess.Add(DateTime.Now, "");
                     _data.PlayerMess[playerId].CountAdminMess = 0;
                     _data.PlayerMess[playerId].CountModerMess = 0;
                 }
//                if (!_data.PlayerMess.ContainsKey(targetId))
//                {
//                    _data.PlayerMess.Add(targetId, new ChatMess{AdminMess = new Dictionary<DateTime, string>(), ModerMess = new Dictionary<DateTime, string>()});
//                    _data.PlayerMess[targetId].AdminMess.Add(DateTime.Now, "");
//                    _data.PlayerMess[targetId].ModerMess.Add(DateTime.Now, "");
//                    _data.PlayerMess[targetId].CountAdminMess = 0;
//                    _data.PlayerMess[targetId].CountModerMess = 0;
//                }
             }
             else
            {
                 if (!_data.PlayerMess.ContainsKey(playerId))
                 {
                     _data.PlayerMess.Add(playerId, new ChatMess{PrivateMess = new Dictionary<ulong, Dictionary<DateTime, string>>()});
                 }
                 if (!_data.PlayerMess[playerId].PrivateMess.ContainsKey(targetId))
                 {
                     _data.PlayerMess[playerId].PrivateMess.Add(targetId, new Dictionary<DateTime, string>());
                     _data.PlayerMess[playerId].PrivateMess[targetId].Add(DateTime.Now, "");
                     SaveData();
                 }
                 
                 if (!_data.PlayerMess.ContainsKey(targetId))
                 {
                     _data.PlayerMess.Add(targetId, new ChatMess{PrivateMess = new Dictionary<ulong, Dictionary<DateTime, string>>()});
                 }
                 if (!_data.PlayerMess[targetId].PrivateMess.ContainsKey(playerId))
                 {
                     _data.PlayerMess[targetId].PrivateMess.Add(playerId, new Dictionary<DateTime, string>());
                     _data.PlayerMess[targetId].PrivateMess[playerId].Add(DateTime.Now.ToUniversalTime(), "");
                     SaveData();
                 }
            }
        }

        private static bool CheckMessage(string message)
        {
            return !message.Contains("<") && !message.Contains("\\n") && message != "";
        }

        private void SendUpdateMessages(BasePlayer player, BasePlayer target,  int num)
        {
            switch (num)
            {
                    case 1:
                        foreach (var human in _activeGuiPrivate)
                        {
                            if (human.Key == target && human.Value == player)
                            {
                                DestroyGuiNoOne(target);
                                MessageList(target, player, 3);
                                return;
                            }
                        }
                        Msg(target, lang.GetMessage("PM_FROM", this, target.UserIDString), player.displayName);
                        return;
                    case 2:
                        foreach (var human in _activeGuiAdmin)
                        {
                            if (human.Value == player && human.Key != player)
                            {
                                DestroyGuiNoOne(human.Key);
                                MessageList(human.Key, target, 1);
                            }
                        }

                        foreach (var admins in BasePlayer.activePlayerList)
                        {
                            if (AllowAdmin(admins))
                            {
                                Msg(admins, lang.GetMessage("FOR_ADMIN", this, admins.UserIDString), player.displayName);
                                //Msg(admins, $"Игрок <color=#81b67a>{player.displayName}</color> написал новое обращение <color=#81b67a>АДМИНАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить");
                            }
                        }
                        return;
                    case 3:
                        foreach (var human in _activeGuiAdmin)
                        {
                            if (human.Key != target) continue;
                            DestroyGuiNoOne(target);
                            MessageList(target, target, 1);
                            return;
                        }
                        Msg(target, lang.GetMessage("FROM_ADMIN", this, target.UserIDString));
                        //Msg(target, $"Администратор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить");
                        return;
                    case 4:
                        foreach (var human in _activeGuiModer)
                        {
                            if (human.Value == player && human.Key != player)
                            {
                                DestroyGuiNoOne(human.Key);
                                MessageList(human.Key, target, 2);
                            }
                        }
                        foreach (var moders in BasePlayer.activePlayerList)
                        {
                            if (AllowModer(moders)) Msg(moders, lang.GetMessage("FOR_MODER", this, moders.UserIDString), player.displayName);
                            //Msg(moders, $"Игрок <color=#81b67a>{player.displayName}</color> написал новое обращение <color=#81b67a>МОДЕРАТОРАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить");
                        }
                        return;
                    case 5:
                        foreach (var human in _activeGuiModer)
                        {
                            if (human.Key != target) continue;
                            DestroyGuiNoOne(target);
                            MessageList(target, target, 2);
                            return;
                        }
                        Msg(target, lang.GetMessage("FROM_MODER", this, target.UserIDString));
                        //Msg(target, $"Модератор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить");
                    return;
                case 6:
                    foreach (var human in _activeGuiAdmin)
                    {
                        if (human.Value != target || human.Key == target) continue;
                        DestroyGuiNoOne(human.Key);
                        //Msg(human.Key, "Игрок <color=#81b67a>удалил</color> тикет");
                        Msg(human.Key, lang.GetMessage("TICKET_DELETE", this, human.Key.UserIDString));
                    }
                    return;
                case 7:
                    foreach (var human in _activeGuiModer)
                    {
                        if (human.Value != target || human.Key == target) continue;
                        DestroyGuiNoOne(human.Key);
                        //Msg(human.Key, "Игрок <color=#81b67a>удалил</color> тикет");
                        Msg(human.Key, lang.GetMessage("TICKET_DELETE", this, human.Key.UserIDString));
                    }
                    return;
                case 8:
                    foreach (var human in _activeGuiPrivate)
                    {
                        if (human.Key != target || human.Value != player) continue;
                        DestroyGuiNoOne(target);
                        CreateGui(target, player);
                        MessageList(target, player, 3);
                    }
                    return;
            }
        }
        
        #endregion
        
        #region Oxide
        
        private void Init()
        {
            permission.RegisterPermission(PermAdmin, this);
            permission.RegisterPermission(PermModer, this);
        }
        
        private void OnServerInitialized()
        {
            LoadData();
            LoadConfig();
            foreach (var player in BasePlayer.activePlayerList)
            {
                if (IsNpc(player)) continue;
                if (!_data.Players.ContainsValue(player.userID))
                    _data.Players.Add(player.displayName, player.userID);
                SaveData();
            }
            foreach (var player in BasePlayer.sleepingPlayerList)
            {
                if (player == null) continue;
                if (IsNpc(player)) continue;
                if (!_data.Players.ContainsValue(player.userID))
                    _data.Players.Add(player.displayName, player.userID);
                SaveData();
            }
        }
        
        private void OnPlayerDisconnected(BasePlayer player)
        {
            DestroyGuiAll(player);
            if (_activeGui.Contains(player)) _activeGui.Remove(player);
            if (_activeGuiModer.ContainsKey(player)) _activeGuiModer.Remove(player);
            if (_activeGuiAdmin.ContainsKey(player)) _activeGuiAdmin.Remove(player);
            if (_activeGuiPrivate.ContainsKey(player)) _activeGuiPrivate.Remove(player);
            if (_activeFind.Contains(player))_activeFind.Remove(player);
        }
        
        private void OnPlayerInit(BasePlayer player)
        {
            if (IsNpc(player)) return;
            if (!_data.Players.ContainsValue(player.userID)) _data.Players.Add(player.displayName, player.userID);
            SaveData();
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                DestroyGuiAll(player);
            }
        }

        #endregion

        #region API

        [HookMethod("SendPrivateMessage")]
        private void SendPrivateMessage(ulong playerId, ulong targetId, string msg)
        {
            var player = GetPlayer(playerId);
            var target = GetPlayer(targetId);
            CheckData(player.userID, target.userID);
            if (!CheckMessage(msg))
            {
                Msg(player, "Вы не можете отправлять <color=#81b67a>пустые</color> сообщения, или сообщения, содержащие знаки <color=#81b67a>'<'</color> и <color=#81b67a>'\\n'</color>");
                return;
            }
            _data.PlayerMess[player.userID].PrivateMess[target.userID].Add(DateTime.Now, ($"<b><color=#FFFFFF>  {player.displayName}</color></b> <size=10>({DateTime.Now})</size>\n" + msg));
            SaveData();
            foreach (var human in _activeGuiPrivate)
            {
                if (human.Key != target || human.Value != player) continue;
                DestroyGuiNoOne(target);
                CreateGui(target, player);
                MessageList(target, player, 3);
            }
            foreach (var human in _activeGuiPrivate)
            {
                if (human.Key != player || human.Value != target) continue;
                DestroyGuiNoOne(player);
                CreateGui(player, target);
                MessageList(player, target, 3);
            }
        }

        #endregion
        
        #region Data
        
        private PlayerMessage _data = new PlayerMessage();

        private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(Name, _data);

        private void LoadData()
        {
            try
            {
                _data = Interface.Oxide.DataFileSystem.ReadObject<PlayerMessage>(Name);
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_data == null) _data = new PlayerMessage();
        }

        #region PlayerMessage

        private class PlayerMessage
        {
            // ReSharper disable once CollectionNeverUpdated.Local
            public Dictionary<ulong, ChatMess> PlayerMess = new Dictionary<ulong, ChatMess>();
            public Dictionary<string, ulong> Players = new Dictionary<string, ulong>();
            //public Dictionary<ulong, SettingEntry> PlayersSetting = new Dictionary<ulong, SettingEntry>();
        }
        
        private class ChatMess
        {
            public int CountAdminMess;
            public int CountModerMess;
            public Dictionary<DateTime, string> ModerMess = new Dictionary<DateTime, string>();
            public Dictionary<DateTime, string> AdminMess = new Dictionary<DateTime, string>();
            public Dictionary<ulong, Dictionary<DateTime, string>> PrivateMess = new Dictionary<ulong, Dictionary<DateTime, string>>();
        }
        
//        private class SettingEntry
//        {
//            public int StatusMenu = 0;
//            public int Sound = 0;
//        }
        
        #endregion
        
        #endregion

        #region CUI Helper

        private class Ui
        {
            public static CuiElementContainer Container(string panelName, string color, string aMin, string aMax, float fadein = 0f, bool useCursor = false, string parent = "Overlay")
            {
                var newElement = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color, FadeIn = fadein},
                            RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                return newElement;
            }

            public static void Panel(ref CuiElementContainer container, string panel, string color, string aMin,
                string aMax, float fadein = 0f, bool cursor = false)
            {
                container.Add(new CuiPanel
                    {
                        Image = {Color = color, FadeIn = fadein/*, Sprite = "assets/content/ui/Noise.psd"*/},
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                        CursorEnabled = cursor
                    },
                    panel);
            }

            public static void Label(ref CuiElementContainer container, string panel, string text, string color,
                int size, string aMin, string aMax, float fadein = 0f, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                    {
                        Text =
                        {
                            FontSize = size,
                            Align = align,
                            Text = text,
                            Color = color,
                            Font = "robotocondensed-regular.ttf",
                            FadeIn = fadein
                        },
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax}
                    }, 
                    panel);
            }

            public static void Button(ref CuiElementContainer container, string panel, string color, string text, string color1, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiButton
                    {
                        Button = {Color = color, Command = command, FadeIn = 0f},
                        RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                        Text =
                        {
                            Text = text,
                            FontSize = size,
                            Align = align,
                            Color = color1,
                            Font = "robotocondensed-regular.ttf"
                        }
                    },
                    panel);
            }

            public static void Input(ref CuiElementContainer container, string panel, string color, string text,
                int size, string command, string aMin, string aMax)
            {
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiInputFieldComponent
                        {
                            Align = TextAnchor.MiddleLeft,
                            CharsLimit = 128,
                            Color = color,
                            Command = command + text,
                            FontSize = size,
                            IsPassword = false,
                            Text = text,
                            Font = "robotocondensed-bold.ttf"
                        },
                        new CuiOutlineComponent
                        {
                            Color = Ui.Color("#000000", 1f),
                            Distance = "0 0.1",
                            UseGraphicAlpha = false
                        },
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax}
                    },
                });
            }
            
            public static string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                    hexColor = hexColor.TrimStart('#');
                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double) red / 255} {(double) green / 255} {(double) blue / 255} {alpha}";
            }
        }
        #endregion
        
        #region Config
        private PluginConfig _config;
        private class PluginConfig
        {
            [JsonProperty("Префикс уведомлений")]
            public string Prefix { get; set; }
            
            [JsonProperty("Включить звуковое оповещение")]
            public bool EnableSound { get; set; }
            
            [JsonProperty("Звук оповещения")]
            public string Sound { get; set; }
        }
        
        protected override void LoadDefaultConfig()
        {
            PrintWarning("Хрум...!");
            _config = new PluginConfig()
            {
                Prefix = "<color=#81b67a>HAPPY RUST</color>",
                EnableSound = true,
                Sound = "assets/prefabs/npc/scientist/sound/chatter.prefab"
            };
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<PluginConfig>();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        #endregion
        
        #region Localisation
        
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["MSG_ERROR"] = "Вы не можете отправлять <color=#81b67a>пустые</color> сообщения, или сообщения, содержащие знаки <color=#81b67a>'<'</color> и <color=#81b67a>'\\n'</color>",
                ["TICKET_DELETE"] = "Тикет <color=#81b67a>удален</color> !",
                ["PM_FROM"] = "Игрок <color=#81b67a>{0}</color> прислал вам личное сообщение, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FOR_ADMIN"] = "Игрок <color=#81b67a>{0}</color> написал новое обращение <color=#81b67a>АДМИНАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FROM_ADMIN"] = "Администратор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FOR_MODER"] = "Игрок <color=#81b67a>{0}</color> написал новое обращение <color=#81b67a>МОДЕРАТОРАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FROM_MODER"] = "Модератор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить"
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["MSG_ERROR"] = "Вы не можете отправлять <color=#81b67a>пустые</color> сообщения, или сообщения, содержащие знаки <color=#81b67a>'<'</color> и <color=#81b67a>'\\n'</color>",
                ["TICKET_DELETE"] = "Тикет <color=#81b67a>удален</color> !",
                ["PM_FROM"] = "Игрок <color=#81b67a>{0}</color> прислал вам личное сообщение, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FOR_ADMIN"] = "Игрок <color=#81b67a>{0}</color> написал новое обращение <color=#81b67a>АДМИНАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FROM_ADMIN"] = "Администратор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FOR_MODER"] = "Игрок <color=#81b67a>{0}</color> написал новое обращение <color=#81b67a>МОДЕРАТОРАМ</color>, используйте <color=#81b67a>/cm</color>, чтобы ответить",
                ["FROM_MODER"] = "Модератор ответил на ваше обращение, используйте <color=#81b67a>/cm</color>, чтобы ответить"
            }, this, "ru");
        }
        #endregion
    }
}

// --- End of file: ChatMinus.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/EntityLimit.cs ---
// --- Original Local Path: EntityLimit.cs ---

using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("Entity Limit", "PaiN", 0.5, ResourceId = 1947)]
    class EntityLimit : RustPlugin
    {
        static EntityLimit Plugin;
        static Data data;
        static ConfigFile Cfg = new ConfigFile();

        class ConfigFile
        {
            public Dictionary<string, int> MaxLimits = new Dictionary<string, int>
            {
                ["wall.external.high.stone"] = 10,
                ["gates.external.high.stone"] = 2,
                ["gates.external.high.wood"] = 2
            };
        }

        class Data { public List<PlayerLimit> Limits = new List<PlayerLimit>(); }

        class PlayerLimit
        {
            public ulong Id;
            public List<Entities> limit;

            public static void Create(BasePlayer player, BaseEntity entity)
            {
                if (!data.Limits.Any(x => x.Id == player.userID))
                {
                    data.Limits.Add(new PlayerLimit()
                    {
                        Id = player.userID,
                        limit = new List<Entities>()
                        {
                            new Entities()
                            { Name = entity.ShortPrefabName, Count = 1}
                        }
                    });
                }
            }

            public static void Modify(BasePlayer player, BaseEntity entity)
            {
                if (data.Limits.Any(x => x.Id == player.userID))
                {
                    PlayerLimit info = data.Limits.Find(x => x.Id == player.userID) ?? null;
                    if (!info.limit.Any(x => x.Name == entity.ShortPrefabName))
                    {
                        info.limit.Add(new Entities()
                        { Count = 1, Name = entity.ShortPrefabName });

                    }
                    else
                    {
                        Entities playerEnt = info.limit.Find(x => x.Name == entity.ShortPrefabName) ?? null;
                        if (Cfg.MaxLimits.Any(x => x.Key == playerEnt.Name))
                        {
                            if (playerEnt.Count == Cfg.MaxLimits[playerEnt.Name])
                            {
                                player.ChatMessage(LangMsg("MAX_ENTITIES"));
                                var item = ItemManager.CreateByName(entity.ShortPrefabName.Replace("_", "."), 1);
                                player.inventory.GiveItem(item, player.inventory.containerBelt);
                                player.Command(string.Concat(new object[4]
                                {
                                    (object) "note.inv ",
                                    (object) item.info.itemid,
                                    (object) " ",
                                    (object) "1"
                                }));
                                entity.KillMessage();
                                return;
                            }
                            playerEnt.Count += 1;
                            Plugin.Puts(playerEnt.Count.ToString());
                            return;
                        }
                    }
                }
            }
        }

        class Entities
        {
            public string Name;
            public int Count;
        }

        void Loaded()
        {
            permission.RegisterPermission("entitylimit.admin", this);
            Cfg = Config.ReadObject<ConfigFile>();
            data = Interface.Oxide.DataFileSystem.ReadObject<Data>("EntityLimit");
            LoadMessages();
            Plugin = this;
        }

        void Unloaded()
        {
            SaveData();
        }
        void OnServerSave() => SaveData();

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file...");
            Config.WriteObject(Cfg, true);
        }

        void LoadMessages()
        {
            Dictionary<string, string> msg = new Dictionary<string, string>
            {
                ["NO_PERMISSION"] = "You do not have permission to use this command!",
                ["MAX_ENTITIES"] = "You have reached the max allowed placed amount of this entity!",
                //["CLAN_MAX_ENTITIES"] = "Your previous clan has already reached the max limit for this item!",
                ["REMOVED_LIMITS_PLAYER"] = "You have removed all the player limits of {0}",
                ["REMOVED_ALL_LIMITS"] = "You have remove all the saved limits",
                ["PLAYER_NOT_FOUND"] = "Player not found.",
                ["NOT_VALID_ENTITY"] = "This is not a valid entity!",
                ["CMD_WIPE_SYNTAX"] = "Syntax: /limitswipe <playerName/all>"
            };
            lang.RegisterMessages(msg, this);
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (entity == null) return;
            if (!entity is BaseEntity) return;

            BaseEntity ent = (BaseEntity)entity;
            BasePlayer player = BasePlayer.FindByID(ent.OwnerID);
            if (ent == null || player == null) return;

            if (Cfg.MaxLimits.Any(x => x.Key == entity.ShortPrefabName))
            {
                if (!data.Limits.Any(x => x.Id == player.userID))
                    PlayerLimit.Create(player, ent);
                else
                    PlayerLimit.Modify(player, ent);
            }
        }

        void OnEntityDeath(BaseCombatEntity entity, HitInfo hitInfo)
        {
            if (entity == null) return;
            EntityDestroyed(entity);
        }

        void OnRemovedEntity(BaseEntity entity)
        {
            if (entity == null) return;
            EntityDestroyed(entity);
        }

        void EntityDestroyed(BaseEntity entity)
        {
            if (entity == null) return;

            if (Cfg.MaxLimits.Any(x => x.Key == entity.ShortPrefabName))
            {
                PlayerLimit info = data.Limits.Find(x => x.Id == entity.OwnerID) ?? null;
                Entities PlayerEnts = info.limit.Find(x => x.Name == entity.ShortPrefabName) ?? null;

                if (info == null || PlayerEnts == null || PlayerEnts.Count == 0) return;

                PlayerEnts.Count -= 1;
            }
        }

        [ChatCommand("shortname")]
        void cmdShortName(BasePlayer player, string cmd, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "entitylimit.admin"))
            {
                player.ChatMessage(LangMsg("NO_PERMISSION", player.UserIDString));
                return;
            }

            RaycastHit hit;

            Physics.Raycast(player.eyes.HeadRay(), out hit, Mathf.Infinity);
            BaseEntity entity = hit.GetTransform()?.gameObject.ToBaseEntity();

            if (entity == null)
            {
                player.ChatMessage(LangMsg("NOT_VALID_ENTITY", player.UserIDString));
                return;
            }

            player.ChatMessage(string.Format("Shortname: {0}", entity.ShortPrefabName));
        }

        [ChatCommand("limitswipe")]
        void cmdWipe(BasePlayer player, string cmd, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, "entitylimit.admin"))
            {
                player.ChatMessage(LangMsg("NO_PERMISSION", player.UserIDString));
                return;
            }

            if (args.Length == 0)
            {
                player.ChatMessage(LangMsg("CMD_WIPE_SYNTAX", player.UserIDString));
                return;
            }

            if (args[0] == "all")
            {
                data.Limits.Clear();
                SaveData();
                player.ChatMessage(LangMsg("REMOVED_ALL_LIMITS", player.UserIDString));
            }
            else
            {
                BasePlayer target = BasePlayer.Find(args[0]);
                if (target == null)
                {
                    player.ChatMessage(LangMsg("PLAYER_NOT_FOUND", player.UserIDString));
                    return;
                }
                PlayerLimit info = data.Limits.Find(x => x.Id == target.userID);

                if (info == null)
                {
                    player.ChatMessage("This player doesn't have any saved entities");
                    return;
                }

                data.Limits.Remove(info);
                player.ChatMessage(string.Format(LangMsg("REMOVED_LIMITS_PLAYER", player.UserIDString), target.displayName));
                SaveData();
            }

        }

        static void SaveData() => Interface.Oxide.DataFileSystem.WriteObject("EntityLimit", data);
        static string LangMsg(string msg, string uid = null) => Plugin.lang.GetMessage(msg, Plugin, uid);
    }
}


// --- End of file: EntityLimit.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/IQHeadReward.cs ---
// --- Original Local Path: IQHeadReward.cs ---

using System;
using System.Collections.Generic;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using UnityEngine;
using Oxide.Game.Rust.Cui;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("IQHeadReward", "SkuliDropek", "1.0.9")]
    [Description("Reward your heads")]
    class IQHeadReward : RustPlugin
    {
        /// <summary>
        /// Обновление 1.0.х
        /// - Переписал метод проверки на кланы
        /// - Добавлена возможность включения и отключения маркера для игрока и ящика с наградой отдельно!
        /// - Убрал лог загрузки изображений в консоль от API
        /// </summary>

        #region Vars
        private const Boolean LanguageRu = true;

        public const String PermissionImmunitete = "iqheadreward.invise";
        public Dictionary<BaseEntity, CustomMapMarker> MapMarkers = new Dictionary<BaseEntity, CustomMapMarker>();
        static Double CurrentTime() => Facepunch.Math.Epoch.Current;
        public enum TypeReward
        {
            Item,
            Command,
            IQEconomics
        }
        public enum TypeTask
        {
            New,
            Retry
        }

        String PrefabStash = "assets/prefabs/deployable/small stash/small_stash_deployed.prefab";
        String PrefabBarricade = "assets/prefabs/deployable/door barricades/door_barricade_dbl_a.prefab";

        #endregion

        #region Reference
        [PluginReference] Plugin ImageLibrary, IQChat, IQEconomic, IQPlagueSkill, Friends, Clans, Battles, Duel, Duelist, IQRankSystem;

        #region ImageLibrary
        private String GetImage(String fileName, UInt64 skin = 0)
        {
            var imageId = (String)plugins.Find("ImageLibrary").CallHook("GetImage", fileName, skin);
            if (!string.IsNullOrEmpty(imageId))
                return imageId;
            return String.Empty;
        }
        public Boolean AddImage(String url, String shortname, UInt64 skin = 0) => (Boolean)ImageLibrary?.Call("AddImage", url, shortname, skin);
        public void SendImage(BasePlayer player, String imageName, UInt64 imageId = 0) => ImageLibrary?.Call("SendImage", player, imageName, imageId);
        public Boolean HasImage(String imageName) => (Boolean)ImageLibrary?.Call("HasImage", imageName);
        #endregion

        #region Friends, Clans , Duel
        public Boolean IsFriends(UInt64 userID, UInt64 targetID)
        {
            if (Friends)
                return (Boolean)Friends?.Call("HasFriend", userID, targetID);
            else return false;
        }
        private bool IsClans(String userID, String targetID)
        {
            if (Clans)
            {
                String TagUserID = (String)Clans?.Call("GetClanOf", userID);
                String TagTargetID = (String)Clans?.Call("GetClanOf", targetID);
                if (TagUserID == null && TagTargetID == null)
                    return false;
                return (bool)(TagUserID == TagTargetID);
            }
            else
                return false;
        }

        public Boolean IsDuel(UInt64 userID)
        {
            if (Battles)
                return (Boolean)Battles?.Call("IsPlayerOnBattle", userID);
            else if (Duel) return (Boolean)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
            else if (Duelist) return (Boolean)Duelist?.Call("inEvent", BasePlayer.FindByID(userID));
            else return false;
        }

        private Dictionary<UInt64, List<UInt64>> WantedTeams = new Dictionary<UInt64, List<UInt64>>();
        private Boolean IsTeamController(BasePlayer Wanted) => WantedTeams.ContainsKey(Wanted.Team.teamID) && config.Setting.AntiAbuse;
        private void TeamControllerAdd(BasePlayer Wanted)
        {
            if (Wanted == null && !config.Setting.AntiAbuse) return;
            RelationshipManager.PlayerTeam Team = Wanted.Team;
            if (Team == null) return;
            if (!IsTeamController(Wanted))
                WantedTeams.Add(Team.teamID, Team.members);
            else WantedTeams[Team.teamID] = WantedTeams[Team.teamID].Concat(Team.members).ToList();
        }
        private void TeamControllerRemove(BasePlayer Wanted)
        {
            if (Wanted == null || !config.Setting.AntiAbuse) return;
            RelationshipManager.PlayerTeam Team = Wanted.Team;
            if (IsTeamController(Wanted))
                WantedTeams.Remove(Team.teamID);
        }
        #endregion

        #region IQEconomics
        public String IQEcoMoney => (String)IQEconomic?.Call("API_GET_MONEY_IL");
        public void IQEconomicSetBalance(UInt64 userID, Int32 Balance) => IQEconomic?.Call("API_SET_BALANCE", userID, Balance);
        Int32 IQEconomicGetBalance(UInt64 userID) => IQEconomic == null ? 0 : (Int32)IQEconomic.Call("API_GET_BALANCE", userID);
        void IQEconomicRemoveBalance(UInt64 userID, Int32 Balance) => IQEconomic?.Call("API_REMOVE_BALANCE", userID, Balance);
        #endregion

        #region IQPlagueSkill
        public Boolean IQPlagueSkillUse(BasePlayer player) => (Boolean)IQPlagueSkill.Call("API_HEAD_REWARD_SKILL", player);
        #endregion

        #region IQChat
        public void SendChat(BasePlayer player, String Message, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            var Chat = config.Setting.ChatSetting;
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, Chat.CustomPrefix, Chat.CustomAvatar);
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        #endregion
        
        #region RaidBlocked
        public Boolean IsRaidBlocked(BasePlayer player)
        {
            var ret = Interface.Call("CanTeleport", player) as String;
            if (ret != null)
                return true;
            else return false;
        }
        #endregion

        #region IQRankSystem
        Boolean IsRank(UInt64 userID, String Key)
        {
            if (!IQRankSystem) return false;
            return (Boolean)IQRankSystem?.Call("API_GET_AVAILABILITY_RANK_USER", userID, Key);
        }
        String GetRankName(String Key)
        {
            String Rank = string.Empty;
            if (!IQRankSystem) return Rank;
            return (String)IQRankSystem?.Call("API_GET_RANK_NAME", Key);
        }
        #endregion

        #endregion

        #region Data
        private Dictionary<UInt64, HeadTask> PrePlayerHeads = new Dictionary<UInt64, HeadTask>();
        private Dictionary<UInt64, List<Configuration.Settings.ItemList>> DistributionPlayerReturned = new Dictionary<UInt64, List<Configuration.Settings.ItemList>>();
        [JsonProperty(LanguageRu ? "Задания на головы"  :  "Tasks for heads")]
        private List<HeadTask> PlayerHeads = new List<HeadTask>();
        public class HeadTask
        {
            public String WantedName;
            public UInt64 WantedID;
            public Double Cooldown;
            public Dictionary<UInt64, List<Configuration.Settings.ItemList>> RewardList;
            public Double CooldownItem;
        }
        void ReadData()
        {
            PlayerHeads = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<List<HeadTask>>("IQSystem/IQHeadReward/PlayerHeads");
            WantedTeams = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<UInt64, List<UInt64>>>("IQSystem/IQHeadReward/PlayersHeadsTeam");
            DistributionPlayerReturned = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<UInt64, List<Configuration.Settings.ItemList>>>("IQSystem/IQHeadReward/DistributionPlayerReturned");
        }
        void WriteData()
        {
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQHeadReward/PlayerHeads", PlayerHeads);
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQHeadReward/PlayersHeadsTeam", WantedTeams);
            Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("IQSystem/IQHeadReward/DistributionPlayerReturned", DistributionPlayerReturned);
        }

        #endregion

        #region Configuration

        private static Configuration config = new Configuration();

        public class Configuration
        {
            [JsonProperty("Настройка плагина | Settings plugin")]
            public Settings Setting = new Settings();

            internal class Settings
            {
                [JsonProperty("Настройки IQChat | Settings IQChat")]
                public ChatSettings ChatSetting = new ChatSettings();
                [JsonProperty("Настройки IQRankSystem | Settings IQRankSystem")]
                public IQRankSystem IQRankSystemSetting = new IQRankSystem();
                [JsonProperty("Настройки UI уведомления | Notification UI Settings")]
                public AlertUI AlertUISetting = new AlertUI();
                [JsonProperty("Настройка создания объявления за голову игроками | Setting up the creation of ads for the head of players")]
                public CustomCreated CustomCreatedSetting = new CustomCreated();
                [JsonProperty("Настройка метки на карте для игрока | Setting up a placemark on the map for the player")]
                public MapMark mapMark = new MapMark();

                internal class IQRankSystem
                {
                    [JsonProperty("Использовать IQRankSystem [true-да/false-нет] (При наличии ранга игрок сможет создавать объявления на голову игрока) | Use IQRankSystem [true-yes/false-no] (If there is a rank, the player will be able to create ads on the player's head)")]
                    public Boolean UseRank = false;
                    [JsonProperty("Впишите ключ ранга, который требуется для разблокировки возможности | Enter the rank key that is required to unlock the feature")]
                    public String Rank = "";
                }
                internal class MapMark
                {
                    [JsonProperty("Включить отображение игрока на G карте | Enable the display of the player on the G map")]
                    public Boolean UseMark;
                    [JsonProperty("Включить отображение ящиков с наградой для игрока на G карте | Enable display of reward boxes for the player on the G map")]
                    public Boolean UseMarkCrates;
                    [JsonProperty("Радиус отображения метки на карте | The radius of the placemark display on the map")]
                    public Single Radius;
                    [JsonProperty("Время обновления метки (В секундах) | Time to update the placemark (In seconds)")]
                    public Single RefreshRate;
                    [JsonProperty("Название метки (%NAME% - выведет имя игрока) | Marker name (%NAME% - displays the player's name)")]
                    public String DisplayName;
                    [JsonProperty("HEX цвет метки | HEX Marker color")]
                    public String Color;
                    [JsonProperty("HEX цвет обводки метки | HEX color of the marker outline")]
                    public String OutLineColor;
                }

                [JsonProperty("Включить внутреннюю защиту от попытки абуза со своей тимой | Enable internal protection against an attempt to abuse with your team")]
                public Boolean AntiAbuse;
                [JsonProperty("Автоматический поиск игроков(true - включен/false - отключен) | Automatic search for players(true-enabled/false-disabled)")]
                public Boolean TurnAutoFilling;
                [JsonProperty("Через сколько искать игроков для задания цели | After how long to search for players to set a goal")]
                public Int32 TimeFinding;
                [JsonProperty("Оповещать всех игроков о том,что появилась новая награда за голову(ture - да/false - нет) | Notify all players that a new head reward has appeared(ture-yes/false-no)")]
                public Boolean UseAlertHead;
                [JsonProperty("Максимальное количество наград за голову(Исходя из списка наград,будет выбираться рандомное количество) | The maximum number of awards per head(Based on the list of awards, a random number will be selected)")]
                public Int32 MaxReward;
                [JsonProperty("Настройка наград за голову(Рандомно будет выбираться N количество) | Setting up head rewards(N numbers will be randomly selected)")]
                public List<ItemList> itemLists;
                public class ItemList
                {
                    [JsonProperty("Тип награды(от этого зависит,что будут выдавать) : 0 - Предмет , 1 - Команда, 2 - IQEconomic | The type of reward (it depends on what will be given): 0-Item, 1-Command, 2-IQEconomic")]
                    public TypeReward TypeRewards;
                    [JsonProperty("Команда(%STEAMID% - замениться на ID игрока) | Command (%STEAMID% - change to player ID)")]
                    public String Command;
                    [JsonProperty("Отображаемое имя | Display name")]
                    public String DisplayName;
                    [JsonProperty("Shortname")]
                    public String Shortname;
                    [JsonProperty("SkinID")]
                    public UInt64 SkinID;
                    [JsonProperty("Минимальное количество | Minimal amount")]
                    public Int32 AmountMin;
                    [JsonProperty("Максимальное количество | Maximum amount")]
                    public Int32 AmountMax;
                    [JsonProperty("Настройки IQEconomic | Setting IQEconomic")]
                    public IQEconomics IQEconomic = new IQEconomics();
                    internal class IQEconomics
                    {
                        [JsonProperty("IQEconomic : Минимальный баланс | IQEconomic : Minimal balance")]
                        public Int32 MinBalance;
                        [JsonProperty("IQEconomic : Максимальный баланс | IQEconomic : Maximum balance")]
                        public Int32 MaxBalance;
                    }
                }
                internal class ChatSettings
                {
                    [JsonProperty("IQChat : Кастомный префикс в чате | IQChat : Custom prefix in the chat")]
                    public String CustomPrefix;
                    [JsonProperty("IQChat : Кастомный аватар в чате(Если требуется) | IQChat : Custom avatar in the chat(If required)")]
                    public String CustomAvatar;
                }
                internal class AlertUI
                {
                    [JsonProperty("Использовать UI уведомление о том,что за голову игрока назначена награда | Use the UI notification that a reward is assigned for the player's head")]
                    public Boolean UseAlertUI;
                    [JsonProperty("Возможность скрывать игрокам UI уведомление о том,что за голову назначена награда (по клику на уведомление) (true - да/false - нет) | The ability to hide the UI notification to players that a reward is assigned for the head (by clicking on the notification) (true-yes/false-no)")]
                    public Boolean UserCloseUI;
                    [JsonProperty("Ссылка на PNG | Link PNG (En Image - https://i.imgur.com/S4NxpUa.png)")]
                    public String PNG;
                    [JsonProperty("AnchorMin")]
                    public String AnchorMin;
                    [JsonProperty("AnchorMax")]
                    public String AnchorMax;
                    [JsonProperty("OffsetMin")]
                    public String OffsetMin;
                    [JsonProperty("OffsetMax")]
                    public String OffsetMax;
                }

                internal class CustomCreated
                {
                    [JsonProperty("Настройка возврата предметов при предсоздании награды за голову(не объявив ее) | Setting up the return of items when pre-creating a head reward(without declaring it)")]
                    public ReturnPreCreated ReturnCreated = new ReturnPreCreated();
                    [JsonProperty("Разрешить создавать игрокам использовать команду /ih во время рейдблока(true - да/false - нет) | Allow players to create and use the /ih command during a raid block(true-yes/false-no)")]
                    public Boolean UseCommandBlock = false;
                    [JsonProperty("Разрешить создавать игрокам награды за голову | Allow players to create rewards for their heads")]
                    public Boolean UseCustomReward = false;
                    [JsonProperty("Разрешить игрокам выбирать время из списка иначе будет устанавливаться из конфига по умолчанию | Allow players to choose the time from the list otherwise it will be set from the default config")]
                    public Boolean UseCutomTime = false;
                    [JsonProperty("Максимальное количество предметов в качестве награды от одного игрока | The maximum number of items as a reward from one player")]
                    public Int32 MaximumRewardCountUser = 10;
                    [JsonProperty("Настройки времени | Time Settings")]
                    public TimeSettings TimeSetting = new TimeSettings();

                    internal class ReturnPreCreated
                    {
                        [JsonProperty("Возвращать предметы игрокам через время, которые они вложили в предсоздания объявления (Не создав его до конца) | Return items to players after the time that they have invested in the pre-creation of the ad (Without creating it until the end)")]
                        public Boolean UseReturnTimer = true;
                        [JsonProperty("Время через которое будет возврат | The time after which the refund will be made")]
                        public Int32 Time = 60;
                    }
                    internal class TimeSettings
                    {
                        [JsonProperty("Время по умолчанию(секунды) | Default time(seconds)")]
                        public Int32 TimeDefault = 600;

                        [JsonProperty("Настраиваемый список для выбора времени игркоками | Customizable list for selecting the time of playcocks")]
                        public List<TimeCreatedMore> CustomTimeSettings = new List<TimeCreatedMore>();
                        internal class TimeCreatedMore
                        {
                            [JsonProperty("Использовать поддержку IQEconomic | Use IQEconomic support")]
                            public Boolean IQEconomic_CustomTime = false;
                            [JsonProperty("Время(секунды) | Time(seconds)")]
                            public Int32 Time = 0;
                            [JsonProperty("Цена за установку данного времени, должна быть поддержка IQEconomic | The price for the installation of this time, there must be support for IQEconomic")]
                            public Int32 IQEconomic_Balance = 0;
                        }
                    }
                }
            }

        public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    Setting = new Settings
                    {
                        TurnAutoFilling = true,
                        AntiAbuse = true,
                        TimeFinding = 600,
                        UseAlertHead = true,
                        MaxReward = 3,
                        IQRankSystemSetting = new Settings.IQRankSystem
                        {
                            Rank = "",
                            UseRank = false,
                        },
                        mapMark = new Settings.MapMark
                        {
                          Color = "#ff4948",
                          OutLineColor = "#333336",
                          DisplayName = "%NAME%",
                          Radius = 0.65f,
                          RefreshRate = 0.2f,
                          UseMark = true,
                          UseMarkCrates = true,
                        },
                        CustomCreatedSetting = new Settings.CustomCreated
                        {
                            UseCommandBlock = false,
                            UseCutomTime = true,
                            UseCustomReward = true,
                            MaximumRewardCountUser = 10,
                            ReturnCreated = new Settings.CustomCreated.ReturnPreCreated
                            {
                                Time = 60,
                                UseReturnTimer = true
                            },
                            TimeSetting = new Settings.CustomCreated.TimeSettings
                            {
                                TimeDefault = 600,
                                CustomTimeSettings = new List<Settings.CustomCreated.TimeSettings.TimeCreatedMore>
                                {
                                    new Settings.CustomCreated.TimeSettings.TimeCreatedMore
                                    {
                                        Time = 2500,
                                        IQEconomic_Balance = 230,
                                        IQEconomic_CustomTime = true,
                                    },
                                    new Settings.CustomCreated.TimeSettings.TimeCreatedMore
                                    {
                                        Time = 3000,
                                        IQEconomic_Balance = 250,
                                        IQEconomic_CustomTime = true,
                                    },
                                    new Settings.CustomCreated.TimeSettings.TimeCreatedMore
                                    {
                                        Time = 1000,
                                        IQEconomic_Balance = 250,
                                        IQEconomic_CustomTime = false,
                                    },
                                }
                            }
                        },
                        itemLists = new List<Settings.ItemList> 
                        {
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "Kalash",
                                Shortname = "rifle.ak",
                                AmountMin = 1,
                                AmountMax = 1,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "rifle.ak",
                                AmountMin = 1,
                                AmountMax = 1,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "wood",
                                AmountMin = 3000,
                                AmountMax = 6000,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "metal.fragments",
                                AmountMin = 100,
                                AmountMax = 2000,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "skull.human",
                                AmountMin = 1,
                                AmountMax = 10,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "scrap",
                                AmountMin = 111,
                                AmountMax = 2222,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "skull.wolf",
                                AmountMin = 1,
                                AmountMax = 15,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Item,
                                Command = "",
                                DisplayName = "",
                                Shortname = "sulfur",
                                AmountMin = 1333,
                                AmountMax = 1532,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                            new Settings.ItemList
                            {
                                TypeRewards = TypeReward.Command,
                                Command = "say %STEAMID%",
                                DisplayName = "",
                                Shortname = "",
                                AmountMin = 0,
                                AmountMax = 0,
                                SkinID = 0,
                                IQEconomic = new Settings.ItemList.IQEconomics
                                {
                                    MinBalance = 1,
                                    MaxBalance = 10
                                },
                            },
                        },
                        ChatSetting = new Settings.ChatSettings
                        {
                            CustomAvatar = "",
                            CustomPrefix = "[<color=#CC3226>IQHeadReward</color>]\n"
                        },
                        AlertUISetting = new Settings.AlertUI
                        {
                            UseAlertUI = true,
                            UserCloseUI = false,
                            PNG = "https://i.imgur.com/QVatu3D.png",
                            AnchorMin = "0 1",
                            AnchorMax = "0 1",
                            OffsetMin = "0 -68.056",
                            OffsetMax = "273.878 0"
                        },
                    },
                    
                };
            }
        }


        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Error #87" + $"configuration readings 'oxide/config/{Name}', creating a new configuration! #45");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        
        #endregion

        #region Metods

        private void FillingPlayer() 
        {
            BasePlayer RandomPlayer = BasePlayer.activePlayerList.Where(p => PlayerHeads.Count(x => p.userID == x.WantedID) == 0 && !p.IsDead() && !permission.UserHasPermission(p.UserIDString, PermissionImmunitete)).ToList().GetRandom();
            if (RandomPlayer == null) return;
            List<Configuration.Settings.ItemList> RewardList = config.Setting.itemLists;
            Int32 MaxReward = RewardList.Count <= config.Setting.MaxReward ? RewardList.Count : config.Setting.MaxReward;
            if (IQPlagueSkill && IQPlagueSkillUse(RandomPlayer)) return;

            HeadTask headTask = new HeadTask();
            headTask.Cooldown = config.Setting.CustomCreatedSetting.TimeSetting.TimeDefault;
            headTask.WantedID = RandomPlayer.userID;
            headTask.WantedName = RandomPlayer.displayName;
            UInt64 RandomID = UInt64.Parse(UnityEngine.Random.Range(0, 99999).ToString());
            if (headTask.RewardList == null)
                headTask.RewardList = new Dictionary<ulong, List<Configuration.Settings.ItemList>>();
                headTask.RewardList[RandomID] = GetRandomReward(RewardList, MaxReward);

            PlayerHeads.Add(headTask);

            if (config.Setting.UseAlertHead)
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                    SendChat(player, GetLang("NEW_HEAD", player.UserIDString, RandomPlayer.displayName));
            if (config.Setting.AlertUISetting.UseAlertUI)
                AlertUI(RandomPlayer);

            PlayerHeadAlert(RandomPlayer.userID, TypeTask.New);
            TeamControllerAdd(RandomPlayer);
            NextTick(() => { CreateMarker(RandomPlayer); });
        }

        #region Spawn Position Reward
        private int maxTry = 250000;

        private List<Vector3>[] patternPositionsAboveWater = new List<Vector3>[5];
        private List<Vector3>[] patternPositionsUnderWater = new List<Vector3>[5];
        private List<Vector3> busyPoints3D = new List<Vector3>();

        private readonly Quaternion[] directions =
        {
            Quaternion.Euler(90, 0, 0),
            Quaternion.Euler(0, 0, 90),
            Quaternion.Euler(0, 0, 180)
        };

        private void FillPatterns()
        {
            Vector3[] startPositions = { new Vector3(1, 0, 1), new Vector3(-1, 0, 1), new Vector3(-1, 0, -1), new Vector3(1, 0, -1) };

            patternPositionsAboveWater[0] = new List<Vector3> { new Vector3(0, -0.6f, 0) };
            for (int loop = 1; loop < 5; loop++)
            {
                patternPositionsAboveWater[loop] = new List<Vector3>();

                for (int step = 0; step < loop * 2; step++)
                {
                    for (int pos = 0; pos < 4; pos++)
                    {
                        Vector3 sPos = startPositions[pos] * step;
                        for (int rot = 0; rot < 3; rot++)
                        {
                            Vector3 rPos = directions[rot] * sPos;
                            rPos.y = -0.6f;
                            patternPositionsAboveWater[loop].Add(rPos);
                        }
                    }
                }
            }

            for (int i = 0; i < patternPositionsAboveWater.Length; i++)
            {
                patternPositionsUnderWater[i] = new List<Vector3>();
                foreach (var vPos in patternPositionsAboveWater[i])
                {
                    var rPos = new Vector3(vPos.x, -0.6f, vPos.z);
                    patternPositionsUnderWater[i].Add(rPos);
                }
            }
        }
        public bool IsFlat(ref Vector3 position)
        {
            List<Vector3>[] AboveWater = new List<Vector3>[5];

            Array.Copy(patternPositionsAboveWater, AboveWater, patternPositionsAboveWater.Length);

            for (int i = 0; i < AboveWater.Length; i++)
            {
                for (int j = 0; j < AboveWater[i].Count; j++)
                {
                    Vector3 pPos = AboveWater[i][j];
                    Vector3 resultAbovePos = new Vector3(pPos.x + position.x, position.y + 0.6f, pPos.z + position.z);
                    Vector3 resultUnderPos = new Vector3(pPos.x + position.x, position.y - 0.6f, pPos.z + position.z);

                    if (resultAbovePos.y >= TerrainMeta.HeightMap.GetHeight(resultAbovePos) && resultUnderPos.y <= TerrainMeta.HeightMap.GetHeight(resultUnderPos))
                    {
                    }
                    else
                        return false;
                }
            }

            return true;
        }

        public bool IsDistancePoint(Vector3 point)
        {
            bool result = busyPoints3D.Count(x => Vector3.Distance(point, x) < 20f) == 0;
            return result;
        }
        private void GenerateSpawnPoints()
        {
            for (int i = 0; i < 100; i++)
            {
                maxTry -= 1;
                Vector3 point3D = new Vector3();
                Vector2 point2D = new Vector3(UnityEngine.Random.Range(-TerrainMeta.Size.x / 2, TerrainMeta.Size.x / 2), UnityEngine.Random.Range(-TerrainMeta.Size.z / 2, TerrainMeta.Size.z / 2));

                point3D.x = point2D.x;
                point3D.z = point2D.y;
                point3D.y = TerrainMeta.HeightMap.GetHeight(point3D);

                if (!IsFlat(ref point3D))
                    continue;

                if (!Is3DPointValid(ref point3D))
                    continue;

                if (!IsDistancePoint(point3D))
                    continue;

                if (point3D != Vector3.zero)
                {
                    AcceptValue(ref point3D);
                }
            }
            if (maxTry > 0)
            {
                NextTick(() =>
                {
                    GenerateSpawnPoints();
                });
            }
            else
            {
                PrintWarning(LanguageRu ? $"{busyPoints3D.Count} точек сгенерированно!"  :  $"{busyPoints3D.Count} points generated!");
                maxTry = 250000;
            }
        }
        private bool Is3DPointValid(ref Vector3 point)
        {
            List<BuildingPrivlidge> cupboards = new List<BuildingPrivlidge>();
            Vis.Entities(point, 5, cupboards);
            if (UnityEngine.Physics.CheckSphere(point, 5, LayerMask.GetMask("Construction", "Default", "Deployed", "World", "Trigger", "Prevent Building")) || cupboards.Count > 0 || point.y < ConVar.Env.oceanlevel + 4f)
            {
                return false;
            }
            return true;
        }

        private void AcceptValue(ref Vector3 point)
        {
            busyPoints3D.Add(point);
        }

        #endregion

        #region Spawn Reward

        private void RewardCreated(List<Configuration.Settings.ItemList> Rewards, BasePlayer Killer)
        {
            if (busyPoints3D == null) return;

            foreach (Configuration.Settings.ItemList Reward in Rewards.Where(c => c.TypeRewards != TypeReward.Item))
            {
                switch (Reward.TypeRewards)
                {
                    case TypeReward.Command:
                        {
                            rust.RunServerCommand(Reward.Command.Replace("%STEAMID%", Killer.UserIDString));
                            break;
                        }
                    case TypeReward.IQEconomics:
                        {
                            IQEconomicSetBalance(Killer.userID, UnityEngine.Random.Range(Reward.IQEconomic.MinBalance, Reward.IQEconomic.MaxBalance));
                            break;
                        }
                }
            }

            Double CrateCount = Math.Ceiling((Double)Rewards.Count(c => c.TypeRewards == TypeReward.Item) / (Double)6);
            for (Int32 Count = 0; Count < CrateCount; Count++)
            {
                Double SkipCount = (Double)Count * 6;

                Vector3 RandomPosition = busyPoints3D.GetRandom();
                CreatedCrate(Rewards.Where(c => c.TypeRewards == TypeReward.Item).Skip((Int32)SkipCount).ToList(), RandomPosition, Killer);
            }

            String CrateMessage = String.Empty;
            if (CrateCount != 0)
                CrateMessage = GetLang("CHAT_ALERT_KILLED_REWARD_ITEM", Killer.UserIDString, CrateCount);

            String OtherMessage = String.Empty;
            if(Rewards.Count(c => c.TypeRewards != TypeReward.Item) != 0)
                OtherMessage = GetLang("CHAT_ALERT_KILLED_REWARD_OTHER", Killer.UserIDString, Rewards.Count(c => c.TypeRewards != TypeReward.Item));

            String AllReward = $"{CrateMessage}\n{OtherMessage}";

            String Message = GetLang("CHAT_ALERT_KILLED_REWARD_PLAYER", Killer.UserIDString, AllReward);
            SendChat(Killer, Message);
        }

        private void CreatedCrate(List<Configuration.Settings.ItemList> Rewards, Vector3 Position, BasePlayer Killer)
        {
            Vector3 SpawnPos = new Vector3 { x = Position.x, y = TerrainMeta.HeightMap.GetHeight(Position), z = Position.z };

            StashContainer Container = (StashContainer)GameManager.server.CreateEntity(PrefabStash, SpawnPos);
            Container.Spawn();

            for (Int32 Item = 0; Item < Rewards.Count; Item++)
            {
                Configuration.Settings.ItemList Reward = Rewards[Item];

                Item ItemCreated = CreatedItem(Reward);
                ItemCreated.MoveToContainer(Container.inventory);
            }

            BaseEntity Barricade = (BaseEntity)GameManager.server.CreateEntity(PrefabBarricade, new Vector3(SpawnPos.x, SpawnPos.y - 0.14f, SpawnPos.z - 1), Quaternion.Euler(new Vector3(90, 0, 0)));
            Barricade.Spawn();

            Container.SetFlag(BaseEntity.Flags.Reserved5, true, true);
            Container.CancelInvoke(Container.Decay);

            CreateMarker(Barricade, Killer);
        }

        private Item CreatedItem(Configuration.Settings.ItemList Reward)
        {
            Item CreateItem = ItemManager.CreateByName(Reward.Shortname, UnityEngine.Random.Range(Reward.AmountMin, Reward.AmountMax), Reward.SkinID);
            if (!String.IsNullOrWhiteSpace(Reward.DisplayName))
                CreateItem.name = Reward.DisplayName;

            return CreateItem;
        }

        #endregion

        private void CheckHeadItemsCooldown()
        {
            if (PrePlayerHeads.Count == 0) return;

            foreach(var Task in PrePlayerHeads)
            {
                if (!Task.Value.RewardList.ContainsKey(Task.Key) || Task.Value.RewardList[Task.Key].Count == 0) continue;
                if(!IsCooldown(Task.Value.CooldownItem))
                {
                    DistributionReturnedItems(Task.Value, true);

                    BasePlayer OwnerPlayer = BasePlayer.FindByID(Task.Key);
                    if (OwnerPlayer == null) return;
                    ReturnedItems(OwnerPlayer, true);
                    NextTick(() => { PrePlayerHeads.Remove(Task.Key); });
                }
            }
        }
        private void CheckHeadsCooldown()
        {
            if (PlayerHeads.Count == 0) return;
               
            for(Int32 HeadCount = 0; HeadCount < PlayerHeads.Count; HeadCount++)
            {
                HeadTask Task = PlayerHeads[HeadCount];
                if(!IsCooldown(Task))
                {
                    foreach (BasePlayer player in BasePlayer.allPlayerList)
                        SendChat(player, GetLang("CHAT_ALERT_COOLDOWNS_FALSE", player.UserIDString, Task.WantedName));
                    DistributionReturnedItems(Task);
                    PlayerHeads.Remove(Task);

                    BasePlayer Wanted = BasePlayer.FindByID(Task.WantedID);
                    if (Wanted != null)
                    {
                        CuiHelper.DestroyUi(Wanted, ALERT_UI);

                        if (MapMarkers.ContainsKey(Wanted))
                            UnityEngine.Object.Destroy(MapMarkers[Wanted]);
                    }
                }
            }
        }

        private Boolean IsCooldown(HeadTask Task) => (Task.Cooldown - CurrentTime()) > 0;
        private Boolean IsCooldown(Double Cooldown) => (Cooldown - CurrentTime()) > 0;
        #endregion

        #region Returned Item

        private void DistributionReturnedItems(HeadTask Task, Boolean IsPreCreated = false)
        {
            foreach (KeyValuePair<UInt64, List<Configuration.Settings.ItemList>> Rewards in Task.RewardList.Where(Rewards => !DistributionPlayerReturned.ContainsKey(Rewards.Key)))
            {
                DistributionPlayerReturned.Add(Rewards.Key, Rewards.Value);

                BasePlayer player = BasePlayer.FindByID(Rewards.Key);
                if (player != null)
                {
                    SendChat(player, GetLang(!IsPreCreated ? "CHAT_ALERT_RETURNED_ITEMS" : "CHAT_ALERT_RETURNED_ITEMS_COOLDOWN_PRE_CREATED", player.UserIDString));
                }
            }
        }

        private void ReturnedItems(BasePlayer player, Boolean IsPreCreated = false)
        {
            if (player == null || !DistributionPlayerReturned.ContainsKey(player.userID)) return;

            foreach(Configuration.Settings.ItemList Item in DistributionPlayerReturned[player.userID])
            {
                Item ItemReturned = CreatedItem(Item);
                player.GiveItem(ItemReturned, BaseEntity.GiveItemReason.Generic);
            }

            DistributionPlayerReturned.Remove(player.userID);
            CuiHelper.DestroyUi(player, "IQHEADREWARD_PANEL");

            if (!IsPreCreated)
                SendChat(player, GetLang("CHAT_ALERT_RETURNED_ITEMS_FINISH", player.UserIDString));
        }

        #endregion

        #region Killed Task

        private void KilledTask(BasePlayer Killer, BasePlayer Wanted)
        {
            if (!PlayerHeads.Exists(h => h.WantedID == Wanted.userID)) return;

            HeadTask Task = PlayerHeads.First(h => h.WantedID == Wanted.userID);
            RewardCreated(Task.RewardList.SelectMany(x => x.Value).ToList(), Killer);

            PlayerHeads.Remove(Task);
            CuiHelper.DestroyUi(Wanted, ALERT_UI);

            if (MapMarkers.ContainsKey(Wanted))
                UnityEngine.Object.Destroy(MapMarkers[Wanted]);
            Interface.Oxide.CallHook("KilledTask", Killer, Wanted);
        }

        #endregion

        #region Created Task

        private void CreatedTask(BasePlayer player)
        {
            if (player == null) return;
            if (!PrePlayerHeads.ContainsKey(player.userID)) return;

            HeadTask Task = PrePlayerHeads[player.userID];
            if (!PlayerHeads.Exists(x => x.WantedID == Task.WantedID))
            {
                PlayerHeadAlert(Task.WantedID, TypeTask.New);
                SendChat(player, GetLang("CHAT_CREATED_TASK_RESULT", player.UserIDString, FormatTime(TimeSpan.FromSeconds(Task.Cooldown), player.UserIDString)));
                Task.Cooldown += CurrentTime();
                PlayerHeads.Add(Task);
                Interface.Oxide.CallHook("TaskCreated", player, Task.WantedID);
            }
            else
            {
                HeadTask ExistsTask = PlayerHeads.FirstOrDefault(x => x.WantedID == Task.WantedID);
                if (ExistsTask == null)
                {
                    PlayerHeadAlert(Task.WantedID, TypeTask.New);
                    SendChat(player, GetLang("CHAT_CREATED_TASK_RESULT", player.UserIDString, FormatTime(TimeSpan.FromSeconds(Task.Cooldown), player.UserIDString)));
                    Task.Cooldown += CurrentTime();
                    PlayerHeads.Add(Task);
                    Interface.Oxide.CallHook("TaskCreated", player, Task.WantedID);
                }
                else
                {
                    if (ExistsTask.RewardList.ContainsKey(player.userID))
                        ExistsTask.RewardList[player.userID] = ExistsTask.RewardList[player.userID].Concat(Task.RewardList[player.userID]).ToList();
                    else
                        ExistsTask.RewardList.Add(player.userID, Task.RewardList[player.userID]);

                    var Time = config.Setting.CustomCreatedSetting.TimeSetting.CustomTimeSettings.FirstOrDefault(t => t.Time == Task.Cooldown);
                    if (Time != null && Time.IQEconomic_CustomTime)
                    {
                        IQEconomicRemoveBalance(player.userID, Time.IQEconomic_Balance);
                        ExistsTask.Cooldown += Time.Time;
                        SendChat(player, GetLang("CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD_PLUS_TIME", player.UserIDString, FormatTime(TimeSpan.FromSeconds(ExistsTask.Cooldown - CurrentTime()), player.UserIDString)));
                    }
                    else
                        SendChat(player, GetLang("CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD", player.UserIDString));

                    PlayerHeadAlert(Task.WantedID, TypeTask.Retry);
                    Interface.Oxide.CallHook("UpdateTask", player, Task.WantedID);
                }
            }

            BasePlayer Wanted =  BasePlayer.FindByID(Task.WantedID);

                if (Wanted != null)
                    CreateMarker(Wanted);
                else CreateMarker(BasePlayer.allPlayerList.First(b => b.userID == Task.WantedID));

            CuiHelper.DestroyUi(player, "IQHEADREWARD_PANEL");
            PrePlayerHeads.Remove(player.userID);

            if (Wanted != null)
            {
                TeamControllerAdd(Wanted);
                AlertUI(Wanted);

                if (config.Setting.UseAlertHead)
                    foreach (BasePlayer allP in BasePlayer.activePlayerList)
                        SendChat(allP, GetLang("NEW_HEAD", allP.UserIDString, Wanted.displayName));
            }
        }

        private void PlayerHeadAlert(UInt64 WantedID, TypeTask typeTask)
        {
            BasePlayer wanted = BasePlayer.FindByID(WantedID);
            if (wanted == null) return;

            switch(typeTask)
            {
                case TypeTask.New:
                    {
                        if (config.Setting.AlertUISetting.UseAlertUI)
                            AlertUI(wanted);

                        SendChat(wanted, GetLang("CHAT_ALERT_TASK_PLAYER", wanted.UserIDString));
                        break;
                    }
                case TypeTask.Retry:
                    {
                        SendChat(wanted, GetLang("CHAT_ALERT_TASK_PLAYER_RETRY", wanted.UserIDString));
                        break;
                    }
            }
        }

        #endregion

        #region Metods Items

        private enum TypeCreatedTask
        {
            TakePlayer,
            TakeItem,
            TakeTime
        }

        private void LocalCreatedTask(TypeCreatedTask TypeCreatedTask, UInt64 OwnerID, Item ItemTake = null, Int32 Amount = 0, UInt64 WantedID = 0, Int32 Cooldown = 0)
        {
            BasePlayer player = BasePlayer.FindByID(OwnerID);
            if (player == null) return;

            if (!PrePlayerHeads.ContainsKey(OwnerID))
                PrePlayerHeads.Add(OwnerID, new HeadTask { Cooldown = 0, WantedID = 0,  RewardList = new Dictionary<ulong, List<Configuration.Settings.ItemList>> { } });

            var Data = PrePlayerHeads[OwnerID];

            if (!Data.RewardList.ContainsKey(OwnerID))
                Data.RewardList.Add(OwnerID, new List<Configuration.Settings.ItemList> { });

            if (Cooldown != 0 && Data.Cooldown == 0)
                Data.Cooldown = Cooldown;

            switch (TypeCreatedTask)
            {
                case TypeCreatedTask.TakePlayer:
                    {
                        Data.WantedID = WantedID;
                        BasePlayer Wanted = BasePlayer.FindByID(WantedID);
                        if (Wanted != null)
                            Data.WantedName = Wanted.displayName;
                        Take_Reward_Items(player);
                        break;
                    }
                case TypeCreatedTask.TakeItem:
                    {
                        if (Amount <= 0 || Amount > ItemTake.amount) return;
                        Data.RewardList[OwnerID].Add(new Configuration.Settings.ItemList
                        {
                            DisplayName = ItemTake.name,
                            AmountMin = Amount,
                            AmountMax = Amount,
                            Command = String.Empty,
                            IQEconomic = new Configuration.Settings.ItemList.IQEconomics
                            {
                                MaxBalance = 0,
                                MinBalance = 0,
                            },
                            Shortname = ItemTake.info.shortname,
                            SkinID = ItemTake.skin,
                            TypeRewards = TypeReward.Item,
                        });

                        player.inventory.Take(null, ItemTake.info.itemid, Amount);
                        Take_Reward_Items(player);
                        if (config.Setting.CustomCreatedSetting.ReturnCreated.UseReturnTimer)
                            Data.CooldownItem = config.Setting.CustomCreatedSetting.ReturnCreated.Time;
                        break;
                    }
                case TypeCreatedTask.TakeTime:
                    {
                        Data.Cooldown = Cooldown;
                        break;
                    }
            }
            Update_Task(player);
        }

        private void LocalTaskRemoveItem(BasePlayer player, Item ItemTake)
        {
            var Data = PrePlayerHeads[player.userID];
            var DataItem = Data.RewardList[player.userID].FirstOrDefault(x => x.Shortname == ItemTake.info.shortname && x.SkinID == ItemTake.skin && x.AmountMax == ItemTake.amount);
            if (DataItem == null) return;
            Data.RewardList[player.userID].Remove(DataItem);
            player.GiveItem(ItemTake, BaseEntity.GiveItemReason.Generic);
            Take_Reward_Items(player);
            Update_Task(player);
        }

        #endregion

        #region Metods ReHead
       
        private void ReheadPlayer(BasePlayer player, UInt64 WantedID)
        {
            HeadTask ActiveTask = PlayerHeads.FirstOrDefault(h => h.WantedID == WantedID);
            if (ActiveTask == null) return;

            Created_Head_Task(player, true);
            LocalCreatedTask(TypeCreatedTask.TakePlayer, player.userID, WantedID: WantedID);
            Take_Reward_Items(player);
        }

        #endregion

        #region Utilites

        private IEnumerator DownloadImages()
        {
            foreach (ItemDefinition Item in ItemManager.itemList)
            {
                String Shortname = Item.shortname;
                if (Shortname == "rhib" || Shortname == "vehicle.chassis" || Shortname == "vehicle.module") continue;
                String PngKey = $"{Shortname}_64px";
               
                if (!HasImage(PngKey))
                    AddImage($"http://api.skyplugins.ru/api/getimage/{Shortname}/64", PngKey);
            }
            yield return new WaitForSeconds(0.04f);
        }

        void LoadedImage()
        {
            if (!HasImage($"WANTED"))
                AddImage("https://i.imgur.com/5vfDpgD.png", "WANTED");
            if (!HasImage($"WANTED_ITEMS"))
                AddImage("https://i.imgur.com/D3Uv9T7.png", "WANTED_ITEMS");    

            if (config.Setting.AlertUISetting.UseAlertUI)
                if (!HasImage($"ALERT_UI_{config.Setting.AlertUISetting.PNG}"))
                    AddImage(config.Setting.AlertUISetting.PNG, $"ALERT_UI_{config.Setting.AlertUISetting.PNG}");

            ServerMgr.Instance.StartCoroutine(DownloadImages());
        }
        void CahedImages(BasePlayer player)
        {
            SendImage(player, $"WANTED");
            SendImage(player, $"WANTED_ITEMS");

            if (config.Setting.AlertUISetting.UseAlertUI)
                SendImage(player, $"ALERT_UI_{config.Setting.AlertUISetting.PNG}");
        }

        List<Configuration.Settings.ItemList> GetRandomReward(List<Configuration.Settings.ItemList> RewardList, Int32 CountReward)
        {
            List<Configuration.Settings.ItemList> Rewards = RewardList.OrderBy(s => UnityEngine.Random.value).Take(CountReward).ToList();
            return Rewards;
        }
        private Single GetPercentStatus(BasePlayer player, HeadTask Data)
        {
            Boolean TimeCutom = config.Setting.CustomCreatedSetting.UseCutomTime;
            Single ResultPercent = 0f;

            if (Data.WantedID != 0)
                ResultPercent += TimeCutom ? 0.2f : 0.5f;

            if (Data.RewardList.ContainsKey(player.userID) && Data.RewardList[player.userID].Count != 0)
                ResultPercent += TimeCutom ? 0.3f : 0.5f;

            if (TimeCutom && Data.Cooldown != 0)
                ResultPercent += 0.5f;

            return ResultPercent;
        }

        public String FormatTime(TimeSpan time, String UserID)
        {
            String Result = String.Empty;
            String Days = GetLang("TITLE_FORMAT_DAYS", UserID);
            String Hourse = GetLang("TITLE_FORMAT_HOURSE", UserID);
            String Minutes = GetLang("TITLE_FORMAT_MINUTES", UserID);
            String Seconds = GetLang("TITLE_FORMAT_SECONDS", UserID);

            if (time.Seconds != 0)
                Result = $"{Format(time.Seconds, Seconds, Seconds, Seconds)}";

            if (time.Minutes != 0)
                Result = $"{Format(time.Minutes, Minutes, Minutes, Minutes)}";

            if (time.Hours != 0)
                Result = $"{Format(time.Hours, Hourse, Hourse, Hourse)}";

            if (time.Days != 0)
                Result = $"{Format(time.Days, Days, Days, Days)}";

            return Result;
        }

        private String Format(Int32 units, String form1, String form2, String form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units}{form1}";

            if (tmp >= 2 && tmp <= 4)
                return $"{units}{form2}";

            return $"{units}{form3}";
        }

        #endregion

        #region Hooks
        private void Init() => ReadData();
        private void OnServerInitialized()
        {
            LoadedImage();

            if (config.Setting.TurnAutoFilling)
                timer.Every(config.Setting.TimeFinding, () =>
                {
                    CheckHeadsCooldown();

                    if (PlayerHeads.Count < 3)
                        FillingPlayer();
                });
            if (config.Setting.CustomCreatedSetting.ReturnCreated.UseReturnTimer)
                timer.Every(config.Setting.CustomCreatedSetting.ReturnCreated.Time, () => { CheckHeadItemsCooldown(); });

            foreach (BasePlayer p in BasePlayer.activePlayerList)
                OnPlayerConnected(p);

            if (!permission.PermissionExists(PermissionImmunitete, this))
                permission.RegisterPermission(PermissionImmunitete, this);
            FillPatterns();
            NextTick(() =>
            {
                GenerateSpawnPoints();
            });

            foreach (HeadTask headTask in PlayerHeads)
            {
                BasePlayer Wanted = BasePlayer.allPlayerList.FirstOrDefault(b => b.userID == headTask.WantedID);
                if (Wanted != null)
                    CreateMarker(Wanted);
            }
        }


        void OnPlayerConnected(BasePlayer player)
        {
            if (PlayerHeads.Exists(p => p.WantedID == player.userID))
            {
                AlertUI(player);
                NextTick(() => { CreateMarker(player); });
            }

            CahedImages(player);
        }

        void OnPlayerDeath(BasePlayer Wanted, HitInfo info)
        {
            if (Wanted == null || info == null || Wanted.userID < 2147483647) return;
            BasePlayer Killer = info.InitiatorPlayer;
            if (Killer == null || Wanted.userID == Killer.userID) return;
            KilledTask(Killer, Wanted);
        }

        void Unload()
        {
            foreach(var p in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(p, ALERT_UI);
                CuiHelper.DestroyUi(p, "IQHEADREWARD_PLAYER_PANEL");
                CuiHelper.DestroyUi(p, "IQHEADREWARD_PANEL");
            }
            WriteData();

            RemoveMarkers();

            ServerMgr.Instance.StopCoroutine(DownloadImages());
        }
        #endregion

        #region Command
        [ChatCommand("ih")]
        void ChatCommandHeads(BasePlayer player) => UI_Interface(player);   

        [ChatCommand("ir")]
        void ChatCommandReturned(BasePlayer player) => ReturnedItems(player);

        [ConsoleCommand("ih")]
        void ConsoleCommandHeads(ConsoleSystem.Arg args)
        {
            BasePlayer player = args.Player();
            if (player == null) return;

            String Action = args.Args[0]; 
            switch(Action)
            {
                case "created.open.menu": 
                    {
                        Created_Head_Task(player);
                        Take_Reward_Items(player);
                        break;
                    }
                case "rehead.task": 
                    {
                        UInt64 WantedID = UInt64.Parse(args.Args[1]);
                        ReheadPlayer(player, WantedID);
                        break;
                    }
                case "player.panel":
                    {
                        switch (args.Args[1])
                        {
                            case "head.show.itemlist":
                                {
                                    String AnchorMin = args.Args[2];
                                    String AnchorMax = args.Args[3];
                                    Int32 CountUI;
                                    if (!Int32.TryParse(args.Args[4], out CountUI)) return;
                                    List<Configuration.Settings.ItemList> ItemList = PlayerHeads[CountUI].RewardList.SelectMany(x => x.Value).ToList();
                                    if (ItemList == null) return;

                                    ShowItemsPlayerPanelMore(player, AnchorMin, AnchorMax, CountUI, ItemList);
                                    break;
                                }
                            case "head.show.itemlist.return": 
                                {
                                    String AnchorMin = args.Args[2];
                                    String AnchorMax = args.Args[3];
                                    Int32 CountUI;
                                    if (!Int32.TryParse(args.Args[4], out CountUI)) return;
                                    HeadTask Heads = PlayerHeads[CountUI];
                                    if (Heads == null) return;

                                    CuiElementContainer container = new CuiElementContainer();
                                    ShowPlayerPanel(player, container, CountUI, Heads, AnchorMin.Replace("'", ""), AnchorMax.Replace("'", ""));
                                    CuiHelper.AddUi(player, container);
                                    break;
                                }
                        }
                        break;
                    }
                case "input.drop":
                    {
                        Int32 AmountItem = Int32.Parse(args.Args[1]);
                        String Shortname = args.Args[2];
                        UInt64 SkinID = UInt64.Parse(args.Args[3]);
                        Item Item = player.inventory.AllItems().FirstOrDefault(i => i.skin == SkinID && i.info.shortname == Shortname);
                        if (Item == null) return;

                        Show_Amount_Drop_Input(player, Item);
                        break;
                    }
                case "update.task": 
                    {
                        Update_Task(player);
                        break;
                    }
                case "created.task": 
                    {
                        String ActionCreated = args.Args[1];
                        switch(ActionCreated)
                        {
                            case "search.player.task.open":
                                {
                                    Search_Player_Tasked(player);
                                    break;
                                }
                            case "search.player.task.confirm.open":
                                {
                                    if (args.Args.Length != 3) return;
                                    String NickOrID = args.Args[2];
                                    if (String.IsNullOrWhiteSpace(NickOrID)) return;
                                    BasePlayer TaskPlayer = BasePlayer.Find(NickOrID);
                                    if (TaskPlayer == null) return;
                                    if (TaskPlayer == player) return;
                                    Show_Confirm_Player_Tasked(player, TaskPlayer);
                                    break;
                                }
                            case "search.player.task.confirm.yes": 
                                {
                                    UInt64 WantedID = UInt64.Parse(args.Args[2]);
                                    LocalCreatedTask(TypeCreatedTask.TakePlayer, player.userID, WantedID: WantedID);
                                    break;
                                } 
                            case "get.item.amount":
                                {
                                    if (args.Args.Length != 6) return;
                                    String Shortname = args.Args[2];
                                    if (String.IsNullOrWhiteSpace(Shortname)) return;
                                    UInt64 SkinID;
                                    if (!UInt64.TryParse(args.Args[3], out SkinID)) return;
                                    Regex regex = new Regex("^[0-9]+$");
                                    Int32 Amount;
                                    if (!Int32.TryParse(args.Args[4], out Amount)) return;
                                    if (!regex.IsMatch(args.Args[4])) return;
                                    Int32 ItemAmount;
                                    if (!Int32.TryParse(args.Args[5], out ItemAmount)) return;
                                    if (!regex.IsMatch(args.Args[5])) return;
                                    if (ItemAmount > Amount) return;

                                    Item ThisItem = ItemManager.CreateByName(Shortname, ItemAmount, SkinID);
                                    LocalCreatedTask(TypeCreatedTask.TakeItem, player.userID, ThisItem, ItemAmount);
                                    break;
                                }
                            case "remove.item": 
                                {
                                    String Shortname = args.Args[2];
                                    if (String.IsNullOrWhiteSpace(Shortname)) return;
                                    UInt64 SkinID;
                                    if (!UInt64.TryParse(args.Args[3], out SkinID)) return;
                                    Int32 Amount;
                                    if (!Int32.TryParse(args.Args[4], out Amount)) return;
                                    Item ThisItem = ItemManager.CreateByName(Shortname, Amount, SkinID);
                                    LocalTaskRemoveItem(player, ThisItem);
                                    break;
                                }
                            case "turn.time": 
                                {
                                    Int32 Cooldown;
                                    if (!Int32.TryParse(args.Args[2], out Cooldown)) return;
                                    LocalCreatedTask(TypeCreatedTask.TakeTime, player.userID, Cooldown: Cooldown);
                                    break;
                                }
                            case "show.reward.list": 
                                {
                                    List<Configuration.Settings.ItemList> ItemList = PrePlayerHeads[player.userID].RewardList[player.userID];
                                    Show_Item_Reward(player, ItemList);
                                    break;
                                }
                            case "result.created": 
                                {
                                    CreatedTask(player);
                                    break;
                                }
                        }
                        break;
                    }
                    
            }
        }

        [ChatCommand("debugih")]
        void DevDebugCommand(BasePlayer player)
        {
            if (!player.IsAdmin) return;
            FillingPlayer();
        }

        #endregion

        #region UI
        public static string ALERT_UI = "ALERT_UI";

        #region Main UI

        void UI_Interface(BasePlayer player)
        {
            if (config.Setting.CustomCreatedSetting.UseCommandBlock && IsRaidBlocked(player)) return;

            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#00000096"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
            }, "Overlay", "IQHEADREWARD_PLAYER_PANEL");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Close = "IQHEADREWARD_PLAYER_PANEL", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, "IQHEADREWARD_PLAYER_PANEL", "CLOSE_BTN");
            
            #region Centering
            Int32 Count = 0;
            Int32 ItemCount = 0;
            Single itemMinPosition = 219f;
            Single itemWidth = 0.413646f - 0.1f; 
            Single itemMargin = 0.439895f - 0.42f; 
            Int32 itemCount = PlayerHeads.Count < 3 ? PlayerHeads.Count + 1 : PlayerHeads.Count;
            Single itemMinHeight = 0.09f; 
            Single itemHeight = 0.76f; 
            Int32 ItemTarget = 3;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
            #endregion

            foreach (HeadTask Heads in PlayerHeads)
            {
                ShowPlayerPanel(player, container, Count, Heads, $"{itemMinPosition} {itemMinHeight}", $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}");

                #region Centring
                Count++;
                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 1f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }
                #endregion
            }

            if (PlayerHeads.Count < 3)
            {
                container.Add(new CuiElement
                {
                    Name = "CreatedImage",
                    Parent = "IQHEADREWARD_PLAYER_PANEL",
                    Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage("WANTED_ITEMS")},
                    new CuiRectTransformComponent{ AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                }
                }); 

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Close = "IQHEADREWARD_PLAYER_PANEL", Command = "ih created.open.menu", Color = "0 0 0 0" },
                    Text = { Text = "" }
                }, "CreatedImage", "CreatedButton");
            }

            container.Add(new CuiElement
            {
                Name = "TitlePanel",
                Parent = "IQHEADREWARD_PLAYER_PANEL",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_MAIN_MENU_IH_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 40, Align = TextAnchor.MiddleCenter, Color = "0.8274511 0.7372549 0.5529412 1"},
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-244.5 298.672", OffsetMax = "241.5 351.665" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "TitleThree",
                Parent = "IQHEADREWARD_PLAYER_PANEL",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_MAIN_MENU_IH_DESCRIPTION_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, Color = "0.8509805 0.764706 0.5843138 1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-433.577 264.726", OffsetMax = "434.764 298.674" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "TitleTwo",
                Parent = "IQHEADREWARD_PLAYER_PANEL",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_MAIN_MENU_IH_DESCRIPTION",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 17, Align = TextAnchor.MiddleCenter, Color = "0.8509805 0.764706 0.5843138 1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-615.508 -352.983", OffsetMax = "612.492 -308.685" }
                }
            });

            CuiHelper.DestroyUi(player, "IQHEADREWARD_PLAYER_PANEL");
            CuiHelper.AddUi(player, container);
        }      

        void ShowPlayerPanel(BasePlayer player, CuiElementContainer container, Int32 Count, HeadTask Heads, String AnchorMin, String AnchorMax)
        {
            BasePlayer Wanted = BasePlayer.FindByID(Heads.WantedID);

            CuiHelper.DestroyUi(player, $"HEADS_PANEL_{Count}");
            CuiHelper.DestroyUi(player, $"HEAD_PANEL_ITEM_{Count}");
            container.Add(new CuiElement
            {
                Name = $"HEADS_PANEL_{Count}",
                Parent = "IQHEADREWARD_PLAYER_PANEL",
                Components = {
                    new CuiImageComponent { Color = "0 0 0 0"},
                    new CuiRectTransformComponent{ AnchorMin = AnchorMin, AnchorMax = AnchorMax },
                }
            });

            container.Add(new CuiElement
            { 
                Parent = $"HEADS_PANEL_{Count}",
                Name = "AVATAR_TASK",
                Components =
                    {
                    new CuiRawImageComponent { Png = GetImage(Heads.WantedID.ToString()),Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent { AnchorMin = "0.26 0.32", AnchorMax = "0.74 0.68" }
                    }
            });

            if (Wanted != null)
            {
                container.Add(new CuiElement
                {
                    Name = "AVATAR_TASK_NAME_PLAYER",
                    Parent = "AVATAR_TASK",
                    Components = {
                    new CuiTextComponent { Text = $"<b>{Wanted.displayName}</b>", Font = "robotocondensed-regular.ttf", FontSize = 17, Align = TextAnchor.LowerCenter, Color = "0.8509801408 0.764706 0.5843138 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0.05", AnchorMax = "1 1" }
                }
                });
            }

            container.Add(new CuiElement
            {
                Name = "HEADS_IMAGE",
                Parent = $"HEADS_PANEL_{Count}",
                Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage("WANTED")},
                        new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "1 1" },
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Close = "IQHEADREWARD_PLAYER_PANEL", Command = $"ih rehead.task {Heads.WantedID}", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, $"HEADS_PANEL_{Count}", "REHEAD_PLAYER");

            ShowItemsPlayerPanel(player, container, Count, Heads, AnchorMin,AnchorMax);
        }

        #region ShowItemsPlayerPanel
        void ShowItemsPlayerPanel(BasePlayer player, CuiElementContainer container, Int32 Count, HeadTask Task, String AnchorMin, String AnchorMax)
        {
            CuiHelper.DestroyUi(player, "REWARDS_PLAYERS");

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.1 0.12", AnchorMax = "0.9 0.22" },
                Image = { Color = "0 0 0 0" }
            }, $"HEADS_PANEL_{Count}", $"REWARDS_PLAYERS_{Count}");

            List<Configuration.Settings.ItemList> ItemList = Task.RewardList.SelectMany(x => x.Value).ToList();

            #region Centering
            Int32 Count_Items = 0;
            Int32 ItemCount_Items = 0;
            Single itemMinPosition_Items = 219f;
            Single itemWidth_Items = 0.413646f - 0.25f; 
            Single itemMargin_Items = 0.439895f - 0.42f; 
            Int32 itemCount_Items = ItemList.Count;
            Single itemMinHeight_Items = 0f;
            Single itemHeight_Items = 1f; 
            Int32 ItemTarget_Items = 5;

            if (itemCount_Items > ItemTarget_Items)
            {
                itemMinPosition_Items = 0.5f - ItemTarget_Items / 2f * itemWidth_Items - (ItemTarget_Items - 1) / 2f * itemMargin_Items;
                itemCount_Items -= ItemTarget_Items;
            }
            else itemMinPosition_Items = 0.5f - itemCount_Items / 2f * itemWidth_Items - (itemCount_Items - 1) / 2f * itemMargin_Items;
            #endregion

            foreach (var ItemTask in ItemList.Take(5))
            {
                container.Add(new CuiElement
                {
                    Name = $"ITEM_{Count_Items}",
                    Parent = $"REWARDS_PLAYERS_{Count}",
                    Components =
                    {
                        new CuiImageComponent { Color = HexToRustFormat("#E1940050") },
                        new CuiRectTransformComponent{ AnchorMin = $"{itemMinPosition_Items} {itemMinHeight_Items}", AnchorMax = $"{itemMinPosition_Items + itemWidth_Items} {itemMinHeight_Items + itemHeight_Items}" },
                    new CuiOutlineComponent { Color = "0 0 0 1", Distance = "1 -1", UseGraphicAlpha = true },
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{Count_Items}",
                    Components =
                    {
                        new CuiRawImageComponent { Png = GetImage($"{ItemTask.Shortname}_64px"), Color = HexToRustFormat("#FFFFFFFF") },
                        new CuiRectTransformComponent{ AnchorMin = $"0.05 0.05", AnchorMax = $"0.95 0.95" },
                    }
                });

                String Amount = $"x{ItemTask.AmountMax}";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = Amount, FontSize = 10, Color = HexToRustFormat("#180D00FF"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.LowerCenter }
                }, $"ITEM_{Count_Items}");

                #region Centring
                Count_Items++;
                ItemCount_Items++;
                itemMinPosition_Items += (itemWidth_Items + itemMargin_Items);
                if (ItemCount_Items % ItemTarget_Items == 0)
                {
                    itemMinHeight_Items -= (itemHeight_Items + (itemMargin_Items * 1f));
                    if (itemCount_Items > ItemTarget_Items)
                    {
                        itemMinPosition_Items = 0.5f - ItemTarget_Items / 2f * itemWidth_Items - (ItemTarget_Items - 1) / 2f * itemMargin_Items;
                        itemCount_Items -= ItemTarget_Items;
                    }
                    else itemMinPosition_Items = 0.5f - itemCount_Items / 2f * itemWidth_Items - (itemCount_Items - 1) / 2f * itemMargin_Items;
                }
                #endregion
            }

            if (ItemList.Count > 5)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = HexToRustFormat("#00000026"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat", Command = $"ih player.panel head.show.itemlist '{AnchorMin}' '{AnchorMax}' {Count}" },
                    Text = { Text = GetLang("UI_CREATED_TASK_HEAD_SHOW_MORE_ITEMS", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 15, Align = TextAnchor.LowerCenter, Color = "0.09411766 0.0509804 0 1" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                }, $"REWARDS_PLAYERS_{Count}", $"REWARDS_PLAYERS_ITEM_MORE_{Count}");
            }
        }
        #endregion

        #region ShowItemsPlayerPanelMore

        void ShowItemsPlayerPanelMore(BasePlayer player, String AnchorMin, String AnchorMax, Int32 CountUI, List<Configuration.Settings.ItemList> ItemList)
        {
            CuiHelper.DestroyUi(player, $"HEADS_PANEL_{CountUI}");
            CuiHelper.DestroyUi(player, $"HEAD_PANEL_ITEM_{CountUI}");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = $"HEAD_PANEL_ITEM_{CountUI}",
                Parent = "IQHEADREWARD_PLAYER_PANEL",
                Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage("WANTED_ITEMS") },
                    new CuiRectTransformComponent { AnchorMin = AnchorMin.Replace("'", ""), AnchorMax = AnchorMax.Replace("'", "") }
                }
            });

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-178.521 -195", OffsetMax = "178.521 133" }
            }, $"HEAD_PANEL_ITEM_{CountUI}", $"PANEL_REWARDS_{CountUI}");

            #region Centering
            Int32 Count = 0;
            Int32 ItemCount = 0;
            Single itemMinPosition = 219f;
            Single itemWidth = 0.413646f - 0.26f; 
            Single itemMargin = 0.439895f - 0.425f; 
            Int32 itemCount = ItemList.Count;
            Single itemMinHeight = 0.83f; 
            Single itemHeight = 0.17f;
            Int32 ItemTarget = 6;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
            #endregion

            foreach (var Item in ItemList.Take(36))
            {
                container.Add(new CuiElement
                {
                    Name = $"ITEM_{Count}",
                    Parent = $"PANEL_REWARDS_{CountUI}",
                    Components =
                    {
                        new CuiImageComponent { Color = HexToRustFormat("#E1940050") },
                        new CuiRectTransformComponent{ AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    new CuiOutlineComponent { Color = "0 0 0 1", Distance = "1 -1", UseGraphicAlpha = true },
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{Count}",
                    Components =
                    {
                        new CuiRawImageComponent { Png = GetImage($"{Item.Shortname}_64px"), Color = HexToRustFormat("#FFFFFFFF") },
                        new CuiRectTransformComponent{ AnchorMin = $"0 0", AnchorMax = $"1 1" },
                    }
                });

                String Amount = $"x{Item.AmountMax}";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = Amount, FontSize = 8, Color = HexToRustFormat("#180D00FF"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.LowerCenter }
                }, $"ITEM_{Count}");

                #region Centring
                Count++;
                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 1f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }
                #endregion
            }

            container.Add(new CuiButton
            {
                Button = { Color = "0 0 0 0", Command = $"ih player.panel head.show.itemlist.return {AnchorMin} {AnchorMax} {CountUI}" },
                Text = { Text = GetLang("UI_CREATED_TASK_HEAD_ITEM_LIST_BACK", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.09411766 0.0509804 0 0.9" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-159.371 -292", OffsetMax = "161.179 -190" }
            }, $"HEAD_PANEL_ITEM_{CountUI}", "BtnBack");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #endregion

        #region Take Head

        void Created_Head_Task(BasePlayer player, Boolean Rehead = false)
        {
            CuiHelper.DestroyUi(player, "IQHEADREWARD_PANEL");
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                Image = { FadeIn = 0.15f, Color = HexToRustFormat("#00000096"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 0.008", OffsetMax = "-0.0041408 0" }
            }, "Overlay", "IQHEADREWARD_PANEL");

            container.Add(new CuiElement
            {
                Name = "TitleNameRewardCustom",
                Parent = "IQHEADREWARD_PANEL",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 30, Align = TextAnchor.MiddleCenter, Color = "0.8274511 0.7372549 0.5529 1" },  ///
                    new CuiRectTransformComponent { AnchorMin = "0 1", AnchorMax = "1 1", OffsetMin = "590.68 -65.31201408", OffsetMax = "0.005 -20.368" }
                }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Button = { Close = "IQHEADREWARD_PANEL", Color = "0 0 0 0" },
                Text = { Text = "" }
            }, "IQHEADREWARD_PANEL", "CLOSE_BTN");

            CuiHelper.AddUi(player, container);
            if (!Rehead)
                Update_Task(player);
        }

        #region Take Reward Items

        void Take_Reward_Items(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "InputAmount" + ".Input");
            CuiHelper.DestroyUi(player, "Title.Reward.Amount");
            CuiHelper.DestroyUi(player, "TakeRewards");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0.005 -292.594", OffsetMax = "595.935 173.53" }
            }, "IQHEADREWARD_PANEL", "TakeRewards");

            container.Add(new CuiElement
            {
                Name = "TextTakeRewards",
                Parent = "TakeRewards",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_TAKE_REWARDS_TITLE", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.8274511 0.7372549 0.5529 1" },  //
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-297.924 154", OffsetMax = "298.006 209.46" }
                }
            });

            for (Int32 i = 0, x = 0, y = 0; i < 36; i++)
            {
                container.Add(new CuiPanel
                {
                    CursorEnabled = false,
                    Image = { Color = "0 0 0 0.7", Material = "assets/content/ui/uibackgroundblur.mat" },
                    RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = $"{-291 - (-73.2 * x)} {84 + (-73.2 * y)}", OffsetMax = $"{-221 - (-73.2 * x)} {154 + (-73.2 * y)}" }
                }, "TakeRewards", $"InventorySlot_{i}");

                x++;
                if (x == 8 && y == 3)
                {
                    x = 2;
                    y++;
                }
                else if (x >= 8)
                {
                    x = 0;
                    y++;
                }
            }

            Int32 Slot = 0;
            foreach (var Item in player.inventory.AllItems())
            {
                String PNG = GetImage($"{Item.info.shortname}_64px");
                container.Add(new CuiElement
                {
                    Parent = $"InventorySlot_{Slot}",
                    Components = {
                    new CuiRawImageComponent { Png = PNG },
                    new CuiRectTransformComponent { AnchorMin = $"0.08 0.04", AnchorMax = $"0.9 0.9" },
                }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"ih input.drop {Item.amount} {Item.info.shortname} {Item.skin}", Color = "0 0 0 0" },
                    Text = { Text = $"x{Item.amount}", Align = TextAnchor.LowerCenter, Color = "1 1 1 0.6" }
                }, $"InventorySlot_{Slot}");

                Slot++;
            }

            if (GetAmountReward(player) >= config.Setting.CustomCreatedSetting.MaximumRewardCountUser || (IQRankSystem && config.Setting.IQRankSystemSetting.UseRank && !String.IsNullOrWhiteSpace(config.Setting.IQRankSystemSetting.Rank) && !IsRank(player.userID, config.Setting.IQRankSystemSetting.Rank)))
            {
                container.Add(new CuiPanel
                {
                    CursorEnabled = false,
                    Image = { Color = "0 0 0 0.1", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                }, "TakeRewards", "BLUR_BLOCK_ADD");

                String Label = (config.Setting.IQRankSystemSetting.UseRank && !String.IsNullOrWhiteSpace(config.Setting.IQRankSystemSetting.Rank) && !IsRank(player.userID, config.Setting.IQRankSystemSetting.Rank)) ? GetLang("UI_CREATED_TASK_PRECREATED_ITEM_RANK_SYSTEM", player.UserIDString, GetRankName(config.Setting.IQRankSystemSetting.Rank)) : GetAmountReward(player) >= config.Setting.CustomCreatedSetting.MaximumRewardCountUser ? GetLang("UI_CREATED_TASK_PRECREATED_ITEM_COUNT_MAX", player.UserIDString) : "";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = Label, FontSize = 20, Color = "0.8509805 0.764706 0.5843138 1", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                },  "BLUR_BLOCK_ADD");
            }

            CuiHelper.AddUi(player, container);
        }

        private Int32 GetAmountReward(BasePlayer player)
        {
            Int32 Amount = 0;
            if (!PrePlayerHeads.ContainsKey(player.userID)
                || !PrePlayerHeads[player.userID].RewardList.ContainsKey(player.userID)) return Amount;
            Amount += PrePlayerHeads[player.userID].RewardList[player.userID].Count;

            var PHeads = PlayerHeads.FirstOrDefault(x => x.WantedID == PrePlayerHeads[player.userID].WantedID);
            if (PHeads == null) return Amount;

            var RewardList = PHeads.RewardList;
            if (RewardList != null && RewardList.ContainsKey(player.userID))
                Amount += RewardList[player.userID].Count;
            return Amount;
        }
        #endregion

        #region Take Amount
        void Show_Amount_Drop_Input(BasePlayer player, Item Item)
        {
            CuiHelper.DestroyUi(player, "InputAmount" + ".Input");
            CuiHelper.DestroyUi(player, "Title.Reward.Amount");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Parent = "TakeRewards",
                Name = "Title.Reward.Amount", 
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_TAKE_REWARDS_GET_AMOUNT_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.LowerLeft, Color = HexToRustFormat("#D6BD8D") },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-297.92 -233.06", OffsetMax = "72.607 -209.051" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                }
            });

            String Amount = String.Empty;
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0", OffsetMin = "640.043 29.094", OffsetMax = "-44.103 67.402" }, 
                Image = { Color = HexToRustFormat("#D6BD8D") }
            }, "IQHEADREWARD_PANEL", "InputAmount" + ".Input");

            container.Add(new CuiElement
            {
                Parent = "InputAmount" + ".Input",
                Name = "InputAmount" + ".Input.Current",
                Components =
                {
                    new CuiInputFieldComponent { Text = Amount, FontSize = 25, Command = $"ih created.task get.item.amount {Item.info.shortname} {Item.skin} {Amount} {Item.amount}", Align = TextAnchor.MiddleCenter, CharsLimit = Item.amount.ToString().Length},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Search Player

        void Search_Player_Tasked(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "SearchPlayerPanel");
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0.7", Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMin = "0 0.002", OffsetMax = "-0.001 0" }
            }, "IQHEADREWARD_PANEL", "SearchPlayerPanel");

            container.Add(new CuiButton
            {
                Button = { Color = "0 0 0 0", Close = "SearchPlayerPanel" },
                Text = { Text = "" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
            }, "SearchPlayerPanel", "ButtonClose");

            container.Add(new CuiElement
            {
                Name = "InputNickInfo",
                Parent = "SearchPlayerPanel",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_SEARCH_PLAYER_TITLE", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 35, Align = TextAnchor.MiddleCenter, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-640 282.876", OffsetMax = "640 359.99" }
                }
            });

            String NickName = "";
            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-402.85 245.614", OffsetMax = "356.353 282.879" },
                Image = { Color = HexToRustFormat("#D6BD8D") }
            }, "SearchPlayerPanel", "InputPanelSearch" + ".Input");

            container.Add(new CuiElement
            {
                Parent = "InputPanelSearch" + ".Input",
                Name = "InputPanelSearch" + ".Input.Current",
                Components =
                {
                    new CuiInputFieldComponent { Text = NickName, FontSize = 20, Command = $"ih created.task search.player.task.confirm.open {NickName}", Align = TextAnchor.MiddleCenter, CharsLimit = 25},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "InputSprite",
                Parent = "SearchPlayerPanel",
                Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Sprite = "assets/content/ui/death-marker@4x.png" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "363 233.62", OffsetMax = "411 294.88" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "InputNickInfoDescription",
                Parent = "SearchPlayerPanel",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_SEARCH_PLAYER_DESCRIPTION_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-639.997 209.983", OffsetMax = "640.003 245.617" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        void Show_Confirm_Player_Tasked(BasePlayer player, BasePlayer TaskPlayer)
        {
            CuiHelper.DestroyUi(player, "ConfirmPlayer");
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "1 1 1 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-406.925 -181.381", OffsetMax = "406.925 105.381" }
            }, "SearchPlayerPanel", "ConfirmPlayer");

            container.Add(new CuiElement
            {
                Name = "ConfirmInformation",
                Parent = "ConfirmPlayer",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleLeft, Color = HexToRustFormat("#D6BD8D") },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-119.905 95.792", OffsetMax = "406.925 143.381" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "CPPlayerNick",
                Parent = "ConfirmPlayer",
                Components = {
                    new CuiTextComponent { Text = TaskPlayer.displayName, Font = "robotocondensed-regular.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-406.67 -143.38", OffsetMax = "-119.91 -112.975" }
                }
            });

            container.Add(new CuiElement
            {
                Parent = $"ConfirmPlayer",
                Name = "ConfirmInformation_Avatar",
                Components =
                    {
                    new CuiRawImageComponent { Png = GetImage(TaskPlayer.UserIDString),Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-406.92 -143.381", OffsetMax = "-119.9 143.38" }
                    }
            });

            container.Add(new CuiButton
            {
                Button = { Color = HexToRustFormat("#56A65B"), Command = $"ih created.task search.player.task.confirm.yes {TaskPlayer.userID}" },
                Text = { Text = GetLang("UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_YES", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 35, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-119.911 -143.381", OffsetMax = "145.059 90.399" }
            }, "ConfirmPlayer", "ButtonYes");

            container.Add(new CuiButton
            {
                Button = { Color = HexToRustFormat("#B75852"), Close = "ConfirmPlayer" },
                Text = { Text = GetLang("UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_NO", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 35, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "145.06 -143.38", OffsetMax = "410.02 90.4" }
            }, "ConfirmPlayer", "ButtonNo");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Take Time

        void Take_Time_Custom(BasePlayer player)
        {
            var CustomCreated = config.Setting.CustomCreatedSetting;
            if (!CustomCreated.UseCutomTime) return;

            CuiHelper.DestroyUi(player, "PanelTakeTime");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "0.045 145.71", OffsetMax = "595.975 255.69" }
            }, "IQHEADREWARD_PANEL", "PanelTakeTime");

            container.Add(new CuiElement
            {
                Name = "NameTime",
                Parent = "PanelTakeTime",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 18, Align = TextAnchor.MiddleCenter, Color = HexToRustFormat("#D6BD8D") },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-297.967 19.357", OffsetMax = "297.963 44.99" }
                }
            });

            #region Centering
            Int32 Count = 0;
            Int32 ItemCount = 0;
            Single itemMinPosition = 219f;
            Single itemWidth = 0.413646f - 0.28f; 
            Single itemMargin = 0.439895f - 0.4f; 
            Int32 itemCount = CustomCreated.TimeSetting.CustomTimeSettings.Count(x => IQEconomicGetBalance(player.userID) >= x.IQEconomic_Balance || !x.IQEconomic_CustomTime);
            Single itemMinHeight = 0.48f;
            Single itemHeight = 0.16f; 
            Int32 ItemTarget = 5;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
            #endregion

            foreach (Configuration.Settings.CustomCreated.TimeSettings.TimeCreatedMore Time in CustomCreated.TimeSetting.CustomTimeSettings.Where(x => IQEconomicGetBalance(player.userID) >= x.IQEconomic_Balance || !x.IQEconomic_CustomTime))
            {
                String SpriteCheckBox = PrePlayerHeads.ContainsKey(player.userID) && PrePlayerHeads[player.userID].Cooldown == Time.Time ? "assets/icons/check.png" : "assets/icons/close.png";
                String ColorSpriteCheckBox = PrePlayerHeads.ContainsKey(player.userID) && PrePlayerHeads[player.userID].Cooldown == Time.Time ? "#4DBE62" : "#BE4C54";
                String TimeResult = Time.IQEconomic_CustomTime && Time.IQEconomic_Balance != 0 ?  $"- {FormatTime(TimeSpan.FromSeconds((Double)Time.Time), player.UserIDString)} <color=white><size=10>(₽)</size></color>" : $"- {FormatTime(TimeSpan.FromSeconds((Double)Time.Time), player.UserIDString)}";
                String Command = PrePlayerHeads.ContainsKey(player.userID) && PrePlayerHeads[player.userID].Cooldown == Time.Time ? "" : $"ih created.task turn.time {Time.Time}";

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    Image = { Color = "0 0 0 0" }
                }, $"PanelTakeTime", $"ITEM_{Count}");

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{Count}",
                    Components = {
                    new CuiTextComponent { Text = TimeResult, Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.MiddleLeft, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.27 0", AnchorMax = "1 1" }
                }
                });

                container.Add(new CuiElement
                {
                    Name = $"CHECK_BOX_{Count}",
                    Parent = $"ITEM_{Count}",
                    Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat(ColorSpriteCheckBox), Sprite = SpriteCheckBox, Material = "assets/icons/iconmaterial.mat" },
                    new CuiRectTransformComponent { AnchorMin = "0.06 0.2", AnchorMax = "0.2 0.8" }
                }
                });

                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = Command },
                    Text = { Text = "" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                },  $"CHECK_BOX_{Count}");

                #region Centring
                Count++;
                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 1f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }
                #endregion
            }

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Show List Items
        void Show_Item_Reward(BasePlayer player, List<Configuration.Settings.ItemList> ItemList) 
        {
            CuiHelper.DestroyUi(player, "LogoRewardList");
            CuiHelper.DestroyUi(player, "LogoRewardPanel");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = "LogoRewardList",
                Parent = "IQHEADREWARD_PANEL",
                Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage("WANTED_ITEMS") },
                    new CuiRectTransformComponent { AnchorMin = "0 0.5", AnchorMax = "0 0.5", OffsetMin = "-9.71 -347.342", OffsetMax = "483.016 287.958" }
                }
            });

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-178.521 -218.394", OffsetMax = "178.521 149" }
            }, "LogoRewardList", "PanelRewards");

            #region Centering
            Int32 Count = 0;
            Int32 ItemCount = 0;
            Single itemMinPosition = 219f;
            Single itemWidth = 0.413646f - 0.26f; 
            Single itemMargin = 0.439895f - 0.425f;  
            Int32 itemCount = ItemList.Count;
            Single itemMinHeight = 0.85f; 
            Single itemHeight = 0.15f; 
            Int32 ItemTarget = 6;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
            #endregion

            foreach(var Item in ItemList.Take(36))
            {
                container.Add(new CuiElement
                {
                    Name = $"ITEM_{Count}",
                    Parent = $"PanelRewards",
                    Components =
                    {
                        new CuiImageComponent { Color = HexToRustFormat("#E1940050") },
                        new CuiRectTransformComponent{ AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    new CuiOutlineComponent { Color = "0 0 0 1", Distance = "1 -1", UseGraphicAlpha = true },
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{Count}",
                    Components =
                    {
                        new CuiRawImageComponent { Png = GetImage($"{Item.Shortname}_64px"), Color = HexToRustFormat("#FFFFFFFF") },
                        new CuiRectTransformComponent{ AnchorMin = $"0 0", AnchorMax = $"1 1" },
                    }
                });

                String Amount = $"x{Item.AmountMax}";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = Amount, FontSize = 8, Color = HexToRustFormat("#180D00FF"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.LowerCenter }
                }, $"ITEM_{Count}");

                container.Add(new CuiElement
                {
                    Name = $"TakeButtonRemove_Sprite_{Count}",
                    Parent = $"ITEM_{Count}",
                    Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat("#BE4C54F1"), Material = "assets/icons/iconmaterial.mat", Sprite = "assets/icons/close.png" },
                    new CuiRectTransformComponent { AnchorMin = "0.35 0.35", AnchorMax = "0.65 0.65" }
                }
                });

                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"ih created.task remove.item {Item.Shortname} {Item.SkinID} {Item.AmountMax}" },
                    Text = { Text = "", Color = "0 0 0 0" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                }, $"TakeButtonRemove_Sprite_{Count}", "TakeButtonRemove");

                #region Centring
                Count++;
                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 1f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }
                #endregion
            }

            container.Add(new CuiButton
            {
                Button = { Color = "0 0 0 0", Command = "ih update.task" },
                Text = { Text = GetLang("UI_CREATED_TASK_HEAD_ITEM_LIST_BACK", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.09411766 0.0509804 0 0.9" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-159.371 -292", OffsetMax = "161.179 -260.265" }
            }, "LogoRewardList", "BtnBack");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Update Task

        void Update_Task(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "SearchPlayerPanel");
            CuiHelper.DestroyUi(player, "LogoRewardList");
            CuiHelper.DestroyUi(player, "LogoRewardPanel");
            CuiHelper.DestroyUi(player, "TakePlayerButton");
            CuiHelper.DestroyUi(player, "AVATAR_TASK");
            CuiHelper.DestroyUi(player, "CreatedResult");
            CuiElementContainer container = new CuiElementContainer();
            if (PrePlayerHeads.ContainsKey(player.userID) && PrePlayerHeads[player.userID].WantedID != 0)
            {
                container.Add(new CuiElement
                {
                    Parent = $"IQHEADREWARD_PANEL",
                    Name = "AVATAR_TASK",
                    Components =
                    {
                    new CuiRawImageComponent { Png = GetImage(PrePlayerHeads[player.userID].WantedID.ToString()),Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-510.84 -154.63", OffsetMax = "-276.58 87.97" }
                    }
                });

                container.Add(new CuiElement
                {
                    Name = "AVATAR_TASK_NAME_PLAYER",
                    Parent = "AVATAR_TASK",
                    Components = {
                    new CuiTextComponent { Text = $"<b>{PrePlayerHeads[player.userID].WantedName}</b>", Font = "robotocondensed-regular.ttf", FontSize = 17, Align = TextAnchor.LowerCenter, Color = "0.8509805 0.764706 0.5843138 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0 0.05", AnchorMax = "1 1" }
                }
                }); 
            }

            container.Add(new CuiElement
            {
                Name = "LogoRewardPanel",
                Parent = "IQHEADREWARD_PANEL",
                Components = {
                    new CuiRawImageComponent { Color = "1 1 1 1", Png = GetImage("WANTED") },
                    new CuiRectTransformComponent { AnchorMin = "0 0.5", AnchorMax = "0 0.5", OffsetMin = "11.492 -352.992", OffsetMax = "481.095 287.958" }
                }
            });
            
            container.Add(new CuiButton
            {
                Button = { Color = "0 0 0 0", Command = "ih created.task search.player.task.open" },
                Text = { Text = GetLang("UI_CREATED_TASK_HEAD_TAKE_PLAYER_TITLE", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.09411766 0.0509804 0 1" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-510.84 -154.63", OffsetMax = "-276.58 87.97" }
            }, "IQHEADREWARD_PANEL", "TakePlayerButton");

            if (PrePlayerHeads.ContainsKey(player.userID))
            {
                if (GetPercentStatus(player, PrePlayerHeads[player.userID]) >= 1)
                {
                    if (config.Setting.CustomCreatedSetting.UseCutomTime)
                    {
                        var Time = config.Setting.CustomCreatedSetting.TimeSetting.CustomTimeSettings.FirstOrDefault(t => t.Time == PrePlayerHeads[player.userID].Cooldown);
                        if (Time != null)
                        {
                            String TimeResult = Time.IQEconomic_CustomTime && Time.IQEconomic_Balance != 0 ? $"{GetLang("UI_CREATED_TASK_HEAD_PRECREATED_RESULT_BTN", player.UserIDString)} <color=white><size=16>+{Time.IQEconomic_Balance}(₽)</size></color>" : GetLang("UI_CREATED_TASK_HEAD_PRECREATED_RESULT_BTN", player.UserIDString);

                            container.Add(new CuiButton
                            {
                                Button = { Color = HexToRustFormat("#D5BC8E"), Command = "ih created.task result.created" },
                                Text = { Text = TimeResult, Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.09411766 0.05094 0 1" }, //
                                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "137.657 249.939", OffsetMax = "458.283 287.961" }
                            }, "IQHEADREWARD_PANEL", "CreatedResult");
                        }
                    }
                    else
                    {
                        container.Add(new CuiButton
                        {
                            Button = { Color = HexToRustFormat("#D5BC8E"), Command = "ih created.task result.created" },
                            Text = { Text = GetLang("UI_CREATED_TASK_HEAD_PRECREATED_RESULT_BTN", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, Color = "0.09411766 0.05094 0 1" }, //
                            RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "137.657 249.939", OffsetMax = "458.283 287.961" }
                        }, "IQHEADREWARD_PANEL", "CreatedResult");
                    }
                }
            }
            CuiHelper.AddUi(player, container);
            Update_Task_Items(player);
            Update_Status_Created(player);
            Take_Time_Custom(player);
        }

        #endregion

        #region Update Take Items

        void Update_Task_Items(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "RewardListPanel");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-181 -242.249", OffsetMax = "181 -180.151" },
                Image = { Color = "0 0 0 0" }
            }, "LogoRewardPanel", "RewardListPanel");

            if (!PrePlayerHeads.ContainsKey(player.userID) || !PrePlayerHeads[player.userID].RewardList.ContainsKey(player.userID)) return;
            var TaskUsers = PrePlayerHeads[player.userID].RewardList[player.userID];

            #region Centering
            Int32 Count = 0;
            Int32 ItemCount = 0;
            Single itemMinPosition = 219f;
            Single itemWidth = 0.413646f - 0.25f;
            Single itemMargin = 0.439895f - 0.42f;
            Int32 itemCount = TaskUsers.Count;
            Single itemMinHeight = 0f; 
            Single itemHeight = 1f; 
            Int32 ItemTarget = 5;

            if (itemCount > ItemTarget)
            {
                itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                itemCount -= ItemTarget;
            }
            else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
            #endregion

            foreach (var TaskUser in TaskUsers.Take(5))
            {
                container.Add(new CuiElement
                {
                    Name = $"ITEM_{Count}",
                    Parent = $"RewardListPanel",
                    Components =
                    {
                        new CuiImageComponent { Color = HexToRustFormat("#E1940050") },
                        new CuiRectTransformComponent{ AnchorMin = $"{itemMinPosition} {itemMinHeight}", AnchorMax = $"{itemMinPosition + itemWidth} {itemMinHeight + itemHeight}" },
                    new CuiOutlineComponent { Color = "0 0 0 1", Distance = "1 -1", UseGraphicAlpha = true },
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ITEM_{Count}",
                    Components =
                    {
                        new CuiRawImageComponent { Png = GetImage($"{TaskUser.Shortname}_64px"), Color = HexToRustFormat("#FFFFFFFF") },
                        new CuiRectTransformComponent{ AnchorMin = $"0.05 0.05", AnchorMax = $"0.95 0.95" },
                    }
                });

                String Amount = $"x{TaskUser.AmountMax}";

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = Amount, FontSize = 10, Color = HexToRustFormat("#180D00FF"), Font = "robotocondensed-bold.ttf", Align = TextAnchor.LowerCenter }
                }, $"ITEM_{Count}");

                container.Add(new CuiElement 
                {
                    Name = $"TakeButtonRemove_Sprite_{Count}",
                    Parent = $"ITEM_{Count}",
                    Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat("#BE4C54F1"), Material = "assets/icons/iconmaterial.mat", Sprite = "assets/icons/close.png" },
                    new CuiRectTransformComponent { AnchorMin = "0.35 0.35", AnchorMax = "0.65 0.65" }
                }
                });

                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"ih created.task remove.item {TaskUser.Shortname} {TaskUser.SkinID} {TaskUser.AmountMax}" },
                    Text = { Text = "", Color = "0 0 0 0" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                }, $"TakeButtonRemove_Sprite_{Count}", "TakeButtonRemove");

                #region Centring
                Count++;
                ItemCount++;
                itemMinPosition += (itemWidth + itemMargin);
                if (ItemCount % ItemTarget == 0)
                {
                    itemMinHeight -= (itemHeight + (itemMargin * 1f));
                    if (itemCount > ItemTarget)
                    {
                        itemMinPosition = 0.5f - ItemTarget / 2f * itemWidth - (ItemTarget - 1) / 2f * itemMargin;
                        itemCount -= ItemTarget;
                    }
                    else itemMinPosition = 0.5f - itemCount / 2f * itemWidth - (itemCount - 1) / 2f * itemMargin;
                }
                #endregion
            }

            if (TaskUsers.Count > 5)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = HexToRustFormat("#00000026"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat", Command = "ih created.task show.reward.list" },
                    Text = { Text = GetLang("UI_CREATED_TASK_HEAD_SHOW_MORE_ITEMS",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 15, Align = TextAnchor.LowerCenter, Color = "0.09411766 0.0509804 0 1" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
                }, "RewardListPanel", "TakeButtonMoreItems");
            }
            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Update Status Created

        void Update_Status_Created(BasePlayer player)
        {
            String SpritePlayer = String.Empty;
            String ColorSpritePlayer = String.Empty;
            String SpriteItems = String.Empty;
            String ColorSpriteItems = String.Empty;
            String SpriteTime = String.Empty;
            String ColorSpriteTime = String.Empty;
            HeadTask Data = new HeadTask { RewardList = new Dictionary<ulong, List<Configuration.Settings.ItemList>> { }, WantedID = 0, Cooldown = 0 };
            if (PrePlayerHeads.ContainsKey(player.userID))
                Data = PrePlayerHeads[player.userID];

            Single ProgressY = GetPercentStatus(player, Data);

            CuiHelper.DestroyUi(player, "UpdateStatusCreated");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0 0 0 0" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-607.988 297.559", OffsetMax = "-180.407 346.287" }
            }, "IQHEADREWARD_PANEL", "UpdateStatusCreated");

            container.Add(new CuiElement
            {   
                Name = "ProgressTitle",
                Parent = "UpdateStatusCreated",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TITLE",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 14, Align = TextAnchor.UpperLeft, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-211.38 6.724", OffsetMax = "-75.62 23.364" }
                }
            });

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0.8274511 0.7372549 0.5529412 0.45" },
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-211.38 -21.375", OffsetMax = "-205.857 5" }
            }, "UpdateStatusCreated", "ProgressBar");

            if (Data.WantedID != 0)
            {
                SpritePlayer = "assets/icons/check.png";
                ColorSpritePlayer = "#4DBE62";
            }
            else
            {
                SpritePlayer = "assets/icons/close.png";
                ColorSpritePlayer = "#BE4C54";
            }

            container.Add(new CuiElement
            {
                Name = "CheckBoxTakePlayer",
                Parent = "UpdateStatusCreated",
                Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat(ColorSpritePlayer), Sprite = SpritePlayer, Material = "assets/icons/iconmaterial.mat" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-203.38 -21.5", OffsetMax = "-191.38 -9.5" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "TitleCheckBoxTakePlayer",
                Parent = "UpdateStatusCreated",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_STATUS_PRECREATED_PLAYER",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 8, Align = TextAnchor.UpperLeft, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-189.765 -21.5", OffsetMax = "-49.835 -9.5" }
                }
            });

            if (Data.RewardList.ContainsKey(player.userID) && Data.RewardList[player.userID].Count != 0)
            {
                SpriteItems = "assets/icons/check.png";
                ColorSpriteItems = "#4DBE62";
            }
            else
            {
                SpriteItems = "assets/icons/close.png";
                ColorSpriteItems = "#BE4C54";
            }

            container.Add(new CuiElement
            {
                Name = "CheckBoxTakeItem",
                Parent = "UpdateStatusCreated",
                Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat(ColorSpriteItems), Sprite = SpriteItems, Material = "assets/icons/iconmaterial.mat" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-203.38 -7.125", OffsetMax = "-191.38 4.875" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "TitleCheckBoxTakeItem",
                Parent = "UpdateStatusCreated",
                Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_STATUS_PRECREATED_ITEMS",player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 8, Align = TextAnchor.UpperLeft, Color = "0.8274511 0.7372549 0.5529412 1" },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-189.764 -7.125", OffsetMax = "-49.836 4.875" }
                }
            });

            if (config.Setting.CustomCreatedSetting.UseCutomTime)
            {
                SpriteTime = Data.Cooldown != 0 ? "assets/icons/check.png" : "assets/icons/close.png";
                ColorSpriteTime = Data.Cooldown != 0 ? "#4DBE62" : "#BE4C54";

                container.Add(new CuiElement
                {
                    Name = "CheckBoxTakeTime",
                    Parent = "UpdateStatusCreated",
                    Components = {
                    new CuiRawImageComponent { Color = HexToRustFormat(ColorSpriteTime), Sprite = SpriteTime, Material = "assets/icons/iconmaterial.mat" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-45.4 -7.125", OffsetMax = "-33.4 4.875" }
                }
                });

                container.Add(new CuiElement
                {
                    Name = "TitleCheckBoxTakeTime",
                    Parent = "UpdateStatusCreated",
                    Components = {
                    new CuiTextComponent { Text = GetLang("UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME", player.UserIDString), Font = "robotocondensed-regular.ttf", FontSize = 8, Align = TextAnchor.UpperLeft, Color = "0.8274511 0.7372549 0.5529412 1"  },
                    new CuiOutlineComponent { Color = "0 0 0 0.5", Distance = "1 -1" },
                    new CuiRectTransformComponent { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-31.764 -7.125", OffsetMax = "108.164 4.875" }
                }
                });
            }

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                Image = { Color = "0.8274511 0.7372549 0.5529412 0.9" },
                RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 {ProgressY}", OffsetMin = "1 1", OffsetMax = "0 -1" }
            },  "ProgressBar", "ProgressBarProcess");

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #endregion

        #region AlertUI

        void AlertUI(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, ALERT_UI);
            var Interface = config.Setting.AlertUISetting;

            container.Add(new CuiElement
            {
                FadeOut = 0.5f,
                Parent = "Overlay",
                Name = ALERT_UI,
                Components =
                    {
                    new CuiRawImageComponent { FadeIn = 0.5f, Png = GetImage($"ALERT_UI_{config.Setting.AlertUISetting.PNG}"),Color = HexToRustFormat("#FFFFFFFF") },
                    new CuiRectTransformComponent{ AnchorMin = Interface.AnchorMin, AnchorMax = Interface.AnchorMax, OffsetMin = Interface.OffsetMin, OffsetMax = Interface.OffsetMax},
                    }
            });

            if(Interface.UserCloseUI)
            {
                container.Add(new CuiButton
                {
                    FadeOut = 0.5f,
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { FadeIn = 0.5f, Close = ALERT_UI, Color = "0 0 0 0" },
                    Text = { FadeIn = 0.5f, Text = "" }
                }, ALERT_UI, "CLOSE_BTN_ALERT");
            }

            CuiHelper.AddUi(player, container);
        }

        #endregion

        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        #endregion

        #region Lang

        public static StringBuilder sb = new StringBuilder();
        public String GetLang(String LangKey, String userID = null, params object[] args)
        {
            sb.Clear();
            if (args != null)
            {
                sb.AppendFormat(lang.GetMessage(LangKey, this, userID), args);
                return sb.ToString();
            }
            return lang.GetMessage(LangKey, this, userID);
        }

        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NEW_HEAD"] = "Attention!\nPer player <color=#CC3226>{0}</color> there was a bounty on his head!\nYou can find out about the award by following the command <color=#966C43>/ih</color>",
                ["HEAD_KILLED"] = "You killed the player on whom the reward was assigned!\nCongratulate!\nYou can pick up your reward in the menu- <color=#966C43>/ih</color>",
                ["HEAD_KILLED_ALERT"] = "Wanted <color=#CC3226>{0}</color> on whom the reward was assigned, they were killed",

                ["UI_TITLE"] = "<b><size=40>Bulletin board</size></b>",
                ["UI_DESCRIPTION"] = "<b><size=20>This board displays the players who have a reward</size></b>",
                ["UI_CLOSE"] = "<b><size=30>Close</size></b>",

                ["UI_CREATED_TASK_HEAD_TITLE"] = "Head bounty announcement",
                ["UI_CREATED_TASK_HEAD_TAKE_PLAYER_TITLE"] = "SELECT A PLAYER",
                ["UI_CREATED_TASK_HEAD_TAKE_REWARDS_TITLE"] = "Choose a reward that you are ready to give for killing a player!",
                ["UI_CREATED_TASK_HEAD_TAKE_REWARDS_GET_AMOUNT_TITLE"] = "Enter the quantity you need :",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_TITLE"] = "Enter the player's nickname to announce a reward for his head",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_DESCRIPTION_TITLE"] = "After entering the nickname, press «Enter» and make sure that this is the right player",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE"] = "MAKE SURE THAT THIS IS EXACTLY THE RIGHT PLAYER FOR YOU?",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_YES"] = "YES, THAT'S RIGHT",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_NO"] = "NO, THIS IS NOT THE ONE",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME"] = "- Set the execution time",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_ITEMS"] = "- Select an item as a reward",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_PLAYER"] = "- Select a player",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TITLE"] = " Creation progress:",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME_TITLE"] = "Select the time you want to set for this task",
                ["UI_CREATED_TASK_HEAD_ITEM_LIST_BACK"] = "<b>GO BACK</b>",
                ["UI_CREATED_TASK_HEAD_PRECREATED_RESULT_BTN"] = "<b>CREATE A TASK</b>",
                ["UI_CREATED_TASK_HEAD_SHOW_MORE_ITEMS"] = "<b>CLICK TO VIEW ALL AWARDS</b>",
                ["UI_CREATED_TASK_PRECREATED_ITEM_COUNT_MAX"] = "<b>LIMITATION</b>\nYou can no longer add items for this player\nThe limit has been exceeded\nYou can delete the old item and replace it with a new one",
                ["UI_CREATED_TASK_PRECREATED_ITEM_RANK_SYSTEM"] = "<b>LIMITATION</b>\nYou can't create a bounty on your head, you need to get a rank {0} to open this feature",

                ["CHAT_CREATED_TASK_RESULT"] = "You have successfully created a task for the player, it will be active <color=#CC3226>{0}</color>",
                ["CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD"] = "A task has already been created for the player, you have successfully added items as a reward for his head!\nThe excitement on his head is growing!",
                ["CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD_PLUS_TIME"] = "A task has already been created for the player, you have successfully added items as a reward for his head and increased the time for a fee!\nThe task will be active <color=#CC3226>{0}</color>\nThe excitement on his head is growing!",
                ["CHAT_ALERT_TASK_PLAYER"] = "There's a bounty on your head!\n Be vigilant, because the danger is at every step!",
                ["CHAT_ALERT_TASK_PLAYER_RETRY"] = "A reward has been re-assigned for your head!\nYou've obviously crossed the wrong people",
                ["CHAT_ALERT_KILLED_REWARD_PLAYER"] = "You have successfully destroyed the target!\nYour reward has been created!\n You received : <color=#CC3226>{0}</color>",
                ["CHAT_ALERT_KILLED_REWARD_ITEM"] = "<color=#CC3226>{0}</color> a box(a/s/k) with items as a reward are scattered and marked on <color=#966C43>G</color> map",
                ["CHAT_ALERT_KILLED_REWARD_OTHER"] = "<color=#CC3226>{0}</color> the awards have already been issued to you",
                ["CHAT_ALERT_RETURNED_ITEMS"] = "The time for killing the selected player has expired, the ad has been removed from him, you can pick up your items through the team <color=#966C43>/ir</color>",
                ["CHAT_ALERT_RETURNED_ITEMS_COOLDOWN_PRE_CREATED"] = "The time for creating a bounty for the head has expired",
                ["CHAT_ALERT_RETURNED_ITEMS_FINISH"] = "Your items have been successfully returned to you and added to your inventory",
                ["CHAT_ALERT_COOLDOWNS_FALSE"] = "Time for an ad per player's head <color=#CC3226>{0}</color> expired, you can create a new ad for the player's head!",
                ["YOUR_CRATE_BRO"] = "YOUR REWARD BOX",

                ["UI_MAIN_MENU_IH_DESCRIPTION"] = "If there are less than 3 tasks , you can announce a head reward for a player that you don't like by clicking on the" + "or add a reward to an existing ad, just click on it",
                ["UI_MAIN_MENU_IH_DESCRIPTION_TITLE"] = "This board displays the players on which the head reward is announced",
                ["UI_MAIN_MENU_IH_TITLE"] = "BULLETIN BOARD",

                ["TITLE_FORMAT_DAYS"] = "D",
                ["TITLE_FORMAT_HOURSE"] = "H",
                ["TITLE_FORMAT_MINUTES"] = "M",
                ["TITLE_FORMAT_SECONDS"] = "S",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NEW_HEAD"] = "Внимание!\nНа игрока <color=#CC3226>{0}</color> была назначена награда за его голову!\nУзнать о награде можно по команде <color=#966C43>/ih</color>",
                ["HEAD_KILLED"] = "Вы убили игрока,на которого была назначена награда!\nПоздравляем!\nВы можете забрать свою награду в меню - <color=#966C43>/ih</color>",
                ["HEAD_KILLED_ALERT"] = "Игрока <color=#CC3226>{0}</color> на которого была назначена награда - убили",

                ["UI_TITLE"] = "<b><size=40>Доска объявлений</size></b>",
                ["UI_DESCRIPTION"] = "<b><size=20>На данной доске отображены игроки,на которых назначена награда</size></b>",
                ["UI_CLOSE"] = "<b><size=30>3акрыть</size></b>",

                ["UI_CREATED_TASK_HEAD_TITLE"] = "Объявление награды за голову",
                ["UI_CREATED_TASK_HEAD_TAKE_PLAYER_TITLE"] = "ВЫБРАТЬ ИГРОКА",
                ["UI_CREATED_TASK_HEAD_TAKE_REWARDS_TITLE"] = "Выберите награду, которую вы готовы дать за убийство игрока!",
                ["UI_CREATED_TASK_HEAD_TAKE_REWARDS_GET_AMOUNT_TITLE"] = "Введите количество, которое вам требуется :",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_TITLE"] = "Введите ник игрока чтобы объявить за его голову награду",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_DESCRIPTION_TITLE"] = "После введения ника нажмите «Enter» и убедитесь тот ли это игрок",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE"] = "УБЕДИТЕСЬ, ЭТО ТОЧНО НУЖНЫЙ ВАМ ИГРОК?",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_YES"] = "ДА, ВСЕ ВЕРНО",
                ["UI_CREATED_TASK_HEAD_SEARCH_PLAYER_CONFIRM_TITLE_NO"] = "НЕТ, ЭТО НЕ ТОТ",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME"] = "- Установить время на исполнение",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_ITEMS"] = "- Выбрать предмет в качестве награды",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_PLAYER"] = "- Выбрать игрока",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TITLE"] = "Прогресс создания:",
                ["UI_CREATED_TASK_HEAD_STATUS_PRECREATED_TIME_TITLE"] = "Выберите время, которое хотите установить на данную задачу",
                ["UI_CREATED_TASK_HEAD_ITEM_LIST_BACK"] = "<b>ВЕРНУТЬСЯ НАЗАД</b>",
                ["UI_CREATED_TASK_HEAD_PRECREATED_RESULT_BTN"] = "<b>СОЗДАТЬ ЗАДАНИЕ</b>",
                ["UI_CREATED_TASK_HEAD_SHOW_MORE_ITEMS"] = "<b>НАЖМИТЕ ЧТОБЫ ПРОСМОТРЕТЬ ВСЕ НАГРАДЫ</b>",
                ["UI_CREATED_TASK_PRECREATED_ITEM_COUNT_MAX"] = "<b>ОГРАНИЧЕНИЕ</b>\nВы больше не можете добавлять предметы для этого игрока\nПревышен лимит\nВы можете удалить старый предмет и заменить новым",
                ["UI_CREATED_TASK_PRECREATED_ITEM_RANK_SYSTEM"] = "<b>ОГРАНИЧЕНИЕ</b>\nВы не можете создавать награду за голову, вам требуется получить ранг {0} для открытия данной возможности",

                ["CHAT_CREATED_TASK_RESULT"] = "Вы успешно создали задание на игрока, оно будет активно <color=#CC3226>{0}</color>",
                ["CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD"] = "На игрока уже было создано задание, вы успешно добавили предметы в качестве награды за его голову!\nАжиотаж на его голову нарастает!",
                ["CHAT_CREATED_TASK_RESULT_MORE_ITEMS_ADD_PLUS_TIME"] = "На игрока уже было создано задание, вы успешно добавили предметы в качестве награды за его голову и увеличили время за плату!\nЗадание будет активно <color=#CC3226>{0}</color>\nАжиотаж на его голову нарастает!",
                ["CHAT_ALERT_TASK_PLAYER"] = "За вашу голову назначена награда!\nБудьте бдительны, ведь опасность на каждом шагу!",
                ["CHAT_ALERT_TASK_PLAYER_RETRY"] = "За вашу голову повторно назначена награда!\nВы явно перешли дорогу не тем людям",
                ["CHAT_ALERT_KILLED_REWARD_PLAYER"] = "Вы успешно уничтожили цель!\n Ваша награда создана!\n Вы получили : <color=#CC3226>{0}</color>",
                ["CHAT_ALERT_KILLED_REWARD_ITEM"] = "<color=#CC3226>{0}</color> ящик(а/ов/к) с предметами в качестве награды разбросаны и помечены на <color=#966C43>G</color> карте",
                ["CHAT_ALERT_KILLED_REWARD_OTHER"] = "<color=#CC3226>{0}</color> наград вам уже выданы",
                ["CHAT_ALERT_RETURNED_ITEMS"] = "Время на убийство выбранного игрока истекло, с него снято объявление, вы можете забрать свои предметы через команду <color=#966C43>/ir</color>",
                ["CHAT_ALERT_RETURNED_ITEMS_COOLDOWN_PRE_CREATED"] = "Истекло время создания награды за голову",
                ["CHAT_ALERT_RETURNED_ITEMS_FINISH"] = "Ваши предметы успешно вернуты вам и добавлены в инвентарь",
                ["CHAT_ALERT_COOLDOWNS_FALSE"] = "Время на объявление за голову игрока <color=#CC3226>{0}</color> истекло, вы можете создать новое объявление за голову игрока!",
                ["YOUR_CRATE_BRO"] = "ВАШ ЯЩИК С НАГРАДОЙ",

                ["UI_MAIN_MENU_IH_DESCRIPTION"] = "Если заданий меньше 3-х - вы сможете объявить награду за голову на игрока, который вам не нравится нажав на «+» или дополнить награду на уже существующее объявление, просто нажмите на него",
                ["UI_MAIN_MENU_IH_DESCRIPTION_TITLE"] = "На данной доске отображены игроки на которых объявлена награда за голову",
                ["UI_MAIN_MENU_IH_TITLE"] = "ДОСКА ОБЪЯВЛЕНИЙ",

                ["TITLE_FORMAT_DAYS"] = "Д",
                ["TITLE_FORMAT_HOURSE"] = "Ч",
                ["TITLE_FORMAT_MINUTES"] = "М",
                ["TITLE_FORMAT_SECONDS"] = "С",
            }, this, "ru");
        }
        #endregion

        #region Map Mark 

        private object CanNetworkTo(BaseNetworkable entity, BasePlayer target)
        {
            MapMarker mapComponent = entity.GetComponent<MapMarker>();
            if (mapComponent != null)
            {
                VendingMachineMapMarker x = mapComponent.GetComponent<VendingMachineMapMarker>();
                if (x != null && x.OwnerID != 0)
                {
                    if (x.server_vendingMachine != null)
                        return null;

                    if (x.OwnerID != target.userID)
                        return false;
                }
                MapMarkerGenericRadius y = mapComponent.GetComponent<MapMarkerGenericRadius>();
                if (y != null && y.OwnerID != 0)
                    if (y.OwnerID != target.userID)
                        return false;
            }
            return null;
        }

        private void CreateMarker(BaseEntity WantedEntity)
        {
            if (!config.Setting.mapMark.UseMark) return;

            var Marker = config.Setting.mapMark;
            BasePlayer Wanted = WantedEntity.ToPlayer();
            if (MapMarkers.ContainsKey(Wanted)) return;

            CustomMapMarker MapMarker = new CustomMapMarker();
            MapMarker.DisplayName = Marker.DisplayName.Replace("%NAME%", Wanted.displayName.ToUpper());
            MapMarker.Radius = Marker.Radius;
            MapMarker.RefreshRate = Marker.RefreshRate;
            MapMarker.Parent = WantedEntity;
            MapMarker.IDMark = 0;
            ColorUtility.TryParseHtmlString($"{Marker.Color}", out MapMarker.Color);
            ColorUtility.TryParseHtmlString($"{Marker.OutLineColor}", out MapMarker.OutLineColor);

            Wanted.gameObject.AddComponent<CustomMapMarker>().Init(MapMarker);
            MapMarkers.Add(Wanted, MapMarker);
        }

        private void CreateMarker(BaseEntity Entity, BasePlayer Killer)
        {
            if (!config.Setting.mapMark.UseMarkCrates) return;
            if (Killer == null) return;
            if (MapMarkers.ContainsKey(Entity)) return;

            var Marker = config.Setting.mapMark;

            CustomMapMarker MapMarker = new CustomMapMarker();
            MapMarker.DisplayName = GetLang("YOUR_CRATE_BRO", Killer.UserIDString);
            MapMarker.Radius = Marker.Radius;
            MapMarker.RefreshRate = Marker.RefreshRate;
            MapMarker.Parent = Entity;
            MapMarker.IDMark = Killer.userID;
            ColorUtility.TryParseHtmlString($"{Marker.Color}", out MapMarker.Color);
            ColorUtility.TryParseHtmlString($"{Marker.OutLineColor}", out MapMarker.OutLineColor);

            Entity.gameObject.AddComponent<CustomMapMarker>().Init(MapMarker);
            MapMarkers.Add(Entity, MapMarker);
        }

        private void RemoveMarkers()
        {
            foreach (CustomMapMarker Marker in UnityEngine.Object.FindObjectsOfType<CustomMapMarker>())
                UnityEngine.Object.Destroy(Marker);
        }

        private const String GenericPrefab = "assets/prefabs/tools/map/genericradiusmarker.prefab";
        private const String VendingPrefab = "assets/prefabs/deployable/vendingmachine/vending_mapmarker.prefab";

        #region Scripts

        public class CustomMapMarker : FacepunchBehaviour
        {
            private VendingMachineMapMarker Vending;
            private MapMarkerGenericRadius Generic;

            public BaseEntity Parent;

            public Single Radius;
            public Color Color;
            public Color OutLineColor;
            public String DisplayName;
            public Single RefreshRate;

            public UInt64 IDMark;

            public void Init(CustomMapMarker Info)
            {
                this.Radius = Info.Radius;
                this.Color = Info.Color;
                this.OutLineColor = Info.OutLineColor;
                this.DisplayName = Info.DisplayName;
                this.RefreshRate = Info.RefreshRate;
                this.Parent = Info.Parent;
                this.IDMark = Info.IDMark;
            }
            private void Start()
            {
                transform.position = Parent.transform.position;
                CreateMarkers();
            }

            private void CreateMarkers()
            {
                Vending = GameManager.server.CreateEntity(VendingPrefab, Parent.transform.position, Quaternion.identity, true).GetComponent<VendingMachineMapMarker>();
                Vending.markerShopName = DisplayName;
                Vending.enableSaving = false;
                Vending.OwnerID = IDMark;
                Vending.Spawn();

                Generic = GameManager.server.CreateEntity(GenericPrefab, Vending.transform.position, Quaternion.identity, true).GetComponent<MapMarkerGenericRadius>();
                Generic.color1 = Color;
                Generic.color2 = OutLineColor;
                Generic.radius = Radius;
                Generic.alpha = 1f;
                Generic.enableSaving = false;
                Generic.OwnerID = IDMark;
                Generic.Spawn();

                Vending.SetParent(Parent, true , true);
                Generic.SetParent(Vending, true, true);

                if (RefreshRate > 0f) InvokeRepeating(nameof(UpdateMarkers), RefreshRate, 0.5f);
            }

            private void UpdateMarkers()
            {
                Vending.SendNetworkUpdate();
                Generic.SendUpdate();
                Generic.SendNetworkUpdate();
            }

            private void DestroyMakers()
            {
                if (Vending.IsValid())
                    Vending.Kill();

                if (Generic.IsValid())
                    Generic.Kill();
            }

            private void OnDestroy() => DestroyMakers();
        }

        #endregion

        #endregion
    }
}


// --- End of file: IQHeadReward.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BluePrinter.cs ---
// --- Original Local Path: BluePrinter.cs ---

/*
References:
 * System
 * Assembly-CSharp
 * Oxide.Core
 * Oxide.Ext.CSharp
 * OXide.Game.Rust
*/
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;

namespace Oxide.Plugins
{
    [Info("BluePrinter", "mk_sky", "1.0.7", ResourceId = 1343)]
    [Description("Allows producing blueprints your char knows, needs paper or blueprintparts.")]
    class BluePrinter : RustPlugin
    {
        #region vars
        ListDictionary<Rust.Rarity, int> paperNeeded;

        ListDictionary<Rust.Rarity, int> blueprintPartsNeeded;

        //ListDictionary<Rust.Rarity, string> blueprintPartsTypeNeeded;

        ListDictionary<Rust.Rarity, int> drawTimes;

        ListDictionary<Rust.Rarity, int> drawTimeModifier;

        //Dictionary<string, int> blueprintPartsID = new Dictionary<string, int>() {
        //    { "blueprint_fragment", 1351589500 },
        //    { "blueprint_page", 1625167035 },
        //    { "blueprint_book", 1624763669 },
        //    { "blueprint_library", -845335793 }
        //};

        ListDictionary<string, string> localization;

        ListDictionary<string, string> itemAlias;

        bool cancelBPWhenDead = true;

        bool paperUsageAllowed = true;

        bool blueprintPartsUsageAllowed = false;

        bool drawTimeModifierEnabled = false;

        bool mulitUseBPsAllowed = true;

        bool popupsEnabled = false;
        
        [PluginReference]
        Plugin PopupNotifications;
        #endregion

        void OnServerInitialized()
        {
            ConfigLoader();

            if (!permission.PermissionExists("blueprinter.canuse"))
                permission.RegisterPermission("blueprinter.canuse", this);
            
            foreach (BasePlayer player in BasePlayer.sleepingPlayerList)
                if (Config["InDrawing"] != null &&
                    Config["InDrawing", player.userID.ToString()] != null &&
                    Config["InDrawing", player.userID.ToString()].ToString() != String.Empty)
                    TimedBluePrint(player.userID.ToString());
                else
                    Config["InDrawing", player.userID.ToString()] = "";

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                if (Config["InDrawing"] != null &&
                    Config["InDrawing", player.userID.ToString()] != null &&
                    Config["InDrawing", player.userID.ToString()].ToString() != String.Empty)
                    TimedBluePrint(player.userID.ToString());
                else
                    Config["InDrawing", player.userID.ToString()] = "";
            
            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            if (Config.Exists())
                Config.Clear();

            Config["Version"] = this.Version.ToString();

            #region paper
            // just took required blueprint.fragment * 1.5 / 10 for standard, because we are all bad blueprint-drawers and it will already take a lot of wood with this
            // (1)paper = 100 wood (if not changed by other plugin) ; Common = 300 wood ; Uncommon = 4.5k wood ; Rare = 9k wood ; VeryRare = 18k wood

            Config["Paper", "Common"] = 3;

            Config["Paper", "Uncommon"] = 45;

            Config["Paper", "Rare"] = 90;

            Config["Paper", "VeryRare"] = 180;

            Config["Paper", "None"] = 1;
            #endregion
            #region blueprintparts
            Config["BlueprintParts", "Common"] = 2;

            //Config["BlueprintParts", "CommonType"] = "blueprint_fragment";

            Config["BlueprintParts", "Uncommon"] = 4;

            //Config["BlueprintParts", "UncommonType"] = "blueprint_page";

            Config["BlueprintParts", "Rare"] = 8;

            //Config["BlueprintParts", "RareType"] = "blueprint_book";

            Config["BlueprintParts", "VeryRare"] = 16;

           // Config["BlueprintParts", "VeryRareType"] = "blueprint_library";

            Config["BlueprintParts", "None"] = 1;

            //Config["BlueprintParts", "NoneType"] = "blueprint_fragment";
            #endregion
            #region drawtime
            Config["DrawTime", "Common"] = 10;

            Config["DrawTime", "Uncommon"] = 30;

            Config["DrawTime", "Rare"] = 60;

            Config["DrawTime", "VeryRare"] = 120;

            Config["DrawTime", "None"] = 0;
            #endregion
            #region drawtimemodifier
            Config["DrawTimeModifierMultiuse", "Common"] = 5;

            Config["DrawTimeModifierMultiuse", "Uncommon"] = 15;

            Config["DrawTimeModifierMultiuse", "Rare"] = 30;

            Config["DrawTimeModifierMultiuse", "VeryRare"] = 60;

            Config["DrawTimeModifierMultiuse", "None"] = 0;
            #endregion
            #region settings
            Config["Settings", "CancelBPWhenDead"] = true;

            Config["Settings", "PaperUsageAllowed"] = true;

            Config["Settings", "BlueprintPartsUsageAllowed"] = false;

            Config["Settings", "EnablePopups"] = false;

            Config["Settings", "EnableDrawTimeModifier"] = false;

            Config["Settings", "AllowMultiUseBPs"] = true;
            #endregion
            #region localization
            Config["Localization", "NotEnoughPaper"] = "The required ammount of paper to create this blueprint is {0} and you only have {1}.";

            Config["Localization", "NotEnoughBluePrintParts"] = "The required ammount of research paper to create this blueprint is {0} and you only have {1}.";

            Config["Localization", "BPNotLearned"] = "You don't know the blueprint for this item, learn it yourself first.";

            Config["Localization", "BPIsDrawing"] = "Blueprint is drawing now, please wait {0} seconds.";

            Config["Localization", "BPDelivery"] = "You finished drawing a blueprint for {0}.";

            Config["Localization", "BPRemovedFromQueue"] = "You are dead and can't finish drawing the blueprint for {0}.";

            Config["Localization", "AlreadyDrawing"] = "You are already drawing a blueprint, please wait until this is finished.";

            Config["Localization", "ItemNotFound"] = "An item with the name \"{0}\" was not found.";

            Config["Localization", "NoBP"] = "No blueprint for this item possible.";

            Config["Localization", "Help"] = "Use /blueprinter [ITEM] to create a blueprint from your known items.";

            Config["Localization", "NoPermission"] = "You have no permission to use this command.";
            #endregion
            #region itemalias
            foreach (ItemDefinition itemDef in ItemManager.itemList)
                if (ItemManager.FindBlueprint(itemDef) != null &&
                    !ItemManager.FindBlueprint(itemDef).defaultBlueprint)
                    Config["ZItemAlias", itemDef.shortname] = itemDef.displayName.english; // only putting the Z here so it won't show before the other things in the config

            //Config["ZItemAlias", "blueprint_fragment"] = "Blueprint Fragment";
            //
            //Config["ZItemAlias", "blueprint_page"] = "Blueprint Page";
            //
            //Config["ZItemAlias", "blueprint_book"] = "Blueprint Book";
            //
            //Config["ZItemAlias", "blueprint_library"] = "Blueprint Library";

            Config["ZItemAlias", "researchpaper"] = "Research Paper";
            #endregion
            #region permission
            if (!permission.PermissionExists("blueprinter.canuse"))
                permission.RegisterPermission("blueprinter.canuse", this);

            if (!permission.GroupHasPermission("player", "blueprinter.canuse"))
                permission.GrantGroupPermission("player", "blueprinter.canuse", this);

            if (!permission.GroupHasPermission("moderator", "blueprinter.canuse"))
                permission.GrantGroupPermission("moderator", "blueprinter.canuse", this);

            if (!permission.GroupHasPermission("admin", "blueprinter.canuse"))
                permission.GrantGroupPermission("admin", "blueprinter.canuse", this);
            #endregion

            SaveConfig();

            PrintWarning("Blueprinter created new config.");
        }

        void ConfigLoader()
        {
            base.LoadConfig();

            #region updater
            if (Config.Exists() &&
                Config["Version"] == null)
            {
                Config.Save(Config.Filename + ".pre103.bak"); //will always call this pre103 as the change for this came with 1.0.3

                LoadDefaultConfig();
            }
            else if (Config.Exists() &&
                     Config["Version"].ToString() != this.Version.ToString())
                ConfigUpdater();
            #endregion
            #region paper
            paperNeeded = new ListDictionary<Rust.Rarity, int>();

            paperNeeded.Add(Rust.Rarity.Common, Convert.ToInt32(Config["Paper", "Common"]));

            paperNeeded.Add(Rust.Rarity.Uncommon, Convert.ToInt32(Config["Paper", "Uncommon"]));

            paperNeeded.Add(Rust.Rarity.Rare, Convert.ToInt32(Config["Paper", "Rare"]));

            paperNeeded.Add(Rust.Rarity.VeryRare, Convert.ToInt32(Config["Paper", "VeryRare"]));

            paperNeeded.Add(Rust.Rarity.None, Convert.ToInt32(Config["Paper", "None"]));
            #endregion
            #region blueprintpartsneeded
            blueprintPartsNeeded = new ListDictionary<Rust.Rarity, int>();

            blueprintPartsNeeded.Add(Rust.Rarity.Common, Convert.ToInt32(Config["BlueprintParts", "Common"]));

            blueprintPartsNeeded.Add(Rust.Rarity.Uncommon, Convert.ToInt32(Config["BlueprintParts", "Uncommon"]));

            blueprintPartsNeeded.Add(Rust.Rarity.Rare, Convert.ToInt32(Config["BlueprintParts", "Rare"]));

            blueprintPartsNeeded.Add(Rust.Rarity.VeryRare, Convert.ToInt32(Config["BlueprintParts", "VeryRare"]));

            blueprintPartsNeeded.Add(Rust.Rarity.None, Convert.ToInt32(Config["BlueprintParts", "None"]));
            #endregion
            #region blueprintpartstype
            //blueprintPartsTypeNeeded = new ListDictionary<Rust.Rarity, string>();
            //
            //blueprintPartsTypeNeeded.Add(Rust.Rarity.Common, Config["BlueprintParts", "CommonType"].ToString());
            //
            //blueprintPartsTypeNeeded.Add(Rust.Rarity.Uncommon, Config["BlueprintParts", "UncommonType"].ToString());
            //
            //blueprintPartsTypeNeeded.Add(Rust.Rarity.Rare, Config["BlueprintParts", "RareType"].ToString());
            //
            //blueprintPartsTypeNeeded.Add(Rust.Rarity.VeryRare, Config["BlueprintParts", "VeryRareType"].ToString());
            //
            //blueprintPartsTypeNeeded.Add(Rust.Rarity.None, Config["BlueprintParts", "NoneType"].ToString());
            #endregion
            #region localization
            localization = new ListDictionary<string, string>();

            localization.Add("NotEnoughPaper", Config["Localization", "NotEnoughPaper"].ToString());

            localization.Add("NotEnoughBluePrintParts", Config["Localization", "NotEnoughBluePrintParts"].ToString());

            localization.Add("BPNotLearned", Config["Localization", "BPNotLearned"].ToString());

            localization.Add("BPIsDrawing", Config["Localization", "BPIsDrawing"].ToString());

            localization.Add("BPDelivery", Config["Localization", "BPDelivery"].ToString());

            localization.Add("AlreadyDrawing", Config["Localization", "AlreadyDrawing"].ToString());

            localization.Add("ItemNotFound", Config["Localization", "ItemNotFound"].ToString());

            localization.Add("NoBP", Config["Localization", "NoBP"].ToString());

            localization.Add("Help", Config["Localization", "Help"].ToString());

            localization.Add("NoPermission", Config["Localization", "NoPermission"].ToString());
            #endregion
            #region itemalias & newitems
            itemAlias = new ListDictionary<string, string>();

            bool newItems = false;

            foreach (ItemDefinition itemDef in ItemManager.itemList)
                if (ItemManager.FindBlueprint(itemDef) != null)
                    if (Config["ZItemAlias", itemDef.shortname] != null)
                        itemAlias.Add(itemDef.shortname, Config["ZItemAlias", itemDef.shortname].ToString());
                    else
                    {
                        Config["ZItemAlias", itemDef.shortname] = itemDef.displayName.english;

                        newItems = true;
                    }

            //itemAlias.Add("blueprint_fragment", Config["ZItemAlias", "blueprint_fragment"].ToString().ToLower());
            //
            //itemAlias.Add("blueprint_page", Config["ZItemAlias", "blueprint_page"].ToString().ToLower());
            //
            //itemAlias.Add("blueprint_book", Config["ZItemAlias", "blueprint_book"].ToString().ToLower());
            //
            //itemAlias.Add("blueprint_library", Config["ZItemAlias", "blueprint_library"].ToString().ToLower());

            itemAlias.Add("researchpaper", Config["ZItemAlias", "researchpaper"].ToString().ToLower());

            if (newItems)
            {
                PrintWarning("Config-loader added new items to config.");

                SaveConfig();
            }
            #endregion
            #region drawtimes
            drawTimes = new ListDictionary<Rust.Rarity, int>();

            drawTimes.Add(Rust.Rarity.Common, Convert.ToInt32(Config["DrawTime", "Common"]));

            drawTimes.Add(Rust.Rarity.Uncommon, Convert.ToInt32(Config["DrawTime", "Uncommon"]));

            drawTimes.Add(Rust.Rarity.Rare, Convert.ToInt32(Config["DrawTime", "Rare"]));

            drawTimes.Add(Rust.Rarity.VeryRare, Convert.ToInt32(Config["DrawTime", "VeryRare"]));

            drawTimes.Add(Rust.Rarity.None, Convert.ToInt32(Config["DrawTime", "None"]));
            #endregion
            #region drawusages
            drawTimeModifier = new ListDictionary<Rust.Rarity, int>();

            drawTimeModifier.Add(Rust.Rarity.Common, Convert.ToInt32(Config["DrawTimeModifierMultiuse", "Common"]));

            drawTimeModifier.Add(Rust.Rarity.Uncommon, Convert.ToInt32(Config["DrawTimeModifierMultiuse", "Uncommon"]));

            drawTimeModifier.Add(Rust.Rarity.Rare, Convert.ToInt32(Config["DrawTimeModifierMultiuse", "Rare"]));

            drawTimeModifier.Add(Rust.Rarity.VeryRare, Convert.ToInt32(Config["DrawTimeModifierMultiuse", "VeryRare"]));

            drawTimeModifier.Add(Rust.Rarity.None, Convert.ToInt32(Config["DrawTimeModifierMultiuse", "None"]));
            #endregion
            #region settings
            cancelBPWhenDead = Convert.ToBoolean(Config["Settings", "CancelBPWhenDead"]);

            paperUsageAllowed = Convert.ToBoolean(Config["Settings", "PaperUsageAllowed"]);

            blueprintPartsUsageAllowed = Convert.ToBoolean(Config["Settings", "BlueprintPartsUsageAllowed"]);

            drawTimeModifierEnabled = Convert.ToBoolean(Config["Settings", "EnableDrawTimeModifier"]);

            mulitUseBPsAllowed = Convert.ToBoolean(Config["Settings", "AllowMultiUseBPs"]);

            if (!paperUsageAllowed &&
                !blueprintPartsUsageAllowed)
            {
                paperUsageAllowed = true;

                PrintError("Config-Loader reports that neither paperUsage nor blueprintPartsUsage is allowed. PaperUsage will be allowed by default then.");
            }

            if (PopupNotifications == null &&
                Convert.ToBoolean(Config["Settings", "EnablePopups"]))
                PrintError("PopupNotifications-Plugin missing, can't enable pop-ups. Get the plugin first: http://oxidemod.org/plugins/popup-notifications.1252/");
            else if (PopupNotifications != null &&
                     Convert.ToBoolean(Config["Settings", "EnablePopups"]))
                popupsEnabled = true;
            #endregion

            //Puts("Blueprinter loaded config.");
        }

        void ConfigUpdater()
        {
            PrintWarning(String.Format("Blueprinter updates config from v{0} to v{1}.", Config["Version"].ToString(), this.Version.ToString()));

            while (Config["Version"].ToString() != this.Version.ToString())
                switch (Config["Version"].ToString())
                {
                    #region 1.0.3 || 1.0.4 => 1.0.5
                    case "1.0.3":
                    case "1.0.4":
                        Config["Settings", "DrawTime"] = null;

                        Config["Settings", "EnablePopups"] = false;

                        Config["DrawTime", "Common"] = 10;

                        Config["DrawTime", "Uncommon"] = 30;

                        Config["DrawTime", "Rare"] = 60;

                        Config["DrawTime", "VeryRare"] = 120;

                        Config["DrawTime", "None"] = 0;

                        Config["Localization", "NoPermission"] = "You have no permission to use this command.";

                        if (!permission.PermissionExists("blueprinter.canuse"))
                            permission.RegisterPermission("blueprinter.canuse", this);

                        if (!permission.GroupHasPermission("player", "blueprinter.canuse"))
                            permission.GrantGroupPermission("player", "blueprinter.canuse", this);

                        if (!permission.GroupHasPermission("moderator", "blueprinter.canuse"))
                            permission.GrantGroupPermission("moderator", "blueprinter.canuse", this);

                        if (!permission.GroupHasPermission("admin", "blueprinter.canuse"))
                            permission.GrantGroupPermission("admin", "blueprinter.canuse", this);

                        Config["Version"] = "1.0.5";
                        break;
                    #endregion
                    #region 1.0.5 => 1.0.6
                    case "1.0.5":
                        if (permission.PermissionExists("canuseblueprinter"))
                        {
                            string[] playersWithPermission = permission.GetPermissionUsers("canuseblueprinter");

                            foreach (string s in playersWithPermission)
                                if (permission.UserHasPermission(s.Substring(0, s.IndexOf('(')), "canuseblueprinter"))
                                {
                                    permission.RevokeUserPermission(s.Substring(0, s.IndexOf('(')), "canuseblueprinter");

                                    permission.GrantUserPermission(s.Substring(0, s.IndexOf('(')), "blueprinter.canuse", this);
                                }

                            string[] groupsWithPermission = permission.GetPermissionGroups("canuseblueprinter");

                            foreach (string s in groupsWithPermission)
                                if (permission.GroupHasPermission(s, "canuseblueprinter"))
                                {
                                    permission.RevokeGroupPermission(s, "canuseblueprinter");

                                    permission.GrantGroupPermission(s, "blueprinter.canuse", this);
                                }

                            permission.RemoveGroup("canuseblueprinter");
                        }

                        Config["Settings", "EnablePopups"] = null;

                        Config["Settings", "EnableDrawTimeModifier"] = false;

                        Config["Settings", "AllowMultiUseBPs"] = true;
                        
                        Config["DrawTimeModifierMultiuse", "Common"] = 5;

                        Config["DrawTimeModifierMultiuse", "Uncommon"] = 15;

                        Config["DrawTimeModifierMultiuse", "Rare"] = 30;

                        Config["DrawTimeModifierMultiuse", "VeryRare"] = 60;

                        Config["DrawTimeModifierMultiuse", "None"] = 0;

                        Config["Version"] = "1.0.6";
                        break;
                    #endregion
                    #region 1.0.6 => 1.0.7
                    case "1.0.6":
                        Config["Settings", "EnablePopups"] = false;
                        
                        Config["BlueprintParts", "Common"] = 2;

                        Config["BlueprintParts", "Uncommon"] = 4;

                        Config["BlueprintParts", "Rare"] = 8;

                        Config["BlueprintParts", "VeryRare"] = 16;

                        Config["BlueprintParts", "None"] = 1;

                        Config["BlueprintParts", "CommonType"] = null;

                        Config["BlueprintParts", "UncommonType"] = null;

                        Config["BlueprintParts", "RareType"] = null;

                        Config["BlueprintParts", "VeryRareType"] = null;

                        Config["BlueprintParts", "NoneType"] = null;

                        Config["Localization", "NotEnoughBluePrintParts"] = "The required ammount of research paper to create this blueprint is {0} and you only have {1}.";

                        Config["ZItemAlias", "blueprint_fragment"] = null;
                        
                        Config["ZItemAlias", "blueprint_page"] = null;

                        Config["ZItemAlias", "blueprint_book"] = null;

                        Config["ZItemAlias", "blueprint_library"] = null;

                        Config["ZItemAlias", "researchpaper"] = "Research Paper";

                        Config["Version"] = "1.0.7";
                        break;
                    #endregion
                }

            SaveConfig();
        }

        [ConsoleCommand("blueconf.recreate")]
        void ConsoleCommandConfigRecreate()
        {
            LoadDefaultConfig();

            ConfigLoader();
        }
		
		[ConsoleCommand("blueconf.load")]
        void ConsoleCommandConfigLoad()
		{
            ConfigLoader();
		}

        [ConsoleCommand("blueconf.set")]
        void ConsoleCommandConfigSet(ConsoleSystem.Arg arg)
        {
            if (IsUInt(arg.GetString(2)))
                Config[arg.GetString(0), arg.GetString(1)] = arg.GetUInt(2);
            else if (arg.GetString(2) == "true" ||
                     arg.GetString(2) == "false")
                Config[arg.GetString(0), arg.GetString(1)] = arg.GetBool(2);
            else
                Config[arg.GetString(0), arg.GetString(1)] = arg.GetString(2);

            SaveConfig();

            ConfigLoader();
        }

        [ChatCommand("bluehelp")]
        void ChatCommandHelp(BasePlayer player)
        {
            if (!popupsEnabled)
                SendReply(player, localization["Help"]);
            else
                PopupNotifications.Call("CreatePopupNotification", localization["Help"].Replace("\"", "'"), player);
        }

        [ChatCommand("blueprinter")]
        void ChatCommandBluePrinter(BasePlayer player, string command, string[] args)
        {
            #region permission check
            if (!permission.UserHasPermission(player.UserIDString, "blueprinter.canuse"))
            {
                if (!popupsEnabled)
                    SendReply(player, localization["NoPermission"]);
                else
                    PopupNotifications.Call("CreatePopupNotification", localization["NoPermission"].Replace("\"", "'"), player, 10.0);

                return;
            }
            #endregion
            #region check if player already is drawing
            if (Config["InDrawing"] != null &&
                Config["InDrawing", player.userID.ToString()] != null &&
                Config["InDrawing", player.userID.ToString()].ToString() != String.Empty)
            {
                if (!popupsEnabled)
                    SendReply(player, localization["AlreadyDrawing"]);
                else
                    PopupNotifications.Call("CreatePopupNotification", localization["AlreadyDrawing"].Replace("\"", "'"), player, 10.0);

                return;
            }
            #endregion
            #region check length of arguments + draw usage nums
            int usageNums = 1;

            if (args.Length >= 2)
            {
                if (IsUInt(args[0]) &&
                    mulitUseBPsAllowed)
                {
                    usageNums = Convert.ToInt32(args[0]);

                    args[0] = "";
                }

                args = new string[1] { String.Join(" ", args).Trim() };
            }
            else if (args.Length == 0)
            {
                ChatCommandHelp(player);

                return;
            }
            #endregion
            #region the logic ...
            foreach (ItemBlueprint bp in ItemManager.GetBlueprints())
                if (itemAlias.Contains(bp.targetItem.shortname) &&
                    itemAlias[bp.targetItem.shortname].ToLower() == args[0].ToLower() ||
                    bp.targetItem.displayName.english.ToLower() == args[0].ToLower() ||
                    bp.targetItem.displayName.translated.ToLower() == args[0].ToLower())
                {
                    if (player.blueprints.CanCraft(bp.targetItem.itemid, 0))
                    {
                        if (paperUsageAllowed &&
                            player.inventory.FindItemID(106434956) != null &&
                            player.inventory.FindItemID(106434956).amount >= paperNeeded[bp.rarity] * usageNums || // 106434956 = paper
                            blueprintPartsUsageAllowed &&
                            player.inventory.FindItemID(540154065) != null &&
                            player.inventory.FindItemID(540154065).amount >= blueprintPartsNeeded[bp.rarity] * usageNums) // 540154065 = research paper
                        {
                            #region what to take from player for the draw (if he has enough already got cleared in the above 'if')
                            if (paperUsageAllowed &&
                                player.inventory.FindItemID(106434956) != null &&
                                player.inventory.FindItemID(106434956).amount > paperNeeded[bp.rarity] * usageNums)
                                player.inventory.FindItemID(106434956).amount -= paperNeeded[bp.rarity] * usageNums;
                            else if (paperUsageAllowed &&
                                     player.inventory.FindItemID(106434956) != null &&
                                     player.inventory.FindItemID(106434956).amount == paperNeeded[bp.rarity] * usageNums)
                                player.inventory.FindItemID(106434956).RemoveFromContainer();
                            else
                            {
                                if (player.inventory.FindItemID(540154065).amount == blueprintPartsNeeded[bp.rarity] * usageNums)
                                    player.inventory.FindItemID(540154065).RemoveFromContainer();
                                else
                                    player.inventory.FindItemID(540154065).amount -= blueprintPartsNeeded[bp.rarity] * usageNums;
                            }

                            player.inventory.SendUpdatedInventory(PlayerInventory.Type.Main, player.inventory.containerMain);

                            player.inventory.SendUpdatedInventory(PlayerInventory.Type.Belt, player.inventory.containerBelt);
                            #endregion

                            if (drawTimes[bp.rarity] != 0)
                            {
                                #region timed stuff
                                if (!popupsEnabled)
                                    SendReply(player, String.Format(localization["BPIsDrawing"], (drawTimes[bp.rarity] + (drawTimeModifierEnabled ? (usageNums - 1) * drawTimeModifier[bp.rarity] : 0)).ToString()));
                                else
                                    PopupNotifications.Call("CreatePopupNotification", String.Format(localization["BPIsDrawing"], drawTimes[bp.rarity].ToString()).Replace("\"", "'"), player, 10.0);

                                Config["InDrawing", player.UserIDString] = bp.targetItem.itemid + "x" + usageNums.ToString();

                                SaveConfig();

                                Action timed = new Action(() => TimedBluePrint(player.userID.ToString()));

                                timer.In(drawTimes[bp.rarity] + (drawTimeModifierEnabled ? (usageNums - 1) * drawTimeModifier[bp.rarity] : 0), timed);
                                #endregion
                            }
                            else
                            {
                                #region untimed stuff
                                Item item = ItemManager.Create(ItemManager.FindItemDefinition(-1887162396)); //bp base == -1887162396

                                item.blueprintTarget = bp.targetItem.itemid;

                                item.blueprintAmount = usageNums;

                                player.GiveItem(item);
                                #endregion
                            }
                        }
                        else
                        {
                            #region dude get (more) stuff to draw on
                            if (paperUsageAllowed)
                            {
                                if (!popupsEnabled)
                                    SendReply(player, String.Format(localization["NotEnoughPaper"], (paperNeeded[bp.rarity] * usageNums).ToString(), player.inventory.FindItemID(106434956) != null ? player.inventory.FindItemID(106434956).amount.ToString() : "0"));
                                else
                                    PopupNotifications.Call("CreatePopupNotification", String.Format(localization["NotEnoughPaper"], paperNeeded[bp.rarity].ToString(), player.inventory.FindItemID(106434956) != null ? player.inventory.FindItemID(106434956).amount.ToString() : "0").Replace("\"", "'"), player, 10.0);
                            }

                            if (blueprintPartsUsageAllowed)
                            {
                                if (!popupsEnabled)
                                    SendReply(player, String.Format(localization["NotEnoughBluePrintParts"], blueprintPartsNeeded[bp.targetItem.rarity].ToString(), player.inventory.FindItemID(540154065) != null ? player.inventory.FindItemID(540154065).amount.ToString() : "0"));
                                else
                                    PopupNotifications.Call("CreatePopupNotification", String.Format(localization["NotEnoughBluePrintParts"], blueprintPartsNeeded[bp.targetItem.rarity].ToString(), player.inventory.FindItemID(540154065) != null ? player.inventory.FindItemID(540154065).amount.ToString() : "0").Replace("\"", "'"), player, 10.0);
                            }
                            #endregion
                        }
                    }
                    else
                        if (!popupsEnabled)
                            SendReply(player, localization["BPNotLearned"]);
                        else
                            PopupNotifications.Call("CreatePopupNotification", localization["BPNotLearned"].Replace("\"", "'"), player, 10.0);

                    return;
                }


            if (!popupsEnabled)
                SendReply(player, String.Format(localization["ItemNotFound"], args[0]));
            else
                PopupNotifications.Call("CreatePopupNotification", String.Format(localization["ItemNotFound"], args[0]).Replace("\"", "'"), player, 10.0);
            #endregion
        }

        [ChatCommand("debug")]
        void ChatCommandDebug(BasePlayer player)
        {
            SendReply(player, player.inventory.containerMain.GetSlot(0).info.displayName.english + " " + player.inventory.containerMain.GetSlot(0).info.shortname + " " + player.inventory.containerMain.GetSlot(0).info.itemid.ToString());
        }
        
        void OnEntityDeath(BaseCombatEntity entity, HitInfo hitInfo)
        {
            if (hitInfo == null ||
                hitInfo.Initiator == null ||
                hitInfo.Initiator.ToPlayer() == null)
                return;

            BasePlayer player = hitInfo.Initiator.ToPlayer();

            if (player.userID != null &&
                Config["InDrawing"] != null &&
                Config["InDrawing", player.userID.ToString()] != null &&
                Config["InDrawing", player.userID.ToString()].ToString() != String.Empty &&
                cancelBPWhenDead)
            {
                Config["InDrawing", player.userID.ToString()] = "";

                SaveConfig();
            }
        }

        void TimedBluePrint(string playerID)
        {
            BasePlayer player = BasePlayer.FindByID(Convert.ToUInt64(playerID));

            if (Config["InDrawing"] == null ||
                Config["InDrawing", player.userID.ToString()] == null ||
                Config["InDrawing", player.userID.ToString()].ToString() == String.Empty)
                return;

            Item item = ItemManager.Create(ItemManager.FindItemDefinition(-1887162396)); //bp base == -1887162396

            item.blueprintTarget = Convert.ToInt32(Config["InDrawing", playerID].ToString().Substring(0, Config["InDrawing", playerID].ToString().LastIndexOf('x')));

            item.blueprintAmount = Convert.ToInt32(Config["InDrawing", playerID].ToString().Substring(Config["InDrawing", playerID].ToString().IndexOf('x') + 1)); ;

            if (player == null)
            {
                PrintError(String.Format("Timed blueprint \"{0}\" could not be delivered, player \"{1}\" not found.", itemAlias.Contains(item.blueprintTargetDef.shortname) && itemAlias[item.blueprintTargetDef.shortname] != "" ? itemAlias[item.blueprintTargetDef.shortname] : item.blueprintTargetDef.displayName.english, playerID));

                Config["FailedDelivery", playerID] = (Config["FailedDelivery", playerID].ToString() != String.Empty ? Config["FailedDelivery", playerID].ToString() + "," : "") + Config["InDrawing", playerID].ToString();

                Config["InDrawing", playerID] = "";

                SaveConfig();

                return;
            }
            else if (player.IsDead() &&
                     !cancelBPWhenDead)
            {
                PrintWarning(String.Format("Player \"{0}\" is dead, delivery for blueprint ({1}) will be postponed by 30 seconds.", playerID, itemAlias.Contains(item.blueprintTargetDef.shortname) && itemAlias[item.blueprintTargetDef.shortname] != "" ? itemAlias[item.blueprintTargetDef.shortname] : item.blueprintTargetDef.displayName.english));

                Action timed = new Action(() => TimedBluePrint(player.userID.ToString()));

                timer.In(30, timed);

                return;
            }
            else if (!player.IsSleeping())
                if (!popupsEnabled)
                    SendReply(player, String.Format(localization["BPDelivery"], itemAlias.Contains(item.blueprintTargetDef.shortname) && itemAlias[item.blueprintTargetDef.shortname] != "" ? itemAlias[item.blueprintTargetDef.shortname] : item.blueprintTargetDef.displayName.english));
                else
                    PopupNotifications.Call("CreatePopupNotification", String.Format(localization["BPDelivery"], itemAlias.Contains(item.blueprintTargetDef.shortname) && itemAlias[item.blueprintTargetDef.shortname] != "" ? itemAlias[item.blueprintTargetDef.shortname] : item.blueprintTargetDef.displayName.english).Replace("\"", "'"), player, 10.0);

            Config["InDrawing", playerID] = "";

            SaveConfig();

            player.GiveItem(item);
        }

        static bool IsUInt(string s)
        {
            Regex _uint = new Regex("^\\d*$");

            return _uint.Match(s).Success;
        }
    }
}


// --- End of file: BluePrinter.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/QuarryFactory.cs ---
// --- Original Local Path: QuarryFactory.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;


namespace Oxide.Plugins
{
	[Info("QuarryFactory", "Masteroliw", "1.0.3" , ResourceId = 1376)]
	[Description("Spawn items inside the quarry when it gathers resources")]
	public class QuarryFactory : RustPlugin
	{  

		#region OnQuarryGather

		void OnQuarryGather(MiningQuarry quarry, Item item)
		{
			var sulfur = ItemManager.CreateByName("sulfur.ore", 1);
			var metal = ItemManager.CreateByName("metal.ore", 1);
			var frags = ItemManager.CreateByName("metal.fragments", 1);
			var stones = ItemManager.CreateByName("stones", 1);
			var hqm = ItemManager.CreateByName("hq.metal.ore", 1);

			int randomnumber;
			System.Random generator = new System.Random ();
			
			randomnumber = generator.Next (1, 101);
			
			if (item.info.itemid == sulfur.info.itemid) {
				callSpawn ("SulfurOre", randomnumber, quarry);
				if (!(bool)Config["Options", "SulfurOreGather"]){
					item.amount = 0;
					item.Remove(0f);
					return;

				}
				return;
			}
			if (item.info.itemid == metal.info.itemid) {
				callSpawn ("MetalOre", randomnumber, quarry);
				if (!(bool)Config["Options", "MetalOreGather"]){
					item.amount = 0;
					item.Remove(0f);
					return;
				}
				return;
			}
			if (item.info.itemid == frags.info.itemid) {
				callSpawn ("MetalFrags", randomnumber, quarry);
				if (!(bool)Config["Options", "MetalFragsGather"]){
					item.amount = 0;
					item.Remove(0f);
					return;
				}
				return;
			}
			if (item.info.itemid == stones.info.itemid) {
				callSpawn ("Stones", randomnumber, quarry);
				if (!(bool)Config["Options", "StonesGather"]){
					item.amount = 0;
					item.Remove(0f);
					return;
				}
				return;
			}
			if (item.info.itemid == hqm.info.itemid) {
				callSpawn ("HQMetalOre", randomnumber, quarry);
				if (!(bool)Config["Options", "HighQualityMetalOreGather"]){
					item.amount = 0;
					item.Remove(0f);
					return;
				}
				return;
			}
			return;
			
		}

		#endregion

		#region callSpawn

		public void callSpawn (string name, int randomnumber, MiningQuarry quarry)
		{
			int t = 1;
			string item1 = "Item" + t;
			
			if ((string)Config[item1, "Item"] == null) {
				return;
			}
			
			do {
				
				string itemslot = "Item" + t;
				if ((string)Config[itemslot, "Item"] != null){
					if ((bool)Config [itemslot, "Active"]) {
						if ( name == (string)Config[itemslot, "SpawnsOn"] ) {
							
							if (randomnumber >= (int)Config[itemslot, "RandomNumberMin"] && randomnumber <= (int)Config[itemslot, "RandomNumberMax"]) {
								
								var gather = ItemManager.CreateByName((string)Config[itemslot, "Item"], (int)Config[itemslot, "Amount"]);	
								gather.MoveToContainer(quarry.hopperPrefab.instance.GetComponent<StorageContainer>().inventory);
								
							}
						}
					}
				} else {
					break;
				}
				
				t++;
				
			} while (t != 100);
			
			return;
		}

		#endregion

		#region LoadDefaultConfig
		
		protected override void LoadDefaultConfig()
		{
			PrintWarning("Creating a new configuration file.");
			Config.Clear();
			Config ["Options", "SulfurOreGather"] = false;
			Config ["Options", "MetalOreGather"] = false;
			Config ["Options", "MetalFragsGather"] = false;
			Config ["Options", "StonesGather"] = false;
			Config ["Options", "HighQualityMetalOreGather"] = false;
			SaveConfig();
		}

		#endregion

		#region Help Command

		[ChatCommand("help")]
		private void HelpCommand(BasePlayer player, string command, string[] args)
		{ 
			if (args.Length == 0) {
				PrintToChat (player, "/QF shows information about Quarry Controller.");
			}
		}

		#endregion

		#region QuarryFactory Commands

		[ChatCommand("QF")]
		private void QF(BasePlayer player, string command, string[] args)
		{ 
			int t = 1; 
			int c = 0;


			#region QuarryFactory Information Command

			if (args.Length == 0) {
				PrintToChat (player, "Type /QF and either of SulfurOre, MetalOre, MetalFrags, Stones, HQMetalOre");
				PrintToChat (player, "The command shows what items currently spawn and how common they occour, when that resource gets gathered");
				if (HasAccess(player))
				{
					PrintToChat (player, "The current item list can be found at the oxide docs for rust: (http://docs.oxidemod.org/rust/#item-list)");
					PrintToChat (player, "/QF NewItem (Item ShortName) (Amount) (RandomNumberMin) (RandomNumberMax) (ResourceType)");
					PrintToChat (player, "/QF EditItem (Item slot) (Item ShortName) (Amount) (RandomNumberMin) (RandomNumberMax) (ResourceType)");
					PrintToChat (player, "/QF Enable (Item slot)");
					PrintToChat (player, "/QF Disable (Item slot)");
					return;
				}
				return;
		    }

			#endregion

			#region Show items by resource type Command
			if (args.Length > 0) {
				string arg2 = args [0];
				string arg = GetResourceTypes (arg2);
				if (args [0] == arg) {
					do {
						string item = "Item" + t;

							if (args [0] == (string)Config [item, "SpawnsOn"]) 
							{
								PrintToChat (player ,"Item slot: " + item + " Item: " +
								             Config [item, "Item"] + " Amount: " + 
								             Config [item, "Amount"] + " RandomNumberMin: " + 
								             Config [item, "RandomNumberMin"] + " RandomNumberMax: " + 
								             Config [item, "RandomNumberMax"] + " Active: " + 
								             Config [item, "Active"]);
								c++;
							}

						if ((string)Config [item, "Item"] == null) {
							break;
						}
						t++; 
						
					} while (t != 100);
					
					if (c == 0){
						PrintToChat (player, "There's no items currently set to spawn on this resource");
					}
					return;
				}
		    }
			#endregion

			#region NewItem Command

			if (args [0] == "NewItem" || args [0] == "newitem") {
				if (HasAccess(player))
				{
					string arg2 = args [5];
					string arg = GetResourceTypes (arg2);
					if (args [5] == arg) {
						if (args.Length == 6) {
							do {
								string item = "Item" + t;
								if (Config [item, "Item"] == null) {
									int amount = Int32.Parse(args [2]);
									int min = Int32.Parse(args [3]);
									int max = Int32.Parse(args [4]);
									Config [item, "Item"] = args [1];
									Config [item, "Amount"] = amount;
									Config [item, "RandomNumberMin"] = min;
									Config [item, "RandomNumberMax"] = max;
									Config [item, "SpawnsOn"] = args[5];
									Config [item, "Active"] = true;
									SaveConfig();
									PrintToChat (player, "New item has filled slot " + item);
									break;
								}
								t++;
							} while (t != 100);
							return;
						}
						else {
							PrintToChat (player, "Insufficient/Too many arguments");
							return;
						}
					} else {
						PrintToChat (player, "Invalid ResourceType: " + args[5]);
						return;
					}
				} else {
					PrintToChat (player, "You don't have access to this command");
					return;
				}
			}
			#endregion
			 
			#region EditItem Command

			if (args [0] == "EditItem" || args [0] == "edititem") {
				if (HasAccess(player)){
					string arg2 = args [0];
					string arg = GetResourceTypes (arg2);
					if (args [1] == arg) {
						if (args.Length == 7 && (string)Config [args [1], "Item"] != null) {
							int amount = Int32.Parse(args [3]);
							int min = Int32.Parse(args [4]);
							int max = Int32.Parse(args [5]);
							Config [args [1], "Item"] = args [2];
							Config [args [1], "Amount"] = amount;
							Config [args [1], "RandomNumberMin"] = min;
							Config [args [1], "RandomNumberMax"] = max;
							Config [args [1], "SpawnsOn"] = args [6];
							Config [args [1], "Active"] = true;
							SaveConfig();
							PrintToChat (player, args [1] + " has been edited");
							return;
						} 
						if (args.Length == 7 && (string)Config [args [1], "Item"] == null) {
							int amount = Int32.Parse(args [3]);
							int min = Int32.Parse(args [4]);
							int max = Int32.Parse(args [5]);
							Config [args [1], "Item"] = args [2];
							Config [args [1], "Amount"] = amount;
							Config [args [1], "RandomNumberMin"] = min;
							Config [args [1], "RandomNumberMax"] = max;
							Config [args [1], "SpawnsOn"] = args [6];
							Config [args [1], "Active"] = true;
							SaveConfig();
							PrintToChat (player, args [1] + " did not exist, but has been now created");
							return;
						}
						else {
							PrintToChat (player, "Insufficient/Too many arguments");
							return;
						}
					} else {
						PrintToChat (player, "Invalid ResourceType: " + args[5]);
						return;
					}
				} else {
					PrintToChat (player, "You don't have access to this command");
					return;
				}
			}
			#endregion

			#region Disable and Enable Commands

			if (args [0] == "EnableItem" || args [0] == "enableitem"){
				if (HasAccess(player)){
					if (args.Length == 2) {
						if (Config [args [1], "Active"] != null) {
							Config [args [1], "Active"] = true;
							SaveConfig();
							PrintToChat (player, args [1] + " has been enabled");
							return;
						} else {
							PrintToChat (player, "The item you're trying to enable doesn't exist.");
							return;
						}
					} else {
						PrintToChat (player, "Insufficient/Too many arguments");
						return;
					}
				} else {
					PrintToChat (player, "You don't have access to this command");
					return;
				}
			}
			if (args [0] == "DisableItem" || args [0] == "disableitem"){
				if (HasAccess(player)){
					if (args.Length == 2) {
						if ((string)Config [args [1], "Active"] != null) {
							Config [args [1], "Active"] = false;
							SaveConfig();
							PrintToChat (player, args [1] + " has been disabled");
							return;
						} else {
							PrintToChat (player, "The item you're trying to disable doesn't exist.");
							return;
						}
					} else {
						PrintToChat (player, "Insufficient/Too many arguments");
						return;
					}
				} else {
					PrintToChat (player, "You don't have access to this command");
					return;
				}
			} 
			#endregion

			PrintToChat (player, "Either the command you have just typed does not exist, or you have not typed it correctly");

		} 
		#endregion

		#region GetResourceTypes

		public static string GetResourceTypes(string arg) {
			if ("SulfurOre" == arg) {
				return arg;
			}
			if ("MetalOre" == arg) {
				return arg;
			}
			if ("MetalFrags" == arg) {
				return arg;
			}
			if ("Stones" == arg) {
				return arg;
			}
			if ("HQMetalOre" == arg) {
				return arg;
			}
			return null;
		}

		#endregion

		bool HasAccess(BasePlayer player)
		{
			if (player.net.connection.authLevel > 1) {
				return true;
			}
			return false;
		} 
	} 
} 



// --- End of file: QuarryFactory.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/MenuHelp.cs ---
// --- Original Local Path: MenuHelp.cs ---

﻿using Oxide.Core;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Oxide.Core.Configuration;

namespace Oxide.Plugins
{
    [Info("Menu Help", "OxideBro", "0.1.1")]
    class MenuHelp : RustPlugin
    {
        #region Class
        public class MenuList
        {
            public string Type;
            public string NameUI;
            public string Command;
            public int FrontSize;
            public string BackgroundColor;
            public List<Messages> MessagesList = new List<Messages>();
        }

        public class Messages
        {
            public string Message;
            public string Date;
        }
        
        #endregion

        #region Config
        string Title;
        string AnchorMin;
        string AnchorMax;
        string ButtonsColor;
        string BackgroundColor;
        bool EnabledLogin;
        protected override void LoadDefaultConfig()
        {
            GetVariable(Config, "Титл главного раздела", out Title, "МЕНЮ ПОМОЩИ ИГРОКАМ");
            GetVariable(Config, "Anchor Min основного меню", out AnchorMin, "0.25 0.1993055");
            GetVariable(Config, "Anchor Max основного меню", out AnchorMax, "0.75 0.8006945");
            GetVariable(Config, "Цвет фона основного меню", out BackgroundColor, "0 0 0 0.50");
            GetVariable(Config, "Цвет кнопок основного меню", out ButtonsColor, "0.92 0.28 0.28 0.7");
            GetVariable(Config, "Открывать меню при каждом заходе игрока", out EnabledLogin, false);
            SaveConfig();
        }

        public static void GetVariable<T>(DynamicConfigFile config, string name, out T value, T defaultValue)
        {
            config[name] = value = config[name] == null ? defaultValue : (T)Convert.ChangeType(config[name], typeof(T));
        }
        #endregion


        #region UI
        private string Layer = "HELP";

        private void HelpGUI(BasePlayer player, bool section = false, string name = "", bool bReturn = false, int numbr = 0)
        {
            if (player.HasPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot))
            {
                timer.In(1, () => HelpGUI(player));
            }
            CuiHelper.DestroyUi(player, Layer);
            Dictionary<string, string> List = new Dictionary<string, string>();
            var container = new CuiElementContainer();
            float gap = -0.0f;
            float width = 0.3f;
            float height = 0.27f;
            float startxBox = 0.05f;
            float startyBox = 0.85f - height;
            float xmin = startxBox;
            float ymin = startyBox;
            var reply = 540;
            if (reply == 0) { }
            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = AnchorMin, AnchorMax = AnchorMax },
                Image = { Color = BackgroundColor }
            }, "Hud", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0.92", AnchorMax = $"1 1" },
                Button = { Color = "0.03 0.03 0.03 0.5" },
                Text = { Text = Title, Font = "robotocondensed-bold.ttf", FontSize = 21, Align = TextAnchor.MiddleCenter }
            }, Layer);

            if (bReturn)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.88 0.92", AnchorMax = "0.9479111 0.999" },
                    Button = { Color = ButtonsColor, Command = "help" },
                    Text = { Text = "<", Font = "robotocondensed-bold.ttf", FontSize = 23, Align = TextAnchor.MiddleCenter }
                }, Layer);
            }

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.95 0.92", AnchorMax = "0.999 0.998" },
                Button = { Color = "0.93 0.35 0.36 1.00", Close = Layer },
                Text = { Text = "X", Font = "robotocondensed-bold.ttf", FontSize = 23, Align = TextAnchor.MiddleCenter }
            }, Layer);

            if (section)
            {
                foreach (var message in menuElement[name].MessagesList)
                {
                    if (List.ContainsKey(message.Message))
                    {
                        Puts($"В разделе {name} найдены дублирующиеся сообщения, они убраны с показа");
                        continue;
                    }
                    List.Add(message.Message, message.Date);
                    if (List.Count == 0)
                    {
                        PrintWarning($"Внимание! У раздела [{menuElement[name].Type}] нету сообщений, раздел отключен!");
                        SendReply(player, "Извините но в данный момент нету сообщений по данному разделу.");
                        return;
                    }

                }
                container.Add(new CuiPanel()
                {
                    CursorEnabled = true,
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0.999 0.9198" },
                    Image = { Color = menuElement[name].BackgroundColor, FadeIn = 0.5f },
                    FadeOut = 0.5f,
                }, Layer, $"ui.menu.{name}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0.86", AnchorMax = "1 0.92" },
                    Button = { Color = "0 0 0 0" },
                    Text = { Text = menuElement[name].NameUI, Font = "robotocondensed-bold.ttf", FontSize = 22, Align = TextAnchor.MiddleCenter },
                    FadeOut = 0.5f,
                }, $"ui.menu.{name}");

                foreach (var Messages in List)
                {
                    if (numbr > 0)
                    {
                        var List1 = List.Skip(numbr);
                        foreach (var nubm2 in List1)
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0.1 0", AnchorMax = "0.9 0.83" },
                                Button = { Color = "0 0 0 0" },
                                Text = { Text = nubm2.Key, Font = "robotocondensed-bold.ttf", FontSize = menuElement[name].FrontSize, Align = TextAnchor.UpperLeft, FadeIn = 1f }
                            }, $"ui.menu.{name}");
                            if (name == "news")
                            {
                                container.Add(new CuiButton
                                {
                                    RectTransform = { AnchorMin = "0.38 0.03", AnchorMax = "0.62 0.13" },
                                    Button = { Color = ButtonsColor },
                                    Text = { Text = nubm2.Value, Font = "robotocondensed-bold.ttf", FontSize = 16, Align = TextAnchor.MiddleCenter }
                                }, Layer, $"ui.menu.{name}");
                            }
                            if (List1.Count() > 1)
                            {
                                container.Add(new CuiButton
                                {
                                    RectTransform = { AnchorMin = "0.7 0.03", AnchorMax = "0.89 0.13" },
                                    Button = { Color = ButtonsColor, Command = $"next.page {name} {numbr + 1}" },
                                    Text = { Text = "Дальше", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter }
                                }, Layer, $"ui.menu.{name}");
                                break;
                            }

                        }
                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = "0.11 0.03", AnchorMax = "0.30 0.13" },
                            Button = { Color = ButtonsColor, Command = $"next.page {name} {numbr - 1}" },
                            Text = { Text = "Назад", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter }
                        }, Layer, $"ui.menu.{name}");
                        CuiHelper.AddUi(player, container);
                        return;
                    }
                    else
                    {
                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = "0.1 0", AnchorMax = "0.9 0.83" },
                            Button = { Color = "0 0 0 0" },
                            Text = { Text = Messages.Key, Font = "robotocondensed-bold.ttf", FontSize = menuElement[name].FrontSize, Align = TextAnchor.UpperLeft, FadeIn = 1f }
                        }, $"ui.menu.{name}");

                        if (name == "news")
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0.38 0.03", AnchorMax = "0.62 0.13" },
                                Button = { Color = ButtonsColor },
                                Text = { Text = Messages.Value, Font = "robotocondensed-bold.ttf", FontSize = 16, Align = TextAnchor.MiddleCenter }
                            }, Layer, $"ui.menu.{name}");
                        }
                        if (List.Count > 1)
                        {
                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0.7 0.03", AnchorMax = "0.89 0.13" },
                                Button = { Color = ButtonsColor, Command = $"next.page {name} {+1}" },
                                Text = { Text = "Дальше", Font = "robotocondensed-bold.ttf", FontSize = 20, Align = TextAnchor.MiddleCenter }
                            }, Layer, $"ui.menu.{name}");
                            break;
                        }
                    }

                }
                CuiHelper.AddUi(player, container);
                return;
            }

            int current = 1;

            foreach (var check in menuElement)
            {
                container.Add(new CuiButton()
                {
                    Button = { Command = $"MENUOPEN {menuElement[check.Key].Command}", Color = ButtonsColor, FadeIn = 0.5f },
                    RectTransform = {
                        AnchorMin = xmin + " " + ymin,
                        AnchorMax = (xmin + width) + " " + (ymin + height *1),
                        OffsetMax = "-1 -1",
                        OffsetMin = "5 5",
                    },
                    Text = { Text = $"{menuElement[check.Key].NameUI}", Align = TextAnchor.MiddleCenter, Color = "1 1 1 1", FontSize = 18 }
                },
                 Layer, $"ui.menu.{menuElement[check.Key].Type}");
                xmin += width + gap;

                if (xmin + width >= 1)
                {
                    xmin = startxBox;
                    ymin -= height + gap;
                }
                current++;

                if (current > 9)
                {
                    PrintWarning("Количество элементов превысило максимальную вместительность UI, отображено 9 позиций");
                    break;
                }
            }
            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Commands
        [ConsoleCommand("menu")]
        void cmdConsoleHelp(ConsoleSystem.Arg args)
        {
            HelpGUI(args.Player());
        }

        [ConsoleCommand("next.page")]
        void cmdNewxt(ConsoleSystem.Arg args)
        {
            var name = args.Args[0];
            var amount = int.Parse(args.Args[1]);
            HelpGUI(args.Player(), true, name, true, amount);
        }

        [ChatCommand("menu")]
        void cmdChatHelp(BasePlayer player, string command, string[] args) => HelpGUI(player);

        [ChatCommand("news")]
        void cmdChatNews(BasePlayer player, string command, string[] args)
        {
            if (player == null || !player.IsAdmin) return;

            if (args.Length == 0 || args.Length < 1)
            {
                SendReply(player, "Используйте /news add Новость");
                return;
            }

            if (args.Length >= 1 && args[0] == "add")
            {
                string Msg = "";
                for (int i = 1; i < args.Length; i++)
                    Msg += " " + args[i];

                if (!menuElement.ContainsKey("news"))
                {
                    SendReply(player, "Раздела NEWS не существует, перед созданием сообщений создайте раздел, а после добавляйте новости");
                    return;
                }
                menuElement["news"].MessagesList.Add(new Messages
                {
                    Message = Msg,
                    Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                });

                Interface.Oxide.DataFileSystem.WriteObject("MenuHelp", menuElement);
                SendReply(player, $"Вы добавили новость, с текстом: {Msg}");
            }
        }

        [ConsoleCommand("MENUOPEN")]
        void cmdConsoleHelpOpen(ConsoleSystem.Arg args)
        {
            Puts("1");
            string name = args.FullString.Split('+')[0];
            var player = args.Player();
            if (name.ToLower().Contains("/"))
            {
                Puts("1");
                CuiHelper.DestroyUi(player, Layer);
                player.Command($"chat.say {name}");
            }
            else
                HelpGUI(args.Player(), true, name, true);

        }
        #endregion

        #region Data
        public Dictionary<string, MenuList> menuElement = new Dictionary<string, MenuList>();

        private void LoadData()
        {
            if (Interface.Oxide.DataFileSystem.ExistsDatafile("MenuHelp"))
                menuElement = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<string, MenuList>>("MenuHelp");
            else
            {
                menuElement.Add("news", new MenuList()
                {
                    Type = "news",
                    NameUI = "НОВОСТИ",
                    Command = "news",
                    FrontSize = 20,
                    BackgroundColor = "0.24 0.68 0.72 0.0",
                    MessagesList = new List<Messages>
                    {
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                        },
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                       }
                    }
                });
                menuElement.Add("rules", new MenuList()
                {
                    Type = "rules",
                    NameUI = "ПРАВИЛА",
                    Command = "rules",
                    FrontSize = 20,
                    BackgroundColor = "0.24 0.68 0.72 0.0",
                    MessagesList = new List<Messages>
                    {
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                       },
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                       }
                    }
                });
                menuElement.Add("help", new MenuList()
                {
                    Type = "help",
                    NameUI = "ПОМОЩЬ",
                    Command = "help",
                    FrontSize = 20,
                    BackgroundColor = "0.24 0.68 0.72 0.0",
                    MessagesList = new List<Messages>
                    {
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                       },
                       new Messages
                       {
                           Message = "",
                           Date = DateTime.UtcNow.ToString("dd.MM.yyyy HH:mm")
                       }
                    }
                });
                menuElement.Add("shop", new MenuList()
                {
                    Type = "shop",
                    NameUI = "МАГАЗИН\n/shop",
                    Command = "/shop",
                    FrontSize = 20,
                    BackgroundColor = "0.24 0.68 0.72 0.0",
                    MessagesList = new List<Messages> { }
                });
                menuElement.Add("case", new MenuList()
                {
                    Type = "case",
                    NameUI = "КЕЙСЫ\n/case",
                    Command = "/case",
                    FrontSize = 20,
                    BackgroundColor = "0.24 0.68 0.72 0.0",
                    MessagesList = new List<Messages> { }
                });
                Interface.Oxide.DataFileSystem.WriteObject("MenuHelp", menuElement);
            }
        }
        #endregion

        #region Core
        private void CheckData()
        {
            foreach (var button in menuElement)
            {
                if (string.IsNullOrEmpty(menuElement[button.Key].Command))
                {
                    PrintError($"Внимание! У кнопки {button.Key} не установлена команда!");
                    continue;
                }

                foreach (var Messages in menuElement[button.Key].MessagesList)
                {
                    if (string.IsNullOrEmpty(Messages.Message))
                    {
                        PrintError($"Внимание! В разделе {button.Key} не созданы сообщения!");
                    }
                }
            }
        }

        #endregion

        #region Oxide
        private void OnServerInitialized()
        {
            LoadDefaultConfig();
            LoadData();
            CheckData();
        }

        void OnPlayerInit(BasePlayer player)
        {
         if (EnabledLogin) HelpGUI(player);
        }


        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
            }
        }
        #endregion
    }
}
            

// --- End of file: MenuHelp.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/DeathNotices.cs ---
// --- Original Local Path: DeathNotices.cs ---

﻿using System.Text.RegularExpressions;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using Oxide.Core.Plugins;
using Newtonsoft.Json;
using System.Linq;
using Oxide.Core;
using System;
using Oxide.Game.Rust.Cui;


namespace Oxide.Plugins
{
    [Info("DeathNotices", "Stifler", "1.0.0")]
    [Description("Broadcast deaths with many details")]
    class DeathNotices : RustPlugin
    {

     #region Global Declaration

        bool debug = false;
     //   bool killReproducing = false;

        Dictionary<ulong, HitInfo> LastWounded = new Dictionary<ulong, HitInfo>();		
        Dictionary<string, string> reproduceableKills = new Dictionary<string, string>();		
        Dictionary<BasePlayer, Timer> timers = new Dictionary<BasePlayer, Timer>();		
        Dictionary<ulong, PlayerSettings> playerSettings = new Dictionary<ulong, PlayerSettings>();		

        static DeathNotices dn;

     #region Cached Variables

        //DeathHUD
        float AnchorMaxY = 0.97f;

        List<string> killsCache = new List<string>();
        List<Timer> killsTimer = new List<Timer>();
        /////////

        UIColor deathNoticeShadowColor = new UIColor(0.1, 0.1, 0.1, 0.8);
        UIColor deathNoticeColor = new UIColor(0.85, 0.85, 0.85, 0.1);

        List<string> selfInflictedDeaths = new List<string> 
		{ 
            "Cold","Drowned", "Heat", 
			"Suicide", "Generic",
			"Posion", "Radiation", 
			"Thirst", "Hunger", "Fall"			
        };

        List<DeathReason> SleepingDeaths = new List<DeathReason>
        {
            DeathReason.Animal,
            DeathReason.Blunt,
            DeathReason.Bullet,
            DeathReason.Explosion,
            DeathReason.Generic,
            DeathReason.Helicopter,
            DeathReason.Slash,
            DeathReason.Stab,
            DeathReason.Unknown
        };

        List<Regex> regexTags = new List<Regex>
        {
            new Regex(@"<color=.+?>", RegexOptions.Compiled),
            new Regex(@"<size=.+?>", RegexOptions.Compiled)
        };

        List<string> tags = new List<string>
        {
            "</color>",
            "</size>",
            "<i>",
            "</i>",
            "<b>",
            "</b>"
        };
		
//=====================Конфиг=====================//

		// Радиус сообщения
		bool MessageRadiusEnabled;
		float MessageRadius;

		// Где должно появиться сообщение?
		bool LogToFile;
		bool WriteToConsole;
		bool UseSimpleUI = true;

		// Прикрепленные обвесы
		string AttachmentSplit;
		string AttachmentFormatting;

		// Остальные
		string ChatTitle;
		string ChatFormatting;
		string ConsoleFormatting;

		// Цвета            
		string TitleColor;
		string VictimColor;
		string AttackerColor;
		string WeaponColor;
		string AttachmentColor;
		string DistanceColor;
		string BodypartColor;
		string MessageColor;

		// Локализация
		Dictionary<string, object> Names;
		Dictionary<string, object> Bodyparts;
		Dictionary<string, object> Weapons;
		Dictionary<string, object> Attachments;

		// Сообщения
		Dictionary<string, List<string>> Messages;                  

		// Остальные
		bool SimpleUI_StripColors;

		// Масштабирование & Позиционирование
		int SimpleUI_FontSize;

        // Интерфейс UI
		float SimpleUI_Top;
		float SimpleUI_Left;
		float SimpleUI_MaxWidth;
		float SimpleUI_MaxHeight;

		// Таймер
		float SimpleUI_HideTimer;
					
        #endregion
        #endregion        
        #region Classes

        class UIColor
        {
            string color;
			
            public UIColor(double red, double green, double blue, double alpha)
            {
                color = $"{red} {green} {blue} {alpha}";
            }
			
            public override string ToString() => color;
        }

        class UIObject
        {
            List<object> ui = new List<object>();
            List<string> objectList = new List<string>();
			
            public UIObject()
            {
            }

            string RandomString()
            {
                const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
                List<char> charList = chars.ToList();
				
                string random = "";
				
                for (int i = 0; i <= UnityEngine.Random.Range(5, 10); i++)
                    random = random + charList[UnityEngine.Random.Range(0, charList.Count - 1)];
				
                return random;
            }

            public void Draw(BasePlayer player)
            {
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo() { connection = player.net.connection }, null, "AddUI", new Facepunch.ObjectList(JsonConvert.SerializeObject(ui).Replace("{NEWLINE}", Environment.NewLine)));
            }

            public void Destroy(BasePlayer player)
            {
                foreach (string uiName in objectList)
                    CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo() { connection = player.net.connection }, null, "DestroyUI", new Facepunch.ObjectList(uiName));
            }

            public string AddText(string name, double left, double top, double width, double height, UIColor color, string text, int textsize = 20, string parent = "HUD/Overlay", int alignmode = 0, float fadeIn = 0f, float fadeOut = 0f  )
            {
                // name = name + RandomString();
                text = text.Replace("\n", "{NEWLINE}");
                string align = "";

                switch (alignmode)
                {
                    case 0: { align = "LowerCenter"; break; };
                    case 1: { align = "LowerLeft"; break; };
                    case 2: { align = "LowerRight"; break; };
                    case 3: { align = "MiddleCenter"; break; };
                    case 4: { align = "MiddleLeft"; break; };
                    case 5: { align = "MiddleRight"; break; };
                    case 6: { align = "UpperCenter"; break; };
                    case 7: { align = "UpperLeft"; break; };
                    case 8: { align = "UpperRight"; break; };
                }

                ui.Add(new Dictionary<string, object> {
                    {"name", name},
                    {"parent", parent},
                    {"fadeOut", fadeOut.ToString()},
                    {"components",
                        new List<object> {
                            new Dictionary<string, string> {
                                {"type", "UnityEngine.UI.Text"},
                                {"text", text},
                                {"fontSize", textsize.ToString()},
                                {"color", color.ToString()},
                                {"align", align},
                                {"fadeIn", fadeIn.ToString()}
                            },
                            new Dictionary<string, string> {
                                {"type", "RectTransform"},
                                {"anchormin", $"{left} {((1 - top) - height)}"},
                                {"anchormax", $"{(left + width)} {(1 - top)}"}
                            }
                        }
                    }
                });

                objectList.Add(name);
                return name;
            }
        }

        class PlayerSettings
        {
            public bool ui = true;
            //public bool chat = true;

            public PlayerSettings() { }
			
            internal PlayerSettings(DeathNotices deathnotices)
            {
                ui = dn.UseSimpleUI;
                //chat = dn.WriteToChat;
            }
        }

        class Attacker
        {
            public string name = string.Empty;
            [JsonIgnore]
            public BaseCombatEntity entity;
            public AttackerType type = AttackerType.Invalid;
			
			
            public string TryGetName()
            {
                if (entity == null)
                    return "Зомби";

                if (type == AttackerType.Player)
                    return entity.ToPlayer().displayName;
                if (type == AttackerType.Helicopter)
                    return "Патруль";
                if (type == AttackerType.Turret)
                    return "Турель";
                if (type == AttackerType.Self)
                    return "Сам себя";
                if (type == AttackerType.Animal)
                {
                    if (entity.name.Contains("boar"))
                        return "Кабан";
                    if (entity.name.Contains("horse"))
                        return "Лошадь";
                    if (entity.name.Contains("wolf"))
                        return "Волк";
                    if (entity.name.Contains("stag"))
                        return "Олень";
                    if (entity.name.Contains("chicken"))
                        return "Курица";
                    if (entity.name.Contains("bear"))
                        return "Медведь";
                    if (entity.name.Contains("zombie"))
                        return "Зомби";
                }
                else if (type == AttackerType.Structure)
                {
                    if (entity.name.Contains("barricade.wood.prefab"))
                        return "Деревянной баррикадой";
                    if (entity.name.Contains("barricade.woodwire.prefab"))
                        return "Деревянной баррикадой";
                    if (entity.name.Contains("barricade.metal.prefab"))
                        return "Металлической баррикадой";
                    if (entity.name.Contains("wall.external.high.wood.prefab"))
                        return "Высоким деревянным забором";
                    if (entity.name.Contains("wall.external.high.stone.prefab"))
                        return "Высокой каменной стеной";
                    if (entity.name.Contains("gates.external.high.wood.prefab"))
                        return "Ворота";
                    if (entity.name.Contains("gates.external.high.wood.prefab"))
                        return "Ворота";
                }
                else if (type == AttackerType.Trap)
                {
                    if (entity.name.Contains("beartrap.prefab"))
                        return "Капкан";
                    if (entity.name.Contains("landmine.prefab"))
                        return "Мина";
                    if (entity.name.Contains("spikes.floor.prefab"))
                        return "Деревянные колья";
                }
				
                return "Зомби";
			}

            public AttackerType TryGetType()
            {
                if (entity == null)
                    return AttackerType.Invalid;
                if (entity.ToPlayer() != null)
                    return AttackerType.Player;
                if (entity is BaseHelicopter)// entity.name.Contains("patrolhelicopter.prefab") && !entity.name.Contains("gibs"))
                    return AttackerType.Helicopter;
                if (entity.name.Contains("rust.ai/agents"))
                    return AttackerType.Animal;
                if (entity.name.Contains("barricades/") || entity.name.Contains("wall.external.high"))
                    return AttackerType.Structure;
                if (entity.name.Contains("beartrap.prefab") || entity.name.Contains("landmine.prefab") || entity.name.Contains("spikes.floor.prefab"))
                    return AttackerType.Trap;
                if (entity.name.Contains("autoturret_deployed.prefab"))
                    return AttackerType.Turret;

                return AttackerType.Invalid;
            }
        }

        class Victim
        {
            public string name = string.Empty;
			[JsonIgnore]
            public BaseCombatEntity entity;
            public VictimType type = VictimType.Invalid;

            public string TryGetName()
            {
                if (type == VictimType.Player)
                    return entity.ToPlayer().displayName;
                if (type == VictimType.Helicopter)
                    return "Патруль";
                if (type == VictimType.Animal)
                {
                    if (entity.name.Contains("boar"))
                        return "Кабана";
                    if (entity.name.Contains("horse"))
                        return "Лошадь";
                    if (entity.name.Contains("wolf"))
                        return "Волка";
                    if (entity.name.Contains("stag"))
                        return "Оленя";
                    if (entity.name.Contains("chicken"))
                        return "Курицу";
                    if (entity.name.Contains("bear"))
                        return "Медведя";
                    if (entity.name.Contains("zombie"))
                        return "Зомби";
                }

                return "Зомби";
            }

            public VictimType TryGetType()
            {
                if (entity == null)
                    return VictimType.Invalid;
                if (entity.ToPlayer() != null)
                    return VictimType.Player;
                if (entity.name.Contains("patrolhelicopter.prefab") && entity.name.Contains("gibs"))
                    return VictimType.Helicopter;
                if ((bool)entity?.name?.Contains("rust.ai/agents"))
                    return VictimType.Animal;

                return VictimType.Invalid;
            }
        }

        class DeathData
        {
            public Victim victim = new Victim();
            public Attacker attacker = new Attacker();
            public DeathReason reason = DeathReason.Unknown;
            public string damageType = string.Empty;
            public string weapon = string.Empty;
            public List<string> attachments = new List<string>();
            public string bodypart = string.Empty;
            internal float _distance = -1f;

            public float distance
            {
                get
                {
                    try
                    {
                        if (_distance != -1)
                            return _distance;

                        foreach (string death in dn.selfInflictedDeaths)
                        {
                            if (reason == GetDeathReason(death))
                                attacker.entity = victim.entity;
                        }

                        return victim.entity.Distance(attacker.entity.transform.position);
                    }
                    catch(Exception)
                    {
                        return 0f;
                    }
                }
            }

            public DeathReason TryGetReason()
            {
                if (victim.type == VictimType.Helicopter)
                    return DeathReason.HelicopterDeath;
                else if (attacker.type == AttackerType.Helicopter)
                    return DeathReason.Helicopter;
                else if (attacker.type == AttackerType.Turret)
                    return DeathReason.Turret;
                else if (attacker.type == AttackerType.Trap)
                    return DeathReason.Trap;
                else if (attacker.type == AttackerType.Structure)
                    return DeathReason.Structure;
                else if (attacker.type == AttackerType.Animal)
                    return DeathReason.Animal;
                else if (victim.type == VictimType.Animal)
                    return DeathReason.AnimalDeath;
                else if (weapon == "F1 Grenade" || weapon == "Survey Charge")
                    return DeathReason.Explosion;
                else if (weapon == "Flamethrower")
                    return DeathReason.Flamethrower;
				else if (weapon == "Hunting Bow")
                    return DeathReason.Arrow;
				else if (weapon == "Semi-Automatic Pistol")
                    return DeathReason.Bullet;
				else if (weapon == "Crossbow")
                    return DeathReason.Arrow;
                else if (victim.type == VictimType.Player)
                    return GetDeathReason(damageType);

                return DeathReason.Unknown;
            }

            public DeathReason GetDeathReason(string damage)
            {
                List<DeathReason> Reason = (from DeathReason current in Enum.GetValues(typeof(DeathReason)) where current.ToString() == damage select current).ToList();

                if (Reason.Count == 0)
                    return DeathReason.Unknown;

                return Reason[0];
            }

            [JsonIgnore]
            internal string JSON
            {
                get
                {
                    return JsonConvert.SerializeObject(this, Formatting.Indented);
                }
            }
            
            internal static DeathData Get(object obj)
            {
                JObject jobj = (JObject) obj;
                DeathData data = new DeathData();

                data.bodypart = jobj["bodypart"].ToString();
                data.weapon = jobj["weapon"].ToString();
                data.attachments = (from attachment in jobj["attachments"] select attachment.ToString()).ToList();
                data._distance = Convert.ToSingle(jobj["distance"]);

                /// Victim
                data.victim.name = jobj["victim"]["name"].ToString();

                List<VictimType> victypes = (from VictimType current in Enum.GetValues(typeof(VictimType)) where current.GetHashCode().ToString() == jobj["victim"]["type"].ToString() select current).ToList();

                if (victypes.Count != 0)
                    data.victim.type = victypes[0];

                /// Attacker
                data.attacker.name = jobj["attacker"]["name"].ToString();

                List<AttackerType> attackertypes = (from AttackerType current in Enum.GetValues(typeof(AttackerType)) where current.GetHashCode().ToString() == jobj["attacker"]["type"].ToString() select current).ToList();

                if (attackertypes.Count != 0)
                    data.attacker.type = attackertypes[0];
                
                /// Reason
                List<DeathReason> reasons = (from DeathReason current in Enum.GetValues(typeof(DeathReason)) where current.GetHashCode().ToString() == jobj["reason"].ToString() select current).ToList();
                if (reasons.Count != 0)
                    data.reason = reasons[0];

                return data;
            }
        }

        #endregion
        
        #region Enums / Types

        enum VictimType
        {
            Player,
            Helicopter,
            Animal,
            Invalid
        }

        enum AttackerType
        {
            Player,
            Helicopter,
            Animal,
            Turret,
            Structure,
            Trap,
            Self,
            Invalid
        }

        enum DeathReason
        {
            Turret,
            Helicopter,
            HelicopterDeath,
            Structure,
            Trap,
            Animal,
		    AnimalDeath,
            Generic,
            Hunger,
            Thirst,
            Cold,
            Drowned,
            Heat,
            Bleeding,
            Poison,
            Suicide,
            Bullet,
            Arrow,
            Flamethrower,
            Slash,
            Blunt,
            Fall,
            Radiation,
            Stab,
            Explosion,
            Unknown
        }

        #endregion

        #region Player Settings

        List<string> playerSettingFields
        {
            get
            {
                return (from field in typeof(PlayerSettings).GetFields() select field.Name).ToList();
            }
        }

        List<string> GetSettingValues(BasePlayer player) => (from field in typeof(PlayerSettings).GetFields() select $"{field.Name} : {field.GetValue(playerSettings[player.userID]).ToString().ToLower()}").ToList();

        void SetSettingField<T>(BasePlayer player, string field, T value)
        {
            foreach(var curr in typeof(PlayerSettings).GetFields())
            {
                if (curr.Name == field)
                    curr.SetValue(playerSettings[player.userID], value);
            }
        }

        #endregion

        #region General Plugin Hooks

        void Loaded()
        {
#if !RUST
            throw new NotSupportedException("Этот плагин или версия этого плагина не поддерживается данной игрой!");
#endif

            dn = this;

            RegisterPerm("customize");

            LoadConfig();
            LoadData();
            LoadMessages();

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                if (!playerSettings.ContainsKey(player.userID))
                {
                    playerSettings.Add(player.userID, new PlayerSettings(this));

                    SaveData();
                }
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Создан новый файл конфигурации...");
        }

        void OnPlayerInit(BasePlayer player)
        {
            if (!playerSettings.ContainsKey(player.userID))
            {
                playerSettings.Add(player.userID, new PlayerSettings(this));
                SaveData();
            }
        }

        #endregion

        #region Loading

        void LoadData()
        {
            //canRead = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, bool>>("DeathNotices");

            playerSettings = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, PlayerSettings>>("DeathNotices/PlayerSettings");

        }

        void SaveData()
        {
            //Interface.Oxide.DataFileSystem.WriteObject("DeathNotices", canRead);
			
            Interface.Oxide.DataFileSystem.WriteObject("DeathNotices/PlayerSettings", playerSettings);

        }

        void LoadConfig()
        {
			//  Переменные конфигурации
			SetConfig("Общие настройки", "Логирование файлов", false);
            SetConfig("Общие настройки", "Оповещения в консоле", true);
			SetConfig("Общие настройки", "Формат", "[{Title}]: {Message}");
            SetConfig("Общие настройки", "Формат консоли", "{Message}");
            SetConfig("Общие настройки", "Формат для отображения обвесов", " ({attachments})");
			SetConfig("Общие настройки", "Включить радиус сообщений", false);
            SetConfig("Общие настройки", "Радиус сообщений", 300f);           
            SetConfig("Общие настройки", "Цвет полосы UI интерфейса", false);
            SetConfig("Общие настройки", "Интерфейс UI - Размер фона", 16);
            SetConfig("Общие настройки", "Интерфейс UI - Положение вверх", 0.1f);
            SetConfig("Общие настройки", "Интерфейс UI - Положение влево", 0.1f);
            SetConfig("Общие настройки", "Интерфейс UI - Максимальная ширина", 0.8f);
            SetConfig("Общие настройки", "Интерфейс UI - Максимальная высота", 0.05f);
            SetConfig("Общие настройки", "Время UI оповещений (в секундах)", 5f);
            SetConfig("Общие настройки", "Титул", "DeathNotices");            
            SetConfig("Общие настройки", "Разделитель", " | ");
			
			SetConfig("Настройка цвета", "Цвет титула", "#96FFFC");
            SetConfig("Настройка цвета", "Цвет жертвы", "#FFC040");
            SetConfig("Настройка цвета", "Цвет атакующего", "#FFC040");
            SetConfig("Настройка цвета", "Цвет оружия", "#FFFFFF");
            SetConfig("Настройка цвета", "Цвет обвесов", "#FFC040");
            SetConfig("Настройка цвета", "Цвет дистанции", "#FFFFFF");
            SetConfig("Настройка цвета", "Цвет частей тела", "#FFC040");
            SetConfig("Настройка цвета", "Цвет сообщений", "#FFFFFF");            
			
			SetConfig("|Модули", new Dictionary<string, object> { });
			SetConfig("|Названия", new Dictionary<string, object> { });
			SetConfig("Оружие", new Dictionary<string, object> { });
            SetConfig("Части тела", new Dictionary<string, object> { });
            
            // Сообщения о смерти
			SetConfig("|Сообщения", "Arrow", new List<object> { "<size=14>{attacker} застрелил {victim} ({weapon}, {bodypart}, {distance}м.)</size>" });			
            SetConfig("|Сообщения", "Bleeding", new List<object> { "<size=14>{victim} умер от кровотечения</size>" });
			SetConfig("|Сообщения", "Blunt", new List<object> { "<size=14>{attacker} убил {victim} ({weapon})</size>" });
            SetConfig("|Сообщения", "Bullet", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {bodypart}, {distance}м.)</size>" });
            SetConfig("|Сообщения", "Flamethrower", new List<object> { "<size=14>{attacker} сжег заживо игрока {victim}</size>" });
            SetConfig("|Сообщения", "Cold", new List<object> { "<size=14>{victim} умер от обморожения</size>" });
            SetConfig("|Сообщения", "Drowned", new List<object> { "<size=14>{victim} утонул</size>" });
            SetConfig("|Сообщения", "Explosion", new List<object> { "<size=14>{attacker} взорвал игрока {victim} орудуя ({weapon})</size>" });
            SetConfig("|Сообщения", "Fall", new List<object> { "<size=14>{victim} разбился</size>" });
            SetConfig("|Сообщения", "Heat", new List<object> { "<size=14>{victim} сгорел</size>" });
            SetConfig("|Сообщения", "Helicopter", new List<object> { "<size=14>{victim} был убит патрульным вертолётом</size>" });
            SetConfig("|Сообщения", "Animal", new List<object> { "<size=14>{attacker} убил {victim}</size>" });
            SetConfig("|Сообщения", "Hunger", new List<object> { "<size=14>{victim} умер от голода</size>" });
            SetConfig("|Сообщения", "Poison", new List<object> { "<size=14>{victim} умер от отравления</size>" });
            SetConfig("|Сообщения", "Radiation", new List<object> { "<size=14>{victim} умер от радиационного отравления</size>" });
            SetConfig("|Сообщения", "Slash", new List<object> { "<size=14>{attacker} зарубил {victim} ({weapon})</size>" });
			SetConfig("|Сообщения", "Stab", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {bodypart})</size>" });
            SetConfig("|Сообщения", "Structure", new List<object> { "<size=14>{victim} умер от сближения с {attacker}</size>" });
            SetConfig("|Сообщения", "Suicide", new List<object> { "<size=14>{victim} совершил самоубийство</size>" });
            SetConfig("|Сообщения", "Thirst", new List<object> { "<size=14>{victim} умер от обезвоживания</size>" });
            SetConfig("|Сообщения", "Trap", new List<object> { "<size=14>{victim} попался на ловушку</size>" });
            SetConfig("|Сообщения", "Turret", new List<object> { "<size=14>{victim} был убит автоматической турелью</size>" });
			SetConfig("|Сообщения", "Unknown", new List<object> { "<size=14>У {victim} что-то пошло не так</size>" });
			SetConfig("|Сообщения", "AnimalDeath", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {distance}м.)</size>" });
			
			// Сообщения о смерти спящих
			SetConfig("|Сообщения", "Blunt Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon})</size>" });
			SetConfig("|Сообщения", "Bullet Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon}, {bodypart}, {distance}м.)</size>" });
			SetConfig("|Сообщения", "Flamethrower Sleeping", new List<object> { "<size=14>{attacker} сжег спящего {victim}</size>" });
			SetConfig("|Сообщения", "Slash Sleeping", new List<object> { "<size=14>{attacker} зарубил спяцего {victim} ({weapon})</size>" });
			SetConfig("|Сообщения", "Stab Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon})</size>" });
			SetConfig("|Сообщения", "Explosion Sleeping", new List<object> { "<size=14>{attacker} взорвал спяцего {victim} ({weapon})</size>" });

            SaveConfig();
			
            // Переменные конфигурации
			LogToFile = GetConfig(false, "Общие настройки", "Логирование файлов");
            WriteToConsole = GetConfig(true, "Общие настройки", "Оповещения в консоле");
			ChatFormatting = GetConfig("[{Title}]: {Message}", "Общие настройки", "Формат");
            ConsoleFormatting = GetConfig("{Message}", "Общие настройки", "Формат консоли");
            AttachmentFormatting = GetConfig(" ({attachments})", "Общие настройки", "Формат для отображения обвесов");			
            MessageRadiusEnabled = GetConfig(false, "Общие настройки", "Включить радиус сообщений");
            MessageRadius = GetConfig(300f, "Общие настройки", "Радиус сообщений");            
            SimpleUI_StripColors = GetConfig(false, "Общие настройки", "Цвет полосы UI интерфейса");
            SimpleUI_FontSize = GetConfig(16, "Общие настройки", "Интерфейс UI - Размер фона");
            SimpleUI_Top = GetConfig(0.1f, "Общие настройки", "Интерфейс UI - Положение вверх");
            SimpleUI_Left = GetConfig(0.1f, "Общие настройки", "Интерфейс UI - Положение влево");
            SimpleUI_MaxWidth = GetConfig(0.8f, "Общие настройки", "Интерфейс UI - Максимальная ширина");
            SimpleUI_MaxHeight = GetConfig(0.05f, "Общие настройки", "Интерфейс UI - Максимальная высота");
            SimpleUI_HideTimer = GetConfig(5f, "Общие настройки", "Время UI оповещений (в секундах)");
            ChatTitle = GetConfig("DeathNotices", "Общие настройки", "Титул");            
            AttachmentSplit = GetConfig(" | ", "Общие настройки", "Разделитель");
			
			TitleColor = GetConfig("#96FFFC", "Настройка цвета", "Цвет титула");
            VictimColor = GetConfig("#FFC040", "Настройка цвета", "Цвет жертвы");
            AttackerColor = GetConfig("#FFC040", "Настройка цвета", "Цвет атакующего");
            WeaponColor = GetConfig("#FFFFFF", "Настройка цвета", "Цвет оружия");
            AttachmentColor = GetConfig("#FFC040", "Настройка цвета", "Цвет обвесов");
            DistanceColor = GetConfig("#FFFFFF", "Настройка цвета", "Цвет дистанции");
            BodypartColor = GetConfig("#FFC040", "Настройка цвета", "Цвет частей тела");
            MessageColor = GetConfig("#FFFFFF", "Настройка цвета", "Цвет сообщений");
			
			Attachments = GetConfig(new Dictionary<string, object> { }, "|Модули");
			Names = GetConfig(new Dictionary<string, object> { }, "|Названия");
			Weapons = GetConfig(new Dictionary<string, object> { }, "Оружие");
            Bodyparts = GetConfig(new Dictionary<string, object> { }, "Части тела");

            Messages = GetConfig(new Dictionary<string, object>
            {
                // Сообщения о смерти
				{ "Arrow", new List<object> { "<size=14>{attacker} застрелил {victim} ({weapon}, {bodypart}, {distance}м.)</size>" }},
                { "Bleeding", new List<object> { "<size=14>{victim} умер от кровотечения</size>" }},
				{ "Blunt", new List<object> { "<size=14>{attacker} убил {victim} ({weapon})</size>" }},
                { "Bullet", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {bodypart}, {distance}м.)</size>" }},
                { "Flamethrower", new List<object> { "<size=14>{attacker} сжег заживо игрока {victim}</size>" }},
                { "Cold", new List<object> { "<size=14>{victim} умер от обморожения</size>" }},
                { "Drowned", new List<object> { "<size=14>{victim} утонул</size>" }},
                { "Explosion", new List<object> { "<size=14>{attacker} взорвал игрока {victim} орудуя ({weapon})</size>" }},
                { "Fall", new List<object> { "<size=14>{victim} разбился</size>" }},
                { "Heat", new List<object> { "<size=14>{victim} сгорел</size>" }},
                { "Helicopter", new List<object> { "<size=14>{victim} был убит патрульным вертолётом</size>" }},
                { "Animal", new List<object> { "<size=14>{attacker} убил {victim}</size>" }},
                { "Hunger", new List<object> { "<size=14>{victim} умер от голода</size>" }},
                { "Poison", new List<object> { "<size=14>{victim} умер от отравления</size>" }},
                { "Radiation", new List<object> { "<size=14>{victim} умер от радиационного отравления</size>" }},
                { "Slash", new List<object> { "<size=14>{attacker} зарубил {victim} ({weapon})</size>" }},
				{ "Stab", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {bodypart})</size>" }},
                { "Structure", new List<object> { "<size=14>{victim} умер от сближения с {attacker}</size>" }},
                { "Suicide", new List<object> { "<size=14>{victim} совершил самоубийство</size>" }},
                { "Thirst", new List<object> { "<size=14>{victim} умер от обезвоживания</size>" }},
                { "Trap", new List<object> { "<size=14>{victim} попался на ловушку</size>" }},
                { "Turret", new List<object> { "<size=14>{victim} был убит автоматической турелью</size>" }},
				{ "Unknown", new List<object> { "<size=14>У {victim} что-то пошло не так</size>" }},
				{ "AnimalDeath", new List<object> { "<size=14>{attacker} убил {victim} ({weapon}, {distance}м.)</size>" }},				
				
				// Сообщения о смерти спящих
				{ "Blunt Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon})</size>" }},
				{ "Bullet Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon}, {bodypart}, {distance}м.)</size>" }},
				{ "Flamethrower Sleeping", new List<object> { "<size=14>{attacker} сжег спящего {victim}</size>" }},
				{ "Slash Sleeping", new List<object> { "<size=14>{attacker} зарубил спяцего {victim} ({weapon})</size>" }},
				{ "Stab Sleeping", new List<object> { "<size=14>{attacker} убил спящего {victim} ({weapon})</size>" }},
				{ "Explosion Sleeping", new List<object> { "<size=14>{attacker} взорвал спяцего {victim} ({weapon})</size>" }},
				
            }, "|Сообщения").ToDictionary(l => l.Key, l => ((List<object>)l.Value).ConvertAll(m => m.ToString()));
        }

        void LoadMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"No Permission", "У вас нет разрешения на использование этой команды."},
                {"Hidden", "Сообщения о смерти отключены."},
                {"Unhidden", "Сообщения о смерти включены."},
                {"Field Not Found", "Поле не может быть найдено!"},
                {"True Or False", "{arg} должно быть 'true' или 'false'!"},
                {"Field Set", "Поле '{field}' установлен в '{value}'"}
            }, this);
        }

        #endregion

        #region Commands

        [ChatCommand("deaths")]
        void cmdDeaths(BasePlayer player, string cmd, string[] args)
        {
            if(!HasPerm(player.userID, "customize"))
            {
                SendChatMessage(player, GetMsg("No Permission", player.userID));
                return;
            }

            if (args.Length == 0)
            {
                SendChatMessage(player, "/deaths set <field> <value> - set a value");
                SendChatMessage(player, "Fields", Environment.NewLine + ListToString(GetSettingValues(player), 0, Environment.NewLine));

                return;
            }

            switch(args[0].ToLower())
            {
                case "set":
                    if(args.Length != 3)
                    {
                        SendChatMessage(player, "Syntax: /deaths set <field> <value>");
                        return;
                    }

                    if(!playerSettingFields.Contains(args[1].ToLower()))
                    {
                        SendChatMessage(player, GetMsg("Field Not Found", player.userID));
                        return;
                    }
                    
                    bool value = false;

                    try
                    {
                        value = Convert.ToBoolean(args[2]);
                    }
                    catch(FormatException)
                    {
                        SendChatMessage(player, GetMsg("True Or False", player.userID).Replace("{arg}", "<value>"));
                        return;
                    }

                    SetSettingField(player, args[1].ToLower(), value);

                    SendChatMessage(player, GetMsg("Field Set", player.userID).Replace("{value}", value.ToString().ToLower()).Replace("{field}", args[1].ToLower()));

                    SaveData();

                    break;

                default:
                    SendChatMessage(player, "/deaths set <field> <value> - set a value");
                    SendChatMessage(player, "Fields", Environment.NewLine + ListToString(GetSettingValues(player), 0, Environment.NewLine));
                    break;
            }
        }

        [ConsoleCommand("reproducekill")]
        void ccmdReproduceKill(ConsoleSystem.Arg arg)
        {
            bool hasPerm = false;

            if (arg?.Connection == null)
                hasPerm = true;
            else
            {
                if((BasePlayer)arg.Connection.player != null)
                {
                    if (HasPerm(arg.Connection.userid, "reproduce"))
                        hasPerm = true;
                }
            }
            
            if (hasPerm)
            {
                if (arg.Args == null || arg.Args.Length != 1)
                {
                    arg.ReplyWith("Syntax: reproducekill <datetime>");
                    return;
                }
                
                if(reproduceableKills.ContainsKey(arg.Args[0]))
                {
                    DeathData data = DeathData.Get(JsonConvert.DeserializeObject(reproduceableKills[arg.Args[0]]));
                    PrintWarning("Reproduced Kill: " + Environment.NewLine + data.JSON);

                    if (data == null)
                        return;

                    NoticeDeath(data, true);
                    arg.ReplyWith("Death reproduced!");
                }
                else
                    arg.ReplyWith("No saved kill at that time found!");
            }
        }

        #endregion

        #region Death Related

        //DeathHUD
        // Внимание! 10 строк макс вмешается в 16x9 а мож в другие соотн
        // не зн поч так, раньше отображалось и 12 строк
        // надо выбрать правильные размеры, убрать все кроме головы и тд. щас не вмешается все иногда + проверить с макс никами
        void AddDeath(string text)
        {
            killsCache.Add(text);
            killsTimer.Add(timer.Once(25f, () => removeLine()));

            if (killsCache.Count > 10)
            {
                killsTimer[0].Destroy();
                removeLine();
            }
            else
            {
                ShowDeathHud();
            }          
        }

        void ShowDeathHud()
        {            
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiElement()
            {
                Name = "DeathHUD",
                Components =
                {
                    new CuiTextComponent()
                    {
                        Text = string.Join("\n", killsCache.ToArray()),
                        FontSize = 12,
                        //Font = "robotocondensed-regular.ttf",
                        Align = UnityEngine.TextAnchor.UpperRight
                    },
                    new CuiRectTransformComponent()
                    {
                        AnchorMin = "0.4 " + (AnchorMaxY - (0.03f * killsCache.Count)),
                        AnchorMax = "0.99 " + AnchorMaxY
                    },
                    new CuiOutlineComponent()
                    {
                        Color = "0 0 0 1",
                        Distance = "0.5 -0.5"
                    }
                }
            });

            foreach(BasePlayer player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, "DeathHUD");
                CuiHelper.AddUi(player, container);
            }
        }

        void removeLine()
        {
            killsCache.RemoveAt(0);
            killsTimer.RemoveAt(0);

            if (killsCache.Count < 1)
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                {
                    CuiHelper.DestroyUi(player, "DeathHUD");
                }

                return;
            }

            ShowDeathHud();
        }
        //конец DeathHUD

        HitInfo TryGetLastWounded(ulong uid, HitInfo info)
        {
            if (LastWounded.ContainsKey(uid))
            {
                HitInfo output = LastWounded[uid];
                LastWounded.Remove(uid);
                return output;
            }

            return info;
        }

        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            if(victim?.ToPlayer() != null && info?.Initiator?.ToPlayer() != null)
            {
                NextTick(() => 
                {
                    if (victim.ToPlayer().IsWounded())
                        LastWounded[victim.ToPlayer().userID] = info;
                });
            }
        }

        void OnEntityDeath(BaseCombatEntity victim, HitInfo info)
        {
            if (victim == null)
                return;

            if(victim.ToPlayer() != null)
            {
                if (victim.ToPlayer().IsWounded())
                    info = TryGetLastWounded(victim.ToPlayer().userID, info);
            }
            if (victim as BaseNpc != null && info?.Initiator as BaseNpc != null) return;
            if (victim as BaseCorpse != null) return;
			if (info?.Initiator?.ToPlayer() == null && (victim?.name?.Contains("autospawn") ?? false))
                return;

            DeathData data = new DeathData();
            data.victim.entity = victim;
            data.victim.type = data.victim.TryGetType();

            if (data.victim.type == VictimType.Invalid)
                return;

            data.victim.name = data.victim.TryGetName();
            
			if (info?.Initiator != null)
				
                data.attacker.entity = info?.Initiator as BaseCombatEntity;
				
            
            else
                data.attacker.entity = victim.lastAttacker as BaseCombatEntity;

            data.attacker.type = data.attacker.TryGetType();
            data.attacker.name = StripTags(data.attacker.TryGetName());
            data.weapon = info?.Weapon?.GetItem()?.info?.displayName?.english ?? FormatThrownWeapon(info?.WeaponPrefab?.name ?? "No Weapon");
            data.attachments = GetAttachments(info);
            data.damageType = FirstUpper(victim.lastDamage.ToString());

            if(data.weapon == "Heli Rocket")
            {
                data.attacker.name = "Patrol Helicopter";
                data.reason = DeathReason.Helicopter;
            }

            if (info?.HitBone != null)
                data.bodypart = FirstUpper(GetBoneName(victim, info.HitBone) ?? string.Empty);
            else
                data.bodypart = FirstUpper("Body") ?? string.Empty;

            data.reason = data.TryGetReason();

            if (!(bool)(plugins.CallHook("OnDeathNotice", JObject.FromObject(data)) ?? true))
                return;

            NoticeDeath(data);
        }

        void NoticeDeath(DeathData data, bool reproduced = false)
        {
            DeathData newData = UpdateData(data);

            if (string.IsNullOrEmpty(GetDeathMessage(newData, false)))
                return;

            AddDeath(GetDeathMessage(newData, true));
           // foreach (BasePlayer player in BasePlayer.activePlayerList)
           // {                
              //  if (InRadius(player, data.attacker.entity))
               // {
                  //  if (CanSee(player, "ui"))
                        //Новый элемент для DeathHUD
                    //    AddDeath(GetDeathMessage(newData, true));
               // }
          //  }

            if (WriteToConsole)
                Puts(StripTags(GetDeathMessage(newData, true)));

            if (LogToFile)
                //ConVar.Server.Log("oxide/logs/Kills.txt", StripTags(GetDeathMessage(newData, true)));
                LogToFile("kills", StripTags(GetDeathMessage(newData, true)), this);

            if (debug)
            {
                PrintWarning("DATA: " + Environment.NewLine + data.JSON);
                PrintWarning("UPDATED DATA: " + Environment.NewLine + newData.JSON);
            }
        }

        #endregion

        #region Formatting

        string FormatThrownWeapon(string unformatted)
        {
            if (unformatted == string.Empty)
                return string.Empty;

            string formatted = FirstUpper(unformatted.Split('/').Last().Replace(".prefab", "").Replace(".entity", "").Replace(".weapon", "").Replace(".deployed", "").Replace("_", " ").Replace(".", ""));

            if (formatted == "Stonehatchet")
                formatted = "Stone Hatchet";
            else if (formatted == "Knife Bone")
                formatted = "Bone Knife";
            else if (formatted == "Spear Wooden")
                formatted = "Wooden Spear";
            else if (formatted == "Spear Stone")
                formatted = "Stone Spear";
            else if (formatted == "Icepick Salvaged")
                formatted = "Salvaged Icepick";
            else if (formatted == "Axe Salvaged")
                formatted = "Salvaged Axe";
            else if (formatted == "Hammer Salvaged")
                formatted = "Salvaged Hammer";
            else if (formatted == "Grenadef1")
                formatted = "F1 Grenade";
            else if (formatted == "Grenadebeancan")
                formatted = "Beancan Grenade";
            else if (formatted == "Explosivetimed")
                formatted = "Timed Explosive";

            return formatted;
        }

        string StripTags(string original)
        {
            foreach (string tag in tags)
                original = original.Replace(tag, "");

            foreach (Regex regexTag in regexTags)
                original = regexTag.Replace(original, "");

            return original;
        }

        string FirstUpper(string original)
        {
            if (original == string.Empty)
                return string.Empty;

            List<string> output = new List<string>();
            foreach (string word in original.Split(' '))
                output.Add(word.Substring(0, 1).ToUpper() + word.Substring(1, word.Length - 1));

            return ListToString(output, 0, " ");
        }

        #endregion

        #region Death Variables Methods

        List<string> GetMessages(string reason) => Messages.ContainsKey(reason) ? Messages[reason] : new List<string>();
        
        List<string> GetAttachments(HitInfo info)
        {
            List<string> attachments = new List<string>();

            if (info?.Weapon?.GetItem()?.contents?.itemList != null)
            {
                foreach (var content in info.Weapon.GetItem().contents.itemList)
                {
                    attachments.Add(content?.info?.displayName?.english);
                }
            }

            return attachments;
        }

        string GetBoneName(BaseCombatEntity entity, uint boneId) => entity?.skeletonProperties?.FindBone(boneId)?.name?.english ?? "Body";

        bool InRadius(BasePlayer player, BaseCombatEntity attacker)
        {
            if (MessageRadiusEnabled)
            {
                try
                {
                    if (player.Distance(attacker) <= MessageRadius)
                        return true;
                    else
                        return false;
                }
                catch(Exception)
                {
                    return false;
                }
            }

            return true;
        }

        string GetDeathMessage(DeathData data, bool console)
        {
            string message = string.Empty;
            string reason = string.Empty;
            List<string> messages = new List<string>();

            if (data.victim.type == VictimType.Player && data.victim.entity?.ToPlayer() != null && data.victim.entity.ToPlayer().IsSleeping())
            {
                if(SleepingDeaths.Contains(data.reason))
                {
                    reason = data.reason + " Sleeping";
                }
                else
                    reason = data.reason.ToString();
            }
            else
                reason = data.reason.ToString();

            try
            {
                messages = GetMessages(reason);
            }
            catch (InvalidCastException)
            {
            }

            if (messages.Count == 0)
                return message;

            string attachmentsString = data.attachments.Count == 0 ? string.Empty : AttachmentFormatting.Replace("{attachments}", ListToString(data.attachments, 0, AttachmentSplit));

            if (console)
                message = ConsoleFormatting.Replace("{Title}", $"<color={TitleColor}>{ChatTitle}</color>").Replace("{Message}", $"<color={MessageColor}>{messages.GetRandom()}</color>");
            else
               message = ChatFormatting.Replace("{Title}", $"<color={TitleColor}>{ChatTitle}</color>").Replace("{Message}", $"<color={MessageColor}>{messages.GetRandom()}</color>");
            
			message = message.Replace("{attacker}", $"<color={AttackerColor}>{data.attacker.name}</color>");
            message = message.Replace("{victim}", $"<color={VictimColor}>{data.victim.name}</color>");
            message = message.Replace("{distance}", $"<color={DistanceColor}>{Math.Round(data.distance, 2)}</color>");
            message = message.Replace("{weapon}", $"<color={WeaponColor}>{data.weapon}</color>");
            message = message.Replace("{bodypart}", $"<color={BodypartColor}>{data.bodypart}</color>");
            message = message.Replace("{attachments}", $"<color={AttachmentColor}>{attachmentsString}</color>");

            return message;
        }

        DeathData UpdateData(DeathData data)
        {
            bool configUpdated = false;

            if (data.victim.type != VictimType.Player)
            {
                if (Config.Get("|Названия", data.victim.name) == null)
                {
                    SetConfig("|Названия", data.victim.name, data.victim.name);
                    configUpdated = true;
                }
                else
                    data.victim.name = GetConfig(data.victim.name, "|Названия", data.victim.name);
            }

            if (data.attacker.type != AttackerType.Player)
            {
                if (Config.Get("|Названия", data.attacker.name) == null)
                {
                    SetConfig("|Названия", data.attacker.name, data.attacker.name);
                    configUpdated = true;
                }
                else
                    data.attacker.name = GetConfig(data.attacker.name, "|Названия", data.attacker.name);
            }

            if (Config.Get("Части тела", data.bodypart) == null)
            {
                SetConfig("Части тела", data.bodypart, data.bodypart);
                configUpdated = true;
            }
            else
                data.bodypart = GetConfig(data.bodypart, "Части тела", data.bodypart);

            if (Config.Get("Оружие", data.weapon) == null)
            {
                SetConfig("Оружие", data.weapon, data.weapon);
                configUpdated = true;
            }
            else
                data.weapon = GetConfig(data.weapon, "Оружие", data.weapon);

            string[] attachmentsCopy = new string[data.attachments.Count];
            data.attachments.CopyTo(attachmentsCopy);

            foreach (string attachment in attachmentsCopy)
            {
                if (Config.Get("|Модули", attachment) == null)
                {
                    SetConfig("|Модули", attachment, attachment);
                    configUpdated = true;
                }
                else
                {
                    data.attachments.Remove(attachment);
                    data.attachments.Add(GetConfig(attachment, "|Модули", attachment));
                }
            }

            if (configUpdated)
                SaveConfig();

            return data;
        }

        bool CanSee(BasePlayer player, string type)
        {
            if (type == "ui")
            {
                if (HasPerm(player.userID, "customize"))
                    return playerSettings.ContainsKey(player.userID) ? playerSettings[player.userID].ui : true;
                else
                    return UseSimpleUI;
            }

            return false;
        }

        #endregion

        #region Converting

        string ListToString(List<string> list, int first, string seperator) => string.Join(seperator, list.Skip(first).ToArray());

        #endregion

        #region Config and Message Handling

        void SetConfig(params object[] args)
        {
            List<string> stringArgs = (from arg in args select arg.ToString()).ToList<string>();
            stringArgs.RemoveAt(args.Length - 1);

            if (Config.Get(stringArgs.ToArray()) == null) Config.Set(args);
        }

        T GetConfig<T>(T defaultVal, params object[] args)
        {
            List<string> stringArgs = (from arg in args select arg.ToString()).ToList<string>();
            if (Config.Get(stringArgs.ToArray()) == null)
            {
                PrintError($"The plugin failed to read something from the config: {ListToString(stringArgs, 0, "/")}{Environment.NewLine}Please reload the plugin and see if this message is still showing. If so, please post this into the support thread of this plugin.");
                return defaultVal;
            }

            return (T)Convert.ChangeType(Config.Get(stringArgs.ToArray()), typeof(T));
        }

        string GetMsg(string key, object userID = null)
        {
            return lang.GetMessage(key, this, userID.ToString());
        }

        #endregion

        #region Permission Handling

        void RegisterPerm(params string[] permArray)
        {
            string perm = ListToString(permArray.ToList(), 0, ".");

            permission.RegisterPermission($"{PermissionPrefix}.{perm}", this);
        }

        bool HasPerm(object uid, params string[] permArray)
        {
            uid = uid.ToString();
            string perm = ListToString(permArray.ToList(), 0, ".");

            return permission.UserHasPermission(uid.ToString(), $"{PermissionPrefix}.{perm}");
        }

        string PermissionPrefix
        {
            get
            {
                return this.Title.Replace(" ", "").ToLower();
            }
        }

        #endregion

        #region Messages

       void BroadcastChat(string prefix, string msg = null) => rust.BroadcastChat(msg == null ? prefix : "<color=#C4FF00>" + prefix + "</color>: " + msg);

       void SendChatMessage(BasePlayer player, string prefix, string msg = null, object uid = null) => rust.SendChatMessage(player, msg == null ? prefix : "<color=#C4FF00>" + prefix + "</color>: " + msg, null, uid?.ToString() ?? "0");

        void UIMessage(BasePlayer player, string message)
        {
            bool replaced = false;
            float fadeIn = 0.2f;

            Timer playerTimer;

            timers.TryGetValue(player, out playerTimer);

            if (playerTimer != null && !playerTimer.Destroyed)
            {
                playerTimer.Destroy();
                fadeIn = 0.1f;

                replaced = true;
            }

            UIObject ui = new UIObject();
			
            //Изменен hud HUD/Overlay для DeathHUD
            ui.AddText("DeathNotice_DropShadow", SimpleUI_Left + 0.001, SimpleUI_Top + 0.001, SimpleUI_MaxWidth, SimpleUI_MaxHeight, deathNoticeShadowColor, StripTags(message), SimpleUI_FontSize, "HUD/Overlay", 3, fadeIn, 0.2f);
            ui.AddText("DeathNotice", SimpleUI_Left, SimpleUI_Top, SimpleUI_MaxWidth, SimpleUI_MaxHeight, deathNoticeColor, message, SimpleUI_FontSize, "HUD/Overlay", 3, fadeIn, 0.2f);

            ui.Destroy(player);

            if(replaced)
            {
                timer.Once(0.1f, () =>
                {
                    ui.Draw(player);

                    timers[player] = timer.Once(SimpleUI_HideTimer, () => ui.Destroy(player));
                });
            }
            else
            {
                ui.Draw(player);

                timers[player] = timer.Once(SimpleUI_HideTimer, () => ui.Destroy(player));
            }
        }

        #endregion
    }
}


// --- End of file: DeathNotices.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/XpControl.cs ---
// --- Original Local Path: XpControl.cs ---

/*
*
* Chat commands:
* /setlvl <lvl> <nickname / steamid>
* /addlvl <lvl> <nickname / steamid>
* /resetlvl <nickname / steamid>
* /showone <nickname / steamid>
* /showall <page:optional>
* /addxp <points> <nickname / steamid>
*
* Console commands:
* setlvl <lvl> <nickname / steamid>
* addlvl <lvl> <nickname / steamid>
* resetlvl <nickname / steamid>
* showone <nickname / steamid>
* showall <page:optional>
* addxp <points> <nickname / steamid>
*
* API:
* object XPCSetLVL(ulong userID, int level) // Returns true if successful, otherwise returns null
* object XPCAddLVL(ulong userID, int level) // Returns true if successful, otherwise returns null
* void   XPCResetLVL(ulong userID)
* void   XPCAddXP(ulong userID, int xp)
*
*/

using Oxide.Core.Plugins;
using Rust.Xp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("XP Control", "miRror", "5.0.0", ResourceId = 2013)]
	
    class XpControl : RustPlugin
    {	
		private int maxLevel = 99; // fix for current game version
		
        private void Init()
		{	
			lang.RegisterMessages(new Dictionary<string, string> {
				["formataddlvl"] 		= "/addlvl <lvl> <nickname / steamid>\n con.addlvl <lvl> <nickname / steamid>",
				["formatsetlvl"] 		= "/setlvl <lvl> <nickname / steamid>\n con.setlvl <lvl> <nickname / steamid>",
				["formatresetlvl"] 		= "/resetlvl <nickname / steamid>\n con.resetlvl <nickname / steamid>",
				["formatshowone"] 		= "/showone <nickname / steamid>\n con.showone <nickname / steamid>",
				["formataddxp"] 		= "/addxp <points> <nickname/ steamid>\n con.addxp <points> <nickname / steamid>",				
				["StringFormat"] 		= "String format:\n <color=orange>{0}</color>",
				["NoPlayers"] 			= "No players found!",
				["LevelValidNum"] 		= "Level needs to be positive number!",
				["PageValidNum"]		= "Page needs to be positive number!",
				["LevelLimit"] 			= "<color=orange>Error!</color> Player can reach maximum level with that number. Current players level: <color=orange>{0}</color>",
				["AddLevelSuccess"] 	= "New level of player <color=orange>{0}</color>: <color=orange>{1}</color>",
				["PointsValidNum"]  	= "The number of points must be positive!",
				["AddXpSuccess"] 		= "Player <color=orange>{0}</color> got <color=orange>{1} XP</color>",
				["ResetLevelSuccess"] 	= "Player <color=orange>{0}</color> successfully were reseted!",
				["FormatValidLevel"] 	= "This level can't be set to player. Valid values: <color=orange>1 < x < {0}</color>",
				["SetLevelSuccess"] 	= "Player <color=orange>{0}</color> got lvl: <color=orange>{1}</color>",
				["ShowOneSuccess"] 		= "Player <color=orange>{0}</color> has: <color=#24C63D>{1}</color> LVL and <color=#3E82D0>{2}</color> XP",
				["ListPlayers"] 		= "List of online players",
				["ChangePage"] 			= "Change page: showall <page>",
				["Page"] 				= "Page",
				["CheckConsole"] 		= "<color=orange>Check your console!</color>",
			}, this);
		}
		
        private void Loaded()
        {
			List<string> commands = new List<string>() {"setlvl", "addlvl", "resetlvl", "showone", "addxp", "showall"};
			
			foreach(string command in commands)
			{
				permission.RegisterPermission("xpcontrol." + command, this);
				cmd.AddChatCommand(command, this, "cmdChatHandler");
				cmd.AddConsoleCommand("global." + command, this, "cmdConsoleHandler");
			}
        }

		//Other methods
		
		private void Action(BasePlayer player, ConsoleSystem.Arg arg, string cmd, string[] args)
		{	
			if(arg != null)
				player = arg.Player();
			
			Agent 		agent;
			BasePlayer 	target;
			bool 		isServer = player == null;
			int 		level, xp;
			string 		str, userID = player?.UserIDString;
			
			switch(cmd)
			{
				case "setlvl":
					target = GetPlayer(player, arg, cmd, args, 2, isServer, userID);
					
					if(target == null)
						return;
					
					if(!Int32.TryParse(args[0], out level) || level < 1 || level > maxLevel)
					{
						Reply(player, arg, string.Format(Lang("FormatValidLevel", userID), maxLevel), isServer);
						
						return;							
					}
					
					agent = BasePlayer.FindXpAgent(target.userID);
					
					agent.Reset();
					agent.Add(Definitions.Cheat, Rust.Xp.Config.LevelToXp(level));	

					Reply(player, arg, string.Format(Lang("SetLevelSuccess", userID), target.displayName, level), isServer);
					
					break;
				case "addlvl":
					target = GetPlayer(player, arg, cmd, args, 2, isServer, userID);
					
					if(target == null)
						return;
					
					if(!Int32.TryParse(args[0], out level) || level < 1)
					{
						Reply(player, arg, string.Format(Lang("LevelValidNum", userID)), isServer);
						
						return;							
					}
					
					agent = BasePlayer.FindXpAgent(target.userID);
					
					int newLevel = (int)agent.CurrentLevel + level;
					
					if(newLevel > maxLevel)
					{
						Reply(player, arg, string.Format(Lang("LevelLimit", userID), (int)agent.CurrentLevel), isServer);
						
						return;
					}
					
					agent.Add(Definitions.Cheat, Rust.Xp.Config.LevelToXp(newLevel) - agent.EarnedXp);

					Reply(player, arg, string.Format(Lang("AddLevelSuccess", userID), target.displayName, newLevel), isServer);
					
					break;
				case "resetlvl":
					target = GetPlayer(player, arg, cmd, args, 1, isServer, userID);
					
					if(target == null)
						return;

					BasePlayer.FindXpAgent(target.userID).Reset();

					Reply(player, arg, string.Format(Lang("ResetLevelSuccess", userID), target.displayName), isServer);
					
					break;
				case "showone":
					target = GetPlayer(player, arg, cmd, args, 1, isServer, userID);
					
					if(target == null)
						return;

					agent = BasePlayer.FindXpAgent(target.userID);
					
					Reply(player, arg, string.Format(Lang("ShowOneSuccess", userID), target.displayName, (int)agent.CurrentLevel, (int)agent.UnspentXp), isServer);
					
					break;
				case "showall":
					if(!isServer && !player.IsAdmin() && !permission.UserHasPermission(player.UserIDString, "xpcontrol." + cmd))
						return;
					
					int cntPlayers 	  = BasePlayer.activePlayerList.Count;
					int currentPage   = 1;
					int playersOnPage = 50;
					int allPages 	  = (int)Math.Ceiling(1.0f * cntPlayers / playersOnPage);
	
					if(cntPlayers == 0)
					{
						Reply(player, arg, string.Format(Lang("NoPlayers", userID)), isServer);
						
						return;						
					}
					
					if(args.Length > 0 && !Int32.TryParse(args[0], out currentPage) || currentPage < 1 || currentPage > allPages)
					{
						Reply(player, arg, string.Format(Lang("PageValidNum", userID)), isServer);
						
						return;							
					}

					if(!isServer)
						player.SendConsoleCommand("clear"); // fix for bad parsing tags

					str = "<color=#C65624>" + new String('-', 70) + "\n" + Lang("ListPlayers", userID).PadRight(26) + ("<color=#24C63D>LVL</color>").PadRight(50) + ("<color=#3E82D0>XP</color>").PadRight(28) + "| " + Lang("Page", userID) + $" {currentPage}/{allPages} |\n" + new String('-', 70) + "</color>\n";
					
					List<BasePlayer> players = BasePlayer.activePlayerList.GetRange((currentPage - 1) * playersOnPage, currentPage == 1 ? Math.Min(cntPlayers, playersOnPage) : (cntPlayers - ((currentPage - 1) * playersOnPage)));

					foreach(BasePlayer t in players)
						str += $"<color=orange>{t.displayName, -25}</color> <color=#24C63D>{t.xp.CurrentLevel, -25:#;minus #}</color> <color=#3E82D0>{t.xp.UnspentXp:#;minus #}</color>\n";	
					
					str += "<color=#C65624>" + new String('-', 70) + "\n" + Lang("ChangePage", userID) + "\n" + new String('-', 70) + "</color>\n";
					
					if(isServer) 
						Reply(player, arg, "\n" + str, isServer);
					else {
						if(arg == null)
							SendReply(player, Lang("CheckConsole", userID));
						
						PrintToConsole(player, str);
					}
					
					break;
				case "addxp":
					target = GetPlayer(player, arg, cmd, args, 2, isServer, userID);
					
					if(target == null)
						return;
					
					if(!Int32.TryParse(args[0], out xp) || xp < 1)
					{
						Reply(player, arg, string.Format(Lang("PointsValidNum", userID)), isServer);
						
						return;							
					}

					BasePlayer.FindXpAgent(target.userID).Add(Definitions.Cheat, xp);
		
					Reply(player, arg, string.Format(Lang("AddXpSuccess", userID), target.displayName, xp), isServer);
					
					break;
			}
		}

		private BasePlayer GetPlayer(BasePlayer player, ConsoleSystem.Arg arg, string cmd, string[] args, int needArgs, bool isServer, string userID)
		{
			if(!isServer && !player.IsAdmin() && !permission.UserHasPermission(player.UserIDString, "xpcontrol." + cmd))
				return null;
			
			if(args.Length < needArgs)
			{
				Reply(player, arg, string.Format(Lang("StringFormat", userID), Lang("format" + cmd, userID)), isServer);
				
				return null;
			}
			
			string strNameOrIDOrIP = string.Join(" ", needArgs > 1 ? args.Skip(1).ToArray() : args);
			
			BasePlayer target = rust.FindPlayer(strNameOrIDOrIP);		
			
			if(target == null)
			{
				Reply(player, arg, Lang("NoPlayers", userID), isServer);
				
				return null;				
			}
			
			return target;	
		}
		
		private string Lang(string key, string userID) => lang.GetMessage(key, this, userID);
		
		private void Reply(BasePlayer player, ConsoleSystem.Arg arg, string message, bool isServer)
		{ 	
			if(isServer)
				message = Regex.Replace(message, "<.*?>", string.Empty);
			
			if(arg == null)	SendReply(player, message);
			else 			SendReply(arg, 	  message);	
		}
		
		//Chat commands
		
		private void cmdChatHandler(BasePlayer player, string cmd, string[] args) => Action(player, null, cmd, args);	
		
		//Console commands
		
		private void cmdConsoleHandler(ConsoleSystem.Arg arg) => Action(null, arg, arg.cmd.name, arg.HasArgs() ? arg.Args : new string[0]);		
		
		//API

        [HookMethod("XPCSetLVL")]
        public object XPCSetLVL(ulong userID, int level)
        {
			if(level < 1 || level > maxLevel)
				return null;
			
			Agent agent = BasePlayer.FindXpAgent(userID);
			
			agent.Reset();
			agent.Add(Definitions.Cheat, Rust.Xp.Config.LevelToXp(level));	
			
			return true;
		}

        [HookMethod("XPCAddLVL")]
        public object XPCAddLVL(ulong userID, int level)
        {
			Agent agent = BasePlayer.FindXpAgent(userID);

			int newLevel = (int)agent.CurrentLevel + level;
			
			if(newLevel > maxLevel)
				return null;
			
			agent.Add(Definitions.Cheat, Rust.Xp.Config.LevelToXp(newLevel) - agent.EarnedXp);

			return true;
		}

        [HookMethod("XPCResetLVL")]
        public void XPCResetLVL(ulong userID) => BasePlayer.FindXpAgent(userID).Reset();
		
        [HookMethod("XPCAddXP")]
        public void XPCAddXP(ulong userID, int xp) => BasePlayer.FindXpAgent(userID).Add(Definitions.Cheat, xp);
	}
}

// --- End of file: XpControl.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BGrade.cs ---
// --- Original Local Path: BGrade.cs ---

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;

using Rust;
using UnityEngine;

using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Plugins.BGradeExt;

namespace Oxide.Plugins
{
    [Info("BGrade", "Ryan", "1.0.49")]
    [Description("Auto update building blocks when placed")]
    public class BGrade : RustPlugin
    {
        #region Declaration

        public static BGrade Instance;

        private List<string> RegisteredPerms;

        private static BindingFlags Flags = BindingFlags.NonPublic | BindingFlags.Instance;
        private readonly FieldInfo _permset = typeof(Permission).GetField("permset", Flags);

        private DateTime HookExpire = new DateTime(2018, 3, 1);

        private Dictionary<Vector3, int> LastAttacked = new Dictionary<Vector3, int>();

        #endregion

        #region Config

        private bool ConfigChanged;

        // Timer settings
        private bool AllowTimer;
        private int MaxTimer;
        private int DefaultTimer;

        // Last attack settings
        private bool CheckLastAttack;
        private int UpgradeCooldown;

        // Command settings
        private List<string> ChatCommands;
        private List<string> ConsoleCommands;

        // Refund settings
        private bool RefundOnBlock;

        // Player Component settings
        private bool DestroyOnDisconnect;

        protected override void LoadDefaultConfig() => PrintWarning("Generating default configuration file...");

        private void InitConfig()
        {
            AllowTimer = GetConfig(true, "Timer Settings", "Enabled");
            DefaultTimer = GetConfig(30, "Timer Settings", "Default Timer");
            MaxTimer = GetConfig(180, "Timer Settings", "Max Timer");
            ChatCommands = GetConfig(new List<string>
            {
                "bgrade",
                "grade"
            }, "Command Settings", "Chat Commands");
            ConsoleCommands = GetConfig(new List<string>
            {
                "bgrade.up"
            }, "Command Settings", "Console Commands");
            CheckLastAttack = GetConfig(true, "Building Attack Settings", "Enabled");
            UpgradeCooldown = GetConfig(30, "Building Attack Settings", "Cooldown Time");
            RefundOnBlock = GetConfig(true, "Refund Settings", "Refund on Block");
            DestroyOnDisconnect = GetConfig(false, "Destroy Data on Player Disconnect (for high pop servers)");

            if (ConfigChanged)
            {
                PrintWarning("Updated configuration file with new/changed values.");
                SaveConfig();
            }
        }

        private T GetConfig<T>(T defaultVal, params string[] path)
        {
            var data = Config.Get(path);
            if (data != null)
            {
                return Config.ConvertValue<T>(data);
            }

            Config.Set(path.Concat(new object[] { defaultVal }).ToArray());
            ConfigChanged = true;
            return defaultVal;
        }

        #endregion

        #region Lang

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Permission"] = "У вас нет разрешения на использование этой команды",

                ["Error.InvalidArgs"] = "Неверная команда, пожалуйста, используйте:/{0} help",
                ["Error.Resources"] = "У вас недостаточно ресурсов для обновления.",
                ["Error.InvalidTime"] = "Пожалуйста, введите правильное время. '<color=green>{0}</color>' не распознается как число.",
                ["Error.TimerTooLong"] = "Пожалуйста, введите время, которое ниже значения <color=green>{0}</color>.",

                ["Notice.SetGrade"] = "Автоматическое обновление теперь установлено на оценку <color=orange>{0}</color>.",
                ["Notice.SetTime"] = "Таймер отключения теперь установлен на <color=orange>{0}</color>.",
                ["Notice.Disabled"] = "Автоматическое обновление отключено.",
                ["Notice.Disabled.Auto"] = "Автоматическое обновление отключено.",
                ["Notice.Time"] = "Авто. обновление отключится через:<color=red>{0}</color> секунд.",

                ["Command.Help"] = "<color=orange><size=16>Использование команды UP</size></color>",
                ["Command.Help.0"] = "/{0} 0 - Отключить Апгрейд",
                ["Command.Help.1"] = "/{0} 1 - Обновление в дерева",
                ["Command.Help.2"] = "/{0} 2 - Обновление в камня",
                ["Command.Help.3"] = "/{0} 3 - Обновление в метал",
                ["Command.Help.4"] = "/{0} 4 - Обновление в мвк",
                ["Command.Help.T"] = "/{0} t <seconds> - Время до отключения Авто улудшения. ",

                ["Command.Settings"] = "<color=red><size=15>Ваши текущие настройки</size></color>",
                ["Command.Settings.Timer"] = "Время: <color=orange>{0}</color> seconds",
                ["Command.Settings.Grade"] = "Улудшение в: <color=green>{0}</color>",

                ["Words.Disabled"] = "Отключен"
            }, this);
        }

        #endregion

        #region Methods

        private void RegisterPermissions()
        {
            for (var i = 1; i < 5; i++)
            {
                permission.RegisterPermission(Name.ToLower() + "." + i, this);
            }

            permission.RegisterPermission(Name.ToLower() + "." + "nores", this);
            permission.RegisterPermission(Name.ToLower() + "." + "all", this);
        }

        private void RegisterCommands()
        {
            foreach (var command in ChatCommands)
            {
                cmd.AddChatCommand(command, this, BGradeCommand);
            }

            foreach (var command in ConsoleCommands)
            {
                cmd.AddConsoleCommand(command, this, nameof(BGradeUpCommand));
            }
        }

        private void DestroyAll<T>() where T : MonoBehaviour
        {
            foreach (var type in UnityEngine.Object.FindObjectsOfType<T>())
            {
                UnityEngine.Object.Destroy(type);
            }
        }

        private List<string> GetPluginPerms()
        {
            var perms = (Dictionary<Plugin, HashSet<string>>)_permset.GetValue(permission);
            var permList = new List<string>();

            if (perms == null)
            {
                return permList;
            }

            permList.AddRange(perms[this]);

            return permList;
        }

        private void DealWithHookResult(BasePlayer player, BuildingBlock buildingBlock, int hookResult, GameObject gameObject)
        {
            if (hookResult <= 0)
            {
                return;
            }

            if (RefundOnBlock)
            {
                foreach (var itemToGive in buildingBlock.BuildCost())
                {
                    player.GiveItem(ItemManager.CreateByItemID(itemToGive.itemid, (int)itemToGive.amount));
                }
            }

            gameObject.GetComponent<BaseEntity>().Kill();
        }

        private string TakeResources(BasePlayer player, int playerGrade, BuildingBlock buildingBlock, out Dictionary<int, int> items)
        {
            var itemsToTake = new Dictionary<int, int>();

            foreach (var itemAmount in buildingBlock.blockDefinition.grades[playerGrade].costToBuild)
            {
                if (!itemsToTake.ContainsKey(itemAmount.itemid))
                {
                    itemsToTake.Add(itemAmount.itemid, 0);
                }

                itemsToTake[itemAmount.itemid] += (int)itemAmount.amount;
            }

            var canAfford = true;
            foreach (var itemToTake in itemsToTake)
            {
                if (!player.HasItemAmount(itemToTake.Key, itemToTake.Value))
                {
                    canAfford = false;
                }
            }

            items = itemsToTake;
            return canAfford ? null : "Error.Resources".Lang(player.UserIDString);
        }

        private void CheckLastAttacked()
        {
            foreach (var lastAttackEntry in LastAttacked.ToList())
            {
                if (!WasAttackedRecently(lastAttackEntry.Key))
                {
                    LastAttacked.Remove(lastAttackEntry.Key);
                }
            }
        }

        private bool WasAttackedRecently(Vector3 position)
        {
            int time;
            if (!LastAttacked.TryGetValue(position, out time))
            {
                return false;
            }

            if (time < Facepunch.Math.Epoch.Current)
            {
                return true;
            }

            return false;
        }

        #endregion

        #region BGrade Player

        private class BGradePlayer : MonoBehaviour
        {
            private BasePlayer _player;
            private Timer _timer;
            private int _grade;
            private int _time;

            public void Awake()
            {
                var attachedPlayer = GetComponent<BasePlayer>();
                if (attachedPlayer != null)
                {
                    _player = attachedPlayer;
                }

                _time = GetTime(false);
            }

            public int GetTime(bool updateTime = true)
            {
                if (!Instance.AllowTimer)
                {
                    return 0;
                }

                if (updateTime)
                {
                    UpdateTime();
                }

                return _time != 0 ? _time : Instance.DefaultTimer;
            }

            public void UpdateTime()
            {
                if (_time <= 0)
                {
                    return;
                }

                DestroyTimer();

                SetTimer(Instance.timer.Once(_time, () =>
                {
                    _grade = 0;
                    DestroyTimer();
                    _player.ChatMessage("Notice.Disabled.Auto".Lang(_player.UserIDString));
                }));
            }

            public int GetGrade() => _grade;

            public bool IsTimerValid
            {
                get
                {
                    return _timer != null && !_timer.Destroyed;
                }
            }

            private void SetTimer(Timer timer)
            {
                _timer = timer;
            }

            public void SetGrade(int newGrade)
            {
                _grade = newGrade;
            }

            public void SetTime(int newTime)
            {
                _time = newTime;
            }

            public void DestroyTimer()
            {
                _timer?.Destroy();
                _timer = null;
            }

            public void OnDestroy()
            {
                Destroy(this);
            }
        }

        #endregion

        #region Hooks

        private void Init()
        {
            Instance = this;

            InitConfig();
            RegisterCommands();
            RegisterPermissions();

            RegisteredPerms = GetPluginPerms();

            if (!CheckLastAttack)
            {
                Unsubscribe(nameof(OnEntityDeath));
                Unsubscribe(nameof(OnServerSave));
            }

            if (!DestroyOnDisconnect)
            {
                Unsubscribe(nameof(OnPlayerDisconnected));
            }
        }

        private void OnServerSave()
        {
            QueueWorkerThread(worker => CheckLastAttacked());
        }

        private void Unload()
        {
            DestroyAll<BGradePlayer>();
        }

        private void OnEntityBuilt(Planner plan, GameObject gameObject)
        {
            var player = plan?.GetOwnerPlayer();
            var buildingBlock = gameObject.GetComponent<BuildingBlock>();
            if (player == null || buildingBlock == null)
            {
                return;
            }

            if (!player.CanBuild() || !player.HasAnyPermission(RegisteredPerms))
            {
                return;
            }

            var bgradePlayer = player.GetComponent<BGradePlayer>();
            if (bgradePlayer == null)
            {
                return;
            }

            var playerGrade = bgradePlayer.GetGrade();
            if (playerGrade == 0)
            {
                return;
            }

            if (!player.HasPluginPerm("all") && !player.HasPluginPerm(playerGrade.ToString()))
            {
                return;
            }

            var hookCall = Interface.Call("CanBGrade", player, playerGrade, buildingBlock, plan);

            if (hookCall is int)
            {
                DealWithHookResult(player, buildingBlock, (int) hookCall, gameObject);
                return;
            }

            if (playerGrade < (int) buildingBlock.grade || buildingBlock.blockDefinition.grades[playerGrade] == null)
            {
                return;
            }

            if (CheckLastAttack && WasAttackedRecently(buildingBlock.transform.position))
            {
                return;
            }

            if (Interface.Call("OnStructureUpgrade", buildingBlock, player, (BuildingGrade.Enum) playerGrade) != null)
            {
                return;
            }

            if (!player.HasPluginPerm("nores"))
            {
                Dictionary<int, int> itemsToTake;
                var resourceResponse = TakeResources(player, playerGrade, buildingBlock, out itemsToTake);
                if (!string.IsNullOrEmpty(resourceResponse))
                {
                    player.ChatMessage(resourceResponse);
                    return;
                }

                foreach (var itemToTake in itemsToTake)
                {
                    player.TakeItem(itemToTake.Key, itemToTake.Value);
                }
            }

            if (AllowTimer)
            {
                bgradePlayer.UpdateTime();
            }

            buildingBlock.SetGrade((BuildingGrade.Enum)playerGrade);
            buildingBlock.SetHealthToMax();
            buildingBlock.StartBeingRotatable();
            buildingBlock.SendNetworkUpdate();
            buildingBlock.UpdateSkin();
            buildingBlock.ResetUpkeepTime();
            buildingBlock.GetBuilding()?.Dirty();
        }

        private void OnEntityDeath(BaseCombatEntity combatEntity, HitInfo info)
        {
            if (!(combatEntity is BuildingBlock))
            {
                return;
            }

            var buildingBlock = (BuildingBlock) combatEntity;
            var attacker = info?.Initiator?.ToPlayer();
            if (attacker == null)
            {
                return;
            }

            if (info.damageTypes.GetMajorityDamageType() == DamageType.Explosion)
            {
                LastAttacked[buildingBlock.transform.position] = Facepunch.Math.Epoch.Current + UpgradeCooldown;
            }
        }

        private void OnPlayerDisconnected(BasePlayer player)
        {
            var bgradePlayer = player.GetComponent<BGradePlayer>();
            if (bgradePlayer == null)
            {
                return;
            }

            UnityEngine.Object.Destroy(bgradePlayer);
        }

        #endregion

        #region Commands

        private void BGradeCommand(BasePlayer player, string command, string[] args)
        {
            if (!player.HasAnyPermission(RegisteredPerms))
            {
                player.ChatMessage("Permission".Lang(player.UserIDString));
                return;
            }

            if (args.Length == 0)
            {
                player.ChatMessage("Error.InvalidArgs".Lang(player.UserIDString, command));
                return;
            }

            var chatMsgs = new List<string>();

            switch (args[0].ToLower())
            {
                case "0":
                    {
                        player.ChatMessage("Notice.Disabled".Lang(player.UserIDString));
                        var bgradePlayer = player.GetComponent<BGradePlayer>();
                        bgradePlayer?.DestroyTimer();
                        bgradePlayer?.SetGrade(0);
                        return;
                    }

                case "1":
                case "2":
                case "3":
                case "4":
                    {
                        if (!player.HasPluginPerm("all") && !player.HasPluginPerm(args[0]))
                        {
                            player.ChatMessage("Permission".Lang(player.UserIDString));
                            return;
                        }

                        var grade = Convert.ToInt32(args[0]);
                        var bgradePlayer = player.GetComponent<BGradePlayer>() ?? player.gameObject.AddComponent<BGradePlayer>();

                        bgradePlayer.SetGrade(grade);
                        var time = bgradePlayer.GetTime();
                        chatMsgs.Add("Notice.SetGrade".Lang(player.UserIDString, grade));

                        if (AllowTimer && time > 0)
                        {
                            chatMsgs.Add("Notice.Time".Lang(player.UserIDString, time));
                        }

                        player.ChatMessage(string.Join("\n", chatMsgs.ToArray()));
                        return;
                    }

                case "t":
                    {
                        if (!AllowTimer) return;
                        if (args.Length == 1) goto default;

                        int time;
                        if (!int.TryParse(args[1], out time) || time <= 0)
                        {
                            player.ChatMessage("Error.InvalidTime".Lang(player.UserIDString, args[1]));
                            return;
                        }

                        if (time > MaxTimer)
                        {
                            player.ChatMessage("Error.TimerTooLong".Lang(player.UserIDString, MaxTimer));
                            return;
                        }

                        var bgradePlayer = player.GetComponent<BGradePlayer>() ?? player.gameObject.AddComponent<BGradePlayer>();
                        player.ChatMessage("Notice.SetTime".Lang(player.UserIDString, time));
                        bgradePlayer.SetTime(time);
                        return;
                    }

                case "help":
                    {
                        chatMsgs.Add("Command.Help".Lang(player.UserIDString));
                        if (AllowTimer)
                        {
                            chatMsgs.Add("Command.Help.T".Lang(player.UserIDString, command));
                            chatMsgs.Add("Command.Help.0".Lang(player.UserIDString, command));
                        }

                        for (var i = 1; i < 5; i++)
                        {
                            if (player.HasPluginPerm(i.ToString()) || player.HasPluginPerm("all"))
                                chatMsgs.Add($"Command.Help.{i}".Lang(player.UserIDString, command));
                        }

                        if (chatMsgs.Count <= 3 && !player.HasPluginPerm("all"))
                        {
                            player.ChatMessage("Permission".Lang(player.UserIDString));
                            return;
                        }

                        var bgradePlayer = player.GetComponent<BGradePlayer>();
                        if (bgradePlayer != null)
                        {
                            chatMsgs.Add("Command.Settings".Lang(player.UserIDString));
                            if (AllowTimer)
                            {
                                chatMsgs.Add("Command.Settings.Timer".Lang(player.UserIDString, bgradePlayer.GetTime(false)));
                            }

                            var fetchedGrade = bgradePlayer.GetGrade();
                            chatMsgs.Add("Command.Settings.Grade".Lang(player.UserIDString, fetchedGrade == 0 ? "Words.Disabled".Lang(player.UserIDString) : fetchedGrade.ToString()));
                        }

                        player.ChatMessage(string.Join("\n", chatMsgs.ToArray()));
                        return;
                    }

                default:
                    {
                        player.ChatMessage("Error.InvalidArgs".Lang(player.UserIDString, command));
                        return;
                    }
            }
        }

        private void BGradeUpCommand(ConsoleSystem.Arg arg)
        {
            var player = arg?.Player();
            if (player == null)
            {
                return;
            }

            if (!player.HasAnyPermission(RegisteredPerms))
            {
                player.ChatMessage("Permission".Lang(player.UserIDString));
                return;
            }

            var bgradePlayer = player.GetComponent<BGradePlayer>() ?? player.gameObject.AddComponent<BGradePlayer>();
            var grade = bgradePlayer.GetGrade() + 1;
            var count = 0;

            if (!player.HasPluginPerm("all"))
            {
                while (!player.HasPluginPerm(grade.ToString()))
                {
                    var newGrade = grade++;
                    if (newGrade > 4)
                    {
                        grade = 1;
                    }

                    if (count > bgradePlayer.GetGrade() + 4)
                    {
                        player.ChatMessage("Permission".Lang(player.UserIDString));
                        return;
                    }
                }
            }
            else if (grade > 4) grade = 1;

            var chatMsgs = new List<string>();
            bgradePlayer.SetGrade(grade);
            var time = bgradePlayer.GetTime();

            chatMsgs.Add("Notice.SetGrade".Lang(player.UserIDString, grade));
            if (AllowTimer && time > 0)
            {
                chatMsgs.Add("Notice.Time".Lang(player.UserIDString, time));
            }

            player.ChatMessage(string.Join("\n", chatMsgs.ToArray()));
        }

        #endregion
    }
}

namespace Oxide.Plugins.BGradeExt
{
    public static class BGradeExtensions
    {
        private static readonly Permission permission = Interface.Oxide.GetLibrary<Permission>();
        private static readonly Lang lang = Interface.Oxide.GetLibrary<Lang>();

        public static bool HasAnyPermission(this BasePlayer player, List<string> perms)
        {
            var hasPerm = false;
            foreach (var perm in perms)
            {
                if (player.HasPermission(perm))
                {
                    hasPerm = true;
                }
            }

            return hasPerm;
        }

        public static bool HasPermission(this BasePlayer player, string perm)
        {
            return permission.UserHasPermission(player.UserIDString, perm);
        }

        public static bool HasPluginPerm(this BasePlayer player, string perm)
        {
            return permission.UserHasPermission(player.UserIDString, BGrade.Instance.Name.ToLower() + "." + perm);
        }

        public static string Lang(this string key, string id = null, params object[] args)
        {
            return string.Format(lang.GetMessage(key, BGrade.Instance, id), args);
        }

        public static bool HasItemAmount(this BasePlayer player, int itemId, int itemAmount)
        {
            var count = 0;
            foreach (var item in player.inventory.AllItems())
            {
                if (item.info.itemid == itemId)
                {
                    count += item.amount;
                }
            }

            return count >= itemAmount;
        }

        public static bool HasItemAmount(this BasePlayer player, int itemId, int itemAmount, out int amountGot)
        {
            var count = 0;
            foreach (var item in player.inventory.AllItems())
            {
                if (item.info.itemid == itemId)
                {
                    count += item.amount;
                }
            }

            amountGot = count;
            return count >= itemAmount;
        }

        public static void TakeItem(this BasePlayer player, int itemId, int itemAmount)
        {
            if (player.inventory.Take(null, itemId, itemAmount) > 0)
            {
                player.SendConsoleCommand("note.inv", itemId, itemAmount * -1);
            }
        }
    }
}

// --- End of file: BGrade.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/CupboardSettings.cs ---
// --- Original Local Path: CupboardSettings.cs ---

using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using UnityEngine;
namespace Oxide.Plugins
{
    [Info("Cupboard Settings", "Sempai#3239", "1.0.21")]
    class CupboardSettings : RustPlugin
    {
        [PluginReference] private Plugin ImageLibrary;
        public Dictionary<ulong, PlayerSetting> PlayerListed = new Dictionary<ulong, PlayerSetting>();
        public class PlayerSetting
        {
            public Dictionary<uint, CupboardSetting> CupboardsList = new Dictionary<uint, CupboardSetting>();
        }
        void Unload()
        {
            SaveData();
            BasePlayer.activePlayerList.ToList().ForEach(player =>
            {
                CuiHelper.DestroyUi(player, "CupboardSettings_button");
                CuiHelper.DestroyUi(player, "CupboardSettings_main");
            }
            );
        }
        public class CupboardSetting
        {
            public int MaxLimit;
            public bool Announcement;
            public bool AuthOther;
            public string CupboardName;
        }
        private void OnServerInitialized()
        {
            if (!ImageLibrary)
            {
                PrintError("ImageLibrary not found! Plugin Unloaded");
                Interface.Oxide.UnloadPlugin(Title);
                return;
            }
            if (AddImage("https://i.imgur.com/4waRRlv.png", "https://i.imgur.com/4waRRlv.png")) Puts("Image library found! Images loaded");
            else PrintError("Что то пошло не так, ImageLibrary не загрузил изображение");
            permission.RegisterPermission(config.DefaultPermission, this);
            config.PrivilageList.ToList().ForEach(p => permission.RegisterPermission(p.Key, this));
            BasePlayer.activePlayerList.ToList().ForEach(OnPlayerConnected);
        }
        void OnPlayerConnected(BasePlayer player)
        {
            if (!PlayerListed.ContainsKey(player.userID)) PlayerListed.Add(player.userID, new PlayerSetting());
        }
        void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject("CupboardSetting_Players", PlayerListed);
        }
        void LoadData()
        {
            try
            {
                PlayerListed = Interface.GetMod().DataFileSystem.ReadObject<Dictionary<ulong, PlayerSetting>>("CupboardSetting_Players");
            }
            catch
            {
                PlayerListed = new Dictionary<ulong, PlayerSetting>();
            }
        }
        public string GetImage(string shortname, ulong skin = 0) => (string)ImageLibrary.Call("GetImage", shortname, skin);
        public bool AddImage(string shortname, string name) => (bool)ImageLibrary.Call("AddImage", shortname, name);
        private static PluginConfig config;
        protected override void LoadDefaultConfig()
        {
            PrintWarning("Благодарим за заказ плагина на сайте TopPlugin.ru. Если вы передадите этот плагин сторонним лицам знайте - это лишает вас гарантированных обновлений!");
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }
        private class PluginConfig
        {
            [JsonProperty(PropertyName = "Стандартный лимит авторизаций в шкафу")] public int StandartAuthLimit = 5;
            [JsonProperty(PropertyName = "Лимит авторизаций в шкафу с привилегией [Привилегия:Максимальный лимит]")] public Dictionary<string, int> PrivilageList = new Dictionary<string, int>();
            [JsonProperty(PropertyName = "Общая привилегия на использование UI настроек шкафа")] public string DefaultPermission = "cupboardsettings.allowed";
            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    StandartAuthLimit = 5,
                    PrivilageList = new Dictionary<string, int>()
                    {
                        ["CupboardSettings.vip"] = 7,
                        ["CupboardSettings.elite"] = 10,
                    }
                }
                ;
            }
        }
        void Loaded()
        {
            LoadData();
            lang.RegisterMessages(Messages, this, "en");
            Messages = lang.GetMessages("en", this);
            timer.Repeat(300, 0, () => SaveData());
        }
        void OnLootEntity(BasePlayer player, BaseEntity entity)
        {
            var cupboard = entity.gameObject.GetComponent<BuildingPrivlidge>();
            if (cupboard != null && cupboard.OwnerID == player.userID && permission.UserHasPermission(player.UserIDString, config.DefaultPermission))
            {
                CuiHelper.DestroyUi(player, "CupboardSettings_button");
                CuiElementContainer container = new CuiElementContainer();
                container.Add(new CuiButton
                {
                    RectTransform = {
                        AnchorMin="0.5 0", AnchorMax="0.5 0", OffsetMin="192 491", OffsetMax="573 556"
                    }
                    ,
                    Button = {
                        Color="0.57 0.74 0.27 1.00", Command=$"CupboardSettings_main {entity.net.ID}", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    ,
                    Text = {
                        Text="", Align=TextAnchor.MiddleCenter, Font="robotocondensed-regular.ttf", FontSize=24
                    }
                    ,
                }
                , "Overlay", "CupboardSettings_button");
                container.Add(new CuiElement
                {
                    Parent = "CupboardSettings_button",
                    Components = {
                        new CuiTextComponent {
                            Color="0.84 0.93 0.65 1.00", Text=Messages["MainButton"], FontSize=24, Font="robotocondensed-regular.ttf", Align=TextAnchor.MiddleCenter,
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin=$"0 0", AnchorMax=$"1 1"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 0.5", Distance="1 1"
                        }
                    }
                    ,
                }
                );
                CuiHelper.AddUi(player, container);
            }
        }
        [ConsoleCommand("CupboardSettings_main")]
        void cmdCupboardSettings(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            DrawSettingMenu(player, uint.Parse(args.Args[0]));
        }
        public Dictionary<string, ulong> PlayerAuth(BaseEntity BuildingID)
        {
            var cup = BuildingID.GetBuildingPrivilege();
            return cup.authorizedPlayers.ToDictionary(p => p.username, y => y.userid);
        }
        public int GetPrivilage(string steamid)
        {
            var standart = config.StandartAuthLimit;
            foreach (var privilage in config.PrivilageList)
            {
                if (permission.UserHasPermission(steamid, privilage.Key))
                {
                    if (standart < privilage.Value) standart = privilage.Value;
                }
            }
            return standart;
        }
        void DrawSettingMenu(BasePlayer player, uint cupboardId)
        {
            CuiHelper.DestroyUi(player, "CupboardSettings_main");
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0 0", AnchorMax="1 1"
                }
                ,
                Button = {
                    Color="0 0 0 0.95", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text="", Align=TextAnchor.MiddleCenter, Font="robotocondensed-regular.ttf", FontSize=24
                }
                ,
            }
            , "Overlay", "CupboardSettings_main");
            container.Add(new CuiElement()
            {
                Parent = "CupboardSettings_main",
                Components = {
                    new CuiTextComponent {
                        Text=Messages["MainText"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=35, FadeIn=0.5f
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0.9", AnchorMax="1 1"
                    }
                    , new CuiOutlineComponent {
                        Color="0 0 0 1", Distance="0.5 -0.5"
                    }
                }
            }
            );
            container.Add(new CuiElement()
            {
                Name = "CupboardSettings_mainClose",
                Parent = $"CupboardSettings_main",
                Components = {
                    new CuiRawImageComponent {
                        Png=GetImage("https://i.imgur.com/4waRRlv.png"), FadeIn=0.5f
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin=$"0.925 0.88", AnchorMax="0.98 0.98"
                    }
                    ,
                }
            }
            );
            container.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0 0", AnchorMax="1 1"
                }
                ,
                Button = {
                    Color="1 1 1 0", Close="CupboardSettings_main", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text="", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=24
                }
                ,
            }
            , "CupboardSettings_mainClose");
            var entity = BaseEntity.serverEntities.Find(cupboardId);
            var cup = entity.GetComponent<BuildingPrivlidge>();
            if (cup != null)
            {
                if (!PlayerListed.ContainsKey(player.userID))
                    OnPlayerConnected(player);

                if (!PlayerListed[player.userID].CupboardsList.ContainsKey(cup.net.ID) && cup.OwnerID == player.userID)
                {
                    PlayerListed[player.userID].CupboardsList.Add(cup.net.ID, new CupboardSetting()
                    {
                        Announcement = false,
                        MaxLimit = GetPrivilage(cup.OwnerID.ToString()),
                        AuthOther = false,
                        CupboardName = "Без названия",
                    }
                    );
                }
                container.Add(new CuiElement()
                {
                    Name = $"CupboardSettings.ownerAvatar",
                    Parent = "CupboardSettings_main",
                    Components = {
                        new CuiRawImageComponent {
                            Png=GetImage(cup.OwnerID.ToString()), FadeIn=0.5f
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin=$"0.25 0.65", AnchorMax="0.39 0.9"
                        }
                        ,
                    }
                }
                );
                container.Add(new CuiElement
                {
                    Name = $"CupboardSettings.owner",
                    Parent = "CupboardSettings_main",
                    Components = {
                        new CuiTextComponent {
                            Text=$"{Messages["OwnerName"]}: {covalence.Players.FindPlayerById(cup.OwnerID.ToString()).Name}", Color="0.97 0.97 0.97 1.00", Font="robotocondensed-bold.ttf", Align=TextAnchor.UpperLeft, FontSize=20
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0.41 0.85", AnchorMax="0.75 0.9"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 1", Distance="0.5 -0.5"
                        }
                    }
                }
                );
                container.Add(new CuiElement
                {
                    Name = $"CupboardSettings.owner",
                    Parent = "CupboardSettings_main",
                    Components = {
                        new CuiTextComponent {
                            Text=$"{Messages["CupNameText"]}: {PlayerListed[player.userID].CupboardsList[cup.net.ID].CupboardName}", Color="0.97 0.97 0.97 1.00", Font="robotocondensed-bold.ttf", Align=TextAnchor.UpperLeft, FontSize=20
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0.41 0.8", AnchorMax="0.75 0.85"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 1", Distance="0.5 -0.5"
                        }
                    }
                }
                );
                container.Add(new CuiButton
                {
                    RectTransform = {
                        AnchorMin="0.65 0.82", AnchorMax="0.75 0.85"
                    }
                    ,
                    Button = {
                        Color="1 1 1 0.5", Command=cup.OwnerID==player.userID ? $"cupboardSetting_setname {cup.net.ID}": "", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    ,
                    Text = {
                        Text="Изменить", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=12
                    }
                    ,
                }
                , $"CupboardSettings_main", $"CupboardSettings_main_setname");
                if (cup.OwnerID != player.userID) container.Add(new CuiElement
                {
                    Parent = "CupboardSettings_main_setname",
                    Components = {
                        new CuiImageComponent {
                            Color="0 0 0 0.1", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0 0", AnchorMax="1 1"
                        }
                    }
                }
                 );
                container.Add(new CuiElement
                {
                    Name = $"CupboardSettings.owner",
                    Parent = "CupboardSettings_main",
                    Components = {
                        new CuiTextComponent {
                            Text=$"{Messages["AuthOtherText"]}:", Color="0.97 0.97 0.97 1.00", Font="robotocondensed-bold.ttf", Align=TextAnchor.UpperLeft, FontSize=20
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0.41 0.65", AnchorMax="0.75 0.8"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 1", Distance="0.5 -0.5"
                        }
                    }
                }
                );
                container.Add(new CuiElement
                {
                    Name = "CupboardSettings_AuthList",
                    Parent = "CupboardSettings_main",
                    Components = {
                        new CuiRawImageComponent {
                            Color="1 1 1 0.1", Sprite="assets/content/ui/ui.background.tile.psd"
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0.25 0.2", AnchorMax="0.75 0.6"
                        }
                    }
                }
                );
                container.Add(new CuiElement
                {
                    Parent = "CupboardSettings_AuthList",
                    Components = {
                        new CuiTextComponent {
                            Text=Messages["AuthList"], Color="0.97 0.97 0.97 1.00", Font="robotocondensed-bold.ttf", Align=TextAnchor.MiddleCenter, FontSize=20
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0 1", AnchorMax="1 1.1"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 1", Distance="0.5 -0.5"
                        }
                    }
                }
                );
                var pos = GetPositions(5, 2, 0.03f, 0.03f, false);
                int i = 0;
                foreach (var target in PlayerAuth(cup).Take(10))
                {
                    container.Add(new CuiElement()
                    {
                        Name = $"CupboardSettings.{target.Key}",
                        Parent = "CupboardSettings_AuthList",
                        Components = {
                            new CuiImageComponent {
                                Color="0 0 0 0.1"
                            }
                            , new CuiRectTransformComponent {
                                AnchorMin=$"{pos[i].AnchorMin}", AnchorMax=$"{pos[i].AnchorMax}"
                            }
                            ,
                        }
                    }
                    );
                    container.Add(new CuiElement()
                    {
                        Parent = $"CupboardSettings.{target.Key}",
                        Components = {
                            new CuiRawImageComponent {
                                Png=GetImage(target.Value.ToString()), FadeIn=0.5f
                            }
                            , new CuiRectTransformComponent {
                                AnchorMin=$"0 0.2", AnchorMax="1 1"
                            }
                            ,
                        }
                    }
                    );
                    container.Add(new CuiElement
                    {
                        Parent = $"CupboardSettings.{target.Key}",
                        Components = {
                            new CuiImageComponent {
                                Color="0 0 0 0.2", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                            }
                            , new CuiRectTransformComponent {
                                AnchorMin="0 0", AnchorMax="1 1"
                            }
                            ,
                        }
                    }
                    );
                    container.Add(new CuiElement()
                    {
                        Parent = $"CupboardSettings.{target.Key}",
                        Components = {
                            new CuiTextComponent {
                                Text=target.Key, Align=TextAnchor.LowerCenter, Font="robotocondensed-bold.ttf", FontSize=15, FadeIn=0.5f
                            }
                            , new CuiRectTransformComponent {
                                AnchorMin="0 0.2", AnchorMax="1 1"
                            }
                            , new CuiOutlineComponent {
                                Color="0 0 0 1", Distance="1 -1"
                            }
                        }
                    }
                    );
                    container.Add(new CuiButton
                    {
                        RectTransform = {
                            AnchorMin="0.01 0.01", AnchorMax="0.99 0.18"
                        }
                        ,
                        Button = {
                            Color="0.71 0.10 0.07 1.00", Command=$"cupsetting.deauth {cup.net.ID} {target.Value}", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                        }
                        ,
                        Text = {
                            Text=Messages["DeAuth"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=12
                        }
                        ,
                    }
                    , $"CupboardSettings.{target.Key}");
                    i++;
                }
                container.Add(new CuiButton
                {
                    RectTransform = {
                        AnchorMin="0.3 0.12", AnchorMax="0.7 0.18"
                    }
                    ,
                    Button = {
                        Color="1 1 1 0.3", Command=GetPrivilage(cup.OwnerID.ToString()) > PlayerAuth(cup).Count && cup.OwnerID==player.userID ? $"cupboardsetting_playersList {cup.net.ID} 0": "", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    ,
                    Text = {
                        Text=GetPrivilage(cup.OwnerID.ToString()) > PlayerAuth(cup).Count ? Messages["AddUsers"]: Messages["AddUsersLimit"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=18
                    }
                    ,
                }
                , "CupboardSettings_main");
                CuiHelper.AddUi(player, container);
                if (cup.OwnerID == player.userID) CuiAddButtonOther(player, cup.net.ID, cup.OwnerID);
                LimitSetting(player, cup.net.ID, cup.OwnerID);
            }
        }
        void CuiAddButtonOther(BasePlayer player, uint netID, ulong playerid = 0)
        {
            CuiHelper.DestroyUi(player, "CupboardSettings_main_other");
            var elements = new CuiElementContainer();
            elements.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.65 0.77", AnchorMax="0.75 0.8"
                }
                ,
                Button = {
                    Color=!PlayerListed[player.userID].CupboardsList[netID].AuthOther ? "0.73 0.02 0.00 0.7": "0.04 0.69 0.19 0.7", Command=playerid==player.userID ? $"cupboardsetting_changeauth {netID}": "", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text=PlayerListed[player.userID].CupboardsList[netID].AuthOther ? Messages["AuthOtherEnabled"]: Messages["AuthOtherDisabled"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=18
                }
                ,
            }
            , "CupboardSettings_main", "CupboardSettings_main_other");
            CuiHelper.AddUi(player, elements);
        }
        [ConsoleCommand("cupboardSetting_setname")]
        void cmdSetAvatarOfClan(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            CuiHelper.DestroyUi(player, "cupboardSetting_setname");
            var elements = new CuiElementContainer();
            elements.Add(new CuiElement
            {
                Name = "cupboardSetting_setname",
                Parent = "CupboardSettings_main",
                Components = {
                    new CuiRawImageComponent {
                        Color="0 0 0 0.85", Sprite="assets/content/ui/ui.background.tile.psd", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0", AnchorMax="1 1"
                    }
                }
            }
            );
            elements.Add(new CuiElement
            {
                Name = "clans_setAvatar_input",
                Parent = "cupboardSetting_setname",
                Components = {
                    new CuiRawImageComponent {
                        Color="0.3294118 0.3294118 0.3294118 0.7", Sprite="assets/content/ui/ui.background.tile.psd"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.25 0.45", AnchorMax="0.67 0.55"
                    }
                }
            }
            );
            elements.Add(new CuiElement
            {
                Parent = "clans_setAvatar_input",
                Components = {
                    new CuiTextComponent {
                        Text="<size=18 >НАПИШИТЕ СЮДА НАЗВАНИЕ ШКАФА ИЛИ ВСТАВЬТЕ СКОПИРОВАННОЕ</size>", Color="1 0.9294118 0.8666667 0.1", Font="robotocondensed-bold.ttf", Align=TextAnchor.MiddleCenter
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0", AnchorMax="1 1"
                    }
                    ,
                }
            }
            );
            elements.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin=$"0.4 0.38", AnchorMax=$"0.6 0.44"
                }
                ,
                Button = {
                    Color="1 1 1 0.5", Close=$"cupboardSetting_setname", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text=Messages["ButtonClose"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=18
                }
                ,
            }
            , $"cupboardSetting_setname");
            elements.Add(new CuiElement()
            {
                Parent = "clans_setAvatar_input",
                Components = {
                    new CuiInputFieldComponent {
                        Align=TextAnchor.MiddleCenter, CharsLimit=20, FontSize=26, Command=$"cupboardsetting_changeName {args.Args[0]} ", Font="robotocondensed-bold.ttf", Text="",
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0", AnchorMax="1 1"
                    }
                }
            }
            );
            elements.Add(new CuiButton
            {
                Button = {
                    Color="0.25 0.25 0.23 0.9", Command=""
                }
                ,
                Text = {
                    Text="СОХРАНИТЬ", Align=TextAnchor.MiddleCenter, FontSize=14, Font="robotocondensed-bold.ttf", Color="1 0.9294118 0.8666667 1"
                }
                ,
                RectTransform = {
                    AnchorMin=$"1.01 0", AnchorMax=$"1.2 0.99"
                }
                ,
            }
            , "clans_setAvatar_input");
            CuiHelper.AddUi(player, elements);
        }
        [ConsoleCommand("cupboardsetting_playersList")]
        void cmdShowAllPlayers(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            CuiHelper.DestroyUi(player, "cupboardsetting_playersList");
            var cup = uint.Parse(args.Args[0]);
            var page = int.Parse(args.Args[1]);
            var elements = new CuiElementContainer();
            elements.Add(new CuiElement
            {
                Name = "cupboardsetting_playersList",
                Parent = "CupboardSettings_main",
                Components = {
                    new CuiRawImageComponent {
                        Color="0 0 0 0.85", Sprite="assets/content/ui/ui.background.tile.psd", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0", AnchorMax="1 1"
                    }
                }
            }
            );
            elements.Add(new CuiElement()
            {
                Parent = "cupboardsetting_playersList",
                Components = {
                    new CuiTextComponent {
                        Text=Messages["PlayersListTitle"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=30, FadeIn=0.5f
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0.9", AnchorMax="1 1"
                    }
                    , new CuiOutlineComponent {
                        Color="0 0 0 1", Distance="0.5 -0.5"
                    }
                }
            }
            );
            elements.Add(new CuiElement
            {
                Name = "cupboardsetting_playersList_AuthList",
                Parent = "cupboardsetting_playersList",
                Components = {
                    new CuiRawImageComponent {
                        Color="1 1 1 0.1", Sprite="assets/content/ui/ui.background.tile.psd"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.25 0.2", AnchorMax="0.75 0.9"
                    }
                }
            }
            );
            int i = 0;
            var pos = GetPositions(5, 3, 0.03f, 0.03f, false);
            var reply = 0;
            if (reply == 0) { }
            foreach (var target in covalence.Players.All.Skip(15 * page).Take(15))
            {
                elements.Add(new CuiElement()
                {
                    Name = $"CupboardSettings.{target.Id}",
                    Parent = "cupboardsetting_playersList_AuthList",
                    Components = {
                        new CuiImageComponent {
                            Color="0 0 0 0.1"
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin=$"{pos[i].AnchorMin}", AnchorMax=$"{pos[i].AnchorMax}"
                        }
                        ,
                    }
                }
                );
                elements.Add(new CuiElement()
                {
                    Parent = $"CupboardSettings.{target.Id}",
                    Components = {
                        new CuiRawImageComponent {
                            Png=GetImage(target.Id.ToString()), FadeIn=0.5f
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin=$"0 0.2", AnchorMax="1 1"
                        }
                        ,
                    }
                }
                );
                elements.Add(new CuiElement()
                {
                    Parent = $"CupboardSettings.{target.Id}",
                    Components = {
                        new CuiTextComponent {
                            Text=target.Name, Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=15, FadeIn=0.5f
                        }
                        , new CuiRectTransformComponent {
                            AnchorMin="0 0", AnchorMax="1 0.2"
                        }
                        , new CuiOutlineComponent {
                            Color="0 0 0 1", Distance="1 -1"
                        }
                    }
                }
                );
                elements.Add(new CuiButton
                {
                    RectTransform = {
                        AnchorMin="0 0.2", AnchorMax="1 1"
                    }
                    ,
                    Button = {
                        Color="0.71 0.10 0.07 0", Command=$"cupboardsetting_authuser {cup} {target.Id}", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                    }
                    ,
                    Text = {
                        Text=Messages["Auth"], Align=TextAnchor.LowerCenter, Font="robotocondensed-bold.ttf", FontSize=12
                    }
                    ,
                }
                , $"CupboardSettings.{target.Id}");
                i++;
            }
            if (page > 0) elements.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.25 0.15", AnchorMax="0.3 0.19"
                }
                ,
                Button = {
                    Color="1 1 1 0.5", Command=$"cupboardsetting_playersList {cup} {page - 1}", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text="<", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=25
                }
                ,
            }
            , $"cupboardsetting_playersList");
            if (covalence.Players.All.Skip(15 * page).ToList().Count > 15) elements.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.7 0.15", AnchorMax="0.75 0.19"
                }
                ,
                Button = {
                    Color="1 1 1 0.5", Command=$"cupboardsetting_playersList {cup} {page + 1}", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text=">", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=25
                }
                ,
            }
            , $"cupboardsetting_playersList");
            elements.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin=$"0.4 0.05", AnchorMax=$"0.6 0.13"
                }
                ,
                Button = {
                    Color="1 1 1 0.5", Close=$"cupboardsetting_playersList", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat"
                }
                ,
                Text = {
                    Text=Messages["ButtonClose"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=18
                }
                ,
            }
            , $"cupboardsetting_playersList");
            CuiHelper.AddUi(player, elements);
        }
        [ConsoleCommand("cupboardsetting_changeauth")]
        void cmdChangeAuthOther(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            var cup = PlayerListed[player.userID].CupboardsList[uint.Parse(args.Args[0])];
            if (cup.AuthOther) cup.AuthOther = false;
            else cup.AuthOther = true;
            CuiAddButtonOther(player, uint.Parse(args.Args[0]), player.userID);
        }
        [ConsoleCommand("cupboardsetting_authuser")]
        void cmdAuthNewUSer(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            var target = covalence.Players.FindPlayerById(args.Args[1]);
            var entity = BaseEntity.serverEntities.Find(uint.Parse(args.Args[0])) as BuildingPrivlidge;
            if (entity != null)
            {
                if (entity.authorizedPlayers.FirstOrDefault(p => p.userid == ulong.Parse(target.Id)) != null) return;
                if (entity.authorizedPlayers.Count >= PlayerListed[player.userID].CupboardsList[entity.net.ID].MaxLimit)
                {
                    SendReply(player, Messages["AuthLimit"]);
                    return;
                }
                entity.authorizedPlayers.Add(new ProtoBuf.PlayerNameID()
                {
                    username = target.Name,
                    userid = ulong.Parse(target.Id)
                }
                );
                DrawSettingMenu(player, uint.Parse(args.Args[0]));
            }
        }
        [ConsoleCommand("cupboardsetting_changeName")]
        void cmdChangeAvatarOfClan(ConsoleSystem.Arg args)
        {
            var player = args.Player();
            if (args.GetString(1) == "") return;
            var cup = PlayerListed[player.userID].CupboardsList[uint.Parse(args.Args[0])];
            var name = args.FullString.Skip(args.Args[0].Length + 1);
            cup.CupboardName = string.Join("", name);
            DrawSettingMenu(player, uint.Parse(args.Args[0]));
        }
        [ConsoleCommand("cupsetting.deauth")]
        void cmdDeAutorization(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            var entity = BaseEntity.serverEntities.Find(uint.Parse(arg.Args[0]));
            var target = ulong.Parse(arg.Args[1]);
            var cup = entity.GetComponent<BuildingPrivlidge>();
            if (cup != null) cup.authorizedPlayers.RemoveAll(a => a.userid == target);
            if (player.userID == target) player.EndLooting();
            else DrawSettingMenu(player, entity.net.ID);
        }
        [ConsoleCommand("cupsetting.changelimit")]
        void cmdChangeCupLimit(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            uint cup = uint.Parse(arg.Args[0]);
            switch (arg.Args[1])
            {
                case "+":
                    if (PlayerListed[player.userID].CupboardsList[cup].MaxLimit < GetPrivilage(player.UserIDString)) PlayerListed[player.userID].CupboardsList[cup].MaxLimit++;
                    break;
                case "-":
                    if (PlayerListed[player.userID].CupboardsList[cup].MaxLimit >= 2) PlayerListed[player.userID].CupboardsList[cup].MaxLimit--;
                    break;
            }
            LimitSetting(player, cup, player.userID);
        }
        [ConsoleCommand("cupsetting.enabledanno")]
        void cmdEnabledAnnouncement(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            uint cup = uint.Parse(arg.Args[0]);
            if (PlayerListed[player.userID].CupboardsList[cup].Announcement) PlayerListed[player.userID].CupboardsList[cup].Announcement = false;
            else PlayerListed[player.userID].CupboardsList[cup].Announcement = true;
            LimitSetting(player, cup, player.userID);
        }
        void LimitSetting(BasePlayer player, uint cup, ulong ownerID)
        {
            CuiHelper.DestroyUi(player, "CupboardSettings_limitsetting");
            CuiElementContainer container = new CuiElementContainer();
            container.Add(new CuiElement
            {
                Name = "CupboardSettings_limitsetting",
                Parent = "CupboardSettings_main",
                Components = {
                    new CuiRawImageComponent {
                        Color="1 1 1 0.05", Sprite="assets/content/ui/ui.background.tile.psd"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.41 0.65", AnchorMax="0.75 0.73"
                    }
                }
            }
            );
            container.Add(new CuiElement()
            {
                Parent = "CupboardSettings_limitsetting",
                Components = {
                    new CuiTextComponent {
                        Text=Messages["LimitTextUI"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=12
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.01 0.7", AnchorMax="0.4 1"
                    }
                    , new CuiOutlineComponent {
                        Color="0 0 0 1", Distance="1 -1"
                    }
                }
            }
            );
            container.Add(new CuiElement
            {
                Name = "CupboardSettings_limit",
                Parent = "CupboardSettings_limitsetting",
                Components = {
                    new CuiRawImageComponent {
                        Color="1 1 1 0.05", Sprite="assets/content/ui/ui.background.tile.psd"
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.01 0.05", AnchorMax="0.4 0.7"
                    }
                }
            }
            );
            container.Add(new CuiElement()
            {
                Parent = "CupboardSettings_limit",
                Components = {
                    new CuiTextComponent {
                        Text=PlayerListed[player.userID].CupboardsList[cup].MaxLimit.ToString(), Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=20
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0 0", AnchorMax="1 1"
                    }
                    , new CuiOutlineComponent {
                        Color="0 0 0 1", Distance="1 -1"
                    }
                }
            }
            );
            container.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.01 0.1", AnchorMax="0.3 0.9"
                }
                ,
                Button = {
                    Color="1 1 1 0.05", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat", Command=player.userID==ownerID ? $"cupsetting.changelimit {cup} -": ""
                }
                ,
                Text = {
                    Text="-", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=20
                }
                ,
            }
            , $"CupboardSettings_limit");
            container.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.7 0.1", AnchorMax="0.98 0.9"
                }
                ,
                Button = {
                    Color="1 1 1 0.05", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat", Command=player.userID==ownerID ? $"cupsetting.changelimit {cup} +": ""
                }
                ,
                Text = {
                    Text="+", Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=20
                }
                ,
            }
            , $"CupboardSettings_limit");
            container.Add(new CuiElement()
            {
                Parent = "CupboardSettings_limitsetting",
                Components = {
                    new CuiTextComponent {
                        Text=Messages["LimitbuttonTitle"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=12
                    }
                    , new CuiRectTransformComponent {
                        AnchorMin="0.5 0.7", AnchorMax="1 1"
                    }
                    , new CuiOutlineComponent {
                        Color="0 0 0 1", Distance="1 -1"
                    }
                }
            }
            );
            container.Add(new CuiButton
            {
                RectTransform = {
                    AnchorMin="0.5 0.05", AnchorMax="0.98 0.7"
                }
                ,
                Button = {
                    Color=PlayerListed[player.userID].CupboardsList[cup].Announcement ? "0.73 0.02 0.00 0.7": "0.04 0.69 0.19 0.7", Material="assets/content/ui/uibackgroundblur-ingamemenu.mat", Command=player.userID==ownerID ? $"cupsetting.enabledanno {cup}": ""
                }
                ,
                Text = {
                    Text=PlayerListed[player.userID].CupboardsList[cup].Announcement ? Messages["LimitbuttonDisable"]: Messages["LimitbuttonEnabled"], Align=TextAnchor.MiddleCenter, Font="robotocondensed-bold.ttf", FontSize=16
                }
                ,
            }
            , $"CupboardSettings_limitsetting");
            CuiHelper.AddUi(player, container);
        }
        class Position
        {
            public float Xmin;
            public float Xmax;
            public float Ymin;
            public float Ymax;
            public string AnchorMin => $"{Math.Round(Xmin, 4).ToString(CultureInfo.InvariantCulture)} {Math.Round(Ymin, 4).ToString(CultureInfo.InvariantCulture)}";
            public string AnchorMax => $"{Math.Round(Xmax, 4).ToString(CultureInfo.InvariantCulture)} {Math.Round(Ymax, 4).ToString(CultureInfo.InvariantCulture)}";
            public override string ToString()
            {
                return "----------\nAmin:{AnchorMin}\nAmax:{AnchorMax}\n----------‌​​​‍";
            }
        }
        [SuppressMessage("ReSharper", "CompareOfFloatsByEqualityOperator")]
        private static List<Position> GetPositions(int colums, int rows, float colPadding = 0, float rowPadding = 0, bool columsFirst = false)
        {
            if (colums == 0) throw new ArgumentException("Can't create positions for gui!‌​​​‍", nameof(colums));
            if (rows == 0) throw new ArgumentException("Can't create positions for gui!", nameof(rows));
            List<Position> result = new List<Position>();
            result.Clear();
            var colsDiv = 1f / colums;
            var rowsDiv = 1f / rows;
            if (colPadding == 0) colPadding = colsDiv / 2;
            if (rowPadding == 0) rowPadding = rowsDiv / 2;
            if (!columsFirst) for (int j = rows;
            j >= 1;
            j--)
                {
                    for (int i = 1;
                    i <= colums;
                    i++)
                    {
                        Position pos = new Position
                        {
                            Xmin = (i - 1) * colsDiv + colPadding / 2f,
                            Xmax = i * colsDiv - colPadding / 2f,
                            Ymin = (j - 1) * rowsDiv + rowPadding / 2f,
                            Ymax = j * rowsDiv - rowPadding / 2f
                        }
                        ;
                        result.Add(pos);
                    }
                }
            else for (int i = 1;
            i <= colums;
            i++)
                {
                    for (int j = rows;
                    j >= 1;
                    j--)
                    {
                        Position pos = new Position
                        {
                            Xmin = (i - 1) * colsDiv + colPadding / 2f,
                            Xmax = i * colsDiv - colPadding / 2f,
                            Ymin = (j - 1) * rowsDiv + rowPadding / 2f,
                            Ymax = j * rowsDiv - rowPadding / 2f
                        }
                        ;
                        result.Add(pos);
                    }
                }
            return result;
        }
        Dictionary<string, string> Messages = new Dictionary<string, string>() {
                {
                "MainButton", "<b>НАСТРОЙКИ ШКАФА</b>"
            }
            , {
                "DeAuth", "<b>ДЕАВТОРИЗОВАТЬ</b>"
            }
            , {
                "Auth", "<b>АВТОРИЗОВАТЬ</b>"
            }
            , {
                "AuthList", "<b>СПИСОК АВТОРИЗОВАННЫХ В ШКАФУ</b>"
            }
            , {
                "OwnerName", "<b>СОЗДАТЕЛЬ ШКАФА</b>"
            }
            , {
                "MainText", "<b>НАСТРОЙКИ ВЫШЕГО ШКАФА</b>"
            }
            , {
                "LimitText", "<b>АВТОРИЗОВАНЫХ ИГРОКОВ / ЛИМИТ</b>"
            }
            , {
                "CupNameText", "<b>ИМЯ ШКАФА</b>"
            }
            , {
                "LimitTextUI", "МАКС. ИГРОКОВ"
            }
            , {
                "LimitbuttonTitle", "ОПОВЕЩЕНИЕ ОБ АВТОРИЗАЦИИ"
            }
            , {
                "LimitbuttonEnabled", "ВКЛЮЧИТЬ"
            }
            , {
                "LimitbuttonDisable", "ОТКЛЮЧИТЬ"
            }
            , {
                "CupboardLimit", "ИЗВИНИТЕ! Но создатель шкафа установил ограничение на количество авторизованых игроков."
            }
            , {
                "AuthLimit", "ИЗВИНИТЕ! Вы превышаете лимит авторизованых игроков."
            }
            , {
                "PlayerAuth", "<color=red>Внимание</color>, игрок под именем <color=green>{0}</color> авторизовался в вашем шкафу: {1}.\n<size=10>Это автоматическое сообщение, так как вы включили оповещения об авторизациях</size>"
            }
            , {
                "AddUsers", "<b>АВТОРИЗОВАТЬ НОВОГО ИГРОКА</b>"
            }
            , {
                "AddUsersLimit", "<b>МАКСИМАЛЬНО ИГРОКОВ</b>"
            }
            , {
                "PlayersListTitle", "<b>АВТОРИЗАЦИЯ НОВОГО ИГРОКА\n<size=14>Выберите нужного со списка</size></b>"
            }
            , {
                "ButtonClose", "<b>ЗАКРЫТЬ</b>"
            }
            , {
                "AuthOtherText", "<b>ОТКЛЮЧИТЬ АВТОРИЗАЦИЮ</b>"
            }
            , {
                "AuthOtherEnabled", "<b>ВКЛЮЧЕНО</b>"
            }
            , {
                "AuthOtherDisabled", "<b>ОТКЛЮЧЕНО</b>"
            }
            ,
        }
        ;
        object OnCupboardAuthorize(BuildingPrivlidge privilege, BasePlayer player)
        {
            if (privilege == null || player == null || privilege?.net.ID == null) return null;
            var entity = PlayerListed.FirstOrDefault(p => p.Value.CupboardsList.ContainsKey(privilege.net.ID));
            if (entity.Key != 0 && entity.Key >= 76560000000000000L)
            {
                if (privilege.authorizedPlayers.Count >= entity.Value.CupboardsList[privilege.net.ID].MaxLimit && entity.Key != privilege.OwnerID)
                {
                    SendReply(player, Messages["CupboardLimit"]);
                    return false;
                }
                if (entity.Value.CupboardsList[privilege.net.ID].AuthOther && entity.Key != privilege.OwnerID)
                {
                    SendReply(player, Messages["CupboardLimit"]);
                    return false;
                }
                if (entity.Value.CupboardsList[privilege.net.ID].Announcement && entity.Key != privilege.OwnerID)
                {
                    var owner = BasePlayer.FindByID(entity.Key);
                    if (owner != null) SendReply(owner, Messages["PlayerAuth"], player.displayName, entity.Value.CupboardsList[privilege.net.ID].CupboardName);
                }
                return null;
            }
            return null;
        }
        private void OnLootEntityEnd(BasePlayer player, BaseCombatEntity entity)
        {
            if (player == null || entity == null || entity?.net.ID == null) return;
            CuiHelper.DestroyUi(player, "CupboardSettings_button");
            CuiHelper.DestroyUi(player, "CupboardSettings_main");
        }
    }
}

// --- End of file: CupboardSettings.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/PermissionsManager.cs ---
// --- Original Local Path: PermissionsManager.cs ---

﻿using System;
using System.Linq;
using System.Globalization;
using System.Collections.Generic;
using UnityEngine;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Cui;
using Newtonsoft.Json;

//Fixed next/previous/back navigation memory.
//now handles group names with spaces

namespace Oxide.Plugins
{
    [Info("PermissionsManager", "Steenamaroo", "2.0.4", ResourceId = 0)]
    class PermissionsManager : RustPlugin
    {
        #region Declarations
        List<string> PlugList = new List<string>();
        Dictionary<int, string> numberedPerms = new Dictionary<int, string>();
        List<ulong> MenuOpen = new List<ulong>();

        bool HasPermission(string id, string perm) => permission.UserHasPermission(id, perm);
        const string permAllowed = "permissionsmanager.allowed";

        Dictionary<ulong, Info> ActiveAdmins = new Dictionary<ulong, Info>();

        public class Info
        {
            public string inheritedcheck = ""; 
            public int noOfPlugs;
            public int pluginPage = 1;
            public int PPage = 1;
            public int GPage = 1;
            public string subjectGroup;
            public BasePlayer subject;
        }

        string ButtonColour1 = "0.7 0.32 0.17 1";
        string ButtonColour2 = "0.2 0.2 0.2 1";

        #endregion 

        #region Hooks
        void OnPluginLoaded(Plugin plugin)
        {
            if (plugin is PermissionsManager)
                return;
            Wipe();
            OnServerInitialized();
        }
        void OnPluginUnloaded(Plugin plugin)
        {
            if (plugin is PermissionsManager)
                return;
            Wipe();
            OnServerInitialized();
        }

        void Loaded()
        {
            lang.RegisterMessages(messages, this);
            permission.RegisterPermission(permAllowed, this);
        }

        void OnServerInitialized()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList.Where(player => MenuOpen.Contains(player.userID)))
                DestroyMenu(player, true);
            if (!LoadConfigVariables())
            {
                Puts("Config file issue detected. Please delete file, or check syntax and fix.");
                return;
            }
            SaveConfig();
        }

        void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList.Where(player => MenuOpen.Contains(player.userID)))
                DestroyMenu(player, true);
        }

        void OnPlayerDisconnected(BasePlayer player) 
        {
            if (MenuOpen.Contains(player.userID))
                DestroyMenu(player, true);
        }

        void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (MenuOpen.Contains(player.userID)) 
                DestroyMenu(player, true);
        }
        #endregion

        #region Methods
        void DestroyMenu(BasePlayer player, bool all)
        {
            CuiHelper.DestroyUi(player, "PMMainUI");
            CuiHelper.DestroyUi(player, "PMPermsUI");
            CuiHelper.DestroyUi(player, "PMConfirmUI");
            if (all)
            {
                CuiHelper.DestroyUi(player, "PMBgUI");
                MenuOpen.Remove(player.userID);
            }
        }

        void Wipe()
        {
            PlugList.Clear();
            numberedPerms.Clear();
        }

        void GetPlugs(BasePlayer player)
        {
            var path = ActiveAdmins[player.userID];
            PlugList.Clear();
            path.noOfPlugs = 0;
            foreach (var entry in plugins.GetAll())
            {
                if (entry.IsCorePlugin)
                    continue;

                var str = entry.ToString();
                var charsToRemove = new string[] { "Oxide.Plugins." };

                foreach (var c in charsToRemove)
                    str = str.Replace(c, string.Empty).ToLower();

                foreach (var perm in permission.GetPermissions().ToList().Where(perm => perm.Contains($"{str}") && !(config.BlockList.Split(',').ToList().Contains($"{str}"))))
                    if (!PlugList.Contains(str))
                        PlugList.Add(str);
            }
            PlugList.Sort();
        }

        bool IsAuth(BasePlayer player) => player?.net?.connection != null && player.net.connection.authLevel == 2;

        void SetButtons(bool on)
        {
            ButtonColour1 = (on) ? config.OffColour : config.OnColour;
            ButtonColour2 = (on) ? config.OnColour : config.OffColour;
        }

        object[] PermsCheck(BasePlayer player, string group, string info)
        {
            bool has = false;
            List<string> inherited = new List<string>();
            var path = ActiveAdmins[player.userID];
            if (group == "true")
            {
                if (permission.GroupHasPermission(path.subjectGroup, info))
                    has = true;
            }
            else
            {
                UserData userData = permission.GetUserData(path.subject.UserIDString);
                if (userData.Perms.Contains(info))
                    has = true;
                foreach (var group1 in permission.GetUserGroups(path.subject.UserIDString))
                    if (permission.GroupHasPermission(group1, info))
                        inherited.Add(group1);
            }
            return new object[] { has, inherited };
        }
        #endregion

        #region UI
        void PMBgUI(BasePlayer player)
        {
            MenuOpen.Add(player.userID);
            string guiString = String.Format("0.1 0.1 0.1 {0}", config.guitransparency);
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = guiString }, RectTransform = { AnchorMin = "0.3 0.1", AnchorMax = "0.7 0.9" }, CursorEnabled = true, FadeOut = 0.1f }, "Overlay", "PMBgUI");
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0.95", AnchorMax = $"0.998 1" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiButton { Button = { Color = "0 0 0 1" }, RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.998 0.05" }, Text = { Text = String.Empty } }, mainName);
            elements.Add(new CuiButton { Button = { Command = "ClosePM", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.955 0.96", AnchorMax = "0.99 0.995" }, Text = { Text = "X", FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            CuiHelper.AddUi(player, elements);
        }

        void PMMainUI(BasePlayer player, bool group, int page)
        {
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0.32 0.1", AnchorMax = "0.68 0.9" }, CursorEnabled = true }, "Overlay", "PMMainUI");
            elements.Add(new CuiElement { Parent = "PMMainUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });
            string subject = (group) ? lang.GetMessage("GUIPlayers", this) : lang.GetMessage("GUIGroups", this);
            string current = (!group) ? lang.GetMessage("GUIPlayers", this) : lang.GetMessage("GUIGroups", this);
            elements.Add(new CuiLabel { Text = { Text = "Permissions Manager V2", FontSize = 16, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            elements.Add(new CuiButton { Button = { Command = $"PMTogglePlayerGroup {group} 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.4 0.02", AnchorMax = "0.6 0.04" }, Text = { Text = lang.GetMessage("All", this) + " " + subject, FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            int pos1 = 20 - (page * 20), quantity = 0;
            float top = 0.87f;
            float bottom = 0.85f;

            elements.Add(new CuiLabel { Text = { Text = lang.GetMessage("All", this) + " " + current, FontSize = 14, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.9", AnchorMax = "1 0.97" } }, mainName);

            if (group)
                foreach (var grp in permission.GetGroups())
                {
                    pos1++;
                    quantity++;
                    if (pos1 > 0 && pos1 < 21)
                    {
                        elements.Add(new CuiButton { Button = { Command = $"PMSelected group {grp}", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.3 {bottom}", AnchorMax = $"0.7 {top}" }, Text = { Text = $"{grp}", FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        top = top - 0.025f;
                        bottom = bottom - 0.025f;
                    }
                }
            else
                foreach (var plyr in GetAllPlayers())
                {
                    pos1++;
                    quantity++;
                    if (pos1 > 0 && pos1 < 21)
                    {
                        elements.Add(new CuiButton { Button = { Command = $"PMSelected player {plyr.userID}", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.3 {bottom}", AnchorMax = $"0.7 {top}" }, Text = { Text = $"{plyr.displayName}", FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
                        top = top - 0.025f;
                        bottom = bottom - 0.025f;
                    }
                }

            if (quantity > (page * 20))
                elements.Add(new CuiButton { Button = { Command = $"PMTogglePlayerGroup {!group} {page + 1}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.8 0.02", AnchorMax = "0.9 0.04" }, Text = { Text = lang.GetMessage("->", this), FontSize = 11, Align = TextAnchor.MiddleCenter }, }, mainName);

            if (page > 1)
                elements.Add(new CuiButton { Button = { Command = $"PMTogglePlayerGroup {!group} {page - 1}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.1 0.02", AnchorMax = "0.2 0.04" }, Text = { Text = lang.GetMessage("<-", this), FontSize = 11, Align = TextAnchor.MiddleCenter }, }, mainName);

            CuiHelper.AddUi(player, elements);
        }

        void PlugsUI(BasePlayer player, string msg, string group, int page)
        {
            var path = ActiveAdmins[player.userID];
            var backpage = group == "false" ? path.PPage : path.GPage;
            string toggle = (group == "true") ? "false" : "true";
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0.32 0.1", AnchorMax = "0.68 0.9" }, CursorEnabled = true }, "Overlay", "PMPermsUI");
            elements.Add(new CuiElement { Parent = "PMPermsUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });

            int plugsTotal = 0, pos1 = 60 - (page * 60), next = page + 1, previous = page - 1;

            for (int i = 0; i < PlugList.Count; i++)
            {
                pos1++;
                plugsTotal++;

                if (pos1 > 0 && pos1 < 21)
                    elements.Add(new CuiButton { Button = { Command = $"PermsList {i} null null {group} null 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.1 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.3 {0.91 - (pos1 * 3f) / 100f}" }, Text = { Text = $"{PlugList[i]}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                if (pos1 > 20 && pos1 < 41)
                    elements.Add(new CuiButton { Button = { Command = $"PermsList {i} null null {group} null 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.4 {(0.89 - ((pos1 - 20) * 3f) / 100f)}", AnchorMax = $"0.6 {0.91 - ((pos1 - 20) * 3f) / 100f}" }, Text = { Text = $"{PlugList[i]}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                if (pos1 > 40 && pos1 < 61)
                    elements.Add(new CuiButton { Button = { Command = $"PermsList {i} null null {group} null 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.7 {(0.89 - ((pos1 - 40) * 3f) / 100f)}", AnchorMax = $"0.9 {0.91 - ((pos1 - 40) * 3f) / 100f}" }, Text = { Text = $"{PlugList[i]}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
            }
            elements.Add(new CuiButton { Button = { Command = $"PMTogglePlayerGroup {toggle} {backpage}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.55 0.02", AnchorMax = "0.75 0.04" }, Text = { Text = lang.GetMessage("GUIBack", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            elements.Add(new CuiLabel { Text = { Text = msg, FontSize = 16, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            if (group == "false")
                elements.Add(new CuiButton { Button = { Command = "Groups 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.25 0.02", AnchorMax = "0.45 0.04" }, Text = { Text = lang.GetMessage("GUIGroups", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            else
                elements.Add(new CuiButton { Button = { Command = "PlayersIn 1", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.25 0.02", AnchorMax = "0.45 0.04" }, Text = { Text = lang.GetMessage("GUIPlayers", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

            if (plugsTotal > (page * 60))
                elements.Add(new CuiButton { Button = { Command = $"Navigate {group} {next}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.8 0.02", AnchorMax = "0.9 0.04" }, Text = { Text = lang.GetMessage("->", this), FontSize = 11, Align = TextAnchor.MiddleCenter }, }, mainName);

            if (page > 1)
                elements.Add(new CuiButton { Button = { Command = $"Navigate {group} {previous}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.1 0.02", AnchorMax = "0.2 0.04" }, Text = { Text = lang.GetMessage("<-", this), FontSize = 11, Align = TextAnchor.MiddleCenter }, }, mainName);

            CuiHelper.AddUi(player, elements);
        }

        void PMPermsUI(BasePlayer player, string msg, int PlugNumber, string group, int page)
        {
            var path = ActiveAdmins[player.userID];
            var elements = new CuiElementContainer();

            var mainName = elements.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0.32 0.1", AnchorMax = "0.68 0.9" }, CursorEnabled = true }, "Overlay", "PMPermsUI");
            elements.Add(new CuiElement { Parent = "PMPermsUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });

            int permsTotal = 0, pos1 = 20 - (page * 20), next = (page + 1), previous = (page - 1);
            elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} grant null {group} all {page}", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.5 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.6 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIAll", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
            elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} revoke null {group} all {page}", Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.65 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.75 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUINone", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);

            var elements1 = new CuiElementContainer();
            bool list = false;
            foreach (var perm in numberedPerms)
            {
                SetButtons(true);
                pos1++;
                permsTotal++;
                var permNo = perm.Key;
                string showName = numberedPerms[permNo];
                string output = showName.Substring(showName.IndexOf('.') + 1);
                string granted = lang.GetMessage("GUIGranted", this);
                
                if (pos1 > 0 && pos1 < 21)
                {
                    granted = lang.GetMessage("GUIGranted", this);
                    if ((bool)PermsCheck(player, group, numberedPerms[permNo])[0])
                        SetButtons(false);
                    List<string> inheritcheck = (List<string>)(PermsCheck(player, group, numberedPerms[permNo])[1]);
                    if (inheritcheck.Count > 0)
                    {
                        if (path.inheritedcheck == numberedPerms[permNo]) 
                        {
                            var mainName1 = elements1.Add(new CuiPanel { Image = { Color = "0.1 0.1 0.1 0.99" }, RectTransform = { AnchorMin = "0.3 0.1", AnchorMax = "0.7 0.86" }, CursorEnabled = true, FadeOut = 0.1f }, "Overlay", "PMConfirmUI");
                            elements1.Add(new CuiButton { Button = { Command = $"ShowInherited {PlugNumber} null {numberedPerms[permNo]} {group} null {page} -", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.4 0.01", AnchorMax = "0.6 0.05" }, Text = { Text = lang.GetMessage("GUIBack", this), FontSize = 14, Align = TextAnchor.MiddleCenter }, }, mainName1);

                            float h1 = 0, h2 = 0;
                            elements1.Add(new CuiButton { Button = { Command = "", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.3 0.8", AnchorMax = "0.7 0.825" }, Text = { Text = $"{numberedPerms[permNo]}", FontSize = 12, Align = TextAnchor.MiddleCenter }, }, mainName1);
                            elements1.Add(new CuiLabel { Text = { Text = $"{lang.GetMessage("GUIInheritedFrom", this)}", FontSize = 11, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.77", AnchorMax = "1 0.8" } }, mainName1);

                            for (int i = 0; i < inheritcheck.Count; i++)
                            {
                                h1 = i * 0.022f;
                                h2 = i * 0.022f;
                                elements1.Add(new CuiLabel { Text = { Text = $"{inheritcheck[i]}", FontSize = 11, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = $"0 {0.7 - h1}", AnchorMax = $"1 {0.75 - h2}" } }, mainName1);
                            }

                            list = true;
                        }
                        elements.Add(new CuiButton { Button = { Command = $"ShowInherited {PlugNumber} null {numberedPerms[permNo]} {group} null {page} {numberedPerms[permNo]}", Color = config.InheritedColour }, RectTransform = { AnchorMin = $"0.8 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.9 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIInherited", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                    } 
                    elements.Add(new CuiButton { Button = { Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.1 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.45 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = $"{output}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);

                    elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} grant {numberedPerms[permNo]} {group} null {page}", Color = ButtonColour1 }, RectTransform = { AnchorMin = $"0.5 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.6 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIGranted", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                    elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} revoke {numberedPerms[permNo]} {group} null {page}", Color = ButtonColour2 }, RectTransform = { AnchorMin = $"0.65 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.75 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIRevoked", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                }
            }

            elements.Add(new CuiButton { Button = { Command = $"Navigate {group} {path.pluginPage}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.4 0.02", AnchorMax = "0.6 0.04" }, Text = { Text = lang.GetMessage("GUIBack", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            elements.Add(new CuiLabel { Text = { Text = msg, FontSize = 16, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            if (permsTotal > (page * 20))
                elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} null null {group} null {next}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.8 0.02", AnchorMax = "0.9 0.04" }, Text = { Text = "->", FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            if (page > 1)
                elements.Add(new CuiButton { Button = { Command = $"PermsList {PlugNumber} null null {group} null {previous}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.1 0.02", AnchorMax = "0.2 0.04" }, Text = { Text = "<-", FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            CuiHelper.AddUi(player, elements);

            if (list)
                CuiHelper.AddUi(player, elements1);
        }

        void ViewPlayersUI(BasePlayer player, string msg, int page)
        {
            var path = ActiveAdmins[player.userID];
            var outmsg = string.Format(lang.GetMessage("GUIPlayersIn", this), msg);
            string guiString = String.Format("0.1 0.1 0.1 {0}", config.guitransparency);
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0.32 0.1", AnchorMax = "0.68 0.9" }, CursorEnabled = true }, "Overlay", "PMPermsUI");
            elements.Add(new CuiElement { Parent = "PMPermsUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });

            int playerCounter = 0, pos1 = 20 - (page * 20), next = page + 1, previous = page - 1;

            foreach (var useringroup in permission.GetUsersInGroup(path.subjectGroup))
            {
                pos1++;
                playerCounter++;
                if (pos1 > 0 && pos1 < 21)
                    elements.Add(new CuiButton { Button = { Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.2 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.8 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = $"{useringroup}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
            }
            elements.Add(new CuiLabel { Text = { Text = outmsg, FontSize = 16, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            if (playerCounter > (page * 20))
                elements.Add(new CuiButton { Button = { Command = $"PlayersIn {next}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.8 0.02", AnchorMax = "0.9 0.04" }, Text = { Text = lang.GetMessage("->", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            if (page > 1)
                elements.Add(new CuiButton { Button = { Command = $"PlayersIn {previous}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.1 0.02", AnchorMax = "0.2 0.04" }, Text = { Text = lang.GetMessage("<-", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

            elements.Add(new CuiButton { Button = { Command = $"PMEmptyGroup", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.25 0.02", AnchorMax = "0.45 0.04" }, Text = { Text = lang.GetMessage("removePlayers", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            elements.Add(new CuiButton { Button = { Command = $"Navigate true {path.PPage}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.55 0.02", AnchorMax = "0.75 0.04" }, Text = { Text = lang.GetMessage("GUIBack", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

            CuiHelper.AddUi(player, elements);
        }

        void ViewGroupsUI(BasePlayer player, string msg, int page)
        {
            var path = ActiveAdmins[player.userID];
            var outmsg = string.Format(lang.GetMessage("GUIGroupsFor", this), msg);
            string guiString = String.Format("0.1 0.1 0.1 {0}", config.guitransparency);
            var elements = new CuiElementContainer();
            var mainName = elements.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0.32 0.1", AnchorMax = "0.68 0.9" }, CursorEnabled = true }, "Overlay", "PMPermsUI");
            elements.Add(new CuiElement { Parent = "PMPermsUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });

            int groupTotal = 0, pos1 = 20 - (page * 20), next = page + 1, previous = page - 1;

            foreach (var group in permission.GetGroups())
            {
                SetButtons(true);
                pos1++;
                groupTotal++;
                if (pos1 > 0 && pos1 < 21)
                {
                    foreach (var user in permission.GetUsersInGroup(group))
                    {
                        if (user.Contains(path.subject.UserIDString))
                        {
                            SetButtons(false);
                            break; 
                        }
                    }

                    //MAKE THIS OPEN UI FOR THAT GROUP  
                    elements.Add(new CuiButton { Button = { Color = config.ButtonColour }, RectTransform = { AnchorMin = $"0.2 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.5 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = $"{group}", FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                    elements.Add(new CuiButton { Button = { Command = $"GroupAddRemove add {RemoveSpaces(group)} {page}", Color = ButtonColour1 }, RectTransform = { AnchorMin = $"0.55 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.65 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIGranted", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                    elements.Add(new CuiButton { Button = { Command = $"GroupAddRemove remove {RemoveSpaces(group)} {page}", Color = ButtonColour2 }, RectTransform = { AnchorMin = $"0.7 {(0.89 - (pos1 * 3f) / 100f)}", AnchorMax = $"0.8 {(0.91 - (pos1 * 3f) / 100f)}" }, Text = { Text = lang.GetMessage("GUIRevoked", this), FontSize = 10, Align = TextAnchor.MiddleCenter } }, mainName);
                }
            }
            elements.Add(new CuiButton { Button = { Command = $"Navigate false {path.pluginPage}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.4 0.02", AnchorMax = "0.6 0.04" }, Text = { Text = lang.GetMessage("GUIBack", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            elements.Add(new CuiLabel { Text = { Text = outmsg, FontSize = 16, Align = TextAnchor.MiddleCenter }, RectTransform = { AnchorMin = "0 0.95", AnchorMax = "1 1" } }, mainName);

            if (groupTotal > (page * 20))
                elements.Add(new CuiButton { Button = { Command = $"Groups {next}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.7 0.02", AnchorMax = "0.8 0.04" }, Text = { Text = lang.GetMessage("->", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);
            if (page > 1)
                elements.Add(new CuiButton { Button = { Command = $"Groups {previous}", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.2 0.02", AnchorMax = "0.3 0.04" }, Text = { Text = lang.GetMessage("<-", this), FontSize = 11, Align = TextAnchor.MiddleCenter } }, mainName);

            CuiHelper.AddUi(player, elements); 
        }
        #endregion

        #region console commands
        [ConsoleCommand("PMToMain")]
        private void PMToMain(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            PMMainUI(player, false, 1);
        }

        [ConsoleCommand("PMTogglePlayerGroup")]
        private void PMTogglePlayerGroup(ConsoleSystem.Arg arg, bool group, int page)
        {
            var player = arg?.Connection?.player as BasePlayer;
            if (player == null || arg.Args == null || arg.Args.Length != 2) return;
            group = !(Convert.ToBoolean(arg.Args[0]));
            page = Convert.ToInt16(arg.Args[1]);
            if (group)
                ActiveAdmins[player.userID].GPage = page;
            else
                ActiveAdmins[player.userID].PPage = page;
            DestroyMenu(player, false);
            PMMainUI(player, group, page);
        }

        [ConsoleCommand("ShowInherited")]
        private void ShowInherited(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 6) return;
            int pageNo = Convert.ToInt32(arg.Args[5]);
            path.inheritedcheck = arg.Args[6];
            var plugNumber = Convert.ToInt32(arg.Args[0]);
            string plugName = PlugList[Convert.ToInt32(arg.Args[0])];
            DestroyMenu(player, false);
            PMPermsUI(player, $"{path.subject.displayName} - {plugName}", plugNumber, "false", pageNo);
        }

        [ConsoleCommand("PMEmptyGroup")]
        private void PMEmptyGroup(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;

            var elements1 = new CuiElementContainer();
            var mainName1 = elements1.Add(new CuiPanel { Image = { Color = "0.1 0.1 0.1 0.8" }, RectTransform = { AnchorMin = "0.4 0.42", AnchorMax = "0.6 0.48" }, CursorEnabled = true, FadeOut = 0.1f }, "Overlay", "PMConfirmUI");
            elements1.Add(new CuiElement { Parent = "PMConfirmUI", Components = { new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" } } });
            elements1.Add(new CuiButton { Button = { Command = $"Empty true", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.1 0.2", AnchorMax = "0.4 0.8" }, Text = { Text = lang.GetMessage("confirm", this), FontSize = 14, Align = TextAnchor.MiddleCenter }, }, mainName1);
            elements1.Add(new CuiButton { Button = { Command = $"Empty false", Color = config.ButtonColour }, RectTransform = { AnchorMin = "0.6 0.2", AnchorMax = "0.9 0.8" }, Text = { Text = lang.GetMessage("cancel", this), FontSize = 14, Align = TextAnchor.MiddleCenter }, }, mainName1);

            CuiHelper.AddUi(player, elements1);
        }

        [ConsoleCommand("EmptyGroup")]//user console command
        private void EmptyGroup(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;

            if (player != null && !HasPermission(player.UserIDString, permAllowed) & !IsAuth(player))
            {
                SendReply(player, config.TitleColour + lang.GetMessage("title", this) + "</color>" + config.MessageColour + lang.GetMessage("NotAdmin", this) + "</color>");
                return;
            }

            if (arg.Args == null || arg.Args.Length < 1) 
                return;
            string groupname = arg.Args[0];
            var list = permission.GetUsersInGroup(groupname);
            if (list == null || list.Length == 0)
            {
                Puts($"Group {groupname} was not found."); 
                return;
            }
            foreach (var user in permission.GetUsersInGroup(groupname))
            {
                string str = user.Substring(0, 17);
                permission.RemoveUserGroup(str, groupname);
            }
            Puts($"All users were removed from {groupname}");
        }

        [ConsoleCommand("Empty")]
        private void Empty(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            string confirmation = arg.Args[0];
            if (confirmation == "true")
            {
                int count = 0;
                foreach (var user in permission.GetUsersInGroup(path.subjectGroup))
                {
                    count++;
                    string str = user.Substring(0, 17);
                    permission.RemoveUserGroup(str, path.subjectGroup);
                    DestroyMenu(player, false);
                    var argsOut = new string[] { "group", path.subjectGroup };
                    CmdPerms(player, null, argsOut);
                }
                if (count == 0)
                    CuiHelper.DestroyUi(player, "PMConfirmUI");
            }
            else
                CuiHelper.DestroyUi(player, "PMConfirmUI");
        }

        string RemoveSpaces(string input)=>input.Replace(" ", "-");
        string RemoveDashes(string input)=>input.Replace("-", " ");

        [ConsoleCommand("GroupAddRemove")]
        private void GroupAddRemove(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 3) return;
            string Pname = path.subject.userID.ToString();
            string userGroup = RemoveDashes(arg.Args[1]);
            int page = Convert.ToInt32(arg.Args[2]);
            if (arg.Args[0] == "add")
                permission.AddUserGroup(Pname, userGroup);
            if (arg.Args[0] == "remove")
                permission.RemoveUserGroup(Pname, userGroup);
            DestroyMenu(player, false);
            ViewGroupsUI(player, $"{path.subject.displayName}", page);
        }

        [ConsoleCommand("Groups")]
        private void GroupsPM(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 1) return;
            ActiveAdmins[player.userID].GPage = Convert.ToInt32(arg.Args[0]);
            DestroyMenu(player, false);
            ViewGroupsUI(player, $"{path.subject.displayName}", path.GPage);
        }

        [ConsoleCommand("PlayersIn")]
        private void PlayersPM(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 1) return;
            ActiveAdmins[player.userID].PPage = Convert.ToInt32(arg.Args[0]);
            DestroyMenu(player, false);
            ViewPlayersUI(player, $"{path.subjectGroup}", path.PPage);
        }

        [ConsoleCommand("ClosePM")]
        private void ClosePM(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            if (player == null) return;
            ActiveAdmins.Remove(player.userID);
            DestroyMenu(player, true);
        }

        [ConsoleCommand("Navigate")]
        private void Navigate(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 2) return;
            ActiveAdmins[player.userID].pluginPage = Convert.ToInt32(arg.Args[1]);
            DestroyMenu(player, false);
            string[] argsOut;
            if (arg.Args[0] == "true")
            {
                argsOut = new string[] { "group", path.subjectGroup, path.pluginPage.ToString() };
                CmdPerms(player, null, argsOut);
            }
            else
            {
                argsOut = new string[] { "player", path.subject.userID.ToString(), path.pluginPage.ToString() };
                CmdPerms(player, null, argsOut);
            }
            return;
        }

        [ConsoleCommand("PMSelected")]
        private void PMSelected(ConsoleSystem.Arg arg)
        {
            var player = arg?.Connection?.player as BasePlayer;
            DestroyMenu(player, false);
            string[] argsOut;
            argsOut = new string[] { arg.Args[0], arg.Args[1] };
            if (arg.Args[0] == "player")
                ActiveAdmins[player.userID].subject = FindPlayer(Convert.ToUInt64(arg.Args[1]));
            else
                ActiveAdmins[player.userID].subjectGroup = arg.Args[1];
            CmdPerms(player, null, argsOut);
            return;
        }

        [ConsoleCommand("PermsList")]
        private void PermsList(ConsoleSystem.Arg arg, int plugNumber)
        {
            var player = arg?.Connection?.player as BasePlayer;
            var path = ActiveAdmins[player.userID];
            if (player == null || arg.Args == null || arg.Args.Length < 6) return;
            int pageNo = Convert.ToInt32(arg.Args[5]);
            string Pname;
            string group = arg.Args[3];

            if (arg.Args[4] == "all")
            {
                if (arg.Args[2] != null)
                {
                    Pname = path.subject?.userID.ToString();
                    string action = arg.Args[1];
                    foreach (var perm in numberedPerms)
                    {
                        if (config.AllPerPage == true && perm.Key > (pageNo * 20) - 20 && perm.Key < ((pageNo * 20) + 1))
                        {
                            if (action == "grant" && group == "false")
                                permission.GrantUserPermission(Pname, perm.Value, null);
                            if (action == "revoke" && group == "false")
                                permission.RevokeUserPermission(Pname, perm.Value);
                            if (action == "grant" && group == "true")
                                permission.GrantGroupPermission(path.subjectGroup, perm.Value, null);
                            if (action == "revoke" && group == "true")
                                permission.RevokeGroupPermission(path.subjectGroup, perm.Value);
                        }
                        if (config.AllPerPage == false)
                        {
                            if (action == "grant" && group == "false")
                                permission.GrantUserPermission(Pname, perm.Value, null);
                            if (action == "revoke" && group == "false")
                                permission.RevokeUserPermission(Pname, perm.Value);
                            if (action == "grant" && group == "true")
                                permission.GrantGroupPermission(path.subjectGroup, perm.Value, null);
                            if (action == "revoke" && group == "true")
                                permission.RevokeGroupPermission(path.subjectGroup, perm.Value);
                        }
                    }
                }
            }
            else
            {
                Pname = path.subject?.userID.ToString();
                string action = arg.Args[1];
                string PermInHand = arg.Args[2];
                if (arg.Args[2] != null)
                {
                    if (action == "grant" && group == "false")
                        permission.GrantUserPermission(Pname, PermInHand, null);
                    if (action == "revoke" && group == "false")
                        permission.RevokeUserPermission(Pname, PermInHand);
                    if (action == "grant" && group == "true")
                        permission.GrantGroupPermission(path.subjectGroup, PermInHand, null);
                    if (action == "revoke" && group == "true")
                        permission.RevokeGroupPermission(path.subjectGroup, PermInHand);
                }
            }
            plugNumber = Convert.ToInt32(arg.Args[0]);
            string plugName = PlugList[plugNumber];

            numberedPerms.Clear();
            int numOfPerms = 0;
            foreach (var perm in permission.GetPermissions())
            {
                if (perm.Contains($"{plugName}."))
                {
                    numOfPerms++;
                    numberedPerms.Add(numOfPerms, perm);
                }
            }
            DestroyMenu(player, false);
            if (group == "false")
                PMPermsUI(player, $"{path.subject.displayName} - {plugName}", plugNumber, group, pageNo);
            else
                PMPermsUI(player, $"{path.subjectGroup} - {plugName}", plugNumber, group, pageNo);
            return;
        }
        #endregion

        #region chat commands
        [ChatCommand("perms")]
        void CmdPerms(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player.UserIDString, permAllowed) & !IsAuth(player))
            {
                SendReply(player, config.TitleColour + lang.GetMessage("title", this) + "</color>" + config.MessageColour + lang.GetMessage("NotAdmin", this) + "</color>");
                return;
            }
            if (!ActiveAdmins.ContainsKey(player.userID))
                ActiveAdmins.Add(player.userID, new Info());
            var path = ActiveAdmins[player.userID];
            GetPlugs(player);

            int page = 1;
            if (args.Length == 3)
                page = Convert.ToInt32(args[2]);

            if (args == null || args.Length < 2)
            {
                bool group = (args != null && args.Length == 1 && args[0] == "group") ? true : false;
                if (MenuOpen.Contains(player.userID))
                    DestroyMenu(player, group);
                PMBgUI(player);
                PMMainUI(player, group, 1);
                return;
            }
            if (args[0] == "player")
            {
                UInt64 n = 0;
                bool isNumeric = UInt64.TryParse(args[1], out n);
                path.subject = isNumeric ? FindPlayer(n) : FindPlayerByName(args[1]);
                if (path.subject == null)
                {
                    SendReply(player, config.TitleColour + lang.GetMessage("title", this) + "</color>" + config.MessageColour + lang.GetMessage("NoPlayer", this) + "</color>", args[1]);
                    return;
                }
                string msg = string.Format(lang.GetMessage("GUIName", this), path.subject.displayName);

                if (MenuOpen.Contains(player.userID))
                    DestroyMenu(player, true);
                PMBgUI(player);
                PlugsUI(player, msg, "false", page);
            }
            else if (args[0] == "group")
            {
                List<string> Groups = new List<string>();
                foreach (var group in permission.GetGroups())
                    Groups.Add(group);
                if (Groups.Contains($"{args[1]}"))
                {
                    string msg = string.Format(lang.GetMessage("GUIName", this), args[1]);

                    ActiveAdmins[player.userID].subjectGroup = args[1];
                    if (MenuOpen.Contains(player.userID))
                        DestroyMenu(player, true);
                    PMBgUI(player);
                    PlugsUI(player, msg, "true", page);
                    return;
                }
                SendReply(player, config.TitleColour + lang.GetMessage("title", this) + "</color>" + config.MessageColour + lang.GetMessage("NoGroup", this) + "</color>", args[1]);
            }
            else
                SendReply(player, config.TitleColour + lang.GetMessage("title", this) + "</color>" + config.MessageColour + lang.GetMessage("Syntax", this) + "</color>");
        }

        List<BasePlayer> GetAllPlayers()
        {
            List<BasePlayer> available = new List<BasePlayer>();
            foreach (BasePlayer online in BasePlayer.activePlayerList)
                available.Add(online);

            foreach (BasePlayer sleeper in BasePlayer.sleepingPlayerList)
                available.Add(sleeper);
            return available;
        }

        BasePlayer FindPlayer(ulong ID)
        {
            BasePlayer result = null;
            foreach (BasePlayer current in GetAllPlayers())
            {
                if (current.userID == ID)
                    result = current;
            }
            return result;
        }

        BasePlayer FindPlayerByName(string name) 
        {
            BasePlayer result = null;
            foreach (var player in GetAllPlayers())
            {
                if (player.displayName.Equals(name, StringComparison.OrdinalIgnoreCase)
                    || player.UserIDString.Contains(name, CompareOptions.OrdinalIgnoreCase)
                    || player.displayName.Contains(name, CompareOptions.OrdinalIgnoreCase))  
                    result = player;
            }
            return result;
        }

        #endregion

        #region config
        public ConfigData config;    
        public class ConfigData  
        {  
            [JsonProperty(PropertyName = "Options - GUI Transparency 0-1")] 
            public double guitransparency = 0.9;
            [JsonProperty(PropertyName = "Chat - Title colour")]
            public string TitleColour = "<color=orange>";
            [JsonProperty(PropertyName = "Chat - Message colour")]
            public string MessageColour = "<color=white>";
            [JsonProperty(PropertyName = "Options - Plugin BlockList")]
            public string BlockList = "";
            [JsonProperty(PropertyName = "GUI - Label colour")]
            public string ButtonColour = "0.7 0.32 0.17 1";
            [JsonProperty(PropertyName = "GUI - On colour")]
            public string OnColour = "0.7 0.32 0.17 1";
            [JsonProperty(PropertyName = "GUI - Off colour")]
            public string OffColour = "0.2 0.2 0.2 1";
            [JsonProperty(PropertyName = "GUI - All = per page")]
            public bool AllPerPage = false;
            [JsonProperty(PropertyName = "GUI - Inherited colour")]
            public string InheritedColour = "0.9 0.6 0.17 1";
        }

        private bool LoadConfigVariables()
        {
            try
            {
                config = Config.ReadObject<ConfigData>();
            }
            catch
            {
                return false;
            }
            SaveConfig(config);
            return true;
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Creating new config file.");
            var config = new ConfigData();
            SaveConfig(config);
        }

        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region messages
        readonly Dictionary<string, string> messages = new Dictionary<string, string>()
        {
            {"title", "Permissions Manager: " }, 
            {"NoGroup", "Group {0} was not found." },
            {"NoPlayer", "Player {0} was not found." },
            {"GUIAll", "Grant All" },
            {"GUINone", "Revoke All" },
            {"GUIBack", "Back" },
            {"GUIGroups", "Groups" },
            {"GUIPlayers", "Players" },
            {"GUIInherited", "Inherited" },
            {"GUIInheritedFrom", "Inherited from" },
            {"GUIGranted", "Granted" },
            {"GUIRevoked", "Revoked" },
            {"GUIName", "Permissions for {0}" },
            {"GUIGroupsFor", "Groups for {0}"},
            {"GUIPlayersIn", "Players in {0}"},
            {"removePlayers", "Remove All Players"},
            {"confirm", "Confirm"},
            {"cancel", "Cancel"},
            {"NotAdmin", "You need Auth Level 2, or permission, to use this command."},
            {"Back", "Back"},
            {"All", "All"},
            {"Syntax", "Use /perms, /perms player *name*, or /perms group *name*"}
        };
        #endregion
    }
}


// --- End of file: PermissionsManager.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/RepairTool.cs ---
// --- Original Local Path: RepairTool.cs ---

using System.Collections.Generic;
using UnityEngine;
using System.Reflection;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("RepairTool", "k1lly0u", "0.1.1", ResourceId = 1883)]
    class RepairTool : RustPlugin
    {
        #region Fields
        private static FieldInfo serverinput;
        private string panelName = "RTUI";
        private List<Repairer> activeRepairers = new List<Repairer>();
        #endregion

        #region Oxide Hooks
        void OnServerInitialized() => InitPlugin();
        void Unload() => DestroyAllPlayers();
        void OnPlayerInput(BasePlayer player, InputState input)
        {
            if (player.GetComponent<Repairer>())
                if (input.WasJustPressed(BUTTON.FIRE_PRIMARY))
                {
                    if (!player.IsConnected() || player.IsDead()) { player.GetComponent<Repairer>().DestroyComponent(); return; }

                    if (player.GetActiveItem() != null)
                    {
                        MSG(player, GetMSG("HandsFull"));
                        return;
                    }
                    player.GetComponent<Repairer>().FindTarget();
                }
        }
        #endregion

        #region UI
        private void CreateUI(BasePlayer player, int time, string name)
        {
            var element = new CuiElementContainer()
            {
                {
                    new CuiPanel
                    {
                        Image = {Color = "0.2 0.2 0.2 0.7"},
                        RectTransform = {AnchorMin = "0.005 0.89", AnchorMax = "0.2 0.99"},
                    },
                    new CuiElement().Parent = "Overlay",
                    panelName
                }
            };
            element.Add(new CuiLabel
            {
                Text = { FontSize = 20, Align = TextAnchor.MiddleCenter, Text = $"Repair time remaining: {time}" },
                RectTransform = { AnchorMin = "0 0.5", AnchorMax = "1 1" }
            },
            panelName);
            element.Add(new CuiLabel
            {
                Text = { FontSize = 16, Align = TextAnchor.MiddleCenter, Text = name },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0.5" }
            },
            panelName);
            CuiHelper.AddUi(player, element);
        }
        private void DestroyUI(BasePlayer player) => CuiHelper.DestroyUi(player, panelName);
        #endregion

        #region Functions
        private void InitPlugin()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                { "Repaired", "Repaired " },
                { "RepairNum", "You have repaired {0} entities across the map"},
                { "NoRepair", "Unable to find any repairable entities" },
                { "RepairRad", "You have repaired {0} entities in a {1} radius" },
                { "RepairMap", "You have repaired {0} entities across the map" },
                { "NoRad", "You must enter a radius amount" },
                { "ChatAll", "/rt all - Repairs everything on the map" },
                { "ChatRad", "/rt radius <radius> - Repairs all items found in <radius>" },
                { "ChatRepair", "/rt repair <opt:time> - Activates the repair tool for <time>" },
                { "Chat", "- Chat Commands" },
                { "Deactive", "Repair tool de-activated" },
                { "MaxHealth", "The target already has max health" },
                { "HandsFull", "You cannot use the repair tool with a item in your hands" }
            }, this);
            permission.RegisterPermission("repairtool.use", this);
            serverinput = typeof(BasePlayer).GetField("serverInput", (BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.NonPublic));
        }
        private object RepairEntity(BaseEntity entity)
        {
            var r = entity.GetComponent<ResourceDispenser>();
            var e = entity.GetComponent<BaseCombatEntity>();
            if (e != null)
            {
                if (e.health != e.MaxHealth())
                {
                    if (r != null)
                        r.fractionRemaining = 1f;
                    e.health = e.MaxHealth();
                    e.SendNetworkUpdate();
                    return true;
                }
                return GetMSG("MaxHealth");
            }            
            return false;
        }
        private BaseEntity FindEntity(BasePlayer player)
        {
            var input = serverinput.GetValue(player) as InputState;
            var currentRot = Quaternion.Euler(input.current.aimAngles) * Vector3.forward; 
            var rayResult = Ray(player, currentRot);
            if (rayResult is BaseEntity)
            {
                var ent = rayResult as BaseEntity;
                return ent;
            }
            else
            {
                var ent = FindBuildingBlock(new Ray(player.eyes.position, Quaternion.Euler(input.current.aimAngles) * Vector3.forward), 50);
                if (ent == null) return null;
                return ent;
            }           
            
        }
        private object Ray(BasePlayer player, Vector3 Aim)
        {            
            var hits = Physics.RaycastAll(player.transform.position + new Vector3(0f, 1.5f, 0f), Aim);
            float distance = 50f;
            object target = null;

            foreach (var hit in hits)
            {
                if (hit.collider.GetComponentInParent<BaseEntity>() != null)
                {
                    if (hit.distance < distance)
                    {
                        distance = hit.distance;
                        target = hit.collider.GetComponentInParent<BaseEntity>();
                    }
                }               
            }
            return target;
        }
        private BaseEntity FindBuildingBlock(Ray ray, float distance)
        {
            RaycastHit hit;
            if (!UnityEngine.Physics.Raycast(ray, out hit, distance, LayerMask.GetMask(new string[] { "Construction", "Deployable", "Prevent Building", "Deployed" })))
                return null;
            return hit.GetEntity();
        }
        private void MSG(BasePlayer player, string msg, bool title = true)
        {            
            msg = "<color=#939393>" + msg + "</color>";
            if (title) msg = "<color=#FF8C00>Repair Tool:</color> " + msg;
            SendReply(player, msg);
        }
        private string GetMSG(string key) => lang.GetMessage(key, this);
        private void DestroyAllPlayers()
        {
            for (int i = 0; i < activeRepairers.Count - 1; i++)                
                if (activeRepairers[i] != null)
                    activeRepairers[i].DestroyComponent();
        }
        #endregion

        #region Chat Commands
        [ChatCommand("rt")]
        private void cmdRA(BasePlayer player, string command, string[] args)
        {
            if (HasPerm(player))
            {
                if (player.GetComponent<Repairer>())
                {
                    player.GetComponent<Repairer>().DestroyComponent();
                    MSG(player, GetMSG("Deactive"));
                    return;
                }
                if (args == null || args.Length == 0)
                {
                    MSG(player, GetMSG("Chat"));
                    MSG(player, GetMSG("ChatRepair"), false);
                    MSG(player, GetMSG("ChatRad"), false);
                    MSG(player, GetMSG("ChatAll"), false);
                    return;
                }
                else switch (args[0].ToLower())
                    {
                        case "repair":
                            {
                                int time = 30;
                                if (args.Length > 1)
                                    int.TryParse(args[1], out time);
                                activeRepairers.Add(player.gameObject.AddComponent<Repairer>());
                                player.GetComponent<Repairer>().InitPlayer(player, time, this);
                            }
                            return;
                        case "radius":
                            if (args.Length > 1)
                            {
                                int radius;
                                if (!int.TryParse(args[1], out radius))
                                {
                                    MSG(player, GetMSG("NoRad"));
                                    return;
                                }
                                List<BaseEntity> foundEntities = new List<BaseEntity>();
                                Vis.Entities(player.transform.position, radius, foundEntities);
                                if (foundEntities == null)
                                {
                                    MSG(player, GetMSG("NoRepair"));
                                    return;
                                }
                                int i = 0;
                                foreach (var entity in foundEntities)
                                {
                                    var success = RepairEntity(entity);
                                    if (success is string) continue;
                                    if (success is bool)
                                        if ((bool) success)
                                            i++;
                                }
                                MSG(player, string.Format(GetMSG("RepairRad"), i, radius));
                            }
                            return;
                        case "all":
                            {
                                var foundEntities = UnityEngine.Object.FindObjectsOfType<BaseEntity>();                                
                                if (foundEntities == null)
                                {
                                    MSG(player, GetMSG("NoRepair"));
                                    return;
                                }
                                int i = 0;
                                foreach (var entity in foundEntities)
                                {
                                    var success = RepairEntity(entity);
                                    if (success is string) continue;
                                    if (success is bool)
                                        if ((bool)success)
                                            i++;
                                }
                                MSG(player, string.Format(GetMSG("RepairMap"), i));
                            }
                            return;
                    }
            }
        }
        private bool HasPerm(BasePlayer player)
        {
            if (permission.UserHasPermission(player.UserIDString, "repairtool.use")) return true;
            else if (player.IsAdmin()) return true;
            return false;
        }
        #endregion

        #region Player Class
        class Repairer : MonoBehaviour
        {
            public BasePlayer player;
            public int TimeRemaining;
            public InputState inputState;
            RepairTool ra;

            public void InitPlayer(BasePlayer p, int time, RepairTool repairtool)
            {
                player = p;
                TimeRemaining = time;
                ra = repairtool;
                ra.activeRepairers.Add(this);
                InvokeRepeating("RefreshGUI", 0.01f, 1);
            }
            public void FindTarget()
            {                
                var entity = ra.FindEntity(player);
                if (entity == null) return;
                var success = ra.RepairEntity(entity);
                if (success is string)
                {
                    ra.MSG(player, (string)success);
                    return;
                }
                else if (success is bool)
                    if ((bool)success)
                    {
                        string name = entity.ShortPrefabName.Replace(".prefab", "").Replace("_deployed", "").Replace(".deployed", "").Replace("_", " ").Replace(".", " ");
                        ra.MSG(player, ra.GetMSG("Repaired") + name);
                    }
            }
            private void RefreshGUI()
            {
                DestroyGUI();
                if (TimeRemaining > 0)
                {
                    string name = "---";
                    var entity = ra.FindEntity(player);
                    if (entity != null) name = entity.ShortPrefabName.Replace(".prefab", "").Replace("_deployed", "").Replace(".deployed", "").Replace("_", " ").Replace(".", " ");
                    ra.CreateUI(player, TimeRemaining, name);
                }
                else DestroyComponent();
                TimeRemaining--;
            }
            void DestroyGUI() => ra.DestroyUI(player);
            public void DestroyComponent()
            {
                CancelInvoke("RefreshGUI");
                ra.activeRepairers.Remove(this);
                DestroyGUI();
                UnityEngine.Object.Destroy(this);
            }
        }   
        #endregion
    }
}


// --- End of file: RepairTool.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/AliasSystem.cs ---
// --- Original Local Path: AliasSystem.cs ---

using System.Collections.Generic;
using Oxide.Game.Rust.Libraries;
using System.Linq;
using Oxide.Core;
using System;

namespace Oxide.Plugins
{
    [Info("Alias System", "LaserHydra", "2.0.0", ResourceId = 1307)]
    [Description("Setup alias for chat and console commands")]
    class AliasSystem : RustPlugin
    {
		class Alias
		{
			public string original;
			public string alias;
			public string originaltype;
			public string aliastype;
			public string permission = "commandalias.use";
			
			public Alias(string aliasname, string Original)
			{
				original = Original;
				alias = aliasname;
				
				if(aliasname.StartsWith("/")) aliastype = "chat";
				else if(!aliasname.StartsWith("/")) aliastype = "console";
				
				if(Original.StartsWith("/")) originaltype = "chat";
				else if(!Original.StartsWith("/")) originaltype = "console";
			}
			
			public Alias()
			{
			}
		}
		
		class Data
		{
			public List<Alias> alias = new List<Alias>();
			
			public Data()
			{
			}
		}
		
		Data data;
		
		Data LoadData() 
		{
			return Interface.GetMod().DataFileSystem.ReadObject<Data>("AliasSystem_Data");
		}
		
		void SaveData()
		{
			Interface.GetMod().DataFileSystem.WriteObject("AliasSystem_Data", data);
		}
		
		void Loaded()
		{	
			data = LoadData();
			LoadConfig();
			
			if(!permission.PermissionExists("commandalias.admin")) permission.RegisterPermission("commandalias.admin", this);
			if(!permission.PermissionExists("commandalias.use")) permission.RegisterPermission("commandalias.use", this);

            foreach(Alias current in data.alias)
            {
				if(current.aliastype == "chat")
				{
					cmd.AddChatCommand(current.alias.Substring(1, current.alias.Length - 1), this, "ChatAlias");
				}
				else if(current.aliastype == "console")
				{
					cmd.AddConsoleCommand("global." + current.alias, this, "ConsoleAlias");
				}
            }
		}
		
		void LoadConfig()
		{
		}
		
		void LoadDefaultConfig()
		{
			Puts("Generating new config file...");
			LoadConfig();
		}
		
		void ChatAlias(BasePlayer player, string command, string[] args)
		{
			if(GetAliasByName("/" + command) == null) return;
			
			Alias alias = GetAliasByName("/" + command);
			
			if(!permission.UserHasPermission(player.userID.ToString(), alias.permission)) 
			{
				SendChatMessage(player, "Command Alias", "You have no permission to use this command.");
				return;
			}
			
			if(alias.originaltype == "chat")
				RunChatCommand(player, command, ListToString(args.ToList(), 0, " "));
			else if(alias.originaltype == "console")
				RunConsoleCommand(player, command, ListToString(args.ToList(), 0, " "));
		}
		
		void ConsoleAlias(ConsoleSystem.Arg arg)
		{
			BasePlayer player = (BasePlayer)arg?.connection?.player ?? null;
			if(player == null) return;
			
			string command = arg?.cmd?.namefull?.Replace("global.", "") ?? "";
			
			if(GetAliasByName(command) == null) return;
			
			Alias alias = GetAliasByName(command);
			
			if(!permission.UserHasPermission(player.userID.ToString(), alias.permission)) 
			{
				SendChatMessage(player, "Command Alias", "You have no permission to use this command.");
				return;
			}
			
			if(alias.originaltype == "chat")
				RunChatCommand(player, command, ArgToString(arg, 0, " "));
			else if(alias.originaltype == "console")
				RunConsoleCommand(player, command, ArgToString(arg, 0, " "));
		}
		
		[ChatCommand("alias")]
		void cmdAlias(BasePlayer player, string command, string[] args)
		{
			if(!permission.UserHasPermission(player.userID.ToString(), "commandalias.admin")) 
			{
				SendChatMessage(player, "Command Alias", "You have no permission to use this command.");
				return;
			}
			
			if(args.Length < 1)
			{
				SendChatMessage(player, "Command Alias", "\n/alias add <alias> <command>\n/alias remove <alias>");
				return;
			}
			
			switch(args[0])
			{
				case "add":
					
					if(args.Length < 3)
					{
						SendChatMessage(player, "Command Alias", "Syntax: /alias add <alias> <original>");
						return;
					}
					
					data.alias.Add(new Alias(args[1], args[2]));
					SaveData();
					
					if(args[1].StartsWith("/")) cmd.AddChatCommand(args[1].Substring(1, args[1].Length - 1), this, "ChatAlias");
					else cmd.AddConsoleCommand("global." + args[1], this, "ConsoleAlias");
					
					SendChatMessage(player, "Command Alias", $"Alias {args[1]} successfuly set for command {args[2]}");
					
					break;
					
				case "remove":
				
					if(args.Length < 2)
					{
						SendChatMessage(player, "Command Alias", "Syntax: /alias remove <alias>");
						return;
					}
					
					Alias alias = GetAliasByName(args[1]);
					
					if(data.alias.Contains(alias))
					{
						data.alias.Remove(alias);
						SaveData();
					
						SendChatMessage(player, "Command Alias", $"Alias {args[1]} successfuly removed.");	
					}
					else SendChatMessage(player, "Command Alias", $"Alias {args[1]} does not exist.");
					
					break;
					
				default:
					break;
			}
		}
		
		Alias GetAliasByName(string aliasname)
		{
			foreach(Alias current in data.alias)
            {
				if(current.alias == aliasname) return current;
            }
			
			return null;
		}
		
		void RunChatCommand(BasePlayer player, string command, string args)
		{
			Alias alias = GetAliasByName(command);
			if(alias == null) alias = GetAliasByName("/" + command);
			
			player.SendConsoleCommand("chat.say", "/" + $"{alias.original.Substring(1, alias.original.Length - 1).Replace("'", "\"")} {args.Replace("'", "\"")}");
		}
		
		void RunConsoleCommand(BasePlayer player, string command, string args)
		{
			Alias alias = GetAliasByName(command);
			if(alias == null) alias = GetAliasByName("/" + command);
			
			player.SendConsoleCommand(alias.original.Replace("'", "\""), args.Replace("'", "\""));
		}
		
        #region UsefulMethods
        //--------------------------->   Player finding   <---------------------------//

		BasePlayer GetPlayer(string searchedPlayer, BasePlayer executer, string prefix)
        {
            BasePlayer targetPlayer = null;
            List<string> foundPlayers = new List<string>();
            string searchedLower = searchedPlayer.ToLower();
            
			foreach(BasePlayer player in BasePlayer.activePlayerList)
			{
				if(player.displayName.ToLower().Contains(searchedLower)) foundPlayers.Add(player.displayName);
			}
			
			switch(foundPlayers.Count)
			{
				case 0:
					SendChatMessage(executer, prefix, "The Player can not be found.");
					break;
					
				case 1:
					targetPlayer = BasePlayer.Find(foundPlayers[0]);
					break;
				
				default:
					string players = ListToString(foundPlayers, 0, ", ");
					SendChatMessage(executer, prefix, "Multiple matching players found: \n" + players);
					break;
			}
			
            return targetPlayer;
        }

        //---------------------------->   Converting   <----------------------------//

        string ListToString(List<string> list, int first, string seperator)
		{
			return String.Join(seperator, list.Skip(first).ToArray());
		}
		
		string ArgToString(ConsoleSystem.Arg arg, int first, string seperator)
		{
			if(arg.Args == null || arg.Args.Count() < 1) return string.Empty;
			return ListToString(arg.Args.ToList(), first, seperator);
		}

        //------------------------------>   Config   <------------------------------//

        void SetConfig(string Arg1, object Arg2, object Arg3 = null, object Arg4 = null)
		{
			if(Arg4 == null)
			{
				Config[Arg1, Arg2.ToString()] = Config[Arg1, Arg2.ToString()] ?? Arg3;
			}
			else if(Arg3 == null)
			{
				Config[Arg1] = Config[Arg1] ?? Arg2;
			}
			else
			{
				Config[Arg1, Arg2.ToString(), Arg3.ToString()] = Config[Arg1, Arg2.ToString(), Arg3.ToString()] ?? Arg4;
			}
		}

        //---------------------------->   Chat Sending   <----------------------------//

        void BroadcastChat(string prefix, string msg = null) => PrintToChat(msg == null ? prefix : "<color=#00FF8D>" + prefix + "</color>: " + msg);

        void SendChatMessage(BasePlayer player, string prefix, string msg = null) => SendReply(player, msg == null ? prefix : "<color=#00FF8D>" + prefix + "</color>: " + msg);

        //---------------------------------------------------------------------------//
        #endregion
    }
}


// --- End of file: AliasSystem.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/WeatherEvents.cs ---
// --- Original Local Path: WeatherEvents.cs ---

using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Weather Events", "OuTSMoKE, Rick", "1.4.0")]
    [Description("Calls weather events with console commands.")]
    class WeatherEvents : RustPlugin
    {
        public Timer StormTimer;
        public int time = 0;
		public List<string> cmds = new List<string>
        {
            "we rain",
            "we lightrain",
            "we heavyrain",
			"we storm",
			"we heavystorm",
			"we lightfog",
			"we fog",
			"we dust",
			"we heavyfog",
			"we overcast",
			"we partlycloudy",
			"we spottyshowers",
			"we quickfront",
			"we sunandclouds",
			"we clear",
			"we volcanicsky",
			"we smokeysky",
			"we windy"
        };

        void Unload()
        {
            if (StormTimer != null)
                StormTimer.Destroy();
            time = 0;
        }

		void OnServerInitialized ()
		{
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.rain 0");
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.fog 0");
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.wind 0");
		}

        [ConsoleCommand("we")]
        void cmdSpecial(ConsoleSystem.Arg arg)
        {
            if (!arg.IsServerside) return;
            if (arg.Args == null || arg.Args.Count() == 0) return;
            var stormType = arg.Args[0];
            if (stormType.Equals("random"))
            {
                stormType = Storms.Keys.ToList().GetRandom();
                arg.ReplyWith($"Running random weather event: {stormType}");
            }
            if (!Storms.ContainsKey(stormType)) return;
            NewStormTimer(stormType);
        }

        void NewStormTimer(string TypeOfStorm)
        {
            if (StormTimer != null)
                StormTimer.Destroy();
            time = 0;
            StormTimer = timer.Every(1, () => ProcessStorm(Storms[TypeOfStorm]));
        }

        void ProcessStorm(Dictionary<int, List<string>> StormData)
        {
            time++;
            if (StormData.ContainsKey(time))
                foreach (var entry in StormData[time])
                {
                    if (entry == "STOP") { StormTimer.Destroy(); time = 0; return; }
                    ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), entry);
                }
        }

        public Dictionary<string, Dictionary<int, List<string>>> Storms = new Dictionary<string, Dictionary<int, List<string>>>
                {
                    {"storm", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_size 1.25" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 1.5" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_size 1.75" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 2.0" } },
						{100, new List<string> {"weather.cloud_coverage 0.22", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.75" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26", "weather.cloud_size 2.25" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_size 2.5" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.3" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.4" } },
						{240, new List<string> {"weather.cloud_coverage 0.5" } },
						{245, new List<string> {"weather.rain 0.01" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52", "weather.cloud_sharpness 0.5" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{305, new List<string> {"weather.rain 0.02" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{365, new List<string> {"weather.rain 0.05" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.1" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68" } },
						{425, new List<string> {"weather.rain 0.1" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.2" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74", "weather.cloud_attenuation 0.3" } },
						{485, new List<string> {"weather.rain 0.2" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{500, new List<string> {"weather.cloud_coverage 0.76", "weather.cloud_attenuation 0.4" } },
						{520, new List<string> {"weather.cloud_coverage 0.78" } },
						{540, new List<string> {"weather.cloud_coverage 0.8", "weather.cloud_attenuation 0.5" } },
						{545, new List<string> {"weather.rain 0.3" } },
						{560, new List<string> {"weather.cloud_coverage 0.82", "weather.cloud_attenuation 0.6" } },
						{580, new List<string> {"weather.cloud_coverage 0.84", "weather.cloud_attenuation 0.7" } },
						{600, new List<string> {"weather.cloud_coverage 0.86", "weather.cloud_attenuation 0.8" } },
						{605, new List<string> {"weather.rain 0.4", "weather.wind 0.2", "weather.thunder 1" } },
						{620, new List<string> {"weather.cloud_coverage 0.88" } },
						{640, new List<string> {"weather.cloud_coverage 0.9" } },
						{660, new List<string> {"weather.cloud_coverage 0.92" } },
						{665, new List<string> {"weather.rain 0.5" } },
						{680, new List<string> {"weather.cloud_coverage 0.94" } },
						{700, new List<string> {"weather.cloud_coverage 0.96" } },
						{720, new List<string> {"weather.cloud_coverage 0.98" } },
						{725, new List<string> {"weather.rain 0.6", "weather.wind 0.4" } },
						{740, new List<string> {"weather.cloud_coverage 1" } },
						{785, new List<string> {"weather.rain 0.7" } },
						{845, new List<string> {"weather.rain 0.8" } },
						{850, new List<string> {"weather.wind 0.6" } },
						{905, new List<string> {"weather.rain 0.9", "weather.wind 0.8" } },
						{965, new List<string> {"weather.rain 1", "weather.wind 1", "weather.cloud_size 2.0" } },
						{1035, new List<string> {"weather.rain 0.8" } },
						{1065, new List<string> {"weather.rain 0.7", "weather.wind 0.8" } },
						{1095, new List<string> {"weather.rain 0.6", "weather.wind 0.6", "weather.cloud_attenuation 0.7" } },
						{1160, new List<string> {"weather.wind 0.4", "weather.cloud_size 1.75" } },
						{1185, new List<string> {"weather.rain 0.4", "weather.rainbow 1" } },
						{1240, new List<string> {"weather.wind 0.2", "weather.cloud_attenuation 0.6" } },
						{1245, new List<string> {"weather.rain 0.3", "weather.cloud_size 1.5" } },
						{1250, new List<string> {"weather.cloud_coverage 0.98" } },
						{1270, new List<string> {"weather.cloud_coverage 0.96" } },
						{1285, new List<string> {"weather.rain 0.2", "weather.cloud_size 1.25" } },
						{1290, new List<string> {"weather.cloud_coverage 0.94" } },
						{1310, new List<string> {"weather.cloud_coverage 0.92", "weather.cloud_attenuation 0.5" } },
						{1330, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_size 1.0" } },
						{1335, new List<string> {"weather.rain 0.15", "weather.wind 0", "weather.thunder 0" } },
						{1340, new List<string> {"weather.cloud_attenuation 0.4" } },
						{1350, new List<string> {"weather.cloud_coverage 0.88" } },
						{1370, new List<string> {"weather.cloud_coverage 0.86" } },
						{1375, new List<string> {"weather.rain 0.1", "weather.cloud_size 0.88" } },
						{1390, new List<string> {"weather.cloud_coverage 0.84" } },
						{1405, new List<string> {"weather.rain 0.06" } },
						{1410, new List<string> {"weather.cloud_coverage 0.82" } },
						{1430, new List<string> {"weather.cloud_coverage 0.8", "weather.cloud_attenuation 0.3", "weather.cloud_size 0.75" } },
						{1450, new List<string> {"weather.cloud_coverage 0.78" } },
						{1455, new List<string> {"weather.rain 0.05" } },
						{1470, new List<string> {"weather.cloud_coverage 0.76" } },
						{1490, new List<string> {"weather.cloud_coverage 0.74" } },
						{1495, new List<string> {"weather.rain 0.04" } },
						{1500, new List<string> {"weather.fog 0.24" } },
						{1510, new List<string> {"weather.cloud_coverage 0.72" } },
						{1520, new List<string> {"weather.fog 0.22" } },
						{1530, new List<string> {"weather.cloud_coverage 0.7" } },
						{1535, new List<string> {"weather.rain 0.03" } },
						{1540, new List<string> {"weather.fog 0.2" } },
						{1550, new List<string> {"weather.cloud_coverage 0.68" } },
						{1560, new List<string> {"weather.fog 0.18" } },
						{1570, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.2" } },
						{1575, new List<string> {"weather.rain 0.02" } },
						{1580, new List<string> {"weather.fog 0.16", } },
						{1590, new List<string> {"weather.cloud_coverage 0.64" } },
						{1600, new List<string> {"weather.fog 0.14" } },
						{1610, new List<string> {"weather.cloud_coverage 0.62" } },
						{1615, new List<string> {"weather.rain 0.01" } },
						{1620, new List<string> {"weather.fog 0.12" } },
						{1630, new List<string> {"weather.cloud_coverage 0.6" } },
						{1640, new List<string> {"weather.fog 0.1" } },
						{1650, new List<string> {"weather.cloud_coverage 0.58" } },
						{1660, new List<string> {"weather.fog 0.08" } },
						{1670, new List<string> {"weather.cloud_coverage 0.56" } },
						{1680, new List<string> {"weather.fog 0.06" } },
						{1690, new List<string> {"weather.cloud_coverage 0.54" } },
						{1700, new List<string> {"weather.fog 0.04" } },
						{1710, new List<string> {"weather.cloud_coverage 0.52" } },
						{1720, new List<string> {"weather.fog 0.02" } },
						{1730, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{1735, new List<string> {"weather.rain 0" } },
						{1740, new List<string> {"weather.fog 0" } },
						{1750, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.4" } },
						{1760, new List<string> {"weather.cloud_coverage 0.46" } },
						{1770, new List<string> {"weather.cloud_coverage 0.44" } },
						{1780, new List<string> {"weather.cloud_coverage 0.42" } },
						{1790, new List<string> {"weather.cloud_coverage 0.4" } },
						{1800, new List<string> {"weather.cloud_coverage 0.38" } },
						{1810, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.3" } },
						{1820, new List<string> {"weather.cloud_coverage 0.34", "weather.cloud_size 0.88" } },
						{1830, new List<string> {"weather.cloud_coverage 0.32" } },
						{1840, new List<string> {"weather.cloud_coverage 0.3" } },
						{1850, new List<string> {"weather.cloud_coverage 0.28", "weather.cloud_sharpness 0.2" } },
						{1860, new List<string> {"weather.cloud_coverage 0.26" } },
						{1870, new List<string> {"weather.cloud_coverage 0.24" } },
						{1880, new List<string> {"weather.cloud_coverage 0.22" } },
						{1890, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 0.875" } },
						{1900, new List<string> {"weather.cloud_coverage 0.18", "weather.cloud_attenuation -1" } },
						{1910, new List<string> {"weather.cloud_coverage 0.16", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
						{1920, new List<string> {"weather.cloud_coverage 0.14" } },
						{1930, new List<string> {"weather.cloud_coverage 0.12" } },
						{1940, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size -1" } },
						{1950, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{1960, new List<string> {"weather.cloud_coverage 0.06" } },
						{1970, new List<string> {"weather.cloud_coverage 0.04" } },
						{1980, new List<string> {"weather.cloud_coverage 0.02", "weather.rainbow -1" } },						
                        {1990, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"heavystorm", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_size 1.38" } },
						{30, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.5" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 1.75" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_size 2.0" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 2.0" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 2.38" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24", "weather.cloud_size 2.75" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28", "weather.cloud_sharpness 0.3" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation 0.1", "weather.cloud_size 3.0" } },
						{150, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_sharpness 0.4" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.5" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.5" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44", "weather.cloud_sharpness 0.6" } },
						{220, new List<string> {"weather.cloud_coverage 0.46", "weather.cloud_attenuation 0.2" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_sharpness 0.7" } },
						{245, new List<string> {"weather.rain 0.01" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54", "weather.cloud_attenuation 0.3" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{305, new List<string> {"weather.rain 0.02" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.4" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{365, new List<string> {"weather.rain 0.05" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64", "weather.cloud_attenuation 0.5" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.6" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68", "weather.thunder 1" } },
						{425, new List<string> {"weather.rain 0.1", "weather.cloud_attenuation 0.7" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72", "weather.cloud_attenuation 0.8" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74" } },
						{485, new List<string> {"weather.rain 0.2" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{500, new List<string> {"weather.cloud_coverage 0.76" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{520, new List<string> {"weather.cloud_coverage 0.78", "weather.cloud_attenuation 0.9" } },
						{530, new List<string> {"weather.fog 0.3" } },
						{540, new List<string> {"weather.cloud_coverage 0.8", "weather.atmosphere_rayleigh -1" } },
						{545, new List<string> {"weather.rain 0.3" } },
						{550, new List<string> {"weather.fog 0.32" } },
						{560, new List<string> {"weather.cloud_coverage 0.82" } },
						{570, new List<string> {"weather.fog 0.34" } },
						{580, new List<string> {"weather.cloud_coverage 0.84" } },
						{590, new List<string> {"weather.fog 0.36" } },
						{600, new List<string> {"weather.cloud_coverage 0.86" } },
						{605, new List<string> {"weather.rain 0.4", "weather.wind 0.2" } },
						{610, new List<string> {"weather.fog 0.38" } },
						{620, new List<string> {"weather.cloud_coverage 0.88" } },
						{630, new List<string> {"weather.fog 0.4" } },
						{640, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_attenuation 1" } },
						{650, new List<string> {"weather.fog 0.42" } },
						{660, new List<string> {"weather.cloud_coverage 0.92" } },
						{665, new List<string> {"weather.rain 0.5" } },
						{670, new List<string> {"weather.fog 0.44" } },
						{680, new List<string> {"weather.cloud_coverage 0.94" } },
						{690, new List<string> {"weather.fog 0.46" } },
						{700, new List<string> {"weather.cloud_coverage 0.96" } },
						{710, new List<string> {"weather.fog 0.48" } },
						{720, new List<string> {"weather.cloud_coverage 0.98" } },
						{725, new List<string> {"weather.rain 0.6", "weather.wind 0.4" } },
						{730, new List<string> {"weather.fog 0.5" } },
						{740, new List<string> {"weather.cloud_coverage 1" } },
						{785, new List<string> {"weather.rain 0.7" } },
						{845, new List<string> {"weather.rain 0.8" } },
						{850, new List<string> {"weather.wind 0.6" } },
						{905, new List<string> {"weather.rain 0.9", "weather.wind 0.8" } },
						{965, new List<string> {"weather.rain 1", "weather.wind 1" } },
						{980, new List<string> {"weather.cloud_attenuation 0.9" } },
						{2095, new List<string> {"weather.rain 0.9", "weather.cloud_size 2.38" } },
						{2135, new List<string> {"weather.rain 0.8" } },
						{2165, new List<string> {"weather.rain 0.7", "weather.wind 0.8" } },
						{2170, new List<string> {"weather.cloud_attenuation 0.8", "weather.cloud_size 2.0" } },
						{2195, new List<string> {"weather.rain 0.6", "weather.wind 0.6" } },
						{2225, new List<string> {"weather.rain 0.5" } },
						{2260, new List<string> {"weather.wind 0.4", "weather.cloud_size 1.38" } },
						{2285, new List<string> {"weather.rain 0.4", "weather.cloud_attenuation 0.7" } },
						{2340, new List<string> {"weather.wind 0.2" } },
						{2345, new List<string> {"weather.rain 0.3" } },
						{2350, new List<string> {"weather.cloud_coverage 0.98", "weather.cloud_size 1.0" } },
						{2360, new List<string> {"weather.fog 0.48" } },
						{2370, new List<string> {"weather.cloud_coverage 0.96" } },
						{2380, new List<string> {"weather.fog 0.46" } },
						{2385, new List<string> {"weather.rain 0.2", "weather.cloud_size 0.88" } },
						{2390, new List<string> {"weather.cloud_coverage 0.94" } },
						{2400, new List<string> {"weather.fog 0.44" } },
						{2410, new List<string> {"weather.cloud_coverage 0.92" } },
						{2420, new List<string> {"weather.fog 0.42" } },
						{2430, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_size 0.75" } },
						{2435, new List<string> {"weather.rain 0.15", "weather.wind 0" } },
						{2440, new List<string> {"weather.fog 0.4", "weather.cloud_attenuation 0.6", "weather.rainbow 1" } },
						{2450, new List<string> {"weather.cloud_coverage 0.88" } },
						{2460, new List<string> {"weather.fog 0.38", "weather.cloud_size 0.63" } },
						{2470, new List<string> {"weather.cloud_coverage 0.86" } },
						{2475, new List<string> {"weather.rain 0.1", } },
						{2480, new List<string> {"weather.fog 0.36", "weather.cloud_size 0.5" } },
						{2490, new List<string> {"weather.cloud_coverage 0.84" } },
						{2500, new List<string> {"weather.fog 0.34" } },
						{2505, new List<string> {"weather.rain 0.06" } },
						{2510, new List<string> {"weather.cloud_coverage 0.82" } },
						{2520, new List<string> {"weather.fog 0.32" } },
						{2530, new List<string> {"weather.cloud_coverage 0.8", "weather.atmosphere_rayleigh 1.5", "weather.cloud_opacity 0.9" } },
						{2540, new List<string> {"weather.fog 0.3" } },
						{2550, new List<string> {"weather.cloud_coverage 0.78" } },
						{2555, new List<string> {"weather.rain 0.05" } },
						{2560, new List<string> {"weather.fog 0.28", "weather.cloud_size 0.63" } },
						{2570, new List<string> {"weather.cloud_coverage 0.76" } },
						{2580, new List<string> {"weather.fog 0.26" } },
						{2590, new List<string> {"weather.cloud_coverage 0.74" } },
						{2595, new List<string> {"weather.rain 0.04" } },
						{2600, new List<string> {"weather.fog 0.24", } },
						{2610, new List<string> {"weather.cloud_coverage 0.72" } },
						{2620, new List<string> {"weather.fog 0.22"} },
						{2630, new List<string> {"weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.5", "weather.cloud_opacity 0.8" } },
						{2635, new List<string> {"weather.rain 0.03", "weather.cloud_size 0.75" } },
						{2640, new List<string> {"weather.fog 0.2" } },
						{2650, new List<string> {"weather.cloud_coverage 0.68" } },
						{2660, new List<string> {"weather.fog 0.18" } },
						{2670, new List<string> {"weather.cloud_coverage 0.66" } },
						{2675, new List<string> {"weather.rain 0.02", } },
						{2680, new List<string> {"weather.fog 0.16" } },
						{2690, new List<string> {"weather.cloud_coverage 0.64", "weather.cloud_attenuation 0.4" } },
						{2700, new List<string> {"weather.fog 0.14" } },
						{2710, new List<string> {"weather.cloud_coverage 0.62", "weather.thunder 0" } },
						{2715, new List<string> {"weather.rain 0.01" } },
						{2720, new List<string> {"weather.fog 0.12" } },
						{2730, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_opacity 0.7" } },
						{2740, new List<string> {"weather.fog 0.1", "weather.cloud_size 0.88" } },
						{2750, new List<string> {"weather.cloud_coverage 0.58" } },
						{2760, new List<string> {"weather.fog 0.08" } },
						{2770, new List<string> {"weather.cloud_coverage 0.56" } },
						{2780, new List<string> {"weather.fog 0.06" } },
						{2790, new List<string> {"weather.cloud_coverage 0.54" } },
						{2800, new List<string> {"weather.fog 0.04" } },
						{2810, new List<string> {"weather.cloud_coverage 0.52" } },
						{2820, new List<string> {"weather.fog 0.02" } },
						{2830, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.3" } },
						{2835, new List<string> {"weather.rain 0" } },
						{3340, new List<string> {"weather.fog 0", "weather.cloud_size -1" } },
						{3350, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.6" } },
						{3360, new List<string> {"weather.cloud_coverage 0.46", } },
						{3370, new List<string> {"weather.cloud_coverage 0.44" } },
						{3380, new List<string> {"weather.cloud_coverage 0.42" } },
						{3390, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{3400, new List<string> {"weather.cloud_coverage 0.38", "weather.cloud_sharpness 0.5" } },
						{3410, new List<string> {"weather.cloud_coverage 0.36" } },
						{3420, new List<string> {"weather.cloud_coverage 0.34" } },
						{3430, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_attenuation 0.2" } },
						{3440, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_sharpness 0.4" } },
						{3450, new List<string> {"weather.cloud_coverage 0.28" } },
						{3460, new List<string> {"weather.cloud_coverage 0.26", "weather.cloud_opacity 0.8" } },
						{3470, new List<string> {"weather.cloud_coverage 0.24" } },
						{3480, new List<string> {"weather.cloud_coverage 0.22", "weather.cloud_sharpness 0.3" } },
						{3490, new List<string> {"weather.cloud_coverage 0.2" } },
						{3500, new List<string> {"weather.cloud_coverage 0.18" } },
						{3510, new List<string> {"weather.cloud_coverage 0.16", "weather.cloud_opacity 0.9" } },
						{3520, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_sharpness 0.2" } },
						{3530, new List<string> {"weather.cloud_coverage 0.12", "weather.cloud_attenuation 0.1" } },
						{3540, new List<string> {"weather.cloud_coverage 0.1" } },
						{3550, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.5" } },
						{3560, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_attenuation -1" } },
						{3570, new List<string> {"weather.cloud_coverage 0.04", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1", "weather.cloud_opacity -1" } },
						{3580, new List<string> {"weather.cloud_coverage 0.02", "weather.rainbow -1" } },						
                        {3590, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"lightrain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.01" } },
						{10, new List<string> {"weather.cloud_coverage 0.02" } },
						{20, new List<string> {"weather.cloud_coverage 0.04" } },
						{30, new List<string> {"weather.cloud_coverage 0.06" } },
						{40, new List<string> {"weather.cloud_coverage 0.08" } },
						{50, new List<string> {"weather.cloud_coverage 0.1" } },
						{60, new List<string> {"weather.cloud_coverage 0.12" } },
						{70, new List<string> {"weather.cloud_coverage 0.14" } },
						{80, new List<string> {"weather.cloud_coverage 0.16" } },
						{90, new List<string> {"weather.cloud_coverage 0.18" } },
						{100, new List<string> {"weather.cloud_coverage 0.2" } },
						{110, new List<string> {"weather.cloud_coverage 0.22" } },
						{120, new List<string> {"weather.cloud_coverage 0.24", "weather.cloud_size 1.25" } },
						{130, new List<string> {"weather.cloud_coverage 0.26" } },
						{140, new List<string> {"weather.cloud_coverage 0.28" } },
						{150, new List<string> {"weather.cloud_coverage 0.3" } },
						{160, new List<string> {"weather.cloud_coverage 0.32" } },
						{170, new List<string> {"weather.cloud_coverage 0.34" } },
						{180, new List<string> {"weather.cloud_coverage 0.36" } },
						{190, new List<string> {"weather.cloud_coverage 0.38" } },
						{200, new List<string> {"weather.cloud_coverage 0.4" } },
						{210, new List<string> {"weather.cloud_coverage 0.42" } },
						{220, new List<string> {"weather.cloud_coverage 0.44" } },
						{230, new List<string> {"weather.cloud_coverage 0.46" } },
						{240, new List<string> {"weather.cloud_coverage 0.48" } },
						{250, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_size 1.5" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.cloud_coverage 0.54" } },
						{280, new List<string> {"weather.cloud_coverage 0.56" } },
						{290, new List<string> {"weather.cloud_coverage 0.58" } },
						{300, new List<string> {"weather.cloud_coverage 0.6" } },
						{310, new List<string> {"weather.cloud_coverage 0.62" } },
						{320, new List<string> {"weather.cloud_coverage 0.64" } },
						{330, new List<string> {"weather.cloud_coverage 0.66" } },
						{340, new List<string> {"weather.cloud_coverage 0.68" } },
						{350, new List<string> {"weather.cloud_coverage 0.7" } },
						{360, new List<string> {"weather.cloud_coverage 0.72" } },
						{370, new List<string> {"weather.cloud_coverage 0.74" } },
						{380, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
						{390, new List<string> { "weather.fog 0.02" } },
						{400, new List<string> { "weather.cloud_coverage 0.76" } },
						{410, new List<string> { "weather.fog 0.04" } },
						{420, new List<string> { "weather.cloud_coverage 0.78" } },
						{430, new List<string> { "weather.fog 0.06" } },
						{440, new List<string> { "weather.cloud_coverage 0.8" } },
						{450, new List<string> { "weather.fog 0.08" } },
						{460, new List<string> { "weather.cloud_coverage 0.82" } },
						{470, new List<string> { "weather.fog 0.1" } },
                        {480, new List<string> { "weather.rain 0.01" } },
						{490, new List<string> { "weather.cloud_coverage 0.84" } },
						{500, new List<string> { "weather.fog 0.12" } },
                        {510, new List<string> { "weather.rain 0.02" } },
						{520, new List<string> { "weather.cloud_coverage 0.86" } },
						{540, new List<string> { "weather.cloud_coverage 0.88" } },
                        {560, new List<string> { "weather.rain 0.03" } },
						{570, new List<string> { "weather.cloud_coverage 0.9" } },
                        {590, new List<string> { "weather.rain 0.04" } },
						{600, new List<string> { "weather.cloud_coverage 0.92" } },
                        {620, new List<string> { "weather.rain 0.05" } },
						{630, new List<string> { "weather.cloud_coverage 0.94" } },
						{650, new List<string> { "weather.cloud_coverage 0.96" } },
						{670, new List<string> { "weather.cloud_coverage 0.98" } },
						{690, new List<string> { "weather.cloud_coverage 1", "weather.cloud_attenuation 0.2" } },
						{1040, new List<string> { "weather.cloud_coverage 0.98" } },
						{1050, new List<string> { "weather.cloud_coverage 0.96" } },
						{1060, new List<string> { "weather.cloud_coverage 0.94" } },
						{1070, new List<string> { "weather.cloud_coverage 0.92", "weather.cloud_attenuation 0.1" } },
						{1080, new List<string> { "weather.cloud_coverage 0.9" } },
                        {1090, new List<string> { "weather.rain 0.04" } },
						{1100, new List<string> { "weather.cloud_coverage 0.88" } },
						{1110, new List<string> { "weather.cloud_coverage 0.86" } },
						{1120, new List<string> { "weather.cloud_coverage 0.84" } },
						{1130, new List<string> { "weather.cloud_coverage 0.82" } },
						{1140, new List<string> { "weather.cloud_coverage 0.8" } },
                        {1150, new List<string> { "weather.rain 0.03" } },
						{1160, new List<string> { "weather.cloud_coverage 0.78" } },
						{1170, new List<string> { "weather.cloud_coverage 0.76" } },
						{1180, new List<string> { "weather.cloud_coverage 0.74", "weather.cloud_attenuation -1" } },
						{1190, new List<string> { "weather.cloud_coverage 0.72" } },
						{1200, new List<string> { "weather.cloud_coverage 0.7" } },
                        {1210, new List<string> { "weather.rain 0.02" } },
						{1220, new List<string> { "weather.cloud_coverage 0.68" } },
						{1230, new List<string> { "weather.cloud_coverage 0.66" } },
						{1240, new List<string> { "weather.cloud_coverage 0.64" } },
						{1250, new List<string> { "weather.cloud_coverage 0.62" } },
                        {1260, new List<string> { "weather.rain 0.01" } },
						{1270, new List<string> { "weather.cloud_coverage 0.6" } },
						{1280, new List<string> { "weather.cloud_coverage 0.58" } },
						{1290, new List<string> { "weather.cloud_coverage 0.56" } },
						{1300, new List<string> { "weather.cloud_coverage 0.54" } },
						{1310, new List<string> { "weather.cloud_coverage 0.52" } },
						{1320, new List<string> { "weather.cloud_coverage 0.5" } },
                        {1330, new List<string> { "weather.rain 0", "weather.cloud_size 1.25" } },
						{1350, new List<string> { "weather.cloud_coverage 0.48" } },
						{1370, new List<string> { "weather.cloud_coverage 0.46" } },
						{1390, new List<string> { "weather.cloud_coverage 0.44" } },
						{1410, new List<string> { "weather.cloud_coverage 0.42" } },
						{1430, new List<string> { "weather.cloud_coverage 0.4" } },
						{1450, new List<string> { "weather.cloud_coverage 0.38" } },
						{1470, new List<string> { "weather.cloud_coverage 0.36" } },
						{1490, new List<string> { "weather.cloud_coverage 0.34" } },
						{1510, new List<string> { "weather.cloud_coverage 0.32" } },
						{1530, new List<string> { "weather.cloud_coverage 0.3" } },
						{1550, new List<string> { "weather.cloud_coverage 0.28" } },
						{1570, new List<string> { "weather.cloud_coverage 0.26", "weather.cloud_size -1" } },
						{1580, new List<string> { "weather.fog 0.1" } },
						{1590, new List<string> { "weather.cloud_coverage 0.24" } },
						{1600, new List<string> { "weather.fog 0.08" } },
						{1610, new List<string> { "weather.cloud_coverage 0.22" } },
						{1620, new List<string> { "weather.fog 0.06" } },
						{1630, new List<string> { "weather.cloud_coverage 0.2" } },
						{1640, new List<string> { "weather.fog 0.04" } },
						{1650, new List<string> { "weather.cloud_coverage 0.18" } },
						{1660, new List<string> { "weather.fog 0.02" } },
						{1670, new List<string> { "weather.cloud_coverage 0.16" } },
						{1680, new List<string> { "weather.fog 0.01" } },
						{1690, new List<string> { "weather.cloud_coverage 0.14" } },
						{1700, new List<string> { "weather.fog 0" } },
						{1710, new List<string> { "weather.cloud_coverage 0.12" } },
						{1720, new List<string> { "weather.cloud_coverage 0.1" } },
						{1730, new List<string> { "weather.cloud_coverage 0.08" } },
						{1740, new List<string> { "weather.cloud_coverage 0.06" } },
						{1750, new List<string> { "weather.cloud_coverage 0.04" } },
						{1760, new List<string> { "weather.cloud_coverage 0.02" } },
                        {1770, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"rain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> { "weather.cloud_coverage 0.05" } },
                        {30, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_size 1.25" } },
                        {60, new List<string> { "weather.cloud_coverage 0.15" } },
                        {90, new List<string> { "weather.cloud_coverage 0.2", "weather.cloud_size 1.5" } },
                        {120, new List<string> { "weather.cloud_coverage 0.25" } },
                        {150, new List<string> { "weather.cloud_coverage 0.3" } },
                        {180, new List<string> { "weather.cloud_coverage 0.35" } },
                        {210, new List<string> { "weather.cloud_coverage 0.4" } },
                        {240, new List<string> { "weather.cloud_coverage 0.45" } },
                        {270, new List<string> { "weather.cloud_coverage 0.5" } },
                        {300, new List<string> { "weather.cloud_coverage 0.55" } },
                        {330, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1" } },
                        {340, new List<string> { "weather.rain 0.02" } },
						{360, new List<string> { "weather.cloud_coverage 0.85" } },
						{370, new List<string> { "weather.rain 0.2" } },
                        {390, new List<string> { "weather.fog 0.05" } },
                        {400, new List<string> { "weather.rain 0.3" } },
                        {410, new List<string> { "weather.cloud_coverage 0.9", "weather.cloud_attenuation 0.2" } },
                        {420, new List<string> { "weather.fog 0.1" } },
                        {430, new List<string> { "weather.rain 0.4" } },
                        {450, new List<string> { "weather.fog 0.15" } },
                        {440, new List<string> { "weather.cloud_coverage 0.95", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
                        {460, new List<string> { "weather.rain 0.5" } },
                        {470, new List<string> { "weather.cloud_coverage 1", "weather.cloud_attenuation 0.3" } },
                        {480, new List<string> { "weather.fog 0.2" } },
						{500, new List<string> { "weather.fog 0.25" } },
						{520, new List<string> { "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.5" } },
						{600, new List<string> { "weather.cloud_attenuation 0.4" } },
						{2200, new List<string> { "weather.rain 0.4" } },
						{2230, new List<string> { "weather.rain 0.3" } },
						{2260, new List<string> { "weather.rain 0.2" } },
						{2280, new List<string> { "weather.cloud_coverage 0.95" } },
						{2290, new List<string> { "weather.rain 0.1" } },
						{2295, new List<string> { "weather.cloud_coverage 0.9" } },
						{2310, new List<string> { "weather.cloud_coverage 0.85", "weather.cloud_attenuation 0.3" } },
						{2320, new List<string> { "weather.rain 0.05" } },
						{2340, new List<string> { "weather.cloud_coverage 0.80" } },
						{2350, new List<string> { "weather.rain 0.02" } },
						{2370, new List<string> { "weather.cloud_coverage 0.75" } },
						{2380, new List<string> { "weather.rain 0", "weather.cloud_size 1.25" } },
						{2400, new List<string> { "weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.2" } },
						{2410, new List<string> { "weather.fog 0.2" } },
						{2420, new List<string> { "weather.cloud_coverage 0.65" } },
						{2430, new List<string> { "weather.fog 0.15" } },
						{2440, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1" } },
						{2450, new List<string> { "weather.fog 0.1" } },
						{2460, new List<string> { "weather.cloud_coverage 0.55" } },
						{2470, new List<string> { "weather.fog 0.05" } },
						{2480, new List<string> { "weather.cloud_coverage 0.5" } },
						{2500, new List<string> { "weather.fog 0" } },
						{2510, new List<string> { "weather.cloud_coverage 0.45", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
						{2530, new List<string> { "weather.cloud_coverage 0.4" } },
						{2550, new List<string> { "weather.cloud_coverage 0.35" } },
						{2570, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_attenuation -1" } },
						{2590, new List<string> { "weather.cloud_coverage 0.25" } },
						{2610, new List<string> { "weather.cloud_coverage 0.20", "weather.cloud_size -1" } },
						{2630, new List<string> { "weather.cloud_coverage 0.15", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{2650, new List<string> { "weather.cloud_coverage 0.1" } },
						{2670, new List<string> { "weather.cloud_coverage 0.05" } },
                        {2690, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"heavyrain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> { "weather.cloud_coverage 0.05" } },
                        {30, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_size 1.25" } },
                        {60, new List<string> { "weather.cloud_coverage 0.15" } },
                        {90, new List<string> { "weather.cloud_coverage 0.2", "weather.cloud_size 1.5" } },
                        {120, new List<string> { "weather.cloud_coverage 0.25" } },
                        {150, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_size 1.75" } },
                        {180, new List<string> { "weather.cloud_coverage 0.35", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
                        {210, new List<string> { "weather.cloud_coverage 0.4", "weather.cloud_size 2.0" } },
                        {240, new List<string> { "weather.cloud_coverage 0.45" } },
                        {270, new List<string> { "weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.15" } },
                        {300, new List<string> { "weather.cloud_coverage 0.55" } },
                        {330, new List<string> { "weather.cloud_coverage 0.6" } },
                        {340, new List<string> { "weather.rain 0.02", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.75" } },
						{360, new List<string> { "weather.cloud_coverage 0.85", "weather.cloud_attenuation 0.3" } },
						{370, new List<string> { "weather.rain 0.2" } },
                        {390, new List<string> { "weather.fog 0.05", "weather.cloud_attenuation 0.4" } },
                        {400, new List<string> { "weather.rain 0.3" } },
                        {410, new List<string> { "weather.cloud_coverage 0.9" } },
                        {420, new List<string> { "weather.fog 0.1" } },
                        {430, new List<string> { "weather.rain 0.4" } },
                        {450, new List<string> { "weather.fog 0.15" } },
                        {440, new List<string> { "weather.cloud_coverage 0.95", "weather.cloud_attenuation 0.5" } },
                        {460, new List<string> { "weather.rain 0.5" } },
                        {470, new List<string> { "weather.cloud_coverage 1" } },
                        {480, new List<string> { "weather.fog 0.2", "weather.cloud_sharpness 0.3" } },
						{500, new List<string> { "weather.fog 0.25" } },
						{520, new List<string> { "weather.fog 0.3" } },
						{540, new List<string> { "weather.fog 0.35" } },
						{560, new List<string> { "weather.fog 0.4" } },
						{580, new List<string> { "weather.fog 0.45" } },
						{600, new List<string> { "weather.fog 0.5" } },
						{2800, new List<string> { "weather.rain 0.4", "weather.cloud_attenuation 0.4" } },
						{2830, new List<string> { "weather.rain 0.3" } },
						{2860, new List<string> { "weather.rain 0.2" } },
						{2880, new List<string> { "weather.cloud_coverage 0.95" } },
						{2890, new List<string> { "weather.rain 0.1", "weather.cloud_attenuation 0.3" } },
						{2895, new List<string> { "weather.cloud_coverage 0.9" } },
						{2900, new List<string> { "weather.fog 0.45" } },
						{2910, new List<string> { "weather.cloud_coverage 0.85" } },
						{2920, new List<string> { "weather.rain 0.05", "weather.cloud_attenuation 0.2" } },
						{2930, new List<string> { "weather.fog 0.4", "weather.cloud_sharpness 0.2" } },
						{2940, new List<string> { "weather.cloud_coverage 0.80", "weather.atmosphere_rayleigh 1.5" } },
						{2950, new List<string> { "weather.rain 0.02" } },
						{2960, new List<string> { "weather.fog 0.35" } },
						{2970, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
						{2980, new List<string> { "weather.rain 0" } },
						{2990, new List<string> { "weather.fog 0.25", "weather.rainbow 1" } },
						{3000, new List<string> { "weather.cloud_coverage 0.7" } },
						{3010, new List<string> { "weather.fog 0.2", "weather.cloud_size 1.75" } },
						{3020, new List<string> { "weather.cloud_coverage 0.65" } },
						{3030, new List<string> { "weather.fog 0.15" } },
						{3040, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation -1" } },
						{3050, new List<string> { "weather.fog 0.1" } },
						{3060, new List<string> { "weather.cloud_coverage 0.55" } },
						{3070, new List<string> { "weather.fog 0.05" } },
						{3080, new List<string> { "weather.cloud_coverage 0.5" } },
						{3100, new List<string> { "weather.fog 0" } },
						{3110, new List<string> { "weather.cloud_coverage 0.45" } },
						{3130, new List<string> { "weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1", "weather.cloud_size 1.5" } },
						{3150, new List<string> { "weather.cloud_coverage 0.35" } },
						{3170, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
						{3190, new List<string> { "weather.cloud_coverage 0.25", "weather.cloud_size 1.25" } },
						{3210, new List<string> { "weather.cloud_coverage 0.20", "weather.cloud_size -1" } },
						{3230, new List<string> { "weather.cloud_coverage 0.15" } },
						{3250, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{3270, new List<string> { "weather.cloud_coverage 0.05", "weather.rainbow -1" } },
                        {3290, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"lightfog", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{490, new List<string> {"weather.fog 0.25" } },
						{1200, new List<string> {"weather.fog 0.24" } },
						{1220, new List<string> {"weather.fog 0.22" } },
						{1240, new List<string> {"weather.fog 0.2" } },
						{1260, new List<string> {"weather.fog 0.18" } },
						{1280, new List<string> {"weather.fog 0.16" } },
						{1300, new List<string> {"weather.fog 0.14" } },
						{1320, new List<string> {"weather.fog 0.12" } },
						{1340, new List<string> {"weather.fog 0.1" } },
						{1360, new List<string> {"weather.fog 0.08" } },
						{1380, new List<string> {"weather.fog 0.06" } },
						{1400, new List<string> {"weather.fog 0.04" } },
						{1420, new List<string> {"weather.fog 0.02" } },
						{1430, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1", "weather.cloud_coloring -1" } },
						{1440, new List<string> {"weather.fog 0" } },
						{1450, new List<string> {"weather.cloud_coverage 0.48" } },
						{1460, new List<string> {"weather.cloud_coverage 0.46" } },
						{1470, new List<string> {"weather.cloud_coverage 0.44" } },
						{1480, new List<string> {"weather.cloud_coverage 0.42" } },
						{1490, new List<string> {"weather.cloud_coverage 0.4" } },
						{1500, new List<string> {"weather.cloud_coverage 0.38" } },
						{1510, new List<string> {"weather.cloud_coverage 0.36" } },
						{1520, new List<string> {"weather.cloud_coverage 0.34" } },
						{1530, new List<string> {"weather.cloud_coverage 0.32" } },
						{1540, new List<string> {"weather.cloud_coverage 0.3" } },
						{1550, new List<string> {"weather.cloud_coverage 0.28" } },
						{1560, new List<string> {"weather.cloud_coverage 0.26" } },
						{1570, new List<string> {"weather.cloud_coverage 0.24" } },
						{1580, new List<string> {"weather.cloud_coverage 0.22" } },
						{1590, new List<string> {"weather.cloud_coverage 0.2" } },
						{1600, new List<string> {"weather.cloud_coverage 0.18" } },
						{1610, new List<string> {"weather.cloud_coverage 0.16" } },
						{1620, new List<string> {"weather.cloud_coverage 0.14" } },
						{1630, new List<string> {"weather.cloud_coverage 0.12" } },
						{1640, new List<string> {"weather.cloud_coverage 0.1" } },
						{1650, new List<string> {"weather.cloud_coverage 0.08" } },
						{1660, new List<string> {"weather.cloud_coverage 0.06" } },
						{1670, new List<string> {"weather.cloud_coverage 0.04" } },
						{1680, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {1690, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"fog", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.2", "weather.atmosphere_contrast 0.8", "weather.cloud_coloring 0.6" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{530, new List<string> {"weather.fog 0.3" } },
						{550, new List<string> {"weather.fog 0.32" } },
						{570, new List<string> {"weather.fog 0.34" } },
						{590, new List<string> {"weather.fog 0.36" } },
						{610, new List<string> {"weather.fog 0.38" } },
						{630, new List<string> {"weather.fog 0.4" } },
						{2440, new List<string> {"weather.fog 0.4" } },
						{2460, new List<string> {"weather.fog 0.38" } },
						{2480, new List<string> {"weather.fog 0.36" } },
						{2500, new List<string> {"weather.fog 0.34" } },
						{2520, new List<string> {"weather.fog 0.32" } },
						{2540, new List<string> {"weather.fog 0.3" } },
						{2560, new List<string> {"weather.fog 0.28" } },
						{2580, new List<string> {"weather.fog 0.26" } },
						{2590, new List<string> {"weather.cloud_coverage 0.74" } },
						{2600, new List<string> {"weather.fog 0.24" } },
						{2610, new List<string> {"weather.cloud_coverage 0.72" } },
						{2620, new List<string> {"weather.fog 0.22" } },
						{2630, new List<string> {"weather.cloud_coverage 0.7" } },
						{2640, new List<string> {"weather.fog 0.2" } },
						{2650, new List<string> {"weather.cloud_coverage 0.68" } },
						{2660, new List<string> {"weather.fog 0.18" } },
						{2670, new List<string> {"weather.cloud_coverage 0.66" } },
						{2680, new List<string> {"weather.fog 0.16" } },
						{2690, new List<string> {"weather.cloud_coverage 0.64" } },
						{2700, new List<string> {"weather.fog 0.14" } },
						{2710, new List<string> {"weather.cloud_coverage 0.62" } },
						{2720, new List<string> {"weather.fog 0.12" } },
						{2730, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{2740, new List<string> {"weather.fog 0.1" } },
						{2750, new List<string> {"weather.cloud_coverage 0.58" } },
						{2760, new List<string> {"weather.fog 0.08" } },
						{2770, new List<string> {"weather.cloud_coverage 0.56" } },
						{2780, new List<string> {"weather.fog 0.06" } },
						{2790, new List<string> {"weather.cloud_coverage 0.54" } },
						{2800, new List<string> {"weather.fog 0.04" } },
						{2810, new List<string> {"weather.cloud_coverage 0.52" } },
						{2820, new List<string> {"weather.fog 0.02" } },
						{2830, new List<string> {"weather.cloud_coverage 0.5" } },
						{2840, new List<string> {"weather.fog 0" } },
						{2850, new List<string> {"weather.cloud_coverage 0.48" } },
						{2860, new List<string> {"weather.cloud_coverage 0.46" } },
						{2870, new List<string> {"weather.cloud_coverage 0.44" } },
						{2880, new List<string> {"weather.cloud_coverage 0.42" } },
						{2890, new List<string> {"weather.cloud_coverage 0.4" } },
						{2900, new List<string> {"weather.cloud_coverage 0.38" } },
						{2910, new List<string> {"weather.cloud_coverage 0.36" } },
						{2920, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1", "weather.cloud_coloring -1" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2" } },
						{3000, new List<string> {"weather.cloud_coverage 0.18" } },
						{3010, new List<string> {"weather.cloud_coverage 0.16" } },
						{3020, new List<string> {"weather.cloud_coverage 0.14" } },
						{3030, new List<string> {"weather.cloud_coverage 0.12" } },
						{3040, new List<string> {"weather.cloud_coverage 0.1" } },
						{3050, new List<string> {"weather.cloud_coverage 0.08" } },
						{3060, new List<string> {"weather.cloud_coverage 0.06" } },
						{3070, new List<string> {"weather.cloud_coverage 0.04" } },
						{3080, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {3090, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"dust", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 0.9" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 0.8" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.atmosphere_rayleigh 1.5", "weather.atmosphere_contrast 1.5", "weather.cloud_size 0.7" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.atmosphere_rayleigh 2.0", "weather.atmosphere_contrast 2.0" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{3