ent/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ВАЙПЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОНТАКТЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        #region ThreeUi
        private void ThreeUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.97", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", FadeIn = 0.7f },
                FadeOut = 0.7f
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.28 0.14", AnchorMax = $"0.8 0.9", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "                ДОБРО ПОЖАЛОВАТЬ <color=#32C8C8><b>" + player.displayName.ToUpper() + "</b></color>\n\n<color=#ffa987><b>БИНДЫ СЕРВЕРА: Команды ввводить в консоль (F1)</b></color>" + "\n\n<color=orange>bind m chat.say /map</color> - открытие карты на М (англ)\n<color=orange>bind x chat.say /menu</color> - открывает на клавишу X меню сервера\n<color=orange>bind z menu.tp</color> - открытие меню тп на клавишу Z (англ)\n<color=orange>bind c menu.friend</color> - открытие меню тп к друзьям на клавишу С (англ)\n<color=orange>bind v menu.friendset</color> - открытие меню настройки друзей на клавишу V (англ)\n<color=orange>bind u menu.up</color> - открытие меню апгрейда на клавишу U (англ)\n<color=orange>bind t menu.trade</color> - открытие меню трейда на клавишу T (англ)", Font = "robotocondensed-regular.ttf", FontSize = 21, Color = HexToCuiColor("#e4e4e4ba"), Align = TextAnchor.MiddleLeft, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 1", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0", Close = Layer },
                Text = { Text = "" }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = $"0.2 0.85", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /help", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "О СЕРВЕРЕ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.7", AnchorMax = $"0.2 0.75", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /1", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ПРАВИЛА", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.6", AnchorMax = $"0.2 0.65", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /2", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОМАНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.5", AnchorMax = $"0.2 0.55", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0.2", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /3", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>БИНДЫ</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.4", AnchorMax = $"0.2 0.45", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /4", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "НАБОРЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.3", AnchorMax = $"0.2 0.35", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ВАЙПЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОНТАКТЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        #region FourUi
        private void FourUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.97", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", FadeIn = 0.7f },
                FadeOut = 0.7f
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.28 0.14", AnchorMax = $"1 0.8", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "                ДОБРО ПОЖАЛОВАТЬ <color=#32C8C8><b>" + player.displayName.ToUpper() + "</b></color>\n\n<color=#ffa987><b>НАБОРЫ СЕРВЕРА:</b></color>\n" + "\n\n<color=orange>/kit start</color> - стартовый набор, поможет в развитии\n<color=orange>/kit hunt</color> - набор охотника\n<color=orange>/kit med</color> - набор первой помощи\n<color=orange>/kit work</color> - набор инструментов для добычи\n<color=orange>/kit food</color> - набор еды\n\n\n<color=#ffa987>Также Вы можете приобрести донат-киты на нашем сайте kuala store link не забыть вставить</color>\n<color=#ffa987>Подробнее (/kit)</color>", Font = "robotocondensed-regular.ttf", FontSize = 21, Color = HexToCuiColor("#e4e4e4ba"), Align = TextAnchor.MiddleLeft, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = $"0.2 0.85", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /help", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "О СЕРВЕРЕ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.7", AnchorMax = $"0.2 0.75", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /1", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ПРАВИЛА", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.6", AnchorMax = $"0.2 0.65", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /2", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОМАНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.5", AnchorMax = $"0.2 0.55", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /3", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "БИНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.4", AnchorMax = $"0.2 0.45", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0.2", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /4", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>НАБОРЫ</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.3", AnchorMax = $"0.2 0.35", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ВАЙПЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОНТАКТЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }
        #region FiveUi
        private void FiveUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.97", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", FadeIn = 0.7f },
                FadeOut = 0.7f
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.28 0.267", AnchorMax = $"1 0.8", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "                ДОБРО ПОЖАЛОВАТЬ <color=#32C8C8><b>" + player.displayName.ToUpper() + "</b></color>\n\n\n\n<color=#ffa987><b>ВАЙПЫ СЕРВЕРА:</b></color>\n" + "\nВайп на сервере каждые 5 дней в 14:00 по МСК. Подробнее (/wipe)\n\nКаждый второй вайп - глобальный (с удалением чертежей)", Font = "robotocondensed-regular.ttf", FontSize = 21, Color = HexToCuiColor("#e4e4e4ba"), Align = TextAnchor.MiddleLeft, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = $"0.2 0.85", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /help", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "О СЕРВЕРЕ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.7", AnchorMax = $"0.2 0.75", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /1", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ПРАВИЛА", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.6", AnchorMax = $"0.2 0.65", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /2", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОМАНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.5", AnchorMax = $"0.2 0.55", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /3", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "БИНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.4", AnchorMax = $"0.2 0.45", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /4", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "НАБОРЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.3", AnchorMax = $"0.2 0.35", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0.2", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>ВАЙПЫ</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОНТАКТЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.1", AnchorMax = $"0.2 0.15", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "", Command = "chat.say /7", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>ПАСХАЛКА</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 2, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        #region SixUi
        private void SixUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.97", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", FadeIn = 0.7f },
                FadeOut = 0.7f
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.28 0.245", AnchorMax = $"1 0.8", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "                ДОБРО ПОЖАЛОВАТЬ <color=#32C8C8><b>" + player.displayName.ToUpper() + "</b></color>\n\n<color=#ffa987><b>Контакты:</b></color>\n" + "\n<color=orange>Just-Rust.ru</color> - основной сайт там можно купить донат и найти другие полезные ссылки\n<color=orange>vk.com/justrustx</color> - группа вконтакте, новости промокоды и т.п\n<color=orange>tglink.ru/justrust_ru</color> - телеграм канал. Более подробные новости, промокоды и др\n<color=orange>discord.gg/grBSFPW</color> - дискорд канал где вы можете общаться\n<color=orange>vk.com/@justrustx-rules</color> - правила сервера\n<color=orange>37.230.228.87:22222</color> - ip сервера\n<color=orange>ТехПоддержка</color> - по всем вопросам пишите в сообщения группы", Font = "robotocondensed-regular.ttf", FontSize = 21, Color = HexToCuiColor("#e4e4e4ba"), Align = TextAnchor.MiddleLeft, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = $"0.2 0.85", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /help", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "О СЕРВЕРЕ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.7", AnchorMax = $"0.2 0.75", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /1", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ПРАВИЛА", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.6", AnchorMax = $"0.2 0.65", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /2", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОМАНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.5", AnchorMax = $"0.2 0.55", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /3", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "БИНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.4", AnchorMax = $"0.2 0.45", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /4", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "НАБОРЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.3", AnchorMax = $"0.2 0.35", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ВАЙПЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0.2", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>КОНТАКТЫ</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }

        #region SevenUi
        private void SevenUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            var container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Image = { Color = "0 0 0 0.97", Sprite = "Assets/Content/UI/UI.Background.Tile.psd", FadeIn = 0.7f },
                FadeOut = 0.7f
            }, "Overlay", Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.28 0.2", AnchorMax = $"1 0.7", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0" },
                Text = { Text = "                         ДОБРО ПОЖАЛОВАТЬ <color=#00c1fd85><b>" + player.displayName.ToUpper() + "</b></color>\n\n<color=#ffa987><b>ТЫ НАШЁЛ СЕКРЕТ:</b></color>\n" + "\n Промокод: OlegAndDimaPidor\n \n \n \n <color=#ffa987>HL3 ?</color>", Font = "robotocondensed-regular.ttf", FontSize = 23, Color = HexToCuiColor("#e4e4e4ba"), Align = TextAnchor.MiddleLeft, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.8", AnchorMax = $"0.2 0.85", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /help", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "О СЕРВЕРЕ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.7", AnchorMax = $"0.2 0.75", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /1", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ПРАВИЛА", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.6", AnchorMax = $"0.2 0.65", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /2", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОМАНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.5", AnchorMax = $"0.2 0.55", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /3", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "БИНДЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.4", AnchorMax = $"0.2 0.45", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /4", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "НАБОРЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.3", AnchorMax = $"0.2 0.35", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /5", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "ВАЙПЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.2", AnchorMax = $"0.2 0.25", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /6", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "КОНТАКТЫ", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.05 0.1", AnchorMax = $"0.2 0.15", OffsetMax = "0 0" },
                Button = { Color = "0.8 0.40 0.40 0.2", Material = "assets/content/ui/uibackgroundblur.mat", Command = "chat.say /7", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ff8484>Пасхалка</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.38 0.12", AnchorMax = $"0.62 0.17", OffsetMax = "0 0" },
                Button = { Color = "1.00 0.00 1.00 0.05", Material = "assets/content/ui/uibackgroundblur.mat", Close = Layer, FadeIn = 0.7f },
                Text = { Text = "<color=#ffa987>••• Выход •••</color>", Font = "RobotoCondensed-Regular.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter, FadeIn = 0.7f }
            }, Layer);

            container.Add(new CuiElement
            {
                Parent = Layer,
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Logo") },
                    new CuiRectTransformComponent { AnchorMin = "0.2 0.71", AnchorMax = "0.8 0.95", OffsetMax = "0 0" }
                }
            });

            CuiHelper.AddUi(player, container);
        }
        #endregion
        #endregion
        #endregion
        #endregion
        #endregion
        #endregion
        #endregion
        #endregion
        #endregion

        #region Oxide
        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, Layer);
            }
        }
        #endregion

        #region Helpers
        private static string HexToCuiColor(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return $"{color.r:F2} {color.g:F2} {color.b:F2} {color.a:F2}";
        }
        #endregion
    }
}

// --- End of file: Help.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/SaveMyMap.cs ---
// --- Original Local Path: KualaRust/SaveMyMap.cs ---

using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using UnityEngine;
using Diag = System.Diagnostics;

namespace Oxide.Plugins
{
	[Info("SaveMyMap", "FuJiCuRa", "1.3.6")] 
	class SaveMyMap : RustPlugin
	{
		bool Changed;
		SaveRestore saveRestore = null;
		bool wasShutDown;
		int Rounds;
		bool Initialized;
		string saveFolder;
		bool loadReload;
		string [] saveFolders;

		int saveInterval;
		int saveCustomAfter;
		bool callOnServerSave;
		float delayCallOnServerSave;
		bool saveAfterLoadFile;
		bool allowOutOfDateSaves;
		bool enableLoadOverride;
		bool onServerSaveUseCoroutine;
		int numberOfSaves;

		object GetConfig(string menu, string datavalue, object defaultValue)
		{
			var data = Config[menu] as Dictionary<string, object>;
			if (data == null)
			{
				data = new Dictionary<string, object>();
				Config[menu] = data;
				Changed = true;
			}
			object value;
			if (!data.TryGetValue(datavalue, out value))
			{
				value = defaultValue;
				data[datavalue] = value;
				Changed = true;
			}
			return value;
		}

		void LoadVariables()
		{
			saveInterval = Convert.ToInt32(GetConfig("Settings", "saveInterval", 1200));
			saveCustomAfter = Convert.ToInt32(GetConfig("Settings", "saveCustomAfter", 1));
			numberOfSaves = Convert.ToInt32(GetConfig("Settings", "numberOfSaves", 5));
			callOnServerSave = Convert.ToBoolean(GetConfig("Settings", "callOnServerSave", true));
			delayCallOnServerSave = Convert.ToInt32(GetConfig("Settings", "delayCallOnServerSave", 3));
			saveAfterLoadFile = Convert.ToBoolean(GetConfig("Settings", "saveAfterLoadFile", true));
			enableLoadOverride = Convert.ToBoolean(GetConfig("Settings", "enableLoadOverride", true));
			allowOutOfDateSaves = Convert.ToBoolean(GetConfig("Settings", "allowOutOfDateSaves", false));
			onServerSaveUseCoroutine = Convert.ToBoolean(GetConfig("Settings", "onServerSaveUseCoroutine", true));

			if (!Changed) return;
			SaveConfig();
			Changed = false;
		}
		
		void LoadDefaultMessages()
		{
			lang.RegisterMessages(new Dictionary<string, string>
			                      {
									{"kickreason", "Map restore was initiated. Please wait a momemt"},
									{"loadedinfo", "Saveinverval set to: {0} sec. | Custom save after every '{1}' saves"},
									{"alreadysaving", "Server already saving"},
									{"customsavecomplete", "Custom saving complete"},
									{"needconfirm", "You need to confirm with 'force'"},
									{"definefilename", "You need to define a filename to load"},
									{"lastfilename", "You can load the last file by typing 'load' as name"},
									{"filenotfound", "The given filename was not found."},
									{"dirnotfound", "Save Directory not found. Will be recreated for next save."},									
									{"loadoverride", "Loadfile override succesful."},										
									{"loadoverridecancel", "Loadfile override aborted, map change detected."},		
			                      },this);
		}

		protected override void LoadDefaultConfig()
		{
			Config.Clear();
			LoadVariables();
		}

		void Loaded()
		{
			LoadVariables();
			LoadDefaultMessages();
			Rounds = 0;
			wasShutDown = false;
		}

		void Unload()
		{
			if (saveRestore != null)
				saveRestore.timedSave = true;
		}

		void OnServerInitialized()
		{
			saveFolders = SaveFolders();
			saveRestore = SingletonComponent<SaveRestore>.Instance;
			saveRestore.timedSave = false;
			saveFolder = $"{ConVar.Server.rootFolder}/saves/{0}/";
			timer.Every(saveInterval, () =>ServerMgr.Instance.StartCoroutine(SaveLoop()));
			Initialized = true;
			Puts(lang.GetMessage("loadedinfo", this), saveInterval, saveCustomAfter);
		}		
		
		IEnumerator SaveLoop()
		{
			if (!Initialized)
				yield return null;
			WaitForFixedUpdate waitU = new WaitForFixedUpdate();
			BaseEntity.saveList.RemoveWhere(p => !p);
            BaseEntity.saveList.RemoveWhere(p => p == null);
			Diag.Stopwatch stopwatch = Diag.Stopwatch.StartNew();
			foreach (BaseEntity current in BaseEntity.saveList)
				current.InvalidateNetworkCache();
			Debug.Log("Invalidate Network Cache took " + stopwatch.Elapsed.TotalSeconds.ToString("0.00") + " seconds");
			if (Rounds < saveCustomAfter && saveCustomAfter > 0)
			{
				IEnumerator original = SaveRestore.Save(ConVar.Server.rootFolder+"/"+World.SaveFileName, true);					
				while (original.MoveNext()) {} 
				Debug.Log("Saving complete");
				if (!callOnServerSave) Interface.Oxide.DataFileSystem.WriteObject(this.Title, new List<object>(new object[] { ConVar.Server.rootFolder+"/"+World.SaveFileName, "default" }) );
				Rounds++;
				CallOnServerSave();
			}
			else
			{
				string file = saveFolder + World.SaveFileName;
				DirectoryEx.Backup(SaveFolders());
				yield return waitU;
				ConVar.Server.GetServerFolder("saves/0/");
				yield return waitU;
				try {
					IEnumerator custom = SaveRestore.Save(file, true);					
					while (custom.MoveNext()) {}
					Debug.Log("Custom Saving complete");
					if (!callOnServerSave) Interface.Oxide.DataFileSystem.WriteObject(this.Title, new List<object>(new object[] { file, "custom" }) );}
				catch { PrintWarning(lang.GetMessage("dirnotfound", this)); }
				CallOnServerSave();
				Rounds = 0;
			}
			yield return null;
		}

		void OnPluginUnloaded(Plugin name)
		{
			if (Interface.Oxide.IsShuttingDown && !wasShutDown)
			{
				wasShutDown = true;
				saveRestore.timedSave = true;
			}
		}

		void OnServerSave(object file = null)
		{
			string type;
			if (file == null)
			{
				file = ConVar.Server.rootFolder+"/"+World.SaveFileName;
				type = "default";
			}
			else
				type = "custom";
			Interface.Oxide.DataFileSystem.WriteObject(this.Title, new List<object>(new object[] { file, type }) );
		}
		
		object OnSaveLoad(Dictionary<BaseEntity, ProtoBuf.Entity> dictionary)
		{
			if (Initialized || loadReload || !enableLoadOverride) return null;
			if (!loadReload)
			{
			List<string> filename = Interface.Oxide.DataFileSystem.ReadObject<List<string>>(this.Title);
			if (filename != null && filename.Count == 2)
				if (filename[1] == "custom")
				{
					loadReload = true;
					if (SaveRestore.Load(filename[0], allowOutOfDateSaves))
					{
						if (dictionary != null)
							dictionary.Clear();
						Puts(lang.GetMessage("loadoverride", this));
						return true;
					}
				}
			}
			return null;
		}
		
		void OnNewSave(string strFilename)
		{
			if (Initialized || loadReload || !enableLoadOverride) return;
			List<string> filename = Interface.Oxide.DataFileSystem.ReadObject<List<string>>(this.Title);
			if (filename != null && filename.Count == 2 && !filename[0].Contains(World.SaveFileName))
			{
				Puts(lang.GetMessage("loadoverridecancel", this));
				return;
			}
			if (filename != null && filename.Count == 2)
				if (filename[1] == "custom")
				{
					loadReload = true;
					if (SaveRestore.Load(filename[0], allowOutOfDateSaves))
						Puts(lang.GetMessage("loadoverride", this));
				}
		}
		
		void CallOnServerSave()
		{
			if (Interface.Oxide.IsShuttingDown)
				return;
			if (callOnServerSave)
				NextTick( () => timer.Once(delayCallOnServerSave, () =>
				{
					if (onServerSaveUseCoroutine)
						ServerMgr.Instance.StartCoroutine(SaveCoroutine());
					else
						Interface.CallHook("OnServerSave", null);
				}));
		}

		IEnumerator SaveCoroutine()
		{
			WaitForFixedUpdate waitU = new WaitForFixedUpdate();
			var allPlugins = plugins.GetAll();
			foreach (var plugin in allPlugins.ToList())
			{
				plugin.CallHook("OnServerSave", null);
				yield return waitU;
			}
			yield return null;
		}		
		
		[ConsoleCommand("smm.save")]
		void cMapSave(ConsoleSystem.Arg arg)
		{
			if(arg.Connection != null && arg.Connection.authLevel < 2) return;
			if (SaveRestore.IsSaving) {
				SendReply(arg, lang.GetMessage("alreadysaving", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
				return;
			}
			SaveBackupCreate();
			string saveName;
			saveName = saveFolder + World.SaveFileName;
			foreach (BaseEntity current in BaseEntity.saveList)
				current.InvalidateNetworkCache();
			Diag.Stopwatch stopwatch = Diag.Stopwatch.StartNew();
			UnityEngine.Debug.Log("Invalidate Network Cache took " + stopwatch.Elapsed.TotalSeconds.ToString("0.00") + " seconds");
			try {
				BaseEntity.saveList.RemoveWhere(p => !p);
				BaseEntity.saveList.RemoveWhere(p => p == null);
				IEnumerator enumerator = SaveRestore.Save(saveName, true);
				while (enumerator.MoveNext()) {}
				Interface.Oxide.DataFileSystem.WriteObject(this.Title, new List<object>(new object[] { saveName, "custom" }) );
				arg.ReplyWith(lang.GetMessage("customsavecomplete", this, arg.Connection != null ? arg.Connection.userid.ToString() : null )); }
			catch { PrintWarning(lang.GetMessage("dirnotfound", this)); }
			CallOnServerSave();
		}
		
		[ConsoleCommand("server.savemymap")]
		void cMapServerSave(ConsoleSystem.Arg arg)
		{		
			cMapSave(arg);
		}
		
		[ConsoleCommand("smm.loadmap")]
		void cLoadMap(ConsoleSystem.Arg arg)
		{
			if(arg.Connection != null && arg.Connection.authLevel < 2) return;
			if (arg.Args == null || arg.Args.Length != 1 || arg.Args[0] != "force")
			{
				SendReply(arg, lang.GetMessage("needconfirm", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
				return;
			}
			foreach (var player in BasePlayer.activePlayerList.ToList())
				player.Kick(lang.GetMessage("kickreason", this, player.UserIDString));
			SaveRestore.Load(ConVar.Server.rootFolder+"/"+World.SaveFileName, allowOutOfDateSaves);
		}

		[ConsoleCommand("smm.loadfile")]
		void cLoadFile(ConsoleSystem.Arg arg)
		{
			if(arg.Connection != null && arg.Connection.authLevel < 2) return;
			if (arg.Args == null || arg.Args.Length < 1 )
			{
					SendReply(arg, lang.GetMessage("definefilename", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
					return;
			}
			int folderNumber = -1;
			if (arg.Args[0].Length <= 4 && arg.Args[0] != "last" && !int.TryParse(arg.Args[0], out folderNumber))
			{
					SendReply(arg, lang.GetMessage("lastfilename", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
					return;
			}			
			string file = "";
			if (arg.Args[0] == "last")
			{
				List<string> filename = Interface.Oxide.DataFileSystem.ReadObject<List<string>>(this.Title);
				if (filename != null)
					file = filename.First();
			}
			else if (int.TryParse(arg.Args[0], out folderNumber))
			{
				file = $"{ConVar.Server.rootFolder}/saves/{folderNumber}/{World.SaveFileName}";
			}
			if (file == "")
				file = saveFolder + arg.Args[0];

			foreach (var player in BasePlayer.activePlayerList.ToList())
				player.Kick(lang.GetMessage("kickreason", this));
			foreach (BaseEntity current in BaseEntity.saveList.ToList())
				if (current != null)
					current.Kill();
			BaseEntity.saveList.Clear();
			ItemManager.DoRemoves();
			if (SaveRestore.Load(file, allowOutOfDateSaves))
			{
				if (saveAfterLoadFile)
				{
					foreach (BaseEntity current in BaseEntity.saveList)
						current.InvalidateNetworkCache();
					SaveRestore.Save(true);
				}
			}
			else
			{
				SendReply(arg, lang.GetMessage("filenotfound", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
				return;
			}
		}
		
		[ConsoleCommand("smm.loadnamed")]
		void cLoadNamed(ConsoleSystem.Arg arg)
		{
			if(arg.Connection != null && arg.Connection.authLevel < 2) return;
			if (arg.Args == null || arg.Args.Length < 1 )
			{
					SendReply(arg, lang.GetMessage("definefilename", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
					return;
			}
			foreach (var player in BasePlayer.activePlayerList.ToList())
				player.Kick(lang.GetMessage("kickreason", this));
			foreach (BaseEntity current in BaseEntity.saveList.ToList())
				if (current != null)
					current.Kill();
			BaseEntity.saveList.Clear();
			ItemManager.DoRemoves();
			if (SaveRestore.Load(ConVar.Server.rootFolder+"/"+arg.Args[0], true))
			{
				if (saveAfterLoadFile)
				{
					foreach (BaseEntity current in BaseEntity.saveList)
						current.InvalidateNetworkCache();
					SaveRestore.Save(true);
				}
			}
			else
			{
				SendReply(arg, lang.GetMessage("filenotfound", this, arg.Connection != null ? arg.Connection.userid.ToString() : null ));
				return;
			}
		}

		[ConsoleCommand("smm.savefix")]
		void cLoadFix(ConsoleSystem.Arg arg)
		{
			if(arg.Connection != null && arg.Connection.authLevel < 2) return;
			BaseEntity.saveList.RemoveWhere(p => !p);
            BaseEntity.saveList.RemoveWhere(p => p == null);
			foreach (BaseEntity current in BaseEntity.saveList)
				current.InvalidateNetworkCache();
		}

		Int32 UnixTimeStampUTC()
		{
			Int32 unixTimeStamp;
			DateTime currentTime = DateTime.Now;
			DateTime zuluTime = currentTime.ToUniversalTime();
			DateTime unixEpoch = new DateTime(1970, 1, 1);
			unixTimeStamp = (Int32)(zuluTime.Subtract(unixEpoch)).TotalSeconds;
			return unixTimeStamp;
		}
		
		string [] SaveFolders()
		{
			string [] dp = new string[numberOfSaves];
			for (int i = 0; i < numberOfSaves; i++)
				dp[i] = $"{ConVar.Server.rootFolder}/saves/{i}/";
			return dp;
		}
		
		void SaveBackupCreate()
		{
			DirectoryEx.Backup(SaveFolders());
			ConVar.Server.GetServerFolder("saves/0/");
		}
	}
}

// --- End of file: SaveMyMap.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/RaidZone.cs ---
// --- Original Local Path: KualaRust/RaidZone.cs ---

﻿using Oxide.Core;
using System.Collections.Generic;
using System.Linq;
using Rust;
using UnityEngine;
using System.Collections;
using System;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Random = UnityEngine.Random;
using Oxide.Core.Plugins;
using Newtonsoft.Json.Linq;
using System.Text.RegularExpressions;
using ru = Oxide.Game.Rust;

namespace Oxide.Plugins
{
    [Info("RaidZone", "fermens", "0.1.51")]
    [Description("Рейблок по зонам")]
    public class RaidZone : RustPlugin
    {
        #region КОНФИГa
        private static PluginConfig config;

        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        private static Dictionary<string, string> _names = new Dictionary<string, string>
        {
            { "wall Stone", "вашу каменную стену"},
            { "wall.low Stone", "вашу каменную низкую стену"},
            { "wall.frame Stone", "ваш каменный настенный каркас"},
            { "foundation Stone", "ваш каменный фундамент"},
            { "roof Stone", "вашу каменную крышу"},
            { "wall.doorway Stone", "ваш каменный дверной проём"},
            { "foundation.steps Stone", "ваши каменные ступеньки"},
            { "block.stair.lshape Stone", "вашу каменную L-лестницу"},
            { "block.stair.ushape Stone", "вашу каменную U-лестницу"},
            { "foundation.triangle Stone", "ваш каменный треугольный фундамент"},
            { "wall.window Stone", "ваш каменное окно"},
            { "wall.half Stone", "вашу каменную полустену"},
            { "wall Metal", "вашу металлическую стену"},
            { "wall.low Metal", "вашу металлическую низкую стену"},
            { "wall.frame Metal", "ваш металлический настенный каркас"},
            { "foundation Metal", "ваш металлический фундамент"},
            { "roof Metal", "вашу металлическую крышу"},
            { "wall.doorway Metal", "ваш металлический дверной проём"},
            { "foundation.steps Metal", "ваши металлические ступеньки"},
            { "block.stair.lshape Metal", "вашу металлическую L-лестницу"},
            { "block.stair.ushape Metal", "вашу металлическую U-лестницу"},
            { "foundation.triangle Metal", "ваш металлический треугольный фундамент"},
            { "wall.window Metal", "ваше металлическое окно"},
            { "wall.half Metal", "вашу металлическую полустену"},
            { "wall TopTier", "вашу бронированную стену"},
            { "wall.low TopTier", "вашу бронированную низкую стену"},
            { "wall.frame TopTier", "ваш бронированный настенный каркас"},
            { "foundation TopTier", "ваш бронированный фундамент"},
            { "roof TopTier", "вашу бронированную крышу"},
            { "wall.doorway TopTier", "ваш бронированный дверной проём"},
            { "foundation.steps TopTier", "ваши бронированные ступеньки"},
            { "block.stair.lshape TopTier", "вашу бронированную L-лестницу"},
            { "block.stair.ushape TopTier", "вашу бронированную U-лестницу"},
            { "foundation.triangle TopTier", "ваш бронированный треугольный фундамент"},
            { "wall.window TopTier", "ваше бронированное окно"},
            { "wall.half TopTier", "вашу бронированную полустену"},
            { "wall Wood", "вашу деревянную стену"},
            { "wall.low Wood", "вашу деревянную низкую стену"},
            { "wall.frame Wood", "ваш деревянный настенный каркас"},
            { "foundation Wood", "ваш деревянный фундамент"},
            { "roof Wood", "вашу деревянную крышу"},
            { "wall.doorway Wood", "ваш деревянный дверной проём"},
            { "foundation.steps Wood", "ваши деревянные ступеньки"},
            { "block.stair.lshape Wood", "вашу деревянную L-лестницу"},
            { "block.stair.ushape Wood", "вашу деревянную U-лестницу"},
            { "foundation.triangle Wood", "ваш деревянный треугольный фундамент"},
            { "wall.window Wood", "ваше деревянное окно"},
            { "door.hinged.metal", "вашу металлическую дверь"},
            { "floor Wood", "ваш деревянный пол"},
            { "floor Metal", "ваш металлический пол"},
            { "door.hinged.wood", "вашу деревянную дверь"},
            { "floor Stone", "ваш каменный пол"},
            { "door.double.hinged.wood", "вашу двойную деревянную дверь"},
            { "door.double.hinged.metal", "вашу двойную металлическую дверь"},
            { "shutter.wood.a", "ваши деревянные ставни"},
            { "wall.frame.garagedoor", "вашу гаражную дверь"},
            { "wall.window.bars.wood", "вашу деревянную решетку"},
            { "floor.triangle Stone", "ваш каменный треугольный потолок"},
            { "wall.external.high.wood", "ваши высокие деревянные ворота"},
            { "door.double.hinged.toptier", "вашу двойную бронированную дверь"},
            { "floor.triangle Metal", "ваш металлический треугольный потолок"},
            { "wall.frame.netting", "вашу сетчатую стену"},
            { "door.hinged.toptier", "вашу бронированную дверь"},
            { "shutter.metal.embrasure.a", "ваши металлические ставни"},
            { "wall.external.high.stone", "вашу высокую каменную стену"},
            { "gates.external.high.stone", "ваши высокие каменные ворота"},
            { "floor.ladder.hatch", "ваш люк с лестнице"},
            { "floor.grill", "ваш решетчатый настил"},
            { "floor.triangle Wood", "ваш деревянный треугольный потолок"},
            { "floor.triangle TopTier", "ваш бронированный треугольный потолок"},
            { "gates.external.high.wood", "ваши высокие деревянные ворота"},
            { "wall.half Wood", "вашу деревянную полустену"},
            { "floor TopTier", "ваш треугольный бронированный потолок"},
            { "wall.frame.cell", "вашу тюремную стену"},
            { "wall.window.bars.metal", "вашу металлическую решетку"},
            { "wall.frame.fence", "ваш сетчатый забор"},
            { "shutter.metal.embrasure.b", "вашу металлическую бойницу"},
            { "wall.window.glass.reinforced", "ваше окно из укрепленного стекла"},
            { "wall.frame.fence.gate", "вашу сетчатую дверь"},
            { "floor.frame Stone", "ваш каменный пол"},
            { "wall.frame.cell.gate", "вашу тюремную решетку"},
            { "floor.frame Metal", "ваш металический пол"},
            { "floor.frame Wood", "ваш деревянный пол" }
        };

        private static string[] _spisok = new string[] { "wall.external.high", "wall.external.high.stone", "gates.external.high.wood", "gates.external.high.stone", "wall.window.bars.metal", "wall.window.bars.toptier", "wall.window.glass.reinforced", "wall.window.bars.wood" };

        class POSITION
        {
            [JsonProperty("Нулевая точка")]
            public string zero;

            [JsonProperty("offsetmax")]
            public string offsetmax;

            [JsonProperty("offsetmin")]
            public string offsetmin;
        }

        class GUI
        {
            [JsonProperty("Текст")]
            public string text;

            [JsonProperty("Цвет фона")]
            public string background;

            [JsonProperty("Цвет нижней полоски")]
            public string footline;

            [JsonProperty("Цвет текста")]
            public string colortext;

            [JsonProperty("Размер текста")]
            public string sizetext;

            [JsonProperty("Время капсом?")]
            public bool timeupper;

            [JsonProperty("Расположение")]
            public POSITION position;
        }

        class MARKER
        {
            [JsonProperty("Включить?")]
            public bool enable;

            [JsonProperty("Цвет маркера")]
            public string color1;

            [JsonProperty("Цвет обводки")]
            public string color2;

            [JsonProperty("Прозрачность")]
            public float alfa;

            [JsonProperty("Отображать круг?")]
            public bool circle;

            [JsonProperty("Отображать маркером взрыва?")]
            public bool boom;
        }

        class BLOCK
        {
            [JsonProperty("Телепорт")]
            public bool tp;

            [JsonProperty("Киты")]
            public bool kits;

            [JsonProperty("Трейд")]
            public bool trade;

            [JsonProperty("Строительство")]
            public bool build;

            [JsonProperty("Ремонт/улучшение/ремув - не плагином")]
            public bool ingame;

            [JsonProperty("Команды")]
            public string[] commands;

            [JsonProperty("Сообщение о блоке")]
            public string text;

            [JsonProperty("Можно строить/устанавливать во время блокировки [prefabId]")]
            public uint[] whitelist;
        }

        class VK
        {
            [JsonProperty("Включить?")]
            public bool enable;

            [JsonProperty("API от группы")]
            public string api;

            [JsonProperty("Текст")]
            public string text;

            [JsonProperty("Кд на отправку")]
            public float cooldown;

            [JsonProperty("Сообщение при входе игрока на сервер, при условии, что он не присоеденил свой вк")]
            public string message;
        }

        class Discord
        {
            [JsonProperty("Включить?")]
            public bool enable;

            [JsonProperty("Текст")]
            public string text;

            [JsonProperty("Кд на отправку")]
            public float cooldown;
        }

        class COMBATBLOCK
        {
            [JsonProperty("Включить?")]
            public bool enable;

            [JsonProperty("Блокировать при попадании по игроку?")]
            public bool damageto;

            [JsonProperty("Блокировать при получении урона от игрока?")]
            public bool damagefrom;

            [JsonProperty("Блокировать команды")]
            public string[] blacklist;

            [JsonProperty("Текст")]
            public string text;

            [JsonProperty("Время блокировки")]
            public float blockseconds;

            [JsonProperty("Включить GUI?")]
            public bool enablegui;
        }

        class GAME
        {
            [JsonProperty("Включить?")]
            public bool enable;

            [JsonProperty("Текст")]
            public string text;

            [JsonProperty("Кд на отправку")]
            public float cooldown;
        }

        enum MES { rnmain, rndelete, notallow, rnmainadded, rnaddcooldown, rnadd, rnconfirm, rncancel, rnnocode, rnnovk, rnnewvk, rnprivate, rnerror, rnblack, rnerror2 }

        private class PluginConfig
        {
            [JsonProperty("Время блокировки")]
            public int blockseconds;

            [JsonProperty("Название сервера - для оповещений")]
            public string servername;

            [JsonProperty("Радиус")]
            public float radius;

            [JsonProperty("Снимать блокировку если вышел из рейд-зоны?")]
            public bool blockremove;

            [JsonProperty("Сброс рейдблока при смерти?")]
            public bool removedeath;

            [JsonProperty("Рейдблок установливается даже если на территории нет шкафа?")]
            public bool cupboard;

            [JsonProperty("Настройка маркера на карте")]
            public MARKER marker;

            [JsonProperty("Настройка GUI")]
            public GUI gui;

            [JsonProperty("Настройка блокировки")]
            public BLOCK block;

            [JsonProperty("Команда")]
            public string command;

            [JsonProperty("Настройка комбатблока")]
            public COMBATBLOCK combatblock;

            [JsonProperty("Оповещение о рейде в игре")]
            public GAME GAME;

            [JsonProperty("Оповещание о рейде в ВК")]
            public VK vk;

            [JsonProperty("Оповещание о рейде в Дискорд")]
            public Discord discord;

            [JsonProperty("Сообщения")]
            public Dictionary<MES, string> messages;

            [JsonProperty("Названия - для оповещаний")]
            public Dictionary<string, string> names;

            [JsonProperty("Дополнительный список на что кидать РБ")]
            public string[] spisok;

            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    blockseconds = 120,
                    radius = 75f,
                    blockremove = true,
                    servername = "HaxLite X10",
                    cupboard = false,
                    removedeath = false,
                    gui = new GUI
                    {
                        background = "0.4842625 0.1774008 0.1774008 0.3960784",
                        colortext = "1 1 1 0.7",
                        sizetext = "18",
                        timeupper = true,
                        footline = "0.9442612 0.5032899 0.5032899 1",
                        text = "БЛОКИРОВКА НА {time}",
                        position = new POSITION
                        {
                            zero = "0.5 0",
                            offsetmin = "-200 85",
                            offsetmax = "180 107"
                        }
                    },
                    marker = new MARKER
                    {
                        alfa = 0.6f,
                        color1 = "#FF0000",
                        color2 = "#000000",
                        enable = true,
                        boom = true,
                        circle = true
                    },
                    block = new BLOCK
                    {
                        build = true,
                        kits = true,
                        trade = true,
                        ingame = true,
                        tp = true,
                        commands = new string[] { "oo", "duel" },
                        whitelist = new uint[] { 2335812770, 2057881102, 1206527181, 2089327217, 2150203378 },
                        text = "<color=yellow>Вы находитесь в зоне рейд-блока!</color>"
                    },
                    vk = new VK
                    {
                        api = "",
                        cooldown = 1200f,
                        enable = true,
                        text = "Внимание! Игрок {name} разрушил {destroy} в квадрате {quad}\nconnect {ip}",
                        message = "Вы не добавили свой Вк для оповещений о рейде\nВы можете это сделать командой <color=yellow>/rn add vk.com/ID</color>"
                    },
                    discord = new Discord
                    {
                        cooldown = 1200f,
                        enable = true,
                        text = "```Внимание! Игрок {name} разрушил {destroy} в квадрате {quad}\nconnect {ip}```"
                    },
                    combatblock = new COMBATBLOCK
                    {
                        enable = true,
                        blockseconds = 30f,
                        damagefrom = true,
                        damageto = true,
                        blacklist = new string[] { "tpr", "home", "tpa", "oo" },
                        text = "<color=yellow>Вы недавно стрелялись с другим игроком!</color>\nВы сможете использовать эту команду через <color=yellow>{time}</color>",
                        enablegui = true
                    },
                    GAME = new GAME
                    {
                        enable = true,
                        cooldown = 300f,
                        text = "<color=yellow>ВНИМАНИЕ! ВАШ ДОМ РЕЙДИТ ИГРОК {name}! КВАДРАТ {quad}</color>"
                    }, messages = new Dictionary<MES, string>
                    {
                        { MES.notallow, "У вас нет доступа к этой команде!" },
                        { MES.rnmain, "Что бы добавить оповещание о рейде в <color=yellow>ВК</color>.\nНапишите в чат: <color=yellow>/rn add vk.com/ID</color>\nПример: <color=yellow>/rn add vk.com/fermenspwnz</color>"},
                        { MES.rnmainadded, "Ваш ВК указан как: <color=#c6ec79>vk.com/{value}</color>\n<color=yellow>/rn delete</color> - отвязать ВК"},
                        { MES.rnaddcooldown, "Отправить новый код вы сможете через {time}"},
                        { MES.rnadd, "Введите в игре /rn accept {num}, для подтверджения аккаунта." },
                        { MES.rnconfirm, "<color=#c6ec79>Отлично! Ваш VK подтвержден!</color>"},
                        { MES.rncancel, "<color=yellow>Не верный код!</color>"},
                        { MES.rnnocode, "<color=yellow>Вы не указали код!</color>"},
                        { MES.rndelete, "<color=#c6ec79>Ваш VK успешно отвязан от игрового аккаунта!</color>"},
                        { MES.rnnovk, "<color=yellow>У вас нет привязаного к игровому аккаунту ВК!</color>"},
                        { MES.rnnewvk, "Вы указали VK: <color=yellow>{id}</color>\nВам в VK отправлено сообщение с кодом.\n<color=yellow>/rn accept <код></color> - подтвердить авторизацию."},
                        { MES.rnprivate, "Ваши настройки приватности не позволяют отправить вам сообщение (<color=#a2d953>{id}</color>)"},
                        { MES.rnerror, "Невозможно отправить сообщение.\nПроверьте правильность ссылки (<color=#a2d953>{id}</color>) или повторите попытку позже."},
                        { MES.rnblack, "Невозможно отправить сообщение.\nВы добавили группу в черный список или не подписаны на нее, если это не так, то просто напишите в группу сервера любое сообщение и попробуйте еще раз."},
                        { MES.rnerror2, "Вы указали неверный VK ID (<color=#a2d953>{id}</color>), если это не так, то просто напишите в группу сервера любое сообщение и попробуйте еще раз."}
                    },
                    names = _names,
                    spisok = _spisok,
                    command = "rn"
                };
            }
        }
        #endregion

        #region БЛОККОМАНД
        private object OnServerCommand(ConsoleSystem.Arg arg) => blocker(arg.Player(), arg.cmd.FullName);
        
        private object OnUserCommand(IPlayer ipplayer, string com, string[] args)
        {
            com = com.TrimStart('/').Substring(com.IndexOf(".", StringComparison.Ordinal) + 1);
            BasePlayer player = BasePlayer.Find(ipplayer.Id);
            return blocker(player, com);
        }

        private object blocker(BasePlayer player, string command)
        {
            if (player == null) return null;

            if (IsBlock.ContainsKey(player.userID))
            {
                if (config.block.commands.Contains(command))
                {
                    player.ChatMessage(config.block.text);
                    return false;
                }
            }

            COMBATBK cOMBATBK;
            if (HasCombatBlock(player) && player.TryGetComponent<COMBATBK>(out cOMBATBK) && cOMBATBK.tick > 0)
            {
                if (config.combatblock.blacklist.Contains(command))
                {
                    player.ChatMessage(config.combatblock.text.Replace("{time}", FormatTime(TimeSpan.FromSeconds(cOMBATBK.tick)).ToLower()));
                    return false;
                }
            }

            return null;
        }
        #endregion

        #region КОМБАТБЛОК
        private static List<ulong> combatblock = new List<ulong>();
        private bool HasCombatBlock(BasePlayer player)
        {
            return combatblock.Contains(player.userID) ? true : false;
        }

        private void OnPlayerAttack(BasePlayer attacker, HitInfo info)
        {
            if (info == null || info.HitEntity == null || IsNPC(attacker)) return;
            if (info.HitEntity is BasePlayer)
            {
                BasePlayer target = info.HitEntity.ToPlayer();
                if (target == null || IsNPC(target)) return;
                int block = (int)config.combatblock.blockseconds;
                if (config.combatblock.damageto)
                {
                    ADDCOMBATBLOCK(attacker, block);
                }
                if (config.combatblock.damagefrom)
                {
                    ADDCOMBATBLOCK(target, block);
                }
            }
        }

        private void ADDCOMBATBLOCK(BasePlayer player, int time, bool raidblock = false)
        {
            if (!raidblock && IsBlock.ContainsKey(player.userID)) return;
            COMBATBK cOMBATBK;
            if (!player.TryGetComponent<COMBATBK>(out cOMBATBK))
            {
                cOMBATBK = player.gameObject.AddComponent<COMBATBK>();
            }

            if(time > cOMBATBK.tick) cOMBATBK.tick = time;
            if (raidblock == true) cOMBATBK.ADDRAID();
        }

        class COMBATBK : MonoBehaviour
        {
            BasePlayer player;
            public int tick;
            public bool raidblock;
            private void Awake()
            {
                player = GetComponent<BasePlayer>();
                if (player == null)
                {
                    Destroy(this);
                    return;
                }
                raidblock = false;
                if (!combatblock.Contains(player.userID)) combatblock.Add(player.userID);
                InvokeRepeating(nameof(TICK), 1f, 1f);
            }

            public void ADDRAID()
            {
                if (ins.IsBlock.ContainsKey(player.userID)) ins.IsBlock.Remove(player.userID);
                ins.IsBlock.Add(player.userID, null);
                raidblock = true;
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "AddUI", GUIJSON.Replace("{text}", config.gui.text.Replace("{time}", FormatTime(TimeSpan.FromSeconds(tick)))));
            }

            private void TICK()
            {
                tick--;
                GameObject gameObject; 
                if (tick <= 0 || !raidblock && ins.IsBlock.TryGetValue(player.userID, out gameObject) && gameObject != null)
                {
                    Destroy(this);
                    return;
                }
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "AddUI", GUIJSON.Replace("{text}", config.gui.text.Replace("{time}", FormatTime(TimeSpan.FromSeconds(tick)))));
            }

            public void DoDestroy() => Destroy(this);

            private void OnDestroy()
            {
                if (IsInvoking(nameof(TICK))) CancelInvoke(nameof(TICK));
                if(combatblock.Contains(player.userID)) combatblock.Remove(player.userID);
                GameObject x;
                if (ins.IsBlock.TryGetValue(player.userID, out x))
                {
                    if (raidblock && x == null)
                    {
                        ins.IsBlock.Remove(player.userID);
                        CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                    }
                }
                else
                {
                    CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                }
            }
        }


        /*
                private void REMOVECOMBATBLOCK(BasePlayer player)
                {
                    COMBATBLOCKER cOMBATBLOCKER;
                    if (!combatblock.TryGetValue(player, out cOMBATBLOCKER)) return;
                    if (!cOMBATBLOCKER.ttime.Destroyed) cOMBATBLOCKER.ttime.Destroy();
                    if (!IsBlock.Contains(player.userID)) CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                }*/
        #endregion

        #region ИГРОК ВЫШЕЛ ИЗ СЕРВЕРА

        Dictionary<BasePlayer, GameObject> disconnected = new Dictionary<BasePlayer, GameObject>();

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            COMBATBK cOMBATBK;
            if (player.TryGetComponent<COMBATBK>(out cOMBATBK)) cOMBATBK.DoDestroy();
            GameObject gameObject;
            if (!IsBlock.TryGetValue(player.userID, out gameObject) || gameObject == null) return;
            ZONE zONE;
            if (!gameObject.TryGetComponent<ZONE>(out zONE)) return;
            disconnected[player] = gameObject;
            zONE.RemovePlayer(player);
        }
        #endregion

        #region GRID
        private static Dictionary<string, Vector3> Grids = new Dictionary<string, Vector3>();
        private void CreateSpawnGrid()
        {
            Grids.Clear();
            var worldSize = (ConVar.Server.worldsize);
            float offset = worldSize / 2;
            var gridWidth = (0.0066666666666667f * worldSize);
            float step = worldSize / gridWidth;

            string start = "";

            char letter = 'A';
            int number = 0;

            for (float zz = offset; zz > -offset; zz -= step)
            {
                for (float xx = -offset; xx < offset; xx += step)
                {
                    Grids.Add($"{start}{letter}{number}", new Vector3(xx - 55f, 0, zz + 20f));
                    if (letter.ToString().ToUpper() == "Z")
                    {
                        start = "A";
                        letter = 'A';
                    }
                    else
                    {
                        letter = (char)(((int)letter) + 1);
                    }


                }
                number++;
                start = "";
                letter = 'A';
            }
        }

        private string GetNameGrid(Vector3 pos)
        {
            return Grids.Where(x => x.Value.x < pos.x && x.Value.x + 150f > pos.x && x.Value.z > pos.z && x.Value.z - 150f < pos.z).FirstOrDefault().Key;
        }
        #endregion

        #region CONSOLECOMMAND
        [ConsoleCommand("vkintegra")]
        private void Cmdvkintegra(ConsoleSystem.Arg arg)
        {
            if (!arg.IsAdmin) return;
            JObject vks = Interface.Oxide.DataFileSystem.ReadObject<JObject>("VKBotUsers");
            if (vks == null)
            {
                arg.ReplyWith("ДатаФайл VKBotUsers отсутсвует или пуст!");
            }
            int i = 0;
            foreach (var z in vks["VKUsersData"])
            {
                foreach (JObject obj in z)
                {
                    ulong userid = (ulong)obj["UserID"];
                    if (!VkPlayers.ContainsKey(userid))
                    {
                        VkPlayers.Add(userid, "id" + (string)obj["VkID"]);
                        i++;
                    }
                }
            }
            arg.ReplyWith($"Добавили {i} юзеров.");
            SaveVK();
        }
        #endregion
        private static RaidZone ins;
        private void Init()
        {
            ins = this;
            Unsubscribe(nameof(OnPlayerAttack));
            Unsubscribe(nameof(OnPlayerDeath));
            Unsubscribe(nameof(CanAffordUpgrade));
            Unsubscribe(nameof(OnStructureRepair));
            Unsubscribe(nameof(OnStructureDemolish));
        }

        private void OnServerInitialized()
        {
            if (config.spisok == null)
            {
                config.marker.circle = true;
                config.marker.boom = true;
                config.vk.message = "Вы не добавили свой Вк для оповещений о рейде\nВы можете это сделать командой <color=yellow>/rn add vk.com/ID</color>";
                config.spisok = _spisok;
                SaveConfig();
            }

            if (string.IsNullOrEmpty(config.command))
            {
                config.command = "rn";
                SaveConfig();
            }

            Interface.Oxide.GetLibrary<ru.Libraries.Command>(null).AddChatCommand(config.command, this, "callcommandrn");

            #region НАСТРОЙКА КАПСА
            if (config.gui.timeupper)
            {
                m0 = m0.ToUpper();
                m1 = m1.ToUpper();
                m2 = m2.ToUpper();
                s0 = s0.ToUpper();
                s1 = s1.ToUpper();
                s2 = s2.ToUpper();
            }
            else
            {
                m0 = m0.ToLower();
                m1 = m1.ToLower();
                m2 = m2.ToLower();
                s0 = s0.ToLower();
                s1 = s1.ToLower();
                s2 = s2.ToLower();
            }
            #endregion

            #region НАСТРОЙКА GUI
            string raidtext = "{\"name\":\"RAIDTEXT\",\"parent\":\"RAIDFONE\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{text}\",\"fontSize\":{sizetext},\"align\":\"MiddleCenter\",\"color\":\"{colortext}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 1\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]}".Replace("{sizetext}", config.gui.sizetext).Replace("{colortext}", config.gui.colortext);
            GUITEXT = "[" + raidtext + "]";
            GUIJSON = "[{\"name\":\"RAIDFONE\",\"parent\":\"Hud\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"{background}\"},{\"type\":\"RectTransform\",\"anchormin\":\"{zero}\",\"anchormax\":\"{zero}\",\"offsetmin\":\"{offsetmin}\",\"offsetmax\":\"{offsetmax}\"}]},{\"name\":\"BOTTOMSHIT\",\"parent\":\"RAIDFONE\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"color\":\"{footline}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0 0\",\"anchormax\":\"1 0.05\",\"offsetmin\":\"0 0\",\"offsetmax\":\"0 0\"}]},{raidtext}]".Replace("{background}", config.gui.background).Replace("{footline}", config.gui.footline).Replace("{zero}", config.gui.position.zero).Replace("{offsetmax}", config.gui.position.offsetmax).Replace("{offsetmin}", config.gui.position.offsetmin).Replace("{raidtext}", raidtext);
            #endregion

            #region НАСТРОЙКА МАРКЕРА
            if (!ColorUtility.TryParseHtmlString(config.marker.color1, out COLOR1))
            {
                Debug.LogError("ЦВЕТ МАРКЕРА НЕ В ФОРМАТЕ HEX!");
            }

            if (!ColorUtility.TryParseHtmlString(config.marker.color2, out COLOR2))
            {
                Debug.LogError("ЦВЕТ ОБВОДКИ МАРКЕРА НЕ В ФОРМАТЕ HEX!");
            }
            #endregion

            #region НАСТРОЙКА БЛОКИРОВКИ
            if (config.block.ingame)
            {
                Subscribe(nameof(CanAffordUpgrade));
                Subscribe(nameof(OnStructureRepair));
                Subscribe(nameof(OnStructureDemolish));
            }
            #endregion

            #region НАСТРОЙКА КОМБАТБЛОКА
            if (config.combatblock.enable) Subscribe(nameof(OnPlayerAttack));
            #endregion

            #region НАСТРОЙКА ОПОВЕЩЕНИЯ О РЕЙДЕ
            VkPlayers = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, string>>("raidzone_vk");
            permission.RegisterPermission(permvk, this);
            if (config.vk.enable && string.IsNullOrEmpty(config.vk.api))
            {
                Debug.LogError("ВЫ ВКЛЮЧИЛИ ОПОВЕЩЕНИЕ ДЛЯ ВК, НО ПРИ ЭТОМ НЕ УКАЗАЛИ API ОТ ГРУППЫ!");
            }
            #endregion

            if (config.removedeath) Subscribe(nameof(OnPlayerDeath));

            if (config.names == null)
            {
                config.names = _names;
                SaveConfig();
            }
            CreateSpawnGrid();
        }

        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            timer.Once(0.1f, () =>
            {
                if (!player.IsConnected) return;
                COMBATBK cOMBATBK;
                if (player.TryGetComponent<COMBATBK>(out cOMBATBK)) cOMBATBK.DoDestroy();
                GameObject gameObject;
                if (!IsBlock.TryGetValue(player.userID, out gameObject) || gameObject == null) return;
                ZONE zONE;
                if (!gameObject.TryGetComponent<ZONE>(out zONE)) return;
                zONE.RemovePlayer(player);
            });
        }

        #region ОПОВЕЩЕНИЕ О РЕЙДЕ
        [PluginReference] private Plugin DiscordCore, HaxBot;
        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info, Item item)
        {
            if (info == null || entity == null) return;
            BasePlayer player = info.InitiatorPlayer;
            if (player == null) return;
            if (entity is BuildingBlock)
            {
                int tt = (int)(entity as BuildingBlock).grade;
                if (tt <= 0) return;
                ServerMgr.Instance.StartCoroutine(GORAID(entity, player, tt));
            }
            else if(entity is AnimatedBuildingBlock || entity is SamSite || entity is AutoTurret || entity is DecayEntity && config.spisok.Contains(entity.ShortPrefabName))
            {
                ServerMgr.Instance.StartCoroutine(GORAID(entity, player));
            }
        }

        private IEnumerator GORAID(BaseCombatEntity entity, BasePlayer player, int tt = 0)
        {
            Vector3 position = entity.transform.position;
            string dname = entity.ShortPrefabName;
            if (tt == 1) dname += " Wood";
            else if (tt == 2) dname += " Stone";
            else if (tt == 3) dname += " Metal";
            else if (tt == 4) dname += " TopTier";
            BuildingPrivlidge priv = entity.GetBuildingPrivilege(entity.WorldSpaceBounds());
            yield return new WaitForEndOfFrame();
            if (priv != null && !priv.authorizedPlayers.Any(x => x.userid == player.userID))
            {
                CreateTrigger(position, config.blockseconds);
                yield return new WaitForEndOfFrame();
                string name = player.displayName;
                string quad = GetNameGrid(position);
                string connect = ConVar.Server.ip + ":" + ConVar.Server.port;

                string destroy;
                if (!config.names.TryGetValue(dname, out destroy))
                {
                    config.names.Add(dname, dname);
                    destroy = dname;
                    SaveConfig();
                }

                foreach (var z in priv.authorizedPlayers)
                {
                    ALERTPLAYER(z.userid, name, quad, connect, destroy);
                    yield return new WaitForEndOfFrame();
                }
            }
            else if (priv == null && config.cupboard)
            {
                CreateTrigger(position, config.blockseconds);
            }
            yield break;
        }

        class ALERT
        {
            public DateTime gamecooldown;
            public DateTime discordcooldown;
            public DateTime vkcooldown;
            public DateTime vkcodecooldown;
        }

        private static Dictionary<ulong, ALERT> alerts = new Dictionary<ulong, ALERT>();
        private static Dictionary<ulong, string> VkPlayers = new Dictionary<ulong, string>();

        private void ALERTPLAYER(ulong ID, string name, string quad, string connect, string destroy)
        {
            ALERT alert;
            if(!alerts.TryGetValue(ID, out alert))
            {
                alerts.Add(ID, new ALERT());
                alert = alerts[ID];
            }

            #region ОПОВЕЩЕНИЕ В ИГРЕ
            if (config.GAME.enable && alert.gamecooldown < DateTime.Now)
            {
                BasePlayer player = BasePlayer.FindByID(ID);
                if (player != null && player.IsConnected)
                {
                    player.ChatMessage(config.GAME.text.Replace("{name}", name).Replace("{quad}", quad).Replace("{destroy}", destroy));
                    alert.gamecooldown = DateTime.Now.AddSeconds(config.GAME.cooldown);
                }
            }
            #endregion
            #region ОПОВЕЩЕНИЕ В ДИСКОРДЕ
            if (config.discord.enable && alert.discordcooldown < DateTime.Now)
            {
                if (HaxBot != null) HaxBot.Call("SENDMESSAGE", ID, config.discord.text.Replace("{ip}", connect).Replace("{destroy}", destroy).Replace("{name}", name).Replace("{quad}", quad).Replace("{servername}", config.servername));
                else if (DiscordCore != null) DiscordCore.Call("SendMessageToUser", ID.ToString(), config.discord.text.Replace("{ip}", connect).Replace("{destroy}", destroy).Replace("{name}", name).Replace("{quad}", quad).Replace("{servername}", config.servername));
                alert.discordcooldown = DateTime.Now.AddSeconds(config.discord.cooldown);
            }
            #endregion
            #region ОПОВЕЩЕНИЕ В ВК
            if (config.vk.enable && alert.vkcooldown < DateTime.Now)
            {
                string vkid;
                if (VkPlayers.TryGetValue(ID, out vkid))
                {
                    GetRequest(vkid, config.vk.text.Replace("{ip}", connect).Replace("{name}", name).Replace("{destroy}", destroy).Replace("{quad}", quad).Replace("{servername}", config.servername));
                    alert.vkcooldown = DateTime.Now.AddSeconds(config.vk.cooldown);
                }
            }
            #endregion
        }

        private object CanBuild(Planner plan, Construction prefab)
        {
            BasePlayer player = plan.GetOwnerPlayer();
           // Debug.Log(prefab.fullName + " - " + prefab.prefabID);
            if (player == null || !HasBlock(player.userID) || config.block.whitelist.Contains(prefab.prefabID) || prefab.fullName.Contains("assets/prefabs/building core/")) return null;
            player.ChatMessage(config.block.text);
            return false;
        }

        private void CreateTrigger(Vector3 position, int time)
        {
            ZONE oNE = GETZONE(position);
            if (oNE != null)
            {
                oNE.Refresh(config.blockseconds);
                return;
            }
            GameObject sphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            sphere.transform.position = position;
            TriggerBase trigger = sphere.GetComponent<TriggerBase>() ?? sphere.gameObject.AddComponent<TriggerBase>();
            trigger.interestLayers = LayerMask.GetMask("Player (Server)");
            trigger.enabled = true;
            ZONE zONE = sphere.AddComponent<ZONE>();
            zONE.START(config.radius, time);
        }

        #region ВК
        class CODE
        {
            public string id;
            public ulong gameid;
        }

        private static Dictionary<string, CODE> VKCODES = new Dictionary<string, CODE>();

        private void callcommandrn(BasePlayer player, string command, string[] arg)
        {
            if (!config.vk.enable) return;
            bool vkaccess = permission.UserHasPermission(player.UserIDString, permvk);

            if (!vkaccess)
            {
                player.ChatMessage(config.messages[MES.notallow]);
                return;
            }
            if(arg == null || arg.Length == 0)
            {
                string vkid;
                if (!VkPlayers.TryGetValue(player.userID, out vkid))
                {
                    player.ChatMessage(config.messages[MES.rnmain]);
                }
                else
                {
                    player.ChatMessage(config.messages[MES.rnmainadded].Replace("{value}", vkid));
                }
                return;
            }
            string command1 = arg[0].ToLower();
            if (command1 == "add")
            {
                if (arg.Length > 1)
                {
                    ALERT aLERT;
                    if (alerts.TryGetValue(player.userID, out aLERT) && aLERT.vkcodecooldown > DateTime.Now)
                    {
                        player.ChatMessage(config.messages[MES.rnaddcooldown].Replace("{time}", FormatTime(aLERT.vkcodecooldown - DateTime.Now).ToLower()));
                        return;
                    }

                    string vkid = arg[1].ToLower().Replace("vk.com/", "").Replace("https://", "").Replace("http://", "");
                    string num = RANDOMNUM();
                    GetRequest(vkid, config.messages[MES.rnadd].Replace("{num}", num), player, num);
                }
            }else if (command1 == "accept")
            {
                if (arg.Length > 1)
                {
                    CODE cODE;
                    if (VKCODES.TryGetValue(arg[1], out cODE) && cODE.gameid == player.userID)
                    {
                        string vkid;
                        if(VkPlayers.TryGetValue(player.userID, out vkid))
                        {
                            vkid = cODE.id;
                        }
                        else
                        {
                            VkPlayers.Add(player.userID, cODE.id);
                        }
                        VKCODES.Remove(arg[1]);
                        player.ChatMessage(config.messages[MES.rnconfirm]);
                        SaveVK();
                    }
                    else
                    {
                        player.ChatMessage(config.messages[MES.rncancel]);
                    }
                }
                else
                {
                    player.ChatMessage(config.messages[MES.rnnocode]);
                }
            }
            else if (command1 == "delete")
            {
                if (VkPlayers.ContainsKey(player.userID))
                {
                    VkPlayers.Remove(player.userID);
                    player.ChatMessage(config.messages[MES.rndelete]);
                }
                else
                {
                    player.ChatMessage(config.messages[MES.rnnovk]);
                }
            }
        }

        private void GetRequest(string reciverID, string msg, BasePlayer player = null, string num = null) => webrequest.Enqueue("https://api.vk.com/method/messages.send?domain=" + reciverID + "&message=" + msg.Replace("#", "%23") + "&v=5.80&access_token=" + config.vk.api, null, (code2, response2) => ServerMgr.Instance.StartCoroutine(GetCallback(code2, response2, reciverID, player, num)), this);
        
        private IEnumerator GetCallback(int code, string response, string id, BasePlayer player = null, string num = null)
        {
            if (player == null) yield break;
            if (response == null || code != 200)
            {
                ALERT alert;
                if (alerts.TryGetValue(player.userID, out alert)) alert.vkcooldown = DateTime.Now;
                Debug.Log("НЕ ПОЛУЧИЛОСЬ ОТПРАВИТЬ СООБЩЕНИЕ В ВК! => обнулили кд на отправку");
                yield break;
            }
            yield return new WaitForEndOfFrame();
            if (!response.Contains("error"))
            {
                ALERT aLERT;
                if (alerts.TryGetValue(player.userID, out aLERT))
                {
                    aLERT.vkcodecooldown = DateTime.Now.AddMinutes(10);
                }
                else
                {
                    alerts.Add(player.userID, new ALERT {vkcodecooldown = DateTime.Now.AddMinutes(10) });
                }
                if (VKCODES.ContainsKey(num)) VKCODES.Remove(num);
                VKCODES.Add(num, new CODE { gameid = player.userID, id = id });
                player.ChatMessage(config.messages[MES.rnnewvk].Replace("{id}", id));
            }
            else if (response.Contains("PrivateMessage"))
            {
                player.ChatMessage(config.messages[MES.rnprivate].Replace("{id}", id));
            }
            else if(response.Contains("ErrorSend"))
            {
                player.ChatMessage(config.messages[MES.rnerror].Replace("{id}", id));
            }
            else if(response.Contains("BlackList"))
            {
                player.ChatMessage(config.messages[MES.rnblack]);
            }
            else
            {
                player.ChatMessage(config.messages[MES.rnerror2].Replace("{id}", id));
            }
            yield break;
        }
        #endregion
        #endregion

        #region HEADER
        private const string permvk = "raidzone.vk";
        private const string genericPrefab = "assets/prefabs/tools/map/genericradiusmarker.prefab";
        private const string raidPrefab = "assets/prefabs/tools/map/explosionmarker.prefab";
        private static string GUIJSON = "";
        private static string GUITEXT = "";
        private static Color COLOR1;
       
        private static Color COLOR2;
        private Dictionary<ulong, GameObject> IsBlock = new Dictionary<ulong, GameObject>();
        private static List<MapMarkerGenericRadius> mapMarkerGenericRadii = new List<MapMarkerGenericRadius>();
        #endregion

        #region ZONE - КЛАСС
        class ZONE : MonoBehaviour
        {
            private MapMarkerGenericRadius generic;
            private MapMarkerExplosion explosion;
            private SphereCollider sphere;
            private List<Network.Connection> ZONEPLAYERS = new List<Network.Connection>();

            public int seconds;

            void Awake()
            {
                sphere = GetComponent<SphereCollider>();
                if (sphere == null)
                {
                    Destroy(this);
                    Debug.Log("sphere null");
                    return;
                }
                gameObject.layer = (int)Layer.Reserved1;
                gameObject.name = "RaidZone";
                sphere.radius = config.radius;
                sphere.isTrigger = true;
                sphere.enabled = true;
            }

            public void START(float radius, int time)
            {
                if (sphere == null)
                {
                    Destroy(this);
                    Debug.Log("sphere null");
                    return;
                }

                seconds = time;
                InvokeRepeating(nameof(OneSecond), 0f, 1f);

                if (config.marker.enable)
                {
                    if (config.marker.boom)
                    {
                        explosion = (MapMarkerExplosion)GameManager.server.CreateEntity(raidPrefab, sphere.transform.position);
                        explosion.SetDuration(time);
                        explosion.enableSaving = false;
                        explosion.Spawn();
                        explosion.SendNetworkUpdate();
                    }

                    if (config.marker.circle)
                    {
                        generic = (MapMarkerGenericRadius)GameManager.server.CreateEntity(genericPrefab, sphere.transform.position);
                        generic.color1 = COLOR1;
                        generic.color2 = COLOR2;
                        generic.radius = radius / 145f;
                        generic.alpha = config.marker.alfa;
                        generic.enableSaving = false;
                        generic.Spawn();
                        generic.SendUpdate();
                        mapMarkerGenericRadii.Add(generic);
                    }
                }
            }

            public void Refresh(int time)
            {
                seconds = time;
            }

            private void OneSecond()
            {
                if (seconds <= 0)
                {
                    DoDestroy();
                    return;
                }

                string GUI = GUITEXT.Replace("{text}", config.gui.text.Replace("{time}", FormatTime(TimeSpan.FromSeconds(seconds))));
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = ZONEPLAYERS }, null, "DestroyUI", "RAIDTEXT");
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = ZONEPLAYERS }, null, "AddUI", GUI);
                seconds--;
            }

            public void AddPlayer(BasePlayer player)
            {
                if (!player.IsConnected || ZONEPLAYERS.Contains(player.net.connection)) return;

              /*  COMBATBK cOMBATBK;
                if (player.TryGetComponent<COMBATBK>(out cOMBATBK))
                {
                    cOMBATBK.DoDestroy();
                }*/

                GameObject x;
                if (ins.IsBlock.TryGetValue(player.userID, out x))
                {
                    if (!config.blockremove && x != null && x != gameObject)
                    {
                        ZONE zONE = x.GetComponent<ZONE>();
                        zONE.RemovePlayer(player, false);
                    }
                    else
                    {
                        ins.IsBlock.Remove(player.userID);
                    }
                }

                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "AddUI", GUIJSON.Replace("{text}", config.gui.text.Replace("{time}", FormatTime(TimeSpan.FromSeconds(seconds)))));
                ZONEPLAYERS.Add(player.net.connection);
                ins.IsBlock.Add(player.userID, gameObject);
             //   Debug.Log(player.displayName + " добавили");
            }

            public void RemovePlayer(BasePlayer player, bool newzone = true)
            {
                if (!player.IsConnected || !ZONEPLAYERS.Contains(player.net.connection)) return;
                ZONEPLAYERS.Remove(player.net.connection);
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", "RAIDFONE");
                if (ins.IsBlock.ContainsKey(player.userID)) ins.IsBlock.Remove(player.userID);
                // Debug.Log(player.displayName + " удалили");
                if(newzone) Invoke(nameof(CHECKNEWZONE), 0.1f);
            }

            private void CHECKNEWZONE(BasePlayer player)
            {
                if (player == null || player.IsDead() || !player.IsConnected) return;
                ZONE zONE = GETZONE(player.transform.position);
                if (zONE == null) return;
                COMBATBK cOMBATBK;
                if (player.TryGetComponent<COMBATBK>(out cOMBATBK))
                {
                    cOMBATBK.DoDestroy();
                }
                zONE.AddPlayer(player);
            }

            public void DoDestroy()
            {
                UnityEngine.GameObject.Destroy(gameObject);
                Destroy(this);
            }

            private void OnDestroy()
            {
                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = ZONEPLAYERS }, null, "DestroyUI", "RAIDFONE");
                foreach(Network.Connection connection in ZONEPLAYERS)
                {
                    if (ins.IsBlock.ContainsKey(connection.userid)) ins.IsBlock.Remove(connection.userid);
                }
                ZONEPLAYERS.Clear();
                if (config.marker.enable)
                {
                    if(config.marker.circle) RemoveGeneric(generic);
                    if (config.marker.boom && !explosion.IsDestroyed) explosion.Kill();
                }
            }
        }

        private void OnEntityEnter(TriggerBase trigger, BaseEntity entity)
        {
            if (trigger == null || trigger.name != "RaidZone") return;
            BasePlayer player = entity.ToPlayer();
            if (player == null || IsNPC(player)) return;
            ZONE zONE = trigger.GetComponent<ZONE>();
            if (zONE == null) return;
            COMBATBK cOMBATBK;
            if (player.TryGetComponent<COMBATBK>(out cOMBATBK))
            {
                cOMBATBK.DoDestroy();
            }
            zONE.AddPlayer(player);
        }

        private void OnEntityLeave(TriggerBase trigger, BaseEntity entity)
        {
            if (trigger == null || trigger.name != "RaidZone") return;
            BasePlayer player = entity.ToPlayer();
            if (player == null || IsNPC(player)) return;

            ZONE zONE = trigger.GetComponent<ZONE>();
            if (zONE == null) return;

            if (!config.blockremove) 
            {
                zONE.RemovePlayer(player, false);
                NextTick(() =>
                {
                    ADDCOMBATBLOCK(player, zONE.seconds, true);
                });
            }
            else
            {
                zONE.RemovePlayer(player);
            }
        }
        #endregion

        #region ПОРНО
        private bool HasBlock(ulong ID)
        {
            return IsBlock.ContainsKey(ID);
        }

        private bool HasBlockTera(Vector3 position)
        {
            return GETZONE(position) != null ? true : false;
        }

        private string CanTeleport(BasePlayer player)
        {
            if(!config.block.tp) return null;
            if (!HasBlock(player.userID)) return null;
            return config.block.text;
        }

        private string canTeleport(BasePlayer player)
        {
            if (!config.block.tp) return null;
            if (!HasBlock(player.userID)) return null;
            return config.block.text;
        }

        private int? CanBGrade(BasePlayer player, int grade, BuildingBlock block, Planner plan)
        {
            if (!HasBlock(player.userID)) return null;
            player.ChatMessage(config.block.text);
            return 0;
        }

        private string CanTrade(BasePlayer player)
        {
            if (!config.block.trade) return null;
            if (!HasBlock(player.userID)) return null;
            return config.block.text;
        }

        private string canRemove(BasePlayer player)
        {
            if (!HasBlock(player.userID)) return null;
            return config.block.text;
        }

        object canRedeemKit(BasePlayer player)
        {
            if (!config.block.kits) return null;
            if (!HasBlock(player.userID)) return null;
            return config.block.text;
        }

        private bool? CanAffordUpgrade(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)
        {
            if (!HasBlock(player.userID)) return null;
            player.ChatMessage(config.block.text);
            return false;
        }

        private object OnStructureUpgrade(BuildingBlock block, BasePlayer player, BuildingGrade.Enum grade)
        {
            if (!HasBlock(player.userID)) return null;
            player.ChatMessage(config.block.text);
            return false;
        }

        private bool? OnStructureRepair(BaseCombatEntity entity, BasePlayer player)
        {
            if (!HasBlock(player.userID)) return null;
            player.ChatMessage(config.block.text);
            return false;
        }

        object OnStructureDemolish(BaseCombatEntity entity, BasePlayer player)
        {   
            if(player == null || !HasBlock(player.userID)) return null;
            player.ChatMessage(config.block.text);
            return null;
        }
        #endregion

        #region ХЕЛПЕРЫ
        private static ZONE GETZONE(Vector3 position)
        {
            List<SphereCollider> sphereColliders = new List<SphereCollider>();
            Vis.Colliders(position, 0.1f, sphereColliders);
            if (sphereColliders.Count > 0)
            {
                foreach (var z in sphereColliders)
                {
                    ZONE oNE = z.gameObject.GetComponent<ZONE>();
                    if (oNE == null) continue;
                    return oNE;
                }
            }
            return null;
        }

        private static void RemoveGeneric(MapMarkerGenericRadius mapMarker)
        {
            if (mapMarkerGenericRadii.Contains(mapMarker)) mapMarkerGenericRadii.Remove(mapMarker);
            if (!mapMarker.IsDestroyed) mapMarker.Kill();
        }

        private string RANDOMNUM() => Random.Range(1000, 99999).ToString();
        #endregion

        #region DISMOUNT
        private void CanDismountEntity(BasePlayer player, BaseMountable entity)
        {
            NextTick(() =>
            {
                if (!player.IsConnected) return;
                ZONE zONE = GETZONE(player.transform.position);
                if (zONE == null) return;
                zONE.AddPlayer(player);
            });
        }
        #endregion

        private void SaveVK()
        {
            if (VkPlayers.Count > 0) Interface.Oxide.DataFileSystem.WriteObject("raidzone_vk", VkPlayers);
        }

        private void Unload()
        {
            SaveVK();
            foreach (var z in mapMarkerGenericRadii.ToList())
            {
                RemoveGeneric(z);
            }

            foreach(ZONE zONE in UnityEngine.Object.FindObjectsOfType<ZONE>().ToList())
            {
                zONE.DoDestroy();
            }

            foreach (COMBATBK zONE in UnityEngine.Object.FindObjectsOfType<COMBATBK>().ToList())
            {
                zONE.DoDestroy();
            }

            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = Network.Net.sv.connections }, null, "DestroyUI", "RAIDFONE");
            combatblock.Clear();
            IsBlock.Clear();
            VKCODES.Clear();
            alerts.Clear();
        }

        private void OnPlayerSleepEnded(BasePlayer player)
        {
            timer.Once(0.1f, () =>
            {
                if (!player.IsConnected) return;
                ZONE zONE = GETZONE(player.transform.position);
                if (zONE == null)
                {
                    if (config.blockremove)
                    {
                        GameObject x;
                        if (IsBlock.TryGetValue(player.userID, out x))
                        {
                            if (x == null) return;
                            ZONE zONE2 = x.GetComponent<ZONE>();
                            zONE2.RemovePlayer(player, false);
                        }
                    }
                    return;
                }
                zONE.AddPlayer(player);
            });
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (!player.IsConnected) return;

            if (player.IsReceivingSnapshot)
            {
                timer.Once(1f, () => OnPlayerConnected(player));
            }
            if (config.vk.enable && !string.IsNullOrEmpty(config.vk.message) && permission.UserHasPermission(player.UserIDString, permvk) && !VkPlayers.ContainsKey(player.userID)) player.ChatMessage(config.vk.message);

            if (config.marker.enable) foreach (var z in mapMarkerGenericRadii) z.SendUpdate();

            GameObject gameObject;
            if(disconnected.TryGetValue(player, out gameObject) && gameObject != null)
            {
                ZONE zONE;
                if (!gameObject.TryGetComponent<ZONE>(out zONE)) return;
                zONE.AddPlayer(player);
                disconnected.Remove(player);
            }
        }

        private static bool IsNPC(BasePlayer player)
        {
            if (player is NPCPlayer) return true;
            if (!(player.userID >= 76560000000000000L || player.userID <= 0L)) return true;
            return false;
        }

        #region ВРЕМЯ
        private static string m0 = "МИНУТ";
        private static string m1 = "МИНУТЫ";
        private static string m2 = "МИНУТУ";

        private static string s0 = "СЕКУНД";
        private static string s1 = "СЕКУНДЫ";
        private static string s2 = "СЕКУНДУ";

        private static string FormatTime(TimeSpan time)
        => (time.Minutes == 0 ? string.Empty : FormatMinutes(time.Minutes)) + ((time.Seconds == 0) ? string.Empty : FormatSeconds(time.Seconds));

        private static string FormatMinutes(int minutes) => FormatUnits(minutes, m0, m1, m2);

        private static string FormatSeconds(int seconds) => FormatUnits(seconds, s0, s1, s2);

        private static string FormatUnits(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9 || tmp == 0)
                return $"{units} {form1} ";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2} ";

            return $"{units} {form3} ";
        }
        #endregion
    }
}


// --- End of file: RaidZone.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/AdminRadar.cs ---
// --- Original Local Path: KualaRust/AdminRadar.cs ---

﻿//#define DEBUG
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Facepunch;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using Oxide.Game.Rust.Libraries;
using Rust;
using UnityEngine;

/*
    Fixed boat, rhib, and horse tracking
    Added modular cars to Cars filter
    Added LockedByEntCrate to Loot filter (bradley apc crate)
    Added `Drawing Distances > Radar Drops Command` (150 meters) - /radar drops
*/

namespace Oxide.Plugins
{
    [Info("Admin Radar", "nivex", "5.1.0")]
    [Description("Radar tool for Admins and Developers.")]
    class AdminRadar : RustPlugin
    {
        [PluginReference] Plugin Vanish, DiscordMessages;

        private const string permAllowed = "adminradar.allowed";
        private const string permBypass = "adminradar.bypass";
        private const string permAuto = "adminradar.auto";
        private const string permBypassOverride = "adminradar.bypass.override";
        private const string permList = "adminradar.list";
        private const float flickerDelay = 0.05f;
        private static AdminRadar ins;
        private StoredData storedData = new StoredData();
        private bool init; // don't use cache while false
        private bool isUnloading;
        private float startupTime;

        private List<string> tags = new List<string>
            {"ore", "cluster", "1", "2", "3", "4", "5", "6", "_", ".", "-", "deployed", "wooden", "large", "pile", "prefab", "collectable", "loot", "small"}; // strip these from names to reduce the size of the text and make it more readable

        private readonly Dictionary<ulong, Color> playersColor = new Dictionary<ulong, Color>();
        private readonly List<BasePlayer> accessList = new List<BasePlayer>();
        private readonly Dictionary<ulong, Timer> voices = new Dictionary<ulong, Timer>();
        private readonly List<Radar> activeRadars = new List<Radar>();
        private readonly List<string> warnings = new List<string>();
        private readonly Dictionary<ulong, float> cooldowns = new Dictionary<ulong, float>();
        private static Cache cache = new Cache();
        private Coroutine coroutine;

        private const bool True = true;
        private const bool False = false;

        public enum CupboardAction
        {
            Authorize,
            Clear,
            Deauthorize
        }

        public class TrackType
        {
            public string ExactShortname;
            public string PartialShortname;
            public string Text;

            public TrackType(string exact, string partial, string text)
            {
                ExactShortname = exact;
                PartialShortname = partial;
                Text = text;
            }
        }

        private class CachedStringBuilder
        {
            private readonly StringBuilder _builder = new StringBuilder();
            private string _str;

            public void TrimEnd(int num)
            {
                _builder.Length -= num;
            }

            public void Append(string val)
            {
                _builder.Append(val);
            }

            public void Append(object obj)
            {
                _builder.Append(obj);
            }

            public override string ToString()
            {
                _str = _builder.ToString();
                _builder.Clear();
                return _str;
            }

            internal void Replace(string v1, string v2)
            {
                _builder.Replace(v1, v2);
            }
        }

        private static CachedStringBuilder _cachedStringBuilder { get; set; }

        private class Cache
        {
            public readonly List<BaseNpc> Animals = new List<BaseNpc>();
            public readonly List<BaseEntity> CargoPlanes = new List<BaseEntity>();
            public readonly List<DroppedItemContainer> Backpacks = new List<DroppedItemContainer>();
            public readonly Dictionary<Vector3, CachedInfo> Bags = new Dictionary<Vector3, CachedInfo>();
            public readonly List<BaseEntity> Boats = new List<BaseEntity>();
            public readonly List<BradleyAPC> BradleyAPCs = new List<BradleyAPC>();
            public readonly List<BaseEntity> CargoShips = new List<BaseEntity>();
            public readonly List<BaseEntity> Cars = new List<BaseEntity>();
            public readonly List<CCTV_RC> CCTV = new List<CCTV_RC>();
            public readonly List<BaseEntity> CH47 = new List<BaseEntity>();
            public readonly List<BuildingPrivlidge> Cupboards = new List<BuildingPrivlidge>();
            public readonly Dictionary<Vector3, CachedInfo> Collectibles = new Dictionary<Vector3, CachedInfo>();
            public readonly List<StorageContainer> Containers = new List<StorageContainer>();
            public readonly Dictionary<PlayerCorpse, CachedInfo> Corpses = new Dictionary<PlayerCorpse, CachedInfo>();
            public readonly List<BaseHelicopter> Helicopters = new List<BaseHelicopter>();
            public readonly List<BaseEntity> MiniCopter = new List<BaseEntity>();
            public readonly List<BasePlayer> NPCPlayers = new List<BasePlayer>();
            public readonly Dictionary<Vector3, CachedInfo> Ores = new Dictionary<Vector3, CachedInfo>();
            public readonly List<BaseEntity> RHIB = new List<BaseEntity>();
            public readonly List<BaseEntity> RidableHorse = new List<BaseEntity>();
            public readonly List<SupplyDrop> SupplyDrops = new List<SupplyDrop>();
            public readonly List<AutoTurret> Turrets = new List<AutoTurret>();
            public readonly List<Zombie> Zombies = new List<Zombie>();

            public void Clear()
            {
                Animals.Clear();
                CargoPlanes.Clear();
                Backpacks.Clear();
                Bags.Clear();
                Boats.Clear();
                BradleyAPCs.Clear();
                CargoShips.Clear();
                Cars.Clear();
                CCTV.Clear();
                CH47.Clear();
                Cupboards.Clear();
                Collectibles.Clear();
                Containers.Clear();
                Corpses.Clear();
                Helicopters.Clear();
                MiniCopter.Clear();
                NPCPlayers.Clear();
                Ores.Clear();
                RHIB.Clear();
                RidableHorse.Clear();
                SupplyDrops.Clear();
                Turrets.Clear();
                Zombies.Clear();
            }
        }

        private class StoredData
        {
            public readonly List<string> Extended = new List<string>();
            public readonly Dictionary<string, List<string>> Filters = new Dictionary<string, List<string>>();
            public readonly List<string> Hidden = new List<string>();
            public readonly List<string> OnlineBoxes = new List<string>();
            public readonly List<string> Visions = new List<string>();
            public readonly List<string> Active = new List<string>();
            public StoredData() { }
        }

        private class CachedInfo
        {
            public object Info;
            public string Name;
            public float Size;
        }

        public enum EntityType
        {
            Active,
            Airdrops,
            Animals,
            Bags,
            Backpacks,
            Boats,
            Bradley,
            Cars,
            CargoPlanes,
            CargoShips,
            CCTV,
            CH47Helicopters,
            Containers,
            Collectibles,
            Cupboards,
            CupboardsArrow,
            Dead,
            GroupLimit,
            Heli,
            MiniCopter,
            Npc,
            Ore,
            RidableHorses,
            RigidHullInflatableBoats,
            Sleepers,
            Source,
            Turrets,
            Zombies
        }

        public static class Coroutines // Credits to Jake Rich
        {
            private static Dictionary<float, YieldInstruction> _waitForSecondDict;

            public static YieldInstruction WaitForSeconds(float delay)
            {
                if (_waitForSecondDict == null)
                {
                    _waitForSecondDict = new Dictionary<float, YieldInstruction>();
                }

                YieldInstruction yield;
                if (!_waitForSecondDict.TryGetValue(delay, out yield))
                {
                    //Cache the yield instruction for later
                    yield = new WaitForSeconds(delay);
                    _waitForSecondDict.Add(delay, yield);
                }

                return yield;
            }

            public static void Clear()
            {
                if (_waitForSecondDict != null)
                {
                    _waitForSecondDict.Clear();
                    _waitForSecondDict = null;
                }
            }
        }

        public string PositionToGrid(Vector3 position) // Rewrite from yetzt implementation
        {
            var r = new Vector2(World.Size / 2 + position.x, World.Size / 2 + position.z);
            var x = Mathf.Floor(r.x / 146.3f) % 26;
            var z = Mathf.Floor(World.Size / 146.3f) - Mathf.Floor(r.y / 146.3f);

            return $"{(char)('A' + x)}{z - 1}";
        }

        private void AdminRadarDiscordMessage(string playerName, string playerId, bool state, Vector3 position)
        {
            if (!_sendDiscordMessages || DiscordMessages == null || !DiscordMessages.IsLoaded)
            {
                return;
            }

            if (Time.realtimeSinceStartup - startupTime < 5f || isUnloading)
            {
                return;
            }

            string text = state ? _discordMessageToggleOn : _discordMessageToggleOff;
            string grid = PositionToGrid(position);
            string message = $"[{DateTime.Now}] {playerName} ({playerId} @ {grid}): {text}";

            var chatEntry = new ConVar.Chat.ChatEntry
            {
                Message = message,
                UserId = playerId,
                Username = playerName,
                Time = Facepunch.Math.Epoch.Current
            };

            LogToFile("toggles", message, this, false);
            RCon.Broadcast(RCon.LogType.Chat, chatEntry);

            string steam = $"[{playerName}](https://steamcommunity.com/profiles/{playerId})";
            string server = $"steam://connect/{ConVar.Server.ip}:{ConVar.Server.port}";

            object fields = new[]
            {
                new 
                {
                    name = _embedMessagePlayer, 
                    value = steam, 
                    inline = true
                },
                new 
                {
                    name = _embedMessageMessage, 
                    value = text, 
                    inline = false
                },
                new 
                {
                    name = _embedMessageServer, 
                    value = server, 
                    inline = false
                },
                new 
                {
                    name = _embedMessageLocation, 
                    value = grid, 
                    inline = false
                }
            };

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(fields);

            Interface.CallHook("API_SendFancyMessage", _webhookUrl, _embedMessageTitle, _messageColor, json, null, this);
        }

        private class Radar : FacepunchBehaviour
        {
            private EntityType entityType;
            private int _inactiveSeconds;
            private int activeSeconds;
            public float invokeTime { get; set; }
            public float maxDistance;
            public BasePlayer player;
            private Vector3 position;
            private float currDistance;
            private int checks;

            private bool setSource = True;
            public bool showBags;
            public bool showBoats;
            public bool showBox;
            public bool showBradley;
            public bool showCars;
            public bool showCCTV;
            public bool showCargoPlanes;
            public bool showCargoShips;
            public bool showCH47;
            public bool showCollectible;
            public bool showDead;
            public bool showHeli;
            public bool showHT;
            public bool showLoot;
            public bool showMiniCopter;
            public bool showNPC;
            public bool showOre;
            public bool showRidableHorses;
            public bool showRHIB;
            public bool showSleepers;
            public bool showStash;
            public bool showTC;
            public bool showTCArrow;
            public bool showTurrets;
            public bool showAll;
            private BaseEntity source;
            public bool barebonesMode;

            private class Ping
            {
                public int AveragePing;
                public float Time;
            }

            private class PrivInfo
            {
                public float ProtectedMinutes;
                public float LastTime = float.MaxValue;
                public PrivInfo() { }
            }

            private Dictionary<BuildingPrivlidge, PrivInfo> tcs;
            private Dictionary<ulong, Ping> pings;
            private Dictionary<int, List<BasePlayer>> groupedPlayers;
            private List<BasePlayer> nearbyPlayers;
            private List<BasePlayer> distantPlayers;
            private List<BasePlayer> removePlayers;
            private bool limitFlag;
            private int limitIndex;
            public string playerName;
            private string playerId;
            private Vector3 lastPosition;
            private bool canBypassOverride;
            private bool hasPermAllowed;

            private void Awake()
            {
                removePlayers = new List<BasePlayer>();
                groupedPlayers = new Dictionary<int, List<BasePlayer>>();
                nearbyPlayers = new List<BasePlayer>();
                distantPlayers = new List<BasePlayer>();
                tcs = new Dictionary<BuildingPrivlidge, PrivInfo>();
                pings = new Dictionary<ulong, Ping>();

                ins.activeRadars.Add(this);

                if (ins.activeRadars.Count == 1 && (blockDamageAnimals || blockDamageBuildings || blockDamageNpcs || blockDamagePlayers || blockDamageOther))
                {
                    ins.Subscribe(nameof(OnEntityTakeDamage));
                }

                player = GetComponent<BasePlayer>();
                source = player;
                position = player.transform.position;
                playerName = player.displayName;
                playerId = player.UserIDString;
                lastPosition = position;
                canBypassOverride = ins.permission.UserHasPermission(playerId, permBypassOverride);
                hasPermAllowed = ins.permission.UserHasPermission(playerId, permAllowed);

                if (inactiveSeconds > 0f || inactiveMinutes > 0)
                {
                    InvokeRepeating(Activity, 0f, 1f);
                }

                ins.AdminRadarDiscordMessage(player.displayName, player.UserIDString, true, player.transform.position);
                Interface.CallHook("OnRadarActivated", player);
            }

            public void StopAll()
            {
                if (_routine != null)
                {
                    StopCoroutine(_routine);
                    _routine = null;
                }

                CancelInvoke();
            }

            private void OnDestroy()
            {
                Interface.CallHook("AdminRadarDiscordMessage", playerName, playerId, false, lastPosition);
                Interface.CallHook("OnRadarDeactivated", player);

                StopAll();
                nearbyPlayers.Clear();
                groupedPlayers.Clear();
                distantPlayers.Clear();
                tcs.Clear();
                pings.Clear();

                if (radarUI != null && radarUI.Contains(player.UserIDString))
                    DestroyUI(player);

                if (ins == null)
                {
                    Destroy(this);
                    return;
                }

                ins.activeRadars.Remove(this);

                if (ins.activeRadars.Count == 0 && !ins.isUnloading) ins.Unsubscribe(nameof(OnEntityTakeDamage));

                if (player != null && player.IsConnected)
                {
                    if (coolDown > 0f)
                    {
                        if (!ins.cooldowns.ContainsKey(player.userID))
                            ins.cooldowns.Add(player.userID, Time.realtimeSinceStartup + coolDown);
                        else ins.cooldowns[player.userID] = Time.realtimeSinceStartup + coolDown;
                    }

                    if (ins.showToggleMessage)
                    {
                        Message(player, ins.msg("Deactivated", player.UserIDString));
                    }
                }

                Destroy(this);
            }

            public bool GetBool(string value)
            {
                switch (value)
                {
                    case "All":
                        return showAll;
                    case "Bags":
                        return showBags;
                    case "Boats":
                        return showBoats;
                    case "Box":
                        return showBox;
                    case "Bradley":
                        return showBradley;
                    case "CargoPlanes":
                        return showCargoPlanes;
                    case "CargoShips":
                        return showCargoShips;
                    case "Cars":
                        return showCars;
                    case "CCTV":
                        return showCCTV;
                    case "CH47":
                        return showCH47;
                    case "Collectibles":
                        return showCollectible;
                    case "Dead":
                        return showDead;
                    case "Heli":
                        return showHeli;
                    case "Horse":
                    case "Horses":
                    case "RidableHorses":
                        return showRidableHorses;
                    case "Loot":
                        return showLoot;
                    case "MiniCopter":
                        return showMiniCopter;
                    case "NPC":
                        return showNPC;
                    case "Ore":
                        return showOre;
                    case "RHIB":
                        return showRHIB;
                    case "Sleepers":
                        return showSleepers;
                    case "Stash":
                        return showStash;
                    case "TCArrows":
                        return showTCArrow;
                    case "TC":
                        return showTC;
                    case "Turrets":
                        return showTurrets;
                    default:
                        return False;
                }
            }

            private void Activity()
            {
                if (source != player)
                {
                    _inactiveSeconds = 0;
                    return;
                }

                _inactiveSeconds = position == player.transform.position ? _inactiveSeconds + 1 : 0;
                position = player.transform.position;

                if (inactiveMinutes > 0 && ++activeSeconds / 60 > inactiveMinutes)
                    Destroy(this);
                else if (inactiveSeconds > 0 && _inactiveSeconds > inactiveSeconds)
                    Destroy(this);
            }

            Coroutine _routine;

            public void Start()
            {
                isAdmin = player.IsAdmin;

                if (_routine != null)
                {
                    StopCoroutine(_routine);
                    _routine = null;
                }

                _routine = StartCoroutine(barebonesMode ? DoBareRadarRoutine() : DoRadarRoutine());
            }

            bool isAdmin { get; set; }

            IEnumerator DoBareRadarRoutine()
            {
                do
                {
                    if (!player || !player.IsConnected || ins == null || ins.isUnloading)
                    {
                        Destroy(this);
                        yield break;
                    }

                    if (!isAdmin && hasPermAllowed)
                    {
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, True);
                        player.SendNetworkUpdateImmediate();
                    }

                    if (!SetSource())
                    {
                        yield return Coroutines.WaitForSeconds(0.1f);
                        continue;
                    }

                    lastPosition = source.transform.position;

                    if (ShowActive() >= 50)
                    {
                        checks = 0;
                        yield return null;
                    }

                    ShowSleepers();

                    if (!isAdmin && player.HasPlayerFlag(BasePlayer.PlayerFlags.IsAdmin))
                    {
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, False);
                        player.SendNetworkUpdateImmediate();
                    }

                    checks = 0;
                    yield return Coroutines.WaitForSeconds(invokeTime);
                } while (player.IsValid() && player.IsConnected);
            }

            IEnumerator DoRadarRoutine()
            {
                do
                {
                    if (!player || !player.IsConnected || ins == null || ins.isUnloading)
                    {
                        Destroy(this);
                        yield break;
                    }

                    if (!isAdmin && hasPermAllowed)
                    {
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, True);
                        player.SendNetworkUpdateImmediate();
                    }

                    if (!SetSource())
                    {
                        yield return Coroutines.WaitForSeconds(0.1f);
                        continue;
                    }

                    if (ShowActive() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowSleepers() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.Cars, showCars, "C", cache.Cars) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.CargoPlanes, showCargoPlanes, "CP", cache.CargoPlanes) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.CargoShips, showCargoShips, "CS", cache.CargoShips) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowHeli() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowBradley() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowLimits() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowTC() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowContainers() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowBags() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowTurrets() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowDead() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowNPC() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowOre() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowCCTV() >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.CH47Helicopters, showCH47, "CH47", cache.CH47) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.RigidHullInflatableBoats, showRHIB, "RHIB", cache.RHIB) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.Boats, showBoats, "RB", cache.Boats) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.MiniCopter, showMiniCopter, "MC", cache.MiniCopter) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    if (ShowEntity(EntityType.RidableHorses, showRidableHorses, "RH", cache.RidableHorse) >= 300)
                    {
                        checks = 0;
                        yield return null;
                    }

                    ShowCollectables();

                    if (!isAdmin && player.HasPlayerFlag(BasePlayer.PlayerFlags.IsAdmin))
                    {
                        player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, False);
                        player.SendNetworkUpdateImmediate();
                    }

                    checks = 0;
                    yield return Coroutines.WaitForSeconds(invokeTime);
                } while (player.IsValid() && player.IsConnected);
            }

            private void HandleException(Exception ex)
            {
                if (!isAdmin && player.HasPlayerFlag(BasePlayer.PlayerFlags.IsAdmin))
                {
                    player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, False);
                    player.SendNetworkUpdateImmediate();
                }

                ins.Puts("Error @{0}: {1} --- {2}", Enum.GetName(typeof(EntityType), entityType), ex.Message, ex.StackTrace);
                Message(player, ins.msg("Exception", player.UserIDString));

                switch (entityType)
                {
                    case EntityType.Active:
                        {
                            trackActive = False;
                        }
                        break;
                    case EntityType.Airdrops:
                        {
                            trackSupplyDrops = False;
                            cache.SupplyDrops.Clear();
                        }
                        break;
                    case EntityType.Animals:
                    case EntityType.Npc:
                    case EntityType.Zombies:
                        {
                            trackNPC = False;
                            showNPC = False;
                            uiBtnNPC = False;
                            cache.Animals.Clear();
                            cache.Zombies.Clear();
                            cache.NPCPlayers.Clear();
                        }
                        break;
                    case EntityType.Bags:
                        {
                            trackBags = False;
                            showBags = False;
                            uiBtnBags = False;
                            cache.Bags.Clear();
                        }
                        break;
                    case EntityType.Backpacks:
                        {
                            trackLoot = False;
                            showLoot = False;
                            uiBtnLoot = False;
                            cache.Backpacks.Clear();
                        }
                        break;
                    case EntityType.Bradley:
                        {
                            showBradley = False;
                            uiBtnBradley = False;
                            trackBradley = False;
                            cache.BradleyAPCs.Clear();
                        }
                        break;
                    case EntityType.Cars:
                        {
                            showCars = False;
                            uiBtnCars = False;
                            trackCars = False;
                            cache.Cars.Clear();
                        }
                        break;
                    case EntityType.CargoPlanes:
                        {
                            uiBtnCargoPlanes = False;
                            trackCargoPlanes = False;
                            showCargoPlanes = False;
                            cache.CargoPlanes.Clear();
                        }
                        break;
                    case EntityType.CargoShips:
                        {
                            trackCargoShips = False;
                            showCargoShips = False;
                            uiBtnCargoShips = False;
                            cache.CargoShips.Clear();
                        }
                        break;
                    case EntityType.CCTV:
                        {
                            trackCCTV = False;
                            showCCTV = False;
                            uiBtnCCTV = False;
                            cache.CCTV.Clear();
                        }
                        break;
                    case EntityType.CH47Helicopters:
                        {
                            showCH47 = False;
                            uiBtnCH47 = False;
                            trackCH47 = False;
                            cache.CH47.Clear();
                        }
                        break;
                    case EntityType.Containers:
                        {
                            showBox = False;
                            showLoot = False;
                            showStash = False;
                            uiBtnBox = False;
                            uiBtnLoot = False;
                            uiBtnStash = False;
                            trackBox = False;
                            trackLoot = False;
                            trackStash = False;
                            cache.Containers.Clear();
                        }
                        break;
                    case EntityType.Collectibles:
                        {
                            trackCollectibles = False;
                            showCollectible = False;
                            uiBtnCollectible = False;
                            cache.Collectibles.Clear();
                        }
                        break;
                    case EntityType.Cupboards:
                        {
                            trackTC = False;
                            showTC = False;
                            uiBtnTC = False;
                            cache.Cupboards.Clear();
                        }
                        break;
                    case EntityType.CupboardsArrow:
                        {
                            showTCArrow = False;
                            uiBtnTCArrow = False;
                        }
                        break;
                    case EntityType.Dead:
                        {
                            trackDead = False;
                            showDead = False;
                            uiBtnDead = False;
                            cache.Corpses.Clear();
                        }
                        break;
                    case EntityType.GroupLimit:
                        {
                            drawX = False;
                        }
                        break;
                    case EntityType.Heli:
                        {
                            showHeli = False;
                            uiBtnHeli = False;
                            trackHeli = False;
                            cache.Helicopters.Clear();
                        }
                        break;
                    case EntityType.MiniCopter:
                        {
                            showMiniCopter = False;
                            uiBtnMiniCopter = False;
                            trackMiniCopter = False;
                            cache.MiniCopter.Clear();
                        }
                        break;
                    case EntityType.Ore:
                        {
                            trackOre = False;
                            showOre = False;
                            uiBtnOre = False;
                            cache.Ores.Clear();
                        }
                        break;
                    case EntityType.RidableHorses:
                        {
                            showRidableHorses = False;
                            uiBtnRidableHorses = False;
                            trackRidableHorses = False;
                            cache.RidableHorse.Clear();
                        }
                        break;
                    case EntityType.RigidHullInflatableBoats:
                        {
                            showRHIB = False;
                            uiBtnRHIB = False;
                            trackRigidHullInflatableBoats = False;
                            cache.RHIB.Clear();
                        }
                        break;
                    case EntityType.Boats:
                        {
                            showBoats = False;
                            uiBtnBoats = False;
                            trackBoats = False;
                            cache.Boats.Clear();
                        }
                        break;
                    case EntityType.Sleepers:
                        {
                            trackSleepers = False;
                            showSleepers = False;
                            uiBtnSleepers = False;
                        }
                        break;
                    case EntityType.Source:
                        {
                            setSource = False;
                        }
                        break;
                    case EntityType.Turrets:
                        {
                            trackTurrets = False;
                            showTurrets = False;
                            uiBtnTurrets = False;
                            cache.Turrets.Clear();
                        }
                        break;
                }

                uiBtnNames = new string[0];
                uiButtons = null;
            }

            private Vector3 GetNearestCupboard(BasePlayer target)
            {
                var positions = new List<Vector3>();
                float distance = 0f;

                foreach (var tc in cache.Cupboards)
                {
                    if (tc.IsAuthed(target))
                    {
                        distance = (target.transform.position - tc.transform.position).magnitude;

                        if (distance >= 5f && distance <= tcArrowsDistance)
                        {
                            positions.Add(tc.transform.position);
                        }
                    }
                }

                if (positions.Count == 0)
                {
                    return Vector3.zero;
                }

                if (positions.Count > 1)
                {
                    positions.Sort((x, y) => ((x - target.transform.position).magnitude).CompareTo(((y - target.transform.position).magnitude)));
                }

                return positions[0];
            }

            private int GetAveragePing(BasePlayer target)
            {
                Ping ping;
                if (!pings.TryGetValue(target.userID, out ping))
                {
                    pings[target.userID] = ping = new Ping();
                }

                if (ping.Time == 0f || Time.realtimeSinceStartup - ping.Time >= averagePingInterval)
                {
                    ping.Time = Time.realtimeSinceStartup;
                    ping.AveragePing = Network.Net.sv.GetAveragePing(target.Connection);
                }

                return ping.AveragePing;
            }

            private bool IsLetters(string value)
            {
                if (string.IsNullOrEmpty(value))
                {
                    return False;
                }

                foreach (char c in value)
                {
                    if (!char.IsLetter(c))
                    {
                        return False;
                    }
                }

                return True;
            }

            private bool IsNumeric(string value)
            {
                if (string.IsNullOrEmpty(value))
                {
                    return False;
                }

                foreach (char c in value)
                {
                    if (!char.IsDigit(c))
                    {
                        return False;
                    }
                }

                return True;
            }

            private bool SetSource()
            {
                if (!setSource)
                {
                    source = player;
                    return True;
                }

                entityType = EntityType.Source;
                source = player;

                if (player.IsSpectating())
                {
                    var parentEntity = player.GetParentEntity();

                    if (parentEntity as BasePlayer != null)
                    {
                        var target = parentEntity as BasePlayer;

                        if (target.IsDead() && !target.IsConnected)
                            player.StopSpectating();
                        else source = parentEntity;
                    }
                }

                if (player == source && (player.IsDead() || player.IsSleeping() || player.HasPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot)))
                    return False;

                return True;
            }

            private void DrawVision(BasePlayer target)
            {
                RaycastHit hit;
                if (Physics.Raycast(target.eyes.HeadRay(), out hit, Mathf.Infinity))
                {
                    DrawArrow(Color.red, target.eyes.position + new Vector3(0f, 0.115f, 0f), hit.point, 0.15f, true);
                }
            }

            private void DrawArrow(Color color, Vector3 from, Vector3 to, float size, bool bypass)
            {
                if (drawArrows || bypass) player.SendConsoleCommand("ddraw.arrow", invokeTime + flickerDelay, color, from, to, size);
            }

            private void DrawText(Color color, Vector3 position, string text, bool @override = false)
            {
                if (drawText || @override) player.SendConsoleCommand("ddraw.text", invokeTime + flickerDelay, color, position, text);
            }

            private void DrawBox(Color color, Vector3 position, float size, bool @override = false)
            {
                if (drawBox || @override) player.SendConsoleCommand("ddraw.box", invokeTime + flickerDelay, color, position, size);
            }

            private int ShowActive()
            {
                if (!trackActive)
                    return checks;

                entityType = EntityType.Active;
                Color color;

                try
                {
                    foreach (var target in BasePlayer.activePlayerList)
                    {
                        if (target == null || target.transform == null || !target.IsConnected)
                        {
                            continue;
                        }

                        currDistance = (target.transform.position - source.transform.position).magnitude;

                        if (player == target || currDistance > maxDistance)
                        {
                            continue;
                        }

                        if (ins.permission.UserHasPermission(target.UserIDString, permBypass) && !canBypassOverride)
                        {
                            continue;
                        }

                        color = __(target.IsAlive() ? activeCC : activeDeadCC);
                        
                        if ((target.IsAdmin || ins.permission.UserHasPermission(target.UserIDString, "fauxadmin.allowed")) && canBypassOverride)
                        {
                            color = Color.magenta;
                        }

                        if (currDistance < playerDistance)
                        {
                            if (ins.storedData.Extended.Contains(player.UserIDString) && target.GetActiveItem() != null)
                            {
                                _cachedStringBuilder.Append(target.GetActiveItem().info.displayName.translated);
                                var itemList = target.GetActiveItem().contents?.itemList;

                                if (itemList?.Count > 0)
                                {
                                    _cachedStringBuilder.Append(" (");

                                    for (int index = 0; index < itemList.Count; index++)
                                    {
                                        _cachedStringBuilder.Append(itemList[index].info.displayName.translated);
                                        _cachedStringBuilder.Append("|");
                                    }

                                    _cachedStringBuilder.Replace("Weapon ", "");
                                    _cachedStringBuilder.Replace("Simple Handmade ", "");
                                    _cachedStringBuilder.Replace("Muzzle ", "");
                                    _cachedStringBuilder.Replace("4x Zoom Scope", "4x");
                                    _cachedStringBuilder.Append(")");
                                }
                            }

                            string vanished = ins.Vanish != null && ins.Vanish.Call<bool>("IsInvisible", target) ? "<color=#FF00FF>V</color>" : string.Empty;
                            string health = showHT && target.metabolism != null ? string.Format("{0} <color=#FFA500>{1}</color>:<color=#FFADD8E6>{2}</color>", Math.Floor(target.health), target.metabolism.calories.value.ToString("#0"), target.metabolism.hydration.value.ToString("#0")) : Math.Floor(target.health).ToString("#0");

                            if (averagePingInterval > 0)
                            {
                                _cachedStringBuilder.Append(" ");
                                _cachedStringBuilder.Append(GetAveragePing(target));
                                _cachedStringBuilder.Append("ms");
                            }

                            if (ins.storedData.Visions.Contains(player.UserIDString)) DrawVision(target);
                            DrawArrow(__(colorDrawArrows), target.transform.position + new Vector3(0f, target.transform.position.y + 10), target.transform.position, 1, false);
                            DrawText(color, target.transform.position + new Vector3(0f, 2f, 0f), string.Format("{0} <color={1}>{2}</color> <color={3}>{4}</color>{5} {6}", ins.RemoveFormatting(target.displayName) ?? target.userID.ToString(), healthCC, health, distCC, currDistance.ToString("0"), vanished, _cachedStringBuilder.ToString()));
                            DrawBox(color, target.transform.position + new Vector3(0f, 1f, 0f), target.GetHeight(target.modelState.ducked));
                            if (ins.voices.ContainsKey(target.userID) && (target.transform.position - player.transform.position).magnitude <= voiceDistance)
                            {
                                DrawArrow(Color.yellow, target.transform.position + new Vector3(0f, 5f, 0f), target.transform.position + new Vector3(0f, 2.5f, 0f), 0.5f, true);
                            }
                            ShowCupboardArrows(target, EntityType.Active);
                        }
                        else if (drawX)
                            distantPlayers.Add(target);
                        else
                            DrawBox(color, target.transform.position + new Vector3(0f, 1f, 0f), 5f, true);

                        checks++;
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowSleepers()
            {
                if (!showSleepers || !trackSleepers)
                    return checks;

                entityType = EntityType.Sleepers;
                Color color;

                try
                {
                    foreach (var sleeper in BasePlayer.sleepingPlayerList)
                    {
                        if (sleeper == null || sleeper.transform == null)
                            continue;

                        currDistance = (sleeper.transform.position - source.transform.position).magnitude;

                        if (currDistance > maxDistance)
                            continue;

                        if (currDistance < playerDistance)
                        {
                            string health = showHT && sleeper.metabolism != null ? string.Format("{0} <color=#FFA500>{1}</color>:<color=#FFADD8E6>{2}</color>", Math.Floor(sleeper.health), sleeper.metabolism.calories.value.ToString("#0"), sleeper.metabolism.hydration.value.ToString("#0")) : Math.Floor(sleeper.health).ToString("#0");
                            color = __(sleeper.IsAlive() ? sleeperCC : sleeperDeadCC);

                            DrawArrow(__(colorDrawArrows), sleeper.transform.position + new Vector3(0f, sleeper.transform.position.y + 10), sleeper.transform.position, 1, false);
                            DrawText(color, sleeper.transform.position, string.Format("{0} <color={1}>{2}</color> <color={3}>{4}</color>", ins.RemoveFormatting(sleeper.displayName) ?? sleeper.userID.ToString(), healthCC, health, distCC, currDistance.ToString("0")));
                            DrawText(color, sleeper.transform.position + new Vector3(0f, 1f, 0f), "X", drawX);
                            if (!drawX && drawBox) DrawBox(color, sleeper.transform.position, GetScale(currDistance));
                            ShowCupboardArrows(sleeper, EntityType.Sleepers);
                        }
                        else DrawBox(Color.cyan, sleeper.transform.position + new Vector3(0f, 1f, 0f), 5f, true);

                        checks++;
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private void ShowCupboardArrows(BasePlayer target, EntityType lastType)
            {
                try
                {
                    if (showTCArrow && uiBtnTCArrow && uiBtnTC)
                    {
                        entityType = EntityType.CupboardsArrow;
                        var nearest = GetNearestCupboard(target);

                        if (nearest != Vector3.zero)
                        {
                            DrawArrow(__(tcCC), target.transform.position + new Vector3(0f, 0.115f, 0f), nearest, 0.25f, true);
                        }

                        entityType = lastType;
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }
            }

            private int ShowHeli()
            {
                if (!showHeli || (!trackHeli && !uiBtnHeli))
                    return checks;

                entityType = EntityType.Heli;

                try
                {
                    if (cache.Helicopters.Count > 0)
                    {
                        foreach (var heli in cache.Helicopters)
                        {
                            if (heli == null || heli.transform == null || heli.IsDestroyed)
                                continue;

                            currDistance = (heli.transform.position - source.transform.position).magnitude;
                            string heliHealth = heli.health > 1000 ? Math.Floor(heli.health).ToString("#,##0,K", CultureInfo.InvariantCulture) : Math.Floor(heli.health).ToString("#0");
                            string info = showHeliRotorHealth ? string.Format("<color={0}>{1}</color> (<color=#FFFF00>{2}</color>/<color=#FFFF00>{3}</color>)", healthCC, heliHealth, Math.Floor(heli.weakspots[0].health), Math.Floor(heli.weakspots[1].health)) : string.Format("<color={0}>{1}</color>", healthCC, heliHealth);

                            DrawText(__(heliCC), heli.transform.position + new Vector3(0f, 2f, 0f), string.Format("H {0} <color={1}>{2}</color>", info, distCC, currDistance.ToString("0")));
                            DrawBox(__(heliCC), heli.transform.position + new Vector3(0f, 1f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowBradley()
            {
                if (!showBradley || (!uiBtnBradley && !trackBradley))
                    return checks;

                entityType = EntityType.Bradley;

                try
                {
                    if (cache.BradleyAPCs.Count > 0)
                    {
                        foreach (var bradley in cache.BradleyAPCs)
                        {
                            if (bradley == null || bradley.transform == null || bradley.IsDestroyed)
                                continue;

                            currDistance = (bradley.transform.position - source.transform.position).magnitude;
                            string info = string.Format("<color={0}>{1}</color>", healthCC, bradley.health > 1000 ? Math.Floor(bradley.health).ToString("#,##0,K", CultureInfo.InvariantCulture) : Math.Floor(bradley.health).ToString());

                            DrawText(__(bradleyCC), bradley.transform.position + new Vector3(0f, 2f, 0f), string.Format("B {0} <color={1}>{2}</color>", info, distCC, currDistance.ToString("0")));
                            DrawBox(__(bradleyCC), bradley.transform.position + new Vector3(0f, 1f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowLimits()
            {
                entityType = EntityType.GroupLimit;

                if (!drawX)
                {
                    return checks;
                }

                try
                {
                    distantPlayers.RemoveAll(p => p == null || p.transform == null);
                    checks++;

                    if (distantPlayers.Count == 0)
                    {
                        return checks;
                    }

                    limitIndex = 0;
                    limitFlag = False;

                    foreach (var p in distantPlayers)
                    {
                        nearbyPlayers.Clear();

                        for (int j = 0; j < distantPlayers.Count; j++)
                        {
                            if ((distantPlayers[j].transform.position - p.transform.position).magnitude < groupRange)
                            {
                                limitFlag = False;

                                for (int i = 0; i < groupedPlayers.Values.Count; i++)
                                {
                                    if (groupedPlayers[i].Contains(distantPlayers[j]))
                                    {
                                        limitFlag = True;
                                        break;
                                    }
                                }

                                if (!limitFlag)
                                {
                                    nearbyPlayers.Add(distantPlayers[j]);
                                }

                            }
                        }

                        if (nearbyPlayers.Count > groupLimit)
                        {
                            while (groupedPlayers.ContainsKey(limitIndex)) limitIndex++;
                            groupedPlayers.Add(limitIndex, nearbyPlayers.ToList());
                            removePlayers.AddRange(nearbyPlayers);
                        }
                    }

                    distantPlayers.RemoveAll(player => removePlayers.Contains(player));

                    for (int j = 0; j < distantPlayers.Count; j++)
                    {
                        DrawText(distantPlayers[j].IsAlive() ? Color.green : Color.red, distantPlayers[j].transform.position + new Vector3(0f, 1f, 0f), "X", true);
                        checks++;
                    }

                    for (int j = 0; j < groupedPlayers.Count; j++)
                    {
                        for (int k = 0; k < groupedPlayers[j].Count; k++)
                        {
                            if (groupCountHeight != 0f && k == 0)
                            {
                                DrawText(Color.magenta, groupedPlayers[j][k].transform.position + new Vector3(0f, groupCountHeight, 0f), groupedPlayers[j].Count.ToString(), true);
                            }

                            DrawText(__(groupedPlayers[j][k].IsAlive() ? GetGroupColor(j) : groupColorDead), groupedPlayers[j][k].transform.position + new Vector3(0f, 1f, 0f), "X", true);
                            checks++;
                        }
                    }

                    nearbyPlayers.Clear();
                    groupedPlayers.Clear();
                    distantPlayers.Clear();
                    removePlayers.Clear();
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowTC()
            {
                if (!showTC || !trackTC)
                    return checks;

                entityType = EntityType.Cupboards;
                int bags;
                float time;

                try
                {
                    foreach (var tc in cache.Cupboards)
                    {
                        if (tc == null || tc.transform == null || tc.IsDestroyed)
                        {
                            tcs.Remove(tc);
                            continue;
                        }

                        currDistance = (tc.transform.position - source.transform.position).magnitude;

                        if (currDistance < tcDistance && currDistance < maxDistance)
                        {
                            if (drawText)
                            {
                                bags = 0;

                                if (showTCBagCount)
                                {
                                    var building = tc.GetBuilding();

                                    if (building != null)
                                    {
                                        foreach (var entity in building.decayEntities)
                                        {
                                            if (entity is SleepingBag)
                                            {
                                                bags++;
                                            }
                                        }
                                    }
                                }

                                if (!tcs.ContainsKey(tc))
                                {
                                    tcs.Add(tc, new PrivInfo());
                                }

                                time = Time.realtimeSinceStartup;

                                if (tcs[tc].LastTime == float.MaxValue || time - tcs[tc].LastTime > 60)
                                {
                                    tcs[tc].ProtectedMinutes = tc.GetProtectedMinutes();
                                    tcs[tc].LastTime = time;
                                }

                                string text = string.Empty;

                                if (bags > 0 && showTCAuthedCount) text = string.Format("TC <color={0}>{1}</color> <color={2}>{3}</color> <color={4}>{5}</color> <color={0}>{6}</color>", distCC, currDistance, bagCC, bags, tcCC, tc.authorizedPlayers.Count, tcs[tc].ProtectedMinutes);
                                else if (bags > 0) text = string.Format("TC <color={0}>{1}</color> <color={2}>{3}</color> <color={0}>{4}</color>", distCC, currDistance, bagCC, bags, tcs[tc].ProtectedMinutes);
                                else if (showTCAuthedCount) text = string.Format("TC <color={0}>{1}</color> <color={2}>{3}</color> <color={0}>{4}</color>", distCC, currDistance, tcCC, tc.authorizedPlayers.Count, tcs[tc].ProtectedMinutes);
                                else text = string.Format("TC <color={0}>{1} {2}</color>", distCC, currDistance, tcs[tc].ProtectedMinutes);

                                DrawText(__(tcCC), tc.transform.position + new Vector3(0f, 0.5f, 0f), text, true);
                            }

                            DrawBox(__(tcCC), tc.transform.position + new Vector3(0f, 0.5f, 0f), 3f);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowContainers()
            {
                if (!showBox && !showLoot && !showStash)
                {
                    return checks;
                }

                bool isBox;
                bool isLoot;

                try
                {
                    if (showLoot)
                    {
                        entityType = EntityType.Backpacks;

                        foreach (var backpack in cache.Backpacks)
                        {
                            if (backpack == null || backpack.transform == null || backpack.IsDestroyed)
                                continue;

                            currDistance = (backpack.transform.position - source.transform.position).magnitude;

                            if (currDistance > maxDistance || currDistance > lootDistance)
                                continue;

                            DrawText(__(backpackCC), backpack.transform.position + new Vector3(0f, 0.5f, 0f), string.Format("{0} {1}<color={2}>{3}</color>", string.IsNullOrEmpty(backpack._playerName) ? ins.msg("backpack", player.UserIDString) : backpack._playerName, GetContents(backpack), distCC, currDistance.ToString("0")));
                            DrawBox(__(backpackCC), backpack.transform.position + new Vector3(0f, 0.5f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }

                    if (showBox && trackSupplyDrops)
                    {
                        entityType = EntityType.Airdrops;

                        foreach (var drop in cache.SupplyDrops)
                        {
                            if (drop == null || drop.transform == null || drop.IsDestroyed)
                                continue;

                            currDistance = (drop.transform.position - source.transform.position).magnitude;

                            if (currDistance > maxDistance || currDistance > adDistance)
                                continue;

                            string text = showAirdropContents && drop.inventory.itemList.Count > 0 ? GetContents(drop.inventory.itemList) : string.Format("({0}) ", drop.inventory.itemList.Count);
                            
                            DrawText(__(airdropCC), drop.transform.position + new Vector3(0f, 0.5f, 0f), string.Format("{0} {1}<color={2}>{3}</color>", ins._(drop.ShortPrefabName), text, distCC, currDistance.ToString("0"), lootCC));
                            DrawBox(__(airdropCC), drop.transform.position + new Vector3(0f, 0.5f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }

                    entityType = EntityType.Containers;

                    foreach (var container in cache.Containers)
                    {
                        if (container == null || container.transform == null || container.IsDestroyed)
                            continue;

                        currDistance = (container.transform.position - source.transform.position).magnitude;

                        if (currDistance > maxDistance)
                            continue;

                        isBox = IsBox(container.ShortPrefabName);
                        isLoot = IsLoot(container.ShortPrefabName);

                        if (container is StashContainer)
                        {
                            if (!showStash || currDistance > stashDistance || !trackStash)
                                continue;
                        }
                        else if (isBox)
                        {
                            if (!showBox || currDistance > boxDistance || !trackBox)
                                continue;
                        }
                        else if (isLoot)
                        {
                            if (!showLoot || currDistance > lootDistance || !trackLoot)
                                continue;
                        }

                        string colorHex = container is LockedByEntCrate ? heliCC : isBox ? boxCC : isLoot ? lootCC : stashCC;
                        
                        if (ins.storedData.OnlineBoxes.Contains(player.UserIDString) && container.OwnerID.IsSteamId() && (container.name.Contains("box") || container.name.Contains("coffin")))
                        {
                            var owner = BasePlayer.FindByID(container.OwnerID);

                            if (owner == null || !owner.IsConnected)
                            {
                                continue;
                            }
                        }

                        string text = container.inventory?.itemList?.Count > 0 ? (isLoot && showLootContents || container is StashContainer && showStashContents ? GetContents(container.inventory.itemList) : string.Format("({0}) ", container.inventory.itemList.Count)) : string.Empty;

                        if (text.Length == 0 && !drawEmptyContainers) continue;

                        string shortname = ins._(container.ShortPrefabName).Replace("coffinstorage", "coffin");
                        DrawText(__(colorHex), container.transform.position + new Vector3(0f, 0.5f, 0f), string.Format("{0} {1}<color={2}>{3}</color>", shortname, text, distCC, currDistance.ToString("0")));
                        DrawBox(__(colorHex), container.transform.position + new Vector3(0f, 0.5f, 0f), GetScale(currDistance));
                        checks++;
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowBags()
            {
                if (!showBags || !trackBags)
                    return checks;

                entityType = EntityType.Bags;

                try
                {
                    foreach (var bag in cache.Bags)
                    {
                        currDistance = (bag.Key - source.transform.position).magnitude;

                        if (currDistance < bagDistance && currDistance < maxDistance)
                        {
                            DrawText(__(bagCC), bag.Key, string.Format("bag <color={0}>{1}</color>", distCC, currDistance.ToString("0")));
                            DrawBox(__(bagCC), bag.Key, bag.Value.Size);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowTurrets()
            {
                if (!showTurrets || !trackTurrets)
                    return checks;

                entityType = EntityType.Turrets;

                try
                {
                    foreach (var turret in cache.Turrets)
                    {
                        currDistance = (turret.transform.position - source.transform.position).magnitude;

                        if (currDistance < turretDistance && currDistance < maxDistance)
                        {
                            DrawText(__(atCC), turret.transform.position + new Vector3(0f, 0.5f, 0f), string.Format("AT ({0}) <color={1}>{2}</color>", turret.inventory?.itemList?.Count ?? -1, distCC, currDistance.ToString("0")));
                            DrawBox(__(atCC), turret.transform.position + new Vector3(0f, 0.5f, 0f), 1f);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowDead()
            {
                if (!showDead || !trackDead)
                    return checks;

                entityType = EntityType.Dead;

                try
                {
                    foreach (var corpse in cache.Corpses)
                    {
                        if (corpse.Key == null || corpse.Key.transform == null || corpse.Key.IsDestroyed)
                            continue;

                        currDistance = (corpse.Key.transform.position - source.transform.position).magnitude;

                        if (currDistance < corpseDistance && currDistance < maxDistance)
                        {
                            DrawText(__(corpseCC), corpse.Key.transform.position + new Vector3(0f, 0.25f, 0f), string.Format("{0} ({1})", corpse.Value.Name, corpse.Value.Info));
                            DrawBox(__(corpseCC), corpse.Key.transform.position, GetScale(currDistance));
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowNPC()
            {
                if (!showNPC || !trackNPC)
                    return checks;

                entityType = EntityType.Zombies;

                try
                {
                    float j, k = TerrainMeta.HeightMap.GetHeight(source.transform.position);

                    foreach (var zombie in cache.Zombies)
                    {
                        if (zombie == null || zombie.transform == null || zombie.IsDestroyed)
                            continue;

                        currDistance = (zombie.transform.position - source.transform.position).magnitude;

                        if (currDistance > maxDistance)
                            continue;

                        if (currDistance < playerDistance)
                        {
                            DrawArrow(__(zombieCC), zombie.transform.position + new Vector3(0f, zombie.transform.position.y + 10), zombie.transform.position, 1, false);
                            DrawText(__(zombieCC), zombie.transform.position + new Vector3(0f, 2f, 0f), string.Format("{0} <color={1}>{2}</color> <color={3}>{4}</color>", ins.msg("Zombie", player.UserIDString), healthCC, Math.Floor(zombie.health), distCC, currDistance.ToString("0")));
                            DrawBox(__(zombieCC), zombie.transform.position + new Vector3(0f, 1f, 0f), GetScale(currDistance));
                        }
                        else DrawBox(__(zombieCC), zombie.transform.position + new Vector3(0f, 1f, 0f), 5f, true);

                        checks++;
                    }

                    entityType = EntityType.Npc;

                    foreach (var target in cache.NPCPlayers)
                    {
                        if (target == null || target.transform == null || target.IsDestroyed)
                            continue;

                        currDistance = (target.transform.position - source.transform.position).magnitude;

#if DEBUG
                        if (currDistance > maxDistance) distantPlayers.Add(target);
#endif

                        if (player == target || currDistance > maxDistance)
                            continue;

                        if (skipUnderworld)
                        {
                            j = TerrainMeta.HeightMap.GetHeight(target.transform.position);

                            if (j > target.transform.position.y)
                            {
                                if (source.transform.position.y > k)
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                if (source.transform.position.y < k)
                                {
                                    continue;
                                }
                            }
                        }

                        string npcColor = target is HTNPlayer ? htnscientistCC : target.ShortPrefabName.Contains("peacekeeper") ? peacekeeperCC : target.name.Contains("scientist") ? scientistCC : target.ShortPrefabName == "murderer" ? murdererCC : npcCC;

                        if (currDistance < npcPlayerDistance)
                        {
                            string displayName = !string.IsNullOrEmpty(target.displayName) && IsLetters(target.displayName) ? target.displayName : target.ShortPrefabName == "scarecrow" ? ins.msg("scarecrow", player.UserIDString) : target.PrefabName.Contains("scientist") ? ins.msg("scientist", player.UserIDString) : target is NPCMurderer ? ins.msg("murderer", player.UserIDString) : ins.msg("npc", player.UserIDString);
#if DEBUG
                            displayName = target is HTNPlayer ? "htn" : target is NPCMurderer ? "murderer" : target is Scientist ? "scientist" : target.ShortPrefabName;
#endif
                            DrawArrow(__(npcColor), target.transform.position + new Vector3(0f, target.transform.position.y + 10), target.transform.position, 1, false);
                            DrawText(__(npcColor), target.transform.position + new Vector3(0f, 2f, 0f), string.Format("{0} <color={1}>{2}</color> <color={3}>{4}</color>", displayName, healthCC, Math.Floor(target.health), distCC, currDistance.ToString("0")));
                            DrawBox(__(npcColor), target.transform.position + new Vector3(0f, 1f, 0f), target.GetHeight(target.modelState.ducked));
                        }
                        else DrawBox(__(npcColor), target.transform.position + new Vector3(0f, 1f, 0f), 5f, true);

                        checks++;
                    }

                    entityType = EntityType.Animals;
                    foreach (var npc in cache.Animals)
                    {
                        if (npc == null || npc.transform == null || npc.IsDestroyed)
                            continue;

                        currDistance = (npc.transform.position - source.transform.position).magnitude;

                        if (currDistance < npcDistance && currDistance < maxDistance)
                        {
                            DrawText(__(npcCC), npc.transform.position + new Vector3(0f, 1f, 0f), string.Format("{0} <color={1}>{2}</color> <color={3}>{4}</color>", npc.ShortPrefabName, healthCC, Math.Floor(npc.health), distCC, currDistance.ToString("0")));
                            DrawBox(__(npcCC), npc.transform.position + new Vector3(0f, 1f, 0f), npc.bounds.size.y);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowOre()
            {
                if (!showOre || !trackOre)
                    return checks;

                entityType = EntityType.Ore;

                try
                {
                    foreach (var ore in cache.Ores)
                    {
                        currDistance = (ore.Key - source.transform.position).magnitude;

                        if (currDistance < oreDistance && currDistance < maxDistance)
                        {
                            string info = showResourceAmounts ? string.Format("({0})", ore.Value.Info) : string.Format("<color={0}>{1}</color>", distCC, currDistance.ToString("0"));
                            DrawText(__(resourceCC), ore.Key + new Vector3(0f, 1f, 0f), string.Format("{0} {1}", ore.Value.Name, info));
                            DrawBox(__(resourceCC), ore.Key + new Vector3(0f, 1f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowCCTV()
            {
                if (!showCCTV || !trackCCTV)
                    return checks;

                entityType = EntityType.CCTV;

                try
                {
                    foreach (var cctv in cache.CCTV)
                    {
                        currDistance = (cctv.transform.position - source.transform.position).magnitude;

                        if (currDistance < cctvDistance && currDistance < maxDistance)
                        {
                            string info = string.Format("<color={0}>{1}</color> {2}", distCC, currDistance.ToString("0"), cctv.numViewers);
                            var color = cctv.HasFlag(BaseEntity.Flags.Reserved5) ? Color.green : cctv.CanControl() ? Color.cyan : Color.red;
                            DrawText(color, cctv.transform.position + new Vector3(0f, 0.3f, 0f), string.Format("CCTV {0}", info));
                            DrawBox(color, cctv.transform.position, 0.25f);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowCollectables()
            {
                if (!showCollectible || !trackCollectibles)
                    return checks;

                entityType = EntityType.Collectibles;

                try
                {
                    foreach (var col in cache.Collectibles)
                    {
                        currDistance = (col.Key - source.transform.position).magnitude;

                        if (currDistance < colDistance && currDistance < maxDistance)
                        {
                            string info = showResourceAmounts ? string.Format("({0})", col.Value.Info) : string.Format("<color={0}>{1}</color>", distCC, currDistance.ToString("0"));
                            DrawText(__(colCC), col.Key + new Vector3(0f, 1f, 0f), string.Format("{0} {1}", ins._(col.Value.Name), info));
                            DrawBox(__(colCC), col.Key + new Vector3(0f, 1f, 0f), col.Value.Size);
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private int ShowEntity(EntityType entityType, bool track, string entityName, List<BaseEntity> entities)
            {
                if (!track)
                    return checks;

                this.entityType = entityType;

                try
                {
                    if (entities.Count > 0)
                    {
                        foreach (var e in entities)
                        {
                            if (e == null || e.transform == null || e.IsDestroyed)
                                continue;

                            currDistance = (e.transform.position - source.transform.position).magnitude;

                            if (entityType == EntityType.Boats)
                            {
                                if (currDistance > boatDistance) continue;
                                if (!trackBoats && !uiBtnBoats) continue;
                            }
                            else if (entityType == EntityType.RigidHullInflatableBoats)
                            {
                                if (currDistance > boatDistance) continue;
                                if (!trackRigidHullInflatableBoats && !uiBtnRHIB) continue;
                            }
                            else if (entityType == EntityType.Cars)
                            {
                                if (currDistance > carDistance) continue;
                                if (!trackCars && !uiBtnCars) continue;
                            }
                            else if (entityType == EntityType.MiniCopter)
                            {
                                if (currDistance > mcDistance) continue;
                                if (!trackMiniCopter && !uiBtnMiniCopter) continue;
                            }
                            else if (entityType == EntityType.RidableHorses)
                            {
                                if (currDistance > rhDistance) continue;
                                if (!trackRidableHorses && !uiBtnRidableHorses) continue;
                            }
                            else if (entityType == EntityType.CH47Helicopters && !trackCH47 && !uiBtnCH47) continue;

                            if (e is ScrapTransportHelicopter) entityName = "STH";
                            string info = e.Health() <= 0 ? entityName : string.Format("{0} <color={1}>{2}</color>", entityName, healthCC, e.Health() > 1000 ? Math.Floor(e.Health()).ToString("#,##0,K", CultureInfo.InvariantCulture) : Math.Floor(e.Health()).ToString("#0"));
                            Color color = e is ScrapTransportHelicopter ? __(scrapCC) : e is MiniCopter ? __(miniCC) : e is ModularCar ? Color.magenta : __(bradleyCC);
                            
                            DrawText(color, e.transform.position + new Vector3(0f, 2f, 0f), string.Format("{0} <color={1}>{2}</color>", info, distCC, currDistance.ToString("0")));
                            DrawBox(color, e.transform.position + new Vector3(0f, 1f, 0f), GetScale(currDistance));
                            checks++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex);
                }

                return checks;
            }

            private string GetContents(List<Item> itemList)
            {
                _cachedStringBuilder.Append("(");
                
                for (int index = 0; index < itemList.Count; index++)
                {   
                    var item = itemList[index];
                    
                    _cachedStringBuilder.Append(item.info.displayName.english);
                    _cachedStringBuilder.Append(" ");
                    _cachedStringBuilder.Append("(");
                    _cachedStringBuilder.Append(item.amount);
                    _cachedStringBuilder.Append("), ");
                }

                _cachedStringBuilder.TrimEnd(2);
                _cachedStringBuilder.Append(") ");

                return _cachedStringBuilder.ToString();
            }

            public static string GetContents(ItemContainer[] containers)
            {
                if (containers == null)
                {
                    return string.Empty;
                }

                var list = new List<string>();
                int count = 0;
                int amount = 0;

                foreach (var container in containers)
                {
                    if (container == null || container.itemList == null) continue;

                    count += container.itemList.Count;

                    foreach (var item in container.itemList)
                    {
                        list.Add(string.Format("{0} ({1})", item.info.displayName.translated.ToLower(), item.amount));

                        if (++amount >= corpseContentAmount)
                        {
                            break;
                        }
                    }
                }

                if (corpseContentAmount > 0 && list.Count > 0)
                {
                    return string.Format("{0} ({1})", string.Join(", ", list.ToArray()), count.ToString());
                }

                return count.ToString();
            }

            public static string GetContents(DroppedItemContainer backpack)
            {
                if (backpack?.inventory?.itemList == null)
                {
                    return string.Empty;
                }

                if (backpackContentAmount > 0 && backpack.inventory.itemList.Count > 0)
                {
                    var list = new List<string>();
                    int amount = 0;

                    foreach (var item in backpack.inventory.itemList)
                    {
                        list.Add(string.Format("{0} ({1})", item.info.displayName.translated.ToLower(), item.amount));

                        if (++amount >= backpackContentAmount)
                        {
                            break;
                        }
                    }

                    return string.Format("({0}) ({1}) ", string.Join(", ", list.ToArray()), backpack.inventory.itemList.Count.ToString());
                }

                return backpack.inventory.itemList.Count.ToString();
            }

            private static float GetScale(float value)
            {
                return value * 0.02f;
            }
        }

        private bool IsRadar(string id)
        {
            foreach (var radar in activeRadars)
            {
                if (radar.player.UserIDString == id)
                {
                    return True;
                }
            }

            return False;
        }

        private void Init()
        {
            startupTime = Time.realtimeSinceStartup;
            ins = this;
            _cachedStringBuilder = new CachedStringBuilder();
            Unsubscribe(nameof(OnEntityTakeDamage));
            Unsubscribe(nameof(OnEntityDeath));
            Unsubscribe(nameof(OnEntityKill));
            Unsubscribe(nameof(OnEntitySpawned));
            Unsubscribe(nameof(OnPlayerDisconnected));
            Unsubscribe(nameof(OnPlayerVoice));
            Unsubscribe(nameof(OnPlayerConnected));
            Unsubscribe(nameof(OnPlayerSleepEnded));
            permission.RegisterPermission(permAllowed, this);
            permission.RegisterPermission(permBypass, this);
            permission.RegisterPermission(permAuto, this);
            permission.RegisterPermission(permBypassOverride, this);
            permission.RegisterPermission(permList, this);
        }

        private void Loaded()
        {
            isUnloading = False;
        }

        private void OnServerInitialized()
        {
            try
            {
                storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);
            }
            catch { }

            if (storedData == null)
                storedData = new StoredData();

            LoadVariables();

            if (!drawBox && !drawText && !drawArrows)
            {
                Puts("Configuration does not have a chosen drawing method. Setting drawing method to text.");
                Config.Set("Drawing Methods", "Draw Text", True);
                Config.Save();
                drawText = True;
            }

            if (useVoiceDetection)
            {
                Subscribe(nameof(OnPlayerVoice));
            }

            Subscribe(nameof(OnPlayerDisconnected));
            Subscribe(nameof(OnPlayerConnected));

            init = True;

            if (barebonesMode)
            {
                return;
            }

            Subscribe(nameof(OnEntityDeath));
            Subscribe(nameof(OnEntityKill));
            Subscribe(nameof(OnEntitySpawned));
            Subscribe(nameof(OnPlayerSleepEnded));

            coroutine = ServerMgr.Instance.StartCoroutine(FillCache());

            foreach (var player in BasePlayer.activePlayerList)
            {
                if (storedData.Active.Contains(player.UserIDString))
                {
                    RadarCommandX(player, "radar", storedData.Filters.ContainsKey(player.UserIDString) ? storedData.Filters[player.UserIDString].ToArray() : new string[0]);
                }
            }
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            accessList.RemoveAll(p => p == null || p == player || !p.IsConnected);

            if (player.IsAdmin || HasAccess(player))
            {
                accessList.Add(player);
            }
        }

        private void OnPlayerSleepEnded(BasePlayer player)
        {
            if (!HasAccess(player))
            {
                return;
            }

            if (player.IsValid() && player.IsConnected && player.GetComponent<Radar>() == null && permission.UserHasPermission(player.UserIDString, permAuto))
            {
                RadarCommandX(player, "radar", new string[0]);
            }

            if (showUI && !barebonesMode)
            {
                if (radarUI.Contains(player.UserIDString))
                {
                    DestroyUI(player);
                }

                if (!storedData.Hidden.Contains(player.UserIDString))
                {
                    var radar = activeRadars.FirstOrDefault(x => x.player == player);

                    if (radar == null)
                    {
                        return;
                    }

                    CreateUI(player, radar, radar.showAll);
                }
            }
        }

        void OnPlayerVoice(BasePlayer player, Byte[] data)
        {
            ulong userId = player.userID;

            if (voices.ContainsKey(userId))
                voices[userId].Reset();
            else voices.Add(userId, timer.Once(VoiceDelay, () => voices.Remove(userId)));
        }

        float VoiceDelay
        {
            get
            {
                float delay = defaultInvokeTime;

                foreach (var radar in activeRadars)
                {
                    delay = Mathf.Max(radar.invokeTime, delay);
                }

                return voiceInterval + delay + flickerDelay;
            }
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (useVoiceDetection && voices.ContainsKey(player.userID))
            {
                voices[player.userID]?.Destroy();
                voices.Remove(player.userID);
            }

            accessList.RemoveAll(p => p == null || p == player || !p.IsConnected);
        }

        private void Unload()
        {
            isUnloading = True;
            StopFillCache();
            Interface.Oxide.DataFileSystem.WriteObject(Name, storedData);

            foreach (var radar in activeRadars)
            {
                radar.StopAll();
            }

            cache.Clear();
            DestroyAll<Radar>();
            playersColor.Clear();
            tags.Clear();
            voices.Clear();
            activeRadars.Clear();
            uiBtnNames = new string[0];
            authorized.Clear();
            itemExceptions.Clear();
            groupColors.Clear();
            cooldowns.Clear();
            Coroutines.Clear();
            ins = null;
            _cachedStringBuilder = null;
        }

        void DestroyAll<T>()
        {
            var objects = UnityEngine.Object.FindObjectsOfType(typeof(T));

            if (objects != null)
            {
                foreach (var gameObj in objects)
                {
                    UnityEngine.Object.Destroy(gameObj);
                }
            }
        }

        private object BlockDamage(HitInfo hitInfo, BasePlayer player, bool flag, string key)
        {
            if (!flag)
            {
                return null;
            }

            if (!warnings.Contains(player.UserIDString))
            {
                string playerId = player.UserIDString;

                warnings.Add(playerId);
                Message(player, msg(key, playerId));
                timer.Once(5f, () => warnings.Remove(playerId));
            }

            hitInfo.damageTypes = new DamageTypeList();
            hitInfo.DidHit = False;
            hitInfo.HitEntity = null;
            hitInfo.Initiator = null;
            hitInfo.DoHitEffects = False;
            hitInfo.HitMaterial = 0;

            return True;
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
        {
            if (!entity.IsValid() || hitInfo == null)
            {
                return null;
            }

            var attacker = hitInfo?.Initiator as BasePlayer;

            if (!attacker || !IsRadar(attacker.UserIDString) || !attacker.IsConnected)
            {
                return null;
            }

            if (entity is BaseNpc)
            {
                return BlockDamage(hitInfo, attacker, blockDamageAnimals, "CantHurtAnimals");
            }
            else if (entity is BuildingBlock)
            {
                return BlockDamage(hitInfo, attacker, blockDamageBuildings, "CantDamageBuilds");
            }
            else if (entity is BasePlayer)
            {
                return BlockDamage(hitInfo, attacker, blockDamagePlayers && entity.ToPlayer().userID.IsSteamId(), "CantHurtPlayers");
            }
            else if (entity.IsNpc)
            {
                return BlockDamage(hitInfo, attacker, blockDamageNpcs, "CantHurtNpcs");
            }
            else if (blockDamageOther)
            {
                return BlockDamage(hitInfo, attacker, blockDamageOther, "CantHurtOther");
            }

            return null;
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            RemoveFromCache(entity as BaseEntity);
        }

        private void OnEntityKill(BaseNetworkable entity)
        {
            RemoveFromCache(entity as BaseEntity);
        }

        private void OnEntitySpawned(BaseNetworkable entity)
        {
            AddToCache(entity as BaseEntity);
        }

        private static bool IsHex(string value)
        {
            foreach (char c in value)
            {
                if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')))
                {
                    return False;
                }
            }

            return True;
        }

        private static Color __(string value)
        {
            Color color;
            if (!ColorUtility.TryParseHtmlString(IsHex(value) ? "#" + value : value, out color))
            {
                color = Color.white;
            }

            return color;
        }

        StringBuilder sb;

        private string _(string value)
        {
            sb = new StringBuilder(value);

            foreach (string str in tags)
            {
                sb.Replace(str, string.Empty);
            }

            return sb.ToString();
        }

        private void StopFillCache()
        {
            if (coroutine != null)
            {
                ServerMgr.Instance.StopCoroutine(coroutine);
            }
        }

        private static WaitForEndOfFrame _cachedWaitForEndOfFrame = new WaitForEndOfFrame(); // 4.8.0 Credits @hoppel
        private IEnumerator FillCache()
        {
            var tick = DateTime.Now;
            int cached = 0, total = 0;

            foreach (var e in BaseNetworkable.serverEntities)
            {
                if (AddToCache(e as BaseEntity))
                {
                    cached++;
                }

                if (++total % 50 == 0)
                {
                    yield return _cachedWaitForEndOfFrame;
                }
            }

            Puts("Cached {0}/{1} entities in {2} seconds!", cached, total, (DateTime.Now - tick).TotalSeconds);
            coroutine = null;
        }

        private bool AddToCache(BaseEntity entity)
        {
            if (entity == null || entity.transform == null || entity.IsDestroyed)
                return False;

            var position = entity.transform.position;

            if (trackNPC && entity.IsNpc)
            {
                if (trackRidableHorses && entity is RidableHorse)
                {
                    if (!cache.RidableHorse.Contains(entity))
                    {
                        cache.RidableHorse.Add(entity);
                        return True;
                    }
                }
                else if (entity is BaseNpc && !cache.Animals.Contains(entity as BaseNpc))
                {
                    cache.Animals.Add(entity as BaseNpc);
                    return True;
                }
                else if (entity is BasePlayer && !cache.NPCPlayers.Contains(entity as BasePlayer))
                {
                    cache.NPCPlayers.Add(entity as BasePlayer);
                    return True;
                }
                else if (entity is Zombie && !cache.Zombies.Contains(entity as Zombie))
                {
                    cache.Zombies.Add(entity as Zombie);
                    return True;
                }

                return False;
            }

            if (trackCCTV && entity is CCTV_RC)
            {
                if (!cache.CCTV.Contains(entity as CCTV_RC))
                {
                    cache.CCTV.Add(entity as CCTV_RC);
                    return True;
                }
            }
            else if (trackTC && entity is BuildingPrivlidge)
            {
                if (!cache.Cupboards.Contains(entity as BuildingPrivlidge))
                {
                    cache.Cupboards.Add(entity as BuildingPrivlidge);
                    return True;
                }
            }
            else if (entity is StorageContainer)
            {
                if (trackSupplyDrops && entity is SupplyDrop && !cache.SupplyDrops.Contains(entity as SupplyDrop))
                {
                    cache.SupplyDrops.Add(entity as SupplyDrop);
                    return True;
                }
                else if (IsBox(entity.ShortPrefabName) || IsLoot(entity.ShortPrefabName) || entity is LockedByEntCrate)
                {
                    if (!cache.Containers.Contains(entity as StorageContainer))
                    {
                        cache.Containers.Add(entity as StorageContainer);
                        return True;
                    }
                }
                return False;
            }
            else if (trackLoot && entity is DroppedItemContainer)
            {
                if (!cache.Backpacks.Contains(entity as DroppedItemContainer))
                {
                    cache.Backpacks.Add(entity as DroppedItemContainer);
                    return True;
                }
            }
            else if (trackCollectibles && entity is CollectibleEntity)
            {
                if (!cache.Collectibles.ContainsKey(position))
                {
                    var itemList = entity.GetComponent<CollectibleEntity>().itemList;
                    int sum = 0;

                    if (itemList != null)
                    {
                        foreach (var item in itemList)
                        {
                            sum += (int)item.amount;
                        }
                    }

                    cache.Collectibles.Add(position, new CachedInfo { Name = _(entity.ShortPrefabName), Size = 0.5f, Info = sum });
                    return True;
                }

                return False;
            }
            else if (trackOre && entity is OreResourceEntity)
            {
                if (!cache.Ores.ContainsKey(position))
                {
                    float amount = 0;

                    foreach (var item in entity.GetComponent<ResourceDispenser>().containedItems)
                    {
                        amount += item.amount;
                    }

                    cache.Ores.Add(position, new CachedInfo { Name = _(entity.ShortPrefabName), Info = amount });
                    return True;
                }

                return False;
            }
            else if (trackDead && entity is PlayerCorpse)
            {
                var corpse = entity as PlayerCorpse;

                if (!cache.Corpses.ContainsKey(corpse) && corpse.playerSteamID.IsSteamId())
                {
                    string contents = Radar.GetContents(corpse.containers);
                    cache.Corpses.Add(corpse, new CachedInfo { Name = corpse.parentEnt?.ToString() ?? corpse.playerSteamID.ToString(), Info = contents });
                    return True;
                }

                return False;
            }
            else if (trackBags && entity is SleepingBag)
            {
                if (!cache.Bags.ContainsKey(position))
                {
                    cache.Bags.Add(position, new CachedInfo { Size = 0.5f });
                    return True;
                }

                return False;
            }
            else if (trackCargoPlanes && entity is CargoPlane)
            {
                if (!cache.CargoPlanes.Contains(entity as CargoPlane))
                {
                    cache.CargoPlanes.Add(entity as CargoPlane);
                    return True;
                }
            }
            else if (trackHeli && entity is BaseHelicopter)
            {
                if (!cache.Helicopters.Contains(entity as BaseHelicopter))
                {
                    cache.Helicopters.Add(entity as BaseHelicopter);
                    return True;
                }
            }
            else if (trackBradley && entity is BradleyAPC)
            {
                if (!cache.BradleyAPCs.Contains(entity as BradleyAPC))
                {
                    cache.BradleyAPCs.Add(entity as BradleyAPC);
                    return True;
                }
            }
            else if (trackRigidHullInflatableBoats && entity is RHIB)
            {
                if (!cache.RHIB.Contains(entity))
                {
                    cache.RHIB.Add(entity);
                    return True;
                }
            }
            else if (trackBoats && entity is BaseBoat && !(entity is RHIB))
            {
                if (!cache.Boats.Contains(entity))
                {
                    cache.Boats.Add(entity);
                    return True;
                }
            }
            else if (entity is MiniCopter)
            {
                if (!cache.MiniCopter.Contains(entity))
                {
                    cache.MiniCopter.Add(entity);
                    return True;
                }
            }
            else if (trackCH47 && entity is CH47Helicopter)
            {
                if (!cache.CH47.Contains(entity))
                {
                    cache.CH47.Add(entity);
                    return True;
                }
            }
            if (trackCargoShips && entity is CargoShip)
            {
                if (!cache.CargoShips.Contains(entity))
                {
                    cache.CargoShips.Add(entity);
                    return True;
                }
            }
            else if (trackCars && (entity is BasicCar || entity is ModularCar))
            {
                if (!cache.Cars.Contains(entity))
                {
                    cache.Cars.Add(entity);
                    return True;
                }
            }
            else if (trackTurrets && entity is AutoTurret)
            {
                if (!cache.Turrets.Contains(entity as AutoTurret))
                {
                    cache.Turrets.Add(entity as AutoTurret);
                    return True;
                }
            }

            return False;
        }

        private static bool IsBox(string str)
        {
            if (trackBox)
            {
                return str.Contains("box") || str.Equals("heli_crate") || str.Contains("coffin") || str.Contains("stash");
            }

            return False;
        }

        private static bool IsLoot(string str)
        {
            if (trackLoot)
            {
                return str.Contains("loot") || str.Contains("crate_") || str.Contains("trash") || str.Contains("hackable") || str.Contains("oil");
            }

            return False;
        }

        private static void RemoveFromCache(BaseEntity entity)
        {
            if (entity == null)
            {
                return;
            }

            var position = entity.transform?.position ?? Vector3.zero;

            if (cache.Ores.ContainsKey(position))
                cache.Ores.Remove(position);
            else if (entity is StorageContainer)
                cache.Containers.Remove(entity as StorageContainer);
            else if (cache.Collectibles.ContainsKey(position))
                cache.Collectibles.Remove(position);
            else if (entity is BaseNpc)
                cache.Animals.Remove(entity as BaseNpc);
            else if (entity is PlayerCorpse)
                cache.Corpses.Remove(entity as PlayerCorpse);
            else if (cache.Bags.ContainsKey(position))
                cache.Bags.Remove(position);
            else if (entity is DroppedItemContainer)
                cache.Backpacks.Remove(entity as DroppedItemContainer);
            else if (entity is BaseHelicopter)
                cache.Helicopters.Remove(entity as BaseHelicopter);
            else if (cache.Turrets.Contains(entity as AutoTurret))
                cache.Turrets.Remove(entity as AutoTurret);
            else if (entity is Zombie)
                cache.Zombies.Remove(entity as Zombie);
            else if (entity is CargoShip)
                cache.CargoShips.Remove(entity);
            else if (entity is BasicCar || entity is ModularCar)
                cache.Cars.Remove(entity);
            else if (entity is CH47Helicopter)
                cache.CH47.Remove(entity);
            else if (entity is RHIB)
                cache.RHIB.Remove(entity);
            else if (entity is BaseBoat)
                cache.Boats.Remove(entity);
            else if (entity is RidableHorse)
                cache.RidableHorse.Remove(entity);
            else if (entity is MiniCopter)
                cache.MiniCopter.Remove(entity);
            else if (entity is CargoPlane)
                cache.CargoPlanes.Remove(entity);
            else if (entity is CCTV_RC)
                cache.CCTV.Remove(entity as CCTV_RC);
        }

        private bool HasAccess(BasePlayer player)
        {
            if (player == null)
                return False;

            if (DeveloperList.Contains(player.userID))
                return True;

            if (authorized.Count > 0)
                return authorized.Contains(player.UserIDString);

            if (permission.UserHasPermission(player.UserIDString, permAllowed))
                return True;

            if (player.IsConnected && player.net.connection.authLevel >= authLevel)
                return True;

            return False;
        }

        [ConsoleCommand("espgui")]
        private void ccmdESPGUI(ConsoleSystem.Arg arg)
        {
            if (!arg.HasArgs())
                return;

            var player = arg.Player();

            if (!player)
                return;

            RadarCommandX(player, "espgui", arg.Args);
        }

        private void RadarCommand(IPlayer p, string command, string[] args)
        {
            var player = p.Object as BasePlayer;

            if (!player || !HasAccess(player))
            {
                p.Reply(msg("NotAllowed", p.Id));
                return;
            }

            RadarCommandX(player, command, args);
        }

        private void RadarCommandX(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 1 && args[0].ToLower() == "list" && permission.UserHasPermission(player.UserIDString, permList))
            {
                Player.Message(player, "List of active radars: " + string.Join(", ", activeRadars.Where(x => x.player.IsValid()).Select(x => x.playerName)));
                return;
            }
            
            if (!HasAccess(player))
            {
                Message(player, msg("NotAllowed", player.UserIDString));
                return;
            }

            if (args.Length == 1)
            {
                switch (args[0].ToLower())
                {
                    case "drops":
                        {
                            bool hasDrops = False;
                            DroppedItem drop = null;
                            double currDistance;

                            bool isAdmin = player.IsAdmin;

                            if (!isAdmin)
                            {
                                player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, true);
                                player.SendNetworkUpdateImmediate();
                            }

                            foreach (var entity in BaseNetworkable.serverEntities)
                            {
                                if (entity is DroppedItem || entity is Landmine || entity is BearTrap || entity is DroppedItemContainer)
                                {
                                    drop = entity as DroppedItem;
                                    string shortname = drop?.item?.info.shortname ?? entity.ShortPrefabName;
                                    currDistance = (entity.transform.position - player.transform.position).magnitude;

                                    if (currDistance <= dropsDistance)
                                    {
                                        if (drawText) player.SendConsoleCommand("ddraw.text", 30f, Color.red, entity.transform.position, string.Format("{0} <color=#FFFF00>{1}</color>", shortname, currDistance.ToString("0")));
                                        if (drawBox) player.SendConsoleCommand("ddraw.box", 30f, Color.red, entity.transform.position, 0.25f);
                                        hasDrops = True;
                                    }
                                }
                            }

                            if (!hasDrops)
                            {
                                Message(player, msg("NoDrops", player.UserIDString, lootDistance));
                            }

                            if (!isAdmin)
                            {
                                player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, false);
                                player.SendNetworkUpdateImmediate();
                            }
                        }
                        return;
                    case "online":
                        {
                            if (storedData.OnlineBoxes.Contains(player.UserIDString))
                                storedData.OnlineBoxes.Remove(player.UserIDString);
                            else
                                storedData.OnlineBoxes.Add(player.UserIDString);

                            Message(player, msg(storedData.OnlineBoxes.Contains(player.UserIDString) ? "BoxesOnlineOnly" : "BoxesAll", player.UserIDString));
                        }
                        return;
                    case "vision":
                        {
                            if (storedData.Visions.Contains(player.UserIDString))
                                storedData.Visions.Remove(player.UserIDString);
                            else
                                storedData.Visions.Add(player.UserIDString);

                            Message(player, msg(storedData.Visions.Contains(player.UserIDString) ? "VisionOn" : "VisionOff", player.UserIDString));
                        }
                        return;
                    case "ext":
                    case "extend":
                    case "extended":
                        {
                            if (storedData.Extended.Contains(player.UserIDString))
                                storedData.Extended.Remove(player.UserIDString);
                            else
                                storedData.Extended.Add(player.UserIDString);

                            Message(player, msg(storedData.Extended.Contains(player.UserIDString) ? "ExtendedPlayersOn" : "ExtendedPlayersOff", player.UserIDString));
                        }
                        return;
                }
            }

            var list = new List<string>();

            foreach (string arg in args)
            {
                list.Add(arg.ToLower());
            }

            if (!storedData.Filters.ContainsKey(player.UserIDString))
                storedData.Filters.Add(player.UserIDString, list);

            if (args.Length == 0)
            {
                foreach (var x in activeRadars)
                {
                    if (x.player == player)
                    {
                        storedData.Active.Remove(player.UserIDString);
                        UnityEngine.Object.Destroy(x);
                        return;
                    }
                }
            }

            args = list.ToArray();

            if (args.Length >= 1)
            {
                if (args[0] == "setanchormin" && args.Length >= 1)
                {
                    if (args.Length == 3)
                    {
                        anchorMin = $"{args[1]} {args[2]}";

                        foreach (var x in activeRadars)
                        {
                            if (x.player == player)
                            {
                                DestroyUI(player);
                                CreateUI(player, x, isArg(args, "all"));
                            }
                        }
                    }

                    Message(player, anchorMin);
                    return;
                }
                if (args[0] == "setanchormax" && args.Length >= 1)
                {
                    if (args.Length == 3)
                    {
                        anchorMax = $"{args[1]} {args[2]}";

                        foreach (var x in activeRadars)
                        {
                            if (x.player == player)
                            {
                                DestroyUI(player);
                                CreateUI(player, x, isArg(args, "all"));
                            }
                        }
                    }

                    Message(player, anchorMax);
                    return;
                }
                if (args[0] == "anchors_save")
                {
                    Config.Set("GUI", "Anchor Min", anchorMin);
                    Config.Set("GUI", "Anchor Max", anchorMax);
                    Config.Save();
                    Message(player, $"Saved: {anchorMin} {anchorMax}");
                    return;
                }
                if (args[0] == "anchors_reset")
                {
                    anchorMin = anchorMinDefault;
                    anchorMax = anchorMaxDefault;
                    Config.Set("GUI", "Anchor Min", anchorMin);
                    Config.Set("GUI", "Anchor Max", anchorMax);
                    Config.Save();
                    Message(player, $"Reset: {anchorMin} {anchorMax}");
                    return;
                }
                if (args[0] == "tracker")
                {
                    Message(player, "Feature removed. Use Player Tracker plugin.");
                    return;
                }
                if (args[0] == "help")
                {
                    Message(player, msg("Help1", player.UserIDString, string.Join(", ", GetButtonNames, "HT")));
                    Message(player, msg("Help2", player.UserIDString, command, "online"));
                    Message(player, msg("Help3", player.UserIDString, command, "ui"));
                    Message(player, msg("Help7", player.UserIDString, command, "vision"));
                    Message(player, msg("Help8", player.UserIDString, command, "ext"));
                    Message(player, msg("Help9", player.UserIDString, command, lootDistance));
                    Message(player, msg("Help5", player.UserIDString, command));
                    Message(player, msg("Help6", player.UserIDString, command));
                    Message(player, msg("PreviousFilter", player.UserIDString, command));
                    return;
                }

                if (args[0].Contains("ui"))
                {
                    if (storedData.Filters[player.UserIDString].Contains(args[0]))
                        storedData.Filters[player.UserIDString].Remove(args[0]);

                    if (storedData.Hidden.Contains(player.UserIDString))
                    {
                        storedData.Hidden.Remove(player.UserIDString);
                        Message(player, msg("GUIShown", player.UserIDString));
                    }
                    else
                    {
                        storedData.Hidden.Add(player.UserIDString);
                        Message(player, msg("GUIHidden", player.UserIDString));
                    }

                    args = storedData.Filters[player.UserIDString].ToArray();
                }
                else if (args[0] == "list")
                {
                    var sb = new StringBuilder();

                    if (activeRadars.Count > 0)
                    {
                        for (int j = 0; j < activeRadars.Count; j++)
                        {
                            sb.Append(activeRadars[j].player.displayName).Append(", ");
                        }

                        sb.Length -= 2;
                    }

                    Message(player, activeRadars.Count == 0 ? msg("NoActiveRadars", player.UserIDString) : msg("ActiveRadars", player.UserIDString, sb.ToString()));
                    return;
                }
                else if (args[0] == "f")
                    args = storedData.Filters[player.UserIDString].ToArray();
            }

            if (command == "espgui")
            {
                string filter = storedData.Filters[player.UserIDString].Find(f => f.Equals(args[0])) ?? storedData.Filters[player.UserIDString].Find(f => f.Contains(args[0]) || args[0].Contains(f)) ?? args[0];

                if (storedData.Filters[player.UserIDString].Contains(filter))
                    storedData.Filters[player.UserIDString].Remove(filter);
                else
                    storedData.Filters[player.UserIDString].Add(filter);

                args = storedData.Filters[player.UserIDString].ToArray();
            }
            else
            {
                if (coolDown > 0f)
                {
                    float time = Time.realtimeSinceStartup;

                    if (cooldowns.ContainsKey(player.userID))
                    {
                        float cooldown = cooldowns[player.userID] - time;

                        if (cooldown > 0)
                        {
                            Message(player, msg("WaitCooldown", player.UserIDString, cooldown));
                            return;
                        }
                        else cooldowns.Remove(player.userID);
                    }
                }

                list.Clear();

                for (int j = 0; j < args.Length; j++)
                {
                    list.Add(args[j]);
                }

                storedData.Filters[player.UserIDString] = list;
            }

            var radar = player.GetComponent<Radar>() ?? player.gameObject.AddComponent<Radar>();
            float invokeTime, maxDistance, outTime, outDistance;
            
            radar.barebonesMode = barebonesMode;

            if (args.Length > 0 && float.TryParse(args[0], NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out outTime))
                invokeTime = outTime < 0.1f ? 0.1f : outTime;
            else
                invokeTime = defaultInvokeTime;

            if (args.Length > 1 && float.TryParse(args[1], NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out outDistance))
                maxDistance = outDistance <= 0f ? defaultMaxDistance : outDistance;
            else
                maxDistance = defaultMaxDistance;

            bool showAll = isArg(args, "all");
            radar.showAll = showAll;
            radar.showBags = isArg(args, "bag") || showAll;
            radar.showBoats = isArg(args, "boats") || showAll || (!uiBtnBoats && trackBoats);
            radar.showBox = isArg(args, "box") || showAll;
            radar.showBradley = isArg(args, "bradley") || showAll || (!uiBtnBradley && trackBradley);
            radar.showCargoPlanes = isArg(args, "cargoplane") || showAll || (!uiBtnCargoPlanes && trackCargoPlanes);
            radar.showCargoShips = isArg(args, "cargoship") || showAll || (!uiBtnCargoShips && trackCargoShips);
            radar.showCars = isArg(args, "cars") || showAll || (!uiBtnCars && trackCars);
            radar.showCCTV = isArg(args, "cctv") || showAll || (!uiBtnCCTV && trackCCTV);
            radar.showCH47 = isArg(args, "ch47") || showAll || (!uiBtnCH47 && trackCH47);
            radar.showCollectible = isArg(args, "col") || showAll;
            radar.showDead = isArg(args, "dead") || showAll;
            radar.showHeli = isArg(args, "heli") || showAll || (!uiBtnHeli && trackHeli);
            radar.showLoot = isArg(args, "loot") || showAll;
            radar.showMiniCopter = isArg(args, "mini") || showAll || (!uiBtnMiniCopter && trackMiniCopter);
            radar.showNPC = isArg(args, "npc") || showAll;
            radar.showOre = isArg(args, "ore") || showAll;
            radar.showRidableHorses = isArg(args, "horse") || showAll || (!uiBtnRidableHorses && trackRidableHorses);
            radar.showRHIB = isArg(args, "rhib") || showAll || (!uiBtnRHIB && trackRigidHullInflatableBoats);
            radar.showSleepers = isArg(args, "sleeper") || showAll;
            radar.showStash = isArg(args, "stash") || showAll;
            radar.showTC = isArg(args, "tc", True) || showAll;
            radar.showTCArrow = isArg(args, "tcarrows", True) || showAll;
            radar.showTurrets = isArg(args, "turret") || showAll;
            radar.showHT = isArg(args, "ht");

            if (showUI && !barebonesMode)
            {
                if (radarUI.Contains(player.UserIDString))
                {
                    DestroyUI(player);
                }

                if (!storedData.Hidden.Contains(player.UserIDString))
                {
                    CreateUI(player, radar, showAll);
                }
            }

            radar.invokeTime = invokeTime;
            radar.maxDistance = maxDistance;
            radar.Start();

            if (!storedData.Active.Contains(player.UserIDString))
                storedData.Active.Add(player.UserIDString);

            if (command == "espgui" || !showToggleMessage)
                return;

            Message(player, msg("Activated", player.UserIDString, invokeTime, maxDistance, command));
        }

        private bool isArg(string[] args, string arg, bool equalTo = False)
        {
            for (int j = 0; j < args.Length; j++)
            {
                if (equalTo)
                {
                    if (args[j].Equals(arg))
                    {
                        return True;
                    }
                }
                else if (args[j].Contains(arg) || arg.Contains(args[j]))
                {
                    return True;
                }
            }

            return False;
        }

        #region UI

        private static string[] uiBtnNames = new string[0];
        private static Dictionary<int, UIButton> uiButtons;
        private static readonly List<string> radarUI = new List<string>();
        private const string UI_PanelName = "AdminRadar_UI";

        public static void DestroyUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, UI_PanelName);
            radarUI.Remove(player.UserIDString);
        }

        private void CreateUI(BasePlayer player, Radar esp, bool showAll)
        {
            var buttonNames = GetButtonNames;
            var buttons = CreateButtons;
            string aMin = anchorMin;
            string aMax = anchorMax;

            if (buttons.Count > 12)
            {
                double anchorMinX;
                if (double.TryParse(anchorMin.Split(' ')[0], out anchorMinX))
                {
                    double anchorMinY;
                    if (double.TryParse(anchorMin.Split(' ')[1], out anchorMinY))
                    {
                        double anchorMaxX;
                        if (double.TryParse(anchorMax.Split(' ')[0], out anchorMaxX))
                        {
                            double anchorMaxY;
                            if (double.TryParse(anchorMax.Split(' ')[1], out anchorMaxY))
                            {
                                if (buttons.Count >= 13 && buttons.Count <= 16)
                                {
                                    anchorMinX += 0.010;
                                    anchorMinY += 0.0215;
                                    anchorMaxX -= 0.0135;
                                    anchorMaxY -= 0.0135;

                                    aMin = string.Format("{0} {1}", anchorMinX, anchorMinY);
                                    aMax = string.Format("{0} {1}", anchorMaxX, anchorMaxY);
                                }
                                else if (buttons.Count >= 17)
                                {
                                    anchorMinX -= 0.024;
                                    anchorMinY += 0.0175;
                                    anchorMaxX -= 0.0305;
                                    anchorMaxY -= 0.0305;

                                    aMin = string.Format("{0} {1}", anchorMinX, anchorMinY);
                                    aMax = string.Format("{0} {1}", anchorMaxX, anchorMaxY);
                                }
                            }
                        }
                    }
                }
            }

            var element = UI.CreateElementContainer(UI_PanelName, "0 0 0 0.0", aMin, aMax, False);
            int fontSize = buttons.Count > 12 ? 8 : 10;

            for (int x = 0; x < buttonNames.Length; x++)
            {
                UI.CreateButton(ref element, UI_PanelName, esp.GetBool(buttonNames[x]) ? uiColorOn : uiColorOff, msg(buttonNames[x], player.UserIDString), fontSize, buttons[x].Anchor, buttons[x].Offset, "espgui " + buttonNames[x]);
            }

            if (element == null || element.Count == 0)
            {
                return;
            }

            radarUI.Add(player.UserIDString);
            CuiHelper.AddUi(player, element);
        }

        public string[] GetButtonNames
        {
            get
            {
                var list = new List<string>() { "All" };

                if (uiBtnBags) list.Add("Bags");
                if (uiBtnBoats) list.Add("Boats");
                if (uiBtnBox) list.Add("Box");
                if (uiBtnBradley) list.Add("Bradley");
                if (uiBtnCargoPlanes) list.Add("CargoPlanes");
                if (uiBtnCargoShips) list.Add("CargoShips");
                if (uiBtnCars) list.Add("Cars");
                if (uiBtnCCTV) list.Add("CCTV");
                if (uiBtnCH47) list.Add("CH47");
                if (uiBtnCollectible) list.Add("Collectibles");
                if (uiBtnDead) list.Add("Dead");
                if (uiBtnHeli) list.Add("Heli");
                if (uiBtnLoot) list.Add("Loot");
                if (uiBtnMiniCopter) list.Add("MiniCopter");
                if (uiBtnNPC) list.Add("NPC");
                if (uiBtnOre) list.Add("Ore");
                if (uiBtnRidableHorses) list.Add("Horses");
                if (uiBtnRHIB) list.Add("RHIB");
                if (uiBtnSleepers) list.Add("Sleepers");
                if (uiBtnStash) list.Add("Stash");
                if (uiBtnTC) list.Add("TC");
                if (uiBtnTCArrow) list.Add("TCArrows");
                if (uiBtnTurrets) list.Add("Turrets");

                return uiBtnNames = list.ToArray();
            }
        }

        public class UIButton 
        {
            public string Anchor { get; set; }
            public string Offset { get; set; }
        }

        public Dictionary<int, UIButton> CreateButtons
        {
            get
            {
                uiButtons = new Dictionary<int, UIButton>();

                int amount = uiBtnNames.Length;
                double anchorMin = amount > 12 ? 0.011 : 0.017;
                double anchorMax = amount > 12 ? 0.675 : 0.739;
                double offsetMin = amount > 12 ? 0.275 : 0.331;
                double offsetMax = amount > 12 ? 0.957 : 0.957;
                double defaultAnchorMax = anchorMax;
                double defaultOffsetMax = offsetMax;
                int rowMax = 4;

                for (int count = 0; count < amount; count++)
                {
                    if (count > 0 && count % rowMax == 0)
                    {
                        anchorMax = defaultAnchorMax;
                        offsetMax = defaultOffsetMax;
                        anchorMin += (amount > 12 ? 0.280 : 0.326);
                        offsetMin += (amount > 12 ? 0.280 : 0.326);
                    }

                    uiButtons[count] = new UIButton
                    {
                        Anchor = $"{anchorMin} {anchorMax}",
                        Offset = $"{offsetMin} {offsetMax}",
                    };

                    anchorMax -= (amount > 12 ? 0.329 : 0.239);
                    offsetMax -= (amount > 12 ? 0.329 : 0.239);
                }

                return uiButtons;
            }
        }

        public class UI // Credit: Absolut
        {
            public static CuiElementContainer CreateElementContainer(string panelName, string color, string aMin, string aMax, bool cursor = False, string parent = "Overlay")
            {
                var NewElement = new CuiElementContainer
                {
                    {
                        new CuiPanel
                        {
                            Image =
                            {
                                Color = color
                            },
                            RectTransform =
                            {
                                AnchorMin = aMin,
                                AnchorMax = aMax
                            },
                            CursorEnabled = cursor
                        },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                return NewElement;
            }

            public static void CreateButton(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter, string labelColor = "")
            {
                container.Add(new CuiButton
                {
                    Button =
                        {
                            Color = color,
                            Command = command,
                            FadeIn = 1.0f
                        },
                    RectTransform =
                        {
                            AnchorMin = aMin,
                            AnchorMax = aMax
                        },
                    Text =
                        {
                            Text = text,
                            FontSize = size,
                            Align = align,
                            Color = labelColor
                        }
                },
                    panel);
            }
        }

        #endregion

        #region Config

        private bool Changed;
        private bool barebonesMode;
        private static int averagePingInterval;
        private static bool drawText = True;
        private static bool drawBox;
        private static bool drawArrows;
        private static string colorDrawArrows;
        private static bool drawX;
        private static int authLevel;
        private static float defaultInvokeTime;
        private static float defaultMaxDistance;

        private static float mcDistance;
        private static float carDistance;
        private static float boatDistance;
        private static float adDistance;
        private static float boxDistance;
        private static float playerDistance;
        private static float npcPlayerDistance;
        private static float tcDistance;
        private static float tcArrowsDistance;
        private static float stashDistance;
        private static float corpseDistance;
        private static float oreDistance;
        private static float rhDistance;
        private static float lootDistance;
        private static float colDistance;
        private static float cctvDistance;
        private static float bagDistance;
        private static float npcDistance;
        private static float turretDistance;
        private static float dropsDistance;
        private static bool showLootContents;
        private static bool showAirdropContents;
        private static bool showStashContents;
        private static bool drawEmptyContainers;
        private static bool showResourceAmounts;
        private static bool showHeliRotorHealth;
        private static int backpackContentAmount;
        private static int corpseContentAmount;
        private static int groupLimit;
        private static float groupRange;
        private static float groupCountHeight;
        private static int inactiveSeconds;
        private static int inactiveMinutes;
        private static bool showUI;
        private static bool showTCAuthedCount;
        private static bool showTCBagCount;

        private static string distCC;
        private static string heliCC;
        private static string bradleyCC;
        private static string miniCC;
        private static string scrapCC;
        private static string activeCC;
        private static string activeDeadCC;
        private static string corpseCC;
        private static string sleeperCC;
        private static string sleeperDeadCC;
        private static string healthCC;
        private static string backpackCC;
        private static string zombieCC;
        private static string scientistCC;
        private static string peacekeeperCC;
        private static string htnscientistCC;
        private static string murdererCC;
        private static string npcCC;
        private static string resourceCC;
        private static string colCC;
        private static string tcCC;
        private static string bagCC;
        private static string airdropCC;
        private static string atCC;
        private static string boxCC;
        private static string lootCC;
        private static string stashCC;
        private static string groupColorDead;
        private static string groupColorBasic;
        private string uiColorOn;
        private string uiColorOff;

        private static string szRadarCommand;
        private static string szSecondaryCommand;
        private static List<object> authorized = new List<object>();
        private static List<string> itemExceptions = new List<string>();

        private static bool trackActive = True; // default tracking
        private static bool trackBags = True;
        private static bool trackBox = True;
        private static bool trackCollectibles = True;
        private static bool trackCCTV = True;
        private static bool trackDead = True;
        private static bool trackLoot = True;
        private static bool trackNPC = True;
        private static bool trackOre = True;
        private static bool trackSleepers = True;
        private static bool trackStash = True;
        private static bool trackSupplyDrops = True;
        private static bool trackTC = True;
        private static bool trackTurrets = True;

        private static bool trackMiniCopter; // additional tracking
        private static bool trackHeli;
        private static bool trackBradley;
        private static bool trackCars;
        private static bool trackCargoPlanes;
        private static bool trackCargoShips;
        private static bool trackCH47;
        private static bool trackRidableHorses;
        private static bool trackRigidHullInflatableBoats;
        private static bool trackBoats;

        private const string anchorMinDefault = "0.667 0.020";
        private const string anchorMaxDefault = "0.810 0.148";
        private string anchorMin;
        private string anchorMax;
        private static bool uiBtnBags;
        private static bool uiBtnBoats;
        private static bool uiBtnBox;
        private static bool uiBtnBradley;
        private static bool uiBtnCars;
        private static bool uiBtnCCTV;
        private static bool uiBtnCargoPlanes;
        private static bool uiBtnCargoShips;
        private static bool uiBtnCH47;
        private static bool uiBtnCollectible;
        private static bool uiBtnDead;
        private static bool uiBtnHeli;
        private static bool uiBtnLoot;
        private static bool uiBtnMiniCopter;
        private static bool uiBtnNPC;
        private static bool uiBtnOre;
        private static bool uiBtnRidableHorses;
        private static bool uiBtnRHIB;
        private static bool uiBtnSleepers;
        private static bool uiBtnStash;
        private static bool uiBtnTC;
        private static bool uiBtnTCArrow;
        private static bool uiBtnTurrets;

        //static string voiceSymbol;
        private static bool useVoiceDetection;
        private static int voiceInterval;
        private static float voiceDistance;
        private static bool skipUnderworld;
        private static bool blockDamageBuildings;
        private static bool blockDamageAnimals;
        private static bool blockDamagePlayers;
        private static bool blockDamageNpcs;
        private static bool blockDamageOther;
        private static float coolDown;
        private string _webhookUrl;
        private int _messageColor;
        private bool _sendDiscordMessages;
        private string _embedMessageTitle;
        private string _embedMessagePlayer;
        private string _embedMessageMessage;
        private string _embedMessageLocation;
        private string _embedMessageServer;
        private string _discordMessageToggleOn;
        private string _discordMessageToggleOff;
        private bool showToggleMessage;

        private List<object> ItemExceptions
        {
            get
            {
                return new List<object> { "bottle", "planner", "rock", "torch", "can.", "arrow." };
            }
        }

        private static bool useGroupColors;
        private static readonly Dictionary<int, string> groupColors = new Dictionary<int, string>();

        private static string GetGroupColor(int index)
        {
            if (useGroupColors && groupColors.ContainsKey(index))
                return groupColors[index];

            return groupColorBasic;
        }

        private void SetupGroupColors(List<object> list)
        {
            if (list != null && list.Count > 0)
            {
                groupColors.Clear();

                Dictionary<string, object> dict;
                string value;
                int key;

                foreach (var entry in list)
                {
                    if (entry is Dictionary<string, object>)
                    {
                        dict = (Dictionary<string, object>)entry;

                        foreach (var kvp in dict)
                        {
                            key = 0;
                            if (int.TryParse(kvp.Key, out key))
                            {
                                value = kvp.Value.ToString();

                                if (__(value) == Color.red)
                                {
                                    if (__(activeDeadCC) == Color.red || __(sleeperDeadCC) == Color.red)
                                    {
                                        groupColors[key] = "#FF00FF"; // magenta
                                        continue;
                                    }
                                }

                                if (IsHex(value))
                                {
                                    value = "#" + value;
                                }

                                groupColors[key] = value;
                            }
                        }
                    }
                }
            }
        }

        private List<object> DefaultGroupColors
        {
            get
            {
                return new List<object>
                {
                    new Dictionary<string, object>
                    {
                        ["0"] = "#FF00FF", // magenta
                        ["1"] = "#008000", // green
                        ["2"] = "#0000FF", // blue
                        ["3"] = "#FFA500", // orange
                        ["4"] = "#FFFF00" // yellow
                    }
                };
            }
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NotAllowed"] = "You are not allowed to use this command.",
                ["PreviousFilter"] = "To use your previous filter type <color=#FFA500>/{0} f</color>",
                ["Activated"] = "ESP Activated - {0}s refresh - {1}m distance. Use <color=#FFA500>/{2} help</color> for help.",
                ["Deactivated"] = "ESP Deactivated.",
                ["Exception"] = "ESP Tool: An error occured. Please check the server console.",
                ["GUIShown"] = "GUI will be shown",
                ["GUIHidden"] = "GUI will now be hidden",
                ["InvalidID"] = "{0} is not a valid steam id. Entry removed.",
                ["BoxesAll"] = "Now showing all boxes.",
                ["BoxesOnlineOnly"] = "Now showing online player boxes only.",
                ["Help1"] = "<color=#FFA500>Available Filters</color>: {0}",
                ["Help2"] = "<color=#FFA500>/{0} {1}</color> - Toggles showing online players boxes only when using the <color=#FF0000>box</color> filter.",
                ["Help3"] = "<color=#FFA500>/{0} {1}</color> - Toggles quick toggle UI on/off",
                ["Help5"] = "e.g: <color=#FFA500>/{0} 1 1000 box loot stash</color>",
                ["Help6"] = "e.g: <color=#FFA500>/{0} 0.5 400 all</color>",
                ["VisionOn"] = "You will now see where players are looking.",
                ["VisionOff"] = "You will no longer see where players are looking.",
                ["ExtendedPlayersOn"] = "Extended information for players is now on.",
                ["ExtendedPlayersOff"] = "Extended information for players is now off.",
                ["Help7"] = "<color=#FFA500>/{0} {1}</color> - Toggles showing where players are looking.",
                ["Help8"] = "<color=#FFA500>/{0} {1}</color> - Toggles extended information for players.",
                ["backpack"] = "backpack",
                ["scientist"] = "scientist",
                ["npc"] = "npc",
                ["NoDrops"] = "No item drops found within {0}m",
                ["Help9"] = "<color=#FFA500>/{0} drops</color> - Show all dropped items within {1}m.",
                ["Zombie"] = "<color=#FF0000>Zombie</color>",
                ["NoActiveRadars"] = "No one is using Radar at the moment.",
                ["ActiveRadars"] = "Active radar users: {0}",
                ["All"] = "All",
                ["Bags"] = "Bags",
                ["Box"] = "Box",
                ["Collectibles"] = "Collectibles",
                ["Dead"] = "Dead",
                ["Loot"] = "Loot",
                ["NPC"] = "NPC",
                ["Ore"] = "Ore",
                ["Sleepers"] = "Sleepers",
                ["Stash"] = "Stash",
                ["TC"] = "TC",
                ["Turrets"] = "Turrets",
                ["bear"] = "Bear",
                ["boar"] = "Boar",
                ["chicken"] = "Chicken",
                ["wolf"] = "Wolf",
                ["stag"] = "Stag",
                ["horse"] = "Horse",
                ["My Base"] = "My Base",
                ["scarecrow"] = "scarecrow",
                ["murderer"] = "murderer",
                ["CantDamageBuilds"] = "You can't damage buildings while using radar",
                ["CantHurtAnimals"] = "You can't hurt animals while using radar",
                ["CantHurtPlayers"] = "You can't hurt players while using radar",
                ["CantHurtNpcs"] = "You can't hurt npcs while using radar",
                ["CantHurtOther"] = "You can't hurt this while using radar",
                ["WaitCooldown"] = "You must wait {0} seconds to use this command again.",
            }, this);
        }

        private void LoadVariables()
        {
            barebonesMode = Convert.ToBoolean(GetConfig("Settings", "Barebones Performance Mode", False));
            authorized = GetConfig("Settings", "Restrict Access To Steam64 IDs", new List<object>()) as List<object>;

            foreach (var auth in authorized)
            {
                if (auth == null || !auth.ToString().IsSteamId())
                {
                    PrintWarning(msg("InvalidID", null, auth == null ? "null" : auth.ToString()));
                }
            }

            authLevel = authorized.Count == 0 ? Convert.ToInt32(GetConfig("Settings", "Restrict Access To Auth Level", 1)) : int.MaxValue;
            defaultMaxDistance = Convert.ToSingle(GetConfig("Settings", "Default Distance", 500.0));
            defaultInvokeTime = Convert.ToSingle(GetConfig("Settings", "Default Refresh Time", 5.0));
            //latencyMs = Convert.ToInt32(GetConfig("Settings", "Latency Cap In Milliseconds (0 = no cap)", 1000.0));
            //objectsLimit = Convert.ToInt32(GetConfig("Settings", "Objects Drawn Limit (0 = unlimited)", 250));
            var exceptions = GetConfig("Settings", "Dropped Item Exceptions", ItemExceptions) as List<object>;

            foreach (var exception in exceptions)
            {
                itemExceptions.Add(exception.ToString());
            }

            inactiveSeconds = Convert.ToInt32(GetConfig("Settings", "Deactivate Radar After X Seconds Inactive", 300));
            inactiveMinutes = Convert.ToInt32(GetConfig("Settings", "Deactivate Radar After X Minutes", 0));
            showUI = Convert.ToBoolean(GetConfig("Settings", "User Interface Enabled", True));
            averagePingInterval = Convert.ToInt32(GetConfig("Settings", "Show Average Ping Every X Seconds [0 = disabled]", 0));
            coolDown = Convert.ToSingle(GetConfig("Settings", "Re-use Cooldown, Seconds", 0f));
            showToggleMessage = Convert.ToBoolean(GetConfig("Settings", "Show Radar Activated/Deactivated Messages", True));

            blockDamageAnimals = Convert.ToBoolean(GetConfig("When Radar Is Active", "Block Damage To Animals", False));
            blockDamageBuildings = Convert.ToBoolean(GetConfig("When Radar Is Active", "Block Damage To Buildings", False));
            blockDamageNpcs = Convert.ToBoolean(GetConfig("When Radar Is Active", "Block Damage To Npcs", False));
            blockDamagePlayers = Convert.ToBoolean(GetConfig("When Radar Is Active", "Block Damage To Players", False));
            blockDamageOther = Convert.ToBoolean(GetConfig("When Radar Is Active", "Block Damage To Everything Else", False));

            showLootContents = Convert.ToBoolean(GetConfig("Options", "Show Barrel And Crate Contents", False));
            showAirdropContents = Convert.ToBoolean(GetConfig("Options", "Show Airdrop Contents", False));
            showStashContents = Convert.ToBoolean(GetConfig("Options", "Show Stash Contents", False));
            drawEmptyContainers = Convert.ToBoolean(GetConfig("Options", "Draw Empty Containers", True));
            showResourceAmounts = Convert.ToBoolean(GetConfig("Options", "Show Resource Amounts", True));
            backpackContentAmount = Convert.ToInt32(GetConfig("Options", "Show X Items In Backpacks [0 = amount only]", 3));
            corpseContentAmount = Convert.ToInt32(GetConfig("Options", "Show X Items On Corpses [0 = amount only]", 0));
            skipUnderworld = Convert.ToBoolean(GetConfig("Options", "Only Show NPCPlayers At World View", False));
            showTCAuthedCount = Convert.ToBoolean(GetConfig("Options", "Show Authed Count On Cupboards", True));
            showTCBagCount = Convert.ToBoolean(GetConfig("Options", "Show Bag Count On Cupboards", True));

            drawArrows = Convert.ToBoolean(GetConfig("Drawing Methods", "Draw Arrows On Players", False));
            drawBox = Convert.ToBoolean(GetConfig("Drawing Methods", "Draw Boxes", False));
            drawText = Convert.ToBoolean(GetConfig("Drawing Methods", "Draw Text", True));

            drawX = Convert.ToBoolean(GetConfig("Group Limit", "Draw Distant Players With X", True));
            groupLimit = Convert.ToInt32(GetConfig("Group Limit", "Limit", 4));
            groupRange = Convert.ToSingle(GetConfig("Group Limit", "Range", 50f));
            groupCountHeight = Convert.ToSingle(GetConfig("Group Limit", "Height Offset [0.0 = disabled]", 40f));

            mcDistance = Convert.ToSingle(GetConfig("Drawing Distances", "MiniCopter", 200f));
            boatDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Boats", 150f));
            carDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Cars", 500f));
            adDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Airdrop Crates", 400f));
            npcDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Animals", 200));
            bagDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Sleeping Bags", 250));
            boxDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Boxes", 100));
            colDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Collectibles", 100));
            cctvDistance = Convert.ToSingle(GetConfig("Drawing Distances", "CCTV", 500));
            corpseDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Player Corpses", 200));
            playerDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Players", 500));
            npcPlayerDistance = Convert.ToSingle(GetConfig("Drawing Distances", "NPC Players", 300));
            lootDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Loot Containers", 150));
            oreDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Resources (Ore)", 200));
            rhDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Ridable Horses", 250));
            stashDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Stashes", 250));
            tcDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Tool Cupboards", 150));
            tcArrowsDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Tool Cupboard Arrows", 250));
            turretDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Turrets", 100));
            dropsDistance = Convert.ToSingle(GetConfig("Drawing Distances", "Radar Drops Command", 150f));

            trackBradley = Convert.ToBoolean(GetConfig("Additional Tracking", "Bradley APC", True));
            trackCars = Convert.ToBoolean(GetConfig("Additional Tracking", "Cars", False));
            trackCargoPlanes = Convert.ToBoolean(GetConfig("Additional Tracking", "CargoPlanes", False));
            trackCargoShips = Convert.ToBoolean(GetConfig("Additional Tracking", "CargoShips", False));
            trackMiniCopter = Convert.ToBoolean(GetConfig("Additional Tracking", "MiniCopter", False));
            trackHeli = Convert.ToBoolean(GetConfig("Additional Tracking", "Helicopters", True));
            showHeliRotorHealth = Convert.ToBoolean(GetConfig("Additional Tracking", "Helicopter Rotor Health", False));
            trackCH47 = Convert.ToBoolean(GetConfig("Additional Tracking", "CH47", False));
            trackRidableHorses = Convert.ToBoolean(GetConfig("Additional Tracking", "Ridable Horses", False));
            trackRigidHullInflatableBoats = Convert.ToBoolean(GetConfig("Additional Tracking", "RHIB", False));
            trackBoats = Convert.ToBoolean(GetConfig("Additional Tracking", "Boats", False));
            trackCCTV = Convert.ToBoolean(GetConfig("Additional Tracking", "CCTV", False));

            colorDrawArrows = Convert.ToString(GetConfig("Color-Hex Codes", "Player Arrows", "#000000"));
            distCC = Convert.ToString(GetConfig("Color-Hex Codes", "Distance", "#ffa500"));
            heliCC = Convert.ToString(GetConfig("Color-Hex Codes", "Helicopters", "#ff00ff"));
            bradleyCC = Convert.ToString(GetConfig("Color-Hex Codes", "Bradley", "#ff00ff"));
            miniCC = Convert.ToString(GetConfig("Color-Hex Codes", "MiniCopter", "#ff00ff"));
            scrapCC = Convert.ToString(GetConfig("Color-Hex Codes", "MiniCopter (ScrapTransportHelicopter)", "#ff00ff"));
            activeCC = Convert.ToString(GetConfig("Color-Hex Codes", "Online Player", "#ffffff"));
            activeDeadCC = Convert.ToString(GetConfig("Color-Hex Codes", "Online Dead Player", "#ff0000"));
            sleeperCC = Convert.ToString(GetConfig("Color-Hex Codes", "Sleeping Player", "#00ffff"));
            sleeperDeadCC = Convert.ToString(GetConfig("Color-Hex Codes", "Sleeping Dead Player", "#ff0000"));
            healthCC = Convert.ToString(GetConfig("Color-Hex Codes", "Health", "#ff0000"));
            backpackCC = Convert.ToString(GetConfig("Color-Hex Codes", "Backpacks", "#c0c0c0"));
            zombieCC = Convert.ToString(GetConfig("Color-Hex Codes", "Zombies", "#ff0000"));
            scientistCC = Convert.ToString(GetConfig("Color-Hex Codes", "Scientists", "#ffff00"));
            peacekeeperCC = Convert.ToString(GetConfig("Color-Hex Codes", "Scientist Peacekeeper", "#ffff00"));
            htnscientistCC = Convert.ToString(GetConfig("Color-Hex Codes", "Scientist HTN", "#ff00ff"));
            murdererCC = Convert.ToString(GetConfig("Color-Hex Codes", "Murderers", "#000000"));
            npcCC = Convert.ToString(GetConfig("Color-Hex Codes", "Animals", "#0000ff"));
            resourceCC = Convert.ToString(GetConfig("Color-Hex Codes", "Resources", "#ffff00"));
            colCC = Convert.ToString(GetConfig("Color-Hex Codes", "Collectibles", "#ffff00"));
            tcCC = Convert.ToString(GetConfig("Color-Hex Codes", "Tool Cupboards", "#000000"));
            bagCC = Convert.ToString(GetConfig("Color-Hex Codes", "Sleeping Bags", "#ff00ff"));
            airdropCC = Convert.ToString(GetConfig("Color-Hex Codes", "Airdrops", "#ff00ff"));
            atCC = Convert.ToString(GetConfig("Color-Hex Codes", "AutoTurrets", "#ffff00"));
            corpseCC = Convert.ToString(GetConfig("Color-Hex Codes", "Corpses", "#ffff00"));
            boxCC = Convert.ToString(GetConfig("Color-Hex Codes", "Box", "#ff00ff"));
            lootCC = Convert.ToString(GetConfig("Color-Hex Codes", "Loot", "#ffff00"));
            stashCC = Convert.ToString(GetConfig("Color-Hex Codes", "Stash", "#ffffff"));

            anchorMin = Convert.ToString(GetConfig("GUI", "Anchor Min", "0.667 0.020"));
            anchorMax = Convert.ToString(GetConfig("GUI", "Anchor Max", "0.810 0.148"));
            uiColorOn = Convert.ToString(GetConfig("GUI", "Color On", "0.69 0.49 0.29 0.5"));
            uiColorOff = Convert.ToString(GetConfig("GUI", "Color Off", "0.29 0.49 0.69 0.5"));
            uiBtnBags = Convert.ToBoolean(GetConfig("GUI", "Show Button - Bags", True));
            uiBtnBoats = Convert.ToBoolean(GetConfig("GUI", "Show Button - Boats", False));
            uiBtnBradley = Convert.ToBoolean(GetConfig("GUI", "Show Button - Bradley", False));
            uiBtnBox = Convert.ToBoolean(GetConfig("GUI", "Show Button - Box", True));
            uiBtnCars = Convert.ToBoolean(GetConfig("GUI", "Show Button - Cars", False));
            uiBtnCCTV = Convert.ToBoolean(GetConfig("GUI", "Show Button - CCTV", True));
            uiBtnCargoPlanes = Convert.ToBoolean(GetConfig("GUI", "Show Button - CargoPlanes", False));
            uiBtnCargoShips = Convert.ToBoolean(GetConfig("GUI", "Show Button - CargoShips", False));
            uiBtnCH47 = Convert.ToBoolean(GetConfig("GUI", "Show Button - CH47", False));
            uiBtnCollectible = Convert.ToBoolean(GetConfig("GUI", "Show Button - Collectibles", True));
            uiBtnDead = Convert.ToBoolean(GetConfig("GUI", "Show Button - Dead", True));
            uiBtnHeli = Convert.ToBoolean(GetConfig("GUI", "Show Button - Heli", False));
            uiBtnLoot = Convert.ToBoolean(GetConfig("GUI", "Show Button - Loot", True));
            uiBtnMiniCopter = Convert.ToBoolean(GetConfig("GUI", "Show Button - MiniCopter", False));
            uiBtnNPC = Convert.ToBoolean(GetConfig("GUI", "Show Button - NPC", True));
            uiBtnOre = Convert.ToBoolean(GetConfig("GUI", "Show Button - Ore", True));
            uiBtnRidableHorses = Convert.ToBoolean(GetConfig("GUI", "Show Button - Ridable Horses", False));
            uiBtnRHIB = Convert.ToBoolean(GetConfig("GUI", "Show Button - RigidHullInflatableBoats", False));
            uiBtnSleepers = Convert.ToBoolean(GetConfig("GUI", "Show Button - Sleepers", True));
            uiBtnStash = Convert.ToBoolean(GetConfig("GUI", "Show Button - Stash", True));
            uiBtnTC = Convert.ToBoolean(GetConfig("GUI", "Show Button - TC", True));
            uiBtnTCArrow = Convert.ToBoolean(GetConfig("GUI", "Show Button - TC Arrow", True));
            uiBtnTurrets = Convert.ToBoolean(GetConfig("GUI", "Show Button - Turrets", True));

            if (!anchorMin.Contains(" ")) anchorMin = anchorMinDefault;
            if (!anchorMax.Contains(" ")) anchorMax = anchorMaxDefault;
            if (uiBtnBoats) trackBoats = True;
            if (uiBtnBradley) trackBradley = True;
            if (uiBtnCars) trackCars = True;
            if (uiBtnCCTV) trackCCTV = True;
            if (uiBtnCargoPlanes) trackCargoPlanes = True;
            if (uiBtnCargoShips) trackCargoShips = True;
            if (uiBtnCH47) trackCH47 = True;
            if (uiBtnHeli) trackHeli = True;
            if (uiBtnMiniCopter) trackMiniCopter = True;
            if (uiBtnRidableHorses) trackRidableHorses = True;
            if (uiBtnRHIB) trackRigidHullInflatableBoats = True;

            useGroupColors = Convert.ToBoolean(GetConfig("Group Limit", "Use Group Colors Configuration", True));
            groupColorDead = Convert.ToString(GetConfig("Group Limit", "Dead Color", "#ff0000"));
            groupColorBasic = Convert.ToString(GetConfig("Group Limit", "Group Color Basic", "#ffff00"));

            var list = GetConfig("Group Limit", "Group Colors", DefaultGroupColors) as List<object>;

            if (list != null && list.Count > 0)
            {
                SetupGroupColors(list);
            }

            szRadarCommand = Convert.ToString(GetConfig("Settings", "Chat Command", "radar"));
            szSecondaryCommand = Convert.ToString(GetConfig("Settings", "Second Command", "radar"));

            if (!string.IsNullOrEmpty(szRadarCommand))
                AddCovalenceCommand(szRadarCommand, nameof(RadarCommand));

            if (!string.IsNullOrEmpty(szSecondaryCommand) && szRadarCommand != szSecondaryCommand)
                AddCovalenceCommand(szSecondaryCommand, nameof(RadarCommand));

            //voiceSymbol = Convert.ToString(GetConfig("Voice Detection", "Voice Symbol", "🔊"));
            useVoiceDetection = Convert.ToBoolean(GetConfig("Voice Detection", "Enabled", True));
            voiceInterval = Convert.ToInt32(GetConfig("Voice Detection", "Timeout After X Seconds", 3));
            voiceDistance = Convert.ToSingle(GetConfig("Voice Detection", "Detection Radius", 30f));

            if (voiceInterval < 3)
                voiceInterval = 3;

            _messageColor = Convert.ToInt32(GetConfig("DiscordMessages", "Message - Embed Color (DECIMAL)", 3329330));
            _webhookUrl = Convert.ToString(GetConfig("DiscordMessages", "Message - Webhook URL", "https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks"));
            _sendDiscordMessages = _webhookUrl != "https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks";
            if (string.IsNullOrEmpty(_webhookUrl)) _sendDiscordMessages = false;

            _embedMessageServer = Convert.ToString(GetConfig("DiscordMessages", "Embed_MessageServer", "Server"));
            _embedMessageLocation = Convert.ToString(GetConfig("DiscordMessages", "Embed_MessageLocation", "Location"));
            _embedMessageMessage = Convert.ToString(GetConfig("DiscordMessages", "Embed_MessageTitle", "Player Message"));
            _embedMessagePlayer = Convert.ToString(GetConfig("DiscordMessages", "Embed_MessagePlayer", "Player"));
            _embedMessageTitle = Convert.ToString(GetConfig("DiscordMessages", "Embed_MessageMessage", "Message"));
            _discordMessageToggleOff = Convert.ToString(GetConfig("DiscordMessages", "Off", "Radar turned off."));
            _discordMessageToggleOn = Convert.ToString(GetConfig("DiscordMessages", "On", "Radar turned on."));

            if (Changed)
            {
                SaveConfig();
                Changed = False;
            }
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file");
            Config.Clear();
            LoadVariables();
        }

        private object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = True;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = True;
            }

            return value;
        }

        private string msg(string key, string id = null, params object[] args)
        {
            var message = id == null || id == "server_console" ? RemoveFormatting(lang.GetMessage(key, this, id)) : lang.GetMessage(key, this, id);

            return args.Length > 0 ? string.Format(message, args) : message;
        }

        private string RemoveFormatting(string source)
        {
            return source.Contains(">") ? Regex.Replace(source, "<.*?>", string.Empty) : source;
        }

        private static void Message(BasePlayer target, string message)
        {
            if (target.IsValid())
            {
                ins.Player.Message(target, message, 0uL);
            }
        }

        #endregion
    }
}


// --- End of file: AdminRadar.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/Friendsbyfermens.cs ---
// --- Original Local Path: KualaRust/Friendsbyfermens.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using ProtoBuf;
using Rust;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using ru = Oxide.Game.Rust;

namespace Oxide.Plugins
{
    [Info("Friendsbyfermens", "fermens", "0.1.42")]
    [Description("Система друзей и FF")]
    class Friendsbyfermens : RustPlugin
    {
        #region Config
        private PluginConfig config;

        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        private class PluginConfig
        {
            [JsonProperty("Максимальное количество игроков в команде")]
            public int maxcount;

            [JsonProperty("Префикс")]
            public string prefix;

            [JsonProperty("Максимальное количество символов в теге команды")]
            public int max;

            [JsonProperty("Минимальное количество символов в теге команды")]
            public int min;

            [JsonProperty("Запрещенные названия в теге команде")]
            public string[] blacklist;

            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    maxcount = 3,
                    prefix = "<color=#ff8000>KualaFriends™</color> ",
                    min = 2,
                    max = 4,
                    blacklist = new string[] { "MOD", "MODR", "ADMI", "ADM" },

                };
            }
        }
        #endregion
        [PluginReference] private Plugin OneVSOne, Battles;
        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (entity == null || info == null) return;
            if (entity is BasePlayer && info.Initiator is BasePlayer)
            {
                BasePlayer takeDamage = entity.ToPlayer();
                if (takeDamage == null) return;
                BasePlayer initiator = info.InitiatorPlayer;
                if (initiator == null || initiator == takeDamage || takeDamage.currentTeam == 0) return;
                settings one;
                if (takeDamage.currentTeam == initiator.currentTeam && setplayers.TryGetValue(initiator.userID, out one) && one.ff)
                {
                    if (OneVSOne != null && OneVSOne.Call<bool>("IsEventPlayer", takeDamage) || Battles != null && Battles.Call<bool>("IsPlayerOnBattle", takeDamage.userID)) return;
                    clear(info);
                }
            }
        }

        void clear(HitInfo info)
        {
            info.damageTypes = new DamageTypeList();
            info.HitEntity = null;
            info.HitMaterial = 0;
            info.PointStart = Vector3.zero;
        }

        Dictionary<SamSite, BuildingPrivlidge> samsites = new Dictionary<SamSite, BuildingPrivlidge>();
        private object OnSamSiteTarget(SamSite samSite, BaseCombatEntity target)
        {
            if (target is BaseMountable || target is HotAirBalloon)
            {
                List<BasePlayer> players = new List<BasePlayer>();
                Vis.Entities(target.transform.position, 2.5f, players);
                if (players == null || players.Count == 0) return null;
                BuildingPrivlidge buildingPrivlidge;
                if (!samsites.TryGetValue(samSite, out buildingPrivlidge) || buildingPrivlidge.IsDestroyed)
                {
                    buildingPrivlidge = samSite.GetBuildingPrivilege();
                    if (buildingPrivlidge == null) return null;
                    samsites[samSite] = buildingPrivlidge;
                }

                if (players.Any(player => buildingPrivlidge.IsAuthed(player))) return false;
            }

            return null;
        }

        private object OnTurretTarget(AutoTurret turret, BaseCombatEntity entity)
        {
            if (entity == null) return null;
            BasePlayer player = entity.ToPlayer();
            if (player == null) return null;
            if (turret.OwnerID == 0) return null;
            if (player.Team != null)
            {
                if(player.Team.members.Any(x=> turret.authorizedPlayers.Any(z => x == z.userid && setplayers.ContainsKey(x) && setplayers[x].turret)))
                {
                    turret.authorizedPlayers.Add(GetPlayerNameId(player));
                    turret.SendNetworkUpdate();
                    return false;
                }
            }
            return null;
        }

        private static PlayerNameID GetPlayerNameId(BasePlayer player)
        {
            var playerNameId = new PlayerNameID()
            {
                userid = player.userID,
                username = player.displayName
            };
            return playerNameId;
        }

        private object CanUseLockedEntity(BasePlayer player, BaseLock baseLock)
        {
            if (player == null || baseLock == null || baseLock.GetEntity() == null || !baseLock.IsLocked()) return null;
            ulong ownerID = baseLock.GetEntity().OwnerID;
            if (ownerID.Equals(0)) return null;
            if (player.Team != null && player.Team.members.Contains(ownerID) && setplayers.ContainsKey(ownerID) && setplayers[ownerID].codelock)
            {
                Effect.server.Run("assets/prefabs/locks/keypad/effects/lock.code.unlock.prefab", baseLock.transform.position);
                return true;
            }
            return null;
        }

        private void Save()
        {
            Interface.Oxide.DataFileSystem.WriteObject("Friendsbyfermens", setplayers);
        }

        private void Unload()
        {
         /*   teams.Clear();
            foreach (var z in RelationshipManager.Instance.teams)
            {
                PLAYERTEAM pLAYERTEAM;
                if (!teams.TryGetValue(z.Key, out pLAYERTEAM))
                {
                    teams.Add(z.Key, new PLAYERTEAM { members = new List<ulong>() });
                    pLAYERTEAM = teams[z.Key];
                }
                pLAYERTEAM.teamLeader = z.Value.teamLeader;
                pLAYERTEAM.teamName = z.Value.teamName;
                pLAYERTEAM.members.AddRange(z.Value.members);
            }
            if(teams.Count > 0) Interface.Oxide.DataFileSystem.WriteObject("teams", teams);*/
            Save();
        }

        private void initializeset(ulong id)
        {
            if (!setplayers.ContainsKey(id)) setplayers.Add(id, new settings());
        }

        private static Dictionary<ulong, PLAYERTEAM> teams = new Dictionary<ulong, PLAYERTEAM>();

        class PLAYERTEAM
        {
            public string teamName;
            public ulong teamLeader;
            public List<ulong> members;
        }

        private void OnServerInitialized()
        {
          /*  Debug.LogError("Конец халявы, ищи альтернативу!");
            Server.Command("o.unload Friendsbyfermens");
            return;
            */
            if(config.blacklist == null)
            {
                config.blacklist = new string[] { "MOD", "MODR", "ADMI", "ADM" };
                config.max = 4;
                config.min = 2;
                SaveConfig();
            }
            setplayers = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, settings>>("Friendsbyfermens");
            foreach (var z in BasePlayer.activePlayerList) initializeset(z.userID);
            RelationshipManager.maxTeamSize = config.maxcount;
            var com = Interface.Oxide.GetLibrary<ru.Libraries.Command>(null);
            com.AddChatCommand("friend", this, "COMMANDER");
            com.AddChatCommand("team", this, "COMMANDER");
            com.AddConsoleCommand("friend", this, "CmdConsolecommandinvite");
            com.AddConsoleCommand("team", this, "CmdConsolecommandinvite");
            
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (!player.IsConnected) return;

            if (player.IsReceivingSnapshot)
            {
                timer.Once(1f, () => OnPlayerConnected(player));
                return;
            }

            initializeset(player.userID);
        }

        Dictionary<ulong, settings> setplayers = new Dictionary<ulong, settings>();
        class settings
        {
            public bool ff = true;
            public bool turret = true;
            public bool codelock = true;
        }

        void CmdConsolecommandinvite(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null || !arg.HasArgs()) return;
            COMMANDER(player, "friend", arg.Args);
        }

        private void COMMANDER(BasePlayer player, string command, string[] args)
        {
            if (string.IsNullOrEmpty(command)) command = "friend";
            settings settings;
            if (!setplayers.TryGetValue(player.userID, out settings))
            {
                setplayers.Add(player.userID, new settings());
                settings = setplayers[player.userID];
            }
            if (args != null && args.Length > 0)
            {
                if(args.Length == 2)
                {
                    if (args[0] == "invite")
                    {
                        if (player.Team == null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "Создайте сначала команду!");
                            return;
                        }
                        if (!player.Team.teamLeader.Equals(player.userID))
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "Только лидер команды может приглашать в команду!");
                            return;
                        }
                        var listplayers = BasePlayer.activePlayerList.Where(z => z.displayName.Contains(args[1]));
                        int countfiend = listplayers.Count();
                        if (countfiend == 1)
                        {
                            BasePlayer friend = listplayers.FirstOrDefault();
                            if (friend.Team != null)
                            {
                                player.Command("chat.add", 2, 0, config.prefix + $"Игрок <color=#ff8000>'{friend.displayName}'</color> уже состоит в другой команде.");
                                return;
                            }
                            player.Team.SendInvite(friend);
                            player.Command("chat.add", 2, 0, config.prefix + $"Игроку <color=#ff8000>'{friend.displayName}'</color> отправлено приглашение в команду.");
                        }
                        else if (countfiend.Equals(0))
                        {
                            player.Command("chat.add", 2, 0, config.prefix + $"Игрок <color=#ff8000>'{args[1]}'</color> не найден.");
                            return;
                        }
                        else
                        {
                            player.Command("chat.add", 2, 0, config.prefix + $"Найдено несколько игроков: <color=#ff8000>{string.Join(" ", listplayers.Select(p => p.displayName).ToArray())}</color>");
                            return;
                        }
                    }
                    else if(args[0] == "name")
                    {
                        if (player.Team == null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "У вас нет команды!");
                            return;
                        }

                        if (player.Team.teamLeader != player.userID)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "Только лидер команды может менять тим <color=#ff8000>ТЕГ</color>");
                            return;
                        }

                        if (args[1].Length < config.min || args[1].Length > config.max)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + $"Название должно состоять от 2-х до 4-х символов!\nПример: /{command} name Kuala");
                            return;
                        }
                        string name = args[1].ToUpper();
                        if (config.blacklist.Contains(name) || RelationshipManager.Instance.teams.Any(x => !string.IsNullOrEmpty(x.Value.teamName) && x.Value.teamName == name))
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "Этот тим <color=#ff8000>ТЕГ</color> уже занят!");
                            return;
                        }

                        player.Team.teamName = name;
                        List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                        string text = config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> изменил тим <color=#ff8000>ТЕГ</color> на <color=#32C8C8>{name}</color>";
                        ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                    }
                }
                else if(args.Length == 1)
                {
                    if(args[0] == "create")
                    {
                        if (player.Team != null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "У вас уже есть команда!");
                            return;
                        }
                        player.Command("relationshipmanager.trycreateteam");
                    }
                    else if(args[0] == "ff")
                    {
                        if (player.Team == null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "У вас нет команды!");
                            return;
                        }
                        /*  if (!player.Team.teamLeader.Equals(player.userID))
                          {
                              player.Command("chat.add", 2, 0, config.prefix + "Только лидер команды может менять этот параметр!");
                              return;
                          }*/
                        if (settings.ff)
                        {
                            settings.ff = false;
                            foreach (var z in player.Team.members)
                            {
                                BasePlayer gg = BasePlayer.FindByID(z);
                                if (player == null) continue;
                                gg.Command("chat.add", 2, 0, config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> включил урон по тиммейтам!");
                            }
                        }
                        else
                        {
                            settings.ff = true;
                            List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                            string text = config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> выключил урон по тиммейтам.";
                            ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                        }
                    }
                    else if (args[0] == "codelock")
                    {
                        if (player.Team == null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "У вас нет команды!");
                            return;
                        }
                        if (settings.codelock)
                        {
                            settings.codelock = false;
                            List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                            string text = config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> запретил пользоваться его замками!";
                            ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                        }
                        else
                        {
                            settings.codelock = true;
                            List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                            string text = config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> разрешил пользоваться его замками.";
                            ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                        }
                    }
                    else if (args[0] == "turret")
                    {
                        if (player.Team == null)
                        {
                            player.Command("chat.add", 2, 0, config.prefix + "У вас нет команды!");
                            return;
                        }
                        if (settings.turret)
                        {
                            settings.turret = false;
                            List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                            string text = config.prefix + $"Игрок <color=#ff8000>{player.displayName}</color> отключил автоматическую авторизацию в его турелях!";
                            ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                        }
                        else
                        {
                            settings.turret = true;
                            List<Network.Connection> sendto = Network.Net.sv.connections.Where(x => player.Team.members.Contains(x.userid)).ToList();
                            string text = config.prefix + $"Теперь туррели игрока <color=#ff8000>{player.displayName}</color> для вас безобидны.";
                            ConsoleNetwork.SendClientCommand(sendto, "chat.add", 0, player.UserIDString, text);
                        }
                    }
                }
                
            }
            else
            {
                if (player.Team == null) player.Command("chat.add", 2, 0, config.prefix + $"Создайте сначала команду!\n             <color=#ff8000>/{command} create</color> - создать команду.");
                else player.Command("chat.add", 2, 0, config.prefix + $"\n\n    <color=#FF0077><3</color>     <color=#ff8000>/{command} name</color> <color=#32C8C8>ТЕГ</color> - изменить тим <color=#32C8C8>ТЕГ</color>.\n    <color=#FF0077><3</color>     <color=#ff8000>/{command} invite</color> <color=#32C8C8>никнейм</color> - пригласить в команду \n {onoff(settings.codelock)} <color=#ff8000>/{command} codelock</color> - разрешить тиммейтам пользоваться вашими замками.\n {onoff(setplayers[player.userID].turret)} <color=#ff8000>/{command} turret</color> - авторизовывать тиммейтов в ваших туреллях, когда они на них агряться.\n {onoff(setplayers[player.userID].ff)} <color=#ff8000>/{command} ff</color> - выключить урон по тиммейтам.");
            }
        }

        private bool IsPvp(ulong id)
        {
            settings settings;
            if (!setplayers.TryGetValue(id, out settings)) return true;
            return settings.ff;
        }

        private bool IsTurret(ulong id)
        {
            settings settings;
            if (!setplayers.TryGetValue(id, out settings)) return true;
            return settings.turret;
        }

        private bool IsCodelock(ulong id)
        {
            settings settings;
            if (!setplayers.TryGetValue(id, out settings)) return true;
            return settings.codelock;
        }

        string onoff(bool on)
        {
            if (on) return "<color=#29F500> - On -</color>";
            else return "<color=#FF0B00>- Off -</color>";
        }
    }
}

// --- End of file: Friendsbyfermens.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/LoadingMessages.cs ---
// --- Original Local Path: KualaRust/LoadingMessages.cs ---

﻿using System.Collections.Generic;
using System.Linq;
using Network;
using Newtonsoft.Json;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Oxide.Plugins
{
    [Info("Loading Messages", "CosaNostra/Def", "1.0.6", ResourceId = 2763)]
    [Description("Shows custom texts on loading screen")]
    public class LoadingMessages : RustPlugin
    {
        private readonly Dictionary<ulong, Connection> _clients = new Dictionary<ulong, Connection>();
        private readonly List<ulong> _disconnectedClients = new List<ulong>();

        #region Variables

        private static MsgConfig _config;
        private Timer _timer;
        private List<Connection> _queueConnections;
        private static MsgCollection _messages, _messagesQueue;

        #endregion

        #region Classes

        private class MsgCollection
        {
            public List<MsgEntry> MessagesList;
            public MsgEntry CurrentMessage;
            private int _messageIndex;
            private float _nextMessageChange;

            public void AdvanceMessage()
            {
                if (!_config.EnableCyclicity || Time.realtimeSinceStartup < _nextMessageChange)
                    return;
                _nextMessageChange = Time.realtimeSinceStartup + _config.CyclicityFreq;
                if (_config.EnableRandomCyclicity)
                    CurrentMessage = PickRandom(MessagesList);
                else
                {
                    CurrentMessage = MessagesList[_messageIndex++];
                    if (_messageIndex >= MessagesList.Count)
                        _messageIndex = 0;
                }
            }

            public void SelectFirst() => CurrentMessage = MessagesList.First();
        }

        #endregion

        #region Config

        private class MsgConfig
        {
            [JsonProperty("Text Display Frequency (Seconds)")]
            public float TimerFreq;
            [JsonProperty("Enable Messages Cyclicity")]
            public bool EnableCyclicity;
            [JsonProperty("Use Random Cyclicity (Instead of sequential)")]
            public bool EnableRandomCyclicity;
            [JsonProperty("Cycle Messages Every ~N Seconds")]
            public float CyclicityFreq;
            [JsonProperty("Messages")]
            public List<MsgEntry> Msgs;
            [JsonProperty("Enable Queue Messages")]
            public bool EnableQueueMessages;
            [JsonProperty("Queue Messages")]
            public List<MsgEntry> QueueMsgs;
            public string QueuePosition;
            [JsonProperty("Last Message (When entering game)")]
            public MsgEntry LastMessage;
        }

        private class MsgEntry
        {
            [JsonProperty("Top Status")]
            public string TopString;
            [JsonProperty("Bottom Status")]
            public string BottomString;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<MsgConfig>();
            _messages = new MsgCollection {MessagesList = _config.Msgs};
            _messagesQueue = new MsgCollection {MessagesList = _config.QueueMsgs};
            if (_config.EnableQueueMessages || _config.QueueMsgs != null)
                return;
            _config.QueueMsgs = new List<MsgEntry>
            {
                new MsgEntry{TopString = "<color=#ffff00>You're in queue...</color>", BottomString = "<color=#add8e6>{AHEAD} players ahead of you.</color>"},
                new MsgEntry{TopString = "<color=#add8e6>You're in queue...</color>", BottomString = "<color=#ffff00>{BEHIND} players behind you.</color>"}
            };
            SaveConfig();
            PrintWarning("Detected probably outdated config. New entries added. Check your config.");
        }

        protected override void LoadDefaultConfig()
        {
            _config = new MsgConfig
            {
                TimerFreq = .30f,
                EnableCyclicity = false,
                EnableRandomCyclicity = false,
                CyclicityFreq = 3.0f,
                Msgs = new List<MsgEntry>
                {
                    new MsgEntry{TopString = "<color=#ffff00>Welcome to our server!</color>", BottomString = "<color=#add8e6>Enjoy your stay.</color>"},
                    new MsgEntry{TopString = "<color=#add8e6>Welcome to our server!</color>", BottomString = "<color=#ffff00>Enjoy your stay.</color>"}
                },
                EnableQueueMessages = false,
                QueueMsgs = new List<MsgEntry>
                {
                    new MsgEntry{TopString = "<color=##ffff00>You're in queue...</color>", BottomString = "<color=#add8e6>{AHEAD} players ahead of you.</color>"},
                    new MsgEntry{TopString = "<color=#add8e6>You're in queue...</color>", BottomString = "<color=#ffff00>{BEHIND} players behind you.</color>"}
                },
                LastMessage = new MsgEntry {TopString = "<color=#ffff00>Welcome to our server!</color>", BottomString = "<color=#008000>Entering game...</color>" }
            };
        }

        protected override void SaveConfig() => Config.WriteObject(_config);

        #endregion

        #region Hooks

        private void Unload()
        {
            _messages = null;
            _messagesQueue = null;
            if (_config.EnableQueueMessages)
                ServerMgr.Instance.connectionQueue.nextMessageTime = 0f;
        }

        private void Loaded()
        {
            if (_config?.Msgs == null || _config.Msgs.Count == 0)
            {
                Unsubscribe(nameof(OnUserApprove));
                Unsubscribe(nameof(OnPlayerConnected));
                PrintWarning("No loading messages defined! Check your config.");
                return;
            }
            if (_config.EnableCyclicity && _config.Msgs.Count <= 1)
            {
                _config.EnableCyclicity = false;
                PrintWarning("You have message cyclicity enabled, but only 1 message is defined. Check your config.");
            }

            if (_config.EnableQueueMessages && _config.QueueMsgs == null || _config.QueueMsgs.Count == 0)
            {
                _config.EnableQueueMessages = false;
                PrintWarning("You have queue messages enabled, but no queue messages is defined. Check your config.");
            }

            _messages.SelectFirst();
            if (_config.EnableQueueMessages)
                _messagesQueue.SelectFirst();
        }

        private void OnServerInitialized()
        {
            _queueConnections = ServerMgr.Instance.connectionQueue.queue;
        }

        private void OnUserApprove(Connection connection)
        {
            _clients[connection.userid] = connection;
            if (_timer == null)
                _timer = timer.Every(_config.TimerFreq, HandleClients);
            DisplayMessage(connection, GetCurrentMessage());
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            _clients.Remove(player.userID);
            DisplayMessage(player.Connection, GetLastMessage() ?? GetCurrentMessage());
        }

        #endregion

        #region Logic

        private void HandleClients()
        {
            if (_clients.Count == 0)
            {
                _timer.Destroy();
                _timer = null;
                return;
            }
            UpdateCurrentMessages();
            if (_config.EnableQueueMessages && ServerMgr.Instance.connectionQueue.Queued > 0)
                SuppressDefaultQueueMessage();
            foreach (var client in _clients.Values)
            {
                if (!client.active)
                {
                    _disconnectedClients.Add(client.userid);
                    continue;
                }

                if (client.state == Connection.State.InQueue)
                {
                    if (!_config.EnableQueueMessages)
                        continue;
                    DisplayQueueMessage(client, GetCurrentQueueMessage());
                    continue;
                }
                DisplayMessage(client, GetCurrentMessage());
            }

            if (_disconnectedClients.Count == 0)
                return;
            _disconnectedClients.ForEach(uid=>_clients.Remove(uid));
            _disconnectedClients.Clear();
        }

        private static void DisplayMessage(Connection con, MsgEntry msgEntry)
        {
            if (!Net.sv.write.Start())
                return;
            Net.sv.write.PacketID(Message.Type.Message);
            Net.sv.write.String(msgEntry.TopString);
            Net.sv.write.String(msgEntry.BottomString);
            Net.sv.write.Send(new SendInfo(con));
        }

        private void DisplayQueueMessage(Connection con, MsgEntry msgEntry)
        {
            if (!Net.sv.write.Start())
                return;
            var ahead = GetQueuePosition(con);
            var behind = (ServerMgr.Instance.connectionQueue.Queued - ahead) - 1;
            Net.sv.write.PacketID(Message.Type.Message);
            Net.sv.write.String(msgEntry.TopString);
            Net.sv.write.String(msgEntry.BottomString.Replace("{AHEAD}", ahead.ToString()).Replace("{BEHIND}", behind.ToString()));
            Net.sv.write.Send(new SendInfo(con));
        }

        #endregion

        #region Utils

        private static T PickRandom<T>(IReadOnlyList<T> list) => list[Random.Range(0, list.Count - 1)];
        private static MsgEntry GetCurrentMessage() => _messages.CurrentMessage;
        private static MsgEntry GetLastMessage() => _config.LastMessage;
        private static MsgEntry GetCurrentQueueMessage() => _messagesQueue.CurrentMessage;
        private static MsgCollection GetMessagesCollection() => _messages;
        private static MsgCollection GetQueueMessagesCollection() => _messagesQueue;
        private static void UpdateCurrentMessages()
        {
            GetMessagesCollection().AdvanceMessage();;
            GetQueueMessagesCollection().AdvanceMessage();
        }
        private int GetQueuePosition(Connection con) => _queueConnections.IndexOf(con);
        private static void SuppressDefaultQueueMessage() => ServerMgr.Instance.connectionQueue.nextMessageTime = float.MaxValue;

        #endregion
    }
}

// --- End of file: LoadingMessages.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/NeverWear.cs ---
// --- Original Local Path: KualaRust/NeverWear.cs ---

﻿using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("NeverWear", "k1lly0u", "0.1.4", ResourceId = 1816)]
    class NeverWear : RustPlugin
    {
        void Loaded() => RegisterPermissions();
        void OnServerInitialized() => LoadVariables();
        private void RegisterPermissions()
        {
            permission.RegisterPermission("neverwear.use", this);
            permission.RegisterPermission("neverwear.attire", this);
            permission.RegisterPermission("neverwear.weapons", this);
            permission.RegisterPermission("neverwear.tools", this);
        }
        private bool HasPerm(BasePlayer player, string perm)
        {
            if (permission.UserHasPermission(player.UserIDString, perm)) return true;
            return false;
        }
        void OnLoseCondition(Item item, ref float amount)
        {
            if (item != null)
            {
                BasePlayer player;
                if (item.GetOwnerPlayer() == null)
                {
                    if (item?.info == null) return;
                    if (!item.info.shortname.Contains("mod")) return;
                    player = item?.GetRootContainer()?.GetOwnerPlayer();
                    if (player == null)
                        return;
                }
                else player = item.GetOwnerPlayer();
                if (player != null)
                {
                    var def = ItemManager.FindItemDefinition(item.info.itemid);
                    if ((configData.useWhiteList && configData.WhitelistedItems.Contains(def.shortname) && HasPerm(player, "neverwear.use"))
                        || (def.category == ItemCategory.Weapon && configData.useWeapons && HasPerm(player, "neverwear.weapons"))
                        || (def.category == ItemCategory.Attire && configData.useAttire && HasPerm(player, "neverwear.attire"))
                        || (def.category == ItemCategory.Tool && configData.useTools && HasPerm(player, "neverwear.tools")))
                        if (item.hasCondition)
                            item.RepairCondition(amount);
                }
            }          
            return;
        }

        #region Config        
        private ConfigData configData;
        class ConfigData
        {
            public bool useWeapons { get; set; }
            public bool useTools { get; set; }            
            public bool useAttire { get; set; }
            public bool useWhiteList { get; set; }
            public List<string> WhitelistedItems { get; set; }
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                useTools = true,
                useAttire = false,
                useWeapons = false,
                useWhiteList = false,
                WhitelistedItems = new List<string>
                {
                    "hatchet",
                    "pickaxe",
                    "rifle.bolt",
                    "rifle.ak"
                }
            };
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion
    }
}

// --- End of file: NeverWear.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/AntiCheat.cs ---
// --- Original Local Path: KualaRust/AntiCheat.cs ---

﻿using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using ProtoBuf;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
namespace Oxide.Plugins {[Info("AntiCheat", "vk.com/rust_fans", "2.2.21")] class AntiCheat : RustPlugin { static AntiCheat instance; class DataStorage { public Dictionary<ulong, ADMINDATA> AdminData = new Dictionary<ulong, ADMINDATA>(); public DataStorage() { } } class ADMINDATA { public string Name; public bool Check; } DataStorage adata; private DynamicConfigFile AdminData; static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0); void LoadData() { try { PlayersListed = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, PlayerAntiCheat>>("AntiCheat/PlayerAntiCheat"); adata = Interface.GetMod().DataFileSystem.ReadObject<DataStorage>("AntiCheat/AdminData"); if (adata == null) { PrintError("AntiCheat/AdminData is null! Create new database"); adata = new DataStorage(); SaveDataAdmin(); } if (PlayersListed == null) { PrintError("AntiCheat/PlayerAntiCheat is null! Create new database"); PlayersListed = new Dictionary<ulong, PlayerAntiCheat>(); SavePlayerData(); } } catch { adata = new DataStorage(); PlayersListed = new Dictionary<ulong, PlayerAntiCheat>(); } } static int b = 0; int DetectCountMacros = 10; int DetectPerMacros = 80; int DetectCountFSH = 10; bool SHEnable = true; bool FHEnable = true; bool SHEnabled = true; bool FHEnabled = true; bool MCREnabled = true; bool AIMEnabled = true; bool EnabledSilentAim = true; bool SHKickEnabled = false; bool FHKickEnabled = false; bool AntiRecoilEnabled = true; bool AIMLOCKEnabledBAN = true; bool AIMHACKEnabledBAN = true; static bool SendsLogs = true; float AimPercent = 50; float AimPercentOverCount = 40f; static bool textureenable = true; bool init = true; private List<string> ListWeapons = new List<string>() { "rifle.ak", "lmg.m249", }; protected override void LoadDefaultConfig() { Config.Clear(); LoadConfigValues(); } private void LoadConfigValues() { GetConfig("[Основное]", "Включить проверку на СпидХак?", ref SHEnable); GetConfig("[Основное]", "Включить проверку на ФлайХак?", ref FHEnable); GetConfig("[Макрос]", "Включить проверку на Макрос", ref AntiRecoilEnabled); var _ListWeapons = new List<object>() { "rifle.ak" }; GetConfig("[Макрос]", "Список оружия, на какие действует проверка", ref _ListWeapons); ListWeapons = _ListWeapons.Select(p => p.ToString()).ToList(); GetConfig("[Основное]", "Включить автоматический бан за AIMLOCK", ref AIMLOCKEnabledBAN); GetConfig("[Основное]", "Включить автоматический бан за AIMHACK", ref AIMHACKEnabledBAN); GetConfig("[Макрос]", "Включить автоматический бан за макрос", ref MCREnabled); GetConfig("[Макрос]", "Количество детектов для автоматического бана за Макрос:", ref DetectCountMacros); GetConfig("[Макрос]", "С какого процента начинать считать проверку на Макрос? (0-100%):", ref DetectPerMacros); GetConfig("[Общее]", "Включить бан игроков за SpeedHack (Превышающее количество детектов)", ref SHEnabled); GetConfig("[Основное]", "Включить kick игроков за SpeedHack (При каждом детекте)", ref SHKickEnabled); GetConfig("[Общее]", "Включить бан игроков за FlyHack (Превышающее количество детектов)", ref FHEnabled); GetConfig("[Основное]", "Включить kick игроков за FlyHack (При каждом детекте)", ref FHKickEnabled); GetConfig("[Общее]", "Количество детектов для автоматического бана (FlyHack and SpeedHack):", ref DetectCountFSH); GetConfig("[Основное]", "Включить отправку детектов в чат (По привилегии)?", ref SendsLogs); GetConfig("[Аим]", "Процент попадания в голову для автоматического бана:", ref AimPercent); GetConfig("[Аим]", "Включить автоматический бан за Аим", ref AIMEnabled); GetConfig("[Аим]", "Количество попаданий для автоматического бана, если процент попадания больше зазначеного в конфиге:", ref AimPercentOverCount); GetConfig("[Аим]", "Включить проверку на SilentAim?", ref EnabledSilentAim); GetConfig("[Основное]", "Включить проверку на проникновение в текстуры (Пока тестируеться)?", ref textureenable); SaveConfig(); } private void GetConfig<T>(string menu, string Key, ref T var) { if (Config[menu, Key] != null) { var = (T)Convert.ChangeType(Config[menu, Key], typeof(T)); } Config[menu, Key] = var; } static int PlayerLayer = LayerMask.NameToLayer("Player (Server)"); static int constructionColl = LayerMask.GetMask(new string[] { "Construction" }); void Loaded() { LoadConfigValues(); } int raycastCount = 0; void OnServerInitialized() { instance = this; LoadData(); LoadDefaultConfig(); foreach (var player in BasePlayer.activePlayerList) { OnPlayerConnected(player); } permission.RegisterPermission("anticheat.toggleadmin", this); permission.RegisterPermission("anticheat.sendlogs", this); Interface.Oxide.GetLibrary<Game.Rust.Libraries.Command>().AddConsoleCommand("aim.check", this, "AimCheck"); Interface.Oxide.GetLibrary<Game.Rust.Libraries.Command>().AddConsoleCommand("aim.server", this, "AimCheckServer"); Interface.Oxide.GetLibrary<Game.Rust.Libraries.Command>().AddConsoleCommand("check.server", this, "CheckServer"); foreach (var player in BasePlayer.activePlayerList) CreateInfo(player); init = true; timer.Repeat(360, 0, () => SaveAllDate()); } void SaveAllDate() { if (!init) return; SavePlayerData(); SaveDataAdmin(); }[ConsoleCommand("ban.user")] private void cmdBan(ConsoleSystem.Arg arg) { var date = DateTime.Now.ToLocalTime().ToShortDateString(); if (arg.Args == null || arg.Args.Length < 2) { arg.ReplyWith("Неверный синтаксис! Используйте ban.user <SteamID> <Причина>"); return; } ulong targetId; if (!ulong.TryParse(arg.Args[0], out targetId)) { arg.ReplyWith("Нужно ввести SteamID игрока какого хотите забанить"); return; } if (!PlayersListed.ContainsKey(targetId)) PlayersListed.Add(targetId, new PlayerAntiCheat() { Name = "null", Deaths = 0, Killed = 0, Heads = 0, Hits = 0, Banned = true, Date = date, Reason = arg.Args[1], BanCreator = arg.Player() != null ? arg.Player().displayName : "Console" }); else { PlayersListed[targetId].Banned = true; PlayersListed[targetId].Date = date; PlayersListed[targetId].Reason = arg.Args[1]; PlayersListed[targetId].BanCreator = arg.Player() != null ? arg.Player().displayName : "Console"; } BasePlayer target = BasePlayer.FindByID(targetId); if (target != null && target.IsConnected) { Kick(target, $"Вы были забанены. Причина: {arg.Args[1]}"); } arg.ReplyWith($"{arg.Args[0]} забанен. Причина: {arg.Args[1]}!"); }[ConsoleCommand("banlist")] private void BanListedPlayers(ConsoleSystem.Arg arg) { var bans = PlayersListed.Where(p => p.Value.Banned).Select(p => $"Игрок {p.Value.Name} ({p.Key})- Кто выдал: {p.Value.BanCreator} Дата: {p.Value.Date} Причина: {p.Value.Reason}").ToList(); if (bans.Count > 0) arg.ReplyWith(string.Join("\n ", bans)); else arg.ReplyWith("Список банов пустой"); }[ConsoleCommand("unban.user")] private void UnbanCommand(ConsoleSystem.Arg arg) { if (arg.Player() != null && !arg.Player().IsAdmin) { return; } if (arg.Args == null || arg.Args.Length != 1) { arg.ReplyWith("Неверный синтаксис! Используйте unban.user <SteamID>"); return; } ulong target; if (!ulong.TryParse(arg.Args[0], out target)) { arg.ReplyWith("Нужно ввести SteamID игрока какого хотите разбанить"); return; } if (PlayersListed.ContainsKey(target)) { PlayersListed[target].Banned = false; PlayersListed[target].Date = ""; PlayersListed[target].Reason = ""; } arg.ReplyWith($"{arg.Args[0]} разбанен"); } object OnPlayerAttack(BasePlayer player, HitInfo info) { if (EnabledSilentAim) { if (player != null && info.HitEntity != null && info.HitEntity is BasePlayer) { float y = Mathf.Abs(info.HitPositionWorld.y - info.HitEntity.CenterPoint().y); if (y > 2f) { var messages = $"Обнаружен SilentAim! Стрельба с {y} м."; PrintWarning($"[{DateTime.Now.ToShortTimeString()}] - (SilentAim) {player.displayName}({player.UserIDString})| Обнаружен SilentAim! Стрельба с {y} м."); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (SilentAim) {player.displayName}({player.UserIDString})| Обнаружен SilentAim! Стрельба с {y} м.", this, true); return true; } } } return null; } object CanUserLogin(string name, string id, string ip) { if (PlayersListed.ContainsKey(ulong.Parse(id))) { if (PlayersListed[ulong.Parse(id)].Banned) return $"Вы забанены на данном сервере!"; } return null; } public List<BasePlayer> Players => BasePlayer.activePlayerList.ToList(); public BasePlayer FindById(ulong id, ulong playerid = 1171488) { foreach (var player in Players) { if (!id.Equals(player.userID)) continue; return player; } return null; } public bool IsConnected(BasePlayer player) => BasePlayer.activePlayerList.Contains(player); public void Kick(BasePlayer player, string reason = "") => player.Kick(reason); public bool IsBanned(ulong id) => ServerUsers.Is(id, ServerUsers.UserGroup.Banned); public void Ban(ulong id, string reason = "") { if (IsBanned(id)) return; var player = FindById(id); ServerUsers.Set(id, ServerUsers.UserGroup.Banned, player?.displayName ?? "Unknown", reason); ServerUsers.Save(); if (player != null && IsConnected(player)) Kick(player, reason); } private readonly Dictionary<ulong, AimLockData> aimlock = new Dictionary<ulong, AimLockData>(); public class AimLockData { public int Ticks = 1; public string Body = ""; } private bool IsNPC(BasePlayer player) { if (player == null) return false; if (player is NPCPlayer) return true; if (!(player.userID >= 76560000000000000L || player.userID <= 0L) || player.userID.ToString().Length < 17) return true; return false; } private void OnEntityDeath(BaseCombatEntity entity, HitInfo info) { try { if (entity == null || entity?.net?.ID == null || info == null) return; var victim = entity as BasePlayer; if (victim == null) return; if (IsNPC(victim)) return; if (victim.GetComponent<NPCPlayer>() != null) return; if (victim is BasePlayer) { if (victim.IsSleeping()) return; if (PlayersListed.ContainsKey(victim.userID)) { PlayersListed[victim.userID].Deaths += 1; } } BasePlayer attacker = info.Initiator.ToPlayer(); if (attacker == null || attacker.GetComponent<NPCPlayer>() != null) return; if (IsNPC(attacker)) return; if (attacker == victim) return; if (info?.Initiator is BasePlayer) { if (PlayersListed.ContainsKey(attacker.userID)) PlayersListed[attacker.userID].Killed += 1; } double aim = Math.Floor((PlayersListed[attacker.userID].Heads * 1f / PlayersListed[attacker.userID].Hits * 1f) * 100f); double kdr = Math.Round(PlayersListed[attacker.userID].Killed * 1f / PlayersListed[attacker.userID].Deaths * 1f, 2); if (PlayersListed[attacker.userID].Hits > AimPercentOverCount && aim > AimPercent && kdr > 2 && AIMEnabled) { var messages = $"<color=#ffa500>[Античит детект]</color> (AimLock) {attacker.displayName}! Соотношение попаданий в голову {aim}% и КДР - ({kdr}) аномальные!"; foreach (var admin in BasePlayer.activePlayerList) SendDetection(admin, messages); if (AIMLOCKEnabledBAN) { Debug.LogWarning($"[Анти-чит] {attacker.displayName}({attacker.UserIDString}) забанен! Причина: AimLock!"); Ban(attacker.userID, "[Анти-чит] AimLock"); LogToFile("ban", $"[{DateTime.Now.ToShortTimeString()}] - {attacker.displayName}({attacker.UserIDString}) забанен! Соотношение попаданий в голову {aim}% и КДР - ({kdr}) аномальные!", this, true); } } } catch (NullReferenceException) { } } private double GrabCurrentTime() => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds; private double LastAttack; object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info) { try { if (entity == null || entity?.net?.ID == null) return null; BasePlayer attacker = info.Initiator.ToPlayer(); if (attacker == null) return null; if (attacker.GetComponent<NPCPlayer>() != null) return null; var victim = entity as BasePlayer; if (victim == null) return null; if (victim.GetComponent<NPCPlayer>() != null) return null; if (IsNPC(attacker) || IsNPC(victim)) return null; var distance = info.Initiator.Distance(victim.transform.position); if (distance > 10) { AimLockData bodylock; if (!aimlock.TryGetValue(attacker.userID, out bodylock)) aimlock.Add(attacker.userID, bodylock = new AimLockData()); var _bodyPart = entity?.skeletonProperties?.FindBone(info.HitBone)?.name?.english ?? ""; if (_bodyPart == "") return null; var time = GrabCurrentTime() - LastAttack; if ((time > 30)) bodylock.Ticks = 1; if (bodylock.Body == _bodyPart && _bodyPart != "lower spine") bodylock.Ticks++; else bodylock.Ticks = 1; if (bodylock.Ticks > 5) { var messages = $"Обнаружен АимЛок! Обнаружений {bodylock.Ticks} |  {bodylock?.Body ?? ""} | {distance} м."; Debug.LogWarning($"[Анти-чит] {attacker.displayName}({attacker.UserIDString}) Обнаружен АимЛок! Обнаружений {bodylock.Ticks} |  {bodylock?.Body ?? ""} | {distance} м."); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (АимЛок) {attacker.displayName}({attacker.UserIDString})| обнаружений {bodylock.Ticks} |  {bodylock?.Body ?? ""} | {distance} м.", this, true); bodylock.Ticks = 1; } bodylock.Body = _bodyPart; if (PlayersListed.ContainsKey(attacker.userID)) { PlayersListed[attacker.userID].Hits++; if (info.isHeadshot) PlayersListed[attacker.userID].Heads++; } double aim = Math.Floor((PlayersListed[attacker.userID].Heads / PlayersListed[attacker.userID].Hits) * 100f); if (PlayersListed[attacker.userID].Hits > AimPercentOverCount && aim > AimPercent && AIMEnabled) { var messages = $"<color=#ffa500>[Античит детект]</color> AimHack {attacker.displayName}({attacker.UserIDString})! Процент попаданий в голову слишком большой {aim}%"; foreach (var admin in BasePlayer.activePlayerList) SendDetection(admin, messages); if (AIMHACKEnabledBAN) { Debug.LogWarning($"[Анти-чит] {attacker.displayName}({attacker.UserIDString}) забанен! Причина: AimHack!"); Ban(attacker.userID, "[Анти-чит] AimHack"); LogToFile("ban", $"[{DateTime.Now.ToShortTimeString()}] - {attacker.displayName}({attacker.UserIDString}) забанен! Процент попаданий в голову слишком большой {aim}%", this, true); } } LastAttack = GrabCurrentTime(); } } catch (NullReferenceException) { } return null; }[ChatCommand("ac")] void cmdChatDetect(BasePlayer player, string command, string[] args) { if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, "anticheat.toggleadmin")) { SendReply(player, "У вас нету привилегии использовать эту команду"); return; } if (adata.AdminData.ContainsKey(player.userID)) { if (adata.AdminData[player.userID].Check) { adata.AdminData[player.userID].Check = adata.AdminData[player.userID].Check = false; SendReply(player, "Админ дебаг выключен. Вас не детектит."); return; } else { adata.AdminData[player.userID].Check = adata.AdminData[player.userID].Check = true; SendReply(player, "Админ дебаг включен. Вас детектит."); } } else { SendReply(player, "Вас нету в базе администраторов, пожалуйста перезейдите!"); } }[HookMethod("AimCheck")] private void AimCheck(ConsoleSystem.Arg arg) { if (arg.Player() != null && !arg.Player().IsAdmin && !arg.Player()) { return; } if (arg.Args == null || arg.Args.Length < 1) { arg.ReplyWith("Неверный синтаксис! Используйте aim.check <SteamID>"); return; } if (arg.Args.Length == 1) { ulong FindPlayer; if (!ulong.TryParse(arg.Args[0], out FindPlayer)) { arg.ReplyWith("Нужно ввести SteamID игрока!"); return; } var check = PlayersListed.ContainsKey(FindPlayer); if (check) { var target = PlayersListed[FindPlayer]; double aim = target.Hits > 0 ? target.Heads > 0 ? target.Hits / target.Heads * 100 : 0 : 0; arg.ReplyWith($"[Анти-чит] {target.Name}: Aim: {aim}% при {target.Hits} попаданиях (с растояния 10 метров и выше)"); } else { arg.ReplyWith("Игрока не найдено!"); } } return; }[HookMethod("AimCheckServer")] private void AimCheckServer(ConsoleSystem.Arg arg) { if (arg.Player() != null && !arg.Player().IsAdmin) { return; } double popa = 0; double head = 0; var Top = (from x in PlayersListed select x); foreach (var top in Top) { popa = popa + top.Value.Hits; head = head + top.Value.Heads; } arg.ReplyWith($"[Анти-чит]: В голову попадают в {Math.Floor((head * 1f / popa * 1f) * 100f)}% случаев (с растояния 10 метров и выше)"); return; }[HookMethod("CheckServer")] private void CheckServer(ConsoleSystem.Arg arg) { if (arg.Player() != null && !arg.Player().IsAdmin) { return; } int i = 0; string players = ""; var reply = 28117; if (reply == 0) { } double popa = 0; double head = 0; string aimdesc = ""; var Top = (from x in PlayersListed select x); foreach (var top in Top) { popa = popa + top.Value.Hits; head = head + top.Value.Heads; } double aimserver = Math.Floor((head * 1f / popa * 1f) * 100f); players = "----------------------------------Игроки---------------------------------- \n"; foreach (var player in BasePlayer.activePlayerList) { if (PlayersListed.ContainsKey(player.userID)) { var playerKey = PlayersListed[player.userID]; if (playerKey.Deaths == 0) playerKey.Deaths = 1; if (playerKey.Hits == 0) playerKey.Hits = 1; double aimprocent = Math.Floor((playerKey.Heads * 1f / playerKey.Hits * 1f) * 100f); double kdr = Math.Round(playerKey.Killed * 1f / playerKey.Deaths * 1f, 2); double razn = aimserver - aimprocent; if (playerKey.Hits < 30 || playerKey.Killed < 10) { aimdesc = "Новый игрок"; } else if (razn > -5 && razn > 5 && kdr < 2) { aimdesc = "Простой игрок"; } else if (razn > -5 && razn > 5 && kdr < 3) { aimdesc = "Подозрительный игрок"; } else if (razn > -5 && razn > 5 && kdr >= 3) { aimdesc = "Очень подозрительный игрок"; } else if (razn > -5 && razn < -8 && kdr < 2) { aimdesc = "Игрок с хорошей точностью в голову"; } else if (razn > -5 && razn < -8 && kdr < 3) { aimdesc = "Скилловый игрок"; } else if (razn > -5 && razn < -8 && kdr < 4) { aimdesc = "Подозрительный игрок"; } if (razn > -5 && razn < -8 && kdr >= 4) { aimdesc = "Читер"; } else if (razn > 5 && razn < 8 && kdr < 1) { aimdesc = "Игрок со слабым скиллом"; } else if (razn > 5 && razn < 8 && kdr < 2) { aimdesc = "Подозрительный игрок"; } else if (razn > 5 && razn < 8 && kdr < 3) { aimdesc = "Очень подозрительный игрок"; } if (razn > 5 && razn < 8 && kdr >= 4) { aimdesc = "Читер"; } i++; players = players + $"{i}. {player.displayName} ({player.userID}) | aim: {aimprocent}% | kdr {kdr} | {aimdesc} \n"; } } arg.ReplyWith(players + "-------------------------------------------------------------------------------"); } void Unload() { DestroyAll<PlayerHack>(); SavePlayerData(); SaveDataAdmin(); } void DestroyAll<T>() { UnityEngine.Object[] objects = GameObject.FindObjectsOfType(typeof(T)); if (objects != null) foreach (UnityEngine.Object gameObj in objects) GameObject.Destroy(gameObj); } void OnPlayerConnected(BasePlayer player) { if (player == null) return; if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, "anticheat.toggleadmin")) { if (!adata.AdminData.ContainsKey(player.userID)) { adata.AdminData.Add(player.userID, new ADMINDATA() { Name = player.displayName, Check = false, }); } else { adata.AdminData[player.userID].Name = player.displayName; } if (adata.AdminData[player.userID].Check) SendReply(player, "<color=RED>Внимание!</color> У вас включен админ дебаг. Советуем его отключить (/ac)"); } else if (adata.AdminData.ContainsKey(player.userID)) if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, "anticheat.toggleadmin")) { adata.AdminData[player.userID].Check = adata.AdminData[player.userID].Check = true; } if (!PlayersListed.ContainsKey(player.userID)) CreateInfo(player); else { if (player.displayName != PlayersListed[player.userID].Name) PlayersListed[player.userID].Name = player.displayName; } new PluginTimers(this).Once(2f, () => CheckFLY(player)); timer.Once(1f, () => RefreshPlayer(player)); } void RefreshPlayer(BasePlayer player) { if (player.GetComponent<PlayerHack>() == null) player.gameObject.AddComponent<PlayerHack>(); } private void AutoBan(BasePlayer player, string reason) { if (b == DetectCountFSH) { Ban(player.userID, "[Анти-чит] Banned: вы были забанены на сервере."); LogToFile("ban", $"[{DateTime.Now.ToShortTimeString()}] -  Ban: Reason - {reason} {player.displayName}({player.UserIDString}) забанен! Количество детектов привысило заданный предел.  Предупреждений: {b + 1}", this, true); } } private void CheckFLY(BasePlayer player) { if (player == null) return; if (!player.IsConnected) return; var position = player.transform.position; int f = 0; new PluginTimers(this).Repeat(2f, 0, () => { if (!player.IsConnected) return; if (adata.AdminData.ContainsKey(player.userID)) { if (!adata.AdminData[player.userID].Check) return; } if (player.IsFlying && !player.IsSwimming() && !player.IsDead() && !player.IsSleeping() && !player.IsWounded()) { f++; if (f >= 1) { if (b == DetectCountFSH && FHEnabled) { AutoBan(player, "FlyHack"); } else { if (FHKickEnabled) { Kick(player, "[Анти-чит] Обнаружен FlyHack"); Debug.LogError($"[Анти-чит], {player.displayName}, ({player.UserIDString}) кикнут! Причина: FlyHack!"); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (FlyHack) Игрок {player.displayName}({player.UserIDString}) кикнут! Слишком долго находился в воздухе! Предупреждений: {b + 1}", this, true); } SendDetection(player, string.Format("<color=#ffa500>[Античит детект]</color> " + "(FLYHack) Игрок" + player.displayName + $" Слишком долго находиться в воздухе! Предупреждений: {b + 1}")); var messages = $"Обнаружен FlyHack Предупреждений: {b + 1}"; Debug.LogWarning($"[Анти-чит] {player.displayName}({player.UserIDString}) Обнаружен FlyHack Предупреждений: {b + 1}"); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (FlyHack) У игрок {player.displayName}({player.UserIDString}) обнаружен FlyHack Предупреждений: {b + 1}", this, true); b++; return; } } } else { f = 0; } }); } public class PlayerHack : MonoBehaviour { public BasePlayer player; public Vector3 lastPosition; public Vector3 currentDirection; public bool isonGround; public float Distance3D; public float VerticalDistance; public float deltaTick; public float speedHackDetections = 0f; public double currentTick; public double lastTick; public double lastTickFly; public double lastTickSpeed; void Awake() { player = GetComponent<BasePlayer>(); InvokeRepeating("CheckPlayer", 1f, 1f); lastPosition = player.transform.position; } static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0); static double CurrentTime() { return DateTime.UtcNow.Subtract(epoch).TotalMilliseconds; } static List<PlayerHack> fpsCalled = new List<PlayerHack>(); static double fpsTime; static bool fpsCheckCalled = false; static void CheckForHacks(PlayerHack hack) { CheckForSpeedHack(hack); } static int fpsIgnore = 30; void CheckPlayer() { if (!player.IsConnected) GameObject.Destroy(this); currentTick = CurrentTime(); deltaTick = (float)((currentTick - lastTick) / 1000.0); Distance3D = Vector3.Distance(player.transform.position, lastPosition) / deltaTick; VerticalDistance = (player.transform.position.y - lastPosition.y) / deltaTick; currentDirection = (player.transform.position - lastPosition).normalized; isonGround = player.IsOnGround(); if (!player.IsWounded() && !player.IsDead() && !player.IsSleeping() && deltaTick < 1.1f && Performance.current.frameRate > fpsIgnore) CheckForHacks(this); lastPosition = player.transform.position; if (fpsCheckCalled) if (!fpsCalled.Contains(this)) { fpsCalled.Add(this); fpsTime += (CurrentTime() - currentTick); } lastTick = currentTick; } } static float minSpeedPerSecond = 10f; static double LogTime() { return DateTime.UtcNow.Subtract(epoch).TotalSeconds; } static Vector3 lastGroundPosition; static void CheckForSpeedHack(PlayerHack hack) { if (instance.adata.AdminData.ContainsKey(hack.player.userID)) { if (!instance.adata.AdminData[hack.player.userID].Check) return; } RaycastHit hit; if (Physics.Raycast(hack.player.transform.position, Vector3.down, out hit, LayerMask.GetMask("Construction"))) { if (hit.transform.position != lastGroundPosition) return; lastGroundPosition = hit.transform.position; } if (hack.Distance3D < minSpeedPerSecond) return; if (hack.VerticalDistance < -8f) return; if (hack.lastTickSpeed == hack.lastTick) { if (hack.player.IsSwimming() && hack.player.IsDead() && hack.player.IsSleeping() && hack.player.IsWounded()) return; if (hack.player.GetMounted()) return; hack.speedHackDetections++; if (instance.SHEnable) { if (hack.player.IsOnGround()) { if (b == instance.DetectCountFSH && instance.SHEnabled) { instance.AutoBan(hack.player, "SpeedHack"); instance.LogToFile("ban", $"[{DateTime.Now.ToShortTimeString()}] - (Speedhack) Игрок {hack.player.displayName}({hack.player.UserIDString}) забанен! Двигался со скоростью выше нормы. Предупреждений: {b + 1}", AntiCheat.instance, true); } else { if (instance.SHKickEnabled) { instance.Kick(hack.player, "[Анти-чит] Обнаружен SpeedHack"); Debug.LogError($"[Анти-чит] {hack.player.displayName}({hack.player.UserIDString}) кикнут! Причина: SpeedHack!"); } var messages = $"Обнаружен Speedhack ({hack.Distance3D.ToString()} м/с) Предупреждений: {b + 1}"; instance.LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (Speedhack) Игрок {hack.player.displayName}({hack.player.UserIDString}) двигаеться со скоростью выше нормы. Предупреждений: {b + 1}", AntiCheat.instance, true); instance.SendDetection(hack.player, string.Format($"<color=#ffa500>[Античит детект]</color> (SPEEDHack) Игрок {hack.player.displayName}({hack.player.UserIDString}) двигаеться со скоростью выше нормы. Предупреждений: {b + 1}")); UnityEngine.Debug.LogError($"[Анти-чит] Игрок {hack.player.displayName}({hack.player.UserIDString}) двигаеться со скоростью выше нормы. Предупреждений: {b + 1}"); b++; } } } } else { hack.speedHackDetections = 0f; } hack.lastTickSpeed = hack.currentTick; } static int bulletmask; static DamageTypeList emptyDamage = new DamageTypeList(); static Vector3 VectorDown = new Vector3(0f, -1f, 0f); static Hash<BasePlayer, float> lastWallhack = new Hash<BasePlayer, float>(); Hash<ulong, ColliderCheckTest> playerWallcheck = new Hash<ulong, ColliderCheckTest>(); static RaycastHit cachedRaycasthit;[HookMethod("WallhackKillCheck")] private void WallhackKillCheck(BasePlayer player, BasePlayer attacker, HitInfo hitInfo) { if (adata.AdminData.ContainsKey(player.userID)) { if (adata.AdminData[player.userID].Check == false) return; } if (Physics.Linecast(attacker.eyes.position, hitInfo.HitPositionWorld, out cachedRaycasthit, bulletmask)) { BuildingBlock block = cachedRaycasthit.collider.GetComponentInParent<BuildingBlock>(); if (block != null) { if (block.blockDefinition.hierachyName == "wall.window") return; CancelDamage(hitInfo); if (Time.realtimeSinceStartup - lastWallhack[attacker] > 0.5f) { lastWallhack[attacker] = Time.realtimeSinceStartup; UnityEngine.Debug.LogError($"WalhackAttack обнаружен у {player.displayName}"); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (WalhackAttack) {player.displayName}({player.UserIDString}) нанес урон через препятствие!", this, true); SendDetection(player, string.Format("<color=#ffa500>[Античит детект]</color> " + "(WalhackAttack) " + player.displayName + " нанес урон через препятствие!")); } } } } private void CancelDamage(HitInfo hitinfo) { hitinfo.damageTypes = emptyDamage; hitinfo.HitEntity = null; } private readonly Dictionary<ulong, NoRecoilData> data = new Dictionary<ulong, NoRecoilData>(); private readonly Dictionary<ulong, Timer> detections = new Dictionary<ulong, Timer>(); private readonly int detectionDiscardSeconds = 300; private readonly int violationProbability = 30; private readonly int maximumViolations = 30; private readonly Dictionary<string, int> probabilityModifiers = new Dictionary<string, int>() { { "weapon.mod.muzzleboost", -5 }, { "weapon.mod.silencer", -5 }, { "weapon.mod.holosight", -5 }, { "crouching", -8 }, { "aiming", -5 } }; private readonly List<string> blacklistedAttachments = new List<string>() { "weapon.mod.muzzlebreak", "weapon.mod.silencer", "weapon.mod.small.scope" }; public class NoRecoilData { public int Ticks = 0; public int Count; public int Violations; } void OnWeaponFired(BaseProjectile projectile, BasePlayer player, ItemModProjectile mod, ProjectileShoot projectiles) { if (!AntiRecoilEnabled) return; if (player == null) return; if (IsNPC(player)) return; if (adata.AdminData.ContainsKey(player.userID)) if (!adata.AdminData[player.userID].Check) return; var item = player.GetActiveItem(); if (item == null) return; if (!(ListWeapons.Contains(item.info.shortname))) return; var counts = 0; foreach (Item attachment in item.contents.itemList) if (attachment.info.shortname == "weapon.mod.muzzlebrake" || attachment.info.shortname == "weapon.mod.holosight") counts++; if (counts == 2) return; if (item.contents.itemList.Any(x => blacklistedAttachments.Contains(x.info.shortname))) return; NoRecoilData info; if (!data.TryGetValue(player.userID, out info)) data.Add(player.userID, info = new NoRecoilData()); Vector3 eyesDirection = player.eyes.HeadForward(); if (eyesDirection.y < -0.80) return; info.Ticks++; int probModifier = 0; foreach (Item attachment in item.contents.itemList) if (probabilityModifiers.ContainsKey(attachment.info.shortname)) probModifier += probabilityModifiers[attachment.info.shortname]; if (player.modelState.aiming && probabilityModifiers.ContainsKey("aiming")) probModifier += probabilityModifiers["aiming"]; if (player.IsDucked() && probabilityModifiers.ContainsKey("crouching")) probModifier += probabilityModifiers["crouching"]; Timer detectionTimer; if (detections.TryGetValue(player.userID, out detectionTimer)) detectionTimer.Reset(detectionDiscardSeconds); else detections.Add(player.userID, timer.Once(detectionDiscardSeconds, delegate () { if (info.Violations > 0) info.Violations--; })); timer.Once(0.5f, () => { ProcessRecoil(projectile, player, mod, projectiles, info, probModifier, eyesDirection); }); } private void ProcessRecoil(BaseProjectile projectile, BasePlayer player, ItemModProjectile mod, ProjectileShoot projectileShoot, NoRecoilData info, int probModifier, Vector3 eyesDirection) { if (projectile == null || player == null || mod == null || projectileShoot == null || info == null || eyesDirection == null) return; var nextEyesDirection = player.eyes.HeadForward(); if (Math.Abs(nextEyesDirection.y - eyesDirection.y) < .009 && nextEyesDirection.y < .8) info.Count++; if (info.Ticks <= 10) return; var prob = 100 * info.Count / info.Ticks; var item = player.GetActiveItem(); if (prob > ((100 - violationProbability) + probModifier)) { if (prob > 100) prob = 100; if (prob < DetectPerMacros) return; info.Violations++; Debug.LogError("(Макрос) " + player.displayName + " SteamID " + player.UserIDString + ": вероятность " + string.Format("{0}", prob) + "% | обнаружений " + info.Violations.ToString() + "."); SendDetection(player, string.Format("<color=#ffa500>[Античит детект]</color> " + "(NoRecoil) " + "У игрока " + player.displayName + " обнаружен NoRecoil " + ",вероятность " + string.Format("{0}", prob) + "% | обнаружений " + info.Violations.ToString())); LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (Макрос) " + player.displayName + " SteamID " + player.UserIDString + ": вероятность " + string.Format("{0}", prob) + "% | обнаружений " + info.Violations.ToString() + " | " + item.info.shortname, this, true); if (info.Violations > DetectCountMacros && MCREnabled) { Ban(player.userID, "[Анти-чит] Обнаружен скрипт для макроса"); LogToFile("ban", $"[{DateTime.Now.ToShortTimeString()}] - (Макрос) Игрок" + player.displayName + "забанен. Вероятность " + string.Format("{0}", prob) + "% | обнаружений " + info.Violations.ToString() + " | " + item.info.shortname, this, true); } } info.Ticks = 0; info.Count = 0; } static Hash<BasePlayer, int> wallhackDetec = new Hash<BasePlayer, int>(); public class ColliderCheckTest : MonoBehaviour { public BasePlayer player; Hash<Collider, Vector3> entryPosition = new Hash<Collider, Vector3>(); SphereCollider col; public float teleportedBack; public Collider lastCollider; void Awake() { player = transform.parent.GetComponent<BasePlayer>(); col = gameObject.AddComponent<SphereCollider>(); col.radius = 0.1f; col.isTrigger = true; col.center = new Vector3(0f, 0.5f, 0f); } public static BaseEntity GetCollEntity(Vector3 entry, Vector3 exist) { var rayArray = Physics.RaycastAll(exist, entry, Vector3.Distance(entry, exist), constructionColl); for (int i = 0; i < rayArray.Length; i++) { return rayArray[i].GetEntity(); } return null; } void OnTriggerExit(Collider col) { if (textureenable) if (entryPosition.ContainsKey(col)) { BuildingBlock block = col.GetComponent<BuildingBlock>(); if (block != null) { if (!block.gameObject.name.Contains("foundation.steps") && !block.gameObject.name.Contains("block.halfheight.slanted")) { instance.SendDetection(player, string.Format($"{player.displayName},({player.userID}) Обнаружен TextureHack!")); ForcePlayerBack(this, col, entryPosition[col], player.transform.position); if (Time.realtimeSinceStartup - lastWallhack[player] < 10f) { instance.SendDetection(player, string.Format($"{player.displayName},({player.userID}) Обнаружен WallHack! Детект № {wallhackDetec[player]}")); wallhackDetec[player]++; instance.LogToFile("log", $"[{DateTime.Now.ToShortTimeString()}] - (WallHack) {player.userID.ToString()} {player.displayName.ToString()} Обнаружен WallHack! Обнаружений {wallhackDetec[player]}", AntiCheat.instance, true); } lastWallhack[player] = Time.realtimeSinceStartup; } } entryPosition.Remove(col); } } void OnDestroy() { Destroy(gameObject); Destroy(col); } } static void ForcePlayerBack(ColliderCheckTest colcheck, Collider collision, Vector3 entryposition, Vector3 exitposition) { Vector3 rollBackPosition = GetRollBackPosition(entryposition, exitposition, 4f); Vector3 rollDirection = (entryposition - exitposition).normalized; foreach (RaycastHit rayhit in UnityEngine.Physics.RaycastAll(rollBackPosition, (exitposition - entryposition).normalized, 5f)) { if (rayhit.collider == collision) { rollBackPosition = rayhit.point + rollDirection * 1f; } } colcheck.teleportedBack = Time.realtimeSinceStartup; colcheck.lastCollider = collision; ForcePlayerPosition(colcheck.player, rollBackPosition); } static Vector3 GetRollBackPosition(Vector3 entryposition, Vector3 exitposition, float distance) { distance = Vector3.Distance(exitposition, entryposition) + distance; var direction = (entryposition - exitposition).normalized; return (exitposition + (direction * distance)); } new static void ForcePlayerPosition(BasePlayer player, Vector3 destination) { player.MovePosition(destination); player.ClientRPCPlayer(null, player, "ForcePositionTo", destination); }[HookMethod("OnBasePlayerAttacked")] private void OnBasePlayerAttacked(BasePlayer player, HitInfo hitInfo) { if (player.IsDead()) return; if (hitInfo.Initiator == null) return; if (player.health - hitInfo.damageTypes.Total() > 0f) return; BasePlayer attacker = hitInfo.Initiator.ToPlayer(); if (attacker == null) return; if (attacker == player) return; WallhackKillCheck(player, attacker, hitInfo); } public static void msgPlayer(BasePlayer player, string msg) { player.ChatMessage($"[Анти-Чит] {msg}"); } public static void msgAll(string msg) { ConsoleNetwork.BroadcastToAllClients("chat.add", 0, $"[Анти-Чит] {msg}"); } private void CreateInfo(BasePlayer player) { if (player == null) return; if (!PlayersListed.ContainsKey(player.userID)) PlayersListed.Add(player.userID, new PlayerAntiCheat() { Deaths = 0, Killed = 0, Heads = 0, Hits = 0, Name = player.displayName }); } private void SaveDataAdmin() { Interface.GetMod().DataFileSystem.WriteObject("AntiCheat/AdminData", adata); } private void SavePlayerData() { Interface.Oxide.DataFileSystem.WriteObject("AntiCheat/PlayerAntiCheat", PlayersListed); } void SendDetection(BasePlayer player, string msg) { if (SendsLogs) if (permission.UserHasPermission(player.UserIDString, "anticheat.sendlogs")) SendReply(player, msg); } public Dictionary<ulong, PlayerAntiCheat> PlayersListed = new Dictionary<ulong, PlayerAntiCheat>(); public class PlayerAntiCheat { public string Name { get; set; } public int Killed { get; set; } public int Deaths { get; set; } public int Hits { get; set; } public int Heads { get; set; } public bool Banned; public string Date; public string Reason; public string BanCreator; } } }

// --- End of file: AntiCheat.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/XDGoldenskull.cs ---
// --- Original Local Path: KualaRust/XDGoldenskull.cs ---

﻿using System.Collections.Generic;
using ConVar;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("XD Golden skull", "DezLife", "1.0.0")]
    public class XDGoldenskull : RustPlugin
    {
        [PluginReference] Plugin IQChat;
        private const string ReplaceShortName = "skull.human";

        #region Classes/cfg

        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Отображаемое имя")]
            public string DisplayName;
            [JsonProperty("Стак предмета")]
            public int StackItem;
            [JsonProperty("Скин ID черепа")]
            public ulong ReplaceID;
            [JsonProperty("Из каких бочек будет падать и процент выпадения")]
            public Dictionary<string, int> barellList = new Dictionary<string, int>();
            [JsonProperty("Из каких ящиков будет падать и процент выпадения")]
            public Dictionary<string, int> cratelList = new Dictionary<string, int>();
            [JsonProperty("Призы за переработку")]
            public List<string> itemsrec = new List<string>();
            [JsonProperty("Призы за потрошения")]
            public List<string> itempot = new List<string>();
            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    DisplayName = "Золотой череп",
                    StackItem = 5,
                    ReplaceID = 1683645276,
                    barellList = new Dictionary<string, int>
                    {
                        ["loot-barrel-1"] = 50,
                        ["loot-barrel-2"] = 20,
                    },
                    cratelList = new Dictionary<string, int>
                    {
                        ["bradley_crate"] = 50,
                        ["codelockedhackablecrate_oilrig"] = 20,
                        ["crate_elite"] = 20,
                    },
                    itemsrec = new List<string>
                    {
                        "weapon.mod.small.scope",
                        "rifle.ak",
                        "rifle.l96",
                        "smg.thompson",
                        "rifle.semiauto",
                        "pistol.revolver",
                        "rifle.lr300",
                    },
                    itempot = new List<string>
                    {
                        "shotgun.double",
                        "grenade.f1",
                        "smg.2",
                        "shotgun.pump",
                        "pistol.semiauto",
                        "pistol.python",
                        "weapon.mod.lasersight",
                        "weapon.mod.muzzlebrake",
                    },
                };
            }

            public int GetItemId() => ItemManager.FindItemDefinition(ReplaceShortName).itemid;

            public Item Copy(int amount = 1)
            {
                Item x = ItemManager.CreateByPartialName(ReplaceShortName, amount);
                x.skin = ReplaceID;
                x.name = DisplayName;
                x.info.stackable = StackItem;

                return x;
            }

            public void CreateItem(BasePlayer player, Vector3 position, int amount)
            {
                Item x = ItemManager.CreateByPartialName(ReplaceShortName, amount);
                x.skin = ReplaceID;
                x.name = DisplayName;
                x.info.stackable = StackItem;

                if (player != null)
                {
                    if (player.inventory.containerMain.itemList.Count < 24)
                        x.MoveToContainer(player.inventory.containerMain);
                    else
                        x.Drop(player.transform.position, Vector3.zero);
                    return;
                }

                if (position != Vector3.zero)
                {
                    x.Drop(position, Vector3.down);
                    return;
                }
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #245" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);


        #endregion

        #region command

        [ChatCommand("g.give")]
        private void cmdChatEmerald(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;
            config.CreateItem(player, Vector3.zero, 10);
        }

        [ConsoleCommand("goldenskul")]
        void FishCommand(ConsoleSystem.Arg arg)
        {

            BasePlayer player = BasePlayer.Find(arg.Args[0]);
            if (player == null || !player.IsConnected)
            {
                Puts("Игрок не найден");
                return;
            }
            int count = int.Parse(arg.Args[1]);
            config.CreateItem(player, Vector3.zero, count);
            SendChat(player, $"Вы успешно получили {config.DisplayName}");
            Puts($"Игроку выдана {config.DisplayName}");
        }

        #endregion

        #region hooks
        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (entity.GetComponent<LootContainer>() == null) return;
            foreach (var crate in config.cratelList)
            {
                if (entity.PrefabName.Contains(crate.Key))
                {
                    bool goodChance = random.Next(0, 100) >= (100 - crate.Value);
                    if (goodChance)
                    {
                        var item = (Item)CreateItem();
                        item?.MoveToContainer(entity.GetComponent<LootContainer>().inventory);
                    }
                }
            }   
        }

        void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            foreach (var Barrel in config.barellList)
            {
                if (entity.PrefabName.Contains(Barrel.Key))
                {
                    bool goodChance = random.Next(0, 100) >= (100 - Barrel.Value);
                    if (goodChance)
                    {
                        config.CreateItem(null, entity.transform.position, 1);
                    }
                }
            }
        }

        object CanRecycle(Recycler recycler, Item item)
        {
            if (item.info.shortname == ReplaceShortName && item.skin == config.ReplaceID)
                return true;
            return null;
        }
        object OnRecycleItem(Recycler recycler, Item item)
        {
            if (item.info.shortname == ReplaceShortName && item.skin == config.ReplaceID)
            {
                item.UseItem(1);
                int RandomItem = random.Next(config.itemsrec.Count);
                recycler.MoveItemToOutput(ItemManager.CreateByName(config.itemsrec[RandomItem], 1));
                return true;
            }
            return null;
        }

        object OnItemAction(Item item, string action, BasePlayer player)
        {
            if (action == "crush" && item.skin == config.ReplaceID)
            {
                Item itemS = ItemManager.CreateByName(config.itempot[random.Next(config.itempot.Count)], 1, 0);
                player.GiveItem(itemS, BaseEntity.GiveItemReason.PickedUp);
                ItemRemovalThink(item, player, 1);
                return false;
            }
            return null;
        }

        #endregion

        #region Help
        private Item CreateItem()
        {
            return config.Copy(1);
        }
        private static void ItemRemovalThink(Item item, BasePlayer player, int itemsToTake)
        {
            if (item.amount == itemsToTake)
            {
                item.RemoveFromContainer();
                item.Remove();
            }
            else
            {
                item.amount = item.amount - itemsToTake;
                player.inventory.SendSnapshot();
            }
        }

        private static System.Random random = new System.Random();
        public void SendChat(BasePlayer player, string Message, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, "");
            else
                player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        #endregion
    }
}


// --- End of file: XDGoldenskull.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/BypassQueue.cs ---
// --- Original Local Path: KualaRust/BypassQueue.cs ---

﻿using Network;

namespace Oxide.Plugins
{
    [Info("Bypass Queue", "Orange", "1.0.2")]
    public class BypassQueue : RustPlugin
    {
        private const string permUse = "bypassqueue.allow";

        private void Init()
        {
            permission.RegisterPermission(permUse, this);
        }

        private object CanBypassQueue(Connection connection)
        {
            if (permission.UserHasPermission(connection.userid.ToString(), permUse))
            {
                return true;
            }
            else
            {
                return null;
            }
        }
    }
}


// --- End of file: BypassQueue.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/AdminDeepCover.cs ---
// --- Original Local Path: KualaRust/AdminDeepCover.cs ---

﻿using CompanionServer;
using ConVar;
using Facepunch;
using Facepunch.Math;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Admin Deep Cover", "Dana", "2.2.7")]
    [Description("Hides the original identity of admins by masking their steam profiles")]

    public class AdminDeepCover : RustPlugin
    {
        #region Plugin References
        [PluginReference] Plugin BetterChat;
        #endregion

        #region Fields and Properties
        private DynamicConfigFile _pluginData;
        private AdminDeepCoverData _adminDeepCoverData;
        Configuration config;
        private static readonly string Perm = "admindeepcover.use";


        #endregion

        #region Oxide Hooks
        private void Init()
        {
            permission.RegisterPermission(Perm, this);

            _pluginData = Interface.Oxide.DataFileSystem.GetFile("AdminDeepCover");
            _adminDeepCoverData = new AdminDeepCoverData();
            LoadData();
            PrintWarning("Initialized");
        }
        protected override void LoadDefaultMessages()
        {

            lang.RegisterMessages(new Dictionary<string, string>
            {
                [PluginMessages.NoPermission] = "<size=12>You don't have permission to use this command</size>",
                [PluginMessages.DeepCoverEnabled] = "<size=12>Admin deep cover has been <color=#00fa9a>Enabled</color></size>",
                [PluginMessages.DeepCoverDisabled] = "<size=12>Admin deep cover has been <color=#00fa9a>Disabled</color></size>",
                [PluginMessages.DeepCoverChanged] = "<size=12>Fake identity has changed to <color=#00fa9a>{0}</color></size>",
                [PluginMessages.RequestedFakeIdentifyNotFound] = "<size=12>Requested fake identity is not found</size>",
                [PluginMessages.NoFakeIdentitiesAvailable] = "<size=12>No fake identities available</size></size>",
                [PluginMessages.FakeIdentifyNotFound] = "<size=12>Fake identity is not found</size>",
                [PluginMessages.DataCorruptedUp] = "<size=12>Data is corrupt</size>",
            }, this);
        }
        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                var identify = GetIdentify(player);
                if (identify == null)
                    return;

                RemoveFakeIdentity(player, identify);
            }
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (config.ReconnectDeepCover)
            {
                OnPlayerRespawned(player);
            }
        }

        void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            var identify = GetIdentify(player);
            if (identify == null)
                return;
            RemoveFakeIdentity(player, identify, config.ReconnectDeepCover);
        }

        private void OnPlayerRespawned(BasePlayer player)
        {
            var identify = GetIdentify(player);
            if (identify == null)
                return;
            if (!identify.IsEnabled)
            {
                if (IsIdentifyAvailable(identify))
                {
                    SetFakeIdentity(player, identify);
                    player.ChatMessage(Lang(PluginMessages.DeepCoverEnabled, player.UserIDString));
                }
                else
                {
                    Identify newIdentify;
                    if (config.ChangeIdentityInOrder)
                    {
                        newIdentify = GetAvailableIdentities().OrderBy(x => x.Profile).FirstOrDefault();
                    }
                    else
                    {
                        newIdentify = GetAvailableIdentities().GetRandom();
                    }
                    if (newIdentify == null)
                    {
                        player.ChatMessage(Lang(PluginMessages.DeepCoverDisabled, player.UserIDString));
                        return;
                    }
                    SetFakeIdentity(player, newIdentify);
                    player.ChatMessage(Lang(PluginMessages.DeepCoverChanged, player.UserIDString, newIdentify.Name));
                }
            }
            else
            {
                SetFakeIdentity(player, identify);
            }

        }

        private void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (info == null || info.Initiator == null)
                return;

            var attacker = info.Initiator.ToPlayer();
            if (attacker == null)
                return;

            var identify = GetIdentify(attacker);
            if (identify == null)
                return;

            attacker.userID = identify.UserId;
            timer.Once(0.2f, () =>
            {
                if (attacker != null)
                    attacker.userID = identify.RestoreUserId;
            });
        }

        #region Chat Hooks
        private object OnPlayerChat(BasePlayer player, string message, Chat.ChatChannel channel)
        {
            if (plugins.Exists(nameof(BetterChat)))
                return null;

            var identify = GetIdentify(player);
            if (identify == null)
                return null;
            if (channel == Chat.ChatChannel.Team)
            {
                var userId = identify.RestoreUserId;
                var userName = identify.RestoreName;
                if (config.TeamChatRemainsDeepCover)
                {
                    userId = identify.UserId;
                    userName = identify.Name;
                }
                var formattedMessage = $"<color=#55aaff>{userName}</color>: <color=#ffffff>{message}</color>";
                RelationshipManager.PlayerTeam team = player.Team;
                if (team == null || team.members.Count == 0)
                {
                    return true;
                }

                team.BroadcastTeamChat(userId, userName, formattedMessage, "white");

                var onlineMemberConnections = team.GetOnlineMemberConnections();
                if (onlineMemberConnections != null)
                {
                    ConsoleNetwork.SendClientCommand(onlineMemberConnections, "chat.add", (int)channel, userId, formattedMessage);
                }
            }
            else
            {
                Server.Broadcast(message, $"<color=#5af>{identify.Name}</color>", identify.UserId);
            }
            return true;
        }

        private object OnUserChat(IPlayer player, string message)
        {
            if (!plugins.Exists(nameof(BetterChat)))
                return null;
            return IsDeepCovered(Convert.ToUInt64(player.Id)) ? true : (object)null;
        }

        private object OnBetterChat(Dictionary<string, object> data)
        {
            object channel;
            if (!data.TryGetValue("ChatChannel", out channel) || !(channel is Chat.ChatChannel))
                return null;

            var chatChannel = (Chat.ChatChannel)channel;

            object player;
            if (!data.TryGetValue("Player", out player) || !(player is IPlayer))
                return null;

            var basePlayer = (BasePlayer)((IPlayer)player).Object;
            var identify = GetIdentify(basePlayer);
            if (identify == null)
                return null;

            object message;
            if (!data.TryGetValue("Message", out message) || message == null)
                return null;
            var formattedMessage = message.ToString();

            object username;
            if (!data.TryGetValue("UsernameSettings", out username) || !(username is Dictionary<string, object>))
                return null;
            var usernameSetting = (Dictionary<string, object>)username;

            object color;
            var usernameColor = "#55aaff";
            if (usernameSetting.TryGetValue("Color", out color) && color != null)
                usernameColor = color.ToString();

            var chatMessage = BetterChat?.Call("API_GetFormattedMessage", player, formattedMessage)?.ToString() ?? "";
            var consoleMessage = BetterChat?.Call("API_GetFormattedMessage", player, formattedMessage, true)?.ToString() ?? "";

            var userId = identify.UserId;
            var userName = identify.Name;
            if (chatChannel == Chat.ChatChannel.Team)
            {
                if (!config.TeamChatRemainsDeepCover)
                {
                    userId = identify.RestoreUserId;
                    userName = identify.RestoreName;

                    RemoveFakeIdentity(basePlayer, identify, true);
                    chatMessage = BetterChat?.Call("API_GetFormattedMessage", player, formattedMessage)?.ToString() ?? "";
                    consoleMessage = BetterChat?.Call("API_GetFormattedMessage", player, formattedMessage, true)?.ToString() ?? "";
                    SetFakeIdentity(basePlayer, identify);
                }
                RelationshipManager.PlayerTeam team = basePlayer.Team;
                if (team == null || team.members.Count == 0)
                    return null;

                team.BroadcastTeamChat(userId, userName, formattedMessage, usernameColor);

                List<Network.Connection> onlineMemberConnections = team.GetOnlineMemberConnections();
                if (onlineMemberConnections != null)
                {
                    ConsoleNetwork.SendClientCommand(onlineMemberConnections, "chat.add", new object[] { (int)chatChannel, userId.ToString(), chatMessage });
                }
            }
            else
            {
                object blocked;
                var blockedIds = new List<string>();
                if (data.TryGetValue("BlockedReceivers", out blocked) && blocked is List<string>)
                    blockedIds = (List<string>)blocked;

                foreach (BasePlayer p in BasePlayer.activePlayerList.Where(p => !blockedIds.Contains(p.UserIDString)))
                    p.SendConsoleCommand("chat.add", new object[] { (int)chatChannel, userId.ToString(), chatMessage });
            }

            Puts($"[{chatChannel}] {consoleMessage}");

            RCon.Broadcast(RCon.LogType.Chat, new Chat.ChatEntry
            {
                Channel = chatChannel,
                Message = consoleMessage,
                UserId = userId.ToString(),
                Username = userName,
                Color = usernameColor,
                Time = Epoch.Current
            });

            return true;
        }
        #endregion

        #endregion

        #region Commands
        [ConsoleCommand("deepcover")]
        private void ccmdDeepCover(ConsoleSystem.Arg arg)
            => cmdDeepCover((BasePlayer)arg.Connection.player, arg.cmd.FullName, arg.Args);

        [ChatCommand("deepcover")]
        private void cmdDeepCover(BasePlayer player, string command, string[] args)
        {
            if (!HasPermission(player, Perm))
            {
                player.ChatMessage(Lang(PluginMessages.NoPermission, player.UserIDString));
                return;
            }

            string profileString = null;
            int? profile = null;
            if (args.Length == 1)
            {
                profileString = args[0];
                if (!string.IsNullOrWhiteSpace(profileString))
                {
                    int output;
                    if (int.TryParse(profileString, out output))
                        profile = output;
                }
            }

            if (!IsDeepCovered(player.userID))
            {
                Identify identify = null;
                if (!config.ChangeIdentityInOrder && !profile.HasValue)
                {
                    identify = GetAvailableIdentities().GetRandom();
                }
                else
                {
                    if (profile.HasValue)
                    {
                        identify = GetAvailableIdentities().FirstOrDefault(x => x.Profile == profile);
                        if (identify == null)
                        {
                            player.ChatMessage(Lang(PluginMessages.RequestedFakeIdentifyNotFound, player.UserIDString));
                            return;
                        }
                    }
                    else
                    {
                        identify = GetAvailableIdentities().OrderBy(x => x.Profile).FirstOrDefault();
                        if (identify == null)
                        {
                            player.ChatMessage(Lang(PluginMessages.NoFakeIdentitiesAvailable, player.UserIDString));
                            return;
                        }
                    }
                }

                if (identify == null)
                {
                    player.ChatMessage(Lang(PluginMessages.FakeIdentifyNotFound, player.UserIDString));
                    return;
                }
                SetFakeIdentity(player, identify, false, true);
                player.ChatMessage(Lang(PluginMessages.DeepCoverEnabled, player.UserIDString));
            }
            else
            {
                if (profile.HasValue)
                {
                    var identify = GetAvailableIdentities().FirstOrDefault(x => x.Profile == profile);
                    if (identify == null)
                    {
                        player.ChatMessage(Lang(PluginMessages.RequestedFakeIdentifyNotFound, player.UserIDString));
                        return;
                    }

                    SetFakeIdentity(player, identify, true, true);
                    player.ChatMessage(Lang(PluginMessages.DeepCoverChanged, player.UserIDString, identify.Name));
                }
                else
                {
                    var identify = GetIdentify(player);
                    RemoveFakeIdentity(player, identify);
                    player.ChatMessage(Lang(PluginMessages.DeepCoverDisabled, player.UserIDString));
                }
            }
        }
        #endregion

        #region Methods
        private RestoreInfo GetIdentify(BasePlayer player)
        {
            RestoreInfo identify;
            if (_adminDeepCoverData.PlayerData.TryGetValue(player.userID, out identify) && identify != null && !identify.IsRemoved)
                return identify;

            return null;
        }

        private void SetFakeIdentity(BasePlayer player, Identify identify, bool isChange = false, bool sendDiscordNotification = false)
        {
            var playerId = player.userID;
            var playerName = player.displayName;
            var wasAdmin = player.IsAdmin;
            var currentGroups = permission.GetUserGroups(player.UserIDString);
            Player.Rename(player, identify.Name);

            if (player.IsAdmin && config.RemoveAdminFlag && !isChange)
            {
                ServerUsers.Set(player.userID, ServerUsers.UserGroup.None, "", "");
                player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, false);
                player.Connection.authLevel = 0;
            }
            if (config.IsDiscordEnabled && sendDiscordNotification)
            {
                SendDiscordMessage(player.userID, playerName, identify.UserId, identify.Name, GetGrid(player.ServerPosition));
            }

            RestoreInfo restoreInfo;
            if (!_adminDeepCoverData.PlayerData.TryGetValue(player.userID, out restoreInfo) || restoreInfo == null)
            {
                _adminDeepCoverData.PlayerData.Add(player.userID, new RestoreInfo
                {
                    IsEnabled = true,
                    IsRemoved = false,
                    Profile = identify.Profile,
                    RestoreName = playerName,
                    RestoreUserId = playerId,
                    WasAdmin = wasAdmin,
                    ChatGroup = identify.ChatGroup,
                    Groups = currentGroups,
                    Name = identify.Name,
                    UserId = identify.UserId,
                });
            }
            else
            {
                restoreInfo.IsEnabled = true;
                restoreInfo.IsRemoved = false;
                restoreInfo.Profile = identify.Profile;
                restoreInfo.Name = identify.Name;
                restoreInfo.UserId = identify.UserId;
                restoreInfo.ChatGroup = identify.ChatGroup;
                if (!isChange)
                {
                    restoreInfo.WasAdmin = wasAdmin;
                    restoreInfo.Groups = currentGroups;
                }
            }

            if (currentGroups != null)
                foreach (var oldGroup in currentGroups)
                {
                    permission.RemoveUserGroup(player.UserIDString, oldGroup);
                }
            permission.AddUserGroup(player.UserIDString, identify.ChatGroup);

            player.SendNetworkUpdateImmediate();
            SaveData();
        }

        private void RemoveFakeIdentity(BasePlayer player, RestoreInfo restoreInfo, bool tempRemove = false)
        {
            Player.Rename(player, restoreInfo.RestoreName);
            if (restoreInfo.WasAdmin)
            {
                ServerUsers.Set(player.userID, ServerUsers.UserGroup.Owner, "", "");
                player.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, true);
                player.Connection.authLevel = 2;
            }

            if (tempRemove)
                restoreInfo.IsEnabled = false;
            else
                restoreInfo.IsRemoved = true;

            permission.RemoveUserGroup(player.UserIDString, restoreInfo.ChatGroup);
            if (restoreInfo.Groups != null)
                foreach (var oldGroup in restoreInfo.Groups)
                {
                    permission.AddUserGroup(player.UserIDString, oldGroup);
                }
            player.SendNetworkUpdateImmediate();
            SaveData();
        }

        private List<Identify> GetAvailableIdentities()
        {
            var identities = config.Identifies;
            var usedIdentities = _adminDeepCoverData.PlayerData.Where(x => x.Value != null && x.Value.IsEnabled && !x.Value.IsRemoved)
                .Select(x => x.Value).ToList();
            return identities.Where(x => usedIdentities.All(m => m.Profile != x.Profile)).ToList();
        }

        private bool IsIdentifyAvailable(RestoreInfo restoreInfo)
        {
            var usedIdentities = _adminDeepCoverData.PlayerData.Where(x => x.Value != null && x.Value.IsEnabled && !x.Value.IsRemoved)
                .Select(x => x.Value).ToList();
            return usedIdentities.All(x => x.Profile != restoreInfo.Profile);
        }
        private string GetGrid(Vector3 pos)
        {
            char letter = 'A';
            var x = Mathf.Floor((pos.x + (ConVar.Server.worldsize / 2)) / 146.3f) % 26;
            var count = Mathf.Floor(Mathf.Floor((pos.x + (ConVar.Server.worldsize / 2)) / 146.3f) / 26);
            var z = (Mathf.Floor(ConVar.Server.worldsize / 146.3f)) - Mathf.Floor((pos.z + (ConVar.Server.worldsize / 2)) / 146.3f);
            letter = (char)(letter + x);
            var secondLetter = count <= 0 ? string.Empty : ((char)('A' + (count - 1))).ToString();
            return $"{secondLetter}{letter}{z - 1}";
        }
        private void SendDiscordMessage(ulong playerId, string playerName, ulong fakeId, string fakeName, string grid)
        {
            if (string.IsNullOrWhiteSpace(config.DiscordWebHookUrl))
                return;

            var hexColorNumber = config.DiscordEmbedColor?.Replace("x", string.Empty);
            int color;
            if (!int.TryParse(hexColorNumber, NumberStyles.HexNumber, null, out color))
                color = 3092790;

            var mentions = "";
            if (config.DiscordRolesToMention != null)
                foreach (var roleId in config.DiscordRolesToMention)
                {
                    mentions += $"<@&{roleId}> ";
                }

            var contentBody = new WebHookContentBody
            {
                Content = $"{mentions}{config.DiscordMessage}"
            };
            var body = new WebHookEmbedBody
            {
                Embeds = new[]
                {
                    new WebHookEmbed
                    {
                        Description = string.Format(config.DiscordEmbedDescription, playerName, $"[{playerId}](https://steamcommunity.com/profiles/{playerId})" , fakeName, $"[{fakeId}](https://steamcommunity.com/profiles/{fakeId})" , grid),
                        Color = color
                    }
                }
            };
            webrequest.Enqueue(config.DiscordWebHookUrl, JsonConvert.SerializeObject(contentBody, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }),
                (headerCode, headerResult) =>
                {
                    if (headerCode >= 200 && headerCode <= 204)
                    {
                        webrequest.Enqueue(config.DiscordWebHookUrl, JsonConvert.SerializeObject(body, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }),
                            (code, result) => { }, this, RequestMethod.POST,
                            new Dictionary<string, string> { { "Content-Type", "application/json" } });
                    }
                }, this, RequestMethod.POST,
                new Dictionary<string, string> { { "Content-Type", "application/json" } });
        }

        private bool IsDeepCovered(ulong playerId)
        {
            RestoreInfo restoreInfo;
            if (!_adminDeepCoverData.PlayerData.TryGetValue(playerId, out restoreInfo) || restoreInfo == null)
            {
                return false;
            }
            return restoreInfo.IsEnabled && !restoreInfo.IsRemoved;
        }
        #endregion

        #region API
        private bool API_IsDeepCovered(BasePlayer player) => IsDeepCovered(player.userID);

        #endregion

        #region Helpers
        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
        private bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) throw new Exception();
            }
            catch
            {
                Config.WriteObject(config, false, $"{Interface.Oxide.ConfigDirectory}/{Name}.jsonError");
                PrintError("The configuration file contains an error and has been replaced with a default config.\n" +
                           "The error configuration file was saved in the .jsonError extension");
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig() => config = new Configuration();

        protected override void SaveConfig() => Config.WriteObject(config);
        private void SaveData()
        {
            _pluginData.WriteObject(_adminDeepCoverData);
        }

        private void LoadData()
        {
            try
            {
                _adminDeepCoverData = _pluginData.ReadObject<AdminDeepCoverData>();
                Puts("Data File Loaded");
            }
            catch
            {
                Puts("Couldn't load admin deep cover data, creating new datafile");
                _adminDeepCoverData = new AdminDeepCoverData();
                SaveData();
            }
        }

        #endregion

        #region Classes
        private static class PluginMessages
        {
            public const string NoPermission = "No Permission";
            public const string DeepCoverEnabled = "Deep Cover Enabled";
            public const string DeepCoverDisabled = "Deep Cover Disabled";
            public const string DeepCoverChanged = "Deep Cover Changed";
            public const string RequestedFakeIdentifyNotFound = "Requested Fake Identify Not Found";
            public const string NoFakeIdentitiesAvailable = "No Fake Identities Available";
            public const string FakeIdentifyNotFound = "Fake Identify Not Found";
            public const string DataCorruptedUp = "Data Corrupted Up";
        }
        private class AdminDeepCoverData
        {
            public Dictionary<ulong, RestoreInfo> PlayerData { get; set; } = new Dictionary<ulong, RestoreInfo>();
        }
        public class Identify
        {
            public int Profile { get; set; }
            public string Name { get; set; }
            public ulong UserId { get; set; }
            [JsonProperty("Better Chat Group")]
            public string ChatGroup { get; set; }
        }
        public class RestoreInfo : Identify
        {
            public bool IsEnabled { get; set; }
            public bool IsRemoved { get; set; }
            public bool WasAdmin { get; set; }
            public string[] Groups { get; set; }
            public string RestoreName { get; set; }
            public ulong RestoreUserId { get; set; }
        }
        private class Configuration
        {
            [JsonProperty("Change Identity In Order")]
            public bool ChangeIdentityInOrder { get; set; } = true;

            [JsonProperty("Remain Deep Covered After Reconnect")]
            public bool ReconnectDeepCover { get; set; } = true;

            [JsonProperty("Remain Deep Covered In Team Chat")]
            public bool TeamChatRemainsDeepCover { get; set; } = false;

            [JsonProperty("Remove Admin Flag When Deep Covered")]
            public bool RemoveAdminFlag { get; set; } = false;

            [JsonProperty(PropertyName = "Discord - Enabled")]
            public bool IsDiscordEnabled { get; set; } = false;

            [JsonProperty(PropertyName = "Discord - Webhook URL")]
            public string DiscordWebHookUrl { get; set; }

            [JsonProperty(PropertyName = "Discord - Embed Color")]
            public string DiscordEmbedColor { get; set; } = "#2F3136";

            [JsonProperty(PropertyName = "Discord - Message")]
            public string DiscordMessage { get; set; } = "Admin Deep Cover";

            [JsonProperty(PropertyName = "Discord - Embed - Description")]
            public string DiscordEmbedDescription { get; set; } =
                "{0} {1} has become deep covered\n\nIdentity Used\n{2} {3}\n\nLocation\n{4}";

            [JsonProperty(PropertyName = "Discord - Roles To Mention")]
            public List<string> DiscordRolesToMention { get; set; } = new List<string>();

            [JsonProperty("Fake Identities", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<Identify> Identifies { get; set; } = new List<Identify>
            {
                new Identify
                {
                    Profile = 1,
                    Name = "garry",
                    UserId = 76561197960279927,
                    ChatGroup = "default"
                },
                new Identify
                {
                    Profile = 2,
                    Name = "Alistair",
                    UserId = 76561198240345356,
                    ChatGroup = "default"
                },
                new Identify
                {
                    Profile = 3,
                    Name = "Helk",
                    UserId = 76561197992746895,
                    ChatGroup = "default"
                },
                new Identify
                {
                    Profile = 4,
                    Name = "Holmzy",
                    UserId = 76561198002789398,
                    ChatGroup = "default"
                }
            };
        }

        private class WebHookEmbedBody
        {
            [JsonProperty(PropertyName = "embeds")]
            public WebHookEmbed[] Embeds;
        }

        private class WebHookContentBody
        {
            [JsonProperty(PropertyName = "content")]
            public string Content;
        }

        private class WebHookEmbed
        {
            [JsonProperty(PropertyName = "title")]
            public string Title;

            [JsonProperty(PropertyName = "type")]
            public string Type = "rich";

            [JsonProperty(PropertyName = "description")]
            public string Description;

            [JsonProperty(PropertyName = "color")]
            public int Color;

            [JsonProperty(PropertyName = "author")]
            public WebHookAuthor Author;

            [JsonProperty(PropertyName = "image")]
            public WebHookImage Image;

            [JsonProperty(PropertyName = "fields")]
            public List<WebHookField> Fields;

            [JsonProperty(PropertyName = "footer")]
            public WebHookFooter Footer;
        }
        private class WebHookAuthor
        {
            [JsonProperty(PropertyName = "name")]
            public string Name;

            [JsonProperty(PropertyName = "url")]
            public string AuthorUrl;

            [JsonProperty(PropertyName = "icon_url")]
            public string AuthorIconUrl;
        }
        private class WebHookImage
        {
            [JsonProperty(PropertyName = "proxy_url")]
            public string ProxyUrl;

            [JsonProperty(PropertyName = "url")]
            public string Url;

            [JsonProperty(PropertyName = "height")]
            public int? Height;

            [JsonProperty(PropertyName = "width")]
            public int? Width;
        }
        private class WebHookField
        {
            [JsonProperty(PropertyName = "name")]
            public string Name;

            [JsonProperty(PropertyName = "value")]
            public string Value;

            [JsonProperty(PropertyName = "inline")]
            public bool Inline;
        }
        private class WebHookFooter
        {
            [JsonProperty(PropertyName = "text")]
            public string Text;

            [JsonProperty(PropertyName = "icon_url")]
            public string IconUrl;

            [JsonProperty(PropertyName = "proxy_icon_url")]
            public string ProxyIconUrl;
        }

        #endregion
    }
}

// --- End of file: AdminDeepCover.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/ImageLibrary.cs ---
// --- Original Local Path: KualaRust/ImageLibrary.cs ---

//Reference: Facepunch.Sqlite
//Reference: UnityEngine.UnityWebRequestModule
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Steamworks;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Networking;

namespace Oxide.Plugins
{
    [Info("Image Library", "Absolut & K1lly0u", "2.0.54")]
    [Description("Plugin API for downloading and managing images")]
    class ImageLibrary : RustPlugin
    {
        #region Fields

        private ImageIdentifiers imageIdentifiers;
        private ImageURLs imageUrls;
        private SkinInformation skinInformation;
        private DynamicConfigFile identifiers;
        private DynamicConfigFile urls;
        private DynamicConfigFile skininfo;

        private static ImageLibrary il;
        private ImageAssets assets;

        private Queue<LoadOrder> loadOrders = new Queue<LoadOrder>();
        private bool orderPending;
        private bool isInitialized;

        private JsonSerializerSettings errorHandling = new JsonSerializerSettings { Error = (se, ev) => { ev.ErrorContext.Handled = true; } };

        private const string STEAM_API_URL = "https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/";
        private const string STEAM_AVATAR_URL = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key={0}&steamids={1}";

        private string[] itemShortNames;

        #endregion Fields

        #region Oxide Hooks

        private void Loaded()
        {
            identifiers = Interface.Oxide.DataFileSystem.GetFile("ImageLibrary/image_data");
            urls = Interface.Oxide.DataFileSystem.GetFile("ImageLibrary/image_urls");
            skininfo = Interface.Oxide.DataFileSystem.GetFile("ImageLibrary/skin_data");

            il = this;
            LoadData();
        }

        private void OnServerInitialized()
        {
            itemShortNames = ItemManager.itemList.Select(x => x.shortname).ToArray();

            foreach (ItemDefinition item in ItemManager.itemList)
            {
                string workshopName = item.displayName.english.ToLower().Replace("skin", "").Replace(" ", "").Replace("-", "");
                if (!workshopNameToShortname.ContainsKey(workshopName))
                    workshopNameToShortname.Add(workshopName, item.shortname);
            }

            AddDefaultUrls();

            CheckForRefresh();

            foreach (BasePlayer player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
        }

        private void OnPlayerConnected(BasePlayer player) => GetPlayerAvatar(player?.UserIDString);

        private void Unload()
        {
            SaveData();
            UnityEngine.Object.Destroy(assets);
            il = null;
        }

        #endregion Oxide Hooks

        #region Functions

        private IEnumerator ProcessLoadOrders()
        {
            yield return new WaitWhile(() => !isInitialized);

            if (loadOrders.Count > 0)
            {
                if (orderPending)
                    yield break;

                LoadOrder nextLoad = loadOrders.Dequeue();
                if (!nextLoad.loadSilent)
                    Puts("Starting order " + nextLoad.loadName);

                if (nextLoad.imageList != null && nextLoad.imageList.Count > 0)
                {
                    foreach (KeyValuePair<string, string> item in nextLoad.imageList)
                        assets.Add(item.Key, item.Value);
                }
                if (nextLoad.imageData != null && nextLoad.imageData.Count > 0)
                {
                    foreach (KeyValuePair<string, byte[]> item in nextLoad.imageData)
                        assets.Add(item.Key, null, item.Value);
                }

                orderPending = true;

                assets.RegisterCallback(nextLoad.callback);

                assets.BeginLoad(nextLoad.loadSilent ? string.Empty : nextLoad.loadName);
            }
        }

        private void GetPlayerAvatar(string userId)
        {
            if (!configData.StoreAvatars || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(configData.SteamAPIKey) || HasImage(userId, 0))
                return;

            webrequest.Enqueue(string.Format(STEAM_AVATAR_URL, configData.SteamAPIKey, userId), null, (code, response) =>
            {
                if (response != null && code == 200)
                {
                    try
                    {
                        AvatarRoot rootObject = JsonConvert.DeserializeObject<AvatarRoot>(response, errorHandling);
                        if (rootObject?.response?.players?.Length > 0)
                        {
                            string avatarUrl = rootObject.response.players[0].avatarmedium;
                            if (!string.IsNullOrEmpty(avatarUrl))                            
                                AddImage(avatarUrl, userId, 0);                               
                        }                        
                    }
                    catch { }
                }
            }, this);
        }

        private void RefreshImagery()
        {
            imageIdentifiers.imageIds.Clear();
            imageIdentifiers.lastCEID = CommunityEntity.ServerInstance.net.ID;

            AddImage("http://i.imgur.com/sZepiWv.png", "NONE", 0);
            AddImage("http://i.imgur.com/lydxb0u.png", "LOADING", 0);
            foreach (var image in configData.UserImages)
            {
                if (!string.IsNullOrEmpty(image.Value))
                    AddImage(image.Value, image.Key, 0);
            }

            if ((Steamworks.SteamInventory.Definitions?.Length ?? 0) == 0)
            {
                PrintWarning("Waiting for Steamworks to update item definitions....");
                Steamworks.SteamInventory.OnDefinitionsUpdated += GetItemSkins;
            }
            else GetItemSkins();
        }

        private void CheckForRefresh()
        {
            if (assets == null)
                assets = new GameObject("WebObject").AddComponent<ImageAssets>();

            isInitialized = true;

            if (imageIdentifiers.lastCEID != CommunityEntity.ServerInstance.net.ID)
            {
                if (imageIdentifiers.imageIds.Count < 2)
                {
                    RefreshImagery();
                }
                else
                {
                    PrintWarning("The CommunityEntity instance ID has changed! Due to the way CUI works in Rust all previously stored images must be removed and re-stored using the new ID as reference so clients can find the images. These images will be added to a new load order. Interupting this process will result in being required to re-download these images from the web");
                    RestoreLoadedImages();
                }
            }
        }

        private void RestoreLoadedImages()
        {
            orderPending = true;
            int failed = 0;

            Dictionary<string, byte[]> oldFiles = new Dictionary<string, byte[]>();

            for (int i = imageIdentifiers.imageIds.Count - 1; i >= 0; i--)
            {
                var image = imageIdentifiers.imageIds.ElementAt(i);

                uint imageId;
                if (!uint.TryParse(image.Value, out imageId))
                    continue;

                byte[] bytes = FileStorage.server.Get(imageId, FileStorage.Type.png, imageIdentifiers.lastCEID);
                if (bytes != null)
                    oldFiles.Add(image.Key, bytes);
                else
                {
                    failed++;
                    imageIdentifiers.imageIds.Remove(image.Key);
                }
            }

            Facepunch.Sqlite.Database db = new Facepunch.Sqlite.Database();
            try
            {
                db.Open($"{ConVar.Server.rootFolder}/sv.files.0.db");
                db.Execute("DELETE FROM data WHERE entid = ?", imageIdentifiers.lastCEID);
                db.Close();
            }
            catch { }

            loadOrders.Enqueue(new LoadOrder("Image restoration from previous database", oldFiles));
            PrintWarning($"{imageIdentifiers.imageIds.Count - failed} images queued for restoration, {failed} images failed");
            imageIdentifiers.lastCEID = CommunityEntity.ServerInstance.net.ID;
            SaveData();

            orderPending = false;
            ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
        }

        #endregion Functions

        #region Workshop Names and Image URLs

        private void AddDefaultUrls()
        {
            foreach (ItemDefinition itemDefinition in ItemManager.itemList)
            {
                string identifier = $"{itemDefinition.shortname}_0";
                if (!imageUrls.URLs.ContainsKey(identifier))
                    imageUrls.URLs.Add(identifier, $"https://www.rustedit.io/images/imagelibrary/{itemDefinition.shortname}.png");
            }
            SaveUrls();
        }

        private readonly Dictionary<string, string> workshopNameToShortname = new Dictionary<string, string>
        {
            {"longtshirt", "tshirt.long" },
            {"cap", "hat.cap" },
            {"beenie", "hat.beenie" },
            {"boonie", "hat.boonie" },
            {"balaclava", "mask.balaclava" },
            {"pipeshotgun", "shotgun.waterpipe" },
            {"woodstorage", "box.wooden" },
            {"ak47", "rifle.ak" },
            {"bearrug", "rug.bear" },
            {"boltrifle", "rifle.bolt" },
            {"bandana", "mask.bandana" },
            {"hideshirt", "attire.hide.vest" },
            {"snowjacket", "jacket.snow" },
            {"buckethat", "bucket.helmet" },
            {"semiautopistol", "pistol.semiauto" },
            {"burlapgloves", "burlap.gloves" },
            {"roadsignvest", "roadsign.jacket" },
            {"roadsignpants", "roadsign.kilt" },
            {"burlappants", "burlap.trousers" },
            {"collaredshirt", "shirt.collared" },
            {"mp5", "smg.mp5" },
            {"sword", "salvaged.sword" },
            {"workboots", "shoes.boots" },
            {"vagabondjacket", "jacket" },
            {"hideshoes", "attire.hide.boots" },
            {"deerskullmask", "deer.skull.mask" },
            {"minerhat", "hat.miner" },
            {"lr300", "rifle.lr300" },
            {"lr300.item", "rifle.lr300" },
            {"burlap.gloves", "burlap.gloves.new"},
            {"leather.gloves", "burlap.gloves"},
            {"python", "pistol.python" },
            {"m39", "rifle.m39"},
            {"woodendoubledoor", "door.double.hinged.wood"}
        };

        #endregion Workshop Names and Image URLs

        #region API

        [HookMethod("AddImage")]
        public bool AddImage(string url, string imageName, ulong imageId, Action callback = null)
        {
            loadOrders.Enqueue(new LoadOrder(imageName, new Dictionary<string, string> { { $"{imageName}_{imageId}", url } }, true, callback));
            if (!orderPending)
                ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            return true;
        }

        [HookMethod("AddImageData")]
        public bool AddImageData(string imageName, byte[] array, ulong imageId, Action callback = null)
        {
            loadOrders.Enqueue(new LoadOrder(imageName, new Dictionary<string, byte[]> { { $"{imageName}_{imageId}", array } }, true, callback));
            if (!orderPending)
                ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            return true;
        }

        [HookMethod("GetImageURL")]
        public string GetImageURL(string imageName, ulong imageId = 0)
        {
            string identifier = $"{imageName}_{imageId}";
            string value;
            if (imageUrls.URLs.TryGetValue(identifier, out value))
                return value;
            return string.Empty;
        }

        [HookMethod("GetImage")]
        public string GetImage(string imageName, ulong imageId = 0, bool returnUrl = false)
        {
            string identifier = $"{imageName}_{imageId}";
            string value;
            if (imageIdentifiers.imageIds.TryGetValue(identifier, out value))
                return value;
            else
            {                
                if (imageUrls.URLs.TryGetValue(identifier, out value))
                {
                    AddImage(value, imageName, imageId);
                    return imageIdentifiers.imageIds["LOADING_0"];
                }
            }

            if (returnUrl && !string.IsNullOrEmpty(value))
                return value;

            return imageIdentifiers.imageIds["NONE_0"];
        }

        [HookMethod("GetImageList")]
        public List<ulong> GetImageList(string name)
        {
            List<ulong> skinIds = new List<ulong>();
            var matches = imageUrls.URLs.Keys.Where(x => x.StartsWith(name)).ToArray();
            for (int i = 0; i < matches.Length; i++)
            {
                var index = matches[i].IndexOf("_");
                if (matches[i].Substring(0, index) == name)
                {
                    ulong skinID;
                    if (ulong.TryParse(matches[i].Substring(index + 1), out skinID))
                        skinIds.Add(ulong.Parse(matches[i].Substring(index + 1)));
                }
            }
            return skinIds;
        }

        [HookMethod("GetSkinInfo")]
        public Dictionary<string, object> GetSkinInfo(string name, ulong id)
        {
            Dictionary<string, object> skinInfo;
            if (skinInformation.skinData.TryGetValue($"{name}_{id}", out skinInfo))
                return skinInfo;
            return null;
        }

        [HookMethod("HasImage")]
        public bool HasImage(string imageName, ulong imageId)
        {
            if (imageIdentifiers.imageIds.ContainsKey($"{imageName}_{imageId}") && IsInStorage(uint.Parse(imageIdentifiers.imageIds[$"{imageName}_{imageId}"])))
                return true;

            return false;
        }

        public bool IsInStorage(uint crc) => FileStorage.server.Get(crc, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID) != null;

        [HookMethod("IsReady")]
        public bool IsReady() => loadOrders.Count == 0 && !orderPending;

        [HookMethod("ImportImageList")]
        public void ImportImageList(string title, Dictionary<string, string> imageList, ulong imageId = 0, bool replace = false, Action callback = null)
        {
            Dictionary<string, string> newLoadOrder = new Dictionary<string, string>();
            foreach (var image in imageList)
            {
                if (!replace && HasImage(image.Key, imageId))
                    continue;
                newLoadOrder[$"{image.Key}_{imageId}"] = image.Value;
            }
            if (newLoadOrder.Count > 0)
            {
                loadOrders.Enqueue(new LoadOrder(title, newLoadOrder, false, callback));
                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            }
            else
            {
                if (callback != null)
                    callback.Invoke();
            }
        }

        [HookMethod("ImportItemList")]
        public void ImportItemList(string title, Dictionary<string, Dictionary<ulong, string>> itemList, bool replace = false, Action callback = null)
        {
            Dictionary<string, string> newLoadOrder = new Dictionary<string, string>();
            foreach (var image in itemList)
            {
                foreach (var skin in image.Value)
                {
                    if (!replace && HasImage(image.Key, skin.Key))
                        continue;
                    newLoadOrder[$"{image.Key}_{skin.Key}"] = skin.Value;
                }
            }
            if (newLoadOrder.Count > 0)
            {
                loadOrders.Enqueue(new LoadOrder(title, newLoadOrder, false, callback));
                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            }
            else
            {
                if (callback != null)
                    callback.Invoke();
            }
        }

        [HookMethod("ImportImageData")]
        public void ImportImageData(string title, Dictionary<string, byte[]> imageList, ulong imageId = 0, bool replace = false, Action callback = null)
        {
            Dictionary<string, byte[]> newLoadOrder = new Dictionary<string, byte[]>();
            foreach (var image in imageList)
            {
                if (!replace && HasImage(image.Key, imageId))
                    continue;
                newLoadOrder[$"{image.Key}_{imageId}"] = image.Value;
            }
            if (newLoadOrder.Count > 0)
            {
                loadOrders.Enqueue(new LoadOrder(title, newLoadOrder, false, callback));
                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            }
            else
            {
                if (callback != null)
                    callback.Invoke();
            }
        }

        [HookMethod("LoadImageList")]
        public void LoadImageList(string title, List<KeyValuePair<string, ulong>> imageList, Action callback = null)
        {
            Dictionary<string, string> newLoadOrderURL = new Dictionary<string, string>();
            List<KeyValuePair<string, ulong>> workshopDownloads = new List<KeyValuePair<string, ulong>>();

            foreach (KeyValuePair<string, ulong> image in imageList)
            {
                if (HasImage(image.Key, image.Value))
                    continue;

                string identifier = $"{image.Key}_{image.Value}";

                if (imageUrls.URLs.ContainsKey(identifier) && !newLoadOrderURL.ContainsKey(identifier))
                {
                    newLoadOrderURL.Add(identifier, imageUrls.URLs[identifier]);
                }
                else
                {
                    workshopDownloads.Add(new KeyValuePair<string, ulong>(image.Key, image.Value));
                }
            }

            if (workshopDownloads.Count > 0)
            {
                QueueWorkshopDownload(title, newLoadOrderURL, workshopDownloads, 0, callback);
                return;
            }

            if (newLoadOrderURL.Count > 0)
            {
                loadOrders.Enqueue(new LoadOrder(title, newLoadOrderURL, null, false, callback));
                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            }
            else
            {
                if (callback != null)
                    callback.Invoke();
            }
        }

        [HookMethod("RemoveImage")]
        public void RemoveImage(string imageName, ulong imageId)
        {
            if (!HasImage(imageName, imageId))
                return;

            uint crc = uint.Parse(GetImage(imageName, imageId));
            FileStorage.server.Remove(crc, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID);
        }

        [HookMethod("SendImage")]
        public void SendImage(BasePlayer player, string imageName, ulong imageId = 0)
        {
            if (!HasImage(imageName, imageId) || player?.net?.connection == null)
                return;

            uint crc = uint.Parse(GetImage(imageName, imageId));
            byte[] array = FileStorage.server.Get(crc, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID);

            if (array == null)
                return;

            CommunityEntity.ServerInstance.ClientRPCEx<uint, uint, byte[]>(new Network.SendInfo(player.net.connection)
            {
                channel = 2,
                method = Network.SendMethod.Reliable
            }, null, "CL_ReceiveFilePng", crc, (uint)array.Length, array);
        }
        #endregion API

        #region Steam API
        private List<ulong> BuildApprovedItemList()
        {
            List<ulong> list = new List<ulong>();

            foreach (InventoryDef item in Steamworks.SteamInventory.Definitions)
            {
                string shortname = item.GetProperty("itemshortname");
                ulong workshopid;

                if (item == null || string.IsNullOrEmpty(shortname))
                    continue;

                if (workshopNameToShortname.ContainsKey(shortname))
                    shortname = workshopNameToShortname[shortname];

                if (item.Id < 100)
                    continue;

                if (!ulong.TryParse(item.GetProperty("workshopid"), out workshopid))
                    continue;

                if (HasImage(shortname, workshopid))
                    continue;

                list.Add(workshopid);
            }

            return list;
        }

        private string BuildDetailsString(List<ulong> list, int page)
        {
            int start = page * 100;
            int end = start + 100 > list.Count ? list.Count : start + 100;

            string details = string.Format("?key={0}&itemcount={1}", configData.SteamAPIKey, end - start);

            for (int i = start; i < end; i++)
                details += string.Format("&publishedfileids[{0}]={1}", i - start, list[i]);

            return details;
        }

        private string BuildDetailsString(List<ulong> list)
        {
            string details = string.Format("?key={0}&itemcount={1}", configData.SteamAPIKey, list.Count);

            for (int i = 0; i < list.Count; i++)
                details += string.Format("&publishedfileids[{0}]={1}", i, list[i]);

            return details;
        }

        private bool IsValid(PublishedFileQueryDetail item)
        {
            if (string.IsNullOrEmpty(item.preview_url))
                return false;

            if (item.tags == null)
                return false;

            return true;
        }

        private void GetItemSkins()
        {
            Steamworks.SteamInventory.OnDefinitionsUpdated -= GetItemSkins;

            PrintWarning("Retrieving item skin lists...");

            GetApprovedItemSkins(BuildApprovedItemList(), 0);
        }

        private void QueueFileQueryRequest(string details, Action<PublishedFileQueryDetail[]> callback)
        {
            webrequest.Enqueue(STEAM_API_URL, details, (code, response) =>
            {
                try
                {
                    PublishedFileQueryResponse query = JsonConvert.DeserializeObject<PublishedFileQueryResponse>(response, errorHandling);
                    if (query == null || query.response == null || query.response.publishedfiledetails.Length == 0)
                    {
                        if (code != 200)
                            PrintError($"There was a error querying Steam for workshop item data : Code ({code})");
                        return;
                    }
                    else
                    {
                        if (query?.response?.publishedfiledetails?.Length > 0)
                            callback.Invoke(query.response.publishedfiledetails);
                    }
                }
                catch { }
            }, this, Core.Libraries.RequestMethod.POST);
        }

        private void GetApprovedItemSkins(List<ulong> itemsToDownload, int page)
        {
            if (itemsToDownload.Count < 1)
            {
                Puts("Approved skins loaded");

                SaveUrls();
                SaveSkinInfo();

                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
                return;
            }

            int totalPages = Mathf.CeilToInt((float)itemsToDownload.Count / 100f) - 1;

            string details = BuildDetailsString(itemsToDownload, page);

            QueueFileQueryRequest(details, (PublishedFileQueryDetail[] items) =>
            {
                ServerMgr.Instance.StartCoroutine(ProcessApprovedBlock(itemsToDownload, items, page, totalPages));
            });
        }

        private IEnumerator ProcessApprovedBlock(List<ulong> itemsToDownload, PublishedFileQueryDetail[] items, int page, int totalPages)
        {
            PrintWarning($"Processing approved skins; Page {page + 1}/{totalPages + 1}");

            Dictionary<string, Dictionary<ulong, string>> loadOrder = new Dictionary<string, Dictionary<ulong, string>>();

            foreach (PublishedFileQueryDetail item in items)
            {
                if (!IsValid(item))
                    continue;

                foreach (PublishedFileQueryDetail.Tag tag in item.tags)
                {
                    if (string.IsNullOrEmpty(tag.tag))
                        continue;

                    ulong workshopid = Convert.ToUInt64(item.publishedfileid);

                    string adjTag = tag.tag.ToLower().Replace("skin", "").Replace(" ", "").Replace("-", "").Replace(".item", "");
                    if (workshopNameToShortname.ContainsKey(adjTag))
                    {
                        string shortname = workshopNameToShortname[adjTag];

                        string identifier = $"{shortname}_{workshopid}";

                        if (!imageUrls.URLs.ContainsKey(identifier))
                            imageUrls.URLs.Add(identifier, item.preview_url.Replace("https", "http"));

                        skinInformation.skinData[identifier] = new Dictionary<string, object>
                                {
                                    {"title", item.title },
                                    {"votesup", 0 },
                                    {"votesdown", 0 },
                                    {"description", item.description },
                                    {"score", 0 },
                                    {"views", 0 },
                                    {"created", new DateTime() },
                                };
                    }
                }
            }

            yield return CoroutineEx.waitForEndOfFrame;
            yield return CoroutineEx.waitForEndOfFrame;

            if (page < totalPages)
                GetApprovedItemSkins(itemsToDownload, page + 1);
            else
            {
                itemsToDownload.Clear();

                Puts("Approved skins loaded");

                SaveUrls();
                SaveSkinInfo();

                if (!orderPending)
                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
            }
        }

        private void QueueWorkshopDownload(string title, Dictionary<string, string> newLoadOrderURL, List<KeyValuePair<string, ulong>> workshopDownloads, int page = 0, Action callback = null)
        {
            int rangeMin = page * 100;
            int rangeMax = (page + 1) * 100;

            if (rangeMax > workshopDownloads.Count)
                rangeMax = workshopDownloads.Count;

            List<ulong> requestedSkins = workshopDownloads.GetRange(rangeMin, rangeMax - rangeMin).Select(x => x.Value).ToList();

            int totalPages = Mathf.CeilToInt((float)workshopDownloads.Count / 100f) - 1;

            string details = BuildDetailsString(requestedSkins);

            try
            {
                webrequest.Enqueue(STEAM_API_URL, details, (code, response) =>
                {
                    PublishedFileQueryResponse query = JsonConvert.DeserializeObject<PublishedFileQueryResponse>(response, errorHandling);
                    if (query == null || query.response == null || query.response.publishedfiledetails.Length == 0)
                    {
                        if (code != 200)
                            PrintError($"There was a error querying Steam for workshop item data : Code ({code})");

                        if (page < totalPages)
                            QueueWorkshopDownload(title, newLoadOrderURL, workshopDownloads, page + 1, callback);
                        else
                        {
                            if (newLoadOrderURL.Count > 0)
                            {
                                loadOrders.Enqueue(new LoadOrder(title, newLoadOrderURL, null, false, page < totalPages ? null : callback));
                                if (!orderPending)
                                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
                            }
                            else
                            {
                                if (callback != null)
                                    callback.Invoke();
                            }
                        }
                        return;
                    }
                    else
                    {
                        if (query.response.publishedfiledetails.Length > 0)
                        {
                            Dictionary<string, Dictionary<ulong, string>> loadOrder = new Dictionary<string, Dictionary<ulong, string>>();

                            foreach (PublishedFileQueryDetail item in query.response.publishedfiledetails)
                            {
                                if (!string.IsNullOrEmpty(item.preview_url))
                                {
                                    ulong skinId = Convert.ToUInt64(item.publishedfileid);

                                    KeyValuePair<string, ulong>? kvp = workshopDownloads.Find(x => x.Value == skinId);

                                    if (kvp.HasValue)
                                    {
                                        string identifier = $"{kvp.Value.Key}_{kvp.Value.Value}";

                                        if (!newLoadOrderURL.ContainsKey(identifier))
                                            newLoadOrderURL.Add(identifier, item.preview_url);

                                        if (!imageUrls.URLs.ContainsKey(identifier))
                                            imageUrls.URLs.Add(identifier, item.preview_url);

                                        skinInformation.skinData[identifier] = new Dictionary<string, object>
                                        {
                                            {"title", item.title },
                                            {"votesup",  0 },
                                            {"votesdown", 0 },
                                            {"description", item.description },
                                            {"score", 0 },
                                            {"views", item.views },
                                            {"created", new DateTime(item.time_created) },
                                        };

                                        requestedSkins.Remove(skinId);
                                    }
                                }
                            }

                            SaveUrls();
                            SaveSkinInfo();

                            if (requestedSkins.Count != 0)
                            {
                                Puts($"{requestedSkins.Count} workshop skin ID's for image batch ({title}) are invalid! They may have been removed from the workshop\nIDs: {requestedSkins.ToSentence()}");
                            }
                        }

                        if (page < totalPages)
                            QueueWorkshopDownload(title, newLoadOrderURL, workshopDownloads, page + 1, callback);
                        else
                        {
                            if (newLoadOrderURL.Count > 0)
                            {
                                loadOrders.Enqueue(new LoadOrder(title, newLoadOrderURL, null, false, page < totalPages ? null : callback));
                                if (!orderPending)
                                    ServerMgr.Instance.StartCoroutine(ProcessLoadOrders());
                            }
                            else
                            {
                                if (callback != null)
                                    callback.Invoke();
                            }
                        }
                    }
                },
                this,
                Core.Libraries.RequestMethod.POST);
            }
            catch { }
        }

        #region JSON Response Classes
        public class PublishedFileQueryResponse
        {
            public FileResponse response { get; set; }
        }

        public class FileResponse
        {
            public int result { get; set; }
            public int resultcount { get; set; }
            public PublishedFileQueryDetail[] publishedfiledetails { get; set; }
        }

        public class PublishedFileQueryDetail
        {
            public string publishedfileid { get; set; }
            public int result { get; set; }
            public string creator { get; set; }
            public int creator_app_id { get; set; }
            public int consumer_app_id { get; set; }
            public string filename { get; set; }
            public int file_size { get; set; }
            public string preview_url { get; set; }
            public string hcontent_preview { get; set; }
            public string title { get; set; }
            public string description { get; set; }
            public int time_created { get; set; }
            public int time_updated { get; set; }
            public int visibility { get; set; }
            public int banned { get; set; }
            public string ban_reason { get; set; }
            public int subscriptions { get; set; }
            public int favorited { get; set; }
            public int lifetime_subscriptions { get; set; }
            public int lifetime_favorited { get; set; }
            public int views { get; set; }
            public Tag[] tags { get; set; }

            public class Tag
            {
                public string tag { get; set; }
            }
        }
        #endregion
        #endregion

        #region Commands

        [ConsoleCommand("cancelstorage")]
        private void cmdCancelStorage(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null || arg.Connection.authLevel > 0)
            {
                if (!orderPending)
                    PrintWarning("No images are currently being downloaded");
                else
                {
                    assets.ClearList();
                    loadOrders.Clear();
                    PrintWarning("Pending image downloads have been cancelled!");
                }
            }
        }

        private List<ulong> pendingAnswers = new List<ulong>();

        [ConsoleCommand("refreshallimages")]
        private void cmdRefreshAllImages(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null || arg.Connection.authLevel > 0)
            {
                SendReply(arg, "Running this command will wipe all of your ImageLibrary data, meaning every registered image will need to be re-downloaded. Are you sure you wish to continue? (type yes or no)");

                ulong userId = arg.Connection == null || arg.IsRcon ? 0U : arg.Connection.userid;
                if (!pendingAnswers.Contains(userId))
                {
                    pendingAnswers.Add(userId);
                    timer.In(5, () =>
                    {
                        if (pendingAnswers.Contains(userId))
                            pendingAnswers.Remove(userId);
                    });
                }
            }
        }

        [ConsoleCommand("yes")]
        private void cmdRefreshAllImagesYes(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null || arg.Connection.authLevel > 0)
            {
                ulong userId = arg.Connection == null || arg.IsRcon ? 0U : arg.Connection.userid;
                if (pendingAnswers.Contains(userId))
                {
                    PrintWarning("Wiping ImageLibrary data and redownloading ImageLibrary specific images. All plugins that have registered images via ImageLibrary will need to be re-loaded!");
                    RefreshImagery();

                    pendingAnswers.Remove(userId);
                }
            }
        }

        [ConsoleCommand("no")]
        private void cmdRefreshAllImagesNo(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null || arg.Connection.authLevel > 0)
            {
                ulong userId = arg.Connection == null || arg.IsRcon ? 0U : arg.Connection.userid;

                if (pendingAnswers.Contains(userId))
                {
                    SendReply(arg, "ImageLibrary data wipe aborted!");
                    pendingAnswers.Remove(userId);
                }
            }
        }

        #endregion Commands

        #region Image Storage

        private struct LoadOrder
        {
            public string loadName;
            public bool loadSilent;

            public Dictionary<string, string> imageList;
            public Dictionary<string, byte[]> imageData;

            public Action callback;

            public LoadOrder(string loadName, Dictionary<string, string> imageList, bool loadSilent = false, Action callback = null)
            {
                this.loadName = loadName;
                this.imageList = imageList;
                this.imageData = null;
                this.loadSilent = loadSilent;
                this.callback = callback;
            }
            public LoadOrder(string loadName, Dictionary<string, byte[]> imageData, bool loadSilent = false, Action callback = null)
            {
                this.loadName = loadName;
                this.imageList = null;
                this.imageData = imageData;
                this.loadSilent = loadSilent;
                this.callback = callback;
            }
            public LoadOrder(string loadName, Dictionary<string, string> imageList, Dictionary<string, byte[]> imageData, bool loadSilent = false, Action callback = null)
            {
                this.loadName = loadName;
                this.imageList = imageList;
                this.imageData = imageData;
                this.loadSilent = loadSilent;
                this.callback = callback;
            }
        }

        private class ImageAssets : MonoBehaviour
        {
            private Queue<QueueItem> queueList = new Queue<QueueItem>();
            private bool isLoading;
            private double nextUpdate;
            private int listCount;
            private string request;

            private Action callback;

            private void OnDestroy()
            {
                queueList.Clear();
            }

            public void Add(string name, string url = null, byte[] bytes = null)
            {
                queueList.Enqueue(new QueueItem(name, url, bytes));
            }

            public void RegisterCallback(Action callback) => this.callback = callback;

            public void BeginLoad(string request)
            {
                this.request = request;
                nextUpdate = UnityEngine.Time.time + il.configData.UpdateInterval;
                listCount = queueList.Count;
                Next();
            }

            public void ClearList()
            {
                queueList.Clear();
                il.orderPending = false;
            }

            private void Next()
            {
                if (queueList.Count == 0)
                {
                    il.orderPending = false;
                    il.SaveData();
                    if (!string.IsNullOrEmpty(request))
                        print($"Image batch ({request}) has been stored successfully");

                    request = string.Empty;
                    listCount = 0;

                    if (callback != null)
                        callback.Invoke();

                    StartCoroutine(il.ProcessLoadOrders());
                    return;
                }
                if (il.configData.ShowProgress && listCount > 1)
                {
                    var time = UnityEngine.Time.time;
                    if (time > nextUpdate)
                    {
                        var amountDone = listCount - queueList.Count;
                        print($"{request} storage process at {Math.Round((amountDone / (float)listCount) * 100, 0)}% ({amountDone}/{listCount})");
                        nextUpdate = time + il.configData.UpdateInterval;
                    }
                }
                isLoading = true;

                QueueItem queueItem = queueList.Dequeue();
                if (!string.IsNullOrEmpty(queueItem.url))
                    StartCoroutine(DownloadImage(queueItem));
                else StoreByteArray(queueItem.bytes, queueItem.name);
            }

            private IEnumerator DownloadImage(QueueItem info)
            {
                UnityWebRequest www = UnityWebRequest.Get(info.url);

                yield return www.SendWebRequest();
                if (il == null) yield break;
                if (www.isNetworkError || www.isHttpError)
                {
                    print(string.Format("Image failed to download! Error: {0} - Image Name: {1} - Image URL: {2}", www.error, info.name, info.url));
                    www.Dispose();
                    isLoading = false;
                    Next();
                    yield break;
                }

                Texture2D texture = new Texture2D(2, 2);
                texture.LoadImage(www.downloadHandler.data);
                if (texture != null)
                {
                    byte[] bytes = texture.EncodeToPNG();
                    DestroyImmediate(texture);
                    StoreByteArray(bytes, info.name);
                }
                www.Dispose();
            }

            private void StoreByteArray(byte[] bytes, string name)
            {
                if (bytes != null)
                    il.imageIdentifiers.imageIds[name] = FileStorage.server.Store(bytes, FileStorage.Type.png, CommunityEntity.ServerInstance.net.ID).ToString();
                isLoading = false;
                Next();
            }

            private class QueueItem
            {
                public byte[] bytes;
                public string url;
                public string name;
                public QueueItem(string name, string url = null, byte[] bytes = null)
                {
                    this.bytes = bytes;
                    this.url = url;
                    this.name = name;
                }
            }
        }

        #endregion Image Storage

        #region Config

        private ConfigData configData;

        class ConfigData
        {
            [JsonProperty(PropertyName = "Avatars - Store player avatars")]
            public bool StoreAvatars { get; set; }

            [JsonProperty(PropertyName = "Steam API key (get one here https://steamcommunity.com/dev/apikey)")]
            public string SteamAPIKey { get; set; }

            //[JsonProperty(PropertyName = "Workshop - Download workshop image information")]
            //public bool WorkshopImages { get; set; }

            [JsonProperty(PropertyName = "Progress - Show download progress in console")]
            public bool ShowProgress { get; set; }

            [JsonProperty(PropertyName = "Progress - Time between update notifications")]
            public int UpdateInterval { get; set; }

            [JsonProperty(PropertyName = "User Images - Manually define images to be loaded")]
            public Dictionary<string, string> UserImages { get; set; }

            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                ShowProgress = true,
                SteamAPIKey = string.Empty,
                StoreAvatars = false,
                UpdateInterval = 20,
                UserImages = new Dictionary<string, string>(),
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            ConfigData baseConfig = GetBaseConfig();

            if (configData.Version < new VersionNumber(2, 0, 47))
                configData = baseConfig;

            if (configData.Version < new VersionNumber(2, 0, 53))
                configData.StoreAvatars = false;

            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        #endregion Config

        #region Data Management

        private void SaveData() => identifiers.WriteObject(imageIdentifiers);
        private void SaveSkinInfo() => skininfo.WriteObject(skinInformation);
        private void SaveUrls() => urls.WriteObject(imageUrls);

        private void LoadData()
        {
            try
            {
                imageIdentifiers = identifiers.ReadObject<ImageIdentifiers>();
            }
            catch
            {
                imageIdentifiers = new ImageIdentifiers();
            }
            try
            {
                skinInformation = skininfo.ReadObject<SkinInformation>();
            }
            catch
            {
                skinInformation = new SkinInformation();
            }
            try
            {
                imageUrls = urls.ReadObject<ImageURLs>();
            }
            catch
            {
                imageUrls = new ImageURLs();
            }
            if (skinInformation == null)
                skinInformation = new SkinInformation();
            if (imageIdentifiers == null)
                imageIdentifiers = new ImageIdentifiers();
            if (imageUrls == null)
                imageUrls = new ImageURLs();
        }

        private class ImageIdentifiers
        {
            public uint lastCEID;
            public Hash<string, string> imageIds = new Hash<string, string>();
        }

        private class SkinInformation
        {
            public Hash<string, Dictionary<string, object>> skinData = new Hash<string, Dictionary<string, object>>();
        }

        private class ImageURLs
        {
            public Hash<string, string> URLs = new Hash<string, string>();
        }


        public class AvatarRoot
        {
            public Response response { get; set; }

            public class Response
            {
                public Player[] players { get; set; }

                public class Player
                {
                    public string steamid { get; set; }
                    public int communityvisibilitystate { get; set; }
                    public int profilestate { get; set; }
                    public string personaname { get; set; }
                    public int lastlogoff { get; set; }
                    public string profileurl { get; set; }
                    public string avatar { get; set; }
                    public string avatarmedium { get; set; }
                    public string avatarfull { get; set; }
                    public int personastate { get; set; }
                    public string realname { get; set; }
                    public string primaryclanid { get; set; }
                    public int timecreated { get; set; }
                    public int personastateflags { get; set; }
                }
            }
        }
        #endregion Data Management
    }
}


// --- End of file: ImageLibrary.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/AdminHammer.cs ---
// --- Original Local Path: KualaRust/AdminHammer.cs ---

using System.Collections.Generic;
using Oxide.Core.Configuration;
using UnityEngine;
using Oxide.Core;
using System;
using System.Linq;

namespace Oxide.Plugins
{
    [Info("AdminHammer", "mvrb", "1.12.0")]
    class AdminHammer : RustPlugin
    {
        public static AdminHammer plugin;

        private const string permAllow = "adminhammer.allow";
        private bool logToConsole = true;
        private bool logAdminInfo = true;
        private bool showBoxContents = true;
        private bool showCode = true;
        private float toolDistance = 200f;
        private string toolUsed = "hammer";
        private string commandToRun = "box";
        private string chatCommand = "b";
        private bool showSphere = false;
        private bool performanceMode = false;

        private int layerMask = LayerMask.GetMask("Construction", "Deployed", "Default");

        private readonly DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetFile("AdminHammer");

        private List<ulong> Users = new List<ulong>();

        protected override void LoadDefaultConfig()
        {
            Config["LogToConsole"] = logToConsole = GetConfig("LogToFile", true);
            Config["LogAdminInfo"] = logAdminInfo = GetConfig("LogAdminInfo", true);
            Config["ShowBoxContents"] = showBoxContents = GetConfig("ShowBoxContents", true);
            Config["ShowCode"] = showCode = GetConfig("ShowCode", true);
            Config["ShowSphere"] = showSphere = GetConfig("ShowSphere", false);
            Config["ToolDistance"] = toolDistance = GetConfig("ToolDistance", 200f);
            Config["ToolUsed"] = toolUsed = GetConfig("ToolUsed", "hammer");
            Config["CommandToRun (Leave blank for no command)"] = commandToRun = GetConfig("CommandToRun (Leave blank for no command)", "box");
            Config["ChatCommand"] = chatCommand = GetConfig("ChatCommand", "b");
            Config["PerformanceMode"] = performanceMode = GetConfig("PerformanceMode", false);

            SaveConfig();
        }

        private void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["NoAuthorizedPlayers"] = "No authorized players.",
                ["AuthorizedPlayers"] = "Authorized players in the {0} owned by {1}:",
                ["NoEntityFound"] = "No entity found. Look at an entity and right-click while holding a {0}.",
                ["NoOwner"] = "No owner found for this entity.",
                ["ChatEntityOwnedBy"] = "This {0} is owned by {1}",
                ["DoorCode"] = "Door Code: <color=yellow>{0}</color>",
                ["ConsoleEntityOwnedBy"] = "This {0} is owned by www.steamcommunity.com/profiles/{1}",
                ["ToolActivated"] = "You have enabled AdminHammer.",
                ["ToolDeactivated"] = "You have disabled AdminHammer.",
                ["AdminUsedTool"] = "{0} [{1}] used AdminHammer on a {2} owned by {3} [{4}] located at {5}",
                ["PerformanceMode"] = "Performance mode is enabled, so you have to use the chat command <color=yellow>/{0}</color> instead of right-clicking"
            }, this);
        }

        private void Init()
        {
            plugin = this;

            Users = dataFile.ReadObject<List<ulong>>();

            LoadDefaultConfig();
            permission.RegisterPermission(permAllow, this);

            cmd.AddChatCommand("ah", this, "CmdAdminHammer");
            cmd.AddChatCommand("adminhammer", this, "CmdAdminHammer");
            cmd.AddChatCommand(chatCommand, this, "CmdCheckEntity");
        }

        private void OnServerInitialized()
        {
            if (performanceMode) return;

            bool fileChanged = false;

            foreach (var player in BasePlayer.activePlayerList)
            {
                if (Users.Contains(player.userID))
                {
                    if (!permission.UserHasPermission(player.UserIDString, permAllow))
                    {
                        Users.Remove(player.userID);
                        fileChanged = true;
                        continue;
                    }

                    if (player.gameObject.GetComponent<AH>() == null)
                    {
                        player.gameObject.AddComponent<AH>();
                    }
                }
            }

            if (fileChanged)
            {
                dataFile.WriteObject(Users);
            }
        }

        private void Unload()
        {
            foreach (var ah in UnityEngine.Object.FindObjectsOfType<AH>().ToList())
            {
                GameObject.Destroy(ah);
            }
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (!Users.Contains(player.userID)) return;

            if (!permission.UserHasPermission(player.UserIDString, permAllow))
            {
                Users.Remove(player.userID);
                dataFile.WriteObject(Users);
                return;
            }

            if (performanceMode) return;

            if (player.gameObject.GetComponent<AH>() == null)
            {
                player.gameObject.AddComponent<AH>();
            }
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            player.gameObject.GetComponent<AH>()?.Destroy();
        }

        private void CmdAdminHammer(BasePlayer player)
        {
            if (!permission.UserHasPermission(player.UserIDString, permAllow)) return;

            if (performanceMode)
            {
                player.ChatMessage(Lang("PerformanceMode", player.UserIDString, chatCommand));
                return;
            }

            if (Users.Contains(player.userID))
            {
                Users.Remove(player.userID);

                if (player.gameObject.GetComponent<AH>() != null)
                    player.gameObject.GetComponent<AH>().Destroy();

                player.ChatMessage(Lang("ToolDeactivated", player.UserIDString));

                Interface.Oxide.CallHook("OnAdminHammerDisabled", player);
            }
            else
            {
                Users.Add(player.userID);

                if (player.gameObject.GetComponent<AH>() == null)
                    player.gameObject.AddComponent<AH>();

                player.ChatMessage(Lang("ToolActivated", player.UserIDString));

                Interface.Oxide.CallHook("OnAdminHammerEnabled", player);
            }

            dataFile.WriteObject(Users);
        }

        private void CmdCheckEntity(BasePlayer player)
        {
            if (!permission.UserHasPermission(player.UserIDString, permAllow)) return;

            CheckEntity(player);
        }

        private void CheckEntity(BasePlayer player)
        {
            RaycastHit hit;
            var raycast = Physics.Raycast(player.eyes.HeadRay(), out hit, toolDistance, layerMask);
            BaseEntity entity = raycast ? hit.GetEntity() : null;

            if (!entity)
            {
                player.ChatMessage(Lang("NoEntityFound", player.UserIDString, toolUsed));
                return;
            }

            bool hasSentMsg = false;

            if (entity is Door)
            {
                var door = entity as Door;
                var lockSlot = door.GetSlot(BaseEntity.Slot.Lock);

                if (lockSlot is CodeLock)
                {
                    var codeLock = (CodeLock)lockSlot;
                    string msg = Lang("AuthorizedPlayers", player.UserIDString, door.ShortPrefabName, GetName(entity.OwnerID.ToString())) + "\n";

                    int whitelisted = 0;

                    msg += $"\nWHITELISTED PLAYERS: [<color=yellow>{codeLock.code}</color>] \n";
                    foreach (var user in codeLock.whitelistPlayers)
                    {
                        whitelisted++;
                        msg += $"{whitelisted}. {GetName(user.ToString())}\n";
                    }

                    int guests = 0;
                    msg += "\nGUEST PLAYERS: ";
                    if (!string.IsNullOrEmpty(codeLock.guestCode)) msg += $"[<color=yellow>{codeLock.guestCode}</color>] ";
                    if (codeLock.guestPlayers.Count == 0)
                    {
                        msg += "\n- None";
                    }
                    else
                    {
                        foreach (var user in codeLock.guestPlayers)
                        {
                            if (codeLock.whitelistPlayers.Contains(user)) continue;

                            guests++;
                            msg += $"{guests}. {GetName(user.ToString())}\n";
                        }
                    }

                    player.ChatMessage(whitelisted == 0 ? Lang("NoAuthorizedPlayers", player.UserIDString) : msg);
                    //if (showCode) player.ChatMessage(Lang("DoorCode", player.UserIDString, (door.GetSlot(BaseEntity.Slot.Lock) as CodeLock)?.code));
                }
                else if (lockSlot is BaseLock)
                {
                    player.ChatMessage(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ChatEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, GetName(entity.OwnerID.ToString())));
                    Puts(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ConsoleEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, entity.OwnerID.ToString()));
                }

                hasSentMsg = true;
            }
            else if (entity is SleepingBag)
            {
                SleepingBag sleepingBag = entity as SleepingBag;

                player.ChatMessage($"This SleepingBag has been assigned to {GetName(sleepingBag.deployerUserID.ToString())} by {GetName(sleepingBag.OwnerID.ToString())}");

                hasSentMsg = true;
            }
            else if (entity is AutoTurret)
            {
                player.ChatMessage(GetAuthorized(entity, player));

                if (showBoxContents)
                {
                    string msg = $"Items in the AutoTurret owned by {GetName(entity.OwnerID.ToString())}:\n";
                    foreach (var item in (entity as AutoTurret).inventory.itemList)
                    {
                        msg += $"{item.amount}x {item.info.displayName.english}\n";
                    }

                    player.ChatMessage(msg);
                }

                hasSentMsg = true;
            }
            else if (entity is BuildingPrivlidge)
            {
                player.ChatMessage(GetAuthorized(entity, player));

                BuildingPrivlidge priv = entity as BuildingPrivlidge;
                if (priv != null)
                {
                    float protectedMinutes = priv.GetProtectedMinutes();

                    TimeSpan t = TimeSpan.FromMinutes(protectedMinutes);

                    string formattedTime = string.Format("{0:D2} days {1:D2} hours {2:D2} minutes {3:D2} seconds",
                                t.Days,
                                t.Hours,
                                t.Minutes,
                                t.Seconds,
                                t.Milliseconds);

                    player.ChatMessage($"The base is protected for {formattedTime}");
                }

                if (!string.IsNullOrEmpty(commandToRun)) player.Command("chat.say /" + commandToRun);

                hasSentMsg = true;
            }
            else if (entity is StorageContainer)
            {
                if (showBoxContents)
                {
                    var storageContainer = entity as StorageContainer;
                    string msg = $"Items in the {storageContainer.ShortPrefabName} owned by {GetName(storageContainer.OwnerID.ToString())}:\n";
                    foreach (var item in storageContainer.inventory.itemList)
                        msg += $"{item.amount}x {item.info.displayName.english}\n";
                    player.ChatMessage(msg);
                }

                CodeLock codeLock = (CodeLock)entity.GetSlot(BaseEntity.Slot.Lock);
                if (codeLock != null)
                {
                    string msg = Lang("AuthorizedPlayers", player.UserIDString, entity.ShortPrefabName, GetName(entity.OwnerID.ToString())) + "\n";

                    int authed = 0;

                    string consoleMsg = "";

                    foreach (var user in codeLock.whitelistPlayers)
                    {
                        authed++;
                        msg += $"{authed}. {GetName(user.ToString())} ({user})\n";
                        if (logToConsole) consoleMsg += $"{authed}. {user.ToString()} {GetName(user.ToString())} \n";
                    }

                    player.ChatMessage(authed == 0 ? Lang("NoAuthorizedPlayers", player.UserIDString) : msg);
                    player.ChatMessage("CodeLock Code: " + (entity.GetSlot(BaseEntity.Slot.Lock) as CodeLock)?.code.ToString());
                    if (logToConsole) Puts(consoleMsg);
                }

                player.ChatMessage(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ChatEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, GetName(entity.OwnerID.ToString())));
                Puts(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ConsoleEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, entity.OwnerID.ToString()));

                if (!string.IsNullOrEmpty(commandToRun)) player.Command("chat.say /" + commandToRun);

                hasSentMsg = true;
            }

            if (!hasSentMsg) player.ChatMessage(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ChatEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, GetName(entity.OwnerID.ToString())));

            if (showSphere) player.SendConsoleCommand("ddraw.sphere", 2f, Color.blue, entity.CenterPoint(), 1f);

            if (logToConsole) Puts(entity.OwnerID == 0 ? Lang("NoOwner", player.UserIDString, entity.ShortPrefabName) : Lang("ConsoleEntityOwnedBy", player.UserIDString, entity.ShortPrefabName, entity.OwnerID.ToString()));

            if (logAdminInfo) Puts(Lang("AdminUsedTool", player.UserIDString, player.displayName, player.userID, entity.ShortPrefabName, GetName(entity.OwnerID.ToString()), entity.OwnerID.ToString(), entity.transform.position.ToString()));
        }

        private class AH : MonoBehaviour
        {
            public BasePlayer player;
            private float lastCheck;

            private void Awake()
            {
                player = GetComponent<BasePlayer>();
                lastCheck = Time.realtimeSinceStartup;
            }

            private void FixedUpdate()
            {
                if (player == null || !player.IsConnected)
                {
                    Destroy();
                    return;
                }

                float currentTime = Time.realtimeSinceStartup;

                if (!player.serverInput.WasJustPressed(BUTTON.FIRE_SECONDARY) || (player.GetActiveItem() as Item)?.info.shortname != plugin.toolUsed) return;

                if (currentTime - lastCheck >= 0.25f)
                {
                    plugin.CheckEntity(player);
                    lastCheck = currentTime;
                }
            }

            public void Destroy()
            {
                Destroy(this);
            }
        }

        private string GetAuthorized(BaseEntity entity, BasePlayer player)
        {
            string msg = Lang("AuthorizedPlayers", player.UserIDString, entity.ShortPrefabName, GetName(entity.OwnerID.ToString())) + "\n";
            var turret = entity as AutoTurret;
            var priv = entity as BuildingPrivlidge;
            int authed = 0;

            foreach (var user in (turret ? turret.authorizedPlayers : priv.authorizedPlayers))
            {
                authed++;
                msg += $"{authed}. {GetName(user.userid.ToString())}\n";
                Puts($"{authed}. {user.userid} {GetName(user.userid.ToString())}\n");
            }

            return authed == 0 ? Lang("NoAuthorizedPlayers", player.UserIDString) : msg;
        }

        private string GetPlayerColor(ulong id) => BasePlayer.FindByID(id) != null ? "green" : "red";

        private string GetName(string id)
        {
            if (id == "0") return "[SERVERSPAWN]";

            string color = GetPlayerColor(ulong.Parse(id));

            return $"<color={color}> {covalence.Players.FindPlayerById(id)?.Name} </color> ({id})";
        }

        private T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));

        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
    }
}

// --- End of file: AdminHammer.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/OreBonus.cs ---
// --- Original Local Path: KualaRust/OreBonus.cs ---

﻿using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("OreBonus", "DezLife", "3.5.0")]
    [Description("Добавляет новую руду в камни")]
    public class OreBonus : RustPlugin
    {
        public static OreBonus instance;
        public Dictionary<ulong, string> ToOres = new Dictionary<ulong, string>();
        bool furnacec = false;

        #region CFG
        public class CustomItem
        {
            [JsonProperty("Отображаемое имя")]
            public string DisplayName;
            [JsonProperty("Название предмета который он будет заменять")]
            public string ReplaceShortName;
            [JsonProperty("Что он получит после переплавки")]
            public string Shortnames;
            [JsonProperty("Количевство радиации каторое будет даваться каждый тик")]
            public float Radiations;
            [JsonProperty("Радиус радиации в метрах (От печки)")]
            public float RadiationsRadius;
            [JsonProperty("Минимальное выпадения переплавленой руды в печках")]
            public int mincount;
            [JsonProperty("Максимальное выпадения переплавленой руды в печках")]
            public int maxcount;
            [JsonProperty("Включить выпадения этой руды?")]
            public bool OreBool;


            [JsonProperty("Шанс выпадения")]
            public int DropChance;
            [JsonProperty("Максимальное количевство выпадения радиактивной руды")]
            public int DropAmount;

            [JsonProperty("Скин ID предмета")]
            public ulong ReplaceID;

            public int GetItemId() => ItemManager.FindItemDefinition(ReplaceShortName).itemid;
            public int GetItemAmount(BasePlayer player) => player.inventory.GetAmount(GetItemId());

            public Item Copy(int amount )
            {
                Item x = ItemManager.CreateByPartialName(ReplaceShortName, amount);
                x.skin = ReplaceID;
                x.name = DisplayName;

                return x;
            }

            public void CreateItem(BasePlayer player, int amount)
            {
                Item x = ItemManager.CreateByPartialName(ReplaceShortName, amount);
                x.skin = ReplaceID;
                x.name = DisplayName;

                if (player != null)
                {
                    if (player.inventory.containerMain.itemList.Count < 24)
                        x.MoveToContainer(player.inventory.containerMain);
                    else
                        x.Drop(player.transform.position, Vector3.zero);
                    return;
                }
            }
        }

       

        private class Configuration
        {
            [JsonProperty("Настройка руды")]
            public Dictionary<string, CustomItem> CustomItems = new Dictionary<string, CustomItem>
            {
                ["sulfur.ore"] = new CustomItem
                {
                    DisplayName = "Радиактивная сера",
                    ReplaceShortName = "glue",
                    Shortnames = "sulfur",
                    DropChance = 7,
                    DropAmount = 2,
                    ReplaceID = 1989987965,
                    Radiations = 10f,
                    RadiationsRadius = 15f,
                    mincount = 100,
                    maxcount = 1000,
                    OreBool = true
                },
                ["metal.ore"] = new CustomItem
                {
                    DisplayName = "Радиактивный металл",
                    ReplaceShortName = "ducttape",
                    Shortnames = "metal.fragments",
                    DropChance = 11,
                    DropAmount = 3,
                    ReplaceID = 1989988490,
                    Radiations = 10f,
                    RadiationsRadius = 10f,
                    mincount = 300,
                    maxcount = 1500,
                    OreBool = true
                },
                ["stones"] = new CustomItem
                {
                    DisplayName = "Радиактивный камень",
                    ReplaceShortName = "bleach",
                    Shortnames = "stones",
                    DropChance = 14,
                    DropAmount = 4,
                    ReplaceID = 1989988784,
                    Radiations = 10f,
                    RadiationsRadius = 10f,
                    mincount = 500,
                    maxcount = 2500,
                    OreBool = true
                },
                ["hq.metal.ore"] = new CustomItem
                {
                    DisplayName = "Радиактивный мвк",
                    ReplaceShortName = "bleach",
                    Shortnames = "metal.refined",
                    DropChance = 5,
                    DropAmount = 2,
                    ReplaceID = 2019140142,
                    Radiations = 20,
                    RadiationsRadius = 15f,
                    mincount = 500,
                    maxcount = 2500,
                    OreBool = true
                },
            };
        }

        private static Configuration Settings = new Configuration();

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                Settings = Config.ReadObject<Configuration>();
                if (Settings?.CustomItems == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #436 чтения конфигурации 'oxide/config/', создаём новую конфигурацию!");
                LoadDefaultConfig();
            }
            
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => Settings = new Configuration();
        protected override void SaveConfig() => Config.WriteObject(Settings);
        #endregion

        #region Hooks

        [ChatCommand("ore.give")]
        void CmdChatDebugOreSpawn(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;

            foreach (var check in Settings.CustomItems)
            {
                var item = check.Value.Copy(100);
                item.MoveToContainer(player.inventory.containerMain);
            }
        }
        void OnServerInitialized()
        {
            instance = this;
            furnacec = true;
            foreach (var skkinid in Settings.CustomItems)
            {
                ToOres.Add(skkinid.Value.ReplaceID, skkinid.Key);
            }

            List<BaseOven> baseOvens = UnityEngine.Object.FindObjectsOfType<BaseOven>().ToList();
            baseOvens.ForEach(baseOven =>
            {
                if (!(baseOven is BaseFuelLightSource))
                {
                    OnEntitySpawned(baseOven);
                }
            });
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (!furnacec) return;
            if (entity == null) return;
            if (entity is BaseOven && !(entity is BaseFuelLightSource))
            {
                BaseOven baseOven = entity as BaseOven;
                if (baseOven == null) return;
                FurnaceBurn fBurn = new FurnaceBurn();
                fBurn.OvenTogle(baseOven);
            }
        }
        object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (player == null) return null;
            if (Settings.CustomItems.ContainsKey(item.info.shortname))
            {
                if (!Settings.CustomItems[item.info.shortname].OreBool) return null;
                var items = Settings.CustomItems[item.info.shortname];
                bool goodChance = UnityEngine.Random.Range(0, 100) >= (100 - items.DropChance);   
                if (goodChance)
                {
                    Item RadSulfur = ItemManager.CreateByName(items.ReplaceShortName, UnityEngine.Random.Range(1, items.DropAmount), items.ReplaceID);
                    RadSulfur.name = items.DisplayName;
                    player?.GiveItem(RadSulfur);
                }
            }
            return null;
        }  

        object CanCombineDroppedItem(DroppedItem item, DroppedItem targetItem)
        {
            if (item.GetItem().skin != targetItem.GetItem().skin) return false;
            return null;
        }

        object CanStackItem(Item item, Item targetItem)
        {
            if (item.skin != targetItem.skin) return false;
            return null;
        }
        
        private Item OnItemSplit(Item item, int amount)
        {
            if (plugins.Find("Stacks") || plugins.Find("CustomSkinsStacksFix") || plugins.Find("SkinBox")) return null;

            var customItem = Settings.CustomItems.FirstOrDefault(p => p.Value.DisplayName == item.name);
            if (customItem.Value != null && customItem.Value.ReplaceID == item.skin)
            {
                Item x = ItemManager.CreateByPartialName(customItem.Value.ReplaceShortName, amount);
                x.name = customItem.Value.DisplayName;
                x.skin = customItem.Value.ReplaceID;
                x.amount = amount;

                item.amount -= amount;
                return x;
            }

            return null;
        }

        #endregion

        #region Metod
        public class FurnaceBurn
        {
            BaseOven oven;
            StorageContainer storageContainer;
            Timer timer;

            public void OvenTogle(BaseOven oven)
            {
                this.oven = oven;
                storageContainer = oven.GetComponent<StorageContainer>();
                timertick();
            }

            void timertick()
            {
                if (timer == null)
                {
                    timer = instance.timer.Once(5f, CheckRadOres);
                }
                else
                {
                    timer.Destroy();
                    timer = instance.timer.Once(5f, CheckRadOres);
                }
            }

            void CheckRadOres()
            {
                if (oven == null)
                {
                    timer.Destroy();
                    return;
                }
                if (oven.IsOn())
                {
                    foreach (var item in storageContainer.inventory.itemList)
                    {
                        if (instance.ToOres.ContainsKey(item.skin))
                        {
                            instance.NextTick(() =>
                            {
                                List<BasePlayer> players = new List<BasePlayer>();
                                Vis.Entities<BasePlayer>(oven.transform.position, Settings.CustomItems[instance.ToOres[item.skin]].RadiationsRadius, players);
                                players.ForEach(p => p.metabolism.radiation_poison.value += Settings.CustomItems[instance.ToOres[item.skin]].Radiations);

                                if (item.amount > 1) item.amount--;
                                else item.RemoveFromContainer();

                                Item newItem = ItemManager.CreateByName(Settings.CustomItems[instance.ToOres[item.skin]].Shortnames, UnityEngine.Random.Range(Settings.CustomItems[instance.ToOres[item.skin]].mincount, Settings.CustomItems[instance.ToOres[item.skin]].maxcount));
                                if (!newItem.MoveToContainer(storageContainer.inventory))
                                {
                                    newItem.Drop(oven.transform.position, Vector3.up);
                                }
                            });
                        }
                    }
                }
                timertick();
            }
        }
        #endregion
    }
}

// --- End of file: OreBonus.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/OneVSOne.cs ---
// --- Original Local Path: KualaRust/OneVSOne.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Random = UnityEngine.Random;
using ru = Oxide.Game.Rust;

namespace Oxide.Plugins
{
    [Info("OneVSOne", "fermens", "0.4.01")]
    [Description("Турнир одиночек")]
    public class OneVSOne : RustPlugin
    {
        #region Config
        private PluginConfig config;

        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        private class PluginConfig
        {
            [JsonProperty("Позиция первого игрока")]
            public string posplayer1;

            [JsonProperty("Позиция второго игрока")]
            public string posplayer2;

            [JsonProperty("Позиции зрителей")]
            public List<string> posspectators;

            [JsonProperty("Сообщения")]
            public List<string> messages;

            [JsonProperty("Префикс")]
            public string prefix;

            [JsonProperty("Чат-команда")]
            public string command;

            [JsonProperty("Кит-награда (Оставить пустым, если нет)")]
            public string kitreward;

            [JsonProperty("Кит выдаваемый для дуэлянтов")]
            public string kit;

            [JsonProperty("Название арены в копипасте")]
            public string arenaname;

            [JsonProperty("Проверок на телепорт абузеров")]
            public int proverok;

            [JsonProperty("Выделенное время на одну дуэль")]
            public int timeonround;

            [JsonProperty("Дефолтное время на регистрацию")]
            public int timeforreg;

            [JsonProperty("Минимальное количество участников")]
            public int minplayers;

            [JsonProperty("ServerRewards-награда (Поставить 0, если нет)")]
            public int sRewards;

            [JsonProperty("Максимальное количество участников")]
            public int maxplayers;

            [JsonProperty("Автоивент (0 - если выключить)")]
            public float autoevent;

            [JsonProperty("Награда консольная команда, по местам (пусто, если нет)")]
            public List<string> rewardcommands;

            [JsonProperty("Замутить войс на ивенте")]
            public bool mutevoice;

            [JsonProperty("Координаты постройки арены")]
            public string positionforarena;

            [JsonProperty("GUI - кнопка")]
            public string button;

            [JsonProperty("GUI - фон")]
            public string fon;

            [JsonProperty("GUI - верхушка")]
            public string head;

            [JsonProperty("GUI - низушка")]
            public string foot;

            [JsonProperty("Оружия для автоивента (выбирается рандомно)")]
            public List<int> random;

            [JsonProperty("Выводить все сообщения")]
            public bool messagetrue;

            [JsonProperty("- STEAMID от кого отправляются сообщения (для аватарки)")]
            public ulong broadcast2;

            [JsonProperty("^^")]
            public string rofl;

            [JsonProperty("Заблокированные команды, которые используют global.")]
            public string[] blocked;

            [JsonProperty("Моды")]
            public List<int> mods;

            [JsonProperty("UI-сообщения")]
            public List<string> messageUI;
            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    rofl = "^_^",
                    broadcast2 = 76561198125444659,
                    posplayer1 = "",
                    posplayer2 = "",
                    posspectators = new List<string>(),
                    messages = new List<string>()
                    {
                        "<size=15><#CD5C5C>{prefix} Ошибка | Нет пар для дуэлей!</color></size>",
                        "<size=15><#CD5C5C>{prefix} Ошибка | Каким-то странным образом победитель не определился!</color></size>",
                        "<size=15>ИВЕНТ <color=#ccff33>ТУРНИР ОДИНОЧЕК</color> НАЧНЕТСЯ ЧЕРЕЗ <color=#ccff33>{time}</color>\n<color=#ccff33>/{command}</color> - попасть на ивент</size>",
                        "<size=15><#CD5C5C>{prefix} Багоюз | Попытка проникнуть на ивент телепорт-багом! СМЭРТЬ!</color></size>",
                        "<size=15>{prefix} <color=#ccff33>/{command}</color> - выйти с ивента</size>",
                        "<size=15>{prefix} <color=#ff6666>ЗАПРЕЩЕНО ИСПОЛЬЗОВАТЬ КОМАНДЫ НА ИВЕНТЕ!</color>\n<color=#ccff33>/{command}</color> - выйти с ивента</size>",
                        "<size=15>{prefix} <color=#ff6666>ИВЕНТ ОТМЕНЕН, НЕ СОБРАЛОСЬ МИНИМАЛЬНОЕ КОЛИЧЕСТВО УЧАСТНИКОВ!</color>",
                        "<size=15>{prefix} ИГРОК <color=#ccff33>{name}</color> ПОБЕДИЛ В ИВЕНТЕ <color=#ccff33>ТУРНИР ОДИНОЧЕК</color>\nПРИЗ ДВЕ ПЛЯШКИ ПЕННОГО.</size>",
                        "<size=15>{prefix} <color=#ccff33>{name}</color> ПРОХОДИТ В СЛЕДУЮЩИЙ РАУНД.</size>",
                        "<size=12>{prefix} <color=#ccff33>{name}</color> ПОКИДАЕТ ИВЕНТ.</size> - выключено -",
                        "<size=12>{prefix} <color=#ccff33>{name}</color> ЗАШЕЛ НА ИВЕНТ.</size>",
                        "<size=15><#CD5C5C>{prefix} ИВЕНТ ОТМЕНЕН!</color></size>",
                        "<i>- {prefix} Время вышло, действуйте быстрее -</i>",
                        "<size=15>{prefix} <color=#ccff33>{name1}</color> против <color=#ccff33>{name2}</color></size>"
                    },
                    prefix = "[EVENT]",
                    proverok = 10,
                    timeonround = 60,
                    command = "oo",
                    kitreward = "reward",
                    kit = "onekit",
                    arenaname = "arenaoo",
                    positionforarena = "(-1000.0, 800.0, -1000.0)",
                    minplayers = 2,
                    maxplayers = 64,
                    mutevoice = true,
                    sRewards = 50,
                    autoevent = 7200f,
                    timeforreg = 120,
                    messagetrue = true,
                    random = new List<int>()
                    {
                        1545779598,
                        1443579727,
                        1965232394,
                        -1812555177,
                        818877484,
                        -904863145
                    },
                    mods = new List<int>()
                    {
                        952603248,
                        442289265
                    },
                    messageUI = new List<string>
                    {
                        "ВАС УБИЛИ! ДЛЯ ВАС ИВЕНТ ЗАКОНЧЕН.",
                        "ПОЗДРАВЛЯЕМ С ВЕЛИКОЙ ПОБЕДОЙ, ЧЕМПИОН!"
                    },
                    rewardcommands = new List<string>
                    {
                        "addgroup {steamid} 1place 3h",
                        "addgroup {steamid} 2place 2h",
                        "addgroup {steamid} 3place 1h"
                    },
                    blocked = new string []
                    {
                        "tp", "home", "kit"
                    },
                    button = "1 0.83 0.47 0.35",
                    fon = "1 1 1 0.03",
                    head = "<color=#ffd479>ТУРНИР ОДИНОЧЕК\nоружие {gun}</color>",
                    foot = "УЧАСТНИКОВ: <color=#ffd479>{count}</color>\nСТАРТ ЧЕРЕЗ <color=#ffd479>{time}</color>"


                };
            }
        }
        #endregion

        #region Head
        List<string> logs = new List<string>();
        [PluginReference] Plugin CopyPaste, Kits, ServerRewards, Economics, XKits;
        Timer Timeronround;
        Vector3 positionforarena = Vector3.zero;
        int round = 1;
        static OneVSOne ins;
        List<ulong> cashplayers = new List<ulong>();
        List<BasePlayer> players = new List<BasePlayer>();
        List<Duel> duels = new List<Duel>();
        //
        Vector3 posplayer1 = Vector3.zero;
        Vector3 posplayer2 = Vector3.zero;
        List<Vector3> posspectators = new List<Vector3>();
        int start = 0;
        uint privilege;
        int gun = 1545779598;
        const int ammo = 300;
        //

        class Duel
        {
            public BasePlayer pl1;
            public BasePlayer pl2;
        }
        #endregion

        #region BlockDamage
        void OnPlayerAttack(BasePlayer attacker, HitInfo info)
        {
            BaseEntity entity = info.HitEntity;
            if (entity == null) return;
            if (entity is DecayEntity)
            {
                var build = entity.GetBuildingPrivilege();
                if (build == null) return;
                if (build.net.ID.Equals(privilege))
                {
                    if (info.Initiator is FireBall) info.Initiator.Kill();
                    clear(info);
                }
            }
            else if (entity is BasePlayer)
            {
                BasePlayer player = entity.ToPlayer();
                if (player == null || !cashplayers.Contains(player.userID)) return;
                if (player.GetComponent<OnePlayer>().duel)
                {
                    float damageAmount = info.damageTypes.Total();
                    if (info.isHeadshot) damageAmount *= 1.5f;
                    if (entity.Health() - damageAmount <= 0f)
                    {
                        Duel duel = duels.Where(x => x.pl1.Equals(player) || x.pl2.Equals(player)).FirstOrDefault();
                        if (duel != null) endduel(player, true);
                        else player.GetComponent<OnePlayer>().ToDestroy();
                        timer.Once(1f, () =>
                        {
                            if (player == null) return;
                            if (player.IsWounded()) player.Hurt(1000f, DamageType.Suicide, player, false);
                        });
                    }
                }
                else clear(info);
            }
        }

        void OnPlayerDeath(BasePlayer player, HitInfo info)
        {
            if (!cashplayers.Contains(player.userID)) return;
            Duel duel = duels.Where(x => x.pl1.Equals(player) || x.pl2.Equals(player)).FirstOrDefault();
            if (duel != null) endduel(player, true);
            else player.GetComponent<OnePlayer>().ToDestroy();
        }

        void OnRunPlayerMetabolism(PlayerMetabolism metabolism, BaseCombatEntity entity)
        {
            if (!(entity is BasePlayer)) return;
            var player = entity as BasePlayer;
            if (!cashplayers.Contains(player.userID)) return;
            if (player.metabolism.temperature.value < 20) player.metabolism.temperature.value = 21;
        }

        void clear(HitInfo info)
        {
            info.damageTypes = new DamageTypeList();
            info.HitEntity = null;
            info.HitMaterial = 0;
            info.PointStart = Vector3.zero;
        }
        #endregion

        #region Main
        public void GiveKit(BasePlayer player)
        {
            Item item = ItemManager.CreateByItemID(gun);
            BaseProjectile projectile = item.GetHeldEntity()?.GetComponent<BaseProjectile>();
            if (projectile != null && projectile.primaryMagazine != null)
            {
                projectile.primaryMagazine.contents = projectile.primaryMagazine.capacity;
                Item ammoitem = ItemManager.Create(projectile.primaryMagazine.ammoType, 300);
                player.inventory.GiveItem(ammoitem, player.inventory.containerMain);
            }

            if (config.mods.Count > 0 && item.contents != null)
            {
                foreach (var z in config.mods)
                {
                    Item mod = ItemManager.CreateByItemID(z);
                    mod.MoveToContainer(item.contents);
                }
            }

            player.inventory.GiveItem(item, player.inventory.containerBelt);
            Kits?.Call("GiveKit", player, config.kit);
            XKits?.Call("GiveKit", player, config.kit);
        }

        const string nameui = "fonTsadq2cqse3";
        const string textui = "Tsadq2cqse3";
        void destroyUI(List<Network.Connection> netcon)
        {
            if (netcon == null || netcon.Count < 0) return;
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = netcon }, null, "DestroyUI", nameui);
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = netcon }, null, "DestroyUI", textui);
        }

        void createUItext(List<Network.Connection> netcon)
        {
            if (netcon == null || netcon.Count < 0) return;
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = netcon }, null, "DestroyUI", textui);
            string sendto = GUItext.Replace("{count}", players.Count.ToString()).Replace("{time}", TimeSpan.FromSeconds(start).ToString());
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = netcon }, null, "AddUI", sendto);
        }

        void createUItext(Network.Connection netcon)
        {
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = netcon }, null, "DestroyUI", textui);
            string sendto = GUItext.Replace("{count}", players.Count.ToString()).Replace("{time}", TimeSpan.FromSeconds(start).ToString());
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = netcon }, null, "AddUI", sendto);
        }

        void createUIEXIT(Network.Connection netcon)
        {
            if (netcon == null) return;
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = netcon }, null, "DestroyUI", nameui);
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = netcon }, null, "DestroyUI", textui);
            string def = ItemManager.FindItemDefinition(gun).displayName.english;
            string sendto1 = GUImain.Replace("{gun}", def).Replace("{button}", "ПРИСОЕДИНИТЬСЯ");
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = netcon }, null, "AddUI", sendto1);
            createUItext(netcon);
        }

        void createUI(List<Network.Connection> netcon)
        {
            if (netcon == null || netcon.Count < 0) return;
            destroyUI(netcon);
            string def = ItemManager.FindItemDefinition(gun).displayName.english;
            string sendto1 = GUImain.Replace("{gun}", def).Replace("{button}", "ВЫЙТИ");
            string sendto2 = GUImain.Replace("{gun}", def).Replace("{button}", "ПРИСОЕДИНИТЬСЯ");
            List<Network.Connection> exit = netcon.Where(x => cashplayers.Contains(x.userid)).ToList();
            List<Network.Connection> enter = netcon.Where(x => !cashplayers.Contains(x.userid)).ToList();
            if (exit.Count > 0) CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = exit }, null, "AddUI", sendto1);
            if (enter.Count > 0) CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = enter }, null, "AddUI", sendto2); ;
            createUItext(netcon);
        }

        string GUItext = "";
        string GUImain = "";
        static Vector3 arenaposition;
        void Init() => Unsubscribe(nameof(OnPasteFinished));
        void OnServerInitialized()
        {
            if(config.rofl == null)
            {
                config.rofl = "^_^";
                config.broadcast2 = 76561198125444659;
                SaveConfig();
            }
            if(config.head == null)
            {
                config.head = "<color=#ffd479>ТУРНИР ОДИНОЧЕК\nоружие {gun}</color>";
                config.foot = "УЧАСТНИКОВ: <color=#ffd479>{count}</color>\nСТАРТ ЧЕРЕЗ <color=#ffd479>{time}</color>";
                SaveConfig();
            }
            if(config.fon == null)
            {
                config.button = "1 0.83 0.47 0.35";
                config.fon = "1 1 1 0.03";
                SaveConfig();
            }
            GUItext = "[{\"name\":\"Tsadq2cqse3\",\"parent\":\"Hud.Menu\",\"components\":[{\"type\":\"UnityEngine.UI.Image\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\"}]},{\"name\":\"4c277f7583f6463e9cad69f4b92aaf62\",\"parent\":\"Tsadq2cqse3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{foot}\",\"align\":\"MiddleLeft\",\"color\":\"1 1 1 0.5\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\",\"offsetmin\":\"-430 38\",\"offsetmax\":\"-265 78\"}]}]".Replace("{foot}", config.foot);
            GUImain = "[{\"name\":\"fonTsadq2cqse3\",\"parent\":\"Hud.Menu\",\"components\":[{\"type\":\"UnityEngine.UI.Image\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\"}]},{\"name\":\"c274caa359cf479bad4448ef8c47b792\",\"parent\":\"fonTsadq2cqse3\",\"components\":[{\"type\":\"UnityEngine.UI.Image\",\"material\":\"assets/content/ui/uibackgroundblur-ingamemenu.mat\",\"color\":\"{fon}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\",\"offsetmin\":\"-440 18\",\"offsetmax\":\"-265 78\"}]},{\"name\":\"790d2667be324c2e929c046594ca9a4d\",\"parent\":\"fonTsadq2cqse3\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{head}\",\"align\":\"LowerCenter\",\"color\":\"1 1 1 0.5\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\",\"offsetmin\":\"-440 80\",\"offsetmax\":\"-265 120\"}]},{\"name\":\"003a131d6cab495d89698c7028ee2429\",\"parent\":\"fonTsadq2cqse3\",\"components\":[{\"type\":\"UnityEngine.UI.Button\",\"command\":\"chat.say /{command}\",\"material\":\"assets/content/ui/ui.background.transparent.radial.psd\",\"color\":\"{buttoncolor}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0\",\"anchormax\":\"0.5 0\",\"offsetmin\":\"-440 18\",\"offsetmax\":\"-265 38\"}]},{\"parent\":\"003a131d6cab495d89698c7028ee2429\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{button}\",\"align\":\"MiddleCenter\",\"color\":\"1 1 1 0.5\"},{\"type\":\"RectTransform\"}]}]".Replace("{fon}", config.fon).Replace("{buttoncolor}", config.button).Replace("{head}", config.head);
            if (config.blocked == null)
            {
                config.blocked = new string[]
                    {
                        "tp", "home", "kit"
                    };
                SaveConfig();
            }
            if (config.rewardcommands == null)
            {
                config.rewardcommands = new List<string>
                    {
                        "addgroup {steamid} 1place 3h",
                        "addgroup {steamid} 2place 2h",
                        "addgroup {steamid} 3place 1h",
                        "addgroup {steamid} 4place 1h"
                    };
                SaveConfig();
            }
            GUImain = GUImain.Replace("{command}", config.command);

            if (positionforarena.Equals(Vector3.zero)) positionforarena = config.positionforarena.ToVector3();
            ins = this;
            Interface.Oxide.GetLibrary<ru.Libraries.Command>(null).AddChatCommand(config.command, this, "cmdtoevent");
            Interface.Oxide.GetLibrary<Game.Rust.Libraries.Command>(null).AddConsoleCommand("event.oo", this, "cmdconsolecommand");
            unsubscribe();
            Debug.Log("Проверяем построена ли арена.");
            RaycastHit hitInfo;
            if (!Physics.Raycast(positionforarena + 10f * Vector3.down, Vector3.up * 100f, out hitInfo, LayerMask.GetMask("Construction")))
            {
                Debug.Log("Арена не построена...строим арену...");
                timer.Once(30f, () =>  createarena());
            }
            else
            {
                initialize();
                arenaposition = hitInfo.point;
                privilege = hitInfo.GetEntity().GetBuildingPrivilege().net.ID;
            }
            permission.RegisterPermission(Name + ".admin", this);
            if (config.autoevent > 0)
            {
                eventtime = DateTime.UtcNow.AddSeconds(config.autoevent);
                timer.Once(config.autoevent, () => autoeventON());
            }
        }
        private DateTime GetNextEventTime()
        {
            return eventtime;
        }

        private DateTime eventtime;
        void autoeventON()
        {
            eventtime = DateTime.UtcNow.AddSeconds(config.autoevent);
            timer.Once(config.autoevent, () => autoeventON());
            if (config.random.Count > 0) gun = config.random[Random.Range(0, config.random.Count)];
            startreg(config.timeforreg);
        }

        void spammes(string time) => Broadcast(config.messages[2].Replace("{prefix}", config.prefix).Replace("{time}", time).Replace("{command}", config.command));

        void startevent()
        {
            logs.Clear();
            destroyUI(Network.Net.sv.connections);
            if (players.Count < config.minplayers)
            {
                Broadcast(config.messages[6].Replace("{prefix}", config.prefix));
                endevent();
                return;
            }
            logs.Add($"[{DateTime.Now.ToString("H:mm")}] Участников: {players.Count} | Оружие: {ItemManager.FindItemDefinition(gun).displayName.english}");
            generetepairs();
        }

        List<Timer> timersspam = new List<Timer>();

        private bool IsEventArena(uint priv)
        {
            if (!privilege.Equals(priv)) return false;
            else return true;
        }

        void OnItemDropped(Item item, BaseEntity entity)
        {
            if (Vector3.Distance(arenaposition, entity.transform.position) < 70f) entity?.Kill();
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (entity is PlayerCorpse || entity.prefabID == 1519640547)
            {
                if (Vector3.Distance(arenaposition, entity.transform.position) < 70f) entity?.Kill();
            }
        }

        void startreg(int time = 120)
        {
            if (privilege == 0)
            {
                Debug.LogError("Арена для ивента отсутствует!");
                return;
            }
            if (posplayer1.Equals(Vector3.zero) || posplayer2.Equals(Vector3.zero) || posspectators.Count.Equals(0))
            {
                Debug.LogError("Не указаны все точки спавна!");
                return;
            }
            endevent();
            messageUI.Clear();
            subscribe();
            start = time;
            Subscribe(nameof(OnPlayerDeath));
            Subscribe(nameof(OnEntitySpawned));
            Subscribe(nameof(OnItemDropped));
            Subscribe(nameof(OnPlayerAttack));
            Subscribe(nameof(OnRunPlayerMetabolism));
            spammes(FormatTime(TimeSpan.FromSeconds(time)).ToUpper());
            NextTick(() =>
            {
                createUI(Network.Net.sv.connections);
            });
            timersspam.Add(timer.Repeat(1f, 0, () => ticktimer()));
        }

        void ticktimer()
        {
            start--;
            if (start <= 0)
            {
                foreach (var z in timersspam) destroytimer(z);
                startevent();
                return;
            }
            else if (start.Equals(60)) spammes("60 СЕКУНД");
            else if (start.Equals(30)) spammes("30 СЕКУНД");
            else if (start.Equals(15)) spammes("15 СЕКУНД");
            else if (start.Equals(10)) spammes("10 СЕКУНД");
            else if (start.Equals(3)) spammes("3 СЕКУНДЫ");
            else if (start.Equals(2)) spammes("2 СЕКУНДЫ");
            else if (start.Equals(1)) spammes("1 СЕКУНДУ");
            createUItext(Network.Net.sv.connections);
        }

        void createarena()
        {
            Subscribe(nameof(OnPasteFinished));
            if (CopyPaste == null)
            {
                Debug.LogError("Установите копипаст!");
                return;
            }
            var options = new List<string> { "Deployables", "true", "Inventories", "true", "height", positionforarena.y.ToString() };
            var successPaste = CopyPaste.Call("TryPasteFromVector3", positionforarena, 0f, config.arenaname, options.ToArray());
            if (successPaste is string)
            {
                PrintError(successPaste.ToString());
                Unsubscribe(nameof(OnPasteFinished));
            }
        }

        void initialize()
        {
            if (posplayer1.Equals(Vector3.zero))
            {
                if (string.IsNullOrEmpty(config.posplayer1))
                {
                    Debug.LogError("Не указаны координаты для первого игрока!");
                    return;
                }
                posplayer1 = config.posplayer1.ToVector3() + Vector3.up * 0.1f;
            }
            if (posplayer2.Equals(Vector3.zero))
            {
                if (string.IsNullOrEmpty(config.posplayer2))
                {
                    Debug.LogError("Не указаны координаты для второго игрока!");
                    return;
                }
                posplayer2 = config.posplayer2.ToVector3() + Vector3.up * 0.1f;
            }

            if (posspectators.Count.Equals(0))
            {
                if (config.posspectators.Equals(0))
                {
                    Debug.LogError("Не указаны координаты для зрителей!");
                    return;
                }

                foreach (var z in config.posspectators)
                {
                    Vector3 pos = z.ToVector3();
                    posspectators.Add(pos);
                }
            }
            Debug.Log("Координаты указаны.");
        }

        private void OnPasteFinished(List<BaseEntity> entitys)
        {
            posplayer1 = Vector3.zero;
            posplayer2 = Vector3.zero;
            config.posspectators.Clear();
            posspectators.Clear();

            foreach (var entity in entitys)
            {
                if (entity is FlasherLight)
                {
                    Vector3 pos = entity.transform.position + Vector3.up;
                    if (posplayer1.Equals(Vector3.zero))
                    {
                        posplayer1 = pos + Vector3.up * 0.1f;
                        config.posplayer1 = pos.ToString();
                    }
                    else if (posplayer2.Equals(Vector3.zero))
                    {
                        posplayer2 = pos + Vector3.up * 0.1f;
                        config.posplayer2 = pos.ToString();
                    }
                    entity.KillMessage();
                }
                if (entity is SirenLight)
                {
                    Vector3 pos = entity.transform.position + Vector3.up;
                    posspectators.Add(pos);
                    config.posspectators.Add(pos.ToString());
                    entity.KillMessage();
                }
            }
            Debug.Log("Арена построена!");
            var first = entitys.FirstOrDefault();
            privilege = first.GetBuildingPrivilege().net.ID;
            arenaposition = first.transform.position;
            SaveConfig();
            Unsubscribe(nameof(OnPasteFinished));
        }

        void destroytimer(Timer ss)
        {
            if (!ss.Destroyed) timer.Destroy(ref ss);
        }

        void generetepairs()
        {
            duels.Clear();
            string roundname = $"РАУНД <color=#ccff33>{round}</color>";
            string pairs = $"{config.prefix} {roundname}:\n";
            List<BasePlayer> swess = new List<BasePlayer>(players);
            while (swess.Count > 1)
            {
                Duel duel = new Duel();
                BasePlayer r1 = swess[Random.Range(0, swess.Count)];
                duel.pl1 = r1;
                swess.Remove(r1);
                BasePlayer r2 = swess[Random.Range(0, swess.Count)];
                duel.pl2 = r2;
                swess.Remove(r2);
                duels.Add(duel);
                pairs += $"<color=#ccff33>{duel.pl1.displayName}</color> - <color=#ccff33>{duel.pl2.displayName}</color>\n";
            }

            if (swess.Count > 0) Broadcast(config.messages[8].Replace("{prefix}", config.prefix).Replace("{name}", swess.FirstOrDefault().displayName.ToUpper()));
            if (config.messagetrue)
            {
                if (swess.Count.Equals(2)) roundname = "ФИНАЛ";
                else if (swess.Count <= 4) roundname = "ПОЛУФИНАЛ";
                if (swess.Count > 0) pairs += $"<color=#ccff33>{swess.FirstOrDefault().displayName}</color> проходит в следующий раунд";
                round++;
                Broadcast(pairs);
            }
            startduel();
        }

        void startduel()
        {
            if (players.Count < 2)
            {
                endevent();
                return;
            }
            if (duels.Count.Equals(0))
            {
                nextphase();
                return;
            }
            timersspam.Add(timer.Once(2f, () =>
            {
                if (duels.Count.Equals(0)) return;
                Duel duel = duels.FirstOrDefault();
                fight(duel.pl1, duel.pl2);
            }));
        }

        void fight(BasePlayer player1, BasePlayer player2)
        {
            OnePlayer pl1 = player1.GetComponent<OnePlayer>();
            OnePlayer pl2 = player2.GetComponent<OnePlayer>();
            if (pl1 == null || pl2 == null)
            {
                if (pl1 == null && players.Contains(player1)) players.Remove(player1);
                if (pl2 == null && players.Contains(player2)) players.Remove(player2);
                duels.RemoveAt(0);
                Debug.LogWarning("Ошибка | OnePlayer = null | ИСПРАВИЛИ");
                startduel();
                return;
            }
            pl1.duel = true;
            pl2.duel = true;
            if (player1.inventory.loot?.entitySource != null) player1.EndLooting();
            if (player2.inventory.loot?.entitySource != null) player2.EndLooting();
            pl1.Teleport(posplayer1);
            pl1.Maxatributes();
            pl1.Kit();
            pl2.Teleport(posplayer2);
            pl2.Maxatributes();
            pl2.Kit();
            Broadcast(config.messages[13].Replace("{prefix}", config.prefix).Replace("{name1}", player1.displayName).Replace("{name2}", player2.displayName));
            Timeronround = timer.Once(config.timeonround, () =>
            {
                if (pl1.Health() > pl2.Health()) endduel(player2, true);
                else if (pl1.Health() < pl2.Health()) endduel(player1, true);
                else
                {
                    Broadcast(config.messages[12].Replace("{prefix}", config.prefix));
                    if (Random.Range(0, 2).Equals(0)) endduel(player1, true);
                    else endduel(player2, true);
                }
            });
        }

        void restoreafter(BasePlayer player)
        {
            restore rs = restoreinventory[player.userID];
            if (player.IsWounded()) player.StopWounded();
            Teleport(player, rs.teleportfrom);
            player.metabolism.Reset();
            player.health = rs.health;
            player.metabolism.calories.value = rs.calories;
            player.metabolism.hydration.value = rs.hydration;
            player.metabolism.bleeding.value = 0;
            player.metabolism.SendChangesToClient();
            player.inventory.Strip();
            if (!RestoreItems(player, rs.inventory, InventoryType.Belt) || !RestoreItems(player, rs.inventory, InventoryType.Main) || !RestoreItems(player, rs.inventory, InventoryType.Wear))
            {
                Debug.LogError($"OneVSOne | Игрок {player.displayName} не получил все предметы.");
            }
            LockInventory(player, false);
            restoreinventory.Remove(player.userID);
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            timer.Once(1f, () =>
            {
                if (!player.IsConnected || player.IsDead()) return;
                if (restoreinventory.ContainsKey(player.userID)) restoreafter(player);
                else if (player.GetComponent<OnePlayer>() == null && !player.IsAdmin && Vector3.Distance(arenaposition, player.transform.position) < 65f)
                {
                    BasePlayer.SpawnPoint spawnPoint = ServerMgr.FindSpawnPoint();
                    player.Teleport(spawnPoint.pos);
                }

                if (kitreward.Contains(player.userID))
                {
                    Kits?.Call("GiveKit", player, config.kitreward);
                    XKits?.Call("GiveKit", player, config.kitreward);
                    kitreward.Remove(player.userID);
                }

                if (!messageUI.ContainsKey(player)) return;
                string message = messageUI[player];
                timer.Once(1f, () => drawui(player, message));
                messageUI.Remove(player);
            });
        }

        const string drawuimes = "UIasdq2e12";
        string GUImes = "[{\"name\":\"UIasdq2e12\",\"parent\":\"Hud.Menu\",\"components\":[{\"type\":\"UnityEngine.UI.Image\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0.5\",\"anchormax\":\"0.5 0.5\"}]},{\"name\":\"UI_mesOnesOne\",\"parent\":\"UIasdq2e12\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{message}\",\"fontSize\":30,\"align\":\"MiddleCenter\",\"color\":\"1 1 1 0.9\",\"fadeIn\":0.5},{\"type\":\"RectTransform\",\"anchormin\":\"0.5 0.5\",\"anchormax\":\"0.5 0.5\",\"offsetmin\":\"-450 -60\",\"offsetmax\":\"450 60\"}]}]";
        void destroydrawUI(BasePlayer player)
        {
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "DestroyUI", drawuimes);
        }
        Dictionary<BasePlayer, string> messageUI = new Dictionary<BasePlayer, string>();
        void drawui(BasePlayer player, string message)
        {
            destroydrawUI(player);
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connection = player.net.connection }, null, "AddUI", GUImes.Replace("{message}", message));
            timer.Once(4f, () => destroydrawUI(player));
        }

        void endduel(BasePlayer lose, bool withmessage = false)
        {
            Duel duel = duels.FirstOrDefault(x => x.pl1.Equals(lose) || x.pl2.Equals(lose));
            if (duel == null)
            {
                Debug.LogError("Ошибка | Такой пары для дуэли не существует!");
                return;
            }
            messageUI.Add(lose, config.messageUI[0]);
            OnePlayer pl1 = duel.pl1?.GetComponent<OnePlayer>();
            OnePlayer pl2 = duel.pl2?.GetComponent<OnePlayer>();
            if (pl1 == null || pl2 == null)
            {
                Debug.LogError("Ошибка | КРИТИЧЕСКАЯ!");
                endevent();
                return;
            }
            bool active = pl1.duel;
            pl1.duel = false;
            pl2.duel = false;
            if (duel.pl2.Equals(lose))
            {
                logs.Add($"[{DateTime.Now.ToString("H:mm")}] победил: {duel.pl1.displayName} ({duel.pl1.UserIDString}) - {duel.pl2.displayName} ({duel.pl2.UserIDString}) :проиграл");
                pl1.Clear();
                pl1.Teleport(posspectators[Random.Range(0, ins.posspectators.Count)]);
                pl1.Maxatributes();
                int count = ins.cashplayers.Count - 1;
                if (count >= 0 && count < ins.config.rewardcommands.Count)
                {
                    ins.Server.Command(ins.config.rewardcommands[count].Replace("{steamid}", duel.pl2.UserIDString));
                }
                pl2.ToDestroy();
                if (withmessage) Broadcast(config.messages[8].Replace("{prefix}", config.prefix).Replace("{name}", duel.pl1.displayName.ToUpper()));
            }
            else
            {
                logs.Add($"[{DateTime.Now.ToString("H:mm")}] победил: {duel.pl2.displayName} ({duel.pl2.UserIDString}) - {duel.pl1.displayName} ({duel.pl1.UserIDString}) :проиграл");
                pl2.Clear();
                pl2.Teleport(posspectators[Random.Range(0, ins.posspectators.Count)]);
                pl2.Maxatributes();
                int count = ins.cashplayers.Count - 1;
                if (count >= 0 && count < ins.config.rewardcommands.Count)
                {
                    ins.Server.Command(ins.config.rewardcommands[count].Replace("{steamid}", duel.pl1.UserIDString));
                }
                pl1.ToDestroy();
                if (withmessage) Broadcast(config.messages[8].Replace("{prefix}", config.prefix).Replace("{name}", duel.pl2.displayName.ToUpper()));
            }

            duels?.Remove(duel);
            if (active)
            {
                destroytimer(Timeronround);
                if (duels.Count > 0)
                {
                    startduel();
                }
                else
                {
                    NextTick(() => nextphase());
                }
            }
        }

        void nextphase()
        {
            if (players.Count.Equals(0))
            {
                Debug.LogError(config.messages[1].Replace("{prefix}", config.prefix));
                Broadcast(config.messages[1].Replace("{prefix}", config.prefix));
                endevent();
                return;
            }
            if (players.Count.Equals(1))
            {
                BasePlayer player = players.FirstOrDefault();
                logs.Add($"[{DateTime.Now.ToString("H:mm")}] {player.displayName} ({player.UserIDString}) - ВЫИГРАЛ!");
                Interface.Oxide.DataFileSystem.WriteObject($"ONEVSONE/{DateTime.Now.ToString("HH_mm____dd_MM")}", logs);
                logs.Clear();
                messageUI.Add(player, config.messageUI[1]);
                Broadcast(config.messages[7].Replace("{prefix}", config.prefix).Replace("{name}", player.displayName.ToUpper()));
                endevent();
                timer.Once(1f, () =>
                {
                    if (ServerRewards != null && config.sRewards > 0) ConsoleSystem.Run(ConsoleSystem.Option.Server, $"sr add {player.userID} {config.sRewards}");
                    if (Economics != null && config.sRewards > 0) Economics?.Call("Deposit", player.userID, Convert.ToDouble(config.sRewards));
                    if (Kits != null && !string.IsNullOrEmpty(config.kitreward)) kitreward.Add(player.userID);
                    if (XKits != null && !string.IsNullOrEmpty(config.kitreward)) kitreward.Add(player.userID);
                    if (config.rewardcommands.Count > 0)
                    {
                        ins.Server.Command(ins.config.rewardcommands[0].Replace("{steamid}", player.UserIDString));
                    }
                });
                return;
            }
            generetepairs();
        }
        List<ulong> kitreward = new List<ulong>();
        private void OnPlayerConnected(BasePlayer player)
        {
            if (player.inventory.containerMain.HasFlag(ItemContainer.Flag.IsLocked)) LockInventory(player, false);
            NextTick(() =>
            {
                if (start <= 0 || player == null || player.net == null) return;
                if (player.GetComponent<OnePlayer>() != null) player.GetComponent<OnePlayer>().ToDestroy();
                createUI(new List<Network.Connection> { player.net.connection });
            });
        }

        void unsubscribe()
        {
            Unsubscribe(nameof(OnEntitySpawned));
            Unsubscribe(nameof(OnItemDropped));
            Unsubscribe(nameof(OnPlayerVoice));
            Unsubscribe(nameof(OnPlayerAttack));
            Unsubscribe(nameof(OnUserCommand));
            Unsubscribe(nameof(OnServerCommand));
            Unsubscribe(nameof(OnPlayerDisconnected));
            Unsubscribe(nameof(OnPlayerDeath));
            Unsubscribe(nameof(OnRunPlayerMetabolism));
        }

        void subscribe()
        {
            if (config.mutevoice) Subscribe(nameof(OnPlayerVoice));
            Subscribe(nameof(OnUserCommand));
            Subscribe(nameof(OnServerCommand));
            Subscribe(nameof(OnPlayerDisconnected));
        }

        void endevent()
        {
            round = 1;
            start = 0;
            if (timersspam.Count > 0)
            {
                foreach (var z in timersspam) z?.Destroy();
            }

            unsubscribe();

            foreach (var player in BasePlayer.activePlayerList)
            {
                if (player != null && player.GetComponent<OnePlayer>() != null) player.GetComponent<OnePlayer>().ToDestroy();
            }
            // Если с ботами
            foreach (var player in players) player.GetComponent<OnePlayer>()?.ToDestroy();
            //
            destroyUI(Network.Net.sv.connections);
            players.Clear();
            cashplayers.Clear();
            duels.Clear();
        }

        private object OnUserCommand(IPlayer player, string com, string[] args)
        {
            com = com.TrimStart('/').Substring(com.IndexOf(".", StringComparison.Ordinal) + 1).ToLower();
            return blocker(BasePlayer.Find(player.Id), com);
        }

        private object OnServerCommand(ConsoleSystem.Arg arg)
        {
            string com = arg.cmd.FullName.ToLower();
            if (com.Equals("chat.teamsay")) return null;
            return blocker(arg.Player(), com);
        }

        private object OnPlayerVoice(BasePlayer player, Byte[] data)
        {
            if (player.GetComponent<OnePlayer>() != null && !player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Name + ".admin")) return false;
            return null;
        }
        private static string[] whitelist = new string[] { "report", "mreport", "ban", "mute", "pm", "r" };
        private object blocker(BasePlayer player, string com)
        {
            if (player == null) return null;
            if (com.Equals(config.command) || com.Contains("global.") && !config.blocked.Contains(com) || whitelist.Contains(com)) return null;
            OnePlayer one = player.GetComponent<OnePlayer>();
            if (one != null)
            {
                if (DateTime.Now > one.lastmsg)
                {
                    Message(player, config.messages[5].Replace("{prefix}", config.prefix).Replace("{command}", config.command));
                    one.lastmsg = DateTime.Now.AddSeconds(3);
                }
                return true;
            }
            return null;
        }


        public class ItemClass
        {
            public int itemid;
            public ulong skin;
            public int amount;
            public float condition;
            public float maxCondition;
            public int ammo;
            public string ammotype;
            public ProtoBuf.Item.InstanceData instanceData;
            public ItemClass[] contents;
        }

        public enum InventoryType { Main, Wear, Belt };
        static IEnumerable<ItemClass> GetItems(ItemContainer container)
        {
            return container.itemList.Where(x => x.amount > 0).Select(item => new ItemClass
            {
                itemid = item.info.itemid,
                amount = item.amount,
                ammo = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.contents ?? 0,
                ammotype = (item.GetHeldEntity() as BaseProjectile)?.primaryMagazine.ammoType.shortname ?? null,
                skin = item.skin,
                maxCondition = item.maxCondition,
                condition = item.condition,
                instanceData = item.instanceData ?? null,
                contents = item.contents?.itemList.Select(item1 => new ItemClass
                {
                    itemid = item1.info.itemid,
                    amount = item1.amount,
                    condition = item1.condition,
                    maxCondition = item1.maxCondition
                }).ToArray()
            });
        }

        static bool RestoreItems(BasePlayer player, Dictionary<InventoryType, List<ItemClass>> items, InventoryType type)
        {
            ItemContainer container = type == InventoryType.Belt ? player.inventory.containerBelt : type == InventoryType.Wear ? player.inventory.containerWear : player.inventory.containerMain;

            for (int i = 0; i < container.capacity; i++)
            {
                var existingItem = container.GetSlot(i);
                if (existingItem != null)
                {
                    existingItem.RemoveFromContainer();
                    existingItem.Remove(0f);
                }
                if (items[type].Count > i)
                {
                    var itemData = items[type][i];
                    var item = ItemManager.CreateByItemID(itemData.itemid, itemData.amount, itemData.skin);
                    item.condition = itemData.condition;
                    item.maxCondition = itemData.maxCondition;
                    if (itemData.instanceData != null)
                        item.instanceData = itemData.instanceData;

                    var weapon = item.GetHeldEntity() as BaseProjectile;
                    if (weapon != null)
                    {
                        if (!string.IsNullOrEmpty(itemData.ammotype))
                            weapon.primaryMagazine.ammoType = ItemManager.FindItemDefinition(itemData.ammotype);
                        weapon.primaryMagazine.contents = itemData.ammo;
                    }
                    if (itemData.contents != null)
                    {
                        foreach (var contentData in itemData.contents)
                        {
                            var newContent = ItemManager.CreateByItemID(contentData.itemid, contentData.amount);
                            if (newContent != null)
                            {
                                newContent.condition = contentData.condition;
                                newContent.maxCondition = contentData.maxCondition;
                                newContent.MoveToContainer(item.contents);
                            }
                        }
                    }
                    item.position = i;
                    item.SetParent(container);
                }
            }
            if (container.itemList.Count == items[type].Count) return true;
            return false;
        }

        void OnPlayerDisconnected(BasePlayer player)
        {
            proverochka(player);
        }

        void proverochka(BasePlayer player)
        {
            OnePlayer one = player.GetComponent<OnePlayer>();
            if (one != null)
            {
                Duel duel = duels.Where(x => x.pl1.Equals(player) || x.pl2.Equals(player)).FirstOrDefault();
                if (duel != null) endduel(player);
                else one.ToDestroy(true);
            }
        }

        static void maxatributes(BasePlayer player)
        {
            var item = ItemManager.CreateByItemID(-1262185308, 1, 0);
            player.GiveItem(item);
            player.metabolism.Reset();
            player.health = 100f;
            player.metabolism.calories.value = player.metabolism.calories.max;
            player.metabolism.hydration.value = player.metabolism.hydration.max;
            player.metabolism.bleeding.value = 0;
            player.metabolism.SendChangesToClient();
        }

        class OnePlayer : MonoBehaviour
        {
            public BasePlayer player;
            Vector3 teleportfrom;
            float health;
            float calories;
            float hydration;
            public DateTime lastmsg;
            public bool withoumessage;
            public bool duel = false;
            Dictionary<InventoryType, List<ItemClass>> inventory = new Dictionary<InventoryType, List<ItemClass>>();

            void Awake()
            {
                player = GetComponent<BasePlayer>();
                if (player == null)
                {
                    Destroy(this);
                    return;
                }

                if (ins.config.messagetrue) Broadcast(ins.config.messages[10].Replace("{prefix}", ins.config.prefix).Replace("{name}", player.displayName.ToUpper()));

                teleportfrom = player.transform.position;
                player.inventory.crafting.CancelAll(true);
                inventory = new Dictionary<InventoryType, List<ItemClass>>
                {
                    { InventoryType.Belt, GetItems(player.inventory.containerBelt).ToList() },
                    { InventoryType.Main, GetItems(player.inventory.containerMain).ToList() },
                    { InventoryType.Wear, GetItems(player.inventory.containerWear).ToList() }
                };
                Clear();
                health = player.Health();
                calories = player.metabolism.calories.value;
                hydration = player.metabolism.hydration.value;
                ins.Teleport(player, ins.posspectators[Random.Range(0, ins.posspectators.Count)]);
                Maxatributes();
                ins.LockInventory(player, true);
                Message(player, ins.config.messages[4].Replace("{prefix}", ins.config.prefix).Replace("{command}", ins.config.command));
                if (!ins.players.Contains(player)) ins.players.Add(player);
                ins.cashplayers.Add(player.userID);
                ins.createUI(new List<Network.Connection> { player.net.connection });
            }

            public void Teleport(Vector3 pos) => player.MovePosition(pos);
            public void ToDestroy(bool with = false)
            {
                withoumessage = with;
                Destroy(this);
            }
            public void Maxatributes() => maxatributes(player);
            public float Health() => player.Health();
            public void Kit() => ins.GiveKit(player);
            public void Clear() => player.inventory.Strip();
            void OnDestroy()
            {
                if (player == null) return;
                Clear();
                ins.restoreinventory[player.userID] = new restore { calories = this.calories, health = this.health, hydration = this.hydration, inventory = this.inventory, teleportfrom = this.teleportfrom };
                if (!player.IsDead() && !player.IsWounded()) ins.restoreafter(player);
                else player.Hurt(1000f, DamageType.Generic, (BaseEntity)player, false);
                if (ins.start > 0 && !withoumessage) ins.createUIEXIT(player.net.connection);
                if (ins.players.Contains(player)) ins.players.Remove(player);
                if (ins.cashplayers.Contains(player.userID)) ins.cashplayers.Remove(player.userID);
            }
        }

        void LockInventory(BasePlayer player, bool lockOrNot)
        {
            if (player.inventory.containerWear.HasFlag(ItemContainer.Flag.IsLocked) != lockOrNot)
                player.inventory.containerWear.SetFlag(ItemContainer.Flag.IsLocked, lockOrNot);

            if (player.inventory.containerBelt.HasFlag(ItemContainer.Flag.IsLocked) != lockOrNot)
                player.inventory.containerBelt.SetFlag(ItemContainer.Flag.IsLocked, lockOrNot);

            if (player.inventory.containerMain.HasFlag(ItemContainer.Flag.IsLocked) != lockOrNot)
                player.inventory.containerMain.SetFlag(ItemContainer.Flag.IsLocked, lockOrNot);

            player.inventory.SendSnapshot();
        }

        class restore
        {
            public Vector3 teleportfrom;
            public float health;
            public float calories;
            public float hydration;
            public Dictionary<InventoryType, List<ItemClass>> inventory = new Dictionary<InventoryType, List<ItemClass>>();
        }

        Dictionary<ulong, restore> restoreinventory = new Dictionary<ulong, restore>();

        void Teleport(BasePlayer player, Vector3 position)
        {

            if (player.net?.connection != null)
                player.ClientRPCPlayer(null, player, "StartLoading");
            StartSleeping(player);
            player.MovePosition(position);
            if (player.net?.connection != null)
                player.ClientRPCPlayer(null, player, "ForcePositionTo", position);
            if (player.net?.connection != null)
                player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.UpdateNetworkGroup();
            player.SendNetworkUpdateImmediate(false);
            if (player.net?.connection == null) return;
            try { player.ClearEntityQueue(null); } catch { }
            player.SendFullSnapshot();
        }

        void StartSleeping(BasePlayer player)
        {
            if (player.IsSleeping())
                return;
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Sleeping, true);
            if (!BasePlayer.sleepingPlayerList.Contains(player))
                BasePlayer.sleepingPlayerList.Add(player);
            player.CancelInvoke("InventoryUpdate");
        }

        void Unload()
        {
            endevent();
            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo { connections = Network.Net.sv.connections }, null, "DestroyUI", drawuimes);
        }
        private bool IsEventPlayer(BasePlayer player)
        {
            if (restoreinventory.ContainsKey(player.userID) || player.GetComponent<OnePlayer>() != null) return true;
            return false;
        }
        #endregion

        #region Message
        static void Message(BasePlayer player, string text)
        {
            ins.Player.Message(player, text, ins.config.broadcast2);
        }

        static void Broadcast(string text)
        {
            ins.Server.Broadcast(text, ins.config.broadcast2);
        }
        #endregion

        #region Commands
        void cmdconsolecommand(ConsoleSystem.Arg arg)
        {
            if (!arg.IsAdmin) return;
            if (!arg.HasArgs())
            {
                Debug.Log($"Ивент начнется через {config.timeforreg} секунд.");
                startreg(config.timeforreg);
            }
            else
            {
                if (arg.Args[0].Equals("end"))
                {
                    Debug.Log("Ивент отменен.");
                    Broadcast(config.messages[11].Replace("{prefix}", config.prefix));
                    endevent();
                    return;
                }
                if (arg.Args.Length.Equals(2))
                {
                    int chika;
                    if (!int.TryParse(arg.Args[1], out chika)) chika = config.timeforreg;
                    int gunid;
                    if (int.TryParse(arg.Args[0], out gunid)) gun = gunid;
                    else gunid = gun;
                    startreg(chika);
                    Debug.Log($"Ивент начнется через {chika} секунд, GUNID: {gunid}.");
                }
            }
        }
        void cmdtoevent(BasePlayer player, string cmd, string[] args)
        {
            if (args == null || args.Length < 1)
            {
                OnePlayer inevent = player.GetComponent<OnePlayer>();
                if (start > 0)
                {
                    if (inevent == null)
                    {
                        if (player.IsWounded() || player.IsDead())
                        {
                            Message(player, config.prefix + " <color=#ff6666>ВЫ ТЯЖЕЛО РАНЕНЫ!</color>");
                            return;
                        }
                        if (players.Count >= config.maxplayers)
                        {
                            Message(player, config.prefix + " <color=#ff6666>ИЗВИНИТЕ, МЕСТ БОЛЬШЕ НЕТ!</color>");
                            return;
                        }
                        if (player.isMounted)
                        {
                            Message(player, config.prefix + " <color=#ff6666>НЕЛЬЗЯ ТЕЛЕПОРТИРОВАТЬСЯ НА ИВЕНТ, КОГДА ВЫ НАХОДИТЕСЬ В ТРАНСПОРТНОМ СРЕДСТВЕ!</color>");
                            return;
                        }
                        if (player.InSafeZone())
                        {
                            Message(player, config.prefix + " <color=#ff6666>НЕЛЬЗЯ ТЕЛЕПОРТИРОВАТЬСЯ НА ИВЕНТ, КОГДА ВЫ НАХОДИТЕСЬ В ГОРОДЕ NPC!</color>");
                            return;
                        }

                        if (player.inventory.loot?.entitySource != null) player.EndLooting();

                        player.gameObject.AddComponent<OnePlayer>();
                    }
                    else
                    {
                        if (!player.IsOnGround())
                        {
                            Message(player, config.prefix + " <color=#ff6666>ПОДОЖДИТЕ ПОКА ВАШ ПЕРСОНАЖ ПРИЗЕМЛИТЬСЯ НА ТВЕРДУЮ ПОВЕРХНОСТЬ!</color>");
                            return;
                        }
                        proverochka(player);
                    }
                }
                else
                {
                    if (inevent != null) proverochka(player);
                    else if (players.Count.Equals(0)) Message(player, config.prefix + " <color=#ff6666>ИВЕНТ НЕ ЗАПУЩЕН!</color>");
                    else Message(player, config.prefix + " <color=#ff6666>ИВЕНТ УЖЕ НАЧАЛСЯ!</color>");
                }
            }
            else if (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Name + ".admin"))
            {
                if (args[0].Equals("pl1"))
                {
                    player.Teleport(posplayer1);
                }
                else if (args[0].Equals("pl2"))
                {
                    player.Teleport(posplayer2);
                }
                else if (args[0].Equals("spec"))
                {
                    player.Teleport(posspectators[Random.Range(0, posspectators.Count)]);
                }
                else if (args[0].Equals("start"))
                {
                    if (args.Length > 1)
                    {
                        if (args.Length.Equals(3))
                        {
                            int chika;
                            if (int.TryParse(args[2], out chika))
                            {
                                startreg(chika);
                            }
                            else startreg(config.timeforreg);
                        }
                        int gunid;
                        if (int.TryParse(args[1], out gunid))
                        {
                            gun = gunid;
                        }
                    }
                    else startreg(config.timeforreg);
                }
                else if (args[0].Equals("end"))
                {
                    Broadcast(config.messages[11].Replace("{prefix}", config.prefix));
                    endevent();
                }
                else if (args[0].Equals("bots"))
                {
                    int bots = 1;
                    for (int i = 0; i < bots; i++)
                    {
                        BaseEntity bandit = GameManager.server.CreateEntity("assets/prefabs/player/player.prefab", player.transform.position);
                        bandit.Spawn();
                        bandit.gameObject.AddComponent<OnePlayer>();
                    }
                }
                else if (args[0].Equals("kill"))
                {
                    endduel(player, true);
                }
            }
        }
        #endregion

        #region Time
        private string FormatTime(TimeSpan time)
=> (time.Days == 0 ? string.Empty : FormatDays(time.Days)) + (time.Hours == 0 ? string.Empty : FormatHours(time.Hours)) + (time.Minutes == 0 ? string.Empty : FormatMinutes(time.Minutes)) + ((time.Seconds == 0 || time.Days != 0 || time.Hours != 0) ? string.Empty : FormatSeconds(time.Seconds));

        private string FormatDays(int days) => FormatUnits(days, "дней", "дня", "день");

        private string FormatHours(int hours) => FormatUnits(hours, "часов", "часа", "час");

        private string FormatMinutes(int minutes) => FormatUnits(minutes, "минут", "минуты", "минуту");

        private string FormatSeconds(int seconds) => FormatUnits(seconds, "секунд", "секунды", "секунд");

        private string FormatUnits(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units} {form1} ";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2} ";

            return $"{units} {form3} ";
        }
        #endregion
    }
}

// --- End of file: OneVSOne.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/MeteorFall.cs ---
// --- Original Local Path: KualaRust/MeteorFall.cs ---

﻿using System;
using Random = System.Random;
using Oxide.Core.Plugins;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Rust;
using Facepunch;
using Newtonsoft.Json;
using Oxide.Game.Rust.Cui;
using System.Drawing;
using System.IO;
using System.Drawing.Imaging;
using System.Collections;
using System.Globalization;
namespace Oxide.Plugins
{
    [Info("MeteorFall", "EcoSmile (RustPlugin.ru)", "2.0.5")]
    class MeteorFall : RustPlugin
    {
        [PluginReference] Plugin EcoMap, RustMap, LustyMap, Map;
        private PluginConfig config;
        private class PluginConfig
        {
            [JsonProperty("Общие Настройки")]
            //[JsonProperty("General settings")]
            public Options _Options;

            public class Options
            {
                [JsonProperty("Отключать стандартную радиацию?")]
                //[JsonProperty("Disable standard radiation?")]
                public bool OffStandartRad;
                [JsonProperty("Включить автозапуск ивента?")]
                //[JsonProperty("Enable autorun event?")]
                public bool EnableAutomaticEvents;
                [JsonProperty("Настройка автозапуска")]
                //[JsonProperty("Autostart setup")]
                public Timers EventTimers;
                [JsonProperty("Сообщать о начале ивента в чат?")]
                //[JsonProperty("Report event start to chat?")]
                public bool NotifyEvent;
                [JsonProperty("Включить эффект тряски земли от падения метеорита?")]
                //[JsonProperty("Enable earthquake effect?")]
                public bool Earthquake { get; set; }
                [JsonProperty("Минимальное количество игроков для запуска ивента")]
                //[JsonProperty("Minimum number of players to run an event")]
                public int MinPlayer;
            }
            [JsonProperty("Настройки UI")]
            //[JsonProperty("UI Settings")]
            public UiSettings uiSettings;
            public class UiSettings
            {
                [JsonProperty("Включить UI?")]
                //[JsonProperty("Enable UI?")]
                public bool useUi;
                [JsonProperty("Ссылка на картинку")]
                //[JsonProperty("Image link")]
                public string IconImage;
                [JsonProperty("Положение UI")]
                //[JsonProperty("UI Position")]
                public UiTransform uiTransform;
                public class UiTransform
                {
                    [JsonProperty("Координата Х Мин")]
                    //[JsonProperty("Coordinate X Min")]
                    public string AnchorXMin;
                    [JsonProperty("Координата Х Мax")]
                    //[JsonProperty("Coordinate X Мax")]
                    public string AnchorXMax;
                    [JsonProperty("Координата Y Мин")]
                    //[JsonProperty("Coordinate Y Min")]
                    public string AnchorYMin;
                    [JsonProperty("Координата Y Мax")]
                    //[JsonProperty("Coordinate Y Мax")]
                    public string AnchorYMax;
                }
            }
            [JsonProperty("Настройки радиации")]
            //[JsonProperty("Radiation settings")]
            public Radiations _Radiations;
            public class Radiations
            {
                [JsonProperty("Радиус зоны")]
                //[JsonProperty("Zone radius")]
                public float Radius;
                [JsonProperty("Сила радиации")]
                //[JsonProperty("Radiation strength")]
                public float Strange;
            }
            public class Timers
            {
                [JsonProperty("Интервал ивента (Минуты) (Если выключен рандом)")]
                //[JsonProperty("Event Interval (Minutes) (If Random time is Off)")]
                public int EventInterval;
                [JsonProperty("Включить рандомное время?")]
                //[JsonProperty("Enable random time?")]
                public bool UseRandomTimer;
                [JsonProperty("Минимальный интервал (Минуты)")]
                //[JsonProperty("Minimum Interval (Minutes)")]
                public int RandomTimerMin;
                [JsonProperty("Максимальный интервал (Минуты)")]
                //[JsonProperty("Maximum Interval (Minutes)")]
                public int RandomTimerMax;
            }
            [JsonProperty("Настройка ивента")]
            //[JsonProperty("Event Setting")]
            public Intensity Settings;
            public class Intensity
            {
                [JsonProperty("Шанс распространения огня от малого метеорита")]
                //[JsonProperty("Chance of a small meteorite to spread fire")]
                public int FireRocketChance;
                [JsonProperty("Радиус на котором проходит метеоритопад")]
                //[JsonProperty("The radius of the meteorite shower")]
                public float Radius;
                [JsonProperty("Количество падающих метеоритов (малых)")]
                //[JsonProperty("The number of falling meteorites (small)")]
                public int RocketAmount;
                [JsonProperty("Длительность падения малых метеоритов")]
                //[JsonProperty("The duration of the fall of small meteorites")]
                public int Duration;
                [JsonProperty("Множитель урона от попадания по Enemy")]
                //[JsonProperty("Enemy Hit Damage Multiplier")]
                public float DamageMultiplier;
                [JsonProperty("Настройка выпадающих ресурсов после попадания метеорита по земле")]
                //[JsonProperty("Resource setting after meteor exlosions")]
                public Drop ItemDropControl;
                public class Drop
                {
                    [JsonProperty("Включить дроп ресурсов после метеорита?")]
                    //[JsonProperty("Enable resource drop after small meteorite?")]
                    public bool EnableItemDrop;
                    [JsonProperty("Настройка выпадаемых ресурсов")]
                    //[JsonProperty("Resources settings")]
                    public ItemDrops[] ItemsToDrop;
                }
                [JsonProperty("Количество NPC возле главного метеорита")]
                //[JsonProperty("Number of NPC near the main meteorite")]
                public int NpcAmount;
                [JsonProperty("Включить спавн NPC возле метеорита?")]
                //[JsonProperty("Enable NPC spawn?")]
                public bool NpcSpawn;
                [JsonProperty("Количество HP у ученых")]
                //[JsonProperty("Sceintist HP")]
                public float NpcHealth;
                [JsonProperty("Время которое будет остывать метеорит (Минуты)")]
                //[JsonProperty("The time that the meteorite will cool (Minutes)")]
                public float FireTime;
                [JsonProperty("Время через которое метеорит исчезнет после остывания (Минуты)")]
                //[JsonProperty("Time after which the meteorite disappears after cooling (Minutes)")]
                public float DespawnTime;
            }
            [JsonProperty("Настройки метеорита")]
            //[JsonProperty("Meteorite settings")]
            public MeteorSetting meteorSetting;
            public class MeteorSetting
            {
                [JsonProperty("Время до падения метеорита")]
                //[JsonProperty("Time to meteorite fall")]
                public int MeteorTime;
                [JsonProperty("Шанс того, что метеорит будет радиоактивен (0-отключить)")]
                //[JsonProperty("The chance that the meteorite will be radioactive (0-disable)")]
                public float RadChacnce;
                [JsonProperty("Запускать волну радиации после приземления если метеорит радиоактивный?")]
                //[JsonProperty("Run a radiation wave after landing if a meteorite is radioactive?")]
                public bool RadWave;
                [JsonProperty("HP серной руды (стандартно 500)")]
                //[JsonProperty("HP Sulfur Ore (500 standard)")]
                public float SulfurHealth;
                [JsonProperty("HP металлической руды (стандартно 500)")]
                //[JsonProperty("HP metal ore (500 standard)")]
                public float MetalHealth;
                [JsonProperty("Наносить дамаг по области?")]
                //[JsonProperty("Do damage by area?")]
                public bool SplashDamage;
                [JsonProperty("Радиус области")]
                //[JsonProperty("Area radius")]
                public float splashRadius;
                [JsonProperty("Наносимый дамаг (Урон наносится всем строительным блокам) ")]
                //[JsonProperty("Damage amount (Damage dealt to all building blocks) ")]
                public float DamageAmount;
            }

            [JsonProperty("Настройка семечки")]
            //[JsonProperty("Seed Setting")]
            public SeedSettings seedSettings;

            public class SeedSettings
            {
                [JsonProperty("Включить выпадение семечки?")]
                //[JsonProperty("Enable seed drop?")]
                public bool IsEnable;
                [JsonProperty("Cажать семечку только на грядки?")]
                //[JsonProperty("Plant a seed only on the beds?")]
                public bool PlantOnly;
                [JsonProperty("Скин семенчки")]
                //[JsonProperty("Seed skinID")]
                public ulong SeedSkinID;
                [JsonProperty("Название семечки")]
                //[JsonProperty("Custom seed name")]
                public string SeedName;
                [JsonProperty("Время через которое обьект вырастет (секунды)")]
                //[JsonProperty("The time it takes for the object to grow (seconds)")]
                public float TimeToRelise;
                [JsonProperty("Прифаб обьекта - Настройка")]
                //[JsonProperty("Prifab object - Settings")]
                public Dictionary<string, ObjectSetting> PrefabSetting;
            }
        }

        public class ObjectSetting
        {
            [JsonProperty("Максимальное ХП обьекта")]
            //[JsonProperty("Maximum object HP")]
            public float MaxHealth;
            [JsonProperty("Шанс спавна обьекта")]
            //[JsonProperty("Object spawn chance")]
            public float SpawnChance;
        }
        protected override void LoadDefaultConfig()
        {
            config = new PluginConfig()
            {
                _Options = new PluginConfig.Options
                {
                    OffStandartRad = false,
                    EnableAutomaticEvents = true,
                    MinPlayer = 5,
                    EventTimers = new PluginConfig.Timers
                    {
                        EventInterval = 60,
                        UseRandomTimer = true,
                        RandomTimerMin = 20,
                        RandomTimerMax = 30
                    }
                    ,
                    NotifyEvent = true,
                    Earthquake = true,
                }
                ,
                uiSettings = new PluginConfig.UiSettings
                {
                    useUi = true,
                    IconImage = "https://i.imgur.com/1PSiC85.png",
                    uiTransform = new PluginConfig.UiSettings.UiTransform
                    {
                        AnchorXMax = "0.6414062",
                        AnchorXMin = "0.34375",
                        AnchorYMax = "0.2083333",
                        AnchorYMin = "0.1097223"
                    }
                }
                ,
                _Radiations = new PluginConfig.Radiations
                {
                    Radius = 10f,
                    Strange = 5f,
                }
                ,
                Settings = new PluginConfig.Intensity
                {
                    Duration = 180,
                    FireRocketChance = 20,
                    Radius = 50,
                    RocketAmount = 90,
                    DamageMultiplier = 0.4f,
                    NpcAmount = 5,
                    NpcSpawn = false,
                    NpcHealth = 300f,
                    FireTime = 5,
                    DespawnTime = 10,
                    ItemDropControl = new PluginConfig.Intensity.Drop
                    {
                        EnableItemDrop = true,
                        ItemsToDrop = new ItemDrops[] {
                            new ItemDrops {
                                Maximum=150, Minimum=80, Shortname="stones"
                            }
                            , new ItemDrops {
                                Maximum=100, Minimum=50, Shortname="metal.ore"
                            }
                            , new ItemDrops {
                                Maximum=90, Minimum=40, Shortname="sulfur"
                            }
                            ,
                        }
                    }
                }
                ,
                meteorSetting = new PluginConfig.MeteorSetting
                {
                    MeteorTime = 30,
                    RadChacnce = 70,
                    RadWave = true,
                    SulfurHealth = 1000,
                    MetalHealth = 1500,
                    SplashDamage = false,
                    splashRadius = 100,
                    DamageAmount = 250
                },
                seedSettings = new PluginConfig.SeedSettings()
                {
                    IsEnable = true,
                    PlantOnly = true,
                    TimeToRelise = 30f,
                    SeedSkinID = 2131201310,
                    SeedName = "Метеоритное семя",
                    PrefabSetting = new Dictionary<string, ObjectSetting>()
                    {
                        ["assets/bundled/prefabs/autospawn/resource/ores/metal-ore.prefab"] = new ObjectSetting
                        {
                            MaxHealth = 500,
                            SpawnChance = 33,
                        },
                        ["assets/bundled/prefabs/autospawn/resource/ores/stone-ore.prefab"] = new ObjectSetting
                        {
                            MaxHealth = 500,
                            SpawnChance = 33,
                        },
                        ["assets/bundled/prefabs/autospawn/resource/ores/sulfur-ore.prefab"] = new ObjectSetting
                        {
                            MaxHealth = 500,
                            SpawnChance = 33,
                        },

                    }
                }
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        class ItemDrops
        {
            public string Shortname;
            public int Minimum;
            public int Maximum;
        }

        static MeteorFall ins;
        private bool rads;
        void OnServerInitialized()
        {
            ins = this;
            LoadConfig();
            LoadMessages();
            StartEventTimer();
            InitFileManager();
            ServerMgr.Instance.StartCoroutine(LoadImages());

        }

        private void OnServerRadiation()
        {
            var allobjects = UnityEngine.Object.FindObjectsOfType<TriggerRadiation>();
            for (int i = 0; i < allobjects.Length; i++)
            {
                UnityEngine.Object.Destroy(allobjects[i]);
            }
        }

        void Unload()
        {
            var objects = UnityEngine.Object.FindObjectsOfType<ItemCarrier>();
            if (objects != null) foreach (var gameObj in objects) UnityEngine.Object.Destroy(gameObj);

            var objectsSeed = UnityEngine.Object.FindObjectsOfType<MeteorSeed>();
            foreach (var gameObj in objectsSeed) UnityEngine.Object.Destroy(gameObj);

            Despawn();
            if (EventTimer != null) EventTimer.Destroy();
            foreach (var check in radiationZone) UnityEngine.Object.Destroy(check);
            radiationZone.Clear();
            if (!rads) ConVar.Server.radiation = false;
            if (mapMarker != null && !mapMarker.IsDestroyed) mapMarker.Kill();
            if (MarkerT != null && !MarkerT.IsDestroyed) MarkerT.Kill();
        }

        private Timer EventTimer, AlertTimer;
        private float launchStraightness = 2.0f;
        private float launchHeight = 150f;
        private float MapSize() => TerrainMeta.Size.x / 2;
        private float projectileSpeed = 250f;
        private float gravityModifier = 0.2f;
        private float detonationTime = 60f;

        class ItemCarrier : MonoBehaviour
        {
            private ItemDrops[] carriedItems = null;
            private float multiplier;
            public void SetCarriedItems(ItemDrops[] carriedItems) => this.carriedItems = carriedItems;
            public void SetDropMultiplier(float multiplier) => this.multiplier = 1.0f;
            private void OnDestroy()
            {
                if (carriedItems == null) return;
                int amount;
                for (int i = 0; i < carriedItems.Length; i++)
                {
                    if ((amount = (int)(UnityEngine.Random.Range(carriedItems[i].Minimum, carriedItems[i].Maximum) * 1.0f)) > 0)
                        ItemManager.CreateByName(carriedItems[i].Shortname, amount).Drop(gameObject.transform.position, Vector3.up);
                }
            }
        }

        private void StartEventTimer()
        {
            if (config._Options.EnableAutomaticEvents)
            {
                if (config._Options.EventTimers.UseRandomTimer)
                {
                    var random = UnityEngine.Random.Range(config._Options.EventTimers.RandomTimerMin, config._Options.EventTimers.RandomTimerMax);
                    EventTimer = timer.Once(random * 60, () => StartRandomOnMap());
                }
                else EventTimer = timer.Once(config._Options.EventTimers.EventInterval * 60, () => StartRandomOnMap());
            }
        }
        private void StopTimer()
        {
            if (rockettimer != null) rockettimer?.Destroy();
            if (AlertTimer != null) AlertTimer?.Destroy();
            if (EventTimer != null) EventTimer?.Destroy();
            if (npcTimer != null) timer.Destroy(ref npcTimer);
            npcTimer?.Destroy();
            if (mystimer != null) mystimer?.Destroy();
            if (mystimer1 != null) mystimer1?.Destroy();
            if (mystimer2 != null) mystimer2?.Destroy();
            if (mystimer3 != null) mystimer3?.Destroy();
            if (mystimer4 != null) mystimer4?.Destroy();
            if (mystimer5 != null) mystimer5?.Destroy();
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
        }
        private void StartRandomOnMap()
        {
            if (config._Options.NotifyEvent)
            {
                foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("incoming", pl.userID));
            }
            mystimer2 = timer.In(10f, () => CollisionAtm());
        }
        private Timer rockettimer, effecttimer, timerfireball;
        List<uint> MeteorList = new List<uint>();
        List<uint> MeteorFound = new List<uint>();
        List<NPCPlayer> NpcList = new List<NPCPlayer>();
        List<uint> FireBall = new List<uint>();
        public List<string> prefabOsn = new List<string>() {
            "assets/bundled/prefabs/autospawn/resource/ores/stone-ore.prefab", "assets/bundled/prefabs/autospawn/resource/ores/metal-ore.prefab", "assets/bundled/prefabs/autospawn/resource/ores/sulfur-ore.prefab"
        }
        ;
        Quaternion qTo;
        BaseEntity met;
        private Timer mystimer, mystimer3, mystimer4, mystimer5;
        private Timer mystimer1;
        private Timer mystimer2;
        void CollisionAtm()
        {
            PrintWarning($"Event Started!!!!!!!!!");
            //if (BasePlayer.activePlayerList.Count < config._Options.MinPlayer)
            //{
            //    foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("EventCancel", pl.userID));
            //    StartEventTimer();
            //    return;
            //}
            if (!ConVar.Server.radiation)
            {
                rads = false;
                if (config._Options.OffStandartRad) OnServerRadiation();
                ConVar.Server.radiation = true;
            }
            else rads = true;
            mystimer2 = timer.Once(10f, () =>
            {
                if (config._Options.NotifyEvent) foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("InAtm", pl.userID));
            }
            );
            var callAt = GetEventPosition();
            int cooldown = config.meteorSetting.MeteorTime >= 5 ? config.meteorSetting.MeteorTime : 5;
            mystimer1 = mystimer = timer.Repeat(1.1f, cooldown, () =>
            {
                if (cooldown == 1)
                {
                    timer.In(1f, () => StartRainOfFire(callAt));
                }
                if (cooldown <= 5 && cooldown != 0)
                {
                    if (config._Options.NotifyEvent) foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("Dropped", pl.userID).Replace("{cooldown}", $"{cooldown}"));
                }
                if (cooldown >= 0)
                {
                    foreach (var player in BasePlayer.activePlayerList)
                        DrawUI(player, GetMsg("TFallUI", player.userID).Replace("{time}", $"{FormatTime(TimeSpan.FromSeconds(cooldown))}"));
                    cooldown--;
                }
                if (cooldown <= 0)
                {
                    mystimer1.Destroy();
                    foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
                }
            }
            );
        }
        Vector3 spawnpos;
        private Vector3 MeteorSpawnPos()
        {
            return spawnpos;
        }

        private void StartRainOfFire(Vector3 origin)
        {
            float radius = config.Settings.Radius;
            int numberOfRockets = config.Settings.RocketAmount;
            float duration = config.Settings.Duration;
            bool dropsItems = config.Settings.ItemDropControl.EnableItemDrop;
            ItemDrops[] itemDrops = config.Settings.ItemDropControl.ItemsToDrop;
            float intervals = duration / numberOfRockets;
            rockettimer = timer.Repeat(intervals, numberOfRockets, () => RandomRocket(origin, radius));
            Random rnd = new Random();
            var location = origin;
            location.y = GetGroundPosition(location);
            float posy;
            float posx;
            float posz;
            string pref = "assets/bundled/prefabs/autospawn/resource/ores/stone-ore.prefab";
            int meteorcount = 0;

            meteorcount = UnityEngine.Random.Range(10, 20);
            timer.In(2f, () =>
            {
                foreach (var pl in BasePlayer.activePlayerList)
                    SendToChat(pl, GetMsg("MajorMeteor", pl.userID));
            });

            for (int i = 0; i < (meteorcount > 2 ? meteorcount : 2); i++)
            {
                qTo = Quaternion.Euler(new Vector3(UnityEngine.Random.Range(-30, 30), UnityEngine.Random.Range(-150, -50), 0));

                if (i % 2 == 0) pref = "assets/bundled/prefabs/autospawn/resource/ores/sulfur-ore.prefab";
                else pref = "assets/bundled/prefabs/autospawn/resource/ores/metal-ore.prefab";
                posy = i - (i - UnityEngine.Random.Range(0.3f, 0.6f));
                posx = i - (i - UnityEngine.Random.Range(-1f, +1f));
                posz = i - (i - UnityEngine.Random.Range(-1f, +1f));
                location.y = location.y + posy;
                location.x = location.x + posx;
                met = GameManager.server.CreateEntity(pref, (Vector3)location, qTo, true);
                met.Spawn();
                if (i == 2)
                    RustMap?.Call("AddTemporaryMarker", "meteor", false, 0.05f, 0.95f, met.transform, "Метеорит");
                OreResourceEntity ore = met.GetComponent<OreResourceEntity>();
                if (met.ShortPrefabName.Contains("sulfur"))
                {
                    foreach (var it in ore.resourceDispenser.containedItems)
                    {
                        it.startAmount = it.startAmount * config.meteorSetting.SulfurHealth / 500;
                        it.amount = it.amount * config.meteorSetting.SulfurHealth / 500;
                    }
                }
                else
                {
                    foreach (var it in ore.resourceDispenser.containedItems)
                    {
                        it.startAmount = it.startAmount * config.meteorSetting.MetalHealth / 500;
                        it.amount = it.amount * config.meteorSetting.MetalHealth / 500;
                    }
                }
                MeteorList.Add(met.net.ID);
                MeteorFound.Add(met.net.ID);
            }

            AlertTimer = timer.In(10f, () =>
            {
                if (config._Options.NotifyEvent)
                {
                    foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("colding", pl.userID).Replace("{time}", $"{FormatTime(TimeSpan.FromSeconds(config.Settings.FireTime * 60))}"));
                }
            });

            mystimer3 = timer.In(20f, () =>
            {
                if (config._Options.NotifyEvent)
                {
                    foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("Warning", pl.userID).Replace("{radius}", $"{config.Settings.Radius}"));
                }
            });

            int cooldown2 = Convert.ToInt32((config.Settings.FireTime * 60) + 10);
            mystimer4 = timer.Repeat(1f, cooldown2, () =>
            {
                if (cooldown2 == 1)
                {
                    ColdMeteorite();
                }
                if (1 < cooldown2 && cooldown2 <= config.Settings.FireTime * 60)
                    foreach (var player in BasePlayer.activePlayerList)
                        DrawUI(player, GetMsg("TCoolUI", player.userID).Replace("{time}", $"{FormatTime(TimeSpan.FromSeconds(cooldown2))}"));
                if (cooldown2 != 0) cooldown2--;
            }
            );
            CreateFireBall(location, new Vector3(0, 2, 0));
            CreateFireBall(location, new Vector3(2, 0, 0));
            CreateFireBall(location, new Vector3(-2, 0, 0));
            CreateFireBall(location, new Vector3(0, 0, 2));
            CreateFireBall(location, new Vector3(0, 0, -2));
            Effect.server.Run("assets/prefabs/npc/m2bradley/effects/bradley_explosion.prefab", location);
            Effect.server.Run("assets/prefabs/npc/patrol helicopter/effects/heli_explosion.prefab", location);
            timer.Once(1f, () =>
            {
                Effect.server.Run("assets/prefabs/npc/m2bradley/effects/bradley_explosion.prefab", location);
                Effect.server.Run("assets/prefabs/npc/patrol helicopter/effects/heli_explosion.prefab", location);
            }
            );
            if (config._Options.Earthquake) foreach (var pl in BasePlayer.activePlayerList) Screen(pl);
            var radchance = UnityEngine.Random.Range(0f, 100f);
            if (radchance < config.meteorSetting.RadChacnce)
            {
                if (config.meteorSetting.RadWave) CrateWave();
                CreateZone(location);
            }
            if (config.Settings.NpcSpawn) CreateNpc(location, config.Settings.NpcAmount);
            EcoMap?.Call("AddMapMarker", "meteor", false, 0.0300f, location, "Метеорит");
            LustyMap?.Call("AddMarker", location.x, location.z, "Метеорит", "https://i.imgur.com/BFCdsOx.png");
            Map?.Call("ApiAddPoint", location, "https://i.imgur.com/BFCdsOx.png");
            CreatePrivateMap(location);
            if (config.meteorSetting.SplashDamage)
                DamageObjects(location);
        }

        void DamageObjects(Vector3 pos)
        {
            List<BuildingBlock> list = Pool.GetList<BuildingBlock>();
            Vis.Entities(pos, config.meteorSetting.splashRadius, list);
            if (list.Count > 0)
                foreach (var obj in list)
                    obj.Hurt(config.meteorSetting.DamageAmount);
            Pool.FreeList(ref list);
        }

        private MapMarkerGenericRadius mapMarker;
        private VendingMachineMapMarker MarkerT;
        private UnityEngine.Color ConvertToColor(string color)
        {
            if (color.StartsWith("#")) color = color.Substring(1);
            int red = int.Parse(color.Substring(0, 2), NumberStyles.AllowHexSpecifier);
            int green = int.Parse(color.Substring(2, 2), NumberStyles.AllowHexSpecifier);
            int blue = int.Parse(color.Substring(4, 2), NumberStyles.AllowHexSpecifier);
            return new UnityEngine.Color((float)red / 255, (float)green / 255, (float)blue / 255);
        }
        private void CreatePrivateMap(Vector3 pos)
        {
            mapMarker = (MapMarkerGenericRadius)GameManager.server.CreateEntity("assets/prefabs/tools/map/genericradiusmarker.prefab", pos, new Quaternion());
            MarkerT = GameManager.server.CreateEntity("assets/prefabs/deployable/vendingmachine/vending_mapmarker.prefab", pos).GetComponent<VendingMachineMapMarker>();
            mapMarker.enableSaving = false;
            MarkerT.markerShopName = "<size=18>Метеорит</size>";
            MarkerT.enableSaving = false;
            MarkerT.Spawn();
            MarkerT.enabled = false;
            mapMarker.Spawn();
            mapMarker.radius = 0.2f;
            mapMarker.alpha = 1f;
            UnityEngine.Color color = ConvertToColor("#932e1d");
            UnityEngine.Color color2 = new UnityEngine.Color(0, 0, 0, 0);
            mapMarker.color1 = color;
            mapMarker.color2 = color2;
            mapMarker.SendUpdate();
        }
        List<string> prefabscreen = new List<string>()
        {
            "assets/prefabs/weapons/bone knife/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/hatchet/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/pickaxe/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/strike_screenshake.prefab",
            "assets/bundled/prefabs/fx/screen_jump.prefab"
        };
        Random rnd = new Random();
        void Screen(BasePlayer pl)
        {
            effecttimer = timer.Repeat(0.2f, 21, () =>
            {
                string screanp = prefabscreen[rnd.Next(prefabscreen.Count)];
                Effect.server.Run(screanp, pl.transform.position);
            });
        }
        private void ColdMeteorite()
        {
            timerfireball?.Destroy();
            foreach (var check in FireBall)
            {
                if (BaseNetworkable.serverEntities.Find(check) != null && !BaseNetworkable.serverEntities.Find(check).IsDestroyed) BaseNetworkable.serverEntities.Find(check).Kill();
            }
            FireBall.Clear();
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
            if (config._Options.NotifyEvent)
            {
                foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("coldingFinish", pl.userID));
            }
            AlertTimer = timer.Once(60f, () =>
            {
                if (config._Options.NotifyEvent)
                {
                    foreach (var pl in BasePlayer.activePlayerList) SendToChat(pl, GetMsg("Despawn", pl.userID).Replace("{time}", $"{FormatTime(TimeSpan.FromSeconds(config.Settings.DespawnTime * 60))}"));
                }
            }
            );
            int desptime = Convert.ToInt32((config.Settings.DespawnTime * 60) + 60f);
            mystimer5 = timer.Every(1f, () =>
            {
                if (MeteorFound.Count > 0)
                {
                    if (desptime == 1)
                    {
                        foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
                        Despawn();
                    }
                    if (1 < desptime && desptime <= config.Settings.DespawnTime * 60)
                    {
                        foreach (var player in BasePlayer.activePlayerList)
                            DrawUI(player, GetMsg("TDownUI", player.userID).Replace("{time}", $"{FormatTime(TimeSpan.FromSeconds(desptime))}"));
                        //DrawUI(player, $"Метеорит исчезнет через: {FormatTime(TimeSpan.FromSeconds(desptime))}");
                    }
                    if (desptime != 0) desptime--;
                }
                else
                {
                    if (mystimer5 != null) timer.Destroy(ref mystimer5);
                    mystimer5?.Destroy();
                }
            }
            );
        }
        Dictionary<Scientist, Vector3> npcPos = new Dictionary<Scientist, Vector3>();
        private void CreateNpc(Vector3 position, int amount = 0)
        {
            for (int i = 0; i < amount; i++)
            {
                var pos = RandomCircle(position, 10);
                Scientist scientist = GameManager.server.CreateEntity("assets/prefabs/npc/scientist/scientist.prefab", pos) as Scientist;
                scientist.Spawn();
                npcPos.Add(scientist, pos);
                NpcList.Add(scientist);
            }
            ToSpawnPoint();
        }
        private Timer npcTimer;
        void ToSpawnPoint()
        {
            npcTimer = timer.Every(5f, () =>
            {
                foreach (var npc in npcPos.Keys.ToList())
                    if (npc != null && npcPos.ContainsKey(npc) && npc?.AttackTarget == null)
                        npc?.SetDestination(npcPos[npc]);
            });
        }

        private void CreateFireBall(Vector3 position, Vector3 additional)
        {
            FireBall fireball_ = null;
            fireball_ = GameManager.server.CreateEntity("assets/bundled/prefabs/oilfireballsmall.prefab", position + additional) as FireBall;
            fireball_.lifeTimeMin = config.Settings.FireTime * 60 + 10;
            fireball_.lifeTimeMax = config.Settings.FireTime * 60 + 10;
            fireball_.Spawn();
            FireBall.Add(fireball_.net.ID);
        }

        private void Despawn()
        {
            foreach (var check in MeteorList)
            {
                var metent = BaseNetworkable.serverEntities.Find(check);
                if (metent != null && !metent.IsDestroyed)
                    metent.Kill();
            }
            foreach (var check in NpcList)
            {
                if (check != null && !check.IsDestroyed && !check.IsDead())
                    check.Kill();
            }
            foreach (var check in FireBall)
            {
                var Ball = BaseNetworkable.serverEntities.Find(check);
                if (Ball != null && !Ball.IsDestroyed)
                    Ball.Kill();
            }
            foreach (var check in radiationZone) if (check != null) UnityEngine.Object.Destroy(check);
            radiationZone.Clear();

            if (mapMarker != null && !mapMarker.IsDestroyed) mapMarker.Kill();
            if (MarkerT != null && !MarkerT.IsDestroyed) MarkerT.Kill();

            MeteorList.Clear();
            MeteorFound.Clear();
            FireBall.Clear();
            NpcList.Clear();
            StopTimer();
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
            EcoMap?.Call("RemoveMapMarker", "Метеорит");
            RustMap?.Call("RemoveTemporaryMarkerByName", "Метеорит");
            LustyMap?.Call("RemoveMarker", "Метеорит");
            if (met != null)
                Map?.Call("ApiRemovePoint", met);
            StartEventTimer();
            PrintWarning($"Event Stoped!!!!!!!!!!");
        }
        private void RandomRocket(Vector3 origin, float radius)
        {
            bool isFireRocket = false;
            Vector2 rand = UnityEngine.Random.insideUnitCircle;
            Vector3 offset = new Vector3(rand.x * radius, 0, rand.y * radius);
            Random rnd = new Random();
            Vector3 direction = (Vector3.up * -launchStraightness + Vector3.right).normalized;
            Vector3 launchPos = origin + offset - direction * launchHeight;
            if (UnityEngine.Random.Range(1, config.Settings.FireRocketChance) == 1) isFireRocket = true;
            BaseEntity rocket = CreateRocket(launchPos, direction, isFireRocket);
            if (config.Settings.ItemDropControl.EnableItemDrop)
            {
                var comp = rocket.gameObject.AddComponent<ItemCarrier>();
                comp.SetCarriedItems(config.Settings.ItemDropControl.ItemsToDrop);
                comp.SetDropMultiplier(1.0f);
            }
        }
        private BaseEntity CreateRocket(Vector3 startPoint, Vector3 direction, bool isFireRocket)
        {
            ItemDefinition projectileItem;
            if (isFireRocket) projectileItem = GetFireRocket();
            else projectileItem = GetRocket();
            ItemModProjectile component = projectileItem.GetComponent<ItemModProjectile>();
            BaseEntity entity = GameManager.server.CreateEntity(component.projectileObject.resourcePath, startPoint, new Quaternion(), true);
            TimedExplosive timedExplosive = entity.GetComponent<TimedExplosive>();
            ServerProjectile serverProjectile = entity.GetComponent<ServerProjectile>();
            serverProjectile.gravityModifier = gravityModifier;
            serverProjectile.speed = projectileSpeed;
            timedExplosive.timerAmountMin = detonationTime;
            timedExplosive.timerAmountMax = detonationTime;
            ScaleAllDamage(timedExplosive.damageTypes, config.Settings.DamageMultiplier);
            entity.SendMessage("InitializeVelocity", (object)(direction * 30f));
            entity.Spawn();
            return entity;
        }
        private void ScaleAllDamage(List<DamageTypeEntry> damageTypes, float scale)
        {
            for (int i = 0;
            i < damageTypes.Count;
            i++) damageTypes[i].amount *= scale;
        }
        private ItemDefinition GetRocket() => ItemManager.FindItemDefinition("ammo.rocket.hv");
        private ItemDefinition GetFireRocket() => ItemManager.FindItemDefinition("ammo.rocket.fire");
        [ConsoleCommand("meteor")]
        void ConsoleStart(ConsoleSystem.Arg args)
        {
            if (args.Connection != null) if (!args.IsConnectionAdmin) return;
            if (args.Args == null || args.Args.Length < 0)
            {
                Puts("MeteorFall by EcoSmile (RustPlugin.ru)\nКоманды:\n\tmeteor start - Ручной запуск ивента\n\tmeteor stop - Остановить текущий запущенный ивент");
                return;
            }
            switch (args.Args[0])
            {
                case "start":
                    foreach (var check in MeteorList)
                    {
                        if (BaseNetworkable.serverEntities.Find(check) != null && !BaseNetworkable.serverEntities.Find(check).IsDestroyed)
                        {
                            PrintWarning("Ивент MeteorFall уже запущен, используйте: meteor stop");
                            return;
                        }
                    }
                    Despawn();
                    PrintWarning("Вы запустили Ивент MeteorFall в ручном режиме");
                    StartRandomOnMap();
                    break;
                case "stop":
                    StopTimer();
                    Despawn();
                    PrintWarning("Ивент MeteorFall остановлен");
                    break;
            }
        }
        [ChatCommand("meteor")]
        void ChatCmdControll(BasePlayer player, string command, string[] args, ulong playerid = 533504)
        {
            if (player == null) return;
            if (!player.IsAdmin) return;
            if (args == null || args.Length <= 0)
            {
                SendToChat(player, GetMsg("CmdHelp", player.userID));
                return;
            }
            switch (args[0])
            {
                case "start":
                    foreach (var check in MeteorList)
                    {
                        if (BaseNetworkable.serverEntities.Find(check) != null && !BaseNetworkable.serverEntities.Find(check).IsDestroyed)
                        {
                            SendToChat(player, GetMsg("CmdEventCurrent", player.userID));
                            return;
                        }
                    }
                    if (EventTimer != null) EventTimer.Destroy();
                    SendToChat(player, GetMsg("CmdEventStart", player.userID));
                    StartRandomOnMap();
                    break;
                case "stop":
                    StopTimer();
                    Despawn();
                    SendToChat(player, GetMsg("CmdEventStop", player.userID));
                    break;
            }
        }

        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (player == null) return;
            var ID = dispenser.GetComponent<BaseEntity>().net.ID;
            if (ID != 0 && MeteorFound.Contains(ID))
            {
                if (config.seedSettings.IsEnable)
                {
                    GiveSeed(player);
                }
            }
        }

        object OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (dispenser.GetComponent<MeteorSeed>() != null)
            {
                var player = entity.ToPlayer();
                SendToChat(player, GetMsg("SeedCrash", player.userID));
                UnityEngine.Object.Destroy(dispenser.GetComponent<MeteorSeed>());
                dispenser.GetComponent<OreResourceEntity>().UpdateNetworkStage();
            }
            return null;
        }

        void OnEntityBuilt(Planner planner, GameObject gameobject, Vector3 Pos)
        {
            if (planner == null || gameobject == null) return;
            var player = planner.GetOwnerPlayer();
            BaseEntity entity = gameobject.ToBaseEntity();
            if (entity == null) return;
            if (entity.skinID == config.seedSettings.SeedSkinID)
            {
                NextTick(() =>
                {
                    if (entity != null && !entity.IsDestroyed)
                    {
                        if (config.seedSettings.PlantOnly && entity.GetParentEntity() == null)
                        {
                            entity.Kill();
                            GiveSeed(player);
                            SendToChat(player, GetMsg("OnlyPlant", player.userID));
                            return;
                        }

                        SetFirstStage(entity.transform.position);
                        entity.Kill();
                    }

                });
            }
        }

        void GiveSeed(BasePlayer player, int amount = 1)
        {
            Item seed = ItemManager.CreateByName("seed.hemp", amount, config.seedSettings.SeedSkinID);
            if (!string.IsNullOrEmpty(config.seedSettings.SeedName))
                seed.name = config.seedSettings.SeedName;
            player.GiveItem(seed);
        }

        [ChatCommand("mseed")]
        void mSeed_cmd(BasePlayer player, string command, string[] arg)
        {
            if (!player.IsAdmin) return;
            if (arg.Length == 0)
            {
                SendReply(player, $"/mseed amount");
                return;
            }
            int amount = int.Parse(arg[0]);
            GiveSeed(player, amount);
        }


        void SetFirstStage(Vector3 pos)
        {
            OreResourceEntity ore = GameManager.server.CreateEntity(OrePrefab(), pos) as OreResourceEntity;
            ore.stage = 3;
            ore.Spawn();
            ore.gameObject.AddComponent<MeteorSeed>();
        }

        string OrePrefab()
        {
            float chance = UnityEngine.Random.Range(0, 100);
            var prefab = "assets/bundled/prefabs/autospawn/resource/ores/stone-ore.prefab";
            int maxtry = 100;

            do
            {
                prefab = ins.config.seedSettings.PrefabSetting.Keys.ToList().GetRandom();
                chance = UnityEngine.Random.Range(0, 100);
                if (maxtry > 0)
                    maxtry--;
                else
                    return prefab;
            }
            while (ins.config.seedSettings.PrefabSetting[prefab].SpawnChance < chance);
            
            return prefab;
        }

        public class MeteorSeed : FacepunchBehaviour
        {
            OreResourceEntity ore;
            StagedResourceEntity stage;

            void Awake()
            {
                ore = GetComponent<OreResourceEntity>();
                InvokeRepeating(OreProgress, ins.config.seedSettings.TimeToRelise / 4, ins.config.seedSettings.TimeToRelise / 4);
            }

            void OreProgress()
            {
                if (ore.stage > 0)
                    ore.stage--;
                GroundWatch.PhysicsChanged(ore.GetComponent<StagedResourceEntity>().gameObject);
                ore.GetComponent<StagedResourceEntity>().SendNetworkUpdate();
                ore.SendNetworkUpdate();
                if (ore.stage == 0)
                {
                    foreach (var it in ore.resourceDispenser.containedItems)
                    {
                        it.startAmount = it.startAmount * ins.config.seedSettings.PrefabSetting[ore.PrefabName].MaxHealth / 500;
                        it.amount = it.amount * ins.config.seedSettings.PrefabSetting[ore.PrefabName].MaxHealth / 500;
                    }
                    CancelInvoke(OreProgress);
                    Destroy(this);
                    return;
                }
            }

            void OnDestroy()
            {
                CancelInvoke(OreProgress);
                Destroy(this);
            }
        }

        void OnEntityKill(BaseNetworkable entity)
        {
            if (entity == null) return;
            if (entity.net == null) return;
            if (MeteorFound.Contains(entity.net.ID))
            {
                if (MeteorFound.Count == 1)
                {
                    StopTimer();

                    if (mapMarker != null && !mapMarker.IsDestroyed) mapMarker?.Kill();
                    if (MarkerT != null && !MarkerT.IsDestroyed) MarkerT?.Kill();

                    foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, "CuiElementMt");
                    EcoMap?.Call("RemoveMapMarker", "Метеорит");
                    RustMap?.Call("RemoveTemporaryMarkerByName", "Метеорит");
                    LustyMap?.Call("RemoveMarker", "Метеорит");
                    MeteorFound.Clear();
                    if (met != null)
                        Map?.Call("ApiRemovePoint", met, "https://i.imgur.com/BFCdsOx.png");
                    StartEventTimer();
                    return;
                }
                MeteorFound.Remove(entity.net.ID);
            }
        }

        void DrawUI(BasePlayer player, string msg)
        {
            if (!config.uiSettings.useUi) return;
            if (!string.IsNullOrEmpty(config.uiSettings.uiTransform.AnchorXMax) && !string.IsNullOrEmpty(config.uiSettings.uiTransform.AnchorYMax) && !string.IsNullOrEmpty(config.uiSettings.uiTransform.AnchorXMin) && !string.IsNullOrEmpty(config.uiSettings.uiTransform.AnchorYMin))
            {
                string anchormax_ = $"{config.uiSettings.uiTransform.AnchorXMax} {config.uiSettings.uiTransform.AnchorYMax}";
                string anchormin_ = $"{config.uiSettings.uiTransform.AnchorXMin} {config.uiSettings.uiTransform.AnchorYMin}";
                CuiHelper.DestroyUi(player, "CuiElementMt");
                CuiHelper.AddUi(player, ui.Replace("{anchormax}", anchormax_).Replace("{anchormin}", anchormin_).Replace("{Icon}", Images).Replace("{Text}", msg));
            }
            else
            {
                string anchormax_ = "0.6414062 0.2083333";
                string anchormin_ = "0.34375 0.1097223";
                CuiHelper.DestroyUi(player, "CuiElementMt");
                CuiHelper.AddUi(player, ui.Replace("{anchormax}", anchormax_).Replace("{anchormin}", anchormin_).Replace("{Icon}", Images).Replace("{Text}", msg));
            }
        }
        string ui = "[{\"name\":\"CuiElementMt\",\"parent\":\"Hud\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"color\":\"0 0 0 0.2394277\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\"},{\"type\":\"RectTransform\",\"anchormin\":\"{anchormin}\",\"anchormax\":\"{anchormax}\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElementMt\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"color\":\"0 0 0 0.434163\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.007874042 0.09859085\",\"anchormax\":\"0.1758531 0.915493\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElementMt\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"png\":\"{Icon}\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.01049873 0.07042181\",\"anchormax\":\"0.1758531 0.915493\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElementMt\",\"components\":[{\"type\":\"UnityEngine.UI.RawImage\",\"color\":\"0 0 0 0.3316553\",\"sprite\":\"assets/content/textures/generic/fulltransparent.tga\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2020998 0.1236111\",\"anchormax\":\"0.9658796 0.8450704\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]},{\"name\":\"CuiElement\",\"parent\":\"CuiElementMt\",\"components\":[{\"type\":\"UnityEngine.UI.Text\",\"text\":\"{Text}\",\"align\":\"MiddleCenter\"},{\"type\":\"UnityEngine.UI.Outline\",\"color\":\"0.7238988 0.3568805 0.1592568 1\",\"distance\":\"1 -1\"},{\"type\":\"RectTransform\",\"anchormin\":\"0.2047244 0.1236111\",\"anchormax\":\"0.9580055 0.8309858\",\"offsetmin\":\"0 0\",\"offsetmax\":\"1 1\"}]}]";
        bool init;
        private GameObject FileManagerObject;
        private FileManager m_FileManager;
        private string Images;
        IEnumerator LoadImages()
        {
            if (!string.IsNullOrEmpty(config.uiSettings.IconImage))
            {
                Images = config.uiSettings.IconImage;
                yield return m_FileManager.StartCoroutine(m_FileManager.LoadFile(Images, Images));
                Images = m_FileManager.GetPng(Images);
            }
            else
            {
                Images = "https://i.imgur.com/1PSiC85.png";
                yield return m_FileManager.StartCoroutine(m_FileManager.LoadFile(Images, Images));
                Images = m_FileManager.GetPng(Images);
            }
        }
        void InitFileManager()
        {
            FileManagerObject = new GameObject("FileManagerObject");
            m_FileManager = FileManagerObject.AddComponent<FileManager>();
        }
        class FileManager : MonoBehaviour
        {
            int loaded = 0;
            int needed = 0;
            public bool IsFinished => needed == loaded;
            const ulong MaxActiveLoads = 10;
            Dictionary<string, FileInfo> files = new Dictionary<string, FileInfo>();
            private class FileInfo
            {
                public string Url;
                public string Png;
            }
            public string GetPng(string name) => files[name].Png;
            public IEnumerator LoadFile(string name, string url, int size = -1)
            {
                if (files.ContainsKey(name) && files[name].Url == url && !string.IsNullOrEmpty(files[name].Png)) yield break;
                files[name] = new FileInfo()
                {
                    Url = url
                }
                ;
                needed++;
                yield return StartCoroutine(LoadImageCoroutine(name, url, size));
            }
            IEnumerator LoadImageCoroutine(string name, string url, int size = -1)
            {
                using (WWW www = new WWW(url))
                {
                    yield return www;
                    if (string.IsNullOrEmpty(www.error))
                    {
                        var bytes = size == -1 ? www.bytes : Resize(www.bytes, size);
                        var entityId = CommunityEntity.ServerInstance.net.ID;
                        var crc32 = FileStorage.server.Store(bytes, FileStorage.Type.png, entityId).ToString();
                        files[name].Png = crc32;
                    }
                }
                ins.init = true;
                loaded++;
            }
            static byte[] Resize(byte[] bytes, int size)
            {
                Image img = (Bitmap)(new ImageConverter().ConvertFrom(bytes));
                Bitmap cutPiece = new Bitmap(size, size);
                System.Drawing.Graphics graphic = System.Drawing.Graphics.FromImage(cutPiece);
                graphic.DrawImage(img, new Rectangle(0, 0, size, size), 0, 0, img.Width, img.Height, GraphicsUnit.Pixel);
                graphic.Dispose();
                MemoryStream ms = new MemoryStream();
                cutPiece.Save(ms, ImageFormat.Jpeg);
                return ms.ToArray();
            }
        }
        private List<RadiationZone> radiationZone = new List<RadiationZone>();
        private class RadiationZone : MonoBehaviour
        {
            private TriggerRadiation rads;
            public float radius;
            public float amount;
            private void Awake()
            {
                gameObject.layer = (int)Rust.Layer.Reserved1;
                enabled = false;
            }
            private void OnDestroy() => Destroy(gameObject);
            public void DestroyZone()
            {
                try
                {
                    Destroy(this);
                }
                catch (Exception ex)
                {
                    ins.LogToFile("MeteorLog", $"Инфа о ошибке DestroyZone: {ex.Message} {Environment.NewLine} {ex.StackTrace}", ins, true);
                }
            }
            public void InitializeRadiationZone(Vector3 position, float radius, float amount)
            {
                this.radius = radius;
                this.amount = amount;
                transform.position = position;
                transform.rotation = new Quaternion();
                UpdateCollider();
                rads = gameObject.AddComponent<TriggerRadiation>();
                rads.RadiationAmountOverride = amount;
                //rads.radiationSize = radius;
                rads.interestLayers = LayerMask.GetMask("Player (Server)");
                rads.enabled = true;
            }
            public void Deactivate() => rads.gameObject.SetActive(false);
            public void Reactivate() => rads.gameObject.SetActive(true);
            public void AmountChange(float amount)
            {
                this.amount = amount;
                rads.RadiationAmountOverride = amount;
            }
            private void UpdateCollider()
            {
                var sphereCollider = gameObject.GetComponent<SphereCollider>() ?? gameObject.AddComponent<SphereCollider>();
                sphereCollider.isTrigger = true;
                sphereCollider.radius = radius;
            }
        }
        private void CreateZone(Vector3 pos)
        {
            var newZone = new GameObject().AddComponent<RadiationZone>();
            newZone.InitializeRadiationZone(pos, config._Radiations.Radius, config._Radiations.Strange);
            radiationZone.Add(newZone);
        }
        private void CrateWave()
        {
            var newZone = new GameObject().AddComponent<RadiationZone>();
            newZone.InitializeRadiationZone(Vector3.zero, ConVar.Server.worldsize, config._Radiations.Strange);
            radiationZone.Add(newZone);
            timer.In(10f, () => newZone.DestroyZone());
        }
        SpawnFilter filter = new SpawnFilter();
        List<Vector3> monuments = new List<Vector3>();
        static float GetGroundPosition(Vector3 pos)
        {
            float y = TerrainMeta.HeightMap.GetHeight(pos);
            RaycastHit hit;
            if (Physics.Raycast(new Vector3(pos.x, pos.y + 200f, pos.z), Vector3.down, out hit, Mathf.Infinity,
                LayerMask.GetMask(new[] { "Terrain", "World", "Default", "Construction", "Deployed" })) && !hit.collider.name.Contains("rock_cliff")) return Mathf.Max(hit.point.y, y);
            return y;
        }
        public Vector3 RandomDropPosition()
        {
            var vector = Vector3.zero;
            float num = 1000f, x = TerrainMeta.Size.x / 3;
            do
            {
                vector = Vector3Ex.Range(-x, x);
            }
            while (filter.GetFactor(vector) == 0f && (num -= 1f) > 0f);
            float max = TerrainMeta.Size.x / 2;
            float height = TerrainMeta.HeightMap.GetHeight(vector);
            vector.y = height;
            return vector;
        }
        List<int> BlockedLayers = new List<int> {
            (int)Layer.Water, (int)Layer.Construction, (int)Layer.Trigger, (int)Layer.Prevent_Building, (int)Layer.Deployed, (int)Layer.Tree
        }
        ;
        static int blockedMask = LayerMask.GetMask(new[] {
            "Player (Server)", "Trigger", "Prevent Building"
        }
        );
        public Vector3 GetSafeDropPosition(Vector3 position)
        {
            RaycastHit hit;
            position.y += 200f;
            if (Physics.Raycast(position, Vector3.down, out hit))
            {
                if (hit.collider?.gameObject == null) return Vector3.zero;
                string ColName = hit.collider.name;
                if (!BlockedLayers.Contains(hit.collider.gameObject.layer) && ColName != "MeshColliderBatch" && ColName != "iceberg_3" && ColName != "iceberg_2" && !ColName.Contains("rock_cliff"))
                {
                    position.y = Mathf.Max(hit.point.y, TerrainMeta.HeightMap.GetHeight(position));
                    var colliders = Pool.GetList<Collider>();
                    Vis.Colliders(position, 1, colliders, blockedMask, QueryTriggerInteraction.Collide);
                    bool blocked = colliders.Count > 0;
                    Pool.FreeList<Collider>(ref colliders);
                    if (!blocked) return position;
                }
            }
            return Vector3.zero;
        }
        public Vector3 GetEventPosition()
        {
            var eventPos = Vector3.zero;
            int maxRetries = 100;
            monuments = UnityEngine.Object.FindObjectsOfType<MonumentInfo>().Select(monument => monument.transform.position).ToList();
            do
            {
                eventPos = GetSafeDropPosition(RandomDropPosition());
                foreach (var monument in monuments)
                {
                    if (Vector3.Distance(eventPos, monument) < 150f)
                    {
                        eventPos = Vector3.zero;
                        break;
                    }
                }
            }
            while (eventPos == Vector3.zero && --maxRetries > 0);
            return eventPos;
        }
        Vector3 RandomCircle(Vector3 center, float radius = 2)
        {
            float ang = UnityEngine.Random.value * 360;
            Vector3 pos;
            pos.x = center.x + radius * Mathf.Sin(ang * Mathf.Deg2Rad);
            pos.z = center.z + radius * Mathf.Cos(ang * Mathf.Deg2Rad);
            pos.y = center.y;
            pos.y = GetGroundPosition(pos);
            return pos;
        }
        private void SendToChat(BasePlayer Player, string Message)
        {
            PrintToChat(Player, Message);
        }
        string GetMsg(string key, object userID = null) => lang.GetMessage(key, this, userID?.ToString());
        void LoadMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["incoming"] = "<size=16><color=red>Attention!</color> \nAn island falling <color=#FF4500><b>METEORITE</b></color>! \nCollision is inevitable!</size>",
                ["colding"] = "<size=14>Scientists have discovered a <color=#FF4500><b>METEORITE</b></color>, its location is marked on the map! \nThe meteorite cools through {time}</size>",
                ["InAtm"] = "<size=14><color=red>Attention!</color> \n<color=#FF4500><b>Meteorite</b></color> entered the atmosphere of the planet</size>",
                ["Dropped"] = "<size=14><color=red>Collision through {cooldown}...</color></size>",
                ["Warning"] = "<size=14>Careful! At the site of the fall of the meteorite <b>fragments</b> continue to fall within a radius of {radius} meters.</size>",
                ["coldingFinish"] = "<size=14>The temperature of the <color=#FF4500><b>METEOR</b></color> has reached the planetary temperatur!</size>",
                ["Despawn"] = "<size=14><color=#FF4500><b>The METEORITE</b></color> began to disintegrate under the influence of oxygen. \nEstimated time of disappearance {time}</size>",
                ["EventCancel"] = "<size=14><color=#FF4500><b>The METEORITE</b></color> flew past the planet! The astronomers made a mistake.</size>\n<size=10>Not enough players to start the event.</size>",
                ["CmdHelp"] = "<size=16>MeteorFall by EcoSmile (RustPlugin.ru)</size>\nCommands:\n\t/meteor start - Start event\n\t/meteor stop - Stop current event",
                ["CmdEventStart"] = "You ran the MeteorFall Event manually",
                ["CmdEventStop"] = "Event MeteorFall stopped",
                ["CmdEventCurrent"] = "The MeteorFall event is already running, use: / meteor stop",
                ["MajorMeteor"] = "The meteorite at the entrance to the atmosphere is almost not damaged and has retained its gigantic size!",
                ["MinorMeteor"] = "The meteorite at the entrance to the atmosphere slightly damaged but its size is still frightening!",
                ["SmalMeteor"] = "The meteorite at the entrance to the atmosphere is severely damaged to the earth will reach only a small fragment.",
                ["OnlyPlant"] = "Meteor seed can only be planted in the Planter Box",
                ["SeedCrash"] = "You have disturbed the growth of the seed and now it will not be so fruitful.",
                ["TDownUI"] = "The meteorite will disappear in: {time}",
                ["TCoolUI"] = "The meteorite will cool down in a minute: {time}",
                ["TFallUI"] = "The meteorite will fall through: {time}",
            }
            , this);
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["incoming"] = "<size=16><color=red>Внимание!</color> \nНа остров падает <color=#FF4500><b>МЕТЕОРИТ</b></color>! \nСтолкновение неизбежно!</size>",
                ["colding"] = "<size=14>Ученые обнаружили <color=#FF4500><b>МЕТЕОРИТ</b></color>, его местоположение отмечено на карте! \nМетеорит остынет через {time}</size>",
                ["InAtm"] = "<size=14><color=red>ВНИМАНИЕ!</color> \n<color=#FF4500><b>Метеорит</b></color> вошел в атмосферу!</size>",
                ["Dropped"] = "<size=14><color=red>Столкновние через {cooldown}...</color></size>",
                ["Warning"] = "<size=14>Осторожно! На месте падения метеорита продолжают падать <b>осколки</b> в радиусе {radius} метров.</size>",
                ["coldingFinish"] = "<size=14>Температура <color=#FF4500><b>МЕТЕОРА</b></color> достигла планетной температуры!</size>",
                ["Despawn"] = "<size=14><color=#FF4500><b>МЕТЕОРИТ</b></color> начал распадаться под действием кислорода. \nОриентировочное время исчезновения {time}</size>",
                ["EventCancel"] = "<size=14><color=#FF4500><b>МЕТЕОРИТ</b></color> прошел мимо планеты! \nАстраномы ошиблись.</size>\n<size=10>Недостаточно игроков для запуска ивента.</size>",
                ["CmdHelp"] = "<size=16>MeteorFall by EcoSmile (RustPlugin.ru)</size>\nКоманды:\n\t/meteor start - Ручной запуск ивента\n\t/meteor stop - Остановить текущий запущенный ивент",
                ["CmdEventStart"] = "Вы запустили Ивент MeteorFall в ручном режиме",
                ["CmdEventStop"] = "Ивент MeteorFall остановлен",
                ["CmdEventCurrent"] = "Ивент MeteorFall уже запущен, используйте: /meteor stop",
                ["MajorMeteor"] = "Метеорит при входе в атмосферу почти не повредился и сохранил свои гигантские размеры!",
                ["MinorMeteor"] = "Метеорит при входе в атмосферу слегка повредился но его размеры все еще пугают!",
                ["SmalMeteor"] = "Метеорит при входе в атмосферу сильно повредился до земли долетит лишь не большой обломок.",
                ["OnlyPlant"] = "Семечко можно посадить только в грядки",
                ["SeedCrash"] = "Вы нарушили помешали росту семени теперь оно не будет так блодоносно.",
                ["TDownUI"] = "Метеорит исчезнет через: {time}",
                ["TCoolUI"] = "Метеорит остынет через: {time}",
                ["TFallUI"] = "Метеорит упадет через: {time}"
            }
            , this, "ru");
        }
        public static string FormatTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0) result += $"{Format(time.Days, "д.", "д.", "д.")} ";
            if (time.Hours != 0) result += $"{Format(time.Hours, "ч.", "ч.", "ч.")} ";
            if (time.Minutes != 0) result += $"{Format(time.Minutes, "мин", "мин", "мин")} ";
            if (time.Seconds != 0) result += $"{Format(time.Seconds, "сек", "сек", "сек")} ";
            return result;
        }
        private static string Format(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;
            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9) return $"{units} {form1}";
            if (tmp >= 2 && tmp <= 4) return $"{units} {form2}";
            return $"{units} {form3}";
        }
    }
}

// --- End of file: MeteorFall.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/MercuryUtilites.cs ---
// --- Original Local Path: KualaRust/MercuryUtilites.cs ---

﻿using System;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Libraries.Covalence;
using ConVar;
using Newtonsoft.Json.Linq;
using Oxide.Core.Libraries;
using System.Linq;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("MercuryUtilites", "Mercury", "0.0.1")]
    class MercuryUtilites : RustPlugin
    {
        public Dictionary<ulong, string> HexTakePlayer = new Dictionary<ulong, string>();

        #region Vars

        #region IconsRust
        public HashSet<string> IconsRust = new HashSet<string>
        {
            "assets/bundled/prefabs/fx/lightning/fx-lightning.png",
            "assets/bundled/prefabs/fx/lightning/fx-lightning2.png",
            "assets/bundled/prefabs/fx/lightning/fx-lightning3.png",
            "assets/bundled/prefabs/fx/lightning/fx-lightning4.png",
            "assets/content/effects/muzzleflashes/muzzle_flash-cross.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-front-3x3.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-ring.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-side-1x2.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-side-1x4.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-t.tga",
            "assets/content/effects/muzzleflashes/muzzle_flash-v.tga",
            "assets/content/effects/muzzleflashes/muzzle_smoketrail.psd",
            "assets/content/image effects/lens dirt/lensdirt1.png",
            "assets/content/image effects/lens dirt/lensdirt10.png",
            "assets/content/image effects/lens dirt/lensdirt11.png",
            "assets/content/image effects/lens dirt/lensdirt12.png",
            "assets/content/image effects/lens dirt/lensdirt13.png",
            "assets/content/image effects/lens dirt/lensdirt14.png",
            "assets/content/image effects/lens dirt/lensdirt15.png",
            "assets/content/image effects/lens dirt/lensdirt16.png",
            "assets/content/image effects/lens dirt/lensdirt2.png",
            "assets/content/image effects/lens dirt/lensdirt3.png",
            "assets/content/image effects/lens dirt/lensdirt4.png",
            "assets/content/image effects/lens dirt/lensdirt5.png",
            "assets/content/image effects/lens dirt/lensdirt6.png",
            "assets/content/image effects/lens dirt/lensdirt7.png",
            "assets/content/image effects/lens dirt/lensdirt8.png",
            "assets/content/image effects/lens dirt/lensdirt9.png",
            "assets/content/materials/highlight.png",
            "assets/content/textures/generic/fulltransparent.tga",
            "assets/content/ui/developer/developmentskin/devpanelbg.png",
            "assets/content/ui/developer/developmentskin/devtab-active.png",
            "assets/content/ui/developer/developmentskin/devtab-bright.png",
            "assets/content/ui/developer/developmentskin/devtab-normal.png",
            "assets/content/ui/facepunch-darkbg.png",
            "assets/content/ui/gameui/compass/alpha_mask.png",
            "assets/content/ui/gameui/compass/compass_strip.png",
            "assets/content/ui/gameui/compass/compass_strip_hd.png",
            "assets/content/ui/gameui/ui.crosshair.circle.png",
            "assets/content/ui/gameui/underlays/ui.damage.directional.normal.tga",
            "assets/content/ui/hypnotized.png",
            "assets/content/ui/menuui/rustlogo-blurred.png",
            "assets/content/ui/menuui/rustlogo-normal-transparent.png",
            "assets/content/ui/menuui/ui.loading.logo.tga",
            "assets/content/ui/menuui/ui.logo.big.png",
            "assets/content/ui/menuui/ui.menu.logo.png",
            "assets/content/ui/menuui/ui.menu.news.missingbackground.jpg",
            "assets/content/ui/menuui/ui.menu.rateus.background.png",
            "assets/content/ui/overlay_binocular.png",
            "assets/content/ui/overlay_bleeding.png",
            "assets/content/ui/overlay_bleeding_height.tga",
            "assets/content/ui/overlay_bleeding_normal.tga",
            "assets/content/ui/overlay_freezing.png",
            "assets/content/ui/overlay_goggle.png",
            "assets/content/ui/overlay_helmet_slit.png",
            "assets/content/ui/overlay_poisoned.png",
            "assets/content/ui/overlay_scope_1.png",
            "assets/content/ui/overlay_scope_2.png",
            "assets/content/ui/tiledpatterns/circles.png",
            "assets/content/ui/tiledpatterns/stripe_reallythick.png",
            "assets/content/ui/tiledpatterns/stripe_slight.png",
            "assets/content/ui/tiledpatterns/stripe_slight_thick.png",
            "assets/content/ui/tiledpatterns/stripe_thick.png",
            "assets/content/ui/tiledpatterns/stripe_thin.png",
            "assets/content/ui/tiledpatterns/swirl_pattern.png",
            "assets/content/ui/ui.background.gradient.psd",
            "assets/content/ui/ui.background.tile.psd",
            "assets/content/ui/ui.background.tiletex.psd",
            "assets/content/ui/ui.background.transparent.linear.psd",
            "assets/content/ui/ui.background.transparent.linearltr.tga",
            "assets/content/ui/ui.background.transparent.radial.psd",
            "assets/content/ui/ui.icon.rust.png",
            "assets/content/ui/ui.serverimage.default.psd",
            "assets/content/ui/ui.spashscreen.psd",
            "assets/content/ui/ui.white.tga",
            "assets/icons/add.png",
            "assets/icons/ammunition.png",
            "assets/icons/arrow_right.png",
            "assets/icons/authorize.png",
            "assets/icons/bite.png",
            "assets/icons/bleeding.png",
            "assets/icons/blueprint.png",
            "assets/icons/blueprint_underlay.png",
            "assets/icons/blunt.png",
            "assets/icons/bp-lock.png",
            "assets/icons/broadcast.png",
            "assets/icons/build/stairs.png",
            "assets/icons/build/wall.doorway.door.png",
            "assets/icons/build/wall.window.bars.png",
            "assets/icons/bullet.png",
            "assets/icons/cargo_ship_body.png",
            "assets/icons/cart.png",
            "assets/icons/change_code.png",
            "assets/icons/check.png",
            "assets/icons/chinook_map_blades.png",
            "assets/icons/chinook_map_body.png",
            "assets/icons/circle_closed.png",
            "assets/icons/circle_closed_toedge.png",
            "assets/icons/circle_gradient.png",
            "assets/icons/circle_gradient_white.png",
            "assets/icons/circle_open.png",
            "assets/icons/clear.png",
            "assets/icons/clear_list.png",
            "assets/icons/close.png",
            "assets/icons/close_door.png",
            "assets/icons/clothing.png",
            "assets/icons/cold.png",
            "assets/icons/community_servers.png",
            "assets/icons/connection.png",
            "assets/icons/construction.png",
            "assets/icons/cooking.png",
            "assets/icons/crate.png",
            "assets/icons/cup_water.png",
            "assets/icons/cursor-hand.png",
            "assets/icons/deauthorize.png",
            "assets/icons/demolish.png",
            "assets/icons/demolish_cancel.png",
            "assets/icons/demolish_immediate.png",
            "assets/icons/discord 1.png",
            "assets/icons/discord.png",
            "assets/icons/download.png",
            "assets/icons/drop.png",
            "assets/icons/drowning.png",
            "assets/icons/eat.png",
            "assets/icons/electric.png",
            "assets/icons/embrella.png",
            "assets/icons/enter.png",
            "assets/icons/examine.png",
            "assets/icons/exit.png",
            "assets/icons/explosion.png",
            "assets/icons/explosion_sprite.png",
            "assets/icons/extinguish.png",
            "assets/icons/facebook-box.png",
            "assets/icons/facebook.png",
            "assets/icons/facepunch.png",
            "assets/icons/fall.png",
            "assets/icons/favourite_servers.png",
            "assets/icons/file.png",
            "assets/icons/flags/af.png",
            "assets/icons/flags/ar.png",
            "assets/icons/flags/ca.png",
            "assets/icons/flags/cs.png",
            "assets/icons/flags/da.png",
            "assets/icons/flags/de.png",
            "assets/icons/flags/el.png",
            "assets/icons/flags/en-pt.png",
            "assets/icons/flags/en.png",
            "assets/icons/flags/es-es.png",
            "assets/icons/flags/fi.png",
            "assets/icons/flags/fr.png",
            "assets/icons/flags/he.png",
            "assets/icons/flags/hu.png",
            "assets/icons/flags/it.png",
            "assets/icons/flags/ja.png",
            "assets/icons/flags/ko.png",
            "assets/icons/flags/nl.png",
            "assets/icons/flags/no.png",
            "assets/icons/flags/pl.png",
            "assets/icons/flags/pt-br.png",
            "assets/icons/flags/pt-pt.png",
            "assets/icons/flags/ro.png",
            "assets/icons/flags/ru.png",
            "assets/icons/flags/sr.png",
            "assets/icons/flags/sv-se.png",
            "assets/icons/flags/tr.png",
            "assets/icons/flags/uk.png",
            "assets/icons/flags/vi.png",
            "assets/icons/flags/zh-cn.png",
            "assets/icons/flags/zh-tw.png",
            "assets/icons/fog.png",
            "assets/icons/folder.png",
            "assets/icons/folder_up.png",
            "assets/icons/fork_and_spoon.png",
            "assets/icons/freezing.png",
            "assets/icons/friends_servers.png",
            "assets/icons/gear.png",
            "assets/icons/grenade.png",
            "assets/icons/greyout.png",
            "assets/icons/greyout_large.png",
            "assets/icons/health.png",
            "assets/icons/history_servers.png",
            "assets/icons/home.png",
            "assets/icons/horse_ride.png",
            "assets/icons/hot.png",
            "assets/icons/ignite.png",
            "assets/icons/info.png",
            "assets/icons/inventory.png",
            "assets/icons/isbroken.png",
            "assets/icons/iscooking.png",
            "assets/icons/isloading.png",
            "assets/icons/isonfire.png",
            "assets/icons/joystick.png",
            "assets/icons/key.png",
            "assets/icons/knock_door.png",
            "assets/icons/lan_servers.png",
            "assets/icons/level.png",
            "assets/icons/level_metal.png",
            "assets/icons/level_stone.png",
            "assets/icons/level_top.png",
            "assets/icons/level_wood.png",
            "assets/icons/lick.png",
            "assets/icons/light_campfire.png",
            "assets/icons/lightbulb.png",
            "assets/icons/loading.png",
            "assets/icons/lock.png",
            "assets/icons/loot.png",
            "assets/icons/maparrow.png",
            "assets/icons/market.png",
            "assets/icons/maximum.png",
            "assets/icons/meat.png",
            "assets/icons/medical.png",
            "assets/icons/menu_dots.png",
            "assets/icons/modded_servers.png",
            "assets/icons/occupied.png",
            "assets/icons/open.png",
            "assets/icons/open_door.png",
            "assets/icons/peace.png",
            "assets/icons/pickup.png",
            "assets/icons/pills.png",
            "assets/icons/player_assist.png",
            "assets/icons/player_carry.png",
            "assets/icons/player_loot.png",
            "assets/icons/poison.png",
            "assets/icons/portion.png",
            "assets/icons/power.png",
            "assets/icons/press.png",
            "assets/icons/radiation.png",
            "assets/icons/rain.png",
            "assets/icons/reddit.png",
            "assets/icons/refresh.png",
            "assets/icons/resource.png",
            "assets/icons/rotate.png",
            "assets/icons/rust.png",
            "assets/icons/save.png",
            "assets/icons/shadow.png",
            "assets/icons/sign.png",
            "assets/icons/slash.png",
            "assets/icons/sleeping.png",
            "assets/icons/sleepingbag.png",
            "assets/icons/square.png",
            "assets/icons/square_gradient.png",
            "assets/icons/stab.png",
            "assets/icons/star.png",
            "assets/icons/steam.png",
            "assets/icons/steam_inventory.png",
            "assets/icons/stopwatch.png",
            "assets/icons/store.png",
            "assets/icons/study.png",
            "assets/icons/subtract.png",
            "assets/icons/target.png",
            "assets/icons/tools.png",
            "assets/icons/translate.png",
            "assets/icons/traps.png",
            "assets/icons/triangle.png",
            "assets/icons/tweeter.png",
            "assets/icons/twitter 1.png",
            "assets/icons/twitter.png",
            "assets/icons/unlock.png",
            "assets/icons/upgrade.png",
            "assets/icons/voice.png",
            "assets/icons/vote_down.png",
            "assets/icons/vote_up.png",
            "assets/icons/warning.png",
            "assets/icons/warning_2.png",
            "assets/icons/weapon.png",
            "assets/icons/web.png",
            "assets/icons/wet.png",
            "assets/icons/workshop.png",
            "assets/icons/xp.png",
            "assets/prefabs/building core/floor.frame/floor.frame.png",
            "assets/prefabs/building core/floor.triangle/floor.triangle.png",
            "assets/prefabs/building core/floor/floor.png",
            "assets/prefabs/building core/foundation.steps/foundation.steps.png",
            "assets/prefabs/building core/foundation.triangle/foundation.triangle.png",
            "assets/prefabs/building core/foundation/foundation.png",
            "assets/prefabs/building core/roof/roof.png",
            "assets/prefabs/building core/stairs.l/stairs_l.png",
            "assets/prefabs/building core/stairs.u/stairs_u.png",
            "assets/prefabs/building core/wall.doorway/wall.doorway.png",
            "assets/prefabs/building core/wall.frame/wall.frame.png",
            "assets/prefabs/building core/wall.half/wall.half.png",
            "assets/prefabs/building core/wall.low/wall.third.png",
            "assets/prefabs/building core/wall.window/wall.window.png",
            "assets/prefabs/building core/wall/wall.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform0.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform0_grey.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform1.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform1_grey.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform2.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bossform2_grey.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet1.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet2.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet3.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet4.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet5.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet6.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet7.png",
            "assets/prefabs/misc/chippy arcade/chippyart/bullet8.png",
            "assets/prefabs/misc/chippy arcade/chippyart/chippy.png",
            "assets/prefabs/misc/chippy arcade/chippyart/chippy_grey.png",
            "assets/prefabs/misc/chippy arcade/chippyart/chippylogo.png",
            "assets/prefabs/misc/chippy arcade/chippyart/cloud1.png",
            "assets/prefabs/misc/chippy arcade/chippyart/cloud2.png",
            "assets/prefabs/misc/chippy arcade/chippyart/cloud3.png",
            "assets/prefabs/misc/chippy arcade/chippyart/cloud4.png",
            "assets/prefabs/misc/chippy arcade/chippyart/cloud5.png",
            "assets/prefabs/misc/chippy arcade/chippyart/grid.png",
            "assets/prefabs/misc/chippy arcade/chippyart/shield.png",
            "assets/prefabs/misc/chippy arcade/chippyart/shield_pickup.png",
            "assets/prefabs/misc/chippy arcade/chippyart/star1.png",
            "assets/prefabs/misc/chippy arcade/chippyart/star2.png",
            "assets/standard assets/effects/imageeffects/textures/color correction ramp.png",
            "assets/standard assets/effects/imageeffects/textures/contrastenhanced3d16.png",
            "assets/standard assets/effects/imageeffects/textures/grayscale ramp.png",
            "assets/standard assets/effects/imageeffects/textures/hexshape.psd",
            "assets/standard assets/effects/imageeffects/textures/motionblurjitter.png",
            "assets/standard assets/effects/imageeffects/textures/neutral3d16.png",
            "assets/standard assets/effects/imageeffects/textures/noise.png",
            "assets/standard assets/effects/imageeffects/textures/noiseandgrain.png",
            "assets/standard assets/effects/imageeffects/textures/noiseeffectgrain.png",
            "assets/standard assets/effects/imageeffects/textures/noiseeffectscratch.png",
            "assets/standard assets/effects/imageeffects/textures/randomvectors.png",
            "assets/standard assets/effects/imageeffects/textures/sphereshape.psd",
            "assets/standard assets/effects/imageeffects/textures/vignettemask.png",
            "assets/scenes/prefabs/airfield/airfield_1/alphatexture.png",
            "assets/scenes/prefabs/airfield/airfield_1/blendtexture.png",
            "assets/scenes/prefabs/airfield/airfield_1/heighttexture.png",
            "assets/scenes/prefabs/airfield/airfield_1/normaltexture.png",
            "assets/scenes/prefabs/airfield/airfield_1/splattexture0.png",
            "assets/scenes/prefabs/airfield/airfield_1/splattexture1.png",
            "assets/scenes/prefabs/airfield/airfield_1/topologytexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/alphatexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/bandit_town_biometexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/bandit_town_splat_texture_0.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/bandit_town_splat_texture_1.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/biometexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/blendtexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/heighttexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/normaltexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/splattexture0.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/splattexture1.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/topologytexture.png",
            "assets/scenes/prefabs/bandid_town/bandit_town/watertexture.png",
            "assets/scenes/prefabs/canyons/canyon_1/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_1/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_1/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_1/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_1/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_1/topologytexture.png",
            "assets/scenes/prefabs/canyons/canyon_2/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_2/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_2/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_2/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_2/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_2/topologytexture.png",
            "assets/scenes/prefabs/canyons/canyon_3/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_3/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_3/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_3/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_3/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_3/topologytexture.png",
            "assets/scenes/prefabs/canyons/canyon_4/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_4/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_4/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_4/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_4/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_4/topologytexture.png",
            "assets/scenes/prefabs/canyons/canyon_5/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_5/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_5/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_5/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_5/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_5/topologytexture.png",
            "assets/scenes/prefabs/canyons/canyon_6/alphatexture.png",
            "assets/scenes/prefabs/canyons/canyon_6/heighttexture.png",
            "assets/scenes/prefabs/canyons/canyon_6/normaltexture.png",
            "assets/scenes/prefabs/canyons/canyon_6/splattexture0.png",
            "assets/scenes/prefabs/canyons/canyon_6/splattexture1.png",
            "assets/scenes/prefabs/canyons/canyon_6/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_large_hard/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_large_hard/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_large_hard/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_large_hard/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_large_hard/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_large_hard/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_large_hard/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_large_medium/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_large_medium/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_large_medium/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_large_medium/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_large_medium/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_large_medium/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_large_medium/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_large_sewers_hard/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_medium_easy/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_medium_hard/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/biometexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_medium_medium/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_small_easy/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_small_easy/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_small_easy/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_small_easy/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_small_easy/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_small_easy/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_small_easy/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_small_hard/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_small_hard/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_small_hard/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_small_hard/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_small_hard/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_small_hard/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_small_hard/topologytexture.png",
            "assets/scenes/prefabs/cave/cave_small_medium/alphatexture.png",
            "assets/scenes/prefabs/cave/cave_small_medium/blendtexture.png",
            "assets/scenes/prefabs/cave/cave_small_medium/heighttexture.png",
            "assets/scenes/prefabs/cave/cave_small_medium/normaltexture.png",
            "assets/scenes/prefabs/cave/cave_small_medium/splattexture0.png",
            "assets/scenes/prefabs/cave/cave_small_medium/splattexture1.png",
            "assets/scenes/prefabs/cave/cave_small_medium/topologytexture.png",
            "assets/scenes/prefabs/compound/compound/alphatexture.png",
            "assets/scenes/prefabs/compound/compound/blendtexture.png",
            "assets/scenes/prefabs/compound/compound/heighttexture.png",
            "assets/scenes/prefabs/compound/compound/normaltexture.png",
            "assets/scenes/prefabs/compound/compound/splattexture0.png",
            "assets/scenes/prefabs/compound/compound/splattexture1.png",
            "assets/scenes/prefabs/compound/compound/topologytexture.png",
            "assets/scenes/prefabs/excavator/excavator/alphatexture.png",
            "assets/scenes/prefabs/excavator/excavator/biometexture.png",
            "assets/scenes/prefabs/excavator/excavator/blendtexture.png",
            "assets/scenes/prefabs/excavator/excavator/heighttexture.png",
            "assets/scenes/prefabs/excavator/excavator/normaltexture.png",
            "assets/scenes/prefabs/excavator/excavator/splattexture0.png",
            "assets/scenes/prefabs/excavator/excavator/splattexture1.png",
            "assets/scenes/prefabs/excavator/excavator/terrain_clean_biometexture.png",
            "assets/scenes/prefabs/excavator/excavator/terrain_clean_splat_texture_0.png",
            "assets/scenes/prefabs/excavator/excavator/terrain_clean_splat_texture_1.png",
            "assets/scenes/prefabs/excavator/excavator/terrain_clean_terrain_height.png",
            "assets/scenes/prefabs/excavator/excavator/topologytexture.png",
            "assets/scenes/prefabs/excavator/excavator/watertexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/alphatexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/biometexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/blendtexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/heighttexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/normaltexture.png",
            "assets/scenes/prefabs/gas_station/gas_station/splattexture0.png",
            "assets/scenes/prefabs/gas_station/gas_station/splattexture1.png",
            "assets/scenes/prefabs/gas_station/gas_station/topologytexture.png",
            "assets/scenes/prefabs/harbor/harbor_1/alphatexture.png",
            "assets/scenes/prefabs/harbor/harbor_1/blendtexture.png",
            "assets/scenes/prefabs/harbor/harbor_1/heighttexture.png",
            "assets/scenes/prefabs/harbor/harbor_1/normaltexture.png",
            "assets/scenes/prefabs/harbor/harbor_1/splattexture0.png",
            "assets/scenes/prefabs/harbor/harbor_1/splattexture1.png",
            "assets/scenes/prefabs/harbor/harbor_1/topologytexture.png",
            "assets/scenes/prefabs/harbor/harbor_2/alphatexture.png",
            "assets/scenes/prefabs/harbor/harbor_2/blendtexture.png",
            "assets/scenes/prefabs/harbor/harbor_2/heighttexture.png",
            "assets/scenes/prefabs/harbor/harbor_2/normaltexture.png",
            "assets/scenes/prefabs/harbor/harbor_2/splattexture0.png",
            "assets/scenes/prefabs/harbor/harbor_2/splattexture1.png",
            "assets/scenes/prefabs/harbor/harbor_2/topologytexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/alphatexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/biometexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/blendtexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/heighttexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/normaltexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/splattexture0.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/splattexture1.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/topologytexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_1/watertexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/alphatexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/biometexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/blendtexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/heighttexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/normaltexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/splattexture0.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/splattexture1.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_2/topologytexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/alphatexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/biometexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/blendtexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/heighttexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/normaltexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/splattexture0.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/splattexture1.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/topologytexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_3/watertexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/alphatexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/biometexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/blendtexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/heighttexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/normaltexture.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/splattexture0.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/splattexture1.png",
            "assets/scenes/prefabs/ice lakes/ice_lake_4/topologytexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/alphatexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/biometexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/blendtexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/heighttexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/normaltexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/splattexture0.png",
            "assets/scenes/prefabs/junkyard/junkyard/splattexture1.png",
            "assets/scenes/prefabs/junkyard/junkyard/topologytexture.png",
            "assets/scenes/prefabs/junkyard/junkyard/watertexture.png",
            "assets/scenes/prefabs/launch site/launchsite/alphatexture.png",
            "assets/scenes/prefabs/launch site/launchsite/biometexture.png",
            "assets/scenes/prefabs/launch site/launchsite/blendtexture.png",
            "assets/scenes/prefabs/launch site/launchsite/heighttexture.png",
            "assets/scenes/prefabs/launch site/launchsite/normaltexture.png",
            "assets/scenes/prefabs/launch site/launchsite/splattexture0.png",
            "assets/scenes/prefabs/launch site/launchsite/splattexture1.png",
            "assets/scenes/prefabs/launch site/launchsite/topologytexture.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/alphatexture.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/blendtexture.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/heighttexture.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/normaltexture.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/splattexture0.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/splattexture1.png",
            "assets/scenes/prefabs/military tunnels/military_tunnel_1/topologytexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/alphatexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/biometexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/blendtexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/heighttexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/normaltexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/splattexture0.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/splattexture1.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/topologytexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_a/watertexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/alphatexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/biometexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/blendtexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/heighttexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/normaltexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/splattexture0.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/splattexture1.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_b/topologytexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/alphatexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/biometexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/blendtexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/heighttexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/normaltexture.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/splattexture0.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/splattexture1.png",
            "assets/scenes/prefabs/mining quarries/mining_quarry_c/topologytexture.png",
            "assets/scenes/prefabs/mining/warehouse/alphatexture.png",
            "assets/scenes/prefabs/mining/warehouse/blendtexture.png",
            "assets/scenes/prefabs/mining/warehouse/heighttexture.png",
            "assets/scenes/prefabs/mining/warehouse/normaltexture.png",
            "assets/scenes/prefabs/mining/warehouse/splattexture0.png",
            "assets/scenes/prefabs/mining/warehouse/splattexture1.png",
            "assets/scenes/prefabs/mining/warehouse/topologytexture.png",
            "assets/scenes/prefabs/mountain/mountain_1/alphatexture.png",
            "assets/scenes/prefabs/mountain/mountain_1/biometexture.png",
            "assets/scenes/prefabs/mountain/mountain_1/heighttexture.png",
            "assets/scenes/prefabs/mountain/mountain_1/normaltexture.png",
            "assets/scenes/prefabs/mountain/mountain_1/splattexture0.png",
            "assets/scenes/prefabs/mountain/mountain_1/splattexture1.png",
            "assets/scenes/prefabs/mountain/mountain_1/topologytexture.png",
            "assets/scenes/prefabs/mountain/mountain_2/alphatexture.png",
            "assets/scenes/prefabs/mountain/mountain_2/biometexture.png",
            "assets/scenes/prefabs/mountain/mountain_2/heighttexture.png",
            "assets/scenes/prefabs/mountain/mountain_2/normaltexture.png",
            "assets/scenes/prefabs/mountain/mountain_2/splattexture0.png",
            "assets/scenes/prefabs/mountain/mountain_2/splattexture1.png",
            "assets/scenes/prefabs/mountain/mountain_2/topologytexture.png",
            "assets/scenes/prefabs/mountain/mountain_3/alphatexture.png",
            "assets/scenes/prefabs/mountain/mountain_3/biometexture.png",
            "assets/scenes/prefabs/mountain/mountain_3/heighttexture.png",
            "assets/scenes/prefabs/mountain/mountain_3/normaltexture.png",
            "assets/scenes/prefabs/mountain/mountain_3/splattexture0.png",
            "assets/scenes/prefabs/mountain/mountain_3/splattexture1.png",
            "assets/scenes/prefabs/mountain/mountain_3/topologytexture.png",
            "assets/scenes/prefabs/mountain/mountain_4/alphatexture.png",
            "assets/scenes/prefabs/mountain/mountain_4/biometexture.png",
            "assets/scenes/prefabs/mountain/mountain_4/heighttexture.png",
            "assets/scenes/prefabs/mountain/mountain_4/normaltexture.png",
            "assets/scenes/prefabs/mountain/mountain_4/splattexture0.png",
            "assets/scenes/prefabs/mountain/mountain_4/splattexture1.png",
            "assets/scenes/prefabs/mountain/mountain_4/topologytexture.png",
            "assets/scenes/prefabs/mountain/mountain_5/alphatexture.png",
            "assets/scenes/prefabs/mountain/mountain_5/biometexture.png",
            "assets/scenes/prefabs/mountain/mountain_5/heighttexture.png",
            "assets/scenes/prefabs/mountain/mountain_5/normaltexture.png",
            "assets/scenes/prefabs/mountain/mountain_5/splattexture0.png",
            "assets/scenes/prefabs/mountain/mountain_5/splattexture1.png",
            "assets/scenes/prefabs/mountain/mountain_5/topologytexture.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/alphatexture.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/heighttexture.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/normaltexture.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/splattexture0.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/splattexture1.png",
            "assets/scenes/prefabs/overgrowth/overgrowth_dressing/topologytexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/alphatexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/blendtexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/heighttexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/normaltexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/splattexture0.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/splattexture1.png",
            "assets/scenes/prefabs/power substations/power_sub_big_1/topologytexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/alphatexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/biometexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/blendtexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/heighttexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/normaltexture.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/splattexture0.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/splattexture1.png",
            "assets/scenes/prefabs/power substations/power_sub_big_2/topologytexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/alphatexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/biometexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/blendtexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/heighttexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/normaltexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/splattexture0.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/splattexture1.png",
            "assets/scenes/prefabs/power substations/power_sub_small_1/topologytexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/alphatexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/biometexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/blendtexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/heighttexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/normaltexture.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/splattexture0.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/splattexture1.png",
            "assets/scenes/prefabs/power substations/power_sub_small_2/topologytexture.png",
            "assets/scenes/prefabs/powerplant/powerplant/alphatexture.png",
            "assets/scenes/prefabs/powerplant/powerplant/blendtexture.png",
            "assets/scenes/prefabs/powerplant/powerplant/heighttexture.png",
            "assets/scenes/prefabs/powerplant/powerplant/normaltexture.png",
            "assets/scenes/prefabs/powerplant/powerplant/splattexture0.png",
            "assets/scenes/prefabs/powerplant/powerplant/splattexture1.png",
            "assets/scenes/prefabs/powerplant/powerplant/topologytexture.png",
            "assets/scenes/prefabs/production/satellite_dish/alphatexture.png",
            "assets/scenes/prefabs/production/satellite_dish/blendtexture.png",
            "assets/scenes/prefabs/production/satellite_dish/heighttexture.png",
            "assets/scenes/prefabs/production/satellite_dish/normaltexture.png",
            "assets/scenes/prefabs/production/satellite_dish/splattexture0.png",
            "assets/scenes/prefabs/production/satellite_dish/splattexture1.png",
            "assets/scenes/prefabs/production/satellite_dish/topologytexture.png",
            "assets/scenes/prefabs/production/sphere_tank/alphatexture.png",
            "assets/scenes/prefabs/production/sphere_tank/blendtexture.png",
            "assets/scenes/prefabs/production/sphere_tank/heighttexture.png",
            "assets/scenes/prefabs/production/sphere_tank/normaltexture.png",
            "assets/scenes/prefabs/production/sphere_tank/splattexture0.png",
            "assets/scenes/prefabs/production/sphere_tank/splattexture1.png",
            "assets/scenes/prefabs/production/sphere_tank/topologytexture.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/alphatexture.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/blendtexture.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/heighttexture.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/normaltexture.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/splattexture0.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/splattexture1.png",
            "assets/scenes/prefabs/radtown/radtown_small_3/topologytexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/alphatexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/biometexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/blendtexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/heighttexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/normaltexture.png",
            "assets/scenes/prefabs/supermarket/supermarket/splattexture0.png",
            "assets/scenes/prefabs/supermarket/supermarket/splattexture1.png",
            "assets/scenes/prefabs/supermarket/supermarket/topologytexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/alphatexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/blendtexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/heighttexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/normaltexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/splattexture0.tga",
            "assets/scenes/prefabs/swamps/swamp_a/splattexture1.tga",
            "assets/scenes/prefabs/swamps/swamp_a/swamp_a_splats_biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/swamp_a_splats_splat_texture_0.png",
            "assets/scenes/prefabs/swamps/swamp_a/swamp_a_splats_splat_texture_1.png",
            "assets/scenes/prefabs/swamps/swamp_a/topologytexture.png",
            "assets/scenes/prefabs/swamps/swamp_a/watertexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/alphatexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/blendtexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/heighttexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/normaltexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/splattexture0.png",
            "assets/scenes/prefabs/swamps/swamp_b/splattexture1.png",
            "assets/scenes/prefabs/swamps/swamp_b/swamp_b_splats_biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/swamp_b_splats_splat_texture_0.png",
            "assets/scenes/prefabs/swamps/swamp_b/swamp_b_splats_splat_texture_1.png",
            "assets/scenes/prefabs/swamps/swamp_b/topologytexture.png",
            "assets/scenes/prefabs/swamps/swamp_b/watertexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/alphatexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/blendtexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/heighttexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/normaltexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/splattexture0.png",
            "assets/scenes/prefabs/swamps/swamp_c/splattexture1.png",
            "assets/scenes/prefabs/swamps/swamp_c/swamp_c_splats_biometexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/swamp_c_splats_splat_texture_0.png",
            "assets/scenes/prefabs/swamps/swamp_c/swamp_c_splats_splat_texture_1.png",
            "assets/scenes/prefabs/swamps/swamp_c/topologytexture.png",
            "assets/scenes/prefabs/swamps/swamp_c/watertexture.png",
            "assets/scenes/prefabs/trainyard/trainyard/alphatexture.png",
            "assets/scenes/prefabs/trainyard/trainyard/blendtexture.png",
            "assets/scenes/prefabs/trainyard/trainyard/heighttexture.png",
            "assets/scenes/prefabs/trainyard/trainyard/normaltexture.png",
            "assets/scenes/prefabs/trainyard/trainyard/splattexture0.png",
            "assets/scenes/prefabs/trainyard/trainyard/splattexture1.png",
            "assets/scenes/prefabs/trainyard/trainyard/topologytexture.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/alphatexture.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/blendtexture.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/heighttexture.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/normaltexture.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/splattexture0.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/splattexture1.png",
            "assets/scenes/prefabs/water treatment plant/water_treatment_plant/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/alphatexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/biometexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/blendtexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/heighttexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/normaltexture.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/splattexture0.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/splattexture1.png",
            "assets/scenes/prefabs/water wells/water_well_a/water_well_a/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/alphatexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/biometexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/blendtexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/heighttexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/normaltexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/splattexture0.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/splattexture1.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_b/water_well_b/watertexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/alphatexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/biometexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/blendtexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/heighttexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/normaltexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/splattexture0.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/splattexture1.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_c/water_well_c/watertexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/alphatexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/biometexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/blendtexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/heighttexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/normaltexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/splattexture0.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/splattexture1.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_d/water_well_d/watertexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/alphatexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/biometexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/blendtexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/heighttexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/normaltexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/splattexture0.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/splattexture1.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/topologytexture.png",
            "assets/scenes/prefabs/water wells/water_well_e/water_well_e/watertexture.png",
            "assets/scenes/release/craggyisland/alphatexture.png",
            "assets/scenes/release/craggyisland/biometexture.png",
            "assets/scenes/release/craggyisland/distancetexture.png",
            "assets/scenes/release/craggyisland/heighttexture.png",
            "assets/scenes/release/craggyisland/normaltexture.png",
            "assets/scenes/release/craggyisland/splattexture0.png",
            "assets/scenes/release/craggyisland/splattexture1.png",
            "assets/scenes/release/craggyisland/topologytexture.png",
            "assets/scenes/release/craggyisland/watertexture.png",
            "assets/scenes/release/hapisislandterrain/_normal.png",
            "assets/scenes/release/hapisislandterrain/_normal_cleaned.png",
            "assets/scenes/release/hapisislandterrain/alphatexture.png",
            "assets/scenes/release/hapisislandterrain/biometexture.png",
            "assets/scenes/release/hapisislandterrain/heighttexture.png",
            "assets/scenes/release/hapisislandterrain/legacyterrain_normal.png",
            "assets/scenes/release/hapisislandterrain/normaltexture.png",
            "assets/scenes/release/hapisislandterrain/splattexture0.png",
            "assets/scenes/release/hapisislandterrain/splattexture1.png",
            "assets/scenes/release/hapisislandterrain/topologytexture.png",
            "assets/scenes/release/hapisislandterrain/watertexture.png",
            "assets/scenes/release/savasisland/alphatexture.png",
            "assets/scenes/release/savasisland/biometexture.png",
            "assets/scenes/release/savasisland/heighttexture.png",
            "assets/scenes/release/savasisland/normaltexture.png",
            "assets/scenes/release/savasisland/splattexture0.png",
            "assets/scenes/release/savasisland/splattexture1.png",
            "assets/scenes/release/savasisland/topologytexture.png",
            "assets/scenes/release/savasisland/watertexture.png",
            "assets/scenes/test/bradleylaunchtest/alphatexture.png",
            "assets/scenes/test/bradleylaunchtest/biometexture.png",
            "assets/scenes/test/bradleylaunchtest/heighttexture.png",
            "assets/scenes/test/bradleylaunchtest/normaltexture.png",
            "assets/scenes/test/bradleylaunchtest/splattexture0.png",
            "assets/scenes/test/bradleylaunchtest/splattexture1.png",
            "assets/scenes/test/bradleylaunchtest/topologytexture.png",
            "assets/scenes/test/bradleylaunchtest/watertexture.png",
            "assets/scenes/test/playgroundterrain/alphatexture.png",
            "assets/scenes/test/playgroundterrain/biometexture.png",
            "assets/scenes/test/playgroundterrain/heighttexture.png",
            "assets/scenes/test/playgroundterrain/normaltexture.png",
            "assets/scenes/test/playgroundterrain/splattexture0.png",
            "assets/scenes/test/playgroundterrain/splattexture1.png",
            "assets/scenes/test/playgroundterrain/topologytexture.png",
            "assets/scenes/test/playgroundterrain/watertexture.png",
            "assets/scenes/test/stealthbox/alphatexture.png",
            "assets/scenes/test/stealthbox/biometexture.png",
            "assets/scenes/test/stealthbox/heighttexture.png",
            "assets/scenes/test/stealthbox/normaltexture.png",
            "assets/scenes/test/stealthbox/splattexture0.png",
            "assets/scenes/test/stealthbox/splattexture1.png",
            "assets/scenes/test/stealthbox/topologytexture.png",
            "assets/scenes/test/testlevelterrain/alphatexture.png",
            "assets/scenes/test/testlevelterrain/biometexture.png",
            "assets/scenes/test/testlevelterrain/heighttexture.png",
            "assets/scenes/test/testlevelterrain/normaltexture.png",
            "assets/scenes/test/testlevelterrain/splattexture0.png",
            "assets/scenes/test/testlevelterrain/splattexture1.png",
            "assets/scenes/test/testlevelterrain/topologytexture.png",
            "assets/scenes/test/testlevelterrain/watertexture.png",
            "assets/scenes/test/waterlevelterrain/alphatexture.png",
            "assets/scenes/test/waterlevelterrain/biometexture.png",
            "assets/scenes/test/waterlevelterrain/heighttexture.png",
            "assets/scenes/test/waterlevelterrain/normaltexture.png",
            "assets/scenes/test/waterlevelterrain/splattexture0.png",
            "assets/scenes/test/waterlevelterrain/splattexture1.png",
            "assets/scenes/test/waterlevelterrain/topologytexture.png",
            "assets/scenes/test/waterlevelterrain/watertexture.png",
        };
        #endregion

        #region Materials
        List<string> Materials = new List<string>
        {
            "assets/content/image effects/darkclamp/darknessclamp.mat",
            "assets/content/image effects/linear fog/linearfog.mat",
            "assets/content/image effects/scope/defaultscope.mat",
            "assets/content/materials/cable.mat",
            "assets/content/materials/collider_mesh.mat",
            "assets/content/materials/collider_mesh_convex.mat",
            "assets/content/materials/collider_trigger.mat",
            "assets/content/materials/deployable/deployable_acceptable.mat",
            "assets/content/materials/deployable/deployable_denied.mat",
            "assets/content/materials/displacement/foliagedisplace_circle.mat",
            "assets/content/materials/displacement/foliagedisplace_square.mat",
            "assets/content/materials/gradient.mat",
            "assets/content/materials/ground.mat",
            "assets/content/materials/guide_bad.mat",
            "assets/content/materials/guide_good.mat",
            "assets/content/materials/guide_highlight.mat",
            "assets/content/materials/guide_neutral.mat",
            "assets/content/materials/itemmaterial.mat",
            "assets/content/materials/male.material.mat",
            "assets/content/shaders/gl/gl opaque.mat",
            "assets/content/shaders/gl/gl transparent.mat",
            "assets/content/ui/binocular_overlay.mat",
            "assets/content/ui/goggle_overlay.mat",
            "assets/content/ui/helmet_slit_overlay.mat",
            "assets/content/ui/ingame/compass/compassstrip.mat",
            "assets/content/ui/namefontmaterial.mat",
            "assets/content/ui/playerpreviewglow.mat",
            "assets/content/ui/playerpreviewremovesegments.mat",
            "assets/content/ui/playerpreviewsegments.mat",
            "assets/content/ui/scope_1.mat",
            "assets/content/ui/scope_2.mat",
            "assets/content/ui/ui.maskclear.mat",
            "assets/content/ui/uibackgroundblur-ingamemenu.mat",
            "assets/content/ui/uibackgroundblur-notice.mat",
            "assets/content/ui/uibackgroundblur.mat",
            "assets/icons/fogofwar.mat",
            "assets/icons/greyout.mat",
            "assets/icons/iconmaterial.mat",
        };
        #endregion

        #region Fonts

        public List<string> Fonts = new List<string>
        {
            "assets/content/ui/fonts/droidsansmono.ttf",
            "assets/content/ui/fonts/permanentmarker.ttf",
            "assets/content/ui/fonts/robotocondensed-bold.ttf",
            "assets/content/ui/fonts/robotocondensed-regular.ttf",
        };

        #endregion

        #region HexList

        public List<string> HexList = new List<string>
        {
            "#00FFFF",
            "#000000",
            "#0000FF",
            "#FF00FF",
            "#808080",
            "#008000",
            "#00FF00",
            "#800000",
            "#000080",
            "#808000",
            "#800080",
            "#FF0000",
            "#C0C0C0",
            "#008080",
            "#FFFFFF",
            "#FFFF00",
        };

        #endregion

        #region EffectList
        public HashSet<string> EffectRustList = new HashSet<string>
        {
            "assets/bundled/prefabs/fx/animals/flies/flies_large.prefab",
            "assets/bundled/prefabs/fx/animals/flies/flies_looping.prefab",
            "assets/bundled/prefabs/fx/animals/flies/flies_medium.prefab",
            "assets/bundled/prefabs/fx/animals/flies/flies_small.prefab",
            "assets/bundled/prefabs/fx/beartrap/arm.prefab",
            "assets/bundled/prefabs/fx/beartrap/fire.prefab",
            "assets/bundled/prefabs/fx/bucket_drop_debris.prefab",
            "assets/bundled/prefabs/fx/build/frame_place.prefab",
            "assets/bundled/prefabs/fx/build/promote_metal.prefab",
            "assets/bundled/prefabs/fx/build/promote_stone.prefab",
            "assets/bundled/prefabs/fx/build/promote_toptier.prefab",
            "assets/bundled/prefabs/fx/build/promote_wood.prefab",
            "assets/bundled/prefabs/fx/build/repair.prefab",
            "assets/bundled/prefabs/fx/build/repair_failed.prefab",
            "assets/bundled/prefabs/fx/build/repair_full.prefab",
            "assets/bundled/prefabs/fx/building/fort_metal_gib.prefab",
            "assets/bundled/prefabs/fx/building/metal_sheet_gib.prefab",
            "assets/bundled/prefabs/fx/building/stone_gib.prefab",
            "assets/bundled/prefabs/fx/building/thatch_gib.prefab",
            "assets/bundled/prefabs/fx/building/wood_gib.prefab",
            "assets/bundled/prefabs/fx/collect/collect fuel barrel.prefab",
            "assets/bundled/prefabs/fx/collect/collect mushroom.prefab",
            "assets/bundled/prefabs/fx/collect/collect plant.prefab",
            "assets/bundled/prefabs/fx/collect/collect stone.prefab",
            "assets/bundled/prefabs/fx/collect/collect stump.prefab",
            "assets/bundled/prefabs/fx/decals/blood/decal_blood_splatter_01.prefab",
            "assets/bundled/prefabs/fx/decals/blood/decal_blood_splatter_02.prefab",
            "assets/bundled/prefabs/fx/decals/blood/decal_blood_splatter_03.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/dirt/decal_blunt_dirt_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/forest/decal_blunt_forest_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/glass/decal_blunt_glass.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/grass/decal_blunt_grass_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/metalore/decal_blunt_metalore_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/path/decal_blunt_path_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/rock/decal_blunt_rock_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/sand/decal_blunt_sand_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/snow/decal_blunt_snow_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/tundra/decal_blunt_tundra_01.prefab",
            "assets/bundled/prefabs/fx/decals/blunt/wood/wood 1.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/concrete/decal_bullet_concrete_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/concrete/decal_bullet_concrete_02.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/concrete/decal_bullet_concrete_03.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/concrete/decal_bullet_concrete_04.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/dirt/decal_bullet_dirt_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/flesh/decal_bullet_flesh_entry_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/flesh/decal_bullet_flesh_exit_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/forest/decal_bullet_forest_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/glass/decal_bullet_glass.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/glass/decal_bullet_glass2.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/glass/decal_bullet_glass3.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/grass/decal_bullet_grass_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/metal/decal_bullet_metal_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/metal/decal_bullet_metal_02.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/metal/decal_bullet_metal_03.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/metalore/decal_bullet_metalore_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/path/decal_bullet_road_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/rock/decal_bullet_rock.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/sand/decal_bullet_sand_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/sandbag/decal_bullet_sandbag_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/snow/decal_bullet_snow_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/tundra/decal_bullet_tundra.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/wood/decal_bullet_wood_01.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/wood/decal_bullet_wood_02.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/wood/decal_bullet_wood_03.prefab",
            "assets/bundled/prefabs/fx/decals/bullet/wood/decal_bullet_wood_04.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/dirt/decal_footprint_human_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/dirt/decal_footprint_human_bare_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/forest/decal_footprint_human_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/forest/decal_footprint_human_bare_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/grass/decal_footprint_human_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/grass/decal_footprint_human_bare_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/sand/decal_footprint_human_sand_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/sand/decal_footprint_human_sand_bare_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/snow/decal_footprint_human_bare_snow_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/snow/decal_footprint_human_snow_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/tundra/decal_footprint_human_bare_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/bare/tundra/decal_footprint_human_bare_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/dirt/decal_footprint_human_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/dirt/decal_footprint_human_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/forest/decal_footprint_human_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/forest/decal_footprint_human_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/grass/decal_footprint_human_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/grass/decal_footprint_human_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/sand/decal_footprint_human_sand_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/sand/decal_footprint_human_sand_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/snow/decal_footprint_human_snow_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/snow/decal_footprint_human_snow_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/tundra/decal_footprint_human_boot_left.prefab",
            "assets/bundled/prefabs/fx/decals/footstep/boot/tundra/decal_footprint_human_boot_right.prefab",
            "assets/bundled/prefabs/fx/decals/slash/dirt/decal_slash_dirt_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/forest/decal_slash_forest_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/glass/decal_slash_glass.prefab",
            "assets/bundled/prefabs/fx/decals/slash/grass/decal_slash_grass_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/metalore/decal_slash_metalore_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/path/decal_slash_path_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/rock/decal_slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/sand/decal_slash_sand_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/snow/decal_slash_snow_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/tundra/decal_slash_tundra_01.prefab",
            "assets/bundled/prefabs/fx/decals/slash/wood/wood 1.prefab",
            "assets/bundled/prefabs/fx/decals/stab/concrete/decal_stab_concrete_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/concrete/decal_stab_concrete_02.prefab",
            "assets/bundled/prefabs/fx/decals/stab/concrete/decal_stab_concrete_03.prefab",
            "assets/bundled/prefabs/fx/decals/stab/concrete/decal_stab_concrete_04.prefab",
            "assets/bundled/prefabs/fx/decals/stab/dirt/decal_stab_dirt_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/flesh/decal_stab_flesh_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/forest/decal_stab_forest_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/glass/decal_stab_glass.prefab",
            "assets/bundled/prefabs/fx/decals/stab/grass/decal_stab_grass_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/metalore/decal_stab_metalore_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/path/decal_stab_path_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/rock/decal_stab_rock_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/sand/decal_stab_sand_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/snow/decal_stab_snow_01.prefab",
            "assets/bundled/prefabs/fx/decals/stab/tundra/decal_stab_snow_01.prefab",
            "assets/bundled/prefabs/fx/dig_effect.prefab",
            "assets/bundled/prefabs/fx/displacement/player/grass/player_displacement.prefab",
            "assets/bundled/prefabs/fx/door/barricade_spawn.prefab",
            "assets/bundled/prefabs/fx/entities/loot_barrel/gib.prefab",
            "assets/bundled/prefabs/fx/entities/loot_barrel/impact.prefab",
            "assets/bundled/prefabs/fx/entities/pumpkin/gib.prefab",
            "assets/bundled/prefabs/fx/entities/tree/tree-impact.prefab",
            "assets/bundled/prefabs/fx/explosions/explosion_01.prefab",
            "assets/bundled/prefabs/fx/explosions/explosion_02.prefab",
            "assets/bundled/prefabs/fx/explosions/explosion_03.prefab",
            "assets/bundled/prefabs/fx/explosions/explosion_core.prefab",
            "assets/bundled/prefabs/fx/explosions/explosion_core_flash.prefab",
            "assets/bundled/prefabs/fx/explosions/water_bomb.prefab",
            "assets/bundled/prefabs/fx/fire/fire_v2.prefab",
            "assets/bundled/prefabs/fx/fire/fire_v3.prefab",
            "assets/bundled/prefabs/fx/fire/oilbarrel-fire.prefab",
            "assets/bundled/prefabs/fx/fire_explosion.prefab",
            "assets/bundled/prefabs/fx/firebomb.prefab",
            "assets/bundled/prefabs/fx/gas_explosion_small.prefab",
            "assets/bundled/prefabs/fx/gestures/cameratakescreenshot.prefab",
            "assets/bundled/prefabs/fx/gestures/cut_meat.prefab",
            "assets/bundled/prefabs/fx/gestures/drink_generic.prefab",
            "assets/bundled/prefabs/fx/gestures/drink_vomit.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_candybar.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_celery.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_chewy_meat.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_chips.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_generic.prefab",
            "assets/bundled/prefabs/fx/gestures/eat_soft.prefab",
            "assets/bundled/prefabs/fx/gestures/lick.prefab",
            "assets/bundled/prefabs/fx/gestures/take_pills.prefab",
            "assets/bundled/prefabs/fx/headshot.prefab",
            "assets/bundled/prefabs/fx/headshot_2d.prefab",
            "assets/bundled/prefabs/fx/hit_notify.prefab",
            "assets/bundled/prefabs/fx/impacts/additive/explosion.prefab",
            "assets/bundled/prefabs/fx/impacts/additive/fire.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/cloth/cloth1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/clothflesh/clothflesh1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/concrete/concrete1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/dirt/dirt1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/flesh/fleshbloodimpact.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/generic/generic1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/glass/glass1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/grass/grass1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/gravel/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/metal/metal1.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/metalore/slash_metalore_01.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/rock/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/sand/sand.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/snow/snow.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/stones/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/water/water.prefab",
            "assets/bundled/prefabs/fx/impacts/blunt/wood/wood1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/cloth/cloth1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/clothflesh/clothflesh1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/concrete/concrete1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/dirt/dirt1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/flesh/fleshbloodimpact.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/forest/forest1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/generic/generic1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/generic/generic2.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/generic/generic3.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/generic/generic4.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/glass/glass1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/grass/grass1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/gravel/bullet_impact_rock.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/metal/metal1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/metalore/bullet_impact_metalore.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/path/path1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/rock/bullet_impact_rock.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/sand/sand1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/sandbag/sand_bag_impact.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/snow/snow1.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/stones/bullet_impact_rock.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/tundra/bullet_impact_tundra.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/water/water.prefab",
            "assets/bundled/prefabs/fx/impacts/bullet/wood/wood1.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/cloth/footstep-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/concrete/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/dirt/footstep-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/forest/footstep-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/generic/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/grass/footstep-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/gravel/footstep-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/metal/footstep-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/metalore/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/rock/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/sand/footstep-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/snow/human_footstep_snow.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/stones/footstep-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/barefoot/wood/footstep-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/cloth/footstep-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/concrete/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/dirt/footstep-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/forest/footstep-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/generic/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/grass/footstep-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/gravel/footstep-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/metal/footstep-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/metalore/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/rock/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/sand/footstep-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/snow/human_footstep_snow.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/stones/footstep-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/boots/wood/footstep-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/cloth/footstep-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/concrete/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/dirt/footstep-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/forest/footstep-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/generic/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/grass/footstep-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/gravel/footstep-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/metal/footstep-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/metalore/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/rock/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/sand/footstep-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/snow/human_footstep_snow.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/stones/footstep-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/burlap/wood/footstep-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/crouch/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/cloth/footstep-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/concrete/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/dirt/footstep-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/forest/footstep-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/generic/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/grass/footstep-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/gravel/footstep-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/metal/footstep-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/metalore/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/rock/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/sand/footstep-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/snow/human_footstep_snow.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/stones/footstep-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/hide/wood/footstep-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/cloth/footstep-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/concrete/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/dirt/footstep-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/forest/footstep-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/generic/footstep-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/grass/footstep-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/gravel/footstep-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/metal/footstep-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/metalore/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/rock/footstep-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/sand/footstep-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/snow/human_footstep_snow.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/stones/footstep-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/water/boot_footstep_water.prefab",
            "assets/bundled/prefabs/fx/impacts/footstep/rubberboots/wood/footstep-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/gravel/jump-land-gravel.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/stones/jump-land-stones.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/barefoot/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/boots/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/burlap/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/hide/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-land/rubberboots/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/barefoot/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/boots/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/burlap/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/hide/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/cloth/jump-land-cloth.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/concrete/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/dirt/jump-land-dirt.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/forest/jump-land-forest.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/generic/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/grass/jump-land-grass.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/gravel/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/metal/jump-land-metal.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/metalore/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/rock/jump-land-rock.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/sand/jump-land-sand.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/snow/jump-land-snow.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/stones/jump-land-concrete.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/water/jump_land_water.prefab",
            "assets/bundled/prefabs/fx/impacts/jump-start/rubberboots/wood/jump-land-wood.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-meat-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-meat-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-meat-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-can-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-can-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-can-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-hollow-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-hollow-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-hollow-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-medium-rattley-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-medium-rattley-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-medium-rattley-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-thin-hollow-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-thin-hollow-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-metal-thin-hollow-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-stone-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-stone-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-stone-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-tool-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-tool-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-tool-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-small-hard.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-small-med.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-small-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/phys-impact-wood-soft.prefab",
            "assets/bundled/prefabs/fx/impacts/physics/water-enter-exit.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/blood12slash_1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/blood12slash_2.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/blood13slash.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/blood14slash.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/cloth/cloth1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/clothflesh/clothflesh1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/concrete/slash_concrete_01.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/dirt/dirt1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/flesh/fleshbloodimpact.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/generic/generic1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/glass/glass1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/grass/grass1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/grass/grass2.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/gravel/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/metal/metal1.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/metal/metal2.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/metalore/slash_metalore_01.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/rock/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/sand/sand.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/snow/snow.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/stones/slash_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/water/water.prefab",
            "assets/bundled/prefabs/fx/impacts/slash/wood/wood1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/cloth/cloth1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/clothflesh/clothflesh1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/concrete/concrete1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/dirt/dirt1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/flesh/fleshbloodimpact.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/generic/generic1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/glass/glass1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/grass/grass1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/gravel/stab_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/metal/metal1.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/metalore/slash_metalore_01.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/rock/stab_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/sand/sand.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/snow/snow.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/stones/stab_rock_01.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/water/water.prefab",
            "assets/bundled/prefabs/fx/impacts/stab/wood/wood1.prefab",
            "assets/bundled/prefabs/fx/invite_notice.prefab",
            "assets/bundled/prefabs/fx/item_break.prefab",
            "assets/bundled/prefabs/fx/missing.prefab",
            "assets/bundled/prefabs/fx/notice/item.select.fx.prefab",
            "assets/bundled/prefabs/fx/notice/loot.copy.fx.prefab",
            "assets/bundled/prefabs/fx/notice/loot.drag.dropsuccess.fx.prefab",
            "assets/bundled/prefabs/fx/notice/loot.drag.grab.fx.prefab",
            "assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab",
            "assets/bundled/prefabs/fx/notice/loot.start.fx.prefab",
            "assets/bundled/prefabs/fx/notice/stack.ui.fx.prefab",
            "assets/bundled/prefabs/fx/notice/stack.world.fx.prefab",
            "assets/bundled/prefabs/fx/oil_geyser.prefab",
            "assets/bundled/prefabs/fx/oiljack/pump_down.prefab",
            "assets/bundled/prefabs/fx/oiljack/pump_up.prefab",
            "assets/bundled/prefabs/fx/ore_break.prefab",
            "assets/bundled/prefabs/fx/player/beartrap_blood.prefab",
            "assets/bundled/prefabs/fx/player/beartrap_clothing_rustle.prefab",
            "assets/bundled/prefabs/fx/player/beartrap_scream.prefab",
            "assets/bundled/prefabs/fx/player/bloodspurt_wounded_head.prefab",
            "assets/bundled/prefabs/fx/player/bloodspurt_wounded_leftarm.prefab",
            "assets/bundled/prefabs/fx/player/bloodspurt_wounded_pelvis.prefab",
            "assets/bundled/prefabs/fx/player/bloodspurt_wounded_stomache.prefab",
            "assets/bundled/prefabs/fx/player/debugeffect.prefab",
            "assets/bundled/prefabs/fx/player/drown.prefab",
            "assets/bundled/prefabs/fx/player/fall-damage.prefab",
            "assets/bundled/prefabs/fx/player/flinch.prefab",
            "assets/bundled/prefabs/fx/player/frosty_breath.prefab",
            "assets/bundled/prefabs/fx/player/groundfall.prefab",
            "assets/bundled/prefabs/fx/player/gutshot_scream.prefab",
            "assets/bundled/prefabs/fx/player/howl.prefab",
            "assets/bundled/prefabs/fx/player/onfire.prefab",
            "assets/bundled/prefabs/fx/player/swing_weapon.prefab",
            "assets/bundled/prefabs/fx/repairbench/itemrepair.prefab",
            "assets/bundled/prefabs/fx/ricochet/ricochet1.prefab",
            "assets/bundled/prefabs/fx/ricochet/ricochet2.prefab",
            "assets/bundled/prefabs/fx/ricochet/ricochet3.prefab",
            "assets/bundled/prefabs/fx/ricochet/ricochet4.prefab",
            "assets/bundled/prefabs/fx/screen_jump.prefab",
            "assets/bundled/prefabs/fx/screen_land.prefab",
            "assets/bundled/prefabs/fx/smoke/generator_smoke.prefab",
            "assets/bundled/prefabs/fx/smoke_cover_full.prefab",
            "assets/bundled/prefabs/fx/smoke_signal.prefab",
            "assets/bundled/prefabs/fx/smoke_signal_full.prefab",
            "assets/bundled/prefabs/fx/survey_explosion.prefab",
            "assets/bundled/prefabs/fx/takedamage_generic.prefab",
            "assets/bundled/prefabs/fx/takedamage_hit.prefab",
            "assets/bundled/prefabs/fx/water/groundsplash.prefab",
            "assets/bundled/prefabs/fx/water/midair_splash.prefab",
            "assets/bundled/prefabs/fx/water/playerjumpinwater.prefab",
            "assets/bundled/prefabs/fx/weapons/landmine/landmine_explosion.prefab",
            "assets/bundled/prefabs/fx/weapons/landmine/landmine_trigger.prefab",
            "assets/bundled/prefabs/fx/weapons/rifle_jingle1.prefab",
            "assets/bundled/prefabs/fx/weapons/rifle_jingle2.prefab",
            "assets/bundled/prefabs/fx/weapons/survey_charge/survey_charge_stick.prefab",
            "assets/bundled/prefabs/fx/well/pump_down.prefab",
            "assets/bundled/prefabs/fx/well/pump_up.prefab",
            "assets/content/effects/candle.prefab",
            "assets/content/effects/electrical/fx-fusebox-sparks.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer blue v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer golden xl v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer green v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer orange v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer red v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks boomer violet v2.prefab",
            "assets/content/effects/fireworks/pfx fireworks roman candle.prefab",
            "assets/content/effects/fireworks/pfx fireworks volcano red.prefab",
            "assets/content/effects/fireworks/pfx fireworks volcano violet.prefab",
            "assets/content/effects/fireworks/pfx fireworks volcano.prefab",
            "assets/content/effects/fireworks/pfx roman candle projectile blue.prefab",
            "assets/content/effects/fireworks/pfx roman candle projectile green.prefab",
            "assets/content/effects/fireworks/pfx roman candle projectile red.prefab",
            "assets/content/effects/fireworks/pfx roman candle projectile violet.prefab",
            "assets/content/effects/materials/fog/fog_wall.prefab",
            "assets/content/effects/materials/fog/height_fog.prefab",
            "assets/content/effects/mountainfume/mountainfog.prefab",
            "assets/content/effects/mountainfume/mountainfumes.prefab",
            "assets/content/effects/muzzleflashes/muzzleflash_lightex.prefab",
            "assets/content/effects/muzzleflashes/muzzleflash_lightex_large.prefab",
            "assets/content/effects/muzzleflashes/muzzleflash_lightex_tiny.prefab",
            "assets/content/effects/muzzleflashes/other/eoka_attack.prefab",
            "assets/content/effects/muzzleflashes/other/eoka_flint_spark.prefab",
            "assets/content/effects/muzzleflashes/pistol/muzzle_flash_nailgun.prefab",
            "assets/content/effects/muzzleflashes/pistol/muzzle_flash_pistol.prefab",
            "assets/content/effects/muzzleflashes/pistol/muzzle_flash_pistol_braked.prefab",
            "assets/content/effects/muzzleflashes/pistol/muzzle_flash_pistol_large.prefab",
            "assets/content/effects/muzzleflashes/pistol/muzzle_flash_pistol_silenced.prefab",
            "assets/content/effects/muzzleflashes/pistol/shell_eject_pistol.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_big.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_braked.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_braked_l96.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_braked_lr300.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_braked_semi.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_l96.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_quad.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_quad_m39.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_silenced.prefab",
            "assets/content/effects/muzzleflashes/rifle/muzzle_flash_rifle_silenced_highpowered.prefab",
            "assets/content/effects/muzzleflashes/rifle/shell_eject_rifle.prefab",
            "assets/content/effects/muzzleflashes/rifle/shell_eject_rifle_bolt.prefab",
            "assets/content/effects/muzzleflashes/rifle/shell_eject_rifle_m249.prefab",
            "assets/content/effects/muzzleflashes/rifle/shell_eject_rifle_m39.prefab",
            "assets/content/effects/muzzleflashes/shotgun/muzzle_flash_shotgun_braked.prefab",
            "assets/content/effects/muzzleflashes/shotgun/muzzle_flash_shotgun_narrow.prefab",
            "assets/content/effects/muzzleflashes/shotgun/muzzle_flash_shotgun_silenced.prefab",
            "assets/content/effects/muzzleflashes/shotgun/muzzle_flash_shotgun_wide.prefab",
            "assets/content/effects/muzzleflashes/shotgun/shell_eject_shotgun.prefab",
            "assets/content/effects/muzzleflashes/smg/muzzle_flash_smg.prefab",
            "assets/content/effects/muzzleflashes/smg/muzzle_flash_smg_boosted.prefab",
            "assets/content/effects/muzzleflashes/smg/muzzle_flash_smg_braked.prefab",
            "assets/content/effects/muzzleflashes/smg/muzzle_flash_smg_silenced.prefab",
            "assets/content/effects/muzzleflashes/smg/muzzle_flash_smg_twin.prefab",
            "assets/content/effects/muzzleflashes/smg/shell_eject_smg.prefab",
            "assets/content/effects/objects/decal_box.prefab",
            "assets/content/effects/water/bullet_trails_underwater_01.prefab",
            "assets/content/effects/wip/frosty_breath_fx.prefab",
            "assets/content/effects/wip/muzzle_smoke.prefab",
            "assets/content/nature/dunes/pfx sand.prefab",
            "assets/content/nature/ores/highyield_fx.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_bonus_effect.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_fall.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_fall_impact.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_impact.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_impact_mask.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_impact_small.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_marking.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_marking_nospherecast.prefab",
            "assets/content/nature/treesprefabs/trees/effects/tree_marking_spawn.prefab",
            "assets/content/props/fog machine/effects/cascade_smoke.prefab",
            "assets/content/props/fog machine/effects/emission.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/bandit swamp fog fx.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/clone_vat_fx.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/giant excavator dig fx.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/giant excavator fx.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/lighthousefx-ph.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/oil rig fx.prefab",
            "assets/content/props/light_fixtures/v2/radtown work prefabs/small oil rig fx.prefab",
            "assets/content/structures/excavator/prefabs/effects/enginerumble.prefab",
            "assets/content/structures/excavator/prefabs/effects/rockvibration.prefab",
            "assets/content/vehicles/boats/effects/small-boat-push-land.prefab",
            "assets/content/vehicles/boats/effects/small-boat-push-water.prefab",
            "assets/content/vehicles/boats/effects/splash.prefab",
            "assets/content/vehicles/boats/effects/splashloop.prefab",
            "assets/content/vehicles/minicopter/debris_effect.prefab",
            "assets/content/vehicles/scrap heli carrier/effects/debris_effect.prefab",
            "assets/content/vehicles/scrap heli carrier/effects/wheel-impact.prefab",
            "assets/content/weapons/_gestures/effects/drink.prefab",
            "assets/content/weapons/_gestures/effects/eat_1hand_celery.prefab",
            "assets/content/weapons/_gestures/effects/eat_2hand_chewymeat.prefab",
            "assets/prefabs/ammo/40mmgrenade/effects/40mm_he_explosion.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-metal-close-end.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-metal-close-start.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-metal-open-start.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-wood-close-end.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-wood-close-start.prefab",
            "assets/prefabs/building/door.double.hinged/effects/door-double-wood-open-start.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-close-end.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-close-start.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-deploy.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-impact.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-knock.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-open-end.prefab",
            "assets/prefabs/building/door.hinged/effects/door-metal-open-start.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-close-end.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-close-start.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-deploy.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-impact.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-knock.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-open-end.prefab",
            "assets/prefabs/building/door.hinged/effects/door-wood-open-start.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-metal-close-end.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-metal-close-start.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-metal-open-end.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-metal-open-start.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-wood-close-end.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-wood-close-start.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-wood-open-end.prefab",
            "assets/prefabs/building/door.hinged/effects/gate-external-wood-open-start.prefab",
            "assets/prefabs/building/floor.grill/effects/floor-grill-deploy.prefab",
            "assets/prefabs/building/floor.ladder.hatch/effects/door-ladder-hatch-close-end.prefab",
            "assets/prefabs/building/floor.ladder.hatch/effects/door-ladder-hatch-close-start.prefab",
            "assets/prefabs/building/floor.ladder.hatch/effects/door-ladder-hatch-deploy.prefab",
            "assets/prefabs/building/floor.ladder.hatch/effects/door-ladder-hatch-open-start.prefab",
            "assets/prefabs/building/ladder.wall.wood/effects/wood-ladder-deploy.prefab",
            "assets/prefabs/building/wall.external.high.stone/effects/wall-external-stone-deploy.prefab",
            "assets/prefabs/building/wall.external.high.wood/effects/wall-external-wood-deploy.prefab",
            "assets/prefabs/building/wall.frame.cell/effects/cell-wall-door-deploy.prefab",
            "assets/prefabs/building/wall.frame.cell/effects/door-cell-metal-close-end.prefab",
            "assets/prefabs/building/wall.frame.cell/effects/door-cell-metal-close-start.prefab",
            "assets/prefabs/building/wall.frame.cell/effects/door-cell-metal-open-start.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/chain-link-fence-deploy.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/chain-link-impact.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/door-fence-metal-close-end.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/door-fence-metal-close-start.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/door-fence-metal-open-end.prefab",
            "assets/prefabs/building/wall.frame.fence/effects/door-fence-metal-open-start.prefab",
            "assets/prefabs/building/wall.frame.garagedoor/effects/garagedoor.movement.begin.prefab",
            "assets/prefabs/building/wall.frame.garagedoor/effects/garagedoor.movement.finish.close.prefab",
            "assets/prefabs/building/wall.frame.garagedoor/effects/garagedoor.movement.finish.open.prefab",
            "assets/prefabs/building/wall.frame.netting/effects/netting-deploy.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/door-small-wood-close-end.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/door-small-wood-close-start.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/door-small-wood-open-end.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/door-small-wood-open-start.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/metal_transaction_complete.prefab",
            "assets/prefabs/building/wall.frame.shopfront/effects/shop-front-deploy.prefab",
            "assets/prefabs/building/wall.window.bars/effects/window-bars-metal-deploy.prefab",
            "assets/prefabs/building/wall.window.bars/effects/window-bars-wood-deploy.prefab",
            "assets/prefabs/building/wall.window.embrasure/effects/window-embrasure-deploy.prefab",
            "assets/prefabs/building/wall.window.reinforcedglass/effects/reinforced-glass-window-deploy.prefab",
            "assets/prefabs/building/wall.window.shutter/effects/shutter-wood-deploy.prefab",
            "assets/prefabs/building/wall.window.shutter/effects/shutters-wood-close-end.prefab",
            "assets/prefabs/building/wall.window.shutter/effects/shutters-wood-close-start.prefab",
            "assets/prefabs/building/wall.window.shutter/effects/shutters-wood-open-end.prefab",
            "assets/prefabs/building/wall.window.shutter/effects/shutters-wood-open-start.prefab",
            "assets/prefabs/clothes/diving.tank/effects/exhale_bubbles.prefab",
            "assets/prefabs/clothes/diving.tank/effects/scuba_exhale.prefab",
            "assets/prefabs/clothes/diving.tank/effects/scuba_inhale.prefab",
            "assets/prefabs/clothes/diving.tank/effects/tank_refill.prefab",
            "assets/prefabs/deployable/barricades/effects/barricade-concrete-deploy.prefab",
            "assets/prefabs/deployable/barricades/effects/barricade-metal-deploy.prefab",
            "assets/prefabs/deployable/barricades/effects/barricade-sandbags-deploy.prefab",
            "assets/prefabs/deployable/barricades/effects/barricade-stone-deploy.prefab",
            "assets/prefabs/deployable/barricades/effects/barricade-wood-deploy.prefab",
            "assets/prefabs/deployable/barricades/effects/damage.prefab",
            "assets/prefabs/deployable/bbq/effects/barbeque-deploy.prefab",
            "assets/prefabs/deployable/bear trap/effects/bear-trap-deploy.prefab",
            "assets/prefabs/deployable/bed/effects/bed-deploy.prefab",
            "assets/prefabs/deployable/campfire/effects/campfire-deploy.prefab",
            "assets/prefabs/deployable/ceiling light/effects/ceiling-light-deploy.prefab",
            "assets/prefabs/deployable/chair/effects/chair-deploy.prefab",
            "assets/prefabs/deployable/chinooklockedcrate/effects/landing.prefab",
            "assets/prefabs/deployable/dropbox/effects/dropbox-deploy.prefab",
            "assets/prefabs/deployable/dropbox/effects/submit_items.prefab",
            "assets/prefabs/deployable/floor spikes/effects/floor-spikes-deploy.prefab",
            "assets/prefabs/deployable/fridge/effects/fridge-deploy.prefab",
            "assets/prefabs/deployable/furnace.large/effects/furnace-large-deploy.prefab",
            "assets/prefabs/deployable/furnace/effects/furnace-deploy.prefab",
            "assets/prefabs/deployable/lantern/effects/lantern-deploy.prefab",
            "assets/prefabs/deployable/large wood storage/effects/large-wood-box-deploy.prefab",
            "assets/prefabs/deployable/liquidbarrel/effects/liquid-barrel-deploy.prefab",
            "assets/prefabs/deployable/liquidbarrel/effects/splashloop.prefab",
            "assets/prefabs/deployable/liquidbarrel/effects/taploop.prefab",
            "assets/prefabs/deployable/locker/effects/locker-deploy.prefab",
            "assets/prefabs/deployable/mailbox/effects/mailbox-deploy.prefab",
            "assets/prefabs/deployable/oil refinery/effects/oil-refinery-deploy.prefab",
            "assets/prefabs/deployable/planters/effects/planter-deploy.prefab",
            "assets/prefabs/deployable/playerioents/detectors/hbhfsensor/effects/detect_down.prefab",
            "assets/prefabs/deployable/playerioents/detectors/hbhfsensor/effects/detect_up.prefab",
            "assets/prefabs/deployable/quarry/effects/mining-quarry-deploy.prefab",
            "assets/prefabs/deployable/reactive target/effects/bullseye.prefab",
            "assets/prefabs/deployable/reactive target/effects/reactive-target-deploy.prefab",
            "assets/prefabs/deployable/reactive target/effects/snd_hit.prefab",
            "assets/prefabs/deployable/reactive target/effects/snd_knockdown.prefab",
            "assets/prefabs/deployable/reactive target/effects/snd_reset.prefab",
            "assets/prefabs/deployable/reactive target/effects/tire_smokepuff.prefab",
            "assets/prefabs/deployable/recycler/effects/start.prefab",
            "assets/prefabs/deployable/recycler/effects/stop.prefab",
            "assets/prefabs/deployable/repair bench/effects/repair-bench-deploy.prefab",
            "assets/prefabs/deployable/repair bench/effects/skinchange_spraypaint.prefab",
            "assets/prefabs/deployable/research table/effects/research-fail.prefab",
            "assets/prefabs/deployable/research table/effects/research-start.prefab",
            "assets/prefabs/deployable/research table/effects/research-success.prefab",
            "assets/prefabs/deployable/research table/effects/research-table-deploy.prefab",
            "assets/prefabs/deployable/rug/effects/rug-deploy.prefab",
            "assets/prefabs/deployable/search light/effects/search-light-deploy.prefab",
            "assets/prefabs/deployable/shelves/effects/shelves-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/large-banner-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/metal-sign-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/picture-frame-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/sign-post-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/town-sign-deploy.prefab",
            "assets/prefabs/deployable/signs/effects/wood-sign-deploy.prefab",
            "assets/prefabs/deployable/single shot trap/effects/shotgun-trap-deploy.prefab",
            "assets/prefabs/deployable/sleeping bag/effects/sleeping-bag-deploy.prefab",
            "assets/prefabs/deployable/small stash/effects/small-stash-deploy.prefab",
            "assets/prefabs/deployable/spinner_wheel/effects/spinner-wheel-deploy.prefab",
            "assets/prefabs/deployable/survivalfishtrap/effects/fish-trap-deploy.prefab",
            "assets/prefabs/deployable/survivalfishtrap/effects/fish_caught.prefab",
            "assets/prefabs/deployable/table/effects/table-deploy.prefab",
            "assets/prefabs/deployable/tier 1 workbench/effects/experiment-start.prefab",
            "assets/prefabs/deployable/tier 1 workbench/effects/workbench-tier-1-deploy.prefab",
            "assets/prefabs/deployable/tier 2 workbench/effects/workbench-tier-2-deploy.prefab",
            "assets/prefabs/deployable/tier 3 workbench/effects/workbench-tier-3-deploy.prefab",
            "assets/prefabs/deployable/tool cupboard/effects/tool-cupboard-deploy.prefab",
            "assets/prefabs/deployable/tuna can wall lamp/effects/tuna-can-lamp-deploy.prefab",
            "assets/prefabs/deployable/vendingmachine/effects/vending-machine-deploy.prefab",
            "assets/prefabs/deployable/vendingmachine/effects/vending-machine-purchase-human.prefab",
            "assets/prefabs/deployable/water catcher/effects/water-catcher-deploy.prefab",
            "assets/prefabs/deployable/water catcher/effects/water-catcher-large-deploy.prefab",
            "assets/prefabs/deployable/waterpurifier/effects/water-purifier-deploy.prefab",
            "assets/prefabs/deployable/woodenbox/effects/wooden-box-deploy.prefab",
            "assets/prefabs/effects/auroras/auroras_skychild.prefab",
            "assets/prefabs/effects/foliage/pfx_leaves.prefab",
            "assets/prefabs/effects/foliage/pfx_leaves_dead.prefab",
            "assets/prefabs/effects/foliage/pfx_leaves_reddish.prefab",
            "assets/prefabs/effects/foliage/pfx_leaves_yellowish.prefab",
            "assets/prefabs/effects/local camera particles/camfx_dust.prefab",
            "assets/prefabs/effects/local camera particles/camfx_rain.prefab",
            "assets/prefabs/effects/local camera particles/camfx_sand.prefab",
            "assets/prefabs/effects/local camera particles/camfx_snow.prefab",
            "assets/prefabs/effects/weather/pfx_duststorm.prefab",
            "assets/prefabs/effects/weather/pfx_sandstorm.prefab",
            "assets/prefabs/effects/weather/sandstorm.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-cork-squeak.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-deploy.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-fill-container.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-fill-world.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-remove-cap.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-slosh-fast.prefab",
            "assets/prefabs/food/bota bag/effects/bota-bag-slosh.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-deploy.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-fill-container.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-fill-world.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-remove-cap.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-slosh-fast.prefab",
            "assets/prefabs/food/small water bottle/effects/water-bottle-slosh.prefab",
            "assets/prefabs/food/water jug/effects/water-jug-deploy.prefab",
            "assets/prefabs/food/water jug/effects/water-jug-fill-container.prefab",
            "assets/prefabs/food/water jug/effects/water-jug-fill-world.prefab",
            "assets/prefabs/food/water jug/effects/water-jug-open-cap.prefab",
            "assets/prefabs/food/water jug/effects/water-jug-throw-water.prefab",
            "assets/prefabs/food/water jug/effects/waterjug_splash.prefab",
            "assets/prefabs/instruments/bass/effects/guitardeploy.prefab",
            "assets/prefabs/instruments/drumkit/effects/drumkit-deploy.prefab",
            "assets/prefabs/instruments/guitar/effects/guitardeploy.prefab",
            "assets/prefabs/instruments/jerrycanguitar/effects/guitardeploy.prefab",
            "assets/prefabs/instruments/piano/effects/piano-deploy.prefab",
            "assets/prefabs/instruments/xylophone/effects/xylophone-deploy.prefab",
            "assets/prefabs/locks/keypad/effects/lock-code-deploy.prefab",
            "assets/prefabs/locks/keypad/effects/lock.code.denied.prefab",
            "assets/prefabs/locks/keypad/effects/lock.code.lock.prefab",
            "assets/prefabs/locks/keypad/effects/lock.code.shock.prefab",
            "assets/prefabs/locks/keypad/effects/lock.code.unlock.prefab",
            "assets/prefabs/locks/keypad/effects/lock.code.updated.prefab",
            "assets/prefabs/misc/blueprintbase/effects/blueprint_read.prefab",
            "assets/prefabs/misc/burlap sack/effects/phys-impact-hard.prefab",
            "assets/prefabs/misc/burlap sack/effects/phys-impact-med.prefab",
            "assets/prefabs/misc/burlap sack/effects/phys-impact-soft.prefab",
            "assets/prefabs/misc/chinesenewyear/dragondoorknocker/effects/door_knock_fx.prefab",
            "assets/prefabs/misc/chinesenewyear/throwablefirecrackers/effects/throw.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/add_egg.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/aim.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/aim_cancel.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/deploy.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/eggexplosion.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/grab_egg_start.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/place.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/place_grab_egg.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/raise.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/settle.prefab",
            "assets/prefabs/misc/easter/easter basket/effects/throw.prefab",
            "assets/prefabs/misc/easter/painted eggs/effects/bronze_open.prefab",
            "assets/prefabs/misc/easter/painted eggs/effects/egg_upgrade.prefab",
            "assets/prefabs/misc/easter/painted eggs/effects/eggpickup.prefab",
            "assets/prefabs/misc/easter/painted eggs/effects/gold_open.prefab",
            "assets/prefabs/misc/easter/painted eggs/effects/silver_open.prefab",
            "assets/prefabs/misc/halloween/lootbag/effects/bronze_open.prefab",
            "assets/prefabs/misc/halloween/lootbag/effects/gold_open.prefab",
            "assets/prefabs/misc/halloween/lootbag/effects/loot_bag_upgrade.prefab",
            "assets/prefabs/misc/halloween/lootbag/effects/silver_open.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/add_egg.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/aim.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/aim_cancel.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/deploy.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/eggexplosion.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/grab_egg_start.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/place.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/place_grab_egg.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/raise.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/settle.prefab",
            "assets/prefabs/misc/halloween/pumpkin_bucket/effects/throw.prefab",
            "assets/prefabs/misc/halloween/skull_door_knocker/effects/door_knock_fx.prefab",
            "assets/prefabs/misc/halloween/skull_door_knocker/effects/skull_door_knock_fx.prefab",
            "assets/prefabs/misc/junkpile/effects/despawn.prefab",
            "assets/prefabs/misc/orebonus/effects/bonus_fail.prefab",
            "assets/prefabs/misc/orebonus/effects/bonus_finish.prefab",
            "assets/prefabs/misc/orebonus/effects/bonus_hit.prefab",
            "assets/prefabs/misc/orebonus/effects/hotspot_death.prefab",
            "assets/prefabs/misc/orebonus/effects/ore_finish.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/attack-1.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/attack-2.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/deploy.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/hit.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/tap.prefab",
            "assets/prefabs/misc/xmas/candy cane club/effects/throw.prefab",
            "assets/prefabs/misc/xmas/presents/effects/unwrap.prefab",
            "assets/prefabs/misc/xmas/presents/effects/wrap.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/attack.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/deploy.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/impact.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/strike.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/strike_screenshake.prefab",
            "assets/prefabs/misc/xmas/snowball/effects/throw.prefab",
            "assets/prefabs/npc/autoturret/effects/autoturret-deploy.prefab",
            "assets/prefabs/npc/autoturret/effects/offline.prefab",
            "assets/prefabs/npc/autoturret/effects/online.prefab",
            "assets/prefabs/npc/autoturret/effects/targetacquired.prefab",
            "assets/prefabs/npc/autoturret/effects/targetlost.prefab",
            "assets/prefabs/npc/ch47/effects/crashfire.prefab",
            "assets/prefabs/npc/ch47/effects/metaldebris-2.prefab",
            "assets/prefabs/npc/ch47/effects/metaldebris-3.prefab",
            "assets/prefabs/npc/ch47/effects/metaldebris.prefab",
            "assets/prefabs/npc/ch47/effects/watergroundeffect.prefab",
            "assets/prefabs/npc/flame turret/effects/flameturret-deploy.prefab",
            "assets/prefabs/npc/m2bradley/effects/bradley_explosion.prefab",
            "assets/prefabs/npc/m2bradley/effects/coaxmgmuzzle.prefab",
            "assets/prefabs/npc/m2bradley/effects/maincannonattack.prefab",
            "assets/prefabs/npc/m2bradley/effects/maincannonshell_explosion.prefab",
            "assets/prefabs/npc/m2bradley/effects/sidegun_muzzleflash.prefab",
            "assets/prefabs/npc/m2bradley/effects/tread_dirt.prefab",
            "assets/prefabs/npc/m2bradley/effects/tread_smoke.prefab",
            "assets/prefabs/npc/patrol helicopter/damage_effect_debris.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/gun_fire.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/gun_fire_small.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/heli_explosion.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/rocket_airburst_explosion.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/rocket_airburst_groundeffect.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/rocket_explosion.prefab",
            "assets/prefabs/npc/patrol helicopter/effects/rocket_fire.prefab",
            "assets/prefabs/npc/patrol helicopter/groundeffect.prefab",
            "assets/prefabs/npc/sam_site_turret/effects/rocket_sam_explosion.prefab",
            "assets/prefabs/npc/sam_site_turret/effects/sam_damage.prefab",
            "assets/prefabs/npc/sam_site_turret/effects/tube_launch.prefab",
            "assets/prefabs/plants/plantharvest.effect.prefab",
            "assets/prefabs/plants/plantseed.effect.prefab",
            "assets/prefabs/tools/binoculars/effects/deploy.prefab",
            "assets/prefabs/tools/c4/effects/c4_explosion.prefab",
            "assets/prefabs/tools/c4/effects/c4_stick.prefab",
            "assets/prefabs/tools/c4/effects/deploy.prefab",
            "assets/prefabs/tools/detonator/effects/attack.prefab",
            "assets/prefabs/tools/detonator/effects/deploy.prefab",
            "assets/prefabs/tools/detonator/effects/unpress.prefab",
            "assets/prefabs/tools/flareold/effects/deploy.prefab",
            "assets/prefabs/tools/flareold/effects/ignite.prefab",
            "assets/prefabs/tools/flareold/effects/popcap.prefab",
            "assets/prefabs/tools/flareold/effects/pullpin.prefab",
            "assets/prefabs/tools/flareold/effects/throw.prefab",
            "assets/prefabs/tools/flashlight/effects/attack.prefab",
            "assets/prefabs/tools/flashlight/effects/attack_hit.prefab",
            "assets/prefabs/tools/flashlight/effects/deploy.prefab",
            "assets/prefabs/tools/flashlight/effects/turn_on.prefab",
            "assets/prefabs/tools/jackhammer/effects/deploy.prefab",
            "assets/prefabs/tools/jackhammer/effects/strike_screenshake.prefab",
            "assets/prefabs/tools/keycard/effects/attack.prefab",
            "assets/prefabs/tools/keycard/effects/deploy.prefab",
            "assets/prefabs/tools/keycard/effects/swipe.prefab",
            "assets/prefabs/tools/medical syringe/effects/inject_friend.prefab",
            "assets/prefabs/tools/medical syringe/effects/inject_self.prefab",
            "assets/prefabs/tools/medical syringe/effects/pop_button_cap.prefab",
            "assets/prefabs/tools/medical syringe/effects/pop_cap.prefab",
            "assets/prefabs/tools/pager/effects/beep.prefab",
            "assets/prefabs/tools/pager/effects/vibrate.prefab",
            "assets/prefabs/tools/smoke grenade/effects/ignite.prefab",
            "assets/prefabs/tools/smoke grenade/effects/smokegrenade.prefab",
            "assets/prefabs/tools/smoke grenade/effects/smokegrenade_small.prefab",
            "assets/prefabs/tools/surveycharge/effects/deploy.prefab",
            "assets/prefabs/tools/wire/effects/plugeffect.prefab",
            "assets/prefabs/weapon mods/flashlight/lighteffect_1p.prefab",
            "assets/prefabs/weapon mods/flashlight/lighteffect_3p.prefab",
            "assets/prefabs/weapon mods/lasersight/lasereffect_1p.prefab",
            "assets/prefabs/weapon mods/lasersight/lasereffect_3p.prefab",
            "assets/prefabs/weapon mods/mod_attach.fx.prefab",
            "assets/prefabs/weapon mods/silencers/effects/silencedshot_default.prefab",
            "assets/prefabs/weapon mods/silencers/effects/silencer_attach.fx.prefab",
            "assets/prefabs/weapons/ak47u/effects/attack.prefab",
            "assets/prefabs/weapons/ak47u/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/ak47u/effects/attack_shake.prefab",
            "assets/prefabs/weapons/ak47u/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/ak47u/effects/bolt_back.prefab",
            "assets/prefabs/weapons/ak47u/effects/bolt_forward.prefab",
            "assets/prefabs/weapons/ak47u/effects/deploy.prefab",
            "assets/prefabs/weapons/ak47u/effects/dryfire.prefab",
            "assets/prefabs/weapons/ak47u/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/ak47u/effects/grab_magazine.prefab",
            "assets/prefabs/weapons/ak47u/effects/insert_magazine.prefab",
            "assets/prefabs/weapons/ak47u/effects/phys-impact-hard.prefab",
            "assets/prefabs/weapons/ak47u/effects/phys-impact-med.prefab",
            "assets/prefabs/weapons/ak47u/effects/phys-impact-soft.prefab",
            "assets/prefabs/weapons/ak47u/effects/reload_boltaction.prefab",
            "assets/prefabs/weapons/ak47u/effects/reload_start.prefab",
            "assets/prefabs/weapons/ak47u/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/ak47u/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/arms/effects/drop_item.prefab",
            "assets/prefabs/weapons/arms/effects/hook-1.prefab",
            "assets/prefabs/weapons/arms/effects/hook-2.prefab",
            "assets/prefabs/weapons/arms/effects/hook_hit-1.prefab",
            "assets/prefabs/weapons/arms/effects/hook_hit-2.prefab",
            "assets/prefabs/weapons/arms/effects/jab-1.prefab",
            "assets/prefabs/weapons/arms/effects/jab-2.prefab",
            "assets/prefabs/weapons/arms/effects/jab-3.prefab",
            "assets/prefabs/weapons/arms/effects/jab_hit-1.prefab",
            "assets/prefabs/weapons/arms/effects/jab_hit-2.prefab",
            "assets/prefabs/weapons/arms/effects/pickup_item.prefab",
            "assets/prefabs/weapons/arms/effects/shove.prefab",
            "assets/prefabs/weapons/arms/effects/uppercut.prefab",
            "assets/prefabs/weapons/arms/effects/uppercut_hit-1.prefab",
            "assets/prefabs/weapons/bandage/effects/deploy.prefab",
            "assets/prefabs/weapons/bandage/effects/wraparm.prefab",
            "assets/prefabs/weapons/bandage/effects/wraphead.prefab",
            "assets/prefabs/weapons/bandage/effects/wrapother.prefab",
            "assets/prefabs/weapons/beancan grenade/effects/beancan_grenade_explosion.prefab",
            "assets/prefabs/weapons/beancan grenade/effects/bounce.prefab",
            "assets/prefabs/weapons/beancan grenade/effects/deploy.prefab",
            "assets/prefabs/weapons/beancan grenade/effects/light_fuse.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/attack.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/attack_shake.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/boltback.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/boltforward.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/deploy.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/dryfire.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/holster.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/insertbullet.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/pfx_bolt_open_smoke.prefab",
            "assets/prefabs/weapons/bolt rifle/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/bone club/effects/attack-1.prefab",
            "assets/prefabs/weapons/bone club/effects/attack-2.prefab",
            "assets/prefabs/weapons/bone club/effects/deploy.prefab",
            "assets/prefabs/weapons/bone club/effects/hit.prefab",
            "assets/prefabs/weapons/bone club/effects/tap.prefab",
            "assets/prefabs/weapons/bone club/effects/throw.prefab",
            "assets/prefabs/weapons/bone knife/effects/attack-1.prefab",
            "assets/prefabs/weapons/bone knife/effects/attack-2.prefab",
            "assets/prefabs/weapons/bone knife/effects/deploy.prefab",
            "assets/prefabs/weapons/bone knife/effects/hit.prefab",
            "assets/prefabs/weapons/bone knife/effects/holster.prefab",
            "assets/prefabs/weapons/bone knife/effects/strike-soft.prefab",
            "assets/prefabs/weapons/bone knife/effects/strike.prefab",
            "assets/prefabs/weapons/bone knife/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/bone knife/effects/throw.prefab",
            "assets/prefabs/weapons/bow/effects/attack.prefab",
            "assets/prefabs/weapons/bow/effects/deploy.prefab",
            "assets/prefabs/weapons/bow/effects/draw_arrow.prefab",
            "assets/prefabs/weapons/bow/effects/draw_cancel.prefab",
            "assets/prefabs/weapons/bow/effects/fire.prefab",
            "assets/prefabs/weapons/cake/effects/attack.prefab",
            "assets/prefabs/weapons/cake/effects/deploy.prefab",
            "assets/prefabs/weapons/cake/effects/strike.prefab",
            "assets/prefabs/weapons/cake/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/cake/effects/throw.prefab",
            "assets/prefabs/weapons/chainsaw/effects/chainlink_hit_blood.prefab",
            "assets/prefabs/weapons/chainsaw/effects/chainlink_hit_wood.prefab",
            "assets/prefabs/weapons/chainsaw/effects/chainlink_smoke.prefab",
            "assets/prefabs/weapons/chainsaw/effects/deploy.prefab",
            "assets/prefabs/weapons/chainsaw/effects/fill-gas.prefab",
            "assets/prefabs/weapons/chainsaw/effects/ignition.prefab",
            "assets/prefabs/weapons/chainsaw/effects/unscrew-cap.prefab",
            "assets/prefabs/weapons/cleaver big/effects/attack-1.prefab",
            "assets/prefabs/weapons/cleaver big/effects/attack-2.prefab",
            "assets/prefabs/weapons/cleaver big/effects/attack-3.prefab",
            "assets/prefabs/weapons/cleaver big/effects/deploy.prefab",
            "assets/prefabs/weapons/cleaver big/effects/hit-soft.prefab",
            "assets/prefabs/weapons/cleaver big/effects/hit.prefab",
            "assets/prefabs/weapons/cleaver big/effects/throw.prefab",
            "assets/prefabs/weapons/compound bow/effects/attack.prefab",
            "assets/prefabs/weapons/compound bow/effects/deploy.prefab",
            "assets/prefabs/weapons/compound bow/effects/draw_cancel.prefab",
            "assets/prefabs/weapons/compound bow/effects/initial_pullback.prefab",
            "assets/prefabs/weapons/compound bow/effects/place_arrow.prefab",
            "assets/prefabs/weapons/compound bow/effects/reload_start.prefab",
            "assets/prefabs/weapons/crossbow/effects/attack.prefab",
            "assets/prefabs/weapons/crossbow/effects/deploy.prefab",
            "assets/prefabs/weapons/crossbow/effects/dryfire.prefab",
            "assets/prefabs/weapons/crossbow/effects/reload.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/attack.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/attack_shake.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/bolt_back.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/bolt_shut.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/close_barrel.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/deploy.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/dryfire.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/dump_shells.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/insert_shells.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/open_barrel.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/pfx_bolt_shut_sparks.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/pfx_open_barrel_smoke.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/w_eject_shotgun_shell_1.prefab",
            "assets/prefabs/weapons/doubleshotgun/effects/w_eject_shotgun_shell_2.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/attack.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/attack_shake.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/deploy.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/flint_spark.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/holster.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/insert_bullet.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/push_barrel.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/rock_scrape-1.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/rock_scrape-2.prefab",
            "assets/prefabs/weapons/eoka pistol/effects/rock_scrape-3.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/bounce.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/deploy.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/f1grenade_explosion.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/holster.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/pullpin.prefab",
            "assets/prefabs/weapons/f1 grenade/effects/throw.prefab",
            "assets/prefabs/weapons/flamethrower/effects/deploy.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flame_explosion 1.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flame_explosion.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flame_explosion_dist 1.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flame_explosion_dist.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flametest.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flamethrowerflamefx-v2-1stperson.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flamethrowerflamefx-v2-1stperson2.prefab",
            "assets/prefabs/weapons/flamethrower/effects/flamethrowerflamefx-v2.prefab",
            "assets/prefabs/weapons/flamethrower/effects/gas_release.prefab",
            "assets/prefabs/weapons/flamethrower/effects/gascan_in.prefab",
            "assets/prefabs/weapons/flamethrower/effects/gascan_out.prefab",
            "assets/prefabs/weapons/flamethrower/effects/toggle_flame.prefab",
            "assets/prefabs/weapons/flamethrower/effects/valve_open.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/attack.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/deploy.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/reload_end.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/reload_single_insert.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/reload_single_spin.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/reload_single_start.prefab",
            "assets/prefabs/weapons/grenade launcher/effects/reload_start.prefab",
            "assets/prefabs/weapons/hacksaw/effects/attack-1.prefab",
            "assets/prefabs/weapons/hacksaw/effects/attack-2.prefab",
            "assets/prefabs/weapons/hacksaw/effects/hit.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/attack-1.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/attack-2.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/deploy.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/hit.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/holster.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/strike-soft.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/strike.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/halloween/butcher knife/effects/throw.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/2hand_deploy.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/attack.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/deploy.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/holster.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/pull_out.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/strike_stone-muted.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/strike_stone-soft.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/strike_stone.prefab",
            "assets/prefabs/weapons/halloween/pitchfork/effects/throw.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/attack_shake.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/deploy.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/strike-muted.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/strike-soft.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/strike.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/swing.prefab",
            "assets/prefabs/weapons/halloween/sickle/effects/throw.prefab",
            "assets/prefabs/weapons/hammer/effects/attack.prefab",
            "assets/prefabs/weapons/hammer/effects/deploy.prefab",
            "assets/prefabs/weapons/hammer/effects/holster.prefab",
            "assets/prefabs/weapons/hammer/effects/strike.prefab",
            "assets/prefabs/weapons/hammer/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/hammer/effects/throw.prefab",
            "assets/prefabs/weapons/hatchet/effects/attack_shake.prefab",
            "assets/prefabs/weapons/hatchet/effects/deploy.prefab",
            "assets/prefabs/weapons/hatchet/effects/strike-muted.prefab",
            "assets/prefabs/weapons/hatchet/effects/strike-soft.prefab",
            "assets/prefabs/weapons/hatchet/effects/strike.prefab",
            "assets/prefabs/weapons/hatchet/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/hatchet/effects/swing.prefab",
            "assets/prefabs/weapons/hatchet/effects/throw.prefab",
            "assets/prefabs/weapons/knife/effects/attack-1.prefab",
            "assets/prefabs/weapons/knife/effects/attack-2.prefab",
            "assets/prefabs/weapons/knife/effects/deploy.prefab",
            "assets/prefabs/weapons/knife/effects/hit.prefab",
            "assets/prefabs/weapons/knife/effects/holster.prefab",
            "assets/prefabs/weapons/knife/effects/strike-soft.prefab",
            "assets/prefabs/weapons/knife/effects/strike.prefab",
            "assets/prefabs/weapons/knife/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/knife/effects/throw.prefab",
            "assets/prefabs/weapons/l96/effects/attack.prefab",
            "assets/prefabs/weapons/l96/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/l96/effects/attack_shake.prefab",
            "assets/prefabs/weapons/l96/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/l96/effects/dryfire.prefab",
            "assets/prefabs/weapons/l96/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/l96/effects/l96_bolt_action.prefab",
            "assets/prefabs/weapons/l96/effects/l96_bolt_finish.prefab",
            "assets/prefabs/weapons/l96/effects/l96_bolt_grab.prefab",
            "assets/prefabs/weapons/l96/effects/l96_bolt_start.prefab",
            "assets/prefabs/weapons/l96/effects/l96_deploy.prefab",
            "assets/prefabs/weapons/l96/effects/l96_insert_mag.prefab",
            "assets/prefabs/weapons/l96/effects/l96_reload_finish.prefab",
            "assets/prefabs/weapons/l96/effects/l96_reload_start.prefab",
            "assets/prefabs/weapons/l96/effects/l96_remove_mag.prefab",
            "assets/prefabs/weapons/lr300/effects/attack.prefab",
            "assets/prefabs/weapons/lr300/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/lr300/effects/attack_shake.prefab",
            "assets/prefabs/weapons/lr300/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/lr300/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/lr300/effects/bolt_catch.prefab",
            "assets/prefabs/weapons/lr300/effects/buttstock_extend.prefab",
            "assets/prefabs/weapons/lr300/effects/buttstock_swingback.prefab",
            "assets/prefabs/weapons/lr300/effects/buttstock_unlock.prefab",
            "assets/prefabs/weapons/lr300/effects/charging_handle_back.prefab",
            "assets/prefabs/weapons/lr300/effects/charging_handle_shut.prefab",
            "assets/prefabs/weapons/lr300/effects/clip_in.prefab",
            "assets/prefabs/weapons/lr300/effects/clip_out.prefab",
            "assets/prefabs/weapons/lr300/effects/deploy.prefab",
            "assets/prefabs/weapons/lr300/effects/dryfire.prefab",
            "assets/prefabs/weapons/lr300/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/lr300/effects/grab_magazine.prefab",
            "assets/prefabs/weapons/lr300/effects/pfx_clip_out_smoke.prefab",
            "assets/prefabs/weapons/lr300/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/lr300/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/m249/effects/ammobox_insert.prefab",
            "assets/prefabs/weapons/m249/effects/ammobox_remove.prefab",
            "assets/prefabs/weapons/m249/effects/attack.prefab",
            "assets/prefabs/weapons/m249/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/m249/effects/attack_shake.prefab",
            "assets/prefabs/weapons/m249/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/m249/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/m249/effects/bolt_back.prefab",
            "assets/prefabs/weapons/m249/effects/bolt_forward.prefab",
            "assets/prefabs/weapons/m249/effects/chainbelt.prefab",
            "assets/prefabs/weapons/m249/effects/deploy.prefab",
            "assets/prefabs/weapons/m249/effects/dryfire.prefab",
            "assets/prefabs/weapons/m249/effects/eject_beltlink.prefab",
            "assets/prefabs/weapons/m249/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/m249/effects/place_bullets.prefab",
            "assets/prefabs/weapons/m249/effects/reload_smoke.prefab",
            "assets/prefabs/weapons/m249/effects/topcover_close.prefab",
            "assets/prefabs/weapons/m249/effects/topcover_open.prefab",
            "assets/prefabs/weapons/m249/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/m249/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/m39 emr/effects/attack.prefab",
            "assets/prefabs/weapons/m39 emr/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/m39 emr/effects/attack_shake.prefab",
            "assets/prefabs/weapons/m39 emr/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/m39 emr/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/m39 emr/effects/bolt_action.prefab",
            "assets/prefabs/weapons/m39 emr/effects/clip_in.prefab",
            "assets/prefabs/weapons/m39 emr/effects/clip_out.prefab",
            "assets/prefabs/weapons/m39 emr/effects/clip_slap.prefab",
            "assets/prefabs/weapons/m39 emr/effects/deploy.prefab",
            "assets/prefabs/weapons/m39 emr/effects/deploy_grab_forearm.prefab",
            "assets/prefabs/weapons/m39 emr/effects/dryfire.prefab",
            "assets/prefabs/weapons/m39 emr/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/m39 emr/effects/reload_start.prefab",
            "assets/prefabs/weapons/m39 emr/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/m39 emr/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/m92/effects/attack.prefab",
            "assets/prefabs/weapons/m92/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/m92/effects/attack_shake.prefab",
            "assets/prefabs/weapons/m92/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/m92/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/m92/effects/clipin.prefab",
            "assets/prefabs/weapons/m92/effects/clipout.prefab",
            "assets/prefabs/weapons/m92/effects/deploy.prefab",
            "assets/prefabs/weapons/m92/effects/dryfire.prefab",
            "assets/prefabs/weapons/m92/effects/eject_pistol_shell.prefab",
            "assets/prefabs/weapons/m92/effects/pfx_ejectshell_smoke.prefab",
            "assets/prefabs/weapons/m92/effects/safety.prefab",
            "assets/prefabs/weapons/m92/effects/slideopen.prefab",
            "assets/prefabs/weapons/m92/effects/slideshut.prefab",
            "assets/prefabs/weapons/m92/effects/w_drop_mag.prefab",
            "assets/prefabs/weapons/m92/effects/w_eject_pistol_shell.prefab",
            "assets/prefabs/weapons/mace/effects/attack-1.prefab",
            "assets/prefabs/weapons/mace/effects/attack-2.prefab",
            "assets/prefabs/weapons/mace/effects/deploy.prefab",
            "assets/prefabs/weapons/mace/effects/hit.prefab",
            "assets/prefabs/weapons/mace/effects/throw.prefab",
            "assets/prefabs/weapons/machete/effects/attack-1.prefab",
            "assets/prefabs/weapons/machete/effects/attack-2.prefab",
            "assets/prefabs/weapons/machete/effects/attack-3.prefab",
            "assets/prefabs/weapons/machete/effects/deploy.prefab",
            "assets/prefabs/weapons/machete/effects/hit-muted.prefab",
            "assets/prefabs/weapons/machete/effects/hit-soft.prefab",
            "assets/prefabs/weapons/machete/effects/hit.prefab",
            "assets/prefabs/weapons/machete/effects/swing_thirdperson.prefab",
            "assets/prefabs/weapons/machete/effects/throw.prefab",
            "assets/prefabs/weapons/mp5/effects/attack.prefab",
            "assets/prefabs/weapons/mp5/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/mp5/effects/attack_shake.prefab",
            "assets/prefabs/weapons/mp5/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/mp5/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/mp5/effects/bolt_back.prefab",
            "assets/prefabs/weapons/mp5/effects/bolt_shut.prefab",
            "assets/prefabs/weapons/mp5/effects/bolt_slap.prefab",
            "assets/prefabs/weapons/mp5/effects/clip_in.prefab",
            "assets/prefabs/weapons/mp5/effects/clip_out.prefab",
            "assets/prefabs/weapons/mp5/effects/deploy.prefab",
            "assets/prefabs/weapons/mp5/effects/dryfire.prefab",
            "assets/prefabs/weapons/mp5/effects/eject_shell.prefab",
            "assets/prefabs/weapons/mp5/effects/fire_select.prefab",
            "assets/prefabs/weapons/mp5/effects/muzzleflash_flamelet.prefab",
            "assets/prefabs/weapons/mp5/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/mp5/effects/w_eject_pistol_shell.prefab",
            "assets/prefabs/weapons/nailgun/effects/attack.prefab",
            "assets/prefabs/weapons/nailgun/effects/attack_shake.prefab",
            "assets/prefabs/weapons/nailgun/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/nailgun/effects/clip_in.prefab",
            "assets/prefabs/weapons/nailgun/effects/clip_out.prefab",
            "assets/prefabs/weapons/nailgun/effects/deploy.prefab",
            "assets/prefabs/weapons/pickaxe/effects/attack.prefab",
            "assets/prefabs/weapons/pickaxe/effects/deploy.prefab",
            "assets/prefabs/weapons/pickaxe/effects/strike-muted.prefab",
            "assets/prefabs/weapons/pickaxe/effects/strike-soft.prefab",
            "assets/prefabs/weapons/pickaxe/effects/strike.prefab",
            "assets/prefabs/weapons/pickaxe/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/pickaxe/effects/throw.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/attack.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/attack_shake.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/close_pipe.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/deploy.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/dryfire.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/holster.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/insert_shell.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/pfx_open_barrel_smoke.prefab",
            "assets/prefabs/weapons/pipe shotgun/effects/reload_start.prefab",
            "assets/prefabs/weapons/python/effects/attack.prefab",
            "assets/prefabs/weapons/python/effects/attack_shake.prefab",
            "assets/prefabs/weapons/python/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/python/effects/close_cylinder.prefab",
            "assets/prefabs/weapons/python/effects/deploy.prefab",
            "assets/prefabs/weapons/python/effects/dryfire.prefab",
            "assets/prefabs/weapons/python/effects/eject_shells.prefab",
            "assets/prefabs/weapons/python/effects/insert_shells.prefab",
            "assets/prefabs/weapons/python/effects/open_cylinder.prefab",
            "assets/prefabs/weapons/python/effects/pfx_open_cylinder_smoke.prefab",
            "assets/prefabs/weapons/python/effects/w_eject_pistol_shells.prefab",
            "assets/prefabs/weapons/revolver/effects/attack.prefab",
            "assets/prefabs/weapons/revolver/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/revolver/effects/attack_shake.prefab",
            "assets/prefabs/weapons/revolver/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/revolver/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/revolver/effects/deploy.prefab",
            "assets/prefabs/weapons/revolver/effects/dryfire.prefab",
            "assets/prefabs/weapons/revolver/effects/eject_shells.prefab",
            "assets/prefabs/weapons/revolver/effects/insert_shells.prefab",
            "assets/prefabs/weapons/revolver/effects/open_cylinder.prefab",
            "assets/prefabs/weapons/revolver/effects/prime_striker.prefab",
            "assets/prefabs/weapons/revolver/effects/shut_cylinder.prefab",
            "assets/prefabs/weapons/revolver/effects/w_eject_pistol_shells.prefab",
            "assets/prefabs/weapons/rock/effects/attack.prefab",
            "assets/prefabs/weapons/rock/effects/deploy.prefab",
            "assets/prefabs/weapons/rock/effects/strike.prefab",
            "assets/prefabs/weapons/rock/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/rock/effects/throw.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/attack.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/deploy.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/dryfire.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/fire.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/grab_handle.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/holster.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/pfx_close_hatch_smoke.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/pfx_fire_rocket_smokeout.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/pfx_open_hatch_smokeout.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/pfx_rocket_insert_smoke.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/pfx_rocket_insert_sparks.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/reload_begin.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/reload_close_hatch.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/reload_end.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/reload_insert_rocket.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/reload_open_hatch.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/rocket_explosion.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/rocket_explosion_incendiary.prefab",
            "assets/prefabs/weapons/rocketlauncher/effects/rocket_launch_fx.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/attack1.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/attack2.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/deploy.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/holster.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/strike-muted.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/strike-soft.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/strike.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/tap.prefab",
            "assets/prefabs/weapons/salvaged_axe/effects/throw.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/attack1.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/attack2.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/deploy.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/holster.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/strike.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/salvaged_hammer/effects/throw.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/attack.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/deploy.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/holster.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/strike-muted.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/strike-soft.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/strike.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/tap.prefab",
            "assets/prefabs/weapons/salvaged_icepick/effects/throw.prefab",
            "assets/prefabs/weapons/satchelcharge/effects/deploy.prefab",
            "assets/prefabs/weapons/satchelcharge/effects/satchel-charge-explosion.prefab",
            "assets/prefabs/weapons/satchelcharge/effects/throw.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/attack.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/attack_pumpaction.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/attack_shake.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/deploy.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/deploy2.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/dryfire.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/flipover.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/insert_shell.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/pump_forward.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/reload_start.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/shell_smoke.prefab",
            "assets/prefabs/weapons/sawnoff_shotgun/effects/w_eject_shotgun_shell.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/attack.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/attack_shake.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/deploy.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/dryfire.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/eject_clip.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/eject_pistol_shell.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/grab_clip.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/insert_clip.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/slide_back.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/slide_shut.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/w_drop_mag.prefab",
            "assets/prefabs/weapons/semi auto pistol/effects/w_eject_pistol_shell.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/attack.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/attack_shake.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/bolt_back.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/bolt_forward.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/clip_in.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/clip_out.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/clip_slap.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/deploy.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/deploy_grab_forearm.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/dryfire.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/eject_rifle_shell.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/semi auto rifle/effects/w_eject_rifle_shell.prefab",
            "assets/prefabs/weapons/smg/effects/attack.prefab",
            "assets/prefabs/weapons/smg/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/smg/effects/attack_shake.prefab",
            "assets/prefabs/weapons/smg/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/smg/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/smg/effects/bolt_back.prefab",
            "assets/prefabs/weapons/smg/effects/bolt_shut.prefab",
            "assets/prefabs/weapons/smg/effects/clip_in.prefab",
            "assets/prefabs/weapons/smg/effects/clip_out.prefab",
            "assets/prefabs/weapons/smg/effects/deploy.prefab",
            "assets/prefabs/weapons/smg/effects/dryfire.prefab",
            "assets/prefabs/weapons/smg/effects/eject_shell.prefab",
            "assets/prefabs/weapons/smg/effects/reload_start.prefab",
            "assets/prefabs/weapons/smg/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/smg/effects/w_eject_pistol_shell.prefab",
            "assets/prefabs/weapons/spas12/effects/attack.prefab",
            "assets/prefabs/weapons/spas12/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/spas12/effects/attack_shake.prefab",
            "assets/prefabs/weapons/spas12/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/spas12/effects/deploy.prefab",
            "assets/prefabs/weapons/spas12/effects/dryfire.prefab",
            "assets/prefabs/weapons/spas12/effects/eject_shell.prefab",
            "assets/prefabs/weapons/spas12/effects/insert_shell.prefab",
            "assets/prefabs/weapons/spas12/effects/insert_shell_breach.prefab",
            "assets/prefabs/weapons/spas12/effects/pump_back.prefab",
            "assets/prefabs/weapons/spas12/effects/pump_forward.prefab",
            "assets/prefabs/weapons/spas12/effects/w_eject_shotgun_shell.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/attack_shake.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/deploy.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/strike-muted.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/strike-soft.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/strike.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/swing.prefab",
            "assets/prefabs/weapons/stone hatchet/effects/throw.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/attack.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/deploy.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/strike-muted.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/strike-soft.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/strike.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/swing.prefab",
            "assets/prefabs/weapons/stone pickaxe/effects/throw.prefab",
            "assets/prefabs/weapons/stone spear/effects/2hand_deploy.prefab",
            "assets/prefabs/weapons/stone spear/effects/attack.prefab",
            "assets/prefabs/weapons/stone spear/effects/deploy.prefab",
            "assets/prefabs/weapons/stone spear/effects/holster.prefab",
            "assets/prefabs/weapons/stone spear/effects/pull_out.prefab",
            "assets/prefabs/weapons/stone spear/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/stone spear/effects/strike_stone-muted.prefab",
            "assets/prefabs/weapons/stone spear/effects/strike_stone-soft.prefab",
            "assets/prefabs/weapons/stone spear/effects/strike_stone.prefab",
            "assets/prefabs/weapons/stone spear/effects/throw.prefab",
            "assets/prefabs/weapons/sword big/effects/attack-1.prefab",
            "assets/prefabs/weapons/sword big/effects/attack-2.prefab",
            "assets/prefabs/weapons/sword big/effects/attack-3.prefab",
            "assets/prefabs/weapons/sword big/effects/deploy.prefab",
            "assets/prefabs/weapons/sword big/effects/hit-muted.prefab",
            "assets/prefabs/weapons/sword big/effects/hit-soft.prefab",
            "assets/prefabs/weapons/sword big/effects/hit.prefab",
            "assets/prefabs/weapons/sword big/effects/throw.prefab",
            "assets/prefabs/weapons/sword/effects/attack-1.prefab",
            "assets/prefabs/weapons/sword/effects/attack-2.prefab",
            "assets/prefabs/weapons/sword/effects/attack-3.prefab",
            "assets/prefabs/weapons/sword/effects/deploy.prefab",
            "assets/prefabs/weapons/sword/effects/hit-muted.prefab",
            "assets/prefabs/weapons/sword/effects/hit-soft.prefab",
            "assets/prefabs/weapons/sword/effects/hit.prefab",
            "assets/prefabs/weapons/sword/effects/throw.prefab",
            "assets/prefabs/weapons/thompson/effects/attack.prefab",
            "assets/prefabs/weapons/thompson/effects/attack_muzzlebrake.prefab",
            "assets/prefabs/weapons/thompson/effects/attack_shake.prefab",
            "assets/prefabs/weapons/thompson/effects/attack_shake_ads.prefab",
            "assets/prefabs/weapons/thompson/effects/attack_silenced.prefab",
            "assets/prefabs/weapons/thompson/effects/bolt_action.prefab",
            "assets/prefabs/weapons/thompson/effects/deploy.prefab",
            "assets/prefabs/weapons/thompson/effects/dryfire.prefab",
            "assets/prefabs/weapons/thompson/effects/eject_pistol_shell.prefab",
            "assets/prefabs/weapons/thompson/effects/holster.prefab",
            "assets/prefabs/weapons/thompson/effects/idle_finger_taps.prefab",
            "assets/prefabs/weapons/thompson/effects/insert_clip.prefab",
            "assets/prefabs/weapons/thompson/effects/reload_begin.prefab",
            "assets/prefabs/weapons/thompson/effects/remove_clip.prefab",
            "assets/prefabs/weapons/thompson/effects/safety_off.prefab",
            "assets/prefabs/weapons/thompson/effects/w_drop_magazine.prefab",
            "assets/prefabs/weapons/thompson/effects/w_eject_pistol_shell.prefab",
            "assets/prefabs/weapons/toolgun/effects/attack.prefab",
            "assets/prefabs/weapons/toolgun/effects/lineeffect.prefab",
            "assets/prefabs/weapons/toolgun/effects/lineeffect_realistic.prefab",
            "assets/prefabs/weapons/toolgun/effects/repairerror.prefab",
            "assets/prefabs/weapons/toolgun/effects/ringeffect.prefab",
            "assets/prefabs/weapons/toolgun/effects/ringeffect_realistic.prefab",
            "assets/prefabs/weapons/torch/effects/attack.prefab",
            "assets/prefabs/weapons/torch/effects/attack_lit.prefab",
            "assets/prefabs/weapons/torch/effects/deploy.prefab",
            "assets/prefabs/weapons/torch/effects/extinguish.prefab",
            "assets/prefabs/weapons/torch/effects/ignite.prefab",
            "assets/prefabs/weapons/torch/effects/strike.prefab",
            "assets/prefabs/weapons/torch/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/torch/effects/torch_loop.prefab",
            "assets/prefabs/weapons/waterbucket/effects/deploy.prefab",
            "assets/prefabs/weapons/waterbucket/effects/fillbucket_fromcontainer.prefab",
            "assets/prefabs/weapons/waterbucket/effects/fillbucket_fromworld.prefab",
            "assets/prefabs/weapons/waterbucket/effects/waterbucket_splash.prefab",
            "assets/prefabs/weapons/waterbucket/effects/waterimpact_explosion.prefab",
            "assets/prefabs/weapons/waterbucket/effects/waterthrow.prefab",
            "assets/prefabs/weapons/waterbucket/effects/waterthrow3p.prefab",
            "assets/prefabs/weapons/wooden spear/effects/2hand_deploy.prefab",
            "assets/prefabs/weapons/wooden spear/effects/attack.prefab",
            "assets/prefabs/weapons/wooden spear/effects/deploy.prefab",
            "assets/prefabs/weapons/wooden spear/effects/holster.prefab",
            "assets/prefabs/weapons/wooden spear/effects/pull_out.prefab",
            "assets/prefabs/weapons/wooden spear/effects/strike_screenshake.prefab",
            "assets/prefabs/weapons/wooden spear/effects/strike_wood-muted.prefab",
            "assets/prefabs/weapons/wooden spear/effects/strike_wood-soft.prefab",
            "assets/prefabs/weapons/wooden spear/effects/strike_wood.prefab",
            "assets/prefabs/weapons/wooden spear/effects/throw.prefab",
            "assets/rust.ai/nextai/effects/dusttrail.prefab",
            "assets/standard assets/third party/camelotvfx_adv_water_fx/prefabs/splash_v3.prefab",
            "assets/standard assets/third party/detailed_pyro_fx/prefabs/4096/smoke_04.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion1.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion10.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion11.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion12.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion13.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion2.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_1.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_10.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_11.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_12.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_13.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_2.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_3.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_4.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_5.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_6.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_7.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_8.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion3d_9.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion4.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion5.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion6.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion7.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion8.prefab",
            "assets/third party/kriptofx/explosions/prefabs/mobile/mobileexplosion9.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion1.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion10.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion11.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion12.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion13.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion2.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_1.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_10.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_11.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_12.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_13.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_2.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_3.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_4.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_5.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_6.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_7.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_8.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion3d_9.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion4.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion5.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion6.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion7.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion8.prefab",
            "assets/third party/kriptofx/explosions/prefabs/pc/explosion9.prefab",
        };

        #endregion

        #endregion

        #region Hooks
        private void OnServerInitialized()
        {
            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);

            PrintWarning("" +
                "\n===================== Автор : Mercury" +
                "\n===================== Моя группа с разработкой плагинов - https://vk.com/mercurydev" +
                "\n===================== Мой ВК - https://vk.com/mir_inc" +
                $"\n===================== Иконок - {IconsRust.Count}" +
                $"\n===================== Материалов - {Materials.Count}" +
                $"\n===================== Шрифтов - {Fonts.Count}" +
                $"\n===================== Эффектов - {EffectRustList.Count}");
        }
        void OnPlayerConnected(BasePlayer player)
        {
            if (!HexTakePlayer.ContainsKey(player.userID))
                HexTakePlayer.Add(player.userID, "#FFFFFFFF");
        }
        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                CuiHelper.DestroyUi(player, PARENT_UI);
                CuiHelper.DestroyUi(player, PARENT_UI_HEX_SETTINGS);
                DestroyedLayer(player);
            }
        }
        #endregion

        #region Func Command

        [ConsoleCommand("utilites")] 
        void MercuryUtilitesCommands(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();

            string Key = arg.Args[0].ToLower();
            switch (Key)
            {
                case "icons":
                    {
                        string Hex = HexTakePlayer[player.userID];
                        int Page = Convert.ToInt32(arg.Args[1]);
                        UI_IconsLoaded(player, 0, Hex);
                        break;
                    }
                case "materials":
                    {
                        string Hex = HexTakePlayer[player.userID];
                        int Page = Convert.ToInt32(arg.Args[1]);
                        UI_MaterialLoaded(player, Page, Hex);
                        break;
                    }
                case "iconstwo":
                    {
                        string Hex = HexTakePlayer[player.userID];
                        int Page = Convert.ToInt32(arg.Args[1]);
                        UI_IconsLoadedMaterial(player, 0, Hex);
                        break;
                    }
                case "fonts":
                    {
                        string Hex = HexTakePlayer[player.userID];
                        int Page = Convert.ToInt32(arg.Args[1]);
                        UI_FontsLoaded(player, 0, Hex);
                        break;
                    }         
                case "effect":
                    {
                        int Page = Convert.ToInt32(arg.Args[1]);
                        UI_EffectLoaded(player, 0);
                        break;
                    }
                case "page_icons":
                    {
                        string PageAction = arg.Args[1];
                        int Page = Convert.ToInt32(arg.Args[2]);
                        switch (PageAction)
                        {
                            case "next":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_IconsLoaded(player, Page + 1, Hex);
                                    break;
                                }
                            case "back":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_IconsLoaded(player, Page - 1, Hex);
                                    break;
                                }
                        }
                        break;
                    }
                case "page_icons_two":
                    {
                        string PageAction = arg.Args[1];
                        int Page = Convert.ToInt32(arg.Args[2]);
                        switch (PageAction)
                        {
                            case "next":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_IconsLoadedMaterial(player, Page + 1, Hex);
                                    break;
                                }
                            case "back":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_IconsLoadedMaterial(player, Page - 1, Hex);
                                    break;
                                }
                        }
                        break;
                    }
                case "page_materials":
                    {
                        string PageAction = arg.Args[1];
                        int Page = Convert.ToInt32(arg.Args[2]);
                        switch (PageAction)
                        {
                            case "next":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_MaterialLoaded(player, Page + 1, Hex);
                                    break;
                                }
                            case "back":
                                {
                                    string Hex = HexTakePlayer[player.userID];

                                    UI_MaterialLoaded(player, Page - 1, Hex);
                                    break;
                                }
                        }
                        break;
                    }
                case "page_effect":
                    {
                        string PageAction = arg.Args[1];
                        int Page = Convert.ToInt32(arg.Args[2]);
                        switch (PageAction)
                        {
                            case "next":
                                {
                                    UI_EffectLoaded(player, Page + 1);
                                    break;
                                }
                            case "back":
                                {
                                    UI_EffectLoaded(player, Page - 1);
                                    break;
                                }
                        }
                        break;
                    }
                case "show_hex": 
                    {
                        UI_HexSettingsMenu(player);
                        break;
                    }
                case "set_hex": 
                    {
                        string Hex = arg.Args[1];
                        HexTakePlayer[player.userID] = Hex;
                        CuiHelper.DestroyUi(player, PARENT_UI_HEX_SETTINGS);
                        PrintToChat($"Успешно установлен цвет {Hex}");
                        PrintToConsole($"Успешно установлен цвет {Hex}");
                        Puts($"Успешно установлен цвет {Hex}");
                        break;
                    }
                case "save_element": 
                    {
                        string Path = arg.Args[1];
                        PrintWarning(Path);
                        PrintToConsole(Path);
                        PrintToChat(Path);
                        break;
                    }
                case "sound_play":
                    {
                        string Path = arg.Args[1];
                        string Title = arg.Args[2];
                        int Page = Convert.ToInt32(arg.Args[3]);
                        CuiHelper.DestroyUi(player, PARENT_UI);
                        UI_Plaeer(player, Title,Path, Page);
                        break;
                    }
            }
        }

        [ChatCommand("ut")]
        void ChatCommandUtilites(BasePlayer player)
        {
            UI_PanelReportsPlayer(player);
        }

        [ConsoleCommand("ut")]
        void ConsoleCommandUtilMer(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();

            UI_PanelReportsPlayer(player);

        }

        #endregion

        #region UI
        public static string PARENT_UI = "MERCURY_PANEL_UI";
        public static string PARENT_UI_BUTTON = "MERCURY_PARENT_UI_BUTTON";

        public static string PARENT_UI_ELEMENT = "MERCURY_PARENT_UI_ELEMENT";
        public static string PARENT_UI_ELEMENT_ICONS = "PARENT_UI_ELEMENT_ICONS";
        public static string PARENT_UI_ELEMENT_ICONSTWO = "PARENT_UI_ELEMENT_ICONSTWO";

        public static string PARENT_UI_ELEMENT_MATERIAL = "PARENT_UI_ELEMENT_MATERIAL";

        public static string PARENT_UI_ELEMENT_FONTS = "PARENT_UI_ELEMENT_FONTS";

        public static string PARENT_UI_ELEMENT_EFFECT = "PARENT_UI_ELEMENT_EFFECT";
        public static string PARENT_UI_ELEMENT_EFFECT_PLAYER = "PARENT_UI_ELEMENT_EFFECT_PLAYER";

        public static string PARENT_UI_HEX_SETTINGS = "PARENT_UI_HEX_SETTINGS";

        #region MainPanel
        void UI_PanelReportsPlayer(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PARENT_UI);

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"},
                Image = { Color = HexToRustFormat("#21211AF2"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            },  "Overlay",PARENT_UI);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.8407407", AnchorMax = "1 0.9268518" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI, PARENT_UI_BUTTON);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.9305556", AnchorMax = "1 1" },
                Text = { Text = $"<b><size=30>MERCURY UTILITES</size></b>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI);

            #region BTNS
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0.1671875 1" },
                Button = { Command = $"utilites icons {0}", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=20>ИКОНКИ ИЗ ИГРЫ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_BUTTON);
            
            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.1718755 0", AnchorMax = "0.3390611 1" },
                Button = { Command = $"utilites materials {0}", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=20>МАТЕРИАЛЫ ИЗ ИГРЫ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_BUTTON);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.3442709 0", AnchorMax = "0.5114543 1" },
                Button = { Command = $"utilites iconstwo {0}", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=20>ИКОНКИ ИЗ ИГРЫ С МАТЕРИАЛОМ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_BUTTON);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.5156225 0", AnchorMax = "0.6828059 1" },
                Button = { Command = $"utilites fonts {0}", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=20>ШРИФТЫ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_BUTTON);  

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.6890574 0", AnchorMax = "0.8562407 1" },
                Button = { Command = $"utilites effect {0}", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=20>ЭФФЕКТЫ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_BUTTON);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0.8" },
                Text = { Text = $"<b>Автор : Mercury\n\nМоя группа с разработкой плагинов - https://vk.com/mercurydev \n\nМой ВК - https://vk.com/mir_inc </b>", Font = "robotocondensed-bold.ttf", FontSize = 25, Align = TextAnchor.MiddleCenter }
            },  PARENT_UI, "WELCOME_TITLE");
            #endregion

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0.8314815" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI, PARENT_UI_ELEMENT);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.004687482 0.01113585", AnchorMax = "0.15 0.06347439" },
                Button = { Close = PARENT_UI, Color = HexToRustFormat("#B4371EFF") },
                Text = { Text = "<b><size=16>ЗАКРЫТЬ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT);

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0.1583337 0.01113585", AnchorMax = "0.303645 0.06347439" },
                Button = { Command = "utilites show_hex", Color = HexToRustFormat("#3E482EFF") },
                Text = { Text = "<b><size=16>СМЕНИТЬ ЦВЕТ</size></b>", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT);


            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Icons
        
        void UI_IconsLoaded(BasePlayer player, int Page = 0, string Hex = "#FFFFFFFF")
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.07683742", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI_ELEMENT, PARENT_UI_ELEMENT_ICONS);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.5015628 0.004454346", AnchorMax = "0.5312498 0.06681515" },
                Text = { Text = $"<size=30>{Page}</size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT, "PAGE_TITLE");

            if ((IconsRust.Count - (Page * 199)) > 199)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.5385414 0.004454346", AnchorMax = "0.5682284 0.07015589" },
                    Button = { Command = $"utilites page_icons next {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20>></size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_NEXT");
            }

            if (Page > 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4677091 0.004454346", AnchorMax = "0.4973962 0.07015589" },
                    Button = { Command = $"utilites page_icons back {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20><</size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_BACK");
            }

            int i = 0, x = 0, y = 0;
            foreach (var Sprite in IconsRust.Skip(Page * 199))
            {
                container.Add(new CuiElement
                {
                    Name = $"ICON_{i}",
                    Parent = PARENT_UI_ELEMENT_ICONS,
                    Components =
                    {
                        new CuiRawImageComponent {  Color = "0 0 0 0" },
                        new CuiRectTransformComponent { AnchorMin = $"{0.004687482 + (x * 0.05)} {0.9071308 - (y * 0.1)}", AnchorMax = $"{0.04218748 + (x * 0.05)} {0.9936692 - (y * 0.1)}" },
                        new CuiOutlineComponent { Color = HexToRustFormat("#3E482EFF") ,Distance = "0.2 -0.2" }
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ICON_{i}",
                    Components =
                    {
                        new CuiImageComponent {  Color = HexToRustFormat(Hex), Sprite = Sprite },
                        new CuiRectTransformComponent { AnchorMin = $"0.05555556 0.05555553", AnchorMax = $"0.9444445 0.9444441" }
                    }
                });

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"utilites save_element {Sprite}", Color = "0 0 0 0" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                },  $"ICON_{i}");

                i++;
                x++;
                if(x == 20)
                {
                    x = 0;
                    y++;
                }
                if (x == 0 && y == 10) break;
            }

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Icons#2

        void UI_IconsLoadedMaterial(BasePlayer player, int Page = 0, string Hex = "#FFFFFFFF")
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.07683742", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI_ELEMENT, PARENT_UI_ELEMENT_ICONSTWO);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.5015628 0.004454346", AnchorMax = "0.5312498 0.06681515" },
                Text = { Text = $"<size=30>{Page}</size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT, "PAGE_TITLE");

            if ((IconsRust.Count - (Page * 199)) > 199)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.5385414 0.004454346", AnchorMax = "0.5682284 0.07015589" },
                    Button = { Command = $"utilites page_icons_two next {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20>></size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_NEXT");
            }

            if (Page > 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4677091 0.004454346", AnchorMax = "0.4973962 0.07015589" },
                    Button = { Command = $"utilites page_icons_two back {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20><</size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_BACK");
            }

            int i = 0, x = 0, y = 0;
            foreach (var Sprite in IconsRust.Skip(Page * 199))
            {
                container.Add(new CuiElement
                {
                    Name = $"ICON_{i}",
                    Parent = PARENT_UI_ELEMENT_ICONSTWO,
                    Components =
                    {
                        new CuiRawImageComponent {  Color = "0 0 0 0" },
                        new CuiRectTransformComponent { AnchorMin = $"{0.004687482 + (x * 0.05)} {0.9071308 - (y * 0.1)}", AnchorMax = $"{0.04218748 + (x * 0.05)} {0.9936692 - (y * 0.1)}" },
                        new CuiOutlineComponent { Color = HexToRustFormat("#3E482EFF") ,Distance = "0.2 -0.2" }
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = $"ICON_{i}",
                    Components =
                    {
                        new CuiImageComponent {  Color = HexToRustFormat(Hex), Sprite = Sprite, Material = Sprite },
                        new CuiRectTransformComponent { AnchorMin = $"0.05555556 0.05555553", AnchorMax = $"0.9444445 0.9444441" }
                    }
                });

                string Out = $"В данном случае используйте материал и спрайт для элемента одновременно :\n {Sprite}";
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"utilites save_element {Out}", Color = "0 0 0 0" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                }, $"ICON_{i}");

                i++;
                x++;
                if (x == 20)
                {
                    x = 0;
                    y++;
                }
                if (x == 0 && y == 10) break;
            }

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Materials
        void UI_MaterialLoaded(BasePlayer player, int Page = 0, string Hex = "#FFFFFFFF")
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.07683742", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI_ELEMENT, PARENT_UI_ELEMENT_MATERIAL);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.5015628 0.004454346", AnchorMax = "0.5312498 0.06681515" },
                Text = { Text = $"<size=30>{Page}</size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT, "PAGE_TITLE");

            if ((Materials.Count - (Page * 45)) > 45)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.5385414 0.004454346", AnchorMax = "0.5682284 0.07015589" },
                    Button = { Command = $"utilites page_materials next {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20>></size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_NEXT");
            }

            if (Page > 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4677091 0.004454346", AnchorMax = "0.4973962 0.07015589" },
                    Button = { Command = $"utilites page_materials back {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20><</size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_BACK");
            }

            int i = 0, x = 0, y = 0;
            foreach (var Material in Materials.Skip(Page * 45))
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{0.004166649 + (x * 0.206)} {0.9083153 - (y * 0.1)}", AnchorMax = $"{0.1666667 + (x * 0.206)} {0.9951669 - (y * 0.1)}" },
                    Image = { Color = HexToRustFormat(Hex), Material = Material }
                }, PARENT_UI_ELEMENT_MATERIAL, $"MATERIAL_{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"utilites save_element {Material}", Color = "0 0 0 0" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                }, $"MATERIAL_{i}");

                i++;
                x++;
                if (x == 5)
                {
                    x = 0;
                    y++;
                }
                if (x == 0 && y == 10) break;
            }

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Fonts
        void UI_FontsLoaded(BasePlayer player, int Page = 0, string Hex = "#FFFFFFFF")
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.07683742", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI_ELEMENT, PARENT_UI_ELEMENT_FONTS);


            int i = 0, x = 0, y = 0;
            foreach (var FontUse in Fonts)
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{0.004166649 + (x * 0.254)} {0.9083153 - (y * 0.1)}", AnchorMax = $"{0.2291667 + (x * 0.254)} {0.9951669 - (y * 0.1)}" },
                    Image = { Color = HexToRustFormat("#3E482EFF") }
                }, PARENT_UI_ELEMENT_FONTS, $"FONT_{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"utilites save_element {FontUse}", Color = "0 0 0 0" },
                    Text = { Text = "Пример текста 12345", Font = FontUse.Replace("assets/content/ui/fonts/",""), Color = HexToRustFormat(Hex), FontSize = 18, Align = TextAnchor.MiddleCenter }
                }, $"FONT_{i}");

                i++;
                x++;
                if (x == 4)
                {
                    x = 0;
                    y++;
                }
            }

            CuiHelper.AddUi(player, container);
        }
        #endregion

        #region Effects 
        void UI_EffectLoaded(BasePlayer player, int Page = 0)
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.07683742", AnchorMax = "1 1" },
                Image = { Color = "0 0 0 0" }
            }, PARENT_UI_ELEMENT, PARENT_UI_ELEMENT_EFFECT);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.5015628 0.004454346", AnchorMax = "0.5312498 0.06681515" },
                Text = { Text = $"<size=30>{Page}</size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT, "PAGE_TITLE");

            if ((EffectRustList.Count - (Page * 50)) > 50)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.5385414 0.004454346", AnchorMax = "0.5682284 0.07015589" },
                    Button = { Command = $"utilites page_effect next {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20>></size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_NEXT");
            }

            if (Page > 0)
            {
                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.4677091 0.004454346", AnchorMax = "0.4973962 0.07015589" },
                    Button = { Command = $"utilites page_effect back {Page}", Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" },
                    Text = { Text = "<b><size=20><</size></b>", Align = TextAnchor.MiddleCenter }
                }, PARENT_UI_ELEMENT, "PAGE_BACK");
            }

            int i = Page * 50, x = 0, y = 0;
            foreach (var Effect in EffectRustList.Skip(Page * 50))
            {
                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = $"{0.004166649 + (x * 0.204)} {0.9083153 - (y * 0.1)}", AnchorMax = $"{0.1765625 + (x * 0.204)} {0.9951669 - (y * 0.1)}" },
                    Image = { Color = HexToRustFormat("#3E482EFF") }
                }, PARENT_UI_ELEMENT_EFFECT, $"EFFECT_{i}");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0.7522659 1" },
                    Text = { Text = $"<size=18><b>ЭФФЕКТ #{i}</b></size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                },  $"EFFECT_{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Button = { Command = $"utilites save_element {Effect}", Color = "0 0 0 0" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                }, $"EFFECT_{i}");

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "0.7824773 0.06555558", AnchorMax = "0.9788519 0.9167581" },
                    Button = { Command = $"utilites sound_play {Effect} <size=25><b>ЭФФЕКТ#{i}</b></size> {Page}", Color = HexToRustFormat("#06C4FFFF"), Sprite = "assets/icons/voice.png" },
                    Text = { Text = "", Align = TextAnchor.MiddleCenter }
                }, $"EFFECT_{i}");

                i++;
                x++;
                if (x == 5)
                {
                    x = 0;
                    y++;
                }
                if (x == 0 && y == 10) break;
            }

            CuiHelper.AddUi(player, container);
        }

        #region UI Pleer

        void UI_Plaeer(BasePlayer player, string Title, string Path, int Page = 0)
        {
            CuiElementContainer container = new CuiElementContainer();
            DestroyedLayer(player);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0.6907408", AnchorMax = "0.1859375 0.7444444" },
                Image = { Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            },  "Overlay", PARENT_UI_ELEMENT_EFFECT_PLAYER);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0.7754629 1" },
                Text = { Text = $"<size=20><b>{Title}</b></size>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, PARENT_UI_ELEMENT_EFFECT_PLAYER);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.8055555 0.06555558", AnchorMax = "0.9742223 0.9167581" },
                Image = { Color = HexToRustFormat("#04C4FFFF"), Sprite = "assets/icons/voice.png" }
            }, PARENT_UI_ELEMENT_EFFECT_PLAYER);

            RunEffect(player, Path);
            timer.Once(2f, () => {
                UI_PanelReportsPlayer(player);
                UI_EffectLoaded(player, Page);
            });

            CuiHelper.AddUi(player, container);
        }

        #endregion

        #endregion

        #region HexSettings
        void UI_HexSettingsMenu(BasePlayer player)
        {
            CuiElementContainer container = new CuiElementContainer();
            CuiHelper.DestroyUi(player, PARENT_UI_HEX_SETTINGS);

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0.2744792 0.06666666", AnchorMax = "0.725 0.8268518" },
                Image = { Color = HexToRustFormat("#54514DFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            },  "Overlay", PARENT_UI_HEX_SETTINGS);

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0.9159561", AnchorMax = "1 1" },
                Text = { Text = $"<b><size=20>ВЫБЕРИТЕ ЦВЕТ ДЛЯ ПРЕДПРОСМОТРА</size></b>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            },  PARENT_UI_HEX_SETTINGS);

            int x = 0, y = 0;
            for (int i = 0; i < HexList.Count; i++)
            {
                string Hex = HexList[i];

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = $"{0.02312142 + (x * 0.5)} {0.8343483 - (y * 0.1)}", AnchorMax = $"{0.4913295 + (x * 0.5)} {0.9001219 - (y * 0.1)}" },
                    Button = { Command = $"utilites set_hex {Hex}", Close = PARENT_UI_HEX_SETTINGS, Color = HexToRustFormat(Hex) },
                    Text = { Text = $"<b><size=16>{Hex}</size></b>", Align = TextAnchor.MiddleCenter }
                },  PARENT_UI_HEX_SETTINGS, $"BTN_HEX_{i}");

                x++;
                if(x == 2)
                {
                    x = 0;
                    y++;
                }
                if (x == 0 && y == 8) break;
            }

            string CustomHex = "";
            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0.02658963 0.08404718", AnchorMax = "0.9815028 0.1327649" },
                Text = { Text = $"<b><size=20>ВВЕДИТЕ СОБСТВЕННЫЙ HEX</size></b>", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleLeft }
            }, PARENT_UI_HEX_SETTINGS);

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0.02312142 0.01340157", AnchorMax = "0.9780346 0.07917558" },
                Image = { Color = HexToRustFormat("#3E482EFF"), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, PARENT_UI_HEX_SETTINGS, PARENT_UI_HEX_SETTINGS + ".Input");

            container.Add(new CuiElement
            {
                Parent = PARENT_UI_HEX_SETTINGS + ".Input",
                Name = PARENT_UI_HEX_SETTINGS + ".Input.Current",
                Components =
                {
                    new CuiInputFieldComponent { Text = CustomHex, FontSize = 18,Command = $"utilites set_hex {CustomHex}", Align = TextAnchor.MiddleCenter, CharsLimit = 10},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });

            CuiHelper.AddUi(player, container);
        }
        #endregion

        void RunEffect(BasePlayer player, string Path)
        {
            Effect effect = new Effect(Path, player, 0, new Vector3(), new Vector3());
            EffectNetwork.Send(effect, player.Connection);
        }

        void DestroyedLayer(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_ICONS);
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_ICONSTWO);
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_MATERIAL);
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_EFFECT);
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_FONTS);
            CuiHelper.DestroyUi(player, PARENT_UI_ELEMENT_EFFECT_PLAYER);
            CuiHelper.DestroyUi(player, "WORK_PANEL");
            CuiHelper.DestroyUi(player, "PAGE_TITLE");
            CuiHelper.DestroyUi(player, "PAGE_NEXT");
            CuiHelper.DestroyUi(player, "WELCOME_TITLE");
            CuiHelper.DestroyUi(player, "PAGE_BACK");
        }

        private static string HexToRustFormat(string hex)
        {
            Color color;
            ColorUtility.TryParseHtmlString(hex, out color);
            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }
        #endregion
    }
}


// --- End of file: MercuryUtilites.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/ShopSystemRevolution.cs ---
// --- Original Local Path: KualaRust/ShopSystemRevolution.cs ---

using Newtonsoft.Json;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using Color = UnityEngine.Color;
using System.Globalization;
using System.Collections;
using ConVar;

namespace Oxide.Plugins
{
    [Info("ShopSystemRevolution", "DezLife", "1.4.0")]
    [Description("Большой и настраиваемый внутриигровой магазин")]
    public class ShopSystemRevolution : RustPlugin
    {
        public enum ItemType
        {
            Предмет,
            Чертёж,
            КастомПредмет,
            Команда
        }

        [PluginReference] Plugin IQChat, ImageLibrary, Economics, IQEconomic, Friends, Clans, Battles, Duel;

        #region ref

        public bool IsFriends(ulong userID, ulong targetID)
        {
            if (Friends)
                return (bool)Friends?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsClans(ulong userID, ulong targetID)
        {
            if (Clans)
                return (bool)Clans?.Call("HasFriend", userID, targetID);
            else return false;
        }
        public bool IsDuel(ulong userID)
        {
            if (Battles)
                return (bool)Battles?.Call("IsPlayerOnBattle", userID);
            else if (Duel) return (bool)Duel?.Call("IsPlayerOnActiveDuel", BasePlayer.FindByID(userID));
            else return false;
        }

        #endregion

        #region Classes
        public class ItemStores
        {
            [JsonProperty("Тип предмета(0 - Предмет, 1 - Чертёж, 2 - кастомный предмет, 3 - Команда)")]
            public ItemType type;
            [JsonProperty("Shortame")]
            public string ShortName;
            [JsonProperty("Цена")]
            public int Price;
            [JsonProperty("Количество при покупке")]
            public int Amount;
            [JsonProperty("Кастом имя предмета (Использовать с типом предмета 2 и 3)")]
            public string Name;
            [JsonProperty("SkinID предмета (Использовать с типом предмета 2)")]
            public ulong SkinID;
            [JsonProperty("Команда(Использовать с типом предмета 3)")]
            public string Command;
            [JsonProperty("URL картинки (Использовать с типом предмета 3)")]
            public string Url;
        }
        #endregion

        #region Lang

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ShopSystem_UI_TITLE"] = "<b>toy shop</b>\n",
                ["ShopSystem_UI_CLOSE"] = "<b>CLOSE</b>",
                ["ShopSystem_UI_CATEGORY1"] = "<b>product categories</b>",
                ["ShopSystem_UI_CATEGORY2"] = "<b>products from the selected category</b>",
                ["ShopSystem_UI_BALANCEINFO"] = "Your balance: {0}\nPersonal discount: {1}%",
                ["ShopSystem_UI_BUTTON_NEXT"] = "<b>NEXT</b>",
                ["ShopSystem_UI_BUTTON_BACK"] = "<b>BACK</b>",
                ["ShopSystem_UI_BUY"] = "Buy",
                ["ShopSystem_UI_BUYITEM"] = "You want to buy: {0}\nPurchase price: {1}\nYour balance {2}",
                ["ShopSystem_CHAT_BUYITEM_NOMONEY"] = "You do not have enough funds for this purchase",
                ["ShopSystem_CHAT_BUYITEM_ERROR"] = "An unexpected error has occurred.Contact administrator",
                ["ShopSystem_CHAT_BUYITEM"] = "You have successfully bought {0} behind {1} koynov",
                ["ShopSystem_CHAT_BUYITEM_INVENTORY_ISFULL"] = "Out of inventory",
                ["ShopSystem_CHAT_MONEYGIVE"] = "You have earned {0} coins for your store balance",
            }, this);

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["ShopSystem_UI_TITLE"] = "<b>магазин игрушек</b>\n",
                ["ShopSystem_UI_CLOSE"] = "<b>ЗАКРЫТЬ</b>",
                ["ShopSystem_UI_CATEGORY1"] = "<b>категории товаров</b>",
                ["ShopSystem_UI_CATEGORY2"] = "<b>товары из выбранной категории</b>",
                ["ShopSystem_UI_BALANCEINFO"] = "Ваш баланс: {0}\nПерсональная скидка: {1}%",
                ["ShopSystem_UI_BUTTON_NEXT"] = "<b>ВПЕРЕД</b>",
                ["ShopSystem_UI_BUTTON_BACK"] = "<b>НАЗАД</b>",
                ["ShopSystem_UI_BUY"] = "Купить",
                ["ShopSystem_UI_BUYITEM"] = "Вы хотите купить: {0}\nЦена покупки: {1}\nВаш Баланс {2}",
                ["ShopSystem_CHAT_BUYITEM_NOMONEY"] = "У вас недостаточно средств для данной покупки",
                ["ShopSystem_CHAT_BUYITEM_ERROR"] = "Произошла непредвиденная ошибка. Обратитесь к администратору",
                ["ShopSystem_CHAT_BUYITEM"] = "Вы успешно купили {0} за {1} койнов ",
                ["ShopSystem_CHAT_BUYITEM_INVENTORY_ISFULL"] = "Недостаточно места в инвентаре",
                ["ShopSystem_CHAT_MONEYGIVE"] = "Вы заработали {0} монет на баланс магазина",
            }, this, "ru");
        }

        #endregion

        #region Configuration

        private static Configuration config = new Configuration();
        private class Configuration
        {
            [JsonProperty("Основные настройки плагина")]
            public GeneralSetings generalSetings;
            [JsonProperty("Скидки по пермешенам")]
            public DiscountStores discountStores;
            [JsonProperty("Настройка валюты")]
            public CurrencyForStores currencyForStores;
            [JsonProperty("Настройка выпадения валюты (Только для типа default)")]
            public DropCurrencySetings dropCurrencySetings;
            [JsonProperty("Связать магазин с плагином Human NPC")]
            public HumanNPCSettings humanNPCSettings;
            [JsonProperty("Предметы")]
            public Dictionary<string, List<ItemStores>> itemstores;

            internal class GeneralSetings
            {
                [JsonProperty("Чат комманда для открытия шопа (Не будет действовать если вы включили поддержку Human NPC)")]
                public string CommandOpenUI;
                [JsonProperty("Цвет фона магазина")]
                public string FonColor;
                [JsonProperty("Цвет не активной категории")]
                public string CategoryFonINActive;
                [JsonProperty("Цвет активной категории")]
                public string CategoryFonActive;
                [JsonProperty("Цвет кнопок вперед/назад")]
                public string ButonPageColor;
                [JsonProperty("Цвет окна подтверждения покупки")]
                public string ButonByeSucc;
                [JsonProperty("Цвет панельки 'категории товаров'")]
                public string Butoncategoryitem;
                [JsonProperty("Цвет панельки 'товары из выбранной категории'")]
                public string Butoncategoryactiveitem;
                [JsonProperty("Включить кнопку быстрого доступа к магазину")]
                public bool ButtonIcon;
                [JsonProperty("Кнопка быстрого магазина OffsetMin ")]
                public string ButtonIconOffsetMin;
                [JsonProperty("Кнопка быстрого магазина OffsetMax")]
                public string ButtonIconOffsetMax;
                [JsonProperty("Основное окно магазина OffsetMin ")]
                public string MainUIOffsetMin;
                [JsonProperty("КОсновное окно магазина OffsetMax")]
                public string MainUIOffsetMax;
            }
            internal class CurrencyForStores
            {
                [JsonProperty("Тип валюты (default, economic, IQEconomic)")]
                public string TypeBalance;
                [JsonProperty("Названия валюты (Работает с типом default)")]
                public string NameCurrency;
                [JsonProperty("Начальный баланс игроков (Работает с типом default)")]
                public int BalanceStart;
                [JsonProperty("Отчищать баланс при вайпе ? (Работает с типом default)")]
                public bool WipeData;
            }
            internal class HumanNPCSettings
            {
                [JsonProperty("Включить ли поддержку плагина Human NPC")]
                public bool NpsUse;
                [JsonProperty("ID бота у которого можно будет открыть магазин")]
                public ulong NpsId;
            }

            internal class DropCurrencySetings
            {
                [JsonProperty("Сколько монет давать за убийство игроков")]
                public DropSet PlayerMoneyDive = new DropSet();
                [JsonProperty("Сколько монет давать за убийство NPC")]
                public DropSet NPCMoneyDive = new DropSet();
                [JsonProperty("Сколько монет давать за убийство животных")]
                public DropSet AnimalMoneyDive = new DropSet();
                [JsonProperty("Сколько монет давать за взрыв танка")]
                public DropSet BradleyMoneyDive = new DropSet();
                [JsonProperty("Сколько монет давать за взрыв Вертолета")]
                public DropSet HeliMoneyDive = new DropSet();
                [JsonProperty("Сколько монет давать за добычу руды")]
                public Dictionary<string, DropSet> OreMoneyDive = new Dictionary<string, DropSet>();
                [JsonProperty("Сколько монет давать за добычу трупов")]
                public DropSet CorpseMoneyDive = new DropSet();

                internal class DropSet
                {
                    [JsonProperty("Шанс выпадения валюты (Если поставить 0 то падать не будет)")]
                    public int Chance;
                    [JsonProperty("Минимальное количество выпадения валюты")]
                    public int MinDrop;
                    [JsonProperty("Максимальное количество выпадения валюты")]
                    public int MaxDrop;
                }
            }

            internal class DiscountStores
            {
                [JsonProperty("Пермешен/Скидка %")]
                public Dictionary<string, int> DiscountPerm;
            }


            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    generalSetings = new GeneralSetings
                    {
                        CommandOpenUI = "shop",
                        FonColor = "#AE3F19CA",
                        CategoryFonINActive = "#A04D4DD8",
                        CategoryFonActive = "#EF7A7AD8",
                        ButonPageColor = "#2AE9748B",
                        ButonByeSucc = "#7A8FEF87",
                        Butoncategoryitem = "#2AE9748B",
                        Butoncategoryactiveitem = "#2AE9748B",
                        ButtonIcon = true,
                        ButtonIconOffsetMin = "5 -40",
                        ButtonIconOffsetMax = "40 -5",
                        MainUIOffsetMin = "-570 -340",
                        MainUIOffsetMax = "570 335"
                    },
                    currencyForStores = new CurrencyForStores
                    {
                        TypeBalance = "default",
                        NameCurrency = "Coin",
                        BalanceStart = 5,
                        WipeData = true
                    },
                    discountStores = new DiscountStores
                    {
                        DiscountPerm = new Dictionary<string, int>
                        {
                            ["ShopSystemRevolution.10"] = 10
                        }
                    },
                    dropCurrencySetings = new DropCurrencySetings
                    {
                        AnimalMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 30,
                            MinDrop = 1,
                            MaxDrop = 2
                        },
                        NPCMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 40,
                            MinDrop = 1,
                            MaxDrop = 3
                        },
                        PlayerMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 60,
                            MinDrop = 1,
                            MaxDrop = 5
                        },
                        CorpseMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 20,
                            MinDrop = 1,
                            MaxDrop = 3
                        },
                        HeliMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 60,
                            MinDrop = 4,
                            MaxDrop = 7
                        },
                        BradleyMoneyDive = new DropCurrencySetings.DropSet
                        {
                            Chance = 60,
                            MinDrop = 4,
                            MaxDrop = 7
                        },
                        OreMoneyDive = new Dictionary<string, DropCurrencySetings.DropSet>
                        {
                            ["Sulfur"] = new DropCurrencySetings.DropSet
                            {
                                Chance = 50,
                                MinDrop = 1,
                                MaxDrop = 3
                            },
                            ["metal.ore"] = new DropCurrencySetings.DropSet
                            {
                                Chance = 30,
                                MinDrop = 1,
                                MaxDrop = 2
                            },
                            ["Wood"] = new DropCurrencySetings.DropSet
                            {
                                Chance = 40,
                                MinDrop = 1,
                                MaxDrop = 2
                            },
                            ["hq.metal.ore"] = new DropCurrencySetings.DropSet
                            {
                                Chance = 50,
                                MinDrop = 1,
                                MaxDrop = 5
                            },
                            ["Stones"] = new DropCurrencySetings.DropSet
                            {
                                Chance = 20,
                                MinDrop = 1,
                                MaxDrop = 2
                            }
                        },
                    },

                    #region Test Item
                    itemstores = new Dictionary<string, List<ItemStores>>
                    {
                        ["Конструкции"] = new List<ItemStores>
                       {
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "door.hinged.toptier",
                                Amount = 1,
                                Price = 120,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "door.double.hinged.toptier",
                                Amount = 1,
                                Price = 150,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "barricade.woodwire",
                                Amount = 5,
                                Price = 65,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "barricade.concrete",
                                Amount = 5,
                                Price = 30,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.frame.fence.gate",
                                Amount = 1,
                                Price = 25,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "floor.grill",
                                Amount = 3,
                                Price = 50,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.frame.garagedoor",
                                Amount = 1,
                                Price = 90,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.external.high",
                                Amount = 3,
                                Price = 25,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "gates.external.high.wood",
                                Amount = 1,
                                Price = 15,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "mining.quarry",
                                Amount = 1,
                                Price = 100,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.window.glass.reinforced",
                                Amount = 5,
                                Price = 60,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "floor.ladder.hatch",
                                Amount = 1,
                                Price = 70,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "gates.external.high.stone",
                                Amount = 1,
                                Price = 40,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.external.high.stone",
                                Amount = 5,
                                Price = 80,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "door.closer",
                                Amount = 5,
                                Price = 10,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.window.bars.toptier",
                                Amount = 1,
                                Price = 50,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "shutter.metal.embrasure.a",
                                Amount = 1,
                                Price = 30,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "watchtower.wood",
                                Amount = 1,
                                Price = 10,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "wall.window.bars.metal",
                                Amount = 3,
                                Price = 20,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "mining.pumpjack",
                                Amount = 1,
                                Price = 70,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "ladder.wooden.wall",
                                Amount = 3,
                                Price = 15,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "bed",
                                Amount = 1,
                                Price = 10,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "dropbox",
                                Amount = 3,
                                Price = 5,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "workbench1",
                                Amount = 1,
                                Price = 30,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "workbench2",
                                Amount = 1,
                                Price = 45,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "workbench3",
                                Amount = 1,
                                Price = 65,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "box.repair.bench",
                                Amount = 1,
                                Price = 15,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "furnace.large",
                                Amount = 1,
                                Price = 25,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Предмет,
                                ShortName = "arcade.machine.chippy",
                                Amount = 1,
                                Price = 30,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                       },
                        ["Кастомные предметы"] = new List<ItemStores>
                       {
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "sticks",
                                Amount = 10,
                                Price = 100,
                                Command = "",
                                Name = "Радиактивный металл",
                                SkinID = 1989988490,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "bleach",
                                Amount = 10,
                                Price = 130,
                                Command = "",
                                Name = "Радиактивная сера",
                                SkinID = 1989987965,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "glue",
                                Amount = 10,
                                Price = 80,
                                Command = "",
                                Name = "Радиактивный камень",
                                SkinID = 1989988784,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "tshirt.long",
                                Amount = 1,
                                Price = 160,
                                Command = "",
                                Name = "Рюкзак",
                                SkinID = 1978119207,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "geiger.counter",
                                Amount = 1,
                                Price = 40,
                                Command = "",
                                Name = "Грелка",
                                SkinID = 1978119616,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "keycard_red",
                                Amount = 1,
                                Price = 70,
                                Command = "",
                                Name = "Карта общего доступа",
                                SkinID = 1977450795,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.КастомПредмет,
                                ShortName = "sticks",
                                Amount = 1,
                                Price = 45,
                                Command = "",
                                Name = "-радиация",
                                SkinID = 1977071544,
                                Url = "",
                           },
                       },
                        ["Чертежи"] = new List<ItemStores>
                       {
                           new ItemStores
                           {
                                type = ItemType.Чертёж,
                                ShortName = "icepick.salvaged",
                                Amount = 1,
                                Price = 50,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Чертёж,
                                ShortName = "rocket.launcher",
                                Amount = 1,
                                Price = 90,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Чертёж,
                                ShortName = "rifle.semiauto",
                                Amount = 1,
                                Price = 70,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Чертёж,
                                ShortName = "pistol.revolver",
                                Amount = 1,
                                Price = 35,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           },
                           new ItemStores
                           {
                                type = ItemType.Чертёж,
                                ShortName = "pistol.semiauto",
                                Amount = 1,
                                Price = 50,
                                Command = "",
                                Name = "",
                                SkinID = 0,
                                Url = "",
                           }
                       },
                        ["Привилегии"] = new List<ItemStores>
                       {
                           new ItemStores
                           {
                                type = ItemType.Команда,
                                ShortName = "",
                                Amount = 1,
                                Price = 200,
                                Command = "o.grant group add %STEAMID% pony",
                                Name = "Поняшка 3 дня",
                                SkinID = 0,
                                Url = "https://i.imgur.com/sxNzimL.png",
                           },
                           new ItemStores
                           {
                                type = ItemType.Команда,
                                ShortName = "",
                                Amount = 1,
                                Price = 150,
                                Command = "o.grant group add %STEAMID% vip",
                                Name = "VIP 7 Дней",
                                SkinID = 0,
                                Url = "https://i.imgur.com/ONYOmTR.png",
                           },
                       }
                    },
                    #endregion

                    humanNPCSettings = new HumanNPCSettings
                    {
                        NpsUse = false,
                        NpsId = 0
                    }
                };
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #127" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        #region Data    

        public Dictionary<ulong, double> usersBalance;

        #endregion

        #region Metods

        #region DATA
        private Dictionary<ulong, int> BalanceData = new Dictionary<ulong, int>();
        #endregion
        public void UnsubscribeHook()
        {
            Unsubscribe("OnDispenserBonus");
            Unsubscribe("OnDispenserGather");
            Unsubscribe("OnEntityDeath");
            Unsubscribe("OnEntityTakeDamage");
        }

        bool Chance(int chance)
        {
            if (rnd.Next(0, 100) >= (100 - chance))
                return true;
            else return false;
        }
        System.Random rnd = new System.Random();
        int RandomAmount(int min, int max)
        {
            return rnd.Next(min, max);
        }
        #region CheckCFG
        private void CheckCFG()
        {
            foreach (var cfg in config.itemstores)
            {
                for (int i = 0; i < cfg.Value.Count; i++)
                {
                    if (cfg.Value[i].Amount == 0)
                    {
                        PrintError("В конфиге количество предмета равно 0! Срочно исправьте");
                    }
                    if (cfg.Value[i].Price == 0)
                    {
                        PrintError("В конфиге цена у предмета равно 0! Срочно исправьте");
                    }
                    if (cfg.Value[i].type == ItemType.КастомПредмет)
                    {
                        if (cfg.Value[i].SkinID == 0)
                        {
                            PrintError("В конфиге SkinId у кастом предмета равно 0! Срочно исправьте");
                        }
                        if (cfg.Value[i].Name == "")
                        {
                            PrintError("В конфиге у Кастом Предмет параметр name пуст ! Срочно исправьте");
                        }
                        if (cfg.Value[i].ShortName == "")
                        {
                            PrintError("В конфиге не указан shortname у кастом предмета! Срочно исправьте");
                        }
                    }
                    if (cfg.Value[i].type == ItemType.Команда)
                    {
                        if (cfg.Value[i].Command == "")
                        {
                            PrintError("В конфиге у типа комманда отсутствует комманда! Срочно исправьте");
                        }
                        if (cfg.Value[i].Url == "")
                        {
                            PrintError("В конфиге не указан url у команды! Срочно исправьте");
                        }
                        if (cfg.Value[i].Name == "")
                        {
                            PrintError("В конфиге у комманды параметр name пуст ! Срочно исправьте");
                        }
                    }
                    if (cfg.Value[i].type == ItemType.Предмет)
                    {
                        if (cfg.Value[i].ShortName == "")
                        {
                            PrintError("В конфиге не указан shortname у предмета! Срочно исправьте");
                        }
                    }
                    if (cfg.Value[i].type == ItemType.Чертёж)
                    {
                        if (cfg.Value[i].ShortName == "")
                        {
                            PrintError("В конфиге не указан shortname у чертежа! Срочно исправьте");
                        }
                    }
                }
            }
            ServerMgr.Instance.StartCoroutine(DownloadImages());
        }
        #endregion

        private void PurchaseItem(BasePlayer player, int category, int item, int page)
        {
            ItemStores itembuy = config.itemstores.ElementAt(category).Value.ElementAt(item);
            Item itemcrate = ItemManager.CreateByName(itembuy.ShortName);
            string NameItem = itembuy.type == ItemType.Команда ? itembuy.Name : itembuy.type == ItemType.КастомПредмет ? itembuy.Name : itemcrate.info.displayName.english;
            var discount = (itembuy.Price * GetUserDiscount(player) / 100);
            int price = (itembuy.Price - discount);

            if (player.inventory.containerMain.itemList.Count > 24)
            {
                SendChat(player, lang.GetMessage("ShopSystem_CHAT_BUYITEM_INVENTORY_ISFULL", this, player.UserIDString));
                return;
            }
            if (itembuy != null)
            {
                switch (config.currencyForStores.TypeBalance)
                {
                    case "economic":
                        if ((double)Economics?.Call("Balance", player.userID) >= price)
                        {
                            if ((bool)Economics?.Call("Withdraw", player.userID, (double)price))
                            {
                                GiveItem(player, itembuy);
                                ShopMainUI(player, category, page, true);
                                SendChat(player, String.Format(lang.GetMessage("ShopSystem_CHAT_BUYITEM", this, player.UserIDString), NameItem, price));
                                Log($"Item buy\n Player {player.userID}, buy {NameItem} success");
                            }
                            else SendChat(player, lang.GetMessage("ShopSystem_CHAT_BUYITEM_NOMONEY", this, player.UserIDString));
                        }
                        else SendChat(player, lang.GetMessage("ShopSystem_CHAT_BUYITEM_NOMONEY", this, player.UserIDString));
                        break;
                    case "IQEconomic":
                        if ((bool)IQEconomic?.Call("API_IS_REMOVED_BALANCE", player.userID, price))
                        {
                            IQEconomic?.Call("API_REMOVE_BALANCE", player.userID, price);
                            GiveItem(player, itembuy);
                            ShopMainUI(player, category, page, true);
                            SendChat(player, String.Format(lang.GetMessage("ShopSystem_CHAT_BUYITEM", this, player.UserIDString), NameItem, price));
                            Log($"Item buy\n Player {player.userID}, buy {NameItem} success");
                        }
                        else SendChat(player, lang.GetMessage("ShopSystem_CHAT_BUYITEM_NOMONEY", this, player.UserIDString));
                        break;
                    case "default":
                        if (BalanceData[player.userID] >= price)
                        {
                            BalanceData[player.userID] -= price;
                            GiveItem(player, itembuy);
                            ShopMainUI(player, category, page, true);
                            SendChat(player, String.Format(lang.GetMessage("ShopSystem_CHAT_BUYITEM", this, player.UserIDString), NameItem, price));
                            Log($"Item buy\n Player {player.userID}, buy {NameItem} success");

                        }
                        else SendChat(player, lang.GetMessage("ShopSystem_CHAT_BUYITEM_NOMONEY", this, player.UserIDString));
                        break;
                }
            }
            else SendChat(player, lang.GetMessage("Error", this));
        }

        private void GiveItem(BasePlayer player, ItemStores item)
        {
            switch (item.type)
            {
                case ItemType.КастомПредмет:
                    Item i = ItemManager.CreateByName(item.ShortName, item.Amount, item.SkinID);
                    i.name = item.Name;
                    player.GiveItem(i, BaseEntity.GiveItemReason.PickedUp);
                    break;
                case ItemType.Команда:
                    Server.Command(item.Command.Replace("%STEAMID%", player.UserIDString));
                    break;
                case ItemType.Предмет:
                    Item items = ItemManager.CreateByName(item.ShortName, item.Amount);
                    player.GiveItem(items, BaseEntity.GiveItemReason.PickedUp);
                    break;
                case ItemType.Чертёж:
                    Item itembp;
                    itembp = ItemManager.CreateByItemID(-996920608, item.Amount);
                    itembp.blueprintTarget = ItemManager.itemList.Find(x => x.shortname == item.ShortName)?.itemid ?? 0;
                    player.GiveItem(itembp, BaseEntity.GiveItemReason.PickedUp);
                    break;
            }
        }

        #endregion

        #region Hooks

        void OnNewSave(string filename)
        {
            if (config.currencyForStores.WipeData)
            {
                BalanceData.Clear();
                PrintWarning("Обнаружен WIPE . Дата игроков сброшена");
            }
        }

        void OnPlayerConnected(BasePlayer player)
        {
            if (player.IsReceivingSnapshot)
            {
                NextTick(() => OnPlayerConnected(player));
                return;
            }
            if (!config.humanNPCSettings.NpsUse && config.generalSetings.ButtonIcon)
            {
                InitIcon(player);
            }
            if (!BalanceData.ContainsKey(player.userID) && config.currencyForStores.TypeBalance == "default")
            {
                BalanceData.Add(player.userID, config.currencyForStores.BalanceStart);
                Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("BalanceData", BalanceData);
            }
        }

        private void OnServerInitialized()
        {
            if (!ImageLibrary)
            {
                PrintError($"ERROR! Plugin ImageLibrary not found!");
                Interface.Oxide.UnloadPlugin(Title);
            }
            LoadConfig();
            CheckCFG();

            if (!config.humanNPCSettings.NpsUse)
            {
                Unsubscribe("OnUseNPC");
                cmd.AddChatCommand(config.generalSetings.CommandOpenUI, this, nameof(opencommand));
            }

            if (config.currencyForStores.TypeBalance == "default")
            {
                if (Interface.Oxide.DataFileSystem.ExistsDatafile("BalanceData"))
                    BalanceData = Oxide.Core.Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, int>>("BalanceData");
            }
            else
            {
                UnsubscribeHook();
            }
            for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
            {
                OnPlayerConnected(BasePlayer.activePlayerList[i]);
            }

            foreach (var perm in config.discountStores.DiscountPerm)
                permission.RegisterPermission(perm.Key, this);
        }

        private void OnUseNPC(BasePlayer npc, BasePlayer player)
        {
            if (config.humanNPCSettings.NpsId != npc.userID) return;
            ShopMainUI(player);
        }

        private void Unload()
        {
            if (config.currencyForStores.TypeBalance == "default")
                Oxide.Core.Interface.Oxide.DataFileSystem.WriteObject("BalanceData", BalanceData);

            for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
            {
                CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], shopmain);
                CuiHelper.DestroyUi(BasePlayer.activePlayerList[i], shopmain + "icon");
            }
        }

        void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (dispenser == null || player == null || item == null) return;
            if (config.dropCurrencySetings.OreMoneyDive.ContainsKey(item.info.shortname))
            {
                if (config.dropCurrencySetings.OreMoneyDive[item.info.shortname].Chance != 0)
                {
                    if (Chance(config.dropCurrencySetings.OreMoneyDive[item.info.shortname].Chance))
                    {
                        int money = RandomAmount(config.dropCurrencySetings.OreMoneyDive[item.info.shortname].MinDrop, config.dropCurrencySetings.OreMoneyDive[item.info.shortname].MaxDrop);
                        BalanceData[player.userID] += money;
                        SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                    }
                }
            }
        }
        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (dispenser == null || entity.ToPlayer() == null || item == null || dispenser.gatherType != ResourceDispenser.GatherType.Flesh) return;
            if (config.dropCurrencySetings.CorpseMoneyDive.Chance != 0)
            {
                if (Chance(config.dropCurrencySetings.CorpseMoneyDive.Chance))
                {
                    int money = RandomAmount(config.dropCurrencySetings.CorpseMoneyDive.MinDrop, config.dropCurrencySetings.CorpseMoneyDive.MaxDrop);
                    BalanceData[entity.ToPlayer().userID] += money;
                    SendChat(entity.ToPlayer(), string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, entity.ToPlayer().UserIDString), money));
                }
            }
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            try
            {
                if (entity == null || info == null) return;
                BasePlayer player = null;
                if (info.InitiatorPlayer != null)
                    player = info.InitiatorPlayer;
                else if (entity.GetComponent<BaseHelicopter>() != null)
                    player = BasePlayer.FindByID(GetLastAttacker(entity.net.ID));
                if (player == null) return;

                if (entity is NPCPlayer || entity is NPCMurderer)
                {
                    if (config.dropCurrencySetings.NPCMoneyDive.Chance != 0)
                    {
                        if (Chance(config.dropCurrencySetings.NPCMoneyDive.Chance))
                        {
                            int money = RandomAmount(config.dropCurrencySetings.NPCMoneyDive.MinDrop, config.dropCurrencySetings.NPCMoneyDive.MaxDrop);
                            BalanceData[player.userID] += money;
                            SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                            return;
                        }
                    }
                }

                if (entity as BasePlayer)
                {
                    if (entity.ToPlayer() != null)
                    {
                        BasePlayer targetPlayer = entity.ToPlayer();
                        if (targetPlayer == null) return;
                        if (targetPlayer.userID != player.userID && config.dropCurrencySetings.PlayerMoneyDive.Chance != 0)
                        {
                            if (IsFriends(player.userID, targetPlayer.userID)) return;
                            if (IsClans(player.userID, targetPlayer.userID)) return;
                            if (IsDuel(player.userID)) return;
                            if (Chance(config.dropCurrencySetings.PlayerMoneyDive.Chance))
                            {
                                int money = RandomAmount(config.dropCurrencySetings.PlayerMoneyDive.MinDrop, config.dropCurrencySetings.PlayerMoneyDive.MaxDrop);
                                BalanceData[player.userID] += money;
                                SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                                return;
                            }
                        }
                    }
                }

                if (entity is BaseAnimalNPC)
                {
                    if (config.dropCurrencySetings.AnimalMoneyDive.Chance != 0)
                    {
                        if (Chance(config.dropCurrencySetings.AnimalMoneyDive.Chance))
                        {
                            int money = RandomAmount(config.dropCurrencySetings.AnimalMoneyDive.MinDrop, config.dropCurrencySetings.AnimalMoneyDive.MaxDrop);
                            BalanceData[player.userID] += money;
                            SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                            return;
                        }
                    }
                }

                if (entity is BradleyAPC)
                {
                    if (config.dropCurrencySetings.BradleyMoneyDive.Chance != 0)
                    {
                        if (Chance(config.dropCurrencySetings.BradleyMoneyDive.Chance))
                        {
                            int money = RandomAmount(config.dropCurrencySetings.BradleyMoneyDive.MinDrop, config.dropCurrencySetings.BradleyMoneyDive.MaxDrop);
                            BalanceData[player.userID] += money;
                            SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                            return;
                        }
                    }
                }

                if (entity is BaseHelicopter)
                {
                    if (config.dropCurrencySetings.HeliMoneyDive.Chance != 0)
                    {
                        if (Chance(config.dropCurrencySetings.HeliMoneyDive.Chance))
                        {
                            player = BasePlayer.FindByID(GetLastAttacker(entity.net.ID));
                            int money = RandomAmount(config.dropCurrencySetings.HeliMoneyDive.MinDrop, config.dropCurrencySetings.HeliMoneyDive.MaxDrop);
                            BalanceData[player.userID] += money;
                            SendChat(player, string.Format(lang.GetMessage("ShopSystem_CHAT_MONEYGIVE", this, player.UserIDString), money));
                            return;
                        }
                    }
                }
            }
            catch(NullReferenceException ex)
            {
                Log(ex.Message, "ShopError");
            }  
        }
        private Dictionary<uint, Dictionary<ulong, int>> HeliAttackers = new Dictionary<uint, Dictionary<ulong, int>>();

        void OnEntityTakeDamage(BaseCombatEntity victim, HitInfo info)
        {
            if (victim.GetComponent<BaseHelicopter>() != null && info?.Initiator?.ToPlayer() != null)
            {
                var heli = victim.GetComponent<BaseHelicopter>();
                var player = info.Initiator.ToPlayer();
                NextTick(() =>
                {
                    if (heli == null) return;
                    if (!HeliAttackers.ContainsKey(heli.net.ID))
                        HeliAttackers.Add(heli.net.ID, new Dictionary<ulong, int>());
                    if (!HeliAttackers[heli.net.ID].ContainsKey(player.userID))
                        HeliAttackers[heli.net.ID].Add(player.userID, 0);
                    HeliAttackers[heli.net.ID][player.userID]++;
                });
            }
        }

        private ulong GetLastAttacker(uint id)
        {
            int hits = 0;
            ulong majorityPlayer = 0U;
            if (HeliAttackers.ContainsKey(id))
            {
                foreach (var score in HeliAttackers[id])
                {
                    if (score.Value > hits)
                        majorityPlayer = score.Key;
                }
            }
            return majorityPlayer;
        }

        private IEnumerator DownloadImages()
        {
            if (!(bool)ImageLibrary?.Call("HasImage", "BluePrint")) ImageLibrary.Call("AddImage", "https://i.imgur.com/b48U2XA.png", "BluePrint");
            if (!(bool)ImageLibrary?.Call("HasImage", "Icon")) ImageLibrary.Call("AddImage", "https://i.imgur.com/StBTcET.png", "Icon");

            PrintError("AddImages...");
            foreach (var img in config.itemstores)
            {
                for (int i = 0; i < img.Value.Count; i++)
                {
                    if (img.Value[i].type == ItemType.КастомПредмет)
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", img.Value[i].ShortName, img.Value[i].SkinID)) ImageLibrary.Call("AddImage", $"http://rust.skyplugins.ru/getskin/{img.Value[i].SkinID}/", img.Value[i].ShortName, img.Value[i].SkinID);
                    }
                    else if (img.Value[i].type == ItemType.Команда)
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", img.Value[i].Url)) ImageLibrary.Call("AddImage", img.Value[i].Url, img.Value[i].Url);
                    }
                    else
                    {
                        if (!(bool)ImageLibrary?.Call("HasImage", img.Value[i].ShortName + 129)) ImageLibrary.Call("AddImage", $"http://rust.skyplugins.ru/getimage/{img.Value[i].ShortName}/128", img.Value[i].ShortName + 129);
                        if (!(bool)ImageLibrary?.Call("HasImage", img.Value[i].ShortName + 64)) ImageLibrary.Call("AddImage", $"http://rust.skyplugins.ru/getimage/{img.Value[i].ShortName}/64", img.Value[i].ShortName + 64);
                    }
                    yield return new WaitForSeconds(0.04f);

                }
            }
            yield return 0;
        }

        #endregion

        [ConsoleCommand("Money_give")]
        void ShopMoneyGive(ConsoleSystem.Arg arg)
        {
            switch (arg.Args[0])
            {
                case "give":
                    {
                        ulong userID = ulong.Parse(arg.Args[1]);
                        int Balance = Convert.ToInt32(arg.Args[2]);
                        BalanceData[userID] += Balance;
                        Puts($"Игроку {userID} успешно зачислено {Balance} монет");
                        break;
                    }
                case "remove":
                    {
                        ulong userID = ulong.Parse(arg.Args[1]);
                        int Balance = Convert.ToInt32(arg.Args[2]);
                        BalanceData[userID] -= Balance;
                        Puts($"Игроку {userID} успешно снято {Balance} монет");
                        break;
                    }
            }
        }

        [ConsoleCommand("Shop_CMD")]
        private void CMD_ShopToggle(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null) return;

            switch (arg.Args[0])
            {
                case "CategoryGoTo":
                    ShopMainUI(player, Convert.ToInt32(arg.Args[1]), 0, true);
                    break;
                case "page":
                    ShopMainUI(player, Convert.ToInt32(arg.Args[1]), Convert.ToInt32(arg.Args[3]), true);
                    break;
                case "BuyItem":
                    ShopBuyItem(player, Convert.ToInt32(arg.Args[1]), Convert.ToInt32(arg.Args[2]), Convert.ToInt32(arg.Args[3]));
                    break;
                case "BuyItemGo":
                    PurchaseItem(player, Convert.ToInt32(arg.Args[1]), Convert.ToInt32(arg.Args[2]), Convert.ToInt32(arg.Args[3]));
                    break;
            }
        }

        #region UI
        #region Parent
        public static string shopmain = "SHOP_MAIN";
        #endregion

        #region GuiBuyItem


        public void ShopBuyItem(BasePlayer p, int category, int item, int page)
        {
            ItemStores itembuy = config.itemstores.ElementAt(category).Value.ElementAt(item);
            Item itemcrate = ItemManager.CreateByName(itembuy.ShortName);

            var dicsount = (itembuy.Price * GetUserDiscount(p) / 100);
            int price = (itembuy.Price - dicsount);
            string NameItem = itembuy.type == ItemType.Команда ? itembuy.Name : itembuy.type == ItemType.КастомПредмет ? itembuy.Name : itemcrate.info.displayName.english;
            var balance = config.currencyForStores.TypeBalance == "economic" ? Economics?.Call("Balance", p.userID).ToString() : config.currencyForStores.TypeBalance == "IQEconomic" ? IQEconomic?.Call("API_GET_BALANCE", p.userID).ToString() : BalanceData[p.userID].ToString();
            string Icon = itembuy.type == ItemType.Команда ? (string)ImageLibrary.Call("GetImage", itembuy.Url) : itembuy.type == ItemType.КастомПредмет ? (string)ImageLibrary.Call("GetImage", itembuy.ShortName, itembuy.SkinID) : (string)ImageLibrary.Call("GetImage", itembuy.ShortName + 64);
            #region UI

            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = "-120 -60", OffsetMax = "120 65" },
                Image = { Color = GetColor("#FFFFFF00") }
            }, shopmain, shopmain + ".BUYYES");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "-100 -100", AnchorMax = "100 100" },
                Button = { Color = "0 0 0 0", Close = shopmain + ".BUYYES" },
                Text = { Text = "" }
            }, shopmain + ".BUYYES");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "3 2", OffsetMax = "118 28" },
                Button = { Color = GetColor("#89FE98BE"), Command = $"Shop_CMD BuyItemGo {category} {item} {page}" },
                Text = { Text =lang.GetMessage("ShopSystem_UI_BUY", this, p.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, shopmain + ".BUYYES");

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-118 2", OffsetMax = "-3 28" },
                Button = { Color = GetColor("#FD8888BE"), Close = shopmain + ".BUYYES" },
                Text = { Text = lang.GetMessage("ShopSystem_UI_CLOSE", this, p.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 12 }
            }, shopmain + ".BUYYES");

            container.Add(new CuiPanel
            {
                CursorEnabled = true,
                RectTransform = { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "0 -95", OffsetMax = "240 0" },
                Image = { Color = GetColor(config.generalSetings.ButonByeSucc), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
            }, shopmain + ".BUYYES", shopmain + ".BUYYES1");

            if (itembuy.type == ItemType.Чертёж)
            {
                container.Add(new CuiElement
                {
                    Parent = shopmain + ".BUYYES1",
                    Components =
                            {
                                new CuiRawImageComponent
                                {
                                    Png = (string)ImageLibrary.Call("GetImage", "BluePrint")

                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"0 1",
                                    AnchorMax = $"0 1",
                                    OffsetMin = "3 -92",
                                    OffsetMax = "92 -3"
                                },
                            }
                });
            }

            container.Add(new CuiElement
            {
                Parent = shopmain + ".BUYYES1",
                Components =
                            {
                                new CuiRawImageComponent
                                {
                                    Png = Icon
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"0 1",
                                    AnchorMax = $"0 1",
                                    OffsetMin = "3 -92",
                                    OffsetMax = "92 -3"
                                },
                            }
            });

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "1 0", AnchorMax = "1 0", OffsetMin = "-140 3", OffsetMax = "-3 92" },
                Text = { Text = String.Format(lang.GetMessage("ShopSystem_UI_BUYITEM", this, p.UserIDString), NameItem, price, balance), FontSize = 15, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, shopmain + ".BUYYES1");

            CuiHelper.AddUi(p, container);

            #endregion
        }

        #endregion

        public void InitIcon(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, shopmain + "icon");
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Parent = "Overlay",
                Name = shopmain + "icon",
                Components =
                        {
                            new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", "Icon") },
                            new CuiRectTransformComponent { AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = config.generalSetings.ButtonIconOffsetMin, OffsetMax = config.generalSetings.ButtonIconOffsetMax }
                        }
            });

            container.Add(new CuiButton
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                Button = { Color = "0 0 0 0", Command = $"chat.say /{config.generalSetings.CommandOpenUI}" },
                Text = { Text = "" }
            }, shopmain + "icon");

            CuiHelper.AddUi(player, container);
        }

        void opencommand(BasePlayer player)
        {
            ShopMainUI(player);
        }
        void ShopMainUI(BasePlayer player, int page = 0, int ispages = 0, bool update = false)
        {
            CuiHelper.DestroyUi(player, "SHOP_UI_BG");
            CuiHelper.DestroyUi(player, shopmain + ".BUYYES");
            int discount = GetUserDiscount(player);
            var balance = config.currencyForStores.TypeBalance == "economic" ? Economics?.Call("Balance", player.userID).ToString() : config.currencyForStores.TypeBalance == "IQEconomic" ? IQEconomic?.Call("API_GET_BALANCE", player.userID).ToString() : BalanceData[player.userID].ToString();

            CuiElementContainer container = new CuiElementContainer();
            if (!update)
            {
                CuiHelper.DestroyUi(player, shopmain);
                container.Add(new CuiPanel
                {
                    CursorEnabled = true,
                    RectTransform = { AnchorMin = "0.5 0.5", AnchorMax = "0.5 0.5", OffsetMin = config.generalSetings.MainUIOffsetMin, OffsetMax = config.generalSetings.MainUIOffsetMax },
                    Image = { Color = GetColor(config.generalSetings.FonColor), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
                }, "Overlay", shopmain);

                #region Title

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0.0947 0.903", AnchorMax = "0.891 0.982" },
                    Text = { Text = lang.GetMessage("ShopSystem_UI_TITLE", this, player.UserIDString), FontSize = 40, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                }, shopmain);

                container.Add(new CuiButton
                {
                    RectTransform = { AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-140 -75", OffsetMax = "0 0" },
                    Button = { Color = "0 0 0 0", Close = shopmain },
                    Text = { Text = lang.GetMessage("ShopSystem_UI_CLOSE", this, player.UserIDString), Align = TextAnchor.MiddleCenter, FontSize = 17 }
                }, shopmain);

                #endregion

                #region Main

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "", OffsetMax = "1140 600" },
                    Image = { Color = GetColor("#292929B4") }
                }, shopmain, "SHOP_M");

                container.Add(new CuiElement
                {
                    Parent = "SHOP_M",
                    Name = "SHOP_M_a",
                    Components =
                {
                   new CuiImageComponent { Color = GetColor(config.generalSetings.Butoncategoryitem) },
                   new CuiRectTransformComponent {  AnchorMin = "0 1", AnchorMax = "0 1", OffsetMin = "2 -31", OffsetMax = "221 -2" },
                }
                });

                container.Add(new CuiElement
                {
                    Parent = "SHOP_M",
                    Name = "SHOP_M_b",
                    Components =
                {
                   new CuiImageComponent { Color = GetColor(config.generalSetings.Butoncategoryactiveitem)},
                   new CuiRectTransformComponent {  AnchorMin = "1 1", AnchorMax = "1 1", OffsetMin = "-914 -31", OffsetMax = "-2 -2" },
                }
                });

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Text = { Text = lang.GetMessage("ShopSystem_UI_CATEGORY1", this, player.UserIDString), FontSize = 18, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                }, "SHOP_M_a");

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Text = { Text = lang.GetMessage("ShopSystem_UI_CATEGORY2", this, player.UserIDString), FontSize = 18, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                }, "SHOP_M_b");

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "223 0", OffsetMax = "224 600" },
                    Image = { Color = GetColor(config.generalSetings.FonColor), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
                }, "SHOP_M");

                container.Add(new CuiPanel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "0 61", OffsetMax = "223 62" },
                    Image = { Color = GetColor(config.generalSetings.FonColor), Material = "assets/content/ui/uibackgroundblur-ingamemenu.mat" }
                }, "SHOP_M");
            }

            container.Add(new CuiPanel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "", OffsetMax = "1140 600" },
                Image = { Color = GetColor("#FFFFFF00") }
            }, shopmain, "SHOP_UI_BG");

            container.Add(new CuiLabel
            {
                RectTransform = { AnchorMin = "0 0", AnchorMax = "0 0", OffsetMin = "2 2", OffsetMax = "221 60" },
                Text = { Text = String.Format(lang.GetMessage("ShopSystem_UI_BALANCEINFO", this, player.UserIDString), balance, discount), FontSize = 15, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
            }, $"SHOP_UI_BG");

            int size = 35;
            int i = 0;
            foreach (var cfg in config.itemstores)
            {
                string color = page == i ? config.generalSetings.CategoryFonActive : config.generalSetings.CategoryFonINActive;
                container.Add(new CuiElement
                {
                    Parent = "SHOP_UI_BG",
                    Name = $"SHOP_UI_BG.{i}",
                    Components =
                    {
                         new CuiImageComponent { Color = GetColor(color) },
                         new CuiRectTransformComponent
                         {
                             AnchorMin = $"0 1",
                             AnchorMax = $"0 1",
                             OffsetMin = $"2 {-65 - i*size}",
                             OffsetMax = $"221 {-35 - i*size}"
                         },
                    }
                });

                container.Add(new CuiLabel
                {
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1", OffsetMax = "0 0" },
                    Text = { Text = $"<b>{cfg.Key}</b>", FontSize = 19, Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter }
                }, $"SHOP_UI_BG.{i}");

                if (i != page)
                {
                    container.Add(new CuiButton
                    {
                        RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                        Button = { Command = $"Shop_CMD CategoryGoTo {i}", Color = "0 0 0 0" },
                        Text = { Text = "" }
                    }, $"SHOP_UI_BG.{i}");
                }

                if (page == i)
                {
                    int a = 0;
                    int f = 0;
                    int s = 131;
                    int d = 133;
                    int itemsperpage = (cfg.Value.Count - 28 * ispages > 28 ? 28 : (cfg.Value.Count - 28 * ispages));
                    for (int sd = 0; sd < itemsperpage; sd++)
                    {
                        ItemStores ItemSale = cfg.Value.ElementAt(sd + ispages * 28);

                        container.Add(new CuiElement
                        {
                            Parent = "SHOP_UI_BG",
                            Name = $"SHOP_UI_BG.item.{f}.{a}",
                            Components =
                            {
                                new CuiImageComponent { Color = GetColor("#414141B6") },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"0 1",
                                    AnchorMax = $"0 1",

                                    OffsetMin = $"{226 + f*s} {-162 - a*d}",
                                    OffsetMax = $"{352 + f*s} {-35 - a*d}"
                                },
                            }
                        });

                        if (ItemSale.type == ItemType.Чертёж)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = $"SHOP_UI_BG.item.{f}.{a}",
                                Components =
                            {
                                new CuiRawImageComponent
                                {
                                    Png = (string)ImageLibrary.Call("GetImage", "BluePrint")
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"1 1",
                                    AnchorMax = $"1 1",
                                    OffsetMin = "-110 -95",
                                    OffsetMax = "-15 -5"
                                },
                            }
                            });
                        }

                        var trueImage = ItemSale.type == ItemType.Команда ? (string)ImageLibrary.Call("GetImage", ItemSale.Url) : ItemSale.type == ItemType.КастомПредмет ? (string)ImageLibrary.Call("GetImage", ItemSale.ShortName, ItemSale.SkinID) : (string)ImageLibrary.Call("GetImage", ItemSale.ShortName + 129);

                        container.Add(new CuiElement
                        {
                            Parent = $"SHOP_UI_BG.item.{f}.{a}",
                            Components =
                            {
                                new CuiRawImageComponent
                                {
                                    Png = trueImage
                                },
                                new CuiRectTransformComponent
                                {
                                    AnchorMin = $"1 1",
                                    AnchorMax = $"1 1",
                                    OffsetMin = "-110 -95",
                                    OffsetMax = "-15 -5"
                                },
                            }
                        });

                        #region Узнаем скидочку
                        var dicsount = (ItemSale.Price * discount / 100);
                        int price = (ItemSale.Price - dicsount);
                        #endregion

                        container.Add(new CuiLabel
                        {
                            RectTransform = { AnchorMin = $"1 0", AnchorMax = $"1 0", OffsetMin = "-125 1", OffsetMax = "0 28" },
                            Text = { Text = $"<b>x{ItemSale.Amount}\nЦена: {price.ToString()}</b>", FontSize = 11, Align = TextAnchor.MiddleCenter }
                        }, $"SHOP_UI_BG.item.{f}.{a}");

                        //container.Add(new CuiLabel
                        //{
                        //    RectTransform = { AnchorMin = $"1 0", AnchorMax = $"1 0", OffsetMin = "-207 1", OffsetMax = "0 28" },
                        //    Text = { Text = $"<b>x{ItemSale.Amount}\nЦена: {price.ToString()}</b>", FontSize = 11, Align = TextAnchor.MiddleCenter }
                        //}, $"SHOP_UI_BG.item.{f}.{a}");

                        container.Add(new CuiButton
                        {
                            RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                            Button = { Color = "0 0 0 0", Command = $"Shop_CMD BuyItem {page} {sd + ispages * 28} {ispages}" },
                            Text = { Text = "" }
                        }, $"SHOP_UI_BG.item.{f}.{a}");

                        f++;
                        if (f >= 7)
                        {
                            a++; f = 0;
                        }

                    }
                    if (cfg.Value.Count > 20)
                    {
                        if (ispages > 0)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = "SHOP_UI_BG",
                                Name = $"SHOP_UI_BG.Back",
                                Components =
                                {
                                    new CuiImageComponent
                                    {
                                        Color = GetColor(config.generalSetings.ButonPageColor), Material = "assets/content/ui/uibackgroundblur.mat"
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = $"0 0",
                                        AnchorMax = $"0 0",
                                        OffsetMin = "227 2",
                                        OffsetMax = "315 30"
                                    }
                                }
                            });

                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                                Button = { Color = "0 0 0 0", Command = $"Shop_CMD page {page} -1 {ispages - 1}" },
                                Text = { Text = lang.GetMessage("ShopSystem_UI_BUTTON_BACK", this, player.UserIDString), FontSize = 15, Align = TextAnchor.MiddleCenter }
                            }, $"SHOP_UI_BG.Back");
                        }
                        if (itemsperpage >= 24)
                        {
                            container.Add(new CuiElement
                            {
                                Parent = "SHOP_UI_BG",
                                Name = $"SHOP_UI_BG.Next",
                                Components =
                                {
                                    new CuiImageComponent
                                    {
                                        Color = GetColor(config.generalSetings.ButonPageColor), Material = "assets/content/ui/uibackgroundblur.mat"
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = $"1 0",
                                        AnchorMax = $"1 0",
                                        OffsetMin = "-90 2",
                                        OffsetMax = "-2 30"
                                    }
                                }
                            });

                            container.Add(new CuiButton
                            {
                                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                                Button = { Color = "0 0 0 0", Command = $"Shop_CMD page {page} -1 {ispages + 1}" },
                                Text = { Text = lang.GetMessage("ShopSystem_UI_BUTTON_NEXT", this, player.UserIDString), FontSize = 15, Align = TextAnchor.MiddleCenter }
                            }, $"SHOP_UI_BG.Next");
                        }
                    }
                }
                i++;
            }
            #endregion
            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region help

        void Log(string msg, string file = "log")
        {
            LogToFile(file, $"[{DateTime.Now}] {msg}", this);
        }

        public void SendChat(BasePlayer player, string Message, Chat.ChatChannel channel = Chat.ChatChannel.Global)
        {
            if (IQChat)
                IQChat?.Call("API_ALERT_PLAYER", player, Message, lang.GetMessage("ShopSystem_UI_TITLE", this, player.UserIDString));
            else player.SendConsoleCommand("chat.add", channel, 0, Message);
        }
        private static string GetColor(string hex)
        {
            if (string.IsNullOrEmpty(hex))
            {
                hex = "#FFFFFFFF";
            }

            var str = hex.Trim('#');

            if (str.Length == 6)
                str += "FF";

            if (str.Length != 8)
            {
                throw new Exception(hex);
                throw new InvalidOperationException("Cannot convert a wrong format.");
            }

            var r = byte.Parse(str.Substring(0, 2), NumberStyles.HexNumber);
            var g = byte.Parse(str.Substring(2, 2), NumberStyles.HexNumber);
            var b = byte.Parse(str.Substring(4, 2), NumberStyles.HexNumber);
            var a = byte.Parse(str.Substring(6, 2), NumberStyles.HexNumber);

            Color color = new Color32(r, g, b, a);

            return string.Format("{0:F2} {1:F2} {2:F2} {3:F2}", color.r, color.g, color.b, color.a);
        }

        private int GetUserDiscount(BasePlayer player)
        {
            int Discounts = 0;
            foreach (var Discount in config.discountStores.DiscountPerm)
            {
                if (permission.UserHasPermission(player.UserIDString, Discount.Key))
                    if (Discounts < Discount.Value)
                        Discounts = Discount.Value;
            }

            return Discounts;
        }

        #endregion
    }
}


// --- End of file: ShopSystemRevolution.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/PrefabSniffer.cs ---
// --- Original Local Path: KualaRust/PrefabSniffer.cs ---

using Oxide.Core.Libraries.Covalence;
using System.Collections.Generic;
using UnityEngine;

// TODO: Fix only grabbing fx based on prefab name: not if they are playable on the client

namespace Oxide.Plugins
{
    [Info("Prefab Sniffer", "Wulf/lukespragg", "1.2.2", ResourceId = 1938)]
    [Description("Sniffs the game files for prefab file locations")]
    public class PrefabSniffer : CovalencePlugin
    {
        private const string commandUsage = "Usage: prefabs <build, find, fx, or all> [keyword]";

        private Dictionary<string, Object> files;
        private GameManifest.PooledString[] manifest;

        private void OnServerInitialized()
        {
            files = FileSystemBackend.cache;
            manifest = GameManifest.Current.pooledStrings;
        }

        [Command("prefab", "prefabs")]
        private void PrefabsCommand(IPlayer player, string command, string[] args)
        {
            if (args.Length == 0)
            {
                player.Reply(commandUsage);
                return;
            }

            List<string> resourcesList = new List<string>();
            string argName = "";

            switch (args[0].ToLower())
            {
                case "find":
                    if (args.Length > 2) PrintWarning("Usage: prefabs find <keyword>");
                    foreach (GameManifest.PooledString asset in manifest)
                    {
                        if (!asset.str.Contains(args[1]) || !asset.str.EndsWith(".prefab")) continue;

                        resourcesList.Add(asset.str);
                    }
                    argName = "find";
                    break;

                case "build":
                    foreach (string asset in files.Keys)
                    {
                        if ((!asset.StartsWith("assets/content/")
                            && !asset.StartsWith("assets/bundled/")
                            && !asset.StartsWith("assets/prefabs/"))
                            || !asset.EndsWith(".prefab")) continue;

                        if (asset.Contains(".worldmodel.")
                            || asset.Contains("/fx/")
                            || asset.Contains("/effects/")
                            || asset.Contains("/build/skins/")
                            || asset.Contains("/_unimplemented/")
                            || asset.Contains("/ui/")
                            || asset.Contains("/sound/")
                            || asset.Contains("/world/")
                            || asset.Contains("/env/")
                            || asset.Contains("/clothing/")
                            || asset.Contains("/skins/")
                            || asset.Contains("/decor/")
                            || asset.Contains("/monument/")
                            || asset.Contains("/crystals/")
                            || asset.Contains("/projectiles/")
                            || asset.Contains("/meat_")
                            || asset.EndsWith(".skin.prefab")
                            || asset.EndsWith(".viewmodel.prefab")
                            || asset.EndsWith("_test.prefab")
                            || asset.EndsWith("_collision.prefab")
                            || asset.EndsWith("_ragdoll.prefab")
                            || asset.EndsWith("_skin.prefab")
                            || asset.Contains("/clutter/")) continue;

                        GameObject go = GameManager.server.FindPrefab(asset);
                        if (go?.GetComponent<BaseEntity>() != null) resourcesList.Add(asset);
                    }
                    argName = "build";
                    break;

                case "fx":
                    foreach (GameManifest.PooledString asset in manifest)
                    {
                        if ((!asset.str.StartsWith("assets/content/")
                            && !asset.str.StartsWith("assets/bundled/")
                            && !asset.str.StartsWith("assets/prefabs/"))
                            || !asset.str.EndsWith(".prefab")) continue;

                        if (asset.str.Contains("/fx/")) resourcesList.Add(asset.str);
                    }
                    argName = "fx";
                    break;

                case "all":
                    foreach (GameManifest.PooledString asset in manifest) resourcesList.Add(asset.str);
                    argName = "all";
                    break;

                default:
                    player.Reply(commandUsage);
                    break;
            }

            if (!string.IsNullOrEmpty(argName))
            {
                for (int i = 0; i < resourcesList.Count - 1; i++)
                {
                    player.Reply($"{i} - {resourcesList[i]}");
                    LogToFile(argName, $"{i} - {resourcesList[i]}", this);
                }

                player.Reply("Prefab results saved to the oxide/logs folder");
            }
        }
    }
}

// --- End of file: PrefabSniffer.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/KualaRust/JustSmelt.cs ---
// --- Original Local Path: KualaRust/JustSmelt.cs ---

﻿using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using ru = Oxide.Game.Rust;

namespace Oxide.Plugins
{
    [Info("JustSmelt", "fermens#8767", "0.0.1")]
    class JustSmelt : RustPlugin
    {
        #region Config
        private PluginConfig config;
        protected override void LoadDefaultConfig()
        {
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        private class PluginConfig
        {
            [JsonProperty("Кулдавн")]
            public float cooldown;

            [JsonProperty("Чат команда")]
            public string command;

            [JsonProperty("Переплавлять дерево?")]
            public bool wood;

            [JsonProperty("Сообщения")]
            public Dictionary<string, string> messages;

            public static PluginConfig DefaultConfig()
            {
                return new PluginConfig()
                {
                    cooldown = 300f,
                    command = "smelt",
                    wood = true,
                    messages = new Dictionary<string, string>
                    {
                        {"M.COOLDOWN", "<color=#00FF00>[Kuala Smelt]</color>  Переплавка инвентаря находится на перезарядке подождите: {0} сек."},
                        {"M.PERM", "<color=#00FF00>[Kuala Smelt]</color> У вас нет разрешения на использование <color=#00FF00>lova smelt</color>." },
                        {"M.INV", "<color=#00FF00>[Kuala Smelt]</color> Твой инвентарь переплавлен <color=green>successfully</color>." }
                    }
                };
            }
        }
        #endregion

        #region Initialize
        const string perminsta = "Kualasmelt.instant";
        const string permcommand = "Kualasmelt.command";
        static Dictionary<ulong, float> cooldowns = new Dictionary<ulong, float>();
        static ItemDefinition coal;

        private void OnServerInitialized()
        {
            permission.RegisterPermission(perminsta, this);
            permission.RegisterPermission(permcommand, this);
            Interface.Oxide.GetLibrary<ru.Libraries.Command>(null).AddChatCommand(config.command, this, "SmeltCmd");
            if (config.wood) coal = ItemManager.FindItemDefinition(-1938052175);
        }
        #endregion

        #region Gathering
        /* private void OnItemAddedToContainer(ItemContainer container, Item item)
         {
             var player = container.GetOwnerPlayer();
             if (player == null || !permission.UserHasPermission(player.UserIDString, perminsta)) return;
             SmeltIt(player, item);
         }*/

        private object OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            var player = entity.ToPlayer();
            if (player == null || !permission.UserHasPermission(player.UserIDString, perminsta)) return null;
            return SmeltIt(player, item);
        }

        private object OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (!permission.UserHasPermission(player.UserIDString, perminsta)) return null;
            return SmeltIt(player, item);
        }

        private void OnCollectiblePickup(Item item, BasePlayer player)
        {
            if (!permission.UserHasPermission(player.UserIDString, perminsta)) return;
            SmeltIt(player, item);
        }
        #endregion

        #region Command
        private void SmeltCmd(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, permcommand))
            {
                SendReply(player, config.messages["M.PERM"]);
                return;
            }

            float cooldown;
            if (cooldowns.TryGetValue(player.userID, out cooldown) && cooldown > UnityEngine.Time.realtimeSinceStartup)
            {
                SendReply(player, config.messages["M.COOLDOWN"], cooldowns[player.userID] - (int)UnityEngine.Time.realtimeSinceStartup);
                return;
            }

            foreach (Item item in player.inventory.AllItems()) SmeltIt(player, item);

            SendReply(player, config.messages["M.INV"]);
            cooldowns[player.userID] = (int)UnityEngine.Time.realtimeSinceStartup + config.cooldown;
        }
        #endregion

        #region Smelt
        private object SmeltIt(BaseEntity player, Item item)
        {
            if (item.info.itemid == -151838493 && config.wood) return GiveToPlayer(player, item, coal);
            else
            {
                ItemModCookable cookable = item.info.GetComponent<ItemModCookable>();
                if (cookable == null) return null;
                return GiveToPlayer(player, item, cookable.becomeOnCooked);
            }
        }

        private object GiveToPlayer(BaseEntity player, Item item, ItemDefinition def)
        {
            Item newItem = ItemManager.Create(def, item.amount);
            if (newItem == null) return null;
            item.Remove(0.0f);
            player.GiveItem(newItem, BaseEntity.GiveItemReason.ResourceHarvested);
            return true;
        }
        #endregion
    }
}

// --- End of file: JustSmelt.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BeeRust/IQBreakingTools.cs ---
// --- Original Local Path: BeeRust/IQBreakingTools.cs ---

using Oxide.Core;
using System.Collections.Generic;
using System;
using Newtonsoft.Json;
		   		 		  						  	   		  	  			  	  			  	   		  		  
namespace Oxide.Plugins
{
    [Info("IQBreakingTools", "Mercury", "0.0.9")]
    [Description("Что этот Mercury себе позволяет,он уже заебал клепать хуйню")]
    class IQBreakingTools : RustPlugin
    {
        private const String IQTools = "iqbreakingtools.tools";
        void OnLoseCondition(Item item, ref float amount)
        {
            if (item == null) return;
            if (config.BlackListShortname.Contains(item.info.shortname)) return;
            if (config.BlackList.Contains(item.skin)) return;
		   		 		  						  	   		  	  			  	  			  	   		  		  
            BasePlayer player = item.GetOwnerPlayer();
            if (player == null) return;
            if (!player.UserIDString.IsSteamId()) return;
            if (config.RaidBlockBreaking && IsRaidBlocked(player)) return;
            if (config.StartLoseNoOwner && player.IsBuildingBlocked()) return;

            ItemCategory ItemCategory = item.info.category; //ItemManager.FindItemDefinition(item.info.itemid).category;

            if (ItemCategory == ItemCategory.Weapon && permission.UserHasPermission(player.UserIDString, IQWeapon)
                || ItemCategory == ItemCategory.Attire && permission.UserHasPermission(player.UserIDString, IQAttire)
                || ItemCategory == ItemCategory.Tool && permission.UserHasPermission(player.UserIDString, IQTools))
            {
                if (!config.BreakingProcesses.useProcessBreaking)
                    amount = 0;
                else amount -= amount / config.BreakingProcesses.ProcessBreakingAmount;
            }
            else if (permission.UserHasPermission(player.UserIDString, IQBreakingToolsPermission))
                if (config.ToolsList.Contains(item.info.shortname))
                {
                    if (!config.BreakingProcesses.useProcessBreaking)
                        amount = 0;
                    else amount -= amount / config.BreakingProcesses.ProcessBreakingAmount;
                }
        }
        private const String IQWeapon = "iqbreakingtools.weapon";

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintWarning("Ошибка #2144963" + $"чтения конфигурации 'oxide/config/{Name}', создаём новую конфигурацию!!");
                LoadDefaultConfig();
            }
            NextTick(SaveConfig);
        }

        void RegisteredPermissions()
        {         
            permission.RegisterPermission(IQBreakingToolsPermission, this);
            permission.RegisterPermission(IQTools, this);
            permission.RegisterPermission(IQWeapon, this);
            permission.RegisterPermission(IQAttire, this);
            PrintWarning("Permissions - completed");
        }

            
        
        private static Configuration config = new Configuration();
        private const String IQAttire = "iqbreakingtools.attire";

        
                private void OnServerInitialized()
        {
            RegisteredPermissions();
        }
        
                
        
        private const String IQBreakingToolsPermission = "iqbreakingtools.use";
        protected override void SaveConfig() => Config.WriteObject(config);
        private class Configuration
        {
            [JsonProperty("Список предметов,которые не будут ломаться или на них будет замедленная поломка (shortname)")]
            public List<String> ToolsList = new List<String>();
            internal class BreakingProcess
            {
                [JsonProperty("На сколько срезать поломку (Пример : в 3 раза)")]
                public Single ProcessBreakingAmount;
                [JsonProperty("Включить замедленную поломку(неломайка заменится на замедленную поломку)")]
                public Boolean useProcessBreaking;
            }
            [JsonProperty("Отключать неломайку если у игрока рейдблок")]
            public Boolean RaidBlockBreaking;
            [JsonProperty("Настройка замедленной поломки")]
            public BreakingProcess BreakingProcesses = new BreakingProcess();

            public static Configuration GetNewConfiguration()
            {
                return new Configuration
                {
                    StartLoseNoOwner = false,
                    RaidBlockBreaking = false,
                    BlackListShortname = new List<String>()
                    {
                        "jackhammer",
                        "chainsaw"
                    },
                    ToolsList = new List<String>
                    {
                        "rifle.ak",
                        "jackhammer",
                        "hatchet"
                    },
                    BlackList = new List<UInt64>
                    {
                        1337228,
                        2281337
                    },
                    BreakingProcesses = new BreakingProcess
                    {
                        useProcessBreaking = false,
                        ProcessBreakingAmount = 3,
                    }
                };
            }
            [JsonProperty("Список исключенных SkinID(Вещи с этим SkinID будут ломаться и на них не будет действовать замедленная поломка! Для кастомных предметов)")]
            public List<UInt64> BlackList = new List<UInt64>();
            [JsonProperty("Отключать неломайку если игрок атакует постройки в чужой билде(не авторизованный в шкафу)")]
            public Boolean StartLoseNoOwner;
            [JsonProperty("Список предметов исключений,которые БУДУТ ломаться [исключения в случае если вы выдавали права на категорию, но нужно исключить определенный предмет] (shortname)")]
            public List<String> BlackListShortname = new List<String>();
        }
        /// <summary>
        /// Обновление 0.0.x
        /// - Добавлен список исключений для предметов, которые будут категорично ломаться (даже если выданы права на категорию)
        /// - Корректировка метода с замедленной поломкой
        /// </summary>

        
                public Boolean IsRaidBlocked(BasePlayer player)
        {
            String ret = Interface.Call("CanTeleport", player) as String;
            if (ret != null)
                return true;
            else return false;
        }

        protected override void LoadDefaultConfig() => config = Configuration.GetNewConfiguration();
            }
}


// --- End of file: IQBreakingTools.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BeeRust/BAutoChat.cs ---
// --- Original Local Path: BeeRust/BAutoChat.cs ---

﻿using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Random = Oxide.Core.Random;

namespace Oxide.Plugins
{
    [Info("BAutoChat", "Kotik", "0.0.1")]
    internal class BAutoChat : CovalencePlugin
    {
        void OnServerInitialized()
        {
            PrintWarning("\n-----------------------------" +
            "     \nДанный плагин был скачан с хуя мерзости" +
            "     \nС чата где ебут котика" +
            "\n-----------------------------");
        }

        private Configuration _config;
        private int _previousAdvert = -1;

        #region Hooks

        private void Loaded()
        {
            LoadConfig();
            
            Puts($"{Title} время между сообщениями {_config.AdvertInterval} минут.");
            timer.Every(_config.AdvertInterval * 60, BroadcastNextAdvert);
        }

        #endregion

        #region Helper Methods

        private void BroadcastNextAdvert()
        {
            if (_config.Messages.Count == 0)
                return;

            int advert = GetNextAdvertIndex();

            server.Broadcast(_config.Messages[advert]);

            if (_config.BroadcastToConsole)
                Puts(Formatter.ToPlaintext(_config.Messages[advert]));

            _previousAdvert = advert;
        }

        private int GetNextAdvertIndex()
        {

            int advert;
            if (_config.Messages.Count > 1)
            {
                do advert = Random.Range(0, _config.Messages.Count);
                while (advert == _previousAdvert);
            }
            else
                advert = 0;

            return advert;
        }

        #endregion

        #region Configuration

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<Configuration>();
            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            _config = Configuration.CreateDefault();
        }

        protected override void SaveConfig() => Config.WriteObject(_config);

        private class Configuration
        {
            [JsonProperty("Сообщения")]
            public List<string> Messages { get; private set; }

            [JsonProperty("К/д между сообщениями")]
            public float AdvertInterval { get; private set; }  = 10;

            [JsonProperty("Выводить ли сообщения в консоль на консоль")]
            public bool BroadcastToConsole { get; private set; } = true;

            [JsonProperty("Аватарки сообщений")]
            public Dictionary<ulong, string> AvatarIDs { get; private set; }


            public static Configuration CreateDefault()
            {
                return new Configuration
                {
                    Messages = new List<string>
                    {
                        "Если нужен цвет болото раста то вот <color=#9acd32>он</color>",
                        "",
                        "",
                        "",
                        "",
                        "", 
                        "",
                        ""
                    },
                 AvatarIDs = new Dictionary<ulong, string>()
                };
            }
        }

        #endregion
    }
}

// --- End of file: BAutoChat.cs ---
// --- Next file ---

// --- GitHub Source URL: https://github.com/RustyyTown/plugins/blob/main/BeeRust/BlueprintManager.cs ---
// --- Original Local Path: BeeRust/BlueprintManager.cs ---

﻿using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Blueprint Manager", "Orange", "1.1.6")]
    [Description("Manage blueprints on your server easily")]
    public class BlueprintManager : RustPlugin
    {
        #region Vars
        
        private Blueprints data = new Blueprints();
        private const string permLVL1 = "blueprintmanager.lvl1";
        private const string permLVL2 = "blueprintmanager.lvl2";
        private const string permLVL3 = "blueprintmanager.lvl3";
        private const string permAll = "blueprintmanager.all";
        private const string permDefault = "blueprintmanager.default";
        private const string permAdmin = "blueprintmanager.admin";
        
        private class Blueprints
        {
            public List<int> workbench1 = new List<int>();
            public List<int> workbench2 = new List<int>();
            public List<int> workbench3 = new List<int>();
            public List<int> allBlueprints = new List<int>();
            public List<int> defaultBlueprints = new List<int>();
        } 
        
        #endregion

        #region Oxide Hooks

        private void Init()
        {
            permission.RegisterPermission(permAll, this);
            permission.RegisterPermission(permLVL1, this);
            permission.RegisterPermission(permLVL2, this);
            permission.RegisterPermission(permLVL3, this);
            permission.RegisterPermission(permAdmin, this);
            permission.RegisterPermission(permDefault, this);
            cmd.AddConsoleCommand("blueprintmanager", this, nameof(cmdBlueprintsConsole));
        }

        private void OnServerInitialized()
        {
            CheckBlueprints();
            CheckPlayers();
        }
        
        private void OnPlayerConnected(BasePlayer player)
        {
            CheckPlayer(player);
        }

        #endregion

        #region Core
        
        private void CheckBlueprints()
        {
            foreach (var bp in ItemManager.bpList)
            {
                if (bp.userCraftable && bp.defaultBlueprint == false)
                {
                    var itemID = bp.targetItem.itemid;
                    var shortname = bp.targetItem.shortname;
                    if (config.blacklist?.Contains(shortname) ?? false)
                    {
                        continue;
                    }

                    switch (bp.workbenchLevelRequired)
                    {
                        case 0:
                        case 1:
                            data.workbench1.Add(itemID);
                            break;
                        
                        case 2:
                            data.workbench2.Add(itemID);
                            break;
                        
                        case 3:
                            data.workbench3.Add(itemID);
                            break;
                    }

                    if (config.defaultBlueprints?.Contains(shortname) ?? false)
                    {
                        data.defaultBlueprints.Add(itemID);
                    }
                    
                    data.allBlueprints.Add(itemID);
                }
            }
        }

        private void CheckPlayers()
        {
            timer.Once(1f, () =>
            {
                foreach (var player in BasePlayer.activePlayerList)
                {
                    OnPlayerConnected(player);
                }
            });
        }

        private void CheckPlayer(BasePlayer player)
        {
            var blueprints = GetBlueprints(player);
            UnlockBlueprints(player, blueprints);
        }

        private List<int> GetBlueprints(BasePlayer player)
        {
            var list = new List<int>();

            if (permission.UserHasPermission(player.UserIDString, permDefault))
            {
                list.AddRange(data.defaultBlueprints);
            }

            if (permission.UserHasPermission(player.UserIDString, permAll))
            {
                list.AddRange(data.allBlueprints);
                return list;
            }
            
            if (permission.UserHasPermission(player.UserIDString, permLVL3))
            {
                list.AddRange(data.workbench3);
            }
            
            if (permission.UserHasPermission(player.UserIDString, permLVL2))
            {
                list.AddRange(data.workbench2);
            }
            
            if (permission.UserHasPermission(player.UserIDString, permLVL1))
            {
                list.AddRange(data.workbench1);
            }

            return list;
        }

        private void UnlockBlueprints(BasePlayer player, List<int> blueprints)
        {
            var info = player.PersistantPlayerInfo;
             
            foreach (var blueprint in blueprints)
            {
                if (info.unlockedItems.Contains(blueprint) == false)
                {
                    info.unlockedItems.Add(blueprint);
                }
            }
            
            player.PersistantPlayerInfo = info;
            player.SendNetworkUpdateImmediate();
            player.ClientRPCPlayer(null, player, "UnlockedBlueprint", 0);
        } 

        private void ResetBlueprints(BasePlayer player)
        {
            var info = player.PersistantPlayerInfo;
            info.unlockedItems = new List<int>();
            player.PersistantPlayerInfo = info;
            player.SendNetworkUpdateImmediate();
            player.ClientRPCPlayer(null, player, "UnlockedBlueprint", 0);
        }
        
        private BasePlayer FindPlayer(string nameOrID)
        {
            var targets = BasePlayer.activePlayerList.Where(x => x.UserIDString == nameOrID || x.displayName.ToLower().Contains(nameOrID.ToLower())).ToArray();
            
            if (targets.Length == 0)
            {
                PrintWarning(GetMessage("No Players", nameOrID));
                return null;
            }

            if (targets.Length > 1)
            {
                PrintWarning(GetMessage("Multiple Players", targets.Select(x => x.displayName).ToSentence()));
                return null;
            }

            return targets[0];
        }

        #endregion

        #region Commands

        private void cmdBlueprintsConsole(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player != null && permission.UserHasPermission(player.UserIDString, permAdmin) == false)
            {
                Message(arg, "Permission");
                return;
            }

            var args = arg.Args;
            if (args == null || args.Length < 2)
            {
                Message(arg, "Usage");
                return;
            }

            var action = args[0].ToLower();

            var target = FindPlayer(args[1]);
            if (target == null)
            {
                return;
            }

            switch (action)
            {
                case "reset":
                    ResetBlueprints(target);
                    break;
                
                case "unlock":
                    if (args.Length < 3)
                    {
                        Message(arg, "Usage");
                        return;
                    }

                    var itemID = ItemManager.FindItemDefinition(args[2])?.itemid ?? 0;
                    UnlockBlueprints(target, new List<int>{itemID});
                    break;
                
                case "unlockall":
                    UnlockBlueprints(target, data.allBlueprints);
                    break;
                
                default:
                    Message(arg, "Usage");
                    return;
            }
            
            Message(arg, "Success", target.displayName);
        }

        #endregion
        
        #region Configuration 1.1.2

        private static ConfigData config;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Blacklist")]
            public List<string> blacklist = new List<string>();
            
            [JsonProperty(PropertyName = "Default blueprints")]
            public List<string> defaultBlueprints = new List<string>();
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                blacklist = new List<string>
                {
                    "shortname",
                    "shortname",
                    "shortname",
                },
                defaultBlueprints = new List<string>
                {
                   "shortname",
                   "shortname",
                   "shortname",
                }
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                
                timer.Every(10f, () =>
                {
                    PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                });
                LoadDefaultConfig();
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion
        
        #region Loc