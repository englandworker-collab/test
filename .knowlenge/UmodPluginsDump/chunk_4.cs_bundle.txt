(coptors > 0)
            {
                PrintToChat("<color=Red> [Coptor Tracker]</color>  "+coptors.ToString()+" Helicopters Have Been Removed");
            }
        }

        #endregion
    }
}

// --- End of file: CoptorTracker.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/chute ---
// --- Original File Path: C/Chute/Chute.cs ---

using Rust;
using System;
using GameTips;
using UnityEngine;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Core.Configuration;
using Oxide.Game.Rust.Cui;
using System.Collections;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Chute", "Colon Blow", "3.0.1")]
    class Chute : CovalencePlugin
    {
        // Added config options to block chute up if raid or combat blocked by NoEscape Plugin
        // Added config options for different cooldowns for chute and chuteup commands
        // Added config options for different VIP Coolodwns for chute and chuteup commands

        #region Loadup

        [PluginReference]
        Plugin NoEscape;

        static Chute _instance;
        private const string permAllowed = "chute.allowed";
        private const string permAllowedUp = "chute.up.allowed";
        private const string permNoCooldown = "chute.nocooldown";
        private const string permVIPCooldown = "chute.vipcooldown";


        private static List<ulong> coolDownList = new List<ulong>();

        static int layerMask = 1 << (int)Rust.Layer.Water | 1 << (int)Rust.Layer.World | 1 << (int)Rust.Layer.Construction | 1 << (int)Rust.Layer.Debris | 1 << (int)Rust.Layer.Default | 1 << (int)Rust.Layer.Terrain | 1 << (int)Rust.Layer.Tree | 1 << (int)Rust.Layer.Vehicle_Large | 1 << (int)Rust.Layer.Deployed;

        private void Loaded()
        {
            _instance = this;
            LoadConfig();
            LoadMessages();
            permission.RegisterPermission(permAllowed, this);
            permission.RegisterPermission(permAllowedUp, this);
            permission.RegisterPermission(permNoCooldown, this);
            permission.RegisterPermission(permVIPCooldown, this);

        }

        #endregion

        #region Localization

        private void LoadMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["noperms"] = "You don't have permission to use this command.",
                ["commandnotfound"] = "Command was not found, please try again.",
                ["undercooldown"] = "Chute Cooldown Active, please wait : ",
                ["cooldownremoved"] = "Chute Cooldown removed !! ",
                ["onground"] = "You are too close to the ground to do that !!! ",
                ["alreadymounted"] = "You are already mounted !!",
                ["raidblocked"] = "Sorry, you are Raid Blocked, you cannot do that.",
                ["combatblocked"] = "Sorry, you are Combat Blocked, you cannot do that.",
                ["readytodismount"] = "<color=red>SAFTEY RELEASED !!!</color> PRESS <color=black>[JUMP KEY]</color> again to cut parachute away.. warning you will Freefall !!!",
                ["usagemessage"] = "Use <color=black>[FWD, BACK, LEFT and RIGHT]</color> Keys to Speed UP, Slow Down and Turn\nPRESS <color=black>[JUMP KEY]</color> to cut away parachute and Free Fall !!"
            }, this);
        }

        #endregion

        #region Configuration

        private static PluginConfig config;

        private class PluginConfig
        {
            public ChuteSettings chuteSettings { get; set; }

            public class ChuteSettings
            {
                [JsonProperty(PropertyName = "Parachute - Speed - Max Forward speed allowed : ")] public float MaxParachuteFWDSpeed { get; set; }
                [JsonProperty(PropertyName = "Parachute - Lift - Max up lift force allowed : ")] public float MaxParachteLift { get; set; }
                [JsonProperty(PropertyName = "Drop Height - Altitude at which Chuteup moves player to : ")] public float ChuteDropHeight { get; set; }
                [JsonProperty(PropertyName = "Cooldown - Enable Cooldown on using any Chute command ? ")] public bool UseCooldown { get; set; }
                [JsonProperty(PropertyName = "Cooldown - Chute Command Cooldown Time (seconds) : ")] public float ChuteCoolDown { get; set; }
                [JsonProperty(PropertyName = "Cooldown - Chute Up Command Cooldown Time (seconds) : ")] public float ChuteUpCoolDown { get; set; }
                [JsonProperty(PropertyName = "Cooldown - VIP Chute Command Cooldown Time (Seconds) : ")] public float VIPChuteCoolDown { get; set; }
                [JsonProperty(PropertyName = "Cooldown - VIP Chute Up Command Cooldown Time (Seconds) : ")] public float VIPChuteUpCoolDown { get; set; }
                [JsonProperty(PropertyName = "Global - Map size offset - Moves the spawn locations farther inland so Chute and Player dont spawn at edge of map : ")] public float GlobalMapOffset { get; set; }
                [JsonProperty(PropertyName = "NoEspace - Raid Blocked  - Prevent Chute Up command if players are Raid Blocked with No Escape Plugin ? ")] public bool BlockOnRaid { get; set; }
                [JsonProperty(PropertyName = "NoEspace - Combat Blocked  - Prevent Chute Up command if players are Combat Blocked with No Escape Plugin ? ")] public bool BlockOnCombat { get; set; }
            }

            public static PluginConfig DefaultConfig() => new PluginConfig()
            {
                chuteSettings = new PluginConfig.ChuteSettings
                {
                    MaxParachuteFWDSpeed = 15f,
                    MaxParachteLift = 15f,
                    ChuteDropHeight = 500f,
                    UseCooldown = true,
                    ChuteCoolDown = 600f,
                    ChuteUpCoolDown = 1000f,
                    VIPChuteCoolDown = 300f,
                    VIPChuteUpCoolDown = 500f,
                    GlobalMapOffset = 500f,
                    BlockOnRaid = false,
                    BlockOnCombat = false,
                }
            };
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("New configuration file created!!");
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
            SaveConfig();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion

        #region Commands

        [Command("Chute")]
        private void cmdChute(IPlayer iPlayer, string command, string[] args)
        {
            var player = iPlayer.Object as BasePlayer;
            if (player && permission.UserHasPermission(player.UserIDString, permAllowed))
            {
                if (player.isMounted) { iPlayer.Message(lang.GetMessage("alreadymounted", this, iPlayer.Id)); return; }

                if (PlayerOnGround(player)) return;

                ServerMgr.Instance.StartCoroutine(ChuteProcessing(player, false));
                return;
            }
            else player.IPlayer.Message(lang.GetMessage("noperms", this, player.IPlayer.Id));
        }

        [Command("Chuteup")]
        private void cmdChuteUp(IPlayer iPlayer, string command, string[] args)
        {
            var player = iPlayer.Object as BasePlayer;
            if (player && permission.UserHasPermission(player.UserIDString, permAllowedUp))
            {
                if (player.isMounted) { iPlayer.Message(lang.GetMessage("alreadymounted", this, iPlayer.Id)); return; }

                if (IsRaidBlocked(player) || IsCombatBlocked(player)) return;

                ServerMgr.Instance.StartCoroutine(ChuteProcessing(player, true));
                return;
            }
            else player.IPlayer.Message(lang.GetMessage("noperms", this, player.IPlayer.Id));
        }



        #endregion

        #region Rust Hooks

        private bool PlayerOnGround(BasePlayer player)
        {
            if (Physics.Raycast(new Ray(player.transform.position, Vector3.down), 3f, layerMask))
            {
                player.IPlayer.Message(lang.GetMessage("onground", this, player.IPlayer.Id));
                return true;
            }
            return false;
        }

        private object CanDismountEntity(BasePlayer player, BaseMountable entity)
        {
            if (player == null || entity == null) return null;
            var isParachuting = entity.GetComponentInParent<ParachuteEntity>();
            if (isParachuting && !isParachuting.wantsDismount) return false;
            return null;
        }

        #endregion

        #region Methods

        private bool IsRaidBlocked(BasePlayer player)
        {
            if (NoEscape == null) return false;
            if (!config.chuteSettings.BlockOnRaid) return false;
            bool success = Convert.ToBoolean(NoEscape?.Call("IsRaidBlocked", player));
            if (success) player.IPlayer.Message(lang.GetMessage("raidblocked", this, player.IPlayer.Id));
            return success;
        }

        private bool IsCombatBlocked(BasePlayer player)
        {
            if (NoEscape == null) return false;
            if (!config.chuteSettings.BlockOnCombat) return false;
            bool success = Convert.ToBoolean(NoEscape?.Call("IsCombatBlocked", player));
            if (success) player.IPlayer.Message(lang.GetMessage("combatblocked", this, player.IPlayer.Id));
            return success;
        }

        private Vector3 FindRandomLocation()
        {
            Vector3 spawnpoint = new Vector3();

            float spawnline = ((ConVar.Server.worldsize) / 2) - config.chuteSettings.GlobalMapOffset;
            float yrandom = UnityEngine.Random.Range(config.chuteSettings.ChuteDropHeight * 0.75f, config.chuteSettings.ChuteDropHeight * 1.25f);
            spawnpoint = new Vector3(UnityEngine.Random.Range(-spawnline, spawnline), yrandom, UnityEngine.Random.Range(-spawnline, spawnline));
            return spawnpoint;
        }

        private IEnumerator ChuteProcessing(BasePlayer player, bool isRandom)
        {

            if (!permission.UserHasPermission(player.UserIDString, permNoCooldown))
            {
                if (config.chuteSettings.UseCooldown)
                {
                    if (coolDownList.Contains(player.userID))
                    {
                        var timeLeft = config.chuteSettings.ChuteCoolDown;
                        if (isRandom) timeLeft = config.chuteSettings.ChuteUpCoolDown;
                        if (permission.UserHasPermission(player.UserIDString, permVIPCooldown))
                        {
                            timeLeft = config.chuteSettings.VIPChuteCoolDown;
                            if (isRandom) timeLeft = config.chuteSettings.VIPChuteUpCoolDown;
                        }

                        var hasTimer1 = player.GetComponent<CooldownTimer>();
                        if (hasTimer1)
                        {
                            timeLeft = timeLeft - (hasTimer1.cooldownTimer / 15);
                        }

                        player.IPlayer.Message(lang.GetMessage("undercooldown", this, player.IPlayer.Id) + $" {timeLeft.ToString("F0")} Seconds Left.");
                        yield break;
                    }

                    coolDownList.Add(player.userID);
                    var hasTimer = player.GetComponent<CooldownTimer>();
                    if (hasTimer) { hasTimer.OnDestroy(); };

                    var addTimer = player.gameObject.AddComponent<CooldownTimer>();
                    addTimer.EnableTimer(isRandom);
                }
            }

            if (!isRandom) { OpenParachute(player); yield break; }

            RespawnAtRandom(player);
            yield return new WaitForEndOfFrame();
        }

        private void RespawnAtRandom(BasePlayer player)
        {
            if (player == null) return;
            Vector3 respawnpos = new Vector3(0f, config.chuteSettings.ChuteDropHeight, 0f);
            respawnpos = FindRandomLocation();

            MovePlayerToPosition(player, respawnpos, Quaternion.identity);
            OpenParachute(player);
        }

        private void MovePlayerToPosition(BasePlayer player, Vector3 position, Quaternion rotation)
        {
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Wounded, false);
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Unused2, false);
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Unused1, false);
            player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.transform.position = (position);
            player.transform.rotation = (rotation);
            player.StopWounded();
            player.StopSpectating();
            player.UpdateNetworkGroup();
            player.SendNetworkUpdateImmediate(false);
            player.ClearEntityQueue(null);
            player.SendFullSnapshot();
        }

        private static void DestroyAll<T>()
        {
            var objects = GameObject.FindObjectsOfType(typeof(T));
            if (objects != null)
                foreach (var gameObj in objects)
                    GameObject.Destroy(gameObj);
        }

        private void SendInfoMessage(BasePlayer player, string message, float time)
        {
            player?.SendConsoleCommand("gametip.showgametip", message);
            timer.Once(time, () => player?.SendConsoleCommand("gametip.hidegametip"));
        }

        private void Unload()
        {
            coolDownList.Clear();
            DestroyAll<ParachuteEntity>();
            DestroyAll<CooldownTimer>();
        }

        #endregion

        #region API

        private void ExternalAddPlayerChute(BasePlayer player, bool isRandom = false)
        {
            ServerMgr.Instance.StartCoroutine(ChuteProcessing(player, isRandom));
        }

        #endregion

        #region Add Parachute

        public void OpenParachute(BasePlayer player)
        {
            if (player == null) return;
            var getParent = player.GetParentEntity();
            if (getParent != null)
            {
                float fwdVel = 1f;
                var hasRigid = getParent.GetComponentInParent<Rigidbody>();
                if (hasRigid) fwdVel = hasRigid.velocity.magnitude;
                AttachParachuteEntity(player, fwdVel);
            }
            else AttachParachuteEntity(player);
        }

        private void AttachParachuteEntity(BasePlayer player, float fwdVel = 1f)
        {
            Vector3 position = player.transform.position;
            var rotation = Quaternion.Euler(new Vector3(0f, player.GetNetworkRotation().eulerAngles.y, 0f));

            DroppedItem chutePack = new DroppedItem();
            chutePack = ItemManager.CreateByItemID(476066818, 1, 0).Drop(position, Vector3.zero, rotation).GetComponent<DroppedItem>();
            chutePack.allowPickup = false;
            chutePack.CancelInvoke((Action)Delegate.CreateDelegate(typeof(Action), chutePack, "IdleDestroy"));

            var addParachutePack = chutePack.gameObject.AddComponent<ParachuteEntity>();
            addParachutePack.fwdForce = fwdVel;
            addParachutePack.SetPlayer(player);
            addParachutePack.SetInput(player.serverInput);
        }

        #endregion

        #region Parachute Entity

        public class ParachuteEntity : MonoBehaviour
        {
            Chute _instance = new Chute();
            private DroppedItem worldItem;
            private Rigidbody myRigidbody;
            private BaseEntity chair;
            private BaseMountable chairMount;
            private BaseEntity parachute;
            private BasePlayer player;

            private InputState input;

            public float fwdForce = 5f;
            public float upForce = -10f;

            private float counter = 0f;
            private bool enabled = false;
            public bool wantsDismount = false;
            private bool forceDismount = false;

            private void Awake()
            {
                worldItem = GetComponent<DroppedItem>();
                if (worldItem == null) { OnDestroy(); return; }
                myRigidbody = worldItem.GetComponent<Rigidbody>();
                if (myRigidbody == null) { OnDestroy(); return; }

                parachute = GameManager.server.CreateEntity("assets/prefabs/misc/parachute/parachute.prefab", new Vector3(), new Quaternion(), false);
                parachute.enableSaving = true;
                parachute.SetParent(worldItem, 0, false, false);
                parachute?.Spawn();
                parachute.transform.localEulerAngles += new Vector3(0, 0, 0);
                parachute.transform.localPosition += new Vector3(0f, 1.3f, -0.1f);

                string chairprefab = "assets/bundled/prefabs/static/chair.invisible.static.prefab";
                chair = GameManager.server.CreateEntity(chairprefab, new Vector3(), new Quaternion(), false);
                chair.enableSaving = true;
                chair.GetComponent<BaseMountable>().isMobile = true;
                chair.Spawn();

                chair.transform.localEulerAngles += new Vector3(0, 0, 0);
                chair.transform.localPosition += new Vector3(0f, -1f, 0f);
                chair.SetParent(parachute, 0, false, false);
                chair.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
                chair.UpdateNetworkGroup();

                chairMount = chair.GetComponent<BaseMountable>();
                if (chairMount == null) { OnDestroy(); return; }

                enabled = false;
            }

            private void OnCollisionEnter(Collision collision)
            {
                if (!enabled) return;
                if ((1 << (collision.gameObject.layer & 31) & 1084293393) > 0)
                {
                    this.OnDestroy();
                }
            }

            public void SetPlayer(BasePlayer player)
            {
                this.player = player;
                chair.GetComponent<BaseMountable>().MountPlayer(player);
                enabled = true;
                SendInfoMessage(player, _instance.lang.GetMessage("usagemessage", _instance, player.IPlayer.Id), 12f);
            }

            private void SendInfoMessage(BasePlayer player, string message, float time)
            {
                player?.SendConsoleCommand("gametip.showgametip", message);
                _instance.timer.Once(time, () => player?.SendConsoleCommand("gametip.hidegametip"));
            }

            public void SetInput(InputState input)
            {
                this.input = input;
            }

            private void FixedUpdate()
            {
                if (!enabled) return;
                if (chair == null || player == null || forceDismount || !chairMount._mounted) { OnDestroy(); return; }

                var currentPlayerPos = player.transform.position;
                var currentPos = myRigidbody.transform.position;
                var getRotAngles = myRigidbody.transform.rotation.eulerAngles;

                #region Collision Checks

                if (player != null && player.IsHeadUnderwater()) { this.OnDestroy(); return; }

                #endregion

                #region Check Player Input

                if (input.WasJustPressed(BUTTON.JUMP))
                {
                    if (wantsDismount) { forceDismount = true; OnDestroy(); return; };
                    SendInfoMessage(player, _instance.lang.GetMessage("readytodismount", _instance, player.IPlayer.Id), 8f);
                    wantsDismount = true;
                }

                // Check player input and adjust rotation accordingly
                if (input.IsDown(BUTTON.FORWARD) || input.IsDown(BUTTON.BACKWARD))
                {
                    float direction = input.IsDown(BUTTON.FORWARD) ? 1f : -1f;
                    float newRotation = getRotAngles.x + direction;
                    bool isValidRotation = newRotation > 320f || newRotation < 40f;
                    float adjustment = isValidRotation ? newRotation : worldItem.transform.rotation.eulerAngles.x;
                    myRigidbody.transform.rotation = Quaternion.Euler(adjustment, myRigidbody.transform.rotation.eulerAngles.y, myRigidbody.transform.rotation.eulerAngles.z);
                }

                if (input.IsDown(BUTTON.RIGHT) || input.IsDown(BUTTON.LEFT))
                {
                    float direction = input.IsDown(BUTTON.RIGHT) ? 1f : -1f;
                    myRigidbody.AddTorque(Vector3.up * direction, ForceMode.Acceleration);
                }

                #endregion

                #region Rotation Angle Checks

                float deltaForce = (1f + fwdForce / 10f) * Time.deltaTime;

                // If facing down, speed up and less lift, else if back slow down and more lift if fast enough
                if (getRotAngles.x == 0f)
                {
                    //...
                }
                // if parachute is angled down in front, increase fwdForce and reduce upForce
                else if (getRotAngles.x > 0f && getRotAngles.x < 180f)
                {
                    fwdForce = Mathf.MoveTowards(fwdForce, config.chuteSettings.MaxParachuteFWDSpeed, deltaForce);
                    upForce = Mathf.MoveTowards(upForce, -20f, deltaForce);
                }
                else if (getRotAngles.x == 180f)
                {
                    //...
                }
                // if parachute is angled back
                else if (getRotAngles.x > 180f && getRotAngles.x <= 379f)
                {
                    // If leaning back and going slow, slow fwd speed and reduce lift
                    if (fwdForce > 7f)
                    {
                        fwdForce = Mathf.MoveTowards(fwdForce, -1f, 2f * Time.deltaTime);
                        upForce = Mathf.MoveTowards(upForce, 10f, 10f * Time.deltaTime);
                    }
                    else
                    {
                        fwdForce = Mathf.MoveTowards(fwdForce, -1f, 3f * Time.deltaTime);
                        upForce = Mathf.MoveTowards(upForce, -10f, 4f * Time.deltaTime);
                    }
                }

                #endregion

                #region Apply Forces

                // Apply forward force
                myRigidbody.AddForce(this.transform.forward * fwdForce, ForceMode.Acceleration);

                // Apply damping force if there is any velocity
                if (myRigidbody.velocity.magnitude != 0f)
                {
                    myRigidbody.AddForce(-myRigidbody.velocity.normalized * 5f, ForceMode.Acceleration);
                }

                // Apply upward impulse if downward velocity exceeds upward force
                if (myRigidbody.velocity.y < upForce)
                {
                    myRigidbody.AddForce(Vector3.up * (upForce - myRigidbody.velocity.y), ForceMode.Impulse);
                }

                #endregion

                #region Rotation Resistance

                //Rotation Reistance Force
                if (myRigidbody.angularVelocity.y != 0f)
                {
                    myRigidbody.AddTorque(new Vector3(0f, -myRigidbody.angularVelocity.y, 0f) * 1f, ForceMode.Acceleration);
                    myRigidbody.transform.rotation = Quaternion.Euler(myRigidbody.transform.rotation.eulerAngles.x, myRigidbody.transform.rotation.eulerAngles.y, -myRigidbody.angularVelocity.y * 50f);

                }

                #endregion

                worldItem.transform.hasChanged = true;
                worldItem.SendNetworkUpdateImmediate();
                worldItem.UpdateNetworkGroup();

                player.transform.hasChanged = true;
                player.SendNetworkUpdateImmediate(false);
                player.UpdateNetworkGroup();
            }

            public void Release()
            {
                enabled = false;
                if (chair != null && chair.GetComponent<BaseMountable>().IsMounted())
                    chair.GetComponent<BaseMountable>().DismountPlayer(player, false);
                if (player != null && player.isMounted)
                    player.DismountObject();

                if (!chair.IsDestroyed) chair.Kill();
                if (!parachute.IsDestroyed) parachute.Kill();
                if (!worldItem.IsDestroyed) worldItem.Kill();
                UnityEngine.GameObject.Destroy(this.gameObject);
            }

            public void OnDestroy()
            {
                player = null;
                Release();
                GameObject.Destroy(this);
            }
        }

        #endregion

        #region Chute Cooldown Timer

        public class CooldownTimer : MonoBehaviour
        {
            private BasePlayer player;
            public float cooldownTimer;
            public float waitTime;
            private bool enabled;

            private void Awake()
            {
                player = GetComponent<BasePlayer>();
                if (player == null) { OnDestroy(); return; }

                cooldownTimer = 0f;
                waitTime = config.chuteSettings.ChuteCoolDown;
                enabled = false;
            }

            public void EnableTimer(bool isChuteUp)
            {
                if (!_instance.permission.UserHasPermission(player.UserIDString, permVIPCooldown))
                {
                    waitTime = config.chuteSettings.ChuteCoolDown;
                    if (isChuteUp) waitTime = config.chuteSettings.ChuteUpCoolDown;
                }
                else
                {
                    waitTime = config.chuteSettings.VIPChuteCoolDown;
                    if (isChuteUp) waitTime = config.chuteSettings.VIPChuteUpCoolDown;
                }
                enabled = true;
            }

            private void SendInfoMessage(BasePlayer player, string message, float time)
            {
                player?.SendConsoleCommand("gametip.showgametip", message);
                _instance.timer.Once(time, () => player?.SendConsoleCommand("gametip.hidegametip"));
            }

            private void FixedUpdate()
            {
                if (!enabled) return;
                if (cooldownTimer >= waitTime * 15f)
                {
                    coolDownList.Remove(player.userID);
                    SendInfoMessage(player, _instance.lang.GetMessage("cooldownremoved", _instance, player.IPlayer.Id), 4f);
                    OnDestroy();
                }
                cooldownTimer++;
            }

            public void OnDestroy()
            {
                GameObject.Destroy(this);
            }
        }

        #endregion
    }
}

// --- End of file: Chute.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/xmas-mini ---
// --- Original File Path: X/XmasMini/XmasMini.cs ---

using UnityEngine;
using Newtonsoft.Json;
using System.Linq;
using System;

namespace Oxide.Plugins
{
    [Info("Xmas Mini", "The Friendly Chap", "1.0.4")]
    [Description("Spawns Christmas lights on the minicopter. Merry X-Mas.")]
    class XmasMini : RustPlugin
    {
        #region Defines
        const string prefabName = "assets/prefabs/misc/xmas/christmas_lights/xmas.lightstring.deployed.prefab";
        private static readonly Vector3 prefabPosition = new Vector3(0.08f, 0.21f, 0.6f);
        private static readonly Quaternion prefabRotation = Quaternion.Euler(180, 90, 180);
        private static readonly Vector3 prefabPosition2 = new Vector3(0.0f, 0.65f, -1.2f);
        private static readonly Quaternion prefabRotation2 = Quaternion.Euler(180, 90, 178);
        #endregion

        #region Hooks
        void OnEntitySpawned(BaseEntity entity)
        {
            if (entity is Minicopter)
            {
                Setup(entity as Minicopter);
            }
        }
        #endregion

        #region Functions
        public void Setup(Minicopter minicopter)
        {
            SpawnLights(minicopter, prefabPosition, prefabRotation);
            SpawnLights(minicopter, prefabPosition2, prefabRotation2);
        }

void SpawnLights(Minicopter minicopter, Vector3 position, Quaternion rotation)
{
    // Calculate the final rotation by combining the Minicopter's rotation with the prefabRotation
    Quaternion finalRotation = minicopter.transform.rotation * rotation;

    // Create the lights entity
    BaseEntity lightsEntity = GameManager.server.CreateEntity(prefabName, minicopter.transform.position, finalRotation);
    if (lightsEntity == null) return;

    // Set the Minicopter as the parent
    lightsEntity.SetParent(minicopter, true);

    // Set the local position relative to the Minicopter
    lightsEntity.transform.localPosition = position;

    // Spawn the entity
    lightsEntity.Spawn();
}
        #endregion
    }
}


// --- End of file: XmasMini.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/xperience ---
// --- Original File Path: X/XPerience/XPerience.cs ---

﻿/***********************************************************************************************************************/
/*** DO NOT edit this file! Edit the files under `oxide/config` and/or `oxide/lang`, created once plugin has loaded. ***/
/*** Please note, support cannot be provided if the plugin has been modified. Please use a fresh copy if modified.   ***/
/***********************************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Core.Database;
using Oxide.Core.Libraries.Covalence;
using Oxide.Plugins.XPerienceEx;
using Oxide.Game.Rust.Cui;
using Rust;
using UnityEngine;
using Random = UnityEngine.Random;
using WebSocketSharp;
using Facepunch;
using Facepunch.Math;
using ConVar;
using System.IO;
using System.Net;

namespace Oxide.Plugins
{
    [Info("XPerience", "MACHIN3", "1.8.800")]
    [Description("Player level system with xp, stats, and skills")]
    public class XPerience : RustPlugin
    {
        public const string version = "1.8.800";

        #region Update Log
        /*****************************************************
		【 𝓜𝓐𝓒𝓗𝓘𝓝𝓔 】
        Website: https://www.rustlevels.com/XPerience/
        Discord: http://discord.rustlevels.com/

        ----------------------
        ✯ version 1.8.8
        ----------------------

        ✯ Fix for Rust update 12/5/24

        Notes:
            * Please post bugs or issues in our discord.

         *****************************************************/
        #endregion

        #region Refrences
        [PluginReference]
        private readonly Plugin XPerienceAddon, WeaponMechanics, KillRecords, Economics, ServerRewards, ImageLibrary, TeaModifiers, BetterChat, ColouredChat, IQChat, Backpacks, RaidableBases, ZoneManager, PersonalAnimal, SkinBox, BuildingGrades, ItemRetriever, BotReSpawn, NeverWear, Cooking, EventHelper, SurvivalArena, MonumentOwner, Triangulation;
        #endregion

        #region Fields
        private XPData _xpData;
        private DailyData _dailyData;
        private LootData _lootData;
        private CorpseData _corpseData;
        private HorseData _horseData;
        private WeaponData _weaponData;
        private BoatData _boatData;
        private VehicleData _vehicleData;
        private MinicopterData _minicopterData;
        private SnowmobData _snowmobData;
        private SmithyData _smithyData;
        private ElectricianData _electricianData;
        private HeliHits _heliHits;
        private DynamicConfigFile _XPerienceData;
        private DynamicConfigFile _DailyXPerienceData;
        private DynamicConfigFile _LootContainData;
        private DynamicConfigFile _CorpseContainData;
        private DynamicConfigFile _HorseData;
        private DynamicConfigFile _WeaponData;
        private DynamicConfigFile _BoatData;
        private DynamicConfigFile _VehicleData;
        private DynamicConfigFile _MinicopterData;
        private DynamicConfigFile _SnowmobData;
        private DynamicConfigFile _SmithyData;
        private DynamicConfigFile _ElectricianData;
        private Dictionary<string, XPRecord> _xperienceCache;
        private Dictionary<string, DailyRecord> _dailyxperienceCache;
        private Dictionary<ulong, Loot> _lootCache;
        private Dictionary<ulong, Corpse> _corpseCache;
        private Dictionary<ulong, Horse> _horseCache;
        private Dictionary<ulong, Weapon> _weaponCache;
        private Dictionary<ulong, Boat> _boatCache;
        private Dictionary<ulong, Vehicle> _vehicleCache;
        private Dictionary<ulong, MiniCopterP> _minicopterCache;
        private Dictionary<ulong, Snowmob> _snowmobCache;
        private Dictionary<string, SmithyD> _smithyCache;
        private Dictionary<ulong, ElectricianD> _electricianCache;
        private Dictionary<ulong, Heli> _heliCache;
        public Configuration config;
        private static Configuration configData;
        private static readonly RNGCryptoServiceProvider _generator = new RNGCryptoServiceProvider();
        private const string Admin = "xperience.admin";
        private const string VIP = "xperience.vip";
        private const string PermMentality = "xperience.mentality";
        private const string PermDexterity = "xperience.dexterity";
        private const string PermMight = "xperience.might";
        private const string PermCaptaincy = "xperience.captaincy";
        private const string PermWeaponry = "xperience.weaponry";
        private const string PermNinjary = "xperience.Ninjary";
        private const string PermWoodCutter = "xperience.woodcutter";
        private const string PermSmithy = "xperience.smithy";
        private const string PermMiner = "xperience.miner";
        private const string PermForager = "xperience.forager";
        private const string PermHunter = "xperience.hunter";
        private const string PermFisher = "xperience.fisher";
        private const string PermCrafter = "xperience.crafter";
        private const string PermFramer = "xperience.framer";
        private const string PermMedic = "xperience.medic";
        private const string PermScavenger = "xperience.scavenger";
        private const string PermElectrician = "xperience.electrician";
        private const string PermDemolitionist = "xperience.demolitionist";
        private const string PermTamer = "xperience.tamer";
        private const string PermXPBoost = "xperience.xpboost";
        private readonly Hash<ulong, double> _notifyCooldowns = new Hash<ulong, double>();
        private readonly Hash<ulong, double> _buildCooldowns = new Hash<ulong, double>();
        private readonly Hash<ulong, double> _craftCooldowns = new Hash<ulong, double>();
        private readonly Hash<ulong, int> _TopUIPage = new Hash<ulong, int>();
        private Timer DashPanelTimer;
        private Timer _helitracker;
        private double CurrentTime => DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
        private bool _isXPReady;
        private bool _isRestart = true;
        private int _imageLibraryCheck = 0;
        private Dictionary<string, string> _xperienceImageList;
        private Dictionary<string, string> _CheckImageList;
        private Dictionary<string, string> _CheckImageListReload;
        public static class RandomNumber
        {
            private static readonly RNGCryptoServiceProvider _generator = new RNGCryptoServiceProvider();
            public static int Between(int minimumValue, int maximumValue)
            {
                byte[] randomNumber = new byte[1];
                _generator.GetBytes(randomNumber);
                double asciiValueOfRandomCharacter = Convert.ToDouble(randomNumber[0]);
                double multiplier = Math.Max(0, (asciiValueOfRandomCharacter / 255d) - 0.00000000001d);
                int range = maximumValue - minimumValue + 1;
                double randomValueInRange = Math.Floor(multiplier * range);
                return (int)(minimumValue + randomValueInRange);
            }
        }
        #endregion

        #region Config
        public class Configuration : SerializableConfiguration
        {
            [JsonProperty("Player Chat Commands")]
            public PlayerChatCommands playerchatCommands = new PlayerChatCommands();
            [JsonProperty("Admin Chat Commands")]
            public AdminChatCommands adminchatCommands = new AdminChatCommands();
            [JsonProperty("Player Info Box")]
            public PlayerProfileSettings playerprofilesettings = new PlayerProfileSettings();
            [JsonProperty("Default Options")]
            public DefaultOptions defaultOptions = new DefaultOptions();
            [JsonProperty("Sound Effects")]
            public SoundEffects soundEffects = new SoundEffects();
            [JsonProperty("UI Text Colors")]
            public UITextColor uitextColor = new UITextColor();
            [JsonProperty("Image Icons")]
            public ImageIcons imageicons = new ImageIcons();
            [JsonProperty("XP - Level Config")]
            public XpLevel xpLevel = new XpLevel();
            [JsonProperty("Daily Timer Config")]
            public DailyTimer dailytimer = new DailyTimer();
            [JsonProperty("Daily XP Limit Config")]
            public DailyXpLimit dailyxpLimit = new DailyXpLimit();
            [JsonProperty("Daily Reset Limit Config")]
            public DailyResetLimit dailyresetLimit = new DailyResetLimit();
            [JsonProperty("XP - Level Ranks")]
            public XpLevelRanks xpLevelRanks = new XpLevelRanks();
            [JsonProperty("Rank Boosts")]
            public RankBoostsSettings Rankboostssettings = new RankBoostsSettings();
            [JsonProperty("Special Groups")]
            public SpecialGroups specialGroups = new SpecialGroups();
            [JsonProperty("XP - Night Bonus")]
            public NightBonus nightBonus = new NightBonus();
            [JsonProperty("XP - Gain Amounts")]
            public XpGain xpGain = new XpGain();
            [JsonProperty("XP - Gather Amounts")]
            public XpGather xpGather = new XpGather();
            [JsonProperty("XP - Building Amounts")]
            public XpBuilding xpBuilding = new XpBuilding();
            [JsonProperty("XP - Teams")]
            public XpTeams xpTeams = new XpTeams();
            [JsonProperty("XP - Mission Amounts")]
            public XpMissions xpMissions = new XpMissions();
            [JsonProperty("XP - Reducer Amounts")]
            public XpReducer xpReducer = new XpReducer();
            [JsonProperty("BonusXP - Bonus Amounts (requires KillRecords plugin)")]
            public XpBonus xpBonus = new XpBonus();
            [JsonProperty("Economics Rewards (requires Economics plugin)")]
            public XpEcon xpEcon = new XpEcon();
            [JsonProperty("Server Rewards (requires ServerRewards plugin)")]
            public SRewards sRewards = new SRewards();
            [JsonProperty("Mentality Stat")]
            public Mentality mentality = new Mentality();
            [JsonProperty("Dexterity Stat")]
            public Dexterity dexterity = new Dexterity();
            [JsonProperty("Might Stat")]
            public Might might = new Might();
            [JsonProperty("Captaincy Stat")]
            public Captaincy captaincy = new Captaincy();
            [JsonProperty("Weaponry Stat")]
            public Weaponry weaponry = new Weaponry();
            [JsonProperty("Ninjary Stat")]
            public Ninjary ninjary = new Ninjary();
            [JsonProperty("WoodCutter Skill")]
            public Woodcutter woodcutter = new Woodcutter();
            [JsonProperty("Smithy Skill")]
            public Smithy smithy = new Smithy();
            [JsonProperty("Miner Skill")]
            public Miner miner = new Miner();
            [JsonProperty("Forager Skill")]
            public Forager forager = new Forager();
            [JsonProperty("Hunter Skill")]
            public Hunter hunter = new Hunter();
            [JsonProperty("Fisher Skill")]
            public Fisher fisher = new Fisher();
            [JsonProperty("Crafter Skill")]
            public Crafter crafter = new Crafter();
            [JsonProperty("Framer Skill")]
            public Framer framer = new Framer();
            [JsonProperty("Medic Skill")]
            public Medic medic = new Medic();
            [JsonProperty("Scavenger Skill")]
            public Scavenger scavenger = new Scavenger();
            [JsonProperty("Electrician Skill")]
            public Electrician electrician = new Electrician();
            [JsonProperty("Demolitionist Skill")]
            public Demolitionist demolitionist = new Demolitionist();
            [JsonProperty("Tamer Skill")]
            public Tamer tamer = new Tamer();
            [JsonProperty("SQL Info")]
            public SQL sql = new SQL();
            [JsonProperty("Backpacks Mod")]
            public BackpacksMod backpacksmod = new BackpacksMod();
            [JsonProperty("ZoneManager Mod")]
            public ZoneManagerMod zonemanagermod = new ZoneManagerMod();
            [JsonProperty("EventHelper Mod")]
            public EventHelperMod eventhelpermod = new EventHelperMod();
            [JsonProperty("SurvivalArena Mod")]
            public SurvivalArenaMod survivalarenamod = new SurvivalArenaMod();
            [JsonProperty("Raidable Bases")]
            public RaidableBasesMod raidablebasesmod = new RaidableBasesMod();
        }
        public class PlayerChatCommands
        {
            public string openplayerstats = "xpstats";
            public string openplayerstats2 = "xpprofile";
            public string openplayerstats3 = "xpinfo";
            public string showplayerstatschat = "xpstatschat";
            public string opentopplayers = "xptop";
            public string playeraddstat = "xpaddstat";
            public string playeraddskill = "xpaddskill";
            public string playerresetstats = "xpresetstats";
            public string playerresetskills = "xpresetskills";
            public string playerresetall = "xprestart";
            public string playerliveuichange = "xpliveui";
            public string openhelp = "xphelp";
        }
        public class AdminChatCommands
        {
            public string showadminhelp = "xpadminhelp";
            public string openadminpanel = "xpconfig";
            public string adminresetxperience = "xpresetall";
            public string adminxpgive = "xpgive";
            public string adminxpgiveall = "xpgiveall";
            public string adminpointsgive = "xpgivepoints";
            public string adminxptake = "xptake";
            public string adminresetplayer = "xpresetplayer";
            public string adminfixdata = "xpfix";
            public string adminitemchange = "itemchange";
            public string adminresetharvest = "resetharvest";
            public string adminresetlevelonly = "resetlevel";
            public string adminresetrankonly = "resetrank";
            public string adminresetstat = "resetstat";
            public string adminresetskill = "resetskill";
            public string adminresetlevelonlyall = "resetalllevels";
            public string adminresetrankonlyall = "resetallranks";
            public string adminexcludeplayer = "xpexcludeplayer";
            public string admingiveitem = "xpitem";
        }
        public class PlayerProfileSettings
        {
            public bool showunusedeffects = true;
            public bool useplayeravatar = true;
            public bool profilemenusettings = true;
            public bool profilemenutopplayers = true;
            public bool profilemenuraids = true;
            public bool profilemenuhelp = true;
            public bool profilemenucalculations = true;
            public bool skillshelp = true;
            public bool profilemenuwelcome = true;
            public bool playtime = true;
            public bool alivetime = true;
            public bool sleepingtime = true;
            public bool swimingtime = true;
            public bool drivingtime = true;
            public bool flyingtime = true;
            public bool boatingtime = true;
            public bool basetime = true;
            public bool monumenttime = true;
            public bool wildernesstime = true;
            public bool metersran = true;
            public bool meterswalked = true;
            public bool lastdmgrec = true;
            public bool lastdmgrecby = true;
            public bool lastdmgdelt = true;
            public bool lastdmgdeltto = true;
            public string AnchorMin = ".5 .5";
            public string AnchorMax = ".5 .5";
            public string OffsetMin = "-300 -200";
            public string OffsetMax = "300 200";
            public string InsideAnchorMin = ".03 .01";
            public string InsideAnchorMax = ".99 .97";
            public int menutype = 1;
            public bool usebgimage = true;
            public int profilebg = 0;
            public bool allowprofilebgchange = true;
            public bool usemenubgimage = false;
            public double bgfadein = 0.5;
            public double menuwidth = 0.2;
            public double menuheight = 0.75;
            public double menubuttonheight = 0.07;
            public int menubuttonfont = 11;
        }
        public class DefaultOptions
        {
            public bool userpermissions = false;
            public int liveuistatslocation = 1;
            public bool liveuistatslocationmoveable = true;
            public bool showchatprofileonconnect = true;
            public int NotifcationCooldown = 2;
            public bool restristresets = true;
            public bool allowrespec = true;
            public int resetminsstats = 60;
            public int resetminsskills = 60;
            public bool bypassadminreset = true;
            public int vipresetminstats = 30;
            public int vipresetminsskills = 30;
            public int playerfixdatatimer = 60;
            public bool disableplayerfixdata = false;
            public bool disablearmorchat = false;
            public bool hardcorenoreset = false;
            public bool allowplayersearch = true;
            public bool allowplayerreset = false;
            public int topplayersperpage = 20;
            public bool showonlinestatus = true;
            public bool useprogressivelevelicons = true;
            public bool showfuelguage = true;
            public bool showspeedometer = true;
            public int speedometertype = 1;
            public bool dropsgotoplayerinventory = true;
            public bool wipedataonnewsave = false;
            public bool enabledashpanel = true;
            public bool enableconfirmationprompt = true;
            public bool showchatnotifications = true;
            public bool showlevelinchat = true;
            public bool hidechatnotifications = false;
            public bool debugmode = false;
        }
        public class SoundEffects
        {
            public bool levelup = true;
            public bool leveldown = true;
            public bool rankup = true;
            public bool statup = true;
            public bool skillup = true;
            public bool statreset = true;
            public bool skillreset = true;
            public bool scavengerloot = true;
            public bool foragerloot = true;
            public string levelupeffect = "assets/prefabs/misc/halloween/lootbag/effects/silver_open.prefab";
            public string leveldowneffect = "assets/bundled/prefabs/fx/player/howl.prefab";
            public string rankupeffect = "assets/prefabs/misc/halloween/lootbag/effects/gold_open.prefab";
            public string statupeffect = "assets/prefabs/misc/halloween/lootbag/effects/bronze_open.prefab";
            public string skillupeffect = "assets/prefabs/misc/halloween/lootbag/effects/bronze_open.prefab";
            public string statreseteffect = "assets/bundled/prefabs/fx/player/fall-damage.prefab";
            public string skillreseteffect = "assets/bundled/prefabs/fx/player/fall-damage.prefab";
            public string scavengerlooteffect = "assets/prefabs/misc/halloween/lootbag/effects/loot_bag_upgrade.prefab";
            public string foragerlooteffect = "assets/prefabs/misc/halloween/lootbag/effects/loot_bag_upgrade.prefab";
        }
        public class UITextColor
        {
            public string defaultcolor = "white";
            public string level = "green";
            public string ranklevel = "blue";
            public string rankxp = "blue";
            public string rankname = "magenta";
            public string experience = "green";
            public string nextlevel = "yellow";
            public string remainingxp = "cyan";
            public string statskilllevels = "yellow";
            public string perks = "green";
            public string unspentpoints = "green";
            public string spentpoints = "red";
            public string pets = "cyan";
            public string mentality = "white";
            public string dexterity = "white";
            public string might = "white";
            public string captaincy = "white";
            public string weaponry = "white";
            public string Ninjary = "white";
            public string woodcutter = "white";
            public string smithy = "white";
            public string miner = "white";
            public string forager = "white";
            public string hunter = "white";
            public string fisher = "white";
            public string crafter = "white";
            public string framer = "white";
            public string medic = "white";
            public string scavenger = "white";
            public string electrician = "white";
            public string demolitionist = "white";
            public string tamer = "white";
            public string xpbar = "green";
            public string armorbar = "red";
        }
        public class ImageIcons
        {
            public bool uselocalpath = false;
            public string rootpath = Directory.GetCurrentDirectory().ToString() + "/oxide";
            public string xperiencelogo = "https://i.imgur.com/d16zkJk.png";
            public string mainicon = "https://i.imgur.com/JUwd2a8.png";
            public string mentality = "https://i.imgur.com/LQWZH34.png";
            public string dexterity = "https://i.imgur.com/iBizHFq.png";
            public string might = "https://i.imgur.com/k9p16oj.png";
            public string captaincy = "https://i.imgur.com/DNYOr3Q.png";
            public string weaponry = "https://i.imgur.com/P7Tr0rE.png";
            public string ninjary = "https://i.imgur.com/jyo4foK.png";
            public string woodcutter = "https://i.imgur.com/4tQpa6e.png";
            public string smithy = "https://i.imgur.com/wW9oaUx.png";
            public string miner = "https://i.imgur.com/B5JS3es.png";
            public string forager = "https://i.imgur.com/ohoU0Jl.png";
            public string hunter = "https://i.imgur.com/w4dlc8a.png";
            public string fisher = "https://i.imgur.com/ete67me.png";
            public string crafter = "https://i.imgur.com/vut4FVq.png";
            public string framer = "https://i.imgur.com/Rm2pezt.png";
            public string medic = "https://i.imgur.com/DoIP2aL.png";
            public string scavenger = "https://i.imgur.com/yn5F9Cx.png";
            public string electrician = "https://i.imgur.com/0l8dux1.png";
            public string demolitionist = "https://i.imgur.com/VEX9WfH.png";
            public string tamer = "https://i.imgur.com/ZnKAIAR.png";
            public string chicken = "https://i.imgur.com/qJYzAZ6.png";
            public string boar = "https://i.imgur.com/ou1DgxE.png";
            public string stag = "https://i.imgur.com/CwACyuG.png";
            public string wolf = "https://i.imgur.com/J18C2Je.png";
            public string bear = "https://i.imgur.com/kTbD3B1.png";
            public string polarbear = "https://i.imgur.com/Shk1sza.png";
            public string archery = "https://i.imgur.com/qdm8AWg.png";
            public string wizardry = "https://i.imgur.com/aNuEdni.png";
            public string online = "https://i.imgur.com/WafMLkk.png";
            public string offline = "https://i.imgur.com/QtbFqQz.png";
            public string backpack = "https://i.imgur.com/zJbJpwx.png";
            public string xp = "https://i.imgur.com/u46vNfo.png";
            public string level = "https://i.imgur.com/2ouaBoh.png";
            public string armor = "https://i.imgur.com/mEr59mA.png";
            public string level0 = "https://i.imgur.com/7KTHgTa.png";
            public string level2 = "https://i.imgur.com/GocRCM1.png";
            public string level4 = "https://i.imgur.com/KxxRouB.png";
            public string level6 = "https://i.imgur.com/Dgy9X9P.png";
            public string level8 = "https://i.imgur.com/IYloCuJ.png";
            public string level10 = "https://i.imgur.com/Xz9ZgZ4.png";
            public string dash = "https://i.imgur.com/LLKCN1n.png";
            public string raideasy = "https://i.imgur.com/cAUlHlA.png";
            public string raidmedium = "https://i.imgur.com/Tzhbic3.png";
            public string raidhard = "https://i.imgur.com/MGNUPg0.png";
            public string raidexpert = "https://i.imgur.com/bPql6Tz.png";
            public string raidnightmare = "https://i.imgur.com/RpiC5dy.png";
            public string profilebg = "https://i.imgur.com/DdVLKsE.png";
            public string menubg = "https://i.imgur.com/DrWCba0.jpg";
            public Dictionary<int, BackgroundImgs> bgimages = new Dictionary<int, BackgroundImgs>
            {
                [0] = new BackgroundImgs
                {
                    name = "ProfileBG0",
                    url = "https://i.imgur.com/DdVLKsE.png"
                },
                [1] = new BackgroundImgs
                {
                    name = "ProfileBG1",
                    url = "https://i.imgur.com/7HH5q6x.png"
                },
                [2] = new BackgroundImgs
                {
                    name = "ProfileBG2",
                    url = "https://i.imgur.com/GWSSyba.png"
                },
                [3] = new BackgroundImgs
                {
                    name = "ProfileBG3",
                    url = "https://i.imgur.com/g6KLi7y.png"
                },
                [4] = new BackgroundImgs
                {
                    name = "ProfileBG4",
                    url = "https://i.imgur.com/LSwahsy.png"
                },
                [5] = new BackgroundImgs
                {
                    name = "ProfileBG5",
                    url = "https://i.imgur.com/c3y6F25.png"
                },
                [6] = new BackgroundImgs
                {
                    name = "ProfileBG6",
                    url = "https://i.imgur.com/uVRGq4n.png"
                },
                [7] = new BackgroundImgs
                {
                    name = "ProfileBG7",
                    url = "https://i.imgur.com/ax68Blw.png"
                },
                [8] = new BackgroundImgs
                {
                    name = "ProfileBG8",
                    url = "https://i.imgur.com/UXPKSxv.png"
                },
                [9] = new BackgroundImgs
                {
                    name = "ProfileBG9",
                    url = "https://i.imgur.com/GyEYetr.png"
                },
                [10] = new BackgroundImgs
                {
                    name = "ProfileBG10",
                    url = "https://i.imgur.com/V8yLdZi.png"
                },
                [11] = new BackgroundImgs
                {
                    name = "ProfileBG11",
                    url = "https://i.imgur.com/9SK3fSy.png"
                },
                [12] = new BackgroundImgs
                {
                    name = "ProfileBG12",
                    url = "https://i.imgur.com/pSaYR95.png"
                },
                [13] = new BackgroundImgs
                {
                    name = "ProfileBG13",
                    url = "https://i.imgur.com/b6mfm5v.png"
                },
                [14] = new BackgroundImgs
                {
                    name = "ProfileBG14",
                    url = "https://i.imgur.com/KTCl6iw.png"
                }
            };
        }
        public class BackgroundImgs
        {
            public string name;
            public string url;
        }
        public class XpLevel
        {
            public double levelstart = 25;
            public double levelmultiplier = 50;
            public int maxlevel = 500;
            public double levelxpboost = 0.05;
            public int statpointsperlvl = 1;
            public int skillpointsperlvl = 2;
            public bool alwaysearnxp = false;
            public bool fullhealth = false;
            public bool fullmetabolism = false;
        }
        public class XpLevelRanks
        {
            public bool enableresetranks = false;
            public bool resetallstatsskills = true;
            public bool allowplayerdisable = false;
            public bool increaselevelmultiplier = false;
            public double levelmultiplierincrease = 10;
            public int maxresetrank = 13;
            public bool enablerankxpboost = false;
            public double rankxpboost = 0.01;
            public bool rankstatboost = false;
            public double rankstatboostamount = 0.01;
            public int rankstatpointstart = 1;
            public int rankstatpointincrease = 1;
            public bool rankskillboost = false;
            public double rankskillboostamount = 0.01;
            public int rankskillpointstart = 2;
            public int rankskillpointincrease = 1;
            public bool keepremainingxp = true;
            public bool showtruelevelprofile = true;
            public bool showrankinchat = true;
            public bool showtruexpprofile = true;
            public bool showrankinliveui = true;
            public bool keepgrouponrank = true;
            public Dictionary<int, Ranks> ranks = new Dictionary<int, Ranks>
            {
                [0] = new Ranks
                {
                    name = "Newbie",
                    sig = "",
                    image = "https://i.imgur.com/i6M4ZmV.png",
                    group = "Newbies",
                    description = ""
                },
                [1] = new Ranks
                {
                    name = "Airman",
                    sig = "〘AMN〙",
                    image = "https://i.imgur.com/E0NeO2R.png",
                    group = "Airmans",
                    description = ""
                },
                [2] = new Ranks
                {
                    name = "Airman First Class",
                    sig = "〘A1C〙",
                    image = "https://i.imgur.com/wYL15FW.png",
                    group = "AirmanFirstClass",
                    description = ""
                },
                [3] = new Ranks
                {
                    name = "Senior Airman",
                    sig = "〘SRA〙",
                    image = "https://i.imgur.com/egqFVW5.png",
                    group = "SeniorAirman",
                    description = ""
                },
                [4] = new Ranks
                {
                    name = "Staff Sergeant",
                    sig = "〘SSGT〙",
                    image = "https://i.imgur.com/pL6jbXM.png",
                    group = "StaffSergeant",
                    description = ""
                },
                [5] = new Ranks
                {
                    name = "Technical Sergeant",
                    sig = "〘TSGT〙",
                    image = "https://i.imgur.com/XrtmWAn.png",
                    group = "TechnicalSergeant",
                    description = ""
                },
                [6] = new Ranks
                {
                    name = "Master Sergeant",
                    sig = "〘MSGT〙",
                    image = "https://i.imgur.com/muYU6lf.png",
                    group = "MasterSergeant",
                    description = ""
                },
                [7] = new Ranks
                {
                    name = "First Sergeant",
                    sig = "〘1stSGT〙",
                    image = "https://i.imgur.com/1OJ2zso.png",
                    group = "FirstSergeant",
                    description = ""
                },
                [8] = new Ranks
                {
                    name = "Senior Master Sergeant",
                    sig = "〘SMSGT〙",
                    image = "https://i.imgur.com/zmNiE20.png",
                    group = "SeniorMasterSergeant",
                    description = ""
                },
                [9] = new Ranks
                {
                    name = "Senior First Sergeant",
                    sig = "〘S1stSGT〙",
                    image = "https://i.imgur.com/1S7Z0cO.png",
                    group = "SeniorFirstSergeant",
                    description = ""
                },
                [10] = new Ranks
                {
                    name = "Chief Master Sergeant",
                    sig = "〘CMSGT〙",
                    image = "https://i.imgur.com/V6dQMJL.png",
                    group = "ChiefMasterSergeant",
                    description = ""
                },
                [11] = new Ranks
                {
                    name = "Chief First Sergeant",
                    sig = "〘C1stSGT〙",
                    image = "https://i.imgur.com/Dm6B08J.png",
                    group = "ChiefFirstSergeant",
                    description = ""
                },
                [12] = new Ranks
                {
                    name = "Command Chief Master Sergeant",
                    sig = "〘CCMSGT〙",
                    image = "https://i.imgur.com/wE5C1w8.png",
                    group = "CommandChiefMasterSergeant",
                    description = ""
                },
                [13] = new Ranks
                {
                    name = "Chief Master Sergeant of the Server",
                    sig = "〘CMSGTS〙",
                    image = "https://i.imgur.com/UdqLO7a.png",
                    group = "ChiefMasterSergeantoftheServer",
                    description = ""
                }
            };
        }
        public class RankBoostsSettings
        {
            // Stats
            #region Stats
            // Mentality
            public bool researchcost = true;
            public bool researchspeed = true;
            // Dexterity
            public bool block = true;
            public bool armor = true;
            // Captaincy
            public bool distance = true;
            //Might
            public bool meleedmg = true;
            public bool metabolism = true;
            #endregion
            // Skills
            #region Skills
            // WoodCutter
            public bool woodcuttergr = true;
            public bool woodcutterbonus = true;
            // Smithy
            public bool smithypr = true;
            public bool smithyps = true;
            public bool smithyfc = true;
            public bool smithyhqmc = true;
            public bool smithyhqma = true;
            // Miner
            public bool minergr = true;
            public bool minerbonus = true;
            public bool minermfc = true;
            public bool minerfuel = true;
            public bool minermfa = true;
            // Fisher
            public bool fisherfa = true;
            public bool fisheria = true;
            public bool fisherotr = true;
            // Forager
            public bool foragergr = true;
            public bool foragergwa = true;
            public bool foragerric = true;
            // Hunter
            public bool huntergr = true;
            public bool hunterbonus = true;
            public bool hunterdmg = true;
            public bool hunterndmg = true;
            // Crafter
            public bool crafterspeed = true;
            public bool craftercost = true;
            public bool crafterri = true;
            public bool crafterrc = true;
            public bool craftercc = true;
            public bool crafterca = true;
            // Framer
            public bool framerucost = true;
            public bool framerrcost = true;
            // Medic
            public bool medicrevivala = true;
            public bool medicrecovera = true;
            public bool medictools = true;
            // Scavenger
            public bool scavelc = true;
            public bool scavelm = true;
            public bool scavcic = true;
            public bool scavcim = true;
            #endregion
        }
        public class Ranks
        {
            public string name;
            public string sig;
            public string image;
            public string group;
            public string description;
        }
        public class SpecialGroups
        {
            public Dictionary<int, Specialgroups> specialgroups = new Dictionary<int, Specialgroups>
            {
                [0] = new Specialgroups
                {
                    groupname = "Player XP Boost",
                    permissionname = "PlayerXPBoost",
                    grouppriority = 1,
                    xpboost = 0.10,
                    dailyxplimit = 0,
                    dailystatlimitboost = 0,
                    dailyskilllimitboost = 0
                },
                [1] = new Specialgroups
                {
                    groupname = "Player Daily Limits 01",
                    permissionname = "PlayerDailyLimits01",
                    grouppriority = 2,
                    xpboost = 0,
                    dailyxplimit = 1000,
                    dailystatlimitboost = 2,
                    dailyskilllimitboost = 2
                },
                [2] = new Specialgroups
                {
                    groupname = "Player Daily Limits 02",
                    permissionname = "PlayerDailyLimits02",
                    grouppriority = 3,
                    xpboost = 0,
                    dailyxplimit = 2000,
                    dailystatlimitboost = 4,
                    dailyskilllimitboost = 4
                },
            };

        }
        public class Specialgroups
        {
            public string groupname;
            public string permissionname;
            public int grouppriority;
            public double xpboost;
            public int dailyxplimit;
            public int dailystatlimitboost;
            public int dailyskilllimitboost;
        }
        public class DailyTimer
        {
            public int dailyresettimerhours = 24;
            public DateTime lastdailyreset = DateTime.Now;
        }
        public class DailyXpLimit
        {
            public bool enabledailyxplimit = false;
            public int dailyxplimit = 5000;
            public int dailyxplimitvip = 7500;
            public int limitmultipliertype = 1;
            public int limitmultiplier = 2;
            public double limitpercentage = 0.10;
        }
        public class DailyResetLimit
        {
            public bool enabledailyresetlimit = false;
            public int dailystatlimit = 5;
            public int dailystatlimitvip = 10;
            public int dailyskilllimit = 5;
            public int dailyskilllimitvip = 10;
        }
        public class NightBonus
        {
            public bool Enable = true;
            public int StartTime = 19;
            public int EndTime = 5;
            public double Bonus = 0.10;
            public bool enableskillboosts = true;
        }
        public class XpGain
        {
            public double chickenxp = 5;
            public double fishxp = 5;
            public double boarxp = 10;
            public double stagxp = 15;
            public double wolfxp = 20;
            public double bearxp = 25;
            public double polarbearxp = 25;
            public double sharkxp = 30;
            public double horsexp = 20;
            public double scientistxp = 25;
            public double sc_full = 25;
            public double sc_heavy = 25;
            public double sc_cargo = 25;
            public double sc_junkpile = 25;
            public double sc_oilrig = 25;
            public double sc_patrol = 25;
            public double sc_peacekeeper = 25;
            public double sc_roam = 25;
            public double dwellerxp = 25;
            public double tunneldwellerxp = 25;
            public double underwaterdwellerxp = 25;
            public double scarecrownpc = 25;
            public double customnpc = 25;
            public double zombienpc = 25;
            public double playerxp = 25;
            public double lootcontainerxp = 5;
            public double lootbarrel = 5;
            public double oilbarrel = 5;
            public double vehicleparts = 5;
            public double toolcrate = 5;
            public double normalcrate = 5;
            public double elitecrate = 5;
            public double foodcrate = 5;
            public double medicalcrate = 5;
            public double animalharvestxp = 5;
            public double corpseharvestxp = 5;
            public double underwaterlootcontainerxp = 10;
            public double lockedcratexp = 25;
            public double hackablecratexp = 50;
            public double craftingxp = 5;
            public bool craftingxpdelay = true;
            public double craftingxpdelayseconds = 10;
            public double bradley = 25;
            public double patrolhelicopter = 30;
            public double turretxp = 5;
            public bool allowturretxp = false;
            public double playerrevive = 5;
            public bool enablexpboost = false;
            public double xpboostamount = 0.05;
            public int xpboostorder = 1;
            public double gifts = 5;
            public double opengifts = 5;
            public double opengiftsmed = 10;
            public double opengiftslarge = 15;
            public double upgradegiftsmed = 10;
            public double upgradegiftslarge = 15;
            public double craftmeal = 10;
        }
        public class XpGather
        {
            public double treexp = 5;
            public double orexp = 5;
            public double metalorexp = 7;
            public double stoneorexp = 5;
            public double sulfurorexp = 6;
            public double harvestxp = 5;
            public double plantxp = 5;
            public bool noxptools = true;
            public bool onetimexp = false;
            public double toolxpchance = 0.20;
            public double toolxppercent = 0.10;
        }
        public class XpBuilding
        {
            public double twigstructure = 2;
            public double woodstructure = 5;
            public double stonestructure = 10;
            public double metalstructure = 15;
            public double armoredstructure = 20;
            public bool preventBGxp = false;
            public bool buildxpdelay = false;
            public bool requirebuildingprivlidge = true;
            public int buildxpdelayseconds = 2;
            public bool reducexp = false;
            public double buildxpreduction = 0.25;
        }
        public class XpTeams
        {
            public bool enableteamxpgain = true;
            public bool enableteamxploss = true;
            public double teamxpgainamount = 0.10;
            public double teamxplossamount = 0.05;
            public float teamdistance = 50f;
        }
        public class XpMissions
        {
            public double missionsucceededxp = 50;
            public bool missionfailed = false;
            public double missionfailedxp = 10;
        }
        public class XpReducer
        {
            public bool suicidereduce = true;
            public double suicidereduceamount = 5;
            public bool deathreduce = true;
            public double deathreduceamount = 5;
            public bool rankdeathreduce = false;
        }
        public class XpBonus
        {
            public bool showkrbutton = false;
            public bool enablebonus = false;
            public int requiredkills = 10;
            public double bonusxp = 5;
            public int endbonus = 500;
            public bool multibonus = true;
            public string multibonustype = "fixed";
        }
        public class XpEcon
        {
            public bool showbalanceprofile = true;
            public bool econlevelup = false;
            public bool econleveldown = false;
            public bool econresetstats = false;
            public bool econresetskills = false;
            public bool econresetstat = false;
            public bool econresetskill = false;
            public double econlevelreward = 50;
            public double econlevelreduction = 25;
            public double econresetstatscost = 100;
            public double econresetskillscost = 100;
            public double econresetstatcost = 50;
            public double econresetskillcost = 50;
            public bool econstatlevelcost = false;
            public bool econskilllevelcost = false;
            public double econstatlevelcostmultiplier = 0;
            public double econskilllevelcostmultiplier = 0;
            public double econmentality = 100;
            public double econdexterity = 100;
            public double econmight = 100;
            public double econcaptaincy = 100;
            public double econweaponry = 100;
            public double econninjary = 100;
            public double econwoodcutter = 100;
            public double econsmithy = 100;
            public double econminer = 100;
            public double econforager = 100;
            public double econhunter = 100;
            public double econfisher = 100;
            public double econcrafter = 100;
            public double econframer = 100;
            public double econmedic = 100;
            public double econscavenger = 100;
            public double econelectrician = 100;
            public double econdemolitionist = 100;
            public double econtamer = 100;
        }
        public class SRewards
        {
            public bool srewardlevelup = false;
            public bool srewardleveldown = false;
            public bool srewardresetstats = false;
            public bool srewardresetskills = false;
            public bool srewardresetstat = false;
            public bool srewardresetskill = false;
            public int srewardlevelupamt = 5;
            public int srewardleveldownamt = 5;
            public int srewardresetstatscost = 50;
            public int srewardresetskillscost = 50;
            public int srewardresetstatcost = 25;
            public int srewardresetskillcost = 25;
            public bool srewardstatlevelcost = false;
            public bool srewardskilllevelcost = false;
            public int srewardstatlevelcostmultiplier = 0;
            public int srewardskilllevelcostmultiplier = 0;
            public int srewardmentality = 50;
            public int srewarddexterity = 50;
            public int srewardmight = 50;
            public int srewardcaptaincy = 50;
            public int srewardweaponry = 50;
            public int srewardninjary = 50;
            public int srewardwoodcutter = 50;
            public int srewardsmithy = 50;
            public int srewardminer = 50;
            public int srewardforager = 50;
            public int srewardhunter = 50;
            public int srewardfisher = 50;
            public int srewardcrafter = 50;
            public int srewardframer = 50;
            public int srewardmedic = 50;
            public int srewardscavenger = 50;
            public int srewardelectrician = 50;
            public int srewardemolitionist = 50;
            public int srewardtamer = 50;

        }
        #region Stats
        public class Mentality
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double researchcost = 0.10;
            public double researchcosttechtree = 0.10;
            public double researchspeed = 0.10;
            public double criticalchance = 0.05;
            public double criticaldgm = 0.1;
            public double damageincrease = 0.01;
            public bool useotherresearchmod = false;
            public bool locktechtree = false;
            public int unlocktechtreelevel = 5;
        }
        public class Dexterity
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double blockchance = 0.05;
            public double blockamount = 0.10;
            public double dodgechance = 0.05;
            public double reducearmordmg = 0.05;
            public double horsespeed = 0.05;
            public double boatspeed = 0.05;
            public double vehiclespeed = 0.05;
            public double fuelreduce = 0.05;
        }
        public class Might
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double armor = 0.10;
            public double meleedmg = 0.05;
            public double metabolism = 0.02;
            public double bleedreduction = 0.05;
            public double radreduction = 0.05;
            public double heattolerance = 0.05;
            public double coldtolerance = 0.05;
            //public bool enablestacking = false;
            //public int stackmultiplier = 2;
        }
        public class Captaincy
        {
            public int maxlvl = 10;
            public int pointcoststart = 4;
            public int costmultiplier = 4;
            public bool allownoteam = false;
            public double skillboost = 0.05;
            public bool enablexpboost = false;
            public double xpboost = 0.05;
            public float captaincydistance = 10f;
        }
        public class Weaponry
        {
            public int maxlvl = 10;
            public int pointcoststart = 4;
            public int costmultiplier = 4;
            public double reductionchance = 0.10;
            public double tool = 0.05;
            public double powertools = 0.03;
            public double meleeweapons = 0.05;
            public double projectileweapons = 0.02;
            public double mindamage = 0.10;
            public double maxammo = 0.10;
            public double maxammolimit = 2;
            public bool skinboxdisable = true;
            public bool neverweartools = false;
            public bool neverwearweapons = false;
            public string reloadhook = "OnMagazineReload";
            public string excludedweapons = "";
            public bool useweaponmechanics = false;
        }
        public class Ninjary
        {
            public int maxlvl = 10;
            public int pointcoststart = 4;
            public int costmultiplier = 4;
            public double patrolstealth = 0.10;
            public double ch47stealth = 0.10;
            public double bradleystealth = 0.10;
            public double npcstealth = 0.10;
            public double turretstealth = 0.10;
            public double knifeincrease = 0.10;
            public double swordincrease = 0.10;
        }
        #endregion
        #region Skills
        public class Woodcutter
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double gatherrate = 0.5;
            public double bonusincrease = 0.10;
            public double applechance = 0.10;
        }
        public class Smithy
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double productionrate = 0.10;
            public double productionspeed = 0.10;
            public double fuelconsumption = 0.10;
            public double metalchance = 0.05;
            public int metalamount = 1;
        }
        public class Miner
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double gatherrate = 0.5;
            public double bonusincrease = 0.10;
            public double fuelconsumption = 0.10;
            public double metalchance = 0.10;
            public int metalamount = 1;
        }
        public class Forager
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double gatherrate = 0.3;
            public double chanceincrease = 0.10;
            public double grubwormincrease = 0.10;
            public double randomchance = 0.05;
            public Dictionary<int, RandomChanceList> randomChanceList = new Dictionary<int, RandomChanceList>
            {
                [0] = new RandomChanceList
                {
                    shortname = "apple",
                    displayname = "",
                    SkinID = 0,
                    amount = 1
                },
                [1] = new RandomChanceList
                {
                    shortname = "bandage",
                    displayname = "",
                    SkinID = 0,
                    amount = 1
                },
                [2] = new RandomChanceList
                {
                    shortname = "scrap",
                    displayname = "",
                    SkinID = 0,
                    amount = 1
                },
                [3] = new RandomChanceList
                {
                    shortname = "bucket.water",
                    displayname = "",
                    SkinID = 0,
                    amount = 1
                },
                [4] = new RandomChanceList
                {
                    shortname = "metal.fragments",
                    displayname = "",
                    SkinID = 0,
                    amount = 1
                }
            };
        }
        public class RandomChanceList
        {
            public string shortname = "";
            public string displayname = "";
            public ulong SkinID = 0;
            public int amount = 1;
        }
        public class Hunter
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double gatherrate = 0.3;
            public double bonusincrease = 0.10;
            public double damageincrease = 0.05;
            public double nightdmgincrease = 0.01;
            public double bowdmgincrease = 0.01;
            public bool excludelongrangeweapons = false;
            public bool excludemedrangeweapons = false;
        }
        public class Fisher
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double fishamountincrease = 0.75;
            public double itemamountincrease = 0.25;
            public double oxygenreduction = 0.04;
            public double oxygentankreduction = 0.05;
        }
        public class Crafter
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double craftspeed = 0.10;
            public double craftcost = 0.05;
            public double repairincrease = 0.07;
            public double repaircost = 0.05;
            public double conditionchance = 0.07;
            public double conditionamount = 0.10;
        }
        public class Framer
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double upgradecost = 0.05;
            public double repaircost = 0.05;
            public double repairtime = 0.10;
            public int woodcost = 200;
            public int stonecost = 300;
            public int metalcost = 200;
            public int armorcost = 50;
        }
        public class Electrician
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public int solarpaneldefault = 20;
            public int smallbatterydefault = 10;
            public int mediumbatterydefault = 50;
            public int largebatterydefault = 100;
            public int smallgeneratordefault = 40;
            public int testgeneratordefault = 100;
            public int electricwindmilldefault = 150;
            public double solarpanelinputincrease = 0.10;
            public double solarpanelmaxincrease = 0.10;
            public double smallbatterymaxincrease = 0.10;
            public double mediumbatterymaxincrease = 0.10;
            public double largebatterymaxincrease = 0.10;
            public double smallgeneratormaxincrease = 0.10;
            public double testgeneratormaxincrease = 0.10;
            public double electricwindmillincrease = 0.10;
            public double electricwindmillmaxincrease = 0.10;
            public bool allowminsolarinput = false;
            public int minsolarinput = 1;
        }
        public class Demolitionist
        {
            public int maxlvl = 10;
            public int pointcoststart = 4;
            public int costmultiplier = 3;
            public double explosivedudreduction = 0.10;
            public double explosivedamage = 0.10;
            public double explosiveradius = 0.10;
        }
        public class Medic
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double revivehp = 5;
            public double recoverhp = 5;
            public double crafttime = 0.10;
            public double tools = 2;
            public double teas = 0.02;
            public bool preventbandageboost = false;
        }
        public class Scavenger
        {
            public int maxlvl = 10;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public double scavlootchance = 0.10;
            public double scavchance = 0.05;
            public double scavmultiplier = 1.0;
            public double customscavmultiplier = 0.5;
            public bool customscavrandom = true;
            public bool usecustomscavlist = false;
            public bool drops = true;
            public bool crates = true;
            public bool uncrates = true;
            public bool lockedcrates = true;
            public bool hackcrates = true;
            public bool scientists = true;
            public bool componentsonly = true;
            public Dictionary<int, ScavChanceList> scavChanceList = new Dictionary<int, ScavChanceList>
            {
                [0] = new ScavChanceList
                {
                    shortname = "scrap",
                    displayname = "",
                    SkinID = 0,
                    amount = 1,
                    maxamount = 10,
                    requiredlevel = 1
                },
                [1] = new ScavChanceList
                {
                    shortname = "metal.fragments",
                    displayname = "",
                    SkinID = 0,
                    amount = 1,
                    maxamount = 10,
                    requiredlevel = 5
                }
            };
        }
        public class ScavChanceList
        {
            public string shortname = "";
            public string displayname = "";
            public ulong SkinID = 0;
            public int amount = 1;
            public int maxamount = 10;
            public int requiredlevel = 1;
        }
        public class Tamer
        {
            public bool enabletame = false;
            public int maxlvl = 6;
            public int pointcoststart = 2;
            public int costmultiplier = 2;
            public bool tamechicken = true;
            public bool tameboar = true;
            public bool tamestag = true;
            public bool tamewolf = true;
            public bool tamebear = true;
            public bool tamepolarbear = true;
            public int chickenlevel = 1;
            public int boarlevel = 2;
            public int staglevel = 3;
            public int wolflevel = 4;
            public int bearlevel = 5;
            public int polarbearlevel = 6;
        }
        #endregion
        public class SQL
        {
            public bool enablesql = false;
            public string SQLhost = "localhost";
            public int SQLport = 3306;
            public string SQLdatabase = "databasename";
            public string SQLusername = "username";
            public string SQLpassword = "password";
        }
        public class BackpacksMod
        {
            public bool enablebackpacks = false;
            public string statorskill = "might";
            public bool removeonunload = false;
            public SortedDictionary<int, BackPackSlots> BackPackSlots = new SortedDictionary<int, BackPackSlots>
            {
                [0] = new BackPackSlots
                {
                    level = 1,
                    slots = 6
                }
            };
        }
        public class BackPackSlots
        {
            public int level;
            public int slots;
        }
        public class ZoneManagerMod
        {
            public string noxpgain = "";
            public string noxploss = "";
            public string disablestatsandskills = "";
        }
        public class EventHelperMod
        {
            public string noxpgain = "";
            public string noxploss = "";
            public string disablestatsandskills = "";
        }
        public class SurvivalArenaMod
        {
            public bool noxpgain = false;
            public bool noxploss = false;
            public bool disablestatsandskills = false;
        }
        public class RaidableBasesMod
        {
            public bool disableabilities = false;
            public bool noxploss = false;
            public bool noxpgain = false;
        }
        protected override void LoadDefaultConfig() => config = new Configuration();
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null)
                {
                    throw new JsonException();
                }
                if (MaybeUpdateConfig(config))
                {
                    PrintWarning("Configuration appears to be outdated; updating and saving");
                    SaveConfig();
                }
            }
            catch
            {
                PrintWarning($"Configuration file {Name}.json is invalid; using defaults");
                LoadDefaultConfig();
            }
        }
        protected override void SaveConfig()
        {
            PrintWarning($"Configuration changes saved to {Name}.json");
            Config.WriteObject(config, true);
        }
        #region UpdateChecker
        public class SerializableConfiguration
        {
            public string ToJson() => JsonConvert.SerializeObject(this);

            public Dictionary<string, object> ToDictionary() => JsonHelper.Deserialize(ToJson()) as Dictionary<string, object>;
        }
        private static class JsonHelper
        {
            public static object Deserialize(string json) => ToObject(JToken.Parse(json));

            private static object ToObject(JToken token)
            {
                switch (token.Type)
                {
                    case JTokenType.Object:
                        return token.Children<JProperty>().ToDictionary(prop => prop.Name, prop => ToObject(prop.Value));
                    case JTokenType.Array:
                        return token.Select(ToObject).ToList();

                    default:
                        return ((JValue)token).Value;
                }
            }
        }
        private bool MaybeUpdateConfig(SerializableConfiguration config)
        {
            var currentWithDefaults = config.ToDictionary();
            var currentRaw = Config.ToDictionary(x => x.Key, x => x.Value);
            return MaybeUpdateConfigDict(currentWithDefaults, currentRaw);
        }
        private bool MaybeUpdateConfigDict(Dictionary<string, object> currentWithDefaults, Dictionary<string, object> currentRaw)
        {
            bool changed = false;

            foreach (var key in currentWithDefaults.Keys)
            {
                object currentRawValue;
                if (currentRaw.TryGetValue(key, out currentRawValue))
                {
                    var defaultDictValue = currentWithDefaults[key] as Dictionary<string, object>;
                    var currentDictValue = currentRawValue as Dictionary<string, object>;

                    if (defaultDictValue != null)
                    {
                        if (currentDictValue == null)
                        {
                            currentRaw[key] = currentWithDefaults[key];
                            changed = true;
                        }
                        else if (MaybeUpdateConfigDict(defaultDictValue, currentDictValue))
                            changed = true;
                    }
                }
                else
                {
                    currentRaw[key] = currentWithDefaults[key];
                    changed = true;
                }
            }

            return changed;
        }
        #endregion
        #endregion

        #region Storage
        private void SaveData()
        {
            if (_xpData != null)
            {
                _xpData.XPerience = _xperienceCache;
                _XPerienceData.WriteObject(_xpData);
            }
            if (_dailyData != null)
            {
                _dailyData.DailyXPerience = _dailyxperienceCache;
                _DailyXPerienceData.WriteObject(_dailyData);
            }
            if (_lootData != null)
            {
                _lootData.LootRecords = _lootCache;
                _LootContainData.WriteObject(_lootData);
            }
            if (_corpseData != null)
            {
                _corpseData.CorpseRecords = _corpseCache;
                _CorpseContainData.WriteObject(_corpseData);
            }
            if (_horseData != null)
            {
                _horseData.HorseRecords = _horseCache;
                _HorseData.WriteObject(_horseData);
            }
            if (_weaponData != null)
            {
                _weaponData.WeaponRecords = _weaponCache;
                _WeaponData.WriteObject(_weaponData);
            }
            if (_boatData != null)
            {
                _boatData.BoatRecords = _boatCache;
                _BoatData.WriteObject(_boatData);
            }
            if (_vehicleData != null)
            {
                _vehicleData.VehicleRecords = _vehicleCache;
                _VehicleData.WriteObject(_vehicleData);
            }
            if (_minicopterData != null)
            {
                _minicopterData.MinicopterRecords = _minicopterCache;
                _MinicopterData.WriteObject(_minicopterData);
            }
            if (_snowmobData != null)
            {
                _snowmobData.SnowmobRecords = _snowmobCache;
                _SnowmobData.WriteObject(_snowmobData);
            }
            if (_smithyData != null)
            {
                _smithyData.SmithyRecords = _smithyCache;
                _SmithyData.WriteObject(_smithyData);
            }
            if (_electricianData != null)
            {
                _electricianData.ElectricianRecords = _electricianCache;
                _ElectricianData.WriteObject(_electricianData);
            }
        }
        private void LoadData()
        {
            try
            {
                _xpData = _XPerienceData.ReadObject<XPData>();
                _xperienceCache = _xpData.XPerience;
            }
            catch
            {
                _xpData = new XPData();
            }
            try
            {
                _dailyData = _DailyXPerienceData.ReadObject<DailyData>();
                _dailyxperienceCache = _dailyData.DailyXPerience;
            }
            catch
            {
                _dailyData = new DailyData();
            }
            try
            {
                _lootData = _LootContainData.ReadObject<LootData>();
                _lootCache = _lootData.LootRecords;
            }
            catch
            {
                _lootData = new LootData();
            }
            try
            {
                _corpseData = _CorpseContainData.ReadObject<CorpseData>();
                _corpseCache = _corpseData.CorpseRecords;
            }
            catch
            {
                _corpseData = new CorpseData();
            }
            try
            {
                _horseData = _HorseData.ReadObject<HorseData>();
                _horseCache = _horseData.HorseRecords;
            }
            catch
            {
                _horseData = new HorseData();
            }
            try
            {
                _weaponData = _WeaponData.ReadObject<WeaponData>();
                _weaponCache = _weaponData.WeaponRecords;
            }
            catch
            {
                _weaponData = new WeaponData();
            }
            try
            {
                _boatData = _BoatData.ReadObject<BoatData>();
                _boatCache = _boatData.BoatRecords;
            }
            catch
            {
                _boatData = new BoatData();
            }
            try
            {
                _vehicleData = _VehicleData.ReadObject<VehicleData>();
                _vehicleCache = _vehicleData.VehicleRecords;
            }
            catch
            {
                _vehicleData = new VehicleData();
            }
            try
            {
                _minicopterData = _MinicopterData.ReadObject<MinicopterData>();
                _minicopterCache = _minicopterData.MinicopterRecords;
            }
            catch
            {
                _minicopterData = new MinicopterData();
            }
            try
            {
                _snowmobData = _SnowmobData.ReadObject<SnowmobData>();
                _snowmobCache = _snowmobData.SnowmobRecords;
            }
            catch
            {
                _snowmobData = new SnowmobData();
            }
            try
            {
                _smithyData = _SmithyData.ReadObject<SmithyData>();
                _smithyCache = _smithyData.SmithyRecords;
            }
            catch
            {
                _smithyData = new SmithyData();
            }
            try
            {
                _electricianData = _ElectricianData.ReadObject<ElectricianData>();
                _electricianCache = _electricianData.ElectricianRecords;
            }

            catch
            {
                _electricianData = new ElectricianData();
            }
        }
        public class XPData
        {
            public Dictionary<string, XPRecord> XPerience = new Dictionary<string, XPRecord>();
        }
        public class XPRecord
        {
            public int rank;
            public int truelevel;
            public int trueexperience;
            public double level;
            public double experience;
            public double requiredxp;
            public int statpoint;
            public int skillpoint;
            public int Mentality;
            public int MentalityP;
            public int Dexterity;
            public int DexterityP;
            public int Might;
            public int MightP;
            public int Captaincy;
            public int CaptaincyP;
            public int Weaponry;
            public int WeaponryP;
            public int Ninjary;
            public int NinjaryP;
            public int WoodCutter;
            public int WoodCutterP;
            public int Smithy;
            public int SmithyP;
            public int Miner;
            public int MinerP;
            public int Forager;
            public int ForagerP;
            public int Hunter;
            public int HunterP;
            public int Fisher;
            public int FisherP;
            public int Crafter;
            public int CrafterP;
            public int Framer;
            public int FramerP;
            public int Electrician;
            public int ElectricianP;
            public int Medic;
            public int MedicP;
            public int Scavenger;
            public int ScavengerP;
            public int Demolitionist;
            public int DemolitionistP;
            public int Tamer;
            public int TamerP;
            public int Wood;
            public int Stone;
            public int Metal;
            public int Sulfur;
            public int Cactus;
            public int Berries;
            public int Pumpkin;
            public int Potato;
            public int Corn;
            public int Mushroom;
            public int Hemp;
            public int Seed;
            public bool Status;
            public bool DisableRank;
            public int UILocation;
            public string teatype;
            public double teacooldown;
            public DateTime resettimerstats;
            public DateTime resettimerskills;
            public DateTime playerfixdata;
            public int dash;
            public int dmgbar;
            public int profilebg;
            public bool fuelgauge;
            public bool speedometer;
            public int speedometertype;
            public bool enableconfirmationprompt;
            public bool showchatnotifications;
            public bool showchatprofileonconnect;
            public bool showwelcomepanel;
            public bool showchatxp;
            public bool exclude;
            public bool raidablebase;
            public string displayname;
            public string id;
        }
        public class DailyData
        {
            public Dictionary<string, DailyRecord> DailyXPerience = new Dictionary<string, DailyRecord>();
        }
        public class DailyRecord
        {
            public double dailyexperience;
            public int dailystatresets;
            public int dailyskillresets;
            public DateTime lastexperiencereset;
            public DateTime laststatreset;
            public DateTime lastskillreset;
        }
        private class LootData
        {
            public Dictionary<ulong, Loot> LootRecords = new Dictionary<ulong, Loot>();
        }
        private class Loot
        {
            public List<string> id;
        }
        private class CorpseData
        {
            public Dictionary<ulong, Corpse> CorpseRecords = new Dictionary<ulong, Corpse>();
        }
        private class Corpse
        {
            public ulong corpsecontainer;
            public List<string> id;
        }
        private class HorseData
        {
            public Dictionary<ulong, Horse> HorseRecords = new Dictionary<ulong, Horse>();
        }
        private class Horse
        {
            public ulong horse;
            public float maxSpeed;
            public float runSpeed;
            public float walkSpeed;
            public float trotSpeed;
            public ulong player;
        }
        private class WeaponData
        {
            public Dictionary<ulong, Weapon> WeaponRecords = new Dictionary<ulong, Weapon>();
        }
        private class Weapon
        {
            public int defaultammo;
            public int maxammo;
            public double defaultreload;
            public double newreload;
            public double defaultdistance;
            public double maxdistance;
            public double defaultrange;
            public double maxrange;
            public ulong player;
            public NetworkableId weapondata;
        }
        private class BoatData
        {
            public Dictionary<ulong, Boat> BoatRecords = new Dictionary<ulong, Boat>();
        }
        private class Boat
        {
            public ulong boat;
            public float defaultSpeed;
            public ulong player;
        }
        private class VehicleData
        {
            public Dictionary<ulong, Vehicle> VehicleRecords = new Dictionary<ulong, Vehicle>();
        }
        private class Vehicle
        {
            public ulong vehicle;
            public float maxDriveSlip;
            public float reversePercentSpeed;
            public float driveForceToMaxSlip;
            public ulong player;
        }
        private class MinicopterData
        {
            public Dictionary<ulong, MiniCopterP> MinicopterRecords = new Dictionary<ulong, MiniCopterP>();
        }
        private class MiniCopterP
        {
            public ulong minicopter;
            public float maxRotorSpeed;
            public ulong player;
        }
        private class SnowmobData
        {
            public Dictionary<ulong, Snowmob> SnowmobRecords = new Dictionary<ulong, Snowmob>();
        }
        private class Snowmob
        {
            public ulong snowmob;
            public float terrain;
            public double engineKW;
            public ulong player;
        }
        private class SmithyData
        {
            public Dictionary<string, SmithyD> SmithyRecords = new Dictionary<string, SmithyD>();
        }
        private class SmithyD
        {
            public string resource;
            public float time;
        }
        private class ElectricianData
        {
            public Dictionary<ulong, ElectricianD> ElectricianRecords = new Dictionary<ulong, ElectricianD>();
        }
        private class ElectricianD
        {
            public ulong id;
            public string type;
            public int defaultmaxoutput;
            public int newmaxoutput;
            public ulong owner;
        }
        private class HeliHits
        {
            public Dictionary<ulong, Heli> HeliRecords = new Dictionary<ulong, Heli>();
        }
        private class Heli
        {
            public ulong heli;
            public ulong player;
        }
        #endregion

        #region SQL
        private readonly Core.MySql.Libraries.MySql sqlLibrary = Interface.Oxide.GetLibrary<Core.MySql.Libraries.MySql>();
        Connection sqlConnection;
        private string RemoveSpecialCharacters(string name)
        {
            string newname = Regex.Replace(name, @"[^0-9a-zA-Z]+", "");
            return newname;
        }
        private void CreatSQLTable()
        {
            sqlLibrary.Insert(Sql.Builder.Append($"CREATE TABLE IF NOT EXISTS XPerience (" +
                $" `id` BIGINT(255) NOT NULL AUTO_INCREMENT," +
                $" `steamid` BIGINT(255) NOT NULL," +
                $" `displayname` VARCHAR(255) NOT NULL," +
                $" `PlayerRank` BIGINT(255) NOT NULL," +
                $" `RankName` VARCHAR(255) NOT NULL," +
                $" `RankSig` VARCHAR(255) NOT NULL," +
                $" `RankImg` VARCHAR(255) NOT NULL," +
                $" `RankLevel` BIGINT(255) NOT NULL," +
                $" `RankXP` BIGINT(255) NOT NULL," +
                $" `level` BIGINT(255) NOT NULL," +
                $" `experience` BIGINT(255) NOT NULL," +
                $" `requiredxp` BIGINT(255) NOT NULL," +
                $" `statpoint` BIGINT(255) NOT NULL," +
                $" `skillpoint` BIGINT(255) NOT NULL," +
                $" `Mentality` BIGINT(255) NOT NULL," +
                $" `MentalityP` BIGINT(255) NOT NULL," +
                $" `Dexterity` BIGINT(255) NOT NULL," +
                $" `DexterityP` BIGINT(255) NOT NULL," +
                $" `Might` BIGINT(255) NOT NULL," +
                $" `MightP` BIGINT(255) NOT NULL," +
                $" `Captaincy` BIGINT(255) NOT NULL," +
                $" `CaptaincyP` BIGINT(255) NOT NULL," +
                $" `Weaponry` BIGINT(255) NOT NULL," +
                $" `WeaponryP` BIGINT(255) NOT NULL," +
                $" `Ninjary` BIGINT(255) NOT NULL," +
                $" `NinjaryP` BIGINT(255) NOT NULL," +
                $" `WoodCutter` BIGINT(255) NOT NULL," +
                $" `WoodCutterP` BIGINT(255) NOT NULL," +
                $" `Smithy` BIGINT(255) NOT NULL," +
                $" `SmithyP` BIGINT(255) NOT NULL," +
                $" `Miner` BIGINT(255) NOT NULL," +
                $" `MinerP` BIGINT(255) NOT NULL," +
                $" `Forager` BIGINT(255) NOT NULL," +
                $" `ForagerP` BIGINT(255) NOT NULL," +
                $" `Hunter` BIGINT(255) NOT NULL," +
                $" `HunterP` BIGINT(255) NOT NULL," +
                $" `Fisher` BIGINT(255) NOT NULL," +
                $" `FisherP` BIGINT(255) NOT NULL," +
                $" `Crafter` BIGINT(255) NOT NULL," +
                $" `CrafterP` BIGINT(255) NOT NULL," +
                $" `Framer` BIGINT(255) NOT NULL," +
                $" `FramerP` BIGINT(255) NOT NULL," +
                $" `Medic` BIGINT(255) NOT NULL," +
                $" `MedicP` BIGINT(255) NOT NULL," +
                $" `Scavenger` BIGINT(255) NOT NULL," +
                $" `ScavengerP` BIGINT(255) NOT NULL," +
                $" `Electrician` BIGINT(255) NOT NULL," +
                $" `ElectricianP` BIGINT(255) NOT NULL," +
                $" `Demolitionist` BIGINT(255) NOT NULL," +
                $" `DemolitionistP` BIGINT(255) NOT NULL," +
                $" `Tamer` BIGINT(255) NOT NULL," +
                $" `TamerP` BIGINT(255) NOT NULL," +
                $" `Wood` BIGINT(255) NOT NULL," +
                $" `Stone` BIGINT(255) NOT NULL," +
                $" `Metal` BIGINT(255) NOT NULL," +
                $" `Sulfur` BIGINT(255) NOT NULL," +
                $" `Cactus` BIGINT(255) NOT NULL," +
                $" `Berries` BIGINT(255) NOT NULL," +
                $" `Pumpkin` BIGINT(255) NOT NULL," +
                $" `Potato` BIGINT(255) NOT NULL," +
                $" `Corn` BIGINT(255) NOT NULL," +
                $" `Mushroom` BIGINT(255) NOT NULL," +
                $" `Hemp` BIGINT(255) NOT NULL," +
                $" `Seed` BIGINT(255) NOT NULL," +
                $" `Status` VARCHAR(255) NOT NULL," +
                $"PRIMARY KEY (id)" +
                $" )ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;"), sqlConnection);
        }
        private void UpdateSQLTable()
        {
            try
            {
                bool rank = false;
                bool rankname = false;
                bool ranksig = false;
                bool rankimg = false;
                bool ranklevel = false;
                bool rankxp = false;
                bool wood = false;
                bool stone = false;
                bool metal = false;
                bool sulfur = false;
                bool cactus = false;
                bool berries = false;
                bool pumpkin = false;
                bool potato = false;
                bool corn = false;
                bool mushroom = false;
                bool hemp = false;
                bool seed = false;
                bool status = false;
                bool scavenger = false;
                bool scavengerp = false;
                bool electrician = false;
                bool electricianp = false;
                bool demolistionist = false;
                bool demolistionistp = false;
                bool captaincy = false;
                bool captaincyp = false;
                bool weaponry = false;
                bool weaponryp = false;
                bool Ninjary = false;
                bool Ninjaryp = false;
                bool medic = false;
                bool medicp = false;
                sqlLibrary.Query(Sql.Builder.Append($"SELECT * FROM XPerience"), sqlConnection, list =>
                {
                    foreach (var entry in list)
                    {
                        if (entry.ContainsKey("Rank")) {
                            sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience CHANGE `Rank` `PlayerRank` BIGINT(255) NOT NULL"), sqlConnection);
                        }
                        if (!entry.ContainsKey("PlayerRank")) { rank = true; }
                        if (!entry.ContainsKey("RankName")) { rankname = true; }
                        if (!entry.ContainsKey("RankSig")) { ranksig = true; }
                        if (!entry.ContainsKey("RankImg")) { rankimg = true; }
                        if (!entry.ContainsKey("RankLevel")) { ranklevel = true; }
                        if (!entry.ContainsKey("RankXP")) { rankxp = true; }
                        if (!entry.ContainsKey("Wood")) { wood = true; }
                        if (!entry.ContainsKey("Stone")) { stone = true; }
                        if (!entry.ContainsKey("Metal")) { metal = true; }
                        if (!entry.ContainsKey("Sulfur")) { sulfur = true; }
                        if (!entry.ContainsKey("Cactus")) { cactus = true; }
                        if (!entry.ContainsKey("Berries")) { berries = true; }
                        if (!entry.ContainsKey("Pumpkin")) { pumpkin = true; }
                        if (!entry.ContainsKey("Potato")) { potato = true; }
                        if (!entry.ContainsKey("Corn")) { corn = true; }
                        if (!entry.ContainsKey("Mushroom")) { mushroom = true; }
                        if (!entry.ContainsKey("Hemp")) { hemp = true; }
                        if (!entry.ContainsKey("Seed")) { seed = true; }
                        if (!entry.ContainsKey("Status")) { status = true; }
                        if (!entry.ContainsKey("Scavenger")) { scavenger = true; }
                        if (!entry.ContainsKey("ScavengerP")) { scavengerp = true; }
                        if (!entry.ContainsKey("Electrician")) { electrician = true; }
                        if (!entry.ContainsKey("ElectricianP")) { electricianp = true; }
                        if (!entry.ContainsKey("Demolitionist")) { demolistionist = true; }
                        if (!entry.ContainsKey("DemolitionistP")) { demolistionistp = true; }
                        if (!entry.ContainsKey("Captaincy")) { captaincy = true; }
                        if (!entry.ContainsKey("CaptaincyP")) { captaincyp = true; }
                        if (!entry.ContainsKey("Weaponry")) { weaponry = true; }
                        if (!entry.ContainsKey("WeaponryP")) { weaponryp = true; }
                        if (!entry.ContainsKey("Ninjary")) { Ninjary = true; }
                        if (!entry.ContainsKey("NinjaryP")) { Ninjaryp = true; }
                        if (!entry.ContainsKey("Medic")) { medic = true; }
                        if (!entry.ContainsKey("MedicP")) { medicp = true; }
                    }
                    if (rank) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `PlayerRank` BIGINT(255) NOT NULL AFTER displayname"), sqlConnection); }
                    if (rankname) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `RankName` VARCHAR(255) NOT NULL AFTER PlayerRank"), sqlConnection); }
                    if (ranksig) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `RankSig` VARCHAR(255) NOT NULL AFTER RankName"), sqlConnection); }
                    if (rankimg) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `RankImg` VARCHAR(255) NOT NULL AFTER RankSig"), sqlConnection); }
                    if (ranklevel) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `RankLevel` BIGINT(255) NOT NULL AFTER RankImg"), sqlConnection); }
                    if (rankxp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `RankXP` BIGINT(255) NOT NULL AFTER RankLevel"), sqlConnection); }
                    if (wood) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Wood` BIGINT(255) NOT NULL AFTER TamerP"), sqlConnection); }
                    if (stone) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Stone` BIGINT(255) NOT NULL AFTER Wood"), sqlConnection); }
                    if (metal) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Metal` BIGINT(255) NOT NULL AFTER Stone"), sqlConnection); }
                    if (sulfur) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Sulfur` BIGINT(255) NOT NULL AFTER Metal"), sqlConnection); }
                    if (cactus) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Cactus` BIGINT(255) NOT NULL AFTER Sulfur"), sqlConnection); }
                    if (berries) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Berries` BIGINT(255) NOT NULL AFTER Cactus"), sqlConnection); }
                    if (pumpkin) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Pumpkin` BIGINT(255) NOT NULL AFTER Berries"), sqlConnection); }
                    if (potato) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Potato` BIGINT(255) NOT NULL AFTER Pumpkin"), sqlConnection); }
                    if (corn) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Corn` BIGINT(255) NOT NULL AFTER Potato"), sqlConnection); }
                    if (mushroom) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Mushroom` BIGINT(255) NOT NULL AFTER Corn"), sqlConnection); }
                    if (hemp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Hemp` BIGINT(255) NOT NULL AFTER Mushroom"), sqlConnection); }
                    if (seed) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Seed` BIGINT(255) NOT NULL AFTER Hemp"), sqlConnection); }
                    if (status) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Status` VARCHAR(255) NOT NULL AFTER Seed"), sqlConnection); }
                    if (scavenger) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Scavenger` BIGINT(255) NOT NULL DEFAULT '0' AFTER MedicP"), sqlConnection); }
                    if (scavengerp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `ScavengerP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Scavenger"), sqlConnection); }
                    if (electrician) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Electrician` BIGINT(255) NOT NULL DEFAULT '0' AFTER ScavengerP"), sqlConnection); }
                    if (electricianp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `ElectricianP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Electrician"), sqlConnection); }
                    if (demolistionist) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Demolitionist` BIGINT(255) NOT NULL DEFAULT '0' AFTER ElectricianP"), sqlConnection); }
                    if (demolistionistp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `DemolitionistP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Demolitionist"), sqlConnection); }
                    if (captaincy) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Captaincy` BIGINT(255) NOT NULL DEFAULT '0' AFTER MightP"), sqlConnection); }
                    if (captaincyp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `CaptaincyP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Captaincy"), sqlConnection); }
                    if (weaponry) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Weaponry` BIGINT(255) NOT NULL DEFAULT '0' AFTER CaptaincyP"), sqlConnection); }
                    if (weaponryp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `WeaponryP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Weaponry"), sqlConnection); }
                    if (Ninjary) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Ninjary` BIGINT(255) NOT NULL DEFAULT '0' AFTER WeaponryP"), sqlConnection); }
                    if (Ninjaryp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `NinjaryP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Ninjary"), sqlConnection); }
                    if (medic) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `Medic` BIGINT(255) NOT NULL DEFAULT '0' AFTER FramerP"), sqlConnection); }
                    if (medicp) { sqlLibrary.Insert(Sql.Builder.Append($"ALTER TABLE XPerience ADD COLUMN `MedicP` BIGINT(255) NOT NULL DEFAULT '0' AFTER Medic"), sqlConnection); }
                });
            }
            catch (MySqlException e)
            {
                PrintError("Failed to Update Table (" + e.Message + ")");
            }
        }
        private void CreatePlayerDataSQL(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            Ranks rank = GetXPRank(xprecord.rank);
            sqlLibrary.Insert(Sql.Builder.Append("INSERT XPerience (steamid, displayname, PlayerRank, RankName, RankSig, RankImg, RankLevel, RankXP, level, experience, requiredxp, statpoint, skillpoint, Mentality, MentalityP, Dexterity, DexterityP, Might, MightP, Captaincy, CaptaincyP, Weaponry, WeaponryP, Ninjary, NinjaryP, WoodCutter, WoodCutterP, Smithy, SmithyP, Miner, MinerP, Forager, ForagerP, Hunter, HunterP, Fisher, FisherP, Crafter, CrafterP, Framer, FramerP, Medic, MedicP, Scavenger, ScavengerP, Electrician, ElectricianP, Demolitionist, DemolitionistP, Tamer, TamerP, Wood, Stone, Metal, Sulfur, Cactus, Berries, Pumpkin, Potato, Corn, Mushroom, Hemp, Seed, Status) " +
            "VALUES (" +
            $"'{xprecord.id}', " +
            $"'{RemoveSpecialCharacters(xprecord.displayname)}', " +
            $"'{xprecord.rank}', " +
            $"'{RemoveSpecialCharacters(rank.name)}', " +
            $"'{RemoveSpecialCharacters(rank.sig)}', " +
            $"'{rank.image}', " +
            $"'{xprecord.truelevel}', " +
            $"'{xprecord.trueexperience}', " +
            $"'{xprecord.level}', " +
            $"'{xprecord.experience}', " +
            $"'{xprecord.requiredxp}', " +
            $"'{xprecord.statpoint}', " +
            $"'{xprecord.skillpoint}', " +
            $"'{xprecord.Mentality}', " +
            $"'{xprecord.MentalityP}', " +
            $"'{xprecord.Dexterity}', " +
            $"'{xprecord.DexterityP}', " +
            $"'{xprecord.Might}', " +
            $"'{xprecord.MightP}', " +
            $"'{xprecord.Captaincy}', " +
            $"'{xprecord.CaptaincyP}', " +
            $"'{xprecord.Weaponry}', " +
            $"'{xprecord.WeaponryP}', " +
            $"'{xprecord.Ninjary}', " +
            $"'{xprecord.NinjaryP}', " +
            $"'{xprecord.WoodCutter}', " +
            $"'{xprecord.WoodCutterP}', " +
            $"'{xprecord.Smithy}', " +
            $"'{xprecord.SmithyP}', " +
            $"'{xprecord.Miner}', " +
            $"'{xprecord.MinerP}', " +
            $"'{xprecord.Forager}', " +
            $"'{xprecord.ForagerP}', " +
            $"'{xprecord.Hunter}', " +
            $"'{xprecord.HunterP}', " +
            $"'{xprecord.Fisher}', " +
            $"'{xprecord.FisherP}', " +
            $"'{xprecord.Crafter}', " +
            $"'{xprecord.CrafterP}', " +
            $"'{xprecord.Framer}', " +
            $"'{xprecord.FramerP}', " +
            $"'{xprecord.Medic}', " +
            $"'{xprecord.MedicP}', " +
            $"'{xprecord.Scavenger}', " +
            $"'{xprecord.ScavengerP}', " +
            $"'{xprecord.Electrician}', " +
            $"'{xprecord.ElectricianP}', " +
            $"'{xprecord.Demolitionist}', " +
            $"'{xprecord.DemolitionistP}', " +
            $"'{xprecord.Tamer}', " +
            $"'{xprecord.TamerP}', " +
            $"'{xprecord.Wood}', " +
            $"'{xprecord.Stone}', " +
            $"'{xprecord.Metal}', " +
            $"'{xprecord.Sulfur}', " +
            $"'{xprecord.Cactus}', " +
            $"'{xprecord.Berries}', " +
            $"'{xprecord.Pumpkin}', " +
            $"'{xprecord.Potato}', " +
            $"'{xprecord.Corn}', " +
            $"'{xprecord.Mushroom}', " +
            $"'{xprecord.Hemp}', " +
            $"'{xprecord.Seed}', " +
            $"'{xprecord.Status}');"), sqlConnection);
        }
        private void UpdatePlayersDataSQL()
        {
            foreach (var r in _xperienceCache)
            {
                Ranks rank = GetXPRank(r.Value.rank);
                sqlLibrary.Update(Sql.Builder.Append($"UPDATE XPerience SET " +
                $"steamid='{r.Value.id}', " +
                $"displayname='{RemoveSpecialCharacters(r.Value.displayname)}', " +
                $"PlayerRank='{r.Value.rank}', " +
                $"RankName='{RemoveSpecialCharacters(rank.name)}', " +
                $"RankSig='{RemoveSpecialCharacters(rank.sig)}', " +
                $"RankImg='{rank.image}', " +
                $"RankLevel='{r.Value.truelevel}', " +
                $"RankXP='{r.Value.trueexperience}', " +
                $"level='{r.Value.level}', " +
                $"experience='{r.Value.experience}', " +
                $"requiredxp='{r.Value.requiredxp}', " +
                $"statpoint='{r.Value.statpoint}', " +
                $"skillpoint='{r.Value.skillpoint}', " +
                $"Mentality='{r.Value.Mentality}', " +
                $"MentalityP='{r.Value.MentalityP}', " +
                $"Dexterity='{r.Value.Dexterity}', " +
                $"DexterityP='{r.Value.DexterityP}', " +
                $"Might='{r.Value.Might}', " +
                $"MightP='{r.Value.MightP}', " +
                $"Captaincy='{r.Value.Captaincy}', " +
                $"CaptaincyP='{r.Value.CaptaincyP}', " +
                $"Weaponry='{r.Value.Weaponry}', " +
                $"WeaponryP='{r.Value.WeaponryP}', " +
                $"Ninjary='{r.Value.Ninjary}', " +
                $"NinjaryP='{r.Value.NinjaryP}', " +
                $"WoodCutter='{r.Value.WoodCutter}', " +
                $"WoodCutterP='{r.Value.WoodCutterP}', " +
                $"Smithy='{r.Value.Smithy}', " +
                $"SmithyP='{r.Value.SmithyP}', " +
                $"Miner='{r.Value.Miner}', " +
                $"MinerP='{r.Value.MinerP}', " +
                $"Forager='{r.Value.Forager}', " +
                $"ForagerP='{r.Value.ForagerP}', " +
                $"Hunter='{r.Value.Hunter}', " +
                $"HunterP='{r.Value.HunterP}', " +
                $"Fisher='{r.Value.Fisher}', " +
                $"FisherP='{r.Value.FisherP}', " +
                $"Crafter='{r.Value.Crafter}', " +
                $"CrafterP='{r.Value.CrafterP}', " +
                $"Framer='{r.Value.Framer}', " +
                $"FramerP='{r.Value.FramerP}', " +
                $"Medic='{r.Value.Medic}', " +
                $"MedicP='{r.Value.MedicP}', " +
                $"Scavenger='{r.Value.Scavenger}', " +
                $"ScavengerP='{r.Value.ScavengerP}', " +
                $"Electrician='{r.Value.Electrician}', " +
                $"ElectricianP='{r.Value.ElectricianP}', " +
                $"Demolitionist='{r.Value.Demolitionist}', " +
                $"DemolitionistP='{r.Value.DemolitionistP}', " +
                $"Tamer='{r.Value.Tamer}', " +
                $"TamerP='{r.Value.TamerP}', " +
                $"Wood='{r.Value.Wood}', " +
                $"Stone='{r.Value.Stone}', " +
                $"Metal='{r.Value.Metal}', " +
                $"Sulfur='{r.Value.Sulfur}', " +
                $"Cactus='{r.Value.Cactus}', " +
                $"Berries='{r.Value.Berries}', " +
                $"Pumpkin='{r.Value.Pumpkin}', " +
                $"Potato='{r.Value.Potato}', " +
                $"Corn='{r.Value.Corn}', " +
                $"Mushroom='{r.Value.Mushroom}', " +
                $"Hemp='{r.Value.Hemp}', " +
                $"Seed='{r.Value.Seed}', " +
                $"Status='{r.Value.Status}' " +
                $"WHERE steamid = '{r.Key}';"), sqlConnection);
            }
        }
        private void UpdatePlayerDataSQL(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            Ranks rank = GetXPRank(xprecord.rank);
            sqlLibrary.Update(Sql.Builder.Append($"UPDATE XPerience SET " +
            $"steamid='{xprecord.id}', " +
            $"displayname='{RemoveSpecialCharacters(xprecord.displayname)}', " +
            $"PlayerRank='{xprecord.rank}', " +
            $"RankName='{RemoveSpecialCharacters(rank.name)}', " +
            $"RankSig='{RemoveSpecialCharacters(rank.sig)}', " +
            $"RankImg='{rank.image}', " +
            $"RankLevel='{xprecord.truelevel}', " +
            $"RankXP='{xprecord.trueexperience}', " +
            $"level='{xprecord.level}', " +
            $"experience='{xprecord.experience}', " +
            $"requiredxp='{xprecord.requiredxp}', " +
            $"statpoint='{xprecord.statpoint}', " +
            $"skillpoint='{xprecord.skillpoint}', " +
            $"Mentality='{xprecord.Mentality}', " +
            $"MentalityP='{xprecord.MentalityP}', " +
            $"Dexterity='{xprecord.Dexterity}', " +
            $"DexterityP='{xprecord.DexterityP}', " +
            $"Might='{xprecord.Might}', " +
            $"MightP='{xprecord.MightP}', " +
            $"Captaincy='{xprecord.Captaincy}', " +
            $"CaptaincyP='{xprecord.CaptaincyP}', " +
            $"Weaponry='{xprecord.Weaponry}', " +
            $"WeaponryP='{xprecord.WeaponryP}', " +
            $"Ninjary='{xprecord.Ninjary}', " +
            $"NinjaryP='{xprecord.NinjaryP}', " +
            $"WoodCutter='{xprecord.WoodCutter}', " +
            $"WoodCutterP='{xprecord.WoodCutterP}', " +
            $"Smithy='{xprecord.Smithy}', " +
            $"SmithyP='{xprecord.SmithyP}', " +
            $"Miner='{xprecord.Miner}', " +
            $"MinerP='{xprecord.MinerP}', " +
            $"Forager='{xprecord.Forager}', " +
            $"ForagerP='{xprecord.ForagerP}', " +
            $"Hunter='{xprecord.Hunter}', " +
            $"HunterP='{xprecord.HunterP}', " +
            $"Fisher='{xprecord.Fisher}', " +
            $"FisherP='{xprecord.FisherP}', " +
            $"Crafter='{xprecord.Crafter}', " +
            $"CrafterP='{xprecord.CrafterP}', " +
            $"Framer='{xprecord.Framer}', " +
            $"FramerP='{xprecord.FramerP}', " +
            $"Medic='{xprecord.Medic}', " +
            $"MedicP='{xprecord.MedicP}', " +
            $"Scavenger='{xprecord.Scavenger}', " +
            $"ScavengerP='{xprecord.ScavengerP}', " +
            $"Electrician='{xprecord.Electrician}', " +
            $"ElectricianP='{xprecord.ElectricianP}', " +
            $"Demolitionist='{xprecord.Demolitionist}', " +
            $"DemolitionistP='{xprecord.DemolitionistP}', " +
            $"Tamer='{xprecord.Tamer}', " +
            $"TamerP='{xprecord.TamerP}', " +
            $"Wood='{xprecord.Wood}', " +
            $"Stone='{xprecord.Stone}', " +
            $"Metal='{xprecord.Metal}', " +
            $"Sulfur='{xprecord.Sulfur}', " +
            $"Cactus='{xprecord.Cactus}', " +
            $"Berries='{xprecord.Berries}', " +
            $"Pumpkin='{xprecord.Pumpkin}', " +
            $"Potato='{xprecord.Potato}', " +
            $"Corn='{xprecord.Corn}', " +
            $"Mushroom='{xprecord.Mushroom}', " +
            $"Hemp='{xprecord.Hemp}', " +
            $"Seed='{xprecord.Seed}', " +
            $"Status='{xprecord.Status}' " +
            $"WHERE steamid = '{player.UserIDString}';"), sqlConnection);
        }
        private void CheckPlayerDataSQL(BasePlayer player)
        {
            bool newplayer = true;
            sqlLibrary.Query(Sql.Builder.Append($"SELECT steamid FROM XPerience"), sqlConnection, list =>
            {
                foreach (var entry in list)
                {
                    if (entry["steamid"].ToString() == player.UserIDString)
                    {
                        UpdatePlayerDataSQL(player);
                        newplayer = false;
                    }
                }
                if (newplayer)
                {
                    CreatePlayerDataSQL(player);
                }
            });

        }
        private void DeleteSQL()
        {
            sqlLibrary.Delete(Sql.Builder.Append($"DELETE FROM XPerience;"), sqlConnection);
        }
        #endregion

        #region Load/Save
        private void Init()
        {
            Unsubscribe(nameof(OnRunPlayerMetabolism));
            Unsubscribe(nameof(OnPlayerDeath));
            Unsubscribe(nameof(OnResearchCostDetermine));
            Unsubscribe(nameof(CanUnlockTechTreeNode));
            Unsubscribe(nameof(OnTechTreeNodeUnlock));
            Unsubscribe(nameof(OnItemResearch));
            Unsubscribe(nameof(OnEntitySpawned));
            Unsubscribe(nameof(OnOutputUpdate));
            Unsubscribe(nameof(OnInputUpdate));
            Unsubscribe(nameof(OnSolarPanelSunUpdate));
            _xperienceCache = new Dictionary<string, XPRecord>();
            _dailyxperienceCache = new Dictionary<string, DailyRecord>();
            _lootCache = new Dictionary<ulong, Loot>();
            _corpseCache = new Dictionary<ulong, Corpse>();
            _horseCache = new Dictionary<ulong, Horse>();
            _weaponCache = new Dictionary<ulong, Weapon>();
            _boatCache = new Dictionary<ulong, Boat>();
            _vehicleCache = new Dictionary<ulong, Vehicle>();
            _minicopterCache = new Dictionary<ulong, MiniCopterP>();
            _snowmobCache = new Dictionary<ulong, Snowmob>();
            _smithyCache = new Dictionary<string, SmithyD>();
            _electricianCache = new Dictionary<ulong, ElectricianD>();
            _heliCache = new Dictionary<ulong, Heli>();
        }
        private void OnServerInitialized()
        {
            cmd.AddChatCommand(config.playerchatCommands.openplayerstats, this, Openplayerstats);
            cmd.AddChatCommand(config.playerchatCommands.openplayerstats2, this, Openplayerstats);
            cmd.AddChatCommand(config.playerchatCommands.openplayerstats3, this, Openplayerstats);
            cmd.AddChatCommand(config.playerchatCommands.opentopplayers, this, Opentopplayers);
            cmd.AddChatCommand(config.playerchatCommands.openhelp, this, Openhelp);
            cmd.AddChatCommand(config.playerchatCommands.showplayerstatschat, this, Showplayerstatschat);
            cmd.AddChatCommand(config.playerchatCommands.playeraddstat, this, Playeraddstat);
            cmd.AddChatCommand(config.playerchatCommands.playeraddskill, this, Playeraddskill);
            cmd.AddChatCommand(config.playerchatCommands.playerresetstats, this, Playerresetstats);
            cmd.AddChatCommand(config.playerchatCommands.playerresetskills, this, Playerresetskills);
            cmd.AddChatCommand(config.playerchatCommands.playerresetall, this, Playerresetall);
            cmd.AddChatCommand(config.playerchatCommands.playerliveuichange, this, Playerliveuichange);
            cmd.AddChatCommand(config.adminchatCommands.showadminhelp, this, Showadminhelp);
            cmd.AddChatCommand(config.adminchatCommands.openadminpanel, this, Openadminpanel);
            cmd.AddChatCommand(config.adminchatCommands.adminresetxperience, this, Adminresetxperience);
            cmd.AddChatCommand(config.adminchatCommands.adminxpgive, this, Adminxpgive);
            cmd.AddChatCommand(config.adminchatCommands.adminxpgiveall, this, Adminxpgiveall);
            cmd.AddChatCommand(config.adminchatCommands.adminpointsgive, this, Adminpointsgive);
            cmd.AddChatCommand(config.adminchatCommands.adminxptake, this, Adminxptake);
            cmd.AddChatCommand(config.adminchatCommands.adminresetplayer, this, Adminxpresetplayer);
            cmd.AddChatCommand(config.adminchatCommands.adminfixdata, this, Adminfixdata);
            cmd.AddChatCommand(config.adminchatCommands.adminitemchange, this, Adminitemchange);
            cmd.AddChatCommand(config.adminchatCommands.adminresetharvest, this, AdminHarvestReset);
            cmd.AddChatCommand(config.adminchatCommands.adminresetlevelonly, this, AdminLevelReset);
            cmd.AddChatCommand(config.adminchatCommands.adminresetrankonly, this, AdminRankReset);
            cmd.AddChatCommand(config.adminchatCommands.adminresetstat, this, AdminStatReset);
            cmd.AddChatCommand(config.adminchatCommands.adminresetskill, this, AdminSkillReset);
            cmd.AddChatCommand(config.adminchatCommands.adminresetlevelonlyall, this, AdminLevelResetAll);
            cmd.AddChatCommand(config.adminchatCommands.adminresetrankonlyall, this, AdminRankResetAll);
            cmd.AddChatCommand(config.adminchatCommands.adminexcludeplayer, this, AdminExcludePlayer);
            cmd.AddChatCommand(config.adminchatCommands.admingiveitem, this, AdminGiveItem);
            _XPerienceData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPerience");
            _DailyXPerienceData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/DailyXPerience");
            _LootContainData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPLootData");
            _CorpseContainData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPCorpseData");
            _HorseData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPHorseData");
            _WeaponData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPWeaponData");
            _BoatData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPBoatData");
            _VehicleData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPVehicleData");
            _MinicopterData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPMinicopterData");
            _SnowmobData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPSnowmobileData");
            _SmithyData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPSmithyData");
            _ElectricianData = Interface.Oxide.DataFileSystem.GetFile(nameof(XPerience) + "/XPElectricianData");
            LoadData();
            SaveData();
            if (config.xpReducer.deathreduce)
            {
                Subscribe(nameof(OnPlayerDeath));
            }
            permission.RegisterPermission(Admin, this);
            permission.RegisterPermission(VIP, this);
            permission.RegisterPermission(PermMentality, this);
            permission.RegisterPermission(PermDexterity, this);
            permission.RegisterPermission(PermMight, this);
            permission.RegisterPermission(PermCaptaincy, this);
            permission.RegisterPermission(PermWeaponry, this);
            permission.RegisterPermission(PermNinjary, this);
            permission.RegisterPermission(PermWoodCutter, this);
            permission.RegisterPermission(PermSmithy, this);
            permission.RegisterPermission(PermMiner, this);
            permission.RegisterPermission(PermForager, this);
            permission.RegisterPermission(PermHunter, this);
            permission.RegisterPermission(PermFisher, this);
            permission.RegisterPermission(PermCrafter, this);
            permission.RegisterPermission(PermFramer, this);
            permission.RegisterPermission(PermMedic, this);
            permission.RegisterPermission(PermScavenger, this);
            permission.RegisterPermission(PermElectrician, this);
            permission.RegisterPermission(PermDemolitionist, this);
            permission.RegisterPermission(PermTamer, this);
            permission.RegisterPermission(PermXPBoost, this);
            if (config.xpLevelRanks.enableresetranks)
            {
                foreach (var rank in config.xpLevelRanks.ranks)
                {
                    permission.CreateGroup(rank.Value.group, rank.Value.sig, rank.Key);
                }
            }
            foreach (var specialgroup in config.specialGroups.specialgroups)
            {
                permission.CreateGroup(specialgroup.Value.permissionname, specialgroup.Value.groupname, specialgroup.Key);
            }
            config.backpacksmod.statorskill = config.backpacksmod.statorskill.ToLower();
            Subscribe(nameof(OnRunPlayerMetabolism));
            CheckOnlineStatus();
            Timer checkonlinestatus = timer.Every(600f, () =>
            {
                CheckOnlineStatus();
            });
            if (config.imageicons.rootpath == "../../oxide")
            {
                //config.imageicons.rootpath = Directory.GetCurrentDirectory().ToString();
                config.imageicons.rootpath = $"{Directory.GetCurrentDirectory().ToString()}/oxide";
            }
            if (config.imageicons.uselocalpath)
            {
                DownloadImages();
            }
            LibraryCheck();
            BasePlayer.activePlayerList.ToList().ForEach(OnPlayerConnected);
            if (config.sql.enablesql)
            {
                sqlConnection = sqlLibrary.OpenDb(config.sql.SQLhost, config.sql.SQLport, config.sql.SQLdatabase, config.sql.SQLusername, config.sql.SQLpassword, this);
                CreatSQLTable();
                UpdateSQLTable();
            }
            if (!config.mentality.useotherresearchmod)
            {
                Subscribe(nameof(OnResearchCostDetermine));
                Subscribe(nameof(CanUnlockTechTreeNode));
                Subscribe(nameof(OnTechTreeNodeUnlock));
                Subscribe(nameof(OnItemResearch));
            }
            if (config.electrician.maxlvl > 0)
            {
                Subscribe(nameof(OnEntitySpawned));
                Subscribe(nameof(OnOutputUpdate));
                Subscribe(nameof(OnInputUpdate));
                Subscribe(nameof(OnSolarPanelSunUpdate));
                LoadElectricianEntities();
            }
            CheckConfigValues();
            // SkinBox
            if (SkinBox != null)
            {
                Puts("SkinBox mod detected. Known conflict/exploit with SkinBox Skinned weapons and Weaponry stat. You can disable increase ammo due to exloits in weapnry settings.");
            }
            // BuildGrades
            if (BuildingGrades != null)
            {
                config.xpBuilding.buildxpdelay = true;
            }
            else
            {
                config.xpBuilding.buildxpdelay = false;
                config.xpBuilding.buildxpdelayseconds = 0;
            }
            // Website Help
            Puts("For Help Installing and Setting up XPerience check out https://www.rustlevels.com/XPerience/");
            // Prevent Burnt Cookables
            foreach (var shortname in CookedItems)
            {
                var cookable = GetCookables(shortname);
                if (cookable == null) continue;
                lowTemps.Add(shortname, cookable.lowTemp);
                highTemps.Add(shortname, cookable.highTemp);
                cookable.lowTemp = -1;
                cookable.highTemp = -1;
            }
        }
        private void OnNewSave()
        {
            if (config.defaultOptions.wipedataonnewsave)
            {
                _xperienceCache.Clear();
                _lootCache.Clear();
                _XPerienceData.Clear();
                _LootContainData.Clear();
                _corpseCache.Clear();
                _CorpseContainData.Clear();
                SaveData();
                if (config.sql.enablesql)
                {
                    DeleteSQL();
                }
            }
        }
        private void OnPluginLoaded(Plugin name)
        {
            if (ImageLibrary != null && name.Name == ImageLibrary.Name && !_isRestart)
            {
                _imageLibraryCheck = 0;
                LibraryCheck();
            }
        }
        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                ClearPlayerUIs(player, true, true);
                ClearUIs(player);
                if (config.backpacksmod.removeonunload)
                {
                    var backpacklist = config.backpacksmod.BackPackSlots;
                    if (backpacklist != null)
                    {
                        foreach (var removeoptions in backpacklist)
                        {
                            if (permission.UserHasPermission(player.UserIDString, $"backpacks.size.{removeoptions.Value.slots}")) permission.RevokeUserPermission(player.UserIDString, $"backpacks.size.{removeoptions.Value.slots}");
                        }
                    }
                }
            }
            SaveData();
            if (config.sql.enablesql)
            {
                UpdatePlayersDataSQL();
                sqlLibrary.CloseDb(sqlConnection);
            }
            _xperienceImageList?.Clear();
            // Remove Burnable Cookables
            foreach (KeyValuePair<string, int> item in lowTemps)
            {
                var cookable = GetCookables(item.Key);
                if (cookable == null) continue;
                cookable.lowTemp = item.Value;
                cookable.highTemp = highTemps[item.Key];
            }
        }
        private void OnServerShutdown()
        {
            _lootCache.Clear();
            _LootContainData.Clear();
            _corpseCache.Clear();
            _CorpseContainData.Clear();
            _horseCache.Clear();
            _HorseData.Clear();
            _boatCache.Clear();
            _BoatData.Clear();
            _vehicleCache.Clear();
            _VehicleData.Clear();
            _minicopterCache.Clear();
            _MinicopterData.Clear();
            SaveData();
            if (config.sql.enablesql)
            {
                UpdatePlayersDataSQL();
                sqlLibrary.CloseDb(sqlConnection);
            }
        }
        private void OnServerSave()
        {
            CheckOnlineStatus();
            SaveData();
            if (config.sql.enablesql)
            {
                foreach (var player in BasePlayer.allPlayerList)
                {
                    CheckPlayerDataSQL(player);
                }
                UpdatePlayersDataSQL();
            }
        }
        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            UpdateDisplayName(player);
            GetXPRecord(player);
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.level >= config.xpLevel.maxlevel && xprecord.DisableRank)
            {
                Ranks rank = GetXPRank(xprecord.rank);
                player.ChatMessage(XPLang("autorankoffmaxlevel", player.UserIDString, xprecord.level, rank.name));
            }
            if (config.defaultOptions.userpermissions)
            {
                CheckStatsAndSkills(player);
            }
            DailyLimitPlayer(player);
            PlayerArmor(player);
            MightAttributes(player);
            if (!config.defaultOptions.liveuistatslocationmoveable)
            {
                _xperienceCache[player.UserIDString].UILocation = config.defaultOptions.liveuistatslocation;
            }
            LiveStats(player);
            if (config.defaultOptions.showchatprofileonconnect && xprecord.showchatprofileonconnect)
            {
                PlayerStatsChat(player);
            }
            _xperienceCache[player.UserIDString].Status = true;
            if (_xperienceCache[player.UserIDString].dash == 0 || _xperienceCache[player.UserIDString].dash == 2)
            {
                _xperienceCache[player.UserIDString].dash = 1;
            }
            if (_xperienceCache[player.UserIDString].speedometertype == 0)
            {
                _xperienceCache[player.UserIDString].speedometertype = 1;
            }
            if (config.xpLevelRanks.enableresetranks)
            {
                if (!config.xpLevelRanks.allowplayerdisable)
                {
                    _xperienceCache[player.UserIDString].DisableRank = false;
                }
                RankCheck(player);
            }
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, config.backpacksmod.statorskill, false);
            }
            // Tamer
            if (PersonalAnimal != null)
            {
                PetChecks(player);
            }
        }
        private void OnPlayerDisconnected(BasePlayer player)
        {
            ClearPlayerUIs(player, true, true);
            if (config.sql.enablesql)
            {
                CheckPlayerDataSQL(player);
            }
            _xperienceCache[player.UserIDString].Status = false;
        }
        private void OnPlayerRespawn(BasePlayer player)
        {
            if (player == null) return;
            LiveStats(player);
        }
        private void OnPlayerRespawned(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            PlayerArmor(player);
            MightAttributes(player);
            LiveStats(player);
        }
        private void OnPlayerKicked(BasePlayer player)
        {
            _xperienceCache[player.UserIDString].Status = false;
        }
        private void CheckConfigValues()
        {
            Puts("Checking Config for invalid settings..");
            bool configchanged = false;
            int maxranks = config.xpLevelRanks.ranks.Count - 1;
            if (config.xpLevelRanks.maxresetrank > maxranks)
            {
                config.xpLevelRanks.maxresetrank = maxranks;
                configchanged = true;
            }
            if (config.defaultOptions.topplayersperpage > 20)
            {
                config.defaultOptions.topplayersperpage = 20;
                configchanged = true;
            }
            if (config.xpReducer.deathreduceamount < 0)
            {
                config.xpReducer.deathreduceamount = 0;
                configchanged = true;
            }
            if (config.xpReducer.suicidereduceamount < 0)
            {
                config.xpReducer.suicidereduceamount = 0;
                configchanged = true;
            }
            Puts("Config Check Complete");
            if (configchanged)
            {
                Puts("Some settings in your config were invalid and put back to default. Please check your settings and make sure they are within valid range!");
                SaveConfig();
                Interface.Oxide.ReloadPlugin("XPerience");
            }
            if (!config.playerprofilesettings.profilemenuwelcome)
            {
                foreach (var player in _xperienceCache)
                {
                    player.Value.showwelcomepanel = false;

                }
            }
            if (!config.xpLevelRanks.allowplayerdisable)
            {
                Puts("Allow Rank disable is false - Checking players for disabled ranks");
                foreach (var player in _xperienceCache)
                {
                    if (player.Value.DisableRank)
                    {
                        Puts($"Player: {player.Value.displayname} has their rank disabled, enabling now");
                        player.Value.DisableRank = false;
                    }
                }
                Puts("Rank Checking Complete");
            }
        }
        #endregion

        #region ImageLibrary
        private void LibraryCheck()
        {
            // Image Library Missing
            if (ImageLibrary == null)
            {
                PrintWarning($"ImageLibrary appears to be missing. XPerience Icons will not appear until you install ImageLibrary!");
                return;
            }
            // Image Library Not Loaded
            if (!ImageLibrary.IsLoaded)
            {
                _imageLibraryCheck++;
                timer.In(300, LibraryCheck);
                PrintWarning("if ImageLibrary is installed, then it appears to be occupied or not loaded, will check again in 5 minutes");
                return;
            }
            // Image Library Not Ready
            if (!ImageLibrary.Call<bool>("IsReady"))
            {
                _imageLibraryCheck++;
                timer.In(300, LibraryCheck);
                PrintWarning("ImageLibrary appears to be occupied, will check again in 5 minutes. Some icons may not appear until loaded.");
                return;
            }
            LoadImages();
        }
        private void LoadImages(bool forcereload = false)
        {
            _isRestart = false;
            _xperienceImageList = new Dictionary<string, string>();
            _xperienceImageList.Add(XPerienceicon, config.imageicons.mainicon);
            _xperienceImageList.Add(XPeriencementality, config.imageicons.mentality);
            _xperienceImageList.Add(XPeriencedexterity, config.imageicons.dexterity);
            _xperienceImageList.Add(XPeriencemight, config.imageicons.might);
            _xperienceImageList.Add(XPeriencecaptaincy, config.imageicons.captaincy);
            _xperienceImageList.Add(XPerienceweaponry, config.imageicons.weaponry);
            _xperienceImageList.Add(XPerienceninjary, config.imageicons.ninjary);
            _xperienceImageList.Add(XPeriencewoodcutter, config.imageicons.woodcutter);
            _xperienceImageList.Add(XPeriencesmithy, config.imageicons.smithy);
            _xperienceImageList.Add(XPerienceminer, config.imageicons.miner);
            _xperienceImageList.Add(XPerienceforager, config.imageicons.forager);
            _xperienceImageList.Add(XPeriencehunter, config.imageicons.hunter);
            _xperienceImageList.Add(XPeriencefisher, config.imageicons.fisher);
            _xperienceImageList.Add(XPeriencecrafter, config.imageicons.crafter);
            _xperienceImageList.Add(XPerienceframer, config.imageicons.framer);
            _xperienceImageList.Add(XPeriencemedic, config.imageicons.medic);
            _xperienceImageList.Add(XPeriencescavenger, config.imageicons.scavenger);
            _xperienceImageList.Add(XPerienceelectrician, config.imageicons.electrician);
            _xperienceImageList.Add(XPeriencedemolitionist, config.imageicons.demolitionist);
            _xperienceImageList.Add(XPeriencetamer, config.imageicons.tamer);
            _xperienceImageList.Add(XPeriencechicken, config.imageicons.chicken);
            _xperienceImageList.Add(XPerienceboar, config.imageicons.boar);
            _xperienceImageList.Add(XPeriencestag, config.imageicons.stag);
            _xperienceImageList.Add(XPeriencewolf, config.imageicons.wolf);
            _xperienceImageList.Add(XPeriencebear, config.imageicons.bear);
            _xperienceImageList.Add(XPeriencepolarbear, config.imageicons.polarbear);
            _xperienceImageList.Add(XPeriencearchery, config.imageicons.archery);
            _xperienceImageList.Add(XPeriencewizardry, config.imageicons.wizardry);
            _xperienceImageList.Add(XPerienceonline, config.imageicons.online);
            _xperienceImageList.Add(XPerienceoffline, config.imageicons.offline);
            _xperienceImageList.Add(XPeriencebackpack, config.imageicons.backpack);
            _xperienceImageList.Add(XPeriencelevel, config.imageicons.level);
            _xperienceImageList.Add(XPeriencelevel0, config.imageicons.level0);
            _xperienceImageList.Add(XPeriencelevel2, config.imageicons.level2);
            _xperienceImageList.Add(XPeriencelevel4, config.imageicons.level4);
            _xperienceImageList.Add(XPeriencelevel6, config.imageicons.level6);
            _xperienceImageList.Add(XPeriencelevel8, config.imageicons.level8);
            _xperienceImageList.Add(XPeriencelevel10, config.imageicons.level10);
            _xperienceImageList.Add(XPeriencedash, config.imageicons.dash);
            _xperienceImageList.Add(XPeriencexp, config.imageicons.xp);
            _xperienceImageList.Add(XPeriencearmor, config.imageicons.armor);
            _xperienceImageList.Add(XPeriencelogo, config.imageicons.xperiencelogo);
            foreach (var rank in config.xpLevelRanks.ranks)
            {
                if (!rank.Value.image.IsNullOrEmpty() && !_xperienceImageList.ContainsKey(rank.Value.image))
                {
                    _xperienceImageList.Add(rank.Value.name, rank.Value.image);
                }
            }
            foreach (var bgimg in config.imageicons.bgimages)
            {
                if (!bgimg.Value.url.IsNullOrEmpty() && !_xperienceImageList.ContainsKey(bgimg.Value.url))
                {
                    _xperienceImageList.Add(bgimg.Value.name, bgimg.Value.url);
                }
            }
            _xperienceImageList.Add(XPerienceraideasy, config.imageicons.raideasy);
            _xperienceImageList.Add(XPerienceraidmedium, config.imageicons.raidmedium);
            _xperienceImageList.Add(XPerienceraidhard, config.imageicons.raidhard);
            _xperienceImageList.Add(XPerienceraidexpert, config.imageicons.raidexpert);
            _xperienceImageList.Add(XPerienceraidnightmare, config.imageicons.raidnightmare);
            _xperienceImageList.Add(XPerienceprofilebg, config.imageicons.profilebg);
            _xperienceImageList.Add(XPeriencemenubg, config.imageicons.menubg);
            if (forcereload)
            {
                ImageLibrary?.Call("ImportImageList", Name, _xperienceImageList, 0UL, true, new Action(Ready));
            }
            else
            {
                ImageLibrary?.Call("ImportImageList", Name, _xperienceImageList, 0UL, false, new Action(Ready));
            }
        }
        private void Ready()
        {
            _isXPReady = true;
            _xperienceImageList.Clear();
        }
        private void DownloadImages()
        {
            if (!Directory.Exists($"{config.imageicons.rootpath}"))
            {
                Puts("Oxide Folder not found, check path");
                return;
            }
            // Check & Created Folder
            try
            {
                // Check if image folder exists.
                bool folder = false;
                if (Directory.Exists($"{config.imageicons.rootpath}/data/XPerience/images"))
                {
                    folder = true;
                }
                // Try to create the directory.
                if (!folder)
                {
                    DirectoryInfo di = Directory.CreateDirectory($"{config.imageicons.rootpath}/data/XPerience/images");
                    Puts("Image folder was created successfully at {0}.", Directory.GetCreationTime($"{config.imageicons.rootpath}/data/XPerience/images"));
                }
            }
            catch (Exception e)
            {
                Puts("Failed to create image directory: {0}", e.ToString());
                return;
            }
            // Check & Download Images
            #region Check & Download Images
            Puts("Downloading Images..");
            int totalimages = 0;
            Dictionary<string, string> _ImageList = new Dictionary<string, string>();
            _ImageList.Add("https://www.rustlevels.com/gameimages/XPerience.png", $"{config.imageicons.rootpath}/data/XPerience/images/XPerience.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/mentality.png", $"{config.imageicons.rootpath}/data/XPerience/images/mentality.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/dexterity.png", $"{config.imageicons.rootpath}/data/XPerience/images/dexterity.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/might.png", $"{config.imageicons.rootpath}/data/XPerience/images/might.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/weaponry.png", $"{config.imageicons.rootpath}/data/XPerience/images/weaponry.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/ninjary.png", $"{config.imageicons.rootpath}/data/XPerience/images/ninjary.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/captaincy.png", $"{config.imageicons.rootpath}/data/XPerience/images/captaincy.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/woodcutter.png", $"{config.imageicons.rootpath}/data/XPerience/images/woodcutter.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/smithy.png", $"{config.imageicons.rootpath}/data/XPerience/images/smithy.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/miner.png", $"{config.imageicons.rootpath}/data/XPerience/images/miner.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/fisher.png", $"{config.imageicons.rootpath}/data/XPerience/images/fisher.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/forager.png", $"{config.imageicons.rootpath}/data/XPerience/images/forager.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/hunter.png", $"{config.imageicons.rootpath}/data/XPerience/images/hunter.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/crafter.png", $"{config.imageicons.rootpath}/data/XPerience/images/crafter.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/framer.png", $"{config.imageicons.rootpath}/data/XPerience/images/framer.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/medic.png", $"{config.imageicons.rootpath}/data/XPerience/images/medic.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/scavenger.png", $"{config.imageicons.rootpath}/data/XPerience/images/scavenger.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/electrician.png", $"{config.imageicons.rootpath}/data/XPerience/images/electrician.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/demolitionist.png", $"{config.imageicons.rootpath}/data/XPerience/images/demolitionist.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/tamer.png", $"{config.imageicons.rootpath}/data/XPerience/images/tamer.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/chicken.png", $"{config.imageicons.rootpath}/data/XPerience/images/chicken.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/boar.png", $"{config.imageicons.rootpath}/data/XPerience/images/boar.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/stag.png", $"{config.imageicons.rootpath}/data/XPerience/images/stag.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/wolf.png", $"{config.imageicons.rootpath}/data/XPerience/images/wolf.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/bear.png", $"{config.imageicons.rootpath}/data/XPerience/images/bear.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/polarbear.png", $"{config.imageicons.rootpath}/data/XPerience/images/polarbear.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/archery.png", $"{config.imageicons.rootpath}/data/XPerience/images/archery.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/wizardry.png", $"{config.imageicons.rootpath}/data/XPerience/images/wizardry.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/online.png", $"{config.imageicons.rootpath}/data/XPerience/images/online.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/offline.png", $"{config.imageicons.rootpath}/data/XPerience/images/offline.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/backpack.png", $"{config.imageicons.rootpath}/data/XPerience/images/backpack.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/xp.png", $"{config.imageicons.rootpath}/data/XPerience/images/xp.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level.png", $"{config.imageicons.rootpath}/data/XPerience/images/level.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level0.png", $"{config.imageicons.rootpath}/data/XPerience/images/level0.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level2.png", $"{config.imageicons.rootpath}/data/XPerience/images/level2.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level4.png", $"{config.imageicons.rootpath}/data/XPerience/images/level4.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level6.png", $"{config.imageicons.rootpath}/data/XPerience/images/level6.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level8.png", $"{config.imageicons.rootpath}/data/XPerience/images/level8.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/level10.png", $"{config.imageicons.rootpath}/data/XPerience/images/level10.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/armor.png", $"{config.imageicons.rootpath}/data/XPerience/images/armor.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/dash.png", $"{config.imageicons.rootpath}/data/XPerience/images/dash.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/menubg.jpg", $"{config.imageicons.rootpath}/data/XPerience/images/menubg.jpg");
            _ImageList.Add("https://www.rustlevels.com/gameimages/raideasy.png", $"{config.imageicons.rootpath}/data/XPerience/images/raideasy.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/raidmedium.png", $"{config.imageicons.rootpath}/data/XPerience/images/raidmedium.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/raidhard.png", $"{config.imageicons.rootpath}/data/XPerience/images/raidhard.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/raidexpert.png", $"{config.imageicons.rootpath}/data/XPerience/images/raidexpert.png");
            _ImageList.Add("https://www.rustlevels.com/gameimages/raidnightmare.png", $"{config.imageicons.rootpath}/data/XPerience/images/raidnightmare.png");
            foreach (var bg in config.imageicons.bgimages)
            {
                _ImageList.Add($"https://www.rustlevels.com/gameimages/{bg.Value.name}.png", $"{config.imageicons.rootpath}/data/XPerience/images/{bg.Value.name}.png");
            }
            foreach (var rank in config.xpLevelRanks.ranks)
            {
                _ImageList.Add($"https://www.rustlevels.com/gameimages/{rank.Key}.png", $"{config.imageicons.rootpath}/data/XPerience/images/{rank.Key}.png");
            }
            foreach (var image in _ImageList)
            {
                WebClient client = new WebClient();
                if (!File.Exists(image.Value))
                {
                    client.DownloadFileAsync(new Uri(image.Key), image.Value);
                    totalimages++;
                    client.DownloadFileCompleted += new System.ComponentModel.AsyncCompletedEventHandler(DownloadImagesCompleted);
                }
            }
            Puts($"{totalimages} Downloaded..");
            #endregion
            // Update Config
            #region Update Config
            Puts("Updating URL paths to local directory...");
            config.imageicons.xperiencelogo = $"file://{config.imageicons.rootpath}/data/XPerience/images/XPerience.png";
            config.imageicons.mainicon = $"file://{config.imageicons.rootpath}/data/XPerience/images/XPerience.png";
            config.imageicons.mentality = $"file://{config.imageicons.rootpath}/data/XPerience/images/mentality.png";
            config.imageicons.dexterity = $"file://{config.imageicons.rootpath}/data/XPerience/images/dexterity.png";
            config.imageicons.might = $"file://{config.imageicons.rootpath}/data/XPerience/images/might.png";
            config.imageicons.weaponry = $"file://{config.imageicons.rootpath}/data/XPerience/images/weaponry.png";
            config.imageicons.ninjary = $"file://{config.imageicons.rootpath}/data/XPerience/images/ninjary.png";
            config.imageicons.captaincy = $"file://{config.imageicons.rootpath}/data/XPerience/images/captaincy.png";
            config.imageicons.woodcutter = $"file://{config.imageicons.rootpath}/data/XPerience/images/woodcutter.png";
            config.imageicons.smithy = $"file://{config.imageicons.rootpath}/data/XPerience/images/smithy.png";
            config.imageicons.miner = $"file://{config.imageicons.rootpath}/data/XPerience/images/miner.png";
            config.imageicons.fisher = $"file://{config.imageicons.rootpath}/data/XPerience/images/fisher.png";
            config.imageicons.forager = $"file://{config.imageicons.rootpath}/data/XPerience/images/forager.png";
            config.imageicons.hunter = $"file://{config.imageicons.rootpath}/data/XPerience/images/hunter.png";
            config.imageicons.crafter = $"file://{config.imageicons.rootpath}/data/XPerience/images/crafter.png";
            config.imageicons.framer = $"file://{config.imageicons.rootpath}/data/XPerience/images/framer.png";
            config.imageicons.medic = $"file://{config.imageicons.rootpath}/data/XPerience/images/medic.png";
            config.imageicons.scavenger = $"file://{config.imageicons.rootpath}/data/XPerience/images/scavenger.png";
            config.imageicons.electrician = $"file://{config.imageicons.rootpath}/data/XPerience/images/electrician.png";
            config.imageicons.demolitionist = $"file://{config.imageicons.rootpath}/data/XPerience/images/demolitionist.png";
            config.imageicons.tamer = $"file://{config.imageicons.rootpath}/data/XPerience/images/tamer.png";
            config.imageicons.chicken = $"file://{config.imageicons.rootpath}/data/XPerience/images/chicken.png";
            config.imageicons.boar = $"file://{config.imageicons.rootpath}/data/XPerience/images/boar.png";
            config.imageicons.stag = $"file://{config.imageicons.rootpath}/data/XPerience/images/stag.png";
            config.imageicons.wolf = $"file://{config.imageicons.rootpath}/data/XPerience/images/wolf.png";
            config.imageicons.bear = $"file://{config.imageicons.rootpath}/data/XPerience/images/bear.png";
            config.imageicons.polarbear = $"file://{config.imageicons.rootpath}/data/XPerience/images/polarbear.png";
            config.imageicons.archery = $"file://{config.imageicons.rootpath}/data/XPerience/images/archery.png";
            config.imageicons.wizardry = $"file://{config.imageicons.rootpath}/data/XPerience/images/wizardry.png";
            config.imageicons.online = $"file://{config.imageicons.rootpath}/data/XPerience/images/online.png";
            config.imageicons.offline = $"file://{config.imageicons.rootpath}/data/XPerience/images/offline.png";
            config.imageicons.backpack = $"file://{config.imageicons.rootpath}/data/XPerience/images/backpack.png";
            config.imageicons.xp = $"file://{config.imageicons.rootpath}/data/XPerience/images/xp.png";
            config.imageicons.level = $"file://{config.imageicons.rootpath}/data/XPerience/images/level.png";
            config.imageicons.level0 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level0.png";
            config.imageicons.level2 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level2.png";
            config.imageicons.level4 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level4.png";
            config.imageicons.level6 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level6.png";
            config.imageicons.level8 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level8.png";
            config.imageicons.level10 = $"file://{config.imageicons.rootpath}/data/XPerience/images/level10.png";
            config.imageicons.armor = $"file://{config.imageicons.rootpath}/data/XPerience/images/armor.png";
            config.imageicons.dash = $"file://{config.imageicons.rootpath}/data/XPerience/images/dash.png";
            config.imageicons.profilebg = $"file://{config.imageicons.rootpath}/data/XPerience/images/ProfileBG0.png";
            config.imageicons.menubg = $"file://{config.imageicons.rootpath}/data/XPerience/images/menubg.jpg";
            config.imageicons.raideasy = $"file://{config.imageicons.rootpath}/data/XPerience/images/raideasy.png";
            config.imageicons.raidmedium = $"file://{config.imageicons.rootpath}/data/XPerience/images/raidmedium.png";
            config.imageicons.raidhard = $"file://{config.imageicons.rootpath}/data/XPerience/images/raidhard.png";
            config.imageicons.raidexpert = $"file://{config.imageicons.rootpath}/data/XPerience/images/raidexpert.png";
            config.imageicons.raidnightmare = $"file://{config.imageicons.rootpath}/data/XPerience/images/raidnightmare.png";
            foreach (var bgconfig in config.imageicons.bgimages)
            {
                bgconfig.Value.url = $"file://{config.imageicons.rootpath}/data/XPerience/images/{bgconfig.Value.name}.png";
            }
            foreach (var rankconfig in config.xpLevelRanks.ranks)
            {
                rankconfig.Value.image = $"file://{config.imageicons.rootpath}/data/XPerience/images/{rankconfig.Key}.png";
            }
            Puts("Image URLs updated. Saving config.");
            #endregion
            // Save & Reload Images
            SaveConfig();
            Puts("loading Images");
            if (totalimages > 0)
            {
                LoadImages(true);
            }
            else
            {
                LoadImages();
            }
        }
        private void DownloadImagesCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                Puts("File download cancelled.");
            }
        }
        #endregion

        #region Player / Entity Data
        public XPRecord GetXPRecord(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            XPRecord xprecord;
            if (_xperienceCache.TryGetValue(player.UserIDString, out xprecord))
            {
                return xprecord;
            }
            if (!_xperienceCache.TryGetValue(player.UserIDString, out xprecord))
            {
                int dmgskin = 0;
                bool welcome = false;
                if (XPerienceAddon != null)
                {
                    dmgskin = XPerienceAddon.Call<int>("GetExtraFeatures", player, "config", "defaultdmgbarskin");
                    welcome = XPerienceAddon.Call<bool>("ShowWelcomePanel");
                }
                _xperienceCache[player.UserIDString] = xprecord = new XPRecord
                {
                    rank = 0,
                    truelevel = 0,
                    trueexperience = 0,
                    level = 0,
                    experience = 0,
                    requiredxp = config.xpLevel.levelstart,
                    statpoint = 0,
                    skillpoint = 0,
                    Mentality = 0,
                    MentalityP = 0,
                    Dexterity = 0,
                    DexterityP = 0,
                    Might = 0,
                    MightP = 0,
                    Captaincy = 0,
                    CaptaincyP = 0,
                    Weaponry = 0,
                    WeaponryP = 0,
                    Ninjary = 0,
                    NinjaryP = 0,
                    WoodCutter = 0,
                    WoodCutterP = 0,
                    Smithy = 0,
                    SmithyP = 0,
                    Miner = 0,
                    MinerP = 0,
                    Forager = 0,
                    ForagerP = 0,
                    Hunter = 0,
                    HunterP = 0,
                    Fisher = 0,
                    FisherP = 0,
                    Crafter = 0,
                    CrafterP = 0,
                    Framer = 0,
                    FramerP = 0,
                    Electrician = 0,
                    ElectricianP = 0,
                    Demolitionist = 0,
                    DemolitionistP = 0,
                    Medic = 0,
                    MedicP = 0,
                    Tamer = 0,
                    TamerP = 0,
                    Wood = 0,
                    Stone = 0,
                    Metal = 0,
                    Sulfur = 0,
                    Cactus = 0,
                    Berries = 0,
                    Pumpkin = 0,
                    Potato = 0,
                    Corn = 0,
                    Mushroom = 0,
                    Hemp = 0,
                    Seed = 0,
                    Status = true,
                    DisableRank = false,
                    UILocation = config.defaultOptions.liveuistatslocation,
                    teatype = "none",
                    teacooldown = 0,
                    resettimerstats = DateTime.Now,
                    resettimerskills = DateTime.Now,
                    playerfixdata = DateTime.Now,
                    dash = 1,
                    dmgbar = dmgskin,
                    profilebg = config.playerprofilesettings.profilebg,
                    fuelgauge = true,
                    speedometer = true,
                    speedometertype = config.defaultOptions.speedometertype,
                    enableconfirmationprompt = config.defaultOptions.enableconfirmationprompt,
                    showchatnotifications = config.defaultOptions.showchatnotifications,
                    showchatprofileonconnect = config.defaultOptions.showchatprofileonconnect,
                    showwelcomepanel = false,
                    showchatxp = false,
                    exclude = false,
                    raidablebase = false,
                };
                xprecord.id = player.UserIDString;
                xprecord.displayname = player.displayName;
            }
            return xprecord;
        }
        public DailyRecord GetDailyRecord(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            DailyRecord dailyrecord;
            if (_dailyxperienceCache.TryGetValue(player.UserIDString, out dailyrecord))
            {
                return dailyrecord;
            }
            if (!_dailyxperienceCache.TryGetValue(player.UserIDString, out dailyrecord))
            {
                _dailyxperienceCache[player.UserIDString] = dailyrecord = new DailyRecord
                {
                    dailyexperience = 0,
                    dailystatresets = 0,
                    dailyskillresets = 0,
                    lastexperiencereset = DateTime.Now,
                    laststatreset = DateTime.Now,
                    lastskillreset = DateTime.Now
                };
            }
            return dailyrecord;
        }
        public XPRecord GetPlayerRecord(string player)
        {
            if (player == null) return null;
            XPRecord xprecord;
            if (_xperienceCache.TryGetValue(player, out xprecord))
            {
                return xprecord;
            }
            return xprecord;
        }
        public DailyRecord GetPlayerDailyRecord(string player)
        {
            if (player == null) return null;
            DailyRecord dailyrecord;
            if (_dailyxperienceCache.TryGetValue(player, out dailyrecord))
            {
                return dailyrecord;
            }
            return dailyrecord;
        }
        public Ranks GetXPRank(int rank)
        {
            Ranks ranks;
            if (config.xpLevelRanks.ranks.TryGetValue(rank, out ranks))
            {
                return ranks;
            }
            return ranks;
        }
        public BackgroundImgs GetBGImg(int bgid)
        {
            BackgroundImgs bgimgs;
            if (config.imageicons.bgimages.TryGetValue(bgid, out bgimgs))
            {
                return bgimgs;
            }
            return bgimgs;
        }
        private static BasePlayer FindPlayer(string playerid)
        {
            foreach (var activePlayer in BasePlayer.activePlayerList)
            {
                if (activePlayer.UserIDString == playerid)
                    return activePlayer;
            }
            foreach (var sleepingPlayer in BasePlayer.sleepingPlayerList)
            {
                if (sleepingPlayer.UserIDString == playerid)
                    return sleepingPlayer;
            }
            return null;
        }
        private BasePlayer GetOwnerPlayer(Item item)
        {
            if (item.parentItem == null)
            {
                return item.GetOwnerPlayer();
            }
            return item.parentItem.GetOwnerPlayer();
        }
        private void CheckOnlineStatus()
        {
            foreach (var player in _xperienceCache)
            {
                player.Value.Status = false;
                foreach (var online in BasePlayer.activePlayerList)
                {
                    if (player.Key == online.UserIDString)
                    {
                        player.Value.Status = true;
                    }
                }
                foreach (var offline in BasePlayer.sleepingPlayerList)
                {
                    if (player.Key == offline.UserIDString)
                    {
                        player.Value.Status = false;
                    }
                }
            }
        }
        private void CheckStatsAndSkills(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            // Stats
            if (xprecord.Mentality > 0 && !permission.UserHasPermission(player.UserIDString, PermMentality))
            {
                StatReset(player, "Mentality", true);
            }
            if (xprecord.Dexterity > 0 && !permission.UserHasPermission(player.UserIDString, PermDexterity))
            {
                StatReset(player, "Dexterity", true);
            }
            if (xprecord.Might > 0 && !permission.UserHasPermission(player.UserIDString, PermMight))
            {
                StatReset(player, "Might", true);
            }
            if (xprecord.Weaponry > 0 && !permission.UserHasPermission(player.UserIDString, PermWeaponry))
            {
                StatReset(player, "Weaponry", true);
            }
            if (xprecord.Ninjary > 0 && !permission.UserHasPermission(player.UserIDString, PermNinjary))
            {
                StatReset(player, "Ninjary", true);
            }
            if (xprecord.Captaincy > 0 && !permission.UserHasPermission(player.UserIDString, PermCaptaincy))
            {
                StatReset(player, "Captaincy", true);
            }
            // Skills
            if (xprecord.WoodCutter > 0 && !permission.UserHasPermission(player.UserIDString, PermWoodCutter))
            {
                SkillReset(player, "WoodCutter", true);
            }
            if (xprecord.Smithy > 0 && !permission.UserHasPermission(player.UserIDString, PermSmithy))
            {
                SkillReset(player, "Smithy", true);
            }
            if (xprecord.Miner > 0 && !permission.UserHasPermission(player.UserIDString, PermMiner))
            {
                SkillReset(player, "Miner", true);
            }
            if (xprecord.Forager > 0 && !permission.UserHasPermission(player.UserIDString, PermForager))
            {
                SkillReset(player, "Forager", true);
            }
            if (xprecord.Hunter > 0 && !permission.UserHasPermission(player.UserIDString, PermHunter))
            {
                SkillReset(player, "Hunter", true);
            }
            if (xprecord.Crafter > 0 && !permission.UserHasPermission(player.UserIDString, PermCrafter))
            {
                SkillReset(player, "Crafter", true);
            }
            if (xprecord.Framer > 0 && !permission.UserHasPermission(player.UserIDString, PermFramer))
            {
                SkillReset(player, "Framer", true);
            }
            if (xprecord.Fisher > 0 && !permission.UserHasPermission(player.UserIDString, PermFisher))
            {
                SkillReset(player, "Fisher", true);
            }
            if (xprecord.Medic > 0 && !permission.UserHasPermission(player.UserIDString, PermMedic))
            {
                SkillReset(player, "Medic", true);
            }
            if (xprecord.Scavenger > 0 && !permission.UserHasPermission(player.UserIDString, PermScavenger))
            {
                SkillReset(player, "Scavenger", true);
            }
            if (xprecord.Electrician > 0 && !permission.UserHasPermission(player.UserIDString, PermElectrician))
            {
                SkillReset(player, "Electrician", true);
            }
            if (xprecord.Tamer > 0 && !permission.UserHasPermission(player.UserIDString, PermTamer))
            {
                SkillReset(player, "Tamer", true);
            }
        }
        private void UpdateDisplayName(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.displayname != player.displayName)
                xprecord.displayname = player.displayName;
        }
        private void AddLootData(BasePlayer player, LootContainer lootcontainer)
        {
            Loot loot;
            if (!_lootCache.TryGetValue(lootcontainer.net.ID.Value, out loot))
            {
                _lootCache.Add(lootcontainer.net.ID.Value, loot = new Loot
                {
                    id = new List<string>(),
                });
            }
            if (!loot.id.Contains(player.UserIDString))
            {
                loot.id.Add(player.UserIDString);
            }
        }
        private void AddHorseData(BasePlayer player, RidableHorse horse)
        {
            Horse defaulthorse;
            if (!_horseCache.TryGetValue(horse.net.ID.Value, out defaulthorse))
            {
                _horseCache.Add(horse.net.ID.Value, new Horse
                {
                    horse = horse.net.ID.Value,
                    maxSpeed = horse.maxSpeed,
                    runSpeed = horse.runSpeed,
                    trotSpeed = horse.trotSpeed,
                    walkSpeed = horse.walkSpeed,
                    player = player.userID
                });
            }
        }
        private void AddBoatData(BasePlayer player, BaseBoat boat)
        {
            Boat defaultboat;
            if (!_boatCache.TryGetValue(boat.net.ID.Value, out defaultboat))
            {
                _boatCache.Add(boat.net.ID.Value, new Boat
                {
                    boat = boat.net.ID.Value,
                    defaultSpeed = boat.engineThrust,
                    player = player.userID
                });
            }
        }
        private void AddVehicleData(BasePlayer player, ModularCar car)
        {
            Vehicle vehicle;
            if (!_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
            {
                _vehicleCache.Add(car.net.ID.Value, new Vehicle
                {
                    vehicle = car.net.ID.Value,
                    maxDriveSlip = car.carSettings.maxDriveSlip,
                    reversePercentSpeed = car.carSettings.reversePercentSpeed,
                    driveForceToMaxSlip = car.carSettings.driveForceToMaxSlip,
                    player = player.userID
                });
            }
        }
        private void AddMiniCopterData(BasePlayer player, Minicopter mini)
        {
            MiniCopterP minicopter;
            if (!_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
            {
                _minicopterCache.Add(mini.net.ID.Value, new MiniCopterP
                {
                    minicopter = mini.net.ID.Value,
                    //maxRotorSpeed = mini.maxRotorSpeed,
                    player = player.userID
                });
            }
        }
        private void AddSnowMobData(BasePlayer player, Snowmobile snowmob)
        {
            Snowmob getsnowmob;
            if (!_snowmobCache.TryGetValue(snowmob.net.ID.Value, out getsnowmob))
            {
                _snowmobCache.Add(snowmob.net.ID.Value, new Snowmob
                {
                    snowmob = snowmob.net.ID.Value,
                    terrain = snowmob.badTerrainDrag,
                    engineKW = snowmob.engineKW,
                    player = player.userID
                });
            }
        }
        private void AddWeaponData(BasePlayer player, BaseProjectile projectile, int defaultammo, int maxammo, double defaultreload, double newreload, double defaultdistance, double maxdistance, double defaultrange, double maxrange, NetworkableId weapondata)
        {
            Weapon weapon;
            if (!_weaponCache.TryGetValue(projectile.net.ID.Value, out weapon))
            {
                _weaponCache.Add(projectile.net.ID.Value, new Weapon
                {
                    defaultammo = defaultammo,
                    maxammo = maxammo,
                    defaultreload = defaultreload,
                    newreload = newreload,
                    defaultdistance = defaultdistance,
                    maxdistance = maxdistance,
                    defaultrange = defaultrange,
                    maxrange = maxrange,
                    player = player.userID,
                    weapondata = weapondata
                });
            }
        }
        private void AddCorpseData(BasePlayer player, LootableCorpse corpse)
        {
            Corpse corpseid;
            if (!_corpseCache.TryGetValue(corpse.net.ID.Value, out corpseid))
            {
                _corpseCache.Add(corpse.net.ID.Value, corpseid = new Corpse
                {
                    corpsecontainer = corpse.net.ID.Value,
                    id = new List<string>(),
                });
            }

            if (!corpseid.id.Contains(player.UserIDString))
            {
                corpseid.id.Add(player.UserIDString);
            }
        }
        private void AddSmithyData(string resource, float time)
        {
            SmithyD getsmithyd;
            if (!_smithyCache.TryGetValue(resource, out getsmithyd))
            {
                _smithyCache.Add(resource, new SmithyD
                {
                    resource = resource,
                    time = time
                });
            }
        }
        private void AddElectricianData(ulong id, string type, int defaultmaxoutput, int newmaxoutput, ulong owner)
        {
            ElectricianD getid;
            if (!_electricianCache.TryGetValue(id, out getid))
            {
                _electricianCache.Add(id, new ElectricianD
                {
                    id = id,
                    type = type,
                    defaultmaxoutput = defaultmaxoutput,
                    newmaxoutput = newmaxoutput,
                    owner = owner
                });
            }
        }
        private double GetPlayerCooldown(ulong userID, string type)
        {
            double playerCooldown;
            double currentTime = CurrentTime;
            double gettime = 0;
            switch (type)
            {
                case "build":
                    if (_buildCooldowns.TryGetValue(userID, out playerCooldown))
                        gettime = currentTime > playerCooldown ? 0 : playerCooldown - CurrentTime;
                    break;
                case "craft":
                    if (_craftCooldowns.TryGetValue(userID, out playerCooldown))
                        gettime = currentTime > playerCooldown ? 0 : playerCooldown - CurrentTime;
                    break;
                case "notify":
                    if (_notifyCooldowns.TryGetValue(userID, out playerCooldown))
                        gettime = currentTime > playerCooldown ? 0 : playerCooldown - CurrentTime;
                    break;
            }
            return gettime;

        }
        private double GetTeaCooldown(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.teacooldown == 0) return 0;
            double currentTime = CurrentTime;
            return currentTime > xprecord.teacooldown ? 0 : xprecord.teacooldown - CurrentTime;
        }
        private string GetTeaTypes(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.teatype == "none") return "none";
            return xprecord.teatype;
        }
        #endregion

        #region Chat
        private bool BetterChatActv() => (BetterChat != null && BetterChat.IsLoaded);
        private bool ColouredChatAct() => (ColouredChat != null && ColouredChat.IsLoaded);
        private bool IQChatAct() => (IQChat != null && IQChat.IsLoaded);
        private object OnPlayerChat(BasePlayer player, string message, Chat.ChatChannel channel)
        {
            if (BetterChatActv() || ColouredChatAct() || IQChatAct()) return null;
            if (player == null || message == null) return null;
            if (!config.xpLevelRanks.showrankinchat && !config.defaultOptions.showlevelinchat) return null;
            XPRecord xprecord = GetXPRecord(player);
            string showrank = "";
            string showlevel = "";
            bool displayrank = false;
            bool displaylevel = false;
            if (config.xpLevelRanks.showrankinchat)
            {
                string rcolor = ColorConverter(config.uitextColor.rankname).ToString();
                Ranks rank = GetXPRank(xprecord.rank);
                showrank = $"<color={rcolor}>{rank.sig}</color>";
                displayrank = true;
            }
            if (config.defaultOptions.showlevelinchat)
            {
                string lcolor = ColorConverter(config.uitextColor.level).ToString();
                showlevel = $"<color={lcolor}>[{xprecord.level}]</color>";
                displaylevel = true;
            }
            if (displayrank || displaylevel)
            {
                OverrideChatMessage(player, showrank, player.displayName, showlevel, message, channel);
            }
            return true;
        }
        private void OverrideChatMessage(BasePlayer player, string ranksig, string displayname, string level, string message, Chat.ChatChannel channel)
        {
            RCon.Broadcast(RCon.LogType.Chat, new Chat.ChatEntry
            {
                Channel = channel,
                Message = new Regex("<[^>]*>").Replace(string.Join(" ", message), ""),
                UserId = player.UserIDString,
                Username = player.displayName,
                Time = Epoch.Current
            });
            switch ((int)channel)
            {
                // Global
                case 0:
                    var newglobalchat = ArrayPool.Get(3);
                    newglobalchat[0] = (int)channel;
                    newglobalchat[1] = player.UserIDString;
                    foreach (BasePlayer p in BasePlayer.activePlayerList.Where(p => p.IsValid() == true))
                    {
                        newglobalchat[2] = $"{ranksig}{level}{displayname}: {message}";
                        p.SendConsoleCommand("chat.add", newglobalchat);
                    }
                    ArrayPool.Free(newglobalchat);
                    break;

                // Teams
                case 1:
                    var newteamchat = ArrayPool.Get(3);
                    newteamchat[0] = (int)channel;
                    newteamchat[1] = player.UserIDString;
                    foreach (BasePlayer p in BasePlayer.activePlayerList.Where(p => p.Team != null && player.Team != null && p.Team.teamID == player.Team.teamID && p.IsValid() == true))
                    {
                        newteamchat[2] = $"{ranksig}{level} {displayname}: {message}";
                        p.SendConsoleCommand("chat.add", newteamchat);
                    }
                    ArrayPool.Free(newteamchat);
                    break;
            }
        }
        private object OnBetterChat(Dictionary<string, object> chat)
        {
            var player = (chat["Player"] as IPlayer).Object as BasePlayer;
            if (player == null) return null;
            XPRecord xprecord = GetXPRecord(player);
            string showrank = "";
            string showlevel = "";
            bool showchat = false;
            if (config.xpLevelRanks.showrankinchat && BetterChatActv())
            {
                string rcolor = ColorConverter(config.uitextColor.rankname).ToString();
                Ranks rank = GetXPRank(xprecord.rank);
                showrank = $"<color={rcolor}>{rank.sig}</color>";
                showchat = true;
            }
            if (config.defaultOptions.showlevelinchat && BetterChatActv())
            {
                string lcolor = ColorConverter(config.uitextColor.level).ToString();
                showlevel = $"<color={lcolor}>[{xprecord.level}]</color>";
                showchat = true;
            }
            if (showchat)
            {
                chat["Username"] = $"{showrank}{showlevel} {player.displayName}";
                return chat;
            }
            return null;
        }
        #endregion

        #region Level/XP/Stat/Skill Control
        private void DailyLimit(bool reset = false)
        {
            if (reset)
            {
                _dailyxperienceCache.Clear();
                SaveData();
                foreach (var player in BasePlayer.activePlayerList)
                {
                    DailyLimitPlayer(player);
                    player.ChatMessage(XPLang("dailylimitreset", player.UserIDString, config.dailytimer.dailyresettimerhours));
                }
            }
        }
        private void DailyLimitPlayer(BasePlayer player, bool reset = false)
        {
            DailyRecord dailyrecord = GetDailyRecord(player);
            // Reset Timers
            if (reset)
            {
                dailyrecord.dailyexperience = 0;
                dailyrecord.dailystatresets = 0;
                dailyrecord.dailyskillresets = 0;
                dailyrecord.lastexperiencereset = DateTime.Now;
                dailyrecord.laststatreset = DateTime.Now;
                dailyrecord.lastskillreset = DateTime.Now;
                player.ChatMessage(XPLang("dailylimitreset", player.UserIDString, config.dailytimer.dailyresettimerhours));
                return;
            }
            // Check XP Timers
            var getlastxpreset = dailyrecord.lastexperiencereset - DateTime.Now;
            double lastxpresethours = double.Parse(getlastxpreset.Hours.ToString());
            double lastxpresetmins = double.Parse(getlastxpreset.Minutes.ToString());
            if ((lastxpresethours < 0 && lastxpresetmins < 0) || (lastxpresethours == 0 && lastxpresetmins < 0))
            {
                dailyrecord.dailyexperience = 0;
                dailyrecord.lastexperiencereset = DateTime.Now.AddHours(config.dailytimer.dailyresettimerhours);
            }
            // Check Stat timer
            var getlaststatreset = dailyrecord.laststatreset - DateTime.Now;
            double laststatresethours = double.Parse(getlaststatreset.Hours.ToString());
            double laststatresetmins = double.Parse(getlaststatreset.Minutes.ToString());
            if ((laststatresethours < 0 && laststatresetmins < 0) || (laststatresethours == 0 && laststatresetmins < 0))
            {
                dailyrecord.dailystatresets = 0;
                dailyrecord.laststatreset = DateTime.Now.AddHours(config.dailytimer.dailyresettimerhours);
            }
            // Check Skill Timer
            var getlastskillreset = dailyrecord.lastskillreset - DateTime.Now;
            double lastskillresethours = double.Parse(getlastskillreset.Hours.ToString());
            double lastskillresetmins = double.Parse(getlastskillreset.Minutes.ToString());
            if ((lastskillresethours < 0 && lastskillresetmins < 0) || (lastskillresethours == 0 && lastskillresetmins < 0))
            {
                dailyrecord.dailyskillresets = 0;
                dailyrecord.lastskillreset = DateTime.Now.AddHours(config.dailytimer.dailyresettimerhours);
            }
        }
        public void GainExp(BasePlayer player, double e)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            if (CheckPlayerLocation(player, "noxpgain")) return;
            bool debug = config.defaultOptions.debugmode;
            if (debug)
            {
                Puts($"## GainExp ## \n Base start amount: [{e}]");
            }
            XPRecord xprecord = GetXPRecord(player);
            double xplimit = 0;
            switch (config.dailyxpLimit.limitmultipliertype)
            {
                case 1:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                    break;
                case 2:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                    break;
            }
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
            restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    double groupboost = e * specialgroup.xpboost;
                    e += groupboost;
                    if (specialgroup.dailyxplimit != 0)
                    {
                        switch (config.dailyxpLimit.limitmultipliertype)
                        {
                            case 1:
                                xplimit = specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                                break;
                            case 2:
                                xplimit = specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                                break;
                        }
                    }
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            // Check Daily XP Limits
            DailyLimitPlayer(player);
            DailyRecord dailyrecord = GetDailyRecord(player);
            if (config.dailyxpLimit.enabledailyxplimit)
            {
                // Check Limit and Record
                if (dailyrecord.dailyexperience >= xplimit && xplimit != 0)
                {
                    return;
                }
            }
            // Check True Level
            if (xprecord.truelevel <= 0 || xprecord.truelevel < xprecord.level)
            {
                xprecord.truelevel = (int)xprecord.level;
            }
            // Make sure XP and True XP are not 0 and are correct
            if (xprecord.experience <= 0)
            {
                xprecord.experience = 0;
            }
            if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
            {
                xprecord.trueexperience = (int)xprecord.experience;
            }
            // XP Boost (First)
            if (config.xpGain.enablexpboost && config.xpGain.xpboostorder == 1 && permission.UserHasPermission(player.UserIDString, PermXPBoost) && !UserHasSpecialGroup)
            {
                double xpboost = e * config.xpGain.xpboostamount;
                e += xpboost;
                if (debug)
                {
                    Puts($"\n XP Boost (First): +{xpboost} -> [{e}]");
                }

            }
            // Night Bonus
            if (IsNight() && config.nightBonus.Enable)
            {
                double timebonus = e * config.nightBonus.Bonus;
                e += timebonus;
                if (debug)
                {
                    Puts($"\n Night Bonus: +{timebonus} -> [{e}]");
                }
            }
            // Level Bonus
            if (xprecord.level > 0)
            {
                double leveladd = (config.xpLevel.levelxpboost * xprecord.level) * e;
                e += leveladd;
                if (debug)
                {
                    Puts($"\n Level Bonus: +{leveladd} -> [{e}]");
                }
            }
            // Teams
            if (config.xpTeams.enableteamxpgain && e != 0)
            {
                XPTeams(player, e, "addxp");
                if (debug)
                {
                    Puts($"\n Teams Share enabled: Sending {Math.Ceiling(e)} to Team Share for nearby team members");
                }
            }
            // Captaincy
            if (config.captaincy.enablexpboost && e != 0)
            {
                double captaincyboost = Math.Ceiling(e * (double)CaptaincyTeamXPBoost(player));
                e += captaincyboost;
                if (debug)
                {
                    Puts($"\n Captaincy Bonus: +{captaincyboost} -> [{e}]");
                }
            }
            // Ranks
            if (config.xpLevelRanks.enableresetranks && !xprecord.DisableRank && config.xpLevelRanks.enablerankxpboost && xprecord.rank > 0)
            {
                double rankadd = (e * config.xpLevelRanks.rankxpboost) * xprecord.rank;
                e += rankadd;
                if (debug)
                {
                    Puts($"\n Rank Bonus: +{rankadd} -> [{e}]");
                }
            }
            // XP Boost (Last)
            if (config.xpGain.enablexpboost && config.xpGain.xpboostorder == 2 && permission.UserHasPermission(player.UserIDString, PermXPBoost) && !UserHasSpecialGroup)
            {
                double xpboost = e * config.xpGain.xpboostamount;
                e += xpboost;
                if (debug)
                {
                    Puts($"\n XP Boost (Last): +{xpboost} -> [{e}]");
                }
            }
            // Addon Booster
            if (XPerienceAddon != null)
            {
                double addonbooster = e * XPerienceAddon.Call<double>("GetBoostersAmount", player);
                e += addonbooster;
                if (debug)
                {
                    Puts($"\n Addon Booster: +{addonbooster} -> [{e}]");
                }
            }
            if (debug)
            {
                Puts($"\n\n All XP gains have been added, final XP amount is: [{(int)Math.Ceiling(e)}] \n");
            }
            // Check for max rank or level and prevent level up but still award XP if allowed
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank) || (xprecord.DisableRank && xprecord.level >= config.xpLevel.maxlevel))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (xprecord.DisableRank && xprecord.rank < config.xpLevelRanks.maxresetrank)
                {
                    return;
                }
                if (!config.xpLevelRanks.enableresetranks)
                {
                    xprecord.truelevel = (int)xprecord.level;
                }
                if (config.xpLevel.alwaysearnxp)
                {
                    xprecord.experience += Math.Ceiling(e);
                    xprecord.trueexperience += (int)Math.Ceiling(e);
                    xprecord.requiredxp = xprecord.experience;
                    dailyrecord.dailyexperience += (int)Math.Ceiling(e);
                    LiveStats(player);
                    // Addon
                    if (XPerienceAddon != null)
                    {
                        XPerienceAddon.Call("PlayerNotes", player, "xp", (int)Math.Ceiling(e), "XP");
                    }
                    return;
                }
                else
                {
                    xprecord.experience = xprecord.requiredxp;
                    LiveStats(player);
                    return;
                }
            }
            // Give the calculated XP and Update Player
            xprecord.experience += Math.Ceiling(e);
            xprecord.trueexperience += (int)Math.Ceiling(e);
            dailyrecord.dailyexperience += (int)Math.Ceiling(e);
            LiveStats(player);
            if (xprecord.showchatxp && e < 0)
            {
                player.ChatMessage(XPLang("plusxp", player.UserIDString, Math.Ceiling(e)));
            }
            // Addon
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("PlayerNotes", player, "xp", (int)Math.Ceiling(e), "XP");
            }
            // Level Up
            if (xprecord.experience >= xprecord.requiredxp)
            {
                LvlUp(player, 0, 0);
            }
        }
        public void GainExpBasic(BasePlayer player, double e)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            if (CheckPlayerLocation(player, "noxpgain")) return;
            XPRecord xprecord = GetXPRecord(player);
            double xplimit = 0;
            switch (config.dailyxpLimit.limitmultipliertype)
            {
                case 1:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                    break;
                case 2:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                    break;
            }
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
            restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    double groupboost = e * specialgroup.xpboost;
                    e += groupboost;
                    if (specialgroup.dailyxplimit != 0)
                    {
                        switch (config.dailyxpLimit.limitmultipliertype)
                        {
                            case 1:
                                xplimit = specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                                break;
                            case 2:
                                xplimit = specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                                break;
                        }
                    }
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            // Check Daily XP Limits
            DailyLimitPlayer(player);
            DailyRecord dailyrecord = GetDailyRecord(player);
            if (config.dailyxpLimit.enabledailyxplimit)
            {
                // Check Limit and Record
                if (dailyrecord.dailyexperience >= xplimit && xplimit != 0)
                {
                    return;
                }
            }
            // Check True Level
            if (xprecord.truelevel <= 0 || xprecord.truelevel < xprecord.level)
            {
                xprecord.truelevel = (int)xprecord.level;
            }
            // Make sure XP and True XP are not 0 and are correct
            if (xprecord.experience <= 0)
            {
                xprecord.experience = 0;
            }
            if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
            {
                xprecord.trueexperience = (int)xprecord.experience;
            }
            // Check for max rank or level and prevent level up but still award XP if allowed
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank) || (xprecord.DisableRank && xprecord.level >= config.xpLevel.maxlevel))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (xprecord.DisableRank && xprecord.rank < config.xpLevelRanks.maxresetrank)
                {
                    return;
                }
                if (!config.xpLevelRanks.enableresetranks)
                {
                    xprecord.truelevel = (int)xprecord.level;
                }
                if (config.xpLevel.alwaysearnxp)
                {
                    xprecord.experience += Math.Ceiling(e);
                    xprecord.trueexperience += (int)Math.Ceiling(e);
                    xprecord.requiredxp = xprecord.experience;
                    dailyrecord.dailyexperience += (int)Math.Ceiling(e);
                    LiveStats(player);
                    // Addon
                    if (XPerienceAddon != null)
                    {
                        XPerienceAddon.Call("PlayerNotes", player, "xp", (int)Math.Ceiling(e), "XP");
                    }
                    return;
                }
                else
                {
                    xprecord.experience = xprecord.requiredxp;
                    LiveStats(player);
                    return;
                }
            }
            // Give the calculated XP and Update Player
            xprecord.experience += Math.Ceiling(e);
            xprecord.trueexperience += (int)Math.Ceiling(e);
            dailyrecord.dailyexperience += (int)Math.Ceiling(e);
            LiveStats(player);
            // Addon
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("PlayerNotes", player, "xp", (int)Math.Ceiling(e), "XP");
            }
            // Level Up
            if (xprecord.experience >= xprecord.requiredxp)
            {
                LvlUp(player, 0, 0);
            }
        }
        private void GainExpID(string player, double e, int truexp = 0, bool reset = false)
        {
            if (player == null) return;
            XPRecord xprecord = GetPlayerRecord(player);
            if (reset)
            {
                xprecord.trueexperience = truexp;
            }
            // Check True Level
            if (xprecord.truelevel <= 0 || xprecord.truelevel < xprecord.level)
            {
                xprecord.truelevel = (int)xprecord.level;
            }
            // Check for max rank or level and prevent level up but still award XP if allowed
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (config.xpLevel.alwaysearnxp)
                {
                    xprecord.experience += Math.Ceiling(e);
                    xprecord.trueexperience += (int)Math.Ceiling(e);
                    xprecord.requiredxp = xprecord.experience;
                }
                else
                {
                    xprecord.experience = xprecord.requiredxp;
                }
                return;
            }
            // Make sure XP and True XP are not 0 and are correct
            if (xprecord.experience <= 0)
            {
                xprecord.experience = 0;
            }
            if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
            {
                xprecord.trueexperience = (int)xprecord.experience;
            }
            // Give XP and Update Player
            xprecord.experience += e;
            if (!reset)
            {
                xprecord.trueexperience += (int)e;
            }
            if (xprecord.experience >= xprecord.requiredxp)
            {
                LvlUpFix(player);
            }
        }
        private void GainExpAdmin(BasePlayer player, double e, int truexp = 0, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            if (reset)
            {
                xprecord.trueexperience = truexp;
            }
            // Check True Level
            if (xprecord.truelevel <= 0 || xprecord.truelevel < xprecord.level)
            {
                xprecord.truelevel = (int)xprecord.level;
            }
            // Check for max rank or level and prevent level up but still award XP if allowed
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (config.xpLevel.alwaysearnxp)
                {
                    xprecord.experience += Math.Ceiling(e);
                    xprecord.trueexperience += (int)Math.Ceiling(e);
                    xprecord.requiredxp = xprecord.experience;
                    LiveStats(player);
                }
                else
                {
                    xprecord.experience = xprecord.requiredxp;
                }
                return;
            }
            // Make sure XP and True XP are not 0 and are correct
            if (xprecord.experience <= 0)
            {
                xprecord.experience = 0;
            }
            if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
            {
                xprecord.trueexperience = (int)xprecord.experience;
            }
            // Give XP and Update Player
            xprecord.experience += e;
            if (!reset)
            {
                xprecord.trueexperience += (int)e;
            }
            LiveStats(player);
            if (xprecord.experience >= xprecord.requiredxp)
            {
                LvlUp(player, 0, 0);
            }
        }
        private void GainExpAdminFix(string player, double e, int truexp = 0, bool reset = false)
        {
            if (player == null) return;
            XPRecord xprecord = GetPlayerRecord(player);
            if (reset)
            {
                xprecord.trueexperience = truexp;
            }
            // Check True Level
            if (xprecord.truelevel <= 0 || xprecord.truelevel < xprecord.level)
            {
                xprecord.truelevel = (int)xprecord.level;
            }
            // Check for max rank or level and prevent level up but still award XP if allowed
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (config.xpLevel.alwaysearnxp)
                {
                    xprecord.experience += Math.Ceiling(e);
                    xprecord.trueexperience += (int)Math.Ceiling(e);
                    xprecord.requiredxp = xprecord.experience;
                }
                else
                {
                    xprecord.experience = xprecord.requiredxp;
                }
                return;
            }
            // Make sure XP and True XP are not 0 and are correct
            if (xprecord.experience <= 0)
            {
                xprecord.experience = 0;
            }
            if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
            {
                xprecord.trueexperience = (int)xprecord.experience;
            }
            // Give XP and Update Player
            xprecord.experience += e;
            if (!reset)
            {
                xprecord.trueexperience += (int)e;
            }
            if (xprecord.experience >= xprecord.requiredxp)
            {
                LvlUpFix(player);
            }
        }
        public void GivePoints(BasePlayer player, string type, int amount)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            if (amount <= 0) return;
            switch (type)
            {
                case "stat":
                    xprecord.statpoint += amount;
                    break;
                case "skill":
                    xprecord.skillpoint += amount;
                    break;
            }
        }
        public void GivePointsOther(string player, string type, int amount)
        {
            if (player == null) return;
            XPRecord xprecord = GetPlayerRecord(player);
            if (amount <= 0) return;
            switch (type)
            {
                case "stat":
                    xprecord.statpoint += amount;
                    break;
                case "skill":
                    xprecord.skillpoint += amount;
                    break;
            }
        }
        private void LvlUp(BasePlayer player, int chatstatpoint, int chatskillpoint, bool reset = false)
        {
            XPRecord xprecord = GetXPRecord(player);
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (!config.xpLevelRanks.enableresetranks || xprecord.DisableRank)
                {
                    xprecord.truelevel = (int)xprecord.level;
                }
                xprecord.experience = xprecord.requiredxp;
                LiveStats(player);
                return;
            }
            xprecord.level++;
            xprecord.truelevel++;
            if (config.xpLevelRanks.enableresetranks && !xprecord.DisableRank)
            {
                if (xprecord.rank <= 0)
                {
                    xprecord.statpoint += config.xpLevel.statpointsperlvl;
                    xprecord.skillpoint += config.xpLevel.skillpointsperlvl;
                    chatstatpoint += config.xpLevel.statpointsperlvl;
                    chatskillpoint += config.xpLevel.skillpointsperlvl;
                }
                else
                {
                    xprecord.statpoint += config.xpLevel.statpointsperlvl + (config.xpLevelRanks.rankstatpointincrease * xprecord.rank);
                    xprecord.skillpoint += config.xpLevel.skillpointsperlvl + (config.xpLevelRanks.rankskillpointincrease * xprecord.rank);
                    chatstatpoint += config.xpLevel.statpointsperlvl + (config.xpLevelRanks.rankstatpointincrease * xprecord.rank);
                    chatskillpoint += config.xpLevel.skillpointsperlvl + (config.xpLevelRanks.rankskillpointincrease * xprecord.rank);
                }
                if (xprecord.level >= config.xpLevel.maxlevel && config.xpLevelRanks.enableresetranks)
                {
                    double remainingxp = xprecord.experience - xprecord.requiredxp;
                    RankUp(player, remainingxp);
                    return;
                }
            }
            else
            {
                xprecord.statpoint += config.xpLevel.statpointsperlvl;
                xprecord.skillpoint += config.xpLevel.skillpointsperlvl;
                chatstatpoint += config.xpLevel.statpointsperlvl;
                chatskillpoint += config.xpLevel.skillpointsperlvl;
            }
            if (xprecord.level >= config.xpLevel.maxlevel)
            {
                if (xprecord.level >= config.xpLevel.maxlevel && xprecord.DisableRank)
                {
                    xprecord.requiredxp = xprecord.experience;
                }
                else
                {
                    xprecord.requiredxp = config.xpLevel.levelstart;
                }
            }
            else
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    double rankreqincrease = config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank);
                    xprecord.requiredxp = Math.Round(xprecord.requiredxp + (xprecord.level * rankreqincrease));
                }
                else
                {
                    xprecord.requiredxp = Math.Round(xprecord.requiredxp + (xprecord.level * config.xpLevel.levelmultiplier));
                }
            }
            MightAttributes(player);
            if (xprecord.experience > xprecord.requiredxp)
            {
                LvlUp(player, chatstatpoint, chatskillpoint);
                return;
            }
            // Normal Chat Notify
            if (!config.defaultOptions.hidechatnotifications)
            {
                player.ChatMessage(XPLang("levelup", player.UserIDString, xprecord.level, chatstatpoint, chatskillpoint));
            }
            // Econ
            if (Economics != null && config.xpEcon.econlevelup && !reset)
            {
                Economics.Call("Deposit", player.UserIDString, config.xpEcon.econlevelreward);
                player.ChatMessage(XPLang("econdeposit", player.UserIDString, config.xpEcon.econlevelreward));
            }
            // Server Rewards
            if (ServerRewards != null && config.sRewards.srewardlevelup && !reset)
            {
                ServerRewards?.Call("AddPoints", player.userID, config.sRewards.srewardlevelupamt);
                player.ChatMessage(XPLang("srewardsup", player.UserIDString, config.sRewards.srewardlevelupamt));
            }
            // Max health & Metabolism
            if (config.xpLevel.fullhealth)
            {
                player._health = player._maxHealth;
            }
            if (config.xpLevel.fullmetabolism)
            {
                player.metabolism.calories.value = player.metabolism.calories.max;
                player.metabolism.hydration.value = player.metabolism.hydration.max;
            }
            LiveStats(player);
            // Addon
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("PlayerNotes", player, "level", (int)xprecord.level, "Level Reached");
                XPerienceAddon?.Call("AddonDiscordLevel", player, xprecord.level);
                XPerienceAddon?.Call("NotifyUIBar", player, "level", "level", (int)xprecord.level);
                XPerienceAddon?.Call("NotifyUIBarGlobal", player, "level", "level", (int)xprecord.level);
            }
            if (config.soundEffects.levelup)
            {
                player.RunEffect($"{config.soundEffects.levelupeffect}");
            }
        }
        private void LvlUpFix(string player)
        {
            XPRecord xprecord = GetPlayerRecord(player);
            if ((xprecord.level >= config.xpLevel.maxlevel && !config.xpLevelRanks.enableresetranks) || (xprecord.level >= config.xpLevel.maxlevel && xprecord.rank >= config.xpLevelRanks.maxresetrank))
            {
                xprecord.level = config.xpLevel.maxlevel;
                if (!config.xpLevelRanks.enableresetranks || xprecord.DisableRank)
                {
                    xprecord.truelevel = (int)xprecord.level;
                }
                xprecord.experience = xprecord.requiredxp;
                return;
            }
            xprecord.level++;
            xprecord.truelevel++;
            if (config.xpLevelRanks.enableresetranks && !xprecord.DisableRank)
            {
                if (xprecord.rank <= 0)
                {
                    xprecord.statpoint += config.xpLevel.statpointsperlvl;
                    xprecord.skillpoint += config.xpLevel.skillpointsperlvl;
                }
                else
                {
                    xprecord.statpoint += config.xpLevel.statpointsperlvl + (config.xpLevelRanks.rankstatpointincrease * xprecord.rank);
                    xprecord.skillpoint += config.xpLevel.skillpointsperlvl + (config.xpLevelRanks.rankskillpointincrease * xprecord.rank);
                }
                if (xprecord.level >= config.xpLevel.maxlevel && config.xpLevelRanks.enableresetranks)
                {
                    double remainingxp = xprecord.experience - xprecord.requiredxp;
                    RankUpFix(player, remainingxp);
                    return;
                }
            }
            else
            {
                xprecord.statpoint += config.xpLevel.statpointsperlvl;
                xprecord.skillpoint += config.xpLevel.skillpointsperlvl;
            }
            if (xprecord.level >= config.xpLevel.maxlevel)
            {
                if (xprecord.level >= config.xpLevel.maxlevel && xprecord.DisableRank)
                {
                    xprecord.requiredxp = xprecord.experience;
                }
                else
                {
                    xprecord.requiredxp = config.xpLevel.levelstart;
                }
            }
            else
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    double rankreqincrease = config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank);
                    xprecord.requiredxp = Math.Round(xprecord.requiredxp + (xprecord.level * rankreqincrease));
                }
                else
                {
                    xprecord.requiredxp = Math.Round(xprecord.requiredxp + (xprecord.level * config.xpLevel.levelmultiplier));
                }
            }
            if (xprecord.experience > xprecord.requiredxp)
            {
                LvlUpFix(player);
                return;
            }
        }
        private void RankUp(BasePlayer player, double remainingxp, bool manualrank = false)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.rank >= config.xpLevelRanks.maxresetrank) return;
            xprecord.rank++;
            Ranks rank = GetXPRank(xprecord.rank);
            // Reset Level, Required XP
            xprecord.level = 0;
            if (remainingxp == 0)
            {
                remainingxp = 0;
            }
            if (config.xpLevelRanks.keepremainingxp)
            {
                xprecord.experience = remainingxp;
            }
            else
            {
                xprecord.experience = 0;
            }
            xprecord.requiredxp = config.xpLevel.levelstart;
            if (!config.xpLevelRanks.resetallstatsskills)
            {
                xprecord.statpoint += config.xpLevelRanks.rankstatpointstart * xprecord.rank;
                xprecord.skillpoint += config.xpLevelRanks.rankskillpointstart * xprecord.rank;
            }
            else
            {
                xprecord.statpoint = config.xpLevelRanks.rankstatpointstart * xprecord.rank;
                xprecord.skillpoint = config.xpLevelRanks.rankskillpointstart * xprecord.rank;
            }
            if (config.xpLevelRanks.resetallstatsskills)
            {
                // Reset health if needed before removing points
                if (xprecord.Might >= 1)
                {
                    // Max Health
                    double armor = (xprecord.Might * config.might.armor) * 100;
                    double newmaxhealth = player._maxHealth - armor;
                    // Change Max Health
                    if (newmaxhealth < 100)
                    {
                        player._maxHealth = 100;
                    }
                    else
                    {
                        player._maxHealth = (float)newmaxhealth;
                    }
                    // Player Current Health
                    double defaulthealth = 100;
                    double teahealth = 100;
                    bool teamodified = false;
                    double healthdifference = 0;
                    if (GetTeaCooldown(player) != 0)
                    {
                        // Check for Tea Modifier
                        if (TeaModifiers != null && xprecord.teatype != "none")
                        {
                            teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                            teamodified = true;
                        }
                        switch (GetTeaTypes(player))
                        {
                            case "maxhealthtea":
                                if (!teamodified)
                                {
                                    teahealth = defaulthealth + 5;
                                }
                                break;
                            case "maxhealthtea.advanced":
                                if (!teamodified)
                                {
                                    teahealth = defaulthealth + 12.5;
                                }
                                break;
                            case "maxhealthtea.pure":
                                if (!teamodified)
                                {
                                    teahealth = defaulthealth + 20;
                                }
                                break;
                        }
                    }
                    if (player._health > teahealth)
                    {
                        healthdifference = player._health - teahealth;
                    }
                    player._health -= (float)healthdifference;
                }
                // Reset Stat Levels
                xprecord.Mentality = 0;
                xprecord.Dexterity = 0;
                xprecord.Might = 0;
                xprecord.Captaincy = 0;
                xprecord.Weaponry = 0;
                xprecord.Ninjary = 0;
                // Reset Stat Spent Points
                xprecord.MentalityP = 0;
                xprecord.DexterityP = 0;
                xprecord.MightP = 0;
                xprecord.CaptaincyP = 0;
                xprecord.WeaponryP = 0;
                xprecord.NinjaryP = 0;
                // Reset Skill Levels
                xprecord.WoodCutter = 0;
                xprecord.Smithy = 0;
                xprecord.Miner = 0;
                xprecord.Forager = 0;
                xprecord.Hunter = 0;
                xprecord.Fisher = 0;
                xprecord.Crafter = 0;
                xprecord.Framer = 0;
                xprecord.Medic = 0;
                xprecord.Scavenger = 0;
                xprecord.Electrician = 0;
                xprecord.Demolitionist = 0;
                xprecord.Tamer = 0;
                // Reset Skill Spents Points
                xprecord.WoodCutterP = 0;
                xprecord.SmithyP = 0;
                xprecord.MinerP = 0;
                xprecord.ForagerP = 0;
                xprecord.HunterP = 0;
                xprecord.FisherP = 0;
                xprecord.CrafterP = 0;
                xprecord.FramerP = 0;
                xprecord.MedicP = 0;
                xprecord.ScavengerP = 0;
                xprecord.ElectricianP = 0;
                xprecord.DemolitionistP = 0;
                xprecord.TamerP = 0;
                // Reset calories/hydration if needed
                if (player.metabolism.calories.max > 500)
                {
                    player.metabolism.calories.max = 500;
                }
                if (player.metabolism.hydration.max > 250)
                {
                    player.metabolism.hydration.max = 250;
                }
            }
            // Check/Reset RankGroup permission
            RankCheck(player);
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, config.backpacksmod.statorskill, true);
            }
            // Check/Reset Tamer permissions
            PetChecks(player, true);
            // Update Live UI
            LiveStats(player);
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("PlayerNotes", player, "rank", xprecord.rank, rank.name);
            }
            // Notify Players
            player.ChatMessage(XPLang("playerrankup", player.UserIDString, rank.name, xprecord.statpoint, xprecord.skillpoint));
            // AddonDiscord
            if (XPerienceAddon != null)
            {
                XPerienceAddon?.Call("AddonDiscordRank", player, rank.name);
                XPerienceAddon?.Call("NotifyUIBar", player, "rank", rank.name, xprecord.rank);
                XPerienceAddon?.Call("NotifyUIBarGlobal", player, "rank", rank.name, xprecord.rank);
            }
            // Check remaining XP for level Up
            if (xprecord.experience > xprecord.requiredxp)
            {
                LvlUp(player, 0, 0);
                return;
            }
            if (config.soundEffects.rankup)
            {
                player.RunEffect($"{config.soundEffects.rankupeffect}");
            }
            if (manualrank)
            {
                ClearPlayerUIs(player, true);
                PlayerProfile(player);
                PlayerProfileMain(player);
            }
        }
        private void RankUpFix(string player, double remainingxp)
        {
            XPRecord xprecord = GetPlayerRecord(player);
            if (xprecord.rank >= config.xpLevelRanks.maxresetrank) return;
            xprecord.rank++;
            // Reset Level, Required XP
            xprecord.level = 0;
            if (config.xpLevelRanks.keepremainingxp)
            {
                xprecord.experience = remainingxp;
            }
            else
            {
                xprecord.experience = 0;
            }
            xprecord.requiredxp = config.xpLevel.levelstart;
            if (!config.xpLevelRanks.resetallstatsskills)
            {
                xprecord.statpoint += config.xpLevelRanks.rankstatpointstart * xprecord.rank;
                xprecord.skillpoint += config.xpLevelRanks.rankskillpointstart * xprecord.rank;
            }
            else
            {
                xprecord.statpoint = config.xpLevelRanks.rankstatpointstart * xprecord.rank;
                xprecord.skillpoint = config.xpLevelRanks.rankskillpointstart * xprecord.rank;
            }
            if (config.xpLevelRanks.resetallstatsskills)
            {
                // Reset Stat Levels
                xprecord.Mentality = 0;
                xprecord.Dexterity = 0;
                xprecord.Might = 0;
                xprecord.Captaincy = 0;
                xprecord.Weaponry = 0;
                xprecord.Ninjary = 0;
                // Reset Stat Spent Points
                xprecord.MentalityP = 0;
                xprecord.DexterityP = 0;
                xprecord.MightP = 0;
                xprecord.CaptaincyP = 0;
                xprecord.WeaponryP = 0;
                xprecord.NinjaryP = 0;
                // Reset Skill Levels
                xprecord.WoodCutter = 0;
                xprecord.Smithy = 0;
                xprecord.Miner = 0;
                xprecord.Forager = 0;
                xprecord.Hunter = 0;
                xprecord.Fisher = 0;
                xprecord.Crafter = 0;
                xprecord.Framer = 0;
                xprecord.Medic = 0;
                xprecord.Scavenger = 0;
                xprecord.Electrician = 0;
                xprecord.Demolitionist = 0;
                xprecord.Tamer = 0;
                // Reset Skill Spents Points
                xprecord.WoodCutterP = 0;
                xprecord.SmithyP = 0;
                xprecord.MinerP = 0;
                xprecord.ForagerP = 0;
                xprecord.HunterP = 0;
                xprecord.FisherP = 0;
                xprecord.CrafterP = 0;
                xprecord.FramerP = 0;
                xprecord.MedicP = 0;
                xprecord.ScavengerP = 0;
                xprecord.ElectricianP = 0;
                xprecord.DemolitionistP = 0;
                xprecord.TamerP = 0;
            }
            // Check for Rank Group and Assign or Revoke
            foreach (var rankgroup in config.xpLevelRanks.ranks)
            {
                if (xprecord.rank >= rankgroup.Key && !permission.UserHasGroup(xprecord.id, rankgroup.Value.group))
                {
                    permission.AddUserGroup(xprecord.id, rankgroup.Value.group);
                }
                if (xprecord.rank < rankgroup.Key && !permission.UserHasGroup(xprecord.id, rankgroup.Value.group))
                {
                    permission.RemoveUserGroup(xprecord.id, rankgroup.Value.group);
                }
            }
            // Take Backpack Permissions
            foreach (var removeoptions in config.backpacksmod.BackPackSlots)
            {
                if (permission.UserHasPermission(xprecord.id, $"backpacks.size.{removeoptions.Value.slots}")) permission.RevokeUserPermission(xprecord.id, $"backpacks.size.{removeoptions.Value.slots}");
            }
            // Take Pet Permission
            permission.RevokeUserPermission(xprecord.id, PTameChicken);
            permission.RevokeUserPermission(xprecord.id, PTameBoar);
            permission.RevokeUserPermission(xprecord.id, PTameStag);
            permission.RevokeUserPermission(xprecord.id, PTameWolf);
            permission.RevokeUserPermission(xprecord.id, PTameBear);
            // Check remaining XP for level Up
            if (xprecord.experience > xprecord.requiredxp)
            {
                LvlUpFix(player);
                return;
            }
        }
        private void RankCheck(BasePlayer player, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            if (!config.xpLevelRanks.enableresetranks) return;
            // Reset Rank Permission
            if (reset)
            {
                foreach (var rankgroup in config.xpLevelRanks.ranks)
                {
                    if (permission.UserHasGroup(player.UserIDString, rankgroup.Value.group))
                    {
                        permission.RemoveUserGroup(player.UserIDString, rankgroup.Value.group);
                    }
                }
                return;
            }
            // Check for Rank Group and Assign or Revoke
            foreach (var rankgroup in config.xpLevelRanks.ranks)
            {
                if (config.xpLevelRanks.keepgrouponrank && xprecord.rank > rankgroup.Key && !permission.UserHasGroup(player.UserIDString, rankgroup.Value.group))
                {
                    permission.AddUserGroup(player.UserIDString, rankgroup.Value.group);
                }
                if (xprecord.rank == rankgroup.Key && !permission.UserHasGroup(player.UserIDString, rankgroup.Value.group))
                {
                    permission.AddUserGroup(player.UserIDString, rankgroup.Value.group);
                }
                if (xprecord.rank < rankgroup.Key && permission.UserHasGroup(player.UserIDString, rankgroup.Value.group))
                {
                    permission.RemoveUserGroup(player.UserIDString, rankgroup.Value.group);
                }
                if (!config.xpLevelRanks.keepgrouponrank && xprecord.rank > rankgroup.Key && permission.UserHasGroup(player.UserIDString, rankgroup.Value.group))
                {
                    permission.RemoveUserGroup(player.UserIDString, rankgroup.Value.group);
                }
            }
        }
        private void LoseExp(BasePlayer player, double e)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            if (CheckPlayerLocation(player, "noxploss")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (e < 1)
            {
                e = 1;
            }
            // Teams
            if (config.xpTeams.enableteamxploss && e != 0)
            {
                XPTeams(player, e, "takexp");
            }
            // Level Bonus Reduction
            if (xprecord.level > 0)
            {
                e += (config.xpLevel.levelxpboost * xprecord.level) * e;
            }
            // Rank Bonus Reduction
            if (xprecord.rank > 0 && config.xpReducer.rankdeathreduce)
            {
                e += (e * config.xpLevelRanks.rankxpboost) * xprecord.rank;
            }
            double newxp = xprecord.experience - Math.Ceiling(e);
            double newtxp = xprecord.trueexperience - Math.Ceiling(e);
            double nextlevel = xprecord.requiredxp;
            // Make sure XP does not go negative
            if (newxp <= 0)
            {
                newxp = 0;
            }
            if (newtxp <= 0)
            {
                newtxp = 0;
            }
            xprecord.experience = (int)newxp;
            xprecord.trueexperience = (int)newtxp;
            if (nextlevel == config.xpLevel.levelstart) return;
            double prevlevel = 0;
            if (config.xpLevelRanks.increaselevelmultiplier)
            {
                prevlevel = xprecord.requiredxp - (xprecord.level * (config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank)));
            }
            else
            {
                prevlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
            }
            if (xprecord.experience < prevlevel)
            {
                LvlDown(player);
            }
            LiveStats(player);
        }
        private void LoseExpAdmin(BasePlayer player, double e)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (e < 1)
            {
                e = 1;
            }
            double newxp = xprecord.experience - Math.Ceiling(e);
            double newtxp = xprecord.trueexperience - Math.Ceiling(e);
            double nextlevel = xprecord.requiredxp;
            // Make sure XP does not go negative
            if (newxp <= 0)
            {
                newxp = 0;
            }
            if (newtxp <= 0)
            {
                newtxp = 0;
            }
            xprecord.experience = (int)newxp;
            xprecord.trueexperience = (int)newtxp;
            if (nextlevel == config.xpLevel.levelstart) return;
            double prevlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
            if (xprecord.experience < prevlevel)
            {
                LvlDown(player);
            }
            LiveStats(player);
            //PlayerFixData(player);
        }
        private void LvlDown(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            double newlevel = xprecord.level - 1;
            int newtruelevel = xprecord.truelevel - 1;
            if (newlevel == 0) return;
            xprecord.level = newlevel;
            xprecord.truelevel = newtruelevel;
            if (config.xpLevelRanks.increaselevelmultiplier)
            {
                double rankreqincrease = config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank);
                xprecord.requiredxp = Math.Round(xprecord.requiredxp - (newlevel * rankreqincrease));
            }
            else
            {
                xprecord.requiredxp = Math.Round(xprecord.requiredxp - (newlevel * config.xpLevel.levelmultiplier));
            }
            bool removestatlvl = false;
            bool removeskilllvl = false;
            // Normal Chat Notify
            if (!config.defaultOptions.hidechatnotifications)
            {
                player.ChatMessage(XPLang("leveldown", player.UserIDString, xprecord.level));
            }
            // Check if player has enough unspent stat points to take
            if (xprecord.statpoint >= config.xpLevel.statpointsperlvl)
            {
                //xprecord.statpoint -= config.xpLevel.statpointsperlvl;
                xprecord.statpoint -= config.xpLevel.statpointsperlvl + (config.xpLevelRanks.rankstatpointincrease * xprecord.rank);
                player.ChatMessage(XPLang("statdown", player.UserIDString, config.xpLevel.statpointsperlvl));
            }
            else
            {
                removestatlvl = true;
            }
            // Check if player has enough unspent skill points to take
            if (xprecord.skillpoint >= config.xpLevel.skillpointsperlvl)
            {
                //xprecord.skillpoint -= config.xpLevel.skillpointsperlvl;
                xprecord.skillpoint -= config.xpLevel.skillpointsperlvl + (config.xpLevelRanks.rankskillpointincrease * xprecord.rank);
                player.ChatMessage(XPLang("skilldown", player.UserIDString, config.xpLevel.skillpointsperlvl));
            }
            else
            {
                removeskilllvl = true;
            }
            // If player does not have enough unspent stat points then get first available stat to level down and remove points
            if (removestatlvl == true)
            {
                int allstats = xprecord.Mentality + xprecord.Dexterity + xprecord.Might + xprecord.Captaincy + xprecord.Weaponry + xprecord.Ninjary;
                if (allstats == 0)
                {
                    xprecord.statpoint = 0;
                    player.ChatMessage(XPLang("nostatpoints", player.UserIDString));
                    return;
                }
                var stat = "";
                int statpoints;
                int pointadj = 0;
                bool dropmentality = false;
                bool dropdexterity = false;
                bool dropmight = false;
                bool dropcaptaincy = false;
                bool dropweaponry = false;
                bool dropninjary = false;
                // Check each stat for levels
                if (xprecord.Mentality > 0) { dropmentality = true; }
                else if (xprecord.Dexterity > 0) { dropdexterity = true; }
                else if (xprecord.Might > 0) { dropmight = true; }
                else if (xprecord.Captaincy > 0) { dropcaptaincy = true; }
                else if (xprecord.Weaponry > 0) { dropweaponry = true; }
                else if (xprecord.Ninjary > 0) { dropninjary = true; }
                // Random stat chosen
                if (dropmentality == true)
                {
                    stat = "Mentality";
                    if (xprecord.Mentality == 1)
                    {
                        statpoints = config.mentality.pointcoststart;
                    }
                    else
                    {
                        statpoints = xprecord.Mentality * config.mentality.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Mentality--;
                    xprecord.MentalityP -= statpoints;
                    xprecord.statpoint = pointadj;
                }
                else if (dropdexterity == true)
                {
                    stat = "Dexterity";
                    if (xprecord.Dexterity == 1)
                    {
                        statpoints = config.dexterity.pointcoststart;
                    }
                    else
                    {
                        statpoints = (xprecord.Dexterity) * config.dexterity.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Dexterity--;
                    xprecord.DexterityP -= statpoints;
                    xprecord.statpoint = pointadj;
                }
                else if (dropmight == true)
                {
                    stat = "Might";
                    if (xprecord.Might == 1)
                    {
                        statpoints = config.might.pointcoststart;
                    }
                    else
                    {
                        statpoints = (xprecord.Might) * config.might.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Might--;
                    xprecord.MightP -= statpoints;
                    xprecord.statpoint = pointadj;
                    MightAttributes(player);
                }
                else if (dropcaptaincy == true)
                {
                    stat = "Captaincy";
                    if (xprecord.Captaincy == 1)
                    {
                        statpoints = config.captaincy.pointcoststart;
                    }
                    else
                    {
                        statpoints = (xprecord.Captaincy) * config.captaincy.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Captaincy--;
                    xprecord.CaptaincyP -= statpoints;
                    xprecord.statpoint = pointadj;
                }
                else if (dropweaponry == true)
                {
                    stat = "Weaponry";
                    if (xprecord.Weaponry == 1)
                    {
                        statpoints = config.weaponry.pointcoststart;
                    }
                    else
                    {
                        statpoints = (xprecord.Weaponry) * config.weaponry.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Weaponry--;
                    xprecord.WeaponryP -= statpoints;
                    xprecord.statpoint = pointadj;
                }
                else if (dropninjary == true)
                {
                    stat = "Ninjary";
                    if (xprecord.Ninjary == 1)
                    {
                        statpoints = config.ninjary.pointcoststart;
                    }
                    else
                    {
                        statpoints = (xprecord.Ninjary - 1) * config.ninjary.costmultiplier;
                    }
                    pointadj = statpoints - config.xpLevel.statpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankstatpointincrease * xprecord.rank;
                    }
                    xprecord.Ninjary--;
                    xprecord.NinjaryP -= statpoints;
                    xprecord.statpoint = pointadj;
                }
                // Make sure points do not go negative
                if (xprecord.statpoint < 0)
                {
                    xprecord.statpoint = 0;
                }
                player.ChatMessage(XPLang("statdownextra", player.UserIDString, stat, config.xpLevel.statpointsperlvl, pointadj));
            }
            // If player does not have enough unspent skill points then get first available skill to level down and remove points
            if (removeskilllvl == true)
            {
                int allskills = xprecord.WoodCutter + xprecord.Smithy + xprecord.Miner + xprecord.Forager + xprecord.Hunter + xprecord.Fisher + xprecord.Crafter + xprecord.Framer + xprecord.Medic + xprecord.Scavenger + xprecord.Electrician + xprecord.Demolitionist + xprecord.Tamer;
                if (allskills == 0)
                {
                    xprecord.skillpoint = 0;
                    player.ChatMessage(XPLang("noskillpoints", player.UserIDString));
                    return;
                }
                var skill = "";
                int skillpoints;
                int pointadj = 0;
                bool dropwoodcutter = false;
                bool dropsmithy = false;
                bool dropminer = false;
                bool dropforager = false;
                bool drophunter = false;
                bool dropfisher = false;
                bool dropcrafter = false;
                bool dropframer = false;
                bool dropmedic = false;
                bool dropscavenger = false;
                bool dropelectrician = false;
                bool dropdemolitionist = false;
                bool droptamer = false;
                // Check each skill for levels
                if (xprecord.WoodCutter > 0) { dropwoodcutter = true; }
                else if (xprecord.Smithy > 0) { dropsmithy = true; }
                else if (xprecord.Miner > 0) { dropminer = true; }
                else if (xprecord.Forager > 0) { dropforager = true; }
                else if (xprecord.Hunter > 0) { drophunter = true; }
                else if (xprecord.Fisher > 0) { dropfisher = true; }
                else if (xprecord.Crafter > 0) { dropcrafter = true; }
                else if (xprecord.Framer > 0) { dropframer = true; }
                else if (xprecord.Medic > 0) { dropmedic = true; }
                else if (xprecord.Scavenger > 0) { dropscavenger = true; }
                else if (xprecord.Electrician > 0) { dropelectrician = true; }
                else if (xprecord.Demolitionist > 0) { dropdemolitionist = true; }
                else if (xprecord.Tamer > 0) { droptamer = true; }
                // Random Skill Chosen
                if (dropwoodcutter == true)
                {
                    skill = "WoodCutter";
                    if (xprecord.WoodCutter == 1)
                    {
                        skillpoints = config.woodcutter.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.WoodCutter * config.woodcutter.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.WoodCutter--;
                    xprecord.WoodCutterP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropsmithy == true)
                {
                    skill = "Smithy";
                    if (xprecord.Smithy == 1)
                    {
                        skillpoints = config.smithy.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Smithy * config.smithy.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Smithy--;
                    xprecord.SmithyP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropminer == true)
                {
                    skill = "Miner";
                    if (xprecord.Miner == 1)
                    {
                        skillpoints = config.miner.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Miner * config.miner.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Miner--;
                    xprecord.MinerP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropforager == true)
                {
                    skill = "Forager";
                    if (xprecord.Forager == 1)
                    {
                        skillpoints = config.forager.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Forager * config.forager.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Forager--;
                    xprecord.ForagerP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (drophunter == true)
                {
                    skill = "Hunter";
                    if (xprecord.Hunter == 1)
                    {
                        skillpoints = config.hunter.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Hunter * config.hunter.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Hunter--;
                    xprecord.HunterP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropfisher == true)
                {
                    skill = "Fisher";
                    if (xprecord.Fisher == 1)
                    {
                        skillpoints = config.fisher.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Fisher * config.fisher.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Fisher--;
                    xprecord.FisherP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropcrafter == true)
                {
                    skill = "Crafter";
                    if (xprecord.Crafter == 1)
                    {
                        skillpoints = config.crafter.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Crafter * config.crafter.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Crafter--;
                    xprecord.CrafterP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropframer == true)
                {
                    skill = "Framer";
                    if (xprecord.Framer == 1)
                    {
                        skillpoints = config.framer.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Framer * config.framer.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Framer--;
                    xprecord.FramerP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropmedic == true)
                {
                    skill = "Medic";
                    if (xprecord.Medic == 1)
                    {
                        skillpoints = config.medic.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Medic * config.medic.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Medic--;
                    xprecord.MedicP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropscavenger == true)
                {
                    skill = "Scavenger";
                    if (xprecord.Scavenger == 1)
                    {
                        skillpoints = config.scavenger.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Scavenger * config.scavenger.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Scavenger--;
                    xprecord.ScavengerP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropelectrician == true)
                {
                    skill = "Electrician";
                    if (xprecord.Electrician == 1)
                    {
                        skillpoints = config.electrician.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Electrician * config.electrician.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Electrician--;
                    xprecord.ElectricianP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (dropdemolitionist == true)
                {
                    skill = "Demolitionist";
                    if (xprecord.Demolitionist == 1)
                    {
                        skillpoints = config.demolitionist.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Demolitionist * config.demolitionist.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Demolitionist--;
                    xprecord.DemolitionistP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                }
                else if (droptamer == true)
                {
                    skill = "Tamer";
                    if (xprecord.Tamer == 1)
                    {
                        skillpoints = config.tamer.pointcoststart;
                    }
                    else
                    {
                        skillpoints = xprecord.Tamer * config.tamer.costmultiplier;
                    }
                    pointadj = skillpoints - config.xpLevel.skillpointsperlvl;
                    if (config.xpLevelRanks.enableresetranks)
                    {
                        pointadj -= config.xpLevelRanks.rankskillpointincrease * xprecord.rank;
                    }
                    xprecord.Tamer--;
                    xprecord.TamerP -= skillpoints;
                    xprecord.skillpoint = pointadj;
                    NextTick(() => PetChecks(player, false));
                    //PetChecks(player, false, xprecord.Tamer);
                }
                // Make sure points do not go negative
                if (xprecord.skillpoint < 0)
                {
                    xprecord.skillpoint = 0;
                }
                player.ChatMessage(XPLang("skilldownextra", player.UserIDString, skill, config.xpLevel.skillpointsperlvl, pointadj));
            }
            // Econ
            if (Economics != null && config.xpEcon.econleveldown)
            {
                Economics.Call("Withdraw", player.UserIDString, config.xpEcon.econlevelreduction);
                player.ChatMessage(XPLang("econwidthdrawlevel", player.UserIDString, config.xpEcon.econlevelreduction));
            }
            // Server Rewards
            if (ServerRewards != null && config.sRewards.srewardleveldown)
            {
                ServerRewards?.Call("TakePoints", player.userID, config.sRewards.srewardleveldownamt);
                player.ChatMessage(XPLang("srewardsdown", player.UserIDString, config.sRewards.srewardleveldownamt));
            }
            //double prevlevel = Math.Round(xprecord.requiredxp / config.xpLevel.levelmultiplier);
            double prevlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
            if (prevlevel > xprecord.experience)
            {
                LvlDown(player);
            }
            LiveStats(player);
            if (config.soundEffects.leveldown)
            {
                player.RunEffect($"{config.soundEffects.leveldowneffect}");
            }
        }
        private void StatUp(BasePlayer player, string stat)
        {
            if (CheckPlayerLocation(player, "disablestatsandskills")) return;
            XPRecord xprecord = GetXPRecord(player);
            int nextlevel = 0;
            int statcost = 0;
            int pointsremaining;
            int pointsinstat;
            switch (stat)
            {
                case "mentality":
                    // Check if Stat is disabled
                    if (config.mentality.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermMentality)) return;
                    // Check if Stat is max level
                    if (xprecord.Mentality >= config.mentality.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Mentality == 0)
                    {
                        nextlevel = 1;
                        statcost = config.mentality.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.MentalityP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Mentality + 1;
                        statcost = nextlevel * config.mentality.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.MentalityP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econmentality;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econmentality * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardmentality;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardmentality * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Mentality = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.MentalityP = pointsinstat;
                    break;
                case "dexterity":
                    // Check if Stat is disabled
                    if (config.dexterity.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermDexterity)) return;
                    // Check if Stat is max level
                    if (xprecord.Dexterity >= config.dexterity.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Dexterity == 0)
                    {
                        nextlevel = 1;
                        statcost = config.dexterity.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.DexterityP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Dexterity + 1;
                        statcost = nextlevel * config.dexterity.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.DexterityP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econdexterity;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econdexterity * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewarddexterity;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewarddexterity * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Dexterity = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.DexterityP = pointsinstat;
                    break;
                case "might":
                    // Check if Stat is disabled
                    if (config.might.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermMight)) return;
                    // Check if Stat is max level
                    if (xprecord.Might >= config.might.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Might == 0)
                    {
                        nextlevel = 1;
                        statcost = config.might.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.MightP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Might + 1;
                        statcost = nextlevel * config.might.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.MightP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econmight;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econmight * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardmight;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardmight * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Might = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.MightP = pointsinstat;
                    PlayerArmor(player);
                    MightAttributes(player);
                    break;
                case "captaincy":
                    // Check if Stat is disabled
                    if (config.captaincy.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermCaptaincy)) return;
                    // Check if Stat is max level
                    if (xprecord.Captaincy >= config.captaincy.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Captaincy == 0)
                    {
                        nextlevel = 1;
                        statcost = config.captaincy.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.CaptaincyP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Captaincy + 1;
                        statcost = nextlevel * config.captaincy.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.CaptaincyP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econcaptaincy;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econcaptaincy * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardcaptaincy;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardcaptaincy * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Captaincy = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.CaptaincyP = pointsinstat;
                    break;
                case "weaponry":
                    // Check if Stat is disabled
                    if (config.weaponry.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermWeaponry)) return;
                    // Check if Stat is max level
                    if (xprecord.Weaponry >= config.weaponry.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Weaponry == 0)
                    {
                        nextlevel = 1;
                        statcost = config.weaponry.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.WeaponryP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Weaponry + 1;
                        statcost = nextlevel * config.weaponry.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.WeaponryP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econweaponry;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econweaponry * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardweaponry;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardweaponry * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Weaponry = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.WeaponryP = pointsinstat;
                    break;
                case "ninjary":
                    // Check if Stat is disabled
                    if (config.ninjary.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermNinjary)) return;
                    // Check if Stat is max level
                    if (xprecord.Ninjary >= config.ninjary.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, stat));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Ninjary == 0)
                    {
                        nextlevel = 1;
                        statcost = config.ninjary.pointcoststart;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.NinjaryP + statcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Ninjary + 1;
                        statcost = nextlevel * config.ninjary.costmultiplier;
                        pointsremaining = xprecord.statpoint - statcost;
                        pointsinstat = xprecord.NinjaryP + statcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.statpoint < statcost)
                    {
                        player.ChatMessage(XPLang("notenoughstatpoints", player.UserIDString, nextlevel, stat, statcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econstatlevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econninjary;
                        if (config.xpEcon.econstatlevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econninjary * (config.xpEcon.econstatlevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, stat, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, stat, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardstatlevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardninjary;
                        if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardninjary * (config.sRewards.srewardstatlevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, stat, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, stat, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Ninjary = nextlevel;
                    xprecord.statpoint = pointsremaining;
                    xprecord.NinjaryP = pointsinstat;
                    break;
            }
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, stat, false);
            }
            // Chat Notification
            if (config.defaultOptions.showchatnotifications && xprecord.showchatnotifications)
            {
                player.ChatMessage(XPLang("statup", player.UserIDString, statcost, nextlevel, stat));
            }
            // Update Live UI
            LiveStats(player);
            // Sound Effects
            if (config.soundEffects.statup)
            {
                player.RunEffect($"{config.soundEffects.statupeffect}");
            }
            // Addon
            if (XPerienceAddon != null)
            {
                XPerienceAddon?.Call("PlayerNotes", player, "stat", nextlevel, stat);
                XPerienceAddon?.Call("AddonDiscordStat", player, XPLang(stat, player.UserIDString), nextlevel);
                XPerienceAddon?.Call("NotifyUIBar", player, "stat", XPLang(stat, player.UserIDString), nextlevel);
                XPerienceAddon?.Call("NotifyUIBarGlobal", player, "stat", XPLang(stat, player.UserIDString), nextlevel);
            }
        }
        private void SkillUp(BasePlayer player, string skill)
        {
            if (CheckPlayerLocation(player, "disablestatsandskills")) return;
            XPRecord xprecord = GetXPRecord(player);
            int nextlevel = 0;
            int skillcost = 0;
            int pointsremaining;
            int pointsinskill;
            switch (skill)
            {
                case "woodcutter":
                    // Check if Skill is disabled
                    if (config.woodcutter.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermWoodCutter)) return;
                    // Check if Skill is max level
                    if (xprecord.WoodCutter >= config.woodcutter.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.WoodCutter == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.woodcutter.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.WoodCutterP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.WoodCutter + 1;
                        skillcost = nextlevel * config.woodcutter.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.WoodCutterP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econwoodcutter;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econwoodcutter * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardwoodcutter;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardwoodcutter * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.WoodCutter = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.WoodCutterP = pointsinskill;
                    break;
                case "smithy":
                    // Check if Skill is disabled
                    if (config.smithy.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermSmithy)) return;
                    // Check if Skill is max level
                    if (xprecord.Smithy >= config.smithy.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Smithy == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.smithy.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.SmithyP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Smithy + 1;
                        skillcost = nextlevel * config.smithy.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.SmithyP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econsmithy;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econsmithy * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardsmithy;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardsmithy * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Smithy = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.SmithyP = pointsinskill;
                    break;
                case "miner":
                    // Check if Skill is disabled
                    if (config.miner.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermMiner)) return;
                    // Check if Skill is max level
                    if (xprecord.Miner >= config.miner.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Miner == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.miner.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.MinerP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Miner + 1;
                        skillcost = nextlevel * config.miner.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.MinerP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econminer;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econminer * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardminer;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardminer * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Miner = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.MinerP = pointsinskill;
                    break;
                case "forager":
                    // Check if Skill is disabled
                    if (config.forager.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermForager)) return;
                    // Check if Skill is max level
                    if (xprecord.Forager >= config.forager.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Forager == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.forager.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ForagerP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Forager + 1;
                        skillcost = nextlevel * config.forager.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ForagerP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econforager;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econforager * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardforager;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardforager * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Forager = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.ForagerP = pointsinskill;
                    break;
                case "hunter":
                    // Check if Skill is disabled
                    if (config.hunter.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermHunter)) return;
                    // Check if Skill is max level
                    if (xprecord.Hunter >= config.hunter.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Hunter == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.hunter.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.HunterP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Hunter + 1;
                        skillcost = nextlevel * config.hunter.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.HunterP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econhunter;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econhunter * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardhunter;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardhunter * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Hunter = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.HunterP = pointsinskill;
                    break;
                case "fisher":
                    // Check if Skill is disabled
                    if (config.fisher.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermFisher)) return;
                    // Check if Skill is max level
                    if (xprecord.Fisher >= config.fisher.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Fisher == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.fisher.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.FisherP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Fisher + 1;
                        skillcost = nextlevel * config.fisher.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.FisherP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econfisher;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econfisher * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardfisher;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardfisher * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Fisher = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.FisherP = pointsinskill;
                    break;
                case "crafter":
                    // Check if Skill is disabled
                    if (config.crafter.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermCrafter)) return;
                    // Check if Skill is max level
                    if (xprecord.Crafter >= config.crafter.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Crafter == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.crafter.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.CrafterP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Crafter + 1;
                        skillcost = nextlevel * config.crafter.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.CrafterP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econcrafter;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econcrafter * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardcrafter;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardcrafter * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Crafter = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.CrafterP = pointsinskill;
                    break;
                case "framer":
                    // Check if Skill is disabled
                    if (config.framer.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermFramer)) return;
                    // Check if Skill is max level
                    if (xprecord.Framer >= config.framer.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Framer == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.framer.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.FramerP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Framer + 1;
                        skillcost = nextlevel * config.framer.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.FramerP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econframer;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econframer * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardframer;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardframer * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Framer = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.FramerP = pointsinskill;
                    break;
                case "medic":
                    // Check if Skill is disabled
                    if (config.medic.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermMedic)) return;
                    // Check if Skill is max level
                    if (xprecord.Medic >= config.medic.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Medic == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.medic.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.MedicP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Medic + 1;
                        skillcost = nextlevel * config.medic.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.MedicP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econmedic;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econmedic * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardmedic;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardmedic * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Medic = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.MedicP = pointsinskill;
                    break;
                case "scavenger":
                    // Check if Skill is disabled
                    if (config.scavenger.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermScavenger)) return;
                    // Check if Skill is max level
                    if (xprecord.Scavenger >= config.scavenger.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Scavenger == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.scavenger.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ScavengerP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Scavenger + 1;
                        skillcost = nextlevel * config.scavenger.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ScavengerP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econscavenger;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econscavenger * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardscavenger;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardscavenger * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Scavenger = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.ScavengerP = pointsinskill;
                    break;
                case "electrician":
                    // Check if Skill is disabled
                    if (config.electrician.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermElectrician)) return;
                    // Check if Skill is max level
                    if (xprecord.Electrician >= config.electrician.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Electrician == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.electrician.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ElectricianP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Electrician + 1;
                        skillcost = nextlevel * config.electrician.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.ElectricianP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econelectrician;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econelectrician * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardelectrician;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardelectrician * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Electrician = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.ElectricianP = pointsinskill;
                    CheckElectricianEntities(player);
                    break;
                case "demolitionist":
                    // Check if Skill is disabled
                    if (config.demolitionist.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermDemolitionist)) return;
                    // Check if Skill is max level
                    if (xprecord.Demolitionist >= config.demolitionist.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Demolitionist == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.demolitionist.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.DemolitionistP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Demolitionist + 1;
                        skillcost = nextlevel * config.demolitionist.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.DemolitionistP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econdemolitionist;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econdemolitionist * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardemolitionist;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardemolitionist * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Demolitionist = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.DemolitionistP = pointsinskill;
                    break;
                case "tamer":
                    // Check if Skill is disabled
                    if (config.tamer.maxlvl == 0) return;
                    // Check for permissions
                    if (config.defaultOptions.userpermissions && !permission.UserHasPermission(player.UserIDString, PermTamer)) return;
                    // Check if Skill is max level
                    if (xprecord.Tamer >= config.tamer.maxlvl)
                    {
                        player.ChatMessage(XPLang("maxleveled", player.UserIDString, skill));
                        return;
                    }
                    // Check current level and points
                    if (xprecord.Tamer == 0)
                    {
                        nextlevel = 1;
                        skillcost = config.tamer.pointcoststart;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.TamerP + skillcost;
                    }
                    else
                    {
                        nextlevel = xprecord.Tamer + 1;
                        skillcost = nextlevel * config.tamer.costmultiplier;
                        pointsremaining = xprecord.skillpoint - skillcost;
                        pointsinskill = xprecord.TamerP + skillcost;
                    }
                    // Check if enough points are available to level up
                    if (xprecord.skillpoint < skillcost)
                    {
                        player.ChatMessage(XPLang("notenoughskillpoints", player.UserIDString, nextlevel, skill, skillcost));
                        return;
                    }
                    // Econ
                    if (Economics != null && config.xpEcon.econskilllevelcost)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double econcostmultiplier = config.xpEcon.econtamer;
                        if (config.xpEcon.econskilllevelcostmultiplier > 0)
                        {
                            econcostmultiplier = config.xpEcon.econtamer * (config.xpEcon.econskilllevelcostmultiplier * nextlevel);
                        }
                        if (balance >= econcostmultiplier)
                        {
                            Economics.Call("Withdraw", player.UserIDString, econcostmultiplier);
                            double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                            player.ChatMessage(XPLang("econwidthdrawlevelup", player.UserIDString, econcostmultiplier, skill, newbalance));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("econwidthdrawlevelupfailed", player.UserIDString, econcostmultiplier, skill, balance));
                            return;
                        }
                    }
                    // Server Rewards
                    if (ServerRewards != null && config.sRewards.srewardskilllevelcost)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int srewardscostmultiplier = config.sRewards.srewardtamer;
                        if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                        {
                            srewardscostmultiplier = config.sRewards.srewardtamer * (config.sRewards.srewardskilllevelcostmultiplier * nextlevel);
                        }
                        if (points >= srewardscostmultiplier)
                        {
                            ServerRewards?.Call("TakePoints", player.userID, srewardscostmultiplier);
                            int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                            player.ChatMessage(XPLang("srewardwidthdrawlevelup", player.UserIDString, srewardscostmultiplier, skill, newpoints));
                        }
                        else
                        {
                            player.ChatMessage(XPLang("srewardswidthdrawlevelupfailed", player.UserIDString, srewardscostmultiplier, skill, points));
                            return;
                        }
                    }
                    // Apply New Level & Update Points
                    xprecord.Tamer = nextlevel;
                    xprecord.skillpoint = pointsremaining;
                    xprecord.TamerP = pointsinskill;
                    NextTick(() => PetChecks(player, false));
                    break;
            }
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, skill, false);
            }
            // Chat Notification
            if (config.defaultOptions.showchatnotifications && xprecord.showchatnotifications)
            {
                player.ChatMessage(XPLang("skillup", player.UserIDString, skillcost, nextlevel, skill));
            }
            // Update Live UI
            LiveStats(player);
            // Sound Effects
            if (config.soundEffects.skillup)
            {
                player.RunEffect($"{config.soundEffects.skillupeffect}");
            }
            // AddonDiscord
            if (XPerienceAddon != null)
            {
                XPerienceAddon?.Call("PlayerNotes", player, "skill", nextlevel, skill);
                XPerienceAddon?.Call("AddonDiscordSkill", player, XPLang(skill, player.UserIDString), nextlevel);
                XPerienceAddon?.Call("NotifyUIBar", player, "skill", XPLang(skill, player.UserIDString), nextlevel);
                XPerienceAddon?.Call("NotifyUIBarGlobal", player, "skill", XPLang(skill, player.UserIDString), nextlevel);
            }
        }
        private void StatReset(BasePlayer player, string stat, bool bypass = false)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (!bypass)
            {
                if (CheckPlayerLocation(player, "disablestatsandskills")) return;
                if (!config.defaultOptions.allowrespec || config.defaultOptions.hardcorenoreset)
                {
                    return;
                }
                int resetlimit = 0;
                bool UserHasSpecialGroup = false;
                // Check Special Groups
                var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
                var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
                foreach (var specialgroup in getgrouplist)
                {
                    UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                    if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                    {
                        if (specialgroup.dailystatlimitboost > 0)
                        { resetlimit = specialgroup.dailystatlimitboost; }
                        break;
                    }
                    else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                    {
                        highestpriority--;
                        goto restart;
                    }
                }
                // Check Daily Limits
                DailyLimitPlayer(player);
                DailyRecord dailyrecord = GetDailyRecord(player);
                if (config.dailyresetLimit.enabledailyresetlimit)
                {
                    // Calculate time
                    var getlaststatreset = dailyrecord.laststatreset - DateTime.Now;
                    double laststatreset = Math.Round(double.Parse(getlaststatreset.Minutes.ToString()) / 60, 1);
                    string dailyresetlabel = "hours";
                    if (laststatreset <= 1)
                    {
                        laststatreset = int.Parse(getlaststatreset.Minutes.ToString());
                        dailyresetlabel = "mins";
                    }
                    // Get limit Settings
                    resetlimit += config.dailyresetLimit.dailystatlimit;
                    if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                    {
                        resetlimit = config.dailyresetLimit.dailystatlimitvip;
                    }
                    // Check Players Limit
                    if (dailyrecord.dailystatresets >= resetlimit && resetlimit != 0)
                    {
                        player.ChatMessage(XPLang("dailyresetlimitreached", player.UserIDString, resetlimit, laststatreset, dailyresetlabel));
                        return;
                    }
                    // Add Reset to Daily Record
                    dailyrecord.dailystatresets += 1;
                }
                // Timers
                DateTime resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.resetminsstats);
                if (permission.UserHasPermission(player.UserIDString, VIP))
                {
                    resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.vipresetminstats);
                }
                TimeSpan interval = resettimestats - DateTime.Now;
                int timer = (int)interval.TotalMinutes;
                if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
                {
                    timer = 0;
                }
                if (timer > 0 && config.defaultOptions.restristresets)
                {
                    player.ChatMessage(XPLang("resettimerstats", player.UserIDString, timer));
                    return;
                }
                // New Reset Timer
                xprecord.resettimerstats = DateTime.Now;
                // Econ
                if (Economics != null && config.xpEcon.econresetstat)
                {
                    double balance = Economics.Call<double>("Balance", player.UserIDString);
                    if (balance >= config.xpEcon.econresetstatcost)
                    {
                        Economics.Call("Withdraw", player.UserIDString, config.xpEcon.econresetstatcost);
                        double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                        player.ChatMessage(XPLang("econwidthdrawresetstat", player.UserIDString, config.xpEcon.econresetstatcost, newbalance));
                    }
                    else
                    {
                        player.ChatMessage(XPLang("econwidthdrawresetstatfailed", player.UserIDString, config.xpEcon.econresetstatcost, balance));
                        return;
                    }
                }
                // Server Rewards
                if (ServerRewards != null && config.sRewards.srewardresetstat)
                {
                    int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                    if (points >= config.sRewards.srewardresetstatcost)
                    {
                        ServerRewards?.Call("TakePoints", player.userID, config.sRewards.srewardresetstatcost);
                        int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                        player.ChatMessage(XPLang("srewardwidthdrawresetstat", player.UserIDString, config.sRewards.srewardresetstatcost, newpoints));
                    }
                    else
                    {
                        player.ChatMessage(XPLang("srewardwidthdrawresetstatfailed", player.UserIDString, config.sRewards.srewardresetstatcost, points));
                        return;
                    }
                }
            }
            // Find Stat and Reset
            int statpoints = 0;
            switch (stat.ToLower())
            {
                case "mentality":
                    statpoints = xprecord.MentalityP;
                    xprecord.statpoint += xprecord.MentalityP;
                    xprecord.Mentality = 0;
                    xprecord.MentalityP = 0;
                    break;
                case "dexterity":
                    statpoints = xprecord.DexterityP;
                    xprecord.statpoint += xprecord.DexterityP;
                    xprecord.Dexterity = 0;
                    xprecord.DexterityP = 0;
                    break;
                case "might":
                    statpoints = xprecord.MightP;
                    xprecord.statpoint += xprecord.MightP;
                    if (xprecord.Might >= 1)
                    {
                        // Max Health
                        double armor = (xprecord.Might * config.might.armor) * 100;
                        double newmaxhealth = player._maxHealth - armor;
                        // Change Max Health
                        if (newmaxhealth < 100)
                        {
                            player._maxHealth = 100;
                        }
                        else
                        {
                            player._maxHealth = (float)newmaxhealth;
                        }
                        // Player Current Health
                        double defaulthealth = 100;
                        double teahealth = 100;
                        bool teamodified = false;
                        double healthdifference = 0;
                        if (GetTeaCooldown(player) != 0)
                        {
                            // Check for Tea Modifier
                            if (TeaModifiers != null && xprecord.teatype != "none")
                            {
                                teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                                teamodified = true;
                            }
                            switch (GetTeaTypes(player))
                            {
                                case "maxhealthtea":
                                    if (!teamodified)
                                    {
                                        teahealth = defaulthealth + 5;
                                    }
                                    break;
                                case "maxhealthtea.advanced":
                                    if (!teamodified)
                                    {
                                        teahealth = defaulthealth + 12.5;
                                    }
                                    break;
                                case "maxhealthtea.pure":
                                    if (!teamodified)
                                    {
                                        teahealth = defaulthealth + 20;
                                    }
                                    break;
                            }
                        }
                        if (player._health > teahealth)
                        {
                            healthdifference = player._health - teahealth;
                        }
                        player._health -= (float)healthdifference;
                    }
                    xprecord.Might = 0;
                    xprecord.MightP = 0;
                    if (player.metabolism.calories.max > 500)
                    {
                        player.metabolism.calories.max = 500;
                    }
                    if (player.metabolism.hydration.max > 250)
                    {
                        player.metabolism.hydration.max = 250;
                    }
                    MightAttributes(player);
                    break;
                case "captaincy":
                    statpoints = xprecord.CaptaincyP;
                    xprecord.statpoint += xprecord.CaptaincyP;
                    xprecord.Captaincy = 0;
                    xprecord.CaptaincyP = 0;
                    break;
                case "weaponry":
                    statpoints = xprecord.WeaponryP;
                    xprecord.statpoint += xprecord.WeaponryP;
                    xprecord.Weaponry = 0;
                    xprecord.WeaponryP = 0;
                    break;
                case "ninjary":
                    statpoints = xprecord.NinjaryP;
                    xprecord.statpoint += xprecord.NinjaryP;
                    xprecord.Ninjary = 0;
                    xprecord.NinjaryP = 0;
                    break;
            }
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                string backpackstatorskill = config.backpacksmod.statorskill;
                if (backpackstatorskill == stat.ToLower())
                {
                    BackPackChecks(player, null, true);
                }
            }
            if (!bypass)
            {
                // Message Player with number of stat points returned
                player.ChatMessage(XPLang("resetstat", player.UserIDString, stat, statpoints));
                // Update Live UI
                LiveStats(player);
                if (config.soundEffects.statreset)
                {
                    player.RunEffect($"{config.soundEffects.statreseteffect}");
                }
            }
        }
        private void StatsResetAll(BasePlayer player)
        {
            if (CheckPlayerLocation(player, "disablestatsandskills")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (config.defaultOptions.hardcorenoreset)
            {
                return;
            }
            int resetlimit = 0;
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    if (specialgroup.dailystatlimitboost > 0)
                    { resetlimit = specialgroup.dailystatlimitboost; }
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            // Check Daily Limits
            DailyLimitPlayer(player);
            DailyRecord dailyrecord = GetDailyRecord(player);
            if (config.dailyresetLimit.enabledailyresetlimit)
            {
                // Calculate time
                var getlaststatreset = dailyrecord.laststatreset - DateTime.Now;
                double laststatreset = Math.Round(double.Parse(getlaststatreset.Minutes.ToString()) / 60, 1);
                string dailyresetlabel = "hours";
                if (laststatreset <= 1)
                {
                    laststatreset = int.Parse(getlaststatreset.Minutes.ToString());
                    dailyresetlabel = "mins";
                }
                // Get limit Settings
                resetlimit += config.dailyresetLimit.dailystatlimit;
                if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    resetlimit = config.dailyresetLimit.dailystatlimitvip;
                }
                // Check Players Limit
                if (dailyrecord.dailystatresets >= resetlimit && resetlimit != 0)
                {
                    player.ChatMessage(XPLang("dailyresetlimitreached", player.UserIDString, resetlimit, laststatreset, dailyresetlabel));
                    return;
                }
            }
            // Timers
            DateTime resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.resetminsstats);
            if (permission.UserHasPermission(player.UserIDString, VIP))
            {
                resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.vipresetminstats);
            }
            TimeSpan interval = resettimestats - DateTime.Now;
            int timer = (int)interval.TotalMinutes;
            if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
            {
                timer = 0;
            }
            if (timer > 0 && config.defaultOptions.restristresets)
            {
                player.ChatMessage(XPLang("resettimerstats", player.UserIDString, timer));
                return;
            }
            // Econ
            if (Economics != null && config.xpEcon.econresetstats)
            {
                double balance = Economics.Call<double>("Balance", player.UserIDString);
                if (balance >= config.xpEcon.econresetstatscost)
                {
                    Economics.Call("Withdraw", player.UserIDString, config.xpEcon.econresetstatscost);
                    double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                    player.ChatMessage(XPLang("econwidthdrawresetstat", player.UserIDString, config.xpEcon.econresetstatscost, newbalance));
                }
                else
                {
                    player.ChatMessage(XPLang("econwidthdrawresetstatfailed", player.UserIDString, config.xpEcon.econresetstatscost, balance));
                    return;
                }
            }
            // Server Rewards
            if (ServerRewards != null && config.sRewards.srewardresetstats)
            {
                int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                if (points >= config.sRewards.srewardresetstatscost)
                {
                    ServerRewards?.Call("TakePoints", player.userID, config.sRewards.srewardresetstatscost);
                    int newpoints = ServerRewards.Call<int>("CheckPoints", player.userID);
                    player.ChatMessage(XPLang("srewardwidthdrawresetstat", player.UserIDString, config.sRewards.srewardresetstatscost, newpoints));
                }
                else
                {
                    player.ChatMessage(XPLang("srewardwidthdrawresetstatfailed", player.UserIDString, config.sRewards.srewardresetstatscost, points));
                    return;
                }
            }
            // Reset health if needed before removing points
            if (xprecord.Might >= 1)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = player._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    player._maxHealth = 100;
                }
                else
                {
                    player._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(player) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(player))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (player._health > teahealth)
                {
                    healthdifference = player._health - teahealth;
                }
                player._health -= (float)healthdifference;
                MightAttributes(player);
            }
            // Add all spent points
            int statpoints = xprecord.statpoint + xprecord.MentalityP + xprecord.DexterityP + xprecord.MightP + xprecord.CaptaincyP + xprecord.WeaponryP + xprecord.NinjaryP;
            // Refund Points
            xprecord.statpoint = statpoints;
            // Reset Stat Levels
            xprecord.Mentality = 0;
            xprecord.Dexterity = 0;
            xprecord.Might = 0;
            xprecord.Captaincy = 0;
            xprecord.Weaponry = 0;
            xprecord.Ninjary = 0;
            // Reset Stat Spent Points
            xprecord.MentalityP = 0;
            xprecord.DexterityP = 0;
            xprecord.MightP = 0;
            xprecord.CaptaincyP = 0;
            xprecord.WeaponryP = 0;
            xprecord.NinjaryP = 0;
            if (player.metabolism.calories.max > 500)
            {
                player.metabolism.calories.max = 500;
            }
            if (player.metabolism.hydration.max > 250)
            {
                player.metabolism.hydration.max = 250;
            }
            // New Reset Timer
            xprecord.resettimerstats = DateTime.Now;
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                string backpackstatorskill = config.backpacksmod.statorskill;
                if (backpackstatorskill == "Mentality" || backpackstatorskill == "Dexterity" || backpackstatorskill == "Might" || backpackstatorskill == "Captaincy")
                {
                    BackPackChecks(player, null, true);
                }
            }
            // Add Reset to Daily Record
            dailyrecord.dailystatresets += 1;
            // Message Player with number of stat points returned
            player.ChatMessage(XPLang("resetstats", player.UserIDString, statpoints));
            // Update Live UI
            LiveStats(player);
            if (config.soundEffects.statreset)
            {
                player.RunEffect($"{config.soundEffects.statreseteffect}");
            }
        }
        private void SkillReset(BasePlayer player, string skill, bool bypass = false)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (!bypass)
            {
                if (CheckPlayerLocation(player, "disablestatsandskills")) return;
                if (!config.defaultOptions.allowrespec || config.defaultOptions.hardcorenoreset)
                {
                    return;
                }
                int resetlimit = 0;
                bool UserHasSpecialGroup = false;
                // Check Special Groups
                var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
                var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
                foreach (var specialgroup in getgrouplist)
                {
                    UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                    if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                    {
                        if (specialgroup.dailyskilllimitboost > 0)
                        { resetlimit = specialgroup.dailyskilllimitboost; }
                        break;
                    }
                    else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                    {
                        highestpriority--;
                        goto restart;
                    }
                }
                // Check Daily Limits
                DailyLimitPlayer(player);
                DailyRecord dailyrecord = GetDailyRecord(player);
                if (config.dailyresetLimit.enabledailyresetlimit)
                {
                    // Calculate time
                    var getlastskillreset = dailyrecord.lastskillreset - DateTime.Now;
                    double lastskillreset = Math.Round(double.Parse(getlastskillreset.Minutes.ToString()) / 60, 1);
                    string dailyresetlabel = "hours";
                    if (lastskillreset <= 1)
                    {
                        lastskillreset = int.Parse(getlastskillreset.Minutes.ToString());
                        dailyresetlabel = "mins";
                    }
                    // Get limit Settings
                    resetlimit += config.dailyresetLimit.dailyskilllimit;
                    if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                    {
                        resetlimit = config.dailyresetLimit.dailyskilllimitvip;
                    }
                    // Check Players Limit
                    if (dailyrecord.dailyskillresets >= resetlimit && resetlimit != 0)
                    {
                        player.ChatMessage(XPLang("dailyresetlimitreached", player.UserIDString, resetlimit, lastskillreset, dailyresetlabel));
                        return;
                    }
                    // Add Reset to Daily Record
                    dailyrecord.dailyskillresets += 1;
                }
                // Timer
                DateTime resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.resetminsskills);
                if (permission.UserHasPermission(player.UserIDString, VIP))
                {
                    resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.vipresetminsskills);
                }
                TimeSpan interval = resettimeskills - DateTime.Now;
                int timer = (int)interval.TotalMinutes;
                if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
                {
                    timer = 0;
                }
                if (timer > 0 && config.defaultOptions.restristresets)
                {
                    player.ChatMessage(XPLang("resettimerskills", player.UserIDString, timer));
                    return;
                }
                // New Reset Timer
                xprecord.resettimerskills = DateTime.Now;
                // Econ
                if (Economics != null && config.xpEcon.econresetskill)
                {
                    double balance = Economics.Call<double>("Balance", player.UserIDString);
                    if (balance >= config.xpEcon.econresetskillcost)
                    {
                        Economics.Call("Withdraw", player.UserIDString, config.xpEcon.econresetskillcost);
                        double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                        player.ChatMessage(XPLang("econwidthdrawresetstat", player.UserIDString, config.xpEcon.econresetskillcost, newbalance));
                    }
                    else
                    {
                        player.ChatMessage(XPLang("econwidthdrawresetstatfailed", player.UserIDString, config.xpEcon.econresetskillcost, balance));
                        return;
                    }
                }
                // Server Rewards
                if (ServerRewards != null && config.sRewards.srewardresetskill)
                {
                    int points = ServerRewards.Call<int>("CheckPoints", player.UserIDString);
                    if (points >= config.sRewards.srewardresetskillcost)
                    {
                        ServerRewards?.Call("TakePoints", player.UserIDString, config.sRewards.srewardresetskillcost);
                        int newpoints = ServerRewards.Call<int>("CheckPoints", player.UserIDString);
                        player.ChatMessage(XPLang("srewardwidthdrawresetstat", player.UserIDString, config.sRewards.srewardresetskillcost, newpoints));
                    }
                    else
                    {
                        player.ChatMessage(XPLang("srewardwidthdrawresetstatfailed", player.UserIDString, config.sRewards.srewardresetskillcost, points));
                        return;
                    }
                }
            }
            // Find Skill and Reset
            int skillpoints = 0;
            switch (skill.ToLower())
            {
                case "woodcutter":
                    skillpoints = xprecord.WoodCutterP;
                    xprecord.skillpoint += xprecord.WoodCutterP;
                    xprecord.WoodCutter = 0;
                    xprecord.WoodCutterP = 0;
                    break;
                case "smithy":
                    skillpoints = xprecord.SmithyP;
                    xprecord.skillpoint += xprecord.SmithyP;
                    xprecord.Smithy = 0;
                    xprecord.SmithyP = 0;
                    break;
                case "miner":
                    skillpoints = xprecord.MinerP;
                    xprecord.skillpoint += xprecord.MinerP;
                    xprecord.Miner = 0;
                    xprecord.MinerP = 0;
                    break;
                case "forager":
                    skillpoints = xprecord.ForagerP;
                    xprecord.skillpoint += xprecord.ForagerP;
                    xprecord.Forager = 0;
                    xprecord.ForagerP = 0;
                    break;
                case "hunter":
                    skillpoints = xprecord.HunterP;
                    xprecord.skillpoint += xprecord.HunterP;
                    xprecord.Hunter = 0;
                    xprecord.HunterP = 0;
                    break;
                case "crafter":
                    skillpoints = xprecord.CrafterP;
                    xprecord.skillpoint += xprecord.CrafterP;
                    xprecord.Crafter = 0;
                    xprecord.CrafterP = 0;
                    break;
                case "framer":
                    skillpoints = xprecord.FramerP;
                    xprecord.skillpoint += xprecord.FramerP;
                    xprecord.Framer = 0;
                    xprecord.FramerP = 0;
                    break;
                case "fisher":
                    skillpoints = xprecord.FisherP;
                    xprecord.skillpoint += xprecord.FisherP;
                    xprecord.Fisher = 0;
                    xprecord.FisherP = 0;
                    break;
                case "medic":
                    skillpoints = xprecord.MedicP;
                    xprecord.skillpoint += xprecord.MedicP;
                    xprecord.Medic = 0;
                    xprecord.MedicP = 0;
                    break;
                case "scavenger":
                    skillpoints = xprecord.ScavengerP;
                    xprecord.skillpoint += xprecord.ScavengerP;
                    xprecord.Scavenger = 0;
                    xprecord.ScavengerP = 0;
                    break;
                case "electrician":
                    skillpoints = xprecord.ElectricianP;
                    xprecord.skillpoint += xprecord.ElectricianP;
                    xprecord.Electrician = 0;
                    xprecord.ElectricianP = 0;
                    CheckElectricianEntities(player, true);
                    break;
                case "demolitionist":
                    skillpoints = xprecord.DemolitionistP;
                    xprecord.skillpoint += xprecord.DemolitionistP;
                    xprecord.Demolitionist = 0;
                    xprecord.DemolitionistP = 0;
                    break;
                case "tamer":
                    skillpoints = xprecord.TamerP;
                    xprecord.skillpoint += xprecord.TamerP;
                    xprecord.Tamer = 0;
                    xprecord.TamerP = 0;
                    // Reset Tamer permissions
                    PetChecks(player, true);
                    break;
            }
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                string backpackskill = config.backpacksmod.statorskill;
                if (backpackskill == skill.ToLower())
                {
                    BackPackChecks(player, null, true);
                }
            }
            if (!bypass)
            {
                // Message Player with number of skill points returned
                player.ChatMessage(XPLang("resetskill", player.UserIDString, skill, skillpoints));
                // Update Live UI
                LiveStats(player);
                if (config.soundEffects.skillreset)
                {
                    player.RunEffect($"{config.soundEffects.skillreseteffect}");
                }
            }
        }
        private void SkillsResetAll(BasePlayer player)
        {
            if (CheckPlayerLocation(player, "disablestatsandskills")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (config.defaultOptions.hardcorenoreset)
            {
                return;
            }
            int resetlimit = 0;
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    if (specialgroup.dailyskilllimitboost > 0)
                    { resetlimit = specialgroup.dailyskilllimitboost; }
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            // Check Daily Limits
            DailyLimitPlayer(player);
            DailyRecord dailyrecord = GetDailyRecord(player);
            if (config.dailyresetLimit.enabledailyresetlimit)
            {
                // Calculate time
                var getlastskillreset = dailyrecord.lastskillreset - DateTime.Now;
                double lastskillreset = Math.Round(double.Parse(getlastskillreset.Minutes.ToString()) / 60, 1);
                string dailyresetlabel = "hours";
                if (lastskillreset <= 1)
                {
                    lastskillreset = int.Parse(getlastskillreset.Minutes.ToString());
                    dailyresetlabel = "mins";
                }
                // Get limit Settings
                resetlimit += config.dailyresetLimit.dailyskilllimit;
                if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    resetlimit = config.dailyresetLimit.dailyskilllimitvip;
                }
                // Check Players Limit
                if (dailyrecord.dailyskillresets >= resetlimit && resetlimit != 0)
                {
                    player.ChatMessage(XPLang("dailyresetlimitreached", player.UserIDString, resetlimit, lastskillreset, dailyresetlabel));
                    return;
                }
            }
            // Timer
            DateTime resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.resetminsskills);
            if (permission.UserHasPermission(player.UserIDString, VIP))
            {
                resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.vipresetminsskills);
            }
            TimeSpan interval = resettimeskills - DateTime.Now;
            int timer = (int)interval.TotalMinutes;
            if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
            {
                timer = 0;
            }
            if (timer > 0 && config.defaultOptions.restristresets)
            {
                player.ChatMessage(XPLang("resettimerskills", player.UserIDString, timer));
                return;
            }
            // Econ
            if (Economics != null && config.xpEcon.econresetskills)
            {
                double balance = Economics.Call<double>("Balance", player.UserIDString);
                if (balance >= config.xpEcon.econresetskillscost)
                {
                    Economics.Call("Withdraw", player.UserIDString, config.xpEcon.econresetskillscost);
                    double newbalance = Economics.Call<double>("Balance", player.UserIDString);
                    player.ChatMessage(XPLang("econwidthdrawresetstat", player.UserIDString, config.xpEcon.econresetskillscost, newbalance));
                }
                else
                {
                    player.ChatMessage(XPLang("econwidthdrawresetstatfailed", player.UserIDString, config.xpEcon.econresetskillscost, balance));
                    return;
                }
            }
            // Server Rewards
            if (ServerRewards != null && config.sRewards.srewardresetskills)
            {
                int points = ServerRewards.Call<int>("CheckPoints", player.UserIDString);
                if (points >= config.sRewards.srewardresetskillscost)
                {
                    ServerRewards?.Call("TakePoints", player.UserIDString, config.sRewards.srewardresetskillscost);
                    int newpoints = ServerRewards.Call<int>("CheckPoints", player.UserIDString);
                    player.ChatMessage(XPLang("srewardwidthdrawresetstat", player.UserIDString, config.sRewards.srewardresetskillscost, newpoints));
                }
                else
                {
                    player.ChatMessage(XPLang("srewardwidthdrawresetstatfailed", player.UserIDString, config.sRewards.srewardresetskillscost, points));
                    return;
                }
            }
            // Add all spent points
            int skillpoints = xprecord.skillpoint + xprecord.WoodCutterP + xprecord.SmithyP + xprecord.MinerP + xprecord.ForagerP + xprecord.HunterP + xprecord.FisherP + xprecord.CrafterP + xprecord.FramerP + xprecord.MedicP + xprecord.ScavengerP + xprecord.ElectricianP + xprecord.DemolitionistP + xprecord.TamerP;
            // Reset Skill Levels
            xprecord.skillpoint = skillpoints;
            xprecord.WoodCutter = 0;
            xprecord.Smithy = 0;
            xprecord.Miner = 0;
            xprecord.Forager = 0;
            xprecord.Hunter = 0;
            xprecord.Fisher = 0;
            xprecord.Crafter = 0;
            xprecord.Framer = 0;
            xprecord.Medic = 0;
            xprecord.Scavenger = 0;
            xprecord.Electrician = 0;
            xprecord.Demolitionist = 0;
            xprecord.Tamer = 0;
            // Reset Skill Spents Points
            xprecord.WoodCutterP = 0;
            xprecord.SmithyP = 0;
            xprecord.MinerP = 0;
            xprecord.ForagerP = 0;
            xprecord.HunterP = 0;
            xprecord.FisherP = 0;
            xprecord.CrafterP = 0;
            xprecord.FramerP = 0;
            xprecord.MedicP = 0;
            xprecord.ScavengerP = 0;
            xprecord.ElectricianP = 0;
            xprecord.DemolitionistP = 0;
            xprecord.TamerP = 0;
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                string backpackskill = config.backpacksmod.statorskill;
                if (backpackskill == "WoodCutter" || backpackskill == "Smithy" || backpackskill == "Miner" || backpackskill == "Forager" || backpackskill == "Hunter" || backpackskill == "Fisher" || backpackskill == "Crafter" || backpackskill == "Framer" || backpackskill == "Medic" || backpackskill == "Scavenger")
                {
                    BackPackChecks(player, null, true);
                }
            }
            // Check/Reset Tamer permissions
            PetChecks(player, true);
            // New Reset Timer
            xprecord.resettimerskills = DateTime.Now;
            // Add Reset to Daily Record
            dailyrecord.dailyskillresets += 1;
            // Message Player with number of skill points returned
            player.ChatMessage(XPLang("resetskills", player.UserIDString, skillpoints));
            // Update Live UI
            LiveStats(player);
            if (config.soundEffects.skillreset)
            {
                player.RunEffect($"{config.soundEffects.skillreseteffect}");
            }
            CheckElectricianEntities(player, true);
        }
        private void PlayerFixDataAll(BasePlayer player, bool reset = false)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            foreach (var p in _xperienceCache)
            {
                if (!p.Key.IsSteamId()) continue;
                XPRecord xprecord = GetPlayerRecord(p.Key);
                // Check True experience before fixing data
                if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
                {
                    xprecord.trueexperience = (int)xprecord.experience;
                }
                // Reset Level, Required XP & Stat/Skill Points
                if (!reset)
                {
                    xprecord.rank = 0;
                    xprecord.truelevel = 0;
                }
                xprecord.level = 0;
                xprecord.experience = 0;
                xprecord.requiredxp = config.xpLevel.levelstart;
                xprecord.statpoint = 0;
                xprecord.skillpoint = 0;
                // Reset Stat Levels
                xprecord.Mentality = 0;
                xprecord.Dexterity = 0;
                xprecord.Might = 0;
                xprecord.Captaincy = 0;
                xprecord.Weaponry = 0;
                xprecord.Ninjary = 0;
                // Reset Stat Spent Points
                xprecord.MentalityP = 0;
                xprecord.DexterityP = 0;
                xprecord.MightP = 0;
                xprecord.CaptaincyP = 0;
                xprecord.WeaponryP = 0;
                xprecord.NinjaryP = 0;
                // Reset Skill Levels
                xprecord.WoodCutter = 0;
                xprecord.Smithy = 0;
                xprecord.Miner = 0;
                xprecord.Forager = 0;
                xprecord.Hunter = 0;
                xprecord.Fisher = 0;
                xprecord.Crafter = 0;
                xprecord.Framer = 0;
                xprecord.Medic = 0;
                xprecord.Scavenger = 0;
                xprecord.Electrician = 0;
                xprecord.Demolitionist = 0;
                xprecord.Tamer = 0;
                // Reset Skill Spents Points
                xprecord.WoodCutterP = 0;
                xprecord.SmithyP = 0;
                xprecord.MinerP = 0;
                xprecord.ForagerP = 0;
                xprecord.HunterP = 0;
                xprecord.FisherP = 0;
                xprecord.CrafterP = 0;
                xprecord.FramerP = 0;
                xprecord.MedicP = 0;
                xprecord.ScavengerP = 0;
                xprecord.ElectricianP = 0;
                xprecord.DemolitionistP = 0;
                xprecord.TamerP = 0;
                // Set LiveUI Location to Default
                xprecord.UILocation = config.defaultOptions.liveuistatslocation;
                // Check for Rank Group and Assign or Revoke
                foreach (var rankgroup in config.xpLevelRanks.ranks)
                {
                    if (config.xpLevelRanks.keepgrouponrank && xprecord.rank > rankgroup.Key && !permission.UserHasGroup(p.Key, rankgroup.Value.group))
                    {
                        permission.AddUserGroup(p.Key, rankgroup.Value.group);
                    }
                    if (xprecord.rank == rankgroup.Key && !permission.UserHasGroup(p.Key, rankgroup.Value.group))
                    {
                        permission.AddUserGroup(p.Key, rankgroup.Value.group);
                    }
                    if (xprecord.rank < rankgroup.Key && permission.UserHasGroup(p.Key, rankgroup.Value.group))
                    {
                        permission.RemoveUserGroup(p.Key, rankgroup.Value.group);
                    }
                    if (!config.xpLevelRanks.keepgrouponrank && xprecord.rank > rankgroup.Key && permission.UserHasGroup(p.Key, rankgroup.Value.group))
                    {
                        permission.RemoveUserGroup(p.Key, rankgroup.Value.group);
                    }
                }
                // Take Backpack Permissions
                foreach (var removeoptions in config.backpacksmod.BackPackSlots)
                {
                    if (permission.UserHasPermission(p.Key, $"backpacks.size.{removeoptions.Value.slots}")) permission.RevokeUserPermission(p.Key, $"backpacks.size.{removeoptions.Value.slots}");
                }
                // Take Personal Animals Permissions
                permission.RevokeUserPermission(p.Key, PTameChicken);
                permission.RevokeUserPermission(p.Key, PTameBoar);
                permission.RevokeUserPermission(p.Key, PTameStag);
                permission.RevokeUserPermission(p.Key, PTameWolf);
                permission.RevokeUserPermission(p.Key, PTameBear);
                // Run Level Up to Recalculate Players Data                
                if (!reset)
                {
                    GainExpAdminFix(p.Key, xprecord.trueexperience, xprecord.trueexperience, true);
                }
                var selectplayer = BasePlayer.FindByID(Convert.ToUInt64(p.Key));
                if (selectplayer != null)
                {
                    LiveStats(selectplayer, true);
                    CheckElectricianEntities(selectplayer, true);
                }
            }
            player.ChatMessage(XPLang("adminfixplayers", player.UserIDString));
        }
        private void PlayerFixData(BasePlayer player, bool reset = false)
        {
            if (player == null) return;
            if (CheckPlayerLocation(player, "disablestatsandskills")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            // Check True experience before fixing data
            if (config.xpLevelRanks.enableresetranks && !xprecord.DisableRank)
            {
                if (xprecord.trueexperience <= 0 || xprecord.trueexperience < xprecord.experience)
                {
                    xprecord.trueexperience = (int)xprecord.experience;
                }
            }
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin) && config.defaultOptions.disableplayerfixdata)
            {
                player.ChatMessage(XPLang("fixdatadisabled", player.UserIDString));
                return;
            }
            int timer;
            DateTime resettimedata = xprecord.playerfixdata.AddMinutes(config.defaultOptions.playerfixdatatimer);
            TimeSpan interval = resettimedata - DateTime.Now;
            timer = (int)interval.TotalMinutes;
            if (config.defaultOptions.bypassadminreset && player.IsAdmin && permission.UserHasPermission(player.UserIDString, Admin))
            {
                timer = 0;
            }
            if (timer > 0)
            {
                player.ChatMessage(XPLang("resettimerdata", player.UserIDString, timer));
                return;
            }
            // Reset Level, Required XP & Stat/Skill Points
            if (!reset)
            {
                xprecord.rank = 0;
                xprecord.truelevel = 0;
            }
            xprecord.level = 0;
            xprecord.experience = 0;
            xprecord.requiredxp = config.xpLevel.levelstart;
            xprecord.statpoint = 0;
            xprecord.skillpoint = 0;
            // Reset health if needed before removing points
            if (xprecord.Might >= 1)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = player._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    player._maxHealth = 100;
                }
                else
                {
                    player._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(player) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(player))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (player._health > teahealth)
                {
                    healthdifference = player._health - teahealth;
                }
                player._health -= (float)healthdifference;
            }
            // Reset Stat Levels
            xprecord.Mentality = 0;
            xprecord.Dexterity = 0;
            xprecord.Might = 0;
            xprecord.Captaincy = 0;
            xprecord.Weaponry = 0;
            xprecord.Ninjary = 0;
            // Reset Stat Spent Points
            xprecord.MentalityP = 0;
            xprecord.DexterityP = 0;
            xprecord.MightP = 0;
            xprecord.CaptaincyP = 0;
            xprecord.WeaponryP = 0;
            xprecord.NinjaryP = 0;
            // Reset Skill Levels
            xprecord.WoodCutter = 0;
            xprecord.Smithy = 0;
            xprecord.Miner = 0;
            xprecord.Forager = 0;
            xprecord.Hunter = 0;
            xprecord.Fisher = 0;
            xprecord.Crafter = 0;
            xprecord.Framer = 0;
            xprecord.Medic = 0;
            xprecord.Scavenger = 0;
            xprecord.Electrician = 0;
            xprecord.Demolitionist = 0;
            xprecord.Tamer = 0;
            // Reset Skill Spents Points
            xprecord.WoodCutterP = 0;
            xprecord.SmithyP = 0;
            xprecord.MinerP = 0;
            xprecord.ForagerP = 0;
            xprecord.HunterP = 0;
            xprecord.FisherP = 0;
            xprecord.CrafterP = 0;
            xprecord.FramerP = 0;
            xprecord.MedicP = 0;
            xprecord.ScavengerP = 0;
            xprecord.ElectricianP = 0;
            xprecord.DemolitionistP = 0;
            xprecord.TamerP = 0;
            // Reset calories/hydration if needed
            if (player.metabolism.calories.max > 500)
            {
                player.metabolism.calories.max = 500;
            }
            if (player.metabolism.hydration.max > 250)
            {
                player.metabolism.hydration.max = 250;
            }
            // Check/Reset RankGroup permissions
            RankCheck(player);
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, config.backpacksmod.statorskill, true);
            }
            // Check/Reset Tamer permissions
            PetChecks(player, true);
            // Set LiveUI Location to Default
            xprecord.UILocation = config.defaultOptions.liveuistatslocation;
            // Timer
            xprecord.playerfixdata = DateTime.Now;
            // Run Level Up to Recalculate Players Data
            if (!reset)
            {
                GainExpAdmin(player, xprecord.trueexperience, xprecord.trueexperience, true);
            }
            // Update Live UI
            LiveStats(player);
            // Notify Players
            player.ChatMessage(XPLang("playerfixdata", player.UserIDString));
            CheckElectricianEntities(player, true);
        }
        private void PlayerReset(BasePlayer player)
        {
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            // Reset Level, Required XP & Stat/Skill Points
            xprecord.rank = 0;
            xprecord.truelevel = 0;
            xprecord.trueexperience = 0;
            xprecord.level = 0;
            xprecord.experience = 0;
            xprecord.requiredxp = config.xpLevel.levelstart;
            xprecord.statpoint = 0;
            xprecord.skillpoint = 0;
            // Reset health if needed before removing points
            if (xprecord.Might >= 1)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = player._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    player._maxHealth = 100;
                }
                else
                {
                    player._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(player) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(player))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (player._health > teahealth)
                {
                    healthdifference = player._health - teahealth;
                }
                player._health -= (float)healthdifference;
            }
            // Reset Stat Levels
            xprecord.Mentality = 0;
            xprecord.Dexterity = 0;
            xprecord.Might = 0;
            xprecord.Captaincy = 0;
            xprecord.Weaponry = 0;
            xprecord.Ninjary = 0;
            // Reset Stat Spent Points
            xprecord.MentalityP = 0;
            xprecord.DexterityP = 0;
            xprecord.MightP = 0;
            xprecord.CaptaincyP = 0;
            xprecord.WeaponryP = 0;
            xprecord.NinjaryP = 0;
            // Reset Skill Levels
            xprecord.WoodCutter = 0;
            xprecord.Smithy = 0;
            xprecord.Miner = 0;
            xprecord.Forager = 0;
            xprecord.Hunter = 0;
            xprecord.Fisher = 0;
            xprecord.Crafter = 0;
            xprecord.Framer = 0;
            xprecord.Medic = 0;
            xprecord.Scavenger = 0;
            xprecord.Electrician = 0;
            xprecord.Demolitionist = 0;
            xprecord.Tamer = 0;
            // Reset Skill Spents Points
            xprecord.WoodCutterP = 0;
            xprecord.SmithyP = 0;
            xprecord.MinerP = 0;
            xprecord.ForagerP = 0;
            xprecord.HunterP = 0;
            xprecord.FisherP = 0;
            xprecord.CrafterP = 0;
            xprecord.FramerP = 0;
            xprecord.MedicP = 0;
            xprecord.ScavengerP = 0;
            xprecord.ElectricianP = 0;
            xprecord.DemolitionistP = 0;
            xprecord.TamerP = 0;
            // Harvest Reset
            xprecord.Wood = 0;
            xprecord.Stone = 0;
            xprecord.Metal = 0;
            xprecord.Sulfur = 0;
            xprecord.Cactus = 0;
            xprecord.Berries = 0;
            xprecord.Pumpkin = 0;
            xprecord.Potato = 0;
            xprecord.Mushroom = 0;
            xprecord.Hemp = 0;
            xprecord.Seed = 0;
            // Reset calories/hydration if needed
            if (player.metabolism.calories.max > 500)
            {
                player.metabolism.calories.max = 500;
            }
            if (player.metabolism.hydration.max > 250)
            {
                player.metabolism.hydration.max = 250;
            }
            // Check/Reset Tamer permissions
            RankCheck(player, true);
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(player, config.backpacksmod.statorskill, true);
            }
            // Check/Reset Tamer permissions
            PetChecks(player, true);
            // Set LiveUI Location to Default
            xprecord.UILocation = config.defaultOptions.liveuistatslocation;
            // Update Live UI
            LiveStats(player);
            // Notify Players
            player.ChatMessage(XPLang("xpresetplayer", player.UserIDString));
            CheckElectricianEntities(player, true);
        }
        private void HarvestReset(BasePlayer player)
        {
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            xprecord.Wood = 0;
            xprecord.Stone = 0;
            xprecord.Metal = 0;
            xprecord.Sulfur = 0;
            xprecord.Cactus = 0;
            xprecord.Berries = 0;
            xprecord.Pumpkin = 0;
            xprecord.Potato = 0;
            xprecord.Mushroom = 0;
            xprecord.Hemp = 0;
            xprecord.Seed = 0;
            player.ChatMessage(XPLang("playerharvestreset", player.UserIDString));
        }
        private void SelectedPlayerReset(BasePlayer player, BasePlayer selectplayer)
        {
            if (player == null || selectplayer == null) return;
            XPRecord xprecord = GetXPRecord(selectplayer);
            if (xprecord == null) return;
            // Reset Level, Required XP & Stat/Skill Points
            xprecord.rank = 0;
            xprecord.truelevel = 0;
            xprecord.trueexperience = 0;
            xprecord.level = 0;
            xprecord.experience = 0;
            xprecord.requiredxp = config.xpLevel.levelstart;
            xprecord.statpoint = 0;
            xprecord.skillpoint = 0;
            // Reset health if needed before removing points
            if (xprecord.Might >= 1)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = selectplayer._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    selectplayer._maxHealth = 100;
                }
                else
                {
                    selectplayer._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(selectplayer) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", selectplayer, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(selectplayer))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (selectplayer._health > teahealth)
                {
                    healthdifference = selectplayer._health - teahealth;
                }
                selectplayer._health -= (float)healthdifference;
            }
            // Reset Stat Levels
            xprecord.Mentality = 0;
            xprecord.Dexterity = 0;
            xprecord.Might = 0;
            xprecord.Captaincy = 0;
            xprecord.Weaponry = 0;
            xprecord.Ninjary = 0;
            // Reset Stat Spent Points
            xprecord.MentalityP = 0;
            xprecord.DexterityP = 0;
            xprecord.MightP = 0;
            xprecord.CaptaincyP = 0;
            xprecord.WeaponryP = 0;
            xprecord.NinjaryP = 0;
            // Reset Skill Levels
            xprecord.WoodCutter = 0;
            xprecord.Smithy = 0;
            xprecord.Miner = 0;
            xprecord.Forager = 0;
            xprecord.Hunter = 0;
            xprecord.Fisher = 0;
            xprecord.Crafter = 0;
            xprecord.Framer = 0;
            xprecord.Medic = 0;
            xprecord.Scavenger = 0;
            xprecord.Electrician = 0;
            xprecord.Demolitionist = 0;
            xprecord.Tamer = 0;
            // Reset Skill Spents Points
            xprecord.WoodCutterP = 0;
            xprecord.SmithyP = 0;
            xprecord.MinerP = 0;
            xprecord.ForagerP = 0;
            xprecord.HunterP = 0;
            xprecord.FisherP = 0;
            xprecord.CrafterP = 0;
            xprecord.FramerP = 0;
            xprecord.MedicP = 0;
            xprecord.ScavengerP = 0;
            xprecord.ElectricianP = 0;
            xprecord.DemolitionistP = 0;
            xprecord.TamerP = 0;
            // Harvest Reset
            xprecord.Wood = 0;
            xprecord.Stone = 0;
            xprecord.Metal = 0;
            xprecord.Sulfur = 0;
            xprecord.Cactus = 0;
            xprecord.Berries = 0;
            xprecord.Pumpkin = 0;
            xprecord.Potato = 0;
            xprecord.Mushroom = 0;
            xprecord.Corn = 0;
            xprecord.Hemp = 0;
            xprecord.Seed = 0;
            // Reset calories/hydration if needed
            if (selectplayer.metabolism.calories.max > 500)
            {
                selectplayer.metabolism.calories.max = 500;
            }
            if (selectplayer.metabolism.hydration.max > 250)
            {
                selectplayer.metabolism.hydration.max = 250;
            }
            // Check/Reset Tamer permissions
            RankCheck(selectplayer, true);
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(selectplayer, config.backpacksmod.statorskill, true);
            }
            // Check/Reset Tamer permissions
            PetChecks(selectplayer, true);
            // Set LiveUI Location to Default
            xprecord.UILocation = config.defaultOptions.liveuistatslocation;
            // Update Live UI
            LiveStats(selectplayer, true);
            // Notify Players
            selectplayer.ChatMessage(XPLang("xpresetplayer", selectplayer.UserIDString));
            player.ChatMessage(XPLang("xpresetselectedplayer", player.UserIDString, xprecord.displayname));
            CheckElectricianEntities(selectplayer, true);
        }
        private void SelectedPlayerResetConsole(BasePlayer selectplayer)
        {
            if (selectplayer == null) return;
            XPRecord xprecord = GetXPRecord(selectplayer);
            if (xprecord == null) return;
            // Reset Level, Required XP & Stat/Skill Points
            xprecord.rank = 0;
            xprecord.truelevel = 0;
            xprecord.trueexperience = 0;
            xprecord.level = 0;
            xprecord.experience = 0;
            xprecord.requiredxp = config.xpLevel.levelstart;
            xprecord.statpoint = 0;
            xprecord.skillpoint = 0;
            // Reset health if needed before removing points
            if (xprecord.Might >= 1)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = selectplayer._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    selectplayer._maxHealth = 100;
                }
                else
                {
                    selectplayer._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(selectplayer) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", selectplayer, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(selectplayer))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (selectplayer._health > teahealth)
                {
                    healthdifference = selectplayer._health - teahealth;
                }
                selectplayer._health -= (float)healthdifference;
            }
            // Reset Stat Levels
            xprecord.Mentality = 0;
            xprecord.Dexterity = 0;
            xprecord.Might = 0;
            xprecord.Captaincy = 0;
            xprecord.Weaponry = 0;
            xprecord.Ninjary = 0;
            // Reset Stat Spent Points
            xprecord.MentalityP = 0;
            xprecord.DexterityP = 0;
            xprecord.MightP = 0;
            xprecord.CaptaincyP = 0;
            xprecord.WeaponryP = 0;
            xprecord.NinjaryP = 0;
            // Reset Skill Levels
            xprecord.WoodCutter = 0;
            xprecord.Smithy = 0;
            xprecord.Miner = 0;
            xprecord.Forager = 0;
            xprecord.Hunter = 0;
            xprecord.Fisher = 0;
            xprecord.Crafter = 0;
            xprecord.Framer = 0;
            xprecord.Medic = 0;
            xprecord.Scavenger = 0;
            xprecord.Electrician = 0;
            xprecord.Demolitionist = 0;
            xprecord.Tamer = 0;
            // Reset Skill Spents Points
            xprecord.WoodCutterP = 0;
            xprecord.SmithyP = 0;
            xprecord.MinerP = 0;
            xprecord.ForagerP = 0;
            xprecord.HunterP = 0;
            xprecord.FisherP = 0;
            xprecord.CrafterP = 0;
            xprecord.FramerP = 0;
            xprecord.MedicP = 0;
            xprecord.ScavengerP = 0;
            xprecord.ElectricianP = 0;
            xprecord.DemolitionistP = 0;
            xprecord.TamerP = 0;
            // Harvest Reset
            xprecord.Wood = 0;
            xprecord.Stone = 0;
            xprecord.Metal = 0;
            xprecord.Sulfur = 0;
            xprecord.Cactus = 0;
            xprecord.Berries = 0;
            xprecord.Pumpkin = 0;
            xprecord.Potato = 0;
            xprecord.Mushroom = 0;
            xprecord.Corn = 0;
            xprecord.Hemp = 0;
            xprecord.Seed = 0;
            // Reset calories/hydration if needed
            if (selectplayer.metabolism.calories.max > 500)
            {
                selectplayer.metabolism.calories.max = 500;
            }
            if (selectplayer.metabolism.hydration.max > 250)
            {
                selectplayer.metabolism.hydration.max = 250;
            }
            // Check/Reset Tamer permissions
            RankCheck(selectplayer, true);
            // Backpack Check
            if (Backpacks != null && config.backpacksmod.enablebackpacks)
            {
                BackPackChecks(selectplayer, config.backpacksmod.statorskill, true);
            }
            // Check/Reset Tamer permissions
            PetChecks(selectplayer, true);
            // Set LiveUI Location to Default
            xprecord.UILocation = config.defaultOptions.liveuistatslocation;
            // Update Live UI
            LiveStats(selectplayer, true);
            // Notify Players
            selectplayer.ChatMessage(XPLang("xpresetplayer", selectplayer.UserIDString));
            CheckElectricianEntities(selectplayer, true);
        }
        private void SelectedHarvestReset(BasePlayer player, BasePlayer selectplayer)
        {
            if (player == null || selectplayer == null) return;
            XPRecord xprecord = GetXPRecord(selectplayer);
            if (xprecord == null) return;
            xprecord.Wood = 0;
            xprecord.Stone = 0;
            xprecord.Metal = 0;
            xprecord.Sulfur = 0;
            xprecord.Cactus = 0;
            xprecord.Berries = 0;
            xprecord.Pumpkin = 0;
            xprecord.Potato = 0;
            xprecord.Mushroom = 0;
            xprecord.Corn = 0;
            xprecord.Hemp = 0;
            xprecord.Seed = 0;
            selectplayer.ChatMessage(XPLang("playerharvestreset", selectplayer.UserIDString));
            player.ChatMessage(XPLang("selectedplayerharvestreset", player.UserIDString, xprecord.displayname));
        }
        private void SelectedLevelReset(BasePlayer player, BasePlayer selectplayer)
        {
            if (player == null || selectplayer == null) return;
            XPRecord xprecord = GetXPRecord(selectplayer);
            if (xprecord == null) return;
            xprecord.trueexperience -= (int)xprecord.experience;
            xprecord.truelevel -= (int)xprecord.level;
            xprecord.level = 0;
            xprecord.experience = 0;
            xprecord.requiredxp = config.xpLevel.levelstart;
            selectplayer.ChatMessage(XPLang("playerlevelreset", selectplayer.UserIDString));
            player.ChatMessage(XPLang("selectedplayerlevelreset", player.UserIDString, xprecord.displayname));
            PlayerFixData(selectplayer, true);
        }
        private void SelectedRankReset(BasePlayer player, BasePlayer selectplayer)
        {
            if (player == null || selectplayer == null) return;
            XPRecord xprecord = GetXPRecord(selectplayer);
            if (xprecord == null) return;
            xprecord.rank = 0;
            xprecord.truelevel = (int)xprecord.level;
            xprecord.trueexperience = (int)xprecord.experience;
            selectplayer.ChatMessage(XPLang("playerrankreset", selectplayer.UserIDString));
            player.ChatMessage(XPLang("selectedplayerrankreset", player.UserIDString, xprecord.displayname));
            PlayerFixData(selectplayer);
        }
        private void PlayerAllRankReset(BasePlayer player)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            foreach (var p in _xperienceCache)
            {
                if (!p.Key.IsSteamId()) continue;
                var selectplayer = BasePlayer.FindByID(Convert.ToUInt64(p.Key));
                if (selectplayer != null)
                {
                    SelectedRankReset(player, selectplayer);
                    continue;
                }
                XPRecord xprecord = GetPlayerRecord(p.Key);
                xprecord.rank = 0;
                xprecord.truelevel = (int)xprecord.level;
                xprecord.trueexperience = (int)xprecord.experience;
            }
            PlayerFixDataAll(player);
            player.ChatMessage(XPLang("allplayerrankreset", player.UserIDString));
        }
        private void PlayerAllLevelReset(BasePlayer player)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            foreach (var p in _xperienceCache)
            {
                if (!p.Key.IsSteamId()) continue;
                XPRecord xprecord = GetPlayerRecord(p.Key);
                xprecord.trueexperience -= (int)xprecord.experience;
                xprecord.truelevel -= (int)xprecord.level;
                xprecord.level = 0;
                xprecord.experience = 0;
                xprecord.requiredxp = config.xpLevel.levelstart;
            }
            PlayerFixDataAll(player, true);
            player.ChatMessage(XPLang("allplayerlevelreset", player.UserIDString));
        }
        private bool IsNight()
        {
            var dateTime = TOD_Sky.Instance.Cycle.DateTime;
            return dateTime.Hour >= config.nightBonus.StartTime || dateTime.Hour <= config.nightBonus.EndTime;
        }
        private void KRBonus(BasePlayer player, string KillType, int reqkills, double bonus, int bonusend, bool enablemultibonus, string multibonustype)
        {
            var playerid = player.userID.ToString();
            //XPRecord xprecord = GetXPRecord(player);
            int KillAmount = reqkills;
            int BonusEnd = bonusend;
            int GetKillRecord = KillRecords.Call<int>("GetKillRecord", playerid, KillType.ToLower());
            if (GetKillRecord == KillAmount)
            {
                GainExp(player, bonus);
                player.ChatMessage(XPLang("bonus", player.UserIDString, bonus, KillAmount, KillType));
            }
            else
            {
                if (enablemultibonus)
                {
                    int MultipleKA = KillAmount;
                    double Multibonus = bonus;
                    for (int k = 0; k < BonusEnd; ++k)
                    {
                        MultipleKA += reqkills + k / BonusEnd;
                        if (multibonustype == "increase")
                        {
                            Multibonus += bonus + k / BonusEnd;
                        }
                        if (MultipleKA >= BonusEnd) return;
                        if (GetKillRecord == MultipleKA)
                        {
                            GainExp(player, Multibonus);
                            player.ChatMessage(XPLang("bonus", player.UserIDString, Multibonus, MultipleKA, KillType));
                        }
                    }
                }
            }
        }
        private void XPTeams(BasePlayer player, double e, string type)
        {
            if (player == null || !player.userID.Get().IsSteamId() || player.Team == null || player.Team.members.Count <= 1) return;
            if (config.defaultOptions.debugmode)
            {
                Puts($"## XPTeams ##" +
                    $"\n Incoming XP: {(int)Math.Ceiling(e)}" +
                    $"\n Team % Setting: {config.xpTeams.teamxpgainamount * 100}%" +
                    $"\n Amount to give: {(int)Math.Ceiling(e * config.xpTeams.teamxpgainamount)}");
            }

            foreach (var team in player.Team.members)
            {
                if (team == player.userID) continue;
                BasePlayer teammember = RelationshipManager.FindByID(team);
                if (teammember == null || !teammember.IsConnected || Vector3.Distance(player.ServerPosition, teammember.ServerPosition) >= config.xpTeams.teamdistance) continue;
                XPRecord xprecord = GetXPRecord(teammember);
                if (type == "addxp")
                {
                    double addxp = e * config.xpTeams.teamxpgainamount;
                    if (addxp < 1)
                    {
                        addxp = 1;
                    }
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"\n {player.displayName} has recieved {(int)Math.Ceiling(addxp)} XP");
                    }

                    GainExpBasic(teammember, addxp);
                    //xprecord.experience = (int)xprecord.experience + addxp;
                    //if (xprecord.experience >= xprecord.requiredxp)
                    //{
                    //    LvlUp(teammember, 0, 0);
                    //}
                    //LiveStats(teammember, true);
                }
                if (type == "takexp")
                {
                    if (e < 1)
                    {
                        e = 1;
                    }
                    double takexp = e * config.xpTeams.teamxplossamount;
                    if (takexp < 1)
                    {
                        takexp = 1;
                    }
                    double newxp = xprecord.experience - takexp;
                    double nextlevel = xprecord.requiredxp;
                    // Make sure XP does not go negative
                    if (newxp <= 0)
                    {
                        newxp = 0;
                    }
                    xprecord.experience = (int)newxp;
                    if (nextlevel == config.xpLevel.levelstart) return;
                    double prevlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
                    if (xprecord.experience < prevlevel)
                    {
                        LvlDown(teammember);
                    }
                    LiveStats(teammember, true);
                }
            }
        }
        private void HarvestRecord(BasePlayer player, string item, int amount)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            switch (item)
            {
                case "wood":
                    xprecord.Wood += amount;
                    break;
                case "stone":
                    xprecord.Stone += amount;
                    break;
                case "metal":
                    xprecord.Metal += amount;
                    break;
                case "sulfur":
                    xprecord.Sulfur += amount;
                    break;
                case "cactus":
                    xprecord.Cactus += amount;
                    break;
                case "berries":
                    xprecord.Berries += amount;
                    break;
                case "pumpkin":
                    xprecord.Pumpkin += amount;
                    break;
                case "potato":
                    xprecord.Potato += amount;
                    break;
                case "corn":
                    xprecord.Corn += amount;
                    break;
                case "mushroom":
                    xprecord.Mushroom += amount;
                    break;
                case "hemp":
                    xprecord.Hemp += amount;
                    break;
                case "seed":
                    xprecord.Seed += amount;
                    break;
            }

        }
        #endregion

        #region Personal Animal
        public const string Tame = "cannpc";
        public const string PTameChicken = "personalanimal.chicken";
        public const string PTameBoar = "personalanimal.boar";
        public const string PTameStag = "personalanimal.stag";
        public const string PTameWolf = "personalanimal.wolf";
        public const string PTameBear = "personalanimal.bear";
        public const string PTamePolarBear = "personalanimal.polarbear";
        private void PetChecks(BasePlayer player, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            var skilllevel = xprecord.Tamer;
            if (!config.tamer.enabletame) return;
            if (reset)
            {
                if (PersonalAnimal != null)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameChicken);
                    permission.RevokeUserPermission(player.UserIDString, PTameBoar);
                    permission.RevokeUserPermission(player.UserIDString, PTameStag);
                    permission.RevokeUserPermission(player.UserIDString, PTameWolf);
                    permission.RevokeUserPermission(player.UserIDString, PTameBear);
                    permission.RevokeUserPermission(player.UserIDString, PTamePolarBear);
                }
                return;
            }
            if (PersonalAnimal != null)
            {
                if (skilllevel >= config.tamer.chickenlevel && config.tamer.tamechicken && !permission.UserHasPermission(player.UserIDString, PTameChicken))
                {
                    permission.GrantUserPermission(player.UserIDString, PTameChicken, PersonalAnimal);
                }
                if (skilllevel < config.tamer.chickenlevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameChicken);
                }
                if (skilllevel >= config.tamer.boarlevel && config.tamer.tameboar && !permission.UserHasPermission(player.UserIDString, PTameBoar))
                {
                    permission.GrantUserPermission(player.UserIDString, PTameBoar, PersonalAnimal);
                }
                if (skilllevel < config.tamer.boarlevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameBoar);
                }
                if (skilllevel >= config.tamer.staglevel && config.tamer.tamestag && !permission.UserHasPermission(player.UserIDString, PTameStag))
                {
                    permission.GrantUserPermission(player.UserIDString, PTameStag, PersonalAnimal);
                }
                if (skilllevel < config.tamer.staglevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameStag);
                }
                if (skilllevel >= config.tamer.wolflevel && config.tamer.tamewolf && !permission.UserHasPermission(player.UserIDString, PTameWolf))
                {
                    permission.GrantUserPermission(player.UserIDString, PTameWolf, PersonalAnimal);
                }
                if (skilllevel < config.tamer.wolflevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameWolf);
                }
                if (skilllevel >= config.tamer.bearlevel && config.tamer.tamebear && !permission.UserHasPermission(player.UserIDString, PTameBear))
                {
                    permission.GrantUserPermission(player.UserIDString, PTameBear, PersonalAnimal);
                }
                if (skilllevel < config.tamer.bearlevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTameBear);
                }
                if (skilllevel >= config.tamer.polarbearlevel && config.tamer.tamebear && !permission.UserHasPermission(player.UserIDString, PTamePolarBear))
                {
                    permission.GrantUserPermission(player.UserIDString, PTamePolarBear, PersonalAnimal);
                }
                if (skilllevel < config.tamer.polarbearlevel)
                {
                    permission.RevokeUserPermission(player.UserIDString, PTamePolarBear);
                }
            }
        }
        #endregion

        #region Backpacks
        private void BackPackChecks(BasePlayer player, string type = null, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId() || !config.backpacksmod.enablebackpacks) return;
            XPRecord xprecord = GetXPRecord(player);
            // Reset and remove backpack permissions
            if (reset)
            {
                if (permission.UserHasPermission(player.UserIDString, "backpacks.use")) permission.RevokeUserPermission(player.UserIDString, "backpacks.use");
                if (permission.UserHasPermission(player.UserIDString, "backpacks.gui")) permission.RevokeUserPermission(player.UserIDString, "backpacks.gui");
                foreach (var removeoptions in config.backpacksmod.BackPackSlots)
                {
                    if (permission.UserHasPermission(player.UserIDString, $"backpacks.size.{removeoptions.Value.slots}")) permission.RevokeUserPermission(player.UserIDString, $"backpacks.size.{removeoptions.Value.slots}");
                }
                player.ChatMessage(XPLang("backpackrevoke", player.UserIDString));
                return;
            }
            // Assign / Revoke Permissions based on skill and level
            if (type == null) return;
            string statorskill = config.backpacksmod.statorskill;
            int skilllevel = 0;
            switch (statorskill)
            {
                case "mentality":
                    skilllevel = xprecord.Mentality;
                    break;
                case "dexterity":
                    skilllevel = xprecord.Dexterity;
                    break;
                case "might":
                    skilllevel = xprecord.Might;
                    break;
                case "captaincy":
                    skilllevel = xprecord.Captaincy;
                    break;
                case "weaponry":
                    skilllevel = xprecord.Weaponry;
                    break;
                case "ninjary":
                    skilllevel = xprecord.Ninjary;
                    break;
                case "woodCutter":
                    skilllevel = xprecord.WoodCutter;
                    break;
                case "smithy":
                    skilllevel = xprecord.Smithy;
                    break;
                case "miner":
                    skilllevel = xprecord.Miner;
                    break;
                case "forager":
                    skilllevel = xprecord.Forager;
                    break;
                case "hunter":
                    skilllevel = xprecord.Hunter;
                    break;
                case "fisher":
                    skilllevel = xprecord.Fisher;
                    break;
                case "crafter":
                    skilllevel = xprecord.Crafter;
                    break;
                case "framer":
                    skilllevel = xprecord.Framer;
                    break;
                case "medic":
                    skilllevel = xprecord.Medic;
                    break;
                case "scavenger":
                    skilllevel = xprecord.Scavenger;
                    break;
                case "electrician":
                    skilllevel = xprecord.Electrician;
                    break;
                case "demolitionist":
                    skilllevel = xprecord.Demolitionist;
                    break;
            }
            if (statorskill.ToLower() == type.ToLower())
            {
                var backpacklist = config.backpacksmod.BackPackSlots;
                if (backpacklist == null) return;
                foreach (var options in backpacklist)
                {
                    // Given permission equal to level
                    if (skilllevel == options.Value.level && !permission.UserHasPermission(player.UserIDString, $"backpacks.size.{options.Value.slots}"))
                    {
                        if (!permission.UserHasPermission(player.UserIDString, "backpacks.use")) permission.GrantUserPermission(player.UserIDString, "backpacks.use", Backpacks);
                        if (!permission.UserHasPermission(player.UserIDString, "backpacks.gui")) permission.GrantUserPermission(player.UserIDString, "backpacks.gui", Backpacks);
                        permission.GrantUserPermission(player.UserIDString, $"backpacks.size.{options.Value.slots}", Backpacks);
                        player.ChatMessage(XPLang("backpackgrant", player.UserIDString, options.Value.slots));
                    }
                    // Remove permission higher than level
                    if (skilllevel < options.Value.level && permission.UserHasPermission(player.UserIDString, $"backpacks.size.{options.Value.slots}"))
                    {
                        permission.RevokeUserPermission(player.UserIDString, $"backpacks.size.{options.Value.slots}");
                        player.ChatMessage(XPLang("backpackgrant", player.UserIDString, options.Value.slots));
                    }
                }
            }
        }
        #endregion

        #region Kills/Deaths/Loot
        private string GetScientistType(string scientist)
        {
            string type = "scientist";
            switch (scientist)
            {
                case "scientistnpc_cargo":
                    type = "sc_cargo";
                    break;
                case "scientistnpc_heavy":
                    type = "sc_heavy";
                    break;
                case "scientistnpc_junkpile_pistol":
                    type = "sc_junkpile";
                    break;
                case "scientistnpc_oilrig":
                    type = "sc_oilrig";
                    break;
                case "scientistnpc_patrol":
                    type = "sc_patrol";
                    break;
                case "scientistnpc_peacekeeper":
                    type = "sc_peacekeeper";
                    break;
                case "scientistnpc_roam":
                    type = "sc_roam";
                    break;
                case "scientistnpc_full_any":
                    type = "sc_full";
                    break;
            }
            return type;
        }
        private string GetLootType(string loot)
        {
            if (loot == null) loot = "lootcontainer";
            string type = "lootcontainer";
            switch (loot)
            {
                case "loot_barrel_1":
                case "lootbarrel-1":
                case "loot_barrel_2":
                case "loot-barrel-2":
                    type = "lootbarrel";
                    break;
                case "oil_barrel":
                    type = "oilbarrel";
                    break;
                case "vehicle_parts":
                    type = "vehicleparts";
                    break;
                case "crate_tools":
                    type = "toolcrate";
                    break;
                case "crate_food_1":
                case "crate_food_2":
                case "crate_normal_2_food":
                case "wagon_crate_normal_2_food":
                    type = "foodcrate";
                    break;
                case "wagon_crate_normal_2_medical":
                case "crate_normal_2_medical":
                case "crate_medical":
                    type = "medicalcrate";
                    break;
                case "crate_basic":
                case "crate_ammunition":
                case "crate_normal":
                case "crate_mine":
                case "crate_fuel":
                case "crate_normal_2":
                case "wagon_crate_normal":
                case "wagon_crate_normal_2":
                    type = "normalcrate";
                    break;
                case "codelockedhackablecrate":
                case "codelockedhackablecrate_oilrig":
                    type = "hackablelockedcrate";
                    break;
                case "crate_elite":
                    type = "elitecrate";
                    break;
                case "bradley_crate":
                case "heli_crate":
                    type = "lockedbyentcrate";
                    break;
                case "crate_underwater_basic":
                case "crate_underwater_advanced":
                    type = "freeablelootcontainer";
                    break;
                case "giftbox_loot":
                    type = "gift";
                    break;
            }
            return type;
        }
        private string GetDwellerType(string dweller)
        {
            string type = "dweller";
            switch (dweller)
            {
                case "npc_tunneldweller":
                    type = "tunneldweller";
                    break;
                case "npc_underwaterdweller":
                    type = "underwaterdweller";
                    break;
            }
            return type;
        }
        private void OnLootSpawn(LootContainer container)
        {
            if (container != null && _lootCache.ContainsKey(container.net.ID.Value))
            {
                _lootCache[container.net.ID.Value].id.Clear();
            }
        }
        private void OnEntityDeath(BaseCombatEntity entity, HitInfo hitInfo)
        {
            // Check for null
            if (entity == null || hitInfo == null || hitInfo.Initiator == null) return;
            double addxp = 0;
            // Turret Kills
            if (hitInfo.Initiator is AutoTurret && config.xpGain.allowturretxp)
            {
                var turret = hitInfo.Initiator as AutoTurret;
                if (turret == null || !turret.OwnerID.IsSteamId()) return;
                var turretowner = FindPlayer(turret.OwnerID.ToString());
                if (turretowner == null) return;
                GainExp(turretowner, config.xpGain.turretxp);
                return;
            }
            // Count Player Suicide Separately If Enabled
            if (entity == hitInfo.Initiator)
            {
                if (entity is BasePlayer && config.xpReducer.suicidereduce)
                {
                    var suicider = entity as BasePlayer;
                    if (suicider == null || !suicider.userID.Get().IsSteamId()) return;
                    if (CheckPlayerLocation(suicider, "noxploss")) return;
                    var r = GetXPRecord(suicider);
                    var reducexp = Math.Round(r.level * config.xpReducer.suicidereduceamount);
                    LoseExp(suicider, reducexp);
                    suicider.ChatMessage(XPLang("suicide", suicider.UserIDString, reducexp));
                    LiveStats(suicider, true);
                }
                return;
            }
            // Get Killer Info
            var attacker = hitInfo.Initiator as BasePlayer;
            if (attacker == null || !attacker.userID.Get().IsSteamId()) return;
            // Detect Team Member Kill
            if (attacker.Team != null && attacker.Team.members.Count > 1 && entity is BasePlayer)
            {
                var victim = entity as BasePlayer;
                if (victim != null)
                {
                    foreach (var teammember in attacker.Team.members)
                    {
                        if (teammember == attacker.userID) continue;
                        BasePlayer findteammember = RelationshipManager.FindByID(teammember);
                        if (findteammember == null) continue;
                        if (victim == findteammember) return;
                    }
                }
            }
            // Detect Kill Type
            string KillType = entity.ShortPrefabName.ToLower();
            string droptype = "kill";
            if (KillType.Contains("scientistnpc"))
            {
                KillType = GetScientistType(KillType);
            }
            if (KillType.Contains("dweller"))
            {
                KillType = GetDwellerType(KillType);
            }
            if (KillType.Contains("loot") || KillType.Contains("barrel"))
            {
                KillType = GetLootType(KillType);
                droptype = "loot";
            }
            XPRecord xprecord = GetXPRecord(attacker);
            if (xprecord == null) return;
            // Update DataCache On Kill
            switch (KillType)
            {
                case "chicken":
                    addxp = config.xpGain.chickenxp;
                    break;
                case "boar":
                    addxp = config.xpGain.boarxp;
                    break;
                case "stag":
                    addxp = config.xpGain.stagxp;
                    break;
                case "wolf":
                case "wolf2":
                    addxp = config.xpGain.wolfxp;
                    break;
                case "bear":
                    addxp = config.xpGain.bearxp;
                    break;
                case "polarbear":
                    addxp = config.xpGain.polarbearxp;
                    break;
                case "simpleshark":
                    addxp = config.xpGain.sharkxp;
                    break;
                case "horse":
                case "ridablehorse":
                    addxp = config.xpGain.horsexp;
                    break;
                case "scientistnpc":
                case "scientist":
                    addxp = config.xpGain.scientistxp;
                    break;
                case "sc_cargo":
                    addxp = config.xpGain.sc_cargo;
                    break;
                case "sc_heavy":
                    addxp = config.xpGain.sc_heavy;
                    break;
                case "sc_patrol":
                    addxp = config.xpGain.sc_patrol;
                    break;
                case "sc_junkpile":
                    addxp = config.xpGain.sc_junkpile;
                    break;
                case "sc_oilrig":
                    addxp = config.xpGain.sc_oilrig;
                    break;
                case "sc_peacekeeper":
                    addxp = config.xpGain.sc_peacekeeper;
                    break;
                case "sc_roam":
                    addxp = config.xpGain.sc_roam;
                    break;
                case "sc_full":
                    addxp = config.xpGain.sc_full;
                    break;
                case "dweller":
                    addxp = config.xpGain.dwellerxp;
                    break;
                case "tunneldweller":
                    addxp = config.xpGain.tunneldwellerxp;
                    break;
                case "underwaterdweller":
                    addxp = config.xpGain.underwaterdwellerxp;
                    break;
                case "baseplayer":
                case "player":
                    addxp = config.xpGain.playerxp;
                    break;
                case "lootcontainer":
                    addxp = config.xpGain.lootcontainerxp;
                    break;
                case "lootbarrel":
                    addxp = config.xpGain.lootbarrel;
                    break;
                case "oilbarrel":
                    addxp = config.xpGain.oilbarrel;
                    break;
                case "basecorpse":
                    addxp = config.xpGain.animalharvestxp;
                    break;
                case "npcplayercorpse":
                    addxp = config.xpGain.corpseharvestxp;
                    break;
                case "bradleyapc":
                    addxp = config.xpGain.bradley;
                    break;
                case "patrolhelicopter":
                case "servergibs_patrolhelicopter":
                    addxp = config.xpGain.patrolhelicopter;
                    break;
                case "scarecrownpc":
                case "scarecrow":
                    addxp = config.xpGain.scarecrownpc;
                    break;
                case "customscientistnpc":
                    addxp = config.xpGain.customnpc;
                    break;
                case "zombienpc":
                case "zombie":
                    addxp = config.xpGain.zombienpc;
                    break;
                case "gift":
                    addxp = config.xpGain.gifts;
                    break;
            }
            if (KillRecords != null && config.xpBonus.enablebonus)
            {
                KRBonus(attacker, KillType, config.xpBonus.requiredkills, config.xpBonus.bonusxp, config.xpBonus.endbonus, config.xpBonus.multibonus, config.xpBonus.multibonustype);
            }
            GainExp(attacker, addxp);
            if (XPerienceAddon != null)
            {
                if (entity is BuildingBlock || entity is SimpleBuildingBlock) return;
                XPerienceAddon.Call("SpecialItemChance", attacker, droptype);
            }
        }
        private void OnPlayerDeath(BasePlayer victim, HitInfo hitInfo)
        {
            // Check for null or NPC
            if (victim == null || !victim.userID.Get().IsSteamId()) return;
            BaseEntity attacker = hitInfo?.Initiator;
            if (attacker == null) return;
            // If Suicide Ingnore Death
            if (attacker == victim) return;
            // Update Player Data On deaths if enabled
            if (config.xpReducer.deathreduce)
            {
                if (CheckPlayerLocation(victim, "noxploss")) return;
                XPRecord xprecord = GetXPRecord(victim);
                //double currentlevelamount = xprecord.experience - (xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier));
                var reducexp = Math.Round(xprecord.level * config.xpReducer.deathreduceamount);
                LoseExp(victim, reducexp);
                victim.ChatMessage(XPLang("death", victim.UserIDString, reducexp));
                LiveStats(victim, true);
            }
        }
        private void OnLootEntity(BasePlayer player, LootContainer lootcontainer)
        {
            if (player == null || !player.userID.Get().IsSteamId() || !lootcontainer.IsValid()) return;
            if (MonumentOwner != null)
            {
                bool getmonumentowner = CheckMonumentOwner(player);
                if (getmonumentowner) return;
            }
            //var loot = lootcontainer.GetType().Name.ToLower();
            var loot = lootcontainer.ShortPrefabName.ToLower();
            loot = GetLootType(loot);
            var lootid = lootcontainer.net.ID.Value;
            if (loot == null) return;
            double addxp = 0;
            bool increaseloot = false;
            if (_lootCache.ContainsKey(lootid) && _lootCache[lootid].id.Contains(player.UserIDString))
            {
                return;
            }
            switch (loot)
            {
                case "lootcontainer":
                    addxp = config.xpGain.lootcontainerxp;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "vehicleparts":
                    addxp = config.xpGain.vehicleparts;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "freeablelootcontainer":
                    addxp = config.xpGain.underwaterlootcontainerxp;
                    if (config.scavenger.uncrates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "lockedbyentcrate":
                    addxp = config.xpGain.lockedcratexp;
                    if (config.scavenger.lockedcrates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "hackablelockedcrate":
                    addxp = config.xpGain.hackablecratexp;
                    if (config.scavenger.hackcrates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "toolcrate":
                    addxp = config.xpGain.toolcrate;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "normalcrate":
                    addxp = config.xpGain.normalcrate;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "elitecrate":
                    addxp = config.xpGain.elitecrate;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
                case "foodcrate":
                    addxp = config.xpGain.foodcrate;
                    if (config.scavenger.crates)
                    {
                        increaseloot = true;
                    }
                    break;
            }
            GainExp(player, addxp);
            //Custom Items
            if (config.scavenger.usecustomscavlist)
            {
                RandomScavengerItem(player);
            }
            // Increase Loot
            if (increaseloot && config.scavenger.scavmultiplier != 0)
            {
                if (!_lootCache.ContainsKey(lootid))
                {
                    IncreaseLootContainers(player, lootcontainer);
                }
            }
            // Add player and container ID to LootData
            AddLootData(player, lootcontainer);
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("SpecialItemChance", player, "loot");
            }
        }
        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
        {
            if (entity == null || hitInfo == null || hitInfo.Initiator == null) return;
            if (entity.GetType().Name.ToLower().Contains("corpse")) return;
            // Ignore if self damage
            if (entity == hitInfo.Initiator) return;
            double blockamount = 0.0;
            bool didblock = false;
            bool diddodge = false;
            var player = entity as BasePlayer;
            if (player != null && player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disablestatsandskills")) return;
                XPRecord vxprecord = GetXPRecord(player);
                if (vxprecord != null)
                {
                    // Raidable Bases Check
                    if (RaidableBases != null && config.raidablebasesmod.disableabilities && vxprecord.raidablebase)
                    {
                        return;
                    }
                    // If UI open then close
                    ClearPlayerUIs(player, true);
                    // Dexterity Armor Reduction
                    if (vxprecord.Dexterity > 0 && player._health > 100)
                    {
                        double defaultdmg = hitInfo.damageTypes.Total();
                        double armordmgreduction = vxprecord.Dexterity * config.dexterity.reducearmordmg;
                        // Ranks
                        if (config.xpLevelRanks.rankskillboost && !vxprecord.DisableRank && config.Rankboostssettings.armor)
                        {
                            armordmgreduction += vxprecord.rank * config.xpLevelRanks.rankstatboostamount;
                        }
                        hitInfo.damageTypes?.ScaleAll(1 - (float)armordmgreduction);
                        double damgdiff = defaultdmg - hitInfo.damageTypes.Total();
                        if (config.defaultOptions.disablearmorchat)
                        {
                            player.ChatMessage(XPLang("victimarmordmg", player.UserIDString, Math.Round(damgdiff, 2)));
                        }
                    }
                    // Random chance to Block or Dodge
                    double dodgechance = (vxprecord.Dexterity * config.dexterity.dodgechance) * 100;
                    double blockchance = (vxprecord.Dexterity * config.dexterity.blockchance) * 100;
                    int fifty = RandomNumber.Between(0, 101);
                    int roll = RandomNumber.Between(0, 110);
                    // Block
                    if (fifty < 50)
                    {
                        if (vxprecord.Dexterity > 0 && config.dexterity.blockchance != 0 && roll <= blockchance)
                        {
                            didblock = true;
                            double blockdmg = (vxprecord.Dexterity * config.dexterity.blockamount);
                            blockamount = hitInfo.damageTypes.Total() * blockdmg;
                            // Ranks
                            if (config.xpLevelRanks.rankstatboost && !vxprecord.DisableRank && config.Rankboostssettings.block)
                            {
                                blockamount += vxprecord.rank * config.xpLevelRanks.rankstatboostamount;
                            }
                            hitInfo.damageTypes?.ScaleAll(1 - (float)blockdmg);
                            // Disable Chats
                            if (!config.defaultOptions.hidechatnotifications)
                            {
                                player.ChatMessage(XPLang("victimblock", player.UserIDString, Math.Round(blockamount)));
                            }
                        }
                    }
                    // Dodge
                    if (fifty > 50)
                    {
                        if (vxprecord.Dexterity > 0 && config.dexterity.dodgechance != 0 && roll <= dodgechance)
                        {
                            diddodge = true;
                            hitInfo.damageTypes?.ScaleAll(0);
                            // Disable Chats
                            if (!config.defaultOptions.hidechatnotifications)
                            {
                                player.ChatMessage(XPLang("victimdodge", player.UserIDString));
                            }
                        }
                    }
                }
            }
            var attacker = hitInfo.Initiator as BasePlayer;
            if (attacker == null || !attacker.userID.Get().IsSteamId()) return;
            if (CheckPlayerLocation(attacker, "disablestatsandskills")) return;
            var patrolheli = entity as PatrolHelicopter;
            if (patrolheli is PatrolHelicopter)
            {
                Heli patrol;
                if (_heliCache.TryGetValue(patrolheli.net.ID.Value, out patrol))
                {
                    patrol.heli = patrolheli.net.ID.Value;
                    patrol.player = attacker.userID.Get();
                }
                else
                {
                    _heliCache.Add(patrolheli.net.ID.Value, new Heli
                    {
                        heli = patrolheli.net.ID.Value,
                        player = attacker.userID.Get()
                    });
                    _helitracker?.Destroy();
                    _helitracker = timer.Once(90f, () =>
                    {
                        _heliCache.Remove(patrolheli.net.ID.Value);
                    });
                }
            }
            var KillType = entity?.GetType().Name.ToLower();
            XPRecord xprecord = GetXPRecord(attacker);
            if (xprecord == null) return;
            if (diddodge && attacker)
            {
                if (GetPlayerCooldown(attacker.userID, "notify") != 0)
                {
                    // Disable Chats
                    if (!config.defaultOptions.hidechatnotifications)
                    {
                        attacker.ChatMessage(XPLang("attackerdodge", attacker.UserIDString));
                    }
                    _notifyCooldowns[attacker.userID] = CurrentTime + config.defaultOptions.NotifcationCooldown;
                    return;
                }
            }
            if (didblock && attacker)
            {
                if (GetPlayerCooldown(attacker.userID, "notify") != 0)
                {
                    // Disable Chats
                    if (!config.defaultOptions.hidechatnotifications)
                    {
                        attacker.ChatMessage(XPLang("attackerblock", attacker.UserIDString, Math.Round(blockamount)));
                    }
                    _notifyCooldowns[attacker.userID] = CurrentTime + config.defaultOptions.NotifcationCooldown;
                    return;
                }
            }
            // Hunter Wildlife Increase
            if (KillType == "chicken" || KillType == "boar" || KillType == "stag" || KillType == "wolf" || KillType == "bear" || KillType == "polarbear" || KillType == "horse" || KillType == "ridablehorse" || KillType == "simpleshark")
            {
                bool exluded = false;
                if (config.hunter.excludelongrangeweapons || hitInfo.Weapon.CanUseAtLongRange)
                {
                    exluded = true;
                }
                if (config.hunter.excludemedrangeweapons || hitInfo.Weapon.CanUseAtMediumRange)
                {
                    exluded = true;
                }
                if (!exluded)
                {
                    double hunterdmg = xprecord.Hunter * config.hunter.damageincrease;
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.hunterdmg)
                    {
                        hunterdmg += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
                    }
                    hitInfo.damageTypes?.ScaleAll(1 + (float)hunterdmg);
                }
            }
            // Hunter Night Wildlife Increase
            if (IsNight() && config.nightBonus.enableskillboosts)
            {
                double nightdmg = xprecord.Hunter * config.hunter.nightdmgincrease;
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.hunterndmg)
                {
                    nightdmg += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
                }
                hitInfo.damageTypes?.ScaleAll(1 + (float)nightdmg);
            }
            // Mentality PVP/NPC and Critical Chance
            if (xprecord.Mentality >= 1)
            {
                if (entity.IsNpc)
                {
                    if (entity.GetType().Name.ToLower().Contains("scientist") || entity.GetType().Name.ToLower().Contains("customscientist") || entity.GetType().Name.ToLower().Contains("dweller") || entity.GetType().Name.ToLower().Contains("scarecrow") || entity.GetType().Name.ToLower().Contains("bradleyapc"))
                    {
                        double pvpnpcbonus = xprecord.Mentality * config.mentality.damageincrease;
                        hitInfo.damageTypes?.ScaleAll(1 + (float)pvpnpcbonus);
                    }
                }
                double critchance = (xprecord.Mentality * config.mentality.criticalchance) * 100;
                if (RandomNumber.Between(0, 101) <= critchance)
                {
                    float critdmgamount = (float)config.mentality.criticaldgm;
                    hitInfo.damageTypes?.ScaleAll(1 + critdmgamount);
                    double crithit = Math.Ceiling((int)hitInfo.damageTypes.Total() * critdmgamount);
                    // UINotify
                    if (GetPlayerCooldown(attacker.userID, "notify") != 0)
                    {
                        // Disable Chats
                        if (!config.defaultOptions.hidechatnotifications)
                        {
                            attacker.ChatMessage(XPLang("crithit", attacker.UserIDString, crithit));
                        }
                        _notifyCooldowns[attacker.userID] = CurrentTime + config.defaultOptions.NotifcationCooldown;
                    }
                }
            }
            // Might Melee Increase
            if (xprecord.Might > 0 && hitInfo?.Weapon != null)
            {
                if (hitInfo.Weapon.ShortPrefabName.Contains("knife") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("hatchet") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("pitchfork") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("sword") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("spear") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("cleaver") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("club") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("mace") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("pickaxe") ||
                    hitInfo.Weapon.ShortPrefabName.Contains("machete"))
                {
                    double meleeincrease = xprecord.Might * config.might.meleedmg;
                    // Ranks
                    if (config.xpLevelRanks.rankstatboost && !xprecord.DisableRank && config.Rankboostssettings.meleedmg)
                    {
                        meleeincrease += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
                    }
                    hitInfo.damageTypes?.ScaleAll(1 + (float)meleeincrease);
                }
            }
            // Ninjary Increase
            if (xprecord.Ninjary > 0 && hitInfo?.Weapon != null)
            {
                if (hitInfo.Weapon.ShortPrefabName.Contains("knife"))
                {
                    double Ninjaryincrease = xprecord.Ninjary * config.ninjary.knifeincrease;
                    hitInfo.damageTypes?.ScaleAll(1 + (float)Ninjaryincrease);
                }
                else if (hitInfo.Weapon.ShortPrefabName.Contains("sword"))
                {
                    double Ninjaryincrease = xprecord.Ninjary * config.ninjary.swordincrease;
                    hitInfo.damageTypes?.ScaleAll(1 + (float)Ninjaryincrease);
                }
            }
            // Hunter Bow Increase
            if (xprecord.Hunter > 0 && hitInfo?.Weapon != null)
            {
                if (hitInfo.Weapon.ShortPrefabName.Contains("bow"))
                {
                    double bowincrease = xprecord.Hunter * config.hunter.bowdmgincrease;
                    hitInfo.damageTypes?.ScaleAll(1 + (float)bowincrease);
                }
            }
        }
        private void OnContainerDropItems(ItemContainer lootcontainer)
        {
            if (lootcontainer == null) return;
            var lootentity = lootcontainer.entityOwner as LootContainer;
            if (lootentity == null || lootentity.IsDestroyed) return;
            var player = lootentity.lastAttacker as BasePlayer;
            if (player == null) return;
            // Custom Item Drops
            if (config.scavenger.usecustomscavlist)
            {
                RandomScavengerItem(player);
            }
            // Increase Container Loot
            if (!config.scavenger.drops && config.scavenger.scavmultiplier == 0) return;
            IncreaseLootContainerDrops(lootcontainer);
        }
        private void CanLootEntity(BasePlayer player, LootableCorpse corpse)
        {
            if (player == null || corpse == null) return;
            if (config.scavenger.scientists && corpse.ShortPrefabName.Contains("scientist"))
            {
                if (!_corpseCache.ContainsKey(corpse.net.ID.Value))
                {
                    IncreaseLootCorpse(player, corpse);
                }
                AddCorpseData(player, corpse);
            }
        }
        private void OnEntityKill(BaseNetworkable entity)
        {
            if (entity == null) return;
            var patrol = entity as PatrolHelicopter;
            if (patrol is PatrolHelicopter)
            {
                Heli patrolheli;
                if (_heliCache.TryGetValue(patrol.net.ID.Value, out patrolheli))
                {
                    var player = FindPlayer(patrolheli.player.ToString());
                    if (player.userID.Get().IsSteamId())
                    {
                        XPRecord xprecord = GetXPRecord(player);
                        double addxp = config.xpGain.patrolhelicopter;
                        if (KillRecords != null && config.xpBonus.enablebonus)
                        {
                            KRBonus(player, "patrolhelicopter", config.xpBonus.requiredkills, config.xpBonus.bonusxp, config.xpBonus.endbonus, config.xpBonus.multibonus, config.xpBonus.multibonustype);
                        }
                        GainExp(player, addxp);
                        if (XPerienceAddon != null)
                        {
                            XPerienceAddon.Call("SpecialItemChance", player, "kill");
                        }
                    }
                    _helitracker?.Destroy();
                    _heliCache.Remove(patrol.net.ID.Value);
                }
            }
            // Destroy Dash Panel UI when Vehicle Destroyed while mounted
            DashPanelTimer?.Destroy();
            // Boat
            Boat defaultboat;
            var boat = entity as BaseBoat;
            if (boat.IsValid())
            {
                if (_boatCache.TryGetValue(boat.net.ID.Value, out defaultboat))
                {
                    boat?.DismountAllPlayers();
                    var captain = FindPlayer(defaultboat.player.ToString());
                    if (captain != null)
                    {
                        DashPanelTimer?.Destroy();
                        DestroyUi(captain, XPerienceLiveDashPanel);
                    }
                    _boatCache.Remove(entity.net.ID.Value);
                }
            }
            // Vehicle
            Vehicle vehicle;
            var car = entity as ModularCar;
            if (car.IsValid())
            {
                if (_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
                {
                    car?.DismountAllPlayers();
                    var driver = FindPlayer(vehicle.player.ToString());
                    if (driver != null)
                    {
                        DashPanelTimer?.Destroy();
                        DestroyUi(driver, XPerienceLiveDashPanel);
                    }
                    _vehicleCache.Remove(car.net.ID.Value);
                }
            }
            // Mini Copter
            MiniCopterP minicopter;
            var mini = entity as Minicopter;
            if (mini.IsValid())
            {
                if (_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
                {
                    mini?.DismountAllPlayers();
                    var pilot = FindPlayer(minicopter.player.ToString());
                    if (pilot != null)
                    {
                        DashPanelTimer?.Destroy();
                        DestroyUi(pilot, XPerienceLiveDashPanel);
                    }
                    _minicopterCache.Remove(entity.net.ID.Value);
                }
            }
        }
        private void OnHelicopterKilled(CH47HelicopterAIController heli)
        {
            if (heli == null || heli.lastAttacker == null) return;
            var player = heli.lastAttacker as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return;
            GainExp(player, config.xpGain.patrolhelicopter);
        }
        #endregion

        #region Ninjary
        private object CanHelicopterTarget(PatrolHelicopterAI heli, BasePlayer player)
        {
            if (player == null || heli == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.patrolstealth == 0) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.patrolstealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        return false;
                    }
                }
            }
            return null;
        }
        private object CanBradleyApcTarget(BradleyAPC apc, BaseEntity entity)
        {
            if (entity == null || apc == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.bradleystealth == 0) return null;
            var player = entity as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.bradleystealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        return false;
                    }
                }
            }
            return null;
        }
        private object CanNpcAttack(BaseNpc npc, BaseEntity entity)
        {
            if (entity == null || npc == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.npcstealth == 0) return null;
            var player = entity as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.npcstealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        return false;
                    }
                }
            }
            return null;
        }
        private object OnHelicopterTarget(HelicopterTurret turret, BaseCombatEntity entity)
        {
            if (entity == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.ch47stealth == 0) return null;
            var player = entity as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.ch47stealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        return true;
                    }
                }
            }
            return null;
        }
        private object OnNpcTarget(BaseEntity npc, BaseEntity entity)
        {
            if (entity == null || npc == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.npcstealth == 0) return null;
            var player = entity as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.npcstealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        return true;
                    }
                }
            }
            return null;
        }
        private object OnNpcTargetSense(BaseEntity owner, BaseEntity entity, AIBrainSenses brainSenses)
        {
            if (entity == null || owner == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.npcstealth == 0) return null;
            var player = entity as BasePlayer;
            //var player = brainSenses.playerOwner;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.npcstealth * 100;
                    if ((Random.Range(0, 100) <= evadechance) == true)
                    {
                        return true;
                    }
                }
            }
            return null;
        }
        private object OnTurretTarget(AutoTurret turret, BaseCombatEntity entity)
        {
            if (entity == null) return null;
            if (config.ninjary.maxlvl == 0 || config.ninjary.turretstealth == 0) return null;
            var player = entity as BasePlayer;
            if (player == null || !player.userID.Get().IsSteamId()) return null;
            if (player.userID.Get().IsSteamId())
            {
                if (CheckPlayerLocation(player, "disableabilities")) return null;
                XPRecord xprecord = GetXPRecord(player);
                if (xprecord.Ninjary > 0 && config.ninjary.maxlvl > 0)
                {
                    double evadechance = config.ninjary.turretstealth * 100;
                    if ((Random.Range(0, 101) <= evadechance) == true)
                    {
                        turret.targetVisible = false;
                        return true;
                    }
                }
            }
            return null;
        }
        #endregion

        #region Demolitionist
        private void OnExplosiveThrown(BasePlayer player, BaseEntity entity, ThrownWeapon item)
        {
            if (player == null || entity == null || item == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Demolitionist < 1) return;
            TimedExplosive timedExplosive = entity as TimedExplosive;
            if (timedExplosive == null) return;
            float defaultradius = 0;
            double radius = 0;
            float defaultdamage = 0;
            double amount = 0;
            float newdamage = 0;
            // Explosive Radius
            if (config.demolitionist.explosiveradius != 0)
            {
                defaultradius = timedExplosive.explosionRadius;
                radius = (xprecord.Demolitionist * config.demolitionist.explosiveradius) * timedExplosive.explosionRadius;
                timedExplosive.explosionRadius += (float)radius;
            }
            // Explosive Damage
            if (config.demolitionist.explosivedamage != 0)
            {
                foreach (DamageTypeEntry damageType in timedExplosive.damageTypes)
                {
                    defaultdamage = damageType.amount;
                    amount = (xprecord.Demolitionist * config.demolitionist.explosivedamage) * damageType.amount;
                    damageType.amount += (float)amount;
                    newdamage = damageType.amount;
                }
            }
            if (config.defaultOptions.debugmode)
            {
                double dudchance = config.demolitionist.explosivedudreduction * 100;
                Puts($"##  Demolitionist Debug ## \n" +
                    $"Player: {player.displayName} \n" +
                    $"Demolitionist Level: {xprecord.Demolitionist} \n" +
                    $"Explosive Type: {timedExplosive.ShortPrefabName} \n" +
                    $"Default Damage: {defaultdamage} \n" +
                    $"Damage Increase: {amount} \n" +
                    $"New Total Damage: {newdamage} \n" +
                    $"Default Radius: {defaultradius} \n" +
                    $"Radius Increase: {radius} \n" +
                    $"New Radius: {timedExplosive.explosionRadius} \n" +
                    $"Dud Chance Reduction: {dudchance * xprecord.Demolitionist}% \n" +
                    "");
            }
        }
        private object OnExplosiveDud(DudTimedExplosive explosive)
        {
            if (explosive == null || explosive.GetParentEntity() == null || !explosive.GetParentEntity().OwnerID.IsSteamId()) return null;
            if (config.defaultOptions.debugmode)
            {
                Puts($"##  Demolitionist Debug ## \n" +
                    $"Explosive / Owner null check pass..\n");
            }
            var player = FindPlayer(explosive.GetParentEntity().OwnerID.ToString());
            if (player == null) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Demolitionist < 1) return null;
            if (config.defaultOptions.debugmode)
            {
                Puts($"Player and Level Found... \n");
            }
            double dudchance = (config.demolitionist.explosivedudreduction * xprecord.Demolitionist) * 100;
            if (dudchance > 100)
            {
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Dud Chance excedes 100%, forcing 100% \n");
                }
                dudchance = 100;
            }
            if (config.defaultOptions.debugmode)
            {
                Puts($"Explosive Trying to Dud... \n" +
                    $"Dud Chance Reduction: {dudchance}% \n" +
                    "Applying Dud Reduction Chance...");
            }
            if ((Random.Range(0, 101) <= dudchance) == true)
            {
                if (config.defaultOptions.debugmode)
                {
                    Puts("Dud Reduction Chance Success... \n" +
                        "Charge will Explode...");
                }
                return false;
            }
            if (config.defaultOptions.debugmode)
            {
                Puts("Dud Reduction Chance Failed... \n" +
                    "Charge will not explode...");
            }
            return null;
        }
        #endregion

        #region Missions
        private void OnMissionSucceeded(BaseMission mission, BasePlayer assignee)
        {
            // Check for null or NPC
            if (assignee == null || !assignee.userID.Get().IsSteamId()) return;
            if (mission == null) return;
            // Give XP
            double addxp = config.xpMissions.missionsucceededxp;
            GainExp(assignee, addxp);
            if (XPerienceAddon != null)
            {
                XPerienceAddon.Call("SpecialItemChance", assignee, "mission");
            }
        }
        private void OnMissionFailed(BaseMission mission, BasePlayer assignee)
        {
            if (!config.xpMissions.missionfailed) return;
            // Check for null or NPC
            if (assignee == null || !assignee.userID.Get().IsSteamId()) return;
            if (mission == null) return;
            // Take XP
            double reducexp = config.xpMissions.missionfailedxp;
            LoseExp(assignee, reducexp);
        }
        #endregion

        #region Crafting/Building
        private int DetermineIngredientAmount(int item, int amount, BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            int skilllevel = xprecord.Crafter;
            double craftcost = (config.crafter.craftcost * skilllevel) * amount;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.craftercost)
            {
                craftcost += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
            }
            double newamount = Math.Round(amount - craftcost);
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * newamount;
                newamount = Math.Round(newamount - captaincyboost);
            }
            if (((config.crafter.craftcost * skilllevel) * 100) > 45 && (item == -1938052175 || item == -1581843485))
            {
                craftcost = 0.45 * amount;
                newamount = Math.Round(amount - craftcost);
            }
            if (newamount < 1)
            {
                newamount = 1;
            }
            return (int)newamount;
        }
        public void CollectIngredient(int item, int amount, List<Item> collect, ItemCrafter itemCrafter, BasePlayer player)
        {
            var newamount = DetermineIngredientAmount(item, amount, player);
            foreach (ItemContainer container in itemCrafter.containers)
            {
                amount -= container.Take(collect, item, (int)newamount);
                if (amount < 1)
                {
                    amount = 1;
                }
            }
        }
        bool? OnIngredientsCollect(ItemCrafter itemCrafter, ItemBlueprint blueprint, ItemCraftTask task, int amount, BasePlayer player)
        {
            if (ItemRetriever != null) return null;
            //if (amount == 0 || amount == null) return;
            List<Item> collect = new List<Item>();
            foreach (ItemAmount ingredient in blueprint.ingredients)
                CollectIngredient(ingredient.itemid, (int)ingredient.amount * amount, collect, itemCrafter, player);
            //task.potentialOwners = new List<ulong>();
            foreach (Item obj in collect)
            {
                obj.CollectedForCrafting(player);
                //if (!task.potentialOwners.Contains(player.userID))
                //    task.potentialOwners.Add(player.userID);
            }
            task.takenItems = collect;
            return true;
        }
        private void OnIngredientsDetermine(Dictionary<int, int> overridenIngredients, ItemBlueprint blueprint, int amount, BasePlayer player)
        {
            if (overridenIngredients.Count > 0)
            {
                Puts("Another plugin is using the OnIngredientsDetermine hook to alter crafting ingredients for Item Retriever. XPerience will override it.");
            }
            foreach (ItemAmount ingredient in blueprint.ingredients)
            {
                overridenIngredients[ingredient.itemid] = DetermineIngredientAmount(ingredient.itemid, (int)ingredient.amount * amount, player);
            }
        }
        private void OnItemCraft(ItemCraftTask task, BasePlayer player)
        {
            if (task.cancelled) return;
            // Ignore keys
            if (task.blueprint.targetItem.shortname.Contains("key") || task.blueprint.name.Contains("(Clone)")) return;
            XPRecord xprecord = GetXPRecord(player);
            int skilllevel = xprecord.Crafter;
            if (skilllevel <= 0) return;
            var craftTime = task.blueprint.time;
            var itemlevel = task.blueprint.workbenchLevelRequired;
            float workbenchinuse = player.currentCraftLevel;
            // Items with no workbench requirement or same as workbench level
            if (itemlevel == workbenchinuse || workbenchinuse == 0)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * task.blueprint.time;
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            // Items with no workbench requirement using level 1,2,3 workbench
            if (workbenchinuse == 1 && itemlevel == 0)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * (task.blueprint.time * 0.5);
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            else if ((workbenchinuse == 2 || workbenchinuse == 3) && itemlevel == 0)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * (task.blueprint.time * 0.75);
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            // Items with workbench requirement level 1
            if (workbenchinuse == 2 && itemlevel == 1)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * (task.blueprint.time * 0.5);
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            else if (workbenchinuse == 3 && itemlevel == 1)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * (task.blueprint.time * 0.75);
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            // Items with workbench requirement level 2
            if (workbenchinuse == 3 && itemlevel == 2)
            {
                double craftspeed = (config.crafter.craftspeed * skilllevel) * (task.blueprint.time * 0.5);
                craftTime = task.blueprint.time - (float)craftspeed;
            }
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * craftTime;
                craftTime = (float)craftTime - (float)captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.crafterspeed)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * craftTime;
                craftTime = (float)craftTime - (float)rankboost;
            }
            // Change Crafting Tme
            task.blueprint = UnityEngine.Object.Instantiate(task.blueprint);
            if (craftTime <= 0)
            {
                craftTime = 0;
            }
            task.blueprint.time = craftTime;
            return;
        }
        private void OnItemCraftFinished(ItemCraftTask task, Item item, ItemCrafter itemCrafter)
        {
            if (task == null || item == null || itemCrafter == null) return;
            var player = itemCrafter.owner;
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            bool allowxp = true;
            if (config.xpGain.craftingxpdelay && GetPlayerCooldown(player.userID, "craft") != 0)
            {
                allowxp = false;
            }
            if (GetPlayerCooldown(player.userID, "craft") == 0)
            {
                _craftCooldowns[player.userID] = CurrentTime + config.xpGain.craftingxpdelayseconds;
            }
            if (allowxp)
            {
                GainExp(player, config.xpGain.craftingxp);
            }
            int skilllevel = xprecord.Crafter;
            if (skilllevel <= 0 || config.crafter.conditionchance == 0) return;
            double conditionchance = (config.crafter.conditionchance * skilllevel) * 100;
            float tenpercent = (float)(item._maxCondition / (config.crafter.conditionamount * 100));
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * conditionchance;
                conditionchance += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.craftercc)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * conditionchance;
                conditionchance += rankboost;
            }
            if (Random.Range(0, 101) <= conditionchance)
            {
                if (item.GetHeldEntity() is BaseProjectile)
                {
                    BaseProjectile projectile = item?.GetHeldEntity() as BaseProjectile;
                    if (projectile == null) return;

                    item._maxCondition += tenpercent;
                    item.condition += tenpercent;
                    projectile.SendNetworkUpdateImmediate();
                    player.ChatMessage(XPLang("weaponcon", player.UserIDString, item.condition));
                }
                else
                {
                    item._maxCondition += tenpercent;
                    item.condition += tenpercent;
                    item.GetHeldEntity()?.SendNetworkUpdateImmediate();
                }
            }
        }
        private object OnItemUse(Item item)
        {
            if (item?.info.shortname != "lowgradefuel") return null;
            var shortName = item.parent?.parent?.info.shortname;
            if (shortName != "hat.candle" && shortName != "hat.miner") return null;
            var player = item.GetRootContainer()?.GetOwnerPlayer();
            XPRecord xprecord = GetXPRecord(player);
            var skilllevel = xprecord.Miner;
            double lessfueltotal = (config.miner.fuelconsumption * skilllevel) * 100;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * lessfueltotal;
                lessfueltotal += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.minerfuel)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * lessfueltotal;
                lessfueltotal += rankboost;
            }
            if (Random.Range(0, 110) <= lessfueltotal)
            {
                return 0;
            }
            return null;
        }
        private List<ItemAmount> RepairItems(BasePlayer player, Item item)
        {
            ItemDefinition info = item.info;
            ItemBlueprint component = info.GetComponent<ItemBlueprint>();
            List<ItemAmount> list = Facepunch.Pool.Get<List<ItemAmount>>();
            RepairBench.GetRepairCostList(component, list);
            return ApplyItemCostReduction(player, list, item);
        }
        private List<ItemAmount> ApplyItemCostReduction(BasePlayer player, List<ItemAmount> list, Item item)
        {
            List<ItemAmount> reducedlist = new List<ItemAmount>();
            var repairCostreduction = RepairBench.RepairCostFraction(item);
            double defaultamount;
            double newamount;
            XPRecord xprecord = GetXPRecord(player);
            int skilllevel = xprecord.Crafter;
            if (skilllevel <= 0) return null;
            foreach (ItemAmount itemAmount in list)
            {
                if (itemAmount.itemDef.category != ItemCategory.Component)
                {
                    defaultamount = Math.Ceiling(itemAmount.amount * repairCostreduction);
                    newamount = Math.Ceiling(defaultamount - (config.crafter.repaircost * xprecord.Crafter) * defaultamount);
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.crafterrc)
                    {
                        double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                        newamount -= Math.Ceiling(rankboost);
                    }
                    if (newamount < 1)
                    {
                        newamount = 1;
                    }
                    itemAmount.amount = (float)newamount;
                    reducedlist.Add(itemAmount);
                }
            }
            return reducedlist;
        }
        private bool PlayerCanRepair(BasePlayer player, List<ItemAmount> list)
        {
            foreach (ItemAmount itemAmount in list)
            {
                int amount = player.inventory.GetAmount(itemAmount.itemDef.itemid);
                if (itemAmount.amount > amount)
                {
                    return false;
                }
            }
            return true;
        }
        private void TakeItems(BasePlayer player, List<ItemAmount> list)
        {
            foreach (ItemAmount itemAmount in list)
            {
                player.inventory.Take((List<Item>)null, itemAmount.itemid, (int)itemAmount.amount);
            }
        }
        private void OnItemRepair(BasePlayer player, Item item)
        {
            if (player == null || item == null) return;
            XPRecord xprecord = GetXPRecord(player);
            int skilllevel = xprecord.Crafter;
            if (skilllevel <= 0) return;
            double repairincrease = (config.crafter.repairincrease * skilllevel) * 100;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.crafterri)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * repairincrease;
                repairincrease += rankboost;
            }
            var list = RepairItems(player, item);
            if (!PlayerCanRepair(player, list))
            {
                player.ChatMessage(XPLang("crafternotenough", player.UserIDString));
                return;
            }
            if (Random.Range(0, 101) <= repairincrease)
            {
                if (item.GetHeldEntity() is BaseProjectile)
                {
                    BaseProjectile projectile = item?.GetHeldEntity() as BaseProjectile;
                    if (projectile == null) return;
                    item.condition = item._maxCondition;
                    projectile.SendNetworkUpdateImmediate();
                    TakeItems(player, list);
                    return;
                }
                else
                {
                    item.condition = item._maxCondition;
                    item.GetHeldEntity()?.SendNetworkUpdateImmediate();
                    TakeItems(player, list);
                    return;
                }
            }
            //TakeItems(player, list);
        }
        private void OnEntityBuilt(Planner plan)
        {
            var player = plan.GetOwnerPlayer();
            if (player == null) return;
            BuildingPrivlidge isauth = player.GetBuildingPrivilege();
            if (config.xpBuilding.requirebuildingprivlidge && (isauth == null || !isauth.IsAuthed(player))) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            bool allowxp = true;
            double addxp = config.xpBuilding.twigstructure;
            if (config.xpBuilding.buildxpdelay && (GetPlayerCooldown(player.userID, "build") != 0))
            {
                _buildCooldowns[player.userID] = CurrentTime + config.xpBuilding.buildxpdelayseconds;
                allowxp = false;
            }
            _buildCooldowns[player.userID] = CurrentTime + config.xpBuilding.buildxpdelayseconds;
            if (allowxp) GainExp(player, addxp);
        }
        private void OnStructureUpgrade(BuildingBlock buildingBlock, BasePlayer player, BuildingGrade.Enum newgrade)
        {
            if (buildingBlock == null || player == null) return;
            BuildingPrivlidge isauth = player.GetBuildingPrivilege();
            if (config.xpBuilding.requirebuildingprivlidge && (isauth == null || !isauth.IsAuthed(player))) return;
            // Check for BuildingGrades mod and np BG xp
            if (BuildingGrades != null)
            {
                var processing = BuildingGrades.Call("IsProcessingBuildingBlock", buildingBlock);
                if (processing is bool && (bool)processing)
                {
                    return;
                }
            }
            // If Building Grades not installed continue
            if (config.defaultOptions.debugmode)
            {
                Puts("## Structure Upgrade Debug ## \n" +
                    "OnStructureUpgrade hook ran, pushing data to CheckStructureUpgrade... \n");
            }
            NextTick(() => CheckStructureUpgrade(buildingBlock, player, newgrade));
        }
        private void CheckStructureUpgrade(BuildingBlock buildingBlock, BasePlayer player, BuildingGrade.Enum newGrade)
        {
            if (buildingBlock == null || player == null) return;
            BuildingPrivlidge isauth = player.GetBuildingPrivilege();
            if (config.xpBuilding.requirebuildingprivlidge && (isauth == null || !isauth.IsAuthed(player))) return;
            if (config.defaultOptions.debugmode)
            {
                Puts("CheckStructureUpgrade hook recieved data successful... \n" +
                    "Checking for new grade.. \n");
            }
            // If Not Upgrade return
            if (buildingBlock.grade != newGrade) return;
            // If Upgraded continue
            double addxp = 0;
            bool allowxp = true;
            switch (buildingBlock.grade)
            {
                case BuildingGrade.Enum.Wood:
                    addxp = config.xpBuilding.woodstructure;
                    break;
                case BuildingGrade.Enum.Stone:
                    addxp = config.xpBuilding.stonestructure;
                    break;
                case BuildingGrade.Enum.Metal:
                    addxp = config.xpBuilding.metalstructure;
                    break;
                case BuildingGrade.Enum.TopTier:
                    addxp = config.xpBuilding.armoredstructure;
                    break;
            }
            if (config.defaultOptions.debugmode)
            {
                Puts($"New Grade: {buildingBlock.grade} \n" +
                    $"Building Type: {buildingBlock.ShortPrefabName} \n" +
                    $"Sending data to CanAffordUpgrade hook for material reduction... \n" +
                    $"Grade check complete... \n");
            }
            if (CanAffordUpgrade(buildingBlock, player, buildingBlock.grade))
            {
                if (config.xpBuilding.buildxpdelay && (GetPlayerCooldown(player.userID, "build") != 0))
                {
                    allowxp = false;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts("Delay check... active \n" +
                            $"No XP awarded due to delay active... \n");
                    }
                }
                if (GetPlayerCooldown(player.userID, "build") == 0)
                {
                    _buildCooldowns[player.userID] = CurrentTime + config.xpBuilding.buildxpdelayseconds;
                }
                if (allowxp)
                {
                    GainExp(player, addxp);
                    if (config.defaultOptions.debugmode)
                    {
                        Puts("Delay check... inactive \n" +
                            $"{addxp} XP sent to GainExp hook... \n");
                    }
                }
                if (config.defaultOptions.debugmode)
                {
                    Puts("Sending remaining data to RefundMaterials hook.... \n");
                }
                RefundMaterials(buildingBlock, player, buildingBlock.grade);
            }
        }
        public bool CanAffordUpgrade(BuildingBlock buildingBlock, BasePlayer player, BuildingGrade.Enum grade)
        {
            object building = Interface.CallHook("CanAffordUpgrade", player, buildingBlock, grade);
            if (building is bool)
            {
                return (bool)building;
            }
            if (config.defaultOptions.debugmode)
            {
                Puts($"CanAffordUpgrade recieved data, Checking player inventory for materials to upgrade to {grade}... \n");
            }
            bool canupgrade = true;
            foreach (var item in buildingBlock.BuildCost())
            {
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Item: {item.itemDef.displayName.english} \n Amount: {item.amount} \n");
                }

                var missingAmount = item.amount - player.inventory.GetAmount(item.itemid);
                if (missingAmount > 0f)
                {
                    canupgrade = false;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"failed, player missing materials: {item.itemDef.displayName.english}: \n Amount:{missingAmount} \n stopping upgrade.. \n");
                    }
                    return canupgrade;
                }
            }
            if (config.defaultOptions.debugmode)
            {
                Puts($"passed, player has materials... \n Sending data back to CheckStructureUpgrade \n");
            }
            return canupgrade;
        }
        private void RefundMaterials(BuildingBlock buildingBlock, BasePlayer player, BuildingGrade.Enum grade)
        {
            if (buildingBlock == null || player == null) return;
            if (buildingBlock.OwnerID != player.userID) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Framer == 0) return;
            if (config.defaultOptions.debugmode)
            {
                Puts("RefundMaterials received data...\n" +
                    $"PlayerID: {player.userID}\n" +
                    $"Building Grade: {grade}\n" +
                    $"Building Block: {buildingBlock.blockDefinition.fullName}\n" +
                    "Player and Building data verified...\n" +
                    "Calculating materials to return to player...\n");
            }
            //foreach (var item in _costs[grade])
            foreach (var item in buildingBlock.BuildCost())
            {
                //switch(grade)
                //{
                //    case BuildingGrade.Enum.Wood:
                //        item.amount = config.framer.woodcost;
                //        break;
                //    case BuildingGrade.Enum.Stone:
                //        item.amount = config.framer.stonecost;
                //        break;
                //    case BuildingGrade.Enum.Metal:
                //        item.amount = config.framer.metalcost;
                //        break;
                //    case BuildingGrade.Enum.TopTier:
                //        item.amount = config.framer.armorcost;
                //        break;
                //}
                double reducedcost = item.amount * (config.framer.upgradecost * xprecord.Framer);
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Item: {item.itemDef.displayName.english}\n Default Cost: {item.amount}\n" +
                        $"Reduction Amount: {reducedcost} ({(config.framer.upgradecost * xprecord.Framer) * 100}%)\n");
                }
                // Captaincy
                if (player.Team != null && player.Team.members.Count > 1)
                {
                    double captaincyboost = CaptaincyTeamSkillBoost(player) * reducedcost;
                    reducedcost += captaincyboost;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Captaincy Effects Active...\n" +
                            $"Captaincy Boost: {captaincyboost} ({captaincyboost * 100}%)\n" +
                            $"New Reduction Amount: {reducedcost}\n");
                    }
                }
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.framerucost)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * reducedcost;
                    reducedcost += rankboost;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Rank Effects Active...\n" +
                            $"Rank Boost: {rankboost}%\n" +
                            $"New Reduction Amount: {reducedcost}\n");
                    }
                }
                if (reducedcost < 1)
                {
                    reducedcost = 1;
                }
                if (config.defaultOptions.debugmode)
                {
                    Puts($"\nFinal Reduction Amount: {(int)reducedcost}\n" +
                        $"Final Cost: {(int)(item.amount - reducedcost)}\n" +
                        "Reducing cost or refunding materials...\n" +
                        $"Item: {item.itemDef.displayName.english}, Amount: {(int)reducedcost}\n\n" +
                        "XPerience completed all checks successfully, no issues detected!");
                }
                player.GiveItem(ItemManager.CreateByItemID(item.itemid, (int)reducedcost));
            }
        }
        private void OnStructureRepair(BaseCombatEntity entity, BasePlayer player)
        {
            if (entity == null || player == null || !player.userID.Get().IsSteamId()) return;
            BuildingPrivlidge isauth = player.GetBuildingPrivilege();
            if (isauth == null || !isauth.IsAuthed(player)) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Framer < 1) return;
            int skilllevel = xprecord.Framer;
            double repairtime = config.framer.repairtime;
            double repaircost = config.framer.repaircost;

            // Reduce Repair Time
            entity.lastAttackedTime = (float)(entity.lastAttackedTime - (repairtime * skilllevel));
            if (entity.SecondsSinceAttacked < 30) return;

            // Reduce Repair Cost
            float missingHealth = entity.MaxHealth() - entity.health;
            float healthPercentage = missingHealth / entity.MaxHealth();
            if (missingHealth <= 0f || healthPercentage <= 0f)
            {
                entity.OnRepairFailed(null, string.Empty);
                return;
            }

            List<ItemAmount> itemAmounts = entity.RepairCost(healthPercentage);
            if (itemAmounts.Sum(x => x.amount) <= 0f)
            {
                entity.health += missingHealth;
                entity.SendNetworkUpdate();
                entity.OnRepairFinished();
                return;
            }

            foreach (ItemAmount amount in itemAmounts)
            {
                if (amount.amount > 40f)
                {
                    amount.amount = 40f;
                }
                amount.amount = (float)(amount.amount * (repaircost * skilllevel));
                // Captaincy
                if (player.Team != null && player.Team.members.Count > 1)
                {
                    double captaincyboost = CaptaincyTeamSkillBoost(player) * amount.amount;
                    amount.amount += (float)captaincyboost;
                }
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.framerrcost)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * amount.amount;
                    amount.amount += (float)rankboost;
                }
            }

            if (itemAmounts.Any(ia => player.inventory.GetAmount(ia.itemid) < (int)ia.amount))
            {
                entity.OnRepairFailed(null, string.Empty);
                return;
            }

            foreach (ItemAmount amount in itemAmounts)
            {
                if (amount.amount < 1) return;
                Item item = ItemManager.CreateByItemID(amount.itemid, (int)amount.amount);
                player.GiveItem(item);
            }
        }
        // Prevent Burnt Cookables
        public static readonly string[] CookedItems = new string[]
        {
            "bearmeat.cooked",
            "chicken.cooked",
            "deermeat.cooked",
            "horsemeat.cooked",
            "humanmeat.cooked",
            "meat.pork.cooked",
            "wolfmeat.cooked",
            "fish.cooked"
        };
        private Dictionary<string, int> lowTemps = new Dictionary<string, int>();
        private Dictionary<string, int> highTemps = new Dictionary<string, int>();
        ItemModCookable GetCookables(string shortname)
        {
            var definition = ItemManager.FindItemDefinition(shortname);
            if (definition == null)
            {
                Puts($"Unknown definition for {shortname}");
                return null;
            }
            var cookable = definition.GetComponent<ItemModCookable>();
            if (cookable == null)
            {
                Puts($"Unknown cookable for {shortname}");
                return null;
            }
            return cookable;
        }
        private void OnFuelConsume(BaseOven oven, Item fuel, ItemModBurnable burnable, BaseOven.IndustrialSlotMode IndustrialMode)
        {
            if (oven == null || fuel == null) return;
            var player = FindPlayer(oven.OwnerID.ToString());
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            // Fuel Consumption
            if (player.UserIDString == oven.OwnerID.ToString() && xprecord.Smithy > 0)
            {
                double lessfueltotal = (config.smithy.fuelconsumption * xprecord.Smithy) * 100;
                // Captaincy
                if (player.Team != null && player.Team.members.Count > 1)
                {
                    double captaincyboost = CaptaincyTeamSkillBoost(player) * lessfueltotal;
                    lessfueltotal += captaincyboost;
                }
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * lessfueltotal;
                    lessfueltotal += rankboost;
                }
                if (Random.Range(0, 101) <= lessfueltotal)
                {
                    fuel.amount += 1;
                }
            }
            // Production Rate/Speed
            double increasechance = (config.smithy.productionrate * xprecord.Smithy) * 100;
            double increasespeed = config.smithy.productionspeed * xprecord.Smithy;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboostincreasechance = CaptaincyTeamSkillBoost(player) * increasechance;
                increasechance += captaincyboostincreasechance;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.smithyfc)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasechance;
                double rankspeedboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasespeed;
                increasechance += rankboost;
                increasespeed += rankspeedboost;
            }
            // End Results
            var items = oven.inventory.itemList.ToArray();
            string oventype = "";
            switch (IndustrialMode)
            {
                case BaseOven.IndustrialSlotMode.Furnace:
                    oventype = "Furnace";
                    break;
                case BaseOven.IndustrialSlotMode.LargeFurnace:
                    oventype = "LargeFurnace";
                    break;
                case BaseOven.IndustrialSlotMode.ElectricFurnace:
                    oventype = "ElectricFurnace";
                    break;
            }
            foreach (var item in items)
            {
                var itemModCookable = item.info.GetComponent<ItemModCookable>();
                var itemCookableName = item.info.shortname;
                if (itemModCookable?.becomeOnCooked == null) continue;
                if (!_smithyCache.ContainsKey(itemCookableName + "." + oventype))
                {
                    AddSmithyData(itemCookableName + "." + oventype, itemModCookable.cookTime);
                }
                // Production Speed
                SmithyD resource;
                if (_smithyCache.TryGetValue(itemCookableName + "." + oventype, out resource))
                {
                    itemModCookable.cookTime = resource.time;
                    if (xprecord.Smithy > 0)
                    {
                        float speedreduction = resource.time * (float)increasespeed;
                        if (speedreduction >= resource.time) { speedreduction = resource.time - 1; }
                        itemModCookable.cookTime -= speedreduction;
                    }
                }
                // Production Rate
                if (Random.Range(0, 101) < increasechance && xprecord.Smithy > 0)
                {
                    double increaseamount = Math.Round((config.smithy.productionrate * xprecord.Smithy) * 5);
                    if (increaseamount < 1) { increaseamount = 1; }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
                    {
                        double rankboostin = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increaseamount;
                        increaseamount += Math.Ceiling(rankboostin);
                    }
                    if (itemModCookable?.becomeOnCooked == null || item.temperature < itemModCookable.lowTemp || item.temperature > itemModCookable.highTemp || itemModCookable.cookTime < 0) continue;
                    if (oven.inventory.Take(null, item.info.itemid, 1) != 1) continue;
                    var itemToGive = ItemManager.Create(itemModCookable.becomeOnCooked, (1 + (int)increaseamount));
                    if (!itemToGive.MoveToContainer(oven.inventory))
                        itemToGive.Drop(oven.inventory.dropPosition, oven.inventory.dropVelocity);
                }
            }
        }
        //private void OnOvenCook(BaseOven oven, Item item)
        //{
        //    if (oven == null || item == null) return;
        //    if (!oven.OwnerID.IsSteamId()) return;
        //    var player = FindPlayer(oven.OwnerID.ToString());
        //    if (player == null) return;
        //    XPRecord xprecord = GetXPRecord(player);
        //    // Production Rate/Speed
        //    double increasechance = (config.smithy.productionrate * xprecord.Smithy) * 100;
        //    double increasespeed = config.smithy.productionspeed * xprecord.Smithy;
        //    // Captaincy
        //    if (player.Team != null && player.Team.members.Count > 1)
        //    {
        //        double captaincyboostincreasechance = CaptaincyTeamSkillBoost(player) * increasechance;
        //        increasechance += captaincyboostincreasechance;
        //    }
        //    // Ranks
        //    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.smithyfc)
        //    {
        //        double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasechance;
        //        double rankspeedboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasespeed;
        //        increasechance += rankboost;
        //        increasespeed += rankspeedboost;
        //    }
        //    // End Results
        //    var items = oven.inventory.itemList.ToArray();
        //    var itemModCookable = item.info.GetComponent<ItemModCookable>();
        //    var itemCookableName = item.info.shortname;
        //    if (itemModCookable?.becomeOnCooked == null) return;
        //    if (!_smithyCache.ContainsKey(itemCookableName))
        //    {
        //        AddSmithyData(itemCookableName, itemModCookable.cookTime);
        //    }
        //    // Production Speed
        //    SmithyD resource;
        //    if (_smithyCache.TryGetValue(itemCookableName, out resource))
        //    {
        //        itemModCookable.cookTime = resource.time;
        //        if (xprecord.Smithy > 0)
        //        {
        //            float speedreduction = resource.time * (float)increasespeed;
        //            if (speedreduction >= resource.time) { speedreduction = resource.time - 1; }
        //            itemModCookable.cookTime -= speedreduction;
        //        }
        //    }
        //    // Production Rate
        //    if (Random.Range(0, 101) < increasechance && xprecord.Smithy > 0)
        //    {
        //        double increaseamount = Math.Round((config.smithy.productionrate * xprecord.Smithy) * 5);
        //        if (increaseamount < 1) { increaseamount = 1; }
        //        // Ranks
        //        if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
        //        {
        //            double rankboostin = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increaseamount;
        //            increaseamount += Math.Ceiling(rankboostin);
        //        }
        //        if (itemModCookable?.becomeOnCooked == null || item.temperature < itemModCookable.lowTemp || item.temperature > itemModCookable.highTemp || itemModCookable.cookTime < 0) return;
        //        if (oven.inventory.Take(null, item.info.itemid, 1) != 1) return;
        //        var itemToGive = ItemManager.Create(itemModCookable.becomeOnCooked, (1 + (int)increaseamount));
        //        if (!itemToGive.MoveToContainer(oven.inventory))
        //            itemToGive.Drop(oven.inventory.dropPosition, oven.inventory.dropVelocity);
        //    }
        //}
        private void OnOvenToggle(BaseOven oven, BasePlayer player, BaseOven.IndustrialSlotMode IndustrialMode)
        {
            if (oven == null || player == null) return;
            if (!oven.OwnerID.IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            // Production Rate/Speed
            double increasechance = (config.smithy.productionrate * xprecord.Smithy) * 100;
            double increasespeed = config.smithy.productionspeed * xprecord.Smithy;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboostincreasechance = CaptaincyTeamSkillBoost(player) * increasechance;
                increasechance += captaincyboostincreasechance;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.smithyfc)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasechance;
                double rankspeedboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increasespeed;
                increasechance += rankboost;
                increasespeed += rankspeedboost;
            }
            // End Results
            var items = oven.inventory.itemList.ToArray();
            string oventype = "";
            switch (IndustrialMode)
            {
                case BaseOven.IndustrialSlotMode.Furnace:
                    oventype = "Furnace";
                    break;
                case BaseOven.IndustrialSlotMode.LargeFurnace:
                    oventype = "LargeFurnace";
                    break;
                case BaseOven.IndustrialSlotMode.ElectricFurnace:
                    oventype = "ElectricFurnace";
                    break;
            }
            foreach (var item in items)
            {
                var itemModCookable = item.info.GetComponent<ItemModCookable>();
                var itemCookableName = item.info.shortname;
                if (itemModCookable?.becomeOnCooked == null) continue;
                if (!_smithyCache.ContainsKey(itemCookableName))
                {
                    AddSmithyData(itemCookableName + "." + oventype, itemModCookable.cookTime);
                }
                // Production Speed
                SmithyD resource;
                if (_smithyCache.TryGetValue(itemCookableName + "." + oventype, out resource))
                {
                    itemModCookable.cookTime = resource.time;
                    if (xprecord.Smithy > 0)
                    {
                        float speedreduction = resource.time * (float)increasespeed;
                        if (speedreduction >= resource.time) { speedreduction = resource.time - 1; }
                        itemModCookable.cookTime -= speedreduction;
                    }
                }
                // Production Rate
                if (Random.Range(0, 101) < increasechance && xprecord.Smithy > 0)
                {
                    double increaseamount = Math.Round((config.smithy.productionrate * xprecord.Smithy) * 5);
                    if (increaseamount < 1) { increaseamount = 1; }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
                    {
                        double rankboostin = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increaseamount;
                        increaseamount += Math.Ceiling(rankboostin);
                    }
                    if (itemModCookable?.becomeOnCooked == null || item.temperature < itemModCookable.lowTemp || item.temperature > itemModCookable.highTemp || itemModCookable.cookTime < 0) continue;
                    if (oven.inventory.Take(null, item.info.itemid, 1) != 1) continue;
                    var itemToGive = ItemManager.Create(itemModCookable.becomeOnCooked, (1 + (int)increaseamount));
                    if (!itemToGive.MoveToContainer(oven.inventory))
                        itemToGive.Drop(oven.inventory.dropPosition, oven.inventory.dropVelocity);
                }
            }
        }
        #endregion

        #region Plants/Trees/Ores/Food
        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            if (dispenser == null || entity == null || item == null) return;
            var player = entity.ToPlayer();
            if (player == null || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            bool rankboostenabled = false;
            var gatherType = dispenser.gatherType;
            double addxp = 0;
            int skilllevel = 0;
            double gatherincrease = 0;
            double apples = config.woodcutter.applechance * 100;
            double metal = 100;
            var tool = player.GetActiveItem().ToString().ToLower();
            if (gatherType == ResourceDispenser.GatherType.Tree)
            {
                addxp = config.xpGather.treexp;
                double toolxpchance = config.xpGather.toolxpchance * 100;
                if (tool.Contains("chainsaw"))
                {
                    if (!config.xpGather.noxptools)
                    {
                        if ((Random.Range(0, 101) <= toolxpchance) == true)
                        {
                            addxp = config.xpGather.toolxppercent * addxp;
                        }
                        else
                        {
                            addxp = 0;
                        }
                    }
                    else
                    {
                        addxp = 0;
                    }
                    apples = 0;
                }
                if (config.xpGather.onetimexp)
                {
                    addxp = 0;
                }
                gatherincrease = config.woodcutter.gatherrate;
                if (config.Rankboostssettings.woodcuttergr) { rankboostenabled = true; }
                skilllevel = xprecord.WoodCutter;
                double chance = skilllevel * apples;
                if ((Random.Range(1, 101) <= chance) == true)
                {
                    var roll = Random.Range(0, 11);
                    if (roll < 5)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(352130972, 1));
                        }
                        else
                        {
                            // Bad
                            player.Command("note.inv", 352130972, 1.ToString());
                            ItemManager.CreateByName("apple.spoiled", 1)?.DropAndTossUpwards(entity.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                    if (roll > 5)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(1548091822, 1));
                        }
                        else
                        {
                            // good
                            player.Command("note.inv", 1548091822, 1.ToString());
                            ItemManager.CreateByName("apple", 1)?.DropAndTossUpwards(entity.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                }
            }
            else if (gatherType == ResourceDispenser.GatherType.Ore)
            {
                addxp = config.xpGather.orexp;
                if (item.info.shortname.Contains("metal"))
                {
                    addxp = config.xpGather.metalorexp;
                }
                if (item.info.shortname.Contains("sulfur"))
                {
                    addxp = config.xpGather.sulfurorexp;
                }
                if (item.info.shortname.Contains("stone"))
                {
                    addxp = config.xpGather.stoneorexp;
                }
                double toolxpchance = config.xpGather.toolxpchance * 100;
                if (tool.Contains("jackhammer"))
                {
                    if (!config.xpGather.noxptools)
                    {
                        if ((Random.Range(0, 101) <= toolxpchance) == true)
                        {
                            addxp = config.xpGather.toolxppercent * addxp;
                        }
                        else
                        {
                            addxp = 0;
                        }
                    }
                    else
                    {
                        addxp = 0;
                    }
                    metal = 0.1;
                }
                if (config.xpGather.onetimexp)
                {
                    addxp = 0;
                }
                gatherincrease = config.miner.gatherrate;
                if (config.Rankboostssettings.minergr) { rankboostenabled = true; }
                if (item.info.shortname.Contains("metal") && xprecord.Miner > 0)
                {
                    double metalchance = (xprecord.Miner * config.miner.metalchance) * metal;
                    int metalamount = xprecord.Miner * config.miner.metalamount;
                    if (metalamount < 1)
                    {
                        metalamount = 1;
                    }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.minermfc)
                    {
                        double rankboostfragchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * metalchance;
                        int rankboostfragamt = (int)Math.Ceiling((xprecord.rank * config.xpLevelRanks.rankstatboostamount) * metalamount);
                        metalchance += rankboostfragchance;
                        if (config.Rankboostssettings.minermfa) { metalamount += rankboostfragamt; }
                    }
                    if ((Random.Range(0, 101) <= metalchance) == true)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(69511070, metalamount));
                        }
                        else
                        {
                            player.Command("note.inv", 69511070, metalamount.ToString());
                            ItemManager.CreateByName("metal.fragments", metalamount)?.DropAndTossUpwards(entity.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                }
                if (item.info.shortname.Contains("metal") && xprecord.Smithy > 0)
                {
                    double hmetalchance = (xprecord.Smithy * config.smithy.metalchance) * metal;
                    int hmetalamount = xprecord.Smithy * config.smithy.metalamount;
                    if (hmetalamount < 1)
                    {
                        hmetalamount = 1;
                    }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.smithyhqmc)
                    {
                        double rankboostmetalchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * hmetalchance;
                        int rankboostmetalamt = (int)Math.Ceiling((xprecord.rank * config.xpLevelRanks.rankstatboostamount) * hmetalamount);
                        hmetalchance += rankboostmetalchance;
                        if (config.Rankboostssettings.smithyhqma) { hmetalamount += rankboostmetalamt; }
                    }
                    if ((Random.Range(0, 101) <= hmetalchance) == true)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(317398316, hmetalamount));
                        }
                        else
                        {
                            player.Command("note.inv", 317398316, hmetalamount.ToString());
                            ItemManager.CreateByName("metal.refined", hmetalamount)?.DropAndTossUpwards(entity.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                }
                skilllevel = xprecord.Miner;
            }
            else if (gatherType == ResourceDispenser.GatherType.Flesh || item.info.shortname == "cactusflesh")
            {
                addxp = config.xpGather.harvestxp;
                double toolxpchance = config.xpGather.toolxpchance * 100;
                if (tool.Contains("jackhammer") || tool.Contains("chainsaw"))
                {
                    if (!config.xpGather.noxptools)
                    {
                        if ((Random.Range(0, 101) <= toolxpchance) == true)
                        {
                            addxp = config.xpGather.toolxppercent * addxp;
                        }
                        else
                        {
                            addxp = 0;
                        }
                    }
                    else
                    {
                        addxp = 0;
                    }
                }
                gatherincrease = config.hunter.gatherrate;
                if (config.Rankboostssettings.huntergr) { rankboostenabled = true; }
                skilllevel = xprecord.Hunter;
            }
            double results = item.amount + (item.amount * (gatherincrease * skilllevel));
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * results;
                results += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && rankboostenabled)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * results;
                results += rankboost;
            }
            if (skilllevel >= 1)
            {
                item.amount = (int)results;
            }
            GainExp(player, addxp);
            // Harvest Tracking
            if (item.info.shortname.Contains("wood"))
            {
                HarvestRecord(player, "wood", (int)results);
            }
            if (item.info.shortname.Contains("stone"))
            {
                HarvestRecord(player, "stone", (int)results);
            }
            if (item.info.shortname.Contains("metal"))
            {
                HarvestRecord(player, "metal", (int)results);
            }
            if (item.info.shortname.Contains("sulfur"))
            {
                HarvestRecord(player, "sulfur", (int)results);
            }
            if (item.info.shortname.Contains("cactus"))
            {
                HarvestRecord(player, "cactus", (int)results);
            }
        }
        private void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)
        {
            if (player == null || !player.userID.Get().IsSteamId() || dispenser == null || item == null) return;
            XPRecord xprecord = GetXPRecord(player);
            var gatherType = dispenser.gatherType;
            double addxp = 0;
            int skilllevel = 0;
            double bonus = 0;
            double increaseamount;
            bool rankboostenabled = false;
            if (gatherType == ResourceDispenser.GatherType.Tree)
            {
                addxp = config.xpGather.treexp;
                bonus = config.woodcutter.bonusincrease;
                skilllevel = xprecord.WoodCutter;
                if (config.Rankboostssettings.woodcutterbonus) { rankboostenabled = true; }
            }
            else if (gatherType == ResourceDispenser.GatherType.Ore)
            {
                addxp = config.xpGather.orexp;
                if (item.info.shortname.Contains("metal"))
                {
                    addxp = config.xpGather.metalorexp;
                }
                if (item.info.shortname.Contains("sulfur"))
                {
                    addxp = config.xpGather.sulfurorexp;
                }
                if (item.info.shortname.Contains("stone"))
                {
                    addxp = config.xpGather.stoneorexp;
                }
                bonus = config.miner.bonusincrease;
                skilllevel = xprecord.Miner;
                if (config.Rankboostssettings.minerbonus) { rankboostenabled = true; }
            }
            else if (gatherType == ResourceDispenser.GatherType.Flesh || item.info.shortname == "cactusflesh")
            {
                addxp = config.xpGather.harvestxp;
                bonus = config.hunter.bonusincrease;
                skilllevel = xprecord.Hunter;
                if (config.Rankboostssettings.hunterbonus) { rankboostenabled = true; }
            }
            increaseamount = item.amount + (item.amount * (bonus * skilllevel));
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * increaseamount;
                increaseamount += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && rankboostenabled)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * increaseamount;
                increaseamount += rankboost;
            }
            if (skilllevel >= 1)
            {
                item.amount = (int)increaseamount;
            }
            GainExp(player, addxp);
            // Harvest Tracking
            if (item.info.shortname.Contains("wood"))
            {
                HarvestRecord(player, "wood", (int)increaseamount);
            }
            if (item.info.shortname.Contains("stone"))
            {
                HarvestRecord(player, "stone", (int)increaseamount);
            }
            if (item.info.shortname.Contains("metal"))
            {
                HarvestRecord(player, "metal", (int)increaseamount);
            }
            if (item.info.shortname.Contains("sulfur"))
            {
                HarvestRecord(player, "sulfur", (int)increaseamount);
            }
            if (item.info.shortname.Contains("cactus"))
            {
                HarvestRecord(player, "cactus", (int)increaseamount);
            }
        }
        private void OnCollectiblePickup(CollectibleEntity collectible, BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || collectible == null) return;
            if (MonumentOwner != null)
            {
                bool getmonumentowner = CheckMonumentOwner(player);
                if (getmonumentowner) return;
            }
            XPRecord xprecord = GetXPRecord(player);
            double addxp = 0;
            double gatherincrease = config.forager.gatherrate;
            int skilllevel = xprecord.Forager;
            //Custom Items Forager
            if (config.forager.randomchance != 0)
            {
                RandomForagerItem(player);
            }
            foreach (var item in collectible.itemList)
            {
                var name = item.itemDef.shortname;
                // Seeds
                if (name.StartsWith("seed"))
                {
                    double chance = (config.forager.chanceincrease * skilllevel) * 100;
                    if ((Random.Range(0, 101) <= chance) == true)
                    {
                        double addseeds = (config.forager.chanceincrease * skilllevel) * 10;
                        if (addseeds <= 1)
                        {
                            addseeds = 1;
                        }
                        item.amount += (int)addseeds;
                    }
                }
                // XP / Gather Rate
                if (name.Contains("wood"))
                {
                    addxp = config.xpGather.treexp;
                }
                else if (name.Contains("ore") || name.Contains("stone"))
                {
                    addxp = config.xpGather.orexp;
                    if (name.Contains("metal"))
                    {
                        addxp = config.xpGather.metalorexp;
                    }
                    if (name.Contains("sulfur"))
                    {
                        addxp = config.xpGather.sulfurorexp;
                    }
                    if (name.Contains("stone"))
                    {
                        addxp = config.xpGather.stoneorexp;
                    }
                }
                else if (name.Contains("berry") || name == "mushroom" || name == "cloth" || name == "pumpkin" || name == "corn" || name == "potato")
                {
                    addxp = config.xpGather.plantxp;
                }
                double results = item.amount + (item.amount * (gatherincrease * skilllevel));
                // Grub / Worm Chance
                double grubchance = (config.forager.grubwormincrease * skilllevel) * 100;
                if ((Random.Range(0, 101) <= grubchance) == true)
                {
                    var roll = Random.Range(0, 11);
                    if (roll < 5)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(1770475779, 1));
                        }
                        else
                        {
                            // Worm
                            player.Command("note.inv", 1770475779, 1.ToString());
                            ItemManager.CreateByName("worm", 1)?.DropAndTossUpwards(collectible.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                    if (roll > 5)
                    {
                        if (config.defaultOptions.dropsgotoplayerinventory)
                        {
                            player.GiveItem(ItemManager.CreateByItemID(-568419968, 1));
                        }
                        else
                        {
                            // Grub
                            player.Command("note.inv", -568419968, 1.ToString());
                            ItemManager.CreateByName("grub", 1)?.DropAndTossUpwards(collectible.GetDropPosition());
                            player.RunEffect("assets/bundled/prefabs/fx/notice/loot.drag.itemdrop.fx.prefab");
                        }
                    }
                }
                // Captaincy
                if (player.Team != null && player.Team.members.Count > 1)
                {
                    double captaincyboost = CaptaincyTeamSkillBoost(player) * results;
                    results += captaincyboost;
                }
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.foragergr)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * results;
                    results += rankboost;
                }
                if (skilllevel >= 1)
                {
                    if (results <= 1.5 && gatherincrease != 0)
                    {
                        item.amount = 2;
                    }
                    else
                    {
                        item.amount = (int)results;
                    }
                }
                NextTick(() =>
                {
                    if (collectible.IsDestroyed)
                    {
                        GainExp(player, addxp);
                    }
                });
                // Harvest Tracking
                if (name.Contains("wood"))
                {
                    HarvestRecord(player, "wood", (int)results);
                }
                if (name.Contains("stone"))
                {
                    HarvestRecord(player, "stone", (int)results);
                }
                if (name.Contains("metal"))
                {
                    HarvestRecord(player, "metal", (int)results);
                }
                if (name.Contains("sulfur"))
                {
                    HarvestRecord(player, "sulfur", (int)results);
                }
                if (name.Contains("cactus"))
                {
                    HarvestRecord(player, "cactus", (int)results);
                }
                if (name.Contains("berry") && !name.Contains("seed"))
                {
                    HarvestRecord(player, "berries", (int)results);
                }
                if (name.Contains("seed") && !name.Contains("berry"))
                {
                    HarvestRecord(player, "seed", (int)results);
                }
                if (name.Contains("mushroom"))
                {
                    HarvestRecord(player, "mushroom", (int)results);
                }
                if (name.Contains("cloth"))
                {
                    HarvestRecord(player, "hemp", (int)results);
                }
                if (name.Contains("pumpkin"))
                {
                    HarvestRecord(player, "pumpkin", (int)results);
                }
                if (name.Contains("corn"))
                {
                    HarvestRecord(player, "corn", (int)results);
                }
                if (name.Contains("potato"))
                {
                    HarvestRecord(player, "potato", (int)results);
                }
            }
        }
        private void OnGrowableGathered(GrowableEntity growable, Item item, BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || growable == null || item == null) return;
            XPRecord xprecord = GetXPRecord(player);
            double addxp = 0;
            double gatherincrease = config.forager.gatherrate;
            int skilllevel = xprecord.Forager;
            var name = item.info.shortname;
            if (name.StartsWith("seed"))
            {
                double chance = (config.forager.chanceincrease * skilllevel) * 100;
                if ((Random.Range(0, 101) <= chance) == true)
                {
                    double addseeds = (config.forager.chanceincrease * skilllevel) * 2;
                    if (addseeds <= 1)
                    {
                        addseeds = 1;
                    }
                    item.amount += (int)addseeds;
                }
                return;
            }
            if (name.Contains("wood"))
            {
                addxp = config.xpGather.treexp;
            }
            if (name.Contains("berry") || name.Contains("clone") || name == "mushroom" || name == "cloth" || name == "pumpkin" || name == "corn" || name == "potato")
            {
                addxp = config.xpGather.plantxp;
            }
            //double results = item.amount * (gatherincrease * skilllevel);
            double results = item.amount + (item.amount * (gatherincrease * skilllevel));
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * results;
                results += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.foragergr)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * results;
                results += rankboost;
            }
            if (skilllevel >= 1)
            {
                if (results <= 1.5 && gatherincrease != 0)
                {
                    item.amount = 2;
                }
                else
                {
                    item.amount = (int)results;
                }
            }
            GainExp(player, addxp);
            // Harvest Tracking
            if (name.Contains("wood"))
            {
                HarvestRecord(player, "wood", (int)results);
            }
            if (name.Contains("cactus"))
            {
                HarvestRecord(player, "cactus", (int)results);
            }
            if (name.Contains("berry") && !name.Contains("seed"))
            {
                HarvestRecord(player, "berries", (int)results);
            }
            if (name.Contains("seed") && !name.Contains("berry"))
            {
                HarvestRecord(player, "seed", (int)results);
            }
            if (name.Contains("mushroom"))
            {
                HarvestRecord(player, "mushroom", (int)results);
            }
            if (name.Contains("cloth"))
            {
                HarvestRecord(player, "hemp", (int)results);
            }
            if (name.Contains("pumpkin"))
            {
                HarvestRecord(player, "pumpkin", (int)results);
            }
            if (name.Contains("corn"))
            {
                HarvestRecord(player, "corn", (int)results);
            }
            if (name.Contains("potato"))
            {
                HarvestRecord(player, "potato", (int)results);
            }
        }
        // Cooking Plugin
        void OnMealCrafted(BasePlayer player, string meal, Dictionary<string, int> ingredients, bool isIngredient)
        {
            if (player == null || !player.userID.Get().IsSteamId() || config.xpGain.craftmeal == 0 || Cooking == null) return;
            GainExp(player, config.xpGain.craftmeal);
        }
        #endregion

        #region Zones / Events / Raidable Bases / MonumentOwner
        bool CheckPlayerLocation(BasePlayer player, string type)
        {
            if (player == null || !player.userID.Get().IsSteamId() || type.IsNullOrEmpty()) return false;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return false;
            if (Triangulation != null)
            {
                bool blockplayer = (bool)Triangulation?.Call("IsPlayerBlockingLocation", player);
                if (blockplayer) return true;
            }
            switch (type)
            {
                case "noxpgain":
                    // Zone Manager Check
                    if (ZoneManager != null)
                    {
                        string[] excludedzones = config.zonemanagermod.noxpgain.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        foreach (string zone in excludedzones)
                        {
                            bool playerinzone = (bool)ZoneManager?.Call("IsPlayerInZone", zone, player);
                            if (playerinzone) return true;
                        }
                    }
                    // Event Helper Check
                    if (EventHelper != null)
                    {
                        string[] excludedevents = config.eventhelpermod.noxpgain.Split(new char[] { ',' }, StringSplitOptions.None);
                        foreach (string eventname in excludedevents)
                        {
                            bool playerinevent = (bool)EventHelper?.Call("EMIsParticipating", player, eventname);
                            if (playerinevent) return true;
                        }
                    }
                    // SurvivalArena
                    if (SurvivalArena != null)
                    {
                        if (config.survivalarenamod.noxpgain)
                        {
                            if ((bool)SurvivalArena?.Call("IsEventPlayer", player) as bool? ?? false)
                            {
                                return true;
                            }
                        }
                    }
                    // Raidable Bases Check
                    if (RaidableBases != null && config.raidablebasesmod.noxpgain && xprecord.raidablebase)
                    {
                        return true;
                    }
                    break;
                case "noxploss":
                    // Zone Manager Check
                    if (ZoneManager != null)
                    {
                        string[] excludedzones = config.zonemanagermod.noxploss.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        foreach (string zone in excludedzones)
                        {
                            bool playerinzone = (bool)ZoneManager?.Call("IsPlayerInZone", zone, player);
                            if (playerinzone) return true;
                        }
                    }
                    // Event Helper Check
                    if (EventHelper != null)
                    {
                        string[] excludedevents = config.eventhelpermod.noxploss.Split(new char[] { ',' }, StringSplitOptions.None);
                        foreach (string eventname in excludedevents)
                        {
                            bool playerinevent = (bool)EventHelper?.Call("EMPlayerDiedAtSpecificEvent", player, eventname);
                            if (playerinevent) return true;
                        }
                    }
                    // SurvivalArena
                    if (SurvivalArena != null)
                    {
                        if (config.survivalarenamod.noxploss)
                        {
                            if ((bool)SurvivalArena?.Call("IsEventPlayer", player) as bool? ?? false)
                            {
                                return true;
                            }
                        }
                    }
                    // Raidable Bases Check
                    if (RaidableBases != null && config.raidablebasesmod.noxploss && xprecord.raidablebase)
                    {
                        return true;
                    }
                    break;
                case "disableabilities":
                    // Zone Manager Check
                    if (ZoneManager != null)
                    {
                        string[] excludedzones = config.zonemanagermod.disablestatsandskills.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        foreach (string zone in excludedzones)
                        {
                            bool playerinzone = (bool)ZoneManager?.Call("IsPlayerInZone", zone, player);
                            if (playerinzone) return true;
                        }
                    }
                    // Event Helper Check
                    if (EventHelper != null)
                    {
                        string[] excludedevents = config.eventhelpermod.disablestatsandskills.Split(new char[] { ',' }, StringSplitOptions.None);
                        foreach (string eventname in excludedevents)
                        {
                            bool playerinevent = (bool)EventHelper?.Call("EMIsParticipating", player, eventname);
                            if (playerinevent)
                            {
                                PlayerArmor(player, true);
                                MightAttributes(player, true);
                                return true;
                            }
                        }
                    }
                    // SurvivalArena
                    if (SurvivalArena != null)
                    {
                        if (config.survivalarenamod.disablestatsandskills)
                        {
                            if ((bool)SurvivalArena?.Call("IsEventPlayer", player) as bool? ?? false)
                            {
                                PlayerArmor(player, true);
                                MightAttributes(player, true);
                                return true;
                            }
                        }
                    }
                    // Raidable Bases Check
                    if (RaidableBases != null && config.raidablebasesmod.disableabilities && xprecord.raidablebase)
                    {
                        return true;
                    }
                    break;
            }
            return false;
        }
        void OnEnterZone(string ZoneID, BasePlayer player)
        {
            string[] excludedzones = config.zonemanagermod.disablestatsandskills.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string zone in excludedzones)
            {
                if (zone == ZoneID)
                {
                    PlayerArmor(player, true);
                    MightAttributes(player, true);
                    player.ChatMessage(XPLang("zonedisabled", player.UserIDString));
                }
            }
        }
        void OnExitZone(string ZoneID, BasePlayer player)
        {
            string[] excludedzones = config.zonemanagermod.disablestatsandskills.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string zone in excludedzones)
            {
                if (zone == ZoneID)
                {
                    PlayerArmor(player);
                    MightAttributes(player);
                    player.ChatMessage(XPLang("zoneenabled", player.UserIDString));
                }
            }
        }
        private void OnPlayerEnteredRaidableBase(BasePlayer player)
        {
            if (config.raidablebasesmod.disableabilities)
            {
                if (player == null || !player.userID.Get().IsSteamId()) return;
                XPRecord xprecord = GetXPRecord(player);
                xprecord.raidablebase = true;
                PlayerArmor(player, true);
                MightAttributes(player, true);
                player.ChatMessage(XPLang("enterraidbase", player.UserIDString));
            }
        }
        private void OnPlayerExitedRaidableBase(BasePlayer player)
        {
            if (config.raidablebasesmod.disableabilities)
            {
                if (player == null || !player.userID.Get().IsSteamId()) return;
                XPRecord xprecord = GetXPRecord(player);
                xprecord.raidablebase = false;
                PlayerArmor(player);
                MightAttributes(player);
                player.ChatMessage(XPLang("exitraidbase", player.UserIDString));
            }
        }
        private bool CheckMonumentOwner(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || MonumentOwner == null) return false;
            bool hasmonumentowner = (bool)MonumentOwner?.Call("HasOwner", player.ServerPosition);
            if (hasmonumentowner)
            {
                BasePlayer getmonumentowner = (BasePlayer)MonumentOwner?.Call("GetOwnerID", player.ServerPosition);
                if (getmonumentowner == null) return false;
                if (!getmonumentowner.userID.Get().IsSteamId()) return false;
                if (player.userID.Get() == getmonumentowner.userID.Get()) return true;
            }
            return false;
        }
        #endregion

        #region Event Manager
        void EMOnEventJoined(BasePlayer player, string eventname)
        {
            if (EventHelper == null || player == null || !player.userID.Get().IsSteamId()) return;
            // No XP Gain
            string[] noxpgainevents = config.eventhelpermod.noxpgain.Split(new char[] { ',' }, StringSplitOptions.None);
            foreach (string xpgainevent in noxpgainevents)
            {
                if (xpgainevent == eventname)
                {
                    player.ChatMessage($"{XPLang("eventnoxpgain", player.UserIDString, eventname)}");
                }
            }
            // No XP Loss
            string[] noxplossevents = config.eventhelpermod.noxpgain.Split(new char[] { ',' }, StringSplitOptions.None);
            foreach (string xplossevent in noxplossevents)
            {
                if (xplossevent == eventname)
                {
                    player.ChatMessage($"{XPLang("eventnoxploss", player.UserIDString, eventname)}");
                }
            }
            // No Stats or Skills
            string[] noskillsevents = config.eventhelpermod.noxpgain.Split(new char[] { ',' }, StringSplitOptions.None);
            foreach (string noskillsevent in noskillsevents)
            {
                if (noskillsevent == eventname)
                {
                    player.ChatMessage($"{XPLang("eventnoskills", player.UserIDString, eventname)}");
                }
            }
        }
        #endregion

        #region Player Health/Recovery 
        private object PlayerMetabolismControl(PlayerMetabolism metabolism, BasePlayer player, float delta, int might)
        {
            if (CheckPlayerLocation(player, "disableabilities")) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return null;
            // Reduce Bleeding
            if (metabolism.bleeding.value > 0)
            {
                if (config.might.bleedreduction == 0) return null;
                metabolism.bleeding.value -= ((float)config.might.bleedreduction * might) * metabolism.bleeding.value;
            }
            // Reduce Radiation
            if (metabolism.radiation_level.value > 0)
            {
                if (config.might.radreduction == 0) return null;
                metabolism.radiation_level.value -= ((float)config.might.radreduction * might) * metabolism.radiation_level.value;
            }
            if (metabolism.radiation_poison.value > 0)
            {
                if (config.might.radreduction == 0) return null;
                metabolism.radiation_poison.value -= ((float)config.might.radreduction * might) * metabolism.radiation_poison.value;
            }
            // Heat Reduction
            if (metabolism.temperature.lastValue >= 35)
            {
                if (config.might.heattolerance == 0) return null;
                metabolism.temperature.value -= ((float)config.might.heattolerance * might) * 20;
            }
            // Cold Reduction
            if (metabolism.temperature.lastValue <= 10)
            {
                if (config.might.coldtolerance == 0) return null;
                metabolism.temperature.value += (int)Math.Round(((float)config.might.coldtolerance * might) * 20, 0);
            }
            return null;
        }
        private object OnRunPlayerMetabolism(PlayerMetabolism metabolism, BasePlayer player, float delta)
        {
            if (player == null || metabolism == null || !player.userID.Get().IsSteamId()) return null;
            if (CheckPlayerLocation(player, "disableabilities")) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Might > 0)
            {
                PlayerMetabolismControl(metabolism, player, delta, xprecord.Might);
            }
            // Fisher
            if (xprecord.Fisher > 0 && metabolism.oxygen.value < 1)
            {
                metabolism.oxygen.value += (((float)config.fisher.oxygenreduction * xprecord.Fisher) * 0.1f);
            }
            return null;
        }
        private void OnPlayerHealthChange(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc) return;
            if (!player.IsConnected) return;
            if (!player.isSpawned) return;
            LiveStats(player);
        }
        private object OnHealingItemUse(MedicalTool tool, BasePlayer player)
        {
            var toolowner = tool.GetOwnerPlayer();
            if (toolowner == null || player == null || !toolowner.userID.Get().IsSteamId() || !player.userID.Get().IsSteamId() || tool == null) return null;
            // Check for Addon and Special Item
            string item = toolowner?.GetActiveItem().name;
            if (XPerienceAddon != null && item != null)
            {
                string itemname = String.Concat(item.ToLower().Where(c => !Char.IsWhiteSpace(c)));
                if (XPerienceAddon.Call<bool>("GetBoosters", toolowner, itemname, "item"))
                {
                    return true;
                }
            }
            if (CheckPlayerLocation(player, "disableabilities")) return null;
            XPRecord xprecord = GetXPRecord(player);
            //If Addon not present or not special item continue
            if (player._health == player._maxHealth) return null;
            var toolused = tool.name;
            if (tool.name.Contains("bandage"))
            {
                toolused = "Bandage";
            }
            if (tool.name.Contains("syringe"))
            {
                toolused = "Medical Syringe";
            }
            if (xprecord.Medic <= 0) return null;
            if ((!config.medic.preventbandageboost && toolused == "Bandage") || toolused == "Medical Syringe")
            {
                double addhealth = xprecord.Medic * config.medic.tools;
                // Captaincy
                if (toolowner.Team != null && toolowner.Team.members.Count > 1 && config.captaincy.maxlvl != 0)
                {
                    double captaincyboost = CaptaincyTeamSkillBoost(toolowner) * addhealth;
                    addhealth += captaincyboost;
                }
                // Ranks
                if (xprecord.rank > 0 && config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.medictools)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * addhealth;
                    addhealth += rankboost;
                }
                player._health = (float)(player._health + addhealth);
                if (toolowner == player)
                {
                    player.ChatMessage(XPLang("medictooluse", player.UserIDString, addhealth, toolused));
                }
                else
                {
                    toolowner.ChatMessage(XPLang("medictooluseowner", toolowner.UserIDString, addhealth, toolused, player.displayName));
                    player.ChatMessage(XPLang("medictooluse", player.UserIDString, addhealth, toolused));
                }
                return null;
            }
            return null;
        }
        private void OnPlayerRevive(BasePlayer reviver, BasePlayer player)
        {
            if (reviver == null || !reviver.userID.Get().IsSteamId() || player == null || !player.userID.Get().IsSteamId()) return;
            if (!player.IsWounded()) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            double addxp = config.xpGain.playerrevive;
            GainExp(reviver, addxp);
            if (xprecord.Medic <= 0) return;
            double addhealth = xprecord.Medic * config.medic.revivehp;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * addhealth;
                addhealth += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.medicrevivala)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * addhealth;
                addhealth += rankboost;
            }
            player._health = (float)(player._health + addhealth);
            player.ChatMessage(XPLang("medicreviveplayer", player.UserIDString, addhealth));
            reviver.ChatMessage(XPLang("medicrevivereviver", reviver.UserIDString, addhealth));
        }
        private void OnPlayerRecovered(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId()) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Medic <= 0) return;
            double addhealth = xprecord.Medic * config.medic.revivehp;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * addhealth;
                addhealth += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.medicrecovera)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * addhealth;
                addhealth += rankboost;
            }
            player._health = (float)(player._health + addhealth);
            player.ChatMessage(XPLang("medicrecoverplayer", player.UserIDString, addhealth));
        }
        private void MightAttributes(BasePlayer player, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId() || !player.isSpawned) return;
            if (reset)
            {
                if (player.metabolism.calories.max > 500)
                {
                    player.metabolism.calories.max = 500;
                }
                if (player.metabolism.hydration.max > 250)
                {
                    player.metabolism.hydration.max = 250;
                }
                return;
            }
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Might > 0)
            {
                // Increase Hunger Max - Reset to default then calculate new max
                player.metabolism.calories.max = 500;
                double maxcalories = (config.might.metabolism * xprecord.Might) * player.metabolism.calories.max;
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.metabolism)
                {
                    maxcalories += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
                }
                player.metabolism.calories.max += (float)maxcalories;
                // Increase Thirst Max - Reset to default then calculate new max
                player.metabolism.hydration.max = 250;
                double maxhydration = (config.might.metabolism * xprecord.Might) * player.metabolism.hydration.max;
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.metabolism)
                {
                    maxhydration += xprecord.rank * config.xpLevelRanks.rankstatboostamount;
                }
                player.metabolism.hydration.max += (float)maxhydration;
            }
        }
        private object OnPlayerAddModifiers(BasePlayer player, Item item, ItemModConsumable consumable)
        {
            if (CheckPlayerLocation(player, "disableabilities")) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return null;
            string tea = item.info.shortname;
            double addhealth = 0;
            // Update Player Armor (Max Health Teas)
            if (item.info.shortname.Contains("maxhealthtea"))
            {
                LiveStats(player, false, tea.ToString());
                return null;
            }
            // Medic Skill Increase (Regular Health Teas)
            if (item.info.shortname.Contains("healthtea"))
            {
                if (xprecord.Medic > 0)
                {
                    for (int i = 0; i < consumable.effects.Count; i++)
                    {
                        if (consumable.effects[i].type == MetabolismAttribute.Type.Health) addhealth = consumable.effects[i].amount;
                    }
                    double medicincrease = addhealth * (xprecord.Medic * config.medic.teas);
                    addhealth += Math.Ceiling(medicincrease);
                    player._health += (float)addhealth;
                }
                // Update LiveUI for Armor
                LiveStats(player, false, tea.ToString());
                return null;
            }
            return null;
        }
        private void PlayerArmor(BasePlayer player, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId() || !player.isSpawned) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Might <= 0) return;
            if (reset)
            {
                // Max Health
                double armor = (xprecord.Might * config.might.armor) * 100;
                double newmaxhealth = player._maxHealth - armor;
                // Change Max Health
                if (newmaxhealth < 100)
                {
                    player._maxHealth = 100;
                }
                else
                {
                    player._maxHealth = (float)newmaxhealth;
                }
                // Player Current Health
                double defaulthealth = 100;
                double teahealth = 100;
                bool teamodified = false;
                double healthdifference = 0;
                if (GetTeaCooldown(player) != 0)
                {
                    // Check for Tea Modifier
                    if (TeaModifiers != null && xprecord.teatype != "none")
                    {
                        teahealth = defaulthealth + TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                        teamodified = true;
                    }
                    switch (GetTeaTypes(player))
                    {
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teahealth = defaulthealth + 20;
                            }
                            break;
                    }
                }
                if (player._health > teahealth)
                {
                    healthdifference = player._health - teahealth;
                }
                player._health -= (float)healthdifference;
                LiveStats(player, true);
                return;
            }
            var maxarmor = 100 + ((xprecord.Might * config.might.armor) * 100);
            player._maxHealth = (float)maxarmor;
            LiveStats(player);
        }
        #endregion

        #region Player Actions
        private void OnPlayerInput(BasePlayer player, InputState input)
        {
            if (player == null || input == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity <= 0) return;
            if (input.WasJustPressed(BUTTON.USE) && player.isMounted)
            {
                ChangeHorseSpeed(player);
            }
            if (input.WasJustPressed(BUTTON.RELOAD) && player.isMounted)
            {
                ChangeBoatSpeed(player);
                if (config.dexterity.vehiclespeed > 0)
                {
                    ChangeVehicleSpeed(player);
                    ChangeMiniCopterSpeed(player);
                    ChangeSnowMobSpeed(player);
                }
            }
        }
        private void OnItemAction(Item item, string action, BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || item == null || action == null || item.info.shortname == null) return;
            if (XPerienceAddon != null && item.name != null)
            {
                string itemname = String.Concat(item.name.ToLower().Where(c => !Char.IsWhiteSpace(c)));
                if (XPerienceAddon.Call<bool>("IsSpecialItem", player, itemname)) return;
            }
            var itemshortname = item.info.shortname;
            double addxp = 0;
            switch (action)
            {
                case "upgrade_item":
                    switch (itemshortname)
                    {
                        case "xmas.present.small":
                            addxp = config.xpGain.upgradegiftsmed;
                            break;
                        case "xmas.present.medium":
                            addxp = config.xpGain.upgradegiftslarge;
                            break;
                    }
                    break;
                case "unwrap":
                    switch (itemshortname)
                    {
                        case "xmas.present.small":
                            addxp = config.xpGain.opengifts;
                            break;
                        case "xmas.present.medium":
                            addxp = config.xpGain.opengiftsmed;
                            break;
                        case "xmas.present.large":
                            addxp = config.xpGain.opengiftslarge;
                            break;
                    }
                    break;
            }
            GainExp(player, addxp);
        }
        #endregion

        #region Stat & Skill Hooks/Helpers
        private readonly Dictionary<Rarity, int> rarityValues = new Dictionary<Rarity, int>
        {
            { Rarity.None, 500 },
            { Rarity.Common,  20 },
            { Rarity.Uncommon, 75 },
            { Rarity.Rare, 125 },
            { Rarity.VeryRare, 500 }
        };
        private object OnResearchCostDetermine(Item item, ResearchTable researchTable)
        {
            int rarityvalue = item.info != null ? rarityValues[item.info.rarity] : 500;
            ItemBlueprint itemBlueprint = ItemManager.FindBlueprint(item.info);
            if (itemBlueprint != null && itemBlueprint.defaultBlueprint)
            {
                rarityvalue = ConVar.Server.defaultBlueprintResearchCost;
            }
            if (config.mentality.researchcost == 0) return rarityvalue;
            ResearchTable researchtable = item.GetEntityOwner() as ResearchTable;
            if (researchtable == null || researchtable.user == null) return rarityvalue;
            XPRecord xprecord = GetXPRecord(researchtable.user);
            if (xprecord.Mentality == 0 || xprecord == null) return rarityvalue;
            double reducecost = (config.mentality.researchcost * xprecord.Mentality) * rarityvalue;
            // Captaincy
            if (researchtable.user.Team != null && researchtable.user.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(researchtable.user) * reducecost;
                reducecost += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.researchcost)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * reducecost;
                reducecost += rankboost;
            }
            double researchcost = rarityvalue - reducecost;
            return (int)researchcost;
        }
        [HookMethod("OnResearchCost")]
        private int OnResearchCost(int rarityvalue, BasePlayer player)
        {
            if (player == null)
            {
                return rarityvalue;
            }
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Mentality == 0) return rarityvalue;
            double reducecost = (config.mentality.researchcost * xprecord.Mentality) * rarityvalue;
            double researchcost = rarityvalue - reducecost;
            return (int)researchcost;
        }
        [HookMethod("OnItemResearchReduction")]
        private float OnItemResearchReduction(float value, BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Mentality == 0) return value;
            double researchspeed = (config.mentality.researchspeed * xprecord.Mentality) * value;
            return value - (float)researchspeed;
        }
        private void OnItemResearch(ResearchTable researchTable, Item item, BasePlayer player)
        {
            researchTable.researchDuration = 10f;
            if (player == null || item == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Mentality == 0) return;
            // Reduce Speed
            double researchspeed = (config.mentality.researchspeed * xprecord.Mentality) * researchTable.researchDuration;
            // Captaincy
            if (player.Team != null && player.Team.members.Count > 1)
            {
                double captaincyboost = CaptaincyTeamSkillBoost(player) * researchspeed;
                researchspeed += captaincyboost;
            }
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.researchspeed)
            {
                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * researchspeed;
                researchspeed += rankboost;
            }
            researchTable.researchDuration -= (float)researchspeed;
        }
        private bool CheckUnlockPath(BasePlayer player, TechTreeData.NodeInstance node, TechTreeData techTree)
        {
            if (node.inputs.Count == 0) return true;
            var unlockPath = false;

            foreach (int nodeId in node.inputs)
            {
                var selectNode = techTree.GetByID(nodeId);
                if (selectNode.itemDef == null) return true;

                if (!techTree.HasPlayerUnlocked(player, selectNode)) continue;

                if (CheckUnlockPath(player, selectNode, techTree))
                    unlockPath = true;
            }

            return unlockPath;
        }
        private object CanUnlockTechTreeNode(BasePlayer player, TechTreeData.NodeInstance node, TechTreeData techTree)
        {
            if (player == null) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return null;
            // Check Tech Tree Settings
            if (config.mentality.locktechtree)
            {
                if (config.mentality.unlocktechtreelevel == 0)
                {
                    player.ChatMessage(XPLang("techtreelocked", player.UserIDString));
                    return false;
                }
                if (xprecord.Mentality < config.mentality.unlocktechtreelevel)
                {
                    player.ChatMessage(XPLang("techtreereq", player.UserIDString, config.mentality.unlocktechtreelevel));
                    return false;
                }
            }
            // Continue if Tech Tree Unlocked
            if (xprecord.Mentality == 0) return null;
            int rarityvalue = rarityValues[node.itemDef.rarity];
            double reducecost = (config.mentality.researchcost * xprecord.Mentality) * rarityvalue;
            double researchcost = rarityvalue - reducecost;
            var cost = (int)researchcost;

            var itemdefinition = ItemManager.FindItemDefinition("scrap");
            techTree.GetEntryNode().costOverride = cost;

            if (player.inventory.GetAmount(itemdefinition.itemid) < cost)
            {
                player.ChatMessage(XPLang("techtreenode", player.UserIDString, cost, node.itemDef.displayName.english));
                return false;
            }

            return CheckUnlockPath(player, node, techTree);
        }
        private object OnTechTreeNodeUnlock(Workbench workbench, TechTreeData.NodeInstance node, BasePlayer player)
        {
            if (workbench == null || player == null) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Mentality == 0 || config.mentality.researchcosttechtree == 0) return null;
            int rarityvalue = rarityValues[node.itemDef.rarity];
            double reducecost = (config.mentality.researchcosttechtree * xprecord.Mentality) * rarityvalue;
            double researchcost = rarityvalue - reducecost;
            var cost = (int)researchcost;
            int itemid = ItemManager.FindItemDefinition("scrap").itemid;
            player.inventory.Take((List<Item>)null, itemid, cost);
            player.blueprints.Unlock(node.itemDef);
            Interface.CallHook("OnTechTreeNodeUnlocked", workbench, node, player);
            return false;
        }
        private void OnMixingTableToggle(MixingTable table, BasePlayer player)
        {
            if (table.IsOn()) return;
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Medic > 0)
            {
                NextTick(() =>
                {
                    double reducetotal = (xprecord.Medic * config.medic.crafttime) * table.TotalMixTime;
                    double reduceremaining = (xprecord.Medic * config.medic.crafttime) * table.TotalMixTime;
                    table.TotalMixTime -= (float)reducetotal;
                    table.RemainingMixTime -= (float)reduceremaining;
                    table.SendNetworkUpdateImmediate();
                });
            }
        }
        private double CaptaincyTeamSkillBoost(BasePlayer player)
        {
            if (!CaptaincyTeamDistance(player) || player == null || !player.userID.Get().IsSteamId() || player.Team == null || player.Team.members.Count <= 1) return 0;
            if (CheckPlayerLocation(player, "disableabilities")) return 0;
            foreach (var team in player.Team.members)
            {
                if (team == player.userID) continue;
                BasePlayer teammember = RelationshipManager.FindByID(team);
                if (teammember == null || !teammember.IsConnected) continue;
                XPRecord teamxprecord = GetXPRecord(teammember);
                if (teamxprecord.Captaincy <= 0) continue;
                double skillboost = teamxprecord.Captaincy * config.captaincy.skillboost;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"## CaptaincyTeamSkillBoost ## \n " +
                        $"Skill boost of {skillboost * 100}% from {teammember.displayName} added to {player.displayName}");
                }
                return skillboost;
            }
            return 0;
        }
        private double CaptaincyTeamXPBoost(BasePlayer player)
        {
            if (!CaptaincyTeamDistance(player) || player == null || !player.userID.Get().IsSteamId() || player.Team == null || player.Team.members.Count <= 1) return 0;
            if (CheckPlayerLocation(player, "disableabilities")) return 0;
            foreach (var team in player.Team.members)
            {
                if (!team.IsSteamId()) continue;
                if (team == player.userID) continue;
                BasePlayer teammember = RelationshipManager.FindByID(team);
                XPRecord teamxprecord = GetXPRecord(teammember);
                if (teammember == null || teamxprecord == null) continue;
                if (teamxprecord.Captaincy <= 0) continue;
                double addxp = (teamxprecord.Captaincy * config.captaincy.xpboost);
                if (config.defaultOptions.debugmode)
                {
                    Puts($"## CaptaincyTeamXPBoost ## \n " +
                        $"XP boost of {addxp * 100}% from {teammember.displayName} added to {player.displayName}");
                }
                return addxp;
            }
            return 0;
        }
        private bool CaptaincyTeamDistance(BasePlayer player)
        {
            if (player == null || !player.userID.Get().IsSteamId() || player.Team == null || player.Team.members.Count <= 1) return false;
            if (config.defaultOptions.debugmode)
            {
                Puts("## CaptaincyTeamDistance ##");
            }
            foreach (var team in player.Team.members)
            {
                if (team == player.userID) continue;
                BasePlayer teammember = RelationshipManager.FindByID(team);
                if (teammember == null || !teammember.IsConnected || !teammember.userID.Get().IsSteamId()) continue;
                XPRecord teamxprecord = GetXPRecord(teammember);
                if (teamxprecord.Captaincy <= 0) continue;
                float teamdistance = teamxprecord.Captaincy * config.captaincy.captaincydistance;
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !teamxprecord.DisableRank && config.Rankboostssettings.distance)
                {
                    double rankboost = (teamxprecord.rank * config.xpLevelRanks.rankstatboostamount) * teamdistance;
                    teamdistance += (float)rankboost;
                }
                if (Vector3.Distance(player.ServerPosition, teammember.ServerPosition) >= teamdistance) continue;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"\n Player in Range: {teammember.displayName} @ {Vector3.Distance(player.ServerPosition, teammember.ServerPosition)}m");
                }
                return true;
            }
            return false;
        }
        private void RandomForagerItem(BasePlayer player)
        {
            if (player == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Forager <= 0) return;
            double itemchance = (config.forager.randomchance * xprecord.Forager) * 100;
            // Rank Boost
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.foragerric)
            {
                double rankboostitem = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * itemchance;
                itemchance += rankboostitem;
            }
            // Item Chance
            if ((Random.Range(0, 101) <= itemchance) == true)
            {
                int randomroll = Random.Range(0, config.forager.randomChanceList.Count);
                var selected = config.forager.randomChanceList[randomroll];
                ItemDefinition definition = ItemManager.FindItemDefinition(selected.shortname);
                if (definition == null)
                {
                    Puts($"[Forager] Invalid shortname in config for item number {selected}");
                    return;
                }
                // Check if Special Item
                if (XPerienceAddon != null && selected.displayname != null)
                {
                    string itemname = String.Concat(selected.displayname.ToLower().Where(c => !Char.IsWhiteSpace(c)));
                    if (XPerienceAddon.Call<bool>("IsSpecialItem", player, itemname))
                    {
                        XPerienceAddon?.Call("SpecialDrops", player, itemname, selected.amount);
                        // Sound Effect 
                        if (config.soundEffects.foragerloot)
                        {
                            player.RunEffect($"{config.soundEffects.foragerlooteffect}");
                        }
                        return;
                    }
                }
                if (config.defaultOptions.dropsgotoplayerinventory)
                {
                    Item createitem = ItemManager.CreateByItemID(definition.itemid, selected.amount, selected.SkinID);
                    if (!string.IsNullOrEmpty(selected.displayname))
                    {
                        createitem.name = selected.displayname;
                        createitem.MarkDirty();
                    }
                    // Return if Item is Null
                    if (createitem == null)
                    {
                        Puts($"[Forager List] Error creating item with skinid {selected.SkinID} for item {selected.shortname}");
                        return;
                    }
                    // Give Item to Player
                    player.GiveItem(createitem);
                }
                else
                {
                    Item createitem = ItemManager.CreateByItemID(definition.itemid, selected.amount, selected.SkinID);
                    if (!string.IsNullOrEmpty(selected.displayname))
                    {
                        createitem.name = selected.displayname;
                        createitem.MarkDirty();
                    }
                    // Return if Item is Null
                    if (createitem == null)
                    {
                        Puts($"[Forager List] Error creating item with skinid {selected.SkinID} for item {selected.shortname}");
                        return;
                    }
                    player.Command("note.inv", definition.itemid, selected.amount, selected.SkinID);
                    // Give Item to Player
                    player.GiveItem(createitem);
                }
                // Sound Effect 
                if (config.soundEffects.foragerloot)
                {
                    player.RunEffect($"{config.soundEffects.foragerlooteffect}");
                }
            }
        }
        private void RandomScavengerItem(BasePlayer player)
        {
            if (player == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Scavenger <= 0) return;
            var scavChanceLists = new Dictionary<int, ScavChanceList>();
            int number = 0;
            foreach (var item in config.scavenger.scavChanceList)
            {
                if (item.Value.requiredlevel <= xprecord.Scavenger)
                {
                    scavChanceLists.Add(number, item.Value);
                    number++;
                }
            }
            double scavchance = (config.scavenger.scavchance * xprecord.Scavenger) * 100;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavcic)
            {
                double rankboostchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * scavchance;
                scavchance += rankboostchance;
            }
            if ((Random.Range(0, 101) <= scavchance) == true)
            {
                int scavroll = Random.Range(0, scavChanceLists.Count);
                var scavitem = scavChanceLists[scavroll];
                ItemDefinition definition = ItemManager.FindItemDefinition(scavitem.shortname);
                if (definition == null)
                {
                    Puts($"[Scavenger] Invalid shortname in config for item number {scavroll}");
                    return;
                }
                var scavmultiplier = Math.Ceiling(xprecord.Scavenger * (scavitem.amount * config.scavenger.customscavmultiplier));
                if (config.scavenger.customscavrandom)
                {
                    scavmultiplier = Random.Range(scavitem.amount, (float)scavmultiplier);
                }
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavcim)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * scavmultiplier;
                    scavmultiplier += rankboost;
                }
                if (scavmultiplier > scavitem.maxamount)
                {
                    scavmultiplier = scavitem.maxamount;
                }
                // Check if Special Item
                if (XPerienceAddon != null && scavitem.displayname != null)
                {
                    string itemname = String.Concat(scavitem.displayname.ToLower().Where(c => !Char.IsWhiteSpace(c)));
                    if (XPerienceAddon.Call<bool>("IsSpecialItem", player, itemname))
                    {
                        XPerienceAddon?.Call("SpecialDrops", player, itemname, (int)scavmultiplier);
                        // Sound Effect 
                        if (config.soundEffects.scavengerloot)
                        {
                            player.RunEffect($"{config.soundEffects.scavengerlooteffect}");
                        }
                        return;
                    }
                }
                // Continue if not special item
                if (config.defaultOptions.dropsgotoplayerinventory)
                {
                    Item createitem = ItemManager.CreateByItemID(definition.itemid, (int)scavmultiplier, scavitem.SkinID);
                    if (!string.IsNullOrEmpty(scavitem.displayname))
                    {
                        createitem.name = scavitem.displayname;
                        createitem.MarkDirty();
                    }
                    // Return if Item is Null
                    if (createitem == null)
                    {
                        Puts($"[Scavenger List] Error creating item with skinid {scavitem.SkinID} for item {scavitem.shortname}");
                        return;
                    }
                    // Give Item to Player
                    player.GiveItem(createitem);
                }
                else
                {
                    Item createitem = ItemManager.CreateByItemID(definition.itemid, (int)scavmultiplier, scavitem.SkinID);
                    if (!string.IsNullOrEmpty(scavitem.displayname))
                    {
                        createitem.name = scavitem.displayname;
                        createitem.MarkDirty();
                    }
                    // Return if Item is Null
                    if (createitem == null)
                    {
                        Puts($"[Scavenger List] Error creating item with skinid {scavitem.SkinID} for item {scavitem.shortname}");
                        return;
                    }
                    player.Command("note.inv", definition.itemid, scavitem.amount, scavitem.SkinID);
                    // Give Item to Player
                    player.GiveItem(createitem);
                }
                // Sound Effect 
                if (config.soundEffects.scavengerloot)
                {
                    player.RunEffect($"{config.soundEffects.scavengerlooteffect}");
                }
            }
        }
        private void IncreaseLootContainers(BasePlayer player, LootContainer lootcontainer)
        {
            if (player == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Scavenger <= 0) return;
            double scavlootchance = (config.scavenger.scavlootchance * xprecord.Scavenger) * 100;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelc)
            {
                double rankboostchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * scavlootchance;
                scavlootchance += rankboostchance;
            }
            if ((Random.Range(0, 101) <= scavlootchance) == true)
            {
                if (lootcontainer.inventory == null) return;
                lootcontainer.inventory.itemList.ForEach(item =>
                {
                    if (config.scavenger.componentsonly)
                    {
                        if (item != null && item.info.category == ItemCategory.Component)
                        {
                            int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                            // Ranks
                            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelm)
                            {
                                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                newamount += (int)Math.Ceiling(rankboost);
                            }
                            item.amount = newamount;
                        }
                    }
                    else
                    {
                        if (item != null)
                        {
                            int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                            // Ranks
                            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
                            {
                                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                newamount += (int)Math.Ceiling(rankboost);
                            }
                            item.amount = newamount;
                        }
                    }
                });
                // Sound Effect 
                if (config.soundEffects.scavengerloot)
                {
                    player.RunEffect($"{config.soundEffects.scavengerlooteffect}");
                }
            }
        }
        private void IncreaseLootContainerDrops(ItemContainer lootcontainer)
        {
            if (lootcontainer == null) return;
            var lootentity = lootcontainer.entityOwner as LootContainer;
            if (lootentity == null || lootentity.IsDestroyed) return;
            var player = lootentity.lastAttacker as BasePlayer;
            if (player == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.Scavenger <= 0) return;
            double scavlootchance = (config.scavenger.scavlootchance * xprecord.Scavenger) * 100;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelc)
            {
                double rankboostchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * scavlootchance;
                scavlootchance += rankboostchance;
            }
            if ((Random.Range(0, 101) <= scavlootchance) == true)
            {
                lootcontainer.itemList.ForEach(item =>
                {
                    if (config.scavenger.componentsonly)
                    {
                        if (item != null && item.info.category == ItemCategory.Component)
                        {
                            int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                            // Ranks
                            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank)
                            {
                                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                newamount += (int)Math.Ceiling(rankboost);
                            }
                            item.amount = newamount;
                        }
                    }
                    else
                    {
                        if (item != null)
                        {
                            int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                            // Ranks
                            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelm)
                            {
                                double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                newamount += (int)Math.Ceiling(rankboost);
                            }
                            item.amount = newamount;
                        }
                    }
                });
                // Sound Effect 
                if (config.soundEffects.scavengerloot)
                {
                    player.RunEffect($"{config.soundEffects.scavengerlooteffect}");
                }
            }
        }
        private void IncreaseLootCorpse(BasePlayer player, LootableCorpse corpse)
        {
            if (player == null || !player.userID.Get().IsSteamId() || corpse == null) return;
            if (CheckPlayerLocation(player, "disableabilities")) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord.Scavenger <= 0) return;
            double scavlootchance = (config.scavenger.scavlootchance * xprecord.Scavenger) * 100;
            // Ranks
            if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelc)
            {
                double rankboostchance = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * scavlootchance;
                scavlootchance += rankboostchance;
            }
            if ((Random.Range(0, 101) <= scavlootchance) == true)
            {
                foreach (var corpseContainer in corpse.containers)
                {
                    if (corpseContainer.itemList.Count == 0) continue;
                    foreach (var item in corpseContainer.itemList)
                    {
                        if (config.scavenger.componentsonly)
                        {
                            if (item != null && item.info.category == ItemCategory.Component)
                            {
                                int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                                // Ranks
                                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelm)
                                {
                                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                    newamount += (int)Math.Ceiling(rankboost);
                                }
                                item.amount = newamount;
                            }
                        }
                        else
                        {
                            if (item != null)
                            {
                                int newamount = (int)Math.Ceiling((xprecord.Scavenger * config.scavenger.scavmultiplier) * item.amount);
                                // Ranks
                                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.scavelm)
                                {
                                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * newamount;
                                    newamount += (int)Math.Ceiling(rankboost);
                                }
                                item.amount = newamount;
                            }
                        }
                    }
                }
                // Sound Effect 
                if (config.soundEffects.scavengerloot)
                {
                    player.RunEffect($"{config.soundEffects.scavengerlooteffect}");
                }
            }
        }
        private void OnFishCatch(Item fish, BaseFishingRod fishingRod, BasePlayer player)
        {
            if (player == null || fish == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (!CheckPlayerLocation(player, "noxpgain"))
            {
                double addxp = config.xpGain.fishxp;
                GainExp(player, addxp);
            }
            if (CheckPlayerLocation(player, "disableabilities")) return;
            if (xprecord.Fisher > 0)
            {
                var fishname = fish.info.shortname;
                if (fishname.Contains("anchovy") || fishname.Contains("catfish") || fishname.Contains("herring") || fishname.Contains("minnow") || fishname.Contains("roughy") || fishname.Contains("salmon") || fishname.Contains("sardine") || fishname.Contains("shark") || fishname.Contains("trout") || fishname.Contains("Perch"))
                {
                    double results = Math.Round(fish.amount + (xprecord.Fisher * config.fisher.fishamountincrease));
                    // Captaincy
                    if (player.Team != null && player.Team.members.Count > 1)
                    {
                        double captaincyboost = CaptaincyTeamSkillBoost(player) * results;
                        results += (int)Math.Ceiling(captaincyboost);
                    }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.fisherfa)
                    {
                        double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * results;
                        results += (int)Math.Ceiling(rankboost);
                    }
                    fish.amount = (int)results;
                }
                else
                {
                    double results = Math.Round(fish.amount + (xprecord.Fisher * config.fisher.itemamountincrease));
                    // Captaincy
                    if (player.Team != null && player.Team.members.Count > 1)
                    {
                        double captaincyboost = CaptaincyTeamSkillBoost(player) * results;
                        results += (int)Math.Ceiling(captaincyboost);
                    }
                    // Ranks
                    if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.fisheria)
                    {
                        double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * results;
                        results += (int)Math.Ceiling(rankboost);
                    }
                    fish.amount = (int)results;
                }
            }
        }
        private void OnMagazineReload(BaseProjectile projectile, int desiredAmount, BasePlayer player)
        {
            if (config.weaponry.reloadhook != "OnMagazineReload") return;
            if (WeaponMechanics != null) return;
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc) return;
            if (config.weaponry.maxammo == 0) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            // Excluded Weapons Check
            if (config.defaultOptions.debugmode)
            {
                Puts($"OnMagazineReload: {projectile.ShortPrefabName}");
            }
            bool excluded = false;
            string[] excludeweapons = config.weaponry.excludedweapons.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string ex in excludeweapons)
            {
                if (projectile.ShortPrefabName.Contains(ex))
                {
                    excluded = true;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Excluded Weapons Detected");
                    }
                }
            }
            // Check for SkinBox mod as conflict occur
            bool skinboxdetected = false;
            if (SkinBox != null && config.weaponry.skinboxdisable)
            {
                skinboxdetected = true;
            }
            if (skinboxdetected && projectile.skinID != 0) return;
            // Get Default Weapon Data
            int defaultammo = projectile.primaryMagazine.capacity;
            int maxammo = projectile.primaryMagazine.capacity;
            double defaultreload = projectile.reloadTime;
            double newreload = projectile.reloadTime;
            double defaultdistance = projectile.distanceScale;
            double maxdistance = projectile.distanceScale;
            double defaultrange = projectile.effectiveRange;
            double maxrange = projectile.effectiveRange;
            // Weapon Mechanics
            if (WeaponMechanics != null)
            {
                if (!config.weaponry.useweaponmechanics) return;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"WeaponMechanics Detected: Checking for listed weapons...");
                }
                Item item = projectile?.GetItem();
                if (item != null)
                {
                    bool isaltered = (bool)WeaponMechanics?.CallHook("IsWeaponListed", item.info.shortname);
                    if (isaltered)
                    {
                        if (config.defaultOptions.debugmode)
                        {
                            Puts($"Weapon listed, getting new default values from Weapon Mechanics...");
                        }
                        defaultammo = (int)WeaponMechanics?.CallHook("WMGetMaxAmmo", item.info.shortname);
                        defaultdistance = (float)WeaponMechanics?.CallHook("WMGetWeaponData", item.info.shortname, "distancescale");
                        defaultrange = (float)WeaponMechanics?.CallHook("WMGetWeaponData", item.info.shortname, "effectiverange");
                        if (config.defaultOptions.debugmode)
                        {
                            Puts($"New default values recieved, appling before XPerience skill adjustment...");
                        }
                    }
                }
            }
            // Add New Weapon Data
            if (!_weaponCache.ContainsKey(projectile.net.ID.Value))
            {
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Adding New Weapon to Cache");
                }
                if (CheckPlayerLocation(player, "disableabilities") || excluded)
                {
                    AddWeaponData(player, projectile, defaultammo, maxammo, defaultreload, newreload, defaultdistance, maxdistance, defaultrange, maxrange, projectile.net.ID);
                    return;
                }
                if (xprecord.Weaponry >= 1 && !excluded)
                {
                    maxammo = (int)Math.Ceiling(projectile.primaryMagazine.capacity + ((config.weaponry.maxammo * xprecord.Weaponry) * projectile.primaryMagazine.capacity));
                    if (maxammo >= defaultammo * config.weaponry.maxammolimit)
                    {
                        maxammo = (int)Math.Ceiling(defaultammo * config.weaponry.maxammolimit);
                    }
                    if (XPerienceAddon)
                    {
                        //newreload = defaultreload - ((defaultreload * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "reload")));
                        maxdistance = defaultdistance + ((defaultdistance * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "distance")));
                        maxrange = defaultrange + ((defaultrange * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "range")));
                    }
                }
                AddWeaponData(player, projectile, defaultammo, maxammo, defaultreload, newreload, defaultdistance, maxdistance, defaultrange, maxrange, projectile.net.ID);
                projectile.primaryMagazine.capacity = maxammo;
                //projectile.reloadTime = (float)newreload;
                projectile.distanceScale = (float)maxdistance;
                projectile.effectiveRange = (float)maxrange;
                return;
            }
            // Get Weapon Data
            Weapon weapon;
            if (_weaponCache.TryGetValue(projectile.net.ID.Value, out weapon))
            {
                // Weapon Found / Reset Weapon / Boost Max Ammo if Player Has Ability
                maxammo = weapon.defaultammo;
                //reload = weapon.defaultreload;
                maxdistance = weapon.defaultdistance;
                maxrange = weapon.defaultrange;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Weapon found in Cache");
                }
                if (CheckPlayerLocation(player, "disableabilities") || excluded)
                {
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Player is in restricted location or Weapon is excluded.. loading default values");
                    }
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
                if (xprecord.Weaponry >= 1 && !excluded)
                {
                    maxammo = (int)Math.Ceiling(weapon.defaultammo + ((config.weaponry.maxammo * xprecord.Weaponry) * weapon.defaultammo));
                    if (maxammo >= weapon.defaultammo * config.weaponry.maxammolimit)
                    {
                        maxammo = (int)Math.Ceiling(weapon.defaultammo * config.weaponry.maxammolimit);
                    }
                    if (XPerienceAddon)
                    {
                        //reload = reload - ((reload * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "reload")));
                        maxdistance = maxdistance + ((maxdistance * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "distance")));
                        maxrange = maxrange + ((maxrange * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "range")));
                    }
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
                if (xprecord.Weaponry < 1 || excluded)
                {
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
            }
        }
        private void OnWeaponReload(BaseProjectile projectile, BasePlayer player)
        {
            if (config.weaponry.reloadhook != "OnWeaponReload") return;
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc) return;
            if (config.weaponry.maxammo == 0) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            // Excluded Weapons Check
            if (config.defaultOptions.debugmode)
            {
                Puts($"OnWeaponReload: {projectile.ShortPrefabName}");
            }
            bool excluded = false;
            string[] excludeweapons = config.weaponry.excludedweapons.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string ex in excludeweapons)
            {
                if (projectile.ShortPrefabName.Contains(ex))
                {
                    excluded = true;
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Excluded Weapons Detected");
                    }
                }
            }
            // Check for SkinBox mod as conflict occur
            bool skinboxdetected = false;
            if (SkinBox != null && config.weaponry.skinboxdisable)
            {
                skinboxdetected = true;
            }
            if (skinboxdetected && projectile.skinID != 0) return;
            // Get Default Weapon Data
            int defaultammo = projectile.primaryMagazine.capacity;
            int maxammo = projectile.primaryMagazine.capacity;
            double defaultreload = projectile.reloadTime;
            double newreload = projectile.reloadTime;
            double defaultdistance = projectile.distanceScale;
            double maxdistance = projectile.distanceScale;
            double defaultrange = projectile.effectiveRange;
            double maxrange = projectile.effectiveRange;
            // Weapon Mechanics
            if (WeaponMechanics != null)
            {
                if (!config.weaponry.useweaponmechanics) return;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"WeaponMechanics Detected: Checking for listed weapons...");
                }
                Item item = projectile?.GetItem();
                if (item != null)
                {
                    bool isaltered = (bool)WeaponMechanics?.CallHook("IsWeaponListed", item.info.shortname);
                    if (isaltered)
                    {
                        if (config.defaultOptions.debugmode)
                        {
                            Puts($"Weapon listed, getting new default values from Weapon Mechanics...");
                        }
                        defaultammo = (int)WeaponMechanics?.CallHook("WMGetMaxAmmo", item.info.shortname);
                        defaultdistance = (float)WeaponMechanics?.CallHook("WMGetWeaponData", item.info.shortname, "distancescale");
                        defaultrange = (float)WeaponMechanics?.CallHook("WMGetWeaponData", item.info.shortname, "effectiverange");
                        if (config.defaultOptions.debugmode)
                        {
                            Puts($"New default values recieved, appling before XPerience skill adjustment...");
                        }
                    }
                }
            }
            // Add New Weapon Data
            if (!_weaponCache.ContainsKey(projectile.net.ID.Value))
            {
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Adding New Weapon to Cache");
                }
                if (CheckPlayerLocation(player, "disableabilities") || excluded)
                {
                    AddWeaponData(player, projectile, defaultammo, maxammo, defaultreload, newreload, defaultdistance, maxdistance, defaultrange, maxrange, projectile.net.ID);
                    return;
                }
                if (xprecord.Weaponry >= 1 && !excluded)
                {
                    maxammo = (int)Math.Ceiling(projectile.primaryMagazine.capacity + ((config.weaponry.maxammo * xprecord.Weaponry) * projectile.primaryMagazine.capacity));
                    if (maxammo >= defaultammo * config.weaponry.maxammolimit)
                    {
                        maxammo = (int)Math.Ceiling(defaultammo * config.weaponry.maxammolimit);
                    }
                    if (XPerienceAddon)
                    {
                        //newreload = defaultreload - ((defaultreload * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "reload")));
                        maxdistance = defaultdistance + ((defaultdistance * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "distance")));
                        maxrange = defaultrange + ((defaultrange * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "range")));
                    }
                }
                AddWeaponData(player, projectile, defaultammo, maxammo, defaultreload, newreload, defaultdistance, maxdistance, defaultrange, maxrange, projectile.net.ID);
                projectile.primaryMagazine.capacity = maxammo;
                //projectile.reloadTime = (float)newreload;
                projectile.distanceScale = (float)maxdistance;
                projectile.effectiveRange = (float)maxrange;
                return;
            }
            // Get Weapon Data
            Weapon weapon;
            if (_weaponCache.TryGetValue(projectile.net.ID.Value, out weapon))
            {
                // Weapon Found / Reset Weapon / Boost Max Ammo if Player Has Ability
                maxammo = weapon.defaultammo;
                //reload = weapon.defaultreload;
                maxdistance = weapon.defaultdistance;
                maxrange = weapon.defaultrange;
                if (config.defaultOptions.debugmode)
                {
                    Puts($"Weapon found in Cache");
                }
                if (CheckPlayerLocation(player, "disableabilities") || excluded)
                {
                    if (config.defaultOptions.debugmode)
                    {
                        Puts($"Player is in restricted location or Weapon is excluded.. loading default values");
                    }
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
                if (xprecord.Weaponry >= 1 && !excluded)
                {
                    maxammo = (int)Math.Ceiling(weapon.defaultammo + ((config.weaponry.maxammo * xprecord.Weaponry) * weapon.defaultammo));
                    if (maxammo >= weapon.defaultammo * config.weaponry.maxammolimit)
                    {
                        maxammo = (int)Math.Ceiling(weapon.defaultammo * config.weaponry.maxammolimit);
                    }
                    if (XPerienceAddon)
                    {
                        //reload = reload - ((reload * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "reload")));
                        maxdistance = maxdistance + ((maxdistance * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "distance")));
                        maxrange = maxrange + ((maxrange * xprecord.Weaponry) * Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "range")));
                    }
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
                if (xprecord.Weaponry < 1 || excluded)
                {
                    projectile.primaryMagazine.capacity = maxammo;
                    //projectile.reloadTime = (float)reload;
                    projectile.distanceScale = (float)maxdistance;
                    projectile.effectiveRange = (float)maxrange;
                    return;
                }
            }
        }
        private object OnLoseCondition(Item item, ref float amount)
        {
            if (item == null) return null;
            //if (NeverWear != null) return null;
            // NeverWear Plugin
            bool tooldurability = true;
            bool weapondurability = true;
            if (NeverWear != null && !config.weaponry.neverweartools && !config.weaponry.neverwearweapons) return null;
            if (NeverWear != null)
            {
                if (!config.weaponry.neverweartools)
                {
                    tooldurability = false;
                }
                if (!config.weaponry.neverwearweapons)
                {
                    weapondurability = false;
                }
            }
            // Weapon Mechanics
            if (WeaponMechanics != null)
            {
                bool isbreakable = (bool)WeaponMechanics?.CallHook("IsWeaponunbreakable", item.info.shortname);
                if(!isbreakable) return null; 
            }
            var player = GetOwnerPlayer(item);
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc) return null;
            if (CheckPlayerLocation(player, "disableabilities")) return null;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return null;
            // Weaponry Stat
            if (xprecord.Weaponry >= 1)
            {
                // Chance to reduce condition damage
                double reductionchance = (config.weaponry.reductionchance * xprecord.Weaponry) * 100;
                if ((Random.Range(0, 101) <= reductionchance) == true)
                {
                    //Tools
                    if (tooldurability && (item.info.shortname.Contains("hatchet") || item.info.shortname.Contains("axe") || item.info.shortname.Contains("pickaxe") || item.info.shortname.Contains("icepick")))
                    {
                        double reducecondition = amount * (xprecord.Weaponry * config.weaponry.tool);
                        amount -= (float)reducecondition;
                        // Make sure reduction does not go 0 or add condition
                        if (amount < config.weaponry.mindamage)
                        {
                            amount = (float)config.weaponry.mindamage;
                        }
                    }
                    // Power Tools
                    if (tooldurability && (item.info.shortname.Contains("chainsaw") || item.info.shortname.Contains("jackhammer")))
                    {
                        double reducecondition = amount * (xprecord.Weaponry * config.weaponry.powertools);
                        amount -= (float)reducecondition;
                        // Make sure reduction does not go 0 or add condition
                        if (amount < config.weaponry.mindamage)
                        {
                            amount = (float)config.weaponry.mindamage;
                        }
                    }
                    // Melee Weapons
                    if (weapondurability && (item.info.shortname.Contains("spear") || item.info.shortname.Contains("knife") || item.info.shortname.Contains("mace") || item.info.shortname.Contains("machete") || item.info.shortname.Contains("club") || item.info.shortname.Contains("sword") || item.info.shortname.Contains("longsword") || item.info.shortname.Contains("cleaver")))
                    {
                        double reducecondition = amount * (xprecord.Weaponry * config.weaponry.meleeweapons);
                        amount -= (float)reducecondition;
                        // Make sure reduction does not go 0 or add condition
                        if (amount < config.weaponry.mindamage)
                        {
                            amount = (float)config.weaponry.mindamage;
                        }
                    }
                    // Projectile Weapons
                    if (weapondurability && (item.info.shortname.Contains("rifle") || item.info.shortname.Contains("smg") || item.info.shortname.Contains("shotgun") || item.info.shortname.Contains("bow") || item.info.shortname.Contains("pistol") || item.info.shortname.Contains("lmg")))
                    {
                        double reducecondition = amount * (xprecord.Weaponry * config.weaponry.projectileweapons);
                        amount -= (float)reducecondition;
                        // Make sure reduction does not go 0 or add condition
                        if (amount < config.weaponry.mindamage)
                        {
                            amount = (float)config.weaponry.mindamage;
                        }
                    }
                }
                return amount;
            }
            // Fisher Diving Tank Reduction
            if (xprecord.Fisher >= 1 && item.info.shortname.Equals("diving.tank"))
            {
                double reducedair = amount * (xprecord.Fisher * config.fisher.oxygentankreduction);
                amount -= (float)reducedair;
                // Ranks
                if (config.xpLevelRanks.rankskillboost && !xprecord.DisableRank && config.Rankboostssettings.fisherotr)
                {
                    double rankboost = (xprecord.rank * config.xpLevelRanks.rankstatboostamount) * amount;
                    amount -= (float)rankboost;
                }
                if (amount <= 0)
                {
                    amount = 0.25f;
                }
                return amount;
            }
            return null;
        }
        private void OnSolarPanelSunUpdate(SolarPanel panel, int currentEnergy)
        {
            if (config.electrician.maxlvl <= 0) return;
            panel.maximalPowerOutput = config.electrician.solarpaneldefault;
            string panelowner = panel.OwnerID.ToString();
            if (!panelowner.IsSteamId()) return;
            var player = FindPlayer(panelowner);
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            // Max Output
            // Add new solar panel if missing
            if (!_electricianCache.ContainsKey(panel.net.ID.Value))
            {
                if (xprecord.Electrician < 1)
                {
                    AddElectricianData(panel.net.ID.Value, "solarpanel", config.electrician.solarpaneldefault, config.electrician.solarpaneldefault, panel.OwnerID);
                    return;
                }
                if (xprecord.Electrician >= 1)
                {
                    double newmaxenergy = ((config.electrician.solarpanelmaxincrease * xprecord.Electrician) * panel.maximalPowerOutput) + panel.maximalPowerOutput;
                    AddElectricianData(panel.net.ID.Value, "solarpanel", config.electrician.solarpaneldefault, (int)Math.Round(newmaxenergy), panel.OwnerID);
                    panel.maximalPowerOutput = (int)Math.Round(newmaxenergy);
                }
            }
            // Load solar panel data if found
            ElectricianD loadpanel;
            if (_electricianCache.TryGetValue(panel.net.ID.Value, out loadpanel))
            {
                if (xprecord.Electrician < 1)
                {
                    loadpanel.newmaxoutput = config.electrician.solarpaneldefault;
                    return;
                }
                double maxoutput = ((config.electrician.solarpanelmaxincrease * xprecord.Electrician) * panel.maximalPowerOutput) + panel.maximalPowerOutput;
                if ((int)maxoutput != loadpanel.newmaxoutput)
                {
                    loadpanel.newmaxoutput = (int)Math.Round(maxoutput);
                    panel.maximalPowerOutput = (int)Math.Round(maxoutput);
                }
                else
                {
                    panel.maximalPowerOutput = loadpanel.newmaxoutput;
                }
            }
            // Current Input & Output
            if (xprecord.Electrician < 1) return;
            if (xprecord.Electrician >= 1)
            {
                double increaseinput = ((config.electrician.solarpanelinputincrease * xprecord.Electrician) * currentEnergy) + currentEnergy;
                if (increaseinput > panel.maximalPowerOutput)
                {
                    increaseinput = panel.maximalPowerOutput;
                }
                panel.currentEnergy = (int)Math.Round(increaseinput);
                if (currentEnergy <= 0 && config.electrician.allowminsolarinput)
                {
                    panel.currentEnergy = config.electrician.minsolarinput * xprecord.Electrician;
                }
            }
        }
        private void OnInputUpdate(IOEntity entity, int inputAmount, int slot)
        {
            if (config.electrician.maxlvl <= 0) return;
            // ElectricBattery
            if (entity.GetType().Name == "ElectricBattery")
            {
                ElectricBattery electricBattery = (ElectricBattery)entity;
                string batteryowner = electricBattery.OwnerID.ToString();
                if (!batteryowner.IsSteamId()) return;
                var player = FindPlayer(batteryowner);
                if (player == null) return;
                XPRecord xprecord = GetXPRecord(player);
                int defaultmaxoutput = 0;
                double newmaxoutput = 0;
                string name = "";
                switch (electricBattery.ShortPrefabName)
                {
                    case "smallrechargablebattery.deployed":
                        defaultmaxoutput = config.electrician.smallbatterydefault;
                        newmaxoutput = config.electrician.smallbatterymaxincrease;
                        name = "SmallBattery";
                        break;
                    case "medium.rechargable.battery.deployed":
                        defaultmaxoutput = config.electrician.mediumbatterydefault;
                        newmaxoutput = config.electrician.mediumbatterymaxincrease;
                        name = "MediumBattery";
                        break;
                    case "large.rechargable.battery.deployed":
                        defaultmaxoutput = config.electrician.largebatterydefault;
                        newmaxoutput = config.electrician.largebatterymaxincrease;
                        name = "LargeBattery";
                        break;
                }
                // Add new battery if missing
                if (!_electricianCache.ContainsKey(electricBattery.net.ID.Value))
                {
                    if (xprecord.Electrician < 1)
                    {
                        electricBattery.maxOutput = defaultmaxoutput;
                        AddElectricianData(electricBattery.net.ID.Value, name, defaultmaxoutput, defaultmaxoutput, electricBattery.OwnerID);
                        return;
                    }
                    if (xprecord.Electrician >= 1)
                    {
                        electricBattery.maxOutput = defaultmaxoutput;
                        double newmaxenergy = ((newmaxoutput * xprecord.Electrician) * electricBattery.maxOutput) + electricBattery.maxOutput;
                        AddElectricianData(electricBattery.net.ID.Value, name, defaultmaxoutput, (int)Math.Round(newmaxenergy), electricBattery.OwnerID);
                        electricBattery.maxOutput = (int)Math.Round(newmaxenergy);
                    }
                }
                // Load solar panel data if found
                ElectricianD loadbattery;
                if (_electricianCache.TryGetValue(electricBattery.net.ID.Value, out loadbattery))
                {
                    if (xprecord.Electrician < 1)
                    {
                        electricBattery.maxOutput = defaultmaxoutput;
                        loadbattery.newmaxoutput = defaultmaxoutput;
                        return;
                    }
                    double maxoutput = ((config.electrician.solarpanelmaxincrease * xprecord.Electrician) * electricBattery.maxOutput) + electricBattery.maxOutput;
                    if ((int)maxoutput != loadbattery.newmaxoutput)
                    {
                        loadbattery.newmaxoutput = (int)Math.Round(maxoutput);
                        electricBattery.maxOutput = (int)Math.Round(maxoutput);
                    }
                    else
                    {
                        electricBattery.maxOutput = loadbattery.newmaxoutput;
                    }
                }
            }
        }
        private void OnOutputUpdate(IOEntity entity)
        {
            if (config.electrician.maxlvl <= 0) return;
            // Fuel Generator
            if (entity.GetType().Name == "FuelGenerator")
            {
                FuelGenerator generator = (FuelGenerator)entity;
                string generatorowner = generator.OwnerID.ToString();
                if (!generatorowner.IsSteamId()) return;
                var player = FindPlayer(generatorowner);
                if (player == null) return;
                XPRecord xprecord = GetXPRecord(player);
                // Add new generator if missing           
                if (!_electricianCache.ContainsKey(generator.net.ID.Value))
                {
                    if (xprecord.Electrician < 1)
                    {
                        generator.outputEnergy = config.electrician.smallgeneratordefault;
                        AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, config.electrician.smallgeneratordefault, generator.OwnerID);
                        return;
                    }
                    if (xprecord.Electrician >= 1)
                    {
                        generator.outputEnergy = config.electrician.smallgeneratordefault;
                        double newmaxenergy = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                        AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, (int)Math.Round(newmaxenergy), generator.OwnerID);
                        generator.outputEnergy = (int)Math.Round(newmaxenergy);
                    }
                }
                // Load generator data if found
                ElectricianD loadgenerator;
                if (_electricianCache.TryGetValue(generator.net.ID.Value, out loadgenerator))
                {
                    if (xprecord.Electrician < 1)
                    {
                        generator.outputEnergy = config.electrician.smallgeneratordefault;
                        loadgenerator.newmaxoutput = config.electrician.smallgeneratordefault;
                        return;
                    }
                    double maxoutput = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                    if ((int)maxoutput != loadgenerator.newmaxoutput)
                    {
                        loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                        generator.outputEnergy = (int)Math.Round(maxoutput);
                    }
                    else
                    {
                        generator.outputEnergy = loadgenerator.newmaxoutput;
                    }
                }
            }
            // Electric Battery
            if (entity.GetType().Name == "ElectricBattery")
            {
                ElectricBattery electricBattery = (ElectricBattery)entity;
                string batteryowner = electricBattery.OwnerID.ToString();
                if (!batteryowner.IsSteamId()) return;
                var player = FindPlayer(batteryowner);
                if (player == null) return;
                XPRecord xprecord = GetXPRecord(player);
                int defaultbattmaxoutput = 0;
                double newbattmaxoutput = 0;
                string battname = "";
                switch (electricBattery.ShortPrefabName)
                {
                    case "smallrechargablebattery.deployed":
                        defaultbattmaxoutput = config.electrician.smallbatterydefault;
                        newbattmaxoutput = config.electrician.smallbatterymaxincrease;
                        battname = "SmallBattery";
                        break;
                    case "medium.rechargable.battery.deployed":
                        defaultbattmaxoutput = config.electrician.mediumbatterydefault;
                        newbattmaxoutput = config.electrician.mediumbatterymaxincrease;
                        battname = "MediumBattery";
                        break;
                    case "large.rechargable.battery.deployed":
                        defaultbattmaxoutput = config.electrician.largebatterydefault;
                        newbattmaxoutput = config.electrician.largebatterymaxincrease;
                        battname = "LargeBattery";
                        break;
                }
                // Add new battery if missing
                if (!_electricianCache.ContainsKey(electricBattery.net.ID.Value))
                {
                    if (xprecord.Electrician < 1)
                    {
                        electricBattery.maxOutput = defaultbattmaxoutput;
                        AddElectricianData(electricBattery.net.ID.Value, battname, defaultbattmaxoutput, defaultbattmaxoutput, electricBattery.OwnerID);
                        return;
                    }
                    if (xprecord.Electrician >= 1)
                    {
                        electricBattery.maxOutput = defaultbattmaxoutput;
                        double newmaxenergy = ((newbattmaxoutput * xprecord.Electrician) * electricBattery.maxOutput) + electricBattery.maxOutput;
                        AddElectricianData(electricBattery.net.ID.Value, battname, defaultbattmaxoutput, (int)Math.Round(newmaxenergy), electricBattery.OwnerID);
                        electricBattery.maxOutput = (int)Math.Round(newmaxenergy);
                    }
                }
                // Load battery data if found
                ElectricianD loadbattery;
                if (_electricianCache.TryGetValue(electricBattery.net.ID.Value, out loadbattery))
                {
                    if (xprecord.Electrician < 1)
                    {
                        electricBattery.maxOutput = defaultbattmaxoutput;
                        loadbattery.newmaxoutput = defaultbattmaxoutput;
                        return;
                    }
                    double maxoutput = ((config.electrician.solarpanelmaxincrease * xprecord.Electrician) * defaultbattmaxoutput) + defaultbattmaxoutput;
                    if ((int)maxoutput != loadbattery.newmaxoutput)
                    {
                        loadbattery.newmaxoutput = (int)Math.Round(maxoutput);
                        electricBattery.maxOutput = (int)Math.Round(maxoutput);
                    }
                    else
                    {
                        electricBattery.maxOutput = loadbattery.newmaxoutput;
                    }
                }
            }
            // Electric Windmill
            if (entity.GetType().Name == "ElectricWindmill")
            {
                ElectricWindmill windmill = (ElectricWindmill)entity;
                string windmillowner = windmill.OwnerID.ToString();
                if (!windmillowner.IsSteamId()) return;
                var player = FindPlayer(windmillowner);
                if (player == null) return;
                XPRecord xprecord = GetXPRecord(player);
                // Max Output
                // Add new windmill if missing
                if (!_electricianCache.ContainsKey(windmill.net.ID.Value))
                {
                    if (xprecord.Electrician < 1)
                    {
                        AddElectricianData(windmill.net.ID.Value, "ElectricWindmill", config.electrician.electricwindmilldefault, config.electrician.electricwindmilldefault, windmill.OwnerID);
                        return;
                    }
                    if (xprecord.Electrician >= 1)
                    {
                        double newmaxenergy = ((config.electrician.electricwindmillmaxincrease * xprecord.Electrician) * config.electrician.electricwindmilldefault) + config.electrician.electricwindmilldefault;
                        AddElectricianData(windmill.net.ID.Value, "ElectricWindmill", config.electrician.electricwindmilldefault, (int)Math.Round(newmaxenergy), windmill.OwnerID);
                        windmill.maxPowerGeneration = (int)Math.Round(newmaxenergy);
                    }
                }
                // Load windmill data if found
                ElectricianD loadwindmill;
                if (_electricianCache.TryGetValue(windmill.net.ID.Value, out loadwindmill))
                {
                    if (xprecord.Electrician < 1)
                    {
                        loadwindmill.newmaxoutput = config.electrician.electricwindmilldefault;
                        return;
                    }
                    double maxoutput = ((config.electrician.electricwindmillmaxincrease * xprecord.Electrician) * config.electrician.electricwindmilldefault) + config.electrician.electricwindmilldefault;
                    if ((int)maxoutput != loadwindmill.newmaxoutput)
                    {
                        loadwindmill.newmaxoutput = (int)Math.Round(maxoutput);
                        windmill.maxPowerGeneration = (int)Math.Round(maxoutput);
                    }
                    else
                    {
                        windmill.maxPowerGeneration = loadwindmill.newmaxoutput;
                    }
                }
                // Current Input & Output
                if (xprecord.Electrician >= 1)
                {
                    double increaseinput = ((config.electrician.electricwindmillincrease * xprecord.Electrician) * windmill.currentEnergy) + windmill.currentEnergy;
                    if (increaseinput > windmill.maxPowerGeneration)
                    {
                        increaseinput = windmill.maxPowerGeneration;
                    }
                    windmill.currentEnergy = (int)Math.Round(increaseinput);
                }
            }
        }
        private void OnEntitySpawned(BaseNetworkable entity)
        {
            if (config.electrician.maxlvl <= 0) return;
            ElectricGenerator generator = entity.GetComponent<ElectricGenerator>();
            if (generator != null)
            {
                string generatorowner = generator.OwnerID.ToString();
                if (!generatorowner.IsSteamId()) return;
                var player = FindPlayer(generatorowner);
                if (player == null) return;
                XPRecord xprecord = GetXPRecord(player);
                // Add new generator if missing           
                if (!_electricianCache.ContainsKey(generator.net.ID.Value))
                {
                    if (xprecord.Electrician < 1)
                    {
                        generator.electricAmount = config.electrician.testgeneratordefault;
                        AddElectricianData(generator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, config.electrician.testgeneratordefault, generator.OwnerID);
                        return;
                    }
                    if (xprecord.Electrician >= 1)
                    {
                        generator.electricAmount = config.electrician.testgeneratordefault;
                        double newmaxenergy = ((config.electrician.testgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                        AddElectricianData(generator.net.ID.Value, "TestGenerator", config.electrician.smallgeneratordefault, (int)Math.Round(newmaxenergy), generator.OwnerID);
                        generator.electricAmount = (int)Math.Round(newmaxenergy);
                    }
                }
                // Load generator data if found
                ElectricianD loadgenerator;
                if (_electricianCache.TryGetValue(generator.net.ID.Value, out loadgenerator))
                {
                    if (xprecord.Electrician < 1)
                    {
                        generator.electricAmount = config.electrician.smallgeneratordefault;
                        loadgenerator.newmaxoutput = config.electrician.smallgeneratordefault;
                        return;
                    }
                    double maxoutput = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                    if ((int)maxoutput != loadgenerator.newmaxoutput)
                    {
                        loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                        generator.electricAmount = (int)Math.Round(maxoutput);
                    }
                    else
                    {
                        generator.electricAmount = loadgenerator.newmaxoutput;
                    }
                }
            }
        }
        private void LoadElectricianEntities()
        {
            if (config.electrician.maxlvl <= 0) return;
            // Test Generators
            foreach (var tgenerator in UnityEngine.Object.FindObjectsOfType<ElectricGenerator>())
            {
                if (tgenerator != null && tgenerator.OwnerID != 0)
                {
                    string tgeneratorowner = tgenerator.OwnerID.ToString();
                    if (!tgeneratorowner.IsSteamId()) return;
                    var player = FindPlayer(tgeneratorowner);
                    if (player == null) return;
                    XPRecord xprecord = GetXPRecord(player);
                    // Add new generator if missing           
                    if (!_electricianCache.ContainsKey(tgenerator.net.ID.Value))
                    {
                        if (xprecord.Electrician < 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            AddElectricianData(tgenerator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, config.electrician.testgeneratordefault, tgenerator.OwnerID);
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            double newmaxenergy = ((config.electrician.testgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                            AddElectricianData(tgenerator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, (int)Math.Round(newmaxenergy), tgenerator.OwnerID);
                            tgenerator.electricAmount = (int)Math.Round(newmaxenergy);
                        }
                    }
                    // Load generator data if found
                    ElectricianD loadgenerator;
                    if (_electricianCache.TryGetValue(tgenerator.net.ID.Value, out loadgenerator))
                    {
                        if (xprecord.Electrician < 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.testgeneratordefault;
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            double maxoutput = ((config.electrician.testgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                            if ((int)maxoutput != loadgenerator.newmaxoutput)
                            {
                                loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                                tgenerator.electricAmount = (int)Math.Round(maxoutput);
                            }
                            else
                            {
                                tgenerator.electricAmount = loadgenerator.newmaxoutput;
                            }
                        }
                    }
                }
            }
            // Fuel Generators
            foreach (var generator in UnityEngine.Object.FindObjectsOfType<FuelGenerator>())
            {
                if (generator != null && generator.OwnerID != 0)
                {
                    string generatorowner = generator.OwnerID.ToString();
                    if (!generatorowner.IsSteamId()) return;
                    var player = FindPlayer(generatorowner);
                    if (player == null) return;
                    XPRecord xprecord = GetXPRecord(player);
                    // Add new generator if missing           
                    if (!_electricianCache.ContainsKey(generator.net.ID.Value))
                    {
                        if (xprecord.Electrician < 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, config.electrician.smallgeneratordefault, generator.OwnerID);
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            double newmaxenergy = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                            AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, (int)Math.Round(newmaxenergy), generator.OwnerID);
                            generator.outputEnergy = (int)Math.Round(newmaxenergy);
                        }
                    }
                    // Load generator data if found
                    ElectricianD loadgenerator;
                    if (_electricianCache.TryGetValue(generator.net.ID.Value, out loadgenerator))
                    {
                        if (xprecord.Electrician < 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.smallgeneratordefault;
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            double maxoutput = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                            if ((int)maxoutput != loadgenerator.newmaxoutput)
                            {
                                loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                                generator.outputEnergy = (int)Math.Round(maxoutput);
                            }
                            else
                            {
                                generator.outputEnergy = loadgenerator.newmaxoutput;
                            }
                        }
                    }
                }
            }
        }
        private void CheckElectricianEntities(BasePlayer player, bool reset = false)
        {
            if (player == null || !player.userID.Get().IsSteamId() || config.electrician.maxlvl <= 0) return;
            // Test Generators
            foreach (var tgenerator in UnityEngine.Object.FindObjectsOfType<ElectricGenerator>())
            {
                if (tgenerator != null && tgenerator.OwnerID == player.userID)
                {
                    string tgeneratorowner = tgenerator.OwnerID.ToString();
                    if (!tgeneratorowner.IsSteamId()) return;
                    XPRecord xprecord = GetXPRecord(player);
                    // Add new generator if missing           
                    if (!_electricianCache.ContainsKey(tgenerator.net.ID.Value))
                    {
                        if (reset)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            AddElectricianData(tgenerator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, config.electrician.testgeneratordefault, tgenerator.OwnerID);
                        }
                        else if (xprecord.Electrician < 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            AddElectricianData(tgenerator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, config.electrician.testgeneratordefault, tgenerator.OwnerID);
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            double newmaxenergy = ((config.electrician.testgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                            AddElectricianData(tgenerator.net.ID.Value, "TestGenerator", config.electrician.testgeneratordefault, (int)Math.Round(newmaxenergy), tgenerator.OwnerID);
                            tgenerator.electricAmount = (int)Math.Round(newmaxenergy);
                        }
                    }
                    // Load generator data if found
                    ElectricianD loadgenerator;
                    if (_electricianCache.TryGetValue(tgenerator.net.ID.Value, out loadgenerator))
                    {
                        if (reset)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.testgeneratordefault;
                        }
                        else if (xprecord.Electrician < 1)
                        {
                            tgenerator.electricAmount = config.electrician.testgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.testgeneratordefault;
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            double maxoutput = ((config.electrician.testgeneratormaxincrease * xprecord.Electrician) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                            if ((int)maxoutput != loadgenerator.newmaxoutput)
                            {
                                loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                                tgenerator.electricAmount = (int)Math.Round(maxoutput);
                            }
                            else
                            {
                                tgenerator.electricAmount = loadgenerator.newmaxoutput;
                            }
                        }
                    }
                }
            }
            // Fuel Generators
            foreach (var generator in UnityEngine.Object.FindObjectsOfType<FuelGenerator>())
            {
                if (generator != null && generator.OwnerID == player.userID)
                {
                    string generatorowner = generator.OwnerID.ToString();
                    if (!generatorowner.IsSteamId()) return;
                    XPRecord xprecord = GetXPRecord(player);
                    // Add new generator if missing           
                    if (!_electricianCache.ContainsKey(generator.net.ID.Value))
                    {
                        if (reset)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, config.electrician.smallgeneratordefault, generator.OwnerID);
                        }
                        else if (xprecord.Electrician < 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, config.electrician.smallgeneratordefault, generator.OwnerID);
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            double newmaxenergy = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                            AddElectricianData(generator.net.ID.Value, "SmallGenerator", config.electrician.smallgeneratordefault, (int)Math.Round(newmaxenergy), generator.OwnerID);
                            generator.outputEnergy = (int)Math.Round(newmaxenergy);
                        }
                    }
                    // Load generator data if found
                    ElectricianD loadgenerator;
                    if (_electricianCache.TryGetValue(generator.net.ID.Value, out loadgenerator))
                    {
                        if (reset)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.smallgeneratordefault;
                        }
                        else if (xprecord.Electrician < 1)
                        {
                            generator.outputEnergy = config.electrician.smallgeneratordefault;
                            loadgenerator.newmaxoutput = config.electrician.smallgeneratordefault;
                        }
                        else if (xprecord.Electrician >= 1)
                        {
                            double maxoutput = ((config.electrician.smallgeneratormaxincrease * xprecord.Electrician) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                            if ((int)maxoutput != loadgenerator.newmaxoutput)
                            {
                                loadgenerator.newmaxoutput = (int)Math.Round(maxoutput);
                                generator.outputEnergy = (int)Math.Round(maxoutput);
                            }
                            else
                            {
                                generator.outputEnergy = loadgenerator.newmaxoutput;
                            }
                        }
                    }
                }
            }
        }
        #endregion

        #region Vehicle / Mount Hooks and Helpers
        private void OnEntityMounted(BaseMountable entity, BasePlayer player)
        {
            if (player == null || entity == null || player.IsNpc || !player.userID.Get().IsSteamId() || entity.GetParentEntity() == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            // Horse
            var horse = entity.GetParentEntity() as RidableHorse;
            if (horse != null)
            {
                if (_horseCache.ContainsKey(horse.net.ID.Value))
                {
                    DefaultHorseData(horse);
                }
                if (xprecord.Dexterity >= 1)
                {
                    player.ChatMessage(XPLang("horsespeedmessage", player.UserIDString));
                }
            }
            // Boat
            var boat = entity.GetParentEntity() as BaseBoat;
            if (boat != null)
            {
                AddBoatData(player, boat);
                if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                {
                    DashPanel(player, true, entity);
                }
                if (xprecord.Dexterity >= 1)
                {
                    player.ChatMessage(XPLang("boatspeedmessage", player.UserIDString));
                }
            }
            // Car
            var car = entity.VehicleParent() as ModularCar;
            if (car != null)
            {
                AddVehicleData(player, car);
                if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                {
                    DashPanel(player, true, entity);
                }
                if (xprecord.Dexterity >= 1 && config.dexterity.vehiclespeed > 0)
                {
                    player.ChatMessage(XPLang("vehiclespeedmessage", player.UserIDString));
                }
            }
            // Mini Copter
            var mini = entity.VehicleParent() as Minicopter;
            if (mini != null)
            {
                AddMiniCopterData(player, mini);
                if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                {
                    DashPanel(player, true, entity);
                }
                if (xprecord.Dexterity >= 1 && config.dexterity.vehiclespeed > 0)
                {
                    player.ChatMessage(XPLang("minispeedmessage", player.UserIDString));
                }
            }
            // Snow Mobile
            var snowmob = entity.VehicleParent() as Snowmobile;
            if (snowmob != null)
            {
                AddSnowMobData(player, snowmob);
                if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                {
                    DashPanel(player, true, entity);
                }
            }
        }
        private void OnEntityDismounted(BaseMountable entity, BasePlayer player)
        {
            if (entity == null || player == null || player.IsNpc || !player.userID.Get().IsSteamId()) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
            {
                DestroyUi(player, XPerienceLiveDashPanel);
                DashPanelTimer?.Destroy();
            }
            // Horses
            var horse = entity.GetParentEntity() as RidableHorse;
            if (horse != null && _horseCache.ContainsKey(horse.net.ID.Value))
            {
                Horse defaulthorse;
                if (_horseCache.TryGetValue(horse.net.ID.Value, out defaulthorse))
                {
                    if (horse.IsAlive()) DefaultHorseData(horse);
                }
                return;
            }
            // Boats
            var boat = entity.GetParentEntity() as BaseBoat;
            if (boat != null && _boatCache.ContainsKey(boat.net.ID.Value))
            {
                Boat defaultboat;
                if (_boatCache.TryGetValue(boat.net.ID.Value, out defaultboat))
                {
                    DefaultBoatData(boat);
                    if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                    {
                        DashPanel(player, false, entity);
                    }
                }
                return;
            }
            // Vehicles
            var car = entity.VehicleParent() as ModularCar;
            if (car != null && _vehicleCache.ContainsKey(car.net.ID.Value))
            {
                Vehicle vehicle;
                if (_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
                {
                    DefaultVehicleData(car);
                    if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                    {
                        DashPanel(player, false, entity);
                    }
                }
                return;
            }
            // Mini Copter
            var mini = entity.VehicleParent() as Minicopter;
            if (mini != null && _minicopterCache.ContainsKey(mini.net.ID.Value))
            {
                MiniCopterP minicopter;
                if (_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
                {
                    DefaultMiniCopterData(mini);
                    if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                    {
                        DashPanel(player, false, entity);
                    }
                }
            }
            // SnowMobile
            var snowmob = entity.VehicleParent() as Snowmobile;
            if (snowmob != null && _snowmobCache.ContainsKey(snowmob.net.ID.Value))
            {
                Snowmob snowmobile;
                if (_snowmobCache.TryGetValue(snowmob.net.ID.Value, out snowmobile))
                {
                    DefaultSnowMobData(snowmob);
                    if (xprecord.dash == 1 && config.defaultOptions.enabledashpanel)
                    {
                        DashPanel(player, false, entity);
                    }
                }
            }
        }
        private void DefaultHorseData(RidableHorse horse)
        {
            Horse defaulthorse;
            if (_horseCache.TryGetValue(horse.net.ID.Value, out defaulthorse))
            {
                horse.maxSpeed = defaulthorse.maxSpeed;
                horse.runSpeed = defaulthorse.runSpeed;
                horse.trotSpeed = defaulthorse.trotSpeed;
                horse.walkSpeed = defaulthorse.walkSpeed;
            }
            _horseCache.Remove(horse.net.ID.Value);
        }
        private void DefaultBoatData(BaseBoat boat)
        {
            Boat defaultboat;
            if (_boatCache.TryGetValue(boat.net.ID.Value, out defaultboat))
            {
                boat.engineThrust = defaultboat.defaultSpeed;
            }
            _boatCache.Remove(boat.net.ID.Value);
        }
        private void DefaultVehicleData(ModularCar car)
        {
            Vehicle vehicle;
            if (_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
            {
                car.carSettings.maxDriveSlip = vehicle.maxDriveSlip;
                car.carSettings.reversePercentSpeed = vehicle.reversePercentSpeed;
                car.carSettings.driveForceToMaxSlip = vehicle.driveForceToMaxSlip;
            }
            _vehicleCache.Remove(car.net.ID.Value);
        }
        private void DefaultMiniCopterData(Minicopter mini)
        {
            MiniCopterP minicopter;
            if (_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
            {
                //mini.maxRotorSpeed = minicopter.maxRotorSpeed;
            }
            _minicopterCache.Remove(mini.net.ID.Value);
        }
        private void DefaultSnowMobData(Snowmobile snowmob)
        {
            Snowmob snowmobile;
            if (_snowmobCache.TryGetValue(snowmob.net.ID.Value, out snowmobile))
            {
                snowmob.engineKW = (int)snowmobile.engineKW;
                snowmob.badTerrainDrag = snowmobile.terrain;
            }
            _snowmobCache.Remove(snowmob.net.ID.Value);
        }
        private void ChangeHorseSpeed(BasePlayer player)
        {
            if (player == null) return;
            var horse = player.GetMountedVehicle() as RidableHorse;
            if (horse == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity >= 1)
            {
                if (_horseCache.ContainsKey(horse.net.ID.Value))
                {
                    DefaultHorseData(horse);
                    player.ChatMessage(XPLang("horsespeedoff", player.UserIDString));
                }
                else
                {
                    AddHorseData(player, horse);
                    var increase = (float)(xprecord.Dexterity * config.dexterity.horsespeed);
                    horse.maxSpeed += increase * horse.maxSpeed;
                    horse.runSpeed += increase * horse.runSpeed;
                    horse.trotSpeed += increase * horse.trotSpeed;
                    horse.walkSpeed += increase * horse.walkSpeed;
                    player.ChatMessage(XPLang("horsespeedon", player.UserIDString));
                }
            }
        }
        private void ChangeBoatSpeed(BasePlayer player)
        {
            if (player == null) return;
            var boat = player.GetMountedVehicle() as BaseBoat;
            if (boat == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity >= 1)
            {
                Boat boatdata;
                if (_boatCache.TryGetValue(boat.net.ID.Value, out boatdata))
                {
                    if (boatdata.player == player.userID)
                    {
                        DefaultBoatData(boat);
                        player.ChatMessage(XPLang("boatspeedoff", player.UserIDString));
                    }
                }
                else
                {
                    AddBoatData(player, boat);
                    var increase = (float)(xprecord.Dexterity * config.dexterity.boatspeed);
                    boat.engineThrust += increase * boat.engineThrust;
                    player.ChatMessage(XPLang("boatspeedon", player.UserIDString));
                }
            }
        }
        private void ChangeVehicleSpeed(BasePlayer player)
        {
            if (player == null) return;
            var car = player.GetMountedVehicle() as ModularCar;
            if (car == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity >= 1 && config.dexterity.vehiclespeed > 0)
            {
                Vehicle vehicle;
                if (_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
                {
                    if (vehicle.player == player.userID)
                    {
                        DefaultVehicleData(car);
                        player.ChatMessage(XPLang("vehiclespeedoff", player.UserIDString));
                    }
                }
                else
                {
                    AddVehicleData(player, car);
                    double increase = config.dexterity.vehiclespeed * xprecord.Dexterity;
                    car.GetMaxForwardSpeed();
                    car.carSettings.maxDriveSlip -= (float)(increase * car.carSettings.maxDriveSlip);
                    car.carSettings.reversePercentSpeed += (float)(increase * car.carSettings.reversePercentSpeed);
                    car.carSettings.driveForceToMaxSlip += (float)(increase * car.carSettings.driveForceToMaxSlip);
                    player.ChatMessage(XPLang("vehiclespeedon", player.UserIDString));
                }
            }
        }
        private void ChangeMiniCopterSpeed(BasePlayer player)
        {
            if (player == null) return;
            var mini = player.GetMountedVehicle() as Minicopter;
            if (mini == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity >= 1)
            {
                MiniCopterP minicopter;
                if (_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
                {
                    if (minicopter.player == player.userID)
                    {
                        DefaultMiniCopterData(mini);
                        player.ChatMessage(XPLang("minispeedoff", player.UserIDString));
                    }
                }
                else
                {
                    AddMiniCopterData(player, mini);
                    double increase = config.dexterity.vehiclespeed * xprecord.Dexterity;
                    //mini.maxRotorSpeed += (float)(increase * mini.maxRotorSpeed);
                    player.ChatMessage(XPLang("minispeedon", player.UserIDString));
                }
            }
        }
        private void ChangeSnowMobSpeed(BasePlayer player)
        {
            if (player == null) return;
            var snowmob = player.GetMountedVehicle() as Snowmobile;
            if (snowmob == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            if (xprecord.Dexterity >= 1 && config.dexterity.vehiclespeed > 0)
            {
                Snowmob snowmobile;
                if (_snowmobCache.TryGetValue(snowmob.net.ID.Value, out snowmobile))
                {
                    if (snowmobile.player == player.userID)
                    {
                        DefaultSnowMobData(snowmob);
                        player.ChatMessage(XPLang("vehiclespeedoff", player.UserIDString));
                    }
                }
                else
                {
                    AddSnowMobData(player, snowmob);
                    double speedincrease = (config.dexterity.vehiclespeed * snowmob.engineKW) * xprecord.Dexterity;
                    double terrainincrease = (config.dexterity.vehiclespeed * snowmob.badTerrainDrag) * xprecord.Dexterity;
                    snowmob.engineKW += (int)speedincrease;
                    snowmob.badTerrainDrag += (float)terrainincrease;
                    player.ChatMessage(XPLang("vehiclespeedon", player.UserIDString));
                }
            }
        }
        private int GetFuel(BaseMountable entity)
        {
            int fuel = -1;
            if (entity == null) return fuel;
            // Boat
            var boat = entity?.GetParentEntity() as BaseBoat;
            if (boat != null)
            {
                fuel = boat?.GetFuelSystem()?.GetFuelAmount() ?? 0;
            }
            // Car
            var car = entity?.VehicleParent() as ModularCar;
            if (car != null)
            {
                fuel = car?.GetFuelSystem()?.GetFuelAmount() ?? 0;
            }
            // Mini
            var mini = entity?.VehicleParent() as Minicopter;
            if (mini != null)
            {
                fuel = mini?.GetFuelSystem()?.GetFuelAmount() ?? 0;
            }
            // Snowmobile
            var snowmob = entity.VehicleParent() as Snowmobile;
            if (snowmob != null)
            {
                fuel = snowmob?.GetFuelSystem()?.GetFuelAmount() ?? 0;
            }
            // Return Fuel
            if (fuel > 500)
            {
                fuel = 500;
            }
            return fuel;
        }
        private string GetSpeed(BasePlayer player, BaseMountable entity)
        {
            string speedometer = "";
            if (player == null || entity == null) return speedometer;
            // Boat
            var boat = entity?.GetParentEntity() as BaseBoat;
            if (boat != null)
            {
                speedometer = $"{(int)boat.engineThrust} ≜";
            }
            // Modular Car
            var car = entity?.VehicleParent() as ModularCar;
            if (car != null)
            {
                int speed = (int)car.GetSpeed() * 2;
                XPRecord xprecord = GetXPRecord(player);
                switch (xprecord.speedometertype)
                {
                    case 1:
                        speedometer = $"{speed} MPH";
                        break;
                    case 2:
                        speedometer = $"{(int)Math.Ceiling(speed * 1.609344)} KMH";
                        break;
                }

            }
            // Minicopter
            var mini = entity?.VehicleParent() as Minicopter;
            if (mini != null)
            {
                //speedometer = $"{(int)mini.maxRotorSpeed}";
            }
            // Snowmobile
            var snowmob = entity.VehicleParent() as Snowmobile;
            if (snowmob != null)
            {
                speedometer = $"{(int)snowmob.engineKW} KW";
            }
            // Return Results
            return speedometer;
        }
        private object CanUseFuel(EntityFuelSystem fuelSystem)
        {
            // Boat
            var boat = fuelSystem.GetFuelContainer().GetParentEntity() as BaseBoat;
            if (boat != null)
            {
                Boat boatdata;
                if (_boatCache.TryGetValue(boat.net.ID.Value, out boatdata))
                {
                    var player = FindPlayer(boatdata.player.ToString());
                    if (player == null) return null;
                    if (CheckPlayerLocation(player, "disableabilities")) return null;
                    XPRecord xprecord = GetXPRecord(player);
                    if (xprecord == null) return null;
                    if (xprecord.Dexterity >= 1)
                    {
                        var chance = (config.dexterity.fuelreduce * xprecord.Dexterity) * 100;
                        if ((Random.Range(0, 101) <= chance) == true)
                        {
                            return 0;
                        }
                    }
                }
            }
            // Car
            var car = fuelSystem.GetFuelContainer().GetParentEntity() as ModularCar;
            if (car != null)
            {
                Vehicle vehicle;
                if (_vehicleCache.TryGetValue(car.net.ID.Value, out vehicle))
                {
                    var player = FindPlayer(vehicle.player.ToString());
                    if (player == null) return null;
                    if (CheckPlayerLocation(player, "disableabilities")) return null;
                    XPRecord xprecord = GetXPRecord(player);
                    if (xprecord == null) return null;
                    if (xprecord.Dexterity >= 1)
                    {
                        var chance = (config.dexterity.fuelreduce * xprecord.Dexterity) * 100;
                        if ((Random.Range(0, 101) <= chance) == true)
                        {
                            return 0;
                        }
                    }
                }
            }
            // MiniCopterP
            var mini = fuelSystem.GetFuelContainer().GetParentEntity() as Minicopter;
            if (mini != null)
            {
                MiniCopterP minicopter;
                if (_minicopterCache.TryGetValue(mini.net.ID.Value, out minicopter))
                {
                    var player = FindPlayer(minicopter.player.ToString());
                    if (player == null) return null;
                    if (CheckPlayerLocation(player, "disableabilities")) return null;
                    XPRecord xprecord = GetXPRecord(player);
                    if (xprecord == null) return null;
                    if (xprecord.Dexterity >= 1)
                    {
                        var chance = (config.dexterity.fuelreduce * xprecord.Dexterity) * 100;
                        if ((Random.Range(0, 101) <= chance) == true)
                        {
                            return 0;
                        }
                    }
                }
            }
            // SnowMobile
            var snowmob = fuelSystem.GetFuelContainer().GetParentEntity() as Snowmobile;
            if (snowmob != null)
            {
                Snowmob snowmobile;
                if (_snowmobCache.TryGetValue(snowmob.net.ID.Value, out snowmobile))
                {
                    var player = FindPlayer(snowmobile.player.ToString());
                    if (player == null) return null;
                    if (CheckPlayerLocation(player, "disableabilities")) return null;
                    XPRecord xprecord = GetXPRecord(player);
                    if (xprecord == null) return null;
                    if (xprecord.Dexterity >= 1)
                    {
                        var chance = (config.dexterity.fuelreduce * xprecord.Dexterity) * 100;
                        if ((Random.Range(0, 101) <= chance) == true)
                        {
                            return 0;
                        }
                    }
                }
            }
            // Return Default
            return null;
        }
        #endregion

        #region Chat Commands
        // Chat Commands
        #region Chat Commands
        private void Openhelp(BasePlayer player, string command, string[] args)
        {
            if (player == null) return;
            ClearPlayerUIs(player, true);
            PlayerProfile(player);
            PlayerHelp(player);
        }
        private void Openplayerstats(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0)
            {
                ClearPlayerUIs(player, true);
                PlayerProfile(player);
                PlayerProfileMain(player);
                if (XPerienceAddon != null)
                {
                    XPerienceAddon?.Call("ClearNotify", player);
                }
            }
            else
            {
                if (config.defaultOptions.allowplayersearch || (!config.defaultOptions.allowplayersearch && player.IsAdmin && permission.UserHasPermission(player.UserIDString, XPerience.Admin)))
                {
                    var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
                    if (user.Value == null)
                    {
                        player.ChatMessage(XPLang("playernotfound", player.UserIDString, args[0]));
                        return;
                    }
                    var otherplayer = FindPlayer(user.Value.id);
                    ClearPlayerUIs(player, true);
                    if (XPerienceAddon != null)
                    {
                        XPerienceAddon?.Call("ClearNotify", player);
                    }
                    if (otherplayer == null)
                    {
                        player.ChatMessage(XPLang("playernotfound", player.UserIDString, args[0]));
                        return;
                    }
                    PlayerProfile(player, otherplayer);
                    PlayerProfileMain(player, otherplayer);
                }
                else
                {
                    player.ChatMessage(XPLang("playersearchdisabled", player.UserIDString));

                }
            }
        }
        private void Showplayerstatschat(BasePlayer player, string command, string[] args)
        {
            if (player == null) return;
            PlayerStatsChat(player);
        }
        private void Opentopplayers(BasePlayer player, string command, string[] args)
        {
            if (player == null) return;
            if (config.defaultOptions.allowplayersearch || (!config.defaultOptions.allowplayersearch && player.IsAdmin && permission.UserHasPermission(player.UserIDString, XPerience.Admin)))
            {
                ClearPlayerUIs(player, true);
                PlayerProfile(player);
                PlayerTopList(player, 1, "basicexperience", 0);
                return;
            }
            else
            {
                player.ChatMessage(XPLang("playersearchdisabled", player.UserIDString));
            }
        }
        private void Playeraddstat(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0)
            {
                return;
            }
            StatUp(player, args[0].ToLower());
        }
        private void Playeraddskill(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0)
            {
                return;
            }
            SkillUp(player, args[0].ToLower());
        }
        private void Playerresetstats(BasePlayer player, string command, string[] args)
        {
            if (config.defaultOptions.hardcorenoreset)
            {
                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                return;
            }
            StatsResetAll(player);
        }
        private void Playerresetskills(BasePlayer player, string command, string[] args)
        {
            if (config.defaultOptions.hardcorenoreset)
            {
                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                return;
            }
            SkillsResetAll(player);
        }
        private void Playerresetall(BasePlayer player, string command, string[] args)
        {
            if (!config.defaultOptions.allowplayerreset)
            {
                player.ChatMessage(XPLang("playerresetdisabled", player.UserIDString));
                return;
            }
            PlayerReset(player);
        }
        private void Playerliveuichange(BasePlayer player, string command, string[] args)
        {
            if (!config.defaultOptions.liveuistatslocationmoveable) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("liveuilocation", player.UserIDString, _xperienceCache[player.UserIDString].UILocation));
                return;
            }
            var cmdArg = args[0].ToLower();

            switch (cmdArg)
            {
                case "0":
                    _xperienceCache[player.UserIDString].UILocation = 0;
                    player.ChatMessage(XPLang("liveuilocationoff", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                case "1":
                    _xperienceCache[player.UserIDString].UILocation = 1;
                    player.ChatMessage(XPLang("liveuilocation", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                case "2":
                    _xperienceCache[player.UserIDString].UILocation = 2;
                    player.ChatMessage(XPLang("liveuilocation", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                case "3":
                    _xperienceCache[player.UserIDString].UILocation = 3;
                    player.ChatMessage(XPLang("liveuilocation", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                case "4":
                    _xperienceCache[player.UserIDString].UILocation = 4;
                    player.ChatMessage(XPLang("liveuilocation", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                case "5":
                    _xperienceCache[player.UserIDString].UILocation = 5;
                    player.ChatMessage(XPLang("liveuilocation", player.UserIDString, cmdArg));
                    LiveStats(player);
                    break;
                default:
                    player.ChatMessage(XPLang("liveuilocationhelp", player.UserIDString, _xperienceCache[player.UserIDString].UILocation));
                    break;
            }
        }
        #endregion
        // Admin Commands
        #region Admin Commands
        private void Adminitemchange(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            var item = player.GetActiveItem();
            if (args.Length == 0 || args.Length == 1)
            {
                player.ChatMessage(XPLang("adminitemchangerequirement", player.UserIDString, item.info.displayName.english, item.condition, item._maxCondition, config.adminchatCommands.adminitemchange));
                return;
            }
            float condition = float.Parse(args[0]);
            float maxcondition = float.Parse(args[1]);
            item.condition = condition;
            item._maxCondition = maxcondition;
            player.ChatMessage(XPLang("adminitemchange", player.UserIDString, item.info.displayName.english, condition, maxcondition));
        }
        private void Showadminhelp(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            player.ChatMessage(XPLang("xphelpadmin", player.UserIDString, config.adminchatCommands.openadminpanel, config.adminchatCommands.adminresetxperience, config.adminchatCommands.adminresetplayer, config.adminchatCommands.adminxpgive, config.adminchatCommands.adminxptake, config.adminchatCommands.adminitemchange));
        }
        public void Openadminpanel(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            DestroyUi(player, XPeriencePlayerProfile);
            DestroyUi(player, XPerienceAdminPanelMain);
            if (XPerienceAddon != null)
            {
                XPerienceAddon?.Call("ClearNotify", player);
            }
            AdminControlPanel(player);
            AdminInfoPage(player);
        }
        private void Adminresetxperience(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            _xperienceCache.Clear();
            _lootCache.Clear();
            _XPerienceData.Clear();
            _LootContainData.Clear();
            _corpseCache.Clear();
            _CorpseContainData.Clear();
            if (config.sql.enablesql)
            {
                DeleteSQL();
            }
            player.ChatMessage(XPLang("resetxperience", player.UserIDString));
            Interface.Oxide.ReloadPlugin("XPerience");
        }
        private void Adminxpgive(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpgiveneedtype", player.UserIDString));
                return;
            }
            if (args.Length == 1)
            {
                player.ChatMessage(XPLang("xpgiveneedname", player.UserIDString));
                return;
            }
            if (args.Length == 2)
            {
                player.ChatMessage(XPLang("xpgiveneedamount", player.UserIDString));
                return;
            }
            var type = args[0].ToLower();
            if (type == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                    return;
                }
                double amount = Convert.ToDouble(args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    GainExpAdmin(selectplayer, amount);
                    player.ChatMessage(XPLang("xpgiveplayer", player.UserIDString, user.Value.displayname, amount, xprecord.experience));
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    GainExpAdminFix(user.Value.id, amount);
                    player.ChatMessage(XPLang("xpgiveplayer", player.UserIDString, user.Value.displayname, amount, vxprecord.experience));
                }
            }
            if (type == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                    return;
                }
                double amount = Convert.ToDouble(args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    GainExpAdmin(selectplayer, amount);
                    player.ChatMessage(XPLang("xpgiveplayer", player.UserIDString, user.Value.displayname, amount, xprecord.experience));
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    GainExpAdminFix(user.Value.id, amount);
                    player.ChatMessage(XPLang("xpgiveplayer", player.UserIDString, user.Value.displayname, amount, vxprecord.experience));
                }
            }

        }
        private void Adminpointsgive(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("pointsgiveneedtype", player.UserIDString));
                return;
            }
            if (args.Length == 1)
            {
                player.ChatMessage(XPLang("pointsgiveneedtype", player.UserIDString));
                return;
            }
            if (args.Length == 2)
            {
                player.ChatMessage(XPLang("pointsgiveneedname", player.UserIDString));
                return;
            }
            if (args.Length == 3)
            {
                player.ChatMessage(XPLang("pointsgiveneedamount", player.UserIDString));
                return;
            }
            var type1 = args[0].ToLower();
            var type2 = args[1].ToLower();
            int totalpoints = 0;
            if (type2 == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[2].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                    return;
                }
                int amount = Convert.ToInt32(args[3]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    switch (type1)
                    {
                        case "stat":
                            totalpoints = xprecord.statpoint + amount;
                            break;
                        case "skill":
                            totalpoints = xprecord.skillpoint + amount;
                            break;
                    }
                    GivePoints(selectplayer, type1, amount);
                    player.ChatMessage(XPLang("pointsgiveplayer", player.UserIDString, user.Value.displayname, amount, type1, totalpoints));
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    switch (type1)
                    {
                        case "stat":
                            totalpoints = vxprecord.statpoint + amount;
                            break;
                        case "skill":
                            totalpoints = vxprecord.skillpoint + amount;
                            break;
                    }
                    GivePointsOther(user.Value.id, type1, amount);
                    player.ChatMessage(XPLang("pointsgiveplayer", player.UserIDString, user.Value.displayname, amount, type1, totalpoints));
                }
            }
            if (type2 == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[2].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                    return;
                }
                int amount = Convert.ToInt32(args[3]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    switch (type1)
                    {
                        case "stat":
                            totalpoints = xprecord.statpoint + amount;
                            break;
                        case "skill":
                            totalpoints = xprecord.skillpoint + amount;
                            break;
                    }
                    GivePoints(selectplayer, type1, amount);
                    player.ChatMessage(XPLang("pointsgiveplayer", player.UserIDString, user.Value.displayname, amount, type1, totalpoints));
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    switch (type1)
                    {
                        case "stat":
                            totalpoints = vxprecord.statpoint + amount;
                            break;
                        case "skill":
                            totalpoints = vxprecord.skillpoint + amount;
                            break;
                    }
                    GivePointsOther(user.Value.id, type1, amount);
                    player.ChatMessage(XPLang("pointsgiveplayer", player.UserIDString, user.Value.displayname, amount, type1, totalpoints));
                }
            }

        }
        private void Adminxpgiveall(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpgiveneedamount", player.UserIDString));
                return;
            }
            double amount = Convert.ToDouble(args[0]);
            foreach (var allplayer in BasePlayer.allPlayerList)
            {
                GainExpAdmin(allplayer, amount);
            }
            player.ChatMessage(XPLang("xpgiveall", player.UserIDString, amount));
        }
        private void Adminxptake(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xptakeneedtype", player.UserIDString));
                return;
            }
            if (args.Length == 1)
            {
                player.ChatMessage(XPLang("xptakeneedname", player.UserIDString));
                return;
            }
            if (args.Length == 2)
            {
                player.ChatMessage(XPLang("xptakeneedamount", player.UserIDString));
                return;
            }
            var type = args[0].ToLower();
            if (type == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xptakenotfound", player.UserIDString));
                    return;
                }
                double amount = Convert.ToDouble(args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                LoseExpAdmin(selectplayer, amount);
                player.ChatMessage(XPLang("xptakeplayer", player.UserIDString, amount, user.Value.displayname, xprecord.experience));
            }
            if (type == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xptakenotfound", player.UserIDString));
                    return;
                }
                double amount = Convert.ToDouble(args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                LoseExpAdmin(selectplayer, amount);
                player.ChatMessage(XPLang("xptakeplayer", player.UserIDString, amount, user.Value.displayname, xprecord.experience));
            }
        }
        private void Adminfixdata(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            PlayerFixDataAll(player);
        }
        private void Adminxpresetplayer(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedtype", player.UserIDString));
                return;
            }
            if (args.Length == 1)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var type = args[0].ToLower();
            if (type == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                SelectedPlayerReset(player, selectplayer);
            }
            if (type == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                SelectedPlayerReset(player, selectplayer);
            }
        }
        private void AdminHarvestReset(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
            if (user.Value == null)
            {
                player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            SelectedHarvestReset(player, selectplayer);
        }
        private void AdminLevelReset(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
            if (user.Value == null)
            {
                player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            SelectedLevelReset(player, selectplayer);
        }
        private void AdminRankReset(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
            if (user.Value == null)
            {
                player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            SelectedRankReset(player, selectplayer);
        }
        private void AdminStatReset(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
            if (user.Value == null)
            {
                player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            StatReset(selectplayer, args[0], true);
        }
        private void AdminSkillReset(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args.Length == 0)
            {
                player.ChatMessage(XPLang("xpresetneedname", player.UserIDString));
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[0].ToLower()));
            if (user.Value == null)
            {
                player.ChatMessage(XPLang("xpresetnotfound", player.UserIDString));
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            SkillReset(selectplayer, args[0], true);
        }
        private void AdminLevelResetAll(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            PlayerAllLevelReset(player);
        }
        private void AdminRankResetAll(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            PlayerAllRankReset(player);
        }
        private void AdminExcludePlayer(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (args == null || args.Length < 3)
            {
                player.ChatMessage("Incorrect Command, Use: xpexcludeplayer <name or id> <playername or id> <true or false>");
                return;
            }
            if (args[0].ToLower() == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage("Player name not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (args[2].ToLower() == "true")
                {
                    xprecord.exclude = true;
                    player.ChatMessage($"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been excluded from RustLevels");
                }
                if (args[2].ToLower() == "false")
                {
                    xprecord.exclude = false;
                    player.ChatMessage($"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been included at RustLevels");
                }
            }
            if (args[0].ToLower() == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[1].ToLower()));
                if (user.Value == null)
                {
                    player.ChatMessage("Player id not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (args[2].ToLower() == "true")
                {
                    xprecord.exclude = true;
                    player.ChatMessage($"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been excluded from RustLevels");
                }
                if (args[2].ToLower() == "false")
                {
                    xprecord.exclude = false;
                    player.ChatMessage($"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been included at RustLevels");
                }
            }
        }
        private void AdminGiveItem(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin || !permission.UserHasPermission(player.UserIDString, Admin)) return;
            if (XPerienceAddon != null)
            {
                if (args == null || args.Length < 4)
                {
                    player.ChatMessage($"Invalid command. Use /{config.adminchatCommands.admingiveitem} <name/id> <playername/id> \"<itemname>\" <amount>");
                    return;
                }
                var type = args[0].ToLower();
                string item = String.Concat(args[2].ToLower().Where(c => !Char.IsWhiteSpace(c)));
                //string item = args[2].ToLower();
                int amount = Convert.ToInt32(args[3]);

                if (type == "name")
                {
                    var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(args[1].ToLower()));
                    if (user.Value == null)
                    {
                        player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                        return;
                    }
                    var itemplayer = FindPlayer(user.Value.id);
                    XPerienceAddon?.Call("SpecialDrops", itemplayer, item, amount);
                }
                if (type == "id")
                {
                    var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(args[1].ToLower()));
                    if (user.Value == null)
                    {
                        player.ChatMessage(XPLang("xpgivenotfound", player.UserIDString));
                        return;
                    }
                    var itemplayer = FindPlayer(user.Value.id);
                    XPerienceAddon?.Call("SpecialDrops", itemplayer, item, amount);
                }
            }
        }
        #endregion
        #endregion

        #region Console Commands
        // Check Permission
        private bool CanUseConsole(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null)
            {
                if (arg.Connection.authLevel < 1)
                {
                    SendReply(arg, "You do not have permission to use this command.");
                    return false;
                }
            }
            return true;
        }
        // Reset XPerience
        [ConsoleCommand("xpresetall")]
        private void Consolereset(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            _xperienceCache.Clear();
            _lootCache.Clear();
            _XPerienceData.Clear();
            _LootContainData.Clear();
            _corpseCache.Clear();
            _CorpseContainData.Clear();
            if (config.sql.enablesql)
            {
                DeleteSQL();
            }
            SendReply(arg, "All player data has been wiped for XPerience... Reloading...");
            Interface.Oxide.ReloadPlugin("XPerience");
        }
        // Reset Daily XP All
        [ConsoleCommand("xpdailyreset")]
        private void Consoleresetdailyxptimer(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            DailyLimit(true);
            SendReply(arg, "Daily limits have been reset for all players.");
        }
        // Reset Daily XP Player
        [ConsoleCommand("xpdailyresetplayer")]
        private void Consoleresetdailyxpplayer(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 1)
            {
                SendReply(arg, "Incorrect Command, Use: xpdailyresetplayer <steamid>");
                return;
            }
            var player = FindPlayer(arg.Args[0].ToLower());
            if (player == null)
            {
                SendReply(arg, $"Player not found with ID: {arg.Args[0].ToLower()}");
                return;
            }
            DailyLimitPlayer(player, true);
            SendReply(arg, $"Daily limit has been reset for {player.displayName}.");
        }
        // Reset Player
        [ConsoleCommand("xpexcludeplayer")]
        private void Consoleexcludeplayer(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 3)
            {
                SendReply(arg, "Incorrect Command, Use: xpexcludeplayer <name or id> <playername or id> <true or false>");
                return;
            }
            if (arg.Args[0].ToLower() == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player name not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (arg.Args[2].ToLower() == "true")
                {
                    xprecord.exclude = true;
                    SendReply(arg, $"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been excluded from RustLevels");
                }
                if (arg.Args[2].ToLower() == "false")
                {
                    xprecord.exclude = false;
                    SendReply(arg, $"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been included at RustLevels");
                }
            }
            if (arg.Args[0].ToLower() == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player id not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (arg.Args[2].ToLower() == "true")
                {
                    xprecord.exclude = true;
                    SendReply(arg, $"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been excluded from RustLevels");
                }
                if (arg.Args[2].ToLower() == "false")
                {
                    xprecord.exclude = false;
                    SendReply(arg, $"Player [{selectplayer.displayName}|{selectplayer.UserIDString}] has been included at RustLevels");
                }
            }
        }
        // Reset Player
        [ConsoleCommand("xpresetplayer")]
        private void Consoleresetplayer(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 2)
            {
                SendReply(arg, $"Incorrect Command, Use: {config.adminchatCommands.adminresetplayer} <name or id> <playername or id>");
                return;
            }
            if (arg.Args[0].ToLower() == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player name not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                SelectedPlayerResetConsole(selectplayer);
            }
            if (arg.Args[0].ToLower() == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player id not found");
                    return;
                }
                var selectplayer = FindPlayer(user.Value.id.ToString());
                SelectedPlayerResetConsole(selectplayer);
            }
        }
        // Reset Player Stat
        [ConsoleCommand("xpresetstat")]
        private void Consoleresetstat(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 2)
            {
                SendReply(arg, $"Incorrect Command, Use: {config.adminchatCommands.adminresetstat} <playername> <stat>");
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[0].ToLower()));
            if (user.Value == null)
            {
                SendReply(arg, "Player name not found");
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            StatReset(selectplayer, arg.Args[1], true);
        }
        // Reset Player Skill
        [ConsoleCommand("xpresetskill")]
        private void Consoleresetskill(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 2)
            {
                SendReply(arg, $"Incorrect Command, Use: {config.adminchatCommands.adminresetskill} <playername> <skill>");
                return;
            }
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[0].ToLower()));
            if (user.Value == null)
            {
                SendReply(arg, "Player name not found");
                return;
            }
            var selectplayer = FindPlayer(user.Value.id.ToString());
            SkillReset(selectplayer, arg.Args[1], true);
        }
        // Give XP
        [ConsoleCommand("xpgive")]
        private void Consolegivexp(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 3)
            {
                SendReply(arg, "Incorrect Command, Use: xpgive <name or id> <playername or id> <amount>");
                return;
            }
            if (arg.Args[0].ToLower() == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player name not found");
                    return;
                }
                double amount = Convert.ToDouble(arg.Args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    GainExpAdmin(selectplayer, amount);
                    SendReply(arg, $"{amount} XP has been given to {user.Value.displayname}. They now have a total of {xprecord.experience} XP");
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    GainExpAdminFix(user.Value.id, amount);
                    SendReply(arg, $"{amount} XP has been given to {user.Value.displayname}. They now have a total of {vxprecord.experience} XP");
                }
            }
            if (arg.Args[0].ToLower() == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player id not found");
                    return;
                }
                double amount = Convert.ToDouble(arg.Args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    GainExpAdmin(selectplayer, amount);
                    SendReply(arg, $"{amount} XP has been given to {user.Value.displayname}. They now have a total of {xprecord.experience} XP");
                }
                else
                {
                    XPRecord vxprecord = GetPlayerRecord(user.Value.id);
                    GainExpAdminFix(user.Value.id, amount);
                    SendReply(arg, $"{amount} XP has been given to {user.Value.displayname}. They now have a total of {vxprecord.experience} XP");
                }
            }
        }
        // Take XP
        [ConsoleCommand("xptake")]
        private void Consoletakexp(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (arg.Args == null || arg.Args.Length < 3)
            {
                SendReply(arg, "Incorrect Command, Use: xptake <name or id> <playername or id> <amount>");
                return;
            }
            if (arg.Args[0].ToLower() == "name")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player name not found");
                    return;
                }
                double amount = Convert.ToDouble(arg.Args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    LoseExpAdmin(selectplayer, amount);
                    SendReply(arg, $"{amount} XP has been taken from {user.Value.displayname}. They now have a total of {xprecord.experience} XP");
                }
            }
            if (arg.Args[0].ToLower() == "id")
            {
                var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                if (user.Value == null)
                {
                    SendReply(arg, "Player id not found");
                    return;
                }
                double amount = Convert.ToDouble(arg.Args[2]);
                var selectplayer = FindPlayer(user.Value.id.ToString());
                XPRecord xprecord = GetXPRecord(selectplayer);
                if (xprecord != null)
                {
                    LoseExpAdmin(selectplayer, amount);
                    SendReply(arg, $"{amount} XP has been taken from {user.Value.displayname}. They now have a total of {xprecord.experience} XP");
                }
            }
        }
        // XP Item
        [ConsoleCommand("xpitem")]
        private void Consolexpitem(ConsoleSystem.Arg arg)
        {
            if (!CanUseConsole(arg)) return;
            if (XPerienceAddon != null)
            {
                if (arg.Args == null || arg.Args.Length < 4)
                {
                    SendReply(arg, $"Incorrect Command, Use: {config.adminchatCommands.admingiveitem} <name/id> <playername/id> \"<itemname>\" <amount>");
                    return;
                }
                var type = arg.Args[0].ToLower();
                string item = String.Concat(arg.Args[2].ToLower().Where(c => !Char.IsWhiteSpace(c)));
                //string item = arg.Args[2].ToLower();
                int amount = Convert.ToInt32(arg.Args[3]);

                if (type == "name")
                {
                    var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.displayname.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                    if (user.Value == null)
                    {
                        SendReply(arg, "Player name not found");
                        return;
                    }
                    var itemplayer = FindPlayer(user.Value.id);
                    XPerienceAddon?.Call("SpecialDrops", itemplayer, item, amount);
                    SendReply(arg, $"{amount} - {item} have been given to {itemplayer.displayName}");
                }
                if (type == "id")
                {
                    var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(arg.Args[1].ToLower()));
                    if (user.Value == null)
                    {
                        SendReply(arg, "Player id not found");
                        return;
                    }
                    var itemplayer = FindPlayer(user.Value.id);
                    XPerienceAddon?.Call("SpecialDrops", itemplayer, item, amount);
                    SendReply(arg, $"{amount} - {item} have been given to {itemplayer.displayName}");

                }
            }

        }
        #endregion

        #region UI Constants
        // Live Stats
        private const string XPerienceLivePrimary = "XPerienceLivePrimary";
        private const string XPerienceLiveIcon = "XPerienceLiveIcon";
        private const string XPerienceLiveData = "XPerienceLiveData";
        private const string XPerienceLiveFuel = "XPerienceLiveFuel";
        private const string XPerienceLiveFuelBar = "XPerienceLiveFuelBar";
        private const string XPerienceLiveSpeed = "XPerienceLiveSpeed";
        private const string XPerienceLiveSpeedIcon = "XPerienceLiveSpeedIcon";
        private const string XPerienceLiveSpeedBar = "XPerienceLiveSpeedBar";
        private const string XPerienceLiveDashPanel = "XPerienceLiveDashPanel";
        private const string XPerienceLiveDashPanelSet = "XPerienceLiveDashPanelSet";
        // Player UI
        private const string XPeriencePlayerProfileOutside = "XPeriencePlayerProfileOutside";
        private const string XPeriencePlayerProfile = "XPeriencePlayerProfile";
        private const string XPeriencePlayerProfileMenu = "XPeriencePlayerProfileMenu";
        private const string XPeriencePlayerProfileMain = "XPeriencePlayerProfileMain";
        private const string XPeriencePlayerProfileStatsAndSkills = "XPeriencePlayerProfileStatsAndSkills";
        private const string XPeriencePlayerProfileStatsAndSkillsMenu = "XPeriencePlayerProfileStatsAndSkillsMenu";
        private const string XPeriencePlayerProfileSettings = "XPeriencePlayerProfileSettings";
        private const string XPeriencePlayerProfileKills = "XPeriencePlayerProfileKills";
        private const string XPeriencePlayerProfileKillsPages = "XPeriencePlayerProfileKillsPages";
        private const string XPeriencePlayerProfileRaids = "XPeriencePlayerProfileRaids";
        private const string XPeriencePlayerProfileRaidsPages = "XPeriencePlayerProfileRaidsPages";
        private const string XPeriencePlayerProfileHelp = "XPeriencePlayerProfileHelp";
        private const string XPeriencePlayerProfileHelpPages = "XPeriencePlayerProfileHelpPages";
        private const string XPeriencePlayerControlPromptBox = "XPeriencePlayerControlPromptBox";
        private const string XPeriencePlayerControlPrompt = "XPeriencePlayerControlPrompt";
        private const string XPeriencePlayerDMGSkins = "XPeriencePlayerDMGSkins";
        private const string XPeriencePlayerBGImgs = "XPeriencePlayerBGImgs";
        private const string XPeriencePlayerCalculations = "XPeriencePlayerCalculations";
        private const string XPeriencePlayerCalculationsLevelSelection = "XPeriencePlayerCalculationsLevelSelection";
        private const string XPeriencePlayerCalculationsRanksSelection = "XPeriencePlayerCalculationsRanksSelection";
        // Top List UI
        private const string XPerienceTopSelection = "XPerienceTopSelection";
        private const string XPerienceTopInner = "XPerienceTopInner";
        private const string XPerienceTopPageSelection = "XPerienceTopPageSelection";
        // Admin Panels
        private const string XPerienceAdminPanelMain = "XPerienceAdminPanelMain";
        private const string XPerienceAdminPanelMenu = "XPerienceAdminPanelMenu";
        private const string XPerienceAdminPanelInfo = "XPerienceAdminPanelInfo";
        private const string XPerienceAdminPanelLevelXP = "XPerienceAdminPanelLevelXP";
        private const string XPerienceAdminPanelRanks = "XPerienceAdminPanelRanks";
        private const string XPerienceAdminPanelStats = "XPerienceAdminPanelStats";
        private const string XPerienceAdminPanelSkills = "XPerienceAdminPanelSkills";
        private const string XPerienceAdminPanelSkillItems = "XPerienceAdminPanelSkillItems";
        private const string XPerienceAdminPanelTimerColor = "XPerienceAdminPanelTimerColor";
        private const string XPerienceAdminPanelOtherMods = "XPerienceAdminPanelOtherMods";
        private const string XPerienceAdminPanelSQL = "XPerienceAdminPanelSQL";
        private const string XPerienceAdminPanelReset = "XPerienceAdminPanelReset";
        private const string XPerienceAdminPanelInfoBox = "XPerienceAdminPanelInfoBox";
        private const string XPerienceAdminPanelAddon = "XPerienceAdminPanelAddon";
        private const string XPerienceAdminPanelDailyLimits = "XPerienceAdminPanelDailyLimits";
        private const string XPerienceAdminPanelSoundEffects = "XPerienceAdminPanelSoundEffects";
        private const string XPerienceAdminPanelElectricianSettings = "XPerienceAdminPanelElectricianSettings";
        private const string XPerienceAdminPanelProfileBackgrounds = "XPerienceAdminPanelProfileBackgrounds";
        private const string XPerienceAdminPanelImages = "XPerienceAdminPanelImages";
        private const string XPerienceAdminPanelSpecialGroups = "XPerienceAdminPanelSpecialGroups";
        private const string XPerienceAdminPanelBackpackSelection = "XPerienceAdminPanelBackpackSelection";
        // Images
        private const string XPerienceicon = "XPerienceicon";
        private const string XPeriencelogo = "XPeriencelogo";
        private const string XPeriencementality = "XPeriencementality";
        private const string XPeriencedexterity = "XPeriencedexterity";
        private const string XPeriencemight = "XPeriencemight";
        private const string XPeriencecaptaincy = "XPeriencecaptaincy";
        private const string XPerienceweaponry = "XPerienceweaponry";
        private const string XPerienceninjary = "XPerienceninjary";
        private const string XPeriencewoodcutter = "XPeriencewoodcutter";
        private const string XPeriencesmithy = "XPeriencesmithy";
        private const string XPerienceminer = "XPerienceminer";
        private const string XPerienceforager = "XPerienceforager";
        private const string XPeriencehunter = "XPeriencehunter";
        private const string XPeriencefisher = "XPeriencefisher";
        private const string XPeriencecrafter = "XPeriencecrafter";
        private const string XPerienceframer = "XPerienceframer";
        private const string XPeriencemedic = "XPeriencemedic";
        private const string XPeriencescavenger = "XPeriencescavenger";
        private const string XPerienceelectrician = "XPerienceelectrician";
        private const string XPeriencedemolitionist = "XPeriencedemolitionist";
        private const string XPeriencetamer = "XPeriencetamer";
        private const string XPeriencechicken = "XPeriencechicken";
        private const string XPerienceboar = "XPerienceboar";
        private const string XPeriencestag = "XPeriencestag";
        private const string XPeriencewolf = "XPeriencewolf";
        private const string XPeriencebear = "XPeriencebear";
        private const string XPeriencepolarbear = "XPeriencepolarbear";
        private const string XPeriencearchery = "XPeriencearchery";
        private const string XPeriencewizardry = "XPeriencewizardry";
        private const string XPerienceonline = "XPerienceonline";
        private const string XPerienceoffline = "XPerienceoffline";
        private const string XPeriencebackpack = "XPeriencebackpack";
        private const string XPeriencelevel = "XPeriencelevel";
        private const string XPeriencexp = "XPeriencexp";
        private const string XPeriencearmor = "XPeriencearmor";
        private const string XPeriencelevel0 = "XPeriencelevel0";
        private const string XPeriencelevel2 = "XPeriencelevel2";
        private const string XPeriencelevel4 = "XPeriencelevel4";
        private const string XPeriencelevel6 = "XPeriencelevel6";
        private const string XPeriencelevel8 = "XPeriencelevel8";
        private const string XPeriencelevel10 = "XPeriencelevel10";
        private const string XPeriencefuelguage = "XPeriencefuelguage";
        private const string XPeriencespeedometer = "XPeriencespeedometer";
        private const string XPeriencedash = "XPeriencedash";
        private const string XPerienceraideasy = "XPerienceraideasy";
        private const string XPerienceraidmedium = "XPerienceraidmedium";
        private const string XPerienceraidhard = "XPerienceraidhard";
        private const string XPerienceraidexpert = "XPerienceraidexpert";
        private const string XPerienceraidnightmare = "XPerienceraidnightmare";
        private const string XPerienceprofilebg = "XPerienceprofilebg";
        private const string XPeriencemenubg = "XPeriencemenubg";
        // XPerience Addon
        private const string XPerienceaddondmgbarhealth1 = "XPerienceaddondmgbarhealth1";
        private const string XPerienceaddondmgbarhealth2 = "XPerienceaddondmgbarhealth2";
        private const string XPerienceaddondmgbarhealth3 = "XPerienceaddondmgbarhealth3";
        private const string XPerienceaddondmgbarhealth4 = "XPerienceaddondmgbarhealth4";
        private const string XPerienceaddondmgbarhealth5 = "XPerienceaddondmgbarhealth5";
        private const string XPerienceaddondmgbarhealth6 = "XPerienceaddondmgbarhealth6";
        private const string XPerienceaddondmgbarhealth7 = "XPerienceaddondmgbarhealth7";
        private const string XPerienceaddondmgbarhealth8 = "XPerienceaddondmgbarhealth8";
        private const string XPerienceaddondmgbarhealth9 = "XPerienceaddondmgbarhealth9";
        private const string XPerienceaddondmgbarhealth10 = "XPerienceaddondmgbarhealth10";

        #endregion

        #region Colors/Symbols
        private object TextColor(BasePlayer player, string type, double value, bool enabled = false)
        {
            string color = config.uitextColor.defaultcolor;
            if (player == null || type == null) return color;
            if (value > 0)
                switch (type)
                {
                    case "default":
                        color = config.uitextColor.defaultcolor;
                        break;
                    case "mainlevel":
                        color = config.uitextColor.level;
                        break;
                    case "experience":
                        color = config.uitextColor.experience;
                        break;
                    case "nextlevel":
                        color = config.uitextColor.nextlevel;
                        break;
                    case "remainingxp":
                        color = config.uitextColor.remainingxp;
                        break;
                    case "level":
                        color = config.uitextColor.statskilllevels;
                        break;
                    case "perk":
                        color = config.uitextColor.perks;
                        break;
                    case "unspent":
                        color = config.uitextColor.unspentpoints;
                        break;
                    case "spent":
                        color = config.uitextColor.spentpoints;
                        break;
                    case "pets":
                        color = config.uitextColor.pets;
                        break;
                    case "rankname":
                        color = config.uitextColor.rankname;
                        break;
                    case "ranklevel":
                        color = config.uitextColor.ranklevel;
                        break;
                    case "rankxp":
                        color = config.uitextColor.rankxp;
                        break;
                }
            if (value < 0)
                color = "red";
            return color;
        }
        private object ValueSymbol(string type, double value, string symbol)
        {
            if (type == "perk" && value > 0 && symbol == "neg")
            {
                symbol = "-";
            }
            if (type == "perk" && value > 0 && symbol == "pos")
            {
                symbol = "+";
            }
            if (type == "perk" && value < 0 && (symbol == "neg" || symbol == "pos"))
            {
                symbol = "";
            }

            // Return Symbol
            return symbol;
        }
        private object LiveUISelection(string selection, int value)
        {
            string color = "1 1 1 1";
            switch (selection)
            {
                case "UI0":
                    if (value == 0)
                        color = "0 1 0 1";
                    break;
                case "UI1":
                    if (value == 1)
                        color = "0 1 0 1";
                    break;
                case "UI2":
                    if (value == 2)
                        color = "0 1 0 1";
                    break;
                case "UI3":
                    if (value == 3)
                        color = "0 1 0 1";
                    break;
                case "UI4":
                    if (value == 4)
                        color = "0 1 0 1";
                    break;
                case "UI5":
                    if (value == 5)
                        color = "0 1 0 1";
                    break;
                case "UI6":
                    if (value == 6)
                        color = "0 1 0 1";
                    break;
                case "UI7":
                    if (value == 7)
                        color = "0 1 0 1";
                    break;
                case "UI8":
                    if (value == 8)
                        color = "0 1 0 1";
                    break;
                case "UI9":
                    if (value == 9)
                        color = "0 1 0 1";
                    break;
                case "UI10":
                    if (value == 10)
                        color = "0 1 0 1";
                    break;
            }
            // Return Color
            return color;
        }
        private object DashSelection(int selection, int value)
        {
            string color = "1 1 1 1";
            switch (selection)
            {
                case 0:
                    if (value == 0)
                        color = "1 0 0 1";
                    break;
                case 1:
                    if (value == 1)
                        color = "0 1 0 1";
                    break;
                case 2:
                    if (value == 2)
                        color = "0 1 0 1";
                    break;
            }
            // Return Color
            return color;
        }
        private object DisableRankSelection(string selection, bool value, string color = "1 1 1 1")
        {
            switch (selection)
            {
                case "Yes":
                    if (value)
                        color = "1 0 0 1";
                    break;
                case "No":
                    if (!value)
                        color = "0 1 0 1";
                    break;
            }
            // Return Color
            return color;
        }
        private object DisableSelection(string selection, bool value, string color = "1 1 1 1")
        {
            switch (selection)
            {
                case "Yes":
                    if (value)
                        color = "0 1 0 1";
                    break;
                case "No":
                    if (!value)
                        color = "1 0 0 1";
                    break;
            }
            // Return Color
            return color;
        }
        private object ColorConverter(string color)
        {
            string hexcolor = color;
            switch (color)
            {
                case "white":
                    hexcolor = "#FFFFFF";
                    break;
                case "red":
                    hexcolor = "#FF0000";
                    break;
                case "green":
                    hexcolor = "#00FF00";
                    break;
                case "blue":
                    hexcolor = "#0000FF";
                    break;
                case "cyan":
                    hexcolor = "#00FFFF";
                    break;
                case "grey":
                    hexcolor = "#808080";
                    break;
                case "magenta":
                    hexcolor = "#FF00FF";
                    break;
                case "yellow":
                    hexcolor = "#FFFF00";
                    break;
            }
            return hexcolor;
        }
        private object LiveColorConverter(string color)
        {
            string newcolor = color;
            switch (color)
            {
                case "red":
                    newcolor = "99 00 00";
                    break;
                case "green":
                    newcolor = "00 99 00";
                    break;
                case "blue":
                    newcolor = "00 00 99";
                    break;
                case "cyan":
                    newcolor = "00 99 99";
                    break;
                case "grey":
                    newcolor = "80 80 80";
                    break;
                case "magenta":
                    newcolor = "99 00 99";
                    break;
                case "yellow":
                    newcolor = "99 99 00";
                    break;
            }
            return newcolor;
        }
        #endregion

        #region Default UI Panels
        // UI Defaults
        private CuiPanel XPUIPanel(string anchorMin, string anchorMax, string color = "0 0 0 0")
        {
            return new CuiPanel
            {
                RectTransform =
                {
                    AnchorMin = anchorMin,
                    AnchorMax = anchorMax
                },
                Image =
                {
                    Color = color
                }
            };
        }
        private CuiPanel XPUIPanel2(string anchorMin, string anchorMax, string offsetMin, string offsetMax, string color = "0 0 0 0")
        {
            return new CuiPanel
            {
                RectTransform =
                {
                    AnchorMin = anchorMin,
                    AnchorMax = anchorMax,
                    OffsetMin = offsetMin,
                    OffsetMax = offsetMax
                },
                Image =
                {
                    Color = color
                }
            };
        }
        private CuiLabel XPUILabel(string text, int i, float height, TextAnchor align = TextAnchor.MiddleLeft, int fontSize = 13, string xMin = "0", string xMax = "1", string color = "1 1 1 1")
        {
            return new CuiLabel
            {
                RectTransform =
                {
                    AnchorMin = $"{xMin} {1 - height*i + i * .002f}",
                    AnchorMax = $"{xMax} {1 - height*(i-1) + i * .002f}"
                },
                Text =
                {
                    Text = text,
                    FontSize = fontSize,
                    Align = align,
                    Color = color
                }
            };
        }
        private CuiButton XPUIButton(string command, double i, float rowHeight, int fontSize = 11, string color = "1.0 0.0 0.0 0.7", string content = "+", string xMin = "0", string xMax = "1", TextAnchor align = TextAnchor.MiddleLeft, string fcolor = "1 1 1 1")
        {
            return new CuiButton
            {
                Button =
                {
                    Command = command,
                    Color = $"{color}"
                },
                RectTransform =
                {
                    AnchorMin = $"{xMin} {1 - rowHeight*i + i * .002f}",
                    AnchorMax = $"{xMax} {1 - rowHeight*(i-1) + i * .002f}"
                },
                Text =
                {
                    Text = content,
                    FontSize = fontSize,
                    Align = align,
                    Color = fcolor,
                }
            };
        }
        private CuiButton XPUIMenuButton(string command, double i, float rowHeight, int fontSize = 11, string color = "1.0 0.0 0.0 0.7", string content = "+", string xMin = "0", string xMax = "1", TextAnchor align = TextAnchor.MiddleLeft, string fcolor = "1 1 1 1", double space = .025)
        {
            return new CuiButton
            {
                Button =
                {
                    Command = command,
                    Color = $"{color}"
                },
                RectTransform =
                {
                    AnchorMin = $"{xMin} {1 - rowHeight * i + i * .002f}",
                    AnchorMax = $"{xMax} {1 - rowHeight * (i-1) + i * .002f - space}"
                },
                Text =
                {
                    Text = content,
                    FontSize = fontSize,
                    Align = align,
                    Color = fcolor,
                }
            };
        }
        private CuiElement XPUIImage(string parent, string image, int i, float imgheight, string xMin = "0", string xMax = "1")
        {
            return new CuiElement
            {
                Parent = parent,
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", image)
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = $"{xMin} {1 - imgheight*i + i * .002f}",
                        AnchorMax = $"{xMax} {1 - imgheight*(i-1) + i * .002f}"
                    }
                }
            };
        }
        private CuiElement XPUIInput(string parent, string command, int i, float height, int fontSize = 11, string content = "", string xMin = "0", string xMax = "1", TextAnchor align = TextAnchor.MiddleLeft, string color = "1 1 1 1", int limit = 0)
        {
            return new CuiElement
            {
                Parent = parent,
                Components =
                {
                    new CuiInputFieldComponent
                    {
                        FontSize = fontSize,
                        Align = align,
                        Command = command,
                        Color = color,
                        CharsLimit = limit,
                        NeedsKeyboard = true,
                        Text = content,
                        LineType = 0,
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = $"{xMin} {1 - height*i + i * .002f}",
                        AnchorMax = $"{xMax} {1 - height*(i-1) + i * .002f}",
                    }
                }
            };
        }
        private CuiPanel XPUIInputbackground(int i, float height, string color = "0 0 0 0.7", string xMin = "0", string xMax = "1")
        {
            return new CuiPanel
            {
                RectTransform =
                {
                    AnchorMin = $"{Convert.ToDouble(xMin) - .005} {1 - height*i + i * .002f + .003}",
                    AnchorMax = $"{Convert.ToDouble(xMax) + .005} {1 - height*(i-1) + i * .002f - .003}",
                },
                Image =
                {
                    Color = color
                }
            };
        }
        private CuiButton XPToggle(string command, int i, float height, bool value, string xMin = "0", double width = .006)
        {
            return new CuiButton
            {
                RectTransform =
                {
                    AnchorMin = $"{xMin} {1 - height*i + i * .002f + .006}",
                    AnchorMax = $"{Convert.ToDouble(xMin) + width} {1 - height*(i-1) + i * .002f - .006}",
                },
                Button =
                {
                    Color = value ? "0 1 0 1" : "1 0 0 1",
                    Command = value ? $"{command} false" : $"{command} true"
                }
            };
        }
        private void DestroyUi(BasePlayer player, string name)
        {
            if (player == null || name == null) return;
            CuiHelper.DestroyUi(player, name);
        }
        #endregion

        #region Player Panels
        // Handlers
        #region Handlers
        [ConsoleCommand("xp.playercontrol")]
        private void Cmdplayercontrolnew(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            string page = arg.GetString(0);
            if (page == null) page = "main";
            string type = arg.GetString(1);
            switch (page)
            {
                case "main":
                    ClearPlayerUIs(player, true);
                    string otherplayer = arg.GetString(2);
                    PlayerProfile(player, FindPlayer(otherplayer));
                    PlayerProfileMain(player, FindPlayer(otherplayer));
                    break;
                case "data":
                    ClearPlayerUIs(player);
                    PlayerProfileStatsAndSkills(player, type, arg.GetString(2));
                    break;
                case "history":
                    string otherplayerhistory = arg.GetString(2);
                    int pagenum = arg.GetInt(3);
                    var orderby = arg.GetString(4);
                    var order = arg.GetString(5);
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player, FindPlayer(otherplayerhistory));
                    PlayerProfileRecords(player, type, FindPlayer(otherplayerhistory), pagenum, orderby, order);
                    break;
                case "raids":
                    int raidpage = arg.GetInt(1);
                    string otherplayerraids = arg.GetString(2);
                    if (XPerienceAddon != null && RaidableBases != null)
                    {
                        ClearPlayerUIs(player, true);
                        PlayerProfile(player, FindPlayer(otherplayerraids));
                        PlayerProfileRaids(player, raidpage, FindPlayer(otherplayerraids));
                    }
                    break;
                case "settings":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerSettings(player);
                    break;
                case "topplayers":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerTopList(player, 1, "basicexperience", 0);
                    break;
                case "getprompt":
                    string value = arg.GetString(2);
                    if (type == null || value == null) return;
                    PlayerPromptBox(player, "reset", type, value);
                    break;
                case "reset":
                    switch (type)
                    {
                        case "stats":
                            if (config.defaultOptions.hardcorenoreset)
                            {
                                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                                return;
                            }
                            StatsResetAll(player);
                            ClearPlayerUIs(player);
                            PlayerProfileMain(player);
                            break;
                        case "skills":
                            if (config.defaultOptions.hardcorenoreset)
                            {
                                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                                return;
                            }
                            SkillsResetAll(player);
                            ClearPlayerUIs(player);
                            PlayerProfileMain(player);
                            break;
                        case "stat":
                            string stat = arg.GetString(2);
                            if (config.defaultOptions.hardcorenoreset)
                            {
                                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                                return;
                            }
                            StatReset(player, stat);
                            ClearPlayerUIs(player);
                            PlayerProfileStatsAndSkills(player, stat.ToLower(), "stats");
                            break;
                        case "skill":
                            string skill = arg.GetString(2);
                            if (config.defaultOptions.hardcorenoreset)
                            {
                                player.ChatMessage(XPLang("hardcorenoreset", player.UserIDString));
                                return;
                            }
                            SkillReset(player, skill);
                            ClearPlayerUIs(player);
                            PlayerProfileStatsAndSkills(player, skill.ToLower(), "skills");
                            break;
                    }
                    break;
                case "welcome":
                    if (XPerienceAddon != null)
                    {
                        ClearPlayerUIs(player, true);
                        XPerienceAddon.Call<string>("WelcomePanel", player);
                        XPerienceAddon.Call<string>("WelcomePanelHome", player);
                    }
                    break;
                case "close":
                    ClearPlayerUIs(player, true);
                    break;
                case "closedmgskins":
                    DestroyUi(player, XPeriencePlayerDMGSkins);
                    break;
                case "opendmgskins":
                    int dmgbarpage = arg.GetInt(1);
                    DestroyUi(player, XPeriencePlayerDMGSkins);
                    PlayerDamageBarSkins(player, dmgbarpage);
                    break;
                case "closebgoptions":
                    DestroyUi(player, XPeriencePlayerBGImgs);
                    break;
                case "openbgoptions":
                    int bgpage = arg.GetInt(1);
                    DestroyUi(player, XPeriencePlayerBGImgs);
                    PlayerProfileBGImgs(player, bgpage);
                    break;
                case "closeprompt":
                    DestroyUi(player, XPeriencePlayerControlPrompt);
                    break;
                case "help":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerHelp(player, type, arg.GetString(2));
                    break;
                case "calculationsranks":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerCalculationPageRanks(player, arg.GetInt(1));
                    break;
                case "calculationslevels":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerCalculationPageLevels(player, arg.GetInt(1), arg.GetInt(2));
                    break;
                case "calculationslevelpage":
                    DestroyUi(player, XPeriencePlayerCalculations);
                    DestroyUi(player, XPeriencePlayerCalculationsLevelSelection);
                    DestroyUi(player, XPeriencePlayerCalculationsRanksSelection);
                    PlayerCalculationPageLevels(player, arg.GetInt(1), arg.GetInt(2));
                    break;
                case "calculationsstats":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerCalculationPageStats(player);
                    break;
                case "calculationsskills":
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerCalculationPageSkills(player);
                    break;
                case "fix":
                    PlayerFixData(player);
                    ClearPlayerUIs(player, true);
                    PlayerProfile(player);
                    PlayerSettings(player);
                    break;
                case "admin":
                    if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
                    ClearPlayerUIs(player, true);
                    DestroyUi(player, XPerienceAdminPanelMain);
                    AdminControlPanel(player);
                    AdminInfoPage(player);
                    break;
            }
        }
        [ConsoleCommand("xp.playeredits")]
        private void Cmdplayeredits(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            string type = arg.GetString(0);
            switch (type)
            {
                case "settings":
                    string setting = arg.GetString(1);
                    switch (setting)
                    {
                        case "liveui":
                            int location = arg.GetInt(2);
                            _xperienceCache[player.UserIDString].UILocation = location;
                            LiveStats(player);
                            break;
                        case "enabledash":
                            int enabledash = arg.GetInt(2);
                            _xperienceCache[player.UserIDString].dash = (int)enabledash;
                            break;
                        case "speedometertype":
                            int speedometertype = arg.GetInt(2);
                            _xperienceCache[player.UserIDString].speedometertype = (int)speedometertype;
                            break;
                        case "disableranks":
                            bool option = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].DisableRank = option;
                            LiveStats(player);
                            break;
                        case "prompt":
                            bool prompt = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].enableconfirmationprompt = prompt;
                            break;
                        case "chatnotify":
                            bool chatnotify = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].showchatnotifications = chatnotify;
                            break;
                        case "chatprofile":
                            bool chatprofile = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].showchatprofileonconnect = chatprofile;
                            break;
                        case "xpchat":
                            bool xpchat = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].showchatxp = xpchat;
                            break;
                        case "welcomepanel":
                            bool welcomepanel = arg.GetBool(2);
                            _xperienceCache[player.UserIDString].showwelcomepanel = welcomepanel;
                            break;
                    }
                    ClearPlayerUIs(player);
                    PlayerSettings(player);
                    break;
                case "getprompt":
                    PlayerPromptBox(player, "levelup", arg.GetString(1), arg.GetString(2));
                    break;
                case "stat":
                    StatUp(player, arg.GetString(1));
                    ClearPlayerUIs(player);
                    PlayerProfileStatsAndSkills(player, arg.GetString(1), "stats");
                    break;
                case "skill":
                    SkillUp(player, arg.GetString(1));
                    ClearPlayerUIs(player);
                    PlayerProfileStatsAndSkills(player, arg.GetString(1), "skills");
                    break;
                case "help":
                    ClearPlayerUIs(player);
                    PlayerHelp(player, arg.GetString(2));
                    break;
                case "dmgskins":
                    int dmgbar = arg.GetInt(1);
                    int dmgbarpage = arg.GetInt(2);
                    _xperienceCache[player.UserIDString].dmgbar = (int)dmgbar;
                    DestroyUi(player, XPeriencePlayerDMGSkins);
                    PlayerDamageBarSkins(player, dmgbarpage);
                    break;
                case "profilebg":
                    int bgid = arg.GetInt(1);
                    int bgpage = arg.GetInt(2);
                    _xperienceCache[player.UserIDString].profilebg = (int)bgid;
                    DestroyUi(player, XPeriencePlayerBGImgs);
                    PlayerProfileBGImgs(player, bgpage);
                    break;
                case "rankup":
                    RankUp(player, 0, true);
                    break;
            }
        }
        [ConsoleCommand("xp.topplayers")]
        private void Cmdtopplayernew(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            int page = arg.GetInt(0);
            string type = arg.GetString(1);
            string selection = arg.GetString(2);
            int number = arg.GetInt(3);
            switch (type)
            {
                case "levels":
                    ClearPlayerUIs(player);
                    PlayerTopList(player, page, selection, number);
                    break;
                case "stats":
                    ClearPlayerUIs(player);
                    PlayerTopList(player, page, selection, number);
                    break;
                case "close":
                    ClearPlayerUIs(player, true);
                    break;
            }
        }
        private string LevelIcon(BasePlayer player, int percent)
        {
            object levelicon = XPeriencelevel;
            if (percent < 20)
            {
                levelicon = XPeriencelevel0;
            }
            else if (percent >= 20 && percent < 40)
            {
                levelicon = XPeriencelevel2;
            }
            else if (percent >= 40 && percent < 60)
            {
                levelicon = XPeriencelevel4;
            }
            else if (percent >= 60 && percent < 80)
            {
                levelicon = XPeriencelevel6;
            }
            else if (percent >= 80 && percent < 95)
            {
                levelicon = XPeriencelevel8;
            }
            else if (percent >= 95)
            {
                levelicon = XPeriencelevel10;
            }
            return levelicon.ToString();
        }
        private object PlayerTimeValues(BasePlayer player, string type, double value)
        {
            if (type == "lifespan") { value = CurrentTime - value; }
            double minutes = (int)(value % 3600) / 60;
            double hours = (int)(value % 86400) / 3600;
            double days = (int)(value % (86400 * 30)) / 86400;
            string showdays = "";
            string showhours = "";
            string showmins = "";
            if (days > 0)
            {
                showdays = $"Days: <color={TextColor(player, "level", days)}>{days}</color> ";
            }
            if (hours > 0)
            {
                showhours = $"Hours: <color={TextColor(player, "level", hours)}>{hours}</color> ";
            }
            if (minutes > 0)
            {
                showmins = $"Mins: <color={TextColor(player, "level", minutes)}>{minutes}</color> ";
            }
            if (days == 0 && hours == 0 && minutes == 0)
            {
                return 0;
            }
            string playertime = $"{showdays}{showhours}{showmins}";
            return playertime;
        }
        private object PlayerInfoValues(BasePlayer player, BaseEntity entity, string type)
        {
            string DMGType = entity?.GetType().Name;
            switch (type)
            {
                case "dmgrecieved":
                    if (DMGType == "BasePlayer")
                    {
                        var playername = entity as BasePlayer;
                        DMGType = playername.displayName;
                    }
                    return DMGType;
                case "dmgdelt":
                    if (DMGType == "BasePlayer")
                    {
                        var playername = entity as BasePlayer;
                        DMGType = playername.displayName;
                    }
                    return DMGType;
            }
            return DMGType;
        }
        private string SelectedIcon(string type, string data)
        {
            string icon = "";
            switch (type)
            {
                case "next":
                    switch (data)
                    {
                        // Stats
                        case "mentality":
                            icon = XPeriencedexterity;
                            break;
                        case "dexterity":
                            icon = XPeriencemight;
                            break;
                        case "might":
                            icon = XPerienceweaponry;
                            break;
                        case "weaponry":
                            icon = XPerienceninjary;
                            break;
                        case "ninjary":
                            icon = XPeriencecaptaincy;
                            break;
                        case "captaincy":
                            icon = XPeriencementality;
                            break;
                        // Skills
                        case "woodcutter":
                            icon = XPeriencesmithy;
                            break;
                        case "smithy":
                            icon = XPerienceminer;
                            break;
                        case "miner":
                            icon = XPerienceforager;
                            break;
                        case "forager":
                            icon = XPeriencehunter;
                            break;
                        case "hunter":
                            icon = XPeriencecrafter;
                            break;
                        case "crafter":
                            icon = XPerienceframer;
                            break;
                        case "framer":
                            icon = XPeriencefisher;
                            break;
                        case "fisher":
                            icon = XPeriencemedic;
                            break;
                        case "medic":
                            icon = XPeriencescavenger;
                            break;
                        case "scavenger":
                            icon = XPerienceelectrician;
                            break;
                        case "electrician":
                            icon = XPeriencedemolitionist;
                            break;
                        case "demolitionist":
                            if (config.tamer.enabletame)
                            {
                                icon = XPeriencetamer;
                                break;
                            }
                            else
                            {
                                icon = XPeriencewoodcutter;
                                break;
                            }
                        case "tamer":
                            icon = XPeriencewoodcutter;
                            break;
                    }
                    break;
                case "prev":
                    switch (data)
                    {
                        // Stats
                        case "mentality":
                            icon = XPeriencecaptaincy;
                            break;
                        case "dexterity":
                            icon = XPeriencementality;
                            break;
                        case "might":
                            icon = XPeriencedexterity;
                            break;
                        case "weaponry":
                            icon = XPeriencemight;
                            break;
                        case "ninjary":
                            icon = XPerienceweaponry;
                            break;
                        case "captaincy":
                            icon = XPerienceninjary;
                            break;
                        // Skills
                        case "woodcutter":
                            if (config.tamer.enabletame)
                            {
                                icon = XPeriencetamer;
                                break;
                            }
                            else
                            {
                                icon = XPeriencedemolitionist;
                                break;
                            }
                        case "smithy":
                            icon = XPeriencewoodcutter;
                            break;
                        case "miner":
                            icon = XPeriencesmithy;
                            break;
                        case "forager":
                            icon = XPerienceminer;
                            break;
                        case "hunter":
                            icon = XPerienceforager;
                            break;
                        case "crafter":
                            icon = XPeriencehunter;
                            break;
                        case "framer":
                            icon = XPeriencecrafter;
                            break;
                        case "fisher":
                            icon = XPerienceframer;
                            break;
                        case "medic":
                            icon = XPeriencefisher;
                            break;
                        case "scavenger":
                            icon = XPeriencemedic;
                            break;
                        case "electrician":
                            icon = XPeriencescavenger;
                            break;
                        case "demolitionist":
                            icon = XPerienceelectrician;
                            break;
                        case "tamer":
                            icon = XPeriencedemolitionist;
                            break;
                    }
                    break;
            }
            return icon;
        }
        private object SelectedData(string type, string data, string page = "")
        {
            string newdata = "";
            switch (type)
            {
                case "next":
                    switch (data)
                    {
                        // Level - XP - Rank
                        case "basiclevel":
                            newdata = "basicexperience";
                            break;
                        case "basicexperience":
                            if (config.xpLevelRanks.enableresetranks)
                            {
                                newdata = "rank";
                            }
                            else
                            {
                                newdata = "mentality";
                            }
                            break;
                        case "rank":
                            newdata = "mentality";
                            break;
                        // Stats
                        case "mentality":
                            newdata = "dexterity";
                            break;
                        case "dexterity":
                            newdata = "might";
                            break;
                        case "might":
                            newdata = "weaponry";
                            break;
                        case "weaponry":
                            newdata = "ninjary";
                            break;
                        case "ninjary":
                            newdata = "captaincy";
                            break;
                        case "captaincy":
                            if (page == "top")
                            {
                                newdata = "woodcutter";
                            }
                            else
                            {
                                newdata = "mentality";
                            }
                            break;
                        // Skills
                        case "woodcutter":
                            newdata = "smithy";
                            break;
                        case "smithy":
                            newdata = "miner";
                            break;
                        case "miner":
                            newdata = "forager";
                            break;
                        case "forager":
                            newdata = "hunter";
                            break;
                        case "hunter":
                            newdata = "crafter";
                            break;
                        case "crafter":
                            newdata = "framer";
                            break;
                        case "framer":
                            newdata = "fisher";
                            break;
                        case "fisher":
                            newdata = "medic";
                            break;
                        case "medic":
                            newdata = "scavenger";
                            break;
                        case "scavenger":
                            newdata = "electrician";
                            break;
                        case "electrician":
                            newdata = "demolitionist";
                            break;
                        case "demolitionist":
                            if (config.tamer.enabletame)
                            {
                                newdata = "tamer";
                                break;
                            }
                            else
                            {
                                if (page == "top")
                                {
                                    newdata = "basiclevel";
                                }
                                else
                                {
                                    newdata = "woodcutter";
                                }
                                break;
                            }
                        case "tamer":
                            if (page == "top")
                            {
                                newdata = "basiclevel";
                            }
                            else
                            {
                                newdata = "woodcutter";
                            }
                            break;
                    }
                    break;
                case "prev":
                    switch (data)
                    {
                        // Level - XP - Rank
                        case "basiclevel":
                            if (config.tamer.enabletame)
                            {
                                newdata = "tamer";
                            }
                            else
                            {
                                newdata = "electrician";
                            }
                            break;
                        case "basicexperience":
                            newdata = "basiclevel";
                            break;
                        case "rank":
                            newdata = "basicexperience";
                            break;
                        // Stats
                        case "mentality":
                            if (page == "top")
                            {
                                if (config.xpLevelRanks.enableresetranks)
                                {
                                    newdata = "rank";
                                }
                                else
                                {
                                    newdata = "basicexperience";
                                }
                            }
                            else
                            {
                                newdata = "captaincy";
                            }
                            break;
                        case "dexterity":
                            newdata = "mentality";
                            break;
                        case "might":
                            newdata = "dexterity";
                            break;
                        case "weaponry":
                            newdata = "might";
                            break;
                        case "ninjary":
                            newdata = "weaponry";
                            break;
                        case "captaincy":
                            newdata = "ninjary";
                            break;
                        // Skills
                        case "woodcutter":
                            if (page == "top")
                            {
                                newdata = "captaincy";
                                break;
                            }
                            else
                            {
                                if (config.tamer.enabletame)
                                {
                                    newdata = "tamer";
                                    break;
                                }
                                else
                                {
                                    newdata = "demolitionist";
                                    break;
                                }
                            }
                        case "smithy":
                            newdata = "woodcutter";
                            break;
                        case "miner":
                            newdata = "smithy";
                            break;
                        case "forager":
                            newdata = "miner";
                            break;
                        case "hunter":
                            newdata = "forager";
                            break;
                        case "crafter":
                            newdata = "hunter";
                            break;
                        case "framer":
                            newdata = "crafter";
                            break;
                        case "fisher":
                            newdata = "framer";
                            break;
                        case "medic":
                            newdata = "fisher";
                            break;
                        case "scavenger":
                            newdata = "medic";
                            break;
                        case "electrician":
                            newdata = "scavenger";
                            break;
                        case "demolitionist":
                            newdata = "electrician";
                            break;
                        case "tamer":
                            newdata = "demolitionist";
                            break;
                    }
                    break;
            }
            return newdata;
        }
        private double IconAdjustment(double adjustment, string type)
        {
            switch (type)
            {
                case "stats":
                    if (config.mentality.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.dexterity.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.might.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.might.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.weaponry.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.ninjary.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.captaincy.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    break;
                case "skills":
                    if (config.woodcutter.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.smithy.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.miner.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.forager.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.hunter.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.crafter.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.framer.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.fisher.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.medic.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.scavenger.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.electrician.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (config.demolitionist.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    if (!config.tamer.enabletame || config.tamer.maxlvl <= 0)
                    {
                        adjustment += .025;
                    }
                    break;
            }
            return adjustment;
        }
        private double RankBoosts(BasePlayer player, string type, double amount, bool enabled)
        {
            XPRecord record = GetXPRecord(player);
            if (record.rank <= 0 || record.DisableRank || !enabled) return amount;
            switch (type)
            {
                case "stat":
                    if (config.xpLevelRanks.rankstatboost && !record.DisableRank)
                    {
                        amount += config.xpLevelRanks.rankstatboostamount * record.rank;
                    }
                    break;
                case "skill":
                    if (config.xpLevelRanks.rankskillboost && !record.DisableRank)
                    {
                        amount += config.xpLevelRanks.rankskillboostamount * record.rank;
                    }
                    break;
            }
            return amount;
        }
        private string ConvertUnixTimeStampToDateTime(int unixtime)
        {
            //DateTime sTime = new DateTime(1970, 1, 1, 0, 0, 0).ToLocalTime();
            var time = DateTimeOffset.Now.ToUnixTimeSeconds() - unixtime;
            var y = time / 31556926 % 12;
            var w = time / 604800 % 52;
            var d = time / 86400 % 7;
            var h = time / 3600 % 24;
            var m = time / 60 % 60;
            string years = "";
            string weeks = "";
            string days = "";
            string hours = "";
            string mins = "";
            if (y != 0) { years = $"{y}y, "; }
            if (w != 0) { weeks = $"{w}w, "; }
            if (d != 0) { days = $"{d}d, "; }
            if (h != 0) { hours = $"{h}h, "; }
            if (m != 0) { mins = $"{m}m"; }
            string timeago = $"{years}{weeks}{days}{hours}{mins}";
            return timeago;
        }
        public class Deaths
        {
            public string victim;
            public string victimname;
            public string attacker;
            public string attackername;
            public string weapon;
            public string lastdamage;
            public float distance;
            public long timestamp;
        }
        private class Raids
        {
            public Vector3 Location;
            public string BaseName;
            public int mode;
            public bool allowPVP;
            public string id;
            public float spawnTime;
            public float despawnTime;
            public float loadTime;
            public ulong ownerid;
            public List<ulong> raiders;
            public DateTime spawnDateTime;
            public DateTime despawnDateTime;
        }
        public class DmgBarImgs
        {
            public string name;
            public string url;
        }
        private static string PositionToGrid(Vector3 position) => MapHelper.PositionToString(position);
        private object GetKillRecords(string player, string entity)
        {
            if (KillRecords == null) return 0;
            object value = KillRecords.Call("GetKillRecord", player, entity);
            if (value == null) return 0;
            return Convert.ToInt32(value);
        }
        private IEnumerable<XPRecord> GetTopXP(int page, int takeCount, string selection)
        {
            IEnumerable<XPRecord> data = null;
            switch (selection)
            {
                case "rank":
                    data = _xperienceCache.Values.OrderByDescending(i => i.trueexperience);
                    break;
                case "basiclevel":
                    data = _xperienceCache.Values.OrderByDescending(i => i.level);
                    break;
                case "basicexperience":
                    data = _xperienceCache.Values.OrderByDescending(i => i.experience);
                    break;
                case "level":
                    data = _xperienceCache.Values.OrderByDescending(i => i.truelevel);
                    break;
                case "experience":
                    data = _xperienceCache.Values.OrderByDescending(i => i.trueexperience);
                    break;
                case "mentality":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Mentality);
                    break;
                case "dexterity":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Dexterity);
                    break;
                case "might":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Might);
                    break;
                case "captaincy":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Captaincy);
                    break;
                case "weaponry":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Weaponry);
                    break;
                case "ninjary":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Ninjary);
                    break;
                case "woodcutter":
                    data = _xperienceCache.Values.OrderByDescending(i => i.WoodCutter);
                    break;
                case "smithy":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Smithy);
                    break;
                case "miner":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Miner);
                    break;
                case "forager":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Forager);
                    break;
                case "hunter":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Hunter);
                    break;
                case "fisher":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Fisher);
                    break;
                case "crafter":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Crafter);
                    break;
                case "framer":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Framer);
                    break;
                case "medic":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Medic);
                    break;
                case "scavenger":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Scavenger);
                    break;
                case "electrician":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Electrician);
                    break;
                case "tamer":
                    data = _xperienceCache.Values.OrderByDescending(i => i.Tamer);
                    break;
            }
            return data?
            .Skip((page - 1) * takeCount)
            .Take(takeCount);
        }
        private void ClearPlayerUIs(BasePlayer player, bool all = false, bool live = false)
        {
            DestroyUi(player, XPeriencePlayerProfileMain);
            DestroyUi(player, XPeriencePlayerProfileStatsAndSkills);
            DestroyUi(player, XPeriencePlayerProfileStatsAndSkillsMenu);
            DestroyUi(player, XPeriencePlayerProfileSettings);
            DestroyUi(player, XPeriencePlayerProfileKills);
            DestroyUi(player, XPeriencePlayerProfileKillsPages);
            DestroyUi(player, XPeriencePlayerProfileRaids);
            DestroyUi(player, XPeriencePlayerProfileRaidsPages);
            DestroyUi(player, XPerienceTopInner);
            DestroyUi(player, XPerienceTopPageSelection);
            DestroyUi(player, XPeriencePlayerControlPrompt);
            DestroyUi(player, XPeriencePlayerProfileHelp);
            DestroyUi(player, XPeriencePlayerProfileHelpPages);
            DestroyUi(player, XPeriencePlayerCalculations);
            DestroyUi(player, XPeriencePlayerCalculationsLevelSelection);
            DestroyUi(player, XPeriencePlayerCalculationsRanksSelection);
            DestroyUi(player, XPeriencePlayerDMGSkins);
            DestroyUi(player, XPeriencePlayerBGImgs);
            if (all)
            {
                DestroyUi(player, XPeriencePlayerProfileOutside);
                DestroyUi(player, XPeriencePlayerProfile);
                DestroyUi(player, XPerienceAdminPanelMain);
            }
            if (live)
            {
                DestroyUi(player, XPerienceLivePrimary);
                DestroyUi(player, XPerienceLiveDashPanel);
                DestroyUi(player, XPerienceLiveFuel);
                DestroyUi(player, XPerienceLiveSpeed);
            }
        }
        #endregion
        // Live Panels
        public void LiveStats(BasePlayer player, bool zone = false, string consumable = "none")
        {
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc || !player.isSpawned) return;
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null) return;
            Ranks rank = GetXPRank(xprecord.rank);
            DestroyUi(player, XPerienceLivePrimary);
            // XP Bar Calculations
            double lastlevel;
            double nextlevel;
            double currentxp;
            double reqxpperc;
            double remainingxp;
            double levelpercent;
            if (xprecord.experience == 0 || xprecord.level == 0)
            {
                lastlevel = 0;
                nextlevel = config.xpLevel.levelstart;
                currentxp = xprecord.experience - lastlevel;
                reqxpperc = currentxp / nextlevel;
                remainingxp = nextlevel - currentxp;
                levelpercent = reqxpperc * 100;
            }
            else
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    lastlevel = xprecord.requiredxp - (xprecord.level * (config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank)));
                }
                else
                {
                    lastlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
                }
                nextlevel = xprecord.requiredxp - lastlevel;
                currentxp = xprecord.experience - lastlevel;
                reqxpperc = currentxp / nextlevel;
                remainingxp = nextlevel - currentxp;
                levelpercent = reqxpperc * 100;
            }
            // Armor Bar Calculations
            double armor = 0;
            double armorperc = 0;
            double currentarmor = 0;
            if (!zone)
            {
                if (GetTeaCooldown(player) == 0)
                {
                    xprecord.teacooldown = 0;
                    xprecord.teatype = consumable;
                }
                armor = (xprecord.Might * config.might.armor) * 100;
                double maxhealth = player._maxHealth - armor;
                double playerhealth = player._health;
                // Default Armor - No Tea Effects
                if (player._health > maxhealth)
                {
                    currentarmor = Math.Ceiling((player._health - maxhealth));
                }
                // Extra Armor - Add Tea Effects
                double teatime = 1200;
                double teaboost = 0;
                bool teamodified = false;
                // Check for TeaModifier Plugin and Values
                if (TeaModifiers != null)
                {
                    teatime = TeaModifiers.Call<float>("GetTeaDuration", player, consumable, Modifier.ModifierType.Max_Health);
                    teaboost = TeaModifiers.Call<float>("GetTeaValue", player, consumable, Modifier.ModifierType.Max_Health) * 100;
                    teamodified = true;
                }
                // Update PlayerData
                if (consumable.Contains("maxhealthtea"))
                {
                    xprecord.teacooldown = (double)CurrentTime + teatime;
                    xprecord.teatype = consumable;
                }
                // Get Updated Data
                if (GetTeaCooldown(player) != 0)
                {
                    if (teamodified)
                    {
                        teaboost = TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                    }
                    switch (GetTeaTypes(player))
                    {
                        case "none":
                            teaboost = 0;
                            break;
                        case "maxhealthtea":
                            if (!teamodified)
                            {
                                teaboost = 5;
                            }
                            break;
                        case "maxhealthtea.advanced":
                            if (!teamodified)
                            {
                                teaboost = 12.5;
                            }
                            break;
                        case "maxhealthtea.pure":
                            if (!teamodified)
                            {
                                teaboost = 20;
                            }
                            break;
                    }
                }
                // Apply Results to Armor
                if (GetTeaCooldown(player) != 0)
                {
                    playerhealth += teaboost;
                    if (playerhealth > maxhealth)
                    {
                        if (teamodified)
                        {
                            currentarmor = Math.Ceiling((player._health - maxhealth) - teaboost);
                        }
                        if (!teamodified)
                        {
                            currentarmor = Math.Ceiling((player._health - maxhealth) - teaboost);
                        }
                        if (currentarmor < 0) currentarmor = 0;
                        armor += Math.Ceiling((teaboost * config.might.armor) * xprecord.Might);
                    }
                }
                // Calculate Armor Bar Display
                armorperc = currentarmor / armor;
            }
            // Live Stats Display
            var LIVEelements = new CuiElementContainer();
            string levelicon = XPeriencelevel;
            if (config.defaultOptions.useprogressivelevelicons)
            {
                levelicon = LevelIcon(player, (int)levelpercent);
            }
            switch (xprecord.UILocation)
            {
                case 1:
                    #region LIVEloc1
                    // Live UI Box
                    LIVEelements.Add(XPUIPanel2("1 0", "1 0", "-392 16", "-210 126", "0.5 0.5 0.5 0"), "Hud", XPerienceLivePrimary);
                    // Rank
                    if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                    {
                        if (xprecord.Might > 0 && config.might.armor > 0)
                        {
                            LIVEelements.Add(XPUIPanel("0 0.76", "0.125 0.95"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.76", "0.99 0.99", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                        else
                        {
                            LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                    }
                    // Armor
                    if (xprecord.Might > 0 && config.might.armor > 0)
                    {
                        LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                        LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencearmor, 1, .9f, "0.15", "0.85"));
                        LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                        //LIVEelements.Add(XPUIPanel("0.01 0.145", $"{armorperc - 0.01} 0.845", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUIPanel("0.01 0.145", $"{armorperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.armorbar)} 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUILabel($"{currentarmor}   /   {armor}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    }
                    // Level
                    LIVEelements.Add(XPUIPanel("0 0.255", "0.125 0.44"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, levelicon, 1, .9f, "0.15", "0.95"));
                    LIVEelements.Add(XPUIPanel("0.13 0.255", "0.99 0.480", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{XPLang("level", player.UserIDString)}: {xprecord.level} ({(int)levelpercent}%)", 1, 1.06f, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    // XP
                    LIVEelements.Add(XPUIPanel("0 0", "0.125 0.185"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencexp, 1, .9f, "0.15", "0.80"));
                    LIVEelements.Add(XPUIPanel("0.13 0", "0.99 0.23", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUIPanel("0.01 0.135", $"{reqxpperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.xpbar)} 0.80"), XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{(int)remainingxp}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    #endregion
                    break;
                case 2:
                    #region LIVEloc2
                    // Live UI Box
                    LIVEelements.Add(XPUIPanel2("0 0", "0 0", "10 16", "210 126", "0.5 0.5 0.5 0"), "Hud", XPerienceLivePrimary);
                    // Rank
                    if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                    {
                        if (xprecord.Might > 0 && config.might.armor > 0)
                        {
                            LIVEelements.Add(XPUIPanel("0 0.76", "0.125 0.95"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.76", "0.99 0.99", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                        else
                        {
                            LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                    }
                    // Armor
                    if (xprecord.Might > 0 && config.might.armor > 0)
                    {
                        LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                        LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencearmor, 1, .9f, "0.15", "0.85"));
                        LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                        LIVEelements.Add(XPUIPanel("0.01 0.145", $"{armorperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.armorbar)} 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUILabel($"{currentarmor}   /   {armor}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    }
                    // Level
                    LIVEelements.Add(XPUIPanel("0 0.255", "0.125 0.44"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, levelicon, 1, .9f, "0.15", "0.95"));
                    LIVEelements.Add(XPUIPanel("0.13 0.255", "0.99 0.480", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{XPLang("level", player.UserIDString)}: {xprecord.level} ({(int)levelpercent}%)", 1, 1.06f, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    // XP
                    LIVEelements.Add(XPUIPanel("0 0", "0.125 0.185"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencexp, 1, .9f, "0.15", "0.80"));
                    LIVEelements.Add(XPUIPanel("0.13 0", "0.99 0.23", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUIPanel("0.01 0.135", $"{reqxpperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.xpbar)} 0.80"), XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{(int)remainingxp}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    #endregion
                    break;
                case 3:
                    #region LIVEloc3
                    // Live UI Box
                    LIVEelements.Add(XPUIPanel2("0 1", "0 1", "10 -126", "210 -16", "0.5 0.5 0.5 0"), "Hud", XPerienceLivePrimary);
                    // Rank
                    if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                    {
                        if (xprecord.Might > 0 && config.might.armor > 0)
                        {
                            LIVEelements.Add(XPUIPanel("0 0.76", "0.125 0.95"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.76", "0.99 0.99", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                        else
                        {
                            LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                    }
                    // Armor
                    if (xprecord.Might > 0 && config.might.armor > 0)
                    {
                        LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                        LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencearmor, 1, .9f, "0.15", "0.85"));
                        LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                        LIVEelements.Add(XPUIPanel("0.01 0.145", $"{armorperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.armorbar)} 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUILabel($"{currentarmor}   /   {armor}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    }
                    // Level
                    LIVEelements.Add(XPUIPanel("0 0.255", "0.125 0.44"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, levelicon, 1, .9f, "0.15", "0.95"));
                    LIVEelements.Add(XPUIPanel("0.13 0.255", "0.99 0.480", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{XPLang("level", player.UserIDString)}: {xprecord.level} ({(int)levelpercent}%)", 1, 1.06f, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    // XP
                    LIVEelements.Add(XPUIPanel("0 0", "0.125 0.185"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencexp, 1, .9f, "0.15", "0.80"));
                    LIVEelements.Add(XPUIPanel("0.13 0", "0.99 0.23", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUIPanel("0.01 0.135", $"{reqxpperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.xpbar)} 0.80"), XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{(int)remainingxp}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    #endregion
                    break;
                case 4:
                    #region LIVEloc4
                    // Live UI Box
                    LIVEelements.Add(XPUIPanel2("1 1", "1 1", "-210 -126", "-10 -16", "0.5 0.5 0.5 0"), "Hud", XPerienceLivePrimary);
                    // Rank
                    if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                    {
                        if (xprecord.Might > 0 && config.might.armor > 0)
                        {
                            LIVEelements.Add(XPUIPanel("0 0.76", "0.125 0.95"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.76", "0.99 0.99", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                        else
                        {
                            LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                    }
                    // Armor
                    if (xprecord.Might > 0 && config.might.armor > 0)
                    {
                        LIVEelements.Add(XPUIPanel("0 0.51", "0.125 0.70"), XPerienceLivePrimary, XPerienceLiveIcon);
                        LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencearmor, 1, .9f, "0.15", "0.85"));
                        LIVEelements.Add(XPUIPanel("0.13 0.51", "0.99 0.735", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                        LIVEelements.Add(XPUIPanel("0.01 0.145", $"{armorperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.armorbar)} 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUILabel($"{currentarmor}   /   {armor}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    }
                    // Level
                    LIVEelements.Add(XPUIPanel("0 0.255", "0.125 0.44"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, levelicon, 1, .9f, "0.15", "0.95"));
                    LIVEelements.Add(XPUIPanel("0.13 0.255", "0.99 0.480", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{XPLang("level", player.UserIDString)}: {xprecord.level} ({(int)levelpercent}%)", 1, 1.06f, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    // XP
                    LIVEelements.Add(XPUIPanel("0 0", "0.125 0.185"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencexp, 1, .9f, "0.15", "0.80"));
                    LIVEelements.Add(XPUIPanel("0.13 0", "0.99 0.23", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUIPanel("0.01 0.135", $"{reqxpperc - 0.01} 0.845", $"{LiveColorConverter(config.uitextColor.xpbar)} 0.80"), XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{(int)remainingxp}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    #endregion
                    break;
                case 5:
                    #region LIVEloc5
                    // Live UI Box
                    LIVEelements.Add(XPUIPanel2("0.5 0", "0.5 0", "-200 0", "181.5 115", "0 0 0 0"), "Hud", XPerienceLivePrimary);
                    // Rank
                    if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                    {
                        if (xprecord.Might > 0 && config.might.armor > 0)
                        {
                            LIVEelements.Add(XPUIPanel("0 0.845", "0.06 1"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.062 0.845", "0.995 0.99", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                        else
                        {
                            LIVEelements.Add(XPUIPanel("0 0.69", "0.06 0.80"), XPerienceLivePrimary, XPerienceLiveIcon);
                            LIVEelements.Add(XPUIImage(XPerienceLiveIcon, rank.name, 1, .9f, "0.05", "0.90"));
                            LIVEelements.Add(XPUIPanel("0.062 0.69", "0.995 0.825", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                            LIVEelements.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.50 0.05 0.05 0.70"), XPerienceLiveData);
                        }
                    }
                    // Armor
                    if (xprecord.Might > 0 && config.might.armor > 0)
                    {
                        LIVEelements.Add(XPUIPanel("0 0.69", "0.06 0.80"), XPerienceLivePrimary, XPerienceLiveIcon);
                        LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencearmor, 1, .9f, "0.17", "0.82"));
                        LIVEelements.Add(XPUIPanel("0.062 0.69", "0.995 0.825", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                        LIVEelements.Add(XPUIPanel("0 0.015", $"{armorperc - 0.002} 0.90", $"{LiveColorConverter(config.uitextColor.armorbar)} 0.70"), XPerienceLiveData);
                        LIVEelements.Add(XPUILabel($"{currentarmor}   /   {armor}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    }
                    // Level
                    LIVEelements.Add(XPUIPanel("0 0", "0.06 0.12"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, levelicon, 1, .9f, "0.17", "0.82"));
                    LIVEelements.Add(XPUIPanel("0.062 0", "0.492 0.14", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{XPLang("level", player.UserIDString)}: {xprecord.level} ({(int)levelpercent}%)", 1, 1.06f, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    // XP
                    LIVEelements.Add(XPUIPanel("0.505 0", "0.56 0.12"), XPerienceLivePrimary, XPerienceLiveIcon);
                    LIVEelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencexp, 1, .9f, "0.15", "0.80"));
                    LIVEelements.Add(XPUIPanel("0.562 0", "0.995 0.14", "0.6 0.6 0.6 0.25"), XPerienceLivePrimary, XPerienceLiveData);
                    LIVEelements.Add(XPUIPanel("0.015 0.1", $"{reqxpperc - 0.001} 0.9", $"{LiveColorConverter(config.uitextColor.xpbar)} 0.80"), XPerienceLiveData);
                    LIVEelements.Add(XPUILabel($"{(int)remainingxp}", 1, 1, TextAnchor.MiddleLeft, 15, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveData);
                    #endregion
                    break;
                case 6:
                    break;
            }
            CuiHelper.AddUi(player, LIVEelements);
        }
        private void DashPanel(BasePlayer player, bool active, BaseMountable entity)
        {
            if (player == null || !player.userID.Get().IsSteamId() || player.IsNpc || entity == null) return;
            DestroyUi(player, XPerienceLiveDashPanel);
            XPRecord xprecord = GetXPRecord(player);
            if (xprecord == null || xprecord.UILocation == 0)
            {
                DestroyUi(player, XPerienceLiveDashPanel);
                return;
            }
            if (!active)
            {
                DestroyUi(player, XPerienceLiveDashPanel);
                DashPanelTimer?.Destroy();
                return;
            }
            DashPanelTimer = timer.Every(2f, () =>
            {
                DestroyUi(player, XPerienceLiveDashPanel);
                var Dashelements = new CuiElementContainer();
                // Get Fuel
                int fuel = GetFuel(entity);
                double fuelpercent = (fuel / 500.0) - 0.01;
                double fuelpercentd = Math.Ceiling((fuel / 500.0) * 100);
                // Get Speed
                string speedometer = GetSpeed(player, entity);
                // DashPanel Locations
                switch (xprecord.UILocation)
                {
                    case 1:
                        if (xprecord.Might > 0 && !xprecord.DisableRank && config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                        {
                            Dashelements.Add(XPUIPanel2("1 0", "1 0", "-392 125", "-210 150", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might <= 0 || config.might.armor <= 0) && (xprecord.DisableRank || !config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui))
                        {
                            Dashelements.Add(XPUIPanel2("1 0", "1 0", "-392 67", "-210 92", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might > 0 && (!config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui || xprecord.DisableRank)) || (xprecord.Might <= 0 && (!xprecord.DisableRank || config.xpLevelRanks.enableresetranks || config.xpLevelRanks.showrankinliveui)))
                        {
                            Dashelements.Add(XPUIPanel2("1 0", "1 0", "-392 95", "-210 120", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        break;
                    case 2:
                        if (xprecord.Might > 0 && !xprecord.DisableRank && config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                        {
                            Dashelements.Add(XPUIPanel2("0 0", "0 0", "10 125", "210 150", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might <= 0 || config.might.armor <= 0) && (xprecord.DisableRank || !config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui))
                        {
                            Dashelements.Add(XPUIPanel2("0 0", "0 0", "10 67", "210 92", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might > 0 && (xprecord.DisableRank || !config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui)) || (xprecord.Might <= 0 && (!xprecord.DisableRank || config.xpLevelRanks.enableresetranks || config.xpLevelRanks.showrankinliveui)))
                        {
                            Dashelements.Add(XPUIPanel2("0 0", "0 0", "10 95", "210 120", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        break;
                    case 3:
                        Dashelements.Add(XPUIPanel2("0 1", "0 1", "10 -155", "210 -130", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                        Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                        Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                        // Speedometer
                        Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                        Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                        // Fuel Guage
                        Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                        Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                        Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        break;
                    case 4:
                        Dashelements.Add(XPUIPanel2("1 1", "1 1", "-210 -155", "-10 -130", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                        Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                        Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                        // Speedometer
                        Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                        Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                        // Fuel Guage
                        Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                        Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                        Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        break;
                    case 5:
                        if (xprecord.Might > 0 && !xprecord.DisableRank && config.xpLevelRanks.enableresetranks && config.xpLevelRanks.showrankinliveui)
                        {
                            Dashelements.Add(XPUIPanel2("0.5 0", "0.5 0", "-100 110", "83.5 135", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might <= 0 || config.might.armor <= 0) && (xprecord.DisableRank || !config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui))
                        {
                            Dashelements.Add(XPUIPanel2("0.5 0", "0.5 0", "-100 76", "83.5 101", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        else if ((xprecord.Might > 0 && (xprecord.DisableRank || !config.xpLevelRanks.enableresetranks || !config.xpLevelRanks.showrankinliveui)) || (xprecord.Might <= 0 && (!xprecord.DisableRank || config.xpLevelRanks.enableresetranks || config.xpLevelRanks.showrankinliveui)))
                        {
                            Dashelements.Add(XPUIPanel2("0.5 0", "0.5 0", "-100 92", "83.5 122", "0.5 0.5 0.5 0"), "Hud", XPerienceLiveDashPanel);
                            Dashelements.Add(XPUIPanel("0 0", "1 1"), XPerienceLiveDashPanel, XPerienceLiveIcon);
                            Dashelements.Add(XPUIImage(XPerienceLiveIcon, XPeriencedash, 1, .9f, "0", "1"));
                            // Speedometer
                            Dashelements.Add(XPUIPanel("0 0.2", "0.45 1", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveSpeedBar);
                            Dashelements.Add(XPUILabel($"{speedometer}", 1, 1, TextAnchor.MiddleRight, 12, "0", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveSpeedBar);
                            // Fuel Guage
                            Dashelements.Add(XPUIPanel("0.61 0.35", "0.95 0.95", "0 0 0 0"), XPerienceLiveDashPanel, XPerienceLiveFuelBar);
                            Dashelements.Add(XPUIPanel("0.01 0.04", $"{fuelpercent} 0.82", "1 0.5 0 0.80"), XPerienceLiveFuelBar);
                            Dashelements.Add(XPUILabel($"{fuel} ({fuelpercentd}%)", 1, 1, TextAnchor.MiddleLeft, 11, "0.05", "1", "1.0 1.0 1.0 0.70"), XPerienceLiveFuelBar);
                        }
                        break;
                }
                CuiHelper.AddUi(player, Dashelements);
            });
        }
        // Player Profile UIs
        public void PlayerProfile(BasePlayer player, BasePlayer otherplayer = null)
        {
            #region Player Data
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (otherplayer != null)
            {
                xprecord = GetXPRecord(otherplayer);
            }
            if (otherplayer == null) otherplayer = player;
            if (xprecord == null) return;
            float buttonheight = (float)config.playerprofilesettings.menubuttonheight;
            int buttonfont = config.playerprofilesettings.menubuttonfont;
            var PlayerProfile = new CuiElementContainer();
            string Color = ".1 .1 .1 .99";
            #endregion
            // Main UI Outside
            if (config.playerprofilesettings.usebgimage || config.playerprofilesettings.usemenubgimage)
            {
                Color = "0 0 0 0";
            }
            PlayerProfile.Add(new CuiPanel
            {
                Image =
                {
                    Color = Color
                },
                RectTransform =
                {
                    AnchorMin = $"{config.playerprofilesettings.AnchorMin}",
                    AnchorMax = $"{config.playerprofilesettings.AnchorMax}",
                    OffsetMin = $"{config.playerprofilesettings.OffsetMin}",
                    OffsetMax = $"{config.playerprofilesettings.OffsetMax}"
                },
                CursorEnabled = true
            }, "Overlay", XPeriencePlayerProfileOutside);
            // Background Img
            if (config.playerprofilesettings.usebgimage)
            {
                BackgroundImgs bgimg = GetBGImg(xprecord.profilebg);
                PlayerProfile.Add(new CuiElement
                {
                    Parent = XPeriencePlayerProfileOutside,
                    Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", bgimg.name),
                        FadeIn = (float)config.playerprofilesettings.bgfadein,

                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0 0",
                        AnchorMax = "1 1"
                    }
                }
                });
            }
            // Profiles
            PlayerProfile.Add(XPUIPanel(config.playerprofilesettings.InsideAnchorMin, config.playerprofilesettings.InsideAnchorMax, "0 0 0 0"), XPeriencePlayerProfileOutside, XPeriencePlayerProfile);
            string image = XPerienceicon;
            // Player Name, Rank, & Status
            if (otherplayer != null)
            {
                PlayerProfile.Add(XPUILabel($"{otherplayer.displayName}", 1, 0.040f, TextAnchor.LowerLeft, 10, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfile);
                if (config.playerprofilesettings.useplayeravatar)
                {
                    image = otherplayer.UserIDString;
                }
            }
            else
            {
                PlayerProfile.Add(XPUILabel($"{player.displayName}", 1, 0.040f, TextAnchor.LowerLeft, 10, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfile);
                if (config.playerprofilesettings.useplayeravatar)
                {
                    image = player.UserIDString;
                }
            }
            PlayerProfile.Add(new CuiElement
            {
                Parent = XPeriencePlayerProfile,
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", image)
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = $".001 {config.playerprofilesettings.menuheight}",
                        AnchorMax = $"{config.playerprofilesettings.menuwidth - .003} .95"
                    }
                }
            });
            int row = 1;
            // Profile Menu UI
            PlayerProfile.Add(XPUIPanel("0 0", $"{config.playerprofilesettings.menuwidth} {config.playerprofilesettings.menuheight - .005}", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileMenu);
            // Menu Background Img
            if (config.playerprofilesettings.usemenubgimage)
            {
                PlayerProfile.Add(new CuiElement
                {
                    Parent = XPeriencePlayerProfileMenu,
                    Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", XPeriencemenubg),
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = ".01 .01",
                        AnchorMax = ".99 .99"
                    }
                }
                });
            }
            // Menu
            if (otherplayer == player)
            {
                PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol main stats {otherplayer.userID}", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("profile", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol data mentality stats", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("stats", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol data woodcutter skills", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("skills", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            else
            {
                PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol main stats {player.userID}", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=red>◉</color>  {XPLang("myprofile", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
                PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol main stats {otherplayer.userID}", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("profile", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Statistics Button
            PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol history main {otherplayer.userID}", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("statistics", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            // Raids Button
            if (XPerienceAddon != null && RaidableBases != null && config.playerprofilesettings.profilemenuraids)
            {
                PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol raids 0 {otherplayer.userID}", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("raids", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Settings Button
            if (otherplayer == player && config.playerprofilesettings.profilemenusettings)
            {
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol settings", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("settings", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Top Players Button
            if (config.defaultOptions.allowplayersearch)
            {
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol topplayers", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("topplayers", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Welcome Button
            if (XPerienceAddon != null && config.playerprofilesettings.profilemenuwelcome)
            {
                PlayerProfile.Add(XPUIMenuButton($"xp.playercontrol welcome", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#94FF2B>◉</color>  {XPLang("addonwelcome", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Help Button
            if (config.playerprofilesettings.profilemenuhelp)
            {
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol help main", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#ffff00>◉</color>  {XPLang("help", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Calulations Button
            if (config.playerprofilesettings.profilemenucalculations)
            {
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol calculationslevels 0 0", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#00ffff>◉</color>  {XPLang("calculations", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Admin Button
            if (player.IsAdmin && permission.UserHasPermission(player.UserIDString, Admin))
            {
                PlayerProfile.Add(XPUIMenuButton("xp.playercontrol admin", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=#7DF9FF>◉</color>  {XPLang("adminpanel", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            }
            // Close Button
            PlayerProfile.Add(XPUIMenuButton("xp.playercontrol close", row++, buttonheight, buttonfont, "0 0 0 .7", $" <color=red>◉</color>  {XPLang("close", player.UserIDString)}", ".03", ".97", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMenu);
            // UI End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        public void PlayerProfileMain(BasePlayer player, BasePlayer otherplayer = null)
        {
            #region DataHandlers
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (otherplayer != null)
            {
                xprecord = GetXPRecord(otherplayer);
            }
            if (otherplayer == null) otherplayer = player;
            if (xprecord == null) return;
            float height = 0.04f;
            int row = 1;
            int row2 = 1;
            var PlayerProfile = new CuiElementContainer();
            // Stat & Skill Points
            int statpoints = xprecord.MentalityP + xprecord.DexterityP + xprecord.MightP + xprecord.CaptaincyP + xprecord.WeaponryP + xprecord.NinjaryP;
            int skillpoints = xprecord.WoodCutterP + xprecord.SmithyP + xprecord.MinerP + xprecord.ForagerP + xprecord.HunterP + xprecord.FisherP + xprecord.CrafterP + xprecord.FramerP + xprecord.TamerP + xprecord.MedicP + xprecord.ScavengerP + xprecord.ElectricianP + xprecord.DemolitionistP;
            // XP Calulations
            double lastlevel;
            double nextlevel;
            double currentxp;
            double reqxpperc;
            double remainingxp;
            double levelpercent;
            if (xprecord.experience == 0 || xprecord.level == 0)
            {
                lastlevel = 0;
                nextlevel = config.xpLevel.levelstart;
                currentxp = xprecord.experience - lastlevel;
                reqxpperc = currentxp / nextlevel;
                remainingxp = nextlevel - currentxp;
                levelpercent = reqxpperc * 100;
            }
            else
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    lastlevel = xprecord.requiredxp - (xprecord.level * (config.xpLevel.levelmultiplier + (config.xpLevelRanks.levelmultiplierincrease * xprecord.rank)));
                }
                else
                {
                    lastlevel = xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier);
                }
                nextlevel = xprecord.requiredxp - lastlevel;
                currentxp = xprecord.experience - lastlevel;
                reqxpperc = currentxp / nextlevel;
                remainingxp = nextlevel - currentxp;
                levelpercent = reqxpperc * 100;
            }
            #endregion
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0.01", ".99 .99", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerProfileMain);
            // Display
            #region XPerienceData
            PlayerProfile.Add(XPUILabel($"◂════ ⋆ {XPLang("level", player.UserIDString)} / {XPLang("xp", player.UserIDString)} / {XPLang("points", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            // Level
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("level", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.level)}>{String.Format("{0:N0}", xprecord.level)} ({(int)levelpercent}%)</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            // XP
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("experience", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "experience", (int)xprecord.experience)}>{String.Format("{0:N0}", (int)xprecord.experience)}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            // Next Level
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("nextlevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "nextlevel", (int)xprecord.requiredxp)}>{String.Format("{0:N0}", (int)xprecord.requiredxp)}</color> (<color={TextColor(player, "remainingxp", (int)(xprecord.requiredxp - xprecord.experience))}>{String.Format("{0:N0}", (int)(xprecord.requiredxp - xprecord.experience))}</color>)", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            // Points
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("unusedstatpoints", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "unspent", xprecord.statpoint)}>{String.Format("{0:N0}", xprecord.statpoint)}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("unusedskillpoints", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "unspent", xprecord.skillpoint)}>{String.Format("{0:N0}", xprecord.skillpoint)}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            row++;
            PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("totalspent", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
            PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "spent", statpoints + skillpoints)}>{String.Format("{0:N0}", statpoints + skillpoints)}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            if (XPerienceAddon != null)
            {
                double addonbooster = XPerienceAddon.Call<double>("GetBoostersAmount", player) * 100;
                if (addonbooster > 0)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("xpboosteractive", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "experience", addonbooster)}>+{String.Format("{0:N0}", addonbooster)}%</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
            }
            // Economics
            if (Economics != null && config.xpEcon.showbalanceprofile)
            {
                double balance = Economics.Call<double>("Balance", player.UserIDString);
                if (otherplayer != null)
                {
                    balance = Economics.Call<double>("Balance", otherplayer.UserIDString);
                }
                row++;
                PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("econbalance", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", balance)}", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            }
            // Daily Limit
            #region Daily Limits
            DailyLimitPlayer(otherplayer);
            DailyRecord dailyrecord = GetDailyRecord(otherplayer);
            double xplimit = 0;
            switch (config.dailyxpLimit.limitmultipliertype)
            {
                case 1:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                    break;
                case 2:
                    xplimit += config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                    break;
            }
            int statresetlimit = 0;
            int skillresetlimit = 0;
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(otherplayer.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    switch (config.dailyxpLimit.limitmultipliertype)
                    {
                        case 1:
                            xplimit += specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                            break;
                        case 2:
                            xplimit += specialgroup.dailyxplimit + ((specialgroup.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                            break;
                    }
                    statresetlimit = specialgroup.dailystatlimitboost;
                    skillresetlimit = specialgroup.dailyskilllimitboost;
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            var getlastxpreset = dailyrecord.lastexperiencereset - DateTime.Now;
            double lastxpresethours = double.Parse(getlastxpreset.Hours.ToString());
            double lastxpresetmins = double.Parse(getlastxpreset.Minutes.ToString());
            string dailyxpresetlabelhours = "hours";
            string dailyxpresetlabelmins = "mins";
            switch (config.dailyxpLimit.limitmultipliertype)
            {
                case 1:
                    if (!UserHasSpecialGroup)
                    {
                        xplimit = config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                    }
                    if (permission.UserHasPermission(otherplayer.UserIDString, VIP) && !UserHasSpecialGroup)
                    {
                        xplimit = config.dailyxpLimit.dailyxplimitvip + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitpercentage) * xprecord.level);
                    }
                    break;
                case 2:
                    if (!UserHasSpecialGroup)
                    {
                        xplimit = config.dailyxpLimit.dailyxplimit + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                    }
                    if (permission.UserHasPermission(otherplayer.UserIDString, VIP) && !UserHasSpecialGroup)
                    {
                        xplimit = config.dailyxpLimit.dailyxplimitvip + ((config.dailyxpLimit.dailyxplimit * config.dailyxpLimit.limitmultiplier) * xprecord.level);
                    }
                    break;
            }
            if (config.dailyxpLimit.enabledailyxplimit || config.dailyresetLimit.enabledailyresetlimit)
            {
                row++;
                row++;
                PlayerProfile.Add(XPUILabel($"◂════ ⋆ Daily Limits ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                row++;
                PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> Resets In:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "spent", (int)lastxpresethours)}>{(int)lastxpresethours}</color> {dailyxpresetlabelhours} <color={TextColor(player, "spent", (int)lastxpresetmins)}>{(int)lastxpresetmins}</color> {dailyxpresetlabelmins}", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
            }
            if (config.dailyxpLimit.enabledailyxplimit)
            {
                if (xplimit > 0)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> XP Limit:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "nextlevel", (int)xplimit)}>{(int)xplimit}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.25", "1 1 1 1"), XPeriencePlayerProfileMain);
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> XP Remaining:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "remainingxp", (int)dailyrecord.dailyexperience)}>{(int)xplimit - (int)dailyrecord.dailyexperience}</color>", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
                else
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> XP Limit:", row, height, TextAnchor.MiddleLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "nextlevel", (int)xplimit)}>∞</color> (<color={TextColor(player, "remainingxp", (int)dailyrecord.dailyexperience)}>{(int)dailyrecord.dailyexperience}</color>)", row, height, TextAnchor.MiddleLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
            }
            if (config.dailyresetLimit.enabledailyresetlimit)
            {
                statresetlimit += config.dailyresetLimit.dailystatlimit;
                if (permission.UserHasPermission(otherplayer.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    statresetlimit = config.dailyresetLimit.dailystatlimitvip;
                }
                if (statresetlimit > 0)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> Stat Resets:", row, height, TextAnchor.UpperLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"{statresetlimit - dailyrecord.dailystatresets}", row, height, TextAnchor.UpperLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
                else
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> Stat Resets:", row, height, TextAnchor.UpperCenter, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"∞ ({dailyrecord.dailystatresets})", row, height, TextAnchor.UpperCenter, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                }

                skillresetlimit += config.dailyresetLimit.dailyskilllimit;
                if (permission.UserHasPermission(otherplayer.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    skillresetlimit = config.dailyresetLimit.dailyskilllimitvip;
                }
                if (skillresetlimit > 0)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> Skill Resets:", row, height, TextAnchor.UpperLeft, 11, "0.01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"{skillresetlimit - dailyrecord.dailyskillresets}", row, height, TextAnchor.UpperLeft, 11, "0.16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
                else
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> Skill Resets:", row, height, TextAnchor.UpperCenter, 11, "0", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"∞ ({dailyrecord.dailyskillresets})", row, height, TextAnchor.UpperCenter, 11, ".16", "0.50", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
            }
            #endregion
            // Rank
            if (config.xpLevelRanks.enableresetranks)
            {
                Ranks rank = GetXPRank(xprecord.rank);
                row++;
                row++;
                PlayerProfile.Add(XPUILabel($"◂════ ⋆ {XPLang("rank", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 12, ".01", ".5", "1 1 1 1"), XPeriencePlayerProfileMain);
                row++;
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, rank.name, row, height, "0.11", "0.16"));
                row++;
                PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("rank", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, ".01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.name}</color>", row, height, TextAnchor.MiddleLeft, 11, ".16", ".5", "1 1 1 1"), XPeriencePlayerProfileMain);
                row++;
                PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("ranksig", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, ".01", "0.16", "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "rankname", xprecord.rank)}>{rank.sig}</color>", row, height, TextAnchor.MiddleLeft, 11, ".16", ".5", "1 1 1 1"), XPeriencePlayerProfileMain);
                if (config.xpLevelRanks.showtruelevelprofile)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("ranklevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, ".01", ".16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "ranklevel", xprecord.truelevel)}>{String.Format("{0:N0}", xprecord.truelevel)}</color>", row, height, TextAnchor.MiddleLeft, 11, ".16", ".5", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
                if (config.xpLevelRanks.showtruexpprofile)
                {
                    row++;
                    PlayerProfile.Add(XPUILabel($"<color=red>▫ </color> {XPLang("rankxp", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, ".01", ".16", "1 1 1 1"), XPeriencePlayerProfileMain);
                    PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "rankxp", xprecord.trueexperience)}>{String.Format("{0:N0}", xprecord.trueexperience)}</color>", row, height, TextAnchor.MiddleLeft, 11, ".16", ".5", "1 1 1 1"), XPeriencePlayerProfileMain);
                }
                if (xprecord.level >= config.xpLevel.maxlevel && xprecord.DisableRank)
                {
                    row++;
                    row++;
                    PlayerProfile.Add(XPUIButton($"xp.playeredits rankup", row, height, 10, "0 1 0 .25", "Rank Up", ".05", ".25", TextAnchor.MiddleCenter, $"1 1 1 1"), XPeriencePlayerProfileMain);
                }
            }
            #endregion
            // Stat / Skills
            #region Stat/Skills
            PlayerProfile.Add(XPUILabel($"◂════ ⋆ {XPLang("stats", player.UserIDString)} ⋆ ════▸", row2, height, TextAnchor.MiddleLeft, 12, ".52", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
            row2++;
            if (config.mentality.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencementality, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data mentality stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"mentality", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Mentality)}>{xprecord.Mentality}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.dexterity.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencedexterity, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data dexterity stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"dexterity", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Dexterity)}>{xprecord.Dexterity}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.might.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencemight, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data might stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"might", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Might)}>{xprecord.Might}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.weaponry.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceweaponry, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data weaponry stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"weaponry", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Weaponry)}>{xprecord.Weaponry}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.ninjary.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceninjary, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data ninjary stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"ninjary", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Ninjary)}>{xprecord.Ninjary}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.captaincy.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencecaptaincy, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data captaincy stats", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"captaincy", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Captaincy)}>{xprecord.Captaincy}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            row2++;
            PlayerProfile.Add(XPUILabel($"◂════ ⋆ {XPLang("skills", player.UserIDString)} ⋆ ════▸", row2, height, TextAnchor.MiddleLeft, 12, ".52", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
            row2++;
            if (config.woodcutter.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencewoodcutter, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data woodcutter skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"woodcutter", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.WoodCutter)}>{xprecord.WoodCutter}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.smithy.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencesmithy, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data smithy skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"smithy", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Smithy)}>{xprecord.Smithy}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.miner.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceminer, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data miner skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"miner", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Miner)}>{xprecord.Miner}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.forager.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceforager, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data forager skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"forager", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Forager)}>{xprecord.Forager}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.hunter.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencehunter, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data hunter skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"hunter", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Hunter)}>{xprecord.Hunter}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.crafter.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencecrafter, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data crafter skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"crafter", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Crafter)}>{xprecord.Crafter}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.framer.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceframer, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data framer skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"framer", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Framer)}>{xprecord.Framer}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.fisher.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencefisher, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data fisher skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"fisher", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Fisher)}>{xprecord.Fisher}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.medic.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencemedic, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data medic skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"medic", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Medic)}>{xprecord.Medic}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.scavenger.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencescavenger, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data scavenger skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"scavenger", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Scavenger)}>{xprecord.Scavenger}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.electrician.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPerienceelectrician, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data electrician skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"electrician", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Electrician)}>{xprecord.Electrician}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.demolitionist.maxlvl > 0)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencedemolitionist, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data demolitionist skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"demolitionist", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Demolitionist)}>{xprecord.Demolitionist}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            if (config.tamer.maxlvl > 0 && config.tamer.enabletame)
            {
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileMain, XPeriencetamer, row2, height, "0.52", "0.54"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data tamer skills", row2, height, 11, "0 0 0 0", $"<color=red>▫ </color> {XPLang($"tamer", player.UserIDString)}:", ".55", ".80", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileMain);
                PlayerProfile.Add(XPUILabel($"<color={TextColor(player, "mainlevel", (int)xprecord.Tamer)}>{xprecord.Tamer}</color>", row2, height, TextAnchor.MiddleLeft, 11, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileMain);
                row2++;
            }
            #endregion
            // UI End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        private void PlayerProfileStatsAndSkills(BasePlayer player, string data, string type = "stats")
        {
            if (player == null || data == null) return;
            #region Data
            XPRecord xprecord = GetXPRecord(player);
            float iconheight = 0.20f;
            float iconimgheight = 0.10f;
            double iconstats = IconAdjustment(.30, "stats");
            double iconskills = IconAdjustment(.05, "skills");
            float labelheight = 0.11f;
            float height = 0.05f;
            float buttonheight = 0.035f;
            string textcolor = "perk";
            string level = "Max";
            string cost = "N/A";
            double levelcolor = 0;
            if (xprecord.rank > 0 && !xprecord.DisableRank && (config.xpLevelRanks.rankskillboost || config.xpLevelRanks.rankstatboost))
            {
                textcolor = "ranklevel";
            }
            int row = 6;
            int rowtwo = 6;
            int buttonrow = 25;
            bool showdata = false;
            bool levelup = false;
            bool reset = false;
            int totalpoints = 0;
            int pointsleft = 0;
            int pointsspent = 0;
            int pointsavailable = 0;
            int maxlevel = 0;
            int stat = 0;
            int skill = 0;
            switch (type)
            {
                case "stats":
                    pointsavailable = xprecord.statpoint;
                    break;
                case "skills":
                    pointsavailable = xprecord.skillpoint;
                    break;
            }
            #endregion
            #region Timers
            // Stat & Skill Timers
            TimeSpan interval;
            int timer = 0;
            switch (type)
            {
                case "stats":
                    DateTime resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.resetminsstats);
                    if (permission.UserHasPermission(player.UserIDString, VIP))
                    {
                        resettimestats = xprecord.resettimerstats.AddMinutes(config.defaultOptions.vipresetminstats);
                    }
                    interval = resettimestats - DateTime.Now;
                    timer = (int)interval.TotalMinutes;
                    if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
                    {
                        timer = 0;
                    }
                    break;
                case "skills":
                    DateTime resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.resetminsskills);
                    if (permission.UserHasPermission(player.UserIDString, VIP))
                    {
                        resettimeskills = xprecord.resettimerskills.AddMinutes(config.defaultOptions.vipresetminsskills);
                    }
                    interval = resettimeskills - DateTime.Now;
                    timer = (int)interval.TotalMinutes;
                    if (config.defaultOptions.bypassadminreset && (player.IsAdmin || permission.UserHasPermission(player.UserIDString, Admin)))
                    {
                        timer = 0;
                    }
                    break;
            }
            #endregion
            #region Daily Limits
            DailyLimitPlayer(player);
            DailyRecord dailyrecord = GetDailyRecord(player);
            int statresetlimit = 0;
            int skillresetlimit = 0;
            string resetlabel = "";
            bool UserHasSpecialGroup = false;
            // Check Special Groups
            var highestpriority = config.specialGroups.specialgroups.Values.Max(i => i.grouppriority);
            var getgrouplist = config.specialGroups.specialgroups.Values.OrderByDescending(i => i.grouppriority);
restart:
            foreach (var specialgroup in getgrouplist)
            {
                UserHasSpecialGroup = permission.UserHasGroup(player.UserIDString, specialgroup.permissionname);
                if (UserHasSpecialGroup && specialgroup.grouppriority == highestpriority)
                {
                    statresetlimit = specialgroup.dailystatlimitboost;
                    skillresetlimit = specialgroup.dailyskilllimitboost;
                    break;
                }
                else if (UserHasSpecialGroup && specialgroup.grouppriority != highestpriority)
                {
                    highestpriority--;
                    goto restart;
                }
            }
            var getlastxpreset = dailyrecord.lastexperiencereset - DateTime.Now;
            double lastxpresethours = double.Parse(getlastxpreset.Hours.ToString());
            double lastxpresetmins = double.Parse(getlastxpreset.Minutes.ToString());
            if (config.dailyresetLimit.enabledailyresetlimit)
            {
                statresetlimit += config.dailyresetLimit.dailystatlimit;
                if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    statresetlimit = config.dailyresetLimit.dailystatlimitvip;
                }
                skillresetlimit += config.dailyresetLimit.dailyskilllimit;
                if (permission.UserHasPermission(player.UserIDString, VIP) && !UserHasSpecialGroup)
                {
                    skillresetlimit = config.dailyresetLimit.dailyskilllimitvip;
                }
                switch (type)
                {
                    case "stats":
                        if (statresetlimit > 0)
                        {
                            resetlabel = $"({statresetlimit - dailyrecord.dailystatresets})";
                        }
                        break;
                    case "skills":
                        if (skillresetlimit > 0)
                        {
                            resetlabel = $"({skillresetlimit - dailyrecord.dailyskillresets})";
                        }
                        break;
                }
            }
            #endregion
            // Main UI
            var StatsAndSkills = new CuiElementContainer();
            if (config.playerprofilesettings.menutype == 1)
            {
                StatsAndSkills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .904", ".99 1", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileStatsAndSkillsMenu);
                switch (type)
                {
                    case "stats":
                        if (config.mentality.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencementality, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data mentality stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconstats += .07;
                        }
                        if (config.dexterity.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencedexterity, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data dexterity stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconstats += .07;
                        }
                        if (config.might.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencemight, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data might stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconstats += .07;
                        }
                        if (config.weaponry.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceweaponry, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data weaponry stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconstats += .07;
                        }
                        if (config.ninjary.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceninjary, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data ninjary stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconstats += .07;
                        }
                        if (config.captaincy.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencecaptaincy, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data captaincy stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                        }
                        break;
                    case "skills":
                        if (config.woodcutter.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencewoodcutter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data woodcutter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.smithy.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencesmithy, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data smithy skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.miner.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceminer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data miner skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.forager.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceforager, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data forager skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.hunter.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencehunter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data hunter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.crafter.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencecrafter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data crafter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.framer.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceframer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data framer skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.fisher.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencefisher, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data fisher skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.medic.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencemedic, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data medic skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.scavenger.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencescavenger, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data scavenger skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.electrician.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceelectrician, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data electrician skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.demolitionist.maxlvl > 0)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencedemolitionist, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data demolitionist skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            iconskills += .07;
                        }
                        if (config.tamer.enabletame && (PersonalAnimal != null))
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencetamer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol data tamer skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                        }
                        break;
                }
                StatsAndSkills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .01", ".99 .92", "0 0 0 0.50"), XPeriencePlayerProfile, XPeriencePlayerProfileStatsAndSkills);
            }
            if (config.playerprofilesettings.menutype == 2)
            {
                StatsAndSkills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .01", ".99 .99", "0 0 0 .50"), XPeriencePlayerProfile, XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, SelectedIcon("prev", data), 1, iconimgheight, ".05", ".1"));
                StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, SelectedIcon("next", data), 1, iconimgheight, ".9", ".95"));
                StatsAndSkills.Add(XPUIButton($"xp.playercontrol data {SelectedData("prev", data)} {type}", 1, iconimgheight, 22, "0 0 0 0", "⇦", ".01", ".1", TextAnchor.MiddleLeft, "0 1 0 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUIButton($"xp.playercontrol data {SelectedData("next", data)} {type}", 1, iconimgheight, 22, "0 0 0 0", "⇨", ".9", ".99", TextAnchor.MiddleRight, "0 1 0 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUIButton($"xp.playercontrol data {SelectedData("prev", data)} {type}", 3, height, 8, "0 0 0 0", $"({XPLang($"{SelectedData("prev", data.ToLower())}", player.UserIDString)})", ".01", ".12", TextAnchor.UpperCenter, "1 1 1 .25"), XPeriencePlayerProfileStatsAndSkills); ;
                StatsAndSkills.Add(XPUIButton($"xp.playercontrol data {SelectedData("next", data)} {type}", 3, height, 8, "0 0 0 0", $"({XPLang($"{SelectedData("next", data.ToLower())}", player.UserIDString)})", ".88", ".99", TextAnchor.UpperCenter, "1 1 1 .25"), XPeriencePlayerProfileStatsAndSkills);
            }
            // Show Stat or Skill Data
            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, $"XPerience{data.ToLower()}", 1, iconheight, "0.45", "0.55"));
            StatsAndSkills.Add(XPUIButton($"xp.playercontrol help {data} {type}", 2, labelheight, 18, "0 0 0 0", $"{XPLang($"{data.ToLower()}", player.UserIDString)}", ".01", ".99", TextAnchor.LowerCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
            switch (data)
            {
                // Stats
                case "mentality":

                    // Disabled
                    if (config.mentality.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Has Permission
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermMentality)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Mentality;
                        int MentalityCost = (xprecord.Mentality + 1) * config.mentality.costmultiplier;
                        if (xprecord.Mentality < 1)
                        {
                            MentalityCost = config.mentality.pointcoststart;
                        }
                        if (xprecord.Mentality < config.mentality.maxlvl)
                        {
                            level = $"{xprecord.Mentality}";
                            cost = $"{MentalityCost}";
                            levelcolor = xprecord.Mentality;
                        }
                        for (int i = 1; i <= config.mentality.maxlvl; i++)
                        {
                            int costmultiplier = config.mentality.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.mentality.pointcoststart - config.mentality.costmultiplier;
                        pointsleft = totalpoints - xprecord.MentalityP;
                        pointsspent = xprecord.MentalityP;
                        maxlevel = config.mentality.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Mentality < config.mentality.maxlvl && (MentalityCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Mentality > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Mentality > 0 || config.playerprofilesettings.showunusedeffects) && config.mentality.maxlvl != 0)
                        {
                            if (config.mentality.locktechtree && config.mentality.unlocktechtreelevel > 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("techtreestatus", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                string techtreestatus = "Locked";
                                string techstatuscolor = "red";
                                if (xprecord.Mentality >= config.mentality.unlocktechtreelevel)
                                {
                                    techtreestatus = "Unlocked";
                                    techstatuscolor = "green";
                                }
                                StatsAndSkills.Add(XPUILabel($"<color={techstatuscolor}>{techtreestatus}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.mentality.researchcost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("researchcost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.mentality.researchcost, config.Rankboostssettings.researchcost)}>-{RankBoosts(player, "stat", (xprecord.Mentality * config.mentality.researchcost), config.Rankboostssettings.researchcost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.mentality.researchspeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("researchspeed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.mentality.researchspeed, config.Rankboostssettings.researchspeed)}>-{RankBoosts(player, "stat", (xprecord.Mentality * config.mentality.researchspeed), config.Rankboostssettings.researchspeed) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.mentality.criticalchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("critchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.mentality.criticalchance)}>+{(xprecord.Mentality * config.mentality.criticalchance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.mentality.criticaldgm != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("critdmgamount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.mentality.criticaldgm)}>+{(xprecord.Mentality * config.mentality.criticaldgm) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.mentality.damageincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.mentality}>{XPLang("damagenpc", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.mentality.damageincrease)}>+{(xprecord.Mentality * config.mentality.damageincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "dexterity":
                    // Disabled
                    if (config.dexterity.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermDexterity)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Dexterity;
                        int DexterityCost = (xprecord.Dexterity + 1) * config.dexterity.costmultiplier;
                        if (xprecord.Dexterity < 1)
                        {
                            DexterityCost = config.dexterity.pointcoststart;
                        }
                        if (xprecord.Dexterity < config.dexterity.maxlvl)
                        {
                            level = $"{xprecord.Dexterity}";
                            cost = $"{DexterityCost}";
                            levelcolor = xprecord.Dexterity;
                        }
                        for (int i = 1; i <= config.dexterity.maxlvl; i++)
                        {
                            int costmultiplier = config.dexterity.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.dexterity.pointcoststart - config.dexterity.costmultiplier;
                        pointsleft = totalpoints - xprecord.DexterityP;
                        pointsspent = xprecord.DexterityP;
                        maxlevel = config.dexterity.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Dexterity < config.dexterity.maxlvl && (DexterityCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Dexterity > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Dexterity > 0 || config.playerprofilesettings.showunusedeffects) && config.dexterity.maxlvl != 0)
                        {
                            if (config.dexterity.blockchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("blockchance", player.UserIDString)}</color>: (<color=yellow>Damage</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.blockchance, config.Rankboostssettings.block)}>+{(xprecord.Dexterity * config.dexterity.blockchance) * 100}%</color> (<color={TextColor(player, $"{textcolor}", config.dexterity.blockamount)}>-{RankBoosts(player, "stat", (xprecord.Dexterity * config.dexterity.blockamount), config.Rankboostssettings.block) * 100}%</color>)", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.dodgechance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("dodgechance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.dodgechance)}>+{(xprecord.Dexterity * config.dexterity.dodgechance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.reducearmordmg != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("armordmgabsorb", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.dexterity.reducearmordmg, config.Rankboostssettings.armor)}>-{RankBoosts(player, "stat", (xprecord.Dexterity * config.dexterity.reducearmordmg), config.Rankboostssettings.armor) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.horsespeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("horsespeed", player.UserIDString)}</color>: (<color=yellow>USE key</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.horsespeed)}>+{(xprecord.Dexterity * config.dexterity.horsespeed) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.boatspeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("boatspeed", player.UserIDString)}</color>: (<color=yellow>RELOAD key</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.boatspeed)}>+{(xprecord.Dexterity * config.dexterity.boatspeed) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.vehiclespeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("vehiclespeed", player.UserIDString)}</color>: (<color=yellow>RELOAD key</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.vehiclespeed)}>+{(xprecord.Dexterity * config.dexterity.vehiclespeed) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.dexterity.fuelreduce != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.dexterity}>{XPLang("vehiclefuelreduce", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.dexterity.fuelreduce)}>+{(xprecord.Dexterity * config.dexterity.fuelreduce) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
         